(this.webpackJsonpent_emr_dev=this.webpackJsonpent_emr_dev||[]).push([[0],{100:function(e,t,a){},101:function(e,t,a){},103:function(e,t,a){},106:function(e,t,a){},107:function(e,t,a){},108:function(e,t,a){},109:function(e,t,a){"use strict";a.r(t);var n=a(0),r=a.n(n),i=a(38),o=a.n(i),l=(a(81),a(82),a(22)),c=a(23),s=a(25),m=a(24),d=a(26),p=a(31),u=a(34),h=a(2),f=a(1),g=a(14),y=(a(63),r.a.createContext({token:null,userId:null,user:{},users:[],selectedUser:{},selectedPatient:{},selectedAppointment:{},patient:{},appointment:{},appointmentPatientId:null,userUpdateField:null,patientUpdateField:null,appointmentUpdateField:null,appointmentsToday:null,appointmentsWeekImportant:null,appointmentsInProgress:null,userAlert:null,visit:null,login:function(e,t,a){},logout:function(){}})),E=a(55),v=(a(83),function(e){var t="<alerts>";return null!==e.alert&&(console.log("alert incoming!!"),t='"'+e.alert+'"'),console.log("\n      alert: ".concat(t,",\n    ")),r.a.createElement("div",{className:"alertBox"},r.a.createElement(E.a,{variant:"warning"},t))}),b=function(e){function t(){var e,a;Object(l.a)(this,t);for(var n=arguments.length,r=new Array(n),i=0;i<n;i++)r[i]=arguments[i];return(a=Object(s.a)(this,(e=Object(m.a)(t)).call.apply(e,[this].concat(r)))).state={userAlert:null},a.submitHandler=function(e){console.log("login function..."),e.preventDefault();var t=e.target.formBasicEmail.value,n=e.target.formBasicPassword.value;if(0!==t.trim().length&&0!==n.trim().length){var r={query:'\n        query {\n          login(email: "'.concat(t,'", password: "').concat(n,'") {\n            userId\n            token\n            tokenExpiration\n          }\n        }\n      ')};fetch("http://localhost:10000/graphql",{method:"POST",body:JSON.stringify(r),headers:{"Content-Type":"application/json"}}).then((function(e){if(200!==e.status&&201!==e.status)throw new Error("Failed!");return e.json()})).then((function(e){var t=JSON.stringify(e.data).slice(0,8);console.log("\n          resData slice: ".concat(t,",\n          resData: ").concat(JSON.stringify(e.data),",\n          ")),a.setState({userAlert:t}),e.data.login.token&&a.context.login(e.data.login.token,e.data.login.userId,e.data.login.tokenExpiration)})).catch((function(e){console.log(e),a.setState({userAlert:e})}))}},a}return Object(d.a)(t,e),Object(c.a)(t,[{key:"render",value:function(){return r.a.createElement(g.a,null,r.a.createElement(v,{authUserId:this.context.userId,alert:this.state.userAlert}),r.a.createElement(f.a,{className:"auth-form",onSubmit:this.submitHandler},r.a.createElement(f.a.Group,{controlId:"formBasicEmail"},r.a.createElement(f.a.Label,null,"Email address"),r.a.createElement(f.a.Control,{type:"email",placeholder:"Enter email"}),r.a.createElement(f.a.Text,{className:"text-muted"},"We'll never share your email with anyone else.")),r.a.createElement(f.a.Group,{controlId:"formBasicPassword"},r.a.createElement(f.a.Label,null,"Password"),r.a.createElement(f.a.Control,{type:"password",placeholder:"Password"})),r.a.createElement(h.a,{variant:"outline-success",type:"submit",className:"loginButton",size:"lg"},"Login"),r.a.createElement(h.a,{variant:"outline-warning",className:"loginButton",size:"lg"},r.a.createElement(p.b,{to:"/signup"},"Signup"))))}}]),t}(n.Component);b.contextType=y;var D=b,S=a(3),P=a(8),C=a(5),x=(a(96),a(13),function(e){return console.log("CreateUserForm...",Object(P.a)({},e)),r.a.createElement("div",{className:"CreateFormContainer"},r.a.createElement(f.a,{onSubmit:e.onConfirm},r.a.createElement(f.a.Row,null,r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridEmail"},r.a.createElement(f.a.Label,null,"Email"),r.a.createElement(f.a.Control,{type:"email",placeholder:"Enter email"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridPassword"},r.a.createElement(f.a.Label,null,"Password"),r.a.createElement(f.a.Control,{type:"password",placeholder:"Password"}))),r.a.createElement(f.a.Row,null,r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridName"},r.a.createElement(f.a.Label,null,"Name"),r.a.createElement(f.a.Control,{type:"text",placeholder:"Name"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridRole"},r.a.createElement(f.a.Label,null,"Role"),r.a.createElement(f.a.Control,{as:"select"},r.a.createElement("option",null,"guest"),r.a.createElement("option",null,"nurse"),r.a.createElement("option",null,"doctor"),r.a.createElement("option",null,"staff"))),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridPhone"},r.a.createElement(f.a.Label,null,"Phone"),r.a.createElement(f.a.Control,{type:"number",placeholder:"phone"}))),r.a.createElement(f.a.Row,null,r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridDob"},r.a.createElement(f.a.Label,null,"D.O.B"),r.a.createElement(f.a.Control,{type:"date",placeholder:"dob"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridEmploymentDate"},r.a.createElement(f.a.Label,null,"Employment Date"),r.a.createElement(f.a.Control,{type:"date",placeholder:"employmentDate"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridTerminationDate"},r.a.createElement(f.a.Label,null,"Termination Date"),r.a.createElement(f.a.Control,{type:"date",placeholder:"terminationDate"}))),r.a.createElement(f.a.Row,null,r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridAddressNumber"},r.a.createElement(f.a.Label,null,"addressNumber"),r.a.createElement(f.a.Control,{type:"number",placeholder:"addressNumber"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridAddressStreet"},r.a.createElement(f.a.Label,null,"addressStreet"),r.a.createElement(f.a.Control,{type:"text",placeholder:"addressStreet"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridAddressTown"},r.a.createElement(f.a.Label,null,"addressTown"),r.a.createElement(f.a.Control,{type:"text",placeholder:"addressTown"}))),r.a.createElement(f.a.Row,null,r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridAddressParish"},r.a.createElement(f.a.Label,null,"addressParish"),r.a.createElement(f.a.Control,{type:"text",placeholder:"addressParish"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridAddressPostOffice"},r.a.createElement(f.a.Label,null,"addressPostOffice"),r.a.createElement(f.a.Control,{type:"text",placeholder:"addressPostOffice"}))),e.canCancel&&r.a.createElement(C.a.Toggle,{as:h.a,variant:"danger",eventKey:"0",className:"btn",onClick:e.onCancel},"Cancel"),e.canConfirm&&r.a.createElement(h.a,{variant:"success",type:"submit"},"Create"),r.a.createElement("p",null,e.successText)))}),I=function(e){function t(){var e,a;Object(l.a)(this,t);for(var n=arguments.length,r=new Array(n),i=0;i<n;i++)r[i]=arguments[i];return(a=Object(s.a)(this,(e=Object(m.a)(t)).call.apply(e,[this].concat(r)))).state={success:"Signup!!",userAlert:null},a.modalConfirmHandler=function(e){e.preventDefault(),console.log("signing up..."),console.log("CreateUserFormData:  ",e.target.formGridEmail.value),a.setState({creating:!1});var t=e.target.formGridEmail.value,n=e.target.formGridPassword.value,r=e.target.formGridName.value,i=e.target.formGridRole.value,o=e.target.formGridDob.value,l=e.target.formGridPhone.value,c=e.target.formGridAddressNumber.value,s=e.target.formGridAddressStreet.value,m=e.target.formGridAddressTown.value,d=e.target.formGridAddressParish.value,p=e.target.formGridAddressPostOffice.value,u=e.target.formGridEmploymentDate.value,h=e.target.formGridTerminationDate.value;if(0===t.trim().length||0===n.trim().length||0===r.trim().length||0===i.trim().length||0===o.trim().length||0===l.trim().length||0===c.trim().length||0===s.trim().length||0===m.trim().length||0===d.trim().length||0===p.trim().length||0===u.trim().length||0===h.trim().length)return console.log("blank fields detected!!!...Please try again..."),void a.setState({userAlert:"blank fields detected!!!...Please try again..."});var f=a.context.token,g=a.context.userId;console.log("\n      creating user...\n      userId: ".concat(g,"\n      email: ").concat(t,",\n      password: ").concat(n,",\n      name: ").concat(r,",\n      role: ").concat(i,",\n      dob: ").concat(o,",\n      phone: ").concat(l,",\n      addressNumber: ").concat(c,",\n      addressStreet: ").concat(s,",\n      addressTown: ").concat(m,",\n      addressParish: ").concat(d,",\n      addressPostOffice: ").concat(p,",\n      employmentDate: ").concat(u,",\n      terminationDate: ").concat(h,",\n      ")),a.setState({userAlert:"creating user..."});var y={query:'\n          mutation {\n            createUser(userInput: {email:"'.concat(t,'",password:"').concat(n,'",name:"').concat(r,'",role:"').concat(i,'",\n\n            employmentDate:"').concat(u,'",terminationDate:"').concat(h,'"})\n            {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}\n          }\n        ')};fetch("http://localhost:10000/graphql",{method:"POST",body:JSON.stringify(y),headers:{"Content-Type":"application/json",Authorization:"Bearer "+f}}).then((function(e){if(200!==e.status&&201!==e.status)throw new Error("Failed!");return e.json()})).then((function(e){console.log("response data... "+JSON.stringify(e)),console.log("resData head slice:  ",JSON.stringify(e).slice(2,7)),"error"===JSON.stringify(e).slice(2,7)?(console.log("signup...failed..."),a.setState({success:"Something went wrong!!!"})):(a.setState({success:"Signup success...Proceed to login"}),console.log(a.state.success)),a.setState({userAlert:JSON.stringify(e).slice(2,7)})})).catch((function(e){console.log(e),a.setState({userAlert:e})}))},a}return Object(d.a)(t,e),Object(c.a)(t,[{key:"render",value:function(){return r.a.createElement(r.a.Fragment,null,r.a.createElement(g.a,null,r.a.createElement(v,{authUserId:this.context.userId,alert:this.state.userAlert}),r.a.createElement(S.a,{className:"signupRow",md:8},r.a.createElement(x,{canConfirm:!0,onConfirm:this.modalConfirmHandler,onSubmit:this.modalConfirmHandler,confirmText:"Confirm",successText:this.state.success}))))}}]),t}(n.Component),A=a(40),N=a(18),O=a(19),T=a(6),U=a(4),G=(a(41),function(e){return r.a.createElement("li",{key:e.userId,className:"users__list-item"},r.a.createElement("div",null,r.a.createElement("h5",{className:"userItemHeading"}," Name:"),r.a.createElement("p",{className:"userItemText"},e.name),r.a.createElement("h5",{className:"userItemHeading"}," Role:"),r.a.createElement("p",{className:"userItemText"},e.role)),r.a.createElement("div",null,r.a.createElement(h.a,{variant:"primary",onClick:e.onDetail.bind(void 0,e._id)},"Details")))}),w=(a(42),function(e){var t=e.users.map((function(t){return r.a.createElement(G,{key:t._id,userId:e.authUserId,_id:t._id,name:t.name,email:t.email,role:t.role,onDetail:e.onViewDetail})}));return r.a.createElement("ul",{className:"user__list1"},t)}),F=function(e){return r.a.createElement("li",{key:e.userId,className:"users__list-item"},r.a.createElement("div",null,r.a.createElement("p",{className:"userItemHeading"}," Name:"),r.a.createElement("p",{className:"userItemText"},e.name),r.a.createElement("p",{className:"userItemHeading"}," Role:"),r.a.createElement("p",{className:"userItemText"},e.role)),r.a.createElement("div",null,r.a.createElement(h.a,{variant:"primary",onClick:e.onDetail.bind(void 0,e._id)},"Details")))},_=function(e){console.log(" search user list:  ",e.searchUsers);var t=e.searchUsers.map((function(t){return r.a.createElement(r.a.Fragment,null,r.a.createElement(F,{key:t._id,userId:e.authUserId,_id:t._id,name:t.name,email:t.email,role:t.role,onDetail:e.onViewDetail}))}));return r.a.createElement("ul",{className:"user__list1"},t)},k=a(10),L=(a(69),function(e){return r.a.createElement("li",{key:e.userId,className:"users__list-item"},r.a.createElement("div",null,r.a.createElement("p",null," Date: ",e.date),r.a.createElement("p",null,"Status: ",e.status),r.a.createElement("p",null,"Description: ",e.description)),!0===e.canDelete&&r.a.createElement(h.a,{variant:"danger",onClick:e.onDelete.bind(void 0,e.attendance)},"Delete"))}),J=function(e){console.log("user attendance list props",e.userAttendance);var t=e.userAttendance.map((function(t){var a=t.date;return null!==a&&(a=new Date(1e3*t.date.substr(0,10)).toISOString().slice(0,10),console.log("userAttendanceDate",a)),r.a.createElement(L,{key:t.date,userId:e.authUserId,date:a,status:t.status,description:t.description,canDelete:e.canDelete,onDelete:e.onDelete,attendance:t})}));return r.a.createElement("ul",{className:"user__list1"},t)},j=function(e){return r.a.createElement("li",{key:e.userId,className:"users__list-item"},r.a.createElement("div",null,r.a.createElement("p",null," Type: ",e.type),r.a.createElement("p",null,"From: ",e.startDate),r.a.createElement("p",null,"To: ",e.endDate)),!0===e.canDelete&&r.a.createElement(h.a,{variant:"danger",onClick:e.onDelete.bind(void 0,e.leave)},"Delete"))},K=function(e){console.log("user leave list props",e.userLeave);var t=e.userLeave.map((function(t){var a=new Date(1e3*t.startDate.substr(0,10)).toISOString().slice(0,10),n=new Date(1e3*t.endDate.substr(0,10)).toISOString().slice(0,10);return r.a.createElement(j,{key:t.type,userId:e.authUserId,type:t.type,startDate:a,endDate:n,description:t.description,canDelete:e.canDelete,onDelete:e.onDelete,leave:t})}));return r.a.createElement("ul",{className:"user__list1"},t)},H=function(e){return r.a.createElement("li",{key:e.userId,className:"users__list-item"},r.a.createElement("div",null,r.a.createElement("p",null," Name: ",e.name),r.a.createElement("p",null,"Format: ",e.format),r.a.createElement("p",null,"Path: ",e.path)),!0===e.canDelete&&r.a.createElement(h.a,{variant:"danger",onClick:e.onDelete.bind(void 0,e.attachment)},"Delete"))},B=function(e){console.log("user attachment list props",e.userAttachment);var t=e.userAttachment.map((function(t){return r.a.createElement(H,{key:t.name,userId:e.authUserId,name:t.name,format:t.format,path:t.path,canDelete:e.canDelete,onDelete:e.onDelete,attachment:t})}));return r.a.createElement("ul",{className:"user__list1"},t)},q=(a(98),function(e){var t=Object(k.a)({},e.user),a=e.authUserId,n=t.attendance,i=t.leave,o=t.attachments,l=(JSON.stringify(e.AuthContext.selectedUser),new Date(1e3*t.employmentDate.substr(0,10)).toISOString().slice(0,10)),c=new Date(1e3*t.terminationDate.substr(0,10)).toISOString().slice(0,10);return console.log("UserDetail.props.authUserId:  ",a,"  UserDetail.props.user:  ",Object(P.a)({},t)),r.a.createElement("div",{className:"UserDetailBox1"},r.a.createElement(O.a,{defaultActiveKey:"profile",id:"uncontrolled-tab-example",className:"tab"},r.a.createElement(T.a,{eventKey:"",title:"Details:",disabled:!0}),r.a.createElement(T.a,{eventKey:"Demographics",title:"Demographics"},r.a.createElement(U.a,{className:"UserDetailCard"},r.a.createElement(U.a.Body,null,r.a.createElement(U.a.Title,null,"User Details"),r.a.createElement(U.a.Text,null,"ID: ",t._id),r.a.createElement(U.a.Text,null,"Name: ",t.name),r.a.createElement(U.a.Text,null,"Email: ",t.email),r.a.createElement(U.a.Text,null,"Phone: ",t.phone),r.a.createElement(U.a.Text,null,"Role: ",t.role),r.a.createElement(U.a.Text,null,"Start Date: ",l),r.a.createElement(U.a.Text,null,"End Date: ",c),!0===e.canDelete&&r.a.createElement(h.a,{variant:"danger",onClick:e.onDelete},"Delete Staff !!??")))),r.a.createElement(T.a,{eventKey:"Attendance",title:"Attendance"},r.a.createElement(J,{userAttendance:n,authUserId:e.AuthContext.userId,canDelete:e.canDelete,onDelete:e.attendanceDelete})),r.a.createElement(T.a,{eventKey:"Leave",title:"Leave"},r.a.createElement(K,{userLeave:i,authUserId:e.AuthContext.userId,canDelete:e.canDelete,onDelete:e.leaveDelete})),r.a.createElement(T.a,{eventKey:"Attachments",title:"Attachments"},r.a.createElement(B,{userAttachment:o,authUserId:e.AuthContext.userId,canDelete:e.canDelete,onDelete:e.attachmentDelete}))))}),R=(a(100),function(){return r.a.createElement("div",{className:"spinner"},r.a.createElement("div",{className:"lds-dual-ring"}))}),V=a(17),z=(a(43),function(e){return r.a.createElement("li",{key:e.userId,className:"users__list-item"},r.a.createElement("div",null,r.a.createElement("p",null,"Time: ",e.time),r.a.createElement("p",null,"Title: ",e.title),r.a.createElement("p",null,"Date: ",e.date)))}),M=(a(44),function(e){console.log("patient Today list props",e.appointmentToday);var t=e.appointmentToday.map((function(t){var a,n=new Date(1e3*t.date.substr(0,10)).toISOString().slice(0,10);return r.a.createElement(z,(a={key:t.date,userId:e.authUserId,date:n,title:t.title},Object(V.a)(a,"date",t.date),Object(V.a)(a,"time",t.time),a))}));return r.a.createElement("ul",{className:"user__list1"},t)}),Q=function(e){return r.a.createElement("li",{key:e.userId,className:"users__list-item"},r.a.createElement("div",null,r.a.createElement("p",null,"Time: ",e.time),r.a.createElement("p",null,"Title: ",e.title),r.a.createElement("p",null,"Date: ",e.date)))},Y=function(e){console.log("patient InProgress list props",e.appointmentInProgress);var t=e.appointmentInProgress.map((function(t){var a,n=new Date(1e3*t.date.substr(0,10)).toISOString().slice(0,10);return r.a.createElement(Q,(a={key:t.date,userId:e.authUserId,date:n,title:t.title},Object(V.a)(a,"date",t.date),Object(V.a)(a,"time",t.time),a))}));return r.a.createElement("ul",{className:"user__list1"},t)},W=(a(101),function(e){function t(e){var a;return Object(l.a)(this,t),(a=Object(s.a)(this,Object(m.a)(t).call(this,e))).state={authContext:y._currentValue},a.isActive=!0,a}return Object(d.a)(t,e),Object(c.a)(t,[{key:"componentDidMount",value:function(){console.log("state:  ",this.state.authContext)}},{key:"componentWillUnmount",value:function(){this.isActive=!1}},{key:"render",value:function(){return r.a.createElement(r.a.Fragment,null,r.a.createElement(N.a,{className:"sidebarContainer"},r.a.createElement(g.a,{className:""},r.a.createElement(S.a,{md:12,className:""},r.a.createElement(U.a,{border:"primary",className:"sidebarCard"},r.a.createElement(U.a.Body,null,r.a.createElement(U.a.Title,null,"You"),r.a.createElement(U.a.Subtitle,{className:"mb-2 text-muted"},"ID:"),r.a.createElement(U.a.Text,null,this.context.user._id),r.a.createElement(U.a.Subtitle,{className:"mb-2 text-muted"},"Name:"),r.a.createElement(U.a.Text,null,this.context.user.name),r.a.createElement(U.a.Subtitle,{className:"mb-2 text-muted"},"Role:"),r.a.createElement(U.a.Text,null,this.context.user.role))),r.a.createElement(U.a,{border:"secondary",className:"sidebarCard"},r.a.createElement(U.a.Body,null,r.a.createElement(U.a.Title,null,"Selection"),r.a.createElement(U.a.Subtitle,{className:"mb-2 text-muted"},"Staff:"),r.a.createElement(U.a.Text,null,this.context.selectedUser.name),r.a.createElement(U.a.Subtitle,{className:"mb-2 text-muted"},"Patient:"),r.a.createElement(U.a.Text,null,this.context.selectedPatient.name),r.a.createElement(U.a.Subtitle,{className:"mb-2 text-muted"},"Appointment:"),r.a.createElement(U.a.Text,null,this.context.selectedAppointment.title))))),r.a.createElement(g.a,{className:""},r.a.createElement(S.a,{md:12,className:"apptSidebarRow"},r.a.createElement("p",null,"Appointments Today"),null===this.context.appointmentsToday&&r.a.createElement(h.a,{variant:"outline-warning"},"Check the Appointments page to load"),null!==this.context.appointmentsToday&&r.a.createElement(M,{appointmentToday:this.context.appointmentsToday,authUserId:this.context.userId}))),r.a.createElement(g.a,{className:"apptSidebarRow"},r.a.createElement(S.a,{md:12,className:""},r.a.createElement("p",null,"Appointments InProgress"),null===this.context.appointmentsToday&&r.a.createElement(h.a,{variant:"outline-warning"},"Check the Appointments page to load"),null!==this.context.appointmentsInProgress&&r.a.createElement(Y,{appointmentInProgress:this.context.appointmentsInProgress,authUserId:this.context.userId})))))}}]),t}(n.Component));W.contextType=y;var X=W,Z=function(e){console.log("UpdateUserForm.props:  ",Object(P.a)({},e));var t=Object(k.a)({},e.user);return console.log("UpdateUserForm.props.user:  ",Object(P.a)({},t)),r.a.createElement("div",{className:"UpdateFormContainer"},r.a.createElement(f.a,{onSubmit:e.onConfirm},r.a.createElement(f.a.Row,null,r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridEmail"},r.a.createElement(f.a.Label,null,"Email"),r.a.createElement(f.a.Control,{type:"email",placeholder:t.email})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridPassword"},r.a.createElement(f.a.Label,null,"Password"),r.a.createElement(f.a.Control,{type:"password",placeholder:t.password}))),r.a.createElement(f.a.Row,null,r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridName"},r.a.createElement(f.a.Label,null,"Name"),r.a.createElement(f.a.Control,{type:"text",placeholder:t.name})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridPhone"},r.a.createElement(f.a.Label,null,"Phone"),r.a.createElement(f.a.Control,{type:"number",placeholder:t.phone}))),r.a.createElement(f.a.Row,null,r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridDob"},r.a.createElement(f.a.Label,null,"D.O.B"),r.a.createElement(f.a.Control,{type:"date",placeholder:t.dob})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridEmploymentDate"},r.a.createElement(f.a.Label,null,"Employment Date"),r.a.createElement(f.a.Control,{type:"date",placeholder:t.employmentDate})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridTerminationDate"},r.a.createElement(f.a.Label,null,"Termination Date"),r.a.createElement(f.a.Control,{type:"date",placeholder:t.terminationDate}))),r.a.createElement(f.a.Row,null,r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridAddressNumber"},r.a.createElement(f.a.Label,null,"addressNumber"),r.a.createElement(f.a.Control,{type:"number",placeholder:t.address.number})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridAddressStreet"},r.a.createElement(f.a.Label,null,"addressStreet"),r.a.createElement(f.a.Control,{type:"text",placeholder:t.address.street})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridAddressTown"},r.a.createElement(f.a.Label,null,"addressTown"),r.a.createElement(f.a.Control,{type:"text",placeholder:t.address.town}))),r.a.createElement(f.a.Row,null,r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridAddressParish"},r.a.createElement(f.a.Label,null,"addressParish"),r.a.createElement(f.a.Control,{type:"text",placeholder:t.address.parish})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridAddressPostOffice"},r.a.createElement(f.a.Label,null,"addressPostOffice"),r.a.createElement(f.a.Control,{type:"text",placeholder:t.address.postOffice}))),e.canCancel&&r.a.createElement(C.a.Toggle,{as:h.a,variant:"danger",eventKey:"1",className:"btn",onClick:e.onCancel},"Cancel"),e.canCancelProfile&&r.a.createElement(h.a,{variant:"danger",onClick:e.onCancel},"Cancel"),e.canConfirm&&r.a.createElement(C.a.Toggle,{as:h.a,variant:"success",eventKey:"0",className:"btn",type:"submit"},"Submit")))},$=function(e){console.log("UpdateUserFieldForm.props:  ",Object(P.a)({},e));var t=Object(k.a)({},e.user);return console.log("UpdateUserFieldForm.props.user:  ",Object(P.a)({},t)),r.a.createElement("div",{className:"UpdateFormContainer"},r.a.createElement(f.a,{onSubmit:e.onConfirm},r.a.createElement(f.a.Row,null,r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridFieldSelect"},r.a.createElement(f.a.Label,null,"Field Options"),r.a.createElement(f.a.Control,{as:"select"},r.a.createElement("option",null,"select"),r.a.createElement("option",null,"email"),r.a.createElement("option",null,"password"),r.a.createElement("option",null,"name"),r.a.createElement("option",null,"dob"),r.a.createElement("option",null,"phone"),r.a.createElement("option",null,"address.town"),r.a.createElement("option",null,"address.parish"),r.a.createElement("option",null,"employmentDate"),r.a.createElement("option",null,"terminationDate"))),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridField"},r.a.createElement(f.a.Label,null,"Field"),r.a.createElement(f.a.Control,{type:"text",placeholder:"Query"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridQuery"},r.a.createElement(f.a.Label,null,"Query"),r.a.createElement(f.a.Label,null,"Date Format YYYY-MM-DD"),r.a.createElement(f.a.Control,{type:"text",placeholder:"Query"}))),e.canCancel&&r.a.createElement(C.a.Toggle,{as:h.a,variant:"danger",eventKey:"2",className:"btn",onClick:e.onCancel},"Cancel"),e.canCancelProfile&&r.a.createElement(C.a.Toggle,{as:h.a,variant:"danger",eventKey:"5",className:"btn",onClick:e.onCancel},"Cancel"),e.canConfirm&&r.a.createElement(h.a,{variant:"success",type:"submit"},"Submit")))},ee=function(e){console.log("UpdateUserAttendanceForm.props:  ",Object(P.a)({},e));var t=Object(k.a)({},e.user);return console.log("UpdateUserAttendanceForm.props.user:  ",Object(P.a)({},t)),r.a.createElement("div",{className:"UpdateFormContainer"},r.a.createElement(f.a,{onSubmit:e.onConfirm},r.a.createElement(f.a.Row,null,r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridAttendanceDate"},r.a.createElement(f.a.Label,null,"Date"),r.a.createElement(f.a.Control,{type:"date",placeholder:"Attendance Date"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridAttendanceStatus"},r.a.createElement(f.a.Label,null,"Status"),r.a.createElement(f.a.Control,{type:"text",placeholder:"Attendance Status"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridAttendanceDescription"},r.a.createElement(f.a.Label,null,"Description"),r.a.createElement(f.a.Control,{as:"textarea",rows:"3",placeholder:"Attendance Description"}))),e.canCancel&&r.a.createElement(C.a.Toggle,{as:h.a,variant:"danger",eventKey:"2",className:"btn",onClick:e.onCancel},"Cancel"),e.canCancelProfile&&r.a.createElement(C.a.Toggle,{as:h.a,variant:"danger",eventKey:"5",className:"btn",onClick:e.onCancel},"Cancel"),e.canConfirm&&r.a.createElement(C.a.Toggle,{as:h.a,variant:"success",eventKey:"2",className:"btn",type:"submit"},"Submit")))},te=function(e){console.log("UpdateUserLeaveForm.props:  ",Object(P.a)({},e));var t=Object(k.a)({},e.user);return console.log("UpdateUserLeaveForm.props.user:  ",Object(P.a)({},t)),r.a.createElement("div",{className:"UpdateFormContainer"},r.a.createElement(f.a,{onSubmit:e.onConfirm},r.a.createElement(f.a.Row,null,r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridAttachmentName"},r.a.createElement(f.a.Label,null,"Filename"),r.a.createElement(f.a.Control,{type:"text",placeholder:"Filename"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridAttachmentFormat"},r.a.createElement(f.a.Label,null,"Format"),r.a.createElement(f.a.Control,{type:"string",placeholder:"File format"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridAttachmentPath"},r.a.createElement(f.a.Label,null,"File path"),r.a.createElement(f.a.Control,{type:"string",placeholder:"File path"}))),e.canCancel&&r.a.createElement(C.a.Toggle,{as:h.a,variant:"danger",eventKey:"2",className:"btn",onClick:e.onCancel},"Cancel"),e.canCancelProfile&&r.a.createElement(C.a.Toggle,{as:h.a,variant:"danger",eventKey:"5",className:"btn",onClick:e.onCancel},"Cancel"),e.canConfirm&&r.a.createElement(h.a,{variant:"success",type:"submit"},"Add")))},ae=function(e){console.log("UpdateUserLeaveForm.props:  ",Object(P.a)({},e));var t=Object(k.a)({},e.user);return console.log("UpdateUserLeaveForm.props.user:  ",Object(P.a)({},t)),r.a.createElement("div",{className:"UpdateFormContainer"},r.a.createElement(f.a,{onSubmit:e.onConfirm},r.a.createElement(f.a.Row,null,r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridLeaveType"},r.a.createElement(f.a.Label,null,"Type"),r.a.createElement(f.a.Control,{type:"text",placeholder:"Leave Type"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridLeaveTitle"},r.a.createElement(f.a.Label,null,"Title"),r.a.createElement(f.a.Control,{type:"text",placeholder:"Leave Title"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridLeaveStartDate"},r.a.createElement(f.a.Label,null,"Start Date"),r.a.createElement(f.a.Control,{type:"date",placeholder:"Start Date"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridLeaveEndDate"},r.a.createElement(f.a.Label,null,"End Date"),r.a.createElement(f.a.Control,{type:"date",placeholder:"End Date"}))),e.canCancel&&r.a.createElement(C.a.Toggle,{as:h.a,variant:"danger",eventKey:"2",className:"btn",onClick:e.onCancel},"Cancel"),e.canCancelProfile&&r.a.createElement(C.a.Toggle,{as:h.a,variant:"danger",eventKey:"5",className:"btn",onClick:e.onCancel},"Cancel"),e.canConfirm&&r.a.createElement(C.a.Toggle,{as:h.a,variant:"success",eventKey:"2",className:"btn",type:"submit"},"Submit")))},ne=function(e){return r.a.createElement("div",{className:"SearchFormContainer"},r.a.createElement(f.a,{onSubmit:e.onConfirm},r.a.createElement(f.a.Group,{controlId:"formBasicFieldSelect"},r.a.createElement(f.a.Label,null,"Field"),r.a.createElement(f.a.Control,{as:"select"},r.a.createElement("option",null,"select"),r.a.createElement("option",null,"email"),r.a.createElement("option",null,"password"),r.a.createElement("option",null,"name"),r.a.createElement("option",null,"dob"),r.a.createElement("option",null,"phone"),r.a.createElement("option",null,"address.town"),r.a.createElement("option",null,"address.parish"),r.a.createElement("option",null,"role"),r.a.createElement("option",null,"employmentDate"),r.a.createElement("option",null,"terminationDate")),r.a.createElement(f.a.Text,{className:"text-muted"})),r.a.createElement(f.a.Group,{controlId:"formBasicField"},r.a.createElement(f.a.Label,null,"Field"),r.a.createElement(f.a.Control,{type:"textarea",rows:"5",placeholder:"Field"})),r.a.createElement(f.a.Group,{controlId:"formBasicQuery"},r.a.createElement(f.a.Label,null,"Query"),r.a.createElement(f.a.Control,{type:"textarea",rows:"5",placeholder:"Query"})),e.canCancel&&r.a.createElement(C.a.Toggle,{as:h.a,variant:"danger",eventKey:"3",className:"btn",onClick:e.onCancel},"Cancel"),e.canConfirm&&r.a.createElement(C.a.Toggle,{as:h.a,variant:"success",eventKey:"3",className:"btn",type:"submit"},"Search")))},re=function(e){return r.a.createElement("div",{className:"SearchFormContainer"},r.a.createElement(f.a,{onSubmit:e.onConfirm},r.a.createElement(f.a.Group,{controlId:"formBasicId"},r.a.createElement(f.a.Label,null,"Id"),r.a.createElement(f.a.Control,{type:"text",placeholder:"Id"})),e.canCancel&&r.a.createElement(C.a.Toggle,{as:h.a,variant:"danger",eventKey:"3",className:"btn",onClick:e.onCancel},"Cancel"),e.canConfirm&&r.a.createElement(C.a.Toggle,{as:h.a,variant:"success",eventKey:"3",className:"btn",type:"submit"},"Search")))},ie=function(e){return r.a.createElement("div",{className:"SearchFormContainer"},r.a.createElement(f.a,{onSubmit:e.onConfirm},r.a.createElement(f.a.Group,{controlId:"formBasicName"},r.a.createElement(f.a.Label,null,"Name"),r.a.createElement(f.a.Control,{type:"text",placeholder:"Name"})),e.canCancel&&r.a.createElement(C.a.Toggle,{as:h.a,variant:"danger",eventKey:"3",className:"btn",onClick:e.onCancel},"Cancel"),e.canConfirm&&r.a.createElement(C.a.Toggle,{as:h.a,variant:"success",eventKey:"3",className:"btn",type:"submit"},"Search")))},oe=function(e){return r.a.createElement("div",{className:"SearchFormContainer"},r.a.createElement(f.a,{onSubmit:e.onConfirm},r.a.createElement(f.a.Group,{controlId:"formBasicDate"},r.a.createElement(f.a.Label,null,"Attendance Date"),r.a.createElement(f.a.Control,{type:"date",placeholder:"Date"})),e.canCancel&&r.a.createElement(C.a.Toggle,{as:h.a,variant:"danger",eventKey:"3",className:"btn",onClick:e.onCancel},"Cancel"),e.canConfirm&&r.a.createElement(C.a.Toggle,{as:h.a,variant:"success",eventKey:"3",className:"btn",type:"submit"},"Search")))},le=function(e){return r.a.createElement("div",{className:"SearchFormContainer"},r.a.createElement(f.a,{onSubmit:e.onConfirm},r.a.createElement(f.a.Group,{controlId:"formBasicStartDate"},r.a.createElement(f.a.Label,null,"Start Date"),r.a.createElement(f.a.Control,{type:"date",placeholder:"StartDate"})),r.a.createElement(f.a.Group,{controlId:"formBasicEndDate"},r.a.createElement(f.a.Label,null,"End Date"),r.a.createElement(f.a.Control,{type:"date",placeholder:"EndDate"})),e.canCancel&&r.a.createElement(C.a.Toggle,{as:h.a,variant:"danger",eventKey:"3",className:"btn",onClick:e.onCancel},"Cancel"),e.canConfirm&&r.a.createElement(C.a.Toggle,{as:h.a,variant:"success",eventKey:"3",className:"btn",type:"submit"},"Search")))},ce=(a(46),function(e){function t(){var e,a;Object(l.a)(this,t);for(var n=arguments.length,r=new Array(n),i=0;i<n;i++)r[i]=arguments[i];return(a=Object(s.a)(this,(e=Object(m.a)(t)).call.apply(e,[this].concat(r)))).state={creating:!1,updating:!1,deleting:!1,searching:!1,users:[],searchUsers:[],isLoading:!1,isSorting:!1,selectedUser:null,userUpdateField:null,userSearchField:null,userSearchQuery:null,canDelete:null,userAlert:null},a.isActive=!0,a.startCreateUserHandler=function(){a.setState({creating:!0}),console.log("CreateUserForm...")},a.startUpdateUserHandler=function(){a.setState({updating:!0}),console.log("UpdateUserForm...")},a.startSearchUserHandler=function(){a.setState({searching:!0}),console.log("SearchUserForm...")},a.modalConfirmHandler=function(e){console.log("\n      event: ".concat(JSON.stringify(e),",\n      ")),console.log("CreateUserFormData:  ",e.target.formGridEmail.value),a.setState({creating:!1});var t=e.target.formGridEmail.value,n=e.target.formGridPassword.value,r=e.target.formGridName.value,i=e.target.formGridRole.value,o=e.target.formGridDob.value,l=e.target.formGridPhone.value,c=e.target.formGridAddressNumber.value,s=e.target.formGridAddressStreet.value,m=e.target.formGridAddressTown.value,d=e.target.formGridAddressParish.value,p=e.target.formGridAddressPostOffice.value,u=e.target.formGridEmploymentDate.value,h=e.target.formGridTerminationDate.value;if(0===t.trim().length||0===n.trim().length||0===r.trim().length||0===i.trim().length||0===o.trim().length||0===l.trim().length||0===c.trim().length||0===s.trim().length||0===m.trim().length||0===d.trim().length||0===p.trim().length||0===u.trim().length||0===h.trim().length)return console.log("blank fields detected!!!...Please try again..."),void a.setState({userAlert:"blank fields detected!!!...Please try again..."});var f=a.context.token,g=a.context.userId;console.log("\n      creating user...\n      userId: ".concat(g,"\n      email: ").concat(t,",\n      password: ").concat(n,",\n      name: ").concat(r,",\n      role: ").concat(i,",\n      dob: ").concat(o,",\n      phone: ").concat(l,",\n      addressNumber: ").concat(c,",\n      addressStreet: ").concat(s,",\n      addressTown: ").concat(m,",\n      addressParish: ").concat(d,",\n      addressPostOffice: ").concat(p,",\n      employmentDate: ").concat(u,",\n      terminationDate: ").concat(h,",\n      "));var y={query:'\n          mutation {\n            createUser(userInput: {email:"'.concat(t,'",password:"').concat(n,'",name:"').concat(r,'",role:"').concat(i,'",dob:"').concat(o,'",addressNumber:').concat(c,',addressStreet:"').concat(s,'",addressTown:"').concat(m,'",addressParish:"').concat(d,'",addressPostOffice:"').concat(p,'",phone:"').concat(l,'",employmentDate:"').concat(u,'",terminationDate:"').concat(h,'"})\n            {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}\n          }\n        ')};fetch("http://localhost:10000/graphql",{method:"POST",body:JSON.stringify(y),headers:{"Content-Type":"application/json",Authorization:"Bearer "+f}}).then((function(e){if(200!==e.status&&201!==e.status)throw new Error("Failed!");return e.json()})).then((function(e){console.log("create user response data... "+JSON.stringify(e.data.createUser));var t=JSON.stringify(e.data).slice(0,8);a.setState({userAlert:t}),a.setState((function(t){var a=Object(A.a)(t.users);return a.push(e.data.createUser),{users:a}})),a.context.users=a.state.users})).catch((function(e){console.log(e),a.setState({userAlert:e})}))},a.modalConfirmUpdateHandler=function(e){var t=a.context.token,n=a.context.userId,r=a.context.selectedUser._id;n!==r&&"admin"!==a.context.user.role&&(console.log("Not the creator or Admin! No edit permission!!"),a.setState({userAlert:"Not the creator or Admin! No edit permission!!"}),r=null),console.log("UpdateUserFormData:  ",e.target.formGridEmail.value),a.setState({updating:!1});var i=e.target.formGridEmail.value,o=e.target.formGridPassword.value,l=e.target.formGridName.value,c=a.context.selectedUser.role,s=e.target.formGridDob.value,m=e.target.formGridPhone.value,d=e.target.formGridAddressNumber.value,p=e.target.formGridAddressStreet.value,u=e.target.formGridAddressTown.value,h=e.target.formGridAddressParish.value,f=e.target.formGridAddressPostOffice.value,g=e.target.formGridEmploymentDate.value,y=e.target.formGridTerminationDate.value;0===i.trim().length&&(console.log("blank fields detected!!!...filling w/ previous data..."),i=a.context.selectedUser.email),0===o.trim().length&&(console.log("blank fields detected!!!...filling w/ previous data..."),o=a.context.selectedUser.password),0===l.trim().length&&(console.log("blank fields detected!!!...filling w/ previous data..."),l=a.context.selectedUser.name),0===s.trim().length&&(console.log("blank fields detected!!!...filling w/ previous data..."),s=a.context.selectedUser.dob),0===m.trim().length&&(console.log("blank fields detected!!!...filling w/ previous data..."),m=a.context.selectedUser.phone),0===d.trim().length&&(console.log("blank fields detected!!!...filling w/ previous data..."),d=a.context.selectedUser.address.number),0===p.trim().length&&(console.log("blank fields detected!!!...filling w/ previous data..."),p=a.context.selectedUser.address.street),0===u.trim().length&&(console.log("blank fields detected!!!...filling w/ previous data..."),u=a.context.selectedUser.address.town),0===h.trim().length&&(console.log("blank fields detected!!!...filling w/ previous data..."),h=a.context.selectedUser.address.parish),0===f.trim().length&&(console.log("blank fields detected!!!...filling w/ previous data..."),f=a.context.selectedUser.address.postOffice),0===g.trim().length&&(console.log("blank fields detected!!!...filling w/ previous data..."),g=a.context.selectedUser.employmentDate),0===y.trim().length&&(console.log("blank fields detected!!!...filling w/ previous data..."),y=a.context.selectedUser.terminationDate);console.log("\n      updating user profile...\n      userId: ".concat(n,"\n      email: ").concat(i,",\n      password: ").concat(o,",\n      name: ").concat(l,",\n      role: ").concat(c,",\n      dob: ").concat(s,",\n      phone: ").concat(m,",\n      addressNumber: ").concat(d,",\n      addressStreet: ").concat(p,",\n      addressTown: ").concat(u,",\n      addressParish: ").concat(h,",\n      addressPostOffice: ").concat(f,",\n      employmentDate: ").concat(g,",\n      terminationDate: ").concat(y,",\n      ")),a.setState({userAlert:"updating user profile..."});var E={query:'\n      mutation {updateUser(userId:"'.concat(n,'",selectedUserId:"').concat(r,'",userInput: {email:"').concat(i,'",password:"').concat(o,'",name:"').concat(l,'",dob:"').concat(s,'",addressNumber:').concat(d,',addressStreet:"').concat(p,'",addressTown:"').concat(u,'",addressParish:"').concat(h,'", addressPostOffice:"').concat(f,'",phone:"').concat(m,'",role:"').concat(c,'",employmentDate:"').concat(g,'",terminationDate:"').concat(y,'"})\n      {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n        ')};fetch("http://localhost:10000/graphql",{method:"POST",body:JSON.stringify(E),headers:{"Content-Type":"application/json",Authorization:"Bearer "+t}}).then((function(e){if(200!==e.status&&201!==e.status)throw new Error("Failed!");return e.json()})).then((function(e){console.log("response data... "+JSON.stringify(e));var t=e.data.updateUser;console.log("updatedUser:  ",JSON.stringify(t)),a.setState({user:t}),a.state.users.push(e.data.updateUser),a.context.users=a.state.users;var n=JSON.stringify(e.data).slice(2,25);a.setState({userAlert:n,selectedUser:e.data.updateUser}),a.fetchUsers()})).catch((function(e){console.log(e),a.setState({userAlert:e})}))},a.modalConfirmUpdateFieldHandler=function(e){var t=a.context.token,n=a.context.userId,r=a.context.selectedUser._id;console.log("UpdateUserFieldFormData:  ",e.target.formGridField.value,e.target.formGridFieldSelect.value),a.setState({updating:!1});var i=null,o=e.target.formGridQuery.value;i="select"===e.target.formGridFieldSelect.value?e.target.formGridField.value:e.target.formGridFieldSelect.value,console.log("\n          field: ".concat(i,",\n          query: ").concat(o,",\n        ")),a.setState({userAlert:"updating user field..."});var l={query:'\n          mutation{updateUserField(userId:"'.concat(n,'",selectedUserId:"').concat(r,'",field:"').concat(i,'",query:"').concat(o,'")\n          {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}\n        }\n        ')};fetch("http://localhost:10000/graphql",{method:"POST",body:JSON.stringify(l),headers:{"Content-Type":"application/json",Authorization:"Bearer "+t}}).then((function(e){if(200!==e.status&&201!==e.status)throw new Error("Failed!");return e.json()})).then((function(e){console.log("response data... "+JSON.stringify(e.data.updateUserField));var t=e.data.updateUserField._id,n=a.state.users.find((function(e){return e._id===t})),r=a.state.users.indexOf(n),i=a.state.users.splice(r,1);console.log("updatedUser:  ",JSON.stringify(n),"  updatedUserPos:  ",r,"  slicedArray:  ",i),a.state.users.push(e.data.updateUserField),a.context.users=a.state.users;var o=JSON.stringify(e.data).slice(2,25);a.setState({userAlert:o,selectedUser:e.data.updateUserField}),a.fetchUsers()})).catch((function(e){console.log(e),a.setState({userAlert:e})}))},a.updateUserAttendanceHandler=function(e){var t=a.context.token,n=a.context.userId,r=a.context.selectedUser._id;n!==r&&"admin"!==a.context.user.role&&(console.log("Not the creator or Admin! No edit permission!!"),a.setState({userAlert:"Not the creator or Admin! No edit permission!!"}),r=null),console.log("UpdateUserAttendanceFormData:  ",e.target.formGridAttendanceDate.value),a.setState({updating:!1,userUpdateField:null});var i=e.target.formGridAttendanceDate.value,o=e.target.formGridAttendanceStatus.value,l=e.target.formGridAttendanceDescription.value;0===i.trim().length&&(console.log("blank fields detected!!!...filling w/ previous data..."),i=a.context.selectedUser.attendanceDate),0===o.trim().length&&(console.log("blank fields detected!!!...filling w/ previous data..."),o=a.context.selectedUser.attendanceStatus),0===l.trim().length&&(console.log("blank fields detected!!!...filling w/ previous data..."),l=a.context.selectedUser.attendanceDescription);console.log("\n      adding user attendance item...\n      userId: ".concat(n,",\n      selectedUserId: ").concat(r,"\n      attendanceDate: ").concat(i,",\n      attendanceStatus: ").concat(o,",\n      attendanceDescription: ").concat(l,"\n      ")),a.setState({userAlert:"adding user attendance item..."});var c={query:'\n          mutation {updateUserAttendance(userId:"'.concat(n,'", selectedUserId:"').concat(r,'",userInput:{attendanceDate:"').concat(i,'",attendanceStatus:"').concat(o,'",attendanceDescription:"').concat(l,'"})\n          {_id,name,email,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description}}}\n        ')};fetch("http://localhost:10000/graphql",{method:"POST",body:JSON.stringify(c),headers:{"Content-Type":"application/json",Authorization:"Bearer "+t}}).then((function(e){if(200!==e.status&&201!==e.status)throw new Error("Failed!");return e.json()})).then((function(e){console.log("response data... "+JSON.stringify(e.data.updateUserAttendance));var t=e.data.updateUserAttendance._id,n=a.state.users.find((function(e){return e._id===t})),r=a.state.users.indexOf(n),i=a.state.users.splice(r,1);console.log("updatedUser:  ",JSON.stringify(n),"  updatedUserPos:  ",r,"  slicedArray:  ",i),a.state.users.push(e.data.updateUserAttendance),a.context.users=a.state.users;var o=JSON.stringify(e.data).slice(2,25);a.setState({userAlert:o,selectedUser:e.data.updateUserAttendance}),a.fetchUsers()})).catch((function(e){console.log(e),a.setState({userAlert:e})}))},a.updateUserAttachmentHandler=function(e){var t=a.context.token,n=a.context.userId,r=a.context.selectedUser._id;n!==r&&"admin"!==a.context.user.role&&(console.log("Not the creator or Admin! No edit permission!!"),a.setState({userAlert:"Not the creator or Admin! No edit permission!!"}),r=null),console.log("UpdateUserAttachmentFormData:  ",e.target.formGridAttachmentName.value),a.setState({updating:!1,userUpdateField:null});var i=e.target.formGridAttachmentName.value,o=e.target.formGridAttachmentFormat.value,l=e.target.formGridAttachmentPath.value;if(0!==i.trim().length&&0!==o.trim().length&&0!==l.trim().length){console.log("\n      adding user attendance item...\n      userId: ".concat(n,",\n      selectedUserId: ").concat(r,"\n      attachmentName: ").concat(i,",\n      attachmentFormat: ").concat(o,",\n      attachmentPath: ").concat(l,"\n      ")),a.setState({userAlert:"adding user attendance item..."});var c={query:'\n          mutation{updateUserAttachment(userId:"'.concat(n,'",selectedUserId:"').concat(r,'",userInput:{attachmentName:"').concat(i,'",attachmentFormat:"').concat(o,'",attachmentPath:"').concat(l,'"})\n          {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n        ')};fetch("http://localhost:10000/graphql",{method:"POST",body:JSON.stringify(c),headers:{"Content-Type":"application/json",Authorization:"Bearer "+t}}).then((function(e){if(200!==e.status&&201!==e.status)throw new Error("Failed!");return e.json()})).then((function(e){console.log("response data... "+JSON.stringify(e.data.updateUserAttachment));var t=e.data.updateUserAttachment._id,n=a.state.users.find((function(e){return e._id===t})),r=a.state.users.indexOf(n),i=a.state.users.splice(r,1);console.log("updatedUser:  ",JSON.stringify(n),"  updatedUserPos:  ",r,"  slicedArray:  ",i),a.state.users.push(e.data.updateUserAttachment),a.context.users=a.state.users;var o=JSON.stringify(e.data).slice(2,25);a.setState({userAlert:o,selectedUser:e.data.updateUserAttachment}),a.fetchUsers()})).catch((function(e){console.log(e),a.setState({userAlert:e})}))}else console.log("blank fields detected!!! try again")},a.updateUserLeaveHandler=function(e){var t=a.context.token,n=a.context.userId,r=a.context.selectedUser._id;n!==r&&"admin"!==a.context.user.role&&(console.log("Not the creator or Admin! No edit permission!!"),a.setState({userAlert:"Not the creator or Admin! No edit permission!!"}),r=null),console.log("UpdateUserLeaveFormData:  ",e.target.formGridLeaveType.value),a.setState({updating:!1,userUpdateField:null});var i=e.target.formGridLeaveType.value,o=e.target.formGridLeaveTitle.value,l=e.target.formGridLeaveStartDate.value,c=e.target.formGridLeaveEndDate.value;if(0===i.trim().length||0===o.trim().length||0===l.trim().length||0===c.trim().length)return console.log("blank fields detected!!!...try again"),void a.setState({userAlert:"blank fields detected!!!...try again"});console.log("\n      adding user leave item...\n      userId: ".concat(n,",\n      selectedUserId: ").concat(r,"\n      leave: {\n        type: ").concat(i,",\n        title: ").concat(o,",\n        startDate: ").concat(l,",\n        endDate: ").concat(c,"\n      }\n      ")),a.setState({userAlert:"adding user leave item..."});var s={query:'\n          mutation{updateUserLeave(userId:"'.concat(n,'",selectedUserId:"').concat(r,'",userInput:{leaveType:"').concat(i,'",leaveTitle:"').concat(o,'",leaveStartDate:"').concat(l,'",leaveEndDate:"').concat(c,'"})\n          {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n        ')};fetch("http://localhost:10000/graphql",{method:"POST",body:JSON.stringify(s),headers:{"Content-Type":"application/json",Authorization:"Bearer "+t}}).then((function(e){if(200!==e.status&&201!==e.status)throw new Error("Failed!");return e.json()})).then((function(e){console.log("response data... "+JSON.stringify(e.data));var t=e.data.updateUserLeave._id,n=a.state.users.find((function(e){return e._id===t})),r=a.state.users.indexOf(n),i=a.state.users.splice(r,1);console.log("updatedUser:  ",JSON.stringify(n),"  updatedUserPos:  ",r,"  slicedArray:  ",i),a.state.users.push(e.data.updateUserLeave),a.context.users=a.state.users;var o=JSON.stringify(e.data).slice(2,25);a.setState({userAlert:o,selectedUser:e.data.updateUserLeave}),a.fetchUsers()})).catch((function(e){console.log(e),a.setState({userAlert:e})}))},a.modalConfirmSearchHandler=function(e){console.log("SearchUserForm:  ");var t=a.context.userId;console.log("SearchUserFormData:  ",e.target.formBasicField.value),a.setState({searching:!1});var n=null,r=e.target.formBasicQuery.value;if(n="select"===e.target.formBasicFieldSelect.value?e.target.formBasicField.value:e.target.formBasicFieldSelect.value,a.setState({userSearchField:n,userSearchQuery:r}),0===n.trim().length||0===r.trim().length)return console.log("blank fields detected!!!...Please try again..."),void a.setState({userAlert:"blank fields detected!!!...Please try again..."});var i={field:n,query:r};console.log("Searching for User:  ",JSON.stringify(i)),a.setState({userAlert:"Searching for User..."});var o={query:'\n          query {getUserField(userId:"'.concat(t,'",field:"').concat(n,'",query:"').concat(r,'")\n          {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n        ')},l=a.context.token;fetch("http://localhost:10000/graphql",{method:"POST",body:JSON.stringify(o),headers:{"Content-Type":"application/json",Authorization:"Bearer "+l}}).then((function(e){if(200!==e.status&&201!==e.status)throw new Error("Failed!");return e.json()})).then((function(e){console.log("response data... "+JSON.stringify(e));var t=JSON.stringify(e.data).slice(0,8);a.setState({userAlert:t});var n=e.data.getUserField;a.setState({searchUsers:n}),console.log("state.searchUsers:  ",a.state.searchUsers)})).catch((function(e){console.log(e),a.setState({userAlert:e})}))},a.modalConfirmSearchIdHandler=function(e){var t=a.context.userId;a.setState({searching:!1}),console.log("SearchUserIdFormData:",e.target.formBasicId.value);var n=e.target.formBasicId.value,r={query:'\n        query {getUserId(userId:"'.concat(t,'",selectedUserId:"').concat(n,'")\n        {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n      ')},i=a.context.token;fetch("http://localhost:10000/graphql",{method:"POST",body:JSON.stringify(r),headers:{"Content-Type":"application/json",Authorization:"Bearer "+i}}).then((function(e){if(200!==e.status&&201!==e.status)throw new Error("Failed!");return e.json()})).then((function(e){console.log("response data... "+JSON.stringify(e));var t=JSON.stringify(e.data).slice(2,25);a.setState({userAlert:t});var n=e.data.getUserId;a.setState({searchUsers:[n]}),console.log("state.searchUsers:  ",a.state.searchUsers)})).catch((function(e){console.log(e),a.setState({userAlert:e})}))},a.modalConfirmSearchAttendanceDateHandler=function(e){var t=a.context.userId;a.setState({searching:!1}),console.log("SearchUserAttendanceDateFormData:");var n=e.target.formBasicDate.value,r={query:'\n        query {getUserAttendanceDate(userId:"'.concat(t,'",attendanceDate:"').concat(n,'")\n        {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n      ')},i=a.context.token;fetch("http://localhost:10000/graphql",{method:"POST",body:JSON.stringify(r),headers:{"Content-Type":"application/json",Authorization:"Bearer "+i}}).then((function(e){if(200!==e.status&&201!==e.status)throw new Error("Failed!");return e.json()})).then((function(e){console.log("response data... "+JSON.stringify(e));var t=JSON.stringify(e.data).slice(0,8);a.setState({userAlert:t});var n=e.data.getUserAttendanceDate;a.setState({searchUsers:n}),console.log("state.searchUsers:  ",a.state.searchUsers)})).catch((function(e){console.log(e),a.setState({userAlert:e})}))},a.modalConfirmSearchLeaveDateRangeHandler=function(e){var t=a.context.userId;a.setState({searching:!1}),console.log("SearchUserLeaveDateRangeFormData:");var n=e.target.formBasicStartDate.value,r=e.target.formBasicEndDate.value,i={query:'\n        query{getUserLeaveDateRange(userId:"'.concat(t,'",startDate:"').concat(n,'",endDate:"').concat(r,'")\n        {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n      ')},o=a.context.token;fetch("http://localhost:10000/graphql",{method:"POST",body:JSON.stringify(i),headers:{"Content-Type":"application/json",Authorization:"Bearer "+o}}).then((function(e){if(200!==e.status&&201!==e.status)throw new Error("Failed!");return e.json()})).then((function(e){console.log("response data... "+JSON.stringify(e));var t=JSON.stringify(e.data).slice(0,8);a.setState({userAlert:t});var n=e.data.getUserLeaveDateRange;a.setState({searchUsers:n}),console.log("state.searchUsers:  ",a.state.searchUsers)})).catch((function(e){console.log(e),a.setState({userAlert:e})}))},a.modalConfirmSearchNameHandler=function(e){console.log("SearchUserNameFormData:",e.target.formBasicName.value);a.context.userId;a.setState({searching:!1});var t=a.state.users,n=new RegExp(e.target.formBasicName.value,"i");console.log("\n      regex: ".concat(n,",\n      "));var r=t.filter((function(e){return e.name.match(n)}));console.log("\n        result: ".concat(JSON.stringify(r),"\n        ")),a.setState({searchUsers:r})},a.modalCancelHandler=function(){a.setState({creating:!1,updating:!1,deleting:!1,searching:!1})},a.fetchUsersAsc=function(){console.log("'fetch usersAsc function' context object... "+JSON.stringify(a.context));var e=a.context.userId,t={query:'\n          query {usersNameAsc (userId:"'.concat(e,'")\n          {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n        ')};fetch("http://localhost:10000/graphql",{method:"POST",body:JSON.stringify(t),headers:{"Content-Type":"application/json",Authorization:"Bearer "+a.context.token}}).then((function(e){if(200!==e.status&&201!==e.status)throw a.context.userAlert="Failed!",new Error("Failed!");return e.json()})).then((function(e){var t=e.data.usersNameAsc;console.log("resData:  ",e),console.log(t);var n=JSON.stringify(e.data).slice(0,8);a.setState({userAlert:n}),a.setState({users:t}),a.context.users=a.state.users})).catch((function(e){console.log(e),a.setState({userAlert:e})}))},a.fetchUsersDesc=function(){console.log("'fetch usersDesc function' context object... "+JSON.stringify(a.context));var e=a.context.userId,t={query:'\n          query {usersNameDesc (userId:"'.concat(e,'")\n          {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n        ')};fetch("http://localhost:10000/graphql",{method:"POST",body:JSON.stringify(t),headers:{"Content-Type":"application/json",Authorization:"Bearer "+a.context.token}}).then((function(e){if(200!==e.status&&201!==e.status)throw a.context.userAlert="Failed!",new Error("Failed!");return e.json()})).then((function(e){var t=e.data.usersNameDesc;console.log("resData:  ",e),console.log(t);var n=JSON.stringify(e.data).slice(0,8);a.setState({userAlert:n}),a.setState({users:t}),a.context.users=a.state.users})).catch((function(e){console.log(e),a.setState({userAlert:e})}))},a.modalDeleteHandler=function(){console.log("deleting user...selectedUser:  ",a.context.selectedUser);var e=a.context.userId,t=a.context.selectedUser._id;"admin"!==a.context.user.role&&(console.log("Not the Admin! No edit permission!!"),a.setState({userAlert:"Not the Admin! No edit permission!!"})),a.setState({deleting:!0,userAlert:"deleting user.."});var n={query:"\n        mutation {\n          deleteUser(userId: ".concat(e,", selectedUserId: ").concat(t,")\n          {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}\n        }\n      ")};fetch("http://localhost:10000/graphql",{method:"POST",body:JSON.stringify(n),headers:{"Content-Type":"application/json",Authorization:"Bearer "+a.context.token}}).then((function(e){if(200!==e.status&&201!==e.status)throw new Error("Failed!");return e.json()})).then((function(e){var t=JSON.stringify(e.data).slice(0,8);a.setState({userAlert:t});var n=e.data.deleteUser;console.log(n);var r=n._id;n=a.state.users.find((function(e){return e._id===r}));var i=a.state.users.indexOf(n),o=a.state.users.splice(i,1);console.log("deletedUser:  ",JSON.stringify(n),"  deletedUserPos:  ",i,"  slicedArray:  ",o),a.setState({deleting:!1,selectedUser:null}),a.context.selectedUser=null,a.fetchUsers()})).catch((function(e){console.log(e),a.setState({userAlert:e}),a.isActive&&a.setState({deleting:!1})}))},a.deleteUserAttendanceItem=function(e){var t=a.context.token,n=a.context.userId,r=a.state.selectedUser._id,i=new Date(1e3*e.date.substr(0,10)).toISOString().slice(0,10);console.log("\n    delete user Attendance item:\n    props: ".concat(JSON.stringify(e),",\n    token: ").concat(t,",\n    userId: ").concat(n,",\n    selectedUserId: ").concat(r,",\n    attandance date: ").concat(i,",\n    "));var o={query:'\n       mutation{deleteUserAttendance(userId:"'.concat(n,'",selectedUserId:"').concat(r,'",attendanceDate:"').concat(i,'")\n       {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n    ')};fetch("http://localhost:10000/graphql",{method:"POST",body:JSON.stringify(o),headers:{"Content-Type":"application/json",Authorization:"Bearer "+t}}).then((function(e){if(200!==e.status&&201!==e.status)throw new Error("Failed!");return e.json()})).then((function(e){e.data.deleteUserAttendance;console.log("resData.data:  ",e.data.deleteUserAttendance);var t=e.data.deleteUserAttendance._id,n=a.state.users.find((function(e){return e._id===t})),r=a.state.users.indexOf(n),i=a.state.users.splice(r,1);console.log("updatedUser:  ",JSON.stringify(n),"  updatedUserPos:  ",r,"  slicedArray:  ",i),a.state.users.push(e.data.deleteUserAttendance),a.context.users=a.state.users;var o=JSON.stringify(e.data).slice(2,25);a.setState({userAlert:o}),a.fetchUsers()})).catch((function(e){console.log(e)}))},a.deleteUserLeaveItem=function(e){var t=a.context.token,n=a.context.userId,r=a.state.selectedUser._id;console.log("\n    delete user Leave item:\n    props: ".concat(JSON.stringify(e),",\n    token: ").concat(t,",\n    userId: ").concat(n,",\n    selectedUserId: ").concat(r,",\n    "));var i={query:'\n       mutation{deleteUserLeave(userId:"'.concat(n,'",selectedUserId:"').concat(r,'",leaveTitle:"').concat(e.title,'")\n       {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n    ')};fetch("http://localhost:10000/graphql",{method:"POST",body:JSON.stringify(i),headers:{"Content-Type":"application/json",Authorization:"Bearer "+t}}).then((function(e){if(200!==e.status&&201!==e.status)throw new Error("Failed!");return e.json()})).then((function(e){var t=e.data.deleteUserLeave;console.log(t);var n=e.data.deleteUserLeave._id,r=a.state.users.find((function(e){return e._id===n})),i=a.state.users.indexOf(r),o=a.state.users.splice(i,1);console.log("updatedUser:  ",JSON.stringify(r),"  updatedUserPos:  ",i,"  slicedArray:  ",o),a.state.users.push(e.data.deleteUserLeave),a.context.users=a.state.users;var l=JSON.stringify(e.data).slice(2,25);a.setState({userAlert:l}),a.fetchUsers()})).catch((function(e){console.log(e)}))},a.deleteUserAttachmentItem=function(e){var t=a.context.token,n=a.context.userId,r=a.state.selectedUser._id;console.log("\n    delete user Attachment item:\n    props: ".concat(JSON.stringify(e),",\n    token: ").concat(t,",\n    userId: ").concat(n,",\n    selectedUserId: ").concat(r,",\n    "));var i={query:'\n       mutation{deleteUserAttachment(userId:"'.concat(n,'",selectedUserId:"').concat(r,'",attachmentName:"').concat(e.name,'")\n       {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n    ')};fetch("http://localhost:10000/graphql",{method:"POST",body:JSON.stringify(i),headers:{"Content-Type":"application/json",Authorization:"Bearer "+t}}).then((function(e){if(200!==e.status&&201!==e.status)throw new Error("Failed!");return e.json()})).then((function(e){var t=e.data.deleteUserAttachment;console.log(t);var n=e.data.deleteUserAttachment._id,r=a.state.users.find((function(e){return e._id===n})),i=a.state.users.indexOf(r),o=a.state.users.splice(i,1);console.log("updatedUser:  ",JSON.stringify(r),"  updatedUserPos:  ",i,"  slicedArray:  ",o),a.state.users.push(e.data.deleteUserAttachment),a.context.users=a.state.users;var l=JSON.stringify(e.data).slice(2,25);a.setState({userAlert:l}),a.fetchUsers()})).catch((function(e){console.log(e)}))},a.showDetailHandler=function(e){a.setState((function(t){var n=t.users.find((function(t){return t._id===e}));return a.context.selectedUser=n,a.setState({selectedUser:n}),console.log("User selected  :  ",n),{selectedUser:n}}))},a}return Object(d.a)(t,e),Object(c.a)(t,[{key:"componentDidMount",value:function(){this.fetchUsers(),"admin579"===this.context.user.name&&this.setState({canDelete:!0})}},{key:"fetchUsers",value:function(){var e=this;console.log("fetch users:");var t=this.context.userId;this.setState({isLoading:!0});var a={query:'\n          query {users (userId:"'.concat(t,'")\n          {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n        ')};fetch("http://localhost:10000/graphql",{method:"POST",body:JSON.stringify(a),headers:{"Content-Type":"application/json",Authorization:"Bearer "+this.context.token}}).then((function(t){if(200!==t.status&&201!==t.status)throw e.context.userAlert="Failed!",new Error("Failed!");return t.json()})).then((function(t){var a=JSON.stringify(t.data).slice(0,8);e.setState({userAlert:a});var n=t.data.users;console.log("resData:  ",t),console.log(n),e.isActive&&e.setState({users:n,isLoading:!1}),e.context.users=e.state.users})).catch((function(t){console.log(t),e.setState({userAlert:t}),e.isActive&&e.setState({isLoading:!1})}))}},{key:"updateUserSpecial",value:function(e){console.log("special field to update:  ",e.target.value);var t=e.target.value;this.setState({userUpdateField:t})}},{key:"userSearchClearlHandler",value:function(){console.log("clearing user search results"),this.setState({searchUsers:[],userAlert:"clearing user search results"})}},{key:"componentWillUnmount",value:function(){this.isActive=!1}},{key:"render",value:function(){return r.a.createElement(r.a.Fragment,null,r.a.createElement(C.a,null,r.a.createElement(g.a,null,r.a.createElement(S.a,{md:3,className:"MasterCol1"},r.a.createElement(v,{authUserId:this.context.userId,alert:this.state.userAlert}),r.a.createElement(X,null)),r.a.createElement(S.a,{md:9,className:"MasterCol2"},r.a.createElement(N.a,{className:"containerCombinedDetail"},r.a.createElement(O.a,{defaultActiveKey:"userDetail",id:"uncontrolled-tab-example"},r.a.createElement(T.a,{eventKey:"Edit",title:"Edit:",disabled:!0}),r.a.createElement(T.a,{eventKey:"userDetail",title:"Details"},null===this.state.selectedUser&&r.a.createElement(h.a,{variant:"outline-warning",size:"lg"},"Select a Staff member from the Master List below"),!1===this.state.isLoading&&null!==this.state.selectedUser&&r.a.createElement(q,{authUserId:this.context.userId,AuthContext:this.context,user:this.state.selectedUser,onEdit:this.startUpdateUserHandler,canDelete:this.state.canDelete,onDelete:this.modalDeleteHandler,attendanceDelete:this.deleteUserAttendanceItem,leaveDelete:this.deleteUserLeaveItem,attachmentDelete:this.deleteUserAttachmentItem})),"admin"===this.context.user.role&&r.a.createElement(T.a,{eventKey:"userCreate",title:"New"},r.a.createElement(h.a,{variant:"outline-primary",onClick:this.startCreateUserHandler},"Create"),this.state.creating&&r.a.createElement(x,{authUserId:this.context.userId,canCancel:!0,canConfirm:!0,onCancel:this.modalCancelHandler,onConfirm:this.modalConfirmHandler,onSubmit:this.modalConfirmHandler,confirmText:"Confirm"})),r.a.createElement(T.a,{eventKey:"userEditDemographics",title:"Demographics"},null===this.state.selectedUser&&r.a.createElement(h.a,{variant:"outline-warning",size:"lg"},"Select a Staff member from the Master List below"),null!==this.state.selectedUser&&"admin"===this.context.user.role&&r.a.createElement(h.a,{variant:"outline-primary",onClick:this.startUpdateUserHandler},"Edit Demographics as Admin"),null!==this.state.selectedUser&&this.state.selectedUser._id===this.context.user._id&&r.a.createElement(h.a,{variant:"outline-primary",onClick:this.startUpdateUserHandler},"Edit Demographics (your profile)"),null!==this.state.selectedUser&&this.state.selectedUser._id===this.context.user._id&&r.a.createElement(h.a,{variant:"outline-danger",size:"lg"},"Your Profile"),null!==this.state.selectedUser&&this.state.selectedUser._id!==this.context.user._id&&r.a.createElement(h.a,{variant:"outline-danger",size:"lg"},"Not my profile"),this.state.updating&&null!==this.state.selectedUser&&r.a.createElement(Z,{authUserId:this.context.userId,canCancel:!0,canConfirm:!0,onCancel:this.modalCancelHandler,onConfirm:this.modalConfirmUpdateHandler,confirmText:"Confirm",user:this.context.selectedUser})),r.a.createElement(T.a,{eventKey:"userEditField",title:"Single Field"},null===this.state.selectedUser&&r.a.createElement(h.a,{variant:"outline-warning",size:"lg"},"Select a Staff member from the Master List below"),null!==this.state.selectedUser&&"admin"===this.context.user.role&&r.a.createElement(h.a,{variant:"outline-primary",onClick:this.startUpdateUserHandler},"Edit Field as Admin"),null!==this.state.selectedUser&&this.state.selectedUser._id===this.context.user._id&&r.a.createElement(h.a,{variant:"outline-primary",onClick:this.startUpdateUserHandler},"Edit Field (your profile)"),null!==this.state.selectedUser&&this.state.selectedUser._id===this.context.user._id&&r.a.createElement(h.a,{variant:"outline-danger",size:"lg"},"Your Profile"),null!==this.state.selectedUser&&this.state.selectedUser._id!==this.context.user._id&&r.a.createElement(h.a,{variant:"outline-danger",size:"lg"},"Not my profile"),this.state.updating&&null!==this.state.selectedUser&&r.a.createElement($,{authUserId:this.context.userId,canCancel:!0,canConfirm:!0,onCancel:this.modalCancelHandler,onConfirm:this.modalConfirmUpdateFieldHandler,confirmText:"Confirm",user:this.state.selectedUser})),r.a.createElement(T.a,{eventKey:"userEditAttendance",title:"Attendance"},null===this.state.selectedUser&&r.a.createElement(h.a,{variant:"outline-warning",size:"lg"},"Select a Staff member from the Master List below"),null!==this.state.selectedUser&&"admin"===this.context.user.role&&r.a.createElement(h.a,{variant:"outline-primary",value:"attendance",onClick:this.updateUserSpecial.bind(this)},"Add Attendance as Admin"),null!==this.state.selectedUser&&this.state.selectedUser._id===this.context.user._id&&r.a.createElement(h.a,{variant:"outline-primary",value:"attendance",onClick:this.updateUserSpecial.bind(this)},"Add Attendance (your profile)"),null!==this.state.selectedUser&&this.state.selectedUser._id===this.context.user._id&&r.a.createElement(h.a,{variant:"outline-danger",size:"lg"},"Your Profile"),null!==this.state.selectedUser&&this.state.selectedUser._id!==this.context.user._id&&r.a.createElement(h.a,{variant:"outline-danger",size:"lg"},"Not my profile"),"attendance"===this.state.userUpdateField&&null!==this.state.selectedUser&&r.a.createElement(ee,{authUserId:this.context.userId,canCancel:!0,canConfirm:!0,onCancel:this.modalCancelHandler,onConfirm:this.updateUserAttendanceHandler,confirmText:"Confirm",user:this.state.selectedUser})),r.a.createElement(T.a,{eventKey:"userEditLeave",title:"Leave"},null===this.state.selectedUser&&r.a.createElement(h.a,{variant:"outline-warning",size:"lg"},"Select a Staff member from the Master List below"),null!==this.state.selectedUser&&"admin"===this.context.user.role&&r.a.createElement(h.a,{variant:"outline-primary",value:"leave",onClick:this.updateUserSpecial.bind(this)},"Add Leave as Admin"),null!==this.state.selectedUser&&this.state.selectedUser._id===this.context.user._id&&r.a.createElement(h.a,{variant:"outline-primary",value:"leave",onClick:this.updateUserSpecial.bind(this)},"Add Leave (your profile)"),null!==this.state.selectedUser&&this.state.selectedUser._id===this.context.user._id&&r.a.createElement(h.a,{variant:"outline-danger",size:"lg"},"Your Profile"),null!==this.state.selectedUser&&this.state.selectedUser._id!==this.context.user._id&&r.a.createElement(h.a,{variant:"outline-danger",size:"lg"},"Not my profile"),"leave"===this.state.userUpdateField&&null!==this.state.selectedUser&&r.a.createElement(ae,{authUserId:this.context.userId,canCancel:!0,canConfirm:!0,onCancel:this.modalCancelHandler,onConfirm:this.updateUserLeaveHandler,confirmText:"Confirm",user:this.state.selectedUser})),r.a.createElement(T.a,{eventKey:"userEditAttachment",title:"Attachment"},null===this.state.selectedUser&&r.a.createElement(h.a,{variant:"outline-warning",size:"lg"},"Select a Staff member from the Master List below"),null!==this.state.selectedUser&&"admin"===this.context.user.role&&r.a.createElement(h.a,{variant:"outline-primary",value:"attachments",onClick:this.updateUserSpecial.bind(this)},"Add Attachment as Admin"),null!==this.state.selectedUser&&this.state.selectedUser._id===this.context.user._id&&r.a.createElement(h.a,{variant:"outline-primary",value:"attachments",onClick:this.updateUserSpecial.bind(this)},"Add Attachment (your profile)"),null!==this.state.selectedUser&&this.state.selectedUser._id===this.context.user._id&&r.a.createElement(h.a,{variant:"outline-danger",size:"lg"},"Your Profile"),null!==this.state.selectedUser&&this.state.selectedUser._id!==this.context.user._id&&r.a.createElement(h.a,{variant:"outline-danger",size:"lg"},"Not my profile"),"attachments"===this.state.userUpdateField&&null!==this.state.selectedUser&&r.a.createElement(te,{authUserId:this.context.userId,canCancel:!0,canConfirm:!0,onCancel:this.modalCancelHandler,onConfirm:this.updateUserAttachmentHandler,confirmText:"Confirm",user:this.state.selectedUser})),r.a.createElement(T.a,{eventKey:"MasterList",title:"Master List"},r.a.createElement(N.a,{className:"containerUserMasterList"},r.a.createElement(g.a,{className:"searchListRow"},r.a.createElement(h.a,{variant:"primary",size:"sm",onClick:this.fetchUsersAsc},"Sort Asc"),r.a.createElement(h.a,{variant:"info",size:"sm",onClick:this.fetchUsersDesc},"Sort Desc"),this.state.isLoading?r.a.createElement(R,null):r.a.createElement(w,{users:this.state.users,authUserId:this.context.userId,onViewDetail:this.showDetailHandler})))),r.a.createElement(T.a,{eventKey:"SearchInput",title:"Search"},r.a.createElement(N.a,{className:"containerSearchUserInput"},r.a.createElement(g.a,{className:"searchUserRowAdd"},r.a.createElement(h.a,{variant:"primary",onClick:this.startSearchUserHandler},"Search")),r.a.createElement(g.a,{className:"searchUserRowForm"},r.a.createElement(S.a,{md:10,className:"searchUserColForm"},r.a.createElement(O.a,{defaultActiveKey:"Field",id:"uncontrolled-tab-example"},r.a.createElement(T.a,{eventKey:"Search",title:"Search:",disabled:!0}),r.a.createElement(T.a,{eventKey:"Field",title:"Field:"},!0===this.state.searching&&r.a.createElement(ne,{authUserId:this.context.userId,canCancel:!0,canConfirm:!0,onCancel:this.modalCancelHandler,onConfirm:this.modalConfirmSearchHandler,confirmText:"Search",user:this.context.selectedUser})),r.a.createElement(T.a,{eventKey:"Id",title:"Id:"},!0===this.state.searching&&r.a.createElement(re,{authUserId:this.context.userId,canCancel:!0,canConfirm:!0,onCancel:this.modalCancelHandler,onConfirm:this.modalConfirmSearchIdHandler,confirmText:"Search",user:this.context.selectedUser})),r.a.createElement(T.a,{eventKey:"Attendance",title:"Attendance:"},!0===this.state.searching&&r.a.createElement(oe,{authUserId:this.context.userId,canCancel:!0,canConfirm:!0,onCancel:this.modalCancelHandler,onConfirm:this.modalConfirmSearchAttendanceDateHandler,confirmText:"Search",user:this.context.selectedUser})),r.a.createElement(T.a,{eventKey:"Leave",title:"Leave:"},!0===this.state.searching&&r.a.createElement(le,{authUserId:this.context.userId,canCancel:!0,canConfirm:!0,onCancel:this.modalCancelHandler,onConfirm:this.modalConfirmSearchLeaveDateRangeHandler,confirmText:"Search",user:this.context.selectedUser})),r.a.createElement(T.a,{eventKey:"Name",title:"Name:"},!0===this.state.searching&&r.a.createElement(ie,{authUserId:this.context.userId,canCancel:!0,canConfirm:!0,onCancel:this.modalCancelHandler,onConfirm:this.modalConfirmSearchNameHandler,confirmText:"Search",user:this.context.selectedUser})))),r.a.createElement(S.a,{md:10})))),r.a.createElement(T.a,{eventKey:"SearchResult",title:"Search Results"},r.a.createElement(N.a,{className:"containerSearchUserResults"},r.a.createElement(g.a,null,r.a.createElement(U.a,{className:"searchCard"},r.a.createElement(U.a.Body,{className:"searchCardBody"},r.a.createElement(U.a.Title,null,"Your Search"),r.a.createElement(U.a.Text,null,"Field: ",this.state.userSearchField),r.a.createElement(U.a.Text,null,"Query: ",this.state.userSearchQuery)))),r.a.createElement(g.a,{className:"searchListRow"},this.state.searchUsers!==[]&&r.a.createElement(_,{searchUsers:this.state.searchUsers,authUserId:this.context.userId,onViewDetail:this.showDetailHandler}))))))))))}}]),t}(n.Component));ce.contextType=y;var se=ce,me=(a(15),function(e){return r.a.createElement("li",{key:e.patientId,className:"users__list-item"},r.a.createElement("div",null,r.a.createElement("h5",{className:"userItemHeading"}," Name:"),r.a.createElement("p",{className:"userItemText"},e.name),r.a.createElement("h5",{className:"userItemHeading"}," Reg Date:"),r.a.createElement("p",{className:"userItemText"},e.registrationDate)),r.a.createElement("div",null,r.a.createElement(h.a,{variant:"primary",onClick:e.onDetail.bind(void 0,e._id)},"Details")))}),de=(a(16),function(e){var t=e.patients.map((function(t){var a=new Date(1e3*t.registrationDate.substr(0,10)).toISOString().slice(0,10);return r.a.createElement(me,{key:t._id,_id:t._id,name:t.name,registrationDate:a,onDetail:e.onViewDetail})}));return r.a.createElement("ul",{className:"user__list1"},t)}),pe=(a(102),function(e){return r.a.createElement("li",{key:e.userId,className:"users__list-item"},r.a.createElement("div",null,r.a.createElement("p",null,"Type: ",e.type),r.a.createElement("p",null,"Date: ",e.date),r.a.createElement("p",null,"Title: ",e.title),r.a.createElement("p",null,"Description: ",e.description),r.a.createElement("p",null,"Location : ",e.location)))}),ue=function(e){console.log("patient Appointment list props",e.patientAppointment);var t=e.patientAppointment.map((function(t){var a=new Date(1e3*t.date.substr(0,10)).toISOString().slice(0,10);return r.a.createElement(pe,{key:t.date,userId:e.authUserId,type:t.type,date:a,title:t.title,description:t.description,location:t.location})}));return r.a.createElement("ul",{className:"user__list1"},t)},he=function(e){return r.a.createElement("li",{key:e.userId,className:"users__list-item"},r.a.createElement("div",null,r.a.createElement("p",null,"Company: ",e.company),r.a.createElement("p",null,"Number: ",e.number),r.a.createElement("p",null,"Description: ",e.description),r.a.createElement("p",null,"Expiry: ",e.expiry),r.a.createElement("p",null,"Subscriber Company: ",e.subscriber.company),r.a.createElement("p",null,"Subscriber Description: ",e.subscriber.description)),!0===e.canDelete&&r.a.createElement(h.a,{variant:"danger",onClick:e.onDelete.bind(void 0,e.insurance)},"Delete"))},fe=function(e){console.log("patient insurance list props",e.patientInsurance);var t=e.patientInsurance.map((function(t){var a=new Date(1e3*t.expiry.substr(0,10)).toISOString().slice(0,10);return r.a.createElement(he,{key:t.number,userId:e.authUserId,company:t.company,number:t.number,expiry:a,description:t.description,subscriber:t.subscriber,canDelete:e.canDelete,onDelete:e.onDelete,insurance:t})}));return r.a.createElement("ul",{className:"user__list1"},t)},ge=function(e){return r.a.createElement("li",{key:e.userId,className:"users__list-item"},r.a.createElement("div",null,r.a.createElement("p",null,"Date: ",e.date),r.a.createElement("p",null,"ID: ",e.referenceId),r.a.createElement("p",null,"Name: ",e.referenceName),r.a.createElement("p",null,"Role: ",e.referenceRole)),!0===e.canDelete&&r.a.createElement(h.a,{variant:"danger",onClick:e.onDelete.bind(void 0,e.consultant)},"Delete"))},ye=function(e){console.log("patient consultant list props",e.patientConsultant);var t=e.patientConsultant.map((function(t){var a=new Date(1e3*t.date.substr(0,10)).toISOString().slice(0,10),n=void 0,i=void 0,o=void 0;return null!==t.reference?(n=t.reference._id,i=t.reference.name,o=t.reference.role):(n="no consultant info to show",i="no consultant info to show",o="no consultant info to show"),r.a.createElement(ge,{key:t.date,userId:e.authUserId,date:a,referenceId:n,referenceName:i,referenceRole:o,canDelete:e.canDelete,onDelete:e.onDelete,consultant:t})}));return r.a.createElement("ul",{className:"user__list1"},t)},Ee=function(e){return r.a.createElement("li",{key:e.userId,className:"users__list-item"},r.a.createElement("div",null,r.a.createElement("p",null,"Name: ",e.name),r.a.createElement("p",null,"Email: ",e.email),r.a.createElement("p",null,"Phone: ",e.phone)),!0===e.canDelete&&r.a.createElement(h.a,{variant:"danger",onClick:e.onDelete.bind(void 0,e.nextOfKin)},"Delete"))},ve=function(e){console.log("patient NextOfKin list props",e.patientNextOfKin);var t=e.patientNextOfKin.map((function(t){return r.a.createElement(Ee,{key:t.number,userId:e.authUserId,name:t.name,email:t.contact.email,phone:t.contact.phone,canDelete:e.canDelete,onDelete:e.onDelete,nextOfKin:t})}));return r.a.createElement("ul",{className:"user__list1"},t)},be=function(e){return r.a.createElement("li",{key:e.userId,className:"users__list-item"},r.a.createElement("div",null,r.a.createElement("p",null," Date: ",e.date),r.a.createElement("p",null,"Tile: ",e.title),r.a.createElement("p",null,"Description: ",e.description),r.a.createElement("p",null,"Anamnesis: ",e.anamnesis)),!0===e.canDelete&&r.a.createElement(h.a,{variant:"danger",onClick:e.onDelete.bind(void 0,e.complaint)},"Delete"))},De=function(e){console.log("patient complaintlist props",e.patientComplaint);var t=e.patientComplaint.map((function(t){var a=new Date(1e3*t.date.substr(0,10)).toISOString().slice(0,10);return r.a.createElement(be,{key:t.date,userId:e.authUserId,date:a,title:t.title,description:t.description,anamnesis:t.anamnesis,attachment:t.attachment,canDelete:e.canDelete,onDelete:e.onDelete,complaint:t})}));return r.a.createElement("ul",{className:"user__list1"},t)},Se=function(e){return r.a.createElement("li",{key:e.userId,className:"users__list-item"},r.a.createElement("div",null,r.a.createElement("p",null,"Date: ",e.date),r.a.createElement("p",null,"Title: ",e.title),r.a.createElement("p",null,"Description: ",e.description),r.a.createElement("p",null,"Attachment : ",e.attachment.name),r.a.createElement("p",null,"Attachment Format: ",e.attachment.format),r.a.createElement("p",null,"Attachment Path: ",e.attachment.path)),!0===e.canDelete&&r.a.createElement(h.a,{variant:"danger",onClick:e.onDelete.bind(void 0,e.survey)},"Delete"))},Pe=function(e){console.log("patient survey list props",e.patientSurvey);var t=e.patientSurvey.map((function(t){var a=new Date(1e3*t.date.substr(0,10)).toISOString().slice(0,10);return r.a.createElement(Se,{key:t.title,userId:e.authUserId,title:t.title,date:a,description:t.description,attachment:t.attachment,canDelete:e.canDelete,onDelete:e.onDelete,survey:t})}));return r.a.createElement("ul",{className:"user__list1"},t)},Ce=function(e){return r.a.createElement("li",{key:e.userId,className:"users__list-item"},r.a.createElement("div",null,r.a.createElement("p",null,"Date: ",e.date),r.a.createElement("p",null,"Pr: ",e.pr),r.a.createElement("p",null,"Bp1: ",e.bp1),r.a.createElement("p",null,"Bp2: ",e.bp2),r.a.createElement("p",null,"Rr: ",e.rr),r.a.createElement("p",null,"Temp: ",e.temp),r.a.createElement("p",null,"Ps02: ",e.ps02),r.a.createElement("p",null,"Height: ",e.height),r.a.createElement("p",null,"Weight: ",e.weight),r.a.createElement("p",null,"Bmi: ",e.bmi),r.a.createElement("p",null,"Urine:"),r.a.createElement("p",null,"Type: ",e.urineType),r.a.createElement("p",null,"Value: ",e.urineValue)),!0===e.canDelete&&r.a.createElement(h.a,{variant:"danger",onClick:e.onDelete.bind(void 0,e.vitals)},"Delete"))},xe=function(e){console.log("patient Vitals list props",e.patientVitals);var t=e.patientVitals.map((function(t){var a=new Date(1e3*t.date.substr(0,10)).toISOString().slice(0,10);return r.a.createElement(Ce,{key:a,userId:e.authUserId,date:a,pr:t.pr,bp1:t.bp1,bp2:t.bp2,rr:t.rr,temp:t.temp,height:t.height,weight:t.weight,bmi:t.bmi,urineType:t.urine.type,urineValue:t.urine.value,canDelete:e.canDelete,onDelete:e.onDelete,vitals:t})}));return r.a.createElement("ul",{className:"user__list1"},t)},Ie=function(e){return r.a.createElement("li",{key:e.userId,className:"users__list-item"},r.a.createElement("div",null,r.a.createElement("p",null,"Date: ",e.date),r.a.createElement("p",null,"General: ",e.general),r.a.createElement("p",null,"Area: ",e.area),r.a.createElement("p",null,"Type: ",e.type),r.a.createElement("p",null,"Measure: ",e.measure),r.a.createElement("p",null,"Value: ",e.value),r.a.createElement("p",null,"Description: ",e.description),r.a.createElement("p",null,"FollowUp?: ",e.followUp),r.a.createElement("p",null,"Attachment : ",e.attachment.name),r.a.createElement("p",null,"Attachment Format: ",e.attachment.format),r.a.createElement("p",null,"Attachment Path: ",e.attachment.path)),!0===e.canDelete&&r.a.createElement(h.a,{variant:"danger",onClick:e.onDelete.bind(void 0,e.examination)},"Delete"))},Ae=function(e){console.log("patient examination list props",e.patientExamination);var t=e.patientExamination.map((function(t){var a=new Date(1e3*t.date.substr(0,10)).toISOString().slice(0,10);return r.a.createElement(Ie,{key:t.area,userId:e.authUserId,date:a,general:t.general,area:t.area,type:t.type,measure:t.measure,value:t.value,description:t.description,followUp:t.followUp,attachment:t.attachment,canDelete:e.canDelete,onDelete:e.onDelete,examination:t})}));return r.a.createElement("ul",{className:"user__list1"},t)},Ne=function(e){return r.a.createElement("li",{key:e.userId,className:"users__list-item"},r.a.createElement("div",null,r.a.createElement("p",null,"Type: ",e.type),r.a.createElement("p",null,"Date: ",e.date),r.a.createElement("p",null,"Title: ",e.title),r.a.createElement("p",null,"Description: ",e.description),r.a.createElement("p",null,"Attachment : ",e.attachment.name),r.a.createElement("p",null,"Attachment Format: ",e.attachment.format),r.a.createElement("p",null,"Attachment Path: ",e.attachment.path)),!0===e.canDelete&&r.a.createElement(h.a,{variant:"danger",onClick:e.onDelete.bind(void 0,e.history)},"Delete"))},Oe=function(e){console.log("patient history list props",e.patientHistory);var t=e.patientHistory.map((function(t){var a=new Date(1e3*t.date.substr(0,10)).toISOString().slice(0,10);return r.a.createElement(Ne,{key:t.date,userId:e.authUserId,type:t.type,date:a,title:t.title,description:t.description,attachment:t.attachment,canDelete:e.canDelete,onDelete:e.onDelete,history:t})}));return r.a.createElement("ul",{className:"user__list1"},t)},Te=function(e){return r.a.createElement("li",{key:e.userId,className:"users__list-item"},r.a.createElement("div",null,r.a.createElement("p",null,"Title: ",e.title),r.a.createElement("p",null,"Type: ",e.type),r.a.createElement("p",null,"Description: ",e.description),r.a.createElement("p",null,"Attachment: ",e.attachment.name),r.a.createElement("p",null,"Attachment Format: ",e.attachment.format),r.a.createElement("p",null,"Attachment Path: ",e.attachment.path)),!0===e.canDelete&&r.a.createElement(h.a,{variant:"danger",onClick:e.onDelete.bind(void 0,e.allergies)},"Delete"))},Ue=function(e){console.log("patient allergies list props",e.patientAllergies);var t=e.patientAllergies.map((function(t){return r.a.createElement(Te,{key:t.title,userId:e.authUserId,title:t.title,type:t.type,description:t.description,attachment:t.attachment,canDelete:e.canDelete,onDelete:e.onDelete,allergies:t})}));return r.a.createElement("ul",{className:"user__list1"},t)},Ge=function(e){return r.a.createElement("li",{key:e.userId,className:"users__list-item"},r.a.createElement("div",null,r.a.createElement("p",null,"Title: ",e.title),r.a.createElement("p",null,"Type: ",e.type),r.a.createElement("p",null,"Description: ",e.description),r.a.createElement("p",null,"Attachment: ",e.attachment.name)),!0===e.canDelete&&r.a.createElement(h.a,{variant:"danger",onClick:e.onDelete.bind(void 0,e.medication)},"Delete"))},we=function(e){console.log("patient medication list props",e.patientMedication);var t=e.patientMedication.map((function(t){return r.a.createElement(Ge,{key:t.title,userId:e.authUserId,title:t.title,type:t.type,description:t.description,attachment:t.attachment,canDelete:e.canDelete,onDelete:e.onDelete,medication:t})}));return r.a.createElement("ul",{className:"user__list1"},t)},Fe=function(e){return r.a.createElement("li",{key:e.userId,className:"users__list-item"},r.a.createElement("div",null,r.a.createElement("p",null,"Title: ",e.title),r.a.createElement("p",null,"Type: ",e.type),r.a.createElement("p",null,"Date: ",e.date),r.a.createElement("p",null,"Description: ",e.description),r.a.createElement("p",null,"Attachment : ",e.attachment.name),r.a.createElement("p",null,"Attachment Format: ",e.attachment.format),r.a.createElement("p",null,"Attachment Path: ",e.attachment.path)),!0===e.canDelete&&r.a.createElement(h.a,{variant:"danger",onClick:e.onDelete.bind(void 0,e.investigation)},"Delete"))},_e=function(e){console.log("patient investigation list props",e.patientInvestigation);var t=e.patientInvestigation.map((function(t){var a=new Date(1e3*t.date.substr(0,10)).toISOString().slice(0,10);return r.a.createElement(Fe,{key:t.date,userId:e.authUserId,date:a,title:t.title,type:t.type,description:t.description,attachment:t.attachment,canDelete:e.canDelete,onDelete:e.onDelete,investigation:t})}));return r.a.createElement("ul",{className:"user__list1"},t)},ke=function(e){return r.a.createElement("li",{key:e.userId,className:"users__list-item"},r.a.createElement("div",null,r.a.createElement("p",null,"Title: ",e.title),r.a.createElement("p",null,"Type: ",e.type),r.a.createElement("p",null,"Date: ",e.date),r.a.createElement("p",null,"Description: ",e.description),r.a.createElement("p",null,"Attachment: ",e.attachment.name),r.a.createElement("p",null,"Attachment Format: ",e.attachment.format),r.a.createElement("p",null,"Attachment Path: ",e.attachment.path)),!0===e.canDelete&&r.a.createElement(h.a,{variant:"danger",onClick:e.onDelete.bind(void 0,e.diagnosis)},"Delete"))},Le=function(e){console.log("patient diagnosis list props",e.patientDiagnosis);var t=e.patientDiagnosis.map((function(t){var a=new Date(1e3*t.date.substr(0,10)).toISOString().slice(0,10);return r.a.createElement(ke,{key:t.date,userId:e.authUserId,date:a,title:t.title,type:t.type,description:t.description,attachment:t.attachment,canDelete:e.canDelete,onDelete:e.onDelete,diagnosis:t})}));return r.a.createElement("ul",{className:"user__list1"},t)},Je=function(e){return r.a.createElement("li",{key:e.userId,className:"users__list-item"},r.a.createElement("div",null,r.a.createElement("p",null,"Title: ",e.title),r.a.createElement("p",null,"Type: ",e.type),r.a.createElement("p",null,"Date: ",e.date),r.a.createElement("p",null,"Description: ",e.description),r.a.createElement("p",null,"Dose: ",e.dose),r.a.createElement("p",null,"Frequency: ",e.frequency),r.a.createElement("p",null,"Attachment: ",e.attachment.name)),!0===e.canDelete&&r.a.createElement(h.a,{variant:"danger",onClick:e.onDelete.bind(void 0,e.treatment)},"Delete"))},je=function(e){console.log("patient treatment list props",e.patientTreatment);var t=e.patientTreatment.map((function(t){var a,n=new Date(1e3*t.date.substr(0,10)).toISOString().slice(0,10);return r.a.createElement(Je,(a={key:t.date,userId:e.authUserId,date:n,title:t.title,type:t.type,description:t.description,dose:t.dose,frequency:t.frequency},Object(V.a)(a,"type",t.type),Object(V.a)(a,"attachment",t.attachment),Object(V.a)(a,"canDelete",e.canDelete),Object(V.a)(a,"onDelete",e.onDelete),Object(V.a)(a,"treatment",t),a))}));return r.a.createElement("ul",{className:"user__list1"},t)},Ke=function(e){return r.a.createElement("li",{key:e.userId,className:"users__list-item"},r.a.createElement("div",null,r.a.createElement("p",null,"Title: ",e.title),r.a.createElement("p",null,"Type: ",e.type),r.a.createElement("p",null,"Date: ",e.date),r.a.createElement("p",null,"Description: ",e.description),r.a.createElement("p",null,"Amount: ",e.amount),r.a.createElement("p",null,"Paid: ",e.paid),r.a.createElement("p",null,"Notes: ",e.notes),r.a.createElement("p",null,"Attachment: ",e.attachment.name),r.a.createElement("p",null,"Attachment Format: ",e.attachment.format),r.a.createElement("p",null,"Attachment Path: ",e.attachment.path)),!0===e.canDelete&&r.a.createElement(h.a,{variant:"danger",onClick:e.onDelete.bind(void 0,e.billing)},"Delete"))},He=function(e){console.log("patient billing list props",e.patientBilling);var t=e.patientBilling.map((function(t){var a=new Date(1e3*t.date.substr(0,10)).toISOString().slice(0,10);return r.a.createElement(Ke,{key:t.date,userId:e.authUserId,date:a,type:t.type,title:t.title,description:t.description,amount:t.amount,paid:t.paid,notes:t.notes,attachment:t.attachment,canDelete:e.canDelete,onDelete:e.onDelete,billing:t})}));return r.a.createElement("ul",{className:"user__list1"},t)},Be=function(e){return r.a.createElement("li",{key:e.userId,className:"users__list-item"},r.a.createElement("div",null,r.a.createElement("p",null,"Name: ",e.name),r.a.createElement("p",null,"Format: ",e.format),r.a.createElement("p",null,"Path: ",e.path)),!0===e.canDelete&&r.a.createElement(h.a,{variant:"danger",onClick:e.onDelete.bind(void 0,e.attachment)},"Delete"))},qe=function(e){console.log("patient attachments list props",e.patientAttachments);var t=e.patientAttachments.map((function(t){return r.a.createElement(Be,{key:t.name,userId:e.authUserId,name:t.name,format:t.format,path:t.path,canDelete:e.canDelete,onDelete:e.onDelete,attachment:t})}));return r.a.createElement("ul",{className:"user__list1"},t)},Re=function(e){return r.a.createElement("li",{key:e.userId,className:"users__list-item"},r.a.createElement("div",null,r.a.createElement("p",null,"Note: ",e.note)),!0===e.canDelete&&r.a.createElement(h.a,{variant:"danger",onClick:e.onDelete.bind(void 0,e.note)},"Delete"))},Ve=function(e){console.log("patient Notes list props",e.patientNotes);var t=e.patientNotes.map((function(t){return r.a.createElement(Re,{key:t,userId:e.authUserId,note:t,canDelete:e.canDelete,onDelete:e.onDelete})}));return r.a.createElement("ul",{className:"user__list1"},t)},ze=function(e){return r.a.createElement("li",{key:e.userId,className:"users__list-item"},r.a.createElement("div",null,r.a.createElement("p",null,"Tag: ",e.tag)),!0===e.canDelete&&r.a.createElement(h.a,{variant:"danger",onClick:e.onDelete.bind(void 0,e.tag)},"Delete"))},Me=function(e){console.log("patient Tags list props",e.patientTags);var t=e.patientTags.map((function(t){return r.a.createElement(ze,{key:t,userId:e.authUserId,tag:t,canDelete:e.canDelete,onDelete:e.onDelete})}));return r.a.createElement("ul",{className:"user__list1"},t)},Qe=function(e){return r.a.createElement("li",{key:e.userId,className:"users__list-item"},r.a.createElement("div",null,r.a.createElement("p",null,"Date: ",e.date),r.a.createElement("p",null,"Name: ",e.referenceName),r.a.createElement("p",null,"Role: ",e.referenceRole)))},Ye=function(e){console.log("VisitConsultantlist props",e.consultant);var t=void 0;if(e.consultant)return t=e.consultant.map((function(t){var a=new Date(1e3*t.date.substr(0,10)).toISOString().slice(0,10),n=t.reference;return console.log("\n      visitConsultantDate: ".concat(a,",\n      consultantReference: ").concat(JSON.stringify(n),",\n      ")),r.a.createElement(Qe,{key:t.date,userId:e.authUserId,date:a,name:n.name,role:n.role})})),r.a.createElement("ul",{className:"user__list1"},t)},We=function(e){return r.a.createElement("li",{key:e.userId,className:"users__list-item"},r.a.createElement("div",null,r.a.createElement("p",null,"Date: ",e.date),r.a.createElement("p",null,"Title: ",e.title),r.a.createElement("p",null,"Description: ",e.description),r.a.createElement("p",null,"Anamnesis: ",e.anamnesis),r.a.createElement("p",null,"Attachment:"),r.a.createElement("p",null,"Name: ",e.attachmentName),r.a.createElement("p",null,"Format: ",e.attachmentFormat),r.a.createElement("p",null,"Path: ",e.attachmentPath)))},Xe=function(e){console.log("VisitComplaintlist props",e.complaint);var t=void 0;if(e.complaint)return t=e.complaint.map((function(t){var a=new Date(1e3*t.date.substr(0,10)).toISOString().slice(0,10),n=t.attachment;return console.log("\n      visitComplaintDate: ".concat(a,",\n      ")),r.a.createElement(We,{key:t.date,userId:e.authUserId,date:a,title:t.title,description:t.description,anamnesis:t.anamnesis,attachmentName:n.name,attachmentFormat:n.format,attachmentPath:n.path})})),r.a.createElement("ul",{className:"user__list1"},t)},Ze=function(e){return r.a.createElement("li",{key:e.userId,className:"users__list-item"},r.a.createElement("div",null,r.a.createElement("p",null,"Date: ",e.date),r.a.createElement("p",null,"General: ",e.general),r.a.createElement("p",null,"Area: ",e.area),r.a.createElement("p",null,"Type: ",e.type),r.a.createElement("p",null,"Measure: ",e.measure),r.a.createElement("p",null,"Value: ",e.value),r.a.createElement("p",null,"Description: ",e.description),r.a.createElement("p",null,"FollowUp: ",e.followUp),r.a.createElement("p",null,"Attachment:"),r.a.createElement("p",null,"Name: ",e.attachmentName),r.a.createElement("p",null,"Format: ",e.attachmentFormat),r.a.createElement("p",null,"Path: ",e.attachmentPath)))},$e=function(e){console.log("VisitExaminationlist props",e.examination);var t=void 0;if(e.examination)return t=e.examination.map((function(t){var a=new Date(1e3*t.date.substr(0,10)).toISOString().slice(0,10),n=t.attachment;return console.log("\n      visitExaminationDate: ".concat(a,",\n      ")),r.a.createElement(Ze,{key:t.date,userId:e.authUserId,date:a,general:t.general,area:t.area,type:t.type,measure:t.measure,value:t.value,description:t.description,followUp:t.followUp,attachmentName:n.name,attachmentFormat:n.format,attachmentPath:n.path})})),r.a.createElement("ul",{className:"user__list1"},t)},et=function(e){return r.a.createElement("li",{key:e.userId,className:"users__list-item"},r.a.createElement("div",null,r.a.createElement("p",null,"Date: ",e.date),r.a.createElement("p",null,"Title: ",e.title),r.a.createElement("p",null,"Description: ",e.description),r.a.createElement("p",null,"Attachment:"),r.a.createElement("p",null,"Name: ",e.attachmentName),r.a.createElement("p",null,"Format: ",e.attachmentFormat),r.a.createElement("p",null,"Path: ",e.attachmentPath)))},tt=function(e){console.log("VisitSurveylist props",e.survey);var t=void 0;return e.survey&&(t=e.survey.map((function(t){var a=new Date(1e3*t.date.substr(0,10)).toISOString().slice(0,10),n=t.attachment;return console.log("\n      visitSurveyDate: ".concat(a,",\n      ")),r.a.createElement(et,{key:t.date,userId:e.authUserId,date:a,title:t.title,description:t.description,attachmentName:n.name,attachmentFormat:n.format,attachmentPath:n.path})}))),r.a.createElement("ul",{className:"user__list1"},t)},at=function(e){return r.a.createElement("li",{key:e.userId,className:"users__list-item"},r.a.createElement("div",null,r.a.createElement("p",null,"Date: ",e.date),r.a.createElement("p",null,"Pr: ",e.pr),r.a.createElement("p",null,"Bp1: ",e.bp1),r.a.createElement("p",null,"Bp2: ",e.bp2),r.a.createElement("p",null,"Rr: ",e.rr),r.a.createElement("p",null,"Temp: ",e.temp),r.a.createElement("p",null,"Ps02: ",e.ps02),r.a.createElement("p",null,"Height: ",e.height),r.a.createElement("p",null,"Weight: ",e.weight),r.a.createElement("p",null,"Bmi: ",e.bmi),r.a.createElement("p",null,"UrineType: ",e.urineType),r.a.createElement("p",null,"UrineValue: ",e.urineValue)))},nt=function(e){console.log("VisitVitalslist props",e.vitals);var t=void 0;return e.vitals&&(t=e.vitals.map((function(t){var a=new Date(1e3*t.date.substr(0,10)).toISOString().slice(0,10),n=t.urine;return console.log("\n        visitVitalsDate: ".concat(a,",\n        ")),r.a.createElement(at,{key:t.date,userId:e.authUserId,date:a,pr:t.pr,bp1:t.bp1,bp2:t.bp2,rr:t.rr,temp:t.temp,ps02:t.ps02,height:t.height,weight:t.weight,bmi:t.bmi,urineType:n.type,urineValue:n.value})}))),r.a.createElement("ul",{className:"user__list1"},t)},rt=function(e){return r.a.createElement("li",{key:e.userId,className:"users__list-item"},r.a.createElement("div",null,r.a.createElement("p",null,"Date: ",e.date),r.a.createElement("p",null,"Title: ",e.title),r.a.createElement("p",null,"Description: ",e.description),r.a.createElement("p",null,"Attachment:"),r.a.createElement("p",null,"Name: ",e.attachmentName),r.a.createElement("p",null,"Format: ",e.attachmentFormat),r.a.createElement("p",null,"Path: ",e.attachmentPath)))},it=function(e){console.log("VisitHistorylist props",e.history);var t=void 0;if(e.history)return t=e.history.map((function(t){var a=new Date(1e3*t.date.substr(0,10)).toISOString().slice(0,10),n=t.attachment;return console.log("\n      visitHistoryDate: ".concat(a,",\n      ")),r.a.createElement(rt,{key:t.date,userId:e.authUserId,date:a,title:t.title,description:t.description,attachmentName:n.name,attachmentFormat:n.format,attachmentPath:n.path})})),r.a.createElement("ul",{className:"user__list1"},t)},ot=function(e){return r.a.createElement("li",{key:e.userId,className:"users__list-item"},r.a.createElement("div",null,r.a.createElement("p",null,"Date: ",e.date),r.a.createElement("p",null,"Title: ",e.title),r.a.createElement("p",null,"Type: ",e.type),r.a.createElement("p",null,"Description: ",e.description),r.a.createElement("p",null,"Attachment:"),r.a.createElement("p",null,"Name: ",e.attachmentName),r.a.createElement("p",null,"Format: ",e.attachmentFormat),r.a.createElement("p",null,"Path: ",e.attachmentPath)))},lt=function(e){console.log("VisitInvestigationlist props",e.investigation);var t=void 0;return e.investigation&&(t=e.investigation.map((function(t){var a=new Date(1e3*t.date.substr(0,10)).toISOString().slice(0,10),n=t.attachment;return console.log("\n      visitInvestigationDate: ".concat(a,",\n      ")),r.a.createElement(ot,{key:t.date,userId:e.authUserId,date:a,type:t.type,title:t.title,description:t.description,attachmentName:n.name,attachmentFormat:n.format,attachmentPath:n.path})}))),r.a.createElement("ul",{className:"user__list1"},t)},ct=function(e){return r.a.createElement("li",{key:e.userId,className:"users__list-item"},r.a.createElement("div",null,r.a.createElement("p",null,"Date: ",e.date),r.a.createElement("p",null,"Type: ",e.type),r.a.createElement("p",null,"Title: ",e.title),r.a.createElement("p",null,"Description: ",e.description),r.a.createElement("p",null,"Attachment:"),r.a.createElement("p",null,"Name: ",e.attachmentName),r.a.createElement("p",null,"Format: ",e.attachmentFormat),r.a.createElement("p",null,"Path: ",e.attachmentPath)))},st=function(e){console.log("VisitDiagnosislist props",e.diagnosis);var t=void 0;if(e.diagnosis)return t=e.diagnosis.map((function(t){var a=new Date(1e3*t.date.substr(0,10)).toISOString().slice(0,10),n=t.attachment;return console.log("\n      visitDiagnosisDate: ".concat(a,",\n      ")),r.a.createElement(ct,{key:t.date,userId:e.authUserId,date:a,type:t.type,title:t.title,description:t.description,attachmentName:n.name,attachmentFormat:n.format,attachmentPath:n.path})})),r.a.createElement("ul",{className:"user__list1"},t)},mt=function(e){return r.a.createElement("li",{key:e.userId,className:"users__list-item"},r.a.createElement("div",null,r.a.createElement("p",null,"Date: ",e.date),r.a.createElement("p",null,"Title: ",e.title),r.a.createElement("p",null,"Type: ",e.type),r.a.createElement("p",null,"Description: ",e.description),r.a.createElement("p",null,"Dose: ",e.dose),r.a.createElement("p",null,"Frequency: ",e.frequency),r.a.createElement("p",null,"Attachment:"),r.a.createElement("p",null,"Name: ",e.attachmentName),r.a.createElement("p",null,"Format: ",e.attachmentFormat),r.a.createElement("p",null,"Path: ",e.attachmentPath)))},dt=function(e){console.log("VisitTreatmentlist props",e.treatment);var t=void 0;return e.treatment&&(t=e.treatment.map((function(t){var a,n=new Date(1e3*t.date.substr(0,10)).toISOString().slice(0,10),i=t.attachment;return console.log("\n      visitTreatmentDate: ".concat(n,",\n      ")),r.a.createElement(mt,(a={key:t.date,userId:e.authUserId,date:n,type:t.type,title:t.title},Object(V.a)(a,"type",t.type),Object(V.a)(a,"description",t.description),Object(V.a)(a,"dose",t.dose),Object(V.a)(a,"frequency",t.frequency),Object(V.a)(a,"attachmentName",i.name),Object(V.a)(a,"attachmentFormat",i.format),Object(V.a)(a,"attachmentPath",i.path),a))}))),r.a.createElement("ul",{className:"user__list1"},t)},pt=function(e){return r.a.createElement("li",{key:e.userId,className:"users__list-item"},r.a.createElement("div",null,r.a.createElement("p",null,"Date: ",e.date),r.a.createElement("p",null,"Title: ",e.title),r.a.createElement("p",null,"Type: ",e.type),r.a.createElement("p",null,"Description: ",e.description),r.a.createElement("p",null,"Amount: ",e.amount),r.a.createElement("p",null,"Paid: ",e.paid),r.a.createElement("p",null,"Notes: ",e.notes),r.a.createElement("p",null,"Attachment:"),r.a.createElement("p",null,"Name: ",e.attachmentName),r.a.createElement("p",null,"Format: ",e.attachmentFormat),r.a.createElement("p",null,"Path: ",e.attachmentPath)))},ut=function(e){console.log("VisitBillinglist props",e.billing);var t=void 0;if(e.billing)return t=e.billing.map((function(t){var a=new Date(1e3*t.date.substr(0,10)).toISOString().slice(0,10),n=t.attachment;return console.log("\n      visitBillingDate: ".concat(a,",\n      ")),r.a.createElement(pt,{key:t.date,userId:e.authUserId,date:a,type:t.type,title:t.title,description:t.description,amount:t.amount,paid:t.paid,notes:t.notes,attachmentName:n.name,attachmentFormat:n.format,attachmentPath:n.path})})),r.a.createElement("ul",{className:"user__list1"},t)},ht=(a(70),function(e){var t={date:"",patientName:"",consultant:"",complaint:"",examination:"",survey:"",vitals:"",history:"",investigation:"",diagnosis:"",treatment:"",billing:""};null!==e.visit&&(t=e.visit);var a=t.consultant,n=t.complaint,i=t.examination,o=t.survey,l=t.vitals,c=t.history,s=t.investigation,m=t.diagnosis,d=t.treatment,p=t.billing;return console.log("\n    patientVisit: ".concat(JSON.stringify(t),",\n    date: ").concat(t.date,",\n    consultant: ").concat(a,",\n    complaint: ").concat(n,",\n    examination: ").concat(i,",\n    survey: ").concat(o,",\n    investigation: ").concat(s,",\n    diagnosis: ").concat(m,",\n    treatment: ").concat(d,",\n    billing: ").concat(p,",\n        ")),r.a.createElement("div",{className:"PatientDetailBox1"},r.a.createElement("p",null,"Date: ",new Date(t.date).toISOString().slice(0,10)),r.a.createElement("p",null,"Patient: ",t.patientName),r.a.createElement(O.a,{defaultActiveKey:"Visit",id:"uncontrolled-tab-example",className:"tab"},r.a.createElement(T.a,{eventKey:"",title:"Visit:",disabled:!0}),r.a.createElement(T.a,{eventKey:"Consultant",title:"Consultant"},r.a.createElement(U.a,{className:"PatientDetailCard"},r.a.createElement(U.a.Body,null,r.a.createElement(U.a.Text,null,"Consultants"),r.a.createElement(Ye,{consultant:a,authUserId:e.authUserId})))),r.a.createElement(T.a,{eventKey:"Complaint",title:"Complaint"},r.a.createElement(U.a,{className:"PatientDetailCard"},r.a.createElement(U.a.Body,null,r.a.createElement(U.a.Text,null,"Complaints"),r.a.createElement(Xe,{complaint:n,authUserId:e.authUserId})))),r.a.createElement(T.a,{eventKey:"Examination",title:"Examination"},r.a.createElement(U.a,{className:"PatientDetailCard"},r.a.createElement(U.a.Body,null,r.a.createElement(U.a.Text,null,"Examinations"),r.a.createElement($e,{examination:i,authUserId:e.authUserId})))),r.a.createElement(T.a,{eventKey:"Survey",title:"Survey"},r.a.createElement(U.a,{className:"PatientDetailCard"},r.a.createElement(U.a.Body,null,r.a.createElement(U.a.Text,null,"Surveys"),r.a.createElement(tt,{survey:o,authUserId:e.authUserId})))),r.a.createElement(T.a,{eventKey:"Vitals",title:"Vitals"},r.a.createElement(U.a,{className:"PatientDetailCard"},r.a.createElement(U.a.Body,null,r.a.createElement(U.a.Text,null,"Vitals"),r.a.createElement(nt,{vitals:l,authUserId:e.authUserId})))),r.a.createElement(T.a,{eventKey:"History",title:"History"},r.a.createElement(U.a,{className:"PatientDetailCard"},r.a.createElement(U.a.Body,null,r.a.createElement(U.a.Text,null,"History"),r.a.createElement(it,{history:c,authUserId:e.authUserId})))),r.a.createElement(T.a,{eventKey:"Investigation",title:"Investigation"},r.a.createElement(U.a,{className:"PatientDetailCard"},r.a.createElement(U.a.Body,null,r.a.createElement(U.a.Text,null,"Investigations"),r.a.createElement(lt,{investigation:s,authUserId:e.authUserId})))),r.a.createElement(T.a,{eventKey:"Diagnosis",title:"Diagnosis"},r.a.createElement(U.a,{className:"PatientDetailCard"},r.a.createElement(U.a.Body,null,r.a.createElement(U.a.Text,null,"Diagnosis"),r.a.createElement(st,{diagnosis:m,authUserId:e.authUserId})))),r.a.createElement(T.a,{eventKey:"Treatment",title:"Treatment"},r.a.createElement(U.a,{className:"PatientDetailCard"},r.a.createElement(U.a.Body,null,r.a.createElement(U.a.Text,null,"Treatment"),r.a.createElement(dt,{treatment:d,authUserId:e.authUserId})))),r.a.createElement(T.a,{eventKey:"Billing",title:"Billing"},r.a.createElement(U.a,{className:"PatientDetailCard"},r.a.createElement(U.a.Body,null,r.a.createElement(U.a.Text,null,"Billing"),r.a.createElement(ut,{billing:p,authUserId:e.authUserId}))))))}),ft=function(e){return r.a.createElement("div",{className:"SearchFormContainer"},r.a.createElement(f.a,{onSubmit:e.onGetVisit},r.a.createElement(f.a.Group,{controlId:"formBasicVisitDate"},r.a.createElement(f.a.Label,null,"VisitDate"),r.a.createElement(f.a.Control,{type:"date",placeholder:"VisitDate"})),e.canCancel&&r.a.createElement(C.a.Toggle,{as:h.a,variant:"danger",eventKey:"10",onClick:e.onCancel},"Cancel"),e.canConfirm&&r.a.createElement(h.a,{variant:"primary",type:"submit"},"Submit")))},gt=function(e){var t=Object(k.a)({},e.patient),a=t.appointments,n=t.insurance,i=t.consultant,o=t.nextOfKin,l=t.complaints,c=t.surveys,s=t.vitals,m=t.examination,d=t.history,p=t.allergies,u=t.medication,f=t.investigation,g=t.diagnosis,y=t.treatment,E=t.billing,v=t.attachments,b=t.notes,D=t.tags,S=new Date(1e3*t.registrationDate.substr(0,10)).toISOString().slice(0,10),C=new Date(1e3*t.dob.substr(0,10)).toISOString().slice(0,10),x=new Date(1e3*t.referralDate.substr(0,10)).toISOString().slice(0,10),I=void 0;I=null!==t.expirationDate?new Date(1e3*t.expirationDate.substr(0,10)).toISOString().slice(0,10):t.expirationDate;e.token,e.authUserId,t._id;return console.log("PatientDetail.props.patient:  ",Object(P.a)({},t)),r.a.createElement("div",{className:"PatientDetailBox1"},r.a.createElement(O.a,{defaultActiveKey:"Demographics",id:"uncontrolled-tab-example",className:"tab"},r.a.createElement(T.a,{eventKey:"",title:"Details:",disabled:!0}),r.a.createElement(T.a,{eventKey:"Demographics",title:"Demographics"},r.a.createElement(U.a,{className:"PatientDetailCard"},r.a.createElement(U.a.Body,null,r.a.createElement(U.a.Title,null,"Patient Details:"),r.a.createElement(U.a.Text,null,"ID: ",t._id),r.a.createElement(U.a.Text,null,"Title: ",t.title),r.a.createElement(U.a.Text,null,"Name: ",t.name),r.a.createElement(U.a.Text,null,"Address:"),r.a.createElement(U.a.Text,null,"Street No: ",t.address.number),r.a.createElement(U.a.Text,null,"Street Name: ",t.address.street),r.a.createElement(U.a.Text,null,"Town: ",t.address.town),r.a.createElement(U.a.Text,null,"Parish: ",t.address.parish),r.a.createElement(U.a.Text,null,"PO: ",t.address.postOffice),r.a.createElement(U.a.Text,null,"D.O.B: ",C),r.a.createElement(U.a.Text,null,"Age: ",t.age),r.a.createElement(U.a.Text,null,"Gender: ",t.gender),r.a.createElement(U.a.Text,null,"Phone: ",t.contact.phone),r.a.createElement(U.a.Text,null,"Email: ",t.contact.email),r.a.createElement(U.a.Text,null,"Reg Date: ",S),r.a.createElement(U.a.Text,null,"Ref Date: ",x),r.a.createElement(U.a.Text,null,"Exp Date: ",I),r.a.createElement(U.a.Text,null,"Job Position: ",t.occupation.role),r.a.createElement(U.a.Text,null,"Employer: ",t.occupation.employer),r.a.createElement(U.a.Text,null,"Employer Phone: ",t.occupation.contact.phone),r.a.createElement(U.a.Text,null,"Employer Email: ",t.occupation.contact.email),r.a.createElement(U.a.Text,null,"Referring Doctor:"),r.a.createElement(U.a.Text,null,"Name: ",t.referringDoctor.name),r.a.createElement(U.a.Text,null,"Phone: ",t.referringDoctor.phone),r.a.createElement(U.a.Text,null,"Email: ",t.referringDoctor.email),r.a.createElement(U.a.Text,null,"Attending Physician:"),r.a.createElement(U.a.Text,null,"Name: ",t.attendingPhysician.name),r.a.createElement(U.a.Text,null,"Phone: ",t.attendingPhysician.phone),r.a.createElement(U.a.Text,null,"Email: ",t.attendingPhysician.email),!0===e.canDelete&&r.a.createElement(h.a,{variant:"danger",onClick:e.onDelete},"Delete Patient !!??")))),r.a.createElement(T.a,{eventKey:"Appointments",title:"Appointments"},r.a.createElement(U.a.Text,null,"Appointments:"),r.a.createElement(ue,{patientAppointment:a,authUserId:e.authUserId})),r.a.createElement(T.a,{eventKey:"Consultant",title:"Consultant"},r.a.createElement(U.a.Text,null,"Consultants:"),null!==i&&r.a.createElement(ye,{patientConsultant:i,authUserId:e.authUserId,canDelete:e.canDelete,onDelete:e.consultantDelete})),r.a.createElement(T.a,{eventKey:"Insurance",title:"Insurance"},r.a.createElement(U.a.Text,null,"Insurance:"),r.a.createElement(fe,{patientInsurance:n,authUserId:e.authUserId,canDelete:e.canDelete,onDelete:e.insuranceDelete})),r.a.createElement(T.a,{eventKey:"NextOfKin",title:"NextOfKin"},r.a.createElement(U.a.Text,null,"NextOfKin:"),r.a.createElement(ve,{patientNextOfKin:o,authUserId:e.authUserId,canDelete:e.canDelete,onDelete:e.nextOfKinDelete})),r.a.createElement(T.a,{eventKey:"Complaint",title:"Complaint"},r.a.createElement(U.a.Text,null,"Complaint:"),r.a.createElement(De,{patientComplaint:l,authUserId:e.authUserId,canDelete:e.canDelete,onDelete:e.complaintDelete})),r.a.createElement(T.a,{eventKey:"Survey",title:"Survey"},r.a.createElement(U.a.Text,null,"Surveys:"),r.a.createElement(Pe,{patientSurvey:c,authUserId:e.authUserId,canDelete:e.canDelete,onDelete:e.surveyDelete})),r.a.createElement(T.a,{eventKey:"Vitals",title:"Vitals"},r.a.createElement(U.a.Text,null,"Vitals:"),r.a.createElement(xe,{patientVitals:s,authUserId:e.authUserId,canDelete:e.canDelete,onDelete:e.vitalsDelete})),r.a.createElement(T.a,{eventKey:"Examination",title:"Examination"},r.a.createElement(U.a.Text,null,"Examination:"),r.a.createElement(Ae,{patientExamination:m,authUserId:e.authUserId,canDelete:e.canDelete,onDelete:e.examinationDelete})),r.a.createElement(T.a,{eventKey:"History",title:"History"},r.a.createElement(U.a.Text,null,"History:"),r.a.createElement(Oe,{patientHistory:d,authUserId:e.authUserId,canDelete:e.canDelete,onDelete:e.historyDelete})),r.a.createElement(T.a,{eventKey:"Allergies",title:"Allergies"},r.a.createElement(U.a.Text,null,"Allergies:"),r.a.createElement(Ue,{patientAllergies:p,authUserId:e.authUserId,canDelete:e.canDelete,onDelete:e.allergiesDelete})),r.a.createElement(T.a,{eventKey:"Medication",title:"Medication"},r.a.createElement(U.a.Text,null,"Medication:"),r.a.createElement(we,{patientMedication:u,authUserId:e.authUserId,canDelete:e.canDelete,onDelete:e.medicationDelete})),r.a.createElement(T.a,{eventKey:"Investigation",title:"Investigation"},r.a.createElement(U.a.Text,null,"Investigation:"),r.a.createElement(_e,{patientInvestigation:f,authUserId:e.authUserId,canDelete:e.canDelete,onDelete:e.investigationDelete})),r.a.createElement(T.a,{eventKey:"Diagnosis",title:"Diagnosis"},r.a.createElement(U.a.Text,null,"Diagnosis:"),r.a.createElement(Le,{patientDiagnosis:g,authUserId:e.authUserId,canDelete:e.canDelete,onDelete:e.diagnosisDelete})),r.a.createElement(T.a,{eventKey:"Treatment",title:"Treatment"},r.a.createElement(U.a.Text,null,"Treatment:"),r.a.createElement(je,{patientTreatment:y,authUserId:e.authUserId,canDelete:e.canDelete,onDelete:e.treatmentDelete})),r.a.createElement(T.a,{eventKey:"Billing",title:"Billing"},r.a.createElement(U.a.Text,null,"Billing:"),r.a.createElement(He,{patientBilling:E,authUserId:e.authUserId,canDelete:e.canDelete,onDelete:e.billingDelete})),r.a.createElement(T.a,{eventKey:"Attachments",title:"Attachments"},r.a.createElement(U.a.Text,null,"Attachments:"),r.a.createElement(qe,{patientAttachments:v,authUserId:e.authUserId,canDelete:e.canDelete,onDelete:e.attachmentDelete})),r.a.createElement(T.a,{eventKey:"Notes",title:"Notes"},r.a.createElement(U.a.Text,null,"Notes:"),r.a.createElement(Ve,{patientNotes:b,authUserId:e.authUserId,canDelete:e.canDelete,onDelete:e.noteDelete})),r.a.createElement(T.a,{eventKey:"Tags",title:"Tags"},r.a.createElement(U.a.Text,null,"Tags:"),r.a.createElement(Me,{patientTags:D,authUserId:e.authUserId,canDelete:e.canDelete,onDelete:e.tagDelete})),r.a.createElement(T.a,{eventKey:"Visit",title:"Visit"},r.a.createElement(U.a.Text,null),r.a.createElement(ft,{authUserId:e.authUserId,canConfirm:!0,onGetVisit:e.onGetVisit,confirmText:"Search",patient:e.patient}),null!==e.visit&&r.a.createElement(ht,{authUserId:e.authUserId,visit:e.visit}))))},yt=function(e){return r.a.createElement("li",{key:e.patientId,className:"users__list-item"},r.a.createElement("div",null,r.a.createElement("h5",{className:"userItemHeading"}," Name:"),r.a.createElement("p",{className:"userItemText"},e.name),r.a.createElement("h5",{className:"userItemHeading"}," Address:"),r.a.createElement("p",{className:"userItemText"},e.addressParish),r.a.createElement("p",{className:"userItemText"},e.addressTown)),r.a.createElement("div",null,r.a.createElement(h.a,{variant:"primary",onClick:e.onDetail.bind(void 0,e._id)},"Details")))},Et=function(e){var t=e.searchPatients.map((function(t){return r.a.createElement(r.a.Fragment,null,r.a.createElement(yt,{key:t._id,userId:e.authUserId,_id:t._id,name:t.name,addressParish:t.address.parish,addressTown:t.address.town,onDetail:e.onViewDetail}))}));return r.a.createElement("ul",{className:"user__list1"},t)},vt=function(e){return r.a.createElement("div",{className:"SearchFormContainer"},r.a.createElement(f.a,{onSubmit:e.onConfirm},r.a.createElement(f.a.Group,{controlId:"formBasicFieldSelect"},r.a.createElement(f.a.Label,null,"Field"),r.a.createElement(f.a.Control,{as:"select"},r.a.createElement("option",null,"select"),r.a.createElement("option",null,"name"),r.a.createElement("option",null,"dob"),r.a.createElement("option",null,"age"),r.a.createElement("option",null,"gender"),r.a.createElement("option",null,"address.town"),r.a.createElement("option",null,"address.parish"),r.a.createElement("option",null,"registrationDate"),r.a.createElement("option",null,"referralDate"),r.a.createElement("option",null,"expirationDate"),r.a.createElement("option",null,"attendingPhysician.name"),r.a.createElement("option",null,"referringDoctor.name"))),r.a.createElement(f.a.Group,{controlId:"formBasicField"},r.a.createElement(f.a.Label,null,"Field"),r.a.createElement(f.a.Control,{type:"text",placeholder:"Field"})),r.a.createElement(f.a.Group,{controlId:"formBasicQuery"},r.a.createElement(f.a.Label,null,"Query"),r.a.createElement(f.a.Control,{type:"textarea",rows:"5",placeholder:"Query"})),e.canCancel&&r.a.createElement(C.a.Toggle,{as:h.a,variant:"danger",eventKey:"10",onClick:e.onCancel},"Cancel"),e.canConfirm&&r.a.createElement(C.a.Toggle,{as:h.a,variant:"success",eventKey:"10",type:"submit"},"Submit")))},bt=function(e){return r.a.createElement("div",{className:"SearchFormContainer"},r.a.createElement(f.a,{onSubmit:e.onConfirm},r.a.createElement(f.a.Group,{controlId:"formBasicId"},r.a.createElement(f.a.Label,null,"Id"),r.a.createElement(f.a.Control,{type:"text",placeholder:"Id"})),e.canCancel&&r.a.createElement(C.a.Toggle,{as:h.a,variant:"danger",eventKey:"5",className:"btn",onClick:e.onCancel},"Cancel"),e.canConfirm&&r.a.createElement(h.a,{variant:"success",type:"submit"},"Search")))},Dt=function(e){return r.a.createElement("div",{className:"SearchFormContainer"},r.a.createElement(f.a,{onSubmit:e.onConfirm},r.a.createElement(f.a.Group,{controlId:"formBasicName"},r.a.createElement(f.a.Label,null,"Name"),r.a.createElement(f.a.Control,{type:"text",placeholder:"Name"})),e.canCancel&&r.a.createElement(C.a.Toggle,{as:h.a,variant:"danger",eventKey:"10",onClick:e.onCancel},"Cancel"),e.canConfirm&&r.a.createElement(C.a.Toggle,{as:h.a,variant:"success",eventKey:"10",type:"submit"},"Submit")))},St=function(e){return r.a.createElement("div",{className:"CreateFormContainer"},r.a.createElement(f.a,{onSubmit:e.onConfirm},r.a.createElement(f.a.Row,null,r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridTitle"},r.a.createElement(f.a.Label,null,"Title"),r.a.createElement(f.a.Control,{type:"text",placeholder:"Patient Title"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridName"},r.a.createElement(f.a.Label,null,"Name"),r.a.createElement(f.a.Control,{type:"text",placeholder:"Patient Name"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridDob"},r.a.createElement(f.a.Label,null,"D.O.B"),r.a.createElement(f.a.Control,{type:"date",placeholder:"Date of Birth"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridAge"},r.a.createElement(f.a.Label,null,"Age"),r.a.createElement(f.a.Control,{type:"number",placeholder:"Age"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridGender"},r.a.createElement(f.a.Label,null,"Gender"),r.a.createElement(f.a.Control,{as:"select"},r.a.createElement("option",null,"Male"),r.a.createElement("option",null,"Female")))),r.a.createElement(f.a.Row,null,r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridContactEmail"},r.a.createElement(f.a.Label,null,"Email"),r.a.createElement(f.a.Control,{type:"email",placeholder:"Patient Email"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridContactPhone"},r.a.createElement(f.a.Label,null,"Phone"),r.a.createElement(f.a.Control,{type:"number",placeholder:"Address Phone"}))),r.a.createElement(f.a.Row,null,r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridAddressNumber"},r.a.createElement(f.a.Label,null,"AddressNumber"),r.a.createElement(f.a.Control,{type:"number",placeholder:"Address Street No."})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridAddressStreet"},r.a.createElement(f.a.Label,null,"AddressStreet"),r.a.createElement(f.a.Control,{type:"text",placeholder:"Address Street Name"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridAddressTown"},r.a.createElement(f.a.Label,null,"AddressTown"),r.a.createElement(f.a.Control,{type:"text",placeholder:"Address Town"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridAddressParish"},r.a.createElement(f.a.Label,null,"AddressParish"),r.a.createElement(f.a.Control,{type:"text",placeholder:"Address Parish"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridAddressPostOffice"},r.a.createElement(f.a.Label,null,"AddressPostOffice"),r.a.createElement(f.a.Control,{type:"text",placeholder:"Address PostOffice"}))),r.a.createElement(f.a.Row,null,r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridRegistrationDate"},r.a.createElement(f.a.Label,null,"RegistrationDate"),r.a.createElement(f.a.Control,{type:"date",placeholder:"Registration Date"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridReferralDate"},r.a.createElement(f.a.Label,null,"ReferralDate"),r.a.createElement(f.a.Control,{type:"date",placeholder:"Referral Date"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridExpirationDate"},r.a.createElement(f.a.Label,null,"ExpirationDate"),r.a.createElement(f.a.Control,{type:"date",placeholder:"Expiration Date"}))),r.a.createElement(f.a.Row,null,r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridReferringDoctorName"},r.a.createElement(f.a.Label,null,"ReferringDoctorName"),r.a.createElement(f.a.Control,{type:"text",placeholder:"Ref Doctor Name"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridReferringDoctorEmail"},r.a.createElement(f.a.Label,null,"ReferringDoctorEmail"),r.a.createElement(f.a.Control,{type:"email",placeholder:"Ref Doctor Email"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridReferringDoctorPhone"},r.a.createElement(f.a.Label,null,"ReferringDoctorPhone"),r.a.createElement(f.a.Control,{type:"number",placeholder:"Ref Doctor Phone"}))),r.a.createElement(f.a.Row,null,r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridAttendingPhysicianName"},r.a.createElement(f.a.Label,null,"AttendingPhysicianName"),r.a.createElement(f.a.Control,{type:"text",placeholder:"Attending Physician Name"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridAttendingPhysicianEmail"},r.a.createElement(f.a.Label,null,"AttendingPhysicianEmail"),r.a.createElement(f.a.Control,{type:"email",placeholder:"Attending Physician Email"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridAttendingPhysicianPhone"},r.a.createElement(f.a.Label,null,"AttendingPhysicianPhone"),r.a.createElement(f.a.Control,{type:"number",placeholder:"Attending Physician Phone"}))),r.a.createElement(f.a.Row,null,r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridOccupationRole"},r.a.createElement(f.a.Label,null,"OccupationRole"),r.a.createElement(f.a.Control,{type:"text",placeholder:"Job Role"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridOccupationEmployer"},r.a.createElement(f.a.Label,null,"OccupationEmployer"),r.a.createElement(f.a.Control,{type:"text",placeholder:"Employer Name"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridOccupationEmployerContactPhone"},r.a.createElement(f.a.Label,null,"OccupationEmployerContactPhone"),r.a.createElement(f.a.Control,{type:"number",placeholder:"Employer Phone"}))),r.a.createElement(f.a.Row,null,r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridOccupationEmployerContactEmail"},r.a.createElement(f.a.Label,null,"OccupationEmployerContactEmail"),r.a.createElement(f.a.Control,{type:"email",placeholder:"Employer Email"}))),e.canCancel&&r.a.createElement(C.a.Toggle,{as:h.a,variant:"danger",eventKey:"2",className:"btn",onClick:e.onCancel},"Cancel"),e.canConfirm&&r.a.createElement(h.a,{variant:"success",type:"submit"},"Create New")))},Pt=function(e){console.log("UpdatePatientForm.props:  ",Object(P.a)({},e));var t=Object(k.a)({},e.patient);return console.log("UpdatePatientForm.props.patient:  ",Object(P.a)({},t)),r.a.createElement("div",{className:"UpdateFormContainer"},r.a.createElement(f.a,{onSubmit:e.onConfirm},r.a.createElement(f.a.Row,null,r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridTitle"},r.a.createElement(f.a.Label,null,"Title"),r.a.createElement(f.a.Control,{type:"text",placeholder:t.title})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridName"},r.a.createElement(f.a.Label,null,"Name"),r.a.createElement(f.a.Control,{type:"text",placeholder:t.name})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridDob"},r.a.createElement(f.a.Label,null,"D.O.B"),r.a.createElement(f.a.Control,{type:"date",placeholder:t.dob})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridAge"},r.a.createElement(f.a.Label,null,"Age"),r.a.createElement(f.a.Control,{type:"number",placeholder:t.age})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridGender"},r.a.createElement(f.a.Label,null,"Gender"),r.a.createElement(f.a.Control,{as:"select"},r.a.createElement("option",null,"Male"),r.a.createElement("option",null,"Female")))),r.a.createElement(f.a.Row,null,r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridContactEmail"},r.a.createElement(f.a.Label,null,"Email"),r.a.createElement(f.a.Control,{type:"email",placeholder:t.contact.email})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridContactPhone"},r.a.createElement(f.a.Label,null,"Phone"),r.a.createElement(f.a.Control,{type:"number",placeholder:t.contact.phone}))),r.a.createElement(f.a.Row,null,r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridAddressNumber"},r.a.createElement(f.a.Label,null,"AddressNumber"),r.a.createElement(f.a.Control,{type:"number",placeholder:t.address.number})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridAddressStreet"},r.a.createElement(f.a.Label,null,"AddressStreet"),r.a.createElement(f.a.Control,{type:"text",placeholder:t.address.street})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridAddressTown"},r.a.createElement(f.a.Label,null,"AddressTown"),r.a.createElement(f.a.Control,{type:"text",placeholder:t.address.town})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridAddressParish"},r.a.createElement(f.a.Label,null,"AddressParish"),r.a.createElement(f.a.Control,{type:"text",placeholder:t.address.parish})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridAddressPostOffice"},r.a.createElement(f.a.Label,null,"AddressPostOffice"),r.a.createElement(f.a.Control,{type:"text",placeholder:t.address.postOffice}))),r.a.createElement(f.a.Row,null,r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridRegistrationDate"},r.a.createElement(f.a.Label,null,"RegistrationDate"),r.a.createElement(f.a.Control,{type:"date",placeholder:t.registrationDate})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridReferralDate"},r.a.createElement(f.a.Label,null,"ReferralDate"),r.a.createElement(f.a.Control,{type:"date",placeholder:t.referralDate})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridExpirationDate"},r.a.createElement(f.a.Label,null,"ExpirationDate"),r.a.createElement(f.a.Control,{type:"date",placeholder:t.expirationDate}))),r.a.createElement(f.a.Row,null,r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridReferringDoctorName"},r.a.createElement(f.a.Label,null,"ReferringDoctorName"),r.a.createElement(f.a.Control,{type:"text",placeholder:t.referringDoctor.name})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridReferringDoctorEmail"},r.a.createElement(f.a.Label,null,"ReferringDoctorEmail"),r.a.createElement(f.a.Control,{type:"email",placeholder:t.referringDoctor.email})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridReferringDoctorPhone"},r.a.createElement(f.a.Label,null,"ReferringDoctorPhone"),r.a.createElement(f.a.Control,{type:"number",placeholder:t.referringDoctor.phone}))),r.a.createElement(f.a.Row,null,r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridAttendingPhysicianName"},r.a.createElement(f.a.Label,null,"AttendingPhysicianName"),r.a.createElement(f.a.Control,{type:"text",placeholder:t.attendingPhysician.name})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridAttendingPhysicianEmail"},r.a.createElement(f.a.Label,null,"AttendingPhysicianEmail"),r.a.createElement(f.a.Control,{type:"email",placeholder:t.attendingPhysician.email})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridAttendingPhysicianPhone"},r.a.createElement(f.a.Label,null,"AttendingPhysicianPhone"),r.a.createElement(f.a.Control,{type:"number",placeholder:t.attendingPhysician.phone}))),r.a.createElement(f.a.Row,null,r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridOccupationRole"},r.a.createElement(f.a.Label,null,"OccupationRole"),r.a.createElement(f.a.Control,{type:"text",placeholder:t.occupation.role})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridOccupationEmployer"},r.a.createElement(f.a.Label,null,"OccupationEmployer"),r.a.createElement(f.a.Control,{type:"text",placeholder:t.occupation.employer})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridOccupationEmployerContactPhone"},r.a.createElement(f.a.Label,null,"OccupationEmployerContactPhone"),r.a.createElement(f.a.Control,{type:"number",placeholder:t.occupation.contact.phone}))),r.a.createElement(f.a.Row,null,r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridOccupationEmployerContactEmail"},r.a.createElement(f.a.Label,null,"OccupationEmployerContactEmail"),r.a.createElement(f.a.Control,{type:"email",placeholder:t.occupation.contact.email}))),e.canCancel&&r.a.createElement(h.a,{variant:"danger",onClick:e.onCancel},"Cancel"),e.canConfirm&&r.a.createElement(h.a,{variant:"success",type:"submit"},"Edit Patient")))},Ct=function(e){console.log("UpdatePatientFieldForm.props:  ",Object(P.a)({},e));var t=Object(k.a)({},e.patient);return console.log("UpdatePatientFieldForm.props.user:  ",Object(P.a)({},t)),r.a.createElement("div",{className:"UpdateFormContainer"},r.a.createElement(f.a,{onSubmit:e.onConfirm},r.a.createElement(f.a.Row,null,r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridFieldSelect"},r.a.createElement(f.a.Label,null,"Field Options"),r.a.createElement(f.a.Control,{as:"select"},r.a.createElement("option",null,"select"),r.a.createElement("option",null,"name"),r.a.createElement("option",null,"dob"),r.a.createElement("option",null,"age"),r.a.createElement("option",null,"gender"),r.a.createElement("option",null,"address.town"),r.a.createElement("option",null,"address.parish"),r.a.createElement("option",null,"registrationDate"),r.a.createElement("option",null,"referralDate"),r.a.createElement("option",null,"expirationDate"),r.a.createElement("option",null,"attendingPhysician.name"),r.a.createElement("option",null,"referringDoctor.name"))),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridField"},r.a.createElement(f.a.Label,null,"Field"),r.a.createElement(f.a.Control,{type:"text",placeholder:"Field"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridQuery"},r.a.createElement(f.a.Label,null,"Query"),r.a.createElement(f.a.Label,null,"Date Format YYYY-MM-DD"),r.a.createElement(f.a.Control,{type:"text",placeholder:"Query"}))),e.canCancel&&r.a.createElement(h.a,{variant:"danger",onClick:e.onCancel},"Cancel"),e.canConfirm&&r.a.createElement(h.a,{variant:"success",type:"submit"},"Edit Patient Field")))},xt=function(e){console.log("UpdatePatientConsultantForm.props:  ",Object(P.a)({},e));var t=Object(k.a)({},e.patient);return console.log("UpdatePatientConsultantForm.props.patient:  ",Object(P.a)({},t)),r.a.createElement("div",{className:"UpdateFormContainer"},r.a.createElement(f.a,{onSubmit:e.onConfirm},r.a.createElement(f.a.Row,null,r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridConsultantDate"},r.a.createElement(f.a.Label,null,"ConsultantDate"),r.a.createElement(f.a.Control,{type:"date",placeholder:"ConsultantDate"}))),e.canCancel&&r.a.createElement(C.a.Toggle,{as:h.a,variant:"danger",eventKey:"9",className:"btn",onClick:e.onCancel},"Cancel"),e.canConfirm&&r.a.createElement(C.a.Toggle,{as:h.a,variant:"success",eventKey:"9",className:"btn",type:"submit"},"Submit")))},It=function(e){console.log("UpdatePatientInsuranceForm.props:  ",Object(P.a)({},e));var t=Object(k.a)({},e.patient);return console.log("UpdatePatientInsuranceForm.props.patient:  ",Object(P.a)({},t)),r.a.createElement("div",{className:"UpdateFormContainer"},r.a.createElement(f.a,{onSubmit:e.onConfirm},r.a.createElement(f.a.Row,null,r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridInsuranceCompany"},r.a.createElement(f.a.Label,null,"insuranceCompany"),r.a.createElement(f.a.Control,{type:"text",placeholder:"insuranceCompany"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridInsuranceNumber"},r.a.createElement(f.a.Label,null,"insuranceNumber"),r.a.createElement(f.a.Control,{type:"number",placeholder:"insuranceNumber"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridInsuranceDescription"},r.a.createElement(f.a.Label,null,"insuranceDescription"),r.a.createElement(f.a.Control,{type:"text",placeholder:"insuranceDescription"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridInsuranceExpiry"},r.a.createElement(f.a.Label,null,"insuranceExpiry"),r.a.createElement(f.a.Control,{type:"date",placeholder:"insuranceExpiry"}))),r.a.createElement(f.a.Row,null,r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridInsuranceSubscriberCompany"},r.a.createElement(f.a.Label,null,"insuranceSubscriberCompany"),r.a.createElement(f.a.Control,{type:"text",placeholder:"insuranceSubscriberCompany"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridInsuranceSubscriberDescription"},r.a.createElement(f.a.Label,null,"insuranceSubscriberDescription"),r.a.createElement(f.a.Control,{tas:"textarea",rows:"3",placeholder:"insuranceSubscriberDescription"}))),e.canCancel&&r.a.createElement(C.a.Toggle,{as:h.a,variant:"danger",eventKey:"9",className:"btn",onClick:e.onCancel},"Cancel"),e.canConfirm&&r.a.createElement(C.a.Toggle,{as:h.a,variant:"success",eventKey:"9",className:"btn",type:"submit"},"Submit")))},At=function(e){console.log("UpdatePatientNextOfKinForm.props:  ",Object(P.a)({},e));var t=Object(k.a)({},e.patient);return console.log("UpdatePatientNextOfKinForm.props.patient:  ",Object(P.a)({},t)),r.a.createElement("div",{className:"UpdateFormContainer"},r.a.createElement(f.a,{onSubmit:e.onConfirm},r.a.createElement(f.a.Row,null,r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridNextOfKinName"},r.a.createElement(f.a.Label,null,"NextOfKinName"),r.a.createElement(f.a.Control,{type:"text",placeholder:"NextOfKinName"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridNextOfKinPhone"},r.a.createElement(f.a.Label,null,"NextOfKinPhone"),r.a.createElement(f.a.Control,{type:"number",placeholder:"NextOfKinPhone"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridNextOfKinEmail"},r.a.createElement(f.a.Label,null,"NextOfKinEmail"),r.a.createElement(f.a.Control,{type:"email",placeholder:"NextOfKinEmail"}))),e.canCancel&&r.a.createElement(C.a.Toggle,{as:h.a,variant:"danger",eventKey:"9",className:"btn",onClick:e.onCancel},"Cancel"),e.canConfirm&&r.a.createElement(C.a.Toggle,{as:h.a,variant:"success",eventKey:"9",className:"btn",type:"submit"},"Submit")))},Nt=function(e){console.log("UpdatePatientComplaintForm.props:  ",Object(P.a)({},e));var t=Object(k.a)({},e.patient);return console.log("UpdatePatientComplaintForm.props.patient:  ",Object(P.a)({},t)),r.a.createElement("div",{className:"UpdateFormContainer"},r.a.createElement(f.a,{onSubmit:e.onConfirm},r.a.createElement(f.a.Row,null,r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridComplaintDate"},r.a.createElement(f.a.Label,null,"ComplaintDate"),r.a.createElement(f.a.Control,{type:"date",placeholder:"ComplaintDate"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridComplaintTitle"},r.a.createElement(f.a.Label,null,"ComplaintTitle"),r.a.createElement(f.a.Control,{type:"text",placeholder:"ComplaintTitle"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridComplaintDescription"},r.a.createElement(f.a.Label,null,"ComplaintDescription"),r.a.createElement(f.a.Control,{as:"textarea",rows:"3",placeholder:"ComplaintDescription"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridComplaintAnamnesis"},r.a.createElement(f.a.Label,null,"ComplaintAnamnesis"),r.a.createElement(f.a.Control,{as:"textarea",rows:"3",placeholder:"ComplaintAnamnesis"}))),r.a.createElement(f.a.Row,null,r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridComplaintAttachmentName"},r.a.createElement(f.a.Label,null,"ComplaintAttachmentName"),r.a.createElement(f.a.Control,{type:"text",placeholder:"complaintAttachmentName"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridComplaintAttachmentFormat"},r.a.createElement(f.a.Label,null,"ComplaintAttachmentFormat"),r.a.createElement(f.a.Control,{type:"text",placeholder:"complaintAttachmentFormat"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridComplaintAttachmentPath"},r.a.createElement(f.a.Label,null,"ComplaintAttachmentPath"),r.a.createElement(f.a.Control,{type:"text",placeholder:"complaintAttachmentPath"}))),e.canCancel&&r.a.createElement(C.a.Toggle,{as:h.a,variant:"danger",eventKey:"9",className:"btn",onClick:e.onCancel},"Cancel"),e.canConfirm&&r.a.createElement(C.a.Toggle,{as:h.a,variant:"success",eventKey:"9",className:"btn",type:"submit"},"Submit")))},Ot=function(e){console.log("UpdatePatientSurveyForm.props:  ",Object(P.a)({},e));var t=Object(k.a)({},e.patient);return console.log("UpdatePatientSurveyForm.props.patient:  ",Object(P.a)({},t)),r.a.createElement("div",{className:"UpdateFormContainer"},r.a.createElement(f.a,{onSubmit:e.onConfirm},r.a.createElement(f.a.Row,null,r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridSurveyDate"},r.a.createElement(f.a.Label,null,"SurveyDate"),r.a.createElement(f.a.Control,{type:"date",placeholder:"SurveyDate"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridSurveyTitle"},r.a.createElement(f.a.Label,null,"SurveyTitle"),r.a.createElement(f.a.Control,{type:"text",placeholder:"SurveyTitle"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridSurveyDescription"},r.a.createElement(f.a.Label,null,"SurveyDescription"),r.a.createElement(f.a.Control,{as:"textarea",rows:"3",placeholder:"SurveyDescription"}))),r.a.createElement(f.a.Row,null,r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridSurveyAttachmentName"},r.a.createElement(f.a.Label,null,"SurveyAttachmentName"),r.a.createElement(f.a.Control,{type:"text",placeholder:"SurveyAttachmentName"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridSurveyAttachmentFormat"},r.a.createElement(f.a.Label,null,"SurveyAttachmentFormat"),r.a.createElement(f.a.Control,{type:"text",placeholder:"SurveyAttachmentFormat"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridSurveyAttachmentPath"},r.a.createElement(f.a.Label,null,"SurveyAttachmentPath"),r.a.createElement(f.a.Control,{type:"text",placeholder:"SurveyAttachmentPath"}))),e.canCancel&&r.a.createElement(C.a.Toggle,{as:h.a,variant:"danger",eventKey:"9",className:"btn",onClick:e.onCancel},"Cancel"),e.canConfirm&&r.a.createElement(C.a.Toggle,{as:h.a,variant:"success",eventKey:"9",className:"btn",type:"submit"},"Submit")))},Tt=function(e){console.log("UpdatePatientVitalsForm.props:  ",Object(P.a)({},e));var t=Object(k.a)({},e.patient);return console.log("UpdatePatientVitalsForm.props.patient:  ",Object(P.a)({},t)),r.a.createElement("div",{className:"UpdateFormContainer"},r.a.createElement(f.a,{onSubmit:e.onConfirm},r.a.createElement(f.a.Row,null,r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridVitalsDate"},r.a.createElement(f.a.Label,null,"VitalsDate"),r.a.createElement(f.a.Control,{type:"date",placeholder:"VitalsDate"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridVitalsPr"},r.a.createElement(f.a.Label,null,"VitalsPr"),r.a.createElement(f.a.Control,{type:"number",placeholder:"VitalsPr"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridVitalsBp1"},r.a.createElement(f.a.Label,null,"VitalsBp1"),r.a.createElement(f.a.Control,{type:"number",placeholder:"VitalsBp1"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridVitalsBp2"},r.a.createElement(f.a.Label,null,"VitalsBp2"),r.a.createElement(f.a.Control,{type:"number",placeholder:"VitalsBp2"}))),r.a.createElement(f.a.Row,null,r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridVitalsRr"},r.a.createElement(f.a.Label,null,"VitalsRr"),r.a.createElement(f.a.Control,{type:"number",placeholder:"VitalsRr"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridVitalsTemp"},r.a.createElement(f.a.Label,null,"VitalsTemp"),r.a.createElement(f.a.Control,{type:"number",placeholder:"VitalsTemp"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridVitalsPs02"},r.a.createElement(f.a.Label,null,"VitalsPs02"),r.a.createElement(f.a.Control,{type:"number",placeholder:"VitalsPs02"}))),r.a.createElement(f.a.Row,null,r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridVitalsHeight"},r.a.createElement(f.a.Label,null,"VitalsHeight"),r.a.createElement(f.a.Control,{type:"number",placeholder:"VitalsHeight"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridVitalsWeight"},r.a.createElement(f.a.Label,null,"VitalsWeight"),r.a.createElement(f.a.Control,{type:"number",placeholder:"VitalsWeight"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridVitalsBmi"},r.a.createElement(f.a.Label,null,"VitalsBmi"),r.a.createElement(f.a.Control,{type:"number",placeholder:"VitalsBmi"}))),r.a.createElement(f.a.Row,null,r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridVitalsUrineType"},r.a.createElement(f.a.Label,null,"VitalsUrineType"),r.a.createElement(f.a.Control,{type:"text",placeholder:"VitalsUrineType"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridVitalsUrineValue"},r.a.createElement(f.a.Label,null,"VitalsUrineValue"),r.a.createElement(f.a.Control,{type:"text",placeholder:"VitalsUrineValue"}))),e.canCancel&&r.a.createElement(C.a.Toggle,{as:h.a,variant:"danger",eventKey:"9",className:"btn"},"Cancel"),e.canConfirm&&r.a.createElement(C.a.Toggle,{as:h.a,variant:"success",eventKey:"9",className:"btn",type:"submit"},"Submit")))},Ut=function(e){console.log("UpdatePatientExaminationForm.props:  ",Object(P.a)({},e));var t=Object(k.a)({},e.patient);return console.log("UpdatePatientExaminationForm.props.patient:  ",Object(P.a)({},t)),r.a.createElement("div",{className:"UpdateFormContainer"},r.a.createElement(f.a,{onSubmit:e.onConfirm},r.a.createElement(f.a.Row,null,r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridExaminationDate"},r.a.createElement(f.a.Label,null,"ExaminationDate"),r.a.createElement(f.a.Control,{type:"date",placeholder:"ExaminationDate"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridExaminationAreaSelect"},r.a.createElement(f.a.Label,null,"ExaminationArea Options"),r.a.createElement(f.a.Control,{as:"select"},r.a.createElement("option",null,"select"),r.a.createElement("option",null,"nose"),r.a.createElement("option",null,"fauces"),r.a.createElement("option",null,"ears"),r.a.createElement("option",null,"larynx"),r.a.createElement("option",null,"neck"),r.a.createElement("option",null,"chest"),r.a.createElement("option",null,"cvs"),r.a.createElement("option",null,"abdomen"))),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridExaminationArea"},r.a.createElement(f.a.Label,null,"ExaminationArea"),r.a.createElement(f.a.Control,{type:"text",placeholder:"ExaminationArea"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridExaminationGeneral"},r.a.createElement(f.a.Label,null,"ExaminationGeneral"),r.a.createElement(f.a.Control,{type:"text",placeholder:"ExaminationGeneral"}))),r.a.createElement(f.a.Row,null,r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridExaminationType"},r.a.createElement(f.a.Label,null,"ExaminationType"),r.a.createElement(f.a.Control,{type:"text",placeholder:"ExaminationType"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridExaminationMeasure"},r.a.createElement(f.a.Label,null,"ExaminationMeasure"),r.a.createElement(f.a.Control,{type:"text",placeholder:"ExaminationMeasure"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridExaminationValue"},r.a.createElement(f.a.Label,null,"ExaminationValue"),r.a.createElement(f.a.Control,{type:"text",placeholder:"ExaminationValue"}))),r.a.createElement(f.a.Row,null,r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridExaminationDescription"},r.a.createElement(f.a.Label,null,"ExaminationDescription"),r.a.createElement(f.a.Control,{as:"textarea",rows:"3",placeholder:"ExaminationDescription"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridExaminationFollowUp"},r.a.createElement(f.a.Label,null,"ExaminationFollowUp"),r.a.createElement(f.a.Control,{as:"select"},r.a.createElement("option",null,"true"),r.a.createElement("option",null,"false")))),r.a.createElement(f.a.Row,null,r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridExaminationAttachmentName"},r.a.createElement(f.a.Label,null,"ExaminationAttachmentName"),r.a.createElement(f.a.Control,{type:"text",placeholder:"ExaminationAttachmentName"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridExaminationAttachmentFormat"},r.a.createElement(f.a.Label,null,"ExaminationAttachmentFormat"),r.a.createElement(f.a.Control,{type:"text",placeholder:"ExaminationAttachmentFormat"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridExaminationAttachmentPath"},r.a.createElement(f.a.Label,null,"ExaminationAttachmentPath"),r.a.createElement(f.a.Control,{type:"text",placeholder:"ExaminationAttachmentPath"}))),e.canCancel&&r.a.createElement(C.a.Toggle,{as:h.a,variant:"danger",eventKey:"9",className:"btn",onClick:e.onCancel},"Cancel"),e.canConfirm&&r.a.createElement(C.a.Toggle,{as:h.a,variant:"success",eventKey:"9",className:"btn",type:"submit"},"Submit")))},Gt=function(e){console.log("UpdatePatientHistoryForm.props:  ",Object(P.a)({},e));var t=Object(k.a)({},e.patient);return console.log("UpdatePatientHistoryForm.props.patient:  ",Object(P.a)({},t)),r.a.createElement("div",{className:"UpdateFormContainer"},r.a.createElement(f.a,{onSubmit:e.onConfirm},r.a.createElement(f.a.Row,null,r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridHistoryType"},r.a.createElement(f.a.Label,null,"HistoryType"),r.a.createElement(f.a.Control,{type:"text",placeholder:"HistoryType"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridHistoryDate"},r.a.createElement(f.a.Label,null,"HistoryDate"),r.a.createElement(f.a.Control,{type:"date",placeholder:"HistoryDate"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridHistoryTitle"},r.a.createElement(f.a.Label,null,"HistoryTitle"),r.a.createElement(f.a.Control,{type:"text",placeholder:"HistoryTitle"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridHistoryDescription"},r.a.createElement(f.a.Label,null,"HistoryDescription"),r.a.createElement(f.a.Control,{as:"textarea",rows:"3",placeholder:"HistoryDescription"}))),r.a.createElement(f.a.Row,null,r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridHistoryAttachmentName"},r.a.createElement(f.a.Label,null,"HistoryAttachmentName"),r.a.createElement(f.a.Control,{type:"text",placeholder:"HistoryAttachmentName"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridHistoryAttachmentFormat"},r.a.createElement(f.a.Label,null,"HistoryAttachmentFormat"),r.a.createElement(f.a.Control,{type:"text",placeholder:"HistoryAttachmentFormat"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridHistoryAttachmentPath"},r.a.createElement(f.a.Label,null,"HistoryAttachmentPath"),r.a.createElement(f.a.Control,{type:"text",placeholder:"HistoryAttachmentPath"}))),e.canCancel&&r.a.createElement(C.a.Toggle,{as:h.a,variant:"danger",eventKey:"9",className:"btn",onClick:e.onCancel},"Cancel"),e.canConfirm&&r.a.createElement(C.a.Toggle,{as:h.a,variant:"success",eventKey:"9",className:"btn",type:"submit"},"Submit")))},wt=function(e){console.log("UpdatePatientAllergiesForm.props:  ",Object(P.a)({},e));var t=Object(k.a)({},e.patient);return console.log("UpdatePatientAllergiesForm.props.patient:  ",Object(P.a)({},t)),r.a.createElement("div",{className:"UpdateFormContainer"},r.a.createElement(f.a,{onSubmit:e.onConfirm},r.a.createElement(f.a.Row,null,r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridAllergiesTitle"},r.a.createElement(f.a.Label,null,"AllergiesTitle"),r.a.createElement(f.a.Control,{type:"text",placeholder:"AllergiesTitle"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridAllergiesTypeSelect"},r.a.createElement(f.a.Label,null,"AllergiesType Options"),r.a.createElement(f.a.Control,{as:"select"},r.a.createElement("option",null,"select"),r.a.createElement("option",null,"food"),r.a.createElement("option",null,"drug"))),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridAllergiesType"},r.a.createElement(f.a.Label,null,"AllergiesType"),r.a.createElement(f.a.Control,{type:"text",placeholder:"AllergiesType"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridAllergiesDescription"},r.a.createElement(f.a.Label,null,"AllergiesDescription"),r.a.createElement(f.a.Control,{as:"textarea",rows:"3",placeholder:"AllergiesDescription"}))),r.a.createElement(f.a.Row,null,r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridAllergiesAttachmentName"},r.a.createElement(f.a.Label,null,"AllergiesAttachmentName"),r.a.createElement(f.a.Control,{type:"text",placeholder:"AllergiesAttachmentName"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridAllergiesAttachmentFormat"},r.a.createElement(f.a.Label,null,"AllergiesAttachmentFormat"),r.a.createElement(f.a.Control,{type:"text",placeholder:"AllergiesAttachmentFormat"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridAllergiesAttachmentPath"},r.a.createElement(f.a.Label,null,"AllergiesAttachmentPath"),r.a.createElement(f.a.Control,{type:"text",placeholder:"AllergiesAttachmentPath"}))),e.canCancel&&r.a.createElement(C.a.Toggle,{as:h.a,variant:"danger",eventKey:"9",className:"btn",onClick:e.onCancel},"Cancel"),e.canConfirm&&r.a.createElement(C.a.Toggle,{as:h.a,variant:"success",eventKey:"9",className:"btn",type:"submit"},"Submit")))},Ft=function(e){console.log("UpdatePatientMedicationForm.props:  ",Object(P.a)({},e));var t=Object(k.a)({},e.patient);return console.log("UpdatePatientMedicationForm.props.patient:  ",Object(P.a)({},t)),r.a.createElement("div",{className:"UpdateFormContainer"},r.a.createElement(f.a,{onSubmit:e.onConfirm},r.a.createElement(f.a.Row,null,r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridMedicationTitle"},r.a.createElement(f.a.Label,null,"MedicationTitle"),r.a.createElement(f.a.Control,{type:"text",placeholder:"MedicationTitle"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridMedicationType"},r.a.createElement(f.a.Label,null,"MedicationType"),r.a.createElement(f.a.Control,{type:"text",placeholder:"MedicationType"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridMedicationDescription"},r.a.createElement(f.a.Label,null,"MedicationDescription"),r.a.createElement(f.a.Control,{as:"textarea",rows:"3",placeholder:"MedicationDescription"}))),r.a.createElement(f.a.Row,null,r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridMedicationAttachmentName"},r.a.createElement(f.a.Label,null,"MedicationAttachmentName"),r.a.createElement(f.a.Control,{type:"text",placeholder:"MedicationAttachmentName"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridMedicationAttachmentFormat"},r.a.createElement(f.a.Label,null,"MedicationAttachmentFormat"),r.a.createElement(f.a.Control,{type:"text",placeholder:"MedicationAttachmentFormat"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridMedicationAttachmentPath"},r.a.createElement(f.a.Label,null,"MedicationAttachmentPath"),r.a.createElement(f.a.Control,{type:"text",placeholder:"MedicationAttachmentPath"}))),e.canCancel&&r.a.createElement(C.a.Toggle,{as:h.a,variant:"danger",eventKey:"9",className:"btn",onClick:e.onCancel},"Cancel"),e.canConfirm&&r.a.createElement(C.a.Toggle,{as:h.a,variant:"success",eventKey:"9",className:"btn",type:"submit"},"Submit")))},_t=function(e){console.log("UpdatePatientInvestigationForm.props:  ",Object(P.a)({},e));var t=Object(k.a)({},e.patient);return console.log("UpdatePatientInvestigationForm.props.patient:  ",Object(P.a)({},t)),r.a.createElement("div",{className:"UpdateFormContainer"},r.a.createElement(f.a,{onSubmit:e.onConfirm},r.a.createElement(f.a.Row,null,r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridInvestigationDate"},r.a.createElement(f.a.Label,null,"InvestigationDate"),r.a.createElement(f.a.Control,{type:"date",placeholder:"InvestigationDate"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridInvestigationTitle"},r.a.createElement(f.a.Label,null,"InvestigationTitle"),r.a.createElement(f.a.Control,{type:"text",placeholder:"InvestigationTitle"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridInvestigationTypeSelect"},r.a.createElement(f.a.Label,null,"InvestigationType Options"),r.a.createElement(f.a.Control,{as:"select"},r.a.createElement("option",null,"select"),r.a.createElement("option",null,"procedure"),r.a.createElement("option",null,"prescription"))),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridInvestigationType"},r.a.createElement(f.a.Label,null,"InvestigationType"),r.a.createElement(f.a.Control,{type:"text",placeholder:"InvestigationType"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridInvestigationDescription"},r.a.createElement(f.a.Label,null,"InvestigationDescription"),r.a.createElement(f.a.Control,{as:"textarea",rows:"3",placeholder:"InvestigationDescription"}))),r.a.createElement(f.a.Row,null,r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridInvestigationAttachmentName"},r.a.createElement(f.a.Label,null,"InvestigationAttachmentName"),r.a.createElement(f.a.Control,{type:"text",placeholder:"InvestigationAttachmentName"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridInvestigationAttachmentFormat"},r.a.createElement(f.a.Label,null,"InvestigationAttachmentFormat"),r.a.createElement(f.a.Control,{type:"text",placeholder:"InvestigationAttachmentFormat"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridInvestigationAttachmentPath"},r.a.createElement(f.a.Label,null,"InvestigationAttachmentPath"),r.a.createElement(f.a.Control,{type:"text",placeholder:"InvestigationAttachmentPath"}))),e.canCancel&&r.a.createElement(C.a.Toggle,{as:h.a,variant:"danger",eventKey:"9",className:"btn",onClick:e.onCancel},"Cancel"),e.canConfirm&&r.a.createElement(C.a.Toggle,{as:h.a,variant:"success",eventKey:"9",className:"btn",type:"submit"},"Submit")))},kt=function(e){console.log("UpdatePatientDiagnosisForm.props:  ",Object(P.a)({},e));var t=Object(k.a)({},e.patient);return console.log("UpdatePatientDiagnosisForm.props.patient:  ",Object(P.a)({},t)),r.a.createElement("div",{className:"UpdateFormContainer"},r.a.createElement(f.a,{onSubmit:e.onConfirm},r.a.createElement(f.a.Row,null,r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridDiagnosisDate"},r.a.createElement(f.a.Label,null,"DiagnosisDate"),r.a.createElement(f.a.Control,{type:"date",placeholder:"DiagnosisDate"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridDiagnosisTitle"},r.a.createElement(f.a.Label,null,"DiagnosisTitle"),r.a.createElement(f.a.Control,{type:"text",placeholder:"DiagnosisTitle"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridDiagnosisType"},r.a.createElement(f.a.Label,null,"DiagnosisType"),r.a.createElement(f.a.Control,{type:"text",placeholder:"DiagnosisType"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridDiagnosisDescription"},r.a.createElement(f.a.Label,null,"DiagnosisDescription"),r.a.createElement(f.a.Control,{as:"textarea",rows:"3",placeholder:"DiagnosisDescription"}))),r.a.createElement(f.a.Row,null,r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridDiagnosisAttachmentName"},r.a.createElement(f.a.Label,null,"DiagnosisAttachmentName"),r.a.createElement(f.a.Control,{type:"text",placeholder:"DiagnosisAttachmentName"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridDiagnosisAttachmentFormat"},r.a.createElement(f.a.Label,null,"DiagnosisAttachmentFormat"),r.a.createElement(f.a.Control,{type:"text",placeholder:"DiagnosisAttachmentFormat"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridDiagnosisAttachmentPath"},r.a.createElement(f.a.Label,null,"DiagnosisAttachmentPath"),r.a.createElement(f.a.Control,{type:"text",placeholder:"DiagnosisAttachmentPath"}))),e.canCancel&&r.a.createElement(C.a.Toggle,{as:h.a,variant:"danger",eventKey:"9",className:"btn",onClick:e.onCancel},"Cancel"),e.canConfirm&&r.a.createElement(C.a.Toggle,{as:h.a,variant:"success",eventKey:"9",className:"btn",type:"submit"},"Submit")))},Lt=function(e){console.log("UpdatePatientTreatmentForm.props:  ",Object(P.a)({},e));var t=Object(k.a)({},e.patient);return console.log("UpdatePatientTreatmentForm.props.patient:  ",Object(P.a)({},t)),r.a.createElement("div",{className:"UpdateFormContainer"},r.a.createElement(f.a,{onSubmit:e.onConfirm},r.a.createElement(f.a.Row,null,r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridTreatmentDate"},r.a.createElement(f.a.Label,null,"TreatmentDate"),r.a.createElement(f.a.Control,{type:"date",placeholder:"TreatmentDate"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridTreatmentTitle"},r.a.createElement(f.a.Label,null,"TreatmentTitle"),r.a.createElement(f.a.Control,{type:"text",placeholder:"TreatmentTitle"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridTreatmentType"},r.a.createElement(f.a.Label,null,"TreatmentType"),r.a.createElement(f.a.Control,{type:"text",placeholder:"TreatmentType"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridTreatmentDescription"},r.a.createElement(f.a.Label,null,"TreatmentDescription"),r.a.createElement(f.a.Control,{as:"textarea",rows:"3",placeholder:"TreatmentDescription"}))),r.a.createElement(f.a.Row,null,r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridTreatmentDose"},r.a.createElement(f.a.Label,null,"TreatmentDose"),r.a.createElement(f.a.Control,{type:"text",placeholder:"TreatmentDose"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridTreatmentFrequency"},r.a.createElement(f.a.Label,null,"TreatmentFrequency"),r.a.createElement(f.a.Control,{type:"text",placeholder:"TreatmentFrequency"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridTreatmentTypeSelect"},r.a.createElement(f.a.Label,null,"TreatmentType Options"),r.a.createElement(f.a.Control,{as:"select"},r.a.createElement("option",null,"select"),r.a.createElement("option",null,"procedure"),r.a.createElement("option",null,"prescription"))),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridTreatmentType"},r.a.createElement(f.a.Label,null,"TreatmentType"),r.a.createElement(f.a.Control,{type:"text",placeholder:"TreatmentType"}))),r.a.createElement(f.a.Row,null,r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridTreatmentAttachmentName"},r.a.createElement(f.a.Label,null,"TreatmentAttachmentName"),r.a.createElement(f.a.Control,{type:"text",placeholder:"DiagnosisAttachmentName"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridTreatmentAttachmentFormat"},r.a.createElement(f.a.Label,null,"TreatmentAttachmentFormat"),r.a.createElement(f.a.Control,{type:"text",placeholder:"TreatmentAttachmentFormat"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridTreatmentAttachmentPath"},r.a.createElement(f.a.Label,null,"TreatmentAttachmentPath"),r.a.createElement(f.a.Control,{type:"text",placeholder:"TreatmentAttachmentPath"}))),e.canCancel&&r.a.createElement(C.a.Toggle,{as:h.a,variant:"danger",eventKey:"9",className:"btn",onClick:e.onCancel},"Cancel"),e.canConfirm&&r.a.createElement(C.a.Toggle,{as:h.a,variant:"success",eventKey:"9",className:"btn",type:"submit"},"Submit")))},Jt=function(e){console.log("UpdatePatientBillingForm.props:  ",Object(P.a)({},e));var t=Object(k.a)({},e.patient);return console.log("UpdatePatientBillingForm.props.patient:  ",Object(P.a)({},t)),r.a.createElement("div",{className:"UpdateFormContainer"},r.a.createElement(f.a,{onSubmit:e.onConfirm},r.a.createElement(f.a.Row,null,r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridBillingDate"},r.a.createElement(f.a.Label,null,"BillingDate"),r.a.createElement(f.a.Control,{type:"date",placeholder:"BillingDate"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridBillingTitle"},r.a.createElement(f.a.Label,null,"BillingTitle"),r.a.createElement(f.a.Control,{type:"text",placeholder:"BillingTitle"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridBillingType"},r.a.createElement(f.a.Label,null,"BillingType"),r.a.createElement(f.a.Control,{type:"text",placeholder:"BillingType"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridBillingDescription"},r.a.createElement(f.a.Label,null,"BillingDescription"),r.a.createElement(f.a.Control,{as:"textarea",rows:"3",placeholder:"BillingDescription"}))),r.a.createElement(f.a.Row,null,r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridBillingAmount"},r.a.createElement(f.a.Label,null,"BillingAmount"),r.a.createElement(f.a.Control,{type:"text",placeholder:"BillingAmount"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridBillingPaid"},r.a.createElement(f.a.Label,null,"BillingPaid"),r.a.createElement(f.a.Control,{as:"select"},r.a.createElement("option",null,"true"),r.a.createElement("option",null,"false"))),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridBillingNotes"},r.a.createElement(f.a.Label,null,"BillingNotes"),r.a.createElement(f.a.Control,{as:"textarea",rows:"3",placeholder:"BillingNotes"}))),r.a.createElement(f.a.Row,null,r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridBillingAttachmentName"},r.a.createElement(f.a.Label,null,"BillingAttachmentName"),r.a.createElement(f.a.Control,{type:"text",placeholder:"BillingAttachmentName"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridBillingAttachmentFormat"},r.a.createElement(f.a.Label,null,"BillingAttachmentFormat"),r.a.createElement(f.a.Control,{type:"text",placeholder:"BillingAttachmentFormat"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridBillingAttachmentPath"},r.a.createElement(f.a.Label,null,"BillingAttachmentPath"),r.a.createElement(f.a.Control,{type:"text",placeholder:"BillingAttachmentPath"}))),e.canCancel&&r.a.createElement(C.a.Toggle,{as:h.a,variant:"danger",eventKey:"9",className:"btn",onClick:e.onCancel},"Cancel"),e.canConfirm&&r.a.createElement(C.a.Toggle,{as:h.a,variant:"success",eventKey:"9",className:"btn",type:"submit"},"Submit")))},jt=function(e){console.log("UpdatePatientAttachmentForm.props:  ",Object(P.a)({},e));var t=Object(k.a)({},e.patient);return console.log("UpdatePatientAttachmentForm.props.patient:  ",Object(P.a)({},t)),r.a.createElement("div",{className:"UpdateFormContainer"},r.a.createElement(f.a,{onSubmit:e.onConfirm},r.a.createElement(f.a.Row,null,r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridPatientAttachmentName"},r.a.createElement(f.a.Label,null,"PatientAttachmentName"),r.a.createElement(f.a.Control,{type:"text",placeholder:"PatientAttachmentName"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridPatientAttachmentFormat"},r.a.createElement(f.a.Label,null,"PatientAttachmentFormat"),r.a.createElement(f.a.Control,{type:"text",placeholder:"PatientAttachmentFormat"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridPatientAttachmentPath"},r.a.createElement(f.a.Label,null,"PatientAttachmentPath"),r.a.createElement(f.a.Control,{type:"text",placeholder:"PatientAttachmentPath"})),r.a.createElement("input",{type:"file",name:"myFile"})),e.canCancel&&r.a.createElement(C.a.Toggle,{as:h.a,variant:"danger",eventKey:"9",className:"btn",onClick:e.onCancel},"Cancel"),e.canConfirm&&r.a.createElement(C.a.Toggle,{as:h.a,variant:"success",eventKey:"9",className:"btn",type:"submit"},"Submit")))},Kt=function(e){console.log("UpdatePatientNoteForm.props:  ",Object(P.a)({},e));var t=Object(k.a)({},e.patient);return console.log("UpdatePatientNoteForm.props.patient:  ",Object(P.a)({},t)),r.a.createElement("div",{className:"UpdateFormContainer"},r.a.createElement(f.a,{onSubmit:e.onConfirm},r.a.createElement(f.a.Row,null,r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridNote"},r.a.createElement(f.a.Label,null,"Note"),r.a.createElement(f.a.Control,{type:"text",placeholder:"Note"}))),e.canCancel&&r.a.createElement(C.a.Toggle,{as:h.a,variant:"danger",eventKey:"9",className:"btn",onClick:e.onCancel},"Cancel"),e.canConfirm&&r.a.createElement(C.a.Toggle,{as:h.a,variant:"success",eventKey:"9",className:"btn",type:"submit"},"Submit")))},Ht=function(e){console.log("UpdatePatientTagForm.props:  ",Object(P.a)({},e));var t=Object(k.a)({},e.patient);return console.log("UpdatePatientTagForm.props.patient:  ",Object(P.a)({},t)),r.a.createElement("div",{className:"UpdateFormContainer"},r.a.createElement(f.a,{onSubmit:e.onConfirm},r.a.createElement(f.a.Row,null,r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridTag"},r.a.createElement(f.a.Label,null,"Tag"),r.a.createElement(f.a.Control,{type:"text",placeholder:"Tag"}))),e.canCancel&&r.a.createElement(C.a.Toggle,{as:h.a,variant:"danger",eventKey:"9",className:"btn",onClick:e.onCancel},"Cancel"),e.canConfirm&&r.a.createElement(C.a.Toggle,{as:h.a,variant:"success",eventKey:"9",className:"btn",type:"submit"},"Submit")))},Bt=function(e){function t(e){var a;return Object(l.a)(this,t),(a=Object(s.a)(this,Object(m.a)(t).call(this,e))).state={creating:!1,updating:!1,searching:!1,updatingArray:!1,deleting:!1,patients:[],searchPatients:[],isLoading:!1,selectedPatient:null,patientUpdateField:null,patientSearchField:null,patientSearchQuery:null,canDelete:null,visit:null,userAlert:null},a.isActive=!0,a.startCreatePatientHandler=function(){a.setState({creating:!0}),console.log("CreatePatientForm...")},a.startUpdatePatientHandler=function(){a.setState({updating:!0,updatingArray:!0}),console.log("UpdatePatientForm...")},a.startSearchPatientHandler=function(){a.setState({searching:!0}),console.log("SearchPatientForm...")},a.modalConfirmHandler=function(e){console.log("CreatePatientFormData:  ",e.target.formGridName.value),a.setState({creating:!1});var t=a.context.userId,n=e.target.formGridTitle.value,r=e.target.formGridName.value,i=e.target.formGridDob.value,o=e.target.formGridAge.value,l=e.target.formGridGender.value,c=e.target.formGridAddressNumber.value,s=e.target.formGridAddressStreet.value,m=e.target.formGridAddressTown.value,d=e.target.formGridAddressParish.value,p=e.target.formGridAddressPostOffice.value,u=e.target.formGridContactPhone.value,h=e.target.formGridContactEmail.value,f=e.target.formGridRegistrationDate.value,g=e.target.formGridReferralDate.value,y=e.target.formGridExpirationDate.value,E=e.target.formGridAttendingPhysicianName.value,v=e.target.formGridAttendingPhysicianEmail.value,b=e.target.formGridAttendingPhysicianPhone.value,D=e.target.formGridReferringDoctorName.value,S=e.target.formGridReferringDoctorEmail.value,P=e.target.formGridReferringDoctorPhone.value,C=e.target.formGridOccupationRole.value,x=e.target.formGridOccupationEmployer.value,I=e.target.formGridOccupationEmployerContactPhone.value,N=e.target.formGridOccupationEmployerContactEmail.value;if(0===r.trim().length||0===u.trim().length)return console.log("patient must have at least a Name and Contact Number!!!...Please try again..."),void a.setState({userAlert:"patient requires Name and Contact Number!!!... Try again..."});console.log("\n      creating patient...\n      title: ".concat(n,",\n      name: ").concat(r,",\n      dob: ").concat(i,",\n      age: ").concat(o,",\n      gender: ").concat(l,",\n      addressNumber: ").concat(c,",\n      addressStreet: ").concat(s,",\n      addressTown: ").concat(m,",\n      addressParish: ").concat(d,",\n      addressPostOffice: ").concat(p,",\n      contactPhone: ").concat(u,",\n      contactEmail: ").concat(h,",\n      registrationDate: ").concat(f,",\n      referralDate: ").concat(g,",\n      expirationDate: ").concat(y,",\n      attendingPhysicianName: ").concat(E,",\n      attendingPhysicianEmail: ").concat(v,",\n      attendingPhysicianPhone: ").concat(b,",\n      referringDoctorName: ").concat(D,",\n      referringDoctorEmail: ").concat(S,",\n      referringDoctorPhone: ").concat(P,",\n      occupationRole: ").concat(C,",\n      occupationEmployer: ").concat(x,",\n      occupationEmployerContactPhone: ").concat(I,",\n      occupationEmployerContactEmail: ").concat(N,",\n      "));var O={query:'\n          mutation {createPatient(userId:"'.concat(t,'", patientInput:{title:"').concat(n,'",name:"').concat(r,'",dob:"').concat(i,'",age:').concat(o,',gender:"').concat(l,'",addressNumber:').concat(c,',addressStreet:"').concat(s,'",addressTown:"').concat(m,'",addressParish:"').concat(d,'",addressPostOffice:"').concat(p,'",contactPhone:"').concat(u,'",contactEmail:"').concat(h,'",registrationDate:"').concat(f,'",referralDate:"').concat(g,'",expirationDate:"').concat(y,'",referringDoctorName:"').concat(D,'",referringDoctorEmail:"').concat(S,'",referringDoctorPhone:"').concat(P,'",attendingPhysicianName:"').concat(E,'",attendingPhysicianEmail:"').concat(v,'",attendingPhysicianPhone:"').concat(b,'",occupationRole:"').concat(C,'",occupationEmployer:"').concat(x,'",occupationEmployerContactPhone:"').concat(I,'",occupationEmployerContactEmail:"').concat(N,'"})\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n        ')},T=a.context.token;fetch("http://localhost:10000/graphql",{method:"POST",body:JSON.stringify(O),headers:{"Content-Type":"application/json",Authorization:"Bearer "+T}}).then((function(e){if(200!==e.status&&201!==e.status)throw new Error("Failed!");return e.json()})).then((function(e){console.log("\n          response data:\n          ".concat(JSON.stringify(e.data.createPatient),"\n          "));var t=JSON.stringify(e.data).slice(2,15);a.setState({userAlert:t});var n=e.data.createPatient;a.setState((function(e){var t=Object(A.a)(e.patients);return t.push(n),{patients:t}}))})).catch((function(e){console.log(e),a.setState({userAlert:e})}))},a.modalCancelHandler=function(){a.setState({creating:!1,updating:!1,selectedPatient:null})},a.modalConfirmUpdateHandler=function(e){var t=a.context.userId,n=a.context.selectedPatient._id;console.log("UpdatePatientFormData:  ",e.target.formGridName.value),a.setState({updating:!1});var r=e.target.formGridTitle.value,i=e.target.formGridName.value,o=e.target.formGridDob.value,l=e.target.formGridAge.value,c=e.target.formGridGender.value,s=e.target.formGridAddressNumber.value,m=e.target.formGridAddressStreet.value,d=e.target.formGridAddressTown.value,p=e.target.formGridAddressParish.value,u=e.target.formGridAddressPostOffice.value,h=e.target.formGridContactPhone.value,f=e.target.formGridContactEmail.value,g=e.target.formGridRegistrationDate.value,y=e.target.formGridReferralDate.value,E=e.target.formGridExpirationDate.value,v=e.target.formGridAttendingPhysicianName.value,b=e.target.formGridAttendingPhysicianEmail.value,D=e.target.formGridAttendingPhysicianPhone.value,S=e.target.formGridReferringDoctorName.value,P=e.target.formGridReferringDoctorEmail.value,C=e.target.formGridReferringDoctorPhone.value,x=e.target.formGridOccupationRole.value,I=e.target.formGridOccupationEmployer.value,A=e.target.formGridOccupationEmployerContactPhone.value,N=e.target.formGridOccupationEmployerContactEmail.value;0===r.trim().length&&(console.log("blank fields detected!!!...filling w/ previous data..."),r=a.context.selectedPatient.title),0===i.trim().length&&(console.log("blank fields detected!!!...filling w/ previous data..."),i=a.context.selectedPatient.name),0===o.trim().length&&(console.log("blank fields detected!!!...filling w/ previous data..."),o=a.context.selectedPatient.dob),0===c.trim().length&&(console.log("blank fields detected!!!...filling w/ previous data..."),c=a.context.selectedPatient.gender),0===l.trim().length&&(console.log("blank fields detected!!!...filling w/ previous data..."),l=a.context.selectedPatient.age),0===s.trim().length&&(console.log("blank fields detected!!!...filling w/ previous data..."),s=a.context.selectedPatient.address.number),0===m.trim().length&&(console.log("blank fields detected!!!...filling w/ previous data..."),m=a.context.selectedPatient.address.street),0===d.trim().length&&(console.log("blank fields detected!!!...filling w/ previous data..."),d=a.context.selectedPatient.address.town),0===p.trim().length&&(console.log("blank fields detected!!!...filling w/ previous data..."),p=a.context.selectedPatient.address.parish),0===u.trim().length&&(console.log("blank fields detected!!!...filling w/ previous data..."),u=a.context.selectedPatient.address.postOffice),0===h.trim().length&&(console.log("blank fields detected!!!...filling w/ previous data..."),h=a.context.selectedPatient.contact.phone),0===f.trim().length&&(console.log("blank fields detected!!!...filling w/ previous data..."),f=a.context.selectedPatient.contact.email),0===g.trim().length&&(console.log("blank fields detected!!!...filling w/ previous data..."),g=a.context.selectedPatient.registrationDate),0===v.trim().length&&(console.log("blank fields detected!!!...filling w/ previous data..."),v=a.context.selectedPatient.attendingPhysician.name),0===b.trim().length&&(console.log("blank fields detected!!!...filling w/ previous data..."),b=a.context.selectedPatient.attendingPhysician.email),0===D.trim().length&&(console.log("blank fields detected!!!...filling w/ previous data..."),D=a.context.selectedPatient.attendingPhysician.phone),0===S.trim().length&&(console.log("blank fields detected!!!...filling w/ previous data..."),S=a.context.selectedPatient.referringDoctor.name),0===P.trim().length&&(console.log("blank fields detected!!!...filling w/ previous data..."),P=a.context.selectedPatient.referringDoctor.email),0===C.trim().length&&(console.log("blank fields detected!!!...filling w/ previous data..."),C=a.context.selectedPatient.referringDoctor.phone),0===x.trim().length&&(console.log("blank fields detected!!!...filling w/ previous data..."),x=a.context.selectedPatient.occupation.role),0===I.trim().length&&(console.log("blank fields detected!!!...filling w/ previous data..."),I=a.context.selectedPatient.occupation.employer),0===N.trim().length&&(console.log("blank fields detected!!!...filling w/ previous data..."),N=a.context.selectedPatient.occupation.contact.email),0===A.trim().length&&(console.log("blank fields detected!!!...filling w/ previous data..."),A=a.context.selectedPatient.occupation.contact.phone);console.log("\n      updating patient...\n      title: ".concat(r,",\n      name: ").concat(i,",\n      dob: ").concat(o,",\n      age: ").concat(l,",\n      gender: ").concat(c,",\n      addressNumber: ").concat(s,",\n      addressStreet: ").concat(m,",\n      addressTown: ").concat(d,",\n      addressParish: ").concat(p,",\n      addressPostOffice: ").concat(u,",\n      contactPhone: ").concat(h,",\n      contactEmail: ").concat(f,",\n      registrationDate: ").concat(g,",\n      referralDate: ").concat(y,",\n      expirationDate: ").concat(E,",\n      attendingPhysicianName: ").concat(v,",\n      attendingPhysicianEmail: ").concat(b,",\n      attendingPhysicianPhone: ").concat(D,",\n      referringDoctorName: ").concat(S,",\n      referringDoctorEmail: ").concat(P,",\n      referringDoctorPhone: ").concat(C,",\n      occupationRole: ").concat(x,",\n      occupationEmployer: ").concat(I,",\n      occupationEmployerContactPhone: ").concat(A,",\n      occupationEmployerContactEmail: ").concat(N,",\n      ")),a.setState({userAlert:"updating patient..."});var O={query:'\n          mutation {updatePatient(userId:"'.concat(t,'",patientId:"').concat(n,'", patientInput:{title:"').concat(r,'",name:"').concat(i,'",dob:"').concat(o,'",age:').concat(l,',gender:"').concat(c,'",addressNumber:').concat(s,',addressStreet:"').concat(m,'",addressTown:"').concat(d,'",addressParish:"').concat(p,'",addressPostOffice:"').concat(u,'",contactPhone:"').concat(h,'",contactEmail:"').concat(f,'",registrationDate:"').concat(g,'",referralDate:"').concat(y,'",expirationDate:"').concat(E,'",referringDoctorName:"').concat(S,'",referringDoctorEmail:"').concat(P,'",referringDoctorPhone:"').concat(C,'",attendingPhysicianName:"').concat(v,'",attendingPhysicianEmail:"').concat(b,'",attendingPhysicianPhone:"').concat(D,'",occupationRole:"').concat(x,'",occupationEmployer:"').concat(I,'",occupationEmployerContactPhone:"').concat(A,'",occupationEmployerContactEmail:"').concat(A,'"})\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n        ')},T=a.context.token;fetch("http://localhost:10000/graphql",{method:"POST",body:JSON.stringify(O),headers:{"Content-Type":"application/json",Authorization:"Bearer "+T}}).then((function(e){if(200!==e.status&&201!==e.status)throw new Error("Failed!");return e.json()})).then((function(e){console.log("response data... "+JSON.stringify(e));var t=e.data.updatePatient._id,n=a.state.patients.find((function(e){return e._id===t})),r=a.state.patients.indexOf(n),i=a.state.patients.splice(r,1);console.log("updatedPatient:  ",JSON.stringify(n),"  updatedPatientPos:  ",r,"  slicedArray:  ",i),a.state.patients.push(e.data.updatePatient);var o=JSON.stringify(e.data).slice(2,25);a.setState({userAlert:o,selectedPatient:e.data.updatePatient}),a.fetchPatients()})).catch((function(e){console.log(e),a.setState({userAlert:e})}))},a.modalConfirmUpdateFieldHandler=function(e){var t=a.context.token,n=a.context.userId,r=a.context.selectedPatient._id;console.log("UpdatePatientFieldFormData:  ",e.target.formGridField.value),a.setState({updating:!1});var i=null,o=e.target.formGridQuery.value;i="select"===e.target.formGridFieldSelect.value?e.target.formGridField.value:e.target.formGridFieldSelect.value;var l={query:'\n          mutation {updatePatientField(userId:"'.concat(n,'",patientId:"').concat(r,'",field:"').concat(i,'",query:"').concat(o,'")\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n        ')};fetch("http://localhost:10000/graphql",{method:"POST",body:JSON.stringify(l),headers:{"Content-Type":"application/json",Authorization:"Bearer "+t}}).then((function(e){if(200!==e.status&&201!==e.status)throw new Error("Failed!");return e.json()})).then((function(e){console.log("response data... "+JSON.stringify(e.data.updatePatientField));var t=e.data.updatePatientField._id,n=a.state.patients.find((function(e){return e._id===t})),r=a.state.patients.indexOf(n),i=a.state.patients.splice(r,1);console.log("updatedPatient:  ",JSON.stringify(n),"  updatedPatientPos:  ",r,"  slicedArray:  ",i),a.state.patients.push(e.data.updatePatientField),a.context.patients=a.state.patients;var o=JSON.stringify(e.data).slice(2,25);a.setState({userAlert:o,selectedPatient:e.data.updatePatientField}),a.fetchPatients()})).catch((function(e){console.log(e),a.setState({userAlert:e})}))},a.updatePatientConsultantHandler=function(e){var t=a.context.token,n=a.context.userId,r=a.context.selectedPatient._id,i=a.context.selectedUser._id;void 0===i&&(console.log("\n      select a Staff member before adding a Patient Consultant!!\n      "),a.setState({userAlert:"select a Staff member before adding a Patient Consultant!!..."}),t=null),console.log("UpdatePatientConsultantFormData:  ",e.target.formGridConsultantDate.value),a.setState({updating:!1,patientUpdateField:null});var o=e.target.formGridConsultantDate.value;console.log("\n    adding patient consultant item...\n    userId: ".concat(n,",\n    selectedPatientId: ").concat(r,",\n    consultantDate: ").concat(o,",\n    consultantReference: ").concat(i,",\n    "));var l={query:'\n        mutation {updatePatientConsultant(userId:"'.concat(n,'", patientId:"').concat(r,'",patientInput:{consultantDate:" ').concat(o,'",consultantReference: "').concat(i,'"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      ')};fetch("http://localhost:10000/graphql",{method:"POST",body:JSON.stringify(l),headers:{"Content-Type":"application/json",Authorization:"Bearer "+t}}).then((function(e){if(200!==e.status&&201!==e.status)throw new Error("Failed!");return e.json()})).then((function(e){console.log("response data... "+JSON.stringify(e.data));var t=e.data.updatePatientConsultant._id,n=a.state.patients.find((function(e){return e._id===t})),r=a.state.patients.indexOf(n),i=a.state.patients.splice(r,1);console.log("updatedPatient:  ",JSON.stringify(n),"  updatedPatientPos:  ",r,"  slicedArray:  ",i),a.state.patients.push(e.data.updatePatientConsultant),a.context.patients=a.state.patients;var o=JSON.stringify(e.data).slice(2,25);a.setState({userAlert:o,selectedPatient:e.data.updatePatientConsultant}),a.fetchPatients()})).catch((function(e){console.log(e),a.setState({userAlert:e})}))},a.updatePatientInsuranceHandler=function(e){var t=a.context.token,n=a.context.userId,r=a.context.selectedPatient._id;console.log("UpdatePatientInsuranceFormData:  ",e.target.formGridInsuranceCompany.value),a.setState({updating:!1,patientUpdateField:null});var i=e.target.formGridInsuranceCompany.value,o=e.target.formGridInsuranceNumber.value,l=e.target.formGridInsuranceExpiry.value,c=e.target.formGridInsuranceDescription.value,s=e.target.formGridInsuranceSubscriberCompany.value,m=e.target.formGridInsuranceSubscriberDescription.value;console.log("\n    adding patient insurance item...\n    userId: ".concat(n,",\n    selectedPatientId: ").concat(r,",\n    insuranceCompany: ").concat(i,",\n    insuranceNumber: ").concat(o,",\n    insuranceExpiry: ").concat(l,",\n    insuranceDescription: ").concat(c,",\n    insuranceSubscriberCompany: ").concat(s,",\n    insuranceSubscriberDescription: ").concat(m,",\n    ")),a.setState({userAlert:"adding patient insurance item..."});var d={query:'\n        mutation {updatePatientInsurance(userId:"'.concat(n,'", patientId:"').concat(r,'",patientInput:{insuranceCompany:"').concat(i,'",insuranceNumber:"').concat(o,'",insuranceDescription:"').concat(c,'",insuranceExpiry:"').concat(l,'",insuranceSubscriberCompany:"').concat(s,'",insuranceSubscriberDescription:"').concat(m,'"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      ')};fetch("http://localhost:10000/graphql",{method:"POST",body:JSON.stringify(d),headers:{"Content-Type":"application/json",Authorization:"Bearer "+t}}).then((function(e){if(200!==e.status&&201!==e.status)throw new Error("Failed!");return e.json()})).then((function(e){console.log("response data... "+JSON.stringify(e.data));var t=e.data.updatePatientInsurance._id,n=a.state.patients.find((function(e){return e._id===t})),r=a.state.patients.indexOf(n),i=a.state.patients.splice(r,1);console.log("updatedPatient:  ",JSON.stringify(n),"  updatedPatientPos:  ",r,"  slicedArray:  ",i),a.state.patients.push(e.data.updatePatientInsurance),a.context.patients=a.state.patients;var o=JSON.stringify(e.data).slice(2,25);a.setState({userAlert:o,selectedPatient:e.data.updatePatientInsurance}),a.fetchPatients()})).catch((function(e){console.log(e),a.setState({userAlert:e})}))},a.updatePatientNextOfKinHandler=function(e){var t=a.context.token,n=a.context.userId,r=a.context.selectedPatient._id;console.log("UpdatePatientNextOfKinFormData:  ",e.target.formGridNextOfKinName.value),a.setState({updating:!1,patientUpdateField:null});var i=e.target.formGridNextOfKinName.value,o=e.target.formGridNextOfKinPhone.value,l=e.target.formGridNextOfKinEmail.value;console.log("\n    adding patient nextOfKin item...\n    userId: ".concat(n,",\n    selectedPatientId: ").concat(r,",\n    nextOfKinName: ").concat(i,",\n    nextOfKinPhone: ").concat(o,",\n    nextOfKinEmail: ").concat(l,",\n    ")),a.setState({userAlert:"adding patient nextOfKin item..."});var c={query:'\n        mutation {updatePatientNextOfKin(userId:"'.concat(n,'", patientId:"').concat(r,'",patientInput:{nextOfKinName:"').concat(i,'",nextOfKinEmail:"').concat(l,'",nextOfKinPhone:"').concat(o,'"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      ')};fetch("http://localhost:10000/graphql",{method:"POST",body:JSON.stringify(c),headers:{"Content-Type":"application/json",Authorization:"Bearer "+t}}).then((function(e){if(200!==e.status&&201!==e.status)throw new Error("Failed!");return e.json()})).then((function(e){console.log("response data... "+JSON.stringify(e.data));var t=e.data.updatePatientNextOfKin._id,n=a.state.patients.find((function(e){return e._id===t})),r=a.state.patients.indexOf(n),i=a.state.patients.splice(r,1);console.log("updatedPatient:  ",JSON.stringify(n),"  updatedPatientPos:  ",r,"  slicedArray:  ",i),a.state.patients.push(e.data.updatePatientNextOfKin),a.context.patients=a.state.patients;var o=JSON.stringify(e.data).slice(2,25);a.setState({userAlert:o,selectedPatient:e.data.updatePatientNextOfKin}),a.fetchPatients()})).catch((function(e){console.log(e),a.setState({userAlert:e})}))},a.updatePatientComplaintHandler=function(e){var t=a.context.token,n=a.context.userId,r=a.context.selectedPatient._id;console.log("UpdatePatientComplaintFormData:  ",e.target.formGridComplaintTitle.value),a.setState({updating:!1,patientUpdateField:null});var i=e.target.formGridComplaintTitle.value,o=e.target.formGridComplaintDate.value,l=e.target.formGridComplaintDescription.value,c=e.target.formGridComplaintAnamnesis.value,s=e.target.formGridComplaintAttachmentName.value,m=e.target.formGridComplaintAttachmentFormat.value,d=e.target.formGridComplaintAttachmentPath.value;console.log("\n    adding patient complaint...\n    userId: ".concat(n,",\n    patientId: ").concat(r,",\n    complaintTitle: ").concat(i,",\n    complaintDate: ").concat(o,",\n    complaintDescription: ").concat(l,",\n    complaintAnamnesis: ").concat(c,",\n    complaintAttachmentName: ").concat(s,",\n    complaintAttachmentFormat: ").concat(m,",\n    complaintAttachmentPath: ").concat(d,",\n    ")),a.setState({userAlert:"adding patient complaint..."});var p={query:'\n        mutation {updatePatientComplaint(userId:"'.concat(n,'", patientId:"').concat(r,'",patientInput:{complaintDate:"').concat(o,'",complaintTitle:"').concat(i,'",complaintDescription:"').concat(l,'",complaintAnamnesis:"').concat(c,'",complaintAttachmentName:"').concat(s,'",complaintAttachmentFormat:"').concat(m,'",complaintAttachmentPath:"').concat(d,'"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      ')};fetch("http://localhost:10000/graphql",{method:"POST",body:JSON.stringify(p),headers:{"Content-Type":"application/json",Authorization:"Bearer "+t}}).then((function(e){if(200!==e.status&&201!==e.status)throw new Error("Failed!");return e.json()})).then((function(e){console.log("response data... "+JSON.stringify(e.data));var t=e.data.updatePatientComplaint._id,n=a.state.patients.find((function(e){return e._id===t})),r=a.state.patients.indexOf(n),i=a.state.patients.splice(r,1);console.log("updatedPatient:  ",JSON.stringify(n),"  updatedPatientPos:  ",r,"  slicedArray:  ",i),a.state.patients.push(e.data.updatePatientComplaint),a.context.patients=a.state.patients;var o=JSON.stringify(e.data).slice(2,25);a.setState({userAlert:o,selectedPatient:e.data.updatePatientComplaint}),a.fetchPatients()})).catch((function(e){console.log(e),a.setState({userAlert:e})}))},a.updatePatientSurveyHandler=function(e){var t=a.context.token,n=a.context.userId,r=a.context.selectedPatient._id;console.log("UpdatePatientSurveyFormData:  ",e.target.formGridSurveyTitle.value),a.setState({updating:!1,patientUpdateField:null});var i=e.target.formGridSurveyDate.value,o=e.target.formGridSurveyTitle.value,l=e.target.formGridSurveyDescription.value,c=e.target.formGridSurveyAttachmentName.value,s=e.target.formGridSurveyAttachmentFormat.value,m=e.target.formGridSurveyAttachmentPath.value;console.log("\n    adding patient survey...\n    userId: ".concat(n,",\n    patientId: ").concat(r,",\n    surveyDate: ").concat(i,",\n    surveyTitle: ").concat(o,",\n    surveyDescription: ").concat(l,",\n    surveyAttachmentName: ").concat(c,",\n    surveyAttachmentFormat: ").concat(s,",\n    surveyAttachmentPath: ").concat(m,",\n    ")),a.setState({userAlert:"adding patient survey..."});var d={query:'\n        mutation {updatePatientSurvey(userId:"'.concat(n,'",patientId:"').concat(r,'",patientInput:{surveyDate:"').concat(i,'",surveyTitle:"').concat(o,'",surveyDescription:"').concat(l,'",surveyAttachmentName:"').concat(c,'",surveyAttachmentFormat:"').concat(s,'",surveyAttachmentPath:"').concat(m,'"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      ')};fetch("http://localhost:10000/graphql",{method:"POST",body:JSON.stringify(d),headers:{"Content-Type":"application/json",Authorization:"Bearer "+t}}).then((function(e){if(200!==e.status&&201!==e.status)throw new Error("Failed!");return e.json()})).then((function(e){console.log("response data... "+JSON.stringify(e.data));var t=e.data.updatePatientSurvey._id,n=a.state.patients.find((function(e){return e._id===t})),r=a.state.patients.indexOf(n),i=a.state.patients.splice(r,1);console.log("updatedPatient:  ",JSON.stringify(n),"  updatedPatientPos:  ",r,"  slicedArray:  ",i),a.state.patients.push(e.data.updatePatientSurvey),a.context.patients=a.state.patients;var o=JSON.stringify(e.data).slice(2,25);a.setState({userAlert:o,selectedPatient:e.data.updatePatientSurvey}),a.fetchPatients()})).catch((function(e){console.log(e),a.setState({userAlert:e})}))},a.updatePatientVitalsHandler=function(e){var t=a.context.token,n=a.context.userId,r=a.context.selectedPatient._id;console.log("UpdatePatientVitalsFormData:  ",e.target.formGridVitalsDate.value),a.setState({updating:!1,patientUpdateField:null});var i=e.target.formGridVitalsDate.value,o=e.target.formGridVitalsPr.value,l=e.target.formGridVitalsBp1.value,c=e.target.formGridVitalsBp2.value,s=e.target.formGridVitalsRr.value,m=e.target.formGridVitalsTemp.value,d=e.target.formGridVitalsPs02.value,p=e.target.formGridVitalsHeight.value,u=e.target.formGridVitalsWeight.value,h=e.target.formGridVitalsBmi.value,f=e.target.formGridVitalsUrineType.value,g=e.target.formGridVitalsUrineValue.value;console.log("\n    adding patient vitals...\n    userId: ".concat(n,",\n    patientId: ").concat(r,",\n    ")),a.setState({userAlert:"adding patient vitals..."});var y={query:'\n        mutation {updatePatientVitals(userId:"'.concat(n,'",patientId:"').concat(r,'",patientInput:{vitalsDate:"').concat(i,'",vitalsPr:').concat(o,",vitalsBp1:").concat(l,",vitalsBp2:").concat(c,",vitalsRr:").concat(s,",vitalsTemp:").concat(m,",vitalsPs02:").concat(d,",vitalsHeight:").concat(p,",vitalsWeight:").concat(u,",vitalsBmi:").concat(h,',vitalsUrineType:"').concat(f,'",vitalsUrineValue:"').concat(g,'"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      ')};fetch("http://localhost:10000/graphql",{method:"POST",body:JSON.stringify(y),headers:{"Content-Type":"application/json",Authorization:"Bearer "+t}}).then((function(e){if(200!==e.status&&201!==e.status)throw new Error("Failed!");return e.json()})).then((function(e){console.log("response data... "+JSON.stringify(e.data));var t=e.data.updatePatientVitals._id,n=a.state.patients.find((function(e){return e._id===t})),r=a.state.patients.indexOf(n),i=a.state.patients.splice(r,1);console.log("updatedPatient:  ",JSON.stringify(n),"  updatedPatientPos:  ",r,"  slicedArray:  ",i),a.state.patients.push(e.data.updatePatientVitals),a.context.patients=a.state.patients;var o=JSON.stringify(e.data).slice(2,25);a.setState({userAlert:o,selectedPatient:e.data.updatePatientVitals}),a.fetchPatients()})).catch((function(e){console.log(e),a.setState({userAlert:e})}))},a.updatePatientExaminationHandler=function(e){var t=a.context.token,n=a.context.userId,r=a.context.selectedPatient._id;console.log("UpdatePatientExaminationFormData:  ",e.target.formGridExaminationArea.value),a.setState({updating:!1,patientUpdateField:null});var i=e.target.formGridExaminationDate.value,o=e.target.formGridExaminationGeneral.value,l=void 0;l="select"===e.target.formGridExaminationAreaSelect?e.target.formGridExaminationArea.value:e.target.formGridExaminationAreaSelect.value;var c=e.target.formGridExaminationType.value,s=e.target.formGridExaminationMeasure.value,m=e.target.formGridExaminationValue.value,d=e.target.formGridExaminationDescription.value,p=e.target.formGridExaminationFollowUp.value,u=e.target.formGridExaminationAttachmentName.value,h=e.target.formGridExaminationAttachmentFormat.value,f=e.target.formGridExaminationAttachmentPath.value;console.log("\n    adding patient examination...\n    userId: ".concat(n,",\n    patientId: ").concat(r,",\n    examinationDate: ").concat(i,",\n    examinationGeneral: ").concat(o,",\n    examinationArea: ").concat(l,",\n    examinationType: ").concat(c,",\n    examinationMeasure: ").concat(s,",\n    examinationValue: ").concat(m,",\n    examinationDescription: ").concat(d,",\n    examinationFollowUp: ").concat(p,",\n    examinationAttachmentName: ").concat(u,",\n    examinationAttachmentFormat: ").concat(h,",\n    examinationAttachmentPath: ").concat(f,",\n    ")),a.setState({userAlert:"adding patient examination..."});var g={query:'\n        mutation {updatePatientExamination(userId:"'.concat(n,'",patientId:"').concat(r,'",patientInput:{examinationDate:"').concat(i,'",examinationGeneral:"').concat(o,'",examinationArea:"').concat(l,'",examinationType:"').concat(c,'",examinationMeasure:"').concat(s,'",examinationValue:"').concat(m,'",examinationDescription:"').concat(d,'",examinationFollowUp:').concat(p,',examinationAttachmentName:"').concat(u,'",examinationAttachmentFormat:"').concat(h,'",examinationAttachmentPath:"').concat(f,'"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      ')};fetch("http://localhost:10000/graphql",{method:"POST",body:JSON.stringify(g),headers:{"Content-Type":"application/json",Authorization:"Bearer "+t}}).then((function(e){if(200!==e.status&&201!==e.status)throw new Error("Failed!");return e.json()})).then((function(e){console.log("response data... "+JSON.stringify(e.data));var t=e.data.updatePatientExamination._id,n=a.state.patients.find((function(e){return e._id===t})),r=a.state.patients.indexOf(n),i=a.state.patients.splice(r,1);console.log("updatedPatient:  ",JSON.stringify(n),"  updatedPatientPos:  ",r,"  slicedArray:  ",i),a.state.patients.push(e.data.updatePatientExamination),a.context.patients=a.state.patients;var o=JSON.stringify(e.data).slice(2,25);a.setState({userAlert:o,selectedPatient:e.data.updatePatientExamination}),a.fetchPatients()})).catch((function(e){console.log(e),a.setState({userAlert:e})}))},a.updatePatientHistoryHandler=function(e){var t=a.context.token,n=a.context.userId,r=a.context.selectedPatient._id;console.log("UpdatePatientHistoryFormData:  ",e.target.formGridHistoryTitle.value),a.setState({updating:!1,patientUpdateField:null});var i=e.target.formGridHistoryType.value,o=e.target.formGridHistoryDate.value,l=e.target.formGridHistoryTitle.value,c=e.target.formGridHistoryDescription.value,s=e.target.formGridHistoryAttachmentName.value,m=e.target.formGridHistoryAttachmentFormat.value,d=e.target.formGridHistoryAttachmentPath.value;console.log("\n    adding patient history...\n    userId: ".concat(n,",\n    patientId: ").concat(r,",\n    historyType: ").concat(i,",\n    historyDate: ").concat(o,",\n    historyTitle: ").concat(l,",\n    historyDescription: ").concat(c,",\n    historyAttachmentName: ").concat(s,",\n    historyAttachmentFormat: ").concat(m,",\n    historyAttachmentPath: ").concat(d,",\n    ")),a.setState({userAlert:"adding patient history..."});var p={query:'\n        mutation {updatePatientHistory(userId:"'.concat(n,'", patientId:"').concat(r,'",patientInput:{historyTitle:"').concat(l,'",historyType:"').concat(i,'",historyDate:"').concat(o,'",historyDescription:"').concat(c,'",historyAttachmentName:"').concat(s,'",historyAttachmentFormat:"').concat(m,'",historyAttachmentPath:"').concat(d,'"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      ')};fetch("http://localhost:10000/graphql",{method:"POST",body:JSON.stringify(p),headers:{"Content-Type":"application/json",Authorization:"Bearer "+t}}).then((function(e){if(200!==e.status&&201!==e.status)throw new Error("Failed!");return e.json()})).then((function(e){console.log("response data... "+JSON.stringify(e.data));var t=e.data.updatePatientHistory._id,n=a.state.patients.find((function(e){return e._id===t})),r=a.state.patients.indexOf(n),i=a.state.patients.splice(r,1);console.log("updatedPatient:  ",JSON.stringify(n),"  updatedPatientPos:  ",r,"  slicedArray:  ",i),a.state.patients.push(e.data.updatePatientHistory),a.context.patients=a.state.patients;var o=JSON.stringify(e.data).slice(2,25);a.setState({userAlert:o,selectedPatient:e.data.updatePatientHistory}),a.fetchPatients()})).catch((function(e){console.log(e),a.setState({userAlert:e})}))},a.updatePatientAllergiesHandler=function(e){var t=a.context.token,n=a.context.userId,r=a.context.selectedPatient._id;console.log("UpdatePatientAllergiesFormData:  ",e.target.formGridAllergiesTitle.value),a.setState({updating:!1,patientUpdateField:null});var i=e.target.formGridAllergiesTitle.value,o=void 0;o="select"===e.target.formGridAllergiesTypeSelect?e.target.formGridAllergiesType.value:e.target.formGridAllergiesTypeSelect.value;var l=e.target.formGridAllergiesDescription.value,c=e.target.formGridAllergiesAttachmentName.value,s=e.target.formGridAllergiesAttachmentFormat.value,m=e.target.formGridAllergiesAttachmentPath.value;console.log("\n    adding patient allergies...\n    userId: ".concat(n,",\n    patientId: ").concat(r,",\n    allergiesTitle: ").concat(i,",\n    allergiesType: ").concat(o,",\n    allergiesDescription: ").concat(l,",\n    allergiesAttachmentName: ").concat(c,",\n    allergiesAttachmentFormat: ").concat(s,",\n    allergiesAttachmentPath: ").concat(m,",\n    ")),a.setState({userAlert:"adding patient allergies..."});var d={query:'\n        mutation {updatePatientAllergies(userId:"'.concat(n,'", patientId:"').concat(r,'",patientInput:{allergiesTitle:"').concat(i,'",allergiesType:"').concat(o,'", allergiesDescription:"').concat(l,'",allergiesAttachmentName:"').concat(c,'",allergiesAttachmentFormat:"').concat(s,'",allergiesAttachmentPath:"').concat(m,'"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      ')};fetch("http://localhost:10000/graphql",{method:"POST",body:JSON.stringify(d),headers:{"Content-Type":"application/json",Authorization:"Bearer "+t}}).then((function(e){if(200!==e.status&&201!==e.status)throw new Error("Failed!");return e.json()})).then((function(e){console.log("response data... "+JSON.stringify(e.data));var t=e.data.updatePatientAllergies._id,n=a.state.patients.find((function(e){return e._id===t})),r=a.state.patients.indexOf(n),i=a.state.patients.splice(r,1);console.log("updatedPatient:  ",JSON.stringify(n),"  updatedPatientPos:  ",r,"  slicedArray:  ",i),a.state.patients.push(e.data.updatePatientAllergies),a.context.patients=a.state.patients;var o=JSON.stringify(e.data).slice(2,25);a.setState({userAlert:o,selectedPatient:e.data.updatePatientAllergies}),a.fetchPatients()})).catch((function(e){console.log(e),a.setState({userAlert:e})}))},a.updatePatientMedicationHandler=function(e){var t=a.context.token,n=a.context.userId,r=a.context.selectedPatient._id;console.log("UpdatePatientMedicationFormData:  ",e.target.formGridMedicationTitle.value),a.setState({updating:!1,patientUpdateField:null});var i=e.target.formGridMedicationTitle.value,o=e.target.formGridMedicationType.value,l=e.target.formGridMedicationDescription.value,c=e.target.formGridMedicationAttachmentName.value,s=e.target.formGridMedicationAttachmentFormat.value,m=e.target.formGridMedicationAttachmentPath.value;console.log("\n    adding patient medication...\n    userId: ".concat(n,",\n    patientId: ").concat(r,",\n    medicationTitle: ").concat(i,",\n    medicationType: ").concat(o,",\n    medicationDescription: ").concat(l,",\n    medicationAttachmentName: ").concat(c,",\n    medicationAttachmentFormat: ").concat(s,",\n    medicationAttachmentPath: ").concat(m,",\n    ")),a.setState({userAlert:"adding patient medication..."});var d={query:'\n      mutation {updatePatientMedication(userId:"'.concat(n,'", patientId:"').concat(r,'",patientInput:{medicationTitle:"').concat(i,'",medicationType:"').concat(o,'" medicationDescription:"').concat(l,'",medicationAttachmentName:"').concat(c,'",medicationAttachmentFormat:"').concat(s,'",medicationAttachmentPath:"').concat(m,'"})\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      ')};fetch("http://localhost:10000/graphql",{method:"POST",body:JSON.stringify(d),headers:{"Content-Type":"application/json",Authorization:"Bearer "+t}}).then((function(e){if(200!==e.status&&201!==e.status)throw new Error("Failed!");return e.json()})).then((function(e){console.log("response data... "+JSON.stringify(e.data));var t=e.data.updatePatientMedication._id,n=a.state.patients.find((function(e){return e._id===t})),r=a.state.patients.indexOf(n),i=a.state.patients.splice(r,1);console.log("updatedPatient:  ",JSON.stringify(n),"  updatedPatientPos:  ",r,"  slicedArray:  ",i),a.state.patients.push(e.data.updatePatientMedication),a.context.patients=a.state.patients;var o=JSON.stringify(e.data).slice(2,25);a.setState({userAlert:o,selectedPatient:e.data.updatePatientMedication}),a.fetchPatients()})).catch((function(e){console.log(e),a.setState({userAlert:e})}))},a.updatePatientInvestigationHandler=function(e){var t=a.context.token,n=a.context.userId,r=a.context.selectedPatient._id;console.log("UpdatePatientInvestigationFormData:  ",e.target.formGridInvestigationTitle.value),a.setState({updating:!1,patientUpdateField:null});var i=e.target.formGridInvestigationDate.value,o=e.target.formGridInvestigationTitle.value,l=void 0;l="select"===e.target.formGridInvestigationTypeSelect?e.target.formGridInvestigationType.value:e.target.formGridInvestigationTypeSelect.value;var c=e.target.formGridInvestigationDescription.value,s=e.target.formGridInvestigationAttachmentName.value,m=e.target.formGridInvestigationAttachmentFormat.value,d=e.target.formGridInvestigationAttachmentPath.value;console.log("\n    adding patient investigation...\n    userId: ".concat(n,",\n    patientId: ").concat(r,",\n    investigationDate: ").concat(i,",\n    investigationTitle: ").concat(o,",\n    investigationType: ").concat(l,",\n    investigationDescription: ").concat(c,",\n    investigationAttachmentName: ").concat(s,",\n    investigationAttachmentFormat: ").concat(m,",\n    investigationAttachmentPath: ").concat(d,",\n    ")),a.setState({userAlert:"adding patient investigation..."});var p={query:'\n        mutation {updatePatientInvestigation(userId:"'.concat(n,'", patientId:"').concat(r,'",patientInput:{investigationDate:"').concat(i,'",investigationTitle:"').concat(o,'",investigationType:"').concat(l,'",investigationDescription:"').concat(c,'",investigationAttachmentName:"').concat(s,'",investigationAttachmentFormat:"').concat(m,'",investigationAttachmentPath:"').concat(d,'"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      ')};fetch("http://localhost:10000/graphql",{method:"POST",body:JSON.stringify(p),headers:{"Content-Type":"application/json",Authorization:"Bearer "+t}}).then((function(e){if(200!==e.status&&201!==e.status)throw new Error("Failed!");return e.json()})).then((function(e){console.log("response data... "+JSON.stringify(e.data));var t=e.data.updatePatientInvestigation._id,n=a.state.patients.find((function(e){return e._id===t})),r=a.state.patients.indexOf(n),i=a.state.patients.splice(r,1);console.log("updatedPatient:  ",JSON.stringify(n),"  updatedPatientPos:  ",r,"  slicedArray:  ",i),a.state.patients.push(e.data.updatePatientInvestigation),a.context.patients=a.state.patients;var o=JSON.stringify(e.data).slice(2,25);a.setState({userAlert:o,selectedPatient:e.data.updatePatientInvestigation}),a.fetchPatients()})).catch((function(e){console.log(e),a.setState({userAlert:e})}))},a.updatePatientDiagnosisHandler=function(e){var t=a.context.token,n=a.context.userId,r=a.context.selectedPatient._id;console.log("UpdatePatientDiagnosisFormData:  ",e.target.formGridDiagnosisTitle.value),a.setState({updating:!1,patientUpdateField:null});var i=e.target.formGridDiagnosisDate.value,o=e.target.formGridDiagnosisTitle.value,l=e.target.formGridDiagnosisType.value,c=e.target.formGridDiagnosisDescription.value,s=e.target.formGridDiagnosisAttachmentName.value,m=e.target.formGridDiagnosisAttachmentFormat.value,d=e.target.formGridDiagnosisAttachmentPath.value;console.log("\n    adding patient diagnosis...\n    userId: ".concat(n,",\n    patientId: ").concat(r,",\n    diagnosisDate: ").concat(i,",\n    diagnosisTitle: ").concat(o,",\n    diagnosisType: ").concat(l,",\n    diagnosisDescription: ").concat(c,",\n    diagnosisAttachmentName: ").concat(s,",\n    diagnosisAttachmentFormat: ").concat(m,",\n    diagnosisAttachmentPath: ").concat(d,",\n    ")),a.setState({userAlert:"adding patient diagnosis..."});var p={query:'\n        mutation {updatePatientDiagnosis(userId:"'.concat(n,'", patientId:"').concat(r,'",patientInput:{diagnosisDate:"').concat(i,'",diagnosisTitle:"').concat(o,'",diagnosisType:"').concat(l,'",diagnosisDescription:"').concat(c,'",diagnosisAttachmentName:"').concat(s,'",diagnosisAttachmentFormat:"').concat(m,'",diagnosisAttachmentPath:"').concat(d,'"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      ')};fetch("http://localhost:10000/graphql",{method:"POST",body:JSON.stringify(p),headers:{"Content-Type":"application/json",Authorization:"Bearer "+t}}).then((function(e){if(200!==e.status&&201!==e.status)throw new Error("Failed!");return e.json()})).then((function(e){console.log("response data... "+JSON.stringify(e.data));var t=e.data.updatePatientDiagnosis._id,n=a.state.patients.find((function(e){return e._id===t})),r=a.state.patients.indexOf(n),i=a.state.patients.splice(r,1);console.log("updatedPatient:  ",JSON.stringify(n),"  updatedPatientPos:  ",r,"  slicedArray:  ",i),a.state.patients.push(e.data.updatePatientDiagnosis),a.context.patients=a.state.patients;var o=JSON.stringify(e.data).slice(2,25);a.setState({userAlert:o,selectedPatient:e.data.updatePatientDiagnosis}),a.fetchPatients()})).catch((function(e){console.log(e),a.setState({userAlert:e})}))},a.updatePatientTreatmentHandler=function(e){var t=a.context.token,n=a.context.userId,r=a.context.selectedPatient._id;console.log("UpdatePatientTreatmentFormData:  ",e.target.formGridTreatmentTitle.value),a.setState({updating:!1,patientUpdateField:null});var i=e.target.formGridTreatmentDate.value,o=e.target.formGridTreatmentTitle.value,l=e.target.formGridTreatmentDescription.value,c=e.target.formGridTreatmentDose.value,s=e.target.formGridTreatmentFrequency.value,m=void 0;m="select"===e.target.formGridInvestigationTypeSelect?e.target.formGridTreatmentType.value:e.target.formGridTreatmentTypeSelect.value;var d=e.target.formGridTreatmentAttachmentName.value,p=e.target.formGridTreatmentAttachmentFormat.value,u=e.target.formGridTreatmentAttachmentPath.value;console.log("\n    adding patient treatment...\n    userId: ".concat(n,",\n    patientId: ").concat(r,",\n    treatmentDate: ").concat(i,",\n    treatmentTitle: ").concat(o,",\n    treatmentDescription: ").concat(l,",\n    treatmentDose: ").concat(c,",\n    treatmentFrequency: ").concat(s,",\n    treatmentType: ").concat(m,",\n    treatmentAttachmentName: ").concat(d,",\n    treatmentAttachmentFormat: ").concat(p,",\n    treatmentAttachmentPath: ").concat(u,",\n    ")),a.setState({userAlert:"adding patient treatment..."});var h={query:'\n        mutation {updatePatientTreatment(userId:"'.concat(n,'",patientId:"').concat(r,'",patientInput:{treatmentDate:"').concat(i,'",treatmentTitle:"').concat(o,'",treatmentType:"').concat(m,'",treatmentDescription:"').concat(l,'",treatmentDose:"').concat(c,'",treatmentFrequency:"').concat(s,'",treatmentAttachmentName:"').concat(d,'",treatmentAttachmentFormat:"').concat(p,'",treatmentAttachmentPath:"').concat(u,'"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      ')};fetch("http://localhost:10000/graphql",{method:"POST",body:JSON.stringify(h),headers:{"Content-Type":"application/json",Authorization:"Bearer "+t}}).then((function(e){if(200!==e.status&&201!==e.status)throw new Error("Failed!");return e.json()})).then((function(e){console.log("response data... "+JSON.stringify(e.data));var t=e.data.updatePatientTreatment._id,n=a.state.patients.find((function(e){return e._id===t})),r=a.state.patients.indexOf(n),i=a.state.patients.splice(r,1);console.log("updatedPatient:  ",JSON.stringify(n),"  updatedPatientPos:  ",r,"  slicedArray:  ",i),a.state.patients.push(e.data.updatePatientTreatment),a.context.patients=a.state.patients;var o=JSON.stringify(e.data).slice(2,25);a.setState({userAlert:o,selectedPatient:e.data.updatePatientTreatment}),a.fetchPatients()})).catch((function(e){console.log(e),a.setState({userAlert:e})}))},a.updatePatientBillingHandler=function(e){var t=a.context.token,n=a.context.userId,r=a.context.selectedPatient._id;console.log("UpdatePatientBillingFormData:  ",e.target.formGridBillingTitle.value),a.setState({updating:!1,patientUpdateField:null});var i=e.target.formGridBillingDate.value,o=e.target.formGridBillingTitle.value,l=e.target.formGridBillingType.value,c=e.target.formGridBillingDescription.value,s=e.target.formGridBillingAmount.value,m=e.target.formGridBillingPaid.value,d=e.target.formGridBillingNotes.value,p=e.target.formGridBillingAttachmentName.value,u=e.target.formGridBillingAttachmentFormat.value,h=e.target.formGridBillingAttachmentPath.value;console.log("\n    adding patient billing...\n    userId: ".concat(n,",\n    patientId: ").concat(r,",\n    billingDate: ").concat(i,",\n    billingTitle: ").concat(o,",\n    billingType: ").concat(l,",\n    billingDescription: ").concat(c,",\n    billingAmount: ").concat(s,",\n    billingPaid: ").concat(m,",\n    billingNotes: ").concat(d,",\n    billingAttachmentName: ").concat(p,",\n    billingAttachmentFormat: ").concat(u,",\n    billingAttachmentPath: ").concat(h,",\n    ")),a.setState({userAlert:"adding patient billing..."});var f={query:'\n        mutation {updatePatientBilling(userId:"'.concat(n,'", patientId:"').concat(r,'",patientInput:{billingDate:"').concat(i,'",billingTitle:"').concat(o,'",billingType:"').concat(l,'",billingDescription:"').concat(c,'",billingAmount:').concat(s,",billingPaid:").concat(m,',billingNotes:"').concat(d,'",billingAttachmentName:"').concat(p,'",billingAttachmentFormat:"').concat(u,'",billingAttachmentPath:"').concat(h,'"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      ')};fetch("http://localhost:10000/graphql",{method:"POST",body:JSON.stringify(f),headers:{"Content-Type":"application/json",Authorization:"Bearer "+t}}).then((function(e){if(200!==e.status&&201!==e.status)throw new Error("Failed!");return e.json()})).then((function(e){console.log("response data... "+JSON.stringify(e.data));var t=e.data.updatePatientBilling._id,n=a.state.patients.find((function(e){return e._id===t})),r=a.state.patients.indexOf(n),i=a.state.patients.splice(r,1);console.log("updatedPatient:  ",JSON.stringify(n),"  updatedPatientPos:  ",r,"  slicedArray:  ",i),a.state.patients.push(e.data.updatePatientBilling),a.context.patients=a.state.patients;var o=JSON.stringify(e.data).slice(2,25);a.setState({userAlert:o,selectedPatient:e.data.updatePatientBilling}),a.fetchPatients()})).catch((function(e){console.log(e),a.setState({userAlert:e})}))},a.updatePatientAttachmentHandler=function(e){var t=a.context.token,n=a.context.userId,r=a.context.selectedPatient._id;console.log("\n        UpdatePatientAttachmentFormData:\n        ".concat(e.target.formGridPatientAttachmentName.value,"\n      ")),a.setState({updating:!1,patientUpdateField:null});var i=e.target.formGridPatientAttachmentName.value,o=e.target.formGridPatientAttachmentFormat.value,l=e.target.formGridPatientAttachmentPath.value;if(0===i.trim().length||0===o.trim().length||0===l.trim().length)return console.log("blank fields detected!!!...Please try again..."),void a.setState({userAlert:"blank fields detected!!!...Please try again..."});a.setState({userAlert:"adding patient attachment"});var c={query:'\n                    mutation {updatePatientAttachment(userId:"'.concat(n,'",patientId:"').concat(r,'",patientInput:{attachmentName:"').concat(i,'",attachmentFormat:"').concat(o,'",attachmentPath:"').concat(o,'"})\n                    {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n            ')};fetch("http://localhost:10000/graphql",{method:"POST",body:JSON.stringify(c),headers:{"Content-Type":"application/json",Authorization:"Bearer "+t}}).then((function(e){if(200!==e.status&&201!==e.status)throw new Error("Failed!");return e.json()})).then((function(e){console.log("response data... "+JSON.stringify(e.data));var t=e.data.updatePatientAttachment._id,n=a.state.patients.find((function(e){return e._id===t})),r=a.state.patients.indexOf(n),i=a.state.patients.splice(r,1);console.log("updatedPatient:  ",JSON.stringify(n),"  updatedPatientPos:  ",r,"  slicedArray:  ",i),a.state.patients.push(e.data.updatePatientAttachment),a.context.patients=a.state.patients;var o=JSON.stringify(e.data).slice(2,25);a.setState({userAlert:o,selectedPatient:e.data.updatePatientAttachment}),a.fetchPatients()})).catch((function(e){console.log(e),a.setState({userAlert:e})}))},a.updatePatientNoteHandler=function(e){var t=a.context.token,n=a.context.userId,r=a.context.selectedPatient._id;console.log("\n      UpdatePatientNoteFormData:\n      ".concat(e.target.formGridNote.value,"\n    ")),a.setState({updating:!1,patientUpdateField:null});var i=e.target.formGridNote.value;if(0===i.trim().length)return console.log("Can't Submit a blank form!!!...Please try again..."),void a.setState({userAlert:"Can't Submit a blank form!!!...Please try again..."});a.setState({userAlert:"adding patient note"});var o={query:'\n                    mutation {updatePatientNotes(userId:"'.concat(n,'",patientId:"').concat(r,'",patientInput:{notes:"').concat(i,'"})\n                    {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n            ')};fetch("http://localhost:10000/graphql",{method:"POST",body:JSON.stringify(o),headers:{"Content-Type":"application/json",Authorization:"Bearer "+t}}).then((function(e){if(200!==e.status&&201!==e.status)throw new Error("Failed!");return e.json()})).then((function(e){console.log("response data... "+JSON.stringify(e.data));var t=e.data.updatePatientNotes._id,n=a.state.patients.find((function(e){return e._id===t})),r=a.state.patients.indexOf(n),i=a.state.patients.splice(r,1);console.log("updatedPatient:  ",JSON.stringify(n),"  updatedPatientPos:  ",r,"  slicedArray:  ",i),a.state.patients.push(e.data.updatePatientNotes),a.context.patients=a.state.patients;var o=JSON.stringify(e.data).slice(2,25);a.setState({userAlert:o,selectedPatient:e.data.updatePatientNotes}),a.fetchPatients()})).catch((function(e){console.log(e),a.setState({userAlert:e})}))},a.updatePatientTagHandler=function(e){var t=a.context.token,n=a.context.userId,r=a.context.selectedPatient._id;console.log("\n      UpdatePatientTagFormData:\n      ".concat(e.target.formGridTag.value,"\n    ")),a.setState({updating:!1,patientUpdateField:null});var i=e.target.formGridTag.value;if(0===i.trim().length)return console.log("Can't Submit a blank form!!!...Please try again..."),void a.setState({userAlert:"Can't Submit a blank form!!!...Please try again..."});var o={query:'\n                    mutation {updatePatientTags(userId:"'.concat(n,'",patientId:"').concat(r,'",patientInput:{tag:"').concat(i,'"})\n                    {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n            ')};a.setState({userAlert:"adding patient tag"}),fetch("http://localhost:10000/graphql",{method:"POST",body:JSON.stringify(o),headers:{"Content-Type":"application/json",Authorization:"Bearer "+t}}).then((function(e){if(200!==e.status&&201!==e.status)throw new Error("Failed!");return e.json()})).then((function(e){console.log("response data... "+JSON.stringify(e.data));var t=e.data.updatePatientTags._id,n=a.state.patients.find((function(e){return e._id===t})),r=a.state.patients.indexOf(n),i=a.state.patients.splice(r,1);console.log("updatedPatient:  ",JSON.stringify(n),"  updatedPatientPos:  ",r,"  slicedArray:  ",i),a.state.patients.push(e.data.updatePatientTags),a.context.patients=a.state.patients;var o=JSON.stringify(e.data).slice(2,25);a.setState({userAlert:o,selectedPatient:e.data.updatePatientTags}),a.fetchPatients()})).catch((function(e){console.log(e),a.setState({userAlert:e})}))},a.modalConfirmSearchHandler=function(e){console.log("SearchPatientForm:  ");var t=a.context.userId;console.log("SearchPatientFormData:  ",e.target.formBasicField.value),a.setState({searching:!1});var n=null,r=e.target.formBasicQuery.value;if(n="select"===e.target.formBasicFieldSelect.value?e.target.formBasicField.value:e.target.formBasicFieldSelect.value,a.setState({patientSearchField:n,patientSearchQuery:r}),0!==n.trim().length&&0!==r.trim().length){var i={field:n,query:r};console.log("Searching for Patient:  ",JSON.stringify(i)),a.setState({userAlert:"Searching for Patient:  "});var o={query:'\n        query {\n          getPatientField(userId: "'.concat(t,'", field: "').concat(n,'", query: "').concat(r,'" )\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      ')},l=a.context.token;fetch("http://localhost:10000/graphql",{method:"POST",body:JSON.stringify(o),headers:{"Content-Type":"application/json",Authorization:"Bearer "+l}}).then((function(e){if(200!==e.status&&201!==e.status)throw new Error("Failed!");return e.json()})).then((function(e){console.log("response data... "+JSON.stringify(e));var t=JSON.stringify(e.data).slice(2,15);a.setState({userAlert:t});var n=e.data.getPatientField;a.setState({searchPatients:n}),console.log("state.searchPatients:  ",a.state.searchPatients)})).catch((function(e){console.log(e),a.setState({userAlert:e})}))}else console.log("blank fields detected!!!...Please try again...")},a.modalConfirmSearchIdHandler=function(e){console.log("SearchPatientIdFormData");var t=a.context.userId;a.setState({searching:!1});var n=e.target.formBasicId.value,r={query:'\n      query {getPatientId(userId:"'.concat(t,'",patientId:"').concat(n,'")\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{_id,title,time,location},consultant{date,reference{_id,name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    ')},i=a.context.token;fetch("http://localhost:10000/graphql",{method:"POST",body:JSON.stringify(r),headers:{"Content-Type":"application/json",Authorization:"Bearer "+i}}).then((function(e){if(200!==e.status&&201!==e.status)throw new Error("Failed!");return e.json()})).then((function(e){console.log("response data... "+JSON.stringify(e));var t=JSON.stringify(e.data).slice(2,25);a.setState({userAlert:t});var n=e.data.getPatientId;a.setState({searchPatients:[n]}),console.log("state.searchPatients:  ",a.state.searchPatients)})).catch((function(e){console.log(e),a.setState({userAlert:e})}))},a.modalConfirmSearchVisitHandler=function(e){console.log("SearchPatientVisitFormData");a.context.userId;a.setState({searching:!1});var t=a.context.token;fetch("http://localhost:10000/graphql",{method:"POST",body:JSON.stringify({query:"\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{_id,title,time,location,date},consultant{date,reference{_id,name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    "}),headers:{"Content-Type":"application/json",Authorization:"Bearer "+t}}).then((function(e){if(200!==e.status&&201!==e.status)throw new Error("Failed!");return e.json()})).then((function(e){console.log("response data... "+JSON.stringify(e));var t=e.data.getPatientId;a.setState({searchPatients:t}),console.log("state.searchPatients:  ",a.state.searchPatients)})).catch((function(e){console.log(e),a.setState({userAlert:e})}))},a.modalConfirmSearchNameHandler=function(e){console.log("SearchPatientNameFormData:",e.target.formBasicName.value);a.context.userId;a.setState({searching:!1});var t=a.state.patients,n=new RegExp(e.target.formBasicName.value,"i");console.log("\n    regex: ".concat(n,",\n    "));var r=t.filter((function(e){return e.name.match(n)}));console.log("\n      result: ".concat(JSON.stringify(r),"\n      ")),a.setState({searchPatients:r})},a.getPatientVisit=function(e){var t=a.state.selectedPatient;e.preventDefault(),console.log("\n        getUserVisit function:\n        selectedPatient.consultant: ".concat(JSON.stringify(t.consultant),",\n        selectedPatient.complaints: ").concat(JSON.stringify(t.complaints),",\n        visitDate: ").concat(new Date(e.target.formBasicVisitDate.value),",\n        complaintDate: ").concat(new Date(15805152e5),",\n      "));var n=new Date(e.target.formBasicVisitDate.value).toISOString().substring(0,10),r=t.surveys.filter((function(e){return new Date(1e3*e.date.substr(0,10)).toISOString().substring(0,10)===n})),i=t.consultant.filter((function(e){return new Date(1e3*e.date.substr(0,10)).toISOString().substring(0,10)===n})),o=t.complaints.filter((function(e){return new Date(1e3*e.date.substr(0,10)).toISOString().substring(0,10)===n})),l=t.vitals.filter((function(e){return new Date(1e3*e.date.substr(0,10)).toISOString().substring(0,10)===n})),c=t.examination.filter((function(e){return new Date(1e3*e.date.substr(0,10)).toISOString().substring(0,10)===n})),s=t.history.filter((function(e){return new Date(1e3*e.date.substr(0,10)).toISOString().substring(0,10)===n})),m=t.investigation.filter((function(e){return new Date(1e3*e.date.substr(0,10)).toISOString().substring(0,10)===n})),d=t.diagnosis.filter((function(e){return new Date(1e3*e.date.substr(0,10)).toISOString().substring(0,10)===n})),p=t.treatment.filter((function(e){return new Date(1e3*e.date.substr(0,10)).toISOString().substring(0,10)===n})),u=t.billing.filter((function(e){return new Date(1e3*e.date.substr(0,10)).toISOString().substring(0,10)===n})),h={date:n,patientName:a.context.selectedPatient.name,consultant:i,complaint:o,examination:c,survey:r,vitals:l,history:s,investigation:m,diagnosis:d,treatment:p,billing:u};console.log("\n        visit: ".concat(JSON.stringify(h),",\n        ")),a.context.visit=h,a.setState({visit:h})},a.modalCancelHandler=function(){a.setState({creating:!1,updating:!1,searching:!1,selectedPatient:null})},a.fetchPatientsAsc=function(){console.log("fetch patients function:  ");var e=a.context.userId,t=a.context.token,n={query:'\n          query {patientsNameAsc(userId:"'.concat(e,'")\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{_id,title,time,location,date},consultant{date,reference{_id,name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n        ')};fetch("http://localhost:10000/graphql",{method:"POST",body:JSON.stringify(n),headers:{"Content-Type":"application/json",Authorization:"Bearer "+t}}).then((function(e){if(200!==e.status&&201!==e.status)throw new Error("Failed!");return e.json()})).then((function(e){console.log("resData",e);var t=e.data.patientsNameAsc;console.log(t);var n=JSON.stringify(e.data).slice(2,25);a.setState({userAlert:n}),a.context.patients=t,a.setState({patients:t})})).catch((function(e){console.log(e),a.setState({userAlert:e})}))},a.fetchPatientsDesc=function(){console.log("fetch patients function:  ");var e=a.context.userId,t=a.context.token,n={query:'\n          query {patientsNameDesc(userId:"'.concat(e,'")\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{_id,title,time,location,date},consultant{date,reference{_id,name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n        ')};fetch("http://localhost:10000/graphql",{method:"POST",body:JSON.stringify(n),headers:{"Content-Type":"application/json",Authorization:"Bearer "+t}}).then((function(e){if(200!==e.status&&201!==e.status)throw new Error("Failed!");return e.json()})).then((function(e){console.log("resData",e);var t=e.data.patientsNameDesc;console.log(t);var n=JSON.stringify(e.data).slice(2,25);a.setState({userAlert:n}),a.context.patients=t,a.setState({patients:t})})).catch((function(e){console.log(e),a.setState({userAlert:e})}))},a.modalDeleteHandler=function(){console.log("deleting patient...selectedPatient:  ",a.context.selectedPatient);var e=a.context.selectedPatient._id,t=a.context.selectedUser._id;"admin"!==a.context.user.role&&console.log("Not the Admin! No edit permission!!"),a.setState({deleting:!0});var n={query:'\n          mutation {deletePatient(userId:"'.concat(t,'",patientId:"').concat(e,'")\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n        ')};fetch("http://localhost:10000/graphql",{method:"POST",body:JSON.stringify(n),headers:{"Content-Type":"application/json",Authorization:"Bearer "+a.context.token}}).then((function(e){if(200!==e.status&&201!==e.status)throw new Error("Failed!");return e.json()})).then((function(e){var t=e.data.deletePatient;console.log(t);var n=JSON.stringify(e.data).slice(2,25);a.setState({userAlert:n});var r=t._id;t=a.state.patients.find((function(e){return e._id===r}));var i=a.state.patients.indexOf(t),o=a.state.patients.splice(i,1);console.log("deletedPatient:  ",JSON.stringify(t),"  deletedUserPos:  ",i,"  slicedArray:  ",o),a.setState({deleting:!1}),a.fetchPatients()})).catch((function(e){console.log(e),a.setState({userAlert:e}),a.isActive&&a.setState({deleting:!1})}))},a.deletePatientInsuranceItem=function(e){var t=a.context.token,n=a.context.userId,r=a.state.selectedPatient._id;console.log("\n      delete patient insurance item:\n      props: ".concat(JSON.stringify(e),",\n      token: ").concat(t,",\n      userId: ").concat(n,",\n      patientId: ").concat(r,",\n      "));var i={query:'\n         mutation {deletePatientInsurance (userId:"'.concat(n,'", patientId:"').concat(r,'",insuranceCompany:"').concat(e.company,'",insuranceNumber:"').concat(e.number,'")\n         {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      ')};fetch("http://localhost:10000/graphql",{method:"POST",body:JSON.stringify(i),headers:{"Content-Type":"application/json",Authorization:"Bearer "+t}}).then((function(e){if(200!==e.status&&201!==e.status)throw new Error("Failed!");return e.json()})).then((function(e){var t=e.data.deletePatientInsurance;console.log(t);var n=e.data.deletePatientInsurance._id,r=a.state.patients.find((function(e){return e._id===n})),i=a.state.patients.indexOf(r),o=a.state.patients.splice(i,1);console.log("updatedPatient:  ",JSON.stringify(r),"  updatedPatientPos:  ",i,"  slicedArray:  ",o),a.state.patients.push(e.data.deletePatientInsurance),a.context.patients=a.state.patients;var l=JSON.stringify(e.data).slice(2,25);a.setState({userAlert:l}),a.fetchPatients()})).catch((function(e){console.log(e)}))},a.deletePatientConsultantItem=function(e){var t=a.context.token,n=a.context.userId,r=a.state.selectedPatient._id,i=new Date(1e3*e.date.substr(0,10)).toISOString().slice(0,10);console.log("\n      delete patient consultant item:\n      props: ".concat(JSON.stringify(e),",\n      token: ").concat(t,",\n      userId: ").concat(n,",\n      patientId: ").concat(r,",\n      consultant date: ").concat(i,",\n      "));var o={query:'\n         mutation {deletePatientConsultant (userId:"'.concat(n,'", patientId:"').concat(r,'",consultantId:"').concat(e.reference.id,'",consultantDate:"').concat(i,'")\n         {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      ')};fetch("http://localhost:10000/graphql",{method:"POST",body:JSON.stringify(o),headers:{"Content-Type":"application/json",Authorization:"Bearer "+t}}).then((function(e){if(200!==e.status&&201!==e.status)throw new Error("Failed!");return e.json()})).then((function(e){var t=e.data.deletePatientConsultant;console.log(t);var n=e.data.deletePatientConsultant._id,r=a.state.patients.find((function(e){return e._id===n})),i=a.state.patients.indexOf(r),o=a.state.patients.splice(i,1);console.log("updatedPatient:  ",JSON.stringify(r),"  updatedPatientPos:  ",i,"  slicedArray:  ",o),a.state.patients.push(e.data.deletePatientConsultant),a.context.patients=a.state.patients;var l=JSON.stringify(e.data).slice(2,25);a.setState({userAlert:l}),a.fetchPatients()})).catch((function(e){console.log(e)}))},a.deletePatientNextOfKinItem=function(e){var t=a.context.token,n=a.context.userId,r=a.state.selectedPatient._id;console.log("\n    delete patient nextOfKin item:\n    props: ".concat(JSON.stringify(e),",\n    token: ").concat(t,",\n    userId: ").concat(n,",\n    patientId: ").concat(r,",\n    "));var i={query:'\n       mutation {deletePatientNextOfKin (userId:"'.concat(n,'", patientId:"').concat(r,'",nextOfKinName:"').concat(e.name,'")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    ')};fetch("http://localhost:10000/graphql",{method:"POST",body:JSON.stringify(i),headers:{"Content-Type":"application/json",Authorization:"Bearer "+t}}).then((function(e){if(200!==e.status&&201!==e.status)throw new Error("Failed!");return e.json()})).then((function(e){var t=e.data.deletePatientNextOfKin;console.log(t);var n=e.data.deletePatientNextOfKin._id,r=a.state.patients.find((function(e){return e._id===n})),i=a.state.patients.indexOf(r),o=a.state.patients.splice(i,1);console.log("updatedPatient:  ",JSON.stringify(r),"  updatedPatientPos:  ",i,"  slicedArray:  ",o),a.state.patients.push(e.data.deletePatientNextOfKin),a.context.patients=a.state.patients;var l=JSON.stringify(e.data).slice(2,25);a.setState({userAlert:l}),a.fetchPatients()})).catch((function(e){console.log(e)}))},a.deletePatientComplaintItem=function(e){var t=a.context.token,n=a.context.userId,r=a.state.selectedPatient._id,i=new Date(1e3*e.date.substr(0,10)).toISOString().slice(0,10);console.log("\n    delete patient Complaint item:\n    props: ".concat(JSON.stringify(e),",\n    token: ").concat(t,",\n    userId: ").concat(n,",\n    patientId: ").concat(r,",\n    complaint date: ").concat(i,",\n    "));var o={query:'\n       mutation {deletePatientComplaint (userId:"'.concat(n,'", patientId:"').concat(r,'",complaintTitle:"').concat(e.title,'",complaintDate:"').concat(i,'")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    ')};fetch("http://localhost:10000/graphql",{method:"POST",body:JSON.stringify(o),headers:{"Content-Type":"application/json",Authorization:"Bearer "+t}}).then((function(e){if(200!==e.status&&201!==e.status)throw new Error("Failed!");return e.json()})).then((function(e){var t=e.data.deletePatientComplaint;console.log(t);var n=e.data.deletePatientComplaint._id,r=a.state.patients.find((function(e){return e._id===n})),i=a.state.patients.indexOf(r),o=a.state.patients.splice(i,1);console.log("updatedPatient:  ",JSON.stringify(r),"  updatedPatientPos:  ",i,"  slicedArray:  ",o),a.state.patients.push(e.data.deletePatientComplaint),a.context.patients=a.state.patients;var l=JSON.stringify(e.data).slice(2,25);a.setState({userAlert:l}),a.fetchPatients()})).catch((function(e){console.log(e)}))},a.deletePatientSurveyItem=function(e){var t=a.context.token,n=a.context.userId,r=a.state.selectedPatient._id,i=new Date(1e3*e.date.substr(0,10)).toISOString().slice(0,10);console.log("\n    delete patient Survey item:\n    props: ".concat(JSON.stringify(e),",\n    token: ").concat(t,",\n    userId: ").concat(n,",\n    patientId: ").concat(r,",\n    survey date: ").concat(i,"\n    "));var o={query:'\n       mutation {deletePatientSurvey (userId:"'.concat(n,'", patientId:"').concat(r,'",surveyTitle:"').concat(e.title,'",surveyDate:"').concat(i,'")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    ')};fetch("http://localhost:10000/graphql",{method:"POST",body:JSON.stringify(o),headers:{"Content-Type":"application/json",Authorization:"Bearer "+t}}).then((function(e){if(200!==e.status&&201!==e.status)throw new Error("Failed!");return e.json()})).then((function(e){var t=e.data.deletePatientSurvey;console.log(t);var n=e.data.deletePatientSurvey._id,r=a.state.patients.find((function(e){return e._id===n})),i=a.state.patients.indexOf(r),o=a.state.patients.splice(i,1);console.log("updatedPatient:  ",JSON.stringify(r),"  updatedPatientPos:  ",i,"  slicedArray:  ",o),a.state.patients.push(e.data.deletePatientSurvey),a.context.patients=a.state.patients;var l=JSON.stringify(e.data).slice(2,25);a.setState({userAlert:l}),a.fetchPatients()})).catch((function(e){console.log(e)}))},a.deletePatientVitalsItem=function(e){var t=a.context.token,n=a.context.userId,r=a.state.selectedPatient._id,i=new Date(1e3*e.date.substr(0,10)).toISOString().slice(0,10);console.log("\n    delete patient Vitals item:\n    props: ".concat(JSON.stringify(e),",\n    token: ").concat(t,",\n    userId: ").concat(n,",\n    patientId: ").concat(r,",\n    vitals date: ").concat(i,",\n    "));var o={query:'\n       mutation {deletePatientVitals (userId:"'.concat(n,'", patientId:"').concat(r,'",vitalsDate:"').concat(i,'")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    ')};fetch("http://localhost:10000/graphql",{method:"POST",body:JSON.stringify(o),headers:{"Content-Type":"application/json",Authorization:"Bearer "+t}}).then((function(e){if(200!==e.status&&201!==e.status)throw new Error("Failed!");return e.json()})).then((function(e){var t=e.data.deletePatientVitals;console.log(t);var n=e.data.deletePatientVitals._id,r=a.state.patients.find((function(e){return e._id===n})),i=a.state.patients.indexOf(r),o=a.state.patients.splice(i,1);console.log("updatedPatient:  ",JSON.stringify(r),"  updatedPatientPos:  ",i,"  slicedArray:  ",o),a.state.patients.push(e.data.deletePatientVitals),a.context.patients=a.state.patients;var l=JSON.stringify(e.data).slice(2,25);a.setState({userAlert:l}),a.fetchPatients()})).catch((function(e){console.log(e)}))},a.deletePatientExaminationItem=function(e){var t=a.context.token,n=a.context.userId,r=a.state.selectedPatient._id,i=new Date(1e3*e.date.substr(0,10)).toISOString().slice(0,10);console.log("\n    delete patient Examination item:\n    props: ".concat(JSON.stringify(e),",\n    token: ").concat(t,",\n    userId: ").concat(n,",\n    patientId: ").concat(r,",\n    examination date: ").concat(i,",\n    "));var o={query:'\n       mutation {deletePatientExamination (userId:"'.concat(n,'", patientId:"').concat(r,'",examinationType:"').concat(e.type,'",examinationDate:"').concat(i,'")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    ')};fetch("http://localhost:10000/graphql",{method:"POST",body:JSON.stringify(o),headers:{"Content-Type":"application/json",Authorization:"Bearer "+t}}).then((function(e){if(200!==e.status&&201!==e.status)throw new Error("Failed!");return e.json()})).then((function(e){var t=e.data.deletePatientExamination;console.log(t);var n=e.data.deletePatientExamination._id,r=a.state.patients.find((function(e){return e._id===n})),i=a.state.patients.indexOf(r),o=a.state.patients.splice(i,1);console.log("updatedPatient:  ",JSON.stringify(r),"  updatedPatientPos:  ",i,"  slicedArray:  ",o),a.state.patients.push(e.data.deletePatientExamination),a.context.patients=a.state.patients;var l=JSON.stringify(e.data).slice(2,25);a.setState({userAlert:l}),a.fetchPatients()})).catch((function(e){console.log(e)}))},a.deletePatientHistoryItem=function(e){var t=a.context.token,n=a.context.userId,r=a.state.selectedPatient._id,i=new Date(1e3*e.date.substr(0,10)).toISOString().slice(0,10);console.log("\n    delete patient History item:\n    props: ".concat(JSON.stringify(e),",\n    token: ").concat(t,",\n    userId: ").concat(n,",\n    patientId: ").concat(r,",\n    history date: ").concat(i,",\n    "));var o={query:'\n       mutation {deletePatientHistory (userId:"'.concat(n,'", patientId:"').concat(r,'",historyTitle:"').concat(e.title,'",historyDate:"').concat(i,'")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    ')};fetch("http://localhost:10000/graphql",{method:"POST",body:JSON.stringify(o),headers:{"Content-Type":"application/json",Authorization:"Bearer "+t}}).then((function(e){if(200!==e.status&&201!==e.status)throw new Error("Failed!");return e.json()})).then((function(e){var t=e.data.deletePatientHistory;console.log(t);var n=e.data.deletePatientHistory._id,r=a.state.patients.find((function(e){return e._id===n})),i=a.state.patients.indexOf(r),o=a.state.patients.splice(i,1);console.log("updatedPatient:  ",JSON.stringify(r),"  updatedPatientPos:  ",i,"  slicedArray:  ",o),a.state.patients.push(e.data.deletePatientHistory),a.context.patients=a.state.patients;var l=JSON.stringify(e.data).slice(2,25);a.setState({userAlert:l}),a.fetchPatients()})).catch((function(e){console.log(e)}))},a.deletePatientAllergiesItem=function(e){var t=a.context.token,n=a.context.userId,r=a.state.selectedPatient._id;console.log("\n    delete patient Allergies item:\n    props: ".concat(JSON.stringify(e),",\n    token: ").concat(t,",\n    userId: ").concat(n,",\n    patientId: ").concat(r,",\n    "));var i={query:'\n       mutation {deletePatientAllergies (userId:"'.concat(n,'", patientId:"').concat(r,'",allergiesTitle:"').concat(e.title,'",allergiesType:"').concat(e.type,'")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    ')};fetch("http://localhost:10000/graphql",{method:"POST",body:JSON.stringify(i),headers:{"Content-Type":"application/json",Authorization:"Bearer "+t}}).then((function(e){if(200!==e.status&&201!==e.status)throw new Error("Failed!");return e.json()})).then((function(e){var t=e.data.deletePatientAllergies;console.log(t);var n=e.data.deletePatientAllergies._id,r=a.state.patients.find((function(e){return e._id===n})),i=a.state.patients.indexOf(r),o=a.state.patients.splice(i,1);console.log("updatedPatient:  ",JSON.stringify(r),"  updatedPatientPos:  ",i,"  slicedArray:  ",o),a.state.patients.push(e.data.deletePatientAllergies),a.context.patients=a.state.patients;var l=JSON.stringify(e.data).slice(2,25);a.setState({userAlert:l}),a.fetchPatients()})).catch((function(e){console.log(e)}))},a.deletePatientMedicationItem=function(e){var t=a.context.token,n=a.context.userId,r=a.state.selectedPatient._id;console.log("\n    delete patient Medication item:\n    props: ".concat(JSON.stringify(e),",\n    token: ").concat(t,",\n    userId: ").concat(n,",\n    patientId: ").concat(r,",\n    "));var i={query:'\n       mutation {deletePatientMedication (userId:"'.concat(n,'", patientId:"').concat(r,'",medicationTitle:"').concat(e.title,'",medicationType:"').concat(e.type,'")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    ')};fetch("http://localhost:10000/graphql",{method:"POST",body:JSON.stringify(i),headers:{"Content-Type":"application/json",Authorization:"Bearer "+t}}).then((function(e){if(200!==e.status&&201!==e.status)throw new Error("Failed!");return e.json()})).then((function(e){var t=e.data.deletePatientMedication;console.log(t);var n=e.data.deletePatientMedication._id,r=a.state.patients.find((function(e){return e._id===n})),i=a.state.patients.indexOf(r),o=a.state.patients.splice(i,1);console.log("updatedPatient:  ",JSON.stringify(r),"  updatedPatientPos:  ",i,"  slicedArray:  ",o),a.state.patients.push(e.data.deletePatientMedication),a.context.patients=a.state.patients;var l=JSON.stringify(e.data).slice(2,25);a.setState({userAlert:l}),a.fetchPatients()})).catch((function(e){console.log(e)}))},a.deletePatientInvestigationItem=function(e){var t=a.context.token,n=a.context.userId,r=a.state.selectedPatient._id,i=new Date(1e3*e.date.substr(0,10)).toISOString().slice(0,10);console.log("\n    delete patient Investigation item:\n    props: ".concat(JSON.stringify(e),",\n    token: ").concat(t,",\n    userId: ").concat(n,",\n    patientId: ").concat(r,",\n    investigation date: ").concat(i,",\n    "));var o={query:'\n       mutation {deletePatientInvestigation (userId:"'.concat(n,'", patientId:"').concat(r,'",investigationDate:"').concat(i,'",investigationTitle:"').concat(e.title,'")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    ')};fetch("http://localhost:10000/graphql",{method:"POST",body:JSON.stringify(o),headers:{"Content-Type":"application/json",Authorization:"Bearer "+t}}).then((function(e){if(200!==e.status&&201!==e.status)throw new Error("Failed!");return e.json()})).then((function(e){var t=e.data.deletePatientInvestigation;console.log(t);var n=e.data.deletePatientInvestigation._id,r=a.state.patients.find((function(e){return e._id===n})),i=a.state.patients.indexOf(r),o=a.state.patients.splice(i,1);console.log("updatedPatient:  ",JSON.stringify(r),"  updatedPatientPos:  ",i,"  slicedArray:  ",o),a.state.patients.push(e.data.deletePatientInvestigation),a.context.patients=a.state.patients;var l=JSON.stringify(e.data).slice(2,25);a.setState({userAlert:l}),a.fetchPatients()})).catch((function(e){console.log(e)}))},a.deletePatientDiagnosisItem=function(e){var t=a.context.token,n=a.context.userId,r=a.state.selectedPatient._id,i=new Date(1e3*e.date.substr(0,10)).toISOString().slice(0,10);console.log("\n    delete patient Diagnosis item:\n    props: ".concat(JSON.stringify(e),",\n    token: ").concat(t,",\n    userId: ").concat(n,",\n    patientId: ").concat(r,",\n    diagnosis date: ").concat(i,"\n    "));var o={query:'\n       mutation {deletePatientDiagnosis (userId:"'.concat(n,'",patientId:"').concat(r,'",diagnosisDate:"').concat(i,'",diagnosisTitle:"').concat(e.title,'")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    ')};fetch("http://localhost:10000/graphql",{method:"POST",body:JSON.stringify(o),headers:{"Content-Type":"application/json",Authorization:"Bearer "+t}}).then((function(e){if(200!==e.status&&201!==e.status)throw new Error("Failed!");return e.json()})).then((function(e){var t=e.data.deletePatientDiagnosis;console.log(t);var n=e.data.deletePatientDiagnosis._id,r=a.state.patients.find((function(e){return e._id===n})),i=a.state.patients.indexOf(r),o=a.state.patients.splice(i,1);console.log("updatedPatient:  ",JSON.stringify(r),"  updatedPatientPos:  ",i,"  slicedArray:  ",o),a.state.patients.push(e.data.deletePatientDiagnosis),a.context.patients=a.state.patients;var l=JSON.stringify(e.data).slice(2,25);a.setState({userAlert:l}),a.fetchPatients()})).catch((function(e){console.log(e)}))},a.deletePatientTreatmentItem=function(e){var t=a.context.token,n=a.context.userId,r=a.state.selectedPatient._id,i=new Date(1e3*e.date.substr(0,10)).toISOString().slice(0,10);console.log("\n    delete patient Treatment item:\n    props: ".concat(JSON.stringify(e),",\n    token: ").concat(t,",\n    userId: ").concat(n,",\n    patientId: ").concat(r,",\n    treatment date: ").concat(i,",\n    "));var o={query:'\n       mutation {deletePatientTreatment (userId:"'.concat(n,'", patientId:"').concat(r,'",treatmentDate:"').concat(i,'",treatmentTitle:"').concat(e.title,'")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    ')};fetch("http://localhost:10000/graphql",{method:"POST",body:JSON.stringify(o),headers:{"Content-Type":"application/json",Authorization:"Bearer "+t}}).then((function(e){if(200!==e.status&&201!==e.status)throw new Error("Failed!");return e.json()})).then((function(e){var t=e.data.deletePatientTreatment;console.log(t);var n=e.data.deletePatientTreatment._id,r=a.state.patients.find((function(e){return e._id===n})),i=a.state.patients.indexOf(r),o=a.state.patients.splice(i,1);console.log("updatedPatient:  ",JSON.stringify(r),"  updatedPatientPos:  ",i,"  slicedArray:  ",o),a.state.patients.push(e.data.deletePatientTreatment),a.context.patients=a.state.patients;var l=JSON.stringify(e.data).slice(2,25);a.setState({userAlert:l}),a.fetchPatients()})).catch((function(e){console.log(e)}))},a.deletePatientBillingItem=function(e){var t=a.context.token,n=a.context.userId,r=a.state.selectedPatient._id,i=new Date(1e3*e.date.substr(0,10)).toISOString().slice(0,10);console.log("\n    delete patient Billing item:\n    props: ".concat(JSON.stringify(e),",\n    token: ").concat(t,",\n    userId: ").concat(n,",\n    patientId: ").concat(r,",\n    billing date: ").concat(i,",\n    "));var o={query:'\n       mutation {deletePatientBilling (userId:"'.concat(n,'", patientId:"').concat(r,'",billingDate:"').concat(i,'",billingTitle:"').concat(e.title,'")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    ')};fetch("http://localhost:10000/graphql",{method:"POST",body:JSON.stringify(o),headers:{"Content-Type":"application/json",Authorization:"Bearer "+t}}).then((function(e){if(200!==e.status&&201!==e.status)throw new Error("Failed!");return e.json()})).then((function(e){var t=e.data.deletePatientBilling;console.log(t);var n=e.data.deletePatientBilling._id,r=a.state.patients.find((function(e){return e._id===n})),i=a.state.patients.indexOf(r),o=a.state.patients.splice(i,1);console.log("updatedPatient:  ",JSON.stringify(r),"  updatedPatientPos:  ",i,"  slicedArray:  ",o),a.state.patients.push(e.data.deletePatientBilling),a.context.patients=a.state.patients;var l=JSON.stringify(e.data).slice(2,25);a.setState({userAlert:l}),a.fetchPatients()})).catch((function(e){console.log(e)}))},a.deletePatientAttachmentItem=function(e){var t=a.context.token,n=a.context.userId,r=a.state.selectedPatient._id;console.log("\n    delete patient Attachment item:\n    props: ".concat(JSON.stringify(e),",\n    token: ").concat(t,",\n    userId: ").concat(n,",\n    patientId: ").concat(r,",\n    "));var i={query:'\n       mutation {deletePatientAttachment (userId:"'.concat(n,'", patientId:"').concat(r,'",attachmentName:"').concat(e.name,'")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    ')};fetch("http://localhost:10000/graphql",{method:"POST",body:JSON.stringify(i),headers:{"Content-Type":"application/json",Authorization:"Bearer "+t}}).then((function(e){if(200!==e.status&&201!==e.status)throw new Error("Failed!");return e.json()})).then((function(e){var t=e.data.deletePatientAttachment;console.log(t);var n=e.data.deletePatientAttachment._id,r=a.state.patients.find((function(e){return e._id===n})),i=a.state.patients.indexOf(r),o=a.state.patients.splice(i,1);console.log("updatedPatient:  ",JSON.stringify(r),"  updatedPatientPos:  ",i,"  slicedArray:  ",o),a.state.patients.push(e.data.deletePatientAttachment),a.context.patients=a.state.patients;var l=JSON.stringify(e.data).slice(2,25);a.setState({userAlert:l}),a.fetchPatients()})).catch((function(e){console.log(e)}))},a.deletePatientNoteItem=function(e){var t=a.context.token,n=a.context.userId,r=a.state.selectedPatient._id;console.log("\n    delete patient Note item:\n    props: ".concat(JSON.stringify(e),",\n    token: ").concat(t,",\n    userId: ").concat(n,",\n    patientId: ").concat(r,",\n    "));fetch("http://localhost:10000/graphql",{method:"POST",body:JSON.stringify({query:"\n\n    "}),headers:{"Content-Type":"application/json",Authorization:"Bearer "+t}}).then((function(e){if(200!==e.status&&201!==e.status)throw new Error("Failed!");return e.json()})).then((function(e){var t=e.data.deletePatientNextOfKin;console.log(t);var n=e.data.deletePatientNextOfKin._id,r=a.state.patients.find((function(e){return e._id===n})),i=a.state.patients.indexOf(r),o=a.state.patients.splice(i,1);console.log("updatedPatient:  ",JSON.stringify(r),"  updatedPatientPos:  ",i,"  slicedArray:  ",o),a.state.patients.push(e.data.deletePatientNextOfKin),a.context.patients=a.state.patients;var l=JSON.stringify(e.data).slice(2,25);a.setState({userAlert:l}),a.fetchPatients()})).catch((function(e){console.log(e)}))},a.deletePatientTagItem=function(e){var t=a.context.token,n=a.context.userId,r=a.state.selectedPatient._id;console.log("\n    delete patient Tag item:\n    props: ".concat(JSON.stringify(e),",\n    token: ").concat(t,",\n    userId: ").concat(n,",\n    patientId: ").concat(r,",\n    "));fetch("http://localhost:10000/graphql",{method:"POST",body:JSON.stringify({query:"\n\n    "}),headers:{"Content-Type":"application/json",Authorization:"Bearer "+t}}).then((function(e){if(200!==e.status&&201!==e.status)throw new Error("Failed!");return e.json()})).then((function(e){var t=e.data.deletePatientNextOfKin;console.log(t);var n=e.data.deletePatientNextOfKin._id,r=a.state.patients.find((function(e){return e._id===n})),i=a.state.patients.indexOf(r),o=a.state.patients.splice(i,1);console.log("updatedPatient:  ",JSON.stringify(r),"  updatedPatientPos:  ",i,"  slicedArray:  ",o),a.state.patients.push(e.data.deletePatientNextOfKin),a.context.patients=a.state.patients;var l=JSON.stringify(e.data).slice(2,25);a.setState({userAlert:l}),a.fetchPatients()})).catch((function(e){console.log(e)}))},a.showDetailHandler=function(e){a.setState((function(t){var n=t.patients.find((function(t){return t._id===e}));return a.context.selectedPatient=n,a.context.selectedPatientId=n._id,console.log("selectedPatient:  ",n),{selectedPatient:n}}))},a.nameElRef=r.a.createRef(),a}return Object(d.a)(t,e),Object(c.a)(t,[{key:"componentDidMount",value:function(){this.fetchPatients(),"admin579"===this.context.user.name&&this.setState({canDelete:!0})}},{key:"fetchPatients",value:function(){var e=this;console.log("fetch patients function:  ");var t=this.context.userId,a=this.context.token;this.setState({isLoading:!0});var n={query:'\n          query {patients(userId:"'.concat(t,'")\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{_id,title,time,location,date},consultant{date,reference{_id,name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n        ')};fetch("http://localhost:10000/graphql",{method:"POST",body:JSON.stringify(n),headers:{"Content-Type":"application/json",Authorization:"Bearer "+a}}).then((function(e){if(200!==e.status&&201!==e.status)throw new Error("Failed!");return e.json()})).then((function(t){console.log("resData",t);var a=t.data.patients;console.log(a);var n=JSON.stringify(t.data).slice(2,25);e.setState({userAlert:n}),e.context.patients=e.state.patients,e.isActive&&e.setState({patients:a,isLoading:!1})})).catch((function(t){console.log(t),e.setState({userAlert:t}),e.isActive&&e.setState({isLoading:!1})}))}},{key:"updatePatientSpecial",value:function(e){console.log("special field to update:  ",e.target.value);var t=e.target.value;this.setState({patientUpdateField:t})}},{key:"componentWillUnmount",value:function(){this.isActive=!1}},{key:"render",value:function(){return r.a.createElement(r.a.Fragment,null,r.a.createElement(C.a,null,r.a.createElement(g.a,null,r.a.createElement(S.a,{md:3,className:"MasterCol1"},r.a.createElement(v,{authUserId:this.context.userId,alert:this.state.userAlert}),r.a.createElement(X,null)),r.a.createElement(S.a,{md:9,className:"MasterCol2"},r.a.createElement(N.a,{className:"containerCombinedDetail"},r.a.createElement(O.a,{defaultActiveKey:"",id:"uncontrolled-tab-example"},r.a.createElement(T.a,{eventKey:"",title:"Edit:",disabled:!0}),r.a.createElement(T.a,{eventKey:"patientDetail",title:"Details"},null===this.state.selectedPatient&&r.a.createElement(h.a,{variant:"outline-warning",size:"lg"},"Select a Patient from the Master List below"),!1===this.state.isLoading&&null!==this.state.selectedPatient&&r.a.createElement(gt,{authUserId:this.context.userId,token:this.context.token,patient:this.state.selectedPatient,onEdit:this.startUpdatePatientHandler,canDelete:this.state.canDelete,onDelete:this.modalDeleteHandler,onGetVisit:this.getPatientVisit,visit:this.context.visit,fetchUsers:this.fetchUsers,consultantDelete:this.deletePatientConsultantItem,insuranceDelete:this.deletePatientInsuranceItem,nextOfKinDelete:this.deletePatientNextOfKinItem,complaintDelete:this.deletePatientComplaintItem,surveyDelete:this.deletePatientSurveyItem,vitalsDelete:this.deletePatientVitalsItem,examinationDelete:this.deletePatientExaminationItem,historyDelete:this.deletePatientHistoryItem,allergiesDelete:this.deletePatientAllergiesItem,medicationDelete:this.deletePatientMedicationItem,investigationDelete:this.deletePatientInvestigationItem,diagnosisDelete:this.deletePatientDiagnosisItem,treatmentDelete:this.deletePatientTreatmentItem,billingDelete:this.deletePatientBillingItem,attachmentDelete:this.deletePatientAttachmentItem,noteDelete:this.deletePatientNoteItem,tagDelete:this.deletePatientTagItem})),r.a.createElement(T.a,{eventKey:"patientCreate",title:"Create"},r.a.createElement(h.a,{variant:"outline-primary",onClick:this.startCreatePatientHandler},"Create"),this.state.creating&&r.a.createElement(St,{canCancel:!0,canConfirm:!0,onCancel:this.modalCancelHandler,onConfirm:this.modalConfirmHandler,confirmText:"Confirm"})),r.a.createElement(T.a,{eventKey:"patientEditDemographics",title:"Demographics"},null===this.state.selectedPatient&&r.a.createElement(h.a,{variant:"outline-warning",size:"lg"},"Select a Patient from the Master List below"),null!==this.state.selectedPatient&&r.a.createElement(h.a,{variant:"outline-primary",onClick:this.startUpdatePatientHandler},"Edit Demographics"),this.state.updating&&null!==this.state.selectedPatient&&r.a.createElement(Pt,{authUserId:this.context.userId,canCancel:!0,canConfirm:!0,onCancel:this.modalCancelHandler,onConfirm:this.modalConfirmUpdateHandler,confirmText:"Confirm",patient:this.state.selectedPatient})),r.a.createElement(T.a,{eventKey:"patientEditField",title:"Single Field"},null===this.state.selectedPatient&&r.a.createElement(h.a,{variant:"outline-warning",size:"lg"},"Select a Patient from the Master List below"),null!==this.state.selectedPatient&&r.a.createElement(h.a,{variant:"outline-primary",onClick:this.startUpdatePatientHandler},"Edit Field"),this.state.updating&&null!==this.state.selectedPatient&&r.a.createElement(Ct,{authUserId:this.context.userId,canCancel:!0,canConfirm:!0,onCancel:this.modalCancelHandler,onConfirm:this.modalConfirmUpdateFieldHandler,confirmText:"Confirm",patient:this.state.selectedPatient})),r.a.createElement(T.a,{eventKey:"patientEditConsultant",title:"Consultant"},null===this.state.selectedPatient&&r.a.createElement(h.a,{variant:"outline-warning",size:"lg"},"Select a Patient from the Master List below"),null!==this.state.selectedPatient&&r.a.createElement(h.a,{variant:"outline-primary",value:"consultant",onClick:this.updatePatientSpecial.bind(this)},"Add Consultant"),"consultant"===this.state.patientUpdateField&&null!==this.state.selectedPatient&&r.a.createElement(xt,{authUserId:this.context.userId,canCancel:!0,canConfirm:!0,onCancel:this.modalCancelHandler,onConfirm:this.updatePatientConsultantHandler,confirmText:"Confirm",consultant:this.context.selectedUser}),"consultant"===this.state.patientUpdateField&&null!==this.state.selectedPatient&&r.a.createElement(g.a,null,r.a.createElement("p",null,"Add Consultant: ",this.context.selectedUser.name),r.a.createElement("p",null," To Paitient: ",this.state.selectedPatient.name," ??"),r.a.createElement("hr",null)),"consultant"===this.state.patientUpdateField&&null!==this.state.selectedPatient&&r.a.createElement(g.a,null,r.a.createElement(h.a,{variant:"outline-warning",size:"lg"},"Select a doctor from the Staff page"))),r.a.createElement(T.a,{eventKey:"patientEditInsurance",title:"Insurance"},null===this.state.selectedPatient&&r.a.createElement(h.a,{variant:"outline-warning",size:"lg"},"Select a Patient from the Master List below"),null!==this.state.selectedPatient&&r.a.createElement(h.a,{variant:"outline-primary",value:"insurance",onClick:this.updatePatientSpecial.bind(this)},"Add Insurance"),"insurance"===this.state.patientUpdateField&&null!==this.state.selectedPatient&&r.a.createElement(It,{authUserId:this.context.userId,canCancel:!0,canConfirm:!0,onCancel:this.modalCancelHandler,onConfirm:this.updatePatientInsuranceHandler,confirmText:"Confirm",patient:this.state.selectedPatient})),r.a.createElement(T.a,{eventKey:"patientEditNextOfKin",title:"NextOfKin"},null===this.state.selectedPatient&&r.a.createElement(h.a,{variant:"outline-warning",size:"lg"},"Select a Patient from the Master List below"),null!==this.state.selectedPatient&&r.a.createElement(h.a,{variant:"outline-primary",value:"nextOfKin",onClick:this.updatePatientSpecial.bind(this)},"Add NextOfKin"),"nextOfKin"===this.state.patientUpdateField&&null!==this.state.selectedPatient&&r.a.createElement(At,{authUserId:this.context.userId,canCancel:!0,canConfirm:!0,onCancel:this.modalCancelHandler,onConfirm:this.updatePatientNextOfKinHandler,confirmText:"Confirm",patient:this.state.selectedPatient})),r.a.createElement(T.a,{eventKey:"patientEditComplaint",title:"Complaint"},null===this.state.selectedPatient&&r.a.createElement(h.a,{variant:"outline-warning",size:"lg"},"Select a Patient from the Master List below"),null!==this.state.selectedPatient&&r.a.createElement(h.a,{variant:"outline-primary",value:"complaint",onClick:this.updatePatientSpecial.bind(this)},"Add Complaint"),"complaint"===this.state.patientUpdateField&&null!==this.state.selectedPatient&&r.a.createElement(Nt,{authUserId:this.context.userId,canCancel:!0,canConfirm:!0,onCancel:this.modalCancelHandler,onConfirm:this.updatePatientComplaintHandler,confirmText:"Confirm",patient:this.state.selectedPatient})),r.a.createElement(T.a,{eventKey:"patientEditSurvey",title:"Survey"},null===this.state.selectedPatient&&r.a.createElement(h.a,{variant:"outline-warning",size:"lg"},"Select a Patient from the Master List below"),null!==this.state.selectedPatient&&r.a.createElement(h.a,{variant:"outline-primary",value:"survey",onClick:this.updatePatientSpecial.bind(this)},"Add Survey"),"survey"===this.state.patientUpdateField&&null!==this.state.selectedPatient&&r.a.createElement(Ot,{authUserId:this.context.userId,canCancel:!0,canConfirm:!0,onCancel:this.modalCancelHandler,onConfirm:this.updatePatientSurveyHandler,confirmText:"Confirm",patient:this.state.selectedPatient})),r.a.createElement(T.a,{eventKey:"patientEditVitals",title:"Vitals"},null===this.state.selectedPatient&&r.a.createElement(h.a,{variant:"outline-warning",size:"lg"},"Select a Patient from the Master List below"),null!==this.state.selectedPatient&&r.a.createElement(h.a,{variant:"outline-primary",value:"vitals",onClick:this.updatePatientSpecial.bind(this)},"Add Vitals"),"vitals"===this.state.patientUpdateField&&null!==this.state.selectedPatient&&r.a.createElement(Tt,{authUserId:this.context.userId,canCancel:!0,canConfirm:!0,onCancel:this.modalCancelHandler,onConfirm:this.updatePatientVitalsHandler,confirmText:"Confirm",patient:this.state.selectedPatient})),r.a.createElement(T.a,{eventKey:"patientEditExamination",title:"Examination"},null===this.state.selectedPatient&&r.a.createElement(h.a,{variant:"outline-warning",size:"lg"},"Select a Patient from the Master List below"),null!==this.state.selectedPatient&&r.a.createElement(h.a,{variant:"outline-primary",value:"examintion",onClick:this.updatePatientSpecial.bind(this)},"Add Examination"),"examintion"===this.state.patientUpdateField&&null!==this.state.selectedPatient&&r.a.createElement(Ut,{authUserId:this.context.userId,canCancel:!0,canConfirm:!0,onCancel:this.modalCancelHandler,onConfirm:this.updatePatientExaminationHandler,confirmText:"Confirm",patient:this.state.selectedPatient})),r.a.createElement(T.a,{eventKey:"patientEditHistory",title:"History"},null===this.state.selectedPatient&&r.a.createElement(h.a,{variant:"outline-warning",size:"lg"},"Select a Patient from the Master List below"),null!==this.state.selectedPatient&&r.a.createElement(h.a,{variant:"outline-primary",value:"history",onClick:this.updatePatientSpecial.bind(this)},"Add History"),"history"===this.state.patientUpdateField&&null!==this.state.selectedPatient&&r.a.createElement(Gt,{authUserId:this.context.userId,canCancel:!0,canConfirm:!0,onCancel:this.modalCancelHandler,onConfirm:this.updatePatientHistoryHandler,confirmText:"Confirm",patient:this.state.selectedPatient})),r.a.createElement(T.a,{eventKey:"patientEditAllergies",title:"Allergies"},null===this.state.selectedPatient&&r.a.createElement(h.a,{variant:"outline-warning",size:"lg"},"Select a Patient from the Master List below"),null!==this.state.selectedPatient&&r.a.createElement(h.a,{variant:"outline-primary",value:"allergies",onClick:this.updatePatientSpecial.bind(this)},"Add Allergies"),"allergies"===this.state.patientUpdateField&&null!==this.state.selectedPatient&&r.a.createElement(wt,{authUserId:this.context.userId,canCancel:!0,canConfirm:!0,onCancel:this.modalCancelHandler,onConfirm:this.updatePatientAllergiesHandler,confirmText:"Confirm",patient:this.state.selectedPatient})),r.a.createElement(T.a,{eventKey:"patientEditMedication",title:"Medication"},null===this.state.selectedPatient&&r.a.createElement(h.a,{variant:"outline-warning",size:"lg"},"Select a Patient from the Master List below"),null!==this.state.selectedPatient&&r.a.createElement(h.a,{variant:"outline-primary",value:"medication",onClick:this.updatePatientSpecial.bind(this)},"Add Medication"),"medication"===this.state.patientUpdateField&&null!==this.state.selectedPatient&&r.a.createElement(Ft,{authUserId:this.context.userId,canCancel:!0,canConfirm:!0,onCancel:this.modalCancelHandler,onConfirm:this.updatePatientMedicationHandler,confirmText:"Confirm",patient:this.state.selectedPatient})),r.a.createElement(T.a,{eventKey:"patientEditInvestigation",title:"Investigation"},null===this.state.selectedPatient&&r.a.createElement(h.a,{variant:"outline-warning",size:"lg"},"Select a Patient from the Master List below"),null!==this.state.selectedPatient&&r.a.createElement(h.a,{variant:"outline-primary",value:"investigation",onClick:this.updatePatientSpecial.bind(this)},"Add Investigation"),"investigation"===this.state.patientUpdateField&&null!==this.state.selectedPatient&&r.a.createElement(_t,{authUserId:this.context.userId,canCancel:!0,canConfirm:!0,onCancel:this.modalCancelHandler,onConfirm:this.updatePatientInvestigationHandler,confirmText:"Confirm",patient:this.state.selectedPatient})),r.a.createElement(T.a,{eventKey:"patientEditDiagnosis",title:"Diagnosis"},null===this.state.selectedPatient&&r.a.createElement(h.a,{variant:"outline-warning",size:"lg"},"Select a Patient from the Master List below"),null!==this.state.selectedPatient&&r.a.createElement(h.a,{variant:"outline-primary",value:"diagnosis",onClick:this.updatePatientSpecial.bind(this)},"Add Diagnosis"),"diagnosis"===this.state.patientUpdateField&&null!==this.state.selectedPatient&&r.a.createElement(kt,{authUserId:this.context.userId,canCancel:!0,canConfirm:!0,onCancel:this.modalCancelHandler,onConfirm:this.updatePatientDiagnosisHandler,confirmText:"Confirm",patient:this.state.selectedPatient})),r.a.createElement(T.a,{eventKey:"patientEditTreatment",title:"Treatment"},null===this.state.selectedPatient&&r.a.createElement(h.a,{variant:"outline-warning",size:"lg"},"Select a Patient from the Master List below"),null!==this.state.selectedPatient&&r.a.createElement(h.a,{variant:"outline-primary",value:"treatment",onClick:this.updatePatientSpecial.bind(this)},"Add Treatment"),"treatment"===this.state.patientUpdateField&&null!==this.state.selectedPatient&&r.a.createElement(Lt,{authUserId:this.context.userId,canCancel:!0,canConfirm:!0,onCancel:this.modalCancelHandler,onConfirm:this.updatePatientTreatmentHandler,confirmText:"Confirm",patient:this.state.selectedPatient})),r.a.createElement(T.a,{eventKey:"patientEditBilling",title:"Billing"},null===this.state.selectedPatient&&r.a.createElement(h.a,{variant:"outline-warning",size:"lg"},"Select a Patient from the Master List below"),null!==this.state.selectedPatient&&r.a.createElement(h.a,{variant:"outline-primary",value:"billing",onClick:this.updatePatientSpecial.bind(this)},"Add Billing"),"billing"===this.state.patientUpdateField&&null!==this.state.selectedPatient&&r.a.createElement(Jt,{authUserId:this.context.userId,canCancel:!0,canConfirm:!0,onCancel:this.modalCancelHandler,onConfirm:this.updatePatientBillingHandler,confirmText:"Confirm",patient:this.state.selectedPatient})),r.a.createElement(T.a,{eventKey:"patientEditAttachment",title:"Attachment"},null===this.state.selectedPatient&&r.a.createElement(h.a,{variant:"outline-warning",size:"lg"},"Select a Patient from the Master List below"),null!==this.state.selectedPatient&&r.a.createElement(h.a,{variant:"outline-primary",value:"attachment",onClick:this.updatePatientSpecial.bind(this)},"Add Attachment"),"attachment"===this.state.patientUpdateField&&null!==this.state.selectedPatient&&r.a.createElement(jt,{authUserId:this.context.userId,canCancel:!0,canConfirm:!0,onCancel:this.modalCancelHandler,onConfirm:this.updatePatientAttachmentHandler,confirmText:"Confirm",patient:this.state.selectedPatient})),r.a.createElement(T.a,{eventKey:"patientEditNote",title:"Note"},null===this.state.selectedPatient&&r.a.createElement(h.a,{variant:"outline-warning",size:"lg"},"Select a Patient from the Master List below"),null!==this.state.selectedPatient&&r.a.createElement(h.a,{variant:"outline-primary",value:"notes",onClick:this.updatePatientSpecial.bind(this)},"Add Note"),"notes"===this.state.patientUpdateField&&null!==this.state.selectedPatient&&r.a.createElement(Kt,{authUserId:this.context.userId,canCancel:!0,canConfirm:!0,onCancel:this.modalCancelHandler,onConfirm:this.updatePatientNoteHandler,confirmText:"Confirm",patient:this.state.selectedPatient})),r.a.createElement(T.a,{eventKey:"patientEditTag",title:"Tag"},null===this.state.selectedPatient&&r.a.createElement(h.a,{variant:"outline-warning",size:"lg"},"Select a Patient from the Master List below"),null!==this.state.selectedPatient&&r.a.createElement(h.a,{variant:"outline-primary",value:"tags",onClick:this.updatePatientSpecial.bind(this)},"Add Tag"),"tags"===this.state.patientUpdateField&&null!==this.state.selectedPatient&&r.a.createElement(Ht,{authUserId:this.context.userId,canCancel:!0,canConfirm:!0,onCancel:this.modalCancelHandler,onConfirm:this.updatePatientTagHandler,confirmText:"Confirm",patient:this.state.selectedPatient})),r.a.createElement(T.a,{eventKey:"MasterList",title:"Master List"},r.a.createElement(N.a,{className:"containerUserMasterList"},r.a.createElement(g.a,{className:"searchListRow"},r.a.createElement(h.a,{variant:"primary",size:"sm",onClick:this.fetchPatientsAsc},"Sort Asc"),r.a.createElement(h.a,{variant:"info",size:"sm",onClick:this.fetchPatientsDesc},"Sort Desc"),this.state.isLoading?r.a.createElement(R,null):r.a.createElement(de,{patients:this.state.patients,authUserId:this.context.userId,onViewDetail:this.showDetailHandler})))),r.a.createElement(T.a,{eventKey:"SearchInput",title:"Search"},r.a.createElement(N.a,{className:"containerSearchUserInput"},this.context.token&&r.a.createElement(g.a,{className:"searchUserRowAdd"},r.a.createElement(h.a,{variant:"primary",onClick:this.startSearchPatientHandler},"Search")),r.a.createElement(g.a,{className:"searchUserRowForm"},r.a.createElement(S.a,{md:10,className:"searchUserColForm"},r.a.createElement(O.a,{defaultActiveKey:"Field",id:"uncontrolled-tab-example"},r.a.createElement(T.a,{eventKey:"Search",title:"Search:",disabled:!0}),r.a.createElement(T.a,{eventKey:"Field",title:"Field:"},!0===this.state.searching&&r.a.createElement(vt,{authUserId:this.context.userId,canCancel:!0,canConfirm:!0,onCancel:this.modalCancelHandler,onConfirm:this.modalConfirmSearchHandler,confirmText:"Search",patient:this.context.selectedPatient})),r.a.createElement(T.a,{eventKey:"Id",title:"Id:"},!0===this.state.searching&&r.a.createElement(bt,{authUserId:this.context.userId,canCancel:!0,canConfirm:!0,onCancel:this.modalCancelHandler,onConfirm:this.modalConfirmSearchIdHandler,confirmText:"Search",patient:this.context.selectedPatient})),r.a.createElement(T.a,{eventKey:"Name",title:"Name:"},!0===this.state.searching&&r.a.createElement(Dt,{authUserId:this.context.userId,canCancel:!0,canConfirm:!0,onCancel:this.modalCancelHandler,onConfirm:this.modalConfirmSearchNameHandler,confirmText:"Search",patient:this.context.selectedPatient}))))))),r.a.createElement(T.a,{eventKey:"SearchResult",title:"Search Results"},r.a.createElement(N.a,{className:"containerSearchUserResults"},r.a.createElement(g.a,null,r.a.createElement(U.a,{className:"searchCard"},r.a.createElement(U.a.Body,{className:"searchCardBody"},r.a.createElement(U.a.Title,null,"Your Search"),r.a.createElement(U.a.Text,null,"Field: ",this.state.patientSearchField),r.a.createElement(U.a.Text,null,"Query: ",this.state.patientSearchQuery)))),r.a.createElement(g.a,{className:"searchListRow"},this.state.searchPatients!==[]&&r.a.createElement(Et,{searchPatients:this.state.searchPatients,authUserId:this.context.userId,onCancel:this.modalCancelHandler,onViewDetail:this.showDetailHandler}))))))),r.a.createElement(S.a,{md:3,className:"MasterCol3"}))))}}]),t}(n.Component);Bt.contextType=y;var qt=Bt,Rt=function(e){return r.a.createElement("li",{key:e.appointmentId,className:"users__list-item"},r.a.createElement("div",null,r.a.createElement("h1",null,e.title),r.a.createElement("p",null,e.date)),r.a.createElement("div",null,r.a.createElement(h.a,{variant:"primary",onClick:e.onDetail.bind(void 0,e._id)},"Details")))},Vt=function(e){var t=e.appointments.map((function(t){var a=new Date(1e3*t.date.substr(0,10)).toISOString().slice(0,10);return r.a.createElement(Rt,{key:t._id,userId:t.authUserId,_id:t._id,title:t.title,date:a,onDetail:e.onViewDetail})}));return r.a.createElement("ul",{className:"user__list1"},t)},zt=function(e){return r.a.createElement("li",{key:e.userId,className:"users__list-item"},r.a.createElement("div",null,r.a.createElement("p",null,"Note: ",e.note)))},Mt=function(e){console.log("appointment notes list props",e.appointmentNote);var t=e.appointmentNote.map((function(t){return r.a.createElement(zt,{key:t,userId:e.authUserId,note:t})}));return r.a.createElement("ul",{className:"user__list1"},t)},Qt=(a(103),function(e){var t=Object(k.a)({},e.appointment),a=(e.authUserId,new Date(1e3*t.date.substr(0,10)).toISOString().slice(0,10)),n=t.notes,i=t.patient.consultant;return console.log("appointmentPatientConsultant:  ",i),console.log("AppointmentDetail.props.appointment:  ",Object(P.a)({},t),n),r.a.createElement("div",{className:"PatientDetailBox"},r.a.createElement(U.a,{className:"PatientDetailCard"},r.a.createElement(U.a.Body,null,r.a.createElement(U.a.Title,null,"Appointment Details"),r.a.createElement(U.a.Text,null,"ID: ",t._id),r.a.createElement(U.a.Text,null,"Date: ",a),r.a.createElement(U.a.Text,null,"Time: ",t.time),r.a.createElement(U.a.Text,null,"SeenTime: ",t.seenTime),r.a.createElement(U.a.Text,null,"CheckinTime: ",t.checkinTime),r.a.createElement(U.a.Text,null,"Title: ",t.title),r.a.createElement(U.a.Text,null,"Type: ",t.type),r.a.createElement(U.a.Text,null,"Patient Name: ",t.patient.name),r.a.createElement(U.a.Text,null,"Patient Phone: ",t.patient.phone),r.a.createElement(U.a.Text,null,"Patient Email: ",t.patient.email),r.a.createElement(U.a.Text,null,"Description: ",t.description),r.a.createElement(U.a.Text,null,"Location: ",t.location),r.a.createElement(U.a.Text,null,"In-Progress?: ",t.inProgress),!0===t.important&&r.a.createElement("p",null,"Appointment is In-Progress"),r.a.createElement(U.a.Text,null,"Attended?: ",t.attended),!0===t.attended&&r.a.createElement("p",null,"Patient Checked In"),r.a.createElement(U.a.Text,null,"Important?:"),!0===t.important&&r.a.createElement("p",null,"High Prioity Appointment"),r.a.createElement(U.a.Text,null,"Notes:"),r.a.createElement(Mt,{appointmentNote:n,authUserId:e.authUserId})),!0===e.canDelete&&r.a.createElement(h.a,{variant:"danger",onClick:e.onDelete},"Delete Appointment !!??")))}),Yt=function(e){return r.a.createElement("li",{key:e.appointmentId,className:"users__list-item"},r.a.createElement("div",null,r.a.createElement("h1",null," Title: ",e.title),r.a.createElement("p",null,"Type: ",e.type)),r.a.createElement("div",null,r.a.createElement("button",{className:"btn",onClick:e.onDetail.bind(void 0,e._id)},"View Details")))},Wt=function(e){var t=e.searchAppointments.map((function(t){return r.a.createElement(r.a.Fragment,null,r.a.createElement(Yt,{key:t._id,userId:e.authUserId,_id:t._id,title:t.title,type:t.type,onDetail:e.onViewDetail}))}));return r.a.createElement("ul",{className:"user__list1"},t)},Xt=function(e){return r.a.createElement("div",{className:"SearchFormContainer"},r.a.createElement(f.a,{onSubmit:e.onConfirm},r.a.createElement(f.a.Group,{controlId:"formBasicFieldSelect"},r.a.createElement(f.a.Label,null,"Field Options"),r.a.createElement(f.a.Control,{as:"select"},r.a.createElement("option",null,"select"),r.a.createElement("option",null,"title"),r.a.createElement("option",null,"type"),r.a.createElement("option",null,"date"),r.a.createElement("option",null,"checkinTime"),r.a.createElement("option",null,"seenTime"),r.a.createElement("option",null,"location"),r.a.createElement("option",null,"description"),r.a.createElement("option",null,"patient.name"),r.a.createElement("option",null,"inProgress"),r.a.createElement("option",null,"attended"),r.a.createElement("option",null,"important"))),r.a.createElement(f.a.Group,{controlId:"formBasicField"},r.a.createElement(f.a.Label,null,"Field"),r.a.createElement(f.a.Control,{type:"text",placeholder:"Field"})),r.a.createElement(f.a.Group,{controlId:"formBasicQuery"},r.a.createElement(f.a.Label,null,"Query"),r.a.createElement(f.a.Control,{type:"textarea",rows:"5",placeholder:"Query"})),e.canCancel&&r.a.createElement(C.a.Toggle,{as:h.a,variant:"danger",eventKey:"5",className:"btn",onClick:e.onCancel},"Cancel"),e.canConfirm&&r.a.createElement(h.a,{variant:"success",type:"submit"},"Search")))},Zt=function(e){return r.a.createElement("div",{className:"SearchFormContainer"},r.a.createElement(f.a,{onSubmit:e.onConfirm},r.a.createElement(f.a.Group,{controlId:"formBasicId"},r.a.createElement(f.a.Label,null,"Id"),r.a.createElement(f.a.Control,{type:"text",placeholder:"Id"})),e.canCancel&&r.a.createElement(C.a.Toggle,{as:h.a,variant:"danger",eventKey:"5",className:"btn",onClick:e.onCancel},"Cancel"),e.canConfirm&&r.a.createElement(h.a,{variant:"success",type:"submit"},"Search")))},$t=function(e){return r.a.createElement("div",{className:"SearchFormContainer"},r.a.createElement(f.a,{onSubmit:e.onConfirm},r.a.createElement(f.a.Group,{controlId:"formBasicPatientId"},r.a.createElement(f.a.Label,null,"Patient Id"),r.a.createElement(f.a.Control,{type:"text",placeholder:"Patient Id"})),e.canCancel&&r.a.createElement(C.a.Toggle,{as:h.a,variant:"danger",eventKey:"5",className:"btn",onClick:e.onCancel},"Cancel"),e.canConfirm&&r.a.createElement(h.a,{variant:"success",type:"submit"},"Search")))},ea=function(e){return r.a.createElement("div",{className:"SearchFormContainer"},r.a.createElement(f.a,{onSubmit:e.onConfirm},r.a.createElement(f.a.Group,{controlId:"formBasicDate"},r.a.createElement(f.a.Label,null,"Appointment Date"),r.a.createElement(f.a.Control,{type:"date",placeholder:"Appointment Date"})),e.canCancel&&r.a.createElement(C.a.Toggle,{as:h.a,variant:"danger",eventKey:"5",className:"btn",onClick:e.onCancel},"Cancel"),e.canConfirm&&r.a.createElement(h.a,{variant:"success",type:"submit"},"Search")))},ta=function(e){return r.a.createElement("div",{className:"SearchFormContainer"},r.a.createElement(f.a,{onSubmit:e.onConfirm},r.a.createElement(f.a.Group,{controlId:"formBasicStartDate"},r.a.createElement(f.a.Label,null,"Appointment Start Date"),r.a.createElement(f.a.Control,{type:"date",placeholder:"Appointment Date Range"})),r.a.createElement(f.a.Group,{controlId:"formBasicEndDate"},r.a.createElement(f.a.Label,null,"Appointment EndDate"),r.a.createElement(f.a.Control,{type:"date",placeholder:"Appointment Date Range"})),e.canCancel&&r.a.createElement(C.a.Toggle,{as:h.a,variant:"danger",eventKey:"5",className:"btn",onClick:e.onCancel},"Cancel"),e.canConfirm&&r.a.createElement(h.a,{variant:"success",type:"submit"},"Search")))},aa=(a(104),function(e){return console.log("CreateAppointmentForm:  ",y.token),r.a.createElement("div",{className:"CreateFormContainer"},r.a.createElement(f.a,{onSubmit:e.onConfirm},r.a.createElement(f.a.Row,null,r.a.createElement(E.a,{variant:"primary"},"Create an appointment for: ",e.selectedPatient.name)),r.a.createElement(f.a.Row,null,r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridTitle"},r.a.createElement(f.a.Label,null,"Title"),r.a.createElement(f.a.Control,{type:"text",placeholder:"Title"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridType"},r.a.createElement(f.a.Label,null,"Type"),r.a.createElement(f.a.Control,{type:"text",placeholder:"Type"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridLocation"},r.a.createElement(f.a.Label,null,"Location"),r.a.createElement(f.a.Control,{type:"text",placeholder:"Location"}))),r.a.createElement(f.a.Row,null,r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridDate"},r.a.createElement(f.a.Label,null,"Date"),r.a.createElement(f.a.Control,{type:"date",placeholder:"Date"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridTime"},r.a.createElement(f.a.Label,null,"Time"),r.a.createElement(f.a.Control,{type:"time",placeholder:"Time"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridCheckinTime"},r.a.createElement(f.a.Label,null,"CheckinTime"),r.a.createElement(f.a.Control,{type:"time",placeholder:"CheckinTime"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridSeenTime"},r.a.createElement(f.a.Label,null,"SeenTime"),r.a.createElement(f.a.Control,{type:"time",placeholder:"SeenTime"}))),r.a.createElement(f.a.Row,null,r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridDescription"},r.a.createElement(f.a.Label,null,"Description"),r.a.createElement(f.a.Control,{as:"textarea",rows:"2",placeholder:"Description"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridInProgress"},r.a.createElement(f.a.Label,null,"InProgress"),r.a.createElement(f.a.Control,{as:"select"},r.a.createElement("option",null,"false"),r.a.createElement("option",null,"true"))),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridAttended"},r.a.createElement(f.a.Label,null,"Attended"),r.a.createElement(f.a.Control,{as:"select"},r.a.createElement("option",null,"false"),r.a.createElement("option",null,"true"))),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridImportant"},r.a.createElement(f.a.Label,null,"Important"),r.a.createElement(f.a.Control,{as:"select"},r.a.createElement("option",null,"false"),r.a.createElement("option",null,"true")))),e.canCancel&&r.a.createElement(C.a.Toggle,{as:h.a,variant:"danger",eventKey:"4",className:"btn",onClick:e.onCancel},"Cancel"),e.canConfirm&&r.a.createElement(h.a,{variant:"success",type:"submit"},"Create New")))}),na=function(e){console.log("UpdateAppointmentForm.props:  ",Object(P.a)({},e));var t=Object(k.a)({},e.appointment);return console.log("UpdateAppointmentForm.props.appointment:  ",Object(P.a)({},t)),r.a.createElement("div",{className:"UpdateFormContainer"},r.a.createElement(f.a,{onSubmit:e.onConfirm},r.a.createElement(f.a.Row,null,r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridTitle"},r.a.createElement(f.a.Label,null,"Title"),r.a.createElement(f.a.Control,{type:"text",placeholder:t.title})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridType"},r.a.createElement(f.a.Label,null,"Type"),r.a.createElement(f.a.Control,{type:"text",placeholder:t.type})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridLocation"},r.a.createElement(f.a.Label,null,"Location"),r.a.createElement(f.a.Control,{type:"text",placeholder:t.location}))),r.a.createElement(f.a.Row,null,r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridDate"},r.a.createElement(f.a.Label,null,"Date"),r.a.createElement(f.a.Control,{type:"date",placeholder:t.date})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridTime"},r.a.createElement(f.a.Label,null,"Time"),r.a.createElement(f.a.Control,{type:"time",placeholder:t.time})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridCheckinTime"},r.a.createElement(f.a.Label,null,"CheckinTime"),r.a.createElement(f.a.Control,{type:"time",placeholder:t.checkinTime})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridSeenTime"},r.a.createElement(f.a.Label,null,"SeenTime"),r.a.createElement(f.a.Control,{type:"time",placeholder:t.seenTime}))),r.a.createElement(f.a.Row,null,r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridDescription"},r.a.createElement(f.a.Label,null,"Description"),r.a.createElement(f.a.Control,{as:"textarea",rows:"2",placeholder:t.description})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridInProgress"},r.a.createElement(f.a.Label,null,"InProgress"),r.a.createElement(f.a.Control,{as:"select"},r.a.createElement("option",null,"false"),r.a.createElement("option",null,"true"))),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridAttended"},r.a.createElement(f.a.Label,null,"Attended"),r.a.createElement(f.a.Control,{as:"select"},r.a.createElement("option",null,"false"),r.a.createElement("option",null,"true"))),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridImportant"},r.a.createElement(f.a.Label,null,"Important"),r.a.createElement(f.a.Control,{as:"select"},r.a.createElement("option",null,"false"),r.a.createElement("option",null,"true")))),e.canCancel&&r.a.createElement(C.a.Toggle,{as:h.a,variant:"danger",eventKey:"2",className:"btn",onClick:e.onCancel},"Cancel"),e.canConfirm&&r.a.createElement(C.a.Toggle,{as:h.a,variant:"success",eventKey:"2",className:"btn",type:"submit"},"Submit")))},ra=function(e){console.log("UpdateAppointmentFieldForm.props:  ",Object(P.a)({},e));var t=Object(k.a)({},e.appointment);return console.log("UpdateAppointmentFieldForm.props.user:  ",Object(P.a)({},t)),r.a.createElement("div",{className:"UpdateFormContainer"},r.a.createElement(f.a,{onSubmit:e.onConfirm},r.a.createElement(f.a.Row,null,r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridFieldSelect"},r.a.createElement(f.a.Label,null,"Field Options"),r.a.createElement(f.a.Control,{as:"select"},r.a.createElement("option",null,"select"),r.a.createElement("option",null,"title"),r.a.createElement("option",null,"type"),r.a.createElement("option",null,"date"),r.a.createElement("option",null,"checkinTime"),r.a.createElement("option",null,"seenTime"),r.a.createElement("option",null,"location"),r.a.createElement("option",null,"description"),r.a.createElement("option",null,"patient.name"),r.a.createElement("option",null,"inProgress"),r.a.createElement("option",null,"attended"),r.a.createElement("option",null,"important"))),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridField"},r.a.createElement(f.a.Label,null,"Field"),r.a.createElement(f.a.Control,{type:"text",placeholder:"Field"})),r.a.createElement(f.a.Group,{as:S.a,controlId:"formGridQuery"},r.a.createElement(f.a.Label,null,"Query"),r.a.createElement(f.a.Label,null,"Time Format 24Hr ex 16:15"),r.a.createElement(f.a.Label,null,"Date Format YYYY-MM-DD"),r.a.createElement(f.a.Control,{type:"text",placeholder:"Query"}))),e.canCancel&&r.a.createElement(C.a.Toggle,{as:h.a,variant:"danger",eventKey:"2",className:"btn",onClick:e.onCancel},"Cancel"),e.canCancelProfile&&r.a.createElement(C.a.Toggle,{as:h.a,variant:"danger",eventKey:"5",className:"btn",onClick:e.onCancel},"Cancel"),e.canConfirm&&r.a.createElement(h.a,{variant:"success",type:"submit"},"Submit")))},ia=function(e){function t(){var e,a;Object(l.a)(this,t);for(var n=arguments.length,r=new Array(n),i=0;i<n;i++)r[i]=arguments[i];return(a=Object(s.a)(this,(e=Object(m.a)(t)).call.apply(e,[this].concat(r)))).state={creating:!1,updating:!1,deleting:!1,searching:!1,searchAppointments:[],appointments:[],isLoading:!1,selectedAppointment:null,appointmentUpdateField:null,appointmentSearchField:null,appointmentSearchQuery:null,canDelete:null,userAlert:null},a.isActive=!0,a.startCreateAppointmentHandler=function(){a.setState({creating:!0}),console.log("CreateAppointmentForm...",a.context.selectedPatient)},a.startUpdateAppointmentHandler=function(){a.setState({updating:!0}),console.log("UpdateAppointmentForm...")},a.startSearchAppointmentHandler=function(){a.setState({searching:!0}),console.log("SearchAppointmentForm...")},a.modalConfirmHandler=function(e){console.log("CreateAppointmentFormData:  ",e.target.formGridTitle.value),a.setState({creating:!1});var t=a.context.userId,n=a.context.selectedPatient._id;if(console.log("\n        userId: ".concat(t,"\n        patientId: ").concat(n,"\n      ")),void 0===n)return console.log("\n          select a Patient before creating an Appointment!!\n          "),void a.setState({userAlert:"select a Patient before creating an Appointment!!..."});var r=e.target.formGridTitle.value,i=e.target.formGridType.value,o=e.target.formGridDate.value,l=e.target.formGridTime.value,c=e.target.formGridSeenTime.value,s=e.target.formGridCheckinTime.value,m=e.target.formGridLocation.value,d=e.target.formGridDescription.value,p=e.target.formGridInProgress.value,u=e.target.formGridAttended.value,h=e.target.formGridImportant.value;if(0===r.trim().length||0===i.trim().length||0===o.trim().length||0===l.trim().length||0===m.trim().length||0===d.trim().length||0===p.trim().length||0===u.trim().length||0===h.trim().length)return console.log("blank fields detected!!!...Please try again..."),void a.setState({userAlert:"blank fields detected!!!...Please try again..."});console.log("\n        creating appointment...\n        title: ".concat(r,",\n        type: ").concat(i,",\n        date: ").concat(o,",\n        time: ").concat(l,",\n        seenTime: ").concat(c,",\n        checkinTime: ").concat(s,",\n        location: ").concat(m,",\n        description: ").concat(d,",\n        inProgress: ").concat(p,",\n        attended: ").concat(u,",\n        important: ").concat(h,",\n      ")),a.setState({userAlert:"creating appointment..."});var f={query:'\n          mutation {createAppointment(userId:"'.concat(t,'",patientId:"').concat(n,'",appointmentInput:{title:"').concat(r,'",type:"').concat(i,'",date:"').concat(o,'",time:"').concat(l,'",seenTime:"').concat(c,'",checkinTime:"').concat(s,'",location:"').concat(m,'",description:"').concat(d,'",inProgress:').concat(p,",attended:").concat(u,",important:").concat(h,",})\n          {_id,title,type,date,time,seenTime,checkinTime,location,description,patient{_id,name,appointments{_id,date,title}},inProgress,attended,important}}\n        ")};a.context.token;fetch("http://localhost:10000/graphql",{method:"POST",body:JSON.stringify(f),headers:{"Content-Type":"application/json",Authorization:"Bearer "+a.context.token}}).then((function(e){if(200!==e.status&&201!==e.status)throw new Error("Failed!");return e.json()})).then((function(e){console.log("response data... "+JSON.stringify(e.data.createAppointment));var t=JSON.stringify(e.data).slice(2,15);a.setState({userAlert:t}),a.setState((function(t){var a=Object(A.a)(t.appointments);return a.push(e.data.createAppointment),{appointments:a}})),a.context.appointments=a.state.appointments})).catch((function(e){console.log(e),a.setState({userAlert:e})}))},a.modalCancelHandler=function(){a.setState({creating:!1,updating:!1,searching:!1,selectedAppointment:null})},a.modalConfirmUpdateHandler=function(e){"admin"!==a.context.user.role&&(console.log("Not the Admin! No edit permission!!"),a.setState({userAlert:"Not the Admin! No edit permission!!"}));var t=a.context.userId,n=a.context.selectedAppointment._id;a.context.selectedPatientId;console.log("\n        userId: ".concat(t,"\n        appointmentd: ").concat(n,",\n      ")),console.log("UpdateAppointmentFormData:  ",e.target.formGridTitle.value),a.setState({updating:!1});var r=e.target.formGridTitle.value,i=e.target.formGridType.value,o=e.target.formGridDate.value,l=e.target.formGridTime.value,c=e.target.formGridSeenTime.value,s=e.target.formGridCheckinTime.value,m=e.target.formGridLocation.value,d=e.target.formGridDescription.value,p=e.target.formGridInProgress.value,u=e.target.formGridAttended.value,h=e.target.formGridImportant.value;0===r.trim().length&&(console.log("blank fields detected!!!...filling w/ previous data..."),r=a.context.selectedAppointment.title),0===i.trim().length&&(console.log("blank fields detected!!!...filling w/ previous data..."),i=a.context.selectedAppointment.type),0===o.trim().length&&(console.log("blank fields detected!!!...filling w/ previous data..."),o=a.context.selectedAppointment.date),0===l.trim().length&&(console.log("blank fields detected!!!...filling w/ previous data..."),l=a.context.selectedAppointment.time),0===c.trim().length&&(console.log("blank fields detected!!!...filling w/ previous data..."),c=a.context.selectedAppointment.seenTime),0===s.trim().length&&(console.log("blank fields detected!!!...filling w/ previous data..."),s=a.context.selectedAppointment.checkinTime),0===m.trim().length&&(console.log("blank fields detected!!!...filling w/ previous data..."),m=a.context.selectedAppointment.location),0===d.trim().length&&(console.log("blank fields detected!!!...filling w/ previous data..."),d=a.context.selectedAppointment.description),0===p.trim().length&&(console.log("blank fields detected!!!...filling w/ previous data..."),p=a.context.selectedAppointment.inProgress),0===u.trim().length&&(console.log("blank fields detected!!!...filling w/ previous data..."),u=a.context.selectedAppointment.attended),0===h.trim().length&&(console.log("blank fields detected!!!...filling w/ previous data..."),h=a.context.selectedAppointment.important);console.log("\n        updating appointment...\n        title: ".concat(r,",\n        type: ").concat(i,",\n        date: ").concat(o,",\n        time: ").concat(l,",\n        seenTime: ").concat(c,",\n        checkinTime: ").concat(s,",\n        location: ").concat(m,",\n        description: ").concat(d,",\n        inProgress: ").concat(p,",\n        attended: ").concat(u,",\n        important: ").concat(h,",\n      ")),a.setState({userAlert:"updating appointment..."});var f={query:'\n      mutation {updateAppointment(userId:"'.concat(t,'",appointmentId:"').concat(n,'",appointmentInput:{title:"').concat(r,'",type:"').concat(i,'",date:"').concat(o,'",time:"').concat(l,'",seenTime:"').concat(c,'",checkinTime:"').concat(s,'",location:"').concat(m,'",description:"').concat(d,'",inProgress:').concat(p,",attended:").concat(u,",important:").concat(h,",})\n      {_id,title,type,date,time,seenTime,checkinTime,location,description,patient{_id,name,appointments{_id,date,title}},inProgress,attended,important,notes}}\n        ")},g=a.context.token;fetch("http://localhost:10000/graphql",{method:"POST",body:JSON.stringify(f),headers:{"Content-Type":"application/json",Authorization:"Bearer "+g}}).then((function(e){if(200!==e.status&&201!==e.status)throw new Error("Failed!");return e.json()})).then((function(e){console.log("response data... "+JSON.stringify(e));var t=e.data.updateAppointment._id,n=a.state.appointments.find((function(e){return e._id===t})),r=a.state.appointments.indexOf(n),i=a.state.appointments.splice(r,1);console.log("updatedAppointment:  ",JSON.stringify(n),"  updatedPatientPos:  ",r,"  slicedArray:  ",i),a.state.appointments.push(e.data.updateAppointment);var o=JSON.stringify(e.data).slice(2,25);a.setState({userAlert:o,selectedAppointment:e.data.updateAppointment}),a.fetchAppointments()})).catch((function(e){console.log(e),a.setState({userAlert:e})}))},a.updateAppointmentPatientHandler=function(e){var t=a.context.token,n=a.context.userId,r=a.context.selectedAppointment._id,i=a.context.selectedPatient._id;if("admin"!==a.context.user.role)return console.log("No edit permission!!"),void a.setState({userAlert:"No edit permission!!"});if(void 0===i)return console.log("\n        select a Patient before creating an Appointment!!\n        "),void a.setState({userAlert:"select a Patient before creating an Appointment!!..."});a.setState({updating:!1,patientUpdateField:null}),console.log("\n      updating appointment patient...\n      userId: ".concat(n,",\n      appointmentId: ").concat(r,",\n      patientId: ").concat(i,",\n      ")),a.setState({userAlert:"updating appointment patient..."});var o={query:'\n        mutation {updateAppointmentPatient(userId:"'.concat(n,'",appointmentId:"').concat(r,'",patientId:"').concat(i,'")\n        {_id,title,type,date,time,seenTime,checkinTime,location,description,patient{_id,name,appointments{_id,date,title},consultant{reference{_id,name,role}}},inProgress,attended,important}}\n        ')};fetch("http://localhost:10000/graphql",{method:"POST",body:JSON.stringify(o),headers:{"Content-Type":"application/json",Authorization:"Bearer "+t}}).then((function(e){if(200!==e.status&&201!==e.status)throw new Error("Failed!");return e.json()})).then((function(e){console.log("response data... "+JSON.stringify(e));var t=e.data.updateAppointmentPatient._id,n=a.state.appointments.find((function(e){return e._id===t})),r=a.state.appointments.indexOf(n),i=a.state.appointments.splice(r,1);console.log("updatedAppointment:  ",JSON.stringify(n),"  updatedPatientPos:  ",r,"  slicedArray:  ",i),a.state.appointments.push(e.data.updateAppointmentPatient);var o=JSON.stringify(e.data).slice(2,25);a.setState({userAlert:o,selectedAppointment:e.data.updateAppointmentPatient}),a.fetchAppointments()})).catch((function(e){console.log(e),a.setState({userAlert:e})}))},a.modalConfirmUpdateFieldHandler=function(e){var t=a.context.token,n=a.context.userId,r=a.context.selectedAppointment._id;"admin"!==a.context.user.role&&(console.log("Not the creator or Admin! No edit permission!!"),r=null),console.log("UpdateAppointmentFieldFormData:  ",e.target.formGridField.value),a.setState({updating:!1});var i=null,o=e.target.formGridQuery.value;i="select"===e.target.formGridFieldSelect.value?e.target.formGridField.value:e.target.formGridFieldSelect.value;var l={query:'\n        mutation {updateAppointmentField(userId:"'.concat(n,'",appointmentId:"').concat(r,'",field:"').concat(i,'",query:"').concat(o,'")\n        {_id,title,type,date,time,seenTime,checkinTime,location,description,patient{_id,name,appointments{_id,date,title}},inProgress,attended,important,notes}}\n        ')};fetch("http://localhost:10000/graphql",{method:"POST",body:JSON.stringify(l),headers:{"Content-Type":"application/json",Authorization:"Bearer "+t}}).then((function(e){if(200!==e.status&&201!==e.status)throw new Error("Failed!");return e.json()})).then((function(e){console.log("response data... "+JSON.stringify(e.data.updateAppointmentField));var t=e.data.updateAppointmentField._id,n=a.state.appointments.find((function(e){return e._id===t})),r=a.state.appointments.indexOf(n),i=a.state.appointments.splice(r,1);console.log("updatedAppointment:  ",JSON.stringify(n),"  updatedAppointmentPos:  ",r,"  slicedArray:  ",i),a.state.appointments.push(e.data.updateAppointmentField),a.context.appointments=a.state.appointments;var o=JSON.stringify(e.data).slice(2,25);a.setState({userAlert:o,selectedAppointment:e.data.updateAppointmentField}),a.fetchAppointments()})).catch((function(e){console.log(e),a.setState({userAlert:e})}))},a.modalConfirmSearchHandler=function(e){console.log("SearchAppointmentForm:  ");var t=a.context.userId;console.log("SearchAppointmentFormData:  ",e.target.formBasicField.value),a.setState({searching:!1});var n=null,r=e.target.formBasicQuery.value;if(0===(n="select"===e.target.formBasicFieldSelect.value?e.target.formBasicField.value:e.target.formBasicFieldSelect.value).trim().length||0===r.trim().length)return console.log("blank fields detected!!!...Please try again..."),void a.setState({userAlert:"blank fields detected!!!...Please try again..."});var i={field:n,query:r};console.log("Searching for Appointment:  ",JSON.stringify(i));var o={query:'\n          query {getAppointmentField(userId:"'.concat(t,'", field:"').concat(n,'", query:"').concat(r,'")\n          {_id,title,type,date,time,seenTime,checkinTime,location,description,patient{_id,name,appointments{_id,date,title},consultant{reference{_id,name,role}}},inProgress,attended,important}}\n        ')},l=a.context.token;fetch("http://localhost:10000/graphql",{method:"POST",body:JSON.stringify(o),headers:{"Content-Type":"application/json",Authorization:"Bearer "+l}}).then((function(e){if(200!==e.status&&201!==e.status)throw new Error("Failed!");return e.json()})).then((function(e){console.log("response data... "+JSON.stringify(e));var t=JSON.stringify(e.data).slice(2,15);a.setState({userAlert:t});var n=e.data.getAppointmentField;a.setState({searchAppointments:n}),console.log("state.searchAppointments:  ",a.state.searchAppointments)})).catch((function(e){console.log(e),a.setState({userAlert:e})}))},a.modalConfirmSearchIdHandler=function(e){console.log("\n      SearchAppointmentIdFormData\n      ");var t=a.context.userId;a.setState({searching:!1});var n=e.target.formBasicId.value,r={query:'\n          query {getAppointmentId(userId:"'.concat(t,'", appointmentId:"').concat(n,'")\n          {_id,title,type,date,time,patient{_id,name},location,description,inProgress,important,attended}}\n        ')},i=a.context.token;fetch("http://localhost:10000/graphql",{method:"POST",body:JSON.stringify(r),headers:{"Content-Type":"application/json",Authorization:"Bearer "+i}}).then((function(e){if(200!==e.status&&201!==e.status)throw new Error("Failed!");return e.json()})).then((function(e){console.log("response data... "+JSON.stringify(e));var t=JSON.stringify(e.data).slice(2,15);a.setState({userAlert:t});var n=e.data.getAppointmentId;a.setState({searchAppointments:[n]}),console.log("state.searchAppointments:  ",a.state.searchAppointments)})).catch((function(e){console.log(e),a.setState({userAlert:e})}))},a.modalConfirmSearchPatientHandler=function(e){console.log("\n      SearchAppointmentPatientFormData\n      ");var t=a.context.userId;a.setState({searching:!1});var n=e.target.formBasicPatientId.value,r={query:'\n          query {getAppointmentPatient(userId:"'.concat(t,'", patientId:"').concat(n,'")\n          {_id,title,type,date,time,patient{_id,name},location,description,inProgress,important,attended}}\n        ')},i=a.context.token;fetch("http://localhost:10000/graphql",{method:"POST",body:JSON.stringify(r),headers:{"Content-Type":"application/json",Authorization:"Bearer "+i}}).then((function(e){if(200!==e.status&&201!==e.status)throw new Error("Failed!");return e.json()})).then((function(e){console.log("response data... "+JSON.stringify(e));var t=JSON.stringify(e.data).slice(2,15);a.setState({userAlert:t});var n=e.data.getAppointmentPatient;a.setState({searchAppointments:n}),console.log("state.searchApointments:  ",a.state.searchApointments)})).catch((function(e){console.log(e),a.setState({userAlert:e})}))},a.modalConfirmSearchDateHandler=function(e){console.log("\n      SearchAppointmentDateFormData\n      ");var t=a.context.userId;a.setState({searching:!1});var n=e.target.formBasicDate.value,r={query:'\n          query {getAppointmentDate(userId:"'.concat(t,'",date:"').concat(n,'")\n          {_id,title,type,date,time,patient{_id,name},location,description,inProgress,important,attended}}\n        ')},i=a.context.token;fetch("http://localhost:10000/graphql",{method:"POST",body:JSON.stringify(r),headers:{"Content-Type":"application/json",Authorization:"Bearer "+i}}).then((function(e){if(200!==e.status&&201!==e.status)throw new Error("Failed!");return e.json()})).then((function(e){console.log("response data... "+JSON.stringify(e));var t=JSON.stringify(e.data).slice(2,15);a.setState({userAlert:t});var n=e.data.getAppointmentDate;a.setState({searchAppointments:n}),console.log("state.searchAppointments:  ",a.state.searchAppointments)})).catch((function(e){console.log(e),a.setState({userAlert:e})}))},a.modalConfirmSearchDateRangeHandler=function(e){console.log("\n      SearchAppointmentDateRangeFormData\n      ");var t=a.context.userId;a.setState({searching:!1});var n=e.target.formBasicStartDate.value,r=e.target.formBasicEndDate.value,i={query:'\n          query {getAppointmentDateRange(userId:"'.concat(t,'",startDate:"').concat(n,'",endDate:"').concat(r,'")\n          {_id,title,type,date,time,patient{_id,name},location,description,inProgress,important,attended}}\n        ')},o=a.context.token;fetch("http://localhost:10000/graphql",{method:"POST",body:JSON.stringify(i),headers:{"Content-Type":"application/json",Authorization:"Bearer "+o}}).then((function(e){if(200!==e.status&&201!==e.status)throw new Error("Failed!");return e.json()})).then((function(e){console.log("response data... "+JSON.stringify(e));var t=JSON.stringify(e.data).slice(2,15);a.setState({userAlert:t});var n=e.data.getApointmentId;a.setState({searchApointments:n}),console.log("state.searchApointments:  ",a.state.searchApointments)})).catch((function(e){console.log(e),a.setState({userAlert:e})}))},a.modalCancelHandler=function(){a.setState({creating:!1,updating:!1,searching:!1,selectedAppointment:null})},a.fetchAppointmentsAsc=function(){console.log("'fetch appointments function' context object... "+JSON.stringify(a.context));var e=a.context.userId,t={query:'\n            query {appointmentsDateAsc(userId:"'.concat(e,'")\n            {_id,title,type,date,time,seenTime,checkinTime,location,description,patient{_id,name,consultant{reference{_id,name,role}}},inProgress,attended,important,notes}}\n        ')};fetch("http://localhost:10000/graphql",{method:"POST",body:JSON.stringify(t),headers:{"Content-Type":"application/json",Authorization:"Bearer "+a.context.token}}).then((function(e){if(200!==e.status&&201!==e.status)throw new Error("Failed!");return e.json()})).then((function(e){var t=e.data.appointmentsDateAsc;console.log(t);var n=JSON.stringify(e.data).slice(2,15);a.setState({userAlert:n}),a.context.appointments=t,a.setState({appointments:t})})).catch((function(e){console.log(e),a.setState({userAlert:e})}))},a.fetchAppointmentsDesc=function(){console.log("'fetch appointments function' context object... "+JSON.stringify(a.context));var e=a.context.userId,t={query:'\n            query {appointmentsDateDesc(userId:"'.concat(e,'")\n            {_id,title,type,date,time,seenTime,checkinTime,location,description,patient{_id,name,consultant{reference{_id,name,role}}},inProgress,attended,important,notes}}\n        ')};fetch("http://localhost:10000/graphql",{method:"POST",body:JSON.stringify(t),headers:{"Content-Type":"application/json",Authorization:"Bearer "+a.context.token}}).then((function(e){if(200!==e.status&&201!==e.status)throw new Error("Failed!");return e.json()})).then((function(e){var t=e.data.appointmentsDateDesc;console.log(t);var n=JSON.stringify(e.data).slice(2,15);a.setState({userAlert:n}),a.context.appointments=t,a.setState({appointments:t})})).catch((function(e){console.log(e),a.setState({userAlert:e})}))},a.modalDeleteHandler=function(){console.log("deleting appointment...selectedAppointment:  ",a.context.selectedAppointment);var e=a.context.userId,t=a.context.selectedAppointment._id;"admin"!==a.context.user.role&&(console.log("Not the Admin! No edit permission!!"),a.setState({userAlert:"Not the Admin! No edit permission!!"})),a.setState({deleting:!0});var n={query:'\n          mutation {deleteAppointment(userId:"'.concat(e,'",appointmentId:"').concat(t,'")\n          {_id,title,type,date,time,seenTime,checkinTime,location,description,patient{_id,name,appointments{_id,date,title}},inProgress,attended,important,notes}}\n        ')};fetch("http://localhost:10000/graphql",{method:"POST",body:JSON.stringify(n),headers:{"Content-Type":"application/json",Authorization:"Bearer "+a.context.token}}).then((function(e){if(200!==e.status&&201!==e.status)throw new Error("Failed!");return e.json()})).then((function(e){console.log("resData:  ",e);var t=e.data.deleteAppointment;console.log(t);var n=JSON.stringify(e.data).slice(2,15);a.setState({userAlert:n});var r=t._id;t=a.state.appointments.find((function(e){return e._id===r}));var i=a.state.appointments.indexOf(t),o=a.state.appointments.splice(i,1);console.log("deletedAppointment:  ",JSON.stringify(t),"  deletedUserPos:  ",i,"  slicedArray:  ",o),a.setState({deleting:!1}),a.fetchAppointments()})).catch((function(e){console.log(e),a.setState({userAlert:e}),a.isActive&&a.setState({deleting:!1})}))},a.showDetailHandler=function(e){a.setState((function(t){var n=t.appointments.find((function(t){return t._id===e}));return a.setState({selectedAppointment:n}),a.context.selectedAppointment=n,console.log("selectedAppointment:  ",n),{selecteAppointment:n}}))},a}return Object(d.a)(t,e),Object(c.a)(t,[{key:"componentDidMount",value:function(){this.fetchAppointments(),this.fetchAppointmentToday(),this.fetchAppointmentInProgress(),"admin579"===this.context.user.name&&this.setState({canDelete:!0})}},{key:"fetchAppointments",value:function(){var e=this;console.log("'fetch appointments function' context object... "+JSON.stringify(this.context));var t=this.context.userId;this.setState({isLoading:!0});var a={query:'\n            query {appointments(userId:"'.concat(t,'")\n            {_id,title,type,date,time,seenTime,checkinTime,location,description,patient{_id,name,consultant{reference{_id,name,role}}},inProgress,attended,important,notes}}\n        ')};fetch("http://localhost:10000/graphql",{method:"POST",body:JSON.stringify(a),headers:{"Content-Type":"application/json",Authorization:"Bearer "+this.context.token}}).then((function(e){if(200!==e.status&&201!==e.status)throw new Error("Failed!");return e.json()})).then((function(t){var a=t.data.appointments;console.log(a);var n=JSON.stringify(t.data).slice(2,15);e.setState({userAlert:n}),e.context.appointments=e.state.appointments,e.isActive&&e.setState({appointments:a,isLoading:!1})})).catch((function(t){console.log(t),e.setState({userAlert:t}),e.isActive&&e.setState({isLoading:!1})}))}},{key:"updateAppointmentSpecial",value:function(e){console.log("special field to update:  ",e.target.value);var t=e.target.value;this.setState({appointmentUpdateField:t})}},{key:"fetchAppointmentToday",value:function(){var e=this;console.log("fetching todays appts function:  ");var t=this.context.token,a=this.context.userId,n={query:'\n          query {getAppointmentToday(userId:"'.concat(a,'")\n          {_id,title,type,date,time,patient{_id,name},location,description,inProgress,important,attended}}\n        ')};fetch("http://localhost:10000/graphql",{method:"POST",body:JSON.stringify(n),headers:{"Content-Type":"application/json",Authorization:"Bearer "+t}}).then((function(e){if(200!==e.status&&201!==e.status)throw new Error("Failed!");return e.json()})).then((function(t){e.context.appointmentsToday=t.data.getAppointmentToday,console.log("context today's appts:  ",JSON.stringify(e.context.appointmentsToday));var a=JSON.stringify(t.data).slice(2,15);e.setState({userAlert:a})})).catch((function(t){console.log(t),e.setState({userAlert:t})}))}},{key:"fetchAppointmentInProgress",value:function(){var e=this;console.log("fetching inProgress appts function:  ");var t=this.context.token,a=this.context.userId,n={query:'\n          query {getAppointmentField(userId:"'.concat(a,'",field:"inProgress",query:"true"){_id,title,type,date,time,patient{_id,name},location,description,inProgress,important,attended}}\n        ')};fetch("http://localhost:10000/graphql",{method:"POST",body:JSON.stringify(n),headers:{"Content-Type":"application/json",Authorization:"Bearer "+t}}).then((function(e){if(200!==e.status&&201!==e.status)throw new Error("Failed!");return e.json()})).then((function(t){e.context.appointmentsInProgress=t.data.getAppointmentField,console.log("context in progress appts:  ",JSON.stringify(e.context.appointmentsInProgress));var a=JSON.stringify(t.data).slice(2,15);e.setState({userAlert:a})})).catch((function(t){console.log(t),e.setState({userAlert:t})}))}},{key:"componentWillUnmount",value:function(){this.isActive=!1}},{key:"render",value:function(){return r.a.createElement(r.a.Fragment,null,r.a.createElement(C.a,null,r.a.createElement(g.a,null,r.a.createElement(S.a,{md:3,className:"MasterCol1"},r.a.createElement(v,{authUserId:this.context.userId,alert:this.state.userAlert}),r.a.createElement(X,null)),r.a.createElement(S.a,{md:9,className:"MasterCol2"},r.a.createElement(N.a,{className:"containerCombinedDetail"},r.a.createElement(O.a,{defaultActiveKey:"appointmentDetail",id:"uncontrolled-tab-example"},r.a.createElement(T.a,{eventKey:"Edit",title:"Edit:",disabled:!0}),r.a.createElement(T.a,{eventKey:"appointmentDetail",title:"Details"},null===this.state.selectedAppointment&&r.a.createElement(h.a,{variant:"outline-warning",size:"lg"},"Select an Appointment from the Master List below"),!1===this.state.isLoading&&null!==this.state.selectedAppointment&&r.a.createElement(Qt,{authUserId:this.context.userId,appointment:this.state.selectedAppointment,onEdit:this.startUpdateAppointmentHandler,canDelete:this.state.canDelete,onDelete:this.modalDeleteHandler})),r.a.createElement(T.a,{eventKey:"appointmentCreate",title:"New"},r.a.createElement(h.a,{variant:"outline-primary",onClick:this.startCreateAppointmentHandler},"Create"),this.state.creating&&null!==this.context.selectedPatient._id&&r.a.createElement(aa,{canCancel:!0,canConfirm:!0,onCancel:this.modalCancelHandler,onConfirm:this.modalConfirmHandler,onSubmit:this.modalConfirmHandler,confirmText:"Confirm",selectedPatient:this.context.selectedPatient})),r.a.createElement(T.a,{eventKey:"appointmentEditBasic",title:"Basic"},null===this.state.selectedAppointment&&r.a.createElement(h.a,{variant:"outline-warning",size:"lg"},"Select an Appointment from the Master List below"),null!==this.state.selectedAppointment&&r.a.createElement(h.a,{variant:"outline-primary",onClick:this.startUpdateAppointmentHandler},"Edit Basic"),this.state.updating&&null!==this.state.selectedAppointment&&r.a.createElement(na,{authUserId:this.context.userId,canCancel:!0,canConfirm:!0,onCancel:this.modalCancelHandler,onConfirm:this.modalConfirmUpdateHandler,confirmText:"Confirm",appointment:this.state.selectedAppointment})),r.a.createElement(T.a,{eventKey:"appointmentEditField",title:"Single Field"},null===this.state.selectedAppointment&&r.a.createElement(h.a,{variant:"outline-warning",size:"lg"},"Select a Patient from the Master List below"),null!==this.state.selectedAppointment&&r.a.createElement(h.a,{variant:"outline-primary",onClick:this.startUpdateAppointmentHandler},"Edit Field"),this.state.updating&&null!==this.state.selectedAppointment&&r.a.createElement(ra,{authUserId:this.context.userId,canCancel:!0,canConfirm:!0,onCancel:this.modalCancelHandler,onConfirm:this.modalConfirmUpdateFieldHandler,confirmText:"Confirm",appointment:this.state.selectedAppointment})),r.a.createElement(T.a,{eventKey:"appointmentEditPatient",title:"Patient"},null===this.state.selectedAppointment&&r.a.createElement(h.a,{variant:"outline-warning",size:"lg"},"Select an Appointment from the Master List below"),null!==this.state.selectedAppointment&&r.a.createElement(h.a,{variant:"outline-primary",value:"patient",onClick:this.updateAppointmentSpecial.bind(this)},"Change Patient:"),null!==this.state.selectedAppointment&&null!==this.context.selectedPatient&&r.a.createElement(g.a,null,r.a.createElement(S.a,{md:8,className:"updateUserColAdd"},r.a.createElement("p",null,"Add Patient: ",this.context.selectedPatient.name),r.a.createElement("p",null," To Appointment: ",this.state.selectedAppointment.title," ??"),r.a.createElement(h.a,{variant:"success",onClick:this.updateAppointmentPatientHandler},"Yes")))),r.a.createElement(T.a,{eventKey:"MasterList",title:"Master List"},r.a.createElement(N.a,{className:"containerUserMasterList"},r.a.createElement(g.a,{className:"searchListRow"},r.a.createElement(h.a,{variant:"primary",size:"sm",onClick:this.fetchAppointmentsAsc},"Sort Asc"),r.a.createElement(h.a,{variant:"info",size:"sm",onClick:this.fetchAppointmentsDesc},"Sort Desc"),this.state.isLoading?r.a.createElement(R,null):r.a.createElement(Vt,{appointments:this.state.appointments,authUserId:this.context.userId,onViewDetail:this.showDetailHandler})))),r.a.createElement(T.a,{eventKey:"SearchInput",title:"Search"},r.a.createElement(N.a,{className:"containerSearchUserInput"},r.a.createElement(g.a,{className:"searchUserRowAdd"},r.a.createElement(h.a,{variant:"primary",onClick:this.startSearchAppointmentHandler},"Search")),r.a.createElement(g.a,{className:"searchUserRowForm"},r.a.createElement(S.a,{md:10,className:"searchUserColForm"},r.a.createElement(O.a,{defaultActiveKey:"Field",id:"uncontrolled-tab-example"},r.a.createElement(T.a,{eventKey:"Search",title:"Search:",disabled:!0}),r.a.createElement(T.a,{eventKey:"Field",title:"Field:"},!0===this.state.searching&&r.a.createElement(Xt,{authUserId:this.context.userId,canCancel:!0,canConfirm:!0,onCancel:this.modalCancelHandler,onConfirm:this.modalConfirmSearchHandler,confirmText:"Search",appointment:this.context.selectedAppointment})),r.a.createElement(T.a,{eventKey:"Id",title:"Id:"},"Search by ID",!0===this.state.searching&&r.a.createElement(Zt,{authUserId:this.context.userId,canCancel:!0,canConfirm:!0,onCancel:this.modalCancelHandler,onConfirm:this.modalConfirmSearchIdHandler,confirmText:"Search",appointment:this.context.selectedAppointment})),r.a.createElement(T.a,{eventKey:"Patient",title:"Patient:"},"Search by Patient",!0===this.state.searching&&r.a.createElement($t,{authUserId:this.context.userId,canCancel:!0,canConfirm:!0,onCancel:this.modalCancelHandler,onConfirm:this.modalConfirmSearchPatientHandler,confirmText:"Search",appointment:this.context.selectedAppointment})),r.a.createElement(T.a,{eventKey:"Date",title:"Date:"},"Search by Date",!0===this.state.searching&&r.a.createElement(ea,{authUserId:this.context.userId,canCancel:!0,canConfirm:!0,onCancel:this.modalCancelHandler,onConfirm:this.modalConfirmSearchDateHandler,confirmText:"Search",appointment:this.context.selectedAppointment})),r.a.createElement(T.a,{eventKey:"Date Range",title:"Date Range:"},"Search by Date Range",!0===this.state.searching&&r.a.createElement(ta,{authUserId:this.context.userId,canCancel:!0,canConfirm:!0,onCancel:this.modalCancelHandler,onConfirm:this.modalConfirmSearchDateRangeHandler,confirmText:"Search",appointment:this.context.selectedAppointment})))),r.a.createElement(S.a,{md:10})))),r.a.createElement(T.a,{eventKey:"SearchResult",title:"Search Results"},r.a.createElement(N.a,{className:"containerSearchUserResults"},r.a.createElement(g.a,null,r.a.createElement(U.a,{className:"searchCard"},r.a.createElement(U.a.Body,{className:"searchCardBody"},r.a.createElement(U.a.Title,null,"Your Search"),r.a.createElement(U.a.Text,null,"Field: ",this.state.appointmentSearchField),r.a.createElement(U.a.Text,null,"Query: ",this.state.appointmentSearchQuery)))),r.a.createElement(g.a,{className:"searchListRow"},this.state.searchAppointments!==[]&&r.a.createElement(Wt,{searchAppointments:this.state.searchAppointments,authUserId:this.context.userId,onCancel:this.modalCancelHandler,onViewDetail:this.showDetailHandler}))))))))))}}]),t}(n.Component);ia.contextType=y;var oa=ia,la=(a(106),function(e){var t=Object(k.a)({},e.user);console.log("thisUserProfile.props.user:  "+Object(P.a)({},t));var a=e.authUserId,n=t.address,i=t.attendance;console.log("Profile: userAttendance",i);var o=t.leave;console.log("Profile: userLeave",o);var l=t.attachments;console.log("Profile: userAttachment",l);var c=new Date(1e3*t.employmentDate.substr(0,10)).toISOString().slice(0,10),s=new Date(1e3*t.terminationDate.substr(0,10)).toISOString().slice(0,10);return r.a.createElement(O.a,{defaultActiveKey:"Demographics",id:"uncontrolled-tab-example"},r.a.createElement(T.a,{eventKey:"",title:"Details:",disabled:!0}),r.a.createElement(T.a,{eventKey:"Demographics",title:"Demographics"},r.a.createElement(U.a,{className:"UserDetailCard"},r.a.createElement(U.a.Body,null,r.a.createElement(U.a.Title,null,"User Details"),r.a.createElement(U.a.Text,null,"ID: ",t._id),r.a.createElement(U.a.Text,null,"Name: ",t.name),r.a.createElement(U.a.Text,null,"Phone: ",t.phone),r.a.createElement(U.a.Text,null,"Email: ",t.email),r.a.createElement(U.a.Text,null,"Role: ",t.role),r.a.createElement(U.a.Text,null,"Start Date: ",c),r.a.createElement(U.a.Text,null,"End Date: ",s),r.a.createElement(U.a.Text,null,"Address:"),r.a.createElement(U.a.Text,null,"Street & Number : ",n.number,", ",n.street),r.a.createElement(U.a.Text,null,"Town : ",n.town),r.a.createElement(U.a.Text,null,"Parish : ",n.parish),r.a.createElement(U.a.Text,null,"Post Office : ",n.postOffice)))),r.a.createElement(T.a,{eventKey:"Attendance",title:"Attendance"},r.a.createElement(U.a.Text,null,"Attendance:"),r.a.createElement(J,{userAttendance:i,authUserId:a,canDelete:e.canDelete,onDelete:e.attendanceDelete})),r.a.createElement(T.a,{eventKey:"Leave",title:"Leave"},r.a.createElement(U.a.Text,null,"Leave:"),r.a.createElement(K,{userLeave:o,authUserId:a,canDelete:e.canDelete,onDelete:e.leaveDelete})),r.a.createElement(T.a,{eventKey:"Attachments",title:"Attachments"},r.a.createElement(U.a.Text,null,"Attachments:"),r.a.createElement(B,{userAttachment:l,authUserId:a,canDelete:e.canDelete,onDelete:e.attachmentDelete})))}),ca=function(e){function t(){var e,a;Object(l.a)(this,t);for(var n=arguments.length,r=new Array(n),i=0;i<n;i++)r[i]=arguments[i];return(a=Object(s.a)(this,(e=Object(m.a)(t)).call.apply(e,[this].concat(r)))).state={user:null,users:[],updating:!1,isLoading:!1,userUpdateField:null,userAlert:null,canDelete:null},a.isActive=!0,a.startUpdateUserHandler=function(){a.setState({updating:!0}),console.log("UpdateUserForm...")},a.modalConfirmUpdateHandler=function(e){var t=a.context.token,n=a.context.userId,r=a.context.selectedUser._id;n!==r&&"admin"!==a.context.user.role&&(console.log("Not the creator or Admin! No edit permission!!"),a.setState({userAlert:"Not the creator or Admin! No edit permission!!"}),r=null),console.log("UpdateUserFormData:  ",e.target.formGridEmail.value),a.setState({updating:!1});var i=e.target.formGridEmail.value,o=e.target.formGridPassword.value,l=e.target.formGridName.value,c=a.context.user.role,s=e.target.formGridDob.value,m=e.target.formGridPhone.value,d=e.target.formGridAddressNumber.value,p=e.target.formGridAddressStreet.value,u=e.target.formGridAddressTown.value,h=e.target.formGridAddressParish.value,f=e.target.formGridAddressPostOffice.value,g=e.target.formGridEmploymentDate.value,y=e.target.formGridTerminationDate.value;0===i.trim().length&&(console.log("blank fields detected!!!...filling w/ previous data..."),i=a.context.user.email),0===o.trim().length&&(console.log("blank fields detected!!!...filling w/ previous data..."),o=a.context.user.password),0===l.trim().length&&(console.log("blank fields detected!!!...filling w/ previous data..."),l=a.context.user.name),0===s.trim().length&&(console.log("blank fields detected!!!...filling w/ previous data..."),s=a.context.user.dob),0===m.trim().length&&(console.log("blank fields detected!!!...filling w/ previous data..."),m=a.context.user.phone),0===d.trim().length&&(console.log("blank fields detected!!!...filling w/ previous data..."),d=a.context.user.address.number),0===p.trim().length&&(console.log("blank fields detected!!!...filling w/ previous data..."),p=a.context.user.address.street),0===u.trim().length&&(console.log("blank fields detected!!!...filling w/ previous data..."),u=a.context.user.address.town),0===h.trim().length&&(console.log("blank fields detected!!!...filling w/ previous data..."),h=a.context.user.address.parish),0===f.trim().length&&(console.log("blank fields detected!!!...filling w/ previous data..."),f=a.context.user.address.postOffice),0===g.trim().length&&(console.log("blank fields detected!!!...filling w/ previous data..."),g=a.context.user.employmentDate),0===y.trim().length&&(console.log("blank fields detected!!!...filling w/ previous data..."),y=a.context.user.terminationDate);console.log("\n      updating user profile...\n      userId: ".concat(n,"\n      email: ").concat(i,",\n      password: ").concat(o,",\n      name: ").concat(l,",\n      role: ").concat(c,",\n      dob: ").concat(s,",\n      phone: ").concat(m,",\n      addressNumber: ").concat(d,",\n      addressStreet: ").concat(p,",\n      addressTown: ").concat(u,",\n      addressParish: ").concat(h,",\n      addressPostOffice: ").concat(f,",\n      employmentDate: ").concat(g,",\n      terminationDate: ").concat(y,",\n      "));var E={query:'\n        mutation {updateUser(userId:"'.concat(n,'",selectedUserId:"').concat(n,'",userInput: {email:"').concat(i,'",password:"').concat(o,'",name:"').concat(l,'",dob:"').concat(s,'",addressNumber:').concat(d,',addressStreet:"').concat(p,'",addressTown:"').concat(u,'",addressParish:"').concat(h,'", addressPostOffice:"').concat(f,'",phone:"').concat(m,'",role:"').concat(c,'",employmentDate:"').concat(g,'",terminationDate:"').concat(y,'"})\n        {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n        ')};fetch("http://localhost:10000/graphql",{method:"POST",body:JSON.stringify(E),headers:{"Content-Type":"application/json",Authorization:"Bearer "+t}}).then((function(e){if(200!==e.status&&201!==e.status)throw new Error("Failed!");return e.json()})).then((function(e){console.log("response data... "+JSON.stringify(e));var t=e.data.updateUser;console.log("updatedUser:  ",JSON.stringify(t)),a.state.users.push(t),a.context.users=a.state.users;var n=JSON.stringify(e.data).slice(2,25);a.setState({userAlert:n,user:t}),a.fetchUsers()})).catch((function(e){console.log(e),a.setState({userAlert:e})}))},a.modalConfirmUpdateFieldHandler=function(e){var t=a.context.token,n=a.context.userId,r=a.context.selectedUser._id;n!==r&&"admin"!==a.context.user.role&&(console.log("Not the creator or Admin! No edit permission!!"),a.setState({userAlert:"Not the creator or Admin! No edit permission!!"}),r=null),console.log("UpdateUserFieldFormData:  ",e.target.formGridField.value),a.setState({updating:!1});var i=e.target.formGridField.value,o=e.target.formGridQuery.value,l={query:'\n            mutation{updateUserField(userId:"'.concat(n,'",selectedUserId:"').concat(n,'",field:"').concat(i,'",query:"').concat(o,'")\n            {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n          ')};fetch("http://localhost:10000/graphql",{method:"POST",body:JSON.stringify(l),headers:{"Content-Type":"application/json",Authorization:"Bearer "+t}}).then((function(e){if(200!==e.status&&201!==e.status)throw new Error("Failed!");return e.json()})).then((function(e){console.log("response data... "+JSON.stringify(e.data.updateUserField));var t=e.data.updateUserField._id,n=a.state.users.find((function(e){return e._id===t})),r=a.state.users.indexOf(n),i=a.state.users.splice(r,1);console.log("updatedUser:  ",JSON.stringify(n),"  updatedUserPos:  ",r,"  slicedArray:  ",i),a.state.users.push(e.data.updateUserField),a.context.users=a.state.users;var o=JSON.stringify(e.data).slice(2,25);a.setState({userAlert:o}),a.fetchUsers()})).catch((function(e){console.log(e),a.setState({userAlert:e})}))},a.updateUserAttendanceHandler=function(e){var t=a.context.token,n=a.state.user._id;console.log("UpdateUserAttendanceFormData:  ",e.target.formGridAttendanceDate.value),a.setState({updating:!1,userUpdateField:null});var r=e.target.formGridAttendanceDate.value,i=e.target.formGridAttendanceStatus.value,o=e.target.formGridAttendanceDescription.value;0===r.trim().length&&(console.log("blank fields detected!!!...filling w/ previous data..."),r=a.context.selectedUser.attendanceDate),0===i.trim().length&&(console.log("blank fields detected!!!...filling w/ previous data..."),i=a.context.selectedUser.attendanceStatus),0===o.trim().length&&(console.log("blank fields detected!!!...filling w/ previous data..."),o=a.context.selectedUser.attendanceDescription);console.log("\n      adding user attendance item...\n      userId: ".concat(n,",\n      attendanceDate: ").concat(r,",\n      attendanceStatus: ").concat(i,",\n      attendanceDescription: ").concat(o,"\n      "));var l={query:'\n          mutation {updateUserAttendance(userId:"'.concat(n,'", selectedUserId:"').concat(n,'",userInput:{attendanceDate:"').concat(r,'",attendanceStatus:"').concat(i,'",attendanceDescription:"').concat(o,'"})\n          {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n        ')};fetch("http://localhost:10000/graphql",{method:"POST",body:JSON.stringify(l),headers:{"Content-Type":"application/json",Authorization:"Bearer "+t}}).then((function(e){if(200!==e.status&&201!==e.status)throw new Error("Failed!");return e.json()})).then((function(e){console.log("response data... "+JSON.stringify(e.data.updateUserAttendance));var t=e.data.updateUserAttendance._id,n=a.state.users.find((function(e){return e._id===t})),r=a.state.users.indexOf(n),i=a.state.users.splice(r,1);console.log("updatedUser:  ",JSON.stringify(n),"  updatedUserPos:  ",r,"  slicedArray:  ",i),a.state.users.push(e.data.updateUserAttendance),a.context.users=a.state.users;var o=JSON.stringify(e.data).slice(2,25);a.setState({userAlert:o}),a.fetchUsers()})).catch((function(e){console.log(e),a.setState({userAlert:e})}))},a.updateUserLeaveHandler=function(e){var t=a.context.token,n=a.context.userId,r=a.context.selectedUser._id;n!==r&&"admin"!==a.context.user.role&&(console.log("Not the creator or Admin! No edit permission!!"),a.setState({userAlert:"Not the creator or Admin! No edit permission!!"}),r=null),console.log("UpdateUserLeaveFormData:  ",e.target.formGridLeaveType.value),a.setState({updating:!1,userUpdateField:null});var i=e.target.formGridLeaveType.value,o=e.target.formGridLeaveTitle.value,l=e.target.formGridLeaveStartDate.value,c=e.target.formGridLeaveEndDate.value;0===i.trim().length&&(console.log("blank fields detected!!!...filling w/ previous data..."),i=a.context.selectedUser.leaveType),0===o.trim().length&&(console.log("blank fields detected!!!...filling w/ previous data..."),o=a.context.selectedUser.leaveTitle),0===l.trim().length&&(console.log("blank fields detected!!!...filling w/ previous data..."),l=a.context.selectedUser.leaveStartDate),0===c.trim().length&&(console.log("blank fields detected!!!...filling w/ previous data..."),c=a.context.selectedUser.leaveEndDate);console.log("\n      adding user attendance item...\n      userId: ".concat(n,",\n      selectedUserId: ").concat(r,"\n      leave: {\n        type: ").concat(i,",\n        title: ").concat(o,",\n        startDate: ").concat(l,",\n        endDate: ").concat(c,"\n      }\n      "));var s={query:'\n          mutation {updateUserLeave(userId:"'.concat(n,'", selectedUserId:"').concat(n,'",userInput:{leaveType:"').concat(i,'",leaveTitle:"').concat(o,'",leaveStartDate:"').concat(l,'",leaveEndDate:"').concat(c,'"})\n          {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n        ')};fetch("http://localhost:10000/graphql",{method:"POST",body:JSON.stringify(s),headers:{"Content-Type":"application/json",Authorization:"Bearer "+t}}).then((function(e){if(200!==e.status&&201!==e.status)throw new Error("Failed!");return e.json()})).then((function(e){console.log("response data... "+JSON.stringify(e.data));var t=e.data.updateUserLeave._id,n=a.state.users.find((function(e){return e._id===t})),r=a.state.users.indexOf(n),i=a.state.users.splice(r,1);console.log("updatedUser:  ",JSON.stringify(n),"  updatedUserPos:  ",r,"  slicedArray:  ",i),a.state.users.push(e.data.updateUserLeave),a.context.users=a.state.users;var o=JSON.stringify(e.data).slice(2,25);a.setState({userAlert:o}),a.fetchUsers()})).catch((function(e){console.log(e),a.setState({userAlert:e})}))},a.updateUserAttachmentHandler=function(e){var t=a.context.token,n=a.context.userId,r=a.context.selectedUser._id;n!==r&&"admin"!==a.context.user.role&&(console.log("Not the creator or Admin! No edit permission!!"),a.setState({userAlert:"Not the creator or Admin! No edit permission!!"}),r=null),console.log("UpdateUserAttachmentFormData:  ",e.target.formGridAttachmentName.value),a.setState({updating:!1,userUpdateField:null});var i=e.target.formGridAttachmentName.value,o=e.target.formGridAttachmentFormat.value,l=e.target.formGridAttachmentPath.value;if(0!==i.trim().length&&0!==o.trim().length&&0!==l.trim().length){console.log("\n    adding user attendance item...\n    userId: ".concat(n,",\n    selectedUserId: ").concat(r,"\n    attachmentName: ").concat(i,",\n    attachmentFormat: ").concat(o,",\n    attachmentPath: ").concat(l,"\n    ")),a.setState({userAlert:"adding user attendance item..."});var c={query:'\n        mutation{updateUserAttachment(userId:"'.concat(n,'",selectedUserId:"').concat(n,'",userInput:{attachmentName:"').concat(i,'",attachmentFormat:"').concat(o,'",attachmentPath:"').concat(l,'"})\n        {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n      ')};fetch("http://localhost:10000/graphql",{method:"POST",body:JSON.stringify(c),headers:{"Content-Type":"application/json",Authorization:"Bearer "+t}}).then((function(e){if(200!==e.status&&201!==e.status)throw new Error("Failed!");return e.json()})).then((function(e){console.log("response data... "+JSON.stringify(e.data.updateUserAttachment));var t=e.data.updateUserAttachment._id,n=a.state.users.find((function(e){return e._id===t})),r=a.state.users.indexOf(n),i=a.state.users.splice(r,1);console.log("updatedUser:  ",JSON.stringify(n),"  updatedUserPos:  ",r,"  slicedArray:  ",i),a.state.users.push(e.data.updateUserAttachment),a.context.users=a.state.users;var o=JSON.stringify(e.data).slice(2,25);a.setState({userAlert:o}),a.fetchUsers()})).catch((function(e){console.log(e),a.setState({userAlert:e})}))}else console.log("blank fields detected!!! try again")},a.modalCancelHandler=function(){a.setState({updating:!1})},a.deleteUserAttendanceItem=function(e){var t=a.context.token,n=a.context.userId,r=a.state.selectedUser._id;console.log("\n      delete user Attendance item:\n      props: ".concat(JSON.stringify(e),",\n      token: ").concat(t,",\n      userId: ").concat(n,",\n      selectedUserId: ").concat(r,",\n      "))},a.deleteUserLeaveItem=function(e){var t=a.context.token,n=a.context.userId,r=a.state.selectedUser._id;console.log("\n      delete user Leave item:\n      props: ".concat(JSON.stringify(e),",\n      token: ").concat(t,",\n      userId: ").concat(n,",\n      selectedUserId: ").concat(r,",\n      "))},a.deleteUserAttachmentItem=function(e){var t=a.context.token,n=a.context.userId,r=a.state.selectedUser._id;console.log("\n      delete user Attachment item:\n      props: ".concat(JSON.stringify(e),",\n      token: ").concat(t,",\n      userId: ").concat(n,",\n      selectedUserId: ").concat(r,",\n      "))},a}return Object(d.a)(t,e),Object(c.a)(t,[{key:"componentDidMount",value:function(){this.getThisUser(),"admin579"===this.context.user.name&&this.setState({canDelete:!0})}},{key:"getThisUser",value:function(){var e=this;this.setState({isLoading:!0});fetch("http://localhost:10000/graphql",{method:"POST",body:JSON.stringify({query:"\n      query {getThisUser\n        {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n        "}),headers:{"Content-Type":"application/json",Authorization:"Bearer "+this.context.token}}).then((function(e){if(200!==e.status&&201!==e.status)throw new Error("Failed!");return e.json()})).then((function(t){console.log("resdata..."+JSON.stringify(t));var a=t.data.getThisUser;e.isActive&&(e.setState({user:a,isLoading:!1}),e.context.user=a,console.log("this.context.user:  "+e.context.user.name),sessionStorage.setItem("thisUser",JSON.stringify(a)))})).catch((function(t){console.log(t),e.setState({userAlert:t}),e.isActive&&e.setState({isLoading:!1})}))}},{key:"updateUserSpecialProfile",value:function(e){console.log("special field to update:  ",e.target.value);var t=e.target.value;this.setState({userUpdateField:t})}},{key:"componentWillUnmount",value:function(){this.isActive=!1}},{key:"render",value:function(){return r.a.createElement(r.a.Fragment,null,r.a.createElement(g.a,null,r.a.createElement(S.a,{md:3,className:"MasterCol1"},r.a.createElement(v,{authUserId:this.context.userId,alert:this.state.userAlert}),r.a.createElement(X,{you:this.state.user})),r.a.createElement(S.a,{md:9,className:"MasterCol2"},r.a.createElement(N.a,{className:"containerProfile"},r.a.createElement(O.a,{defaultActiveKey:"Detail",id:"uncontrolled-tab-example2"},r.a.createElement(T.a,{eventKey:"",title:"Edit:",disabled:!0}),r.a.createElement(T.a,{eventKey:"Detail",title:"Detail"},null!==this.state.user&&r.a.createElement(la,{user:this.state.user,authUserId:this.context.userId,canDelete:this.state.canDelete,attendanceDelete:this.deleteUserAttendanceItem,leaveDelete:this.deleteUserLeaveItem,attachmentDelete:this.deleteUserAttachmentItem})),r.a.createElement(T.a,{eventKey:"Demographics",title:"Demographics"},r.a.createElement(h.a,{variant:"outline-primary",onClick:this.startUpdateUserHandler},"Demographics"),!0===this.state.updating&&r.a.createElement(Z,{canCancelProfile:!0,canConfirm:!0,onCancel:this.modalCancelHandler,onConfirm:this.modalConfirmUpdateHandler,confirmText:"Confirm",user:this.state.user,authUserId:this.context.userId})),r.a.createElement(T.a,{eventKey:"userEditField",title:"Single Field"},null===this.state.selectedUser&&r.a.createElement(h.a,{variant:"outline-warning",size:"lg"},"Select a Staff member from the Master List below"),null!==this.state.selectedUser&&r.a.createElement(h.a,{variant:"outline-primary",onClick:this.startUpdateUserHandler},"Edit Field"),this.state.updating&&null!==this.state.selectedUser&&r.a.createElement($,{authUserId:this.context.userId,canCancel:!0,canConfirm:!0,onCancel:this.modalCancelHandler,onConfirm:this.modalConfirmUpdateFieldHandler,confirmText:"Confirm",user:this.state.selectedUser})),r.a.createElement(T.a,{eventKey:"Atttendance",title:"Atttendance"},r.a.createElement(h.a,{variant:"outline-primary",value:"attendance",onClick:this.updateUserSpecialProfile.bind(this)},"Attendance"),"attendance"===this.state.userUpdateField&&r.a.createElement(ee,{authUserId:this.context.userId,canCancelProfile:!0,canConfirm:!0,onCancel:this.modalCancelHandler,onConfirm:this.updateUserAttendanceHandler,confirmText:"Confirm",user:this.state.selectedUser})),r.a.createElement(T.a,{eventKey:"Leave",title:"Leave"},r.a.createElement(h.a,{variant:"outline-primary",value:"leave",onClick:this.updateUserSpecialProfile.bind(this)},"Leave"),"leave"===this.state.userUpdateField&&r.a.createElement(ae,{authUserId:this.context.userId,canCancelProfile:!0,canConfirm:!0,onCancel:this.modalCancelHandler,onConfirm:this.updateUserLeaveHandler,confirmText:"Confirm",user:this.state.selectedUser})),r.a.createElement(T.a,{eventKey:"Attachment",title:"Attachment"},r.a.createElement(h.a,{variant:"outline-primary",value:"attachments",onClick:this.updateUserSpecialProfile.bind(this)},"Attachment"),"attachments"===this.state.userUpdateField&&r.a.createElement(te,{authUserId:this.context.userId,canCancelProfile:!0,canConfirm:!0,onCancel:this.modalCancelHandler,onConfirm:this.updateUserAttachmentHandler,confirmText:"Confirm",user:this.state.selectedUser})))))))}}]),t}(n.Component);ca.contextType=y;var sa=ca,ma=(a(107),function(e){return r.a.createElement(y.Consumer,null,(function(e){return r.a.createElement("header",{className:"main-navigation"},r.a.createElement("div",{className:"main-navigation__logo"},r.a.createElement("h1",null,"ENT EMR 0.1.0")),r.a.createElement("nav",{className:"main-navigation__items"},r.a.createElement("ul",null,!e.token&&r.a.createElement("li",null,r.a.createElement(p.b,{to:"/auth"},"Login")),!e.token&&r.a.createElement("li",null,r.a.createElement(p.b,{to:"/signup"},"Signup")),e.token&&r.a.createElement(r.a.Fragment,null,r.a.createElement("li",null,r.a.createElement(p.b,{to:"/profile"},"My Profile")),r.a.createElement("li",null,r.a.createElement(p.b,{to:"/users"},"Staff")),r.a.createElement("li",null,r.a.createElement(p.b,{to:"/patients"},"Patients")),r.a.createElement("li",null,r.a.createElement(p.b,{to:"/appointments"},"Appointments")),r.a.createElement("li",null,r.a.createElement("button",{onClick:e.logout},"Logout"))))))}))}),da=(a(108),function(e){function t(e){var a;return Object(l.a)(this,t),(a=Object(s.a)(this,Object(m.a)(t).call(this,e))).state={token:null,userId:null,context:a.context},a.login=function(e,t,n){a.setState({token:e,userId:t})},a.logout=function(){a.setState({token:null,userId:null}),sessionStorage.clear()},a.sessionStorageAuth=null,a}return Object(d.a)(t,e),Object(c.a)(t,[{key:"render",value:function(){return r.a.createElement(p.a,null,r.a.createElement(r.a.Fragment,null,r.a.createElement(y.Provider,{value:{token:this.state.token,userId:this.state.userId,user:{},users:[],selectedUser:{},selectedPatient:{},selectedAppointment:{},patient:{},appointment:{},appointmentPatientId:null,userUpdateField:null,patientUpdateField:null,appointmentUpdateField:null,appointmentsToday:null,appointmentsWeekImportant:null,appointmentsInProgress:null,userAlert:"",visit:null,login:this.login,logout:this.logout}},r.a.createElement(ma,null),r.a.createElement("main",{className:"main-content"},r.a.createElement(u.d,null,this.state.token&&r.a.createElement(u.a,{from:"/",to:"/users",exact:!0}),this.state.token&&r.a.createElement(u.b,{path:"/users",component:se}),this.state.token&&r.a.createElement(u.b,{path:"/patients",component:qt}),this.state.token&&r.a.createElement(u.b,{path:"/appointments",component:oa}),this.state.token&&r.a.createElement(u.b,{path:"/profile",component:sa}),this.state.token&&r.a.createElement(u.a,{from:"/auth",to:"/profile",exact:!0}),!this.state.token&&r.a.createElement(u.b,{path:"/auth",component:D}),!this.state.token&&r.a.createElement(u.b,{path:"/signup",component:I}),!this.state.token&&r.a.createElement(u.a,{to:"/auth",exact:!0}))))))}}]),t}(n.Component));da.contextType=y;var pa=da;o.a.render(r.a.createElement(pa,null),document.getElementById("root"))},13:function(e,t,a){},15:function(e,t,a){},16:function(e,t,a){},41:function(e,t,a){},42:function(e,t,a){},43:function(e,t,a){},44:function(e,t,a){},46:function(e,t,a){},63:function(e,t,a){},70:function(e,t,a){},76:function(e,t,a){e.exports=a(109)},82:function(e,t,a){},83:function(e,t,a){},98:function(e,t,a){}},[[76,1,2]]]);
//# sourceMappingURL=main.cfe1b53a.chunk.js.map