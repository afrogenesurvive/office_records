{"version":3,"sources":["context/auth-context.js","components/AlertBox.js","pages/Auth.js","components/Forms/CreateUserForm.js","pages/Signup.js","components/Users/UserList/UserItem/UserItem.js","components/Users/UserList/UserList.js","components/Users/UserList/UserItem/SearchUserItem.js","components/Users/UserList/SearchUserList.js","components/Users/UserList/UserItem/UserAttendanceItem.js","components/Users/UserList/UserAttendanceList.js","components/Users/UserList/UserItem/UserLeaveItem.js","components/Users/UserList/UserLeaveList.js","components/Users/UserList/UserItem/UserAttachmentItem.js","components/Users/UserList/UserAttachmentList.js","components/Users/UserDetail.js","components/Spinner/Spinner.js","components/Appointments/AppointmentList/AppointmentItem/AppointmentTodayItem.js","components/Appointments/AppointmentList/AppointmentTodayList.js","components/Appointments/AppointmentList/AppointmentItem/AppointmentInProgressItem.js","components/Appointments/AppointmentList/AppointmentInProgressList.js","pages/Sidebar.js","components/Forms/UpdateUserForm.js","components/Forms/UpdateUserFieldForm.js","components/Forms/UpdateUserAttendanceForm.js","components/Forms/UpdateUserAttachmentForm.js","components/Forms/UpdateUserLeaveForm.js","components/Forms/SearchUserForm.js","components/Forms/SearchUserIdForm.js","components/Forms/SearchUserNameForm.js","components/Forms/SearchUserAttendanceDateForm.js","components/Forms/SearchUserLeaveDateRangeForm.js","pages/Users.js","components/Patients/PatientList/PatientItem/PatientItem.js","components/Patients/PatientList/PatientList.js","components/Patients/PatientList/PatientItem/PatientAppointmentItem.js","components/Patients/PatientList/PatientAppointmentList.js","components/Patients/PatientList/PatientItem/PatientInsuranceItem.js","components/Patients/PatientList/PatientInsuranceList.js","components/Patients/PatientList/PatientItem/PatientConsultantItem.js","components/Patients/PatientList/PatientConsultantList.js","components/Patients/PatientList/PatientItem/PatientNextOfKinItem.js","components/Patients/PatientList/PatientNextOfKinList.js","components/Patients/PatientList/PatientItem/PatientComplaintItem.js","components/Patients/PatientList/PatientComplaintList.js","components/Patients/PatientList/PatientItem/PatientSurveyItem.js","components/Patients/PatientList/PatientSurveyList.js","components/Patients/PatientList/PatientItem/PatientVitalsItem.js","components/Patients/PatientList/PatientVitalsList.js","components/Patients/PatientList/PatientItem/PatientExaminationItem.js","components/Patients/PatientList/PatientExaminationList.js","components/Patients/PatientList/PatientItem/PatientHistoryItem.js","components/Patients/PatientList/PatientHistoryList.js","components/Patients/PatientList/PatientItem/PatientAllergiesItem.js","components/Patients/PatientList/PatientAllergiesList.js","components/Patients/PatientList/PatientItem/PatientMedicationItem.js","components/Patients/PatientList/PatientMedicationList.js","components/Patients/PatientList/PatientItem/PatientInvestigationItem.js","components/Patients/PatientList/PatientInvestigationList.js","components/Patients/PatientList/PatientItem/PatientDiagnosisItem.js","components/Patients/PatientList/PatientDiagnosisList.js","components/Patients/PatientList/PatientItem/PatientTreatmentItem.js","components/Patients/PatientList/PatientTreatmentList.js","components/Patients/PatientList/PatientItem/PatientBillingItem.js","components/Patients/PatientList/PatientBillingList.js","components/Patients/PatientList/PatientItem/PatientAttachmentItem.js","components/Patients/PatientList/PatientAttachmentsList.js","components/Patients/PatientList/PatientItem/PatientNoteItem.js","components/Patients/PatientList/PatientNotesList.js","components/Patients/PatientList/PatientItem/PatientTagItem.js","components/Patients/PatientList/PatientTagsList.js","components/Patients/PatientList/PatientItem/VisitConsultantItem.js","components/Patients/PatientList/VisitConsultantList.js","components/Patients/PatientList/PatientItem/VisitComplaintItem.js","components/Patients/PatientList/VisitComplaintList.js","components/Patients/PatientList/PatientItem/VisitExaminationItem.js","components/Patients/PatientList/VisitExaminationList.js","components/Patients/PatientList/PatientItem/VisitSurveyItem.js","components/Patients/PatientList/VisitSurveyList.js","components/Patients/PatientList/PatientItem/VisitVitalsItem.js","components/Patients/PatientList/VisitVitalsList.js","components/Patients/PatientList/PatientItem/VisitHistoryItem.js","components/Patients/PatientList/VisitHistoryList.js","components/Patients/PatientList/PatientItem/VisitInvestigationItem.js","components/Patients/PatientList/VisitInvestigationList.js","components/Patients/PatientList/PatientItem/VisitDiagnosisItem.js","components/Patients/PatientList/VisitDiagnosisList.js","components/Patients/PatientList/PatientItem/VisitTreatmentItem.js","components/Patients/PatientList/VisitTreatmentList.js","components/Patients/PatientList/PatientItem/VisitBillingItem.js","components/Patients/PatientList/VisitBillingList.js","components/Patients/PatientVisit.js","components/Forms/SearchPatientVisitForm.js","components/Patients/PatientDetail.js","components/Patients/PatientList/PatientItem/SearchPatientItem.js","components/Patients/PatientList/SearchPatientList.js","components/Forms/SearchPatientForm.js","components/Forms/SearchPatientIdForm.js","components/Forms/SearchPatientNameForm.js","components/Forms/CreatePatientForm.js","components/Forms/UpdatePatientForm.js","components/Forms/UpdatePatientFieldForm.js","components/Forms/UpdatePatientConsultantForm.js","components/Forms/UpdatePatientInsuranceForm.js","components/Forms/UpdatePatientNextOfKinForm.js","components/Forms/UpdatePatientComplaintForm.js","components/Forms/UpdatePatientSurveyForm.js","components/Forms/UpdatePatientVitalsForm.js","components/Forms/UpdatePatientExaminationForm.js","components/Forms/UpdatePatientHistoryForm.js","components/Forms/UpdatePatientAllergiesForm.js","components/Forms/UpdatePatientMedicationForm.js","components/Forms/UpdatePatientInvestigationForm.js","components/Forms/UpdatePatientDiagnosisForm.js","components/Forms/UpdatePatientTreatmentForm.js","components/Forms/UpdatePatientBillingForm.js","components/Forms/UpdatePatientAttachmentForm.js","components/Forms/UpdatePatientNoteForm.js","components/Forms/UpdatePatientTagForm.js","pages/Patients.js","components/Appointments/AppointmentList/AppointmentItem/AppointmentItem.js","components/Appointments/AppointmentList/AppointmentList.js","components/Appointments/AppointmentList/AppointmentItem/AppointmentNoteItem.js","components/Appointments/AppointmentList/AppointmentNoteList.js","components/Appointments/AppointmentDetail.js","components/Appointments/AppointmentList/AppointmentItem/SearchAppointmentItem.js","components/Appointments/AppointmentList/SearchAppointmentList.js","components/Forms/SearchAppointmentForm.js","components/Forms/SearchAppointmentIdForm.js","components/Forms/SearchAppointmentPatientForm.js","components/Forms/SearchAppointmentDateForm.js","components/Forms/SearchAppointmentDateRangeForm.js","components/Forms/CreateAppointmentForm.js","components/Forms/UpdateAppointmentForm.js","components/Forms/UpdateAppointmentFieldForm.js","pages/Appointments.js","components/Users/thisUserProfile.js","pages/thisUser.js","components/Navigation/MainNavigation.js","App.js","index.js"],"names":["React","createContext","token","userId","user","users","selectedUser","selectedPatient","selectedAppointment","patient","appointment","appointmentPatientId","userUpdateField","patientUpdateField","appointmentUpdateField","appointmentsToday","appointmentsWeekImportant","appointmentsInProgress","userAlert","visit","login","tokenExpiration","logout","AlertBox","props","alert","console","log","className","Alert","variant","AuthPage","state","submitHandler","event","preventDefault","email","target","formBasicEmail","value","password","formBasicPassword","trim","length","requestBody","query","fetch","method","body","JSON","stringify","headers","then","res","status","Error","json","resData","responseAlert","data","slice","setState","context","catch","err","Row","authUserId","this","Form","onSubmit","Group","controlId","Label","Control","type","placeholder","Text","Button","size","to","Component","contextType","AuthContext","CreateUserForm","onConfirm","as","Col","canCancel","Accordion","Toggle","eventKey","onClick","onCancel","canConfirm","successText","SignupPage","success","modalConfirmHandler","formGridEmail","creating","formGridPassword","name","formGridName","role","formGridRole","dob","formGridDob","phone","formGridPhone","addressNumber","formGridAddressNumber","addressStreet","formGridAddressStreet","addressTown","formGridAddressTown","addressParish","formGridAddressParish","addressPostOffice","formGridAddressPostOffice","employmentDate","formGridEmploymentDate","terminationDate","formGridTerminationDate","Authorization","Fragment","md","confirmText","userItem","key","onDetail","bind","_id","userList","map","onViewDetail","searchUserItem","searchUserList","searchUsers","SearchUserItem","userAttendanceItem","date","description","canDelete","onDelete","attendance","userAttendanceList","userAttendance","userAttendanceDate","Date","substr","toISOString","UserAttendanceItem","userLeaveItem","startDate","endDate","leave","userLeaveList","userLeave","userLeaveStartDate","userLeaveEndDate","UserLeaveItem","userAttachmentItem","format","path","attachment","userAttachmentList","userAttachment","UserAttachmentItem","UserDetail","attachments","userEmploymentDate","userTerminationDate","Tabs","defaultActiveKey","id","Tab","title","disabled","Card","Body","Title","UserAttendanceList","attendanceDelete","UserLeaveList","leaveDelete","UserAttachmentList","attachmentDelete","spinner","appointmentTodayItem","time","appointmentTodayList","appointmentToday","appointmentTodayDate","AppointmentTodayItem","appointmentInProgressItem","appointmentInProgressList","appointmentInProgress","appointmentInProgressDate","AppointmentInProgressItem","SidebarPage","authContext","_currentValue","isActive","Container","border","Subtitle","AppointmentTodayList","AppointmentInProgressList","UpdateUserForm","address","number","street","town","parish","postOffice","canCancelProfile","UpdateUserFieldForm","UpdateUserAttendanceForm","rows","UpdateUserAttachmentForm","UpdateUserLeaveForm","SearchUserForm","SearchUserIdForm","SearchUserNameForm","SearchUserAttendanceDateForm","SearchUserLeaveDateRangeForm","UsersPage","updating","deleting","searching","isLoading","isSorting","userSearchField","userSearchQuery","startCreateUserHandler","startUpdateUserHandler","startSearchUserHandler","createUser","prevState","updatedUsers","push","modalConfirmUpdateHandler","selectedUserId","updatedUser","updateUser","fetchUsers","modalConfirmUpdateFieldHandler","formGridField","formGridFieldSelect","field","formGridQuery","updateUserField","updatedUserId","find","e","updatedUserPos","indexOf","slicedArray","splice","updateUserAttendanceHandler","formGridAttendanceDate","attendanceDate","attendanceStatus","formGridAttendanceStatus","attendanceDescription","formGridAttendanceDescription","updateUserAttendance","updateUserAttachmentHandler","formGridAttachmentName","attachmentName","attachmentFormat","formGridAttachmentFormat","attachmentPath","formGridAttachmentPath","updateUserAttachment","updateUserLeaveHandler","formGridLeaveType","leaveType","leaveTitle","formGridLeaveTitle","leaveStartDate","formGridLeaveStartDate","leaveEndDate","formGridLeaveEndDate","updateUserLeave","modalConfirmSearchHandler","formBasicField","formBasicQuery","formBasicFieldSelect","search","getUserField","modalConfirmSearchIdHandler","formBasicId","getUserId","modalConfirmSearchAttendanceDateHandler","formBasicDate","getUserAttendanceDate","modalConfirmSearchLeaveDateRangeHandler","formBasicStartDate","formBasicEndDate","getUserLeaveDateRange","modalConfirmSearchNameHandler","formBasicName","regex","RegExp","result","filter","match","modalCancelHandler","fetchUsersAsc","usersNameAsc","fetchUsersDesc","usersNameDesc","modalDeleteHandler","deletedUser","deleteUser","deletedUserId","deletedUserPos","deleteUserAttendanceItem","deleteUserAttendance","deleteUserLeaveItem","deleteUserLeave","deleteUserAttachmentItem","deleteUserAttachment","showDetailHandler","onEdit","updateUserSpecial","SearchUserList","patientItem","patientId","registrationDate","patientList","patients","patientRegistrationDate","PatientItem","patientAppointmentItem","location","patientAppointmentList","patientAppointment","patientAppointmentDate","PatientAppointmentItem","patientInsuranceItem","company","expiry","subscriber","insurance","patientInsuranceList","patientInsurance","patientInsuranceExpiry","PatientInsuranceItem","patientConsultantItem","referenceId","referenceName","referenceRole","consultant","patientConsultantList","patientConsultant","consultantDate","consultantId","undefined","consultantName","consultantRole","reference","PatientConsultantItem","patientNextOfKinItem","nextOfKin","patientNextOfKinList","patientNextOfKin","PatientNextOfKinItem","contact","patientComplaintItem","anamnesis","complaint","patientComplaintList","patientComplaint","patientComplaintDate","PatientComplaintItem","patientSurveyItem","survey","patientSurveyList","patientSurvey","patientSurveyDate","PatientSurveyItem","patientVitalsItem","pr","bp1","bp2","rr","temp","ps02","height","weight","bmi","urineType","urineValue","vitals","patientVitalsList","patientVitals","patientVitalsDate","PatientVitalsItem","urine","patientExaminationItem","general","area","measure","followUp","examination","patientExaminationList","patientExamination","patientExaminationDate","PatientExaminationItem","patientHistoryItem","history","patientHistoryList","patientHistory","patientHistoryDate","PatientHistoryItem","patientAllergiesItem","allergies","patientAllergiesList","patientAllergies","PatientAllergiesItem","patientMedicationItem","medication","patientMedicationList","patientMedication","PatientMedicationItem","patientInvestigationItem","investigation","patientInvestigationList","patientInvestigation","patientInvestigationDate","PatientInvestigationItem","patientDiagnosisItem","diagnosis","patientDiagnosisList","patientDiagnosis","patientDiagnosisDate","PatientDiagnosisItem","patientTreatmentItem","dose","frequency","treatment","patientTreatmentList","patientTreatment","patientTreatmentDate","PatientTreatmentItem","patientBillingItem","amount","paid","notes","billing","patientBillingList","patientBilling","patientBillingDate","PatientBillingItem","patientAttachmentItem","patientAttachmentsList","patientAttachments","PatientAttachmentItem","patientNoteItem","note","patientNotesList","patientNotes","PatientNoteItem","patientTagItem","tag","patientTagsList","patientTags","PatientTagItem","VisitConsultantItem","visitConsultantList","consultantItem","visitConsultantDate","consultantReference","VisitComplaintItem","visitComplaintList","complaintItem","visitComplaintDate","complaintAttachment","VisitExaminationItem","visitExaminationList","examinationItem","visitExaminationDate","examinationAttachment","VisitSurveyItem","visitSurveyList","surveyItem","visitSurveyDate","surveyAttachment","VisitVitalsItem","visitVitalsList","vitalsItem","visitVitalsDate","vitalsUrine","VisitHistoryItem","visitHistoryList","historyItem","visitHistoryDate","historyAttachment","VisitInvestigationItem","visitInvestigationList","investigationItem","visitInvestigationDate","investigationAttachment","VisitDiagnosisItem","visitDiagnosisList","diagnosisItem","visitDiagnosisDate","diagnosisAttachment","visitTreatmentList","treatmentItem","visitTreatmentDate","treatmentAttachment","VisitTreatmentItem","VisitBillingItem","visitBillingList","billingItem","visitBillingDate","billingAttachment","PatientVisit","patientName","VisitConsultantList","VisitComplaintList","VisitExaminationList","VisitSurveyList","VisitVitalsList","VisitHistoryList","VisitInvestigationList","VisitDiagnosisList","VisitTreatmentList","VisitBillingList","SearchPatientVisitForm","onGetVisit","PatientDetail","appointments","complaints","surveys","tags","patientDob","patientReferralDate","referralDate","patientExpirationDate","expirationDate","age","gender","occupation","employer","referringDoctor","attendingPhysician","PatientAppointmentList","PatientConsultantList","consultantDelete","PatientInsuranceList","insuranceDelete","PatientNextOfKinList","nextOfKinDelete","PatientComplaintList","complaintDelete","PatientSurveyList","surveyDelete","PatientVitalsList","vitalsDelete","PatientExaminationList","examinationDelete","PatientHistoryList","historyDelete","PatientAllergiesList","allergiesDelete","PatientMedicationList","medicationDelete","PatientInvestigationList","investigationDelete","PatientDiagnosisList","diagnosisDelete","PatientTreatmentList","treatmentDelete","PatientBillingList","billingDelete","PatientAttachmentsList","PatientNotesList","noteDelete","PatientTagsList","tagDelete","searchPatientItem","searchPatientList","searchPatients","SearchPatientItem","SearchPatientForm","SearchPatientIdForm","SearchPatientNameForm","CreatePatientForm","UpdatePatientForm","UpdatePatientFieldForm","UpdatePatientConsultantForm","UpdatePatientInsuranceForm","tas","UpdatePatientNextOfKinForm","UpdatePatientComplaintForm","UpdatePatientSurveyForm","UpdatePatientVitalsForm","UpdatePatientExaminationForm","UpdatePatientHistoryForm","UpdatePatientAllergiesForm","UpdatePatientMedicationForm","UpdatePatientInvestigationForm","UpdatePatientDiagnosisForm","UpdatePatientTreatmentForm","UpdatePatientBillingForm","UpdatePatientAttachmentForm","UpdatePatientNoteForm","UpdatePatientTagForm","PatientsPage","updatingArray","patientSearchField","patientSearchQuery","startCreatePatientHandler","startUpdatePatientHandler","startSearchPatientHandler","formGridTitle","formGridAge","formGridGender","contactPhone","formGridContactPhone","contactEmail","formGridContactEmail","formGridRegistrationDate","formGridReferralDate","formGridExpirationDate","attendingPhysicianName","formGridAttendingPhysicianName","attendingPhysicianEmail","formGridAttendingPhysicianEmail","attendingPhysicianPhone","formGridAttendingPhysicianPhone","referringDoctorName","formGridReferringDoctorName","referringDoctorEmail","formGridReferringDoctorEmail","referringDoctorPhone","formGridReferringDoctorPhone","occupationRole","formGridOccupationRole","occupationEmployer","formGridOccupationEmployer","occupationEmployerContactPhone","formGridOccupationEmployerContactPhone","occupationEmployerContactEmail","formGridOccupationEmployerContactEmail","createPatient","newPatient","updatedPatients","selectedPatientId","updatedPatientId","updatePatient","updatedPatient","updatedPatientPos","fetchPatients","updatePatientField","updatePatientConsultantHandler","patientConsultantReference","formGridConsultantDate","updatePatientConsultant","updatePatientInsuranceHandler","formGridInsuranceCompany","insuranceCompany","insuranceNumber","formGridInsuranceNumber","insuranceExpiry","formGridInsuranceExpiry","insuranceDescription","formGridInsuranceDescription","insuranceSubscriberCompany","formGridInsuranceSubscriberCompany","insuranceSubscriberDescription","formGridInsuranceSubscriberDescription","updatePatientInsurance","updatePatientNextOfKinHandler","formGridNextOfKinName","nextOfKinName","nextOfKinPhone","formGridNextOfKinPhone","nextOfKinEmail","formGridNextOfKinEmail","updatePatientNextOfKin","updatePatientComplaintHandler","formGridComplaintTitle","complaintTitle","complaintDate","formGridComplaintDate","complaintDescription","formGridComplaintDescription","complaintAnamnesis","formGridComplaintAnamnesis","complaintAttachmentName","formGridComplaintAttachmentName","complaintAttachmentFormat","formGridComplaintAttachmentFormat","complaintAttachmentPath","formGridComplaintAttachmentPath","updatePatientComplaint","updatePatientSurveyHandler","formGridSurveyTitle","surveyDate","formGridSurveyDate","surveyTitle","surveyDescription","formGridSurveyDescription","surveyAttachmentName","formGridSurveyAttachmentName","surveyAttachmentFormat","formGridSurveyAttachmentFormat","surveyAttachmentPath","formGridSurveyAttachmentPath","updatePatientSurvey","updatePatientVitalsHandler","formGridVitalsDate","vitalsDate","vitalsPr","formGridVitalsPr","vitalsBp1","formGridVitalsBp1","vitalsBp2","formGridVitalsBp2","vitalsRr","formGridVitalsRr","vitalsTemp","formGridVitalsTemp","vitalsPs02","formGridVitalsPs02","vitalsHeight","formGridVitalsHeight","vitalsWeight","formGridVitalsWeight","vitalsBmi","formGridVitalsBmi","vitalsUrineType","formGridVitalsUrineType","vitalsUrineValue","formGridVitalsUrineValue","updatePatientVitals","updatePatientExaminationHandler","formGridExaminationArea","examinationDate","formGridExaminationDate","examinationGeneral","formGridExaminationGeneral","examinationArea","formGridExaminationAreaSelect","examinationType","formGridExaminationType","examinationMeasure","formGridExaminationMeasure","examinationValue","formGridExaminationValue","examinationDescription","formGridExaminationDescription","examinationFollowUp","formGridExaminationFollowUp","examinationAttachmentName","formGridExaminationAttachmentName","examinationAttachmentFormat","formGridExaminationAttachmentFormat","examinationAttachmentPath","formGridExaminationAttachmentPath","updatePatientExamination","updatePatientHistoryHandler","formGridHistoryTitle","historyType","formGridHistoryType","historyDate","formGridHistoryDate","historyTitle","historyDescription","formGridHistoryDescription","historyAttachmentName","formGridHistoryAttachmentName","historyAttachmentFormat","formGridHistoryAttachmentFormat","historyAttachmentPath","formGridHistoryAttachmentPath","updatePatientHistory","updatePatientAllergiesHandler","formGridAllergiesTitle","allergiesTitle","allergiesType","formGridAllergiesTypeSelect","formGridAllergiesType","allergiesDescription","formGridAllergiesDescription","allergiesAttachmentName","formGridAllergiesAttachmentName","allergiesAttachmentFormat","formGridAllergiesAttachmentFormat","allergiesAttachmentPath","formGridAllergiesAttachmentPath","updatePatientAllergies","updatePatientMedicationHandler","formGridMedicationTitle","medicationTitle","medicationType","formGridMedicationType","medicationDescription","formGridMedicationDescription","medicationAttachmentName","formGridMedicationAttachmentName","medicationAttachmentFormat","formGridMedicationAttachmentFormat","medicationAttachmentPath","formGridMedicationAttachmentPath","updatePatientMedication","updatePatientInvestigationHandler","formGridInvestigationTitle","investigationDate","formGridInvestigationDate","investigationTitle","investigationType","formGridInvestigationTypeSelect","formGridInvestigationType","investigationDescription","formGridInvestigationDescription","investigationAttachmentName","formGridInvestigationAttachmentName","investigationAttachmentFormat","formGridInvestigationAttachmentFormat","investigationAttachmentPath","formGridInvestigationAttachmentPath","updatePatientInvestigation","updatePatientDiagnosisHandler","formGridDiagnosisTitle","diagnosisDate","formGridDiagnosisDate","diagnosisTitle","diagnosisType","formGridDiagnosisType","diagnosisDescription","formGridDiagnosisDescription","diagnosisAttachmentName","formGridDiagnosisAttachmentName","diagnosisAttachmentFormat","formGridDiagnosisAttachmentFormat","diagnosisAttachmentPath","formGridDiagnosisAttachmentPath","updatePatientDiagnosis","updatePatientTreatmentHandler","formGridTreatmentTitle","treatmentDate","formGridTreatmentDate","treatmentTitle","treatmentDescription","formGridTreatmentDescription","treatmentDose","formGridTreatmentDose","treatmentFrequency","formGridTreatmentFrequency","treatmentType","formGridTreatmentType","formGridTreatmentTypeSelect","treatmentAttachmentName","formGridTreatmentAttachmentName","treatmentAttachmentFormat","formGridTreatmentAttachmentFormat","treatmentAttachmentPath","formGridTreatmentAttachmentPath","updatePatientTreatment","updatePatientBillingHandler","formGridBillingTitle","billingDate","formGridBillingDate","billingTitle","billingType","formGridBillingType","billingDescription","formGridBillingDescription","billingAmount","formGridBillingAmount","billingPaid","formGridBillingPaid","billingNotes","formGridBillingNotes","billingAttachmentName","formGridBillingAttachmentName","billingAttachmentFormat","formGridBillingAttachmentFormat","billingAttachmentPath","formGridBillingAttachmentPath","updatePatientBilling","updatePatientAttachmentHandler","formGridPatientAttachmentName","formGridPatientAttachmentFormat","formGridPatientAttachmentPath","updatePatientAttachment","updatePatientNoteHandler","formGridNote","updatePatientNotes","updatePatientTagHandler","formGridTag","updatePatientTags","getPatientField","getPatientId","modalConfirmSearchVisitHandler","getPatientVisit","formBasicVisitDate","visitDate","substring","visitSurveys","x","visitConsultants","visitComplaints","visitVitals","visitExaminations","visitHistory","visitInvestigations","visitDiagnosis","visitTreatments","visitBilling","fetchPatientsAsc","patientsNameAsc","fetchPatientsDesc","patientsNameDesc","deletedPatient","deletePatient","deletedPatientId","deletedPatientPos","deletePatientInsuranceItem","deletePatientInsurance","deletePatientConsultantItem","deletePatientConsultant","deletePatientNextOfKinItem","deletePatientNextOfKin","deletePatientComplaintItem","deletePatientComplaint","deletePatientSurveyItem","deletePatientSurvey","deletePatientVitalsItem","deletePatientVitals","deletePatientExaminationItem","deletePatientExamination","deletePatientHistoryItem","deletePatientHistory","deletePatientAllergiesItem","deletePatientAllergies","deletePatientMedicationItem","deletePatientMedication","deletePatientInvestigationItem","deletePatientInvestigation","deletePatientDiagnosisItem","deletePatientDiagnosis","deletePatientTreatmentItem","deletePatientTreatment","deletePatientBillingItem","deletePatientBilling","deletePatientAttachmentItem","deletePatientAttachment","deletePatientNoteItem","deletePatientTagItem","nameElRef","createRef","updatePatientSpecial","PatientList","SearchPatientList","appointmentItem","appointmentId","appointmentList","appointmentDate","AppointmentItem","appointmentNoteItem","appointmentNoteList","appointmentNote","AppointmentNoteItem","AppointmentDetail","appointmentPatientConsultant","seenTime","checkinTime","inProgress","important","attended","AppointmentNoteList","searchAppointmentItem","searchAppointmentList","searchAppointments","SearchAppointmentItem","SearchAppointmentForm","SearchAppointmentIdForm","SearchAppointmentPatientForm","SearchAppointmentDateForm","SearchAppointmentDateRangeForm","CreateAppointmentForm","UpdateAppointmentForm","UpdateAppointmentFieldForm","AppointmentsPage","appointmentSearchField","appointmentSearchQuery","startCreateAppointmentHandler","startUpdateAppointmentHandler","startSearchAppointmentHandler","formGridType","formGridDate","formGridTime","formGridSeenTime","formGridCheckinTime","formGridLocation","formGridDescription","formGridInProgress","formGridAttended","formGridImportant","createAppointment","updatedAppointments","updatedAppointmentId","updateAppointment","updatedAppointment","updatedAppointmentPos","fetchAppointments","updateAppointmentPatientHandler","selectedAppointmentId","updateAppointmentPatient","updateAppointmentField","getAppointmentField","getAppointmentId","modalConfirmSearchPatientHandler","formBasicPatientId","getAppointmentPatient","searchApointments","modalConfirmSearchDateHandler","getAppointmentDate","modalConfirmSearchDateRangeHandler","appointmentStartDate","appointmentEndDate","getApointmentId","fetchAppointmentsAsc","appointmentsDateAsc","fetchAppointmentsDesc","appointmentsDateDesc","deletedAppointment","deleteAppointment","deletedAppointmentId","deletedAppointmentPos","selecteAppointment","fetchAppointmentToday","fetchAppointmentInProgress","getAppointmentToday","updateAppointmentSpecial","AppointmentList","SearchAppointmentList","thisUserProfile","userAddress","ThisUserPage","getThisUser","thisUser","sessionStorage","setItem","you","updateUserSpecialProfile","mainNavigation","Consumer","App","clear","sessionStorageAuth","Provider","from","exact","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cfe1b53a.chunk.js","sourcesContent":["import React from 'react';\n\nexport default React.createContext({\n    token: null,\n    userId: null,\n    user: {},\n    users:[],\n    selectedUser: {},\n    selectedPatient: {},\n    selectedAppointment: {},\n    patient: {},\n    appointment: {},\n    appointmentPatientId: null,\n    userUpdateField: null,\n    patientUpdateField: null,\n    appointmentUpdateField: null,\n    appointmentsToday: null,\n    appointmentsWeekImportant: null,\n    appointmentsInProgress: null,\n    userAlert: null,\n    visit: null,\n    login: (token, userId, tokenExpiration) => {},\n    logout: () => {}\n});\n","\nimport React from 'react';\nimport Alert from 'react-bootstrap/Alert'\n\nimport './alertBox.css'\n\nconst AlertBox = (props) => {\n\n  let alert = \"<alerts>\";\n  if (props.alert !== null) {\n    console.log(\"alert incoming!!\");\n    alert = '\"'+props.alert+'\"';\n  }\n\n  console.log(`\n      alert: ${alert},\n    `);\n\nreturn (\n  <div className=\"alertBox\">\n  <Alert variant=\"warning\">\n  {alert}\n  </Alert>\n  </div>\n)\n\n}\n\nexport default AlertBox;\n","import React, { Component } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport { NavLink } from 'react-router-dom';\nimport Form from 'react-bootstrap/Form';\nimport Row from 'react-bootstrap/Row';\n\n\nimport './Auth.css';\nimport AuthContext from '../context/auth-context';\nimport AlertBox from '../components/AlertBox';\n\n\nclass AuthPage extends Component {\n  state = {\n    userAlert: null,\n  };\n  static contextType = AuthContext;\n\n  // constructor(props) {\n  //   super(props);\n  // }\n\n  // switchModeHandler = () => {\n  //   this.setState(prevState => {\n  //     return { isLogin: !prevState.isLogin };\n  //   });\n  // };\n\n\n  submitHandler = event => {\n    console.log(\"login function...\");\n    event.preventDefault();\n    const email = event.target.formBasicEmail.value;\n    const password = event.target.formBasicPassword.value;\n\n    if (email.trim().length === 0 || password.trim().length === 0) {\n      return;\n    }\n\n    let requestBody = {\n      query: `\n        query {\n          login(email: \"${email}\", password: \"${password}\") {\n            userId\n            token\n            tokenExpiration\n          }\n        }\n      `};\n\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          // this.context.userAlert = 'Failed!';\n          throw new Error('Failed!');\n        }\n        // this.context.userAlert = 'Failed!';\n        return res.json();\n      })\n      .then(resData => {\n        const responseAlert = JSON.stringify(resData.data).slice(0,8)\n        console.log(`\n          resData slice: ${responseAlert},\n          resData: ${JSON.stringify(resData.data)},\n          `);\n\n          this.setState({userAlert: responseAlert})\n        if (resData.data.login.token) {\n          this.context.login(\n            resData.data.login.token,\n            resData.data.login.userId,\n            resData.data.login.tokenExpiration\n          );\n\n          // const sessionStorageLoginInfo = {\n          //   token: resData.data.login.token,\n          //   userId: resData.data.login.userId,\n          //   tokenExpiration: resData.data.login.tokenExpiration\n          // };\n\n          // sessionStorage.setItem('login info', sessionStorageLoginInfo);\n          // sessionStorage.setItem('login info', JSON.stringify(sessionStorageLoginInfo));\n\n        }\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n        // this.context.userAlert = err;\n        // console.log(`\n        //   err: ${this.context.userAlert}\n        //   `);\n      });\n  };\n\n  render() {\n    return (\n      <Row>\n      <AlertBox\n        authUserId={this.context.userId}\n        alert={this.state.userAlert}\n      />\n\n\n      <Form className=\"auth-form\" onSubmit={this.submitHandler}>\n      <Form.Group controlId=\"formBasicEmail\">\n        <Form.Label>Email address</Form.Label>\n        <Form.Control type=\"email\" placeholder=\"Enter email\"/>\n        <Form.Text className=\"text-muted\">\n          We'll never share your email with anyone else.\n        </Form.Text>\n      </Form.Group>\n\n      <Form.Group controlId=\"formBasicPassword\">\n        <Form.Label>Password</Form.Label>\n        <Form.Control type=\"password\" placeholder=\"Password\" />\n      </Form.Group>\n      <Button variant=\"outline-success\" type=\"submit\" className=\"loginButton\" size=\"lg\">\n        Login\n      </Button>\n\n      <Button variant=\"outline-warning\" className=\"loginButton\" size=\"lg\">\n        <NavLink to=\"/signup\">Signup</NavLink>\n      </Button>\n    </Form>\n\n      </Row>\n\n\n    );\n  }\n}\n\nexport default AuthPage;\n","import React, {useState} from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\n// import FormCheck from 'react-bootstrap/FormCheck'\n// import { NavLink } from 'react-router-dom';\nimport Accordion from 'react-bootstrap/Accordion';\nimport AuthContext from '../../context/auth-context';\nimport DatePicker from \"react-datepicker\";\n\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport './CreateUserForm.css';\n\nconst CreateUserForm = (props) => {\n\n  console.log(\"CreateUserForm...\", {...props});\n  // const [startDate, setStartDate] = useState(new Date());\nreturn (\n<div className=\"CreateFormContainer\">\n<Form onSubmit={props.onConfirm}>\n<Form.Row>\n  <Form.Group as={Col} controlId=\"formGridEmail\">\n    <Form.Label>Email</Form.Label>\n    <Form.Control type=\"email\" placeholder=\"Enter email\"/>\n  </Form.Group>\n\n  <Form.Group as={Col} controlId=\"formGridPassword\">\n    <Form.Label>Password</Form.Label>\n    <Form.Control type=\"password\" placeholder=\"Password\"/>\n  </Form.Group>\n</Form.Row>\n\n<Form.Row>\n\n<Form.Group as={Col} controlId=\"formGridName\">\n  <Form.Label>Name</Form.Label>\n  <Form.Control type=\"text\" placeholder=\"Name\" />\n</Form.Group>\n\n\n<Form.Group as={Col} controlId=\"formGridRole\">\n  <Form.Label>Role</Form.Label>\n  <Form.Control as=\"select\">\n  <option>guest</option>\n  <option>nurse</option>\n  <option>doctor</option>\n  <option>staff</option>\n\n  </Form.Control>\n</Form.Group>\n\n<Form.Group as={Col} controlId=\"formGridPhone\">\n  <Form.Label>Phone</Form.Label>\n  <Form.Control type=\"number\" placeholder=\"phone\"/>\n</Form.Group>\n</Form.Row>\n\n<Form.Row>\n<Form.Group as={Col} controlId=\"formGridDob\">\n  <Form.Label>D.O.B</Form.Label>\n  <Form.Control type=\"date\" placeholder=\"dob\"/>\n</Form.Group>\n\n  {\n    // <DatePicker className=\"calendarDob\"\n    //   selected={startDate}\n    //   onChange={date => setStartDate(date)}\n    // />\n  }\n\n<Form.Group as={Col} controlId=\"formGridEmploymentDate\">\n  <Form.Label>Employment Date</Form.Label>\n  <Form.Control type=\"date\" placeholder=\"employmentDate\" />\n</Form.Group>\n\n<Form.Group as={Col} controlId=\"formGridTerminationDate\">\n  <Form.Label>Termination Date</Form.Label>\n  <Form.Control type=\"date\" placeholder=\"terminationDate\" />\n</Form.Group>\n</Form.Row>\n\n<Form.Row>\n<Form.Group as={Col} controlId=\"formGridAddressNumber\">\n  <Form.Label>addressNumber</Form.Label>\n  <Form.Control type=\"number\" placeholder=\"addressNumber\"/>\n</Form.Group>\n\n<Form.Group as={Col} controlId=\"formGridAddressStreet\">\n  <Form.Label>addressStreet</Form.Label>\n  <Form.Control type=\"text\" placeholder=\"addressStreet\"/>\n</Form.Group>\n\n<Form.Group as={Col} controlId=\"formGridAddressTown\">\n  <Form.Label>addressTown</Form.Label>\n  <Form.Control type=\"text\" placeholder=\"addressTown\"/>\n</Form.Group>\n</Form.Row>\n\n<Form.Row>\n<Form.Group as={Col} controlId=\"formGridAddressParish\">\n  <Form.Label>addressParish</Form.Label>\n  <Form.Control type=\"text\" placeholder=\"addressParish\"/>\n</Form.Group>\n<Form.Group as={Col} controlId=\"formGridAddressPostOffice\">\n  <Form.Label>addressPostOffice</Form.Label>\n  <Form.Control type=\"text\" placeholder=\"addressPostOffice\"/>\n</Form.Group>\n</Form.Row>\n\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"0\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n\n{props.canConfirm && (\n  <Button variant=\"success\" type=\"submit\">Create</Button>\n)}\n<p>{props.successText}</p>\n\n</Form>\n{\n  // <AuthContext.Consumer>\n// </AuthContext.Consumer>\n}\n</div>\n\n)};\n\nexport default CreateUserForm;\n","import React, { Component } from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\n\nimport AlertBox from '../components/AlertBox';\nimport CreateUserForm from '../components/Forms/CreateUserForm';\nimport './Auth.css';\n\nclass SignupPage extends Component {\n  state = {\n    success: \"Signup!!\",\n    userAlert: null,\n  };\n\n  modalConfirmHandler = (event) => {\n\n    event.preventDefault();\n    console.log(\"signing up...\");\n    console.log(\"CreateUserFormData:  \", event.target.formGridEmail.value);\n\n    this.setState({ creating: false });\n    const email = event.target.formGridEmail.value;\n    const password = event.target.formGridPassword.value;\n    const name = event.target.formGridName.value;\n    const role = event.target.formGridRole.value;\n    let dob = event.target.formGridDob.value;\n    let phone = event.target.formGridPhone.value;\n    let addressNumber = event.target.formGridAddressNumber.value;\n    let addressStreet = event.target.formGridAddressStreet.value;\n    let addressTown = event.target.formGridAddressTown.value;\n    let addressParish = event.target.formGridAddressParish.value;\n    let addressPostOffice = event.target.formGridAddressPostOffice.value;\n    let employmentDate = event.target.formGridEmploymentDate.value;\n    let terminationDate = event.target.formGridTerminationDate.value;\n\n    if (\n      email.trim().length === 0 ||\n      password.trim().length === 0 ||\n      name.trim().length === 0 ||\n      role.trim().length === 0 ||\n      dob.trim().length === 0 ||\n      phone.trim().length === 0 ||\n      addressNumber.trim().length === 0 ||\n      addressStreet.trim().length === 0 ||\n      addressTown.trim().length === 0 ||\n      addressParish.trim().length === 0 ||\n      addressPostOffice.trim().length === 0 ||\n      employmentDate.trim().length === 0 ||\n      terminationDate.trim().length === 0\n    ) {\n      console.log(\"blank fields detected!!!...Please try again...\");\n      this.setState({userAlert: \"blank fields detected!!!...Please try again...\"});\n      return;\n    }\n\n    const token = this.context.token;\n    const userId = this.context.userId;\n    const user = { email, password, name, role, dob, phone, addressNumber, addressStreet, addressTown, addressParish, addressPostOffice, employmentDate, terminationDate };\n\n    console.log(`\n      creating user...\n      userId: ${userId}\n      email: ${email},\n      password: ${password},\n      name: ${name},\n      role: ${role},\n      dob: ${dob},\n      phone: ${phone},\n      addressNumber: ${addressNumber},\n      addressStreet: ${addressStreet},\n      addressTown: ${addressTown},\n      addressParish: ${addressParish},\n      addressPostOffice: ${addressPostOffice},\n      employmentDate: ${employmentDate},\n      terminationDate: ${terminationDate},\n      `);\n      this.setState({userAlert: \"creating user...\"});\n\n    const requestBody = {\n      query: `\n          mutation {\n            createUser(userInput: {email:\"${email}\",password:\"${password}\",name:\"${name}\",role:\"${role}\",\n\n            employmentDate:\"${employmentDate}\",terminationDate:\"${terminationDate}\"})\n            {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}\n          }\n        `\n    };\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n        console.log(\"resData head slice:  \", JSON.stringify(resData).slice(2,7));\n        if (JSON.stringify(resData).slice(2,7) === 'error') {\n          console.log(\"signup...failed...\");\n          this.setState({success: \"Something went wrong!!!\" });\n        } else {\n          this.setState({success: \"Signup success...Proceed to login\" });\n          console.log(this.state.success);\n        }\n        this.setState({userAlert: JSON.stringify(resData).slice(2,7)})\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n\n      <Row>\n      <AlertBox\n        authUserId={this.context.userId}\n        alert={this.state.userAlert}\n      />\n\n      <Col className=\"signupRow\" md={8}>\n        <CreateUserForm\n          canConfirm\n          onConfirm={this.modalConfirmHandler}\n          onSubmit={this.modalConfirmHandler}\n          confirmText=\"Confirm\"\n          successText={this.state.success}\n        />\n      </Col>\n      </Row>\n\n      </React.Fragment>\n    );\n  }\n}\n\nexport default SignupPage;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\n\nimport './UserItem.css';\n\nconst userItem = props => (\n  <li key={props.userId} className=\"users__list-item\">\n    <div>\n      <h5 className=\"userItemHeading\"> Name:</h5>\n      <p className=\"userItemText\">\n        {props.name}\n      </p>\n      <h5 className=\"userItemHeading\"> Role:</h5>\n      <p className=\"userItemText\">\n        {props.role}\n      </p>\n    </div>\n    <div>\n    <Button variant=\"primary\" onClick={props.onDetail.bind(this, props._id)}>\n          Details\n        </Button>\n    </div>\n  </li>\n);\n\nexport default userItem;\n","import React from 'react';\n\nimport UserItem from './UserItem/UserItem';\nimport './UserList.css';\n\nconst userList = props => {\n  \n  const users = props.users.map(user => {\n    return (\n      <UserItem\n        key={user._id}\n        userId={props.authUserId}\n        _id={user._id}\n        name={user.name}\n        email={user.email}\n        role={user.role}\n        onDetail={props.onViewDetail}\n      />\n    );\n  });\n\n  return <ul className=\"user__list1\">{users}</ul>;\n};\n\nexport default userList;\n","import React from 'react';\n// import { NavLink } from 'react-router-dom';\nimport Button from 'react-bootstrap/Button';\n\nimport './UserItem.css';\n\nconst searchUserItem = props => (\n  <li key={props.userId} className=\"users__list-item\">\n    <div>\n      <p className=\"userItemHeading\"> Name:</p>\n      <p className=\"userItemText\">\n        {props.name}\n      </p>\n      <p className=\"userItemHeading\"> Role:</p>\n      <p className=\"userItemText\">\n        {props.role}\n      </p>\n    </div>\n    <div>\n    <Button variant=\"primary\" onClick={props.onDetail.bind(this, props._id)}>\n          Details\n        </Button>\n    </div>\n  </li>\n);\n\nexport default searchUserItem;\n","import React from 'react';\nimport Accordion from 'react-bootstrap/Accordion';\nimport Button from 'react-bootstrap/Button';\n\nimport SearchUserItem from './UserItem/SearchUserItem';\nimport './UserList.css';\n\nconst searchUserList = props => {\n  console.log(\" search user list:  \", props.searchUsers);\n  \n  const searchUsers = props.searchUsers.map(user => {\n    return (\n      <React.Fragment>\n      <SearchUserItem\n        key={user._id}\n        userId={props.authUserId}\n        _id={user._id}\n        name={user.name}\n        email={user.email}\n        role={user.role}\n        onDetail={props.onViewDetail}\n      />\n      </React.Fragment>\n    );\n  });\n  return <ul className=\"user__list1\">{searchUsers}</ul>;\n};\n\nexport default searchUserList;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport './UserItem.css';\n\nconst userAttendanceItem = props => (\n  <li key={props.userId} className=\"users__list-item\">\n    <div>\n      <p> Date: {props.date}</p>\n      <p>\n        Status: {props.status}\n      </p>\n      <p>\n        Description: {props.description}\n      </p>\n    </div>\n    { props.canDelete === true && (\n      <Button variant=\"danger\" onClick={props.onDelete.bind(this, props.attendance)}>\n        Delete\n      </Button>\n    )}\n  </li>\n);\n\nexport default userAttendanceItem;\n","import React from 'react';\nimport moment from 'moment';\n\nimport UserAttendanceItem from './UserItem/UserAttendanceItem';\nimport './UserList.css';\n\nconst userAttendanceList = props => {\n  console.log(\"user attendance list props\", props.userAttendance);\n\n  const userAttendance = props.userAttendance.map(attendance => {\n    let userAttendanceDate = attendance.date;\n    if (userAttendanceDate !== null) {\n      userAttendanceDate = new Date (attendance.date.substr(0,10)*1000).toISOString().slice(0,10);\n      console.log(\"userAttendanceDate\", userAttendanceDate);\n    }\n\n    // const userAttendanceDate = new Date (attendance.date.substr(0,10)*1000).toLocaleString();\n    // const userAttendanceDate = new Date (attendance.date.substr(0,10)*1000).toUTCString();\n    // console.log(\"userAttendanceDate\", userAttendanceDate);\n\n    return (\n      <UserAttendanceItem\n        key={attendance.date}\n        userId={props.authUserId}\n        date={userAttendanceDate}\n        status={attendance.status}\n        description={attendance.description}\n        canDelete={props.canDelete}\n        onDelete={props.onDelete}\n        attendance={attendance}\n      />\n    );\n  });\n\n  return <ul className=\"user__list1\">{userAttendance}</ul>;\n};\n\nexport default userAttendanceList;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\n\n\nimport './UserItem.css';\n\nconst userLeaveItem = props => (\n  <li key={props.userId} className=\"users__list-item\">\n    <div>\n      <p> Type: {props.type}</p>\n      <p>\n        From: {props.startDate}\n      </p>\n      <p>\n        To: {props.endDate}\n      </p>\n    </div>\n    { props.canDelete === true && (\n      <Button variant=\"danger\" onClick={props.onDelete.bind(this, props.leave)}>\n        Delete\n      </Button>\n    )}\n  </li>\n);\n\nexport default userLeaveItem;\n","import React from 'react';\nimport moment from 'moment';\n\n\nimport UserLeaveItem from './UserItem/UserLeaveItem';\nimport './UserList.css';\n\nconst userLeaveList = props => {\n  console.log(\"user leave list props\", props.userLeave);\n  const userLeave = props.userLeave.map(leave => {\n    const userLeaveStartDate = new Date (leave.startDate.substr(0,10)*1000).toISOString().slice(0,10);\n    const userLeaveEndDate = new Date (leave.endDate.substr(0,10)*1000).toISOString().slice(0,10);\n    // const userAttendanceDate = new Date (attendance.date.substr(0,10)*1000).toUTCString();\n    return (\n      <UserLeaveItem\n        key={leave.type}\n        userId={props.authUserId}\n        type={leave.type}\n        startDate={userLeaveStartDate}\n        endDate={userLeaveEndDate}\n        description={leave.description}\n        canDelete={props.canDelete}\n        onDelete={props.onDelete}\n        leave={leave}\n      />\n    );\n  });\n\n  return <ul className=\"user__list1\">{userLeave}</ul>;\n};\n\nexport default userLeaveList;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\n// import { NavLink } from 'react-router-dom';\n\nimport './UserItem.css';\n\nconst userAttachmentItem = props => (\n  <li key={props.userId} className=\"users__list-item\">\n    <div>\n      <p> Name: {props.name}</p>\n      <p>\n        Format: {props.format}\n      </p>\n      <p>\n        Path: {props.path}\n      </p>\n\n    </div>\n    { props.canDelete === true && (\n      <Button variant=\"danger\" onClick={props.onDelete.bind(this, props.attachment)}>\n        Delete\n      </Button>\n    )}\n  </li>\n);\n\nexport default userAttachmentItem;\n","import React from 'react';\n\nimport UserAttachmentItem from './UserItem/UserAttachmentItem';\nimport './UserList.css';\n\nconst userAttachmentList = props => {\n  console.log(\"user attachment list props\", props.userAttachment);\n  const userAttachment = props.userAttachment.map(attachment => {\n    return (\n      <UserAttachmentItem\n        key={attachment.name}\n        userId={props.authUserId}\n        name={attachment.name}\n        format={attachment.format}\n        path={attachment.path}\n        canDelete={props.canDelete}\n        onDelete={props.onDelete}\n        attachment={attachment}\n      />\n    );\n  });\n\n  return <ul className=\"user__list1\">{userAttachment}</ul>;\n};\n\nexport default userAttachmentList;\n","import React from 'react';\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\nimport Accordion from 'react-bootstrap/Accordion';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\n\nimport UserAttendanceList from './UserList/UserAttendanceList';\nimport UserLeaveList from './UserList/UserLeaveList';\nimport UserAttachmentList from './UserList/UserAttachmentList';\nimport AuthContext from '../../context/auth-context';\n\nimport './UserDetail.css';\n\nconst UserDetail = (props) => {\n\n  const {...user} = props.user;\n  const authUserId = props.authUserId;\n  const userAttendance = user.attendance;\n  const userLeave = user.leave;\n  const userAttachment = user.attachments;\n  const authSelectedUser = JSON.stringify(props.AuthContext.selectedUser);\n  const userEmploymentDate = new Date(user.employmentDate.substr(0,10)*1000).toISOString().slice(0,10);\n  const userTerminationDate = new Date(user.terminationDate.substr(0,10)*1000).toISOString().slice(0,10);\n\n  // console.log(\"user attendance:  \", userAttendance, authSelectedUser.slice(0,5) === '{\"_id' , authSelectedUser.slice(0,5));\n  console.log(\"UserDetail.props.authUserId:  \",authUserId, \"  UserDetail.props.user:  \", {...user});\n\n  return (\n    <div className={\"UserDetailBox1\"}>\n\n    <Tabs defaultActiveKey=\"profile\" id=\"uncontrolled-tab-example\" className=\"tab\">\n      <Tab eventKey=\"\" title=\"Details:\" disabled>\n      </Tab>\n      <Tab eventKey=\"Demographics\" title=\"Demographics\">\n      <Card className=\"UserDetailCard\">\n      <Card.Body>\n        <Card.Title>User Details</Card.Title>\n        <Card.Text>\n          ID: {user._id}\n        </Card.Text>\n        <Card.Text>\n          Name: {user.name}\n        </Card.Text>\n        <Card.Text>\n          Email: {user.email}\n        </Card.Text>\n        <Card.Text>\n          Phone: {user.phone}\n        </Card.Text>\n        <Card.Text>\n          Role: {user.role}\n        </Card.Text>\n        <Card.Text>\n          Start Date: {userEmploymentDate}\n        </Card.Text>\n        <Card.Text>\n          End Date: {userTerminationDate}\n        </Card.Text>\n        { props.canDelete === true && (\n          <Button variant=\"danger\" onClick={props.onDelete}>\n            Delete Staff !!??\n          </Button>\n        )}\n      </Card.Body>\n      </Card>\n      </Tab>\n      <Tab eventKey=\"Attendance\" title=\"Attendance\">\n      <UserAttendanceList\n          userAttendance={userAttendance}\n          authUserId={props.AuthContext.userId}\n          canDelete={props.canDelete}\n          onDelete={props.attendanceDelete}\n        />\n      </Tab>\n      <Tab eventKey=\"Leave\" title=\"Leave\">\n      <UserLeaveList\n          userLeave={userLeave}\n          authUserId={props.AuthContext.userId}\n          canDelete={props.canDelete}\n          onDelete={props.leaveDelete}\n        />\n      </Tab>\n      <Tab eventKey=\"Attachments\" title=\"Attachments\">\n      <UserAttachmentList\n          userAttachment={userAttachment}\n          authUserId={props.AuthContext.userId}\n          canDelete={props.canDelete}\n          onDelete={props.attachmentDelete}\n        />\n      </Tab>\n    </Tabs>\n\n    </div>\n\n  );\n}\n\nexport default UserDetail;\n","import React from 'react';\n\nimport './Spinner.css';\n\nconst spinner = () => (\n  <div className=\"spinner\">\n    <div className=\"lds-dual-ring\" />\n  </div>\n);\n\nexport default spinner;\n","import React from 'react';\n\nimport './UserItem.css';\n\n\nconst appointmentTodayItem = props => (\n  <li key={props.userId} className=\"users__list-item\">\n    <div>\n      <p>\n        Time: {props.time}\n      </p>\n      <p>\n        Title: {props.title}\n      </p>\n      <p>\n        Date: {props.date}\n      </p>\n    </div>\n  </li>\n);\n\nexport default appointmentTodayItem;\n","import React from 'react';\n\nimport AppointmentTodayItem from './AppointmentItem/AppointmentTodayItem';\nimport './UserList.css';\n\nconst appointmentTodayList = props => {\n  console.log(\"patient Today list props\", props.appointmentToday);\n  const appointmentToday = props.appointmentToday.map(appointment => {\n    const appointmentTodayDate = new Date(appointment.date.substr(0,10)*1000).toISOString().slice(0,10);\n    return (\n      <AppointmentTodayItem\n        key={appointment.date}\n        userId={props.authUserId}\n        date={appointmentTodayDate}\n        title={appointment.title}\n        date={appointment.date}\n        time={appointment.time}\n      />\n    );\n  });\n\n  return <ul className=\"user__list1\">{appointmentToday}</ul>;\n};\n\nexport default appointmentTodayList;\n","import React from 'react';\n\nimport './UserItem.css';\n\n\nconst appointmentInProgressItem = props => (\n  <li key={props.userId} className=\"users__list-item\">\n    <div>\n      <p>\n        Time: {props.time}\n      </p>\n      <p>\n        Title: {props.title}\n      </p>\n      <p>\n        Date: {props.date}\n      </p>\n    </div>\n  </li>\n);\n\nexport default appointmentInProgressItem;\n","import React from 'react';\n\nimport AppointmentInProgressItem from './AppointmentItem/AppointmentInProgressItem';\nimport './UserList.css';\n\nconst appointmentInProgressList = props => {\n  console.log(\"patient InProgress list props\", props.appointmentInProgress);\n  const appointmentInProgress = props.appointmentInProgress.map(appointment => {\n    const appointmentInProgressDate = new Date(appointment.date.substr(0,10)*1000).toISOString().slice(0,10);\n    return (\n      <AppointmentInProgressItem\n        key={appointment.date}\n        userId={props.authUserId}\n        date={appointmentInProgressDate}\n        title={appointment.title}\n        date={appointment.date}\n        time={appointment.time}\n      />\n    );\n  });\n\n  return <ul className=\"user__list1\">{appointmentInProgress}</ul>;\n};\n\nexport default appointmentInProgressList;\n","import ReactDOM from 'react-dom';\nimport React, { Component } from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Button from 'react-bootstrap/Button';\nimport Accordion from 'react-bootstrap/Accordion';\nimport Card from 'react-bootstrap/Card';\n\n\nimport AppointmentTodayList from '../components/Appointments/AppointmentList/AppointmentTodayList';\nimport AppointmentInProgressList from '../components/Appointments/AppointmentList/AppointmentInProgressList';\n\n// import Modal from '../components/Modal/Modal';\n// import Backdrop from '../components/Backdrop/Backdrop';\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\nimport './Sidebar.css';\n\nclass SidebarPage extends Component {\n  state = {\n    authContext: AuthContext._currentValue,\n  };\n  isActive = true;\n\n  static contextType = AuthContext;\n\n  constructor(props) {\n    super(props);\n    // this.appointmentsToday = this.context.appointmentsToday;\n    // this.appointmentsWeekImportant = this.context.appointmentsWeekImportant;\n    // this.appointmentsInprogress = this.context.appointmentsInprogress;\n  }\n\n\n\n\n  componentDidMount() {\n    console.log(\"state:  \", this.state.authContext);\n    // console.log(\"context:  \", AuthContext._currentValue);\n    // run get today appts func and req\n  }\n\n\n  componentWillUnmount() {\n    this.isActive = false;\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n      <Container className=\"sidebarContainer\">\n      <Row className=\"\">\n      <Col md={12} className=\"\">\n\n      <Card border=\"primary\" className=\"sidebarCard\">\n      <Card.Body>\n        <Card.Title>You</Card.Title>\n        <Card.Subtitle className=\"mb-2 text-muted\">ID:</Card.Subtitle>\n        <Card.Text>\n          {this.context.user._id}\n        </Card.Text>\n        <Card.Subtitle className=\"mb-2 text-muted\">Name:</Card.Subtitle>\n        <Card.Text>\n          {this.context.user.name}\n        </Card.Text>\n        <Card.Subtitle className=\"mb-2 text-muted\">Role:</Card.Subtitle>\n        <Card.Text>\n          {this.context.user.role}\n        </Card.Text>\n      </Card.Body>\n      </Card>\n\n      <Card border=\"secondary\" className=\"sidebarCard\">\n      <Card.Body>\n        <Card.Title>Selection</Card.Title>\n        <Card.Subtitle className=\"mb-2 text-muted\">Staff:</Card.Subtitle>\n        <Card.Text>\n          {this.context.selectedUser.name}\n        </Card.Text>\n        <Card.Subtitle className=\"mb-2 text-muted\">Patient:</Card.Subtitle>\n        <Card.Text>\n          {this.context.selectedPatient.name}\n        </Card.Text>\n        <Card.Subtitle className=\"mb-2 text-muted\">Appointment:</Card.Subtitle>\n        <Card.Text>\n          {this.context.selectedAppointment.title}\n        </Card.Text>\n      </Card.Body>\n      </Card>\n      </Col>\n      </Row>\n      <Row className=\"\">\n      <Col md={12} className=\"apptSidebarRow\">\n      <p>Appointments Today</p>\n      {this.context.appointmentsToday === null && (\n        <Button variant=\"outline-warning\">\n          Check the Appointments page to load\n        </Button>\n      )}\n      {this.context.appointmentsToday !== null && (\n\n        <AppointmentTodayList\n          appointmentToday={this.context.appointmentsToday}\n          authUserId={this.context.userId}\n          />\n      )}\n\n      </Col>\n      </Row>\n      <Row className=\"apptSidebarRow\">\n      <Col md={12} className=\"\">\n      <p>Appointments InProgress</p>\n      {this.context.appointmentsToday === null && (\n        <Button variant=\"outline-warning\">\n          Check the Appointments page to load\n        </Button>\n      )}\n      {this.context.appointmentsInProgress !== null && (\n\n        <AppointmentInProgressList\n          appointmentInProgress={this.context.appointmentsInProgress}\n          authUserId={this.context.userId}\n          />\n      )}\n\n      </Col>\n      </Row>\n      </Container>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default SidebarPage;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Accordion from 'react-bootstrap/Accordion'\n// import FormCheck from 'react-bootstrap/FormCheck'\n// import AuthContext from '../../context/auth-context';\nimport DatePicker from \"react-datepicker\";\n\nimport './CreateUserForm.css';\n\nconst UpdateUserForm = (props) => {\n\nconsole.log(\"UpdateUserForm.props:  \", {...props});\nconst {...user} = props.user;\nconsole.log(\"UpdateUserForm.props.user:  \", {...user});\n// const [startDate, setStartDate] = useState(new Date());\n\nreturn (\n<div className=\"UpdateFormContainer\">\n<Form onSubmit={props.onConfirm}>\n<Form.Row>\n  <Form.Group as={Col} controlId=\"formGridEmail\">\n    <Form.Label>Email</Form.Label>\n    <Form.Control type=\"email\" placeholder={user.email}/>\n  </Form.Group>\n\n  <Form.Group as={Col} controlId=\"formGridPassword\">\n    <Form.Label>Password</Form.Label>\n    <Form.Control type=\"password\" placeholder={user.password}/>\n  </Form.Group>\n</Form.Row>\n\n<Form.Row>\n\n<Form.Group as={Col} controlId=\"formGridName\">\n  <Form.Label>Name</Form.Label>\n  <Form.Control type=\"text\" placeholder={user.name}/>\n</Form.Group>\n{\n  // <Form.Group as={Col} controlId=\"formGridRole\">\n  //   <Form.Label>Role</Form.Label>\n  //   <Form.Control type=\"text\" placeholder={user.role}/>\n  // </Form.Group>\n}\n\n<Form.Group as={Col} controlId=\"formGridPhone\">\n  <Form.Label>Phone</Form.Label>\n  <Form.Control type=\"number\" placeholder={user.phone}/>\n</Form.Group>\n</Form.Row>\n\n<Form.Row>\n<Form.Group as={Col} controlId=\"formGridDob\">\n  <Form.Label>D.O.B</Form.Label>\n  <Form.Control type=\"date\" placeholder={user.dob}/>\n</Form.Group>\n\n{\n  // <DatePicker className=\"calendarDob\"\n  //   selected={startDate}\n  //   onChange={date => setStartDate(date)}\n  // />\n}\n\n<Form.Group as={Col} controlId=\"formGridEmploymentDate\">\n  <Form.Label>Employment Date</Form.Label>\n  <Form.Control type=\"date\" placeholder={user.employmentDate}/>\n</Form.Group>\n\n<Form.Group as={Col} controlId=\"formGridTerminationDate\">\n  <Form.Label>Termination Date</Form.Label>\n  <Form.Control type=\"date\" placeholder={user.terminationDate}/>\n</Form.Group>\n</Form.Row>\n\n<Form.Row>\n<Form.Group as={Col} controlId=\"formGridAddressNumber\">\n  <Form.Label>addressNumber</Form.Label>\n  <Form.Control type=\"number\" placeholder={user.address.number}/>\n</Form.Group>\n\n<Form.Group as={Col} controlId=\"formGridAddressStreet\">\n  <Form.Label>addressStreet</Form.Label>\n  <Form.Control type=\"text\" placeholder={user.address.street}/>\n</Form.Group>\n\n<Form.Group as={Col} controlId=\"formGridAddressTown\">\n  <Form.Label>addressTown</Form.Label>\n  <Form.Control type=\"text\" placeholder={user.address.town}/>\n</Form.Group>\n</Form.Row>\n\n<Form.Row>\n<Form.Group as={Col} controlId=\"formGridAddressParish\">\n  <Form.Label>addressParish</Form.Label>\n  <Form.Control type=\"text\" placeholder={user.address.parish}/>\n</Form.Group>\n<Form.Group as={Col} controlId=\"formGridAddressPostOffice\">\n  <Form.Label>addressPostOffice</Form.Label>\n  <Form.Control type=\"text\" placeholder={user.address.postOffice}/>\n</Form.Group>\n</Form.Row>\n\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"1\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n{props.canCancelProfile && (\n  <Button variant=\"danger\" onClick={props.onCancel} >\n  Cancel\n  </Button>\n)}\n\n{props.canConfirm && (\n  <Accordion.Toggle as={Button} variant=\"success\" eventKey=\"0\" className=\"btn\" type=\"submit\">\n  Submit\n  </Accordion.Toggle>\n)}\n\n</Form>\n{\n  // <AuthContext.Consumer>\n// </AuthContext.Consumer>\n}\n</div>\n\n)};\n\nexport default UpdateUserForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Accordion from 'react-bootstrap/Accordion'\n// import FormCheck from 'react-bootstrap/FormCheck'\n// import AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst UpdateUserFieldForm = (props) => {\n\nconsole.log(\"UpdateUserFieldForm.props:  \", {...props});\nconst {...user} = props.user;\nconsole.log(\"UpdateUserFieldForm.props.user:  \", {...user});\n\nreturn (\n<div className=\"UpdateFormContainer\">\n<Form onSubmit={props.onConfirm}>\n<Form.Row>\n  <Form.Group as={Col} controlId=\"formGridFieldSelect\">\n  <Form.Label>Field Options</Form.Label>\n  <Form.Control as=\"select\">\n    <option>select</option>\n    <option>email</option>\n    <option>password</option>\n    <option>name</option>\n    <option>dob</option>\n    <option>phone</option>\n    <option>address.town</option>\n    <option>address.parish</option>\n    <option>employmentDate</option>\n    <option>terminationDate</option>\n  </Form.Control>\n  </Form.Group>\n    <Form.Group as={Col} controlId=\"formGridField\">\n    <Form.Label>Field</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"Query\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridQuery\">\n    <Form.Label>Query</Form.Label>\n    <Form.Label>Date Format YYYY-MM-DD</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"Query\"/>\n  </Form.Group>\n</Form.Row>\n\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"2\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n{props.canCancelProfile && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"5\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n\n{props.canConfirm && (\n  // <Accordion.Toggle as={Button} variant=\"success\" eventKey=\"2\" className=\"btn\" type=\"submit\">\n  // Submit\n  // </Accordion.Toggle>\n  <Button variant=\"success\" type=\"submit\">\n  Submit\n  </Button>\n)}\n\n</Form>\n{\n  // <AuthContext.Consumer>\n// </AuthContext.Consumer>\n}\n</div>\n\n)};\n\nexport default UpdateUserFieldForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Accordion from 'react-bootstrap/Accordion'\n// import FormCheck from 'react-bootstrap/FormCheck'\n// import AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst UpdateUserAttendanceForm = (props) => {\n\nconsole.log(\"UpdateUserAttendanceForm.props:  \", {...props});\nconst {...user} = props.user;\nconsole.log(\"UpdateUserAttendanceForm.props.user:  \", {...user});\n\n\nreturn (\n<div className=\"UpdateFormContainer\">\n<Form onSubmit={props.onConfirm}>\n\n<Form.Row>\n  <Form.Group as={Col} controlId=\"formGridAttendanceDate\">\n    <Form.Label>Date</Form.Label>\n    <Form.Control type=\"date\" placeholder=\"Attendance Date\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridAttendanceStatus\">\n    <Form.Label>Status</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"Attendance Status\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridAttendanceDescription\">\n    <Form.Label>Description</Form.Label>\n    <Form.Control as=\"textarea\" rows=\"3\" placeholder=\"Attendance Description\"/>\n  </Form.Group>\n</Form.Row>\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"2\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n{props.canCancelProfile && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"5\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n\n{props.canConfirm && (\n  <Accordion.Toggle as={Button} variant=\"success\" eventKey=\"2\" className=\"btn\" type=\"submit\">\n  Submit\n  </Accordion.Toggle>\n)}\n\n</Form>\n{\n  // <AuthContext.Consumer>\n// </AuthContext.Consumer>\n}\n</div>\n\n)};\n\nexport default UpdateUserAttendanceForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Accordion from 'react-bootstrap/Accordion'\n// import FormCheck from 'react-bootstrap/FormCheck'\n// import AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst UpdateUserAttachmentForm = (props) => {\n\nconsole.log(\"UpdateUserLeaveForm.props:  \", {...props});\nconst {...user} = props.user;\nconsole.log(\"UpdateUserLeaveForm.props.user:  \", {...user});\n\n\nreturn (\n<div className=\"UpdateFormContainer\">\n<Form onSubmit={props.onConfirm}>\n<Form.Row>\n  <Form.Group as={Col} controlId=\"formGridAttachmentName\">\n    <Form.Label>Filename</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"Filename\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridAttachmentFormat\">\n    <Form.Label>Format</Form.Label>\n    <Form.Control type=\"string\" placeholder=\"File format\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridAttachmentPath\">\n    <Form.Label>File path</Form.Label>\n    <Form.Control type=\"string\" placeholder=\"File path\"/>\n  </Form.Group>\n\n</Form.Row>\n\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"2\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n{props.canCancelProfile && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"5\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n\n{props.canConfirm && (\n  <Button variant=\"success\" type=\"submit\">Add</Button>\n)}\n\n</Form>\n{\n  // <AuthContext.Consumer>\n// </AuthContext.Consumer>\n}\n</div>\n\n)};\n\nexport default UpdateUserAttachmentForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Accordion from 'react-bootstrap/Accordion'\n// import FormCheck from 'react-bootstrap/FormCheck'\n// import AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst UpdateUserLeaveForm = (props) => {\n\nconsole.log(\"UpdateUserLeaveForm.props:  \", {...props});\nconst {...user} = props.user;\nconsole.log(\"UpdateUserLeaveForm.props.user:  \", {...user});\n\n\nreturn (\n<div className=\"UpdateFormContainer\">\n<Form onSubmit={props.onConfirm}>\n<Form.Row>\n  <Form.Group as={Col} controlId=\"formGridLeaveType\">\n    <Form.Label>Type</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"Leave Type\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridLeaveTitle\">\n    <Form.Label>Title</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"Leave Title\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridLeaveStartDate\">\n    <Form.Label>Start Date</Form.Label>\n    <Form.Control type=\"date\" placeholder=\"Start Date\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridLeaveEndDate\">\n    <Form.Label>End Date</Form.Label>\n    <Form.Control type=\"date\" placeholder=\"End Date\"/>\n  </Form.Group>\n\n</Form.Row>\n\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"2\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n{props.canCancelProfile && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"5\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n\n{props.canConfirm && (\n  <Accordion.Toggle as={Button} variant=\"success\" eventKey=\"2\" className=\"btn\" type=\"submit\">\n  Submit\n  </Accordion.Toggle>\n)}\n\n</Form>\n{\n  // <AuthContext.Consumer>\n// </AuthContext.Consumer>\n}\n</div>\n\n)};\n\nexport default UpdateUserLeaveForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Accordion from 'react-bootstrap/Accordion'\n// import AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst SearchUserForm = (props) => {\n// const {...search} = props.search;\n\nreturn (\n<div className=\"SearchFormContainer\">\n  <Form onSubmit={props.onConfirm}>\n<Form.Group controlId=\"formBasicFieldSelect\">\n<Form.Label>Field</Form.Label>\n<Form.Control as=\"select\">\n<option>select</option>\n<option>email</option>\n<option>password</option>\n<option>name</option>\n<option>dob</option>\n<option>phone</option>\n<option>address.town</option>\n<option>address.parish</option>\n<option>role</option>\n<option>employmentDate</option>\n<option>terminationDate</option>\n</Form.Control>\n<Form.Text className=\"text-muted\">\n</Form.Text>\n</Form.Group>\n\n<Form.Group controlId=\"formBasicField\">\n<Form.Label>Field</Form.Label>\n<Form.Control type=\"textarea\" rows=\"5\" placeholder=\"Field\"/>\n</Form.Group>\n\n<Form.Group controlId=\"formBasicQuery\">\n<Form.Label>Query</Form.Label>\n<Form.Control type=\"textarea\" rows=\"5\" placeholder=\"Query\"/>\n</Form.Group>\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"3\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n\n{props.canConfirm && (\n  <Accordion.Toggle as={Button} variant=\"success\" eventKey=\"3\" className=\"btn\" type=\"submit\">\n  Search\n  </Accordion.Toggle>\n)}\n\n{\n// <AuthContext.Consumer>\n// </AuthContext.Consumer>\n\n\n// populate feilds with user object fields\n}\n</Form>\n</div>\n\n\n)};\n\nexport default SearchUserForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Accordion from 'react-bootstrap/Accordion'\n// import AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst SearchUserIdForm = (props) => {\n// const {...search} = props.search;\n\nreturn (\n<div className=\"SearchFormContainer\">\n  <Form onSubmit={props.onConfirm}>\n\n<Form.Group controlId=\"formBasicId\">\n<Form.Label>Id</Form.Label>\n<Form.Control type=\"text\" placeholder=\"Id\"/>\n</Form.Group>\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"3\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n\n{props.canConfirm && (\n  <Accordion.Toggle as={Button} variant=\"success\" eventKey=\"3\" className=\"btn\" type=\"submit\">\n  Search\n  </Accordion.Toggle>\n)}\n\n{\n// <AuthContext.Consumer>\n// </AuthContext.Consumer>\n}\n</Form>\n</div>\n\n\n)};\n\nexport default SearchUserIdForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Accordion from 'react-bootstrap/Accordion'\n// import AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst SearchUserNameForm = (props) => {\n// const {...search} = props.search;\n\nreturn (\n<div className=\"SearchFormContainer\">\n  <Form onSubmit={props.onConfirm}>\n\n  <Form.Group controlId=\"formBasicName\">\n  <Form.Label>Name</Form.Label>\n  <Form.Control type=\"text\" placeholder=\"Name\"/>\n  </Form.Group>\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"3\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n\n{props.canConfirm && (\n  <Accordion.Toggle as={Button} variant=\"success\" eventKey=\"3\" className=\"btn\" type=\"submit\">\n  Search\n  </Accordion.Toggle>\n)}\n\n{\n// <AuthContext.Consumer>\n// </AuthContext.Consumer>\n}\n</Form>\n</div>\n\n\n)};\n\nexport default SearchUserNameForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Accordion from 'react-bootstrap/Accordion'\n// import AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst SearchUserAttendanceDateForm = (props) => {\n// const {...search} = props.search;\n\nreturn (\n<div className=\"SearchFormContainer\">\n  <Form onSubmit={props.onConfirm}>\n\n<Form.Group controlId=\"formBasicDate\">\n<Form.Label>Attendance Date</Form.Label>\n<Form.Control type=\"date\" placeholder=\"Date\"/>\n</Form.Group>\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"3\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n\n{props.canConfirm && (\n  <Accordion.Toggle as={Button} variant=\"success\" eventKey=\"3\" className=\"btn\" type=\"submit\">\n  Search\n  </Accordion.Toggle>\n)}\n\n{\n// <AuthContext.Consumer>\n// </AuthContext.Consumer>\n}\n</Form>\n</div>\n\n\n)};\n\nexport default SearchUserAttendanceDateForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Accordion from 'react-bootstrap/Accordion'\n// import AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst SearchUserLeaveDateRangeForm = (props) => {\n// const {...search} = props.search;\n\nreturn (\n<div className=\"SearchFormContainer\">\n  <Form onSubmit={props.onConfirm}>\n\n<Form.Group controlId=\"formBasicStartDate\">\n<Form.Label>Start Date</Form.Label>\n<Form.Control type=\"date\" placeholder=\"StartDate\"/>\n</Form.Group>\n\n<Form.Group controlId=\"formBasicEndDate\">\n<Form.Label>End Date</Form.Label>\n<Form.Control type=\"date\" placeholder=\"EndDate\"/>\n</Form.Group>\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"3\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n\n{props.canConfirm && (\n  <Accordion.Toggle as={Button} variant=\"success\" eventKey=\"3\" className=\"btn\" type=\"submit\">\n  Search\n  </Accordion.Toggle>\n)}\n\n{\n// <AuthContext.Consumer>\n// </AuthContext.Consumer>\n}\n</Form>\n</div>\n\n\n)};\n\nexport default SearchUserLeaveDateRangeForm;\n","\n\nimport React, { Component } from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n// import Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Accordion from 'react-bootstrap/Accordion';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\nimport Card from 'react-bootstrap/Card';\n\n// import Modal from '../components/Modal/Modal';\n// import Backdrop from '../components/Backdrop/Backdrop';\nimport UserList from '../components/Users/UserList/UserList';\nimport SearchUserList from '../components/Users/UserList/SearchUserList';\nimport UserDetail from '../components/Users/UserDetail';\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\n\nimport SidebarPage from './Sidebar';\nimport AlertBox from '../components/AlertBox';\n\nimport CreateUserForm from '../components/Forms/CreateUserForm';\nimport UpdateUserForm from '../components/Forms/UpdateUserForm';\nimport UpdateUserFieldForm from '../components/Forms/UpdateUserFieldForm';\nimport UpdateUserAttendanceForm from '../components/Forms/UpdateUserAttendanceForm';\nimport UpdateUserAttachmentForm from '../components/Forms/UpdateUserAttachmentForm';\nimport UpdateUserLeaveForm from '../components/Forms/UpdateUserLeaveForm';\nimport SearchUserForm from '../components/Forms/SearchUserForm';\nimport SearchUserIdForm from '../components/Forms/SearchUserIdForm';\nimport SearchUserNameForm from '../components/Forms/SearchUserNameForm';\nimport SearchUserAttendanceDateForm from '../components/Forms/SearchUserAttendanceDateForm';\nimport SearchUserLeaveDateRangeForm from '../components/Forms/SearchUserLeaveDateRangeForm';\nimport './Users.css';\n\nclass UsersPage extends Component {\n  state = {\n    creating: false,\n    updating: false,\n    deleting: false,\n    searching: false,\n    users: [],\n    searchUsers: [],\n    isLoading: false,\n    isSorting: false,\n    selectedUser: null,\n    userUpdateField: null,\n    userSearchField: null,\n    userSearchQuery: null,\n    canDelete: null,\n    userAlert: null,\n  };\n  isActive = true;\n\n  static contextType = AuthContext;\n\n  // constructor(props) {\n  //   super(props);\n  // }\n\n  componentDidMount() {\n    this.fetchUsers();\n    if (this.context.user.name === 'admin579'){\n      this.setState({canDelete: true})\n    }\n  }\n\n\n  startCreateUserHandler = () => {\n    this.setState({ creating: true });\n    console.log(\"CreateUserForm...\");\n  };\n  startUpdateUserHandler = () => {\n    this.setState({ updating: true });\n    console.log(\"UpdateUserForm...\");\n  };\n\n  startSearchUserHandler = () => {\n    this.setState({ searching: true });\n    console.log(\"SearchUserForm...\");\n  };\n\n  modalConfirmHandler = (event) => {\n    console.log(`\n      event: ${JSON.stringify(event)},\n      `);\n\n    console.log(\"CreateUserFormData:  \", event.target.formGridEmail.value);\n\n    this.setState({ creating: false });\n    const email = event.target.formGridEmail.value;\n    const password = event.target.formGridPassword.value;\n    const name = event.target.formGridName.value;\n    const role = event.target.formGridRole.value;\n    let dob = event.target.formGridDob.value;\n    let phone = event.target.formGridPhone.value;\n    let addressNumber = event.target.formGridAddressNumber.value;\n    let addressStreet = event.target.formGridAddressStreet.value;\n    let addressTown = event.target.formGridAddressTown.value;\n    let addressParish = event.target.formGridAddressParish.value;\n    let addressPostOffice = event.target.formGridAddressPostOffice.value;\n    let employmentDate = event.target.formGridEmploymentDate.value;\n    let terminationDate = event.target.formGridTerminationDate.value;\n\n    if (\n      email.trim().length === 0 ||\n      password.trim().length === 0 ||\n      name.trim().length === 0 ||\n      role.trim().length === 0 ||\n      dob.trim().length === 0 ||\n      phone.trim().length === 0 ||\n      addressNumber.trim().length === 0 ||\n      addressStreet.trim().length === 0 ||\n      addressTown.trim().length === 0 ||\n      addressParish.trim().length === 0 ||\n      addressPostOffice.trim().length === 0 ||\n      employmentDate.trim().length === 0 ||\n      terminationDate.trim().length === 0\n    ) {\n      console.log(\"blank fields detected!!!...Please try again...\");\n      this.setState({userAlert: \"blank fields detected!!!...Please try again...\"});\n      return;\n    }\n\n    const token = this.context.token;\n    const userId = this.context.userId;\n    const user = { email, password, name, role, dob, phone, addressNumber, addressStreet, addressTown, addressParish, addressPostOffice, employmentDate, terminationDate };\n\n    console.log(`\n      creating user...\n      userId: ${userId}\n      email: ${email},\n      password: ${password},\n      name: ${name},\n      role: ${role},\n      dob: ${dob},\n      phone: ${phone},\n      addressNumber: ${addressNumber},\n      addressStreet: ${addressStreet},\n      addressTown: ${addressTown},\n      addressParish: ${addressParish},\n      addressPostOffice: ${addressPostOffice},\n      employmentDate: ${employmentDate},\n      terminationDate: ${terminationDate},\n      `);\n\n    const requestBody = {\n      query: `\n          mutation {\n            createUser(userInput: {email:\"${email}\",password:\"${password}\",name:\"${name}\",role:\"${role}\",dob:\"${dob}\",addressNumber:${addressNumber},addressStreet:\"${addressStreet}\",addressTown:\"${addressTown}\",addressParish:\"${addressParish}\",addressPostOffice:\"${addressPostOffice}\",phone:\"${phone}\",employmentDate:\"${employmentDate}\",terminationDate:\"${terminationDate}\"})\n            {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}\n          }\n        `\n    };\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"create user response data... \" + JSON.stringify(resData.data.createUser));\n        const responseAlert = JSON.stringify(resData.data).slice(0,8);\n        this.setState({userAlert: responseAlert});\n\n        this.setState(prevState => {\n          const updatedUsers = [...prevState.users];\n          updatedUsers.push(resData.data.createUser);\n\n          return { users: updatedUsers };\n        });\n        this.context.users = this.state.users;\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n  };\n\n\n  modalConfirmUpdateHandler = (event) => {\n\n    const token = this.context.token;\n    const userId = this.context.userId;\n    let selectedUserId = this.context.selectedUser._id;\n    if(userId !== selectedUserId && this.context.user.role !== 'admin') {\n      console.log(\"Not the creator or Admin! No edit permission!!\");\n      this.setState({userAlert: \"Not the creator or Admin! No edit permission!!\"});\n      selectedUserId = null;\n    }\n\n    console.log(\"UpdateUserFormData:  \", event.target.formGridEmail.value);\n\n    this.setState({ updating: false });\n\n    let email = event.target.formGridEmail.value;\n    let password = event.target.formGridPassword.value;\n    let name = event.target.formGridName.value;\n    let role = this.context.selectedUser.role;\n    let dob = event.target.formGridDob.value;\n    let phone = event.target.formGridPhone.value;\n    let addressNumber = event.target.formGridAddressNumber.value;\n    let addressStreet = event.target.formGridAddressStreet.value;\n    let addressTown = event.target.formGridAddressTown.value;\n    let addressParish = event.target.formGridAddressParish.value;\n    let addressPostOffice = event.target.formGridAddressPostOffice.value;\n    let employmentDate = event.target.formGridEmploymentDate.value;\n    let terminationDate = event.target.formGridTerminationDate.value;\n\n    if (email.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      email = this.context.selectedUser.email;\n    }\n    if (password.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      password = this.context.selectedUser.password;\n    }\n    if (name.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      name = this.context.selectedUser.name;\n    }\n    // if (role.trim().length === 0) {\n    //   console.log(\"blank fields detected!!!...filling w/ previous data...\");\n    //   role = this.state.selectedUser.role;\n    // }\n    if (dob.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      dob = this.context.selectedUser.dob;\n    }\n    if (phone.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      phone = this.context.selectedUser.phone;\n    }\n    if (addressNumber.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      addressNumber = this.context.selectedUser.address.number;\n    }\n    if (addressStreet.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      addressStreet = this.context.selectedUser.address.street;\n    }\n    if (addressTown.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      addressTown = this.context.selectedUser.address.town;\n    }\n    if (addressParish.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      addressParish = this.context.selectedUser.address.parish;\n    }\n    if (addressPostOffice.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      addressPostOffice = this.context.selectedUser.address.postOffice;\n    }\n    if (employmentDate.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      employmentDate = this.context.selectedUser.employmentDate;\n    }\n    if (terminationDate.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      terminationDate = this.context.selectedUser.terminationDate;\n    }\n\n    const user = { email, password, name, role, dob, phone, addressNumber, addressStreet, addressTown, addressParish, addressPostOffice, employmentDate, terminationDate };\n    console.log(`\n      updating user profile...\n      userId: ${userId}\n      email: ${email},\n      password: ${password},\n      name: ${name},\n      role: ${role},\n      dob: ${dob},\n      phone: ${phone},\n      addressNumber: ${addressNumber},\n      addressStreet: ${addressStreet},\n      addressTown: ${addressTown},\n      addressParish: ${addressParish},\n      addressPostOffice: ${addressPostOffice},\n      employmentDate: ${employmentDate},\n      terminationDate: ${terminationDate},\n      `);\n      this.setState({userAlert: \"updating user profile...\"});\n\n    const requestBody = {\n      query: `\n      mutation {updateUser(userId:\\\"${userId}\\\",selectedUserId:\\\"${selectedUserId}\\\",userInput: {email:\\\"${email}\\\",password:\\\"${password}\\\",name:\\\"${name}\\\",dob:\\\"${dob}\\\",addressNumber:${addressNumber},addressStreet:\\\"${addressStreet}\\\",addressTown:\\\"${addressTown}\\\",addressParish:\\\"${addressParish}\\\", addressPostOffice:\\\"${addressPostOffice}\\\",phone:\\\"${phone}\\\",role:\\\"${role}\\\",employmentDate:\\\"${employmentDate}\\\",terminationDate:\\\"${terminationDate}\\\"})\n      {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n        `};\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }})\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n        const updatedUser = resData.data.updateUser;\n        console.log(\"updatedUser:  \", JSON.stringify(updatedUser));\n        this.setState({user: updatedUser})\n        this.state.users.push(resData.data.updateUser);\n        this.context.users = this.state.users;\n\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert, selectedUser: resData.data.updateUser})\n        this.fetchUsers();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n  };\n\n\n  modalConfirmUpdateFieldHandler = (event) => {\n\n    const token = this.context.token;\n    const userId = this.context.userId;\n    let selectedUserId = this.context.selectedUser._id;\n    // if(userId !== selectedUserId && this.context.user.role !== 'admin') {\n    //   console.log(\"Not the creator or Admin! No edit permission!!\");\n    //   selectedUserId = null;\n    // }\n\n\n      console.log(\"UpdateUserFieldFormData:  \", event.target.formGridField.value, event.target.formGridFieldSelect.value);\n      this.setState({ updating: false });\n\n      let field = null;\n      let query = event.target.formGridQuery.value;\n      if (event.target.formGridFieldSelect.value === \"select\") {\n        field = event.target.formGridField.value;\n      } else {\n        field = event.target.formGridFieldSelect.value;\n      }\n      console.log(`\n          field: ${field},\n          query: ${query},\n        `);\n\n        this.setState({ userAlert: \"updating user field...\"})\n\n      const requestBody = {\n        query:`\n          mutation{updateUserField(userId:\"${userId}\",selectedUserId:\"${selectedUserId}\",field:\"${field}\",query:\"${query}\")\n          {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}\n        }\n        `};\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData.data.updateUserField));\n\n          const updatedUserId = resData.data.updateUserField._id;\n          const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n          const updatedUserPos = this.state.users.indexOf(updatedUser);\n          const slicedArray = this.state.users.splice(updatedUserPos, 1);\n          console.log(\"updatedUser:  \", JSON.stringify(updatedUser),\"  updatedUserPos:  \", updatedUserPos, \"  slicedArray:  \", slicedArray);\n\n          this.state.users.push(resData.data.updateUserField);\n          this.context.users = this.state.users;\n          const responseAlert = JSON.stringify(resData.data).slice(2,25);\n          this.setState({ userAlert: responseAlert, selectedUser: resData.data.updateUserField})\n          this.fetchUsers();\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({userAlert: err});\n        });\n\n  }\n\n  updateUserAttendanceHandler = (event) => {\n    const token = this.context.token;\n    const userId = this.context.userId;\n    let selectedUserId = this.context.selectedUser._id;\n    // if(userId !== selectedUserId && this.context.user.role !== 'admin') {\n    //   console.log(\"Not the creator or Admin! No edit permission!!\");\n    //   selectedUserId = null;\n    // }\n    if (userId !== selectedUserId && this.context.user.role !== \"admin\" ) {\n      console.log(\"Not the creator or Admin! No edit permission!!\");\n      this.setState({ userAlert: \"Not the creator or Admin! No edit permission!!\"});\n        selectedUserId = null;\n    }\n\n    console.log(\"UpdateUserAttendanceFormData:  \", event.target.formGridAttendanceDate.value);\n\n    this.setState({ updating: false , userUpdateField: null });\n\n    let attendanceDate = event.target.formGridAttendanceDate.value;\n    let attendanceStatus = event.target.formGridAttendanceStatus.value;\n    let attendanceDescription = event.target.formGridAttendanceDescription.value;\n\n    if (attendanceDate.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      attendanceDate = this.context.selectedUser.attendanceDate;\n    }\n    if (attendanceStatus.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      attendanceStatus = this.context.selectedUser.attendanceStatus;\n    }\n    if (attendanceDescription.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      attendanceDescription = this.context.selectedUser.attendanceDescription;\n    }\n\n    const userAttendance = { attendanceDate, attendanceStatus, attendanceDescription }\n    console.log(`\n      adding user attendance item...\n      userId: ${userId},\n      selectedUserId: ${selectedUserId}\n      attendanceDate: ${attendanceDate},\n      attendanceStatus: ${attendanceStatus},\n      attendanceDescription: ${attendanceDescription}\n      `);\n\n      this.setState({ userAlert: \"adding user attendance item...\"});\n\n      const requestBody = {\n        query:`\n          mutation {updateUserAttendance(userId:\"${userId}\", selectedUserId:\"${selectedUserId}\",userInput:{attendanceDate:\"${attendanceDate}\",attendanceStatus:\"${attendanceStatus}\",attendanceDescription:\"${attendanceDescription}\"})\n          {_id,name,email,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description}}}\n        `};\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData.data.updateUserAttendance));\n\n          const updatedUserId = resData.data.updateUserAttendance._id;\n          const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n          const updatedUserPos = this.state.users.indexOf(updatedUser);\n          const slicedArray = this.state.users.splice(updatedUserPos, 1);\n          console.log(\"updatedUser:  \", JSON.stringify(updatedUser),\"  updatedUserPos:  \", updatedUserPos, \"  slicedArray:  \", slicedArray);\n\n          this.state.users.push(resData.data.updateUserAttendance);\n          this.context.users = this.state.users;\n          const responseAlert = JSON.stringify(resData.data).slice(2,25);\n          this.setState({ userAlert: responseAlert, selectedUser: resData.data.updateUserAttendance})\n          this.fetchUsers();\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({userAlert: err});\n        });\n\n\n  }\n\n    updateUserAttachmentHandler = (event) => {\n\n    const token = this.context.token;\n    const userId = this.context.userId;\n    let selectedUserId = this.context.selectedUser._id;\n    // if(userId !== selectedUserId && this.context.user.role !== 'admin') {\n    //   console.log(\"Not the creator or Admin! No edit permission!!\");\n    //   selectedUserId = null;\n    // }\n    if (userId !== selectedUserId && this.context.user.role !== \"admin\" ) {\n      console.log(\"Not the creator or Admin! No edit permission!!\");\n      this.setState({userAlert: \"Not the creator or Admin! No edit permission!!\"})\n        selectedUserId = null;\n    }\n\n    console.log(\"UpdateUserAttachmentFormData:  \", event.target.formGridAttachmentName.value);\n\n    this.setState({ updating: false , userUpdateField: null });\n\n    let attachmentName = event.target.formGridAttachmentName.value;\n    let attachmentFormat = event.target.formGridAttachmentFormat.value;\n    let attachmentPath = event.target.formGridAttachmentPath.value;\n\n\n    if (\n      attachmentName.trim().length === 0 ||\n      attachmentFormat.trim().length === 0 ||\n      attachmentPath.trim().length === 0\n  ) {\n      console.log(\"blank fields detected!!! try again\");\n      return\n    }\n\n    const userAttachment = { attachmentName, attachmentFormat, attachmentPath }\n    console.log(`\n      adding user attendance item...\n      userId: ${userId},\n      selectedUserId: ${selectedUserId}\n      attachmentName: ${attachmentName},\n      attachmentFormat: ${attachmentFormat},\n      attachmentPath: ${attachmentPath}\n      `);\n      this.setState({userAlert: \"adding user attendance item...\"})\n\n      const requestBody = {\n        query:`\n          mutation{updateUserAttachment(userId:\\\"${userId}\\\",selectedUserId:\\\"${selectedUserId}\\\",userInput:{attachmentName:\\\"${attachmentName}\\\",attachmentFormat:\\\"${attachmentFormat}\\\",attachmentPath:\\\"${attachmentPath}\\\"})\n          {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n        `};\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData.data.updateUserAttachment));\n\n          const updatedUserId = resData.data.updateUserAttachment._id;\n          const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n          const updatedUserPos = this.state.users.indexOf(updatedUser);\n          const slicedArray = this.state.users.splice(updatedUserPos, 1);\n          console.log(\"updatedUser:  \", JSON.stringify(updatedUser),\"  updatedUserPos:  \", updatedUserPos, \"  slicedArray:  \", slicedArray);\n\n          this.state.users.push(resData.data.updateUserAttachment);\n          this.context.users = this.state.users;\n          const responseAlert = JSON.stringify(resData.data).slice(2,25);\n          this.setState({ userAlert: responseAlert, selectedUser: resData.data.updateUserAttachment})\n          this.fetchUsers();\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({userAlert: err});\n        });\n\n\n  }\n\n\n  updateUserLeaveHandler = (event) => {\n\n    const token = this.context.token;\n    const userId = this.context.userId;\n    let selectedUserId = this.context.selectedUser._id;\n    // if(userId !== selectedUserId && this.context.user.role !== 'admin') {\n    //   console.log(\"Not the creator or Admin! No edit permission!!\");\n    //   selectedUserId = null;\n    // }\n    if (userId !== selectedUserId && this.context.user.role !== \"admin\" ) {\n      console.log(\"Not the creator or Admin! No edit permission!!\");\n      this.setState({userAlert: \"Not the creator or Admin! No edit permission!!\"})\n        selectedUserId = null;\n    }\n\n    console.log(\"UpdateUserLeaveFormData:  \", event.target.formGridLeaveType.value);\n\n    this.setState({ updating: false , userUpdateField: null });\n\n    let leaveType = event.target.formGridLeaveType.value;\n    let leaveTitle = event.target.formGridLeaveTitle.value;\n    let leaveStartDate = event.target.formGridLeaveStartDate.value;\n    let leaveEndDate = event.target.formGridLeaveEndDate.value;\n\n    if (\n      leaveType.trim().length === 0 ||\n      leaveTitle.trim().length === 0 ||\n      leaveStartDate.trim().length === 0 ||\n      leaveEndDate.trim().length === 0\n    ) {\n      console.log(\"blank fields detected!!!...try again\");\n      this.setState({userAlert: \"blank fields detected!!!...try again\"});\n      return\n    }\n\n    const userLeave = { leaveType, leaveTitle, leaveStartDate, leaveEndDate }\n    console.log(`\n      adding user leave item...\n      userId: ${userId},\n      selectedUserId: ${selectedUserId}\n      leave: {\n        type: ${leaveType},\n        title: ${leaveTitle},\n        startDate: ${leaveStartDate},\n        endDate: ${leaveEndDate}\n      }\n      `);\n      this.setState({userAlert: \"adding user leave item...\"})\n\n      const requestBody = {\n        query:`\n          mutation{updateUserLeave(userId:\\\"${userId}\\\",selectedUserId:\\\"${selectedUserId}\\\",userInput:{leaveType:\\\"${leaveType}\\\",leaveTitle:\\\"${leaveTitle}\\\",leaveStartDate:\\\"${leaveStartDate}\\\",leaveEndDate:\\\"${leaveEndDate}\\\"})\n          {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n        `};\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData.data));\n\n          const updatedUserId = resData.data.updateUserLeave._id;\n          const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n          const updatedUserPos = this.state.users.indexOf(updatedUser);\n          const slicedArray = this.state.users.splice(updatedUserPos, 1);\n          console.log(\"updatedUser:  \", JSON.stringify(updatedUser),\"  updatedUserPos:  \", updatedUserPos, \"  slicedArray:  \", slicedArray);\n\n          this.state.users.push(resData.data.updateUserLeave);\n          this.context.users = this.state.users;\n          const responseAlert = JSON.stringify(resData.data).slice(2,25);\n          this.setState({ userAlert: responseAlert, selectedUser: resData.data.updateUserLeave})\n          this.fetchUsers();\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({userAlert: err});\n        });\n\n  }\n\n\n  modalConfirmSearchHandler = (event) => {\n    console.log(\"SearchUserForm:  \");\n\n\n    let userId = this.context.userId;\n\n      console.log(\"SearchUserFormData:  \", event.target.formBasicField.value);\n      this.setState({ searching: false });\n\n      let field = null;\n      let query = event.target.formBasicQuery.value;\n      if (event.target.formBasicFieldSelect.value === \"select\") {\n        field = event.target.formBasicField.value;\n      } else {\n        field = event.target.formBasicFieldSelect.value;\n      }\n\n      this.setState({\n        userSearchField: field,\n        userSearchQuery: query,\n      })\n\n      if (\n        field.trim().length === 0 ||\n        query.trim().length === 0\n      ) {\n        console.log(\"blank fields detected!!!...Please try again...\");\n        this.setState({userAlert: \"blank fields detected!!!...Please try again...\"})\n        return;\n      }\n\n      const search = { field, query }\n      console.log(\"Searching for User:  \", JSON.stringify(search));\n      this.setState({userAlert: \"Searching for User...\"})\n\n      const requestBody = {\n        query: `\n          query {getUserField(userId:\"${userId}\",field:\"${field}\",query:\"${query}\")\n          {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n        `}\n\n      const token = this.context.token;\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData));\n\n          const responseAlert = JSON.stringify(resData.data).slice(0,8);\n          this.setState({userAlert: responseAlert});\n\n          const searchUsers = resData.data.getUserField;\n\n          this.setState({ searchUsers: searchUsers})\n          console.log(\"state.searchUsers:  \", this.state.searchUsers);\n          // this.fetchUsers();\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({userAlert: err});\n        });\n  }\n\n  modalConfirmSearchIdHandler = (event) => {\n\n    let userId = this.context.userId;\n    this.setState({ searching: false });\n\n    console.log(\"SearchUserIdFormData:\", event.target.formBasicId.value);\n    let selectedUserId = event.target.formBasicId.value;\n\n    const requestBody = {\n      query: `\n        query {getUserId(userId:\"${userId}\",selectedUserId:\"${selectedUserId}\")\n        {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n      `}\n\n    const token = this.context.token;\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({userAlert: responseAlert});\n\n        const searchUsers = resData.data.getUserId;\n\n        this.setState({ searchUsers: [searchUsers] });\n        console.log(\"state.searchUsers:  \", this.state.searchUsers);\n        // this.fetchUsers();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n  }\n  modalConfirmSearchAttendanceDateHandler = (event) => {\n\n    let userId = this.context.userId;\n    this.setState({ searching: false });\n\n    console.log(\"SearchUserAttendanceDateFormData:\");\n\n    const attendanceDate = event.target.formBasicDate.value;\n\n    const requestBody = {\n      query: `\n        query {getUserAttendanceDate(userId:\"${userId}\",attendanceDate:\"${attendanceDate}\")\n        {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n      `}\n\n    const token = this.context.token;\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n\n        const responseAlert = JSON.stringify(resData.data).slice(0,8);\n        this.setState({userAlert: responseAlert});\n\n        const searchUsers = resData.data.getUserAttendanceDate;\n\n        this.setState({ searchUsers: searchUsers})\n        console.log(\"state.searchUsers:  \", this.state.searchUsers);\n        // this.fetchUsers();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n  }\n  modalConfirmSearchLeaveDateRangeHandler = (event) => {\n\n    let userId = this.context.userId;\n    this.setState({ searching: false });\n\n    console.log(\"SearchUserLeaveDateRangeFormData:\");\n\n    const startDate = event.target.formBasicStartDate.value;\n    const endDate = event.target.formBasicEndDate.value;\n\n    const requestBody = {\n      query: `\n        query{getUserLeaveDateRange(userId:\"${userId}\",startDate:\"${startDate}\",endDate:\"${endDate}\")\n        {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n      `}\n\n    const token = this.context.token;\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n\n        const responseAlert = JSON.stringify(resData.data).slice(0,8);\n        this.setState({userAlert: responseAlert});\n\n        const searchUsers = resData.data.getUserLeaveDateRange;\n\n        this.setState({ searchUsers: searchUsers})\n        console.log(\"state.searchUsers:  \", this.state.searchUsers);\n        // this.fetchUsers();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n  }\n\n  modalConfirmSearchNameHandler = (event) => {\n    console.log(\"SearchUserNameFormData:\", event.target.formBasicName.value);\n\n    let userId = this.context.userId;\n    this.setState({ searching: false });\n\n    let users = this.state.users;\n    const regex = new RegExp(event.target.formBasicName.value,\"i\");\n    console.log(`\n      regex: ${regex},\n      `);\n      let result = users.filter(user => user.name.match(regex))\n      console.log(`\n        result: ${JSON.stringify(result)}\n        `);\n\n        this.setState({ searchUsers: result})\n\n  }\n\n\n  modalCancelHandler = () => {\n    this.setState({ creating: false, updating: false, deleting: false, searching: false});\n  };\n\n  fetchUsers() {\n    console.log(\"fetch users:\");\n    // console.log(\"'fetch users function' context object... \" + JSON.stringify(this.context));\n    const userId = this.context.userId;\n\n    this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n          query {users (userId:\"${userId}\")\n          {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n        `};\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          this.context.userAlert = 'Failed!';\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n\n        const responseAlert = JSON.stringify(resData.data).slice(0,8);\n        this.setState({userAlert: responseAlert});\n\n        const users = resData.data.users;\n        console.log(\"resData:  \", resData);\n        console.log(users);\n\n        if (this.isActive) {\n          this.setState({ users: users, isLoading: false });\n        }\n        this.context.users = this.state.users;\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n        if (this.isActive) {\n          this.setState({ isLoading: false });\n        }\n      });\n  }\n\n  fetchUsersAsc = () => {\n    console.log(\"'fetch usersAsc function' context object... \" + JSON.stringify(this.context));\n    const userId = this.context.userId;\n\n    // this.setState({ isSorting: true });\n    const requestBody = {\n      query: `\n          query {usersNameAsc (userId:\"${userId}\")\n          {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n        `};\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          this.context.userAlert = 'Failed!';\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const users = resData.data.usersNameAsc;\n        console.log(\"resData:  \", resData);\n        console.log(users);\n\n        const responseAlert = JSON.stringify(resData.data).slice(0,8);\n        this.setState({userAlert: responseAlert});\n\n        this.setState({users: users});\n        // if (this.isActive) {\n        //   this.setState({ users: users, isLoading: false });\n        // }\n        this.context.users = this.state.users;\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n        // if (this.isActive) {\n        //   this.setState({ isLoading: false });\n        // }\n      });\n  }\n  fetchUsersDesc = () => {\n    console.log(\"'fetch usersDesc function' context object... \" + JSON.stringify(this.context));\n    const userId = this.context.userId;\n\n    // this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n          query {usersNameDesc (userId:\"${userId}\")\n          {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n        `};\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          this.context.userAlert = 'Failed!';\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const users = resData.data.usersNameDesc;\n        console.log(\"resData:  \", resData);\n        console.log(users);\n\n        const responseAlert = JSON.stringify(resData.data).slice(0,8);\n        this.setState({userAlert: responseAlert});\n\n        // if (this.isActive) {\n        //   this.setState({ users: users, isLoading: false });\n        // }\n        this.setState({users: users});\n        this.context.users = this.state.users;\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n        // if (this.isActive) {\n        //   this.setState({ isLoading: false });\n        // }\n      });\n  }\n\nmodalDeleteHandler = () => {\n  console.log(\"deleting user...selectedUser:  \", this.context.selectedUser);\n\n  const userId = this.context.userId;\n  const selectedUserId = this.context.selectedUser._id;\n\n  if(this.context.user.role !== 'admin') {\n    console.log(\"Not the Admin! No edit permission!!\");\n    this.setState({userAlert: \"Not the Admin! No edit permission!!\"})\n  }\n\n  this.setState({deleting: true, userAlert: \"deleting user..\"});\n\n  const requestBody = {\n    query: `\n        mutation {\n          deleteUser(userId: ${userId}, selectedUserId: ${selectedUserId})\n          {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}\n        }\n      `};\n\n  fetch('http://localhost:10000/graphql', {\n    method: 'POST',\n    body: JSON.stringify(requestBody),\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + this.context.token\n    }\n  })\n    .then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n      return res.json();\n    })\n    .then(resData => {\n\n      const responseAlert = JSON.stringify(resData.data).slice(0,8);\n      this.setState({userAlert: responseAlert});\n\n      let deletedUser = resData.data.deleteUser;\n      console.log(deletedUser);\n\n      let deletedUserId = deletedUser._id;\n      deletedUser = this.state.users.find(e => e._id === deletedUserId);\n      const deletedUserPos = this.state.users.indexOf(deletedUser);\n      const slicedArray = this.state.users.splice(deletedUserPos, 1);\n      console.log(\"deletedUser:  \", JSON.stringify(deletedUser),\"  deletedUserPos:  \", deletedUserPos, \"  slicedArray:  \", slicedArray);\n\n      this.setState({ deleting: false, selectedUser: null });\n      this.context.selectedUser = null;\n\n      this.fetchUsers();\n\n    })\n    .catch(err => {\n      console.log(err);\n      this.setState({userAlert: err});\n      if (this.isActive) {\n        this.setState({ deleting: false });\n      }\n    });\n\n}\n\ndeleteUserAttendanceItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let selectedUserId = this.state.selectedUser._id;\n  let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n  console.log(`\n    delete user Attendance item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    selectedUserId: ${selectedUserId},\n    attandance date: ${date},\n    `);\n\n    const requestBody = {\n      query: `\n       mutation{deleteUserAttendance(userId:\\\"${userId}\\\",selectedUserId:\\\"${selectedUserId}\\\",attendanceDate:\\\"${date}\\\")\n       {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedUser = resData.data.deleteUserAttendance;\n            console.log(\"resData.data:  \",resData.data.deleteUserAttendance);\n\n            const updatedUserId = resData.data.deleteUserAttendance._id;\n            const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n            const updatedUserPos = this.state.users.indexOf(updatedUser);\n            const slicedArray = this.state.users.splice(updatedUserPos, 1);\n            console.log(\"updatedUser:  \", JSON.stringify(updatedUser),\"  updatedUserPos:  \", updatedUserPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.users.push(resData.data.deleteUserAttendance);\n            this.context.users = this.state.users;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            // this.setState({ userAlert: responseAlert, selectedUser: resData.data.deleteUserAttendance})\n            this.fetchUsers();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeleteUserLeaveItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let selectedUserId = this.state.selectedUser._id;\n\n  console.log(`\n    delete user Leave item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    selectedUserId: ${selectedUserId},\n    `);\n\n    const requestBody = {\n      query: `\n       mutation{deleteUserLeave(userId:\\\"${userId}\\\",selectedUserId:\\\"${selectedUserId}\\\",leaveTitle:\\\"${props.title}\\\")\n       {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedUser = resData.data.deleteUserLeave;\n            console.log(deletedUser);\n\n            const updatedUserId = resData.data.deleteUserLeave._id;\n            const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n            const updatedUserPos = this.state.users.indexOf(updatedUser);\n            const slicedArray = this.state.users.splice(updatedUserPos, 1);\n            console.log(\"updatedUser:  \", JSON.stringify(updatedUser),\"  updatedUserPos:  \", updatedUserPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.users.push(resData.data.deleteUserLeave);\n            this.context.users = this.state.users;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            // this.setState({ userAlert: responseAlert, selectedUser: resData.data.deleteUserLeave})\n            this.fetchUsers();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeleteUserAttachmentItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let selectedUserId = this.state.selectedUser._id;\n\n  console.log(`\n    delete user Attachment item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    selectedUserId: ${selectedUserId},\n    `);\n\n    const requestBody = {\n      query: `\n       mutation{deleteUserAttachment(userId:\\\"${userId}\\\",selectedUserId:\\\"${selectedUserId}\\\",attachmentName:\\\"${props.name}\\\")\n       {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedUser = resData.data.deleteUserAttachment;\n            console.log(deletedUser);\n\n            const updatedUserId = resData.data.deleteUserAttachment._id;\n            const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n            const updatedUserPos = this.state.users.indexOf(updatedUser);\n            const slicedArray = this.state.users.splice(updatedUserPos, 1);\n            console.log(\"updatedUser:  \", JSON.stringify(updatedUser),\"  updatedUserPos:  \", updatedUserPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.users.push(resData.data.deleteUserAttachment);\n            this.context.users = this.state.users;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            // this.setState({ userAlert: responseAlert, selectedUser: resData.data.deleteUserAttachment})\n            this.fetchUsers();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\n\n\nupdateUserSpecial (event) {\n\n  console.log(\"special field to update:  \", event.target.value);\n  const field = event.target.value;\n  this.setState({ userUpdateField: field});\n\n}\n\n  showDetailHandler = userId => {\n\n    this.setState(prevState => {\n      const selectedUser = prevState.users.find(e => e._id === userId);\n      this.context.selectedUser = selectedUser;\n      this.setState({selectedUser: selectedUser});\n      console.log(\"User selected  :  \", selectedUser);\n      return { selectedUser: selectedUser };\n    });\n  };\n\n\n  userSearchClearlHandler () {\n    console.log(\"clearing user search results\");\n    this.setState({searchUsers: [], userAlert: \"clearing user search results\"});\n  }\n\n\n  componentWillUnmount() {\n    this.isActive = false;\n  }\n\n  render() {\n    return (\n\n    <React.Fragment>\n\n\n\n    <Accordion>\n\n    <Row>\n\n    <Col md={3} className=\"MasterCol1\">\n    <AlertBox\n      authUserId={this.context.userId}\n      alert={this.state.userAlert}\n    />\n    <SidebarPage/>\n\n    </Col>\n\n    <Col md={9} className=\"MasterCol2\">\n\n        <Container className=\"containerCombinedDetail\">\n          <Tabs defaultActiveKey=\"userDetail\" id=\"uncontrolled-tab-example\">\n          <Tab eventKey=\"Edit\" title=\"Edit:\" disabled>\n          </Tab>\n            <Tab eventKey=\"userDetail\" title=\"Details\">\n                  {this.state.selectedUser === null && (\n                    <Button variant=\"outline-warning\" size=\"lg\">\n                      Select a Staff member from the Master List below\n                    </Button>\n                  )}\n                  {this.state.isLoading === false &&\n                    this.state.selectedUser !== null\n                    && (\n                      <UserDetail\n                      authUserId={this.context.userId}\n                      AuthContext={this.context}\n                      user={this.state.selectedUser}\n                      onEdit={this.startUpdateUserHandler}\n                      canDelete={this.state.canDelete}\n                      onDelete={this.modalDeleteHandler}\n                      attendanceDelete={this.deleteUserAttendanceItem}\n                      leaveDelete={this.deleteUserLeaveItem}\n                      attachmentDelete={this.deleteUserAttachmentItem}\n                      />\n                    )}\n            </Tab>\n\n            { this.context.user.role === \"admin\" && (\n              <Tab eventKey=\"userCreate\" title=\"New\">\n              <Button variant=\"outline-primary\" onClick={this.startCreateUserHandler} >Create</Button>\n              {this.state.creating && (\n                <CreateUserForm\n                  authUserId={this.context.userId}\n                  canCancel\n                  canConfirm\n                  onCancel={this.modalCancelHandler}\n                  onConfirm={this.modalConfirmHandler}\n                  onSubmit={this.modalConfirmHandler}\n                  confirmText=\"Confirm\"\n                />\n              )}\n              </Tab>\n            )}\n\n            <Tab eventKey=\"userEditDemographics\" title=\"Demographics\">\n            {this.state.selectedUser === null && (\n              <Button variant=\"outline-warning\" size=\"lg\">\n                Select a Staff member from the Master List below\n              </Button>\n            )}\n            {this.state.selectedUser !== null &&\n              this.context.user.role === \"admin\"\n              && (\n              <Button variant=\"outline-primary\" onClick={this.startUpdateUserHandler}>Edit Demographics as Admin</Button>\n            )}\n            {this.state.selectedUser !== null &&\n              this.state.selectedUser._id === this.context.user._id\n              && (\n              <Button variant=\"outline-primary\" onClick={this.startUpdateUserHandler}>Edit Demographics (your profile)</Button>\n            )}\n            {this.state.selectedUser !== null &&\n              this.state.selectedUser._id === this.context.user._id && (\n              <Button variant=\"outline-danger\" size=\"lg\">\n                Your Profile\n              </Button>\n            )}\n            {this.state.selectedUser !== null &&\n              this.state.selectedUser._id !== this.context.user._id && (\n              <Button variant=\"outline-danger\" size=\"lg\">\n                Not my profile\n              </Button>\n            )}\n            {this.state.updating &&\n              this.state.selectedUser !== null\n              && (\n              <UpdateUserForm\n                authUserId={this.context.userId}\n                canCancel\n                canConfirm\n                onCancel={this.modalCancelHandler}\n                onConfirm={this.modalConfirmUpdateHandler}\n                confirmText=\"Confirm\"\n                user={this.context.selectedUser}\n              />\n            )}\n\n            </Tab>\n\n            <Tab eventKey=\"userEditField\" title=\"Single Field\">\n            {this.state.selectedUser === null && (\n              <Button variant=\"outline-warning\" size=\"lg\">\n                Select a Staff member from the Master List below\n              </Button>\n            )}\n\n            {this.state.selectedUser !== null &&\n              this.context.user.role === \"admin\"\n              && (\n              <Button variant=\"outline-primary\" onClick={this.startUpdateUserHandler}>Edit Field as Admin</Button>\n            )}\n            {this.state.selectedUser !== null &&\n              this.state.selectedUser._id === this.context.user._id\n              && (\n              <Button variant=\"outline-primary\" onClick={this.startUpdateUserHandler}>Edit Field (your profile)</Button>\n            )}\n            {this.state.selectedUser !== null &&\n              this.state.selectedUser._id === this.context.user._id && (\n              <Button variant=\"outline-danger\" size=\"lg\">\n                Your Profile\n              </Button>\n            )}\n            {this.state.selectedUser !== null &&\n              this.state.selectedUser._id !== this.context.user._id && (\n              <Button variant=\"outline-danger\" size=\"lg\">\n                Not my profile\n              </Button>\n            )}\n            {this.state.updating &&\n              this.state.selectedUser !== null\n              && (\n                <UpdateUserFieldForm\n                  authUserId={this.context.userId}\n                  canCancel\n                  canConfirm\n                  onCancel={this.modalCancelHandler}\n                  onConfirm={this.modalConfirmUpdateFieldHandler}\n                  confirmText=\"Confirm\"\n                  user={this.state.selectedUser}\n                />\n            )}\n            </Tab>\n\n            <Tab eventKey=\"userEditAttendance\" title=\"Attendance\">\n            {this.state.selectedUser === null && (\n              <Button variant=\"outline-warning\" size=\"lg\">\n                Select a Staff member from the Master List below\n              </Button>\n            )}\n\n            {this.state.selectedUser !== null &&\n              this.context.user.role === \"admin\"\n              && (\n              <Button variant=\"outline-primary\" value='attendance' onClick={this.updateUserSpecial.bind(this)}>Add Attendance as Admin</Button>\n            )}\n            {this.state.selectedUser !== null &&\n              this.state.selectedUser._id === this.context.user._id\n              && (\n              <Button variant=\"outline-primary\" value='attendance' onClick={this.updateUserSpecial.bind(this)}>Add Attendance (your profile)</Button>\n            )}\n            {this.state.selectedUser !== null &&\n              this.state.selectedUser._id === this.context.user._id && (\n              <Button variant=\"outline-danger\" size=\"lg\">\n                Your Profile\n              </Button>\n            )}\n            {this.state.selectedUser !== null &&\n              this.state.selectedUser._id !== this.context.user._id && (\n              <Button variant=\"outline-danger\" size=\"lg\">\n                Not my profile\n              </Button>\n            )}\n\n            {this.state.userUpdateField === 'attendance' &&\n            this.state.selectedUser !== null\n             && (\n               <UpdateUserAttendanceForm\n              authUserId={this.context.userId}\n              canCancel\n                canConfirm\n                onCancel={this.modalCancelHandler}\n                onConfirm={this.updateUserAttendanceHandler}\n                confirmText=\"Confirm\"\n                user={this.state.selectedUser}\n              />\n            )}\n            </Tab>\n\n            <Tab eventKey=\"userEditLeave\" title=\"Leave\">\n            {this.state.selectedUser === null && (\n              <Button variant=\"outline-warning\" size=\"lg\">\n                Select a Staff member from the Master List below\n              </Button>\n            )}\n\n            {this.state.selectedUser !== null &&\n              this.context.user.role === \"admin\"\n              && (\n              <Button variant=\"outline-primary\" value='leave' onClick={this.updateUserSpecial.bind(this)}>Add Leave as Admin</Button>\n            )}\n            {this.state.selectedUser !== null &&\n              this.state.selectedUser._id === this.context.user._id\n              && (\n              <Button variant=\"outline-primary\" value='leave' onClick={this.updateUserSpecial.bind(this)}>Add Leave (your profile)</Button>\n            )}\n            {this.state.selectedUser !== null &&\n              this.state.selectedUser._id === this.context.user._id && (\n              <Button variant=\"outline-danger\" size=\"lg\">\n                Your Profile\n              </Button>\n            )}\n            {this.state.selectedUser !== null &&\n              this.state.selectedUser._id !== this.context.user._id && (\n              <Button variant=\"outline-danger\" size=\"lg\">\n                Not my profile\n              </Button>\n            )}\n\n            {this.state.userUpdateField === 'leave' &&\n            this.state.selectedUser !== null\n            && (<UpdateUserLeaveForm\n              authUserId={this.context.userId}\n              canCancel\n                canConfirm\n                onCancel={this.modalCancelHandler}\n                onConfirm={this.updateUserLeaveHandler}\n                confirmText=\"Confirm\"\n                user={this.state.selectedUser}\n              />)}\n            </Tab>\n            <Tab eventKey=\"userEditAttachment\" title=\"Attachment\">\n            {this.state.selectedUser === null && (\n              <Button variant=\"outline-warning\" size=\"lg\">\n                Select a Staff member from the Master List below\n              </Button>\n            )}\n\n            {this.state.selectedUser !== null &&\n              this.context.user.role === \"admin\"\n              && (\n              <Button variant=\"outline-primary\" value='attachments' onClick={this.updateUserSpecial.bind(this)}>Add Attachment as Admin</Button>\n            )}\n            {this.state.selectedUser !== null &&\n              this.state.selectedUser._id === this.context.user._id\n              && (\n              <Button variant=\"outline-primary\" value='attachments' onClick={this.updateUserSpecial.bind(this)}>Add Attachment (your profile)</Button>\n            )}\n            {this.state.selectedUser !== null &&\n              this.state.selectedUser._id === this.context.user._id && (\n              <Button variant=\"outline-danger\" size=\"lg\">\n                Your Profile\n              </Button>\n            )}\n            {this.state.selectedUser !== null &&\n              this.state.selectedUser._id !== this.context.user._id && (\n              <Button variant=\"outline-danger\" size=\"lg\">\n                Not my profile\n              </Button>\n            )}\n\n            {this.state.userUpdateField === 'attachments' &&\n            this.state.selectedUser !== null\n            && (<UpdateUserAttachmentForm\n              authUserId={this.context.userId}\n              canCancel\n                canConfirm\n                onCancel={this.modalCancelHandler}\n                onConfirm={this.updateUserAttachmentHandler}\n                confirmText=\"Confirm\"\n                user={this.state.selectedUser}\n              />)}\n            </Tab>\n\n\n            <Tab eventKey=\"MasterList\" title=\"Master List\">\n            <Container className=\"containerUserMasterList\">\n            <Row className=\"searchListRow\">\n            <Button variant=\"primary\" size=\"sm\" onClick={this.fetchUsersAsc}>\n               Sort Asc\n             </Button>\n            <Button variant=\"info\" size=\"sm\" onClick={this.fetchUsersDesc}>\n               Sort Desc\n             </Button>\n             {this.state.isLoading ? (\n               <Spinner />\n             ) : (\n               <UserList\n                 users={this.state.users}\n                 authUserId={this.context.userId}\n                 onViewDetail={this.showDetailHandler}\n               />\n             )}\n            </Row>\n            </Container>\n\n            </Tab>\n\n            <Tab eventKey=\"SearchInput\" title=\"Search\">\n            <Container className=\"containerSearchUserInput\">\n\n            <Row className=\"searchUserRowAdd\">\n            <Button variant=\"primary\" onClick={this.startSearchUserHandler}>Search</Button>\n            </Row>\n\n            <Row className=\"searchUserRowForm\">\n            <Col md={10} className=\"searchUserColForm\">\n            <Tabs defaultActiveKey=\"Field\" id=\"uncontrolled-tab-example\">\n            <Tab eventKey=\"Search\" title=\"Search:\" disabled>\n            </Tab>\n            <Tab eventKey=\"Field\" title=\"Field:\">\n            {this.state.searching === true && (\n              <SearchUserForm\n              authUserId={this.context.userId}\n              canCancel\n                canConfirm\n                onCancel={this.modalCancelHandler}\n                onConfirm={this.modalConfirmSearchHandler}\n                confirmText=\"Search\"\n                user={this.context.selectedUser}\n              />)}\n            </Tab>\n            <Tab eventKey=\"Id\" title=\"Id:\">\n            {this.state.searching === true && (\n              <SearchUserIdForm\n              authUserId={this.context.userId}\n              canCancel\n                canConfirm\n                onCancel={this.modalCancelHandler}\n                onConfirm={this.modalConfirmSearchIdHandler}\n                confirmText=\"Search\"\n                user={this.context.selectedUser}\n              />\n              )}\n            </Tab>\n            <Tab eventKey=\"Attendance\" title=\"Attendance:\">\n            {this.state.searching === true && (\n              <SearchUserAttendanceDateForm\n              authUserId={this.context.userId}\n              canCancel\n                canConfirm\n                onCancel={this.modalCancelHandler}\n                onConfirm={this.modalConfirmSearchAttendanceDateHandler}\n                confirmText=\"Search\"\n                user={this.context.selectedUser}\n              />\n              )}\n            </Tab>\n            <Tab eventKey=\"Leave\" title=\"Leave:\">\n            {this.state.searching === true && (\n              <SearchUserLeaveDateRangeForm\n              authUserId={this.context.userId}\n              canCancel\n                canConfirm\n                onCancel={this.modalCancelHandler}\n                onConfirm={this.modalConfirmSearchLeaveDateRangeHandler}\n                confirmText=\"Search\"\n                user={this.context.selectedUser}\n              />\n              )}\n            </Tab>\n            <Tab eventKey=\"Name\" title=\"Name:\">\n            {this.state.searching === true && (\n              <SearchUserNameForm\n              authUserId={this.context.userId}\n              canCancel\n                canConfirm\n                onCancel={this.modalCancelHandler}\n                onConfirm={this.modalConfirmSearchNameHandler}\n                confirmText=\"Search\"\n                user={this.context.selectedUser}\n              />\n            )}\n            </Tab>\n            </Tabs>\n            </Col>\n            <Col md={10}>\n            </Col>\n            </Row>\n\n            </Container>\n            </Tab>\n\n            <Tab eventKey=\"SearchResult\" title=\"Search Results\">\n            <Container className=\"containerSearchUserResults\">\n            <Row>\n              <Card className=\"searchCard\">\n                <Card.Body className=\"searchCardBody\">\n                  <Card.Title>Your Search</Card.Title>\n                  <Card.Text>\n                    Field: {this.state.userSearchField}\n                  </Card.Text>\n                  <Card.Text>\n                    Query: {this.state.userSearchQuery}\n                  </Card.Text>\n                </Card.Body>\n              </Card>\n            </Row>\n            <Row className=\"searchListRow\">\n            {this.state.searchUsers !== [] && (\n              <SearchUserList\n                searchUsers={this.state.searchUsers}\n                authUserId={this.context.userId}\n                onViewDetail={this.showDetailHandler}\n              />\n            )}\n            </Row>\n            </Container>\n            </Tab>\n          </Tabs>\n        </Container>\n\n    </Col>\n\n  </Row>\n\n</Accordion>\n</React.Fragment>\n    );\n  }\n}\n\nexport default UsersPage;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\n// import { NavLink } from 'react-router-dom';\n\nimport './UserItem.css';\n\nconst patientItem = props => (\n  <li key={props.patientId} className=\"users__list-item\">\n  <div>\n    <h5 className=\"userItemHeading\"> Name:</h5>\n    <p className=\"userItemText\">\n      {props.name}\n    </p>\n    <h5 className=\"userItemHeading\"> Reg Date:</h5>\n    <p className=\"userItemText\">\n      {props.registrationDate}\n    </p>\n  </div>\n  <div>\n  <Button variant=\"primary\" onClick={props.onDetail.bind(this, props._id)}>\n        Details\n      </Button>\n  </div>\n  </li>\n);\n\nexport default patientItem;\n","import React from 'react';\n\nimport PatientItem from './PatientItem/PatientItem';\nimport './UserList.css';\n\nconst patientList = props => {\n  const patients = props.patients.map(patient => {\n    const patientRegistrationDate = new Date(patient.registrationDate.substr(0,10)*1000).toISOString().slice(0,10)\n    return (\n      <PatientItem\n        key={patient._id}\n        _id={patient._id}\n        name={patient.name}\n        registrationDate={patientRegistrationDate}\n        onDetail={props.onViewDetail}\n      />\n    );\n  });\n\n  return <ul className=\"user__list1\">{patients}</ul>;\n};\n\nexport default patientList;\n","import React from 'react';\n\nimport './UserItem.css';\n\n\nconst patientAppointmentItem = props => (\n  <li key={props.userId} className=\"users__list-item\">\n    <div>\n      <p>\n        Type: {props.type}\n      </p>\n      <p>\n        Date: {props.date}\n      </p>\n      <p>\n        Title: {props.title}\n      </p>\n      <p>\n        Description: {props.description}\n      </p>\n      <p>\n        Location : {props.location}\n      </p>\n    </div>\n  </li>\n);\n\nexport default patientAppointmentItem;\n","import React from 'react';\n\n\nimport PatientAppointmentItem from './PatientItem/PatientAppointmentItem';\nimport './UserList.css';\n\nconst patientAppointmentList = props => {\n  console.log(\"patient Appointment list props\", props.patientAppointment);\n  const patientAppointment = props.patientAppointment.map(appointment => {\n    const patientAppointmentDate = new Date(appointment.date.substr(0,10)*1000).toISOString().slice(0,10);\n    return (\n      <PatientAppointmentItem\n        key={appointment.date}\n        userId={props.authUserId}\n        type={appointment.type}\n        date={patientAppointmentDate}\n        title={appointment.title}\n        description={appointment.description}\n        location={appointment.location}\n      />\n    );\n  });\n\n  return <ul className=\"user__list1\">{patientAppointment}</ul>;\n};\n\nexport default patientAppointmentList;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\n\nimport './UserItem.css';\n\n\nconst patientInsuranceItem = props => (\n  <li key={props.userId} className=\"users__list-item\">\n    <div>\n      <p>\n      Company: {props.company}\n      </p>\n      <p>\n        Number: {props.number}\n      </p>\n      <p>\n        Description: {props.description}\n      </p>\n      <p>\n        Expiry: {props.expiry}\n      </p>\n      <p>\n        Subscriber Company: {props.subscriber.company}\n      </p>\n      <p>\n        Subscriber Description: {props.subscriber.description}\n      </p>\n    </div>\n    { props.canDelete === true && (\n      <Button variant=\"danger\" onClick={props.onDelete.bind(this, props.insurance)}>\n        Delete\n      </Button>\n    )}\n  </li>\n);\n\nexport default patientInsuranceItem;\n","import React from 'react';\n\nimport PatientInsuranceItem from './PatientItem/PatientInsuranceItem';\nimport './UserList.css';\n\nconst patientInsuranceList = props => {\n  console.log(\"patient insurance list props\", props.patientInsurance);\n  const patientInsurance = props.patientInsurance.map(insurance => {\n    const patientInsuranceExpiry = new Date(insurance.expiry.substr(0,10)*1000).toISOString().slice(0,10);\n    return (\n      <PatientInsuranceItem\n        key={insurance.number}\n        userId={props.authUserId}\n        company={insurance.company}\n        number={insurance.number}\n        expiry={patientInsuranceExpiry}\n        description={insurance.description}\n        subscriber={insurance.subscriber}\n        canDelete={props.canDelete}\n        onDelete={props.onDelete}\n        insurance={insurance}\n      />\n    );\n  });\n\n  return <ul className=\"user__list1\">{patientInsurance}</ul>;\n};\n\nexport default patientInsuranceList;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\n\nimport './UserItem.css';\n\n\nconst patientConsultantItem = props => (\n  <li key={props.userId} className=\"users__list-item\">\n    <div>\n      <p>\n        Date: {props.date}\n      </p>\n      <p>\n      ID: {props.referenceId}\n      </p>\n      <p>\n        Name: {props.referenceName}\n      </p>\n      <p>\n        Role: {props.referenceRole}\n      </p>\n    </div>\n    { props.canDelete === true && (\n      <Button variant=\"danger\" onClick={props.onDelete.bind(this, props.consultant)}>\n        Delete\n      </Button>\n    )}\n  </li>\n);\n\nexport default patientConsultantItem;\n","import React from 'react';\n\nimport PatientConsultantItem from './PatientItem/PatientConsultantItem';\nimport './UserList.css';\n\nconst patientConsultantList = props => {\n  console.log(\"patient consultant list props\", props.patientConsultant);\n  const patientConsultant = props.patientConsultant.map(consultant => {\n    const consultantDate = new Date(consultant.date.substr(0,10)*1000).toISOString().slice(0,10);\n    let consultantId = undefined;\n    let consultantName = undefined;\n    let consultantRole = undefined;\n    if (consultant.reference !== null){\n      consultantId = consultant.reference._id;\n      consultantName = consultant.reference.name;\n      consultantRole = consultant.reference.role;\n    }\n    else {\n      consultantId = 'no consultant info to show';\n      consultantName = 'no consultant info to show';\n      consultantRole = 'no consultant info to show';\n    }\n    return (\n      <PatientConsultantItem\n        key={consultant.date}\n        userId={props.authUserId}\n        date={consultantDate}\n        referenceId={consultantId}\n        referenceName={consultantName}\n        referenceRole={consultantRole}\n        canDelete={props.canDelete}\n        onDelete={props.onDelete}\n        consultant={consultant}\n      />\n    );\n  });\n\n  return <ul className=\"user__list1\">{patientConsultant}</ul>;\n};\n\nexport default patientConsultantList;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\n\nimport './UserItem.css';\n\n\nconst patientNextOfKinItem = props => (\n  <li key={props.userId} className=\"users__list-item\">\n    <div>\n      <p>\n      Name: {props.name}\n      </p>\n      <p>\n        Email: {props.email}\n      </p>\n      <p>\n        Phone: {props.phone}\n      </p>\n    </div>\n    { props.canDelete === true && (\n      <Button variant=\"danger\" onClick={props.onDelete.bind(this, props.nextOfKin)}>\n        Delete\n      </Button>\n    )}\n  </li>\n);\n\nexport default patientNextOfKinItem;\n","import React from 'react';\n\nimport PatientNextOfKinItem from './PatientItem/PatientNextOfKinItem';\nimport './UserList.css';\n\nconst patientNextOfKinList = props => {\n  console.log(\"patient NextOfKin list props\", props.patientNextOfKin);\n  const patientNextOfKin = props.patientNextOfKin.map(nextOfKin => {\n    return (\n      <PatientNextOfKinItem\n        key={nextOfKin.number}\n        userId={props.authUserId}\n        name={nextOfKin.name}\n        email={nextOfKin.contact.email}\n        phone={nextOfKin.contact.phone}\n        canDelete={props.canDelete}\n        onDelete={props.onDelete}\n        nextOfKin={nextOfKin}\n      />\n    );\n  });\n\n  return <ul className=\"user__list1\">{patientNextOfKin}</ul>;\n};\n\nexport default patientNextOfKinList;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\n\nimport './UserItem.css';\n\n\nconst patientComplaintItem = props => (\n  <li key={props.userId} className=\"users__list-item\">\n    <div>\n      <p> Date: {props.date}</p>\n      <p>\n        Tile: {props.title}\n      </p>\n      <p>\n        Description: {props.description}\n      </p>\n      <p>\n        Anamnesis: {props.anamnesis}\n      </p>\n    </div>\n    { props.canDelete === true && (\n      <Button variant=\"danger\" onClick={props.onDelete.bind(this, props.complaint)}>\n        Delete\n      </Button>\n    )}\n  </li>\n);\n\nexport default patientComplaintItem;\n","import React from 'react';\n\nimport PatientComplaintItem from './PatientItem/PatientComplaintItem';\nimport './UserList.css';\n\nconst patientComplaintList = props => {\n  console.log(\"patient complaintlist props\", props.patientComplaint);\n  const patientComplaint = props.patientComplaint.map(complaint => {\n    const patientComplaintDate = new Date(complaint.date.substr(0,10)*1000).toISOString().slice(0,10);\n    return (\n      <PatientComplaintItem\n        key={complaint.date}\n        userId={props.authUserId}\n        date={patientComplaintDate}\n        title={complaint.title}\n        description={complaint.description}\n        anamnesis={complaint.anamnesis}\n        attachment={complaint.attachment}\n        canDelete={props.canDelete}\n        onDelete={props.onDelete}\n        complaint={complaint}\n      />\n    );\n  });\n\n  return <ul className=\"user__list1\">{patientComplaint}</ul>;\n};\n\nexport default patientComplaintList;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\n\nimport './UserItem.css';\n\n\nconst patientSurveyItem = props => (\n  <li key={props.userId} className=\"users__list-item\">\n    <div>\n      <p>\n      Date: {props.date}\n      </p>\n      <p>\n      Title: {props.title}\n      </p>\n      <p>\n      Description: {props.description}\n      </p>\n      <p>\n        Attachment : {props.attachment.name}\n      </p>\n      <p>\n        Attachment Format: {props.attachment.format}\n      </p>\n      <p>\n        Attachment Path: {props.attachment.path}\n      </p>\n    </div>\n    { props.canDelete === true && (\n      <Button variant=\"danger\" onClick={props.onDelete.bind(this, props.survey)}>\n        Delete\n      </Button>\n    )}\n  </li>\n);\n\nexport default patientSurveyItem;\n","import React from 'react';\n\nimport PatientSurveyItem from './PatientItem/PatientSurveyItem';\nimport './UserList.css';\n\nconst patientSurveyList = props => {\n  console.log(\"patient survey list props\", props.patientSurvey);\n  const patientSurvey = props.patientSurvey.map(survey => {\n    const patientSurveyDate = new Date(survey.date.substr(0,10)*1000).toISOString().slice(0,10);\n    return (\n      <PatientSurveyItem\n        key={survey.title}\n        userId={props.authUserId}\n        title={survey.title}\n        date={patientSurveyDate}\n        description={survey.description}\n        attachment={survey.attachment}\n        canDelete={props.canDelete}\n        onDelete={props.onDelete}\n        survey={survey}\n      />\n    );\n  });\n\n  return <ul className=\"user__list1\">{patientSurvey}</ul>;\n};\n\nexport default patientSurveyList;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\n\nimport './UserItem.css';\n\n\nconst patientVitalsItem = props => (\n  <li key={props.userId} className=\"users__list-item\">\n    <div>\n      <p>\n        Date: {props.date}\n      </p>\n      <p>\n        Pr: {props.pr}\n      </p>\n      <p>\n        Bp1: {props.bp1}\n      </p>\n      <p>\n        Bp2: {props.bp2}\n      </p>\n      <p>\n        Rr: {props.rr}\n      </p>\n      <p>\n        Temp: {props.temp}\n      </p>\n      <p>\n        Ps02: {props.ps02}\n      </p>\n      <p>\n        Height: {props.height}\n      </p>\n      <p>\n        Weight: {props.weight}\n      </p>\n      <p>\n        Bmi: {props.bmi}\n      </p>\n      <p>\n        Urine:\n      </p>\n      <p>\n        Type: {props.urineType}\n      </p>\n      <p>\n        Value: {props.urineValue}\n      </p>\n    </div>\n    { props.canDelete === true && (\n      <Button variant=\"danger\" onClick={props.onDelete.bind(this, props.vitals)}>\n        Delete\n      </Button>\n    )}\n  </li>\n);\n\nexport default patientVitalsItem;\n","import React from 'react';\n\nimport PatientVitalsItem from './PatientItem/PatientVitalsItem';\nimport './UserList.css';\n\nconst patientVitalsList = props => {\n  console.log(\"patient Vitals list props\", props.patientVitals);\n  const patientVitals = props.patientVitals.map(vitals => {\n    const patientVitalsDate = new Date(vitals.date.substr(0,10)*1000).toISOString().slice(0,10);\n    return (\n      <PatientVitalsItem\n        key={patientVitalsDate}\n        userId={props.authUserId}\n        date={patientVitalsDate}\n        pr={vitals.pr}\n        bp1={vitals.bp1}\n        bp2={vitals.bp2}\n        rr={vitals.rr}\n        temp={vitals.temp}\n        height={vitals.height}\n        weight={vitals.weight}\n        bmi={vitals.bmi}\n        urineType={vitals.urine.type}\n        urineValue={vitals.urine.value}\n        canDelete={props.canDelete}\n        onDelete={props.onDelete}\n        vitals={vitals}\n        />\n    );\n  });\n\n  return <ul className=\"user__list1\">{patientVitals}</ul>;\n};\n\nexport default patientVitalsList;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\n\nimport './UserItem.css';\n\n\nconst patientExaminationItem = props => (\n  <li key={props.userId} className=\"users__list-item\">\n    <div>\n      <p>\n      Date: {props.date}\n      </p>\n      <p>\n      General: {props.general}\n      </p>\n      <p>\n      Area: {props.area}\n      </p>\n      <p>\n        Type: {props.type}\n      </p>\n      <p>\n        Measure: {props.measure}\n      </p>\n      <p>\n        Value: {props.value}\n      </p>\n      <p>\n        Description: {props.description}\n      </p>\n      <p>\n        FollowUp?: {props.followUp}\n      </p>\n      <p>\n        Attachment : {props.attachment.name}\n      </p>\n      <p>\n        Attachment Format: {props.attachment.format}\n      </p>\n      <p>\n        Attachment Path: {props.attachment.path}\n      </p>\n    </div>\n    { props.canDelete === true && (\n      <Button variant=\"danger\" onClick={props.onDelete.bind(this, props.examination)}>\n        Delete\n      </Button>\n    )}\n  </li>\n);\n\nexport default patientExaminationItem;\n","import React from 'react';\n\nimport PatientExaminationItem from './PatientItem/PatientExaminationItem';\nimport './UserList.css';\n\nconst patientExaminationList = props => {\n  console.log(\"patient examination list props\", props.patientExamination);\n  const patientExamination = props.patientExamination.map(examination => {\n    const patientExaminationDate = new Date(examination.date.substr(0,10)*1000).toISOString().slice(0,10);\n    return (\n      <PatientExaminationItem\n        key={examination.area}\n        userId={props.authUserId}\n        date={patientExaminationDate}\n        general={examination.general}\n        area={examination.area}\n        type={examination.type}\n        measure={examination.measure}\n        value={examination.value}\n        description={examination.description}\n        followUp={examination.followUp}\n        attachment={examination.attachment}\n        canDelete={props.canDelete}\n        onDelete={props.onDelete}\n        examination={examination}\n      />\n    );\n  });\n\n  return <ul className=\"user__list1\">{patientExamination}</ul>;\n};\n\nexport default patientExaminationList;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\n\nimport './UserItem.css';\n\n\nconst patientHistoryItem = props => (\n  <li key={props.userId} className=\"users__list-item\">\n    <div>\n      <p>\n        Type: {props.type}\n      </p>\n      <p>\n        Date: {props.date}\n      </p>\n      <p>\n        Title: {props.title}\n      </p>\n      <p>\n        Description: {props.description}\n      </p>\n      <p>\n        Attachment : {props.attachment.name}\n      </p>\n      <p>\n        Attachment Format: {props.attachment.format}\n      </p>\n      <p>\n        Attachment Path: {props.attachment.path}\n      </p>\n    </div>\n    { props.canDelete === true && (\n      <Button variant=\"danger\" onClick={props.onDelete.bind(this, props.history)}>\n        Delete\n      </Button>\n    )}\n  </li>\n);\n\nexport default patientHistoryItem;\n","import React from 'react';\n\nimport PatientHistoryItem from './PatientItem/PatientHistoryItem';\nimport './UserList.css';\n\nconst patientHistoryList = props => {\n  console.log(\"patient history list props\", props.patientHistory);\n  const patientHistory = props.patientHistory.map(history => {\n    const patientHistoryDate = new Date(history.date.substr(0,10)*1000).toISOString().slice(0,10);\n    return (\n      <PatientHistoryItem\n        key={history.date}\n        userId={props.authUserId}\n        type={history.type}\n        date={patientHistoryDate}\n        title={history.title}\n        description={history.description}\n        attachment={history.attachment}\n        canDelete={props.canDelete}\n        onDelete={props.onDelete}\n        history={history}\n      />\n    );\n  });\n\n  return <ul className=\"user__list1\">{patientHistory}</ul>;\n};\n\nexport default patientHistoryList;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\n\nimport './UserItem.css';\n\n\nconst patientAllergiesItem = props => (\n  <li key={props.userId} className=\"users__list-item\">\n    <div>\n      <p>\n        Title: {props.title}\n      </p>\n      <p>\n        Type: {props.type}\n      </p>\n      <p>\n        Description: {props.description}\n      </p>\n      <p>\n        Attachment: {props.attachment.name}\n      </p>\n      <p>\n        Attachment Format: {props.attachment.format}\n      </p>\n      <p>\n        Attachment Path: {props.attachment.path}\n      </p>\n    </div>\n    { props.canDelete === true && (\n      <Button variant=\"danger\" onClick={props.onDelete.bind(this, props.allergies)}>\n        Delete\n      </Button>\n    )}\n  </li>\n);\n\nexport default patientAllergiesItem;\n","import React from 'react';\n\nimport PatientAllergiesItem from './PatientItem/PatientAllergiesItem';\nimport './UserList.css';\n\nconst patientAllergiesList = props => {\n  console.log(\"patient allergies list props\", props.patientAllergies);\n  const patientAllergies = props.patientAllergies.map(allergies => {\n\n    return (\n      <PatientAllergiesItem\n        key={allergies.title}\n        userId={props.authUserId}\n        title={allergies.title}\n        type={allergies.type}\n        description={allergies.description}\n        attachment={allergies.attachment}\n        canDelete={props.canDelete}\n        onDelete={props.onDelete}\n        allergies={allergies}\n      />\n    );\n  });\n\n  return <ul className=\"user__list1\">{patientAllergies}</ul>;\n};\n\nexport default patientAllergiesList;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\n\nimport './UserItem.css';\n\nconst patientMedicationItem = props => (\n  <li key={props.userId} className=\"users__list-item\">\n    <div>\n      <p>\n        Title: {props.title}\n      </p>\n      <p>\n        Type: {props.type}\n      </p>\n      <p>\n        Description: {props.description}\n      </p>\n      <p>\n        Attachment: {props.attachment.name}\n      </p>\n    </div>\n    { props.canDelete === true && (\n      <Button variant=\"danger\" onClick={props.onDelete.bind(this, props.medication)}>\n        Delete\n      </Button>\n    )}\n  </li>\n);\n\nexport default patientMedicationItem;\n","import React from 'react';\n\nimport PatientMedicationItem from './PatientItem/PatientMedicationItem';\nimport './UserList.css';\n\nconst patientMedicationList = props => {\n  console.log(\"patient medication list props\", props.patientMedication);\n  const patientMedication = props.patientMedication.map(medication => {\n    return (\n      <PatientMedicationItem\n        key={medication.title}\n        userId={props.authUserId}\n        title={medication.title}\n        type={medication.type}\n        description={medication.description}\n        attachment={medication.attachment}\n        canDelete={props.canDelete}\n        onDelete={props.onDelete}\n        medication={medication}\n      />\n    );\n  });\n\n  return <ul className=\"user__list1\">{patientMedication}</ul>;\n};\n\nexport default patientMedicationList;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\n\nimport './UserItem.css';\n\n\nconst patientInvestigationItem = props => (\n  <li key={props.userId} className=\"users__list-item\">\n    <div>\n      <p>\n        Title: {props.title}\n      </p>\n      <p>\n        Type: {props.type}\n      </p>\n      <p>\n        Date: {props.date}\n      </p>\n      <p>\n        Description: {props.description}\n      </p>\n      <p>\n        Attachment : {props.attachment.name}\n      </p>\n      <p>\n        Attachment Format: {props.attachment.format}\n      </p>\n      <p>\n        Attachment Path: {props.attachment.path}\n      </p>\n    </div>\n    { props.canDelete === true && (\n      <Button variant=\"danger\" onClick={props.onDelete.bind(this, props.investigation)}>\n        Delete\n      </Button>\n    )}\n  </li>\n);\n\nexport default patientInvestigationItem;\n","import React from 'react';\n\nimport PatientInvestigationItem from './PatientItem/PatientInvestigationItem';\nimport './UserList.css';\n\nconst patientInvestigationList = props => {\n  console.log(\"patient investigation list props\", props.patientInvestigation);\n  const patientInvestigation = props.patientInvestigation.map(investigation => {\n    const patientInvestigationDate = new Date(investigation.date.substr(0,10)*1000).toISOString().slice(0,10);\n    return (\n      <PatientInvestigationItem\n        key={investigation.date}\n        userId={props.authUserId}\n        date={patientInvestigationDate}\n        title={investigation.title}\n        type={investigation.type}\n        description={investigation.description}\n        attachment={investigation.attachment}\n        canDelete={props.canDelete}\n        onDelete={props.onDelete}\n        investigation={investigation}\n      />\n    );\n  });\n\n  return <ul className=\"user__list1\">{patientInvestigation}</ul>;\n};\n\nexport default patientInvestigationList;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\n\nimport './UserItem.css';\n\n\nconst patientDiagnosisItem = props => (\n  <li key={props.userId} className=\"users__list-item\">\n    <div>\n      <p>\n        Title: {props.title}\n      </p>\n      <p>\n        Type: {props.type}\n      </p>\n      <p>\n        Date: {props.date}\n      </p>\n      <p>\n        Description: {props.description}\n      </p>\n      <p>\n        Attachment: {props.attachment.name}\n      </p>\n      <p>\n        Attachment Format: {props.attachment.format}\n      </p>\n      <p>\n        Attachment Path: {props.attachment.path}\n      </p>\n    </div>\n    { props.canDelete === true && (\n      <Button variant=\"danger\" onClick={props.onDelete.bind(this, props.diagnosis)}>\n        Delete\n      </Button>\n    )}\n  </li>\n);\n\nexport default patientDiagnosisItem;\n","import React from 'react';\n\nimport PatientDiagnosisItem from './PatientItem/PatientDiagnosisItem';\nimport './UserList.css';\n\nconst patientDiagnosisList = props => {\n  console.log(\"patient diagnosis list props\", props.patientDiagnosis);\n  const patientDiagnosis = props.patientDiagnosis.map(diagnosis => {\n    const patientDiagnosisDate = new Date(diagnosis.date.substr(0,10)*1000).toISOString().slice(0,10);\n    return (\n      <PatientDiagnosisItem\n        key={diagnosis.date}\n        userId={props.authUserId}\n        date={patientDiagnosisDate}\n        title={diagnosis.title}\n        type={diagnosis.type}\n        description={diagnosis.description}\n        attachment={diagnosis.attachment}\n        canDelete={props.canDelete}\n        onDelete={props.onDelete}\n        diagnosis={diagnosis}\n      />\n    );\n  });\n\n  return <ul className=\"user__list1\">{patientDiagnosis}</ul>;\n};\n\nexport default patientDiagnosisList;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\n\nimport './UserItem.css';\n\n\nconst patientTreatmentItem = props => (\n  <li key={props.userId} className=\"users__list-item\">\n    <div>\n      <p>\n        Title: {props.title}\n      </p>\n      <p>\n        Type: {props.type}\n      </p>\n      <p>\n        Date: {props.date}\n      </p>\n      <p>\n        Description: {props.description}\n      </p>\n      <p>\n        Dose: {props.dose}\n      </p>\n      <p>\n        Frequency: {props.frequency}\n      </p>\n      <p>\n        Attachment: {props.attachment.name}\n      </p>\n    </div>\n    { props.canDelete === true && (\n      <Button variant=\"danger\" onClick={props.onDelete.bind(this, props.treatment)}>\n        Delete\n      </Button>\n    )}\n  </li>\n);\n\nexport default patientTreatmentItem;\n","import React from 'react';\n\nimport PatientTreatmentItem from './PatientItem/PatientTreatmentItem';\nimport './UserList.css';\n\nconst patientTreatmentList = props => {\n  console.log(\"patient treatment list props\", props.patientTreatment);\n  const patientTreatment = props.patientTreatment.map(treatment => {\n    const patientTreatmentDate = new Date(treatment.date.substr(0,10)*1000).toISOString().slice(0,10);\n    return (\n      <PatientTreatmentItem\n        key={treatment.date}\n        userId={props.authUserId}\n        date={patientTreatmentDate}\n        title={treatment.title}\n        type={treatment.type}\n        description={treatment.description}\n        dose={treatment.dose}\n        frequency={treatment.frequency}\n        type={treatment.type}\n        attachment={treatment.attachment}\n        canDelete={props.canDelete}\n        onDelete={props.onDelete}\n        treatment={treatment}\n      />\n    );\n  });\n\n  return <ul className=\"user__list1\">{patientTreatment}</ul>;\n};\n\nexport default patientTreatmentList;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\n\nimport './UserItem.css';\n\n\nconst patientBillingItem = props => (\n  <li key={props.userId} className=\"users__list-item\">\n    <div>\n      <p>\n        Title: {props.title}\n      </p>\n      <p>\n        Type: {props.type}\n      </p>\n      <p>\n        Date: {props.date}\n      </p>\n      <p>\n        Description: {props.description}\n      </p>\n      <p>\n        Amount: {props.amount}\n      </p>\n      <p>\n        Paid: {props.paid}\n      </p>\n      <p>\n        Notes: {props.notes}\n      </p>\n      <p>\n        Attachment: {props.attachment.name}\n      </p>\n      <p>\n        Attachment Format: {props.attachment.format}\n      </p>\n      <p>\n        Attachment Path: {props.attachment.path}\n      </p>\n    </div>\n    { props.canDelete === true && (\n      <Button variant=\"danger\" onClick={props.onDelete.bind(this, props.billing)}>\n        Delete\n      </Button>\n    )}\n  </li>\n);\n\nexport default patientBillingItem;\n","import React from 'react';\n\nimport PatientBillingItem from './PatientItem/PatientBillingItem';\nimport './UserList.css';\n\nconst patientBillingList = props => {\n  console.log(\"patient billing list props\", props.patientBilling);\n  const patientBilling = props.patientBilling.map(billing => {\n    const patientBillingDate = new Date(billing.date.substr(0,10)*1000).toISOString().slice(0,10);\n    return (\n      <PatientBillingItem\n        key={billing.date}\n        userId={props.authUserId}\n        date={patientBillingDate}\n        type={billing.type}\n        title={billing.title}\n        description={billing.description}\n        amount={billing.amount}\n        paid={billing.paid}\n        notes={billing.notes}\n        attachment={billing.attachment}\n        canDelete={props.canDelete}\n        onDelete={props.onDelete}\n        billing={billing}\n      />\n    );\n  });\n\n  return <ul className=\"user__list1\">{patientBilling}</ul>;\n};\n\nexport default patientBillingList;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\n\nimport './UserItem.css';\n\n\nconst patientAttachmentItem = props => (\n  <li key={props.userId} className=\"users__list-item\">\n    <div>\n      <p>\n        Name: {props.name}\n      </p>\n      <p>\n        Format: {props.format}\n      </p>\n      <p>\n        Path: {props.path}\n      </p>\n    </div>\n    { props.canDelete === true && (\n      <Button variant=\"danger\" onClick={props.onDelete.bind(this, props.attachment)}>\n        Delete\n      </Button>\n    )}\n  </li>\n);\n\nexport default patientAttachmentItem;\n","import React from 'react';\n\nimport PatientAttachmentItem from './PatientItem/PatientAttachmentItem';\nimport './UserList.css';\n\nconst patientAttachmentsList = props => {\n  console.log(\"patient attachments list props\", props.patientAttachments);\n  const patientAttachments = props.patientAttachments.map(attachment => {\n\n    return (\n      <PatientAttachmentItem\n        key={attachment.name}\n        userId={props.authUserId}\n        name={attachment.name}\n        format={attachment.format}\n        path={attachment.path}\n        canDelete={props.canDelete}\n        onDelete={props.onDelete}\n        attachment={attachment}\n      />\n    );\n  });\n\n  return <ul className=\"user__list1\">{patientAttachments}</ul>;\n};\n\nexport default patientAttachmentsList;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\n\nimport './UserItem.css';\n\n\nconst patientNoteItem = props => (\n  <li key={props.userId} className=\"users__list-item\">\n    <div>\n      <p>\n        Note: {props.note}\n      </p>\n    </div>\n    { props.canDelete === true && (\n      <Button variant=\"danger\" onClick={props.onDelete.bind(this, props.note)}>\n        Delete\n      </Button>\n    )}\n  </li>\n);\n\nexport default patientNoteItem;\n","import React from 'react';\n\nimport PatientNoteItem from './PatientItem/PatientNoteItem';\nimport './UserList.css';\n\nconst patientNotesList = props => {\n  console.log(\"patient Notes list props\", props.patientNotes);\n  const patientNotes = props.patientNotes.map(note => {\n\n    return (\n      <PatientNoteItem\n        key={note}\n        userId={props.authUserId}\n        note={note}\n        canDelete={props.canDelete}\n        onDelete={props.onDelete}\n      />\n    );\n  });\n\n  return <ul className=\"user__list1\">{patientNotes}</ul>;\n};\n\nexport default patientNotesList;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\n\nimport './UserItem.css';\n\n\nconst patientTagItem = props => (\n  <li key={props.userId} className=\"users__list-item\">\n    <div>\n      <p>\n      Tag: {props.tag}\n      </p>\n    </div>\n    { props.canDelete === true && (\n      <Button variant=\"danger\" onClick={props.onDelete.bind(this, props.tag)}>\n        Delete\n      </Button>\n    )}\n  </li>\n);\n\nexport default patientTagItem;\n","import React from 'react';\n\nimport PatientTagItem from './PatientItem/PatientTagItem';\nimport './UserList.css';\n\nconst patientTagsList = props => {\n  console.log(\"patient Tags list props\", props.patientTags);\n  const patientTags = props.patientTags.map(tag => {\n\n    return (\n      <PatientTagItem\n        key={tag}\n        userId={props.authUserId}\n        tag={tag}\n        canDelete={props.canDelete}\n        onDelete={props.onDelete}\n      />\n    );\n  });\n\n  return <ul className=\"user__list1\">{patientTags}</ul>;\n};\n\nexport default patientTagsList;\n","import React from 'react';\n\nimport './UserItem.css';\n\n\nconst VisitConsultantItem = props => (\n  <li key={props.userId} className=\"users__list-item\">\n    <div>\n      <p>\n        Date: {props.date}\n      </p>\n      <p>\n        Name: {props.referenceName}\n      </p>\n      <p>\n        Role: {props.referenceRole}\n      </p>\n    </div>\n  </li>\n);\n\nexport default VisitConsultantItem;\n","import React from 'react';\n\nimport VisitConsultantItem from './PatientItem/VisitConsultantItem';\nimport './UserList.css';\n\nconst visitConsultantList = props => {\n  console.log(\"VisitConsultantlist props\", props.consultant);\n\n  let consultant = undefined;\n  if (props.consultant) {\n  consultant = props.consultant.map(consultantItem => {\n    const visitConsultantDate = new Date(consultantItem.date.substr(0,10)*1000).toISOString().slice(0,10);\n    const consultantReference = consultantItem.reference;\n    console.log(`\n      visitConsultantDate: ${visitConsultantDate},\n      consultantReference: ${JSON.stringify(consultantReference)},\n      `);\n    return (\n      <VisitConsultantItem\n        key={consultantItem.date}\n        userId={props.authUserId}\n        date={visitConsultantDate}\n        name={consultantReference.name}\n        role={consultantReference.role}\n      />\n    );\n  });\n\n  return <ul className=\"user__list1\">{consultant}</ul>;\n};\n}\nexport default visitConsultantList;\n","import React from 'react';\n\nimport './UserItem.css';\n\n\nconst VisitComplaintItem = props => (\n  <li key={props.userId} className=\"users__list-item\">\n    <div>\n      <p>\n        Date: {props.date}\n      </p>\n      <p>\n        Title: {props.title}\n      </p>\n      <p>\n        Description: {props.description}\n      </p>\n      <p>\n        Anamnesis: {props.anamnesis}\n      </p>\n      <p>\n        Attachment:\n      </p>\n      <p>\n        Name: {props.attachmentName}\n      </p>\n      <p>\n        Format: {props.attachmentFormat}\n      </p>\n      <p>\n        Path: {props.attachmentPath}\n      </p>\n    </div>\n  </li>\n);\n\nexport default VisitComplaintItem;\n","import React from 'react';\n\nimport VisitComplaintItem from './PatientItem/VisitComplaintItem';\nimport './UserList.css';\n\nconst visitComplaintList = props => {\n  console.log(\"VisitComplaintlist props\", props.complaint);\n\n  let complaint = undefined;\n  if (props.complaint) {\n  complaint = props.complaint.map(complaintItem => {\n    const visitComplaintDate = new Date(complaintItem.date.substr(0,10)*1000).toISOString().slice(0,10);\n    const complaintAttachment = complaintItem.attachment;\n    console.log(`\n      visitComplaintDate: ${visitComplaintDate},\n      `);\n    return (\n      <VisitComplaintItem\n        key={complaintItem.date}\n        userId={props.authUserId}\n        date={visitComplaintDate}\n        title={complaintItem.title}\n        description={complaintItem.description}\n        anamnesis={complaintItem.anamnesis}\n        attachmentName={complaintAttachment.name}\n        attachmentFormat={complaintAttachment.format}\n        attachmentPath={complaintAttachment.path}\n      />\n    );\n  });\n\n  return <ul className=\"user__list1\">{complaint}</ul>;\n};\n}\n\nexport default visitComplaintList;\n","import React from 'react';\n\nimport './UserItem.css';\n\n\nconst VisitExaminationItem = props => (\n  <li key={props.userId} className=\"users__list-item\">\n    <div>\n      <p>\n        Date: {props.date}\n      </p>\n      <p>\n        General: {props.general}\n      </p>\n      <p>\n        Area: {props.area}\n      </p>\n      <p>\n        Type: {props.type}\n      </p>\n      <p>\n        Measure: {props.measure}\n      </p>\n      <p>\n        Value: {props.value}\n      </p>\n      <p>\n        Description: {props.description}\n      </p>\n      <p>\n        FollowUp: {props.followUp}\n      </p>\n      <p>\n        Attachment:\n      </p>\n      <p>\n        Name: {props.attachmentName}\n      </p>\n      <p>\n        Format: {props.attachmentFormat}\n      </p>\n      <p>\n        Path: {props.attachmentPath}\n      </p>\n    </div>\n  </li>\n);\n\nexport default VisitExaminationItem;\n","import React from 'react';\n\nimport VisitExaminationItem from './PatientItem/VisitExaminationItem';\nimport './UserList.css';\n\nconst visitExaminationList = props => {\n  console.log(\"VisitExaminationlist props\", props.examination);\n\n  let examination = undefined;\n  if (props.examination) {\n  examination = props.examination.map(examinationItem => {\n    const visitExaminationDate = new Date(examinationItem.date.substr(0,10)*1000).toISOString().slice(0,10);\n    const examinationAttachment = examinationItem.attachment;\n    console.log(`\n      visitExaminationDate: ${visitExaminationDate},\n      `);\n    return (\n      <VisitExaminationItem\n        key={examinationItem.date}\n        userId={props.authUserId}\n        date={visitExaminationDate}\n        general={examinationItem.general}\n        area={examinationItem.area}\n        type={examinationItem.type}\n        measure={examinationItem.measure}\n        value={examinationItem.value}\n        description={examinationItem.description}\n        followUp={examinationItem.followUp}\n        attachmentName={examinationAttachment.name}\n        attachmentFormat={examinationAttachment.format}\n        attachmentPath={examinationAttachment.path}\n      />\n    );\n  });\n\n  return <ul className=\"user__list1\">{examination}</ul>;\n};\n}\nexport default visitExaminationList;\n","import React from 'react';\n\nimport './UserItem.css';\n\n\nconst VisitSurveyItem = props => (\n  <li key={props.userId} className=\"users__list-item\">\n    <div>\n      <p>\n        Date: {props.date}\n      </p>\n      <p>\n        Title: {props.title}\n      </p>\n      <p>\n        Description: {props.description}\n      </p>\n      <p>\n        Attachment:\n      </p>\n      <p>\n        Name: {props.attachmentName}\n      </p>\n      <p>\n        Format: {props.attachmentFormat}\n      </p>\n      <p>\n        Path: {props.attachmentPath}\n      </p>\n    </div>\n  </li>\n);\n\nexport default VisitSurveyItem;\n","import React from 'react';\n\nimport VisitSurveyItem from './PatientItem/VisitSurveyItem';\nimport './UserList.css';\n\nconst visitSurveyList = props => {\n  console.log(\"VisitSurveylist props\", props.survey);\n\n  let survey = undefined;\n  if (props.survey) {\n  survey = props.survey.map(surveyItem => {\n    const visitSurveyDate = new Date(surveyItem.date.substr(0,10)*1000).toISOString().slice(0,10);\n    const surveyAttachment = surveyItem.attachment;\n    console.log(`\n      visitSurveyDate: ${visitSurveyDate},\n      `);\n    return (\n      <VisitSurveyItem\n        key={surveyItem.date}\n        userId={props.authUserId}\n        date={visitSurveyDate}\n        title={surveyItem.title}\n        description={surveyItem.description}\n        attachmentName={surveyAttachment.name}\n        attachmentFormat={surveyAttachment.format}\n        attachmentPath={surveyAttachment.path}\n      />\n    );\n  });\n}\n\n  return <ul className=\"user__list1\">{survey}</ul>;\n};\n\nexport default visitSurveyList;\n","import React from 'react';\n\nimport './UserItem.css';\n\n\nconst VisitVitalsItem = props => (\n  <li key={props.userId} className=\"users__list-item\">\n    <div>\n      <p>\n        Date: {props.date}\n      </p>\n      <p>\n        Pr: {props.pr}\n      </p>\n      <p>\n        Bp1: {props.bp1}\n      </p>\n      <p>\n        Bp2: {props.bp2}\n      </p>\n      <p>\n        Rr: {props.rr}\n      </p>\n      <p>\n        Temp: {props.temp}\n      </p>\n      <p>\n        Ps02: {props.ps02}\n      </p>\n      <p>\n        Height: {props.height}\n      </p>\n      <p>\n        Weight: {props.weight}\n      </p>\n      <p>\n        Bmi: {props.bmi}\n      </p>\n      <p>\n        UrineType: {props.urineType}\n      </p>\n      <p>\n        UrineValue: {props.urineValue}\n      </p>\n    </div>\n  </li>\n);\n\nexport default VisitVitalsItem;\n","import React from 'react';\n\nimport VisitVitalsItem from './PatientItem/VisitVitalsItem';\nimport './UserList.css';\n\nconst visitVitalsList = props => {\n  console.log(\"VisitVitalslist props\", props.vitals);\n  let vitals = undefined;\n  if (props.vitals) {\n\n    vitals = props.vitals.map(vitalsItem => {\n      const visitVitalsDate = new Date(vitalsItem.date.substr(0,10)*1000).toISOString().slice(0,10);\n      const vitalsUrine = vitalsItem.urine;\n      console.log(`\n        visitVitalsDate: ${visitVitalsDate},\n        `);\n      return (\n        <VisitVitalsItem\n          key={vitalsItem.date}\n          userId={props.authUserId}\n          date={visitVitalsDate}\n          pr={vitalsItem.pr}\n          bp1={vitalsItem.bp1}\n          bp2={vitalsItem.bp2}\n          rr={vitalsItem.rr}\n          temp={vitalsItem.temp}\n          ps02={vitalsItem.ps02}\n          height={vitalsItem.height}\n          weight={vitalsItem.weight}\n          bmi={vitalsItem.bmi}\n          urineType={vitalsUrine.type}\n          urineValue={vitalsUrine.value}\n        />\n      );\n    });\n\n  }\n\n\n  return <ul className=\"user__list1\">{vitals}</ul>;\n};\n\nexport default visitVitalsList;\n","import React from 'react';\n\nimport './UserItem.css';\n\n\nconst VisitHistoryItem = props => (\n  <li key={props.userId} className=\"users__list-item\">\n    <div>\n      <p>\n        Date: {props.date}\n      </p>\n      <p>\n        Title: {props.title}\n      </p>\n      <p>\n        Description: {props.description}\n      </p>\n      <p>\n        Attachment:\n      </p>\n      <p>\n        Name: {props.attachmentName}\n      </p>\n      <p>\n        Format: {props.attachmentFormat}\n      </p>\n      <p>\n        Path: {props.attachmentPath}\n      </p>\n    </div>\n  </li>\n);\n\nexport default VisitHistoryItem;\n","import React from 'react';\n\nimport VisitHistoryItem from './PatientItem/VisitHistoryItem';\nimport './UserList.css';\n\nconst visitHistoryList = props => {\n  console.log(\"VisitHistorylist props\", props.history);\n\n  let history = undefined;\n  if (props.history) {\n  history = props.history.map(historyItem => {\n    const visitHistoryDate = new Date(historyItem.date.substr(0,10)*1000).toISOString().slice(0,10);\n    const historyAttachment = historyItem.attachment;\n    console.log(`\n      visitHistoryDate: ${visitHistoryDate},\n      `);\n    return (\n      <VisitHistoryItem\n        key={historyItem.date}\n        userId={props.authUserId}\n        date={visitHistoryDate}\n        title={historyItem.title}\n        description={historyItem.description}\n        attachmentName={historyAttachment.name}\n        attachmentFormat={historyAttachment.format}\n        attachmentPath={historyAttachment.path}\n      />\n    );\n  });\n\n  return <ul className=\"user__list1\">{history}</ul>;\n};\n}\nexport default visitHistoryList;\n","import React from 'react';\n\nimport './UserItem.css';\n\n\nconst VisitInvestigationItem = props => (\n  <li key={props.userId} className=\"users__list-item\">\n    <div>\n      <p>\n        Date: {props.date}\n      </p>\n      <p>\n        Title: {props.title}\n      </p>\n      <p>\n        Type: {props.type}\n      </p>\n      <p>\n        Description: {props.description}\n      </p>\n      <p>\n        Attachment:\n      </p>\n      <p>\n        Name: {props.attachmentName}\n      </p>\n      <p>\n        Format: {props.attachmentFormat}\n      </p>\n      <p>\n        Path: {props.attachmentPath}\n      </p>\n    </div>\n  </li>\n);\n\nexport default VisitInvestigationItem;\n","import React from 'react';\n\nimport VisitInvestigationItem from './PatientItem/VisitInvestigationItem';\nimport './UserList.css';\n\nconst visitInvestigationList = props => {\n  console.log(\"VisitInvestigationlist props\", props.investigation);\n\n  let investigation = undefined;\n  if (props.investigation) {\n  investigation = props.investigation.map(investigationItem => {\n    const visitInvestigationDate = new Date(investigationItem.date.substr(0,10)*1000).toISOString().slice(0,10);\n    const investigationAttachment = investigationItem.attachment;\n    console.log(`\n      visitInvestigationDate: ${visitInvestigationDate},\n      `);\n    return (\n      <VisitInvestigationItem\n        key={investigationItem.date}\n        userId={props.authUserId}\n        date={visitInvestigationDate}\n        type={investigationItem.type}\n        title={investigationItem.title}\n        description={investigationItem.description}\n        attachmentName={investigationAttachment.name}\n        attachmentFormat={investigationAttachment.format}\n        attachmentPath={investigationAttachment.path}\n      />\n    );\n  });\n}\n\n  return <ul className=\"user__list1\">{investigation}</ul>;\n};\n\nexport default visitInvestigationList;\n","import React from 'react';\n\nimport './UserItem.css';\n\n\nconst VisitDiagnosisItem = props => (\n  <li key={props.userId} className=\"users__list-item\">\n    <div>\n      <p>\n        Date: {props.date}\n      </p>\n      <p>\n        Type: {props.type}\n      </p>\n      <p>\n        Title: {props.title}\n      </p>\n      <p>\n        Description: {props.description}\n      </p>\n      <p>\n        Attachment:\n      </p>\n      <p>\n        Name: {props.attachmentName}\n      </p>\n      <p>\n        Format: {props.attachmentFormat}\n      </p>\n      <p>\n        Path: {props.attachmentPath}\n      </p>\n    </div>\n  </li>\n);\n\nexport default VisitDiagnosisItem;\n","import React from 'react';\n\nimport VisitDiagnosisItem from './PatientItem/VisitDiagnosisItem';\nimport './UserList.css';\n\nconst visitDiagnosisList = props => {\n  console.log(\"VisitDiagnosislist props\", props.diagnosis);\n\n  let diagnosis = undefined;\n  if (props.diagnosis) {\n  diagnosis = props.diagnosis.map(diagnosisItem => {\n    const visitDiagnosisDate = new Date(diagnosisItem.date.substr(0,10)*1000).toISOString().slice(0,10);\n    const diagnosisAttachment = diagnosisItem.attachment;\n    console.log(`\n      visitDiagnosisDate: ${visitDiagnosisDate},\n      `);\n    return (\n      <VisitDiagnosisItem\n        key={diagnosisItem.date}\n        userId={props.authUserId}\n        date={visitDiagnosisDate}\n        type={diagnosisItem.type}\n        title={diagnosisItem.title}\n        description={diagnosisItem.description}\n        attachmentName={diagnosisAttachment.name}\n        attachmentFormat={diagnosisAttachment.format}\n        attachmentPath={diagnosisAttachment.path}\n      />\n    );\n  });\n\n  return <ul className=\"user__list1\">{diagnosis}</ul>;\n};\n}\nexport default visitDiagnosisList;\n","import React from 'react';\n\nimport './UserItem.css';\n\n\nconst VisitInvestigationItem = props => (\n  <li key={props.userId} className=\"users__list-item\">\n    <div>\n      <p>\n        Date: {props.date}\n      </p>\n      <p>\n        Title: {props.title}\n      </p>\n      <p>\n        Type: {props.type}\n      </p>\n      <p>\n        Description: {props.description}\n      </p>\n      <p>\n        Dose: {props.dose}\n      </p>\n      <p>\n        Frequency: {props.frequency}\n      </p>\n      <p>\n        Attachment:\n      </p>\n      <p>\n        Name: {props.attachmentName}\n      </p>\n      <p>\n        Format: {props.attachmentFormat}\n      </p>\n      <p>\n        Path: {props.attachmentPath}\n      </p>\n    </div>\n  </li>\n);\n\nexport default VisitInvestigationItem;\n","import React from 'react';\n\nimport VisitTreatmentItem from './PatientItem/VisitTreatmentItem';\nimport './UserList.css';\n\nconst visitTreatmentList = props => {\n  console.log(\"VisitTreatmentlist props\", props.treatment);\n  let treatment = undefined;\n  if (props.treatment) {\n  treatment = props.treatment.map(treatmentItem => {\n    const visitTreatmentDate = new Date(treatmentItem.date.substr(0,10)*1000).toISOString().slice(0,10);\n    const treatmentAttachment = treatmentItem.attachment;\n    console.log(`\n      visitTreatmentDate: ${visitTreatmentDate},\n      `);\n    return (\n      <VisitTreatmentItem\n        key={treatmentItem.date}\n        userId={props.authUserId}\n        date={visitTreatmentDate}\n        type={treatmentItem.type}\n        title={treatmentItem.title}\n        type={treatmentItem.type}\n        description={treatmentItem.description}\n        dose={treatmentItem.dose}\n        frequency={treatmentItem.frequency}\n        attachmentName={treatmentAttachment.name}\n        attachmentFormat={treatmentAttachment.format}\n        attachmentPath={treatmentAttachment.path}\n      />\n    );\n  });\n}\n\n  return <ul className=\"user__list1\">{treatment}</ul>;\n};\n\nexport default visitTreatmentList;\n","import React from 'react';\n\nimport './UserItem.css';\n\n\nconst VisitBillingItem = props => (\n  <li key={props.userId} className=\"users__list-item\">\n    <div>\n      <p>\n        Date: {props.date}\n      </p>\n      <p>\n        Title: {props.title}\n      </p>\n      <p>\n        Type: {props.type}\n      </p>\n      <p>\n        Description: {props.description}\n      </p>\n      <p>\n        Amount: {props.amount}\n      </p>\n      <p>\n        Paid: {props.paid}\n      </p>\n      <p>\n        Notes: {props.notes}\n      </p>\n      <p>\n        Attachment:\n      </p>\n      <p>\n        Name: {props.attachmentName}\n      </p>\n      <p>\n        Format: {props.attachmentFormat}\n      </p>\n      <p>\n        Path: {props.attachmentPath}\n      </p>\n    </div>\n  </li>\n);\n\nexport default VisitBillingItem;\n","import React from 'react';\n\nimport VisitBillingItem from './PatientItem/VisitBillingItem';\nimport './UserList.css';\n\nconst visitBillingList = props => {\n  console.log(\"VisitBillinglist props\", props.billing);\n\n  let billing = undefined;\n  if (props.billing) {\n  billing = props.billing.map(billingItem => {\n    const visitBillingDate = new Date(billingItem.date.substr(0,10)*1000).toISOString().slice(0,10);\n    const billingAttachment = billingItem.attachment;\n    console.log(`\n      visitBillingDate: ${visitBillingDate},\n      `);\n    return (\n      <VisitBillingItem\n        key={billingItem.date}\n        userId={props.authUserId}\n        date={visitBillingDate}\n        type={billingItem.type}\n        title={billingItem.title}\n        description={billingItem.description}\n        amount={billingItem.amount}\n        paid={billingItem.paid}\n        notes={billingItem.notes}\n        attachmentName={billingAttachment.name}\n        attachmentFormat={billingAttachment.format}\n        attachmentPath={billingAttachment.path}\n      />\n    );\n  });\n\n  return <ul className=\"user__list1\">{billing}</ul>;\n};\n}\nexport default visitBillingList;\n","import React from 'react';\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\nimport Accordion from 'react-bootstrap/Accordion';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\n\nimport VisitConsultantList from './PatientList/VisitConsultantList';\nimport VisitComplaintList from './PatientList/VisitComplaintList';\nimport VisitExaminationList from './PatientList/VisitExaminationList';\nimport VisitSurveyList from './PatientList/VisitSurveyList';\nimport VisitVitalsList from './PatientList/VisitVitalsList';\nimport VisitHistoryList from './PatientList/VisitHistoryList';\nimport VisitInvestigationList from './PatientList/VisitInvestigationList';\nimport VisitDiagnosisList from './PatientList/VisitDiagnosisList';\nimport VisitTreatmentList from './PatientList/VisitTreatmentList';\nimport VisitBillingList from './PatientList/VisitBillingList';\n\nimport './PatientDetail.css';\n\nconst PatientVisit = (props) => {\n  let visit = {\n    date: \"\",\n    patientName: \"\",\n    consultant: \"\",\n    complaint: \"\",\n    examination: \"\",\n    survey: \"\",\n    vitals: \"\",\n    history: \"\",\n    investigation: \"\",\n    diagnosis: \"\",\n    treatment: \"\",\n    billing: \"\",\n  };\n  if (props.visit !== null) {\n    visit = props.visit;\n  }\n\n  const consultant = visit.consultant;\n  const complaint = visit.complaint;\n  const examination = visit.examination;\n  const survey = visit.survey;\n  const vitals = visit.vitals;\n  const history = visit.history;\n  const investigation = visit.investigation;\n  const diagnosis = visit.diagnosis;\n  const treatment = visit.treatment;\n  const billing = visit.billing;\n\n  console.log(`\n    patientVisit: ${JSON.stringify(visit)},\n    date: ${visit.date},\n    consultant: ${consultant},\n    complaint: ${complaint},\n    examination: ${examination},\n    survey: ${survey},\n    investigation: ${investigation},\n    diagnosis: ${diagnosis},\n    treatment: ${treatment},\n    billing: ${billing},\n        `);\n    return (\n      <div className=\"PatientDetailBox1\">\n      <p>Date: {new Date(visit.date).toISOString().slice(0,10)}</p>\n      <p>Patient: {visit.patientName}</p>\n      <Tabs defaultActiveKey=\"Visit\" id=\"uncontrolled-tab-example\" className=\"tab\">\n      <Tab eventKey=\"\" title=\"Visit:\" disabled>\n      </Tab>\n      <Tab eventKey=\"Consultant\" title=\"Consultant\">\n      <Card className=\"PatientDetailCard\">\n      <Card.Body>\n      <Card.Text>\n        Consultants\n      </Card.Text>\n      <VisitConsultantList\n        consultant={consultant}\n        authUserId={props.authUserId}\n        />\n      </Card.Body>\n      </Card>\n      </Tab>\n      <Tab eventKey=\"Complaint\" title=\"Complaint\">\n      <Card className=\"PatientDetailCard\">\n      <Card.Body>\n      <Card.Text>\n        Complaints\n      </Card.Text>\n      <VisitComplaintList\n        complaint={complaint}\n        authUserId={props.authUserId}\n        />\n      </Card.Body>\n      </Card>\n      </Tab>\n      <Tab eventKey=\"Examination\" title=\"Examination\">\n      <Card className=\"PatientDetailCard\">\n      <Card.Body>\n      <Card.Text>\n        Examinations\n      </Card.Text>\n      <VisitExaminationList\n        examination={examination}\n        authUserId={props.authUserId}\n        />\n      </Card.Body>\n      </Card>\n      </Tab>\n      <Tab eventKey=\"Survey\" title=\"Survey\">\n      <Card className=\"PatientDetailCard\">\n      <Card.Body>\n      <Card.Text>\n        Surveys\n      </Card.Text>\n      <VisitSurveyList\n        survey={survey}\n        authUserId={props.authUserId}\n        />\n      </Card.Body>\n      </Card>\n      </Tab>\n      <Tab eventKey=\"Vitals\" title=\"Vitals\">\n      <Card className=\"PatientDetailCard\">\n      <Card.Body>\n      <Card.Text>\n        Vitals\n      </Card.Text>\n      <VisitVitalsList\n        vitals={vitals}\n        authUserId={props.authUserId}\n        />\n      </Card.Body>\n      </Card>\n      </Tab>\n      <Tab eventKey=\"History\" title=\"History\">\n      <Card className=\"PatientDetailCard\">\n      <Card.Body>\n      <Card.Text>\n        History\n      </Card.Text>\n      <VisitHistoryList\n        history={history}\n        authUserId={props.authUserId}\n        />\n      </Card.Body>\n      </Card>\n      </Tab>\n      <Tab eventKey=\"Investigation\" title=\"Investigation\">\n      <Card className=\"PatientDetailCard\">\n      <Card.Body>\n      <Card.Text>\n        Investigations\n      </Card.Text>\n      <VisitInvestigationList\n        investigation={investigation}\n        authUserId={props.authUserId}\n        />\n      </Card.Body>\n      </Card>\n      </Tab>\n      <Tab eventKey=\"Diagnosis\" title=\"Diagnosis\">\n      <Card className=\"PatientDetailCard\">\n      <Card.Body>\n      <Card.Text>\n        Diagnosis\n      </Card.Text>\n      <VisitDiagnosisList\n        diagnosis={diagnosis}\n        authUserId={props.authUserId}\n        />\n      </Card.Body>\n      </Card>\n      </Tab>\n      <Tab eventKey=\"Treatment\" title=\"Treatment\">\n      <Card className=\"PatientDetailCard\">\n      <Card.Body>\n      <Card.Text>\n        Treatment\n      </Card.Text>\n      <VisitTreatmentList\n        treatment={treatment}\n        authUserId={props.authUserId}\n        />\n      </Card.Body>\n      </Card>\n      </Tab>\n      <Tab eventKey=\"Billing\" title=\"Billing\">\n      <Card className=\"PatientDetailCard\">\n      <Card.Body>\n      <Card.Text>\n        Billing\n      </Card.Text>\n      <VisitBillingList\n        billing={billing}\n        authUserId={props.authUserId}\n        />\n      </Card.Body>\n      </Card>\n      </Tab>\n      </Tabs>\n      </div>\n    )\n\n}\n\nexport default PatientVisit;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Accordion from 'react-bootstrap/Accordion'\n// import AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst SearchPatientVisitForm = (props) => {\n// const {...search} = props.search;\n\nreturn (\n<div className=\"SearchFormContainer\">\n  <Form onSubmit={props.onGetVisit}>\n\n  <Form.Group controlId=\"formBasicVisitDate\">\n  <Form.Label>VisitDate</Form.Label>\n  <Form.Control type=\"date\" placeholder=\"VisitDate\"/>\n  </Form.Group>\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"10\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n\n{props.canConfirm && (\n  <Button variant=\"primary\" type=\"submit\">\n  Submit\n  </Button>\n)}\n\n{\n// <AuthContext.Consumer>\n// </AuthContext.Consumer>\n\n\n// populate feilds with user object fields\n}\n</Form>\n</div>\n\n\n)};\n\nexport default SearchPatientVisitForm;\n","import {parse, stringify} from 'flatted/esm';\nimport React from 'react';\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\nimport Accordion from 'react-bootstrap/Accordion';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\nimport Form from 'react-bootstrap/Form';\nimport AuthContext from '../../context/auth-context';\n\nimport PatientAppointmentList from './PatientList/PatientAppointmentList';\nimport PatientInsuranceList from './PatientList/PatientInsuranceList';\nimport PatientConsultantList from './PatientList/PatientConsultantList';\nimport PatientNextOfKinList from './PatientList/PatientNextOfKinList';\nimport PatientComplaintList from './PatientList/PatientComplaintList';\nimport PatientSurveyList from './PatientList/PatientSurveyList';\nimport PatientVitalsList from './PatientList/PatientVitalsList';\nimport PatientExaminationList from './PatientList/PatientExaminationList';\nimport PatientHistoryList from './PatientList/PatientHistoryList';\nimport PatientAllergiesList from './PatientList/PatientAllergiesList';\nimport PatientMedicationList from './PatientList/PatientMedicationList';\nimport PatientInvestigationList from './PatientList/PatientInvestigationList';\nimport PatientDiagnosisList from './PatientList/PatientDiagnosisList';\nimport PatientTreatmentList from './PatientList/PatientTreatmentList';\nimport PatientBillingList from './PatientList/PatientBillingList';\nimport PatientAttachmentsList from './PatientList/PatientAttachmentsList';\nimport PatientNotesList from './PatientList/PatientNotesList';\nimport PatientTagsList from './PatientList/PatientTagsList';\nimport PatientVisit from './PatientVisit';\n\nimport SearchPatientVisitForm from '../../components/Forms/SearchPatientVisitForm';\n\n\nimport './PatientDetail.css';\n\nconst PatientDetail = (props) => {\n  const {...patient} = props.patient;\n  // const authPatientId = props.authUserId;\n  const patientAppointment = patient.appointments;\n  const patientInsurance = patient.insurance;\n  const patientConsultant = patient.consultant;\n  const patientNextOfKin = patient.nextOfKin;\n  const patientComplaint = patient.complaints;\n  const patientSurvey = patient.surveys;\n  const patientVitals = patient.vitals;\n  const patientExamination = patient.examination;\n  const patientHistory = patient.history;\n  const patientAllergies = patient.allergies;\n  const patientMedication = patient.medication;\n  const patientInvestigation = patient.investigation;\n  const patientDiagnosis = patient.diagnosis;\n  const patientTreatment = patient.treatment;\n  const patientBilling = patient.billing;\n  const patientAttachments = patient.attachments;\n  const patientNotes = patient.notes;\n  const patientTags = patient.tags;\n  const patientRegistrationDate = new Date(patient.registrationDate.substr(0,10)*1000).toISOString().slice(0,10);\n  const patientDob = new Date(patient.dob.substr(0,10)*1000).toISOString().slice(0,10);\n  // const patientReferralDate = new Date(patient.referralDate*1000).toUTCString();\n  const patientReferralDate = new Date(patient.referralDate.substr(0,10)*1000).toISOString().slice(0,10);\n  let patientExpirationDate = undefined;\n  if (patient.expirationDate !== null)\n  {patientExpirationDate = new Date(patient.expirationDate.substr(0,10)*1000).toISOString().slice(0,10);}\n  else {patientExpirationDate = patient.expirationDate;}\n  // let visit = \"noVisit\";\n  // if (props.visit) {\n  //   visit = props.visit;\n  // }\n  const token = props.token;\n  const userId = props.authUserId;\n  const patientId = patient._id;\n\n  console.log(\"PatientDetail.props.patient:  \", {...patient});\n  // console.log(\"patientExamination[1].date:  \", new Date(patientExamination[1].date.substr(0,10)*1000).toISOString());\n  // console.log(\"patientConsultant[1].date:  \", patientConsultant[1].date);\n  // console.log(\"patientComplaint[1].date:  \", patientComplaint[1].date);\n  // console.log(\"patientComplaint[1].date:  \", new Date(patientComplaint[1].date.substr(0,10)*1000).toLocaleString());\n\n\n\n  return (\n    <div className=\"PatientDetailBox1\">\n\n    <Tabs defaultActiveKey=\"Demographics\" id=\"uncontrolled-tab-example\" className=\"tab\">\n      <Tab eventKey=\"\" title=\"Details:\" disabled>\n      </Tab>\n      <Tab eventKey=\"Demographics\" title=\"Demographics\">\n      <Card className=\"PatientDetailCard\">\n      <Card.Body>\n      <Card.Title>Patient Details:</Card.Title>\n      <Card.Text>\n        ID: {patient._id}\n      </Card.Text>\n      <Card.Text>\n        Title: {patient.title}\n      </Card.Text>\n      <Card.Text>\n        Name: {patient.name}\n      </Card.Text>\n      <Card.Text>\n        Address:\n      </Card.Text>\n      <Card.Text>\n        Street No: {patient.address.number}\n      </Card.Text>\n      <Card.Text>\n        Street Name: {patient.address.street}\n      </Card.Text>\n      <Card.Text>\n        Town: {patient.address.town}\n      </Card.Text>\n      <Card.Text>\n        Parish: {patient.address.parish}\n      </Card.Text>\n      <Card.Text>\n        PO: {patient.address.postOffice}\n      </Card.Text>\n      <Card.Text>\n        D.O.B: {patientDob}\n      </Card.Text>\n      <Card.Text>\n        Age: {patient.age}\n      </Card.Text>\n      <Card.Text>\n        Gender: {patient.gender}\n      </Card.Text>\n      <Card.Text>\n        Phone: {patient.contact.phone}\n      </Card.Text>\n      <Card.Text>\n        Email: {patient.contact.email}\n      </Card.Text>\n      <Card.Text>\n        Reg Date: {patientRegistrationDate}\n      </Card.Text>\n      <Card.Text>\n        Ref Date: {patientReferralDate}\n      </Card.Text>\n      <Card.Text>\n        Exp Date: {patientExpirationDate}\n      </Card.Text>\n      <Card.Text>\n        Job Position: {patient.occupation.role}\n      </Card.Text>\n      <Card.Text>\n        Employer: {patient.occupation.employer}\n      </Card.Text>\n      <Card.Text>\n        Employer Phone: {patient.occupation.contact.phone}\n      </Card.Text>\n      <Card.Text>\n        Employer Email: {patient.occupation.contact.email}\n      </Card.Text>\n      <Card.Text>\n        Referring Doctor:\n      </Card.Text>\n      <Card.Text>\n        Name: {patient.referringDoctor.name}\n      </Card.Text>\n      <Card.Text>\n        Phone: {patient.referringDoctor.phone}\n      </Card.Text>\n      <Card.Text>\n        Email: {patient.referringDoctor.email}\n      </Card.Text>\n      <Card.Text>\n        Attending Physician:\n      </Card.Text>\n      <Card.Text>\n        Name: {patient.attendingPhysician.name}\n      </Card.Text>\n      <Card.Text>\n        Phone: {patient.attendingPhysician.phone}\n      </Card.Text>\n      <Card.Text>\n        Email: {patient.attendingPhysician.email}\n      </Card.Text>\n      { props.canDelete === true && (\n        <Button variant=\"danger\" onClick={props.onDelete}>\n          Delete Patient !!??\n        </Button>\n      )}\n      </Card.Body>\n      </Card>\n      </Tab>\n\n      <Tab eventKey=\"Appointments\" title=\"Appointments\">\n      <Card.Text>\n        Appointments:\n      </Card.Text>\n      <PatientAppointmentList\n      patientAppointment={patientAppointment}\n      authUserId={props.authUserId}\n      />\n      </Tab>\n\n      <Tab eventKey=\"Consultant\" title=\"Consultant\">\n      <Card.Text>\n        Consultants:\n      </Card.Text>\n      { patientConsultant !== null &&\n        (<PatientConsultantList\n          patientConsultant={patientConsultant}\n          authUserId={props.authUserId}\n          canDelete={props.canDelete}\n          onDelete={props.consultantDelete}\n          />)\n      }\n      </Tab>\n\n      <Tab eventKey=\"Insurance\" title=\"Insurance\">\n      <Card.Text>\n        Insurance:\n      </Card.Text>\n      <PatientInsuranceList\n        patientInsurance={patientInsurance}\n        authUserId={props.authUserId}\n        canDelete={props.canDelete}\n        onDelete={props.insuranceDelete}\n        />\n      </Tab>\n\n      <Tab eventKey=\"NextOfKin\" title=\"NextOfKin\">\n      <Card.Text>\n        NextOfKin:\n      </Card.Text>\n      <PatientNextOfKinList\n        patientNextOfKin={patientNextOfKin}\n        authUserId={props.authUserId}\n        canDelete={props.canDelete}\n        onDelete={props.nextOfKinDelete}\n        />\n      </Tab>\n\n      <Tab eventKey=\"Complaint\" title=\"Complaint\">\n      <Card.Text>\n        Complaint:\n      </Card.Text>\n      <PatientComplaintList\n        patientComplaint={patientComplaint}\n        authUserId={props.authUserId}\n        canDelete={props.canDelete}\n        onDelete={props.complaintDelete}\n        />\n      </Tab>\n      <Tab eventKey=\"Survey\" title=\"Survey\">\n      <Card.Text>\n        Surveys:\n      </Card.Text>\n      <PatientSurveyList\n        patientSurvey={patientSurvey}\n        authUserId={props.authUserId}\n        canDelete={props.canDelete}\n        onDelete={props.surveyDelete}\n        />\n      </Tab>\n      <Tab eventKey=\"Vitals\" title=\"Vitals\">\n      <Card.Text>\n        Vitals:\n      </Card.Text>\n      <PatientVitalsList\n        patientVitals={patientVitals}\n        authUserId={props.authUserId}\n        canDelete={props.canDelete}\n        onDelete={props.vitalsDelete}\n        />\n      </Tab>\n      <Tab eventKey=\"Examination\" title=\"Examination\">\n      <Card.Text>\n        Examination:\n      </Card.Text>\n      <PatientExaminationList\n        patientExamination={patientExamination}\n        authUserId={props.authUserId}\n        canDelete={props.canDelete}\n        onDelete={props.examinationDelete}\n        />\n      </Tab>\n      <Tab eventKey=\"History\" title=\"History\">\n      <Card.Text>\n        History:\n      </Card.Text>\n      <PatientHistoryList\n        patientHistory={patientHistory}\n        authUserId={props.authUserId}\n        canDelete={props.canDelete}\n        onDelete={props.historyDelete}\n        />\n      </Tab>\n      <Tab eventKey=\"Allergies\" title=\"Allergies\">\n      <Card.Text>\n        Allergies:\n      </Card.Text>\n      <PatientAllergiesList\n        patientAllergies={patientAllergies}\n        authUserId={props.authUserId}\n        canDelete={props.canDelete}\n        onDelete={props.allergiesDelete}\n        />\n      </Tab>\n      <Tab eventKey=\"Medication\" title=\"Medication\">\n      <Card.Text>\n        Medication:\n      </Card.Text>\n      <PatientMedicationList\n        patientMedication={patientMedication}\n        authUserId={props.authUserId}\n        canDelete={props.canDelete}\n        onDelete={props.medicationDelete}\n        />\n      </Tab>\n      <Tab eventKey=\"Investigation\" title=\"Investigation\">\n      <Card.Text>\n        Investigation:\n      </Card.Text>\n      <PatientInvestigationList\n        patientInvestigation={patientInvestigation}\n        authUserId={props.authUserId}\n        canDelete={props.canDelete}\n        onDelete={props.investigationDelete}\n        />\n      </Tab>\n      <Tab eventKey=\"Diagnosis\" title=\"Diagnosis\">\n      <Card.Text>\n        Diagnosis:\n      </Card.Text>\n      <PatientDiagnosisList\n        patientDiagnosis={patientDiagnosis}\n        authUserId={props.authUserId}\n        canDelete={props.canDelete}\n        onDelete={props.diagnosisDelete}\n        />\n      </Tab>\n      <Tab eventKey=\"Treatment\" title=\"Treatment\">\n      <Card.Text>\n        Treatment:\n      </Card.Text>\n      <PatientTreatmentList\n        patientTreatment={patientTreatment}\n        authUserId={props.authUserId}\n        canDelete={props.canDelete}\n        onDelete={props.treatmentDelete}\n        />\n      </Tab>\n      <Tab eventKey=\"Billing\" title=\"Billing\">\n      <Card.Text>\n        Billing:\n      </Card.Text>\n      <PatientBillingList\n        patientBilling={patientBilling}\n        authUserId={props.authUserId}\n        canDelete={props.canDelete}\n        onDelete={props.billingDelete}\n        />\n      </Tab>\n      <Tab eventKey=\"Attachments\" title=\"Attachments\">\n      <Card.Text>\n        Attachments:\n      </Card.Text>\n      <PatientAttachmentsList\n        patientAttachments={patientAttachments}\n        authUserId={props.authUserId}\n        canDelete={props.canDelete}\n        onDelete={props.attachmentDelete}\n        />\n      </Tab>\n      <Tab eventKey=\"Notes\" title=\"Notes\">\n      <Card.Text>\n        Notes:\n      </Card.Text>\n      <PatientNotesList\n        patientNotes={patientNotes}\n        authUserId={props.authUserId}\n        canDelete={props.canDelete}\n        onDelete={props.noteDelete}\n        />\n      </Tab>\n      <Tab eventKey=\"Tags\" title=\"Tags\">\n      <Card.Text>\n        Tags:\n      </Card.Text>\n      <PatientTagsList\n        patientTags={patientTags}\n        authUserId={props.authUserId}\n        canDelete={props.canDelete}\n        onDelete={props.tagDelete}\n        />\n      </Tab>\n      <Tab eventKey=\"Visit\" title=\"Visit\">\n      <Card.Text>\n      </Card.Text>\n      <SearchPatientVisitForm\n            authUserId={props.authUserId}\n              canConfirm\n              onGetVisit={props.onGetVisit}\n              confirmText=\"Search\"\n              patient={props.patient}\n            />\n      {  props.visit !== null && (\n        <PatientVisit\n          authUserId={props.authUserId}\n          visit={props.visit}\n          />\n        )}\n      </Tab>\n    </Tabs>\n  </div>\n  );\n}\n\nexport default PatientDetail;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\n\nimport './UserItem.css';\n\nconst searchPatientItem = props => (\n  <li key={props.patientId} className=\"users__list-item\">\n  <div>\n    <h5 className=\"userItemHeading\"> Name:</h5>\n    <p className=\"userItemText\">\n      {props.name}\n    </p>\n    <h5 className=\"userItemHeading\"> Address:</h5>\n    <p className=\"userItemText\">\n      {props.addressParish}\n    </p>\n    <p className=\"userItemText\">\n      {props.addressTown}\n    </p>\n  </div>\n  <div>\n  <Button variant=\"primary\" onClick={props.onDetail.bind(this, props._id)}>\n        Details\n      </Button>\n  </div>\n  </li>\n);\n\nexport default searchPatientItem;\n","import React from 'react';\nimport Accordion from 'react-bootstrap/Accordion';\nimport Button from 'react-bootstrap/Button';\n\nimport SearchPatientItem from './PatientItem/SearchPatientItem';\nimport './UserList.css';\n\nconst searchPatientList = props => {\n  const searchPatients = props.searchPatients.map(patient => {\n    return (\n      <React.Fragment>\n      <SearchPatientItem\n        key={patient._id}\n        userId={props.authUserId}\n        _id={patient._id}\n        name={patient.name}\n        addressParish={patient.address.parish}\n        addressTown={patient.address.town}\n        onDetail={props.onViewDetail}\n      />\n      </React.Fragment>\n    );\n  });\n\n  return <ul className=\"user__list1\">{searchPatients}</ul>;\n};\n\nexport default searchPatientList;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Accordion from 'react-bootstrap/Accordion'\n// import AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst SearchPatientForm = (props) => {\n// const {...search} = props.search;\n\nreturn (\n<div className=\"SearchFormContainer\">\n  <Form onSubmit={props.onConfirm}>\n  <Form.Group controlId=\"formBasicFieldSelect\">\n  <Form.Label>Field</Form.Label>\n  <Form.Control as=\"select\">\n  <option>select</option>\n  <option>name</option>\n  <option>dob</option>\n  <option>age</option>\n  <option>gender</option>\n  <option>address.town</option>\n  <option>address.parish</option>\n  <option>registrationDate</option>\n  <option>referralDate</option>\n  <option>expirationDate</option>\n  <option>attendingPhysician.name</option>\n  <option>referringDoctor.name</option>\n  </Form.Control>\n  </Form.Group>\n\n  <Form.Group controlId=\"formBasicField\">\n  <Form.Label>Field</Form.Label>\n  <Form.Control type=\"text\" placeholder=\"Field\"/>\n  </Form.Group>\n\n<Form.Group controlId=\"formBasicQuery\">\n<Form.Label>Query</Form.Label>\n<Form.Control type=\"textarea\" rows=\"5\" placeholder=\"Query\"/>\n</Form.Group>\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"10\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n\n{props.canConfirm && (\n  <Accordion.Toggle as={Button} variant=\"success\" eventKey=\"10\" type=\"submit\">\n  Submit\n  </Accordion.Toggle>\n)}\n\n{\n// <AuthContext.Consumer>\n// </AuthContext.Consumer>\n\n\n// populate feilds with user object fields\n}\n</Form>\n</div>\n\n\n)};\n\nexport default SearchPatientForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Accordion from 'react-bootstrap/Accordion'\n// import AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst SearchPatientIdForm = (props) => {\n// const {...search} = props.search;\n\nreturn (\n<div className=\"SearchFormContainer\">\n  <Form onSubmit={props.onConfirm}>\n  <Form.Group controlId=\"formBasicId\">\n  <Form.Label>Id</Form.Label>\n  <Form.Control type=\"text\" placeholder=\"Id\"/>\n  </Form.Group>\n\n  {props.canCancel && (\n    <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"5\" className=\"btn\" onClick={props.onCancel}>\n    Cancel\n    </Accordion.Toggle>\n  )}\n\n  {props.canConfirm && (\n    <Button variant=\"success\" type=\"submit\">Search</Button>\n  )}\n\n</Form>\n</div>\n\n\n)};\n\nexport default SearchPatientIdForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Accordion from 'react-bootstrap/Accordion'\n// import AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst SearchPatientNameForm = (props) => {\n// const {...search} = props.search;\n\nreturn (\n<div className=\"SearchFormContainer\">\n  <Form onSubmit={props.onConfirm}>\n\n  <Form.Group controlId=\"formBasicName\">\n  <Form.Label>Name</Form.Label>\n  <Form.Control type=\"text\" placeholder=\"Name\"/>\n  </Form.Group>\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"10\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n\n{props.canConfirm && (\n  <Accordion.Toggle as={Button} variant=\"success\" eventKey=\"10\" type=\"submit\">\n  Submit\n  </Accordion.Toggle>\n)}\n\n{\n// <AuthContext.Consumer>\n// </AuthContext.Consumer>\n\n\n// populate feilds with user object fields\n}\n</Form>\n</div>\n\n\n)};\n\nexport default SearchPatientNameForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Accordion from 'react-bootstrap/Accordion'\n// import FormCheck from 'react-bootstrap/FormCheck'\n// import { NavLink } from 'react-router-dom';\n// import AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst CreatePatientForm = (props) => {\n\n  // console.log({...props});\n  // console.log(\"CreatePatientForm:  \", AuthContext.token);\n\nreturn (\n<div className=\"CreateFormContainer\">\n<Form onSubmit={props.onConfirm}>\n<Form.Row>\n  <Form.Group as={Col} controlId=\"formGridTitle\">\n    <Form.Label>Title</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"Patient Title\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridName\">\n    <Form.Label>Name</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"Patient Name\"/>\n  </Form.Group>\n\n<Form.Group as={Col} controlId=\"formGridDob\">\n  <Form.Label>D.O.B</Form.Label>\n  <Form.Control type=\"date\" placeholder=\"Date of Birth\"/>\n</Form.Group>\n<Form.Group as={Col} controlId=\"formGridAge\">\n  <Form.Label>Age</Form.Label>\n  <Form.Control type=\"number\" placeholder=\"Age\"/>\n</Form.Group>\n<Form.Group as={Col} controlId=\"formGridGender\">\n  <Form.Label>Gender</Form.Label>\n  <Form.Control as=\"select\">\n    <option>Male</option>\n    <option>Female</option>\n  </Form.Control>\n</Form.Group>\n</Form.Row>\n\n<Form.Row>\n<Form.Group as={Col} controlId=\"formGridContactEmail\">\n  <Form.Label>Email</Form.Label>\n  <Form.Control type=\"email\" placeholder=\"Patient Email\"/>\n</Form.Group>\n\n<Form.Group as={Col} controlId=\"formGridContactPhone\">\n  <Form.Label>Phone</Form.Label>\n  <Form.Control type=\"number\" placeholder=\"Address Phone\"/>\n</Form.Group>\n</Form.Row>\n\n<Form.Row>\n<Form.Group as={Col} controlId=\"formGridAddressNumber\">\n  <Form.Label>AddressNumber</Form.Label>\n  <Form.Control type=\"number\" placeholder=\"Address Street No.\"/>\n</Form.Group>\n<Form.Group as={Col} controlId=\"formGridAddressStreet\">\n  <Form.Label>AddressStreet</Form.Label>\n  <Form.Control type=\"text\" placeholder=\"Address Street Name\"/>\n</Form.Group>\n<Form.Group as={Col} controlId=\"formGridAddressTown\">\n  <Form.Label>AddressTown</Form.Label>\n  <Form.Control type=\"text\" placeholder=\"Address Town\"/>\n</Form.Group>\n<Form.Group as={Col} controlId=\"formGridAddressParish\">\n  <Form.Label>AddressParish</Form.Label>\n  <Form.Control type=\"text\" placeholder=\"Address Parish\"/>\n</Form.Group>\n<Form.Group as={Col} controlId=\"formGridAddressPostOffice\">\n  <Form.Label>AddressPostOffice</Form.Label>\n  <Form.Control type=\"text\" placeholder=\"Address PostOffice\"/>\n</Form.Group>\n</Form.Row>\n\n<Form.Row>\n<Form.Group as={Col} controlId=\"formGridRegistrationDate\">\n  <Form.Label>RegistrationDate</Form.Label>\n  <Form.Control type=\"date\" placeholder=\"Registration Date\"/>\n</Form.Group>\n<Form.Group as={Col} controlId=\"formGridReferralDate\">\n  <Form.Label>ReferralDate</Form.Label>\n  <Form.Control type=\"date\" placeholder=\"Referral Date\"/>\n</Form.Group>\n<Form.Group as={Col} controlId=\"formGridExpirationDate\">\n  <Form.Label>ExpirationDate</Form.Label>\n  <Form.Control type=\"date\" placeholder=\"Expiration Date\"/>\n</Form.Group>\n</Form.Row>\n\n<Form.Row>\n<Form.Group as={Col} controlId=\"formGridReferringDoctorName\">\n  <Form.Label>ReferringDoctorName</Form.Label>\n  <Form.Control type=\"text\" placeholder='Ref Doctor Name' />\n</Form.Group>\n<Form.Group as={Col} controlId=\"formGridReferringDoctorEmail\">\n  <Form.Label>ReferringDoctorEmail</Form.Label>\n  <Form.Control type=\"email\" placeholder='Ref Doctor Email'/>\n</Form.Group>\n<Form.Group as={Col} controlId=\"formGridReferringDoctorPhone\">\n  <Form.Label>ReferringDoctorPhone</Form.Label>\n  <Form.Control type=\"number\" placeholder=\"Ref Doctor Phone\"/>\n</Form.Group>\n</Form.Row>\n\n<Form.Row>\n<Form.Group as={Col} controlId=\"formGridAttendingPhysicianName\">\n  <Form.Label>AttendingPhysicianName</Form.Label>\n  <Form.Control type=\"text\" placeholder='Attending Physician Name' />\n</Form.Group>\n<Form.Group as={Col} controlId=\"formGridAttendingPhysicianEmail\">\n  <Form.Label>AttendingPhysicianEmail</Form.Label>\n  <Form.Control type=\"email\" placeholder='Attending Physician Email'/>\n</Form.Group>\n<Form.Group as={Col} controlId=\"formGridAttendingPhysicianPhone\">\n  <Form.Label>AttendingPhysicianPhone</Form.Label>\n  <Form.Control type=\"number\" placeholder=\"Attending Physician Phone\"/>\n</Form.Group>\n</Form.Row>\n\n<Form.Row>\n<Form.Group as={Col} controlId=\"formGridOccupationRole\">\n  <Form.Label>OccupationRole</Form.Label>\n  <Form.Control type=\"text\" placeholder=\"Job Role\"/>\n</Form.Group>\n<Form.Group as={Col} controlId=\"formGridOccupationEmployer\">\n  <Form.Label>OccupationEmployer</Form.Label>\n  <Form.Control type=\"text\" placeholder=\"Employer Name\"/>\n</Form.Group>\n<Form.Group as={Col} controlId=\"formGridOccupationEmployerContactPhone\">\n  <Form.Label>OccupationEmployerContactPhone</Form.Label>\n  <Form.Control type=\"number\" placeholder=\"Employer Phone\"/>\n</Form.Group>\n</Form.Row>\n<Form.Row>\n<Form.Group as={Col} controlId=\"formGridOccupationEmployerContactEmail\">\n  <Form.Label>OccupationEmployerContactEmail</Form.Label>\n  <Form.Control type=\"email\" placeholder=\"Employer Email\" />\n</Form.Group>\n</Form.Row>\n\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"2\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n\n{props.canConfirm && (\n    <Button variant=\"success\" type=\"submit\">Create New</Button>\n)}\n\n</Form>\n{\n  // <AuthContext.Consumer>\n// </AuthContext.Consumer>\n}\n</div>\n\n)};\n\nexport default CreatePatientForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Accordion from 'react-bootstrap/Accordion'\n// import FormCheck from 'react-bootstrap/FormCheck'\n// import AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst UpdatePatientForm = (props) => {\n\nconsole.log(\"UpdatePatientForm.props:  \", {...props});\nconst {...patient} = props.patient;\nconsole.log(\"UpdatePatientForm.props.patient:  \", {...patient});\n\n\nreturn (\n  <div className=\"UpdateFormContainer\">\n  <Form onSubmit={props.onConfirm}>\n  <Form.Row>\n    <Form.Group as={Col} controlId=\"formGridTitle\">\n      <Form.Label>Title</Form.Label>\n      <Form.Control type=\"text\" placeholder={patient.title}/>\n    </Form.Group>\n    <Form.Group as={Col} controlId=\"formGridName\">\n      <Form.Label>Name</Form.Label>\n      <Form.Control type=\"text\" placeholder={patient.name}/>\n    </Form.Group>\n\n  <Form.Group as={Col} controlId=\"formGridDob\">\n    <Form.Label>D.O.B</Form.Label>\n    <Form.Control type=\"date\" placeholder={patient.dob}/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridAge\">\n    <Form.Label>Age</Form.Label>\n    <Form.Control type=\"number\" placeholder={patient.age}/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridGender\">\n    <Form.Label>Gender</Form.Label>\n    <Form.Control as=\"select\">\n      <option>Male</option>\n      <option>Female</option>\n    </Form.Control>\n  </Form.Group>\n  </Form.Row>\n\n  <Form.Row>\n  <Form.Group as={Col} controlId=\"formGridContactEmail\">\n    <Form.Label>Email</Form.Label>\n    <Form.Control type=\"email\" placeholder={patient.contact.email}/>\n  </Form.Group>\n\n  <Form.Group as={Col} controlId=\"formGridContactPhone\">\n    <Form.Label>Phone</Form.Label>\n    <Form.Control type=\"number\" placeholder={patient.contact.phone}/>\n  </Form.Group>\n  </Form.Row>\n\n  <Form.Row>\n  <Form.Group as={Col} controlId=\"formGridAddressNumber\">\n    <Form.Label>AddressNumber</Form.Label>\n    <Form.Control type=\"number\" placeholder={patient.address.number}/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridAddressStreet\">\n    <Form.Label>AddressStreet</Form.Label>\n    <Form.Control type=\"text\" placeholder={patient.address.street}/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridAddressTown\">\n    <Form.Label>AddressTown</Form.Label>\n    <Form.Control type=\"text\" placeholder={patient.address.town}/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridAddressParish\">\n    <Form.Label>AddressParish</Form.Label>\n    <Form.Control type=\"text\" placeholder={patient.address.parish}/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridAddressPostOffice\">\n    <Form.Label>AddressPostOffice</Form.Label>\n    <Form.Control type=\"text\" placeholder={patient.address.postOffice}/>\n  </Form.Group>\n  </Form.Row>\n\n  <Form.Row>\n  <Form.Group as={Col} controlId=\"formGridRegistrationDate\">\n    <Form.Label>RegistrationDate</Form.Label>\n    <Form.Control type=\"date\" placeholder={patient.registrationDate}/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridReferralDate\">\n    <Form.Label>ReferralDate</Form.Label>\n    <Form.Control type=\"date\" placeholder={patient.referralDate}/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridExpirationDate\">\n    <Form.Label>ExpirationDate</Form.Label>\n    <Form.Control type=\"date\" placeholder={patient.expirationDate}/>\n  </Form.Group>\n  </Form.Row>\n\n  <Form.Row>\n  <Form.Group as={Col} controlId=\"formGridReferringDoctorName\">\n    <Form.Label>ReferringDoctorName</Form.Label>\n    <Form.Control type=\"text\" placeholder={patient.referringDoctor.name}/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridReferringDoctorEmail\">\n    <Form.Label>ReferringDoctorEmail</Form.Label>\n    <Form.Control type=\"email\" placeholder={patient.referringDoctor.email}/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridReferringDoctorPhone\">\n    <Form.Label>ReferringDoctorPhone</Form.Label>\n    <Form.Control type=\"number\" placeholder={patient.referringDoctor.phone}/>\n  </Form.Group>\n  </Form.Row>\n\n  <Form.Row>\n  <Form.Group as={Col} controlId=\"formGridAttendingPhysicianName\">\n    <Form.Label>AttendingPhysicianName</Form.Label>\n    <Form.Control type=\"text\" placeholder={patient.attendingPhysician.name}/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridAttendingPhysicianEmail\">\n    <Form.Label>AttendingPhysicianEmail</Form.Label>\n    <Form.Control type=\"email\" placeholder={patient.attendingPhysician.email}/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridAttendingPhysicianPhone\">\n    <Form.Label>AttendingPhysicianPhone</Form.Label>\n    <Form.Control type=\"number\" placeholder={patient.attendingPhysician.phone}/>\n  </Form.Group>\n  </Form.Row>\n\n  <Form.Row>\n  <Form.Group as={Col} controlId=\"formGridOccupationRole\">\n    <Form.Label>OccupationRole</Form.Label>\n    <Form.Control type=\"text\" placeholder={patient.occupation.role}/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridOccupationEmployer\">\n    <Form.Label>OccupationEmployer</Form.Label>\n    <Form.Control type=\"text\" placeholder={patient.occupation.employer}/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridOccupationEmployerContactPhone\">\n    <Form.Label>OccupationEmployerContactPhone</Form.Label>\n    <Form.Control type=\"number\" placeholder={patient.occupation.contact.phone}/>\n  </Form.Group>\n  </Form.Row>\n  <Form.Row>\n  <Form.Group as={Col} controlId=\"formGridOccupationEmployerContactEmail\">\n    <Form.Label>OccupationEmployerContactEmail</Form.Label>\n    <Form.Control type=\"email\" placeholder={patient.occupation.contact.email}/>\n  </Form.Group>\n  </Form.Row>\n\n\n  {props.canCancel && (\n    <Button variant=\"danger\" onClick={props.onCancel}>Cancel</Button>\n  )}\n\n  {props.canConfirm && (\n    <Button variant=\"success\" type=\"submit\">Edit Patient</Button>\n  )}\n\n  </Form>\n  {\n    // <AuthContext.Consumer>\n  // </AuthContext.Consumer>\n  }\n  </div>\n)};\n\nexport default UpdatePatientForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Accordion from 'react-bootstrap/Accordion'\n// import FormCheck from 'react-bootstrap/FormCheck'\n// import AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst UpdatePatientFieldForm = (props) => {\n\nconsole.log(\"UpdatePatientFieldForm.props:  \", {...props});\nconst {...patient} = props.patient;\nconsole.log(\"UpdatePatientFieldForm.props.user:  \", {...patient});\n\nreturn (\n<div className=\"UpdateFormContainer\">\n<Form onSubmit={props.onConfirm}>\n<Form.Row>\n<Form.Group as={Col} controlId=\"formGridFieldSelect\">\n<Form.Label>Field Options</Form.Label>\n<Form.Control as=\"select\">\n<option>select</option>\n<option>name</option>\n<option>dob</option>\n<option>age</option>\n<option>gender</option>\n<option>address.town</option>\n<option>address.parish</option>\n<option>registrationDate</option>\n<option>referralDate</option>\n<option>expirationDate</option>\n<option>attendingPhysician.name</option>\n<option>referringDoctor.name</option>\n</Form.Control>\n</Form.Group>\n  <Form.Group as={Col} controlId=\"formGridField\">\n    <Form.Label>Field</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"Field\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridQuery\">\n    <Form.Label>Query</Form.Label>\n    <Form.Label>Date Format YYYY-MM-DD</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"Query\"/>\n  </Form.Group>\n</Form.Row>\n\n\n{props.canCancel && (\n  <Button variant=\"danger\" onClick={props.onCancel}>Cancel</Button>\n)}\n\n{props.canConfirm && (\n  <Button variant=\"success\" type=\"submit\">Edit Patient Field</Button>\n)}\n\n</Form>\n</div>\n\n)};\n\nexport default UpdatePatientFieldForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Accordion from 'react-bootstrap/Accordion'\n// import FormCheck from 'react-bootstrap/FormCheck'\n// import AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst UpdatePatientConsultantForm = (props) => {\n\nconsole.log(\"UpdatePatientConsultantForm.props:  \", {...props});\nconst {...patient} = props.patient;\nconsole.log(\"UpdatePatientConsultantForm.props.patient:  \", {...patient});\n\n\nreturn (\n<div className=\"UpdateFormContainer\">\n<Form onSubmit={props.onConfirm}>\n<Form.Row>\n  <Form.Group as={Col} controlId=\"formGridConsultantDate\">\n    <Form.Label>ConsultantDate</Form.Label>\n    <Form.Control type=\"date\" placeholder=\"ConsultantDate\"/>\n  </Form.Group>\n  </Form.Row>\n\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"9\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n\n{props.canConfirm && (\n  <Accordion.Toggle as={Button} variant=\"success\" eventKey=\"9\" className=\"btn\" type=\"submit\">\n  Submit\n  </Accordion.Toggle>\n)}\n\n</Form>\n{\n  // <AuthContext.Consumer>\n// </AuthContext.Consumer>\n}\n</div>\n\n)};\n\nexport default UpdatePatientConsultantForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Accordion from 'react-bootstrap/Accordion'\n// import FormCheck from 'react-bootstrap/FormCheck'\n// import AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst UpdatePatientInsuranceForm = (props) => {\n\nconsole.log(\"UpdatePatientInsuranceForm.props:  \", {...props});\nconst {...patient} = props.patient;\nconsole.log(\"UpdatePatientInsuranceForm.props.patient:  \", {...patient});\n\n\nreturn (\n<div className=\"UpdateFormContainer\">\n<Form onSubmit={props.onConfirm}>\n<Form.Row>\n  <Form.Group as={Col} controlId=\"formGridInsuranceCompany\">\n    <Form.Label>insuranceCompany</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"insuranceCompany\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridInsuranceNumber\">\n    <Form.Label>insuranceNumber</Form.Label>\n    <Form.Control type=\"number\" placeholder=\"insuranceNumber\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridInsuranceDescription\">\n    <Form.Label>insuranceDescription</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"insuranceDescription\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridInsuranceExpiry\">\n    <Form.Label>insuranceExpiry</Form.Label>\n    <Form.Control type=\"date\" placeholder=\"insuranceExpiry\"/>\n  </Form.Group>\n\n</Form.Row>\n\n<Form.Row>\n\n<Form.Group as={Col} controlId=\"formGridInsuranceSubscriberCompany\">\n  <Form.Label>insuranceSubscriberCompany</Form.Label>\n  <Form.Control type=\"text\" placeholder=\"insuranceSubscriberCompany\"/>\n</Form.Group>\n<Form.Group as={Col} controlId=\"formGridInsuranceSubscriberDescription\">\n  <Form.Label>insuranceSubscriberDescription</Form.Label>\n  <Form.Control tas=\"textarea\" rows=\"3\" placeholder=\"insuranceSubscriberDescription\"/>\n</Form.Group>\n\n</Form.Row>\n\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"9\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n\n{props.canConfirm && (\n  <Accordion.Toggle as={Button} variant=\"success\" eventKey=\"9\" className=\"btn\" type=\"submit\">\n  Submit\n  </Accordion.Toggle>\n)}\n\n</Form>\n{\n  // <AuthContext.Consumer>\n// </AuthContext.Consumer>\n}\n</div>\n\n)};\n\nexport default UpdatePatientInsuranceForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Accordion from 'react-bootstrap/Accordion'\n// import FormCheck from 'react-bootstrap/FormCheck'\n// import AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst UpdatePatientNextOfKinForm = (props) => {\n\nconsole.log(\"UpdatePatientNextOfKinForm.props:  \", {...props});\nconst {...patient} = props.patient;\nconsole.log(\"UpdatePatientNextOfKinForm.props.patient:  \", {...patient});\n\n\nreturn (\n<div className=\"UpdateFormContainer\">\n<Form onSubmit={props.onConfirm}>\n<Form.Row>\n  <Form.Group as={Col} controlId=\"formGridNextOfKinName\">\n    <Form.Label>NextOfKinName</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"NextOfKinName\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridNextOfKinPhone\">\n    <Form.Label>NextOfKinPhone</Form.Label>\n    <Form.Control type=\"number\" placeholder=\"NextOfKinPhone\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridNextOfKinEmail\">\n    <Form.Label>NextOfKinEmail</Form.Label>\n    <Form.Control type=\"email\" placeholder=\"NextOfKinEmail\"/>\n  </Form.Group>\n\n</Form.Row>\n\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"9\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n\n{props.canConfirm && (\n  <Accordion.Toggle as={Button} variant=\"success\" eventKey=\"9\" className=\"btn\" type=\"submit\">\n  Submit\n  </Accordion.Toggle>\n)}\n\n</Form>\n{\n  // <AuthContext.Consumer>\n// </AuthContext.Consumer>\n}\n</div>\n\n)};\n\nexport default UpdatePatientNextOfKinForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Accordion from 'react-bootstrap/Accordion'\n// import FormCheck from 'react-bootstrap/FormCheck'\n// import AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst UpdatePatientComplaintForm = (props) => {\n\nconsole.log(\"UpdatePatientComplaintForm.props:  \", {...props});\nconst {...patient} = props.patient;\nconsole.log(\"UpdatePatientComplaintForm.props.patient:  \", {...patient});\n\n\nreturn (\n<div className=\"UpdateFormContainer\">\n<Form onSubmit={props.onConfirm}>\n<Form.Row>\n  <Form.Group as={Col} controlId=\"formGridComplaintDate\">\n    <Form.Label>ComplaintDate</Form.Label>\n    <Form.Control type=\"date\" placeholder=\"ComplaintDate\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridComplaintTitle\">\n    <Form.Label>ComplaintTitle</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"ComplaintTitle\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridComplaintDescription\">\n    <Form.Label>ComplaintDescription</Form.Label>\n    <Form.Control as=\"textarea\" rows=\"3\" placeholder=\"ComplaintDescription\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridComplaintAnamnesis\">\n    <Form.Label>ComplaintAnamnesis</Form.Label>\n    <Form.Control as=\"textarea\" rows=\"3\" placeholder=\"ComplaintAnamnesis\"/>\n  </Form.Group>\n  </Form.Row>\n\n  <Form.Row>\n  <Form.Group as={Col} controlId=\"formGridComplaintAttachmentName\">\n    <Form.Label>ComplaintAttachmentName</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"complaintAttachmentName\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridComplaintAttachmentFormat\">\n    <Form.Label>ComplaintAttachmentFormat</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"complaintAttachmentFormat\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridComplaintAttachmentPath\">\n    <Form.Label>ComplaintAttachmentPath</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"complaintAttachmentPath\"/>\n  </Form.Group>\n  </Form.Row>\n\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"9\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n\n{props.canConfirm && (\n  <Accordion.Toggle as={Button} variant=\"success\" eventKey=\"9\" className=\"btn\" type=\"submit\">\n  Submit\n  </Accordion.Toggle>\n)}\n\n</Form>\n{\n  // <AuthContext.Consumer>\n// </AuthContext.Consumer>\n}\n</div>\n\n)};\n\nexport default UpdatePatientComplaintForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Accordion from 'react-bootstrap/Accordion'\n// import FormCheck from 'react-bootstrap/FormCheck'\n// import AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst UpdatePatientSurveyForm = (props) => {\n\nconsole.log(\"UpdatePatientSurveyForm.props:  \", {...props});\nconst {...patient} = props.patient;\nconsole.log(\"UpdatePatientSurveyForm.props.patient:  \", {...patient});\n\n\nreturn (\n<div className=\"UpdateFormContainer\">\n<Form onSubmit={props.onConfirm}>\n<Form.Row>\n  <Form.Group as={Col} controlId=\"formGridSurveyDate\">\n    <Form.Label>SurveyDate</Form.Label>\n    <Form.Control type=\"date\" placeholder=\"SurveyDate\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridSurveyTitle\">\n    <Form.Label>SurveyTitle</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"SurveyTitle\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridSurveyDescription\">\n    <Form.Label>SurveyDescription</Form.Label>\n    <Form.Control as=\"textarea\" rows=\"3\" placeholder=\"SurveyDescription\"/>\n  </Form.Group>\n  </Form.Row>\n\n  <Form.Row>\n  <Form.Group as={Col} controlId=\"formGridSurveyAttachmentName\">\n    <Form.Label>SurveyAttachmentName</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"SurveyAttachmentName\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridSurveyAttachmentFormat\">\n    <Form.Label>SurveyAttachmentFormat</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"SurveyAttachmentFormat\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridSurveyAttachmentPath\">\n    <Form.Label>SurveyAttachmentPath</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"SurveyAttachmentPath\"/>\n  </Form.Group>\n  </Form.Row>\n\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"9\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n\n{props.canConfirm && (\n  <Accordion.Toggle as={Button} variant=\"success\" eventKey=\"9\" className=\"btn\" type=\"submit\">\n  Submit\n  </Accordion.Toggle>\n)}\n\n</Form>\n{\n  // <AuthContext.Consumer>\n// </AuthContext.Consumer>\n}\n</div>\n\n)};\n\nexport default UpdatePatientSurveyForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Accordion from 'react-bootstrap/Accordion'\n// import FormCheck from 'react-bootstrap/FormCheck'\n// import AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst UpdatePatientVitalsForm = (props) => {\n\nconsole.log(\"UpdatePatientVitalsForm.props:  \", {...props});\nconst {...patient} = props.patient;\nconsole.log(\"UpdatePatientVitalsForm.props.patient:  \", {...patient});\n\n\nreturn (\n<div className=\"UpdateFormContainer\">\n<Form onSubmit={props.onConfirm}>\n<Form.Row>\n  <Form.Group as={Col} controlId=\"formGridVitalsDate\">\n    <Form.Label>VitalsDate</Form.Label>\n    <Form.Control type=\"date\" placeholder=\"VitalsDate\"/>\n  </Form.Group>\n\n  <Form.Group as={Col} controlId=\"formGridVitalsPr\">\n    <Form.Label>VitalsPr</Form.Label>\n    <Form.Control type=\"number\" placeholder=\"VitalsPr\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridVitalsBp1\">\n    <Form.Label>VitalsBp1</Form.Label>\n    <Form.Control type=\"number\" placeholder=\"VitalsBp1\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridVitalsBp2\">\n    <Form.Label>VitalsBp2</Form.Label>\n    <Form.Control type=\"number\" placeholder=\"VitalsBp2\"/>\n  </Form.Group>\n</Form.Row>\n\n<Form.Row>\n<Form.Group as={Col} controlId=\"formGridVitalsRr\">\n  <Form.Label>VitalsRr</Form.Label>\n  <Form.Control type=\"number\" placeholder=\"VitalsRr\"/>\n</Form.Group>\n<Form.Group as={Col} controlId=\"formGridVitalsTemp\">\n  <Form.Label>VitalsTemp</Form.Label>\n  <Form.Control type=\"number\" placeholder=\"VitalsTemp\"/>\n</Form.Group>\n<Form.Group as={Col} controlId=\"formGridVitalsPs02\">\n  <Form.Label>VitalsPs02</Form.Label>\n  <Form.Control type=\"number\" placeholder=\"VitalsPs02\"/>\n</Form.Group>\n</Form.Row>\n\n<Form.Row>\n  <Form.Group as={Col} controlId=\"formGridVitalsHeight\">\n    <Form.Label>VitalsHeight</Form.Label>\n    <Form.Control type=\"number\" placeholder=\"VitalsHeight\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridVitalsWeight\">\n    <Form.Label>VitalsWeight</Form.Label>\n    <Form.Control type=\"number\" placeholder=\"VitalsWeight\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridVitalsBmi\">\n    <Form.Label>VitalsBmi</Form.Label>\n    <Form.Control type=\"number\" placeholder=\"VitalsBmi\"/>\n  </Form.Group>\n</Form.Row>\n\n<Form.Row>\n<Form.Group as={Col} controlId=\"formGridVitalsUrineType\">\n  <Form.Label>VitalsUrineType</Form.Label>\n  <Form.Control type=\"text\" placeholder=\"VitalsUrineType\"/>\n</Form.Group>\n<Form.Group as={Col} controlId=\"formGridVitalsUrineValue\">\n  <Form.Label>VitalsUrineValue</Form.Label>\n  <Form.Control type=\"text\" placeholder=\"VitalsUrineValue\"/>\n</Form.Group>\n</Form.Row>\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"9\" className=\"btn\">\n  Cancel\n  </Accordion.Toggle>\n)\n// <Button variant=\"danger\" onClick={props.onCancel}>\n// Cancel\n// </Button>\n}\n\n{props.canConfirm && (\n  <Accordion.Toggle as={Button} variant=\"success\" eventKey=\"9\" className=\"btn\" type=\"submit\">\n  Submit\n  </Accordion.Toggle>\n)}\n\n</Form>\n{\n  // <AuthContext.Consumer>\n// </AuthContext.Consumer>\n}\n</div>\n\n)};\n\nexport default UpdatePatientVitalsForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Accordion from 'react-bootstrap/Accordion'\n// import FormCheck from 'react-bootstrap/FormCheck'\n// import AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst UpdatePatientExaminationForm = (props) => {\n\nconsole.log(\"UpdatePatientExaminationForm.props:  \", {...props});\nconst {...patient} = props.patient;\nconsole.log(\"UpdatePatientExaminationForm.props.patient:  \", {...patient});\n\n\nreturn (\n<div className=\"UpdateFormContainer\">\n<Form onSubmit={props.onConfirm}>\n<Form.Row>\n  <Form.Group as={Col} controlId=\"formGridExaminationDate\">\n    <Form.Label>ExaminationDate</Form.Label>\n    <Form.Control type=\"date\" placeholder=\"ExaminationDate\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridExaminationAreaSelect\">\n    <Form.Label>ExaminationArea Options</Form.Label>\n    <Form.Control as=\"select\">\n    <option>select</option>\n    <option>nose</option>\n    <option>fauces</option>\n    <option>ears</option>\n    <option>larynx</option>\n    <option>neck</option>\n    <option>chest</option>\n    <option>cvs</option>\n    <option>abdomen</option>\n    </Form.Control>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridExaminationArea\">\n    <Form.Label>ExaminationArea</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"ExaminationArea\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridExaminationGeneral\">\n    <Form.Label>ExaminationGeneral</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"ExaminationGeneral\"/>\n  </Form.Group>\n  </Form.Row>\n\n  <Form.Row>\n  <Form.Group as={Col} controlId=\"formGridExaminationType\">\n    <Form.Label>ExaminationType</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"ExaminationType\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridExaminationMeasure\">\n    <Form.Label>ExaminationMeasure</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"ExaminationMeasure\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridExaminationValue\">\n    <Form.Label>ExaminationValue</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"ExaminationValue\"/>\n  </Form.Group>\n  </Form.Row>\n\n  <Form.Row>\n  <Form.Group as={Col} controlId=\"formGridExaminationDescription\">\n    <Form.Label>ExaminationDescription</Form.Label>\n    <Form.Control as=\"textarea\" rows=\"3\" placeholder=\"ExaminationDescription\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridExaminationFollowUp\">\n    <Form.Label>ExaminationFollowUp</Form.Label>\n    <Form.Control as=\"select\">\n      <option>true</option>\n      <option>false</option>\n    </Form.Control>\n  </Form.Group>\n  </Form.Row>\n\n  <Form.Row>\n  <Form.Group as={Col} controlId=\"formGridExaminationAttachmentName\">\n    <Form.Label>ExaminationAttachmentName</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"ExaminationAttachmentName\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridExaminationAttachmentFormat\">\n    <Form.Label>ExaminationAttachmentFormat</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"ExaminationAttachmentFormat\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridExaminationAttachmentPath\">\n    <Form.Label>ExaminationAttachmentPath</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"ExaminationAttachmentPath\"/>\n  </Form.Group>\n  </Form.Row>\n\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"9\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n\n{props.canConfirm && (\n  <Accordion.Toggle as={Button} variant=\"success\" eventKey=\"9\" className=\"btn\" type=\"submit\">\n  Submit\n  </Accordion.Toggle>\n)}\n\n</Form>\n{\n  // <AuthContext.Consumer>\n// </AuthContext.Consumer>\n}\n</div>\n\n)};\n\nexport default UpdatePatientExaminationForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Accordion from 'react-bootstrap/Accordion'\n// import FormCheck from 'react-bootstrap/FormCheck'\n// import AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst UpdatePatientHistoryForm = (props) => {\n\nconsole.log(\"UpdatePatientHistoryForm.props:  \", {...props});\nconst {...patient} = props.patient;\nconsole.log(\"UpdatePatientHistoryForm.props.patient:  \", {...patient});\n\n\nreturn (\n<div className=\"UpdateFormContainer\">\n<Form onSubmit={props.onConfirm}>\n<Form.Row>\n  <Form.Group as={Col} controlId=\"formGridHistoryType\">\n    <Form.Label>HistoryType</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"HistoryType\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridHistoryDate\">\n    <Form.Label>HistoryDate</Form.Label>\n    <Form.Control type=\"date\" placeholder=\"HistoryDate\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridHistoryTitle\">\n    <Form.Label>HistoryTitle</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"HistoryTitle\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridHistoryDescription\">\n    <Form.Label>HistoryDescription</Form.Label>\n    <Form.Control as=\"textarea\" rows=\"3\" placeholder=\"HistoryDescription\"/>\n  </Form.Group>\n  </Form.Row>\n\n  <Form.Row>\n  <Form.Group as={Col} controlId=\"formGridHistoryAttachmentName\">\n    <Form.Label>HistoryAttachmentName</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"HistoryAttachmentName\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridHistoryAttachmentFormat\">\n    <Form.Label>HistoryAttachmentFormat</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"HistoryAttachmentFormat\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridHistoryAttachmentPath\">\n    <Form.Label>HistoryAttachmentPath</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"HistoryAttachmentPath\"/>\n  </Form.Group>\n  </Form.Row>\n\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"9\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n\n{props.canConfirm && (\n  <Accordion.Toggle as={Button} variant=\"success\" eventKey=\"9\" className=\"btn\" type=\"submit\">\n  Submit\n  </Accordion.Toggle>\n)}\n\n</Form>\n{\n  // <AuthContext.Consumer>\n// </AuthContext.Consumer>\n}\n</div>\n\n)};\n\nexport default UpdatePatientHistoryForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Accordion from 'react-bootstrap/Accordion'\n// import FormCheck from 'react-bootstrap/FormCheck'\n// import AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst UpdatePatientAllergiesForm = (props) => {\n\nconsole.log(\"UpdatePatientAllergiesForm.props:  \", {...props});\nconst {...patient} = props.patient;\nconsole.log(\"UpdatePatientAllergiesForm.props.patient:  \", {...patient});\n\n\nreturn (\n<div className=\"UpdateFormContainer\">\n<Form onSubmit={props.onConfirm}>\n<Form.Row>\n  <Form.Group as={Col} controlId=\"formGridAllergiesTitle\">\n    <Form.Label>AllergiesTitle</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"AllergiesTitle\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridAllergiesTypeSelect\">\n    <Form.Label>AllergiesType Options</Form.Label>\n    <Form.Control as=\"select\">\n    <option>select</option>\n    <option>food</option>\n    <option>drug</option>\n    </Form.Control>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridAllergiesType\">\n    <Form.Label>AllergiesType</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"AllergiesType\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridAllergiesDescription\">\n    <Form.Label>AllergiesDescription</Form.Label>\n    <Form.Control as=\"textarea\" rows=\"3\" placeholder=\"AllergiesDescription\"/>\n  </Form.Group>\n  </Form.Row>\n\n  <Form.Row>\n  <Form.Group as={Col} controlId=\"formGridAllergiesAttachmentName\">\n    <Form.Label>AllergiesAttachmentName</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"AllergiesAttachmentName\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridAllergiesAttachmentFormat\">\n    <Form.Label>AllergiesAttachmentFormat</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"AllergiesAttachmentFormat\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridAllergiesAttachmentPath\">\n    <Form.Label>AllergiesAttachmentPath</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"AllergiesAttachmentPath\"/>\n  </Form.Group>\n  </Form.Row>\n\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"9\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n\n{props.canConfirm && (\n  <Accordion.Toggle as={Button} variant=\"success\" eventKey=\"9\" className=\"btn\" type=\"submit\">\n  Submit\n  </Accordion.Toggle>\n)}\n\n</Form>\n{\n  // <AuthContext.Consumer>\n// </AuthContext.Consumer>\n}\n</div>\n\n)};\n\nexport default UpdatePatientAllergiesForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Accordion from 'react-bootstrap/Accordion'\n// import FormCheck from 'react-bootstrap/FormCheck'\n// import AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst UpdatePatientMedicationForm = (props) => {\n\nconsole.log(\"UpdatePatientMedicationForm.props:  \", {...props});\nconst {...patient} = props.patient;\nconsole.log(\"UpdatePatientMedicationForm.props.patient:  \", {...patient});\n\n\nreturn (\n<div className=\"UpdateFormContainer\">\n<Form onSubmit={props.onConfirm}>\n<Form.Row>\n  <Form.Group as={Col} controlId=\"formGridMedicationTitle\">\n    <Form.Label>MedicationTitle</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"MedicationTitle\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridMedicationType\">\n    <Form.Label>MedicationType</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"MedicationType\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridMedicationDescription\">\n    <Form.Label>MedicationDescription</Form.Label>\n    <Form.Control as=\"textarea\" rows=\"3\" placeholder=\"MedicationDescription\"/>\n  </Form.Group>\n  </Form.Row>\n\n  <Form.Row>\n  <Form.Group as={Col} controlId=\"formGridMedicationAttachmentName\">\n    <Form.Label>MedicationAttachmentName</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"MedicationAttachmentName\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridMedicationAttachmentFormat\">\n    <Form.Label>MedicationAttachmentFormat</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"MedicationAttachmentFormat\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridMedicationAttachmentPath\">\n    <Form.Label>MedicationAttachmentPath</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"MedicationAttachmentPath\"/>\n  </Form.Group>\n  </Form.Row>\n\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"9\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n\n{props.canConfirm && (\n  <Accordion.Toggle as={Button} variant=\"success\" eventKey=\"9\" className=\"btn\" type=\"submit\">\n  Submit\n  </Accordion.Toggle>\n)}\n\n</Form>\n{\n  // <AuthContext.Consumer>\n// </AuthContext.Consumer>\n}\n</div>\n\n)};\n\nexport default UpdatePatientMedicationForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Accordion from 'react-bootstrap/Accordion'\n// import FormCheck from 'react-bootstrap/FormCheck'\n// import AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst UpdatePatientInvestigationForm = (props) => {\n\nconsole.log(\"UpdatePatientInvestigationForm.props:  \", {...props});\nconst {...patient} = props.patient;\nconsole.log(\"UpdatePatientInvestigationForm.props.patient:  \", {...patient});\n\n\nreturn (\n<div className=\"UpdateFormContainer\">\n<Form onSubmit={props.onConfirm}>\n<Form.Row>\n  <Form.Group as={Col} controlId=\"formGridInvestigationDate\">\n    <Form.Label>InvestigationDate</Form.Label>\n    <Form.Control type=\"date\" placeholder=\"InvestigationDate\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridInvestigationTitle\">\n    <Form.Label>InvestigationTitle</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"InvestigationTitle\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridInvestigationTypeSelect\">\n    <Form.Label>InvestigationType Options</Form.Label>\n    <Form.Control as=\"select\">\n    <option>select</option>\n    <option>procedure</option>\n    <option>prescription</option>\n    </Form.Control>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridInvestigationType\">\n    <Form.Label>InvestigationType</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"InvestigationType\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridInvestigationDescription\">\n    <Form.Label>InvestigationDescription</Form.Label>\n    <Form.Control as=\"textarea\" rows=\"3\" placeholder=\"InvestigationDescription\"/>\n  </Form.Group>\n  </Form.Row>\n\n  <Form.Row>\n  <Form.Group as={Col} controlId=\"formGridInvestigationAttachmentName\">\n    <Form.Label>InvestigationAttachmentName</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"InvestigationAttachmentName\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridInvestigationAttachmentFormat\">\n    <Form.Label>InvestigationAttachmentFormat</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"InvestigationAttachmentFormat\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridInvestigationAttachmentPath\">\n    <Form.Label>InvestigationAttachmentPath</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"InvestigationAttachmentPath\"/>\n  </Form.Group>\n  </Form.Row>\n\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"9\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n\n{props.canConfirm && (\n  <Accordion.Toggle as={Button} variant=\"success\" eventKey=\"9\" className=\"btn\" type=\"submit\">\n  Submit\n  </Accordion.Toggle>\n)}\n\n</Form>\n{\n  // <AuthContext.Consumer>\n// </AuthContext.Consumer>\n}\n</div>\n\n)};\n\nexport default UpdatePatientInvestigationForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Accordion from 'react-bootstrap/Accordion'\n// import FormCheck from 'react-bootstrap/FormCheck'\n// import AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst UpdatePatientDiagnosisForm = (props) => {\n\nconsole.log(\"UpdatePatientDiagnosisForm.props:  \", {...props});\nconst {...patient} = props.patient;\nconsole.log(\"UpdatePatientDiagnosisForm.props.patient:  \", {...patient});\n\n\nreturn (\n<div className=\"UpdateFormContainer\">\n<Form onSubmit={props.onConfirm}>\n<Form.Row>\n  <Form.Group as={Col} controlId=\"formGridDiagnosisDate\">\n    <Form.Label>DiagnosisDate</Form.Label>\n    <Form.Control type=\"date\" placeholder=\"DiagnosisDate\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridDiagnosisTitle\">\n    <Form.Label>DiagnosisTitle</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"DiagnosisTitle\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridDiagnosisType\">\n    <Form.Label>DiagnosisType</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"DiagnosisType\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridDiagnosisDescription\">\n    <Form.Label>DiagnosisDescription</Form.Label>\n    <Form.Control as=\"textarea\" rows=\"3\" placeholder=\"DiagnosisDescription\"/>\n  </Form.Group>\n  </Form.Row>\n\n  <Form.Row>\n  <Form.Group as={Col} controlId=\"formGridDiagnosisAttachmentName\">\n    <Form.Label>DiagnosisAttachmentName</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"DiagnosisAttachmentName\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridDiagnosisAttachmentFormat\">\n    <Form.Label>DiagnosisAttachmentFormat</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"DiagnosisAttachmentFormat\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridDiagnosisAttachmentPath\">\n    <Form.Label>DiagnosisAttachmentPath</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"DiagnosisAttachmentPath\"/>\n  </Form.Group>\n  </Form.Row>\n\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"9\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n\n{props.canConfirm && (\n  <Accordion.Toggle as={Button} variant=\"success\" eventKey=\"9\" className=\"btn\" type=\"submit\">\n  Submit\n  </Accordion.Toggle>\n)}\n\n</Form>\n{\n  // <AuthContext.Consumer>\n// </AuthContext.Consumer>\n}\n</div>\n\n)};\n\nexport default UpdatePatientDiagnosisForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Accordion from 'react-bootstrap/Accordion'\n// import FormCheck from 'react-bootstrap/FormCheck'\n// import AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst UpdatePatientTreatmentForm = (props) => {\n\nconsole.log(\"UpdatePatientTreatmentForm.props:  \", {...props});\nconst {...patient} = props.patient;\nconsole.log(\"UpdatePatientTreatmentForm.props.patient:  \", {...patient});\n\n\nreturn (\n<div className=\"UpdateFormContainer\">\n<Form onSubmit={props.onConfirm}>\n<Form.Row>\n  <Form.Group as={Col} controlId=\"formGridTreatmentDate\">\n    <Form.Label>TreatmentDate</Form.Label>\n    <Form.Control type=\"date\" placeholder=\"TreatmentDate\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridTreatmentTitle\">\n    <Form.Label>TreatmentTitle</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"TreatmentTitle\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridTreatmentType\">\n    <Form.Label>TreatmentType</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"TreatmentType\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridTreatmentDescription\">\n    <Form.Label>TreatmentDescription</Form.Label>\n    <Form.Control as=\"textarea\" rows=\"3\" placeholder=\"TreatmentDescription\"/>\n  </Form.Group>\n  </Form.Row>\n\n  <Form.Row>\n  <Form.Group as={Col} controlId=\"formGridTreatmentDose\">\n    <Form.Label>TreatmentDose</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"TreatmentDose\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridTreatmentFrequency\">\n    <Form.Label>TreatmentFrequency</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"TreatmentFrequency\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridTreatmentTypeSelect\">\n    <Form.Label>TreatmentType Options</Form.Label>\n    <Form.Control as=\"select\">\n    <option>select</option>\n    <option>procedure</option>\n    <option>prescription</option>\n    </Form.Control>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridTreatmentType\">\n    <Form.Label>TreatmentType</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"TreatmentType\"/>\n  </Form.Group>\n  </Form.Row>\n\n  <Form.Row>\n  <Form.Group as={Col} controlId=\"formGridTreatmentAttachmentName\">\n    <Form.Label>TreatmentAttachmentName</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"DiagnosisAttachmentName\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridTreatmentAttachmentFormat\">\n    <Form.Label>TreatmentAttachmentFormat</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"TreatmentAttachmentFormat\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridTreatmentAttachmentPath\">\n    <Form.Label>TreatmentAttachmentPath</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"TreatmentAttachmentPath\"/>\n  </Form.Group>\n  </Form.Row>\n\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"9\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n\n{props.canConfirm && (\n  <Accordion.Toggle as={Button} variant=\"success\" eventKey=\"9\" className=\"btn\" type=\"submit\">\n  Submit\n  </Accordion.Toggle>\n)}\n\n</Form>\n{\n  // <AuthContext.Consumer>\n// </AuthContext.Consumer>\n}\n</div>\n\n)};\n\nexport default UpdatePatientTreatmentForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Accordion from 'react-bootstrap/Accordion'\n// import FormCheck from 'react-bootstrap/FormCheck'\n// import AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst UpdatePatientBillingForm = (props) => {\n\nconsole.log(\"UpdatePatientBillingForm.props:  \", {...props});\nconst {...patient} = props.patient;\nconsole.log(\"UpdatePatientBillingForm.props.patient:  \", {...patient});\n\n\nreturn (\n<div className=\"UpdateFormContainer\">\n<Form onSubmit={props.onConfirm}>\n<Form.Row>\n  <Form.Group as={Col} controlId=\"formGridBillingDate\">\n    <Form.Label>BillingDate</Form.Label>\n    <Form.Control type=\"date\" placeholder=\"BillingDate\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridBillingTitle\">\n    <Form.Label>BillingTitle</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"BillingTitle\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridBillingType\">\n    <Form.Label>BillingType</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"BillingType\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridBillingDescription\">\n    <Form.Label>BillingDescription</Form.Label>\n    <Form.Control as=\"textarea\" rows=\"3\" placeholder=\"BillingDescription\"/>\n  </Form.Group>\n  </Form.Row>\n\n  <Form.Row>\n  <Form.Group as={Col} controlId=\"formGridBillingAmount\">\n    <Form.Label>BillingAmount</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"BillingAmount\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridBillingPaid\">\n        <Form.Label>BillingPaid</Form.Label>\n        <Form.Control as=\"select\">\n          <option>true</option>\n          <option>false</option>\n        </Form.Control>\n      </Form.Group>\n      <Form.Group as={Col} controlId=\"formGridBillingNotes\">\n        <Form.Label>BillingNotes</Form.Label>\n        <Form.Control as=\"textarea\" rows=\"3\" placeholder=\"BillingNotes\"/>\n      </Form.Group>\n\n  </Form.Row>\n\n  <Form.Row>\n  <Form.Group as={Col} controlId=\"formGridBillingAttachmentName\">\n    <Form.Label>BillingAttachmentName</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"BillingAttachmentName\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridBillingAttachmentFormat\">\n    <Form.Label>BillingAttachmentFormat</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"BillingAttachmentFormat\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridBillingAttachmentPath\">\n    <Form.Label>BillingAttachmentPath</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"BillingAttachmentPath\"/>\n  </Form.Group>\n  </Form.Row>\n\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"9\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n\n{props.canConfirm && (\n  <Accordion.Toggle as={Button} variant=\"success\" eventKey=\"9\" className=\"btn\" type=\"submit\">\n  Submit\n  </Accordion.Toggle>\n)}\n\n</Form>\n{\n  // <AuthContext.Consumer>\n// </AuthContext.Consumer>\n}\n</div>\n\n)};\n\nexport default UpdatePatientBillingForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Accordion from 'react-bootstrap/Accordion'\n// import FormCheck from 'react-bootstrap/FormCheck'\n// import AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst UpdatePatientAttachmentForm = (props) => {\n\nconsole.log(\"UpdatePatientAttachmentForm.props:  \", {...props});\nconst {...patient} = props.patient;\nconsole.log(\"UpdatePatientAttachmentForm.props.patient:  \", {...patient});\n\n\nreturn (\n<div className=\"UpdateFormContainer\">\n<Form onSubmit={props.onConfirm}>\n\n  <Form.Row>\n  <Form.Group as={Col} controlId=\"formGridPatientAttachmentName\">\n    <Form.Label>PatientAttachmentName</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"PatientAttachmentName\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridPatientAttachmentFormat\">\n    <Form.Label>PatientAttachmentFormat</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"PatientAttachmentFormat\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridPatientAttachmentPath\">\n    <Form.Label>PatientAttachmentPath</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"PatientAttachmentPath\"/>\n  </Form.Group>\n  <input type=\"file\" name=\"myFile\"/>\n  </Form.Row>\n\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"9\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n\n{props.canConfirm && (\n  <Accordion.Toggle as={Button} variant=\"success\" eventKey=\"9\" className=\"btn\" type=\"submit\">\n  Submit\n  </Accordion.Toggle>\n)}\n\n</Form>\n{\n  // <AuthContext.Consumer>\n// </AuthContext.Consumer>\n}\n</div>\n\n)};\n\nexport default UpdatePatientAttachmentForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Accordion from 'react-bootstrap/Accordion'\n// import FormCheck from 'react-bootstrap/FormCheck'\n// import AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst UpdatePatientNoteForm = (props) => {\n\nconsole.log(\"UpdatePatientNoteForm.props:  \", {...props});\nconst {...patient} = props.patient;\nconsole.log(\"UpdatePatientNoteForm.props.patient:  \", {...patient});\n\n\nreturn (\n<div className=\"UpdateFormContainer\">\n<Form onSubmit={props.onConfirm}>\n<Form.Row>\n  <Form.Group as={Col} controlId=\"formGridNote\">\n    <Form.Label>Note</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"Note\"/>\n  </Form.Group>\n  </Form.Row>\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"9\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n\n{props.canConfirm && (\n  <Accordion.Toggle as={Button} variant=\"success\" eventKey=\"9\" className=\"btn\" type=\"submit\">\n  Submit\n  </Accordion.Toggle>\n)}\n\n</Form>\n{\n  // <AuthContext.Consumer>\n// </AuthContext.Consumer>\n}\n</div>\n\n)};\n\nexport default UpdatePatientNoteForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Accordion from 'react-bootstrap/Accordion'\n// import FormCheck from 'react-bootstrap/FormCheck'\n// import AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst UpdatePatientTagForm = (props) => {\n\nconsole.log(\"UpdatePatientTagForm.props:  \", {...props});\nconst {...patient} = props.patient;\nconsole.log(\"UpdatePatientTagForm.props.patient:  \", {...patient});\n\n\nreturn (\n<div className=\"UpdateFormContainer\">\n<Form onSubmit={props.onConfirm}>\n<Form.Row>\n  <Form.Group as={Col} controlId=\"formGridTag\">\n    <Form.Label>Tag</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"Tag\"/>\n  </Form.Group>\n  </Form.Row>\n\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"9\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n\n{props.canConfirm && (\n  <Accordion.Toggle as={Button} variant=\"success\" eventKey=\"9\" className=\"btn\" type=\"submit\">\n  Submit\n  </Accordion.Toggle>\n)}\n\n</Form>\n{\n  // <AuthContext.Consumer>\n// </AuthContext.Consumer>\n}\n</div>\n\n)};\n\nexport default UpdatePatientTagForm;\n","import React, { Component } from 'react';\n// import Form from 'react-bootstrap/Form';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Button from 'react-bootstrap/Button';\nimport Accordion from 'react-bootstrap/Accordion';\nimport SidebarPage from './Sidebar';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\nimport Card from 'react-bootstrap/Card';\n\nimport PatientList from '../components/Patients/PatientList/PatientList';\nimport PatientDetail from '../components/Patients/PatientDetail';\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\nimport SearchPatientList from '../components/Patients/PatientList/SearchPatientList';\nimport SearchPatientForm from '../components/Forms/SearchPatientForm';\nimport SearchPatientIdForm from '../components/Forms/SearchPatientIdForm';\nimport SearchPatientNameForm from '../components/Forms/SearchPatientNameForm';\nimport SearchPatientVisitForm from '../components/Forms/SearchPatientVisitForm';\n\nimport AlertBox from '../components/AlertBox';\n\nimport CreatePatientForm from '../components/Forms/CreatePatientForm';\nimport UpdatePatientForm from '../components/Forms/UpdatePatientForm';\nimport UpdatePatientFieldForm from '../components/Forms/UpdatePatientFieldForm';\nimport UpdatePatientConsultantForm from '../components/Forms/UpdatePatientConsultantForm';\nimport UpdatePatientInsuranceForm from '../components/Forms/UpdatePatientInsuranceForm';\nimport UpdatePatientNextOfKinForm from '../components/Forms/UpdatePatientNextOfKinForm';\nimport UpdatePatientComplaintForm from '../components/Forms/UpdatePatientComplaintForm';\nimport UpdatePatientSurveyForm from '../components/Forms/UpdatePatientSurveyForm';\nimport UpdatePatientVitalsForm from '../components/Forms/UpdatePatientVitalsForm';\nimport UpdatePatientExaminationForm from '../components/Forms/UpdatePatientExaminationForm';\nimport UpdatePatientHistoryForm from '../components/Forms/UpdatePatientHistoryForm';\nimport UpdatePatientAllergiesForm from '../components/Forms/UpdatePatientAllergiesForm';\nimport UpdatePatientMedicationForm from '../components/Forms/UpdatePatientMedicationForm';\nimport UpdatePatientInvestigationForm from '../components/Forms/UpdatePatientInvestigationForm';\nimport UpdatePatientDiagnosisForm from '../components/Forms/UpdatePatientDiagnosisForm';\nimport UpdatePatientTreatmentForm from '../components/Forms/UpdatePatientTreatmentForm';\nimport UpdatePatientBillingForm from '../components/Forms/UpdatePatientBillingForm';\nimport UpdatePatientAttachmentForm from '../components/Forms/UpdatePatientAttachmentForm';\nimport UpdatePatientNoteForm from '../components/Forms/UpdatePatientNoteForm';\nimport UpdatePatientTagForm from '../components/Forms/UpdatePatientTagForm';\n\nimport './Users.css';\n\nclass PatientsPage extends Component {\n  state = {\n    creating: false,\n    updating: false,\n    searching: false,\n    updatingArray: false,\n    deleting: false,\n    patients: [],\n    searchPatients: [],\n    isLoading: false,\n    selectedPatient: null,\n    patientUpdateField: null,\n    patientSearchField: null,\n    patientSearchQuery: null,\n    canDelete: null,\n    visit: null,\n    userAlert: null,\n  };\n  isActive = true;\n\n  static contextType = AuthContext;\n\n  constructor(props) {\n    super(props);\n    this.nameElRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.fetchPatients();\n    if (this.context.user.name === 'admin579'){\n      this.setState({canDelete: true})\n    }\n  }\n\n\n  startCreatePatientHandler = () => {\n    this.setState({ creating: true });\n    console.log(\"CreatePatientForm...\");\n  };\n  startUpdatePatientHandler = () => {\n    this.setState({ updating: true, updatingArray: true });\n    console.log(\"UpdatePatientForm...\");\n  };\n  startSearchPatientHandler = () => {\n    this.setState({ searching: true });\n    console.log(\"SearchPatientForm...\");\n  };\n\n  modalConfirmHandler = (event) => {\n\n    console.log(\"CreatePatientFormData:  \", event.target.formGridName.value);\n\n    this.setState({ creating: false });\n    const userId = this.context.userId;\n\n    let title = event.target.formGridTitle.value;\n    let name = event.target.formGridName.value;\n    let dob = event.target.formGridDob.value;\n    let age = event.target.formGridAge.value;\n    let gender = event.target.formGridGender.value;\n    let addressNumber = event.target.formGridAddressNumber.value;\n    let addressStreet = event.target.formGridAddressStreet.value;\n    let addressTown = event.target.formGridAddressTown.value;\n    let addressParish = event.target.formGridAddressParish.value;\n    let addressPostOffice = event.target.formGridAddressPostOffice.value;\n    let contactPhone = event.target.formGridContactPhone.value;\n    let contactEmail = event.target.formGridContactEmail.value;\n    let registrationDate = event.target.formGridRegistrationDate.value;\n    let referralDate = event.target.formGridReferralDate.value;\n    let expirationDate = event.target.formGridExpirationDate.value;\n    let attendingPhysicianName = event.target.formGridAttendingPhysicianName.value;\n    let attendingPhysicianEmail = event.target.formGridAttendingPhysicianEmail.value;\n    let attendingPhysicianPhone = event.target.formGridAttendingPhysicianPhone.value;\n    let referringDoctorName = event.target.formGridReferringDoctorName.value;\n    let referringDoctorEmail = event.target.formGridReferringDoctorEmail.value;\n    let referringDoctorPhone = event.target.formGridReferringDoctorPhone.value;\n    let occupationRole = event.target.formGridOccupationRole.value;\n    let occupationEmployer = event.target.formGridOccupationEmployer.value;\n    let occupationEmployerContactPhone = event.target.formGridOccupationEmployerContactPhone.value;\n    let occupationEmployerContactEmail = event.target.formGridOccupationEmployerContactEmail.value;\n\n\n    if (\n      name.trim().length === 0 ||\n      // title.trim().length === 0 ||\n      // name.trim().length === 0 ||\n      // dob.trim().length === 0 ||\n      // age.trim().length === 0 ||\n      // gender.trim().length === 0 ||\n      // addressNumber.trim().length === 0 ||\n      // addressStreet.trim().length === 0 ||\n      // addressTown.trim().length === 0 ||\n      // addressParish.trim().length === 0 ||\n      // addressPostOffice.trim().length === 0 ||\n      contactPhone.trim().length === 0\n      // contactEmail.trim().length === 0 ||\n      // registrationDate.trim().length === 0 ||\n      // referralDate.trim().length === 0 ||\n      // expirationDate.trim().length === 0 ||\n      // attendingPhysicianName.trim().length === 0 ||\n      // attendingPhysicianEmail.trim().length === 0 ||\n      // attendingPhysicianPhone.trim().length === 0 ||\n      // referringDoctorName.trim().length === 0 ||\n      // referringDoctorEmail.trim().length === 0 ||\n      // referringDoctorPhone.trim().length === 0 ||\n      // occupationRole.trim().length === 0 ||\n      // occupationEmployer.trim().length === 0 ||\n      // occupationEmployerContactPhone.trim().length === 0 ||\n      // occupationEmployerContactEmail.trim().length === 0\n\n    ) {\n      console.log(\"patient must have at least a Name and Contact Number!!!...Please try again...\");\n      this.setState({userAlert: \"patient requires Name and Contact Number!!!... Try again...\"});\n      return;\n    }\n\n    const patient = { title, name, dob, age, gender, addressNumber, addressStreet, addressTown, addressParish, addressPostOffice, contactPhone, contactEmail, registrationDate, referralDate, expirationDate, attendingPhysicianName, attendingPhysicianEmail, attendingPhysicianPhone, referringDoctorName, referringDoctorEmail, referringDoctorPhone, occupationRole, occupationEmployer, occupationEmployerContactPhone, occupationEmployerContactEmail };\n    console.log(`\n      creating patient...\n      title: ${title},\n      name: ${name},\n      dob: ${dob},\n      age: ${age},\n      gender: ${gender},\n      addressNumber: ${addressNumber},\n      addressStreet: ${addressStreet},\n      addressTown: ${addressTown},\n      addressParish: ${addressParish},\n      addressPostOffice: ${addressPostOffice},\n      contactPhone: ${contactPhone},\n      contactEmail: ${contactEmail},\n      registrationDate: ${registrationDate},\n      referralDate: ${referralDate},\n      expirationDate: ${expirationDate},\n      attendingPhysicianName: ${attendingPhysicianName},\n      attendingPhysicianEmail: ${attendingPhysicianEmail},\n      attendingPhysicianPhone: ${attendingPhysicianPhone},\n      referringDoctorName: ${referringDoctorName},\n      referringDoctorEmail: ${referringDoctorEmail},\n      referringDoctorPhone: ${referringDoctorPhone},\n      occupationRole: ${occupationRole},\n      occupationEmployer: ${occupationEmployer},\n      occupationEmployerContactPhone: ${occupationEmployerContactPhone},\n      occupationEmployerContactEmail: ${occupationEmployerContactEmail},\n      `);\n\n    const requestBody = {\n      query: `\n          mutation {createPatient(userId:\\\"${userId}\\\", patientInput:{title:\\\"${title}\\\",name:\\\"${name}\\\",dob:\\\"${dob}\\\",age:${age},gender:\\\"${gender}\\\",addressNumber:${addressNumber},addressStreet:\\\"${addressStreet}\\\",addressTown:\\\"${addressTown}\\\",addressParish:\\\"${addressParish}\\\",addressPostOffice:\\\"${addressPostOffice}\\\",contactPhone:\\\"${contactPhone}\\\",contactEmail:\\\"${contactEmail}\\\",registrationDate:\\\"${registrationDate}\\\",referralDate:\\\"${referralDate}\\\",expirationDate:\\\"${expirationDate}\\\",referringDoctorName:\\\"${referringDoctorName}\\\",referringDoctorEmail:\\\"${referringDoctorEmail}\\\",referringDoctorPhone:\\\"${referringDoctorPhone}\\\",attendingPhysicianName:\\\"${attendingPhysicianName}\\\",attendingPhysicianEmail:\\\"${attendingPhysicianEmail}\\\",attendingPhysicianPhone:\\\"${attendingPhysicianPhone}\\\",occupationRole:\\\"${occupationRole}\\\",occupationEmployer:\\\"${occupationEmployer}\\\",occupationEmployerContactPhone:\\\"${occupationEmployerContactPhone}\\\",occupationEmployerContactEmail:\\\"${occupationEmployerContactEmail}\\\"})\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n        `};\n\n    const token = this.context.token;\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(`\n          response data:\n          ${JSON.stringify(resData.data.createPatient)}\n          `);\n          const responseAlert = JSON.stringify(resData.data).slice(2,15);\n          this.setState({userAlert: responseAlert});\n\n        const newPatient = resData.data.createPatient;\n        this.setState(prevState => {\n          const updatedPatients = [...prevState.patients];\n          updatedPatients.push(newPatient);\n\n          return { patients: updatedPatients };\n        });\n\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n  };\n\n  modalCancelHandler = () => {\n    this.setState({ creating: false, updating: false, selectedPatient: null });\n  };\n\n\n  modalConfirmUpdateHandler = (event) => {\n\n    // if(this.context.user.role !== 'admin') {\n    //   console.log(\"Not the Admin! No edit permission!!\");\n    // }\n\n    const userId = this.context.userId;\n    const selectedPatientId = this.context.selectedPatient._id;\n\n    console.log(\"UpdatePatientFormData:  \", event.target.formGridName.value);\n\n\n    this.setState({ updating: false });\n\n    let title = event.target.formGridTitle.value;\n    let name = event.target.formGridName.value;\n    let dob = event.target.formGridDob.value;\n    let age = event.target.formGridAge.value;\n    let gender = event.target.formGridGender.value;\n    let addressNumber = event.target.formGridAddressNumber.value;\n    let addressStreet = event.target.formGridAddressStreet.value;\n    let addressTown = event.target.formGridAddressTown.value;\n    let addressParish = event.target.formGridAddressParish.value;\n    let addressPostOffice = event.target.formGridAddressPostOffice.value;\n    let contactPhone = event.target.formGridContactPhone.value;\n    let contactEmail = event.target.formGridContactEmail.value;\n    let registrationDate = event.target.formGridRegistrationDate.value;\n    let referralDate = event.target.formGridReferralDate.value;\n    let expirationDate = event.target.formGridExpirationDate.value;\n    let attendingPhysicianName = event.target.formGridAttendingPhysicianName.value;\n    let attendingPhysicianEmail = event.target.formGridAttendingPhysicianEmail.value;\n    let attendingPhysicianPhone = event.target.formGridAttendingPhysicianPhone.value;\n    let referringDoctorName = event.target.formGridReferringDoctorName.value;\n    let referringDoctorEmail = event.target.formGridReferringDoctorEmail.value;\n    let referringDoctorPhone = event.target.formGridReferringDoctorPhone.value;\n    let occupationRole = event.target.formGridOccupationRole.value;\n    let occupationEmployer = event.target.formGridOccupationEmployer.value;\n    let occupationEmployerContactPhone = event.target.formGridOccupationEmployerContactPhone.value;\n    let occupationEmployerContactEmail = event.target.formGridOccupationEmployerContactEmail.value;\n\n    if (title.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      title = this.context.selectedPatient.title;\n    }\n    if (name.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      name = this.context.selectedPatient.name;\n    }\n    if (dob.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      dob = this.context.selectedPatient.dob;\n    }\n    if (gender.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      gender = this.context.selectedPatient.gender;\n    }\n    if (age.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      age = this.context.selectedPatient.age;\n    }\n    if (addressNumber.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      addressNumber = this.context.selectedPatient.address.number;\n    }\n    if (addressStreet.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      addressStreet = this.context.selectedPatient.address.street;\n    }\n    if (addressTown.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      addressTown = this.context.selectedPatient.address.town;\n    }\n    if (addressParish.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      addressParish = this.context.selectedPatient.address.parish;\n    }\n    if (addressPostOffice.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      addressPostOffice = this.context.selectedPatient.address.postOffice;\n    }\n    if (contactPhone.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      contactPhone = this.context.selectedPatient.contact.phone;\n    }\n    if (contactEmail.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      contactEmail = this.context.selectedPatient.contact.email;\n    }\n    if (registrationDate.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      registrationDate = this.context.selectedPatient.registrationDate;\n    }\n    if (attendingPhysicianName.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      attendingPhysicianName = this.context.selectedPatient.attendingPhysician.name;\n    }\n    if (attendingPhysicianEmail.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      attendingPhysicianEmail = this.context.selectedPatient.attendingPhysician.email;\n    }\n    if (attendingPhysicianPhone.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      attendingPhysicianPhone = this.context.selectedPatient.attendingPhysician.phone;\n    }\n    if (referringDoctorName.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      referringDoctorName = this.context.selectedPatient.referringDoctor.name;\n    }\n    if (referringDoctorEmail.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      referringDoctorEmail = this.context.selectedPatient.referringDoctor.email;\n    }\n    if (referringDoctorPhone.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      referringDoctorPhone = this.context.selectedPatient.referringDoctor.phone;\n    }\n    if (occupationRole.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      occupationRole = this.context.selectedPatient.occupation.role;\n    }\n    if (occupationEmployer.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      occupationEmployer = this.context.selectedPatient.occupation.employer;\n    }\n    if (occupationEmployerContactEmail.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      occupationEmployerContactEmail = this.context.selectedPatient.occupation.contact.email;\n    }\n    if (occupationEmployerContactPhone.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      occupationEmployerContactPhone = this.context.selectedPatient.occupation.contact.phone;\n    }\n\n    const patient = { title, name, dob, age, gender, addressNumber, addressStreet, addressTown, addressParish, addressPostOffice, contactPhone, contactEmail, registrationDate, referralDate, expirationDate, attendingPhysicianName, attendingPhysicianEmail, attendingPhysicianPhone, referringDoctorName, referringDoctorEmail, referringDoctorPhone, occupationRole, occupationEmployer, occupationEmployerContactPhone, occupationEmployerContactEmail };\n    console.log(`\n      updating patient...\n      title: ${title},\n      name: ${name},\n      dob: ${dob},\n      age: ${age},\n      gender: ${gender},\n      addressNumber: ${addressNumber},\n      addressStreet: ${addressStreet},\n      addressTown: ${addressTown},\n      addressParish: ${addressParish},\n      addressPostOffice: ${addressPostOffice},\n      contactPhone: ${contactPhone},\n      contactEmail: ${contactEmail},\n      registrationDate: ${registrationDate},\n      referralDate: ${referralDate},\n      expirationDate: ${expirationDate},\n      attendingPhysicianName: ${attendingPhysicianName},\n      attendingPhysicianEmail: ${attendingPhysicianEmail},\n      attendingPhysicianPhone: ${attendingPhysicianPhone},\n      referringDoctorName: ${referringDoctorName},\n      referringDoctorEmail: ${referringDoctorEmail},\n      referringDoctorPhone: ${referringDoctorPhone},\n      occupationRole: ${occupationRole},\n      occupationEmployer: ${occupationEmployer},\n      occupationEmployerContactPhone: ${occupationEmployerContactPhone},\n      occupationEmployerContactEmail: ${occupationEmployerContactEmail},\n      `);\n      this.setState({userAlert: \"updating patient...\"});\n\n    const requestBody = {\n      query: `\n          mutation {updatePatient(userId:\"${userId}\",patientId:\"${selectedPatientId}\", patientInput:{title:\"${title}\",name:\"${name}\",dob:\"${dob}\",age:${age},gender:\"${gender}\",addressNumber:${addressNumber},addressStreet:\"${addressStreet}\",addressTown:\"${addressTown}\",addressParish:\"${addressParish}\",addressPostOffice:\"${addressPostOffice}\",contactPhone:\"${contactPhone}\",contactEmail:\"${contactEmail}\",registrationDate:\"${registrationDate}\",referralDate:\"${referralDate}\",expirationDate:\"${expirationDate}\",referringDoctorName:\"${referringDoctorName}\",referringDoctorEmail:\"${referringDoctorEmail}\",referringDoctorPhone:\"${referringDoctorPhone}\",attendingPhysicianName:\"${attendingPhysicianName}\",attendingPhysicianEmail:\"${attendingPhysicianEmail}\",attendingPhysicianPhone:\"${attendingPhysicianPhone}\",occupationRole:\"${occupationRole}\",occupationEmployer:\"${occupationEmployer}\",occupationEmployerContactPhone:\"${occupationEmployerContactPhone}\",occupationEmployerContactEmail:\"${occupationEmployerContactPhone}\"})\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n        `};\n\n    const token = this.context.token;\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n\n        const updatedPatientId = resData.data.updatePatient._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatient);\n\n        // FIX ME!!!\n        // Add everywhere update are found\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatient})\n        this.fetchPatients();\n\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n  };\n\n\n  modalConfirmUpdateFieldHandler = (event) => {\n\n    const token = this.context.token;\n    const userId = this.context.userId;\n    let selectedPatientId = this.context.selectedPatient._id;\n\n    // if( this.context.user.role !== 'admin') {\n    //   console.log(\"Not the creator or Admin! No edit permission!!\");\n    //   selectedPatientId = null;\n    // }\n\n      console.log(\"UpdatePatientFieldFormData:  \", event.target.formGridField.value);\n      this.setState({ updating: false });\n\n      let field = null;\n      let query = event.target.formGridQuery.value;\n      if (event.target.formGridFieldSelect.value === \"select\") {\n        field = event.target.formGridField.value;\n      } else {\n        field = event.target.formGridFieldSelect.value;\n      }\n\n      const requestBody = {\n        query:`\n          mutation {updatePatientField(userId:\\\"${userId}\\\",patientId:\\\"${selectedPatientId}\\\",field:\\\"${field}\\\",query:\\\"${query}\\\")\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n        `};\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData.data.updatePatientField));\n\n          const updatedPatientId = resData.data.updatePatientField._id;\n          const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n          const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n          const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n          console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n          this.state.patients.push(resData.data.updatePatientField);\n          this.context.patients = this.state.patients;\n          const responseAlert = JSON.stringify(resData.data).slice(2,25);\n          this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientField})\n          this.fetchPatients();\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({userAlert: err});\n        });\n\n  }\n\n\nupdatePatientConsultantHandler = (event) => {\n\n  let token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n  const patientConsultantReference = this.context.selectedUser._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n  if (patientConsultantReference === undefined) {\n    console.log(`\n      select a Staff member before adding a Patient Consultant!!\n      `);\n      this.setState({userAlert: \"select a Staff member before adding a Patient Consultant!!...\"});\n      token = null;\n  }\n\n  console.log(\"UpdatePatientConsultantFormData:  \", event.target.formGridConsultantDate.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let consultantDate = event.target.formGridConsultantDate.value;\n\n  const patientConsultant = { consultantDate, patientConsultantReference };\n  console.log(`\n    adding patient consultant item...\n    userId: ${userId},\n    selectedPatientId: ${selectedPatientId},\n    consultantDate: ${consultantDate},\n    consultantReference: ${patientConsultantReference},\n    `);\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientConsultant(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{consultantDate:\" ${consultantDate}\",consultantReference: \"${patientConsultantReference}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    };\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData.data));\n\n          const updatedPatientId = resData.data.updatePatientConsultant._id;\n          const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n          const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n          const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n          console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n          this.state.patients.push(resData.data.updatePatientConsultant);\n          this.context.patients = this.state.patients;\n          const responseAlert = JSON.stringify(resData.data).slice(2,25);\n          this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientConsultant})\n          this.fetchPatients();\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({userAlert: err});\n        });\n\n}\nupdatePatientInsuranceHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientInsuranceFormData:  \", event.target.formGridInsuranceCompany.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let insuranceCompany = event.target.formGridInsuranceCompany.value;\n  let insuranceNumber = event.target.formGridInsuranceNumber.value;\n  let insuranceExpiry = event.target.formGridInsuranceExpiry.value;\n  let insuranceDescription = event.target.formGridInsuranceDescription.value;\n  let insuranceSubscriberCompany = event.target.formGridInsuranceSubscriberCompany.value;\n  let insuranceSubscriberDescription = event.target.formGridInsuranceSubscriberDescription.value;\n\n  const patientInsurance = { insuranceCompany, insuranceNumber, insuranceExpiry, insuranceDescription, insuranceSubscriberCompany, insuranceSubscriberDescription };\n  console.log(`\n    adding patient insurance item...\n    userId: ${userId},\n    selectedPatientId: ${selectedPatientId},\n    insuranceCompany: ${insuranceCompany},\n    insuranceNumber: ${insuranceNumber},\n    insuranceExpiry: ${insuranceExpiry},\n    insuranceDescription: ${insuranceDescription},\n    insuranceSubscriberCompany: ${insuranceSubscriberCompany},\n    insuranceSubscriberDescription: ${insuranceSubscriberDescription},\n    `);\n    this.setState({userAlert: \"adding patient insurance item...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientInsurance(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{insuranceCompany:\"${insuranceCompany}\",insuranceNumber:\"${insuranceNumber}\",insuranceDescription:\"${insuranceDescription}\",insuranceExpiry:\"${insuranceExpiry}\",insuranceSubscriberCompany:\"${insuranceSubscriberCompany}\",insuranceSubscriberDescription:\"${insuranceSubscriberDescription}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    };\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData.data));\n\n          const updatedPatientId = resData.data.updatePatientInsurance._id;\n          const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n          const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n          const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n          console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n          this.state.patients.push(resData.data.updatePatientInsurance);\n          this.context.patients = this.state.patients;\n          const responseAlert = JSON.stringify(resData.data).slice(2,25);\n          this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientInsurance})\n          this.fetchPatients();\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({userAlert: err});\n        });\n\n}\n\nupdatePatientNextOfKinHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientNextOfKinFormData:  \", event.target.formGridNextOfKinName.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let nextOfKinName = event.target.formGridNextOfKinName.value;\n  let nextOfKinPhone = event.target.formGridNextOfKinPhone.value;\n  let nextOfKinEmail = event.target.formGridNextOfKinEmail.value;\n\n  const patientNextOfKin = { nextOfKinName, nextOfKinPhone, nextOfKinEmail };\n  console.log(`\n    adding patient nextOfKin item...\n    userId: ${userId},\n    selectedPatientId: ${selectedPatientId},\n    nextOfKinName: ${nextOfKinName},\n    nextOfKinPhone: ${nextOfKinPhone},\n    nextOfKinEmail: ${nextOfKinEmail},\n    `);\n    this.setState({userAlert: \"adding patient nextOfKin item...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientNextOfKin(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{nextOfKinName:\"${nextOfKinName}\",nextOfKinEmail:\"${nextOfKinEmail}\",nextOfKinPhone:\"${nextOfKinPhone}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    };\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData.data));\n\n          const updatedPatientId = resData.data.updatePatientNextOfKin._id;\n          const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n          const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n          const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n          console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n          this.state.patients.push(resData.data.updatePatientNextOfKin);\n          this.context.patients = this.state.patients;\n          const responseAlert = JSON.stringify(resData.data).slice(2,25);\n          this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientNextOfKin})\n          this.fetchPatients();\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({userAlert: err});\n        });\n}\n\n\nupdatePatientComplaintHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientComplaintFormData:  \", event.target.formGridComplaintTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let complaintTitle = event.target.formGridComplaintTitle.value;\n  let complaintDate = event.target.formGridComplaintDate.value;\n  let complaintDescription = event.target.formGridComplaintDescription.value;\n  let complaintAnamnesis = event.target.formGridComplaintAnamnesis.value;\n  let complaintAttachmentName = event.target.formGridComplaintAttachmentName.value;\n  let complaintAttachmentFormat = event.target.formGridComplaintAttachmentFormat.value;\n  let complaintAttachmentPath = event.target.formGridComplaintAttachmentPath.value;\n\n  const patientComplaint = { complaintTitle, complaintDate, complaintDescription, complaintAnamnesis, complaintAttachmentName, complaintAttachmentFormat, complaintAttachmentPath };\n  console.log(`\n    adding patient complaint...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    complaintTitle: ${complaintTitle},\n    complaintDate: ${complaintDate},\n    complaintDescription: ${complaintDescription},\n    complaintAnamnesis: ${complaintAnamnesis},\n    complaintAttachmentName: ${complaintAttachmentName},\n    complaintAttachmentFormat: ${complaintAttachmentFormat},\n    complaintAttachmentPath: ${complaintAttachmentPath},\n    `);\n    this.setState({userAlert: \"adding patient complaint...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientComplaint(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{complaintDate:\"${complaintDate}\",complaintTitle:\"${complaintTitle}\",complaintDescription:\"${complaintDescription}\",complaintAnamnesis:\"${complaintAnamnesis}\",complaintAttachmentName:\"${complaintAttachmentName}\",complaintAttachmentFormat:\"${complaintAttachmentFormat}\",complaintAttachmentPath:\"${complaintAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientComplaint._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientComplaint);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientComplaint})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n}\n\nupdatePatientSurveyHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientSurveyFormData:  \", event.target.formGridSurveyTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let surveyDate = event.target.formGridSurveyDate.value;\n  let surveyTitle = event.target.formGridSurveyTitle.value;\n  let surveyDescription = event.target.formGridSurveyDescription.value;\n  let surveyAttachmentName = event.target.formGridSurveyAttachmentName.value;\n  let surveyAttachmentFormat = event.target.formGridSurveyAttachmentFormat.value;\n  let surveyAttachmentPath = event.target.formGridSurveyAttachmentPath.value;\n\n  const patientSurvey = { surveyDate, surveyTitle, surveyDescription, surveyAttachmentName, surveyAttachmentFormat, surveyAttachmentPath };\n  console.log(`\n    adding patient survey...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    surveyDate: ${surveyDate},\n    surveyTitle: ${surveyTitle},\n    surveyDescription: ${surveyDescription},\n    surveyAttachmentName: ${surveyAttachmentName},\n    surveyAttachmentFormat: ${surveyAttachmentFormat},\n    surveyAttachmentPath: ${surveyAttachmentPath},\n    `);\n    this.setState({userAlert: \"adding patient survey...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientSurvey(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{surveyDate:\"${surveyDate}\",surveyTitle:\"${surveyTitle}\",surveyDescription:\"${surveyDescription}\",surveyAttachmentName:\"${surveyAttachmentName}\",surveyAttachmentFormat:\"${surveyAttachmentFormat}\",surveyAttachmentPath:\"${surveyAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientSurvey._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientSurvey);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientSurvey})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n}\n\nupdatePatientVitalsHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientVitalsFormData:  \", event.target.formGridVitalsDate.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let vitalsDate = event.target.formGridVitalsDate.value;\n  let vitalsPr = event.target.formGridVitalsPr.value;\n  let vitalsBp1 = event.target.formGridVitalsBp1.value;\n  let vitalsBp2 = event.target.formGridVitalsBp2.value;\n  let vitalsRr = event.target.formGridVitalsRr.value;\n  let vitalsTemp = event.target.formGridVitalsTemp.value;\n  let vitalsPs02 = event.target.formGridVitalsPs02.value;\n  let vitalsHeight = event.target.formGridVitalsHeight.value;\n  let vitalsWeight = event.target.formGridVitalsWeight.value;\n  let vitalsBmi = event.target.formGridVitalsBmi.value;\n  let vitalsUrineType = event.target.formGridVitalsUrineType.value;\n  let vitalsUrineValue = event.target.formGridVitalsUrineValue.value;\n\n  const patientVitals = {  };\n  console.log(`\n    adding patient vitals...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    `);\n    this.setState({userAlert: \"adding patient vitals...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientVitals(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{vitalsDate:\"${vitalsDate}\",vitalsPr:${vitalsPr},vitalsBp1:${vitalsBp1},vitalsBp2:${vitalsBp2},vitalsRr:${vitalsRr},vitalsTemp:${vitalsTemp},vitalsPs02:${vitalsPs02},vitalsHeight:${vitalsHeight},vitalsWeight:${vitalsWeight},vitalsBmi:${vitalsBmi},vitalsUrineType:\"${vitalsUrineType}\",vitalsUrineValue:\"${vitalsUrineValue}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientVitals._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientVitals);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientVitals})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n}\n\n\nupdatePatientExaminationHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientExaminationFormData:  \", event.target.formGridExaminationArea.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let examinationDate = event.target.formGridExaminationDate.value;\n  let examinationGeneral = event.target.formGridExaminationGeneral.value;\n  let examinationArea = undefined;\n  if (event.target.formGridExaminationAreaSelect === \"select\") {\n    examinationArea = event.target.formGridExaminationArea.value;\n  } else {\n    examinationArea = event.target.formGridExaminationAreaSelect.value;\n  }\n  let examinationType = event.target.formGridExaminationType.value;\n  let examinationMeasure = event.target.formGridExaminationMeasure.value;\n  let examinationValue = event.target.formGridExaminationValue.value;\n  let examinationDescription = event.target.formGridExaminationDescription.value;\n  let examinationFollowUp = event.target.formGridExaminationFollowUp.value;\n  let examinationAttachmentName = event.target.formGridExaminationAttachmentName.value;\n  let examinationAttachmentFormat = event.target.formGridExaminationAttachmentFormat.value;\n  let examinationAttachmentPath = event.target.formGridExaminationAttachmentPath.value;\n\n  const patientExamination = { examinationArea, examinationGeneral, examinationType, examinationMeasure, examinationValue, examinationAttachmentName, examinationAttachmentFormat, examinationAttachmentPath };\n\n  console.log(`\n    adding patient examination...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    examinationDate: ${examinationDate},\n    examinationGeneral: ${examinationGeneral},\n    examinationArea: ${examinationArea},\n    examinationType: ${examinationType},\n    examinationMeasure: ${examinationMeasure},\n    examinationValue: ${examinationValue},\n    examinationDescription: ${examinationDescription},\n    examinationFollowUp: ${examinationFollowUp},\n    examinationAttachmentName: ${examinationAttachmentName},\n    examinationAttachmentFormat: ${examinationAttachmentFormat},\n    examinationAttachmentPath: ${examinationAttachmentPath},\n    `);\n    this.setState({userAlert: \"adding patient examination...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientExamination(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{examinationDate:\"${examinationDate}\",examinationGeneral:\"${examinationGeneral}\",examinationArea:\"${examinationArea}\",examinationType:\"${examinationType}\",examinationMeasure:\"${examinationMeasure}\",examinationValue:\"${examinationValue}\",examinationDescription:\"${examinationDescription}\",examinationFollowUp:${examinationFollowUp},examinationAttachmentName:\"${examinationAttachmentName}\",examinationAttachmentFormat:\"${examinationAttachmentFormat}\",examinationAttachmentPath:\"${examinationAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientExamination._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientExamination);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientExamination})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n}\n\n\nupdatePatientHistoryHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientHistoryFormData:  \", event.target.formGridHistoryTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let historyType = event.target.formGridHistoryType.value;\n  let historyDate = event.target.formGridHistoryDate.value;\n  let historyTitle = event.target.formGridHistoryTitle.value;\n  let historyDescription = event.target.formGridHistoryDescription.value;\n  let historyAttachmentName = event.target.formGridHistoryAttachmentName.value;\n  let historyAttachmentFormat = event.target.formGridHistoryAttachmentFormat.value;\n  let historyAttachmentPath = event.target.formGridHistoryAttachmentPath.value;\n\n  const patientHistory = { historyType, historyDate, historyTitle, historyDescription, historyAttachmentName, historyAttachmentFormat, historyAttachmentPath };\n  console.log(`\n    adding patient history...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    historyType: ${historyType},\n    historyDate: ${historyDate},\n    historyTitle: ${historyTitle},\n    historyDescription: ${historyDescription},\n    historyAttachmentName: ${historyAttachmentName},\n    historyAttachmentFormat: ${historyAttachmentFormat},\n    historyAttachmentPath: ${historyAttachmentPath},\n    `);\n    this.setState({userAlert: \"adding patient history...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientHistory(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{historyTitle:\"${historyTitle}\",historyType:\"${historyType}\",historyDate:\"${historyDate}\",historyDescription:\"${historyDescription}\",historyAttachmentName:\"${historyAttachmentName}\",historyAttachmentFormat:\"${historyAttachmentFormat}\",historyAttachmentPath:\"${historyAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientHistory._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientHistory);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientHistory})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n}\n\n\nupdatePatientAllergiesHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientAllergiesFormData:  \", event.target.formGridAllergiesTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let allergiesTitle = event.target.formGridAllergiesTitle.value;\n  let allergiesType = undefined;\n  if (event.target.formGridAllergiesTypeSelect === \"select\") {\n    allergiesType = event.target.formGridAllergiesType.value;\n  } else {\n    allergiesType = event.target.formGridAllergiesTypeSelect.value;\n  }\n  let allergiesDescription = event.target.formGridAllergiesDescription.value;\n  let allergiesAttachmentName = event.target.formGridAllergiesAttachmentName.value;\n  let allergiesAttachmentFormat = event.target.formGridAllergiesAttachmentFormat.value;\n  let allergiesAttachmentPath = event.target.formGridAllergiesAttachmentPath.value;\n\n  const patientAllergies = { allergiesTitle, allergiesType, allergiesDescription, allergiesAttachmentName, allergiesAttachmentFormat, allergiesAttachmentPath };\n\n  console.log(`\n    adding patient allergies...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    allergiesTitle: ${allergiesTitle},\n    allergiesType: ${allergiesType},\n    allergiesDescription: ${allergiesDescription},\n    allergiesAttachmentName: ${allergiesAttachmentName},\n    allergiesAttachmentFormat: ${allergiesAttachmentFormat},\n    allergiesAttachmentPath: ${allergiesAttachmentPath},\n    `);\n    this.setState({userAlert: \"adding patient allergies...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientAllergies(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{allergiesTitle:\"${allergiesTitle}\",allergiesType:\"${allergiesType}\", allergiesDescription:\"${allergiesDescription}\",allergiesAttachmentName:\"${allergiesAttachmentName}\",allergiesAttachmentFormat:\"${allergiesAttachmentFormat}\",allergiesAttachmentPath:\"${allergiesAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientAllergies._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientAllergies);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientAllergies})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n\n}\n\n\nupdatePatientMedicationHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientMedicationFormData:  \", event.target.formGridMedicationTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let medicationTitle = event.target.formGridMedicationTitle.value;\n  let medicationType = event.target.formGridMedicationType.value;\n  let medicationDescription = event.target.formGridMedicationDescription.value;\n  let medicationAttachmentName = event.target.formGridMedicationAttachmentName.value;\n  let medicationAttachmentFormat = event.target.formGridMedicationAttachmentFormat.value;\n  let medicationAttachmentPath = event.target.formGridMedicationAttachmentPath.value;\n\n  const patientMedication = { medicationTitle, medicationType, medicationDescription, medicationAttachmentName, medicationAttachmentFormat, medicationAttachmentPath };\n\n  console.log(`\n    adding patient medication...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    medicationTitle: ${medicationTitle},\n    medicationType: ${medicationType},\n    medicationDescription: ${medicationDescription},\n    medicationAttachmentName: ${medicationAttachmentName},\n    medicationAttachmentFormat: ${medicationAttachmentFormat},\n    medicationAttachmentPath: ${medicationAttachmentPath},\n    `);\n    this.setState({userAlert: \"adding patient medication...\"});\n\n    const requestBody = {\n      query:`\n      mutation {updatePatientMedication(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{medicationTitle:\"${medicationTitle}\",medicationType:\"${medicationType}\" medicationDescription:\"${medicationDescription}\",medicationAttachmentName:\"${medicationAttachmentName}\",medicationAttachmentFormat:\"${medicationAttachmentFormat}\",medicationAttachmentPath:\"${medicationAttachmentPath}\"})\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientMedication._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientMedication);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientMedication})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n}\n\n\nupdatePatientInvestigationHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientInvestigationFormData:  \", event.target.formGridInvestigationTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let investigationDate = event.target.formGridInvestigationDate.value;\n  let investigationTitle = event.target.formGridInvestigationTitle.value;\n  let investigationType = undefined;\n  if (event.target.formGridInvestigationTypeSelect === \"select\") {\n    investigationType = event.target.formGridInvestigationType.value;\n  } else {\n    investigationType = event.target.formGridInvestigationTypeSelect.value;\n  }\n  let investigationDescription = event.target.formGridInvestigationDescription.value;\n  let investigationAttachmentName = event.target.formGridInvestigationAttachmentName.value;\n  let investigationAttachmentFormat = event.target.formGridInvestigationAttachmentFormat.value;\n  let investigationAttachmentPath = event.target.formGridInvestigationAttachmentPath.value;\n\n  const patientInvestigation = { investigationDate, investigationTitle, investigationType, investigationDescription, investigationAttachmentName, investigationAttachmentFormat, investigationAttachmentPath };\n\n  console.log(`\n    adding patient investigation...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    investigationDate: ${investigationDate},\n    investigationTitle: ${investigationTitle},\n    investigationType: ${investigationType},\n    investigationDescription: ${investigationDescription},\n    investigationAttachmentName: ${investigationAttachmentName},\n    investigationAttachmentFormat: ${investigationAttachmentFormat},\n    investigationAttachmentPath: ${investigationAttachmentPath},\n    `);\n    this.setState({userAlert: \"adding patient investigation...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientInvestigation(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{investigationDate:\"${investigationDate}\",investigationTitle:\"${investigationTitle}\",investigationType:\"${investigationType}\",investigationDescription:\"${investigationDescription}\",investigationAttachmentName:\"${investigationAttachmentName}\",investigationAttachmentFormat:\"${investigationAttachmentFormat}\",investigationAttachmentPath:\"${investigationAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientInvestigation._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientInvestigation);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientInvestigation})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n}\n\n\nupdatePatientDiagnosisHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientDiagnosisFormData:  \", event.target.formGridDiagnosisTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let diagnosisDate = event.target.formGridDiagnosisDate.value;\n  let diagnosisTitle = event.target.formGridDiagnosisTitle.value;\n  let diagnosisType = event.target.formGridDiagnosisType.value;\n  let diagnosisDescription = event.target.formGridDiagnosisDescription.value;\n  let diagnosisAttachmentName = event.target.formGridDiagnosisAttachmentName.value;\n  let diagnosisAttachmentFormat = event.target.formGridDiagnosisAttachmentFormat.value;\n  let diagnosisAttachmentPath = event.target.formGridDiagnosisAttachmentPath.value;\n\n  const patientDiagnosis = { diagnosisDate, diagnosisTitle, diagnosisType, diagnosisDescription, diagnosisAttachmentName, diagnosisAttachmentFormat, diagnosisAttachmentPath };\n\n  console.log(`\n    adding patient diagnosis...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    diagnosisDate: ${diagnosisDate},\n    diagnosisTitle: ${diagnosisTitle},\n    diagnosisType: ${diagnosisType},\n    diagnosisDescription: ${diagnosisDescription},\n    diagnosisAttachmentName: ${diagnosisAttachmentName},\n    diagnosisAttachmentFormat: ${diagnosisAttachmentFormat},\n    diagnosisAttachmentPath: ${diagnosisAttachmentPath},\n    `);\n    this.setState({userAlert: \"adding patient diagnosis...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientDiagnosis(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{diagnosisDate:\"${diagnosisDate}\",diagnosisTitle:\"${diagnosisTitle}\",diagnosisType:\"${diagnosisType}\",diagnosisDescription:\"${diagnosisDescription}\",diagnosisAttachmentName:\"${diagnosisAttachmentName}\",diagnosisAttachmentFormat:\"${diagnosisAttachmentFormat}\",diagnosisAttachmentPath:\"${diagnosisAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientDiagnosis._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientDiagnosis);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientDiagnosis})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n}\n\n\nupdatePatientTreatmentHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientTreatmentFormData:  \", event.target.formGridTreatmentTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let treatmentDate = event.target.formGridTreatmentDate.value;\n  let treatmentTitle = event.target.formGridTreatmentTitle.value;\n  let treatmentDescription = event.target.formGridTreatmentDescription.value;\n  let treatmentDose = event.target.formGridTreatmentDose.value;\n  let treatmentFrequency = event.target.formGridTreatmentFrequency.value;\n  let treatmentType = undefined;\n  if (event.target.formGridInvestigationTypeSelect === \"select\") {\n    treatmentType = event.target.formGridTreatmentType.value;\n  } else {\n    treatmentType = event.target.formGridTreatmentTypeSelect.value;\n  }\n  let treatmentAttachmentName = event.target.formGridTreatmentAttachmentName.value;\n  let treatmentAttachmentFormat = event.target.formGridTreatmentAttachmentFormat.value;\n  let treatmentAttachmentPath = event.target.formGridTreatmentAttachmentPath.value;\n\n  const patientTreatment = { treatmentDate, treatmentTitle, treatmentDescription, treatmentDose, treatmentFrequency, treatmentType, treatmentAttachmentName, treatmentAttachmentFormat, treatmentAttachmentPath };\n\n  console.log(`\n    adding patient treatment...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    treatmentDate: ${treatmentDate},\n    treatmentTitle: ${treatmentTitle},\n    treatmentDescription: ${treatmentDescription},\n    treatmentDose: ${treatmentDose},\n    treatmentFrequency: ${treatmentFrequency},\n    treatmentType: ${treatmentType},\n    treatmentAttachmentName: ${treatmentAttachmentName},\n    treatmentAttachmentFormat: ${treatmentAttachmentFormat},\n    treatmentAttachmentPath: ${treatmentAttachmentPath},\n    `);\n    this.setState({userAlert: \"adding patient treatment...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientTreatment(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{treatmentDate:\"${treatmentDate}\",treatmentTitle:\"${treatmentTitle}\",treatmentType:\"${treatmentType}\",treatmentDescription:\"${treatmentDescription}\",treatmentDose:\"${treatmentDose}\",treatmentFrequency:\"${treatmentFrequency}\",treatmentAttachmentName:\"${treatmentAttachmentName}\",treatmentAttachmentFormat:\"${treatmentAttachmentFormat}\",treatmentAttachmentPath:\"${treatmentAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `}\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientTreatment._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientTreatment);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientTreatment})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n}\n\n\n\nupdatePatientBillingHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientBillingFormData:  \", event.target.formGridBillingTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let billingDate = event.target.formGridBillingDate.value;\n  let billingTitle = event.target.formGridBillingTitle.value;\n  let billingType = event.target.formGridBillingType.value;\n  let billingDescription = event.target.formGridBillingDescription.value;\n  let billingAmount = event.target.formGridBillingAmount.value;\n  let billingPaid = event.target.formGridBillingPaid.value;\n  let billingNotes = event.target.formGridBillingNotes.value;\n  let billingAttachmentName = event.target.formGridBillingAttachmentName.value;\n  let billingAttachmentFormat = event.target.formGridBillingAttachmentFormat.value;\n  let billingAttachmentPath = event.target.formGridBillingAttachmentPath.value;\n\n  const patientBilling = { billingDate, billingTitle, billingType, billingDescription, billingAmount, billingPaid, billingNotes, billingAttachmentName, billingAttachmentFormat, billingAttachmentPath };\n\n  console.log(`\n    adding patient billing...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    billingDate: ${billingDate},\n    billingTitle: ${billingTitle},\n    billingType: ${billingType},\n    billingDescription: ${billingDescription},\n    billingAmount: ${billingAmount},\n    billingPaid: ${billingPaid},\n    billingNotes: ${billingNotes},\n    billingAttachmentName: ${billingAttachmentName},\n    billingAttachmentFormat: ${billingAttachmentFormat},\n    billingAttachmentPath: ${billingAttachmentPath},\n    `);\n    this.setState({userAlert: \"adding patient billing...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientBilling(userId:\\\"${userId}\\\", patientId:\\\"${selectedPatientId}\\\",patientInput:{billingDate:\\\"${billingDate}\\\",billingTitle:\\\"${billingTitle}\\\",billingType:\\\"${billingType}\\\",billingDescription:\\\"${billingDescription}\\\",billingAmount:${billingAmount},billingPaid:${billingPaid},billingNotes:\\\"${billingNotes}\\\",billingAttachmentName:\\\"${billingAttachmentName}\\\",billingAttachmentFormat:\\\"${billingAttachmentFormat}\\\",billingAttachmentPath:\\\"${billingAttachmentPath}\\\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientBilling._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientBilling);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientBilling})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n\n}\n\nupdatePatientAttachmentHandler = (event) => {\n\n    const token = this.context.token;\n    const userId = this.context.userId;\n    let selectedPatientId = this.context.selectedPatient._id;\n\n    // if(this.context.user.role !== 'admin') {\n    //   console.log(\"No edit permission!!\");\n    //   return;\n    // }\n\n    console.log(`\n        UpdatePatientAttachmentFormData:\n        ${event.target.formGridPatientAttachmentName.value}\n      `);\n\n    this.setState({ updating: false , patientUpdateField: null });\n\n    let attachmentName = event.target.formGridPatientAttachmentName.value;\n    let attachmentFormat = event.target.formGridPatientAttachmentFormat.value;\n    let attachmentPath = event.target.formGridPatientAttachmentPath.value;\n\n    if (\n      attachmentName.trim().length === 0 ||\n      attachmentFormat.trim().length === 0 ||\n      attachmentPath.trim().length === 0\n    ) {\n      console.log(\"blank fields detected!!!...Please try again...\");\n      this.setState({userAlert: \"blank fields detected!!!...Please try again...\"});\n      return;\n    }\n\n    this.setState({userAlert: \"adding patient attachment\"});\n\n    const requestBody = {\n                    query:`\n                    mutation {updatePatientAttachment(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{attachmentName:\"${attachmentName}\",attachmentFormat:\"${attachmentFormat}\",attachmentPath:\"${attachmentFormat}\"})\n                    {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n            `}\n\n    fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            console.log(\"response data... \" + JSON.stringify(resData.data));\n\n            const updatedPatientId = resData.data.updatePatientAttachment._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.updatePatientAttachment);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientAttachment})\n            this.fetchPatients();\n          })\n          .catch(err => {\n            console.log(err);\n            this.setState({userAlert: err});\n          });\n\n}\n\nupdatePatientNoteHandler = (event) => {\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(`\n      UpdatePatientNoteFormData:\n      ${event.target.formGridNote.value}\n    `);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n    let note = event.target.formGridNote.value;\n\n    if (\n      note.trim().length === 0\n    ) {\n      console.log(\"Can't Submit a blank form!!!...Please try again...\");\n      this.setState({userAlert: \"Can't Submit a blank form!!!...Please try again...\"});\n      return;\n    }\n\n    this.setState({userAlert: \"adding patient note\"});\n\n    const requestBody = {\n                    query:`\n                    mutation {updatePatientNotes(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{notes:\"${note}\"})\n                    {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n            `}\n\n    fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            console.log(\"response data... \" + JSON.stringify(resData.data));\n\n            const updatedPatientId = resData.data.updatePatientNotes._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.updatePatientNotes);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientNotes})\n            this.fetchPatients();\n          })\n          .catch(err => {\n            console.log(err);\n            this.setState({userAlert: err});\n          });\n\n}\nupdatePatientTagHandler = (event) => {\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(`\n      UpdatePatientTagFormData:\n      ${event.target.formGridTag.value}\n    `);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n    let tag = event.target.formGridTag.value;\n\n    if (\n      tag.trim().length === 0\n    ) {\n      console.log(\"Can't Submit a blank form!!!...Please try again...\");\n      this.setState({userAlert: \"Can't Submit a blank form!!!...Please try again...\"});\n      return;\n    }\n\n    const requestBody = {\n                    query:`\n                    mutation {updatePatientTags(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{tag:\"${tag}\"})\n                    {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n            `}\n    this.setState({userAlert: \"adding patient tag\"});\n\n\n    fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            console.log(\"response data... \" + JSON.stringify(resData.data));\n\n            const updatedPatientId = resData.data.updatePatientTags._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.updatePatientTags);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientTags})\n            this.fetchPatients();\n          })\n          .catch(err => {\n            console.log(err);\n            this.setState({userAlert: err});\n          });\n\n\n}\n\n\nmodalConfirmSearchHandler = (event) => {\n  console.log(\"SearchPatientForm:  \");\n\n\n  let userId = this.context.userId;\n\n    console.log(\"SearchPatientFormData:  \", event.target.formBasicField.value);\n    this.setState({ searching: false });\n\n    let field = null;\n    let query = event.target.formBasicQuery.value;\n    if (event.target.formBasicFieldSelect.value === \"select\") {\n      field = event.target.formBasicField.value;\n    } else {\n      field = event.target.formBasicFieldSelect.value;\n    }\n\n    this.setState({\n      patientSearchField: field,\n      patientSearchQuery: query,\n    })\n\n    if (\n      field.trim().length === 0 ||\n      query.trim().length === 0\n    ) {\n      console.log(\"blank fields detected!!!...Please try again...\");\n      return;\n    }\n\n\n\n    const search = { field, query }\n    console.log(\"Searching for Patient:  \", JSON.stringify(search));\n    this.setState({userAlert: \"Searching for Patient:  \"});\n\n    const requestBody = {\n      query: `\n        query {\n          getPatientField(userId: \"${userId}\", field: \"${field}\", query: \"${query}\" )\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n    const token = this.context.token;\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n        const responseAlert = JSON.stringify(resData.data).slice(2,15);\n        this.setState({userAlert: responseAlert});\n\n        const searchPatients = resData.data.getPatientField;\n\n        this.setState({ searchPatients: searchPatients})\n        console.log(\"state.searchPatients:  \", this.state.searchPatients);\n        // this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n}\n\nmodalConfirmSearchIdHandler = (event) => {\n  console.log(\"SearchPatientIdFormData\");\n\n  let userId = this.context.userId;\n  this.setState({ searching: false });\n\n  const patientId = event.target.formBasicId.value;\n\n  const requestBody = {\n    query: `\n      query {getPatientId(userId:\\\"${userId}\\\",patientId:\\\"${patientId}\\\")\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{_id,title,time,location},consultant{date,reference{_id,name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `}\n\n  const token = this.context.token;\n\n  fetch('http://localhost:10000/graphql', {\n    method: 'POST',\n    body: JSON.stringify(requestBody),\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + token\n    }\n  })\n    .then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n      return res.json();\n    })\n    .then(resData => {\n      console.log(\"response data... \" + JSON.stringify(resData));\n      const responseAlert = JSON.stringify(resData.data).slice(2,25);\n      this.setState({userAlert: responseAlert});\n\n      const searchPatients = resData.data.getPatientId;\n\n      this.setState({ searchPatients: [searchPatients]})\n      console.log(\"state.searchPatients:  \", this.state.searchPatients);\n      // this.fetchUsers();\n    })\n    .catch(err => {\n      console.log(err);\n      this.setState({userAlert: err});\n    });\n}\n\nmodalConfirmSearchVisitHandler = (event) => {\n  console.log(\"SearchPatientVisitFormData\");\n\n  let userId = this.context.userId;\n  this.setState({ searching: false });\n\n  const requestBody = {\n    query: `\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{_id,title,time,location,date},consultant{date,reference{_id,name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `}\n\n  const token = this.context.token;\n\n  fetch('http://localhost:10000/graphql', {\n    method: 'POST',\n    body: JSON.stringify(requestBody),\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + token\n    }\n  })\n    .then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n      return res.json();\n    })\n    .then(resData => {\n      console.log(\"response data... \" + JSON.stringify(resData));\n\n      const searchPatients = resData.data.getPatientId;\n\n      this.setState({ searchPatients: searchPatients})\n      console.log(\"state.searchPatients:  \", this.state.searchPatients);\n      // this.fetchUsers();\n    })\n    .catch(err => {\n      console.log(err);\n      this.setState({userAlert: err});\n    });\n\n}\n\nmodalConfirmSearchNameHandler = (event) => {\n  console.log(\"SearchPatientNameFormData:\", event.target.formBasicName.value);\n\n  let userId = this.context.userId;\n  this.setState({ searching: false });\n\n  let patients = this.state.patients;\n  const regex = new RegExp(event.target.formBasicName.value,\"i\");\n  console.log(`\n    regex: ${regex},\n    `);\n    let result = patients.filter(patient => patient.name.match(regex))\n    console.log(`\n      result: ${JSON.stringify(result)}\n      `);\n\n      this.setState({ searchPatients: result})\n\n}\n\n  getPatientVisit = (event) => {\n\n    const selectedPatient = this.state.selectedPatient;\n    event.preventDefault();\n    console.log(`\n        getUserVisit function:\n        selectedPatient.consultant: ${JSON.stringify(selectedPatient.consultant)},\n        selectedPatient.complaints: ${JSON.stringify(selectedPatient.complaints)},\n        visitDate: ${new Date(event.target.formBasicVisitDate.value)},\n        complaintDate: ${new Date(1580515200*1000)},\n      `);\n\n    let visitDate = new Date(event.target.formBasicVisitDate.value).toISOString().substring(0, 10);\n    let visitSurveys = selectedPatient.surveys.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    let visitConsultants = selectedPatient.consultant.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    let visitComplaints = selectedPatient.complaints.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    // let visitSurveys = selectedPatient.surveys.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString() === visitDate);\n    let visitVitals = selectedPatient.vitals.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    let visitExaminations = selectedPatient.examination.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    let visitHistory = selectedPatient.history.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    let visitInvestigations = selectedPatient.investigation.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    let visitDiagnosis = selectedPatient.diagnosis.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    let visitTreatments = selectedPatient.treatment.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    let visitBilling = selectedPatient.billing.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n\n      const visit = {\n        date: visitDate,\n        patientName: this.context.selectedPatient.name,\n        consultant: visitConsultants,\n        complaint: visitComplaints,\n        examination: visitExaminations,\n        survey: visitSurveys,\n        vitals: visitVitals,\n        history: visitHistory,\n        investigation: visitInvestigations,\n        diagnosis: visitDiagnosis,\n        treatment: visitTreatments,\n        billing: visitBilling,\n      };\n\n      console.log(`\n        visit: ${JSON.stringify(visit)},\n        `);\n        this.context.visit = visit;\n        this.setState({visit: visit});\n\n  }\n\n\n  modalCancelHandler = () => {\n    this.setState({ creating: false, updating: false, searching: false, selectedPatient: null });\n  };\n\n\n  fetchPatients() {\n    console.log(\"fetch patients function:  \");\n    const userId = this.context.userId;\n    const token = this.context.token;\n\n    this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n          query {patients(userId:\"${userId}\")\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{_id,title,time,location,date},consultant{date,reference{_id,name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n        `\n    };\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"resData\", resData);\n        const patients = resData.data.patients;\n        console.log(patients);\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({userAlert: responseAlert});\n\n        this.context.patients = this.state.patients;\n        if (this.isActive) {\n          this.setState({ patients: patients, isLoading: false });\n        }\n\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n        if (this.isActive) {\n          this.setState({ isLoading: false });\n        }\n      });\n  }\n\n  fetchPatientsAsc = () => {\n    console.log(\"fetch patients function:  \");\n    const userId = this.context.userId;\n    const token = this.context.token;\n\n    // this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n          query {patientsNameAsc(userId:\"${userId}\")\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{_id,title,time,location,date},consultant{date,reference{_id,name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n        `\n    };\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"resData\", resData);\n        const patients = resData.data.patientsNameAsc;\n        console.log(patients);\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({userAlert: responseAlert});\n\n        this.context.patients = patients;\n        this.setState({ patients: patients});\n        // if (this.isActive) {\n        //   this.setState({ patients: patients, isLoading: false });\n        // }\n\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n        // if (this.isActive) {\n        //   this.setState({ isLoading: false });\n        // }\n      });\n  }\n\n  fetchPatientsDesc = () => {\n    console.log(\"fetch patients function:  \");\n    const userId = this.context.userId;\n    const token = this.context.token;\n\n    // this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n          query {patientsNameDesc(userId:\"${userId}\")\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{_id,title,time,location,date},consultant{date,reference{_id,name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n        `\n    };\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"resData\", resData);\n        const patients = resData.data.patientsNameDesc;\n        console.log(patients);\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({userAlert: responseAlert});\n\n        this.context.patients = patients\n        // if (this.isActive) {\n        //   this.setState({ patients: patients, isLoading: false });\n        // }\n        this.setState({ patients: patients});\n\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n        // if (this.isActive) {\n        //   this.setState({ isLoading: false });\n        // }\n      });\n  }\n\n\n  modalDeleteHandler = () => {\n    console.log(\"deleting patient...selectedPatient:  \", this.context.selectedPatient);\n\n    const selectedPatientId = this.context.selectedPatient._id;\n    const userId = this.context.selectedUser._id;\n\n    if(this.context.user.role !== 'admin') {\n      console.log(\"Not the Admin! No edit permission!!\");\n    }\n\n    this.setState({deleting: true});\n\n\n    const requestBody = {\n      query: `\n          mutation {deletePatient(userId:\"${userId}\",patientId:\"${selectedPatientId}\")\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n        `\n    };\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        let deletedPatient = resData.data.deletePatient;\n        console.log(deletedPatient);\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({userAlert: responseAlert});\n\n        let deletedPatientId = deletedPatient._id;\n        deletedPatient = this.state.patients.find(e => e._id === deletedPatientId);\n        const deletedPatientPos = this.state.patients.indexOf(deletedPatient);\n        const slicedArray = this.state.patients.splice(deletedPatientPos, 1);\n        console.log(\"deletedPatient:  \", JSON.stringify(deletedPatient),\"  deletedUserPos:  \", deletedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.setState({ deleting: false });\n\n        this.fetchPatients();\n\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n        if (this.isActive) {\n          this.setState({ deleting: false });\n        }\n      });\n  }\n\n\n  deletePatientInsuranceItem = (props) => {\n\n    let token = this.context.token;\n    let userId = this.context.userId;\n    let patientId = this.state.selectedPatient._id;\n\n    console.log(`\n      delete patient insurance item:\n      props: ${JSON.stringify(props)},\n      token: ${token},\n      userId: ${userId},\n      patientId: ${patientId},\n      `);\n\n      const requestBody = {\n        query: `\n         mutation {deletePatientInsurance (userId:\\\"${userId}\\\", patientId:\\\"${patientId}\\\",insuranceCompany:\\\"${props.company}\\\",insuranceNumber:\"${props.number}\")\n         {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `};\n\n          fetch('http://localhost:10000/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n              'Content-Type': 'application/json',\n              Authorization: 'Bearer ' + token\n            }\n          })\n            .then(res => {\n              if (res.status !== 200 && res.status !== 201) {\n                throw new Error('Failed!');\n              }\n              return res.json();\n            })\n            .then(resData => {\n              let deletedPatient = resData.data.deletePatientInsurance;\n              console.log(deletedPatient);\n\n              const updatedPatientId = resData.data.deletePatientInsurance._id;\n              const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n              const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n              const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n              console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n              this.state.patients.push(resData.data.deletePatientInsurance);\n              this.context.patients = this.state.patients;\n              const responseAlert = JSON.stringify(resData.data).slice(2,25);\n              this.setState({ userAlert: responseAlert})\n              // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientInsurance})\n              this.fetchPatients();\n\n            })\n            .catch(err => {\n              console.log(err);\n            });\n\n  }\n\n  deletePatientConsultantItem = (props) => {\n\n    let token = this.context.token;\n    let userId = this.context.userId;\n    let patientId = this.state.selectedPatient._id;\n    let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n    console.log(`\n      delete patient consultant item:\n      props: ${JSON.stringify(props)},\n      token: ${token},\n      userId: ${userId},\n      patientId: ${patientId},\n      consultant date: ${date},\n      `);\n\n      const requestBody = {\n        query: `\n         mutation {deletePatientConsultant (userId:\\\"${userId}\\\", patientId:\\\"${patientId}\\\",consultantId:\\\"${props.reference.id}\\\",consultantDate:\\\"${date}\\\")\n         {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `};\n\n          fetch('http://localhost:10000/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n              'Content-Type': 'application/json',\n              Authorization: 'Bearer ' + token\n            }\n          })\n            .then(res => {\n              if (res.status !== 200 && res.status !== 201) {\n                throw new Error('Failed!');\n              }\n              return res.json();\n            })\n            .then(resData => {\n              let deletedPatient = resData.data.deletePatientConsultant;\n              console.log(deletedPatient);\n\n              const updatedPatientId = resData.data.deletePatientConsultant._id;\n              const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n              const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n              const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n              console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n              this.state.patients.push(resData.data.deletePatientConsultant);\n              this.context.patients = this.state.patients;\n              const responseAlert = JSON.stringify(resData.data).slice(2,25);\n              this.setState({ userAlert: responseAlert})\n              // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientConsultant})\n              this.fetchPatients();\n\n            })\n            .catch(err => {\n              console.log(err);\n            });\n}\n\ndeletePatientNextOfKinItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n\n  console.log(`\n    delete patient nextOfKin item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientNextOfKin (userId:\\\"${userId}\\\", patientId:\\\"${patientId}\\\",nextOfKinName:\\\"${props.name}\\\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientNextOfKin;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientNextOfKin._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientNextOfKin);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientNextOfKin})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientComplaintItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n  let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n  console.log(`\n    delete patient Complaint item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    complaint date: ${date},\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientComplaint (userId:\\\"${userId}\\\", patientId:\\\"${patientId}\\\",complaintTitle:\\\"${props.title}\\\",complaintDate:\\\"${date}\\\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientComplaint;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientComplaint._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientComplaint);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientComplaint})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientSurveyItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n  let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n  console.log(`\n    delete patient Survey item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    survey date: ${date}\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientSurvey (userId:\\\"${userId}\\\", patientId:\\\"${patientId}\\\",surveyTitle:\\\"${props.title}\\\",surveyDate:\\\"${date}\\\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientSurvey;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientSurvey._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientSurvey);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientSurvey})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientVitalsItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n  let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n  console.log(`\n    delete patient Vitals item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    vitals date: ${date},\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientVitals (userId:\\\"${userId}\\\", patientId:\\\"${patientId}\\\",vitalsDate:\\\"${date}\\\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientVitals;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientVitals._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientVitals);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientVitals})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientExaminationItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n  let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n  console.log(`\n    delete patient Examination item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    examination date: ${date},\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientExamination (userId:\\\"${userId}\\\", patientId:\\\"${patientId}\\\",examinationType:\\\"${props.type}\\\",examinationDate:\\\"${date}\\\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientExamination;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientExamination._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientExamination);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientExamination})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientHistoryItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n  let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n  console.log(`\n    delete patient History item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    history date: ${date},\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientHistory (userId:\\\"${userId}\\\", patientId:\\\"${patientId}\\\",historyTitle:\\\"${props.title}\\\",historyDate:\\\"${date}\\\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientHistory;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientHistory._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientHistory);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientHistory})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientAllergiesItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n\n  console.log(`\n    delete patient Allergies item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientAllergies (userId:\\\"${userId}\\\", patientId:\\\"${patientId}\\\",allergiesTitle:\\\"${props.title}\\\",allergiesType:\\\"${props.type}\\\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientAllergies;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientAllergies._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientAllergies);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientAllergies})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientMedicationItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n\n  console.log(`\n    delete patient Medication item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientMedication (userId:\\\"${userId}\\\", patientId:\\\"${patientId}\\\",medicationTitle:\\\"${props.title}\\\",medicationType:\\\"${props.type}\\\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientMedication;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientMedication._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientMedication);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientMedication})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientInvestigationItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n  let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n  console.log(`\n    delete patient Investigation item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    investigation date: ${date},\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientInvestigation (userId:\\\"${userId}\\\", patientId:\\\"${patientId}\\\",investigationDate:\\\"${date}\\\",investigationTitle:\\\"${props.title}\\\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientInvestigation;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientInvestigation._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientInvestigation);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientInvestigation})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientDiagnosisItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n  let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n  console.log(`\n    delete patient Diagnosis item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    diagnosis date: ${date}\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientDiagnosis (userId:\\\"${userId}\\\",patientId:\\\"${patientId}\\\",diagnosisDate:\\\"${date}\\\",diagnosisTitle:\\\"${props.title}\\\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientDiagnosis;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientDiagnosis._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientDiagnosis);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientDiagnosis})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientTreatmentItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n  let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n  console.log(`\n    delete patient Treatment item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    treatment date: ${date},\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientTreatment (userId:\\\"${userId}\\\", patientId:\\\"${patientId}\\\",treatmentDate:\\\"${date}\\\",treatmentTitle:\\\"${props.title}\\\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientTreatment;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientTreatment._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientTreatment);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientTreatment})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientBillingItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n  let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n  console.log(`\n    delete patient Billing item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    billing date: ${date},\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientBilling (userId:\\\"${userId}\\\", patientId:\\\"${patientId}\\\",billingDate:\\\"${date}\\\",billingTitle:\\\"${props.title}\\\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientBilling;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientBilling._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientBilling);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientBilling})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientAttachmentItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n\n  console.log(`\n    delete patient Attachment item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientAttachment (userId:\\\"${userId}\\\", patientId:\\\"${patientId}\\\",attachmentName:\\\"${props.name}\\\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientAttachment;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientAttachment._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientAttachment);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientAttachment})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientNoteItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n\n  console.log(`\n    delete patient Note item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    `);\n\n    const requestBody = {\n      query: `\n\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientNextOfKin;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientNextOfKin._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientNextOfKin);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientNextOfKin})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientTagItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n\n  console.log(`\n    delete patient Tag item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    `);\n\n    const requestBody = {\n      query: `\n\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientNextOfKin;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientNextOfKin._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientNextOfKin);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientNextOfKin})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\n\n  updatePatientSpecial (event) {\n\n    console.log(\"special field to update:  \", event.target.value);\n    const field = event.target.value;\n    this.setState({ patientUpdateField: field});\n\n  }\n\n\n  showDetailHandler = patientId => {\n\n    this.setState(prevState => {\n      const selectedPatient = prevState.patients.find(e => e._id === patientId);\n      this.context.selectedPatient = selectedPatient;\n      this.context.selectedPatientId = selectedPatient._id;\n      console.log(\"selectedPatient:  \", selectedPatient);\n      return { selectedPatient: selectedPatient };\n    });\n  };\n\n\n  componentWillUnmount() {\n    this.isActive = false;\n  }\n\n  render() {\n    return (\n\n    <React.Fragment>\n\n    <Accordion>\n\n    <Row>\n    <Col md={3} className=\"MasterCol1\">\n\n    <AlertBox\n          authUserId={this.context.userId}\n          alert={this.state.userAlert}\n        />\n      <SidebarPage/>\n    </Col>\n\n    <Col md={9} className=\"MasterCol2\">\n    <Container className=\"containerCombinedDetail\">\n    <Tabs defaultActiveKey=\"\" id=\"uncontrolled-tab-example\">\n    <Tab eventKey=\"\" title=\"Edit:\" disabled>\n    </Tab>\n    <Tab eventKey=\"patientDetail\" title=\"Details\">\n    {this.state.selectedPatient === null && (\n      <Button variant=\"outline-warning\" size=\"lg\">\n        Select a Patient from the Master List below\n      </Button>\n    )}\n    {this.state.isLoading === false &&\n      this.state.selectedPatient !== null\n      &&\n      (<PatientDetail\n        authUserId={this.context.userId}\n        token={this.context.token}\n        patient={this.state.selectedPatient}\n        onEdit={this.startUpdatePatientHandler}\n        canDelete={this.state.canDelete}\n        onDelete={this.modalDeleteHandler}\n        onGetVisit={this.getPatientVisit}\n        visit={this.context.visit}\n        fetchUsers={this.fetchUsers}\n        consultantDelete={this.deletePatientConsultantItem}\n        insuranceDelete={this.deletePatientInsuranceItem}\n        nextOfKinDelete={this.deletePatientNextOfKinItem}\n        complaintDelete={this.deletePatientComplaintItem}\n        surveyDelete={this.deletePatientSurveyItem}\n        vitalsDelete={this.deletePatientVitalsItem}\n        examinationDelete={this.deletePatientExaminationItem}\n        historyDelete={this.deletePatientHistoryItem}\n        allergiesDelete={this.deletePatientAllergiesItem}\n        medicationDelete={this.deletePatientMedicationItem}\n        investigationDelete={this.deletePatientInvestigationItem}\n        diagnosisDelete={this.deletePatientDiagnosisItem}\n        treatmentDelete={this.deletePatientTreatmentItem}\n        billingDelete={this.deletePatientBillingItem}\n        attachmentDelete={this.deletePatientAttachmentItem}\n        noteDelete={this.deletePatientNoteItem}\n        tagDelete={this.deletePatientTagItem}\n        />\n    )}\n    </Tab>\n\n    <Tab eventKey=\"patientCreate\" title=\"Create\">\n    <Button variant=\"outline-primary\" onClick={this.startCreatePatientHandler} >Create</Button>\n    {\n      this.state.creating && (\n        <CreatePatientForm\n        canCancel\n          canConfirm\n          onCancel={this.modalCancelHandler}\n          onConfirm={this.modalConfirmHandler}\n          confirmText=\"Confirm\"\n        />\n    )}\n    </Tab>\n\n    <Tab eventKey=\"patientEditDemographics\" title=\"Demographics\">\n    {this.state.selectedPatient === null && (\n      <Button variant=\"outline-warning\" size=\"lg\">\n        Select a Patient from the Master List below\n      </Button>\n    )}\n    {this.state.selectedPatient !== null && (\n      <Button variant=\"outline-primary\" onClick={this.startUpdatePatientHandler}>Edit Demographics</Button>\n    )}\n    {this.state.updating &&\n      this.state.selectedPatient !== null\n      && (\n      <UpdatePatientForm\n      authUserId={this.context.userId}\n      canCancel\n        canConfirm\n        onCancel={this.modalCancelHandler}\n        onConfirm={this.modalConfirmUpdateHandler}\n        confirmText=\"Confirm\"\n        patient={this.state.selectedPatient}\n      />\n    )}\n    </Tab>\n\n    <Tab eventKey=\"patientEditField\" title=\"Single Field\">\n    {this.state.selectedPatient === null && (\n      <Button variant=\"outline-warning\" size=\"lg\">\n        Select a Patient from the Master List below\n      </Button>\n    )}\n    {this.state.selectedPatient !== null && (\n      <Button variant=\"outline-primary\" onClick={this.startUpdatePatientHandler}>Edit Field</Button>\n    )}\n    {this.state.updating &&\n      this.state.selectedPatient !== null\n      && (\n        <UpdatePatientFieldForm\n          authUserId={this.context.userId}\n          canCancel\n          canConfirm\n          onCancel={this.modalCancelHandler}\n          onConfirm={this.modalConfirmUpdateFieldHandler}\n          confirmText=\"Confirm\"\n          patient={this.state.selectedPatient}\n        />\n    )}\n    </Tab>\n\n    <Tab eventKey=\"patientEditConsultant\" title=\"Consultant\">\n    {this.state.selectedPatient === null && (\n      <Button variant=\"outline-warning\" size=\"lg\">\n        Select a Patient from the Master List below\n      </Button>\n    )}\n    {this.state.selectedPatient !== null && (\n      <Button variant=\"outline-primary\" value='consultant' onClick={this.updatePatientSpecial.bind(this)}>Add Consultant</Button>\n    )}\n    {this.state.patientUpdateField === 'consultant' &&\n    this.state.selectedPatient !== null\n    && (\n      <UpdatePatientConsultantForm\n      authUserId={this.context.userId}\n      canCancel\n        canConfirm\n        onCancel={this.modalCancelHandler}\n        onConfirm={this.updatePatientConsultantHandler}\n        confirmText=\"Confirm\"\n        consultant={this.context.selectedUser}\n      />\n    )}\n    {this.state.patientUpdateField === 'consultant' &&\n    this.state.selectedPatient !== null &&\n    (\n      <Row>\n      <p>Add Consultant: {this.context.selectedUser.name}</p>\n      <p> To Paitient: {this.state.selectedPatient.name} ??</p>\n      <hr/>\n      </Row>\n    )}\n    {this.state.patientUpdateField === 'consultant' &&\n    this.state.selectedPatient !== null &&\n    (\n      <Row>\n      <Button variant=\"outline-warning\" size=\"lg\">\n        Select a doctor from the Staff page\n      </Button>\n      </Row>\n    )}\n    </Tab>\n    <Tab eventKey=\"patientEditInsurance\" title=\"Insurance\">\n    {this.state.selectedPatient === null && (\n      <Button variant=\"outline-warning\" size=\"lg\">\n        Select a Patient from the Master List below\n      </Button>\n    )}\n    {this.state.selectedPatient !== null && (\n      <Button variant=\"outline-primary\" value='insurance' onClick={this.updatePatientSpecial.bind(this)}>Add Insurance</Button>\n    )}\n    {this.state.patientUpdateField === 'insurance' &&\n    this.state.selectedPatient !== null\n    && (\n      <UpdatePatientInsuranceForm\n      authUserId={this.context.userId}\n      canCancel\n        canConfirm\n        onCancel={this.modalCancelHandler}\n        onConfirm={this.updatePatientInsuranceHandler}\n        confirmText=\"Confirm\"\n        patient={this.state.selectedPatient}\n      />\n    )}\n    </Tab>\n    <Tab eventKey=\"patientEditNextOfKin\" title=\"NextOfKin\">\n    {this.state.selectedPatient === null && (\n      <Button variant=\"outline-warning\" size=\"lg\">\n        Select a Patient from the Master List below\n      </Button>\n    )}\n    {this.state.selectedPatient !== null && (\n      <Button variant=\"outline-primary\" value='nextOfKin' onClick={this.updatePatientSpecial.bind(this)}>Add NextOfKin</Button>\n    )}\n    {this.state.patientUpdateField === 'nextOfKin' &&\n    this.state.selectedPatient !== null\n    && (\n      <UpdatePatientNextOfKinForm\n            authUserId={this.context.userId}\n            canCancel\n              canConfirm\n              onCancel={this.modalCancelHandler}\n              onConfirm={this.updatePatientNextOfKinHandler}\n              confirmText=\"Confirm\"\n              patient={this.state.selectedPatient}\n            />\n    )}\n    </Tab>\n    <Tab eventKey=\"patientEditComplaint\" title=\"Complaint\">\n    {this.state.selectedPatient === null && (\n      <Button variant=\"outline-warning\" size=\"lg\">\n        Select a Patient from the Master List below\n      </Button>\n    )}\n    {this.state.selectedPatient !== null && (\n      <Button variant=\"outline-primary\" value='complaint' onClick={this.updatePatientSpecial.bind(this)}>Add Complaint</Button>\n    )}\n    {this.state.patientUpdateField === 'complaint' &&\n    this.state.selectedPatient !== null\n    && (\n      <UpdatePatientComplaintForm\n            authUserId={this.context.userId}\n            canCancel\n              canConfirm\n              onCancel={this.modalCancelHandler}\n              onConfirm={this.updatePatientComplaintHandler}\n              confirmText=\"Confirm\"\n              patient={this.state.selectedPatient}\n            />\n    )}\n    </Tab>\n    <Tab eventKey=\"patientEditSurvey\" title=\"Survey\">\n    {this.state.selectedPatient === null && (\n      <Button variant=\"outline-warning\" size=\"lg\">\n        Select a Patient from the Master List below\n      </Button>\n    )}\n    {this.state.selectedPatient !== null && (\n      <Button variant=\"outline-primary\" value='survey' onClick={this.updatePatientSpecial.bind(this)}>Add Survey</Button>\n    )}\n    {this.state.patientUpdateField === 'survey' &&\n    this.state.selectedPatient !== null\n    && (\n      <UpdatePatientSurveyForm\n            authUserId={this.context.userId}\n            canCancel\n              canConfirm\n              onCancel={this.modalCancelHandler}\n              onConfirm={this.updatePatientSurveyHandler}\n              confirmText=\"Confirm\"\n              patient={this.state.selectedPatient}\n            />\n    )}\n    </Tab>\n    <Tab eventKey=\"patientEditVitals\" title=\"Vitals\">\n    {this.state.selectedPatient === null && (\n      <Button variant=\"outline-warning\" size=\"lg\">\n        Select a Patient from the Master List below\n      </Button>\n    )}\n    {this.state.selectedPatient !== null && (\n      <Button variant=\"outline-primary\" value='vitals' onClick={this.updatePatientSpecial.bind(this)}>Add Vitals</Button>\n    )}\n    {this.state.patientUpdateField === 'vitals' &&\n    this.state.selectedPatient !== null\n    && (\n      <UpdatePatientVitalsForm\n            authUserId={this.context.userId}\n            canCancel\n              canConfirm\n              onCancel={this.modalCancelHandler}\n              onConfirm={this.updatePatientVitalsHandler}\n              confirmText=\"Confirm\"\n              patient={this.state.selectedPatient}\n            />\n    )}\n    </Tab>\n    <Tab eventKey=\"patientEditExamination\" title=\"Examination\">\n    {this.state.selectedPatient === null && (\n      <Button variant=\"outline-warning\" size=\"lg\">\n        Select a Patient from the Master List below\n      </Button>\n    )}\n    {this.state.selectedPatient !== null && (\n      <Button variant=\"outline-primary\" value='examintion' onClick={this.updatePatientSpecial.bind(this)}>Add Examination</Button>\n    )}\n    {this.state.patientUpdateField === 'examintion' &&\n    this.state.selectedPatient !== null\n    && (\n      <UpdatePatientExaminationForm\n            authUserId={this.context.userId}\n            canCancel\n              canConfirm\n              onCancel={this.modalCancelHandler}\n              onConfirm={this.updatePatientExaminationHandler}\n              confirmText=\"Confirm\"\n              patient={this.state.selectedPatient}\n            />\n    )}\n    </Tab>\n    <Tab eventKey=\"patientEditHistory\" title=\"History\">\n    {this.state.selectedPatient === null && (\n      <Button variant=\"outline-warning\" size=\"lg\">\n        Select a Patient from the Master List below\n      </Button>\n    )}\n    {this.state.selectedPatient !== null && (\n      <Button variant=\"outline-primary\" value='history' onClick={this.updatePatientSpecial.bind(this)}>Add History</Button>\n    )}\n    {this.state.patientUpdateField === 'history' &&\n    this.state.selectedPatient !== null\n    && (\n      <UpdatePatientHistoryForm\n      authUserId={this.context.userId}\n      canCancel\n        canConfirm\n        onCancel={this.modalCancelHandler}\n        onConfirm={this.updatePatientHistoryHandler}\n        confirmText=\"Confirm\"\n        patient={this.state.selectedPatient}\n      />\n    )}\n    </Tab>\n    <Tab eventKey=\"patientEditAllergies\" title=\"Allergies\">\n    {this.state.selectedPatient === null && (\n      <Button variant=\"outline-warning\" size=\"lg\">\n        Select a Patient from the Master List below\n      </Button>\n    )}\n    {this.state.selectedPatient !== null && (\n      <Button variant=\"outline-primary\" value='allergies' onClick={this.updatePatientSpecial.bind(this)}>Add Allergies</Button>\n    )}\n    {this.state.patientUpdateField === 'allergies' &&\n    this.state.selectedPatient !== null\n    && (\n      <UpdatePatientAllergiesForm\n            authUserId={this.context.userId}\n            canCancel\n              canConfirm\n              onCancel={this.modalCancelHandler}\n              onConfirm={this.updatePatientAllergiesHandler}\n              confirmText=\"Confirm\"\n              patient={this.state.selectedPatient}\n            />\n    )}\n    </Tab>\n    <Tab eventKey=\"patientEditMedication\" title=\"Medication\">\n    {this.state.selectedPatient === null && (\n      <Button variant=\"outline-warning\" size=\"lg\">\n        Select a Patient from the Master List below\n      </Button>\n    )}\n    {this.state.selectedPatient !== null && (\n      <Button variant=\"outline-primary\" value='medication' onClick={this.updatePatientSpecial.bind(this)}>Add Medication</Button>\n    )}\n    {this.state.patientUpdateField === 'medication' &&\n    this.state.selectedPatient !== null\n    && (\n      <UpdatePatientMedicationForm\n      authUserId={this.context.userId}\n      canCancel\n        canConfirm\n        onCancel={this.modalCancelHandler}\n        onConfirm={this.updatePatientMedicationHandler}\n        confirmText=\"Confirm\"\n        patient={this.state.selectedPatient}\n      />\n    )}\n    </Tab>\n    <Tab eventKey=\"patientEditInvestigation\" title=\"Investigation\">\n    {this.state.selectedPatient === null && (\n      <Button variant=\"outline-warning\" size=\"lg\">\n        Select a Patient from the Master List below\n      </Button>\n    )}\n    {this.state.selectedPatient !== null && (\n      <Button variant=\"outline-primary\" value='investigation' onClick={this.updatePatientSpecial.bind(this)}>Add Investigation</Button>\n    )}\n    {this.state.patientUpdateField === 'investigation' &&\n    this.state.selectedPatient !== null\n    && (\n      <UpdatePatientInvestigationForm\n            authUserId={this.context.userId}\n            canCancel\n              canConfirm\n              onCancel={this.modalCancelHandler}\n              onConfirm={this.updatePatientInvestigationHandler}\n              confirmText=\"Confirm\"\n              patient={this.state.selectedPatient}\n            />\n    )}\n    </Tab>\n    <Tab eventKey=\"patientEditDiagnosis\" title=\"Diagnosis\">\n    {this.state.selectedPatient === null && (\n      <Button variant=\"outline-warning\" size=\"lg\">\n        Select a Patient from the Master List below\n      </Button>\n    )}\n    {this.state.selectedPatient !== null && (\n      <Button variant=\"outline-primary\" value='diagnosis' onClick={this.updatePatientSpecial.bind(this)}>Add Diagnosis</Button>\n    )}\n    {this.state.patientUpdateField === 'diagnosis' &&\n    this.state.selectedPatient !== null\n    && (\n      <UpdatePatientDiagnosisForm\n            authUserId={this.context.userId}\n            canCancel\n              canConfirm\n              onCancel={this.modalCancelHandler}\n              onConfirm={this.updatePatientDiagnosisHandler}\n              confirmText=\"Confirm\"\n              patient={this.state.selectedPatient}\n            />\n    )}\n    </Tab>\n    <Tab eventKey=\"patientEditTreatment\" title=\"Treatment\">\n    {this.state.selectedPatient === null && (\n      <Button variant=\"outline-warning\" size=\"lg\">\n        Select a Patient from the Master List below\n      </Button>\n    )}\n    {this.state.selectedPatient !== null && (\n      <Button variant=\"outline-primary\" value='treatment' onClick={this.updatePatientSpecial.bind(this)}>Add Treatment</Button>\n    )}\n    {this.state.patientUpdateField === 'treatment' &&\n    this.state.selectedPatient !== null\n    && (\n      <UpdatePatientTreatmentForm\n            authUserId={this.context.userId}\n            canCancel\n              canConfirm\n              onCancel={this.modalCancelHandler}\n              onConfirm={this.updatePatientTreatmentHandler}\n              confirmText=\"Confirm\"\n              patient={this.state.selectedPatient}\n            />\n    )}\n    </Tab>\n    <Tab eventKey=\"patientEditBilling\" title=\"Billing\">\n    {this.state.selectedPatient === null && (\n      <Button variant=\"outline-warning\" size=\"lg\">\n        Select a Patient from the Master List below\n      </Button>\n    )}\n    {this.state.selectedPatient !== null && (\n      <Button variant=\"outline-primary\" value='billing' onClick={this.updatePatientSpecial.bind(this)}>Add Billing</Button>\n    )}\n    {this.state.patientUpdateField === 'billing' &&\n    this.state.selectedPatient !== null\n    && (\n      <UpdatePatientBillingForm\n            authUserId={this.context.userId}\n            canCancel\n              canConfirm\n              onCancel={this.modalCancelHandler}\n              onConfirm={this.updatePatientBillingHandler}\n              confirmText=\"Confirm\"\n              patient={this.state.selectedPatient}\n            />\n    )}\n    </Tab>\n\n    <Tab eventKey=\"patientEditAttachment\" title=\"Attachment\">\n    {this.state.selectedPatient === null && (\n      <Button variant=\"outline-warning\" size=\"lg\">\n        Select a Patient from the Master List below\n      </Button>\n    )}\n    {this.state.selectedPatient !== null && (\n      <Button variant=\"outline-primary\" value='attachment' onClick={this.updatePatientSpecial.bind(this)}>Add Attachment</Button>\n    )}\n    {this.state.patientUpdateField === 'attachment' &&\n    this.state.selectedPatient !== null\n    && (\n      <UpdatePatientAttachmentForm\n            authUserId={this.context.userId}\n            canCancel\n              canConfirm\n              onCancel={this.modalCancelHandler}\n              onConfirm={this.updatePatientAttachmentHandler}\n              confirmText=\"Confirm\"\n              patient={this.state.selectedPatient}\n            />\n          )}\n    </Tab>\n    <Tab eventKey=\"patientEditNote\" title=\"Note\">\n    {this.state.selectedPatient === null && (\n      <Button variant=\"outline-warning\" size=\"lg\">\n        Select a Patient from the Master List below\n      </Button>\n    )}\n    {this.state.selectedPatient !== null && (\n      <Button variant=\"outline-primary\" value='notes' onClick={this.updatePatientSpecial.bind(this)}>Add Note</Button>\n    )}\n    {this.state.patientUpdateField === 'notes' &&\n    this.state.selectedPatient !== null\n    && (\n      <UpdatePatientNoteForm\n            authUserId={this.context.userId}\n            canCancel\n              canConfirm\n              onCancel={this.modalCancelHandler}\n              onConfirm={this.updatePatientNoteHandler}\n              confirmText=\"Confirm\"\n              patient={this.state.selectedPatient}\n            />\n          )}\n    </Tab>\n    <Tab eventKey=\"patientEditTag\" title=\"Tag\">\n    {this.state.selectedPatient === null && (\n      <Button variant=\"outline-warning\" size=\"lg\">\n        Select a Patient from the Master List below\n      </Button>\n    )}\n    {this.state.selectedPatient !== null && (\n      <Button variant=\"outline-primary\" value='tags' onClick={this.updatePatientSpecial.bind(this)}>Add Tag</Button>\n    )}\n    {this.state.patientUpdateField === 'tags' &&\n    this.state.selectedPatient !== null\n    && (\n      <UpdatePatientTagForm\n            authUserId={this.context.userId}\n            canCancel\n              canConfirm\n              onCancel={this.modalCancelHandler}\n              onConfirm={this.updatePatientTagHandler}\n              confirmText=\"Confirm\"\n              patient={this.state.selectedPatient}\n            />\n          )}\n    </Tab>\n\n    <Tab eventKey=\"MasterList\" title=\"Master List\">\n    <Container className=\"containerUserMasterList\">\n    <Row className=\"searchListRow\">\n    <Button variant=\"primary\" size=\"sm\" onClick={this.fetchPatientsAsc}>\n       Sort Asc\n     </Button>\n    <Button variant=\"info\" size=\"sm\" onClick={this.fetchPatientsDesc}>\n       Sort Desc\n     </Button>\n    {this.state.isLoading ? (\n      <Spinner />\n    ) : (\n      <PatientList\n        patients={this.state.patients}\n        authUserId={this.context.userId}\n        onViewDetail={this.showDetailHandler}\n      />\n    )}\n    </Row>\n    </Container>\n    </Tab>\n\n    <Tab eventKey=\"SearchInput\" title=\"Search\">\n    <Container className=\"containerSearchUserInput\">\n      {this.context.token && (\n      <Row className=\"searchUserRowAdd\">\n      <Button variant=\"primary\" onClick={this.startSearchPatientHandler}>Search</Button>\n      </Row>\n    )}\n\n    <Row className=\"searchUserRowForm\">\n    <Col md={10} className=\"searchUserColForm\">\n    <Tabs defaultActiveKey=\"Field\" id=\"uncontrolled-tab-example\">\n    <Tab eventKey=\"Search\" title=\"Search:\" disabled>\n    </Tab>\n    <Tab eventKey=\"Field\" title=\"Field:\">\n    {this.state.searching === true && (\n      <SearchPatientForm\n      authUserId={this.context.userId}\n      canCancel\n        canConfirm\n        onCancel={this.modalCancelHandler}\n        onConfirm={this.modalConfirmSearchHandler}\n        confirmText=\"Search\"\n        patient={this.context.selectedPatient}\n      />\n    )}\n    </Tab>\n    <Tab eventKey=\"Id\" title=\"Id:\">\n    {this.state.searching === true && (\n      <SearchPatientIdForm\n      authUserId={this.context.userId}\n      canCancel\n        canConfirm\n        onCancel={this.modalCancelHandler}\n        onConfirm={this.modalConfirmSearchIdHandler}\n        confirmText=\"Search\"\n        patient={this.context.selectedPatient}\n      />\n    )}\n    </Tab>\n    {\n    //   <Tab eventKey=\"Visit\" title=\"Visit:\">\n    // {this.state.searching === true && (\n    //   <SearchPatientVisitForm\n    //   authUserId={this.context.userId}\n    //   canCancel\n    //     canConfirm\n    //     onCancel={this.modalCancelHandler}\n    //     onConfirm={this.modalConfirmSearchVisitHandler}\n    //     confirmText=\"Search\"\n    //     patient={this.context.selectedPatient}\n    //   />\n    // )}\n    // </Tab>\n  }\n    <Tab eventKey=\"Name\" title=\"Name:\">\n    {this.state.searching === true && (\n      <SearchPatientNameForm\n      authUserId={this.context.userId}\n      canCancel\n        canConfirm\n        onCancel={this.modalCancelHandler}\n        onConfirm={this.modalConfirmSearchNameHandler}\n        confirmText=\"Search\"\n        patient={this.context.selectedPatient}\n      />\n    )}\n    </Tab>\n    </Tabs>\n    </Col>\n    </Row>\n    </Container>\n    </Tab>\n\n    <Tab eventKey=\"SearchResult\" title=\"Search Results\">\n    <Container className=\"containerSearchUserResults\">\n    <Row>\n      <Card className=\"searchCard\">\n        <Card.Body className=\"searchCardBody\">\n          <Card.Title>Your Search</Card.Title>\n          <Card.Text>\n            Field: {this.state.patientSearchField}\n          </Card.Text>\n          <Card.Text>\n            Query: {this.state.patientSearchQuery}\n          </Card.Text>\n        </Card.Body>\n      </Card>\n    </Row>\n    <Row className=\"searchListRow\">\n    {\n      this.state.searchPatients !== [] &&\n      <SearchPatientList\n        searchPatients={this.state.searchPatients}\n        authUserId={this.context.userId}\n        onCancel={this.modalCancelHandler}\n          onViewDetail={this.showDetailHandler}\n      />\n    }\n    </Row>\n    </Container>\n    </Tab>\n\n    </Tabs>\n    </Container>\n\n\n\n\n\n    </Col>\n\n    <Col md={3} className=\"MasterCol3\">\n\n\n    </Col>\n    </Row>\n\n</Accordion>\n\n      </React.Fragment>\n    );\n  }\n}\n\nexport default PatientsPage;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\n// import { NavLink } from 'react-router-dom';\n\nimport './UserItem.css';\n\nconst appointmentItem = props => (\n\n  <li key={props.appointmentId} className=\"users__list-item\">\n    <div>\n      <h1>{props.title}</h1>\n      <p>{props.date}</p>\n\n    </div>\n    <div>\n    <Button variant=\"primary\" onClick={props.onDetail.bind(this, props._id)}>\n          Details\n        </Button>\n    </div>\n  </li>\n);\n\nexport default appointmentItem;\n","import React from 'react';\n\nimport AppointmentItem from './AppointmentItem/AppointmentItem';\nimport './UserList.css';\n\nconst appointmentList = props => {\n\n  const appointment = props.appointments.map(appointment => {\n\n    const appointmentDate = new Date(appointment.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n    return (\n      <AppointmentItem\n        key={appointment._id}\n        userId={appointment.authUserId}\n        _id={appointment._id}\n        title={appointment.title}\n        date={appointmentDate}\n        onDetail={props.onViewDetail}\n      />\n    );\n  });\n\n  return <ul className=\"user__list1\">{appointment}</ul>;\n};\n\nexport default appointmentList;\n","import React from 'react';\n\nimport './UserItem.css';\n\n\nconst appointmentNoteItem = props => (\n  <li key={props.userId} className=\"users__list-item\">\n    <div>\n      <p>\n        Note: {props.note}\n      </p>\n    </div>\n  </li>\n);\n\nexport default appointmentNoteItem;\n","import React from 'react';\n\nimport AppointmentNoteItem from './AppointmentItem/AppointmentNoteItem';\nimport './UserList.css';\n\nconst appointmentNoteList = props => {\n  console.log(\"appointment notes list props\", props.appointmentNote);\n  const appointmentNote = props.appointmentNote.map(note => {\n    return (\n      <AppointmentNoteItem\n        key={note}\n        userId={props.authUserId}\n        note={note}\n      />\n    );\n  });\n\n  return <ul className=\"user__list1\">{appointmentNote}</ul>;\n};\n\nexport default appointmentNoteList;\n","import React from 'react';\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\nimport Accordion from 'react-bootstrap/Accordion';\nimport AppointmentNoteList from './AppointmentList/AppointmentNoteList';\n\nimport './PatientDetail.css';\n\nconst AppointmentDetail = (props) => {\n  const {...appointment} = props.appointment;\n  const authUserId = props.authUserId;\n  const appointmentDate = new Date(appointment.date.substr(0,10)*1000).toISOString().slice(0,10);\n  const appointmentNote = appointment.notes;\n  const appointmentPatientConsultant = appointment.patient.consultant;\n  console.log(\"appointmentPatientConsultant:  \", appointmentPatientConsultant);\n  console.log(\"AppointmentDetail.props.appointment:  \", {...appointment}, appointmentNote);\n  return (\n    <div className=\"PatientDetailBox\">\n    <Card className=\"PatientDetailCard\">\n    <Card.Body>\n      <Card.Title>Appointment Details</Card.Title>\n      <Card.Text>\n        ID: {appointment._id}\n      </Card.Text>\n      <Card.Text>\n        Date: {appointmentDate}\n      </Card.Text>\n      <Card.Text>\n        Time: {appointment.time}\n      </Card.Text>\n      <Card.Text>\n        SeenTime: {appointment.seenTime}\n      </Card.Text>\n      <Card.Text>\n        CheckinTime: {appointment.checkinTime}\n      </Card.Text>\n      <Card.Text>\n        Title: {appointment.title}\n      </Card.Text>\n      <Card.Text>\n        Type: {appointment.type}\n      </Card.Text>\n      <Card.Text>\n        Patient Name: {appointment.patient.name}\n      </Card.Text>\n      <Card.Text>\n        Patient Phone: {appointment.patient.phone}\n      </Card.Text>\n      <Card.Text>\n        Patient Email: {appointment.patient.email}\n      </Card.Text>\n      <Card.Text>\n        Description: {appointment.description}\n      </Card.Text>\n      <Card.Text>\n        Location: {appointment.location}\n      </Card.Text>\n      <Card.Text>\n        In-Progress?: {appointment.inProgress}\n      </Card.Text>\n      {appointment.important === true &&(\n        <p>Appointment is In-Progress</p>\n      )}\n      <Card.Text>\n        Attended?: {appointment.attended}\n      </Card.Text>\n      {appointment.attended === true &&(\n        <p>Patient Checked In</p>\n      )}\n      <Card.Text>\n        Important?:\n      </Card.Text>\n      {appointment.important === true &&(\n        <p>High Prioity Appointment</p>\n      )}\n      <Card.Text>\n      Notes:\n      </Card.Text>\n      <AppointmentNoteList\n        appointmentNote={appointmentNote}\n        authUserId={props.authUserId}\n        />\n\n    </Card.Body>\n    { props.canDelete === true && (\n      <Button variant=\"danger\" onClick={props.onDelete}>\n        Delete Appointment !!??\n      </Button>\n    )}\n  </Card>\n    </div>\n\n  );\n}\n\nexport default AppointmentDetail;\n","import React from 'react';\n// import { NavLink } from 'react-router-dom';\n\n\nimport './UserItem.css';\n\nconst searchAppointmentItem = props => (\n  <li key={props.appointmentId} className=\"users__list-item\">\n    <div>\n      <h1> Title: {props.title}</h1>\n      <p>\n        Type: {props.type}\n      </p>\n\n    </div>\n    <div>\n    <button className=\"btn\" onClick={props.onDetail.bind(this, props._id)}>\n          View Details\n        </button>\n    </div>\n  </li>\n);\n\nexport default searchAppointmentItem;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Accordion from 'react-bootstrap/Accordion';\n\nimport SearchAppointmentItem from './AppointmentItem/SearchAppointmentItem';\nimport './UserList.css';\n\nconst searchAppointmentList = props => {\n  const searchAppointments = props.searchAppointments.map(appointment => {\n    return (\n      <React.Fragment>\n      <SearchAppointmentItem\n        key={appointment._id}\n        userId={props.authUserId}\n        _id={appointment._id}\n        title={appointment.title}\n        type={appointment.type}\n        onDetail={props.onViewDetail}\n      />\n      </React.Fragment>\n    );\n  });\n\n  return <ul className=\"user__list1\">{searchAppointments}</ul>;\n};\n\nexport default searchAppointmentList;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Accordion from 'react-bootstrap/Accordion';\n\n// import AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst SearchAppointmentForm = (props) => {\n// const {...search} = props.search;\n\nreturn (\n<div className=\"SearchFormContainer\">\n  <Form onSubmit={props.onConfirm}>\n  <Form.Group controlId=\"formBasicFieldSelect\">\n  <Form.Label>Field Options</Form.Label>\n  <Form.Control as=\"select\">\n  <option>select</option>\n  <option>title</option>\n  <option>type</option>\n  <option>date</option>\n  <option>checkinTime</option>\n  <option>seenTime</option>\n  <option>location</option>\n  <option>description</option>\n  <option>patient.name</option>\n  <option>inProgress</option>\n  <option>attended</option>\n  <option>important</option>\n  </Form.Control>\n  </Form.Group>\n\n<Form.Group controlId=\"formBasicField\">\n<Form.Label>Field</Form.Label>\n<Form.Control type=\"text\" placeholder=\"Field\"/>\n</Form.Group>\n\n<Form.Group controlId=\"formBasicQuery\">\n<Form.Label>Query</Form.Label>\n<Form.Control type=\"textarea\" rows=\"5\" placeholder=\"Query\" />\n</Form.Group>\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"5\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n\n{props.canConfirm && (\n  <Button variant=\"success\" type=\"submit\">Search</Button>\n)}\n\n{\n// <AuthContext.Consumer>\n// </AuthContext.Consumer>\n\n\n// populate feilds with user object fields\n}\n</Form>\n</div>\n\n\n)};\n\nexport default SearchAppointmentForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Accordion from 'react-bootstrap/Accordion';\n\n// import AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst SearchAppointmentIdForm = (props) => {\n// const {...search} = props.search;\n\nreturn (\n<div className=\"SearchFormContainer\">\n  <Form onSubmit={props.onConfirm}>\n\n<Form.Group controlId=\"formBasicId\">\n<Form.Label>Id</Form.Label>\n<Form.Control type=\"text\" placeholder=\"Id\"/>\n</Form.Group>\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"5\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n\n{props.canConfirm && (\n  <Button variant=\"success\" type=\"submit\">Search</Button>\n)}\n\n{\n// <AuthContext.Consumer>\n// </AuthContext.Consumer>\n\n\n// populate feilds with user object fields\n}\n</Form>\n</div>\n\n\n)};\n\nexport default SearchAppointmentIdForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Accordion from 'react-bootstrap/Accordion';\n\n// import AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst SearchAppointmentPatientForm = (props) => {\n// const {...search} = props.search;\n\nreturn (\n<div className=\"SearchFormContainer\">\n  <Form onSubmit={props.onConfirm}>\n\n<Form.Group controlId=\"formBasicPatientId\">\n<Form.Label>Patient Id</Form.Label>\n<Form.Control type=\"text\" placeholder=\"Patient Id\"/>\n</Form.Group>\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"5\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n\n{props.canConfirm && (\n  <Button variant=\"success\" type=\"submit\">Search</Button>\n)}\n\n{\n// <AuthContext.Consumer>\n// </AuthContext.Consumer>\n\n\n// populate feilds with user object fields\n}\n</Form>\n</div>\n\n\n)};\n\nexport default SearchAppointmentPatientForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Accordion from 'react-bootstrap/Accordion';\n\n// import AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst SearchAppointmentDateForm = (props) => {\n// const {...search} = props.search;\n\nreturn (\n<div className=\"SearchFormContainer\">\n  <Form onSubmit={props.onConfirm}>\n\n<Form.Group controlId=\"formBasicDate\">\n<Form.Label>Appointment Date</Form.Label>\n<Form.Control type=\"date\" placeholder=\"Appointment Date\"/>\n</Form.Group>\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"5\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n\n{props.canConfirm && (\n  <Button variant=\"success\" type=\"submit\">Search</Button>\n)}\n\n{\n// <AuthContext.Consumer>\n// </AuthContext.Consumer>\n\n\n// populate feilds with user object fields\n}\n</Form>\n</div>\n\n\n)};\n\nexport default SearchAppointmentDateForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Accordion from 'react-bootstrap/Accordion';\n\n// import AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst SearchAppointmentDateRangeForm = (props) => {\n// const {...search} = props.search;\n\nreturn (\n<div className=\"SearchFormContainer\">\n  <Form onSubmit={props.onConfirm}>\n\n<Form.Group controlId=\"formBasicStartDate\">\n<Form.Label>Appointment Start Date</Form.Label>\n<Form.Control type=\"date\" placeholder=\"Appointment Date Range\"/>\n</Form.Group>\n<Form.Group controlId=\"formBasicEndDate\">\n<Form.Label>Appointment EndDate</Form.Label>\n<Form.Control type=\"date\" placeholder=\"Appointment Date Range\"/>\n</Form.Group>\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"5\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n\n{props.canConfirm && (\n  <Button variant=\"success\" type=\"submit\">Search</Button>\n)}\n\n{\n// <AuthContext.Consumer>\n// </AuthContext.Consumer>\n\n\n// populate feilds with user object fields\n}\n</Form>\n</div>\n\n\n)};\n\nexport default SearchAppointmentDateRangeForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Accordion from 'react-bootstrap/Accordion';\nimport Alert from 'react-bootstrap/Alert'\nimport TimeField from 'react-simple-timefield';\n// import FormCheck from 'react-bootstrap/FormCheck'\n// import { NavLink } from 'react-router-dom';\nimport AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst CreateAppointmentForm = (props) => {\n\n  // console.log({...props});\n  console.log(\"CreateAppointmentForm:  \", AuthContext.token);\n\nreturn (\n<div className=\"CreateFormContainer\">\n<Form onSubmit={props.onConfirm}>\n<Form.Row>\n<Alert variant=\"primary\">\n  Create an appointment for: {props.selectedPatient.name}\n</Alert>\n</Form.Row>\n<Form.Row>\n  <Form.Group as={Col} controlId=\"formGridTitle\">\n    <Form.Label>Title</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"Title\"/>\n  </Form.Group>\n\n<Form.Group as={Col} controlId=\"formGridType\">\n  <Form.Label>Type</Form.Label>\n  <Form.Control type=\"text\" placeholder=\"Type\" />\n</Form.Group>\n\n<Form.Group as={Col} controlId=\"formGridLocation\">\n  <Form.Label>Location</Form.Label>\n  <Form.Control type=\"text\" placeholder=\"Location\" />\n</Form.Group>\n</Form.Row>\n\n<Form.Row>\n<Form.Group as={Col} controlId=\"formGridDate\">\n  <Form.Label>Date</Form.Label>\n  <Form.Control type=\"date\" placeholder=\"Date\" />\n</Form.Group>\n<Form.Group as={Col} controlId=\"formGridTime\">\n  <Form.Label>Time</Form.Label>\n    <Form.Control type=\"time\" placeholder=\"Time\" />\n</Form.Group>\n<Form.Group as={Col} controlId=\"formGridCheckinTime\">\n  <Form.Label>CheckinTime</Form.Label>\n    <Form.Control type=\"time\" placeholder=\"CheckinTime\" />\n</Form.Group>\n<Form.Group as={Col} controlId=\"formGridSeenTime\">\n  <Form.Label>SeenTime</Form.Label>\n    <Form.Control type=\"time\" placeholder=\"SeenTime\" />\n</Form.Group>\n</Form.Row>\n\n<Form.Row>\n<Form.Group as={Col} controlId=\"formGridDescription\">\n  <Form.Label>Description</Form.Label>\n  <Form.Control as=\"textarea\" rows=\"2\" placeholder=\"Description\" />\n</Form.Group>\n\n<Form.Group as={Col} controlId=\"formGridInProgress\">\n      <Form.Label>InProgress</Form.Label>\n      <Form.Control as=\"select\">\n        <option>false</option>\n        <option>true</option>\n      </Form.Control>\n    </Form.Group>\n\n    <Form.Group as={Col} controlId=\"formGridAttended\">\n          <Form.Label>Attended</Form.Label>\n          <Form.Control as=\"select\">\n            <option>false</option>\n            <option>true</option>\n          </Form.Control>\n        </Form.Group>\n\n        <Form.Group as={Col} controlId=\"formGridImportant\">\n              <Form.Label>Important</Form.Label>\n              <Form.Control as=\"select\">\n                <option>false</option>\n                <option>true</option>\n              </Form.Control>\n            </Form.Group>\n</Form.Row>\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"4\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n\n{props.canConfirm && (\n  <Button variant=\"success\" type=\"submit\">Create New</Button>\n)}\n\n</Form>\n</div>\n\n)};\n\nexport default CreateAppointmentForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Accordion from 'react-bootstrap/Accordion'\n// import FormCheck from 'react-bootstrap/FormCheck'\n// import AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst UpdateAppointmentForm = (props) => {\n\nconsole.log(\"UpdateAppointmentForm.props:  \", {...props});\nconst {...appointment} = props.appointment;\nconsole.log(\"UpdateAppointmentForm.props.appointment:  \", {...appointment});\n\n\nreturn (\n<div className=\"UpdateFormContainer\">\n<Form onSubmit={props.onConfirm}>\n<Form.Row>\n  <Form.Group as={Col} controlId=\"formGridTitle\">\n    <Form.Label>Title</Form.Label>\n    <Form.Control type=\"text\" placeholder={appointment.title}/>\n  </Form.Group>\n\n<Form.Group as={Col} controlId=\"formGridType\">\n  <Form.Label>Type</Form.Label>\n  <Form.Control type=\"text\" placeholder={appointment.type} />\n</Form.Group>\n\n<Form.Group as={Col} controlId=\"formGridLocation\">\n  <Form.Label>Location</Form.Label>\n  <Form.Control type=\"text\" placeholder={appointment.location} />\n</Form.Group>\n</Form.Row>\n\n<Form.Row>\n<Form.Group as={Col} controlId=\"formGridDate\">\n  <Form.Label>Date</Form.Label>\n  <Form.Control type=\"date\" placeholder={appointment.date} />\n</Form.Group>\n<Form.Group as={Col} controlId=\"formGridTime\">\n  <Form.Label>Time</Form.Label>\n    <Form.Control type=\"time\" placeholder={appointment.time}/>\n</Form.Group>\n<Form.Group as={Col} controlId=\"formGridCheckinTime\">\n  <Form.Label>CheckinTime</Form.Label>\n    <Form.Control type=\"time\" placeholder={appointment.checkinTime}/>\n</Form.Group>\n<Form.Group as={Col} controlId=\"formGridSeenTime\">\n  <Form.Label>SeenTime</Form.Label>\n    <Form.Control type=\"time\" placeholder={appointment.seenTime}/>\n</Form.Group>\n</Form.Row>\n\n<Form.Row>\n<Form.Group as={Col} controlId=\"formGridDescription\">\n  <Form.Label>Description</Form.Label>\n  <Form.Control as=\"textarea\" rows=\"2\" placeholder={appointment.description} />\n</Form.Group>\n\n<Form.Group as={Col} controlId=\"formGridInProgress\">\n      <Form.Label>InProgress</Form.Label>\n      <Form.Control as=\"select\">\n        <option>false</option>\n        <option>true</option>\n      </Form.Control>\n    </Form.Group>\n\n    <Form.Group as={Col} controlId=\"formGridAttended\">\n          <Form.Label>Attended</Form.Label>\n          <Form.Control as=\"select\">\n            <option>false</option>\n            <option>true</option>\n          </Form.Control>\n        </Form.Group>\n\n        <Form.Group as={Col} controlId=\"formGridImportant\">\n              <Form.Label>Important</Form.Label>\n              <Form.Control as=\"select\">\n                <option>false</option>\n                <option>true</option>\n              </Form.Control>\n            </Form.Group>\n</Form.Row>\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"2\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n\n{props.canConfirm && (\n  <Accordion.Toggle as={Button} variant=\"success\" eventKey=\"2\" className=\"btn\" type=\"submit\">\n  Submit\n  </Accordion.Toggle>\n)}\n\n</Form>\n{\n  // <AuthContext.Consumer>\n// </AuthContext.Consumer>\n}\n</div>\n\n)};\n\nexport default UpdateAppointmentForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Accordion from 'react-bootstrap/Accordion'\n// import FormCheck from 'react-bootstrap/FormCheck'\n// import AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst UpdateAppointmentFieldForm = (props) => {\n\nconsole.log(\"UpdateAppointmentFieldForm.props:  \", {...props});\nconst {...appointment} = props.appointment;\nconsole.log(\"UpdateAppointmentFieldForm.props.user:  \", {...appointment});\n\nreturn (\n<div className=\"UpdateFormContainer\">\n<Form onSubmit={props.onConfirm}>\n<Form.Row>\n  <Form.Group as={Col} controlId=\"formGridFieldSelect\">\n  <Form.Label>Field Options</Form.Label>\n  <Form.Control as=\"select\">\n    <option>select</option>\n    <option>title</option>\n    <option>type</option>\n    <option>date</option>\n    <option>checkinTime</option>\n    <option>seenTime</option>\n    <option>location</option>\n    <option>description</option>\n    <option>patient.name</option>\n    <option>inProgress</option>\n    <option>attended</option>\n    <option>important</option>\n  </Form.Control>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridField\">\n    <Form.Label>Field</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"Field\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridQuery\">\n    <Form.Label>Query</Form.Label>\n    <Form.Label>Time Format 24Hr ex 16:15</Form.Label>\n    <Form.Label>Date Format YYYY-MM-DD</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"Query\"/>\n  </Form.Group>\n</Form.Row>\n\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"2\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n{props.canCancelProfile && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"5\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n\n{props.canConfirm && (\n  // <Accordion.Toggle as={Button} variant=\"success\" eventKey=\"2\" className=\"btn\" type=\"submit\">\n  // Submit\n  // </Accordion.Toggle>\n  <Button variant=\"success\" type=\"submit\">\n  Submit\n  </Button>\n)}\n\n</Form>\n{\n  // <AuthContext.Consumer>\n// </AuthContext.Consumer>\n}\n</div>\n\n)};\n\nexport default UpdateAppointmentFieldForm;\n","import ReactDOM from 'react-dom';\nimport React, { Component } from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Button from 'react-bootstrap/Button';\nimport Accordion from 'react-bootstrap/Accordion';\nimport SidebarPage from './Sidebar';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\nimport Card from 'react-bootstrap/Card';\n\n// import Modal from '../components/Modal/Modal';\n// import Backdrop from '../components/Backdrop/Backdrop';\nimport AlertBox from '../components/AlertBox';\n\nimport AppointmentList from '../components/Appointments/AppointmentList/AppointmentList';\nimport AppointmentDetail from '../components/Appointments/AppointmentDetail';\nimport PatientDetail from '../components/Patients/PatientDetail';\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\nimport SearchAppointmentList from '../components/Appointments/AppointmentList/SearchAppointmentList';\nimport SearchAppointmentForm from '../components/Forms/SearchAppointmentForm';\nimport SearchAppointmentIdForm from '../components/Forms/SearchAppointmentIdForm';\nimport SearchAppointmentPatientForm from '../components/Forms/SearchAppointmentPatientForm';\nimport SearchAppointmentDateForm from '../components/Forms/SearchAppointmentDateForm';\nimport SearchAppointmentDateRangeForm from '../components/Forms/SearchAppointmentDateRangeForm';\n\nimport CreateAppointmentForm from '../components/Forms/CreateAppointmentForm';\nimport UpdateAppointmentForm from '../components/Forms/UpdateAppointmentForm';\nimport UpdateAppointmentFieldForm from '../components/Forms/UpdateAppointmentFieldForm';\nimport './Users.css';\n\nclass AppointmentsPage extends Component {\n  state = {\n    creating: false,\n    updating: false,\n    deleting: false,\n    searching: false,\n    searchAppointments: [],\n    appointments: [],\n    isLoading: false,\n    selectedAppointment: null,\n    appointmentUpdateField: null,\n    appointmentSearchField: null,\n    appointmentSearchQuery: null,\n    canDelete: null,\n    userAlert: null,\n  };\n  isActive = true;\n\n  static contextType = AuthContext;\n\n  // constructor(props) {\n  //   super(props);\n  // }\n\n  componentDidMount() {\n    this.fetchAppointments();\n    this.fetchAppointmentToday();\n    this.fetchAppointmentInProgress();\n    if (this.context.user.name === 'admin579'){\n      this.setState({canDelete: true})\n    }\n  }\n\n\n  startCreateAppointmentHandler = () => {\n    this.setState({ creating: true });\n    console.log(\"CreateAppointmentForm...\", this.context.selectedPatient);\n  };\n  startUpdateAppointmentHandler = () => {\n    this.setState({ updating: true });\n    console.log(\"UpdateAppointmentForm...\");\n  };\n  startSearchAppointmentHandler = () => {\n    this.setState({ searching: true });\n    console.log(\"SearchAppointmentForm...\");\n  };\n\n  modalConfirmHandler = (event) => {\n\n    console.log(\"CreateAppointmentFormData:  \", event.target.formGridTitle.value);\n\n    this.setState({ creating: false });\n    const userId = this.context.userId;\n    const selectedPatientId = this.context.selectedPatient._id;\n    console.log(`\n        userId: ${userId}\n        patientId: ${selectedPatientId}\n      `);\n\n      if (selectedPatientId === undefined) {\n        console.log(`\n          select a Patient before creating an Appointment!!\n          `);\n          this.setState({userAlert: \"select a Patient before creating an Appointment!!...\"});\n          return\n      }\n    const title = event.target.formGridTitle.value;\n    const type = event.target.formGridType.value;\n    const date = event.target.formGridDate.value;\n    const time = event.target.formGridTime.value;\n    const seenTime = event.target.formGridSeenTime.value;\n    const checkinTime = event.target.formGridCheckinTime.value;\n    const location = event.target.formGridLocation.value;\n    const description = event.target.formGridDescription.value;\n    const inProgress = event.target.formGridInProgress.value;\n    const attended = event.target.formGridAttended.value;\n    const important = event.target.formGridImportant.value;\n\n    if (\n      title.trim().length === 0 ||\n      type.trim().length === 0 ||\n      date.trim().length === 0 ||\n      time.trim().length === 0 ||\n      location.trim().length === 0 ||\n      description.trim().length === 0 ||\n      inProgress.trim().length === 0 ||\n      attended.trim().length === 0 ||\n      important.trim().length === 0\n    ) {\n      console.log(\"blank fields detected!!!...Please try again...\");\n      this.setState({userAlert: \"blank fields detected!!!...Please try again...\"});\n      return\n    }\n\n    const appointment = { title, type, date, time, seenTime, checkinTime, location, description, inProgress, attended, important };\n    console.log(`\n        creating appointment...\n        title: ${title},\n        type: ${type},\n        date: ${date},\n        time: ${time},\n        seenTime: ${seenTime},\n        checkinTime: ${checkinTime},\n        location: ${location},\n        description: ${description},\n        inProgress: ${inProgress},\n        attended: ${attended},\n        important: ${important},\n      `);\n      this.setState({userAlert: \"creating appointment...\"});\n\n    const requestBody = {\n      query: `\n          mutation {createAppointment(userId:\\\"${userId}\\\",patientId:\\\"${selectedPatientId}\\\",appointmentInput:{title:\\\"${title}\\\",type:\\\"${type}\\\",date:\\\"${date}\\\",time:\\\"${time}\\\",seenTime:\\\"${seenTime}\\\",checkinTime:\\\"${checkinTime}\\\",location:\\\"${location}\\\",description:\\\"${description}\\\",inProgress:${inProgress},attended:${attended},important:${important},})\n          {_id,title,type,date,time,seenTime,checkinTime,location,description,patient{_id,name,appointments{_id,date,title}},inProgress,attended,important}}\n        `,\n    };\n\n    const token = this.context.token;\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data.createAppointment));\n        const responseAlert = JSON.stringify(resData.data).slice(2,15);\n        this.setState({userAlert: responseAlert});\n\n        this.setState(prevState => {\n          const updatedAppointments = [...prevState.appointments];\n          updatedAppointments.push(resData.data.createAppointment);\n\n          return { appointments: updatedAppointments };\n        });\n        this.context.appointments = this.state.appointments;\n        // this.fetchAppointments();\n\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n  };\n\n  modalCancelHandler = () => {\n    this.setState({ creating: false, updating: false, searching: false, selectedAppointment: null });\n  };\n\n\n  modalConfirmUpdateHandler = (event) => {\n\n    if(this.context.user.role !== 'admin') {\n      console.log(\"Not the Admin! No edit permission!!\");\n      this.setState({userAlert: \"Not the Admin! No edit permission!!\"});\n    }\n\n    const userId = this.context.userId;\n    const appointmentId = this.context.selectedAppointment._id;\n    const selectedPatientId = this.context.selectedPatientId;\n    console.log(`\n        userId: ${userId}\n        appointmentd: ${appointmentId},\n      `);\n\n    // console.log(\"UpdateUserFormData:  \", event);\n    console.log(\"UpdateAppointmentFormData:  \", event.target.formGridTitle.value);\n\n\n    this.setState({ updating: false });\n    let title = event.target.formGridTitle.value;\n    let type = event.target.formGridType.value;\n    let date = event.target.formGridDate.value;\n    let time = event.target.formGridTime.value;\n    let seenTime = event.target.formGridSeenTime.value;\n    let checkinTime = event.target.formGridCheckinTime.value;\n    let location = event.target.formGridLocation.value;\n    let description = event.target.formGridDescription.value;\n    let inProgress = event.target.formGridInProgress.value;\n    let attended = event.target.formGridAttended.value;\n    let important = event.target.formGridImportant.value;\n\n    if (title.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      title  = this.context.selectedAppointment.title;\n      // return;\n    }\n    if (type.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      type  = this.context.selectedAppointment.type;\n    }\n    if (date.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      date  = this.context.selectedAppointment.date;\n    }\n    if (time.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      time  = this.context.selectedAppointment.time;\n    }\n    if (seenTime.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      seenTime  = this.context.selectedAppointment.seenTime;\n    }\n    if (checkinTime.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      checkinTime  = this.context.selectedAppointment.checkinTime;\n    }\n    if (location.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      location  = this.context.selectedAppointment.location;\n    }\n    if (description.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      description  = this.context.selectedAppointment.description;\n    }\n    if (inProgress.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      inProgress  = this.context.selectedAppointment.inProgress;\n    }\n    if (attended.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      attended  = this.context.selectedAppointment.attended;\n    }\n    if (important.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      important  = this.context.selectedAppointment.important;\n    }\n\n    const appointment = { title, type, date, time, seenTime, checkinTime, location, description, inProgress, attended, important, };\n    console.log(`\n        updating appointment...\n        title: ${title},\n        type: ${type},\n        date: ${date},\n        time: ${time},\n        seenTime: ${seenTime},\n        checkinTime: ${checkinTime},\n        location: ${location},\n        description: ${description},\n        inProgress: ${inProgress},\n        attended: ${attended},\n        important: ${important},\n      `);\n      this.setState({userAlert: \"updating appointment...\"});\n\n    const requestBody = {\n      query: `\n      mutation {updateAppointment(userId:\\\"${userId}\\\",appointmentId:\\\"${appointmentId}\\\",appointmentInput:{title:\\\"${title}\\\",type:\\\"${type}\\\",date:\\\"${date}\\\",time:\\\"${time}\\\",seenTime:\\\"${seenTime}\\\",checkinTime:\\\"${checkinTime}\\\",location:\\\"${location}\\\",description:\\\"${description}\\\",inProgress:${inProgress},attended:${attended},important:${important},})\n      {_id,title,type,date,time,seenTime,checkinTime,location,description,patient{_id,name,appointments{_id,date,title}},inProgress,attended,important,notes}}\n        `\n    };\n\n    const token = this.context.token;\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n\n        const updatedAppointmentId = resData.data.updateAppointment._id;\n        const updatedAppointment = this.state.appointments.find(e => e._id === updatedAppointmentId);\n        const updatedAppointmentPos = this.state.appointments.indexOf(updatedAppointment);\n        const slicedArray = this.state.appointments.splice(updatedAppointmentPos, 1);\n        console.log(\"updatedAppointment:  \", JSON.stringify(updatedAppointment),\"  updatedPatientPos:  \", updatedAppointmentPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.appointments.push(resData.data.updateAppointment);\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert, selectedAppointment: resData.data.updateAppointment})\n        this.fetchAppointments();\n\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n  };\n\n\n  updateAppointmentPatientHandler = (event) => {\n\n    const token = this.context.token;\n    const userId = this.context.userId;\n    let selectedAppointmentId = this.context.selectedAppointment._id;\n    let selectedPatientId = this.context.selectedPatient._id;\n    if(\n      this.context.user.role !== 'admin'\n    ) {\n      console.log(\"No edit permission!!\");\n      this.setState({userAlert: \"No edit permission!!\"});\n      return;\n    }\n\n    if (selectedPatientId === undefined) {\n      console.log(`\n        select a Patient before creating an Appointment!!\n        `);\n        this.setState({userAlert: \"select a Patient before creating an Appointment!!...\"});\n        return\n    }\n\n    this.setState({ updating: false , patientUpdateField: null });\n\n    console.log(`\n      updating appointment patient...\n      userId: ${userId},\n      appointmentId: ${selectedAppointmentId},\n      patientId: ${selectedPatientId},\n      `);\n      this.setState({userAlert: \"updating appointment patient...\"});\n\n      const requestBody = {\n        query:`\n        mutation {updateAppointmentPatient(userId:\\\"${userId}\\\",appointmentId:\\\"${selectedAppointmentId}\\\",patientId:\\\"${selectedPatientId}\\\")\n        {_id,title,type,date,time,seenTime,checkinTime,location,description,patient{_id,name,appointments{_id,date,title},consultant{reference{_id,name,role}}},inProgress,attended,important}}\n        `\n      }\n\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData));\n\n          const updatedAppointmentId = resData.data.updateAppointmentPatient._id;\n          const updatedAppointment = this.state.appointments.find(e => e._id === updatedAppointmentId);\n          const updatedAppointmentPos = this.state.appointments.indexOf(updatedAppointment);\n          const slicedArray = this.state.appointments.splice(updatedAppointmentPos, 1);\n          console.log(\"updatedAppointment:  \", JSON.stringify(updatedAppointment),\"  updatedPatientPos:  \", updatedAppointmentPos, \"  slicedArray:  \", slicedArray);\n\n          this.state.appointments.push(resData.data.updateAppointmentPatient);\n          const responseAlert = JSON.stringify(resData.data).slice(2,25);\n          this.setState({ userAlert: responseAlert, selectedAppointment: resData.data.updateAppointmentPatient})\n          this.fetchAppointments();\n\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({userAlert: err});\n        });\n\n\n  }\n\n\n  modalConfirmUpdateFieldHandler = (event) => {\n\n    const token = this.context.token;\n    const userId = this.context.userId;\n    let selectedAppointmentId = this.context.selectedAppointment._id;\n    if( this.context.user.role !== 'admin') {\n      console.log(\"Not the creator or Admin! No edit permission!!\");\n      selectedAppointmentId = null;\n    }\n\n      console.log(\"UpdateAppointmentFieldFormData:  \", event.target.formGridField.value);\n      this.setState({ updating: false });\n\n      let field = null;\n      let query = event.target.formGridQuery.value;\n      if (event.target.formGridFieldSelect.value === \"select\") {\n        field = event.target.formGridField.value;\n      } else {\n        field = event.target.formGridFieldSelect.value;\n      }\n\n      const requestBody = {\n        query:`\n        mutation {updateAppointmentField(userId:\\\"${userId}\\\",appointmentId:\\\"${selectedAppointmentId}\\\",field:\\\"${field}\\\",query:\\\"${query}\\\")\n        {_id,title,type,date,time,seenTime,checkinTime,location,description,patient{_id,name,appointments{_id,date,title}},inProgress,attended,important,notes}}\n        `};\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData.data.updateAppointmentField));\n\n          const updatedAppointmentId = resData.data.updateAppointmentField._id;\n          const updatedAppointment = this.state.appointments.find(e => e._id === updatedAppointmentId);\n          const updatedAppointmentPos = this.state.appointments.indexOf(updatedAppointment);\n          const slicedArray = this.state.appointments.splice(updatedAppointmentPos, 1);\n          console.log(\"updatedAppointment:  \", JSON.stringify(updatedAppointment),\"  updatedAppointmentPos:  \", updatedAppointmentPos, \"  slicedArray:  \", slicedArray);\n\n          this.state.appointments.push(resData.data.updateAppointmentField);\n          this.context.appointments = this.state.appointments;\n          const responseAlert = JSON.stringify(resData.data).slice(2,25);\n          this.setState({ userAlert: responseAlert, selectedAppointment: resData.data.updateAppointmentField})\n          this.fetchAppointments();\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({userAlert: err});\n        });\n\n  }\n\n\n  modalConfirmSearchHandler = (event) => {\n    console.log(\"SearchAppointmentForm:  \");\n\n\n    let userId = this.context.userId;\n\n      console.log(\"SearchAppointmentFormData:  \", event.target.formBasicField.value);\n      this.setState({ searching: false });\n\n      let field = null;\n      let query = event.target.formBasicQuery.value;\n      if (event.target.formBasicFieldSelect.value === \"select\") {\n        field = event.target.formBasicField.value;\n      } else {\n        field = event.target.formBasicFieldSelect.value;\n      }\n\n      if (\n        field.trim().length === 0 ||\n        query.trim().length === 0\n      ) {\n        console.log(\"blank fields detected!!!...Please try again...\");\n        this.setState({userAlert: \"blank fields detected!!!...Please try again...\"});\n        return;\n      }\n\n      const search = { field, query }\n      console.log(\"Searching for Appointment:  \", JSON.stringify(search));\n\n      const requestBody = {\n        query: `\n          query {getAppointmentField(userId:\"${userId}\", field:\"${field}\", query:\"${query}\")\n          {_id,title,type,date,time,seenTime,checkinTime,location,description,patient{_id,name,appointments{_id,date,title},consultant{reference{_id,name,role}}},inProgress,attended,important}}\n        `}\n\n      const token = this.context.token;\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData));\n          const responseAlert = JSON.stringify(resData.data).slice(2,15);\n          this.setState({userAlert: responseAlert});\n\n          const searchAppointments = resData.data.getAppointmentField;\n\n          this.setState({ searchAppointments: searchAppointments})\n          console.log(\"state.searchAppointments:  \", this.state.searchAppointments);\n          // this.fetchAppointments();\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({userAlert: err});\n        });\n  }\n\n  modalConfirmSearchIdHandler = (event) => {\n    console.log(`\n      SearchAppointmentIdFormData\n      `);\n\n      let userId = this.context.userId;\n      this.setState({ searching: false });\n      let selectedAppointmentId = event.target.formBasicId.value;\n\n      const requestBody = {\n        query: `\n          query {getAppointmentId(userId:\"${userId}\", appointmentId:\"${selectedAppointmentId}\")\n          {_id,title,type,date,time,patient{_id,name},location,description,inProgress,important,attended}}\n        `}\n\n      const token = this.context.token;\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData));\n          const responseAlert = JSON.stringify(resData.data).slice(2,15);\n          this.setState({userAlert: responseAlert});\n\n          const searchAppointments = resData.data.getAppointmentId;\n\n          this.setState({ searchAppointments: [searchAppointments]})\n          console.log(\"state.searchAppointments:  \", this.state.searchAppointments);\n          // this.fetchUsers();\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({userAlert: err});\n        });\n  }\n\n  modalConfirmSearchPatientHandler = (event) => {\n    console.log(`\n      SearchAppointmentPatientFormData\n      `);\n\n      let userId = this.context.userId;\n      this.setState({ searching: false });\n      let selectedPatientId = event.target.formBasicPatientId.value;\n\n      const requestBody = {\n        query: `\n          query {getAppointmentPatient(userId:\"${userId}\", patientId:\"${selectedPatientId}\")\n          {_id,title,type,date,time,patient{_id,name},location,description,inProgress,important,attended}}\n        `}\n\n      const token = this.context.token;\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData));\n          const responseAlert = JSON.stringify(resData.data).slice(2,15);\n          // const responseAlert = JSON.stringify(resData.errors).slice(2,15);\n          this.setState({userAlert: responseAlert});\n\n          const searchAppointments = resData.data.getAppointmentPatient;\n\n          this.setState({ searchAppointments: searchAppointments })\n          // this.state.searchApointments.push(searchAppointments)\n          console.log(\"state.searchApointments:  \", this.state.searchApointments);\n          // this.fetchUsers();\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({userAlert: err});\n        });\n\n  }\n  modalConfirmSearchDateHandler = (event) => {\n    console.log(`\n      SearchAppointmentDateFormData\n      `);\n\n      let userId = this.context.userId;\n      this.setState({ searching: false });\n      let appointmentDate = event.target.formBasicDate.value;\n\n      const requestBody = {\n        query: `\n          query {getAppointmentDate(userId:\"${userId}\",date:\"${appointmentDate}\")\n          {_id,title,type,date,time,patient{_id,name},location,description,inProgress,important,attended}}\n        `}\n\n      const token = this.context.token;\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData));\n          const responseAlert = JSON.stringify(resData.data).slice(2,15);\n          this.setState({userAlert: responseAlert});\n\n          const searchAppointments = resData.data.getAppointmentDate;\n\n          this.setState({ searchAppointments: searchAppointments})\n          console.log(\"state.searchAppointments:  \", this.state.searchAppointments);\n          // this.fetchUsers();\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({userAlert: err});\n        });\n\n  }\n  modalConfirmSearchDateRangeHandler = (event) => {\n    console.log(`\n      SearchAppointmentDateRangeFormData\n      `);\n\n      let userId = this.context.userId;\n      this.setState({ searching: false });\n      let appointmentStartDate = event.target.formBasicStartDate.value;\n      let appointmentEndDate = event.target.formBasicEndDate.value;\n\n      const requestBody = {\n        query: `\n          query {getAppointmentDateRange(userId:\"${userId}\",startDate:\"${appointmentStartDate}\",endDate:\"${appointmentEndDate}\")\n          {_id,title,type,date,time,patient{_id,name},location,description,inProgress,important,attended}}\n        `}\n\n      const token = this.context.token;\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData));\n          const responseAlert = JSON.stringify(resData.data).slice(2,15);\n          this.setState({userAlert: responseAlert});\n\n          const searchApointments = resData.data.getApointmentId;\n\n          this.setState({ searchApointments: searchApointments})\n          console.log(\"state.searchApointments:  \", this.state.searchApointments);\n          // this.fetchUsers();\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({userAlert: err});\n        });\n\n\n  }\n\n\n\n  modalCancelHandler = () => {\n    this.setState({ creating: false, updating: false, searching: false, selectedAppointment: null });\n  };\n\n\n  fetchAppointments() {\n    console.log(\"'fetch appointments function' context object... \" + JSON.stringify(this.context));\n    const userId = this.context.userId;\n\n    this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n            query {appointments(userId:\"${userId}\")\n            {_id,title,type,date,time,seenTime,checkinTime,location,description,patient{_id,name,consultant{reference{_id,name,role}}},inProgress,attended,important,notes}}\n        `};\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const appointments = resData.data.appointments;\n        console.log(appointments);\n        const responseAlert = JSON.stringify(resData.data).slice(2,15);\n        this.setState({userAlert: responseAlert});\n\n        this.context.appointments = this.state.appointments;\n        if (this.isActive) {\n          this.setState({ appointments: appointments, isLoading: false });\n        }\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n        if (this.isActive) {\n          this.setState({ isLoading: false });\n        }\n      });\n  }\n\n  fetchAppointmentsAsc = () => {\n    console.log(\"'fetch appointments function' context object... \" + JSON.stringify(this.context));\n    const userId = this.context.userId;\n\n    // this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n            query {appointmentsDateAsc(userId:\"${userId}\")\n            {_id,title,type,date,time,seenTime,checkinTime,location,description,patient{_id,name,consultant{reference{_id,name,role}}},inProgress,attended,important,notes}}\n        `};\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const appointments = resData.data.appointmentsDateAsc;\n        console.log(appointments);\n        const responseAlert = JSON.stringify(resData.data).slice(2,15);\n        this.setState({userAlert: responseAlert});\n\n        this.context.appointments = appointments;\n        this.setState({appointments: appointments})\n        // if (this.isActive) {\n        //   this.setState({ appointments: appointments, isLoading: false });\n        // }\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n        // if (this.isActive) {\n        //   this.setState({ isLoading: false });\n        // }\n      });\n  }\n  fetchAppointmentsDesc = () => {\n    console.log(\"'fetch appointments function' context object... \" + JSON.stringify(this.context));\n    const userId = this.context.userId;\n\n    // this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n            query {appointmentsDateDesc(userId:\"${userId}\")\n            {_id,title,type,date,time,seenTime,checkinTime,location,description,patient{_id,name,consultant{reference{_id,name,role}}},inProgress,attended,important,notes}}\n        `};\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const appointments = resData.data.appointmentsDateDesc;\n        console.log(appointments);\n        const responseAlert = JSON.stringify(resData.data).slice(2,15);\n        this.setState({userAlert: responseAlert});\n\n        this.context.appointments = appointments;\n        this.setState({appointments: appointments})\n        // if (this.isActive) {\n        //   this.setState({ appointments: appointments, isLoading: false });\n        // }\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n        // if (this.isActive) {\n        //   this.setState({ isLoading: false });\n        // }\n      });\n  }\n\n  modalDeleteHandler = () => {\n    console.log(\"deleting appointment...selectedAppointment:  \", this.context.selectedAppointment);\n\n    const userId = this.context.userId;\n    const selectedAppointmentId = this.context.selectedAppointment._id;\n\n    if(this.context.user.role !== 'admin') {\n      console.log(\"Not the Admin! No edit permission!!\");\n      this.setState({userAlert: \"Not the Admin! No edit permission!!\"});\n    }\n\n    this.setState({deleting: true});\n\n\n    const requestBody = {\n      query: `\n          mutation {deleteAppointment(userId:\"${userId}\",appointmentId:\"${selectedAppointmentId}\")\n          {_id,title,type,date,time,seenTime,checkinTime,location,description,patient{_id,name,appointments{_id,date,title}},inProgress,attended,important,notes}}\n        `};\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"resData:  \", resData);\n        // console.log(\"resData.data.deleteAppointment:  \", resData.data.deleteAppointment);\n        let deletedAppointment = resData.data.deleteAppointment;\n        console.log(deletedAppointment);\n        const responseAlert = JSON.stringify(resData.data).slice(2,15);\n        this.setState({userAlert: responseAlert});\n\n        let deletedAppointmentId = deletedAppointment._id;\n        deletedAppointment = this.state.appointments.find(e => e._id === deletedAppointmentId);\n        const deletedAppointmentPos = this.state.appointments.indexOf(deletedAppointment);\n        const slicedArray = this.state.appointments.splice(deletedAppointmentPos, 1);\n        console.log(\"deletedAppointment:  \", JSON.stringify(deletedAppointment),\"  deletedUserPos:  \", deletedAppointmentPos, \"  slicedArray:  \", slicedArray);\n\n        this.setState({ deleting: false });\n\n        this.fetchAppointments();\n\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n        if (this.isActive) {\n          this.setState({ deleting: false });\n        }\n      });\n\n\n  }\n\n  updateAppointmentSpecial (event) {\n\n    console.log(\"special field to update:  \", event.target.value);\n    const field = event.target.value;\n    this.setState({ appointmentUpdateField: field});\n\n  }\n\n\n  showDetailHandler = appointmentId => {\n\n    this.setState(prevState => {\n      const selectedAppointment = prevState.appointments.find(e => e._id === appointmentId);\n      this.setState({selectedAppointment: selectedAppointment});\n      this.context.selectedAppointment = selectedAppointment;\n      console.log(\"selectedAppointment:  \", selectedAppointment);\n      return { selecteAppointment: selectedAppointment };\n    });\n  };\n\n\n  fetchAppointmentToday() {\n    console.log(\"fetching todays appts function:  \");\n\n    const token = this.context.token;\n    const userId = this.context.userId;\n\n    const requestBody = {\n      query: `\n          query {getAppointmentToday(userId:\"${userId}\")\n          {_id,title,type,date,time,patient{_id,name},location,description,inProgress,important,attended}}\n        `\n    };\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        this.context.appointmentsToday = resData.data.getAppointmentToday;\n        console.log(\"context today's appts:  \", JSON.stringify(this.context.appointmentsToday));\n\n        const responseAlert = JSON.stringify(resData.data).slice(2,15);\n        this.setState({userAlert: responseAlert});\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n\n  }\n\n\n  fetchAppointmentInProgress() {\n    console.log(\"fetching inProgress appts function:  \");\n\n    const token = this.context.token;\n    const userId = this.context.userId;\n\n    const requestBody = {\n      query: `\n          query {getAppointmentField(userId:\\\"${userId}\\\",field:\\\"inProgress\\\",query:\\\"true\\\"){_id,title,type,date,time,patient{_id,name},location,description,inProgress,important,attended}}\n        `\n    };\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        this.context.appointmentsInProgress = resData.data.getAppointmentField;\n        console.log(\"context in progress appts:  \", JSON.stringify(this.context.appointmentsInProgress));\n\n        const responseAlert = JSON.stringify(resData.data).slice(2,15);\n        this.setState({userAlert: responseAlert});\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n\n  }\n\n\n  componentWillUnmount() {\n    this.isActive = false;\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n\n      <Accordion>\n\n      <Row>\n\n      <Col md={3} className=\"MasterCol1\">\n\n      <AlertBox\n            authUserId={this.context.userId}\n            alert={this.state.userAlert}\n          />\n      <SidebarPage/>\n\n      </Col>\n\n      <Col md={9} className=\"MasterCol2\">\n\n          <Container className=\"containerCombinedDetail\">\n            <Tabs defaultActiveKey=\"appointmentDetail\" id=\"uncontrolled-tab-example\">\n            <Tab eventKey=\"Edit\" title=\"Edit:\" disabled>\n            </Tab>\n              <Tab eventKey=\"appointmentDetail\" title=\"Details\">\n                  {this.state.selectedAppointment === null && (\n                    <Button variant=\"outline-warning\" size=\"lg\">\n                      Select an Appointment from the Master List\n                    </Button>\n                  )}\n                  {\n                    this.state.isLoading === false &&\n                    this.state.selectedAppointment !== null\n                    &&\n                    (\n                      <AppointmentDetail\n                      authUserId={this.context.userId}\n                      appointment={this.state.selectedAppointment}\n                      onEdit={this.startUpdateAppointmentHandler}\n                      canDelete={this.state.canDelete}\n                      onDelete={this.modalDeleteHandler}\n                  />\n                )}\n              </Tab>\n\n              <Tab eventKey=\"appointmentCreate\" title=\"New\">\n              <Button variant=\"outline-primary\" onClick={this.startCreateAppointmentHandler} >Create</Button>\n              {\n                this.state.creating &&\n                this.context.selectedPatient._id !== null\n                && (\n                  <CreateAppointmentForm\n                  canCancel\n                    canConfirm\n                    onCancel={this.modalCancelHandler}\n                    onConfirm={this.modalConfirmHandler}\n                    onSubmit={this.modalConfirmHandler}\n                    confirmText=\"Confirm\"\n                    selectedPatient={this.context.selectedPatient}\n                  />\n              )}\n              </Tab>\n\n              <Tab eventKey=\"appointmentEditBasic\" title=\"Basic\">\n              {this.state.selectedAppointment === null && (\n                <Button variant=\"outline-warning\" size=\"lg\">\n                  Select an Appointment from the Master List\n                </Button>\n              )}\n              {this.state.selectedAppointment !== null && (\n                <Button variant=\"outline-primary\" onClick={this.startUpdateAppointmentHandler}>Edit Basic</Button>\n              )}\n              {this.state.updating &&\n                this.state.selectedAppointment !== null\n                && (\n                <UpdateAppointmentForm\n                authUserId={this.context.userId}\n                canCancel\n                  canConfirm\n                  onCancel={this.modalCancelHandler}\n                  onConfirm={this.modalConfirmUpdateHandler}\n                  confirmText=\"Confirm\"\n                  appointment={this.state.selectedAppointment}\n                />\n              )}\n              </Tab>\n\n              <Tab eventKey=\"appointmentEditField\" title=\"Single Field\">\n              {this.state.selectedAppointment === null && (\n                <Button variant=\"outline-warning\" size=\"lg\">\n                  Select a Patient from the Master List below\n                </Button>\n              )}\n              {this.state.selectedAppointment !== null && (\n                <Button variant=\"outline-primary\" onClick={this.startUpdateAppointmentHandler}>Edit Field</Button>\n              )}\n              {this.state.updating &&\n                this.state.selectedAppointment !== null\n                && (\n                  <UpdateAppointmentFieldForm\n                    authUserId={this.context.userId}\n                    canCancel\n                    canConfirm\n                    onCancel={this.modalCancelHandler}\n                    onConfirm={this.modalConfirmUpdateFieldHandler}\n                    confirmText=\"Confirm\"\n                    appointment={this.state.selectedAppointment}\n                  />\n              )}\n              </Tab>\n\n              <Tab eventKey=\"appointmentEditPatient\" title=\"Patient\">\n              {this.state.selectedAppointment === null && (\n                <Button variant=\"outline-warning\" size=\"lg\">\n                  Select an Appointment from the Master List\n                </Button>\n              )}\n              {this.state.selectedAppointment !== null && (\n                <Button variant=\"outline-primary\" value='patient' onClick={this.updateAppointmentSpecial.bind(this)}>Change Patient:</Button>\n              )}\n              {this.state.selectedAppointment !== null &&\n              this.context.selectedPatient !== null && (\n                <Row>\n                <Col md={8} className=\"updateUserColAdd\">\n                <p>Add Patient: {this.context.selectedPatient.name}</p>\n                <p> To Appointment: {this.state.selectedAppointment.title} ??</p>\n                <Button variant=\"success\" onClick={this.updateAppointmentPatientHandler}>\n                  Yes\n                </Button>\n                </Col>\n                </Row>\n              )}\n              </Tab>\n\n              <Tab eventKey=\"MasterList\" title=\"Master List\">\n              <Container className=\"containerUserMasterList\">\n              <Row className=\"searchListRow\">\n              <Button variant=\"primary\" size=\"sm\" onClick={this.fetchAppointmentsAsc}>\n                 Sort Asc\n               </Button>\n              <Button variant=\"info\" size=\"sm\" onClick={this.fetchAppointmentsDesc}>\n                 Sort Desc\n               </Button>\n              {this.state.isLoading ? (\n                <Spinner />\n              ) :\n              (\n                <AppointmentList\n                  appointments={this.state.appointments}\n                  authUserId={this.context.userId}\n                  onViewDetail={this.showDetailHandler}\n                />\n              )}\n              </Row>\n              </Container>\n              </Tab>\n\n              <Tab eventKey=\"SearchInput\" title=\"Search\">\n              <Container className=\"containerSearchUserInput\">\n              <Row className=\"searchUserRowAdd\">\n              <Button variant=\"primary\" onClick={this.startSearchAppointmentHandler}>Search</Button>\n              </Row>\n\n              <Row className=\"searchUserRowForm\">\n              <Col md={10} className=\"searchUserColForm\">\n              <Tabs defaultActiveKey=\"Field\" id=\"uncontrolled-tab-example\">\n              <Tab eventKey=\"Search\" title=\"Search:\" disabled>\n              </Tab>\n              <Tab eventKey=\"Field\" title=\"Field:\">\n              {this.state.searching === true && (\n                <SearchAppointmentForm\n                authUserId={this.context.userId}\n                canCancel\n                  canConfirm\n                  onCancel={this.modalCancelHandler}\n                  onConfirm={this.modalConfirmSearchHandler}\n                  confirmText=\"Search\"\n                  appointment={this.context.selectedAppointment}\n                />\n              )}\n              </Tab>\n              <Tab eventKey=\"Id\" title=\"Id:\">\n                Search by ID\n                {this.state.searching === true && (\n                  <SearchAppointmentIdForm\n                  authUserId={this.context.userId}\n                  canCancel\n                    canConfirm\n                    onCancel={this.modalCancelHandler}\n                    onConfirm={this.modalConfirmSearchIdHandler}\n                    confirmText=\"Search\"\n                    appointment={this.context.selectedAppointment}\n                  />\n                )}\n              </Tab>\n              <Tab eventKey=\"Patient\" title=\"Patient:\">\n                Search by Patient\n                {this.state.searching === true && (\n                  <SearchAppointmentPatientForm\n                  authUserId={this.context.userId}\n                  canCancel\n                    canConfirm\n                    onCancel={this.modalCancelHandler}\n                    onConfirm={this.modalConfirmSearchPatientHandler}\n                    confirmText=\"Search\"\n                    appointment={this.context.selectedAppointment}\n                  />\n                )}\n              </Tab>\n              <Tab eventKey=\"Date\" title=\"Date:\">\n                Search by Date\n                {this.state.searching === true && (\n                  <SearchAppointmentDateForm\n                  authUserId={this.context.userId}\n                  canCancel\n                    canConfirm\n                    onCancel={this.modalCancelHandler}\n                    onConfirm={this.modalConfirmSearchDateHandler}\n                    confirmText=\"Search\"\n                    appointment={this.context.selectedAppointment}\n                  />\n                )}\n              </Tab>\n              <Tab eventKey=\"Date Range\" title=\"Date Range:\">\n                Search by Date Range\n                {this.state.searching === true && (\n                  <SearchAppointmentDateRangeForm\n                  authUserId={this.context.userId}\n                  canCancel\n                    canConfirm\n                    onCancel={this.modalCancelHandler}\n                    onConfirm={this.modalConfirmSearchDateRangeHandler}\n                    confirmText=\"Search\"\n                    appointment={this.context.selectedAppointment}\n                  />\n                )}\n              </Tab>\n              </Tabs>\n              </Col>\n              <Col md={10}>\n              </Col>\n              </Row>\n              </Container>\n              </Tab>\n\n              <Tab eventKey=\"SearchResult\" title=\"Search Results\">\n              <Container className=\"containerSearchUserResults\">\n              <Row>\n                <Card className=\"searchCard\">\n                  <Card.Body className=\"searchCardBody\">\n                    <Card.Title>Your Search</Card.Title>\n                    <Card.Text>\n                      Field: {this.state.appointmentSearchField}\n                    </Card.Text>\n                    <Card.Text>\n                      Query: {this.state.appointmentSearchQuery}\n                    </Card.Text>\n                  </Card.Body>\n                </Card>\n              </Row>\n              <Row className=\"searchListRow\">\n              {\n                this.state.searchAppointments !== [] && (\n                <SearchAppointmentList\n                  searchAppointments={this.state.searchAppointments}\n                  authUserId={this.context.userId}\n                  onCancel={this.modalCancelHandler}\n                    onViewDetail={this.showDetailHandler}\n                />\n              )}\n              </Row>\n              </Container>\n              </Tab>\n\n            </Tabs>\n          </Container>\n\n      </Col>\n    </Row>\n\n  </Accordion>\n\n        {\n        //   this.state.isLoading === false &&\n        //   (<PatientDetail\n        //     authUserId={this.context.userId}\n        //     patient={this.context.selectedPatient}\n        //     className=\"PatientDetailBox2\"\n        // />)\n      }\n      </React.Fragment>\n    );\n  }\n}\n\nexport default AppointmentsPage;\n","import React from 'react';\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\n\nimport UserAttendanceList from './UserList/UserAttendanceList';\nimport UserLeaveList from './UserList/UserLeaveList';\nimport UserAttachmentList from './UserList/UserAttachmentList';\n\nimport './thisUserProfile.css';\n\nconst thisUserProfile = (props) => {\n\n  const {...user} = props.user;\n  console.log(\"thisUserProfile.props.user:  \" + {...user});\n\n  const authUserId = props.authUserId;\n  const userAddress = user.address;\n  const userAttendance = user.attendance;\n  console.log(\"Profile: userAttendance\", userAttendance);\n  const userLeave = user.leave;\n  console.log(\"Profile: userLeave\", userLeave);\n  const userAttachment = user.attachments;\n  console.log(\"Profile: userAttachment\", userAttachment);\n  const userEmploymentDate = new Date(user.employmentDate.substr(0,10)*1000).toISOString().slice(0,10);\n  const userTerminationDate = new Date(user.terminationDate.substr(0,10)*1000).toISOString().slice(0,10);\n  // const authSelectedUser = JSON.stringify(props.AuthContext.selectedUser);\n  // console.log(props.user.slice(0,5) === '{\"_id' , props.user.slice(0,5));\n\n  return (\n\n  <Tabs defaultActiveKey=\"Demographics\" id=\"uncontrolled-tab-example\">\n    <Tab eventKey=\"\" title=\"Details:\" disabled>\n    </Tab>\n    <Tab eventKey=\"Demographics\" title=\"Demographics\">\n    <Card className=\"UserDetailCard\">\n    <Card.Body>\n      <Card.Title>User Details</Card.Title>\n      <Card.Text>\n        ID: {user._id}\n      </Card.Text>\n      <Card.Text>\n        Name: {user.name}\n      </Card.Text>\n      <Card.Text>\n        Phone: {user.phone}\n      </Card.Text>\n      <Card.Text>\n        Email: {user.email}\n      </Card.Text>\n      <Card.Text>\n        Role: {user.role}\n      </Card.Text>\n      <Card.Text>\n        Start Date: {userEmploymentDate}\n      </Card.Text>\n      <Card.Text>\n        End Date: {userTerminationDate}\n      </Card.Text>\n      <Card.Text>\n        Address:\n      </Card.Text>\n      <Card.Text>\n        Street & Number : {userAddress.number}, {userAddress.street}\n      </Card.Text>\n      <Card.Text>\n        Town : {userAddress.town}\n      </Card.Text>\n      <Card.Text>\n        Parish : {userAddress.parish}\n      </Card.Text>\n      <Card.Text>\n        Post Office : {userAddress.postOffice}\n      </Card.Text>\n    </Card.Body>\n    </Card>\n    </Tab>\n    <Tab eventKey=\"Attendance\" title=\"Attendance\">\n    <Card.Text>\n      Attendance:\n    </Card.Text>\n    <UserAttendanceList\n        userAttendance={userAttendance}\n        authUserId={authUserId}\n        canDelete={props.canDelete}\n        onDelete={props.attendanceDelete}\n      />\n    </Tab>\n    <Tab eventKey=\"Leave\" title=\"Leave\">\n    <Card.Text>\n      Leave:\n    </Card.Text>\n    <UserLeaveList\n        userLeave={userLeave}\n        authUserId={authUserId}\n        canDelete={props.canDelete}\n        onDelete={props.leaveDelete}\n      />\n    </Tab>\n    <Tab eventKey=\"Attachments\" title=\"Attachments\">\n    <Card.Text>\n      Attachments:\n    </Card.Text>\n    <UserAttachmentList\n        userAttachment={userAttachment}\n        authUserId={authUserId}\n        canDelete={props.canDelete}\n        onDelete={props.attachmentDelete}\n      />\n    </Tab>\n  </Tabs>\n  );\n}\n\nexport default thisUserProfile;\n","import React, { Component } from 'react';\nimport UpdateUserForm from '../components/Forms/UpdateUserForm';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Accordion from 'react-bootstrap/Accordion';\nimport Button from 'react-bootstrap/Button';\nimport SidebarPage from './Sidebar';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\n\nimport AlertBox from '../components/AlertBox';\nimport UpdateUserFieldForm from '../components/Forms/UpdateUserFieldForm';\nimport UpdateUserAttendanceForm from '../components/Forms/UpdateUserAttendanceForm';\nimport UpdateUserAttachmentForm from '../components/Forms/UpdateUserAttachmentForm';\nimport UpdateUserLeaveForm from '../components/Forms/UpdateUserLeaveForm';\n\nimport ThisUserProfile from '../components/Users/thisUserProfile';\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\nimport './Users.css';\n\nclass ThisUserPage extends Component {\n  state = {\n    user: null,\n    users: [],\n    updating: false,\n    isLoading: false,\n    userUpdateField: null,\n    userAlert: null,\n    canDelete: null,\n  };\n  isActive = true;\n\n  static contextType = AuthContext;\n\n  // constructor(props) {\n  //   super(props);\n  // }\n\n  componentDidMount() {\n    this.getThisUser();\n    if (this.context.user.name === 'admin579'){\n      this.setState({canDelete: true})\n    }\n  }\n\n  startUpdateUserHandler = () => {\n    this.setState({ updating: true });\n    console.log(\"UpdateUserForm...\");\n  };\n\n\n  modalConfirmUpdateHandler = (event) => {\n    const token = this.context.token;\n    let userId = this.context.userId;\n    let selectedUserId = this.context.selectedUser._id;\n    if(userId !== selectedUserId && this.context.user.role !== 'admin') {\n      console.log(\"Not the creator or Admin! No edit permission!!\");\n      this.setState({userAlert: \"Not the creator or Admin! No edit permission!!\"});\n      selectedUserId = null;\n    }\n    console.log(\"UpdateUserFormData:  \", event.target.formGridEmail.value);\n    this.setState({ updating: false });\n    let email = event.target.formGridEmail.value;\n    let password = event.target.formGridPassword.value;\n    let name = event.target.formGridName.value;\n    let role = this.context.user.role;\n    let dob = event.target.formGridDob.value;\n    let phone = event.target.formGridPhone.value;\n    let addressNumber = event.target.formGridAddressNumber.value;\n    let addressStreet = event.target.formGridAddressStreet.value;\n    let addressTown = event.target.formGridAddressTown.value;\n    let addressParish = event.target.formGridAddressParish.value;\n    let addressPostOffice = event.target.formGridAddressPostOffice.value;\n    let employmentDate = event.target.formGridEmploymentDate.value;\n    let terminationDate = event.target.formGridTerminationDate.value;\n\n    if (email.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      email = this.context.user.email;\n    }\n    if (password.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      password = this.context.user.password;\n    }\n    if (name.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      name = this.context.user.name;\n    }\n    // if (role.trim().length === 0) {\n    //   console.log(\"blank fields detected!!!...filling w/ previous data...\");\n    //   role = this.state.user.role;\n    // }\n    if (dob.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      dob = this.context.user.dob;\n    }\n    if (phone.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      phone = this.context.user.phone;\n    }\n    if (addressNumber.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      addressNumber = this.context.user.address.number;\n    }\n    if (addressStreet.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      addressStreet = this.context.user.address.street;\n    }\n    if (addressTown.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      addressTown = this.context.user.address.town;\n    }\n    if (addressParish.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      addressParish = this.context.user.address.parish;\n    }\n    if (addressPostOffice.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      addressPostOffice = this.context.user.address.postOffice;\n    }\n    if (employmentDate.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      employmentDate = this.context.user.employmentDate;\n    }\n    if (terminationDate.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      terminationDate = this.context.user.terminationDate;\n    }\n\n\n    const user = { email, password, name, role, dob, phone, addressNumber, addressStreet, addressTown, addressParish, addressPostOffice, employmentDate, terminationDate };\n    console.log(`\n      updating user profile...\n      userId: ${userId}\n      email: ${email},\n      password: ${password},\n      name: ${name},\n      role: ${role},\n      dob: ${dob},\n      phone: ${phone},\n      addressNumber: ${addressNumber},\n      addressStreet: ${addressStreet},\n      addressTown: ${addressTown},\n      addressParish: ${addressParish},\n      addressPostOffice: ${addressPostOffice},\n      employmentDate: ${employmentDate},\n      terminationDate: ${terminationDate},\n      `);\n\n    const requestBody = {\n      query: `\n        mutation {updateUser(userId:\\\"${userId}\\\",selectedUserId:\\\"${userId}\\\",userInput: {email:\\\"${email}\\\",password:\\\"${password}\\\",name:\\\"${name}\\\",dob:\\\"${dob}\\\",addressNumber:${addressNumber},addressStreet:\\\"${addressStreet}\\\",addressTown:\\\"${addressTown}\\\",addressParish:\\\"${addressParish}\\\", addressPostOffice:\\\"${addressPostOffice}\\\",phone:\\\"${phone}\\\",role:\\\"${role}\\\",employmentDate:\\\"${employmentDate}\\\",terminationDate:\\\"${terminationDate}\\\"})\n        {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n        `};\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }})\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n\n        const updatedUser = resData.data.updateUser;\n        console.log(\"updatedUser:  \", JSON.stringify(updatedUser));\n        this.state.users.push(updatedUser);\n        this.context.users = this.state.users;\n\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert, user: updatedUser})\n        this.fetchUsers();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n    };\n\n    modalConfirmUpdateFieldHandler = (event) => {\n\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedUserId = this.context.selectedUser._id;\n      if(userId !== selectedUserId && this.context.user.role !== 'admin') {\n        console.log(\"Not the creator or Admin! No edit permission!!\");\n        this.setState({userAlert: \"Not the creator or Admin! No edit permission!!\"});\n        selectedUserId = null;\n      }\n\n        console.log(\"UpdateUserFieldFormData:  \", event.target.formGridField.value);\n        this.setState({ updating: false });\n\n        let field = event.target.formGridField.value;\n        let query = event.target.formGridQuery.value;\n\n        const requestBody = {\n          query:`\n            mutation{updateUserField(userId:\\\"${userId}\\\",selectedUserId:\\\"${userId}\\\",field:\\\"${field}\\\",query:\\\"${query}\\\")\n            {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n          `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            console.log(\"response data... \" + JSON.stringify(resData.data.updateUserField));\n\n            const updatedUserId = resData.data.updateUserField._id;\n            const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n            const updatedUserPos = this.state.users.indexOf(updatedUser);\n            const slicedArray = this.state.users.splice(updatedUserPos, 1);\n            console.log(\"updatedUser:  \", JSON.stringify(updatedUser),\"  updatedUserPos:  \", updatedUserPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.users.push(resData.data.updateUserField);\n            this.context.users = this.state.users;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            this.fetchUsers();\n          })\n          .catch(err => {\n            console.log(err);\n            this.setState({userAlert: err});\n          });\n\n    }\n\n  updateUserAttendanceHandler = (event) => {\n    const token = this.context.token;\n    const userId = this.state.user._id;\n    // let selectedUserId = this.context.selectedUser._id;\n    // if(userId !== selectedUserId && this.context.user.role !== 'admin') {\n    //   console.log(\"Not the creator or Admin! No edit permission!!\");\n    //   selectedUserId = null;\n    // }\n    console.log(\"UpdateUserAttendanceFormData:  \", event.target.formGridAttendanceDate.value);\n\n    this.setState({ updating: false , userUpdateField: null });\n\n    let attendanceDate = event.target.formGridAttendanceDate.value;\n    let attendanceStatus = event.target.formGridAttendanceStatus.value;\n    let attendanceDescription = event.target.formGridAttendanceDescription.value;\n\n    if (attendanceDate.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      attendanceDate = this.context.selectedUser.attendanceDate;\n    }\n    if (attendanceStatus.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      attendanceStatus = this.context.selectedUser.attendanceStatus;\n    }\n    if (attendanceDescription.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      attendanceDescription = this.context.selectedUser.attendanceDescription;\n    }\n\n    const userAttendance = { attendanceDate, attendanceStatus, attendanceDescription }\n    console.log(`\n      adding user attendance item...\n      userId: ${userId},\n      attendanceDate: ${attendanceDate},\n      attendanceStatus: ${attendanceStatus},\n      attendanceDescription: ${attendanceDescription}\n      `);\n\n      const requestBody = {\n        query:`\n          mutation {updateUserAttendance(userId:\"${userId}\", selectedUserId:\"${userId}\",userInput:{attendanceDate:\"${attendanceDate}\",attendanceStatus:\"${attendanceStatus}\",attendanceDescription:\"${attendanceDescription}\"})\n          {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n        `};\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }})\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData.data.updateUserAttendance));\n\n          const updatedUserId = resData.data.updateUserAttendance._id;\n          const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n          const updatedUserPos = this.state.users.indexOf(updatedUser);\n          const slicedArray = this.state.users.splice(updatedUserPos, 1);\n          console.log(\"updatedUser:  \", JSON.stringify(updatedUser),\"  updatedUserPos:  \", updatedUserPos, \"  slicedArray:  \", slicedArray);\n          this.state.users.push(resData.data.updateUserAttendance);\n          this.context.users = this.state.users;\n          const responseAlert = JSON.stringify(resData.data).slice(2,25);\n          this.setState({ userAlert: responseAlert})\n          this.fetchUsers();\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({userAlert: err});\n        });\n  };\n\n\n  updateUserLeaveHandler = (event) => {\n    const token = this.context.token;\n    const userId = this.context.userId;\n    let selectedUserId = this.context.selectedUser._id;\n    if(userId !== selectedUserId && this.context.user.role !== 'admin') {\n      console.log(\"Not the creator or Admin! No edit permission!!\");\n      this.setState({userAlert: \"Not the creator or Admin! No edit permission!!\"});\n      selectedUserId = null;\n    }\n\n    console.log(\"UpdateUserLeaveFormData:  \", event.target.formGridLeaveType.value);\n\n    this.setState({ updating: false , userUpdateField: null });\n\n    let leaveType = event.target.formGridLeaveType.value;\n    let leaveTitle = event.target.formGridLeaveTitle.value;\n    let leaveStartDate = event.target.formGridLeaveStartDate.value;\n    let leaveEndDate = event.target.formGridLeaveEndDate.value;\n\n    if (leaveType.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      leaveType = this.context.selectedUser.leaveType;\n    }\n    if (leaveTitle.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      leaveTitle = this.context.selectedUser.leaveTitle;\n    }\n    if (leaveStartDate.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      leaveStartDate = this.context.selectedUser.leaveStartDate;\n    }\n    if (leaveEndDate.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      leaveEndDate = this.context.selectedUser.leaveEndDate;\n    }\n\n    const userLeave = { leaveType, leaveTitle, leaveStartDate, leaveEndDate }\n    console.log(`\n      adding user attendance item...\n      userId: ${userId},\n      selectedUserId: ${selectedUserId}\n      leave: {\n        type: ${leaveType},\n        title: ${leaveTitle},\n        startDate: ${leaveStartDate},\n        endDate: ${leaveEndDate}\n      }\n      `);\n\n      const requestBody = {\n        query:`\n          mutation {updateUserLeave(userId:\"${userId}\", selectedUserId:\"${userId}\",userInput:{leaveType:\"${leaveType}\",leaveTitle:\"${leaveTitle}\",leaveStartDate:\"${leaveStartDate}\",leaveEndDate:\"${leaveEndDate}\"})\n          {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n        `};\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }})\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData.data));\n\n          const updatedUserId = resData.data.updateUserLeave._id;\n          const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n          const updatedUserPos = this.state.users.indexOf(updatedUser);\n          const slicedArray = this.state.users.splice(updatedUserPos, 1);\n          console.log(\"updatedUser:  \", JSON.stringify(updatedUser),\"  updatedUserPos:  \", updatedUserPos, \"  slicedArray:  \", slicedArray);\n\n          this.state.users.push(resData.data.updateUserLeave);\n          this.context.users = this.state.users;\n          const responseAlert = JSON.stringify(resData.data).slice(2,25);\n          this.setState({ userAlert: responseAlert})\n          this.fetchUsers();\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({userAlert: err});\n        });\n  };\n\n\n  updateUserAttachmentHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedUserId = this.context.selectedUser._id;\n  // if(userId !== selectedUserId && this.context.user.role !== 'admin') {\n  //   console.log(\"Not the creator or Admin! No edit permission!!\");\n  //   selectedUserId = null;\n  // }\n  if (userId !== selectedUserId && this.context.user.role !== \"admin\" ) {\n    console.log(\"Not the creator or Admin! No edit permission!!\");\n    this.setState({userAlert: \"Not the creator or Admin! No edit permission!!\"})\n      selectedUserId = null;\n  }\n\n  console.log(\"UpdateUserAttachmentFormData:  \", event.target.formGridAttachmentName.value);\n\n  this.setState({ updating: false , userUpdateField: null });\n\n  let attachmentName = event.target.formGridAttachmentName.value;\n  let attachmentFormat = event.target.formGridAttachmentFormat.value;\n  let attachmentPath = event.target.formGridAttachmentPath.value;\n\n\n  if (\n    attachmentName.trim().length === 0 ||\n    attachmentFormat.trim().length === 0 ||\n    attachmentPath.trim().length === 0\n) {\n    console.log(\"blank fields detected!!! try again\");\n    return\n  }\n\n  const userAttachment = { attachmentName, attachmentFormat, attachmentPath }\n  console.log(`\n    adding user attendance item...\n    userId: ${userId},\n    selectedUserId: ${selectedUserId}\n    attachmentName: ${attachmentName},\n    attachmentFormat: ${attachmentFormat},\n    attachmentPath: ${attachmentPath}\n    `);\n    this.setState({userAlert: \"adding user attendance item...\"})\n\n    const requestBody = {\n      query:`\n        mutation{updateUserAttachment(userId:\\\"${userId}\\\",selectedUserId:\\\"${userId}\\\",userInput:{attachmentName:\\\"${attachmentName}\\\",attachmentFormat:\\\"${attachmentFormat}\\\",attachmentPath:\\\"${attachmentPath}\\\"})\n        {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n      `};\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data.updateUserAttachment));\n\n        const updatedUserId = resData.data.updateUserAttachment._id;\n        const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n        const updatedUserPos = this.state.users.indexOf(updatedUser);\n        const slicedArray = this.state.users.splice(updatedUserPos, 1);\n        console.log(\"updatedUser:  \", JSON.stringify(updatedUser),\"  updatedUserPos:  \", updatedUserPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.users.push(resData.data.updateUserAttachment);\n        this.context.users = this.state.users;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert})\n        this.fetchUsers();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n\n}\n\n\n  getThisUser() {\n    this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n      query {getThisUser\n        {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n        `};\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }})\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"resdata...\" + JSON.stringify(resData));\n        const thisUser = resData.data.getThisUser;\n        if (this.isActive) {\n\n          this.setState({ user: thisUser, isLoading: false });\n\n          this.context.user = thisUser;\n          console.log(\"this.context.user:  \" + this.context.user.name);\n\n          sessionStorage.setItem('thisUser', JSON.stringify(thisUser));\n        }\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n        if (this.isActive) {\n          this.setState({ isLoading: false });\n        }\n      });\n  }\n\n\n  modalCancelHandler = () => {\n    this.setState({ updating: false  });\n  };\n\n\n  deleteUserAttendanceItem = (props) => {\n\n    let token = this.context.token;\n    let userId = this.context.userId;\n    let selectedUserId = this.state.selectedUser._id;\n\n    console.log(`\n      delete user Attendance item:\n      props: ${JSON.stringify(props)},\n      token: ${token},\n      userId: ${userId},\n      selectedUserId: ${selectedUserId},\n      `);\n  }\n  deleteUserLeaveItem = (props) => {\n\n    let token = this.context.token;\n    let userId = this.context.userId;\n    let selectedUserId = this.state.selectedUser._id;\n\n    console.log(`\n      delete user Leave item:\n      props: ${JSON.stringify(props)},\n      token: ${token},\n      userId: ${userId},\n      selectedUserId: ${selectedUserId},\n      `);\n  }\n  deleteUserAttachmentItem = (props) => {\n\n    let token = this.context.token;\n    let userId = this.context.userId;\n    let selectedUserId = this.state.selectedUser._id;\n\n    console.log(`\n      delete user Attachment item:\n      props: ${JSON.stringify(props)},\n      token: ${token},\n      userId: ${userId},\n      selectedUserId: ${selectedUserId},\n      `);\n  }\n\n\n  updateUserSpecialProfile (event) {\n    console.log(\"special field to update:  \", event.target.value);\n    const field = event.target.value;\n    this.setState({ userUpdateField: field});\n  }\n\n\n  componentWillUnmount() {\n    this.isActive = false;\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n      <Row>\n      <Col md={3} className=\"MasterCol1\">\n      <AlertBox\n        authUserId={this.context.userId}\n        alert={this.state.userAlert}\n      />\n      <SidebarPage\n        you={this.state.user}\n      />\n      </Col>\n\n      <Col md={9} className=\"MasterCol2\">\n        <Container className=\"containerProfile\">\n        <Tabs defaultActiveKey=\"Detail\" id=\"uncontrolled-tab-example2\">\n          <Tab eventKey=\"\" title=\"Edit:\" disabled>\n          </Tab>\n          <Tab eventKey=\"Detail\" title=\"Detail\">\n          {this.state.user !== null && (\n              <ThisUserProfile\n                user={this.state.user}\n                authUserId={this.context.userId}\n                canDelete={this.state.canDelete}\n                attendanceDelete={this.deleteUserAttendanceItem}\n                leaveDelete={this.deleteUserLeaveItem}\n                attachmentDelete={this.deleteUserAttachmentItem}\n              />\n            )}\n          </Tab>\n\n          <Tab eventKey=\"Demographics\" title=\"Demographics\">\n          <Button variant=\"outline-primary\" onClick={this.startUpdateUserHandler}>Demographics</Button>\n          {this.state.updating === true && (\n            <UpdateUserForm\n            canCancelProfile\n              canConfirm\n              onCancel={this.modalCancelHandler}\n              onConfirm={this.modalConfirmUpdateHandler}\n              confirmText=\"Confirm\"\n              user={this.state.user}\n              authUserId={this.context.userId}\n            />\n          )}\n          </Tab>\n\n          <Tab eventKey=\"userEditField\" title=\"Single Field\">\n          {this.state.selectedUser === null && (\n            <Button variant=\"outline-warning\" size=\"lg\">\n              Select a Staff member from the Master List below\n            </Button>\n          )}\n          {this.state.selectedUser !== null && (\n            <Button variant=\"outline-primary\" onClick={this.startUpdateUserHandler}>Edit Field</Button>\n          )}\n          {this.state.updating &&\n            this.state.selectedUser !== null\n            && (\n              <UpdateUserFieldForm\n                authUserId={this.context.userId}\n                canCancel\n                canConfirm\n                onCancel={this.modalCancelHandler}\n                onConfirm={this.modalConfirmUpdateFieldHandler}\n                confirmText=\"Confirm\"\n                user={this.state.selectedUser}\n              />\n          )}\n          </Tab>\n\n          <Tab eventKey=\"Atttendance\" title=\"Atttendance\">\n            <Button variant=\"outline-primary\" value='attendance' onClick={this.updateUserSpecialProfile.bind(this)}>Attendance</Button>\n            {this.state.userUpdateField === 'attendance' && (\n              <UpdateUserAttendanceForm\n              authUserId={this.context.userId}\n              canCancelProfile\n                canConfirm\n                onCancel={this.modalCancelHandler}\n                onConfirm={this.updateUserAttendanceHandler}\n                confirmText=\"Confirm\"\n                user={this.state.selectedUser}\n              />\n            )}\n          </Tab>\n\n          <Tab eventKey=\"Leave\" title=\"Leave\">\n            <Button variant=\"outline-primary\" value='leave' onClick={this.updateUserSpecialProfile.bind(this)}>Leave</Button>\n            {this.state.userUpdateField === 'leave' && (\n              <UpdateUserLeaveForm\n              authUserId={this.context.userId}\n              canCancelProfile\n                canConfirm\n                onCancel={this.modalCancelHandler}\n                onConfirm={this.updateUserLeaveHandler}\n                confirmText=\"Confirm\"\n                user={this.state.selectedUser}\n              />\n            )}\n          </Tab>\n\n          <Tab eventKey=\"Attachment\" title=\"Attachment\">\n          <Button variant=\"outline-primary\" value='attachments' onClick={this.updateUserSpecialProfile.bind(this)}>Attachment</Button>\n          {this.state.userUpdateField === 'attachments' && (\n            <UpdateUserAttachmentForm\n            authUserId={this.context.userId}\n            canCancelProfile\n              canConfirm\n              onCancel={this.modalCancelHandler}\n              onConfirm={this.updateUserAttachmentHandler}\n              confirmText=\"Confirm\"\n              user={this.state.selectedUser}\n            />\n          )}\n          </Tab>\n        </Tabs>\n        </Container>\n      </Col>\n      </Row>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default ThisUserPage;\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport Button from 'react-bootstrap/Button';\n\nimport AuthContext from '../../context/auth-context';\nimport './MainNavigation.css';\n\n\nconst mainNavigation = props => (\n  <AuthContext.Consumer>\n    {context => {\n      return (\n        <header className=\"main-navigation\">\n          <div className=\"main-navigation__logo\">\n            <h1>ENT EMR 0.1.0</h1>\n\n          </div>\n          <nav className=\"main-navigation__items\">\n\n            <ul>\n              {!context.token && (\n                <li>\n                  <NavLink to=\"/auth\">Login</NavLink>\n                </li>\n              )}\n              {!context.token && (\n                <li>\n                  <NavLink to=\"/signup\">Signup</NavLink>\n                </li>\n              )}\n              {context.token && (\n                <React.Fragment>\n                  <li>\n                    <NavLink to=\"/profile\">My Profile</NavLink>\n                  </li>\n                  <li>\n                    <NavLink to=\"/users\">Staff</NavLink>\n                  </li>\n                  <li>\n                    <NavLink to=\"/patients\">Patients</NavLink>\n                  </li>\n                  <li>\n                    <NavLink to=\"/appointments\">Appointments</NavLink>\n                  </li>\n                  <li>\n                    <button onClick={context.logout}>Logout</button>\n                  </li>\n                </React.Fragment>\n              )}\n            </ul>\n          </nav>\n        </header>\n      );\n    }}\n  </AuthContext.Consumer>\n);\n\nexport default mainNavigation;\n","import React, { Component } from 'react';\nimport { BrowserRouter, Route, Redirect, Switch } from 'react-router-dom';\n\nimport AuthPage from './pages/Auth';\nimport SignupPage from './pages/Signup';\nimport UsersPage from './pages/Users';\nimport PatientsPage from './pages/Patients';\nimport AppointmentsPage from './pages/Appointments';\nimport ThisUserPage from './pages/thisUser';\nimport SidebarPage from './pages/Sidebar';\nimport MainNavigation from './components/Navigation/MainNavigation';\nimport AuthContext from './context/auth-context';\n\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    token: null,\n    userId: null,\n    context: this.context,\n  };\n\n  static contextType = AuthContext;\n\n  constructor(props) {\n    super(props);\n    this.sessionStorageAuth = null;\n  }\n\n  login = (token, userId, tokenExpiration) => {\n    this.setState({ token: token, userId: userId });\n  };\n\n  logout = () => {\n    this.setState({ token: null, userId: null });\n    sessionStorage.clear();\n  };\n\n\n  // componentDidMount() {\n  //\n  // }\n\n  render() {\n    return (\n      <BrowserRouter>\n        <React.Fragment>\n          <AuthContext.Provider\n            value={{\n              token: this.state.token,\n              userId: this.state.userId,\n              user: {},\n              users:[],\n              selectedUser: {},\n              selectedPatient: {},\n              selectedAppointment: {},\n              patient: {},\n              appointment: {},\n              appointmentPatientId: null,\n              userUpdateField: null,\n              patientUpdateField: null,\n              appointmentUpdateField: null,\n              appointmentsToday: null,\n              appointmentsWeekImportant: null,\n              appointmentsInProgress: null,\n              userAlert: \"\",\n              visit: null,\n              login: this.login,\n              logout: this.logout\n            }}\n          >\n            <MainNavigation />\n            <main className=\"main-content\">\n              <Switch>\n\n                { // logged in -> pages\n                this.state.token && <Redirect from=\"/\" to=\"/users\" exact />}\n                {this.state.token && (<Route path=\"/users\" component={UsersPage} />)}\n                {this.state.token && (<Route path=\"/patients\" component={PatientsPage} />)}\n                {this.state.token && (<Route path=\"/appointments\" component={AppointmentsPage} />)}\n                {this.state.token && (<Route path=\"/profile\" component={ThisUserPage} />)}\n\n                { // logged in -> users page from login page\n                  this.state.token && (<Redirect from=\"/auth\" to=\"/profile\" exact />)}\n\n                { //if not logged in -> go to login page\n                  !this.state.token && (<Route path=\"/auth\" component={AuthPage} />)}\n                  {!this.state.token && (<Route path=\"/signup\" component={SignupPage} />)}\n                {!this.state.token && <Redirect to=\"/auth\" exact />}\n              </Switch>\n            </main>\n\n          </AuthContext.Provider>\n        </React.Fragment>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\n// Put any other imports below so that CSS from your\n// components takes precedence over default styles.\n\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}