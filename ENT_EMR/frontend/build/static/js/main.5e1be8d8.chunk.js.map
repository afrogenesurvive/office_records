{"version":3,"sources":["context/auth-context.js","components/AlertBox.js","pages/Auth.js","components/Forms/CreateUserForm.js","pages/Signup.js","components/Users/UserList/UserItem/UserItem.js","components/Users/UserList/UserList.js","components/Users/UserList/UserItem/SearchUserItem.js","components/Users/UserList/SearchUserList.js","components/Users/UserList/UserItem/UserAttendanceItem.js","components/Users/UserList/UserAttendanceList.js","components/Users/UserList/UserItem/UserLeaveItem.js","components/Users/UserList/UserLeaveList.js","components/Users/UserList/UserItem/UserAttachmentItem.js","components/Users/UserList/UserAttachmentList.js","components/Users/UserDetail.js","components/Spinner/Spinner.js","components/Appointments/AppointmentList/AppointmentItem/AppointmentTodayItem.js","components/Appointments/AppointmentList/AppointmentTodayList.js","components/Appointments/AppointmentList/AppointmentItem/AppointmentInProgressItem.js","components/Appointments/AppointmentList/AppointmentInProgressList.js","pages/Sidebar.js","components/AttachmentViewer.js","components/PdfCreator.js","components/Forms/UpdateUserForm.js","components/Forms/UpdateUserFieldForm.js","components/Forms/UpdateUserAttendanceForm.js","components/Forms/UpdateUserAttachmentForm.js","components/Forms/UpdateUserLeaveForm.js","components/Forms/SearchUserForm.js","components/Forms/SearchUserIdForm.js","components/Forms/SearchUserNameForm.js","components/Forms/SearchUserAttendanceDateForm.js","components/Forms/SearchUserLeaveDateRangeForm.js","pages/Users.js","components/Patients/PatientList/PatientItem/PatientItem.js","components/Patients/PatientList/PatientList.js","components/Patients/PatientList/PatientItem/PatientAppointmentItem.js","components/Patients/PatientList/PatientAppointmentList.js","components/Patients/PatientList/PatientItem/PatientInsuranceItem.js","components/Patients/PatientList/PatientInsuranceList.js","components/Patients/PatientList/PatientItem/PatientConsultantItem.js","components/Patients/PatientList/PatientConsultantList.js","components/Patients/PatientList/PatientItem/PatientNextOfKinItem.js","components/Patients/PatientList/PatientNextOfKinList.js","components/Patients/PatientList/PatientItem/PatientComplaintItem.js","components/Patients/PatientList/PatientComplaintList.js","components/Patients/PatientList/PatientItem/PatientSurveyItem.js","components/Patients/PatientList/PatientSurveyList.js","components/Patients/PatientList/PatientItem/PatientVitalsItem.js","components/Patients/PatientList/PatientVitalsList.js","components/Patients/PatientList/PatientItem/PatientExaminationItem.js","components/Patients/PatientList/PatientExaminationList.js","components/Patients/PatientList/PatientItem/PatientHistoryItem.js","components/Patients/PatientList/PatientHistoryList.js","components/Patients/PatientList/PatientItem/PatientAllergiesItem.js","components/Patients/PatientList/PatientAllergiesList.js","components/Patients/PatientList/PatientItem/PatientMedicationItem.js","components/Patients/PatientList/PatientMedicationList.js","components/Patients/PatientList/PatientItem/PatientInvestigationItem.js","components/Patients/PatientList/PatientInvestigationList.js","components/Patients/PatientList/PatientItem/PatientDiagnosisItem.js","components/Patients/PatientList/PatientDiagnosisList.js","components/Patients/PatientList/PatientItem/PatientTreatmentItem.js","components/Patients/PatientList/PatientTreatmentList.js","components/Patients/PatientList/PatientItem/PatientBillingItem.js","components/Patients/PatientList/PatientBillingList.js","components/Patients/PatientList/PatientItem/PatientAttachmentItem.js","components/Patients/PatientList/PatientAttachmentsList.js","components/Patients/PatientList/PatientItem/PatientNoteItem.js","components/Patients/PatientList/PatientNotesList.js","components/Patients/PatientList/PatientItem/PatientTagItem.js","components/Patients/PatientList/PatientTagsList.js","components/Patients/PatientList/PatientItem/VisitConsultantItem.js","components/Patients/PatientList/VisitConsultantList.js","components/Patients/PatientList/PatientItem/VisitComplaintItem.js","components/Patients/PatientList/VisitComplaintList.js","components/Patients/PatientList/PatientItem/VisitExaminationItem.js","components/Patients/PatientList/VisitExaminationList.js","components/Patients/PatientList/PatientItem/VisitSurveyItem.js","components/Patients/PatientList/VisitSurveyList.js","components/Patients/PatientList/PatientItem/VisitVitalsItem.js","components/Patients/PatientList/VisitVitalsList.js","components/Patients/PatientList/PatientItem/VisitHistoryItem.js","components/Patients/PatientList/VisitHistoryList.js","components/Patients/PatientList/PatientItem/VisitInvestigationItem.js","components/Patients/PatientList/VisitInvestigationList.js","components/Patients/PatientList/PatientItem/VisitDiagnosisItem.js","components/Patients/PatientList/VisitDiagnosisList.js","components/Patients/PatientList/PatientItem/VisitTreatmentItem.js","components/Patients/PatientList/VisitTreatmentList.js","components/Patients/PatientList/PatientItem/VisitBillingItem.js","components/Patients/PatientList/VisitBillingList.js","components/Patients/PatientVisit.js","components/Forms/SearchPatientVisitForm.js","components/Patients/PatientDetail.js","components/Patients/PatientList/PatientItem/SearchPatientItem.js","components/Patients/PatientList/SearchPatientList.js","components/Forms/SearchPatientForm.js","components/Forms/SearchPatientIdForm.js","components/Forms/SearchPatientNameForm.js","components/Forms/CreatePatientForm.js","components/Forms/UpdatePatientForm.js","components/Forms/UpdatePatientFieldForm.js","components/Forms/UpdatePatientConsultantForm.js","components/Forms/UpdatePatientInsuranceForm.js","components/Forms/UpdatePatientNextOfKinForm.js","components/Forms/UpdatePatientComplaintForm.js","components/Forms/UpdatePatientSurveyForm.js","components/Forms/UpdatePatientVitalsForm.js","components/Forms/UpdatePatientExaminationForm.js","components/Forms/UpdatePatientHistoryForm.js","components/Forms/UpdatePatientAllergiesForm.js","components/Forms/UpdatePatientMedicationForm.js","components/Forms/UpdatePatientInvestigationForm.js","components/Forms/UpdatePatientDiagnosisForm.js","components/Forms/UpdatePatientTreatmentForm.js","components/Forms/UpdatePatientBillingForm.js","components/Forms/UpdatePatientAttachmentForm.js","components/Forms/UpdatePatientNoteForm.js","components/Forms/UpdatePatientTagForm.js","pages/Patients.js","components/Appointments/AppointmentList/AppointmentItem/AppointmentItem.js","components/Appointments/AppointmentList/AppointmentList.js","components/Appointments/AppointmentList/AppointmentItem/AppointmentNoteItem.js","components/Appointments/AppointmentList/AppointmentNoteList.js","components/Appointments/AppointmentDetail.js","components/Appointments/AppointmentList/AppointmentItem/SearchAppointmentItem.js","components/Appointments/AppointmentList/SearchAppointmentList.js","components/Forms/SearchAppointmentForm.js","components/Forms/SearchAppointmentIdForm.js","components/Forms/SearchAppointmentPatientForm.js","components/Forms/SearchAppointmentDateForm.js","components/Forms/SearchAppointmentDateRangeForm.js","components/Forms/CreateAppointmentForm.js","components/Forms/UpdateAppointmentForm.js","components/Forms/UpdateAppointmentFieldForm.js","pages/Appointments.js","components/Users/thisUserProfile.js","pages/thisUser.js","components/Navigation/MainNavigation.js","App.js","index.js"],"names":["React","createContext","token","userId","user","users","selectedUser","selectedPatient","selectedAppointment","patient","appointment","appointmentPatientId","userUpdateField","patientUpdateField","appointmentUpdateField","appointmentsToday","appointmentsWeekImportant","appointmentsInProgress","userAlert","visit","file","fancyDate","creds","login","tokenExpiration","logout","AlertBox","props","alert","console","log","className","Alert","variant","AuthPage","state","submitHandler","event","preventDefault","email","target","formBasicEmail","value","password","formBasicPassword","trim","length","requestBody","query","fetch","method","body","JSON","stringify","headers","then","res","status","Error","json","resData","responseAlert","data","slice","setState","context","catch","err","Row","authUserId","this","Form","onSubmit","Group","controlId","Label","Control","type","placeholder","Text","Button","size","to","Component","contextType","AuthContext","CreateUserForm","onConfirm","as","Col","canCancel","Accordion","Toggle","eventKey","onClick","onCancel","canConfirm","successText","SignupPage","success","modalConfirmHandler","formGridEmail","creating","formGridPassword","name","formGridName","role","formGridRole","dob","formGridDob","phone","formGridPhone","addressNumber","formGridAddressNumber","addressStreet","formGridAddressStreet","addressTown","formGridAddressTown","addressParish","formGridAddressParish","addressPostOffice","formGridAddressPostOffice","employmentDate","formGridEmploymentDate","terminationDate","formGridTerminationDate","Authorization","Fragment","md","confirmText","userItem","key","onDetail","bind","_id","userList","map","onViewDetail","searchUserItem","searchUserList","searchUsers","SearchUserItem","userAttendanceItem","Card","Body","Title","date","description","Link","href","canDelete","onDelete","attendance","userAttendanceList","userAttendance","userAttendanceDate","Date","substr","toISOString","UserAttendanceItem","userLeaveItem","startDate","endDate","leave","userLeaveList","userLeave","userLeaveStartDate","userLeaveEndDate","UserLeaveItem","userAttachmentItem","format","path","attachment","onViewAttachment","userAttachmentList","userAttachment","UserAttachmentItem","UserDetail","attachments","userEmploymentDate","userTerminationDate","Tabs","defaultActiveKey","id","Tab","title","onCreatePdf","UserAttendanceList","attendanceDelete","UserLeaveList","leaveDelete","UserAttachmentList","attachmentDelete","spinner","appointmentTodayItem","time","appointmentTodayList","appointmentToday","appointmentTodayDate","AppointmentTodayItem","appointmentInProgressItem","appointmentInProgressList","appointmentInProgress","appointmentInProgressDate","AppointmentInProgressItem","SidebarPage","authContext","_currentValue","isActive","Container","border","Subtitle","AppointmentTodayList","AppointmentInProgressList","AttachmentViewer","fileType","attachmentType","onCloseAttachmentView","attachmentFile","filePath","PdfCreator","onClosePdfCreator","pdfData","UpdateUserForm","address","number","street","town","parish","postOffice","canCancelProfile","UpdateUserFieldForm","UpdateUserAttendanceForm","Check","label","rows","UpdateUserAttachmentForm","onChange","e","files","UpdateUserLeaveForm","SearchUserForm","SearchUserIdForm","SearchUserNameForm","SearchUserAttendanceDateForm","SearchUserLeaveDateRangeForm","UsersPage","updating","deleting","searching","isLoading","isSorting","userSearchField","userSearchQuery","showAttachment","showThisAttachmentFile","showThisAttachmentType","createPdf","startCreateUserHandler","startUpdateUserHandler","startSearchUserHandler","createUser","prevState","updatedUsers","push","modalConfirmUpdateHandler","selectedUserId","updatedUser","updateUser","fetchUsers","modalConfirmUpdateFieldHandler","formGridField","formGridFieldSelect","field","formGridQuery","updateUserField","updatedUserId","find","updatedUserPos","indexOf","slicedArray","splice","updateUserAttendanceHandler","attendanceDate","attendanceStatus","formGridAttendanceStatus","attendanceDescription","formGridAttendanceDescription","updateUserAttendance","updateUserAttachmentHandler","attachmentFormat","formGridAttachmentFormat","attachmentPath","formGridAttachmentPath","config","bucketName","dirName","region","accessKeyId","secretAccessKey","ReactS3Client","S3","newFileName","attachmentName","uploadFile","error","updateUserAttachment","updateUserLeaveHandler","formGridLeaveType","leaveType","leaveTitle","formGridLeaveTitle","leaveStartDate","formGridLeaveStartDate","leaveEndDate","formGridLeaveEndDate","updateUserLeave","modalConfirmSearchHandler","formBasicField","formBasicQuery","formBasicFieldSelect","search","getUserField","modalConfirmSearchIdHandler","formBasicId","getUserId","modalConfirmSearchAttendanceDateHandler","formBasicDate","getUserAttendanceDate","modalConfirmSearchLeaveDateRangeHandler","formBasicStartDate","formBasicEndDate","getUserLeaveDateRange","modalConfirmSearchNameHandler","formBasicName","regex","RegExp","result","filter","match","modalCancelHandler","fetchUsersAsc","usersNameAsc","fetchUsersDesc","usersNameDesc","modalDeleteHandler","deletedUser","deleteUser","deletedUserId","deletedUserPos","deleteUserAttendanceItem","deleteUserAttendance","deleteUserLeaveItem","deleteUserLeave","deleteUserAttachmentItem","filename","S3FileUpload","deleteFile","response","deleteUserAttachment","showDetailHandler","closeAttachmentView","closePdfCreator","sm","Nav","Item","disabled","Content","Pane","onEdit","updateUserSpecial","SearchUserList","patientItem","patientId","registrationDate","patientList","patients","patientRegistrationDate","PatientItem","patientAppointmentItem","location","patientAppointmentList","patientAppointment","patientAppointmentDate","PatientAppointmentItem","patientInsuranceItem","company","expiry","subscriber","insurance","patientInsuranceList","patientInsurance","patientInsuranceExpiry","PatientInsuranceItem","patientConsultantItem","referenceId","consultant","patientConsultantList","patientConsultant","consultantDate","consultantId","undefined","consultantName","consultantRole","reference","PatientConsultantItem","referenceName","referenceRole","patientNextOfKinItem","nextOfKin","patientNextOfKinList","patientNextOfKin","PatientNextOfKinItem","contact","patientComplaintItem","anamnesis","complaint","patientComplaintList","patientComplaint","patientComplaintDate","PatientComplaintItem","patientSurveyItem","survey","patientSurveyList","patientSurvey","patientSurveyDate","PatientSurveyItem","patientVitalsItem","pr","bp1","bp2","rr","temp","ps02","height","weight","Bmi","urineType","urineValue","vitals","patientVitalsList","patientVitals","patientVitalsDate","PatientVitalsItem","bmi","urine","patientExaminationItem","general","area","measure","followUp","examination","patientExaminationList","patientExamination","patientExaminationDate","PatientExaminationItem","patientHistoryItem","history","patientHistoryList","patientHistory","patientHistoryDate","PatientHistoryItem","patientAllergiesItem","allergies","patientAllergiesList","patientAllergies","PatientAllergiesItem","patientMedicationItem","medication","patientMedicationList","patientMedication","PatientMedicationItem","patientInvestigationItem","investigation","patientInvestigationList","patientInvestigation","patientInvestigationDate","PatientInvestigationItem","patientDiagnosisItem","diagnosis","patientDiagnosisList","patientDiagnosis","patientDiagnosisDate","PatientDiagnosisItem","patientTreatmentItem","dose","frequency","treatment","patientTreatmentList","patientTreatment","patientTreatmentDate","PatientTreatmentItem","patientBillingItem","amount","paid","notes","billing","patientBillingList","patientBilling","patientBillingDate","PatientBillingItem","patientAttachmentItem","patientAttachmentsList","patientAttachments","PatientAttachmentItem","patientNoteItem","note","patientNotesList","patientNotes","PatientNoteItem","patientTagItem","tag","patientTagsList","patientTags","PatientTagItem","VisitConsultantItem","visitConsultantList","consultantItem","visitConsultantDate","consultantReference","VisitComplaintItem","visitComplaintList","complaintItem","visitComplaintDate","complaintAttachment","VisitExaminationItem","visitExaminationList","examinationItem","visitExaminationDate","examinationAttachment","VisitSurveyItem","visitSurveyList","surveyItem","visitSurveyDate","surveyAttachment","VisitVitalsItem","visitVitalsList","vitalsItem","visitVitalsDate","vitalsUrine","VisitHistoryItem","visitHistoryList","historyItem","visitHistoryDate","historyAttachment","VisitInvestigationItem","visitInvestigationList","investigationItem","visitInvestigationDate","investigationAttachment","VisitDiagnosisItem","visitDiagnosisList","diagnosisItem","visitDiagnosisDate","diagnosisAttachment","visitTreatmentList","treatmentItem","visitTreatmentDate","treatmentAttachment","VisitTreatmentItem","VisitBillingItem","visitBillingList","billingItem","visitBillingDate","billingAttachment","PatientVisit","patientName","VisitConsultantList","VisitComplaintList","VisitExaminationList","VisitSurveyList","VisitVitalsList","VisitHistoryList","VisitInvestigationList","VisitDiagnosisList","VisitTreatmentList","VisitBillingList","SearchPatientVisitForm","onGetVisit","PatientDetail","appointments","complaints","surveys","tags","patientDob","patientReferralDate","referralDate","patientExpirationDate","expirationDate","age","gender","occupation","employer","referringDoctor","attendingPhysician","PatientAppointmentList","PatientConsultantList","consultantDelete","PatientInsuranceList","insuranceDelete","PatientNextOfKinList","nextOfKinDelete","PatientComplaintList","complaintDelete","PatientSurveyList","surveyDelete","PatientVitalsList","vitalsDelete","PatientExaminationList","examinationDelete","PatientHistoryList","historyDelete","PatientAllergiesList","allergiesDelete","PatientMedicationList","medicationDelete","PatientInvestigationList","investigationDelete","PatientDiagnosisList","diagnosisDelete","PatientTreatmentList","treatmentDelete","PatientBillingList","billingDelete","PatientAttachmentsList","PatientNotesList","noteDelete","PatientTagsList","tagDelete","searchPatientItem","searchPatientList","searchPatients","SearchPatientItem","SearchPatientForm","SearchPatientIdForm","SearchPatientNameForm","CreatePatientForm","UpdatePatientForm","UpdatePatientFieldForm","UpdatePatientConsultantForm","UpdatePatientInsuranceForm","tas","UpdatePatientNextOfKinForm","UpdatePatientComplaintForm","UpdatePatientSurveyForm","UpdatePatientVitalsForm","UpdatePatientExaminationForm","UpdatePatientHistoryForm","UpdatePatientAllergiesForm","UpdatePatientMedicationForm","UpdatePatientInvestigationForm","UpdatePatientDiagnosisForm","UpdatePatientTreatmentForm","UpdatePatientBillingForm","UpdatePatientAttachmentForm","UpdatePatientNoteForm","UpdatePatientTagForm","PatientsPage","updatingArray","patientSearchField","patientSearchQuery","startCreatePatientHandler","startUpdatePatientHandler","startSearchPatientHandler","formGridTitle","formGridAge","formGridGender","contactPhone","formGridContactPhone","contactEmail","formGridContactEmail","formGridRegistrationDate","formGridReferralDate","formGridExpirationDate","attendingPhysicianName","formGridAttendingPhysicianName","attendingPhysicianEmail","formGridAttendingPhysicianEmail","attendingPhysicianPhone","formGridAttendingPhysicianPhone","referringDoctorName","formGridReferringDoctorName","referringDoctorEmail","formGridReferringDoctorEmail","referringDoctorPhone","formGridReferringDoctorPhone","occupationRole","formGridOccupationRole","occupationEmployer","formGridOccupationEmployer","occupationEmployerContactPhone","formGridOccupationEmployerContactPhone","occupationEmployerContactEmail","formGridOccupationEmployerContactEmail","createPatient","newPatient","updatedPatients","selectedPatientId","updatedPatientId","updatePatient","updatedPatient","updatedPatientPos","fetchPatients","updatePatientField","updatePatientConsultantHandler","patientConsultantReference","formGridConsultantDate","updatePatientConsultant","updatePatientInsuranceHandler","formGridInsuranceCompany","insuranceCompany","insuranceNumber","formGridInsuranceNumber","insuranceExpiry","formGridInsuranceExpiry","insuranceDescription","formGridInsuranceDescription","insuranceSubscriberCompany","formGridInsuranceSubscriberCompany","insuranceSubscriberDescription","formGridInsuranceSubscriberDescription","updatePatientInsurance","updatePatientNextOfKinHandler","formGridNextOfKinName","nextOfKinName","nextOfKinPhone","formGridNextOfKinPhone","nextOfKinEmail","formGridNextOfKinEmail","updatePatientNextOfKin","updatePatientComplaintHandler","formGridComplaintTitle","complaintTitle","complaintDate","formGridComplaintDate","complaintDescription","formGridComplaintDescription","complaintAnamnesis","formGridComplaintAnamnesis","complaintAttachmentFormat","formGridComplaintAttachmentFormat","complaintAttachmentPath","formGridComplaintAttachmentPath","complaintAttachmentName","updatePatientComplaint","updatePatientSurveyHandler","formGridSurveyTitle","surveyDate","formGridSurveyDate","surveyTitle","surveyDescription","formGridSurveyDescription","surveyAttachmentFormat","formGridSurveyAttachmentFormat","surveyAttachmentPath","formGridSurveyAttachmentPath","surveyAttachmentName","updatePatientSurvey","updatePatientVitalsHandler","formGridVitalsDate","vitalsDate","vitalsPr","formGridVitalsPr","vitalsBp1","formGridVitalsBp1","vitalsBp2","formGridVitalsBp2","vitalsRr","formGridVitalsRr","vitalsTemp","formGridVitalsTemp","vitalsPs02","formGridVitalsPs02","vitalsHeight","formGridVitalsHeight","vitalsWeight","formGridVitalsWeight","vitalsBmi","formGridVitalsBmi","vitalsUrineType","formGridVitalsUrineType","vitalsUrineValue","formGridVitalsUrineValue","updatePatientVitals","updatePatientExaminationHandler","formGridExaminationArea","examinationDate","formGridExaminationDate","examinationGeneral","formGridExaminationGeneral","examinationArea","formGridExaminationAreaSelect","examinationType","formGridExaminationType","examinationMeasure","formGridExaminationMeasure","examinationValue","formGridExaminationValue","examinationDescription","formGridExaminationDescription","examinationFollowUp","formGridExaminationFollowUp","examinationAttachmentFormat","formGridExaminationAttachmentFormat","examinationAttachmentPath","formGridExaminationAttachmentPath","examinationAttachmentName","updatePatientExamination","updatePatientHistoryHandler","formGridHistoryTitle","historyType","formGridHistoryType","historyDate","formGridHistoryDate","historyTitle","historyDescription","formGridHistoryDescription","historyAttachmentFormat","formGridHistoryAttachmentFormat","historyAttachmentPath","formGridHistoryAttachmentPath","historyAttachmentName","updatePatientHistory","updatePatientAllergiesHandler","formGridAllergiesTitle","allergiesTitle","allergiesType","formGridAllergiesTypeSelect","formGridAllergiesType","allergiesDescription","formGridAllergiesDescription","allergiesAttachmentFormat","formGridAllergiesAttachmentFormat","allergiesAttachmentPath","formGridAllergiesAttachmentPath","allergiesAttachmentName","updatePatientAllergies","updatePatientMedicationHandler","formGridMedicationTitle","medicationTitle","medicationType","formGridMedicationType","medicationDescription","formGridMedicationDescription","medicationAttachmentFormat","formGridMedicationAttachmentFormat","medicationAttachmentPath","formGridMedicationAttachmentPath","medicationAttachmentName","updatePatientMedication","updatePatientInvestigationHandler","formGridInvestigationTitle","investigationDate","formGridInvestigationDate","investigationTitle","investigationType","formGridInvestigationTypeSelect","formGridInvestigationType","investigationDescription","formGridInvestigationDescription","investigationAttachmentFormat","formGridInvestigationAttachmentFormat","investigationAttachmentPath","formGridInvestigationAttachmentPath","investigationAttachmentName","updatePatientInvestigation","updatePatientDiagnosisHandler","formGridDiagnosisTitle","diagnosisDate","formGridDiagnosisDate","diagnosisTitle","diagnosisType","formGridDiagnosisType","diagnosisDescription","formGridDiagnosisDescription","diagnosisAttachmentFormat","formGridDiagnosisAttachmentFormat","diagnosisAttachmentPath","formGridDiagnosisAttachmentPath","diagnosisAttachmentName","updatePatientDiagnosis","updatePatientTreatmentHandler","formGridTreatmentTitle","treatmentDate","formGridTreatmentDate","treatmentTitle","treatmentDescription","formGridTreatmentDescription","treatmentDose","formGridTreatmentDose","treatmentFrequency","formGridTreatmentFrequency","treatmentType","formGridTreatmentType","formGridTreatmentTypeSelect","treatmentAttachmentFormat","formGridTreatmentAttachmentFormat","treatmentAttachmentPath","formGridTreatmentAttachmentPath","treatmentAttachmentName","updatePatientTreatment","updatePatientBillingHandler","formGridBillingTitle","billingDate","formGridBillingDate","billingTitle","billingType","formGridBillingType","billingDescription","formGridBillingDescription","billingAmount","formGridBillingAmount","billingPaid","formGridBillingPaid","billingNotes","formGridBillingNotes","billingAttachmentFormat","formGridBillingAttachmentFormat","billingAttachmentPath","formGridBillingAttachmentPath","billingAttachmentName","updatePatientBilling","updatePatientAttachmentHandler","formGridPatientAttachmentFormat","formGridPatientAttachmentPath","updatePatientAttachment","updatePatientNoteHandler","formGridNote","updatePatientNotes","updatePatientTagHandler","formGridTag","updatePatientTags","getPatientField","getPatientId","modalConfirmSearchVisitHandler","getPatientVisit","formBasicVisitDate","visitDate","substring","visitSurveys","x","visitConsultants","visitComplaints","visitVitals","visitExaminations","visitHistory","visitInvestigations","visitDiagnosis","visitTreatments","visitBilling","fetchPatientsAsc","patientsNameAsc","fetchPatientsDesc","patientsNameDesc","deletedPatient","deletePatient","deletedPatientId","deletedPatientPos","deletePatientInsuranceItem","deletePatientInsurance","deletePatientConsultantItem","deletePatientConsultant","deletePatientNextOfKinItem","deletePatientNextOfKin","deletePatientComplaintItem","deletePatientComplaint","deletePatientSurveyItem","deletePatientSurvey","deletePatientVitalsItem","deletePatientVitals","deletePatientExaminationItem","deletePatientExamination","deletePatientHistoryItem","deletePatientHistory","deletePatientAllergiesItem","deletePatientAllergies","deletePatientMedicationItem","deletePatientMedication","deletePatientInvestigationItem","deletePatientInvestigation","deletePatientDiagnosisItem","deletePatientDiagnosis","deletePatientTreatmentItem","deletePatientTreatment","deletePatientBillingItem","deletePatientBilling","deletePatientAttachmentItem","deletePatientAttachment","deletePatientNoteItem","deletePatientTagItem","nameElRef","createRef","updatePatientSpecial","PatientList","SearchPatientList","appointmentItem","appointmentId","appointmentList","appointmentDate","appointmentPatient","AppointmentItem","appointmentNoteItem","appointmentNoteList","appointmentNote","AppointmentNoteItem","AppointmentDetail","appointmentPatientConsultant","seenTime","checkinTime","inProgress","important","attended","AppointmentNoteList","searchAppointmentItem","searchAppointmentList","searchAppointments","SearchAppointmentItem","SearchAppointmentForm","SearchAppointmentIdForm","SearchAppointmentPatientForm","SearchAppointmentDateForm","SearchAppointmentDateRangeForm","CreateAppointmentForm","UpdateAppointmentForm","UpdateAppointmentFieldForm","AppointmentsPage","appointmentSearchField","appointmentSearchQuery","startCreateAppointmentHandler","startUpdateAppointmentHandler","startSearchAppointmentHandler","formGridType","formGridDate","formGridTime","formGridSeenTime","formGridCheckinTime","formGridLocation","formGridDescription","formGridInProgress","formGridAttended","formGridImportant","createAppointment","updatedAppointments","updatedAppointmentId","updateAppointment","updatedAppointment","updatedAppointmentPos","fetchAppointments","updateAppointmentPatientHandler","selectedAppointmentId","updateAppointmentPatient","updateAppointmentField","getAppointmentField","getAppointmentId","modalConfirmSearchPatientHandler","formBasicPatientId","getAppointmentPatient","searchApointments","modalConfirmSearchDateHandler","getAppointmentDate","modalConfirmSearchDateRangeHandler","appointmentStartDate","appointmentEndDate","getApointmentId","fetchAppointmentsAsc","appointmentsDateAsc","fetchAppointmentsDesc","appointmentsDateDesc","deletedAppointment","deleteAppointment","deletedAppointmentId","deletedAppointmentPos","selecteAppointment","fetchAppointmentToday","fetchAppointmentInProgress","getAppointmentToday","selectedstate","updateAppointmentSpecial","AppointmentList","SearchAppointmentList","thisUserProfile","userAddress","ThisUserPage","getThisUser","formGridAttendanceDate","thisUser","sessionStorage","setItem","getCreds","you","updateUserSpecialProfile","mainNavigation","Consumer","App","clear","sessionStorageAuth","Provider","from","exact","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5e1be8d8.chunk.js","sourcesContent":["import React from 'react';\n\nexport default React.createContext({\n    token: null,\n    userId: null,\n    user: {},\n    users:[],\n    selectedUser: {},\n    selectedPatient: {},\n    selectedAppointment: {},\n    patient: {},\n    appointment: {},\n    appointmentPatientId: null,\n    userUpdateField: null,\n    patientUpdateField: null,\n    appointmentUpdateField: null,\n    appointmentsToday: null,\n    appointmentsWeekImportant: null,\n    appointmentsInProgress: null,\n    userAlert: null,\n    visit: null,\n    file: null,\n    fancyDate: null,\n    creds: null,\n    login: (token, userId, tokenExpiration) => {},\n    logout: () => {}\n});\n","\nimport React from 'react';\nimport Alert from 'react-bootstrap/Alert'\n\nimport './alertBox.css'\n\nconst AlertBox = (props) => {\n\n  let alert = \"Alerts shown here\";\n  if (props.alert !== null) {\n    // console.log(\"alert incoming!!\");\n    alert = '\"'+props.alert+'\"';\n  }\n\n  console.log(`\n      alert: ${alert},\n    `);\n\nreturn (\n  <div className=\"alertBox\">\n  <Alert variant=\"warning\">\n  {alert}\n  </Alert>\n  </div>\n)\n\n}\n\nexport default AlertBox;\n","import React, { Component } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport { NavLink } from 'react-router-dom';\nimport Form from 'react-bootstrap/Form';\nimport Row from 'react-bootstrap/Row';\n\n\nimport './Auth.css';\nimport AuthContext from '../context/auth-context';\nimport AlertBox from '../components/AlertBox';\n\n\nclass AuthPage extends Component {\n  state = {\n    userAlert: null,\n  };\n  static contextType = AuthContext;\n\n  // constructor(props) {\n  //   super(props);\n  // }\n\n  // switchModeHandler = () => {\n  //   this.setState(prevState => {\n  //     return { isLogin: !prevState.isLogin };\n  //   });\n  // };\n\n\n  submitHandler = event => {\n    console.log(\"login function...\");\n    event.preventDefault();\n    const email = event.target.formBasicEmail.value;\n    const password = event.target.formBasicPassword.value;\n\n    if (email.trim().length === 0 || password.trim().length === 0) {\n      return;\n    }\n\n    let requestBody = {\n      query: `\n        query {\n          login(email: \"${email}\", password: \"${password}\") {\n            userId\n            token\n            tokenExpiration\n          }\n        }\n      `};\n\n    // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          // this.context.userAlert = 'Failed!';\n          throw new Error('Failed!');\n        }\n        // this.context.userAlert = 'Failed!';\n        return res.json();\n      })\n      .then(resData => {\n        const responseAlert = JSON.stringify(resData.data).slice(2,25)\n        console.log(`\n          resData slice: ${responseAlert},\n          resData: ${JSON.stringify(resData.data)},\n          `);\n\n          this.setState({userAlert: responseAlert})\n        if (resData.data.login.token) {\n          this.context.login(\n            resData.data.login.token,\n            resData.data.login.userId,\n            resData.data.login.tokenExpiration\n          );\n\n          // const sessionStorageLoginInfo = {\n          //   token: resData.data.login.token,\n          //   userId: resData.data.login.userId,\n          //   tokenExpiration: resData.data.login.tokenExpiration\n          // };\n\n          // sessionStorage.setItem('login info', sessionStorageLoginInfo);\n          // sessionStorage.setItem('login info', JSON.stringify(sessionStorageLoginInfo));\n\n        }\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n        // this.context.userAlert = err;\n        // console.log(`\n        //   err: ${this.context.userAlert}\n        //   `);\n      });\n  };\n\n  render() {\n    return (\n      <Row>\n      <AlertBox\n        authUserId={this.context.userId}\n        alert={this.state.userAlert}\n      />\n\n\n      <Form className=\"auth-form\" onSubmit={this.submitHandler}>\n      <Form.Group controlId=\"formBasicEmail\">\n        <Form.Label>Email address</Form.Label>\n        <Form.Control type=\"email\" placeholder=\"Enter email\"/>\n        <Form.Text className=\"text-muted\">\n          We'll never share your email with anyone else.\n        </Form.Text>\n      </Form.Group>\n\n      <Form.Group controlId=\"formBasicPassword\">\n        <Form.Label>Password</Form.Label>\n        <Form.Control type=\"password\" placeholder=\"Password\" />\n      </Form.Group>\n      <Button variant=\"outline-success\" type=\"submit\" className=\"loginButton\" size=\"lg\">\n        Login\n      </Button>\n\n      <Button variant=\"outline-warning\" className=\"loginButton\" size=\"lg\">\n        <NavLink to=\"/signup\">Signup</NavLink>\n      </Button>\n    </Form>\n\n      </Row>\n\n\n    );\n  }\n}\n\nexport default AuthPage;\n","import React, {useState} from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\n// import FormCheck from 'react-bootstrap/FormCheck'\n// import { NavLink } from 'react-router-dom';\nimport Accordion from 'react-bootstrap/Accordion';\n// import AuthContext from '../../context/auth-context';\nimport DatePicker from \"react-datepicker\";\n\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport './CreateUserForm.css';\n\nconst CreateUserForm = (props) => {\n\n  console.log(\"CreateUserForm...\", {...props});\n  // const [startDate, setStartDate] = useState(new Date());\nreturn (\n<div className=\"CreateFormContainer\">\n<Form onSubmit={props.onConfirm}>\n<Form.Row>\n  <Form.Group as={Col} controlId=\"formGridEmail\">\n    <Form.Label>Email</Form.Label>\n    <Form.Control type=\"email\" placeholder=\"Enter email\"/>\n  </Form.Group>\n\n  <Form.Group as={Col} controlId=\"formGridPassword\">\n    <Form.Label>Password</Form.Label>\n    <Form.Control type=\"password\" placeholder=\"Password\"/>\n  </Form.Group>\n</Form.Row>\n\n<Form.Row>\n\n<Form.Group as={Col} controlId=\"formGridName\">\n  <Form.Label>Name</Form.Label>\n  <Form.Control type=\"text\" placeholder=\"Name\" />\n</Form.Group>\n\n\n<Form.Group as={Col} controlId=\"formGridRole\">\n  <Form.Label>Role</Form.Label>\n  <Form.Control as=\"select\">\n  <option>guest</option>\n  <option>nurse</option>\n  <option>doctor</option>\n  <option>staff</option>\n\n  </Form.Control>\n</Form.Group>\n\n<Form.Group as={Col} controlId=\"formGridPhone\">\n  <Form.Label>Phone</Form.Label>\n  <Form.Control type=\"number\" placeholder=\"phone\"/>\n</Form.Group>\n</Form.Row>\n\n<Form.Row>\n<Form.Group as={Col} controlId=\"formGridDob\">\n  <Form.Label>D.O.B</Form.Label>\n  <Form.Control type=\"date\" placeholder=\"Date of Birth\"/>\n</Form.Group>\n\n  {\n    // <DatePicker className=\"calendarDob\"\n    //   selected={AuthContext._currentValue.fancyDate}\n    //   onChange={(e) => {console.log(e);AuthContext._currentValue.fancyDate = e}}\n    // />\n  }\n\n<Form.Group as={Col} controlId=\"formGridEmploymentDate\">\n  <Form.Label>Employment Date</Form.Label>\n  <Form.Control type=\"date\" placeholder=\"employmentDate\" />\n</Form.Group>\n\n<Form.Group as={Col} controlId=\"formGridTerminationDate\">\n  <Form.Label>Termination Date</Form.Label>\n  <Form.Control type=\"date\" placeholder=\"terminationDate\" />\n</Form.Group>\n</Form.Row>\n\n<Form.Row>\n<Form.Group as={Col} controlId=\"formGridAddressNumber\">\n  <Form.Label>Street No.</Form.Label>\n  <Form.Control type=\"number\" placeholder=\"addressNumber\"/>\n</Form.Group>\n\n<Form.Group as={Col} controlId=\"formGridAddressStreet\">\n  <Form.Label>Street Name</Form.Label>\n  <Form.Control type=\"text\" placeholder=\"addressStreet\"/>\n</Form.Group>\n\n<Form.Group as={Col} controlId=\"formGridAddressTown\">\n  <Form.Label>Town</Form.Label>\n  <Form.Control type=\"text\" placeholder=\"addressTown\"/>\n</Form.Group>\n</Form.Row>\n\n<Form.Row>\n<Form.Group as={Col} controlId=\"formGridAddressParish\">\n  <Form.Label>Parish</Form.Label>\n  <Form.Control type=\"text\" placeholder=\"addressParish\"/>\n</Form.Group>\n<Form.Group as={Col} controlId=\"formGridAddressPostOffice\">\n  <Form.Label>Post Office</Form.Label>\n  <Form.Control type=\"text\" placeholder=\"addressPostOffice\"/>\n</Form.Group>\n</Form.Row>\n\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"0\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n\n{props.canConfirm && (\n  <Button variant=\"success\" type=\"submit\">Create</Button>\n)}\n<p>{props.successText}</p>\n\n</Form>\n{\n  // <AuthContext.Consumer>\n// </AuthContext.Consumer>\n}\n</div>\n\n)};\n\nexport default CreateUserForm;\n","import React, { Component } from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\n\nimport AlertBox from '../components/AlertBox';\nimport CreateUserForm from '../components/Forms/CreateUserForm';\nimport './Auth.css';\n\nclass SignupPage extends Component {\n  state = {\n    success: \"Signup!!\",\n    userAlert: null,\n  };\n\n  modalConfirmHandler = (event) => {\n\n    event.preventDefault();\n    console.log(\"signing up...\");\n    console.log(\"CreateUserFormData:  \", event.target.formGridEmail.value);\n\n    this.setState({ creating: false });\n    const email = event.target.formGridEmail.value;\n    const password = event.target.formGridPassword.value;\n    const name = event.target.formGridName.value;\n    const role = event.target.formGridRole.value;\n    let dob = event.target.formGridDob.value;\n    let phone = event.target.formGridPhone.value;\n    let addressNumber = event.target.formGridAddressNumber.value;\n    let addressStreet = event.target.formGridAddressStreet.value;\n    let addressTown = event.target.formGridAddressTown.value;\n    let addressParish = event.target.formGridAddressParish.value;\n    let addressPostOffice = event.target.formGridAddressPostOffice.value;\n    let employmentDate = event.target.formGridEmploymentDate.value;\n    let terminationDate = event.target.formGridTerminationDate.value;\n\n    if (\n      email.trim().length === 0 ||\n      password.trim().length === 0 ||\n      name.trim().length === 0 ||\n      role.trim().length === 0 ||\n      dob.trim().length === 0 ||\n      phone.trim().length === 0 ||\n      addressNumber.trim().length === 0 ||\n      addressStreet.trim().length === 0 ||\n      addressTown.trim().length === 0 ||\n      addressParish.trim().length === 0 ||\n      addressPostOffice.trim().length === 0 ||\n      employmentDate.trim().length === 0 ||\n      terminationDate.trim().length === 0\n    ) {\n      console.log(\"blank fields detected!!!...Please try again...\");\n      this.setState({userAlert: \"blank fields detected!!!...Please try again...\"});\n      return;\n    }\n\n    const token = this.context.token;\n    const userId = this.context.userId;\n    const user = { email, password, name, role, dob, phone, addressNumber, addressStreet, addressTown, addressParish, addressPostOffice, employmentDate, terminationDate };\n\n    console.log(`\n      creating user...\n      userId: ${userId}\n      email: ${email},\n      password: ${password},\n      name: ${name},\n      role: ${role},\n      dob: ${dob},\n      phone: ${phone},\n      addressNumber: ${addressNumber},\n      addressStreet: ${addressStreet},\n      addressTown: ${addressTown},\n      addressParish: ${addressParish},\n      addressPostOffice: ${addressPostOffice},\n      employmentDate: ${employmentDate},\n      terminationDate: ${terminationDate},\n      `);\n      this.setState({userAlert: \"creating user...\"});\n\n    const requestBody = {\n      query: `\n          mutation {\n            createUser(userInput: {email:\"${email}\",password:\"${password}\",name:\"${name}\",role:\"${role}\",\n\n            employmentDate:\"${employmentDate}\",terminationDate:\"${terminationDate}\"})\n            {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}\n          }\n        `\n    };\n\n    // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n        console.log(\"resData head slice:  \", JSON.stringify(resData).slice(2,7));\n        if (JSON.stringify(resData).slice(2,7) === 'error') {\n          console.log(\"signup...failed...\");\n          this.setState({success: \"Something went wrong!!!\" });\n        } else {\n          this.setState({success: \"Signup success...Proceed to login\" });\n          console.log(this.state.success);\n        }\n        this.setState({userAlert: JSON.stringify(resData).slice(2,7)})\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n\n      <Row>\n      <AlertBox\n        authUserId={this.context.userId}\n        alert={this.state.userAlert}\n      />\n\n      <Col className=\"signupRow\" md={8}>\n        <CreateUserForm\n          canConfirm\n          onConfirm={this.modalConfirmHandler}\n          onSubmit={this.modalConfirmHandler}\n          confirmText=\"Confirm\"\n          successText={this.state.success}\n        />\n      </Col>\n      </Row>\n\n      </React.Fragment>\n    );\n  }\n}\n\nexport default SignupPage;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\n\nimport './UserItem.css';\n\nconst userItem = props => (\n  <li key={props.userId} className=\"users__list-item_master\">\n    <div>\n      <h5 className=\"userItemHeading\"> Name:</h5>\n      <p className=\"userItemText\">\n        {props.name}\n      </p>\n      <h5 className=\"userItemHeading\"> Role:</h5>\n      <p className=\"userItemText\">\n        {props.role}\n      </p>\n    </div>\n    <div>\n    <Button variant=\"primary\" onClick={props.onDetail.bind(this, props._id)}>\n          Details\n        </Button>\n    </div>\n  </li>\n);\n\nexport default userItem;\n","import React from 'react';\n\nimport UserItem from './UserItem/UserItem';\nimport './UserList.css';\n\nconst userList = props => {\n\n  const users = props.users.map(user => {\n    return (\n      <UserItem\n        key={user._id}\n        userId={props.authUserId}\n        _id={user._id}\n        name={user.name}\n        email={user.email}\n        role={user.role}\n        onDetail={props.onViewDetail}\n      />\n    );\n  });\n\n  return <ul className=\"user__list1_master\">{users}</ul>;\n};\n\nexport default userList;\n","import React from 'react';\n// import { NavLink } from 'react-router-dom';\nimport Button from 'react-bootstrap/Button';\n\nimport './UserItem.css';\n\nconst searchUserItem = props => (\n  <li key={props.userId} className=\"users__list-item_master\">\n    <div>\n      <p className=\"userItemHeading\"> Name:</p>\n      <p className=\"userItemText\">\n        {props.name}\n      </p>\n      <p className=\"userItemHeading\"> Role:</p>\n      <p className=\"userItemText\">\n        {props.role}\n      </p>\n    </div>\n    <div>\n    <Button variant=\"primary\" onClick={props.onDetail.bind(this, props._id)}>\n          Details\n        </Button>\n    </div>\n  </li>\n);\n\nexport default searchUserItem;\n","import React from 'react';\nimport Accordion from 'react-bootstrap/Accordion';\nimport Button from 'react-bootstrap/Button';\n\nimport SearchUserItem from './UserItem/SearchUserItem';\nimport './UserList.css';\n\nconst searchUserList = props => {\n  console.log(\" search user list:  \", props.searchUsers);\n\n  const searchUsers = props.searchUsers.map(user => {\n    return (\n      <React.Fragment>\n      <SearchUserItem\n        key={user._id}\n        userId={props.authUserId}\n        _id={user._id}\n        name={user.name}\n        email={user.email}\n        role={user.role}\n        onDetail={props.onViewDetail}\n      />\n      </React.Fragment>\n    );\n  });\n  return <ul className=\"user__list1_master\">{searchUsers}</ul>;\n};\n\nexport default searchUserList;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card'\nimport './UserItem.css';\n\nconst userAttendanceItem = props => (\n  <li key={props.userId} className=\"users__list-item_detail\">\n    <div>\n\n    <Card className=\"card\">\n      <Card.Body>\n        <Card.Title>\n          Attendance\n        </Card.Title>\n\n        <Card.Text>\n        <ul className=\"cardUl\">\n          <li className=\"cardLi\">\n          <p className=\"userItemHeading\"> Date:</p>\n          <p className=\"userItemText\">\n          {props.date}\n          </p>\n          </li>\n          <li>\n          <p className=\"userItemHeading\"> Status:</p>\n          <p className=\"userItemText\">\n          {props.status}\n          </p>\n          </li>\n          <li>\n          <p className=\"userItemHeading\"> Description:</p>\n          <p className=\"userItemText\">\n          {props.description}\n          </p>\n          </li>\n        </ul>\n        </Card.Text>\n        <Card.Link href=\"\">\n        { props.canDelete === true && (\n          <Button variant=\"danger\" onClick={props.onDelete.bind(this, props.attendance)}>\n            Delete\n          </Button>\n        )}\n        </Card.Link>\n      </Card.Body>\n    </Card>\n    </div>\n  </li>\n);\n\nexport default userAttendanceItem;\n","import React from 'react';\nimport moment from 'moment';\n\nimport UserAttendanceItem from './UserItem/UserAttendanceItem';\nimport './UserList.css';\n\nconst userAttendanceList = props => {\n  console.log(\"user attendance list props\", props.userAttendance);\n\n  const userAttendance = props.userAttendance.map(attendance => {\n    let userAttendanceDate = attendance.date;\n    if (userAttendanceDate !== null) {\n      userAttendanceDate = new Date (attendance.date.substr(0,10)*1000).toISOString().slice(0,10);\n      console.log(\"userAttendanceDate\", userAttendanceDate);\n    }\n\n    // const userAttendanceDate = new Date (attendance.date.substr(0,10)*1000).toLocaleString();\n    // const userAttendanceDate = new Date (attendance.date.substr(0,10)*1000).toUTCString();\n    // console.log(\"userAttendanceDate\", userAttendanceDate);\n\n    return (\n      <UserAttendanceItem\n        key={attendance.date}\n        userId={props.authUserId}\n        date={userAttendanceDate}\n        status={attendance.status}\n        description={attendance.description}\n        canDelete={props.canDelete}\n        onDelete={props.onDelete}\n        attendance={attendance}\n      />\n    );\n  });\n\n  return <ul className=\"user__list1_detail\">{userAttendance}</ul>;\n};\n\nexport default userAttendanceList;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card'\n\nimport './UserItem.css';\n\nconst userLeaveItem = props => (\n  <li key={props.userId} className=\"users__list-item_detail\">\n    <div>\n\n    <Card className=\"card\">\n      <Card.Body>\n        <Card.Title>\n          Leave\n        </Card.Title>\n\n        <Card.Text>\n        <ul className=\"cardUl\">\n          <li className=\"cardLi\">\n          <p className=\"userItemHeading\"> Type:</p>\n          <p className=\"userItemText\">\n          {props.type}\n          </p>\n          </li>\n          <li>\n          <p className=\"userItemHeading\"> Start Date:</p>\n          <p className=\"userItemText\">\n          {props.startDate}\n          </p>\n          </li>\n          <li>\n          <p className=\"userItemHeading\"> End Date:</p>\n          <p className=\"userItemText\">\n          {props.endDate}\n          </p>\n          </li>\n        </ul>\n        </Card.Text>\n        <Card.Link href=\"\">\n        { props.canDelete === true && (\n          <Button variant=\"danger\" onClick={props.onDelete.bind(this, props.leave)}>\n            Delete\n          </Button>\n        )}\n        </Card.Link>\n      </Card.Body>\n    </Card>\n    </div>\n\n  </li>\n);\n\nexport default userLeaveItem;\n","import React from 'react';\nimport moment from 'moment';\n\n\nimport UserLeaveItem from './UserItem/UserLeaveItem';\nimport './UserList.css';\n\nconst userLeaveList = props => {\n  console.log(\"user leave list props\", props.userLeave);\n  const userLeave = props.userLeave.map(leave => {\n    const userLeaveStartDate = new Date (leave.startDate.substr(0,10)*1000).toISOString().slice(0,10);\n    const userLeaveEndDate = new Date (leave.endDate.substr(0,10)*1000).toISOString().slice(0,10);\n    return (\n      <UserLeaveItem\n        key={leave.type}\n        userId={props.authUserId}\n        type={leave.type}\n        startDate={userLeaveStartDate}\n        endDate={userLeaveEndDate}\n        description={leave.description}\n        canDelete={props.canDelete}\n        onDelete={props.onDelete}\n        leave={leave}\n      />\n    );\n  });\n\n  return <ul className=\"user__list1_detail\">{userLeave}</ul>;\n};\n\nexport default userLeaveList;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card'\n// import { NavLink } from 'react-router-dom';\n\nimport './UserItem.css';\n\nconst userAttachmentItem = props => (\n  <li key={props.userId} className=\"users__list-item_detail\">\n    <div>\n\n    <Card className=\"card\">\n      <Card.Body>\n        <Card.Title>\n          Attachment\n        </Card.Title>\n\n        <Card.Text>\n        <ul className=\"cardUl\">\n          <li className=\"cardLi\">\n          <p className=\"userItemHeading\"> Name:</p>\n          <p className=\"userItemText\">\n          {props.name}\n          </p>\n          </li>\n          <li>\n          <p className=\"userItemHeading\"> Format:</p>\n          <p className=\"userItemText\">\n          {props.format}\n          </p>\n          </li>\n          <li>\n          <p className=\"userItemHeading\"> Path:</p>\n          <p className=\"userItemText\">\n          {props.path}\n          </p>\n          </li>\n        </ul>\n        </Card.Text>\n        <Card.Link href=\"\">\n        { props.canDelete === true && (\n          <Button variant=\"danger\"  className=\"listButton\" onClick={props.onDelete.bind(this, props.attachment)}>\n            Delete\n          </Button>\n        )}\n        </Card.Link>\n        <Card.Link href=\"\">\n        <Button variant=\"primary\"  className=\"listButton\" onClick={props.onViewAttachment.bind(this, props.attachment)}>\n          View\n        </Button>\n        </Card.Link>\n      </Card.Body>\n    </Card>\n\n    </div>\n\n\n  </li>\n);\n\nexport default userAttachmentItem;\n","import React from 'react';\n\nimport UserAttachmentItem from './UserItem/UserAttachmentItem';\nimport './UserList.css';\n\nconst userAttachmentList = props => {\n  console.log(\"user attachment list props\", props.userAttachment);\n  const userAttachment = props.userAttachment.map(attachment => {\n    return (\n      <UserAttachmentItem\n        key={attachment.name}\n        userId={props.authUserId}\n        name={attachment.name}\n        format={attachment.format}\n        path={attachment.path}\n        canDelete={props.canDelete}\n        onDelete={props.onDelete}\n        attachment={attachment}\n        onViewAttachment={props.onViewAttachment}\n      />\n    );\n  });\n\n  return <ul className=\"user__list1_detail\">{userAttachment}</ul>;\n};\n\nexport default userAttachmentList;\n","import React from 'react';\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\nimport Accordion from 'react-bootstrap/Accordion';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nimport UserAttendanceList from './UserList/UserAttendanceList';\nimport UserLeaveList from './UserList/UserLeaveList';\nimport UserAttachmentList from './UserList/UserAttachmentList';\nimport AuthContext from '../../context/auth-context';\n\nimport './UserDetail.css';\n\nconst UserDetail = (props) => {\n\n  const {...user} = props.user;\n  const authUserId = props.authUserId;\n  const userAttendance = user.attendance;\n  const userLeave = user.leave;\n  const userAttachment = user.attachments;\n  const authSelectedUser = JSON.stringify(props.AuthContext.selectedUser);\n  const userEmploymentDate = new Date(user.employmentDate.substr(0,10)*1000).toISOString().slice(0,10);\n  const userTerminationDate = new Date(user.terminationDate.substr(0,10)*1000).toISOString().slice(0,10);\n\n  // console.log(\"user attendance:  \", userAttendance, authSelectedUser.slice(0,5) === '{\"_id' , authSelectedUser.slice(0,5));\n  console.log(\"UserDetail.props.authUserId:  \",authUserId, \"  UserDetail.props.user:  \", {...user});\n\n  return (\n    <div className={\"UserDetailBox1\"}>\n\n    <Tabs defaultActiveKey=\"profile\" id=\"uncontrolled-tab-example\" className=\"tab\">\n\n      <Tab eventKey=\"Demographics\" title=\"Demographics\">\n      <Card className=\"UserDetailCard\">\n      <Card.Body>\n        <Card.Title><span className=\"ul\">User Details</span></Card.Title>\n        <Row className=\"detailCardRow\">\n          <Col className=\"detailCardCol\">\n            <Card.Text>\n              <span className=\"bold\">ID :</span> {user._id}\n            </Card.Text>\n            <Card.Text>\n              <span className=\"bold\">Name :</span> {user.name}\n            </Card.Text>\n            <Card.Text>\n              <span className=\"bold\">Email :</span> {user.email}\n            </Card.Text>\n            <Card.Text>\n              <span className=\"bold\">Phone :</span> {user.phone}\n            </Card.Text>\n            <Card.Text>\n              <span className=\"bold\">Role :</span> {user.role}\n            </Card.Text>\n          </Col>\n\n          <Col className=\"detailCardCol\">\n            <Card.Text>\n              <span className=\"bold\">Start Date:</span> {userEmploymentDate}\n            </Card.Text>\n            <Card.Text>\n              <span className=\"bold\">Start Date:</span> {userTerminationDate}\n            </Card.Text>\n          </Col>\n        </Row>\n\n        <Row className=\"detailCardRow\">\n          <Col className=\"detailCardCol\">\n            { props.canDelete === true && (\n              <Button variant=\"danger\" onClick={props.onDelete}>\n                Delete Staff !!??\n              </Button>\n            )}\n          </Col>\n\n          <Col>\n            <Button variant=\"warning\" onClick={props.onCreatePdf.bind(this, user)}>\n              Create Pdf\n            </Button>\n          </Col>\n        </Row>\n\n      </Card.Body>\n      </Card>\n      </Tab>\n      <Tab eventKey=\"Attendance\" title=\"Attendance\">\n      <UserAttendanceList\n          userAttendance={userAttendance}\n          authUserId={props.AuthContext.userId}\n          canDelete={props.canDelete}\n          onDelete={props.attendanceDelete}\n        />\n      </Tab>\n      <Tab eventKey=\"Leave\" title=\"Leave\">\n      <UserLeaveList\n          userLeave={userLeave}\n          authUserId={props.AuthContext.userId}\n          canDelete={props.canDelete}\n          onDelete={props.leaveDelete}\n        />\n      </Tab>\n      <Tab eventKey=\"Attachments\" title=\"Attachments\">\n      <UserAttachmentList\n          userAttachment={userAttachment}\n          authUserId={props.AuthContext.userId}\n          canDelete={props.canDelete}\n          onDelete={props.attachmentDelete}\n          onViewAttachment={props.onViewAttachment}\n        />\n      </Tab>\n    </Tabs>\n\n    </div>\n\n  );\n}\n\nexport default UserDetail;\n","import React from 'react';\n\nimport './Spinner.css';\n\nconst spinner = () => (\n  <div className=\"spinner\">\n    <div className=\"lds-dual-ring\" />\n  </div>\n);\n\nexport default spinner;\n","import React from 'react';\n\nimport './UserItem.css';\n\n\nconst appointmentTodayItem = props => (\n  <li key={props.userId} className=\"users__list-item_master\">\n    <div>\n      <p>\n        Time: {props.time}\n      </p>\n      <p>\n        Title: {props.title}\n      </p>\n      <p>\n        Date: {props.date}\n      </p>\n    </div>\n  </li>\n);\n\nexport default appointmentTodayItem;\n","import React from 'react';\n\nimport AppointmentTodayItem from './AppointmentItem/AppointmentTodayItem';\nimport './UserList.css';\n\nconst appointmentTodayList = props => {\n  console.log(\"patient Today list props\", props.appointmentToday);\n  const appointmentToday = props.appointmentToday.map(appointment => {\n    const appointmentTodayDate = new Date(appointment.date.substr(0,10)*1000).toISOString().slice(0,10);\n    return (\n      <AppointmentTodayItem\n        key={appointment.date}\n        userId={props.authUserId}\n        date={appointmentTodayDate}\n        title={appointment.title}\n        date={appointment.date}\n        time={appointment.time}\n      />\n    );\n  });\n\n  return <ul className=\"user__list1_master\">{appointmentToday}</ul>;\n};\n\nexport default appointmentTodayList;\n","import React from 'react';\n\nimport './UserItem.css';\n\n\nconst appointmentInProgressItem = props => (\n  <li key={props.userId} className=\"users__list-item_master\">\n    <div>\n      <p>\n        Time: {props.time}\n      </p>\n      <p>\n        Title: {props.title}\n      </p>\n      <p>\n        Date: {props.date}\n      </p>\n    </div>\n  </li>\n);\n\nexport default appointmentInProgressItem;\n","import React from 'react';\n\nimport AppointmentInProgressItem from './AppointmentItem/AppointmentInProgressItem';\nimport './UserList.css';\n\nconst appointmentInProgressList = props => {\n  console.log(\"patient InProgress list props\", props.appointmentInProgress);\n  const appointmentInProgress = props.appointmentInProgress.map(appointment => {\n    const appointmentInProgressDate = new Date(appointment.date.substr(0,10)*1000).toISOString().slice(0,10);\n    return (\n      <AppointmentInProgressItem\n        key={appointment.date}\n        userId={props.authUserId}\n        date={appointmentInProgressDate}\n        title={appointment.title}\n        date={appointment.date}\n        time={appointment.time}\n      />\n    );\n  });\n\n  return <ul className=\"user__list1_master\">{appointmentInProgress}</ul>;\n};\n\nexport default appointmentInProgressList;\n","import ReactDOM from 'react-dom';\nimport React, { Component } from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Button from 'react-bootstrap/Button';\nimport Accordion from 'react-bootstrap/Accordion';\nimport Card from 'react-bootstrap/Card';\n\n\nimport AppointmentTodayList from '../components/Appointments/AppointmentList/AppointmentTodayList';\nimport AppointmentInProgressList from '../components/Appointments/AppointmentList/AppointmentInProgressList';\n\n// import Modal from '../components/Modal/Modal';\n// import Backdrop from '../components/Backdrop/Backdrop';\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\nimport './Sidebar.css';\n\nclass SidebarPage extends Component {\n  state = {\n    authContext: AuthContext._currentValue,\n  };\n  isActive = true;\n\n  static contextType = AuthContext;\n\n  constructor(props) {\n    super(props);\n    // this.appointmentsToday = this.context.appointmentsToday;\n    // this.appointmentsWeekImportant = this.context.appointmentsWeekImportant;\n    // this.appointmentsInprogress = this.context.appointmentsInprogress;\n  }\n\n\n\n\n  componentDidMount() {\n    console.log(\"state:  \", this.state.authContext);\n    // console.log(\"context:  \", AuthContext._currentValue);\n    // run get today appts func and req\n  }\n\n\n  componentWillUnmount() {\n    this.isActive = false;\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n      <Container className=\"sidebarContainer\">\n      <Row className=\"sidebarRow1\">\n      <Col md={12} className=\"\">\n\n      <Card border=\"primary\" className=\"sidebarCard\">\n      <Card.Body>\n        <Card.Title className=\"cardTitle\">You</Card.Title>\n        <Card.Subtitle className=\"mb-2\">ID:</Card.Subtitle>\n        <Card.Text>\n          {this.context.user._id}\n        </Card.Text>\n        <Card.Subtitle className=\"mb-2\">Name:</Card.Subtitle>\n        <Card.Text>\n          {this.context.user.name}\n        </Card.Text>\n        <Card.Subtitle className=\"mb-2\">Role:</Card.Subtitle>\n        <Card.Text>\n          {this.context.user.role}\n        </Card.Text>\n      </Card.Body>\n      </Card>\n\n      <Card border=\"secondary\" className=\"sidebarCard\">\n      <Card.Body>\n        <Card.Title className=\"cardTitle\">Selection</Card.Title>\n        <Card.Subtitle className=\"mb-2\">Staff:</Card.Subtitle>\n        <Card.Text>\n          {this.context.selectedUser.name}\n        </Card.Text>\n        <Card.Subtitle className=\"mb-2\">Patient:</Card.Subtitle>\n        <Card.Text>\n          {this.context.selectedPatient.name}\n        </Card.Text>\n        <Card.Subtitle className=\"mb-2\">Appointment:</Card.Subtitle>\n        <Card.Text>\n          {this.context.selectedAppointment.title}\n        </Card.Text>\n      </Card.Body>\n      </Card>\n      </Col>\n      </Row>\n      <Row className=\"sidebarRow2\">\n      <Col md={12} className=\"apptSidebarCol\">\n      <h6 className=\"apptSidebarTitle\">Appointments Today</h6>\n      {this.context.appointmentsToday === null && (\n        <Button variant=\"outline-warning\">\n          Check the Appointments page to load\n        </Button>\n      )}\n      {this.context.appointmentsToday !== null && (\n\n        <AppointmentTodayList\n          appointmentToday={this.context.appointmentsToday}\n          authUserId={this.context.userId}\n          />\n      )}\n\n      </Col>\n      </Row>\n      <Row className=\"apptSidebarRow\">\n      <Col md={12} className=\"\">\n      <h6 className=\"apptSidebarTitle\">Appointments InProgress</h6>\n      {this.context.appointmentsToday === null && (\n        <Button variant=\"outline-warning\">\n          Check the Appointments page to load\n        </Button>\n      )}\n      {this.context.appointmentsInProgress !== null && (\n\n        <AppointmentInProgressList\n          appointmentInProgress={this.context.appointmentsInProgress}\n          authUserId={this.context.userId}\n          />\n      )}\n\n      </Col>\n      </Row>\n      </Container>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default SidebarPage;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport FileViewer from 'react-file-viewer';\n\nimport \"./AttachmentViewer.css\"\n\nconst AttachmentViewer = (props) =>{\n  const fileType = props.attachmentType.substr(1,4)\n\n  console.log(`\n    fileType: ${props.attachmentType},\n    also fileType: ${fileType},\n    `);\n\n\nreturn (\n  <div className=\"attachmentViewerBg\">\n    <div className=\"attachmentViewer\">\n    <h5 className=\"attachmentViewerTitle\">AttachmentViewer</h5>\n    <Button variant=\"danger\" className=\"attachmentViewerCloseButton\" onClick={props.onCloseAttachmentView}>\n      close\n    </Button>\n    {props.attachmentFile && (\n      <FileViewer\n          fileType={props.attachmentType}\n          filePath={props.attachmentFile}\n      />\n    )}\n\n\n    </div>\n  </div>\n)\n\n}\n\n\nexport default AttachmentViewer;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport { Page, Text, View, Document, StyleSheet } from '@react-pdf/renderer';\nimport { PDFViewer } from '@react-pdf/renderer';\n\nimport \"./AttachmentViewer.css\"\n\n// const styles = StyleSheet.create({\n//   page: {\n//     flexDirection: 'row',\n//     backgroundColor: '#E4E4E4'\n//   },\n//   section: {\n//     margin: 10,\n//     padding: 10,\n//     flexGrow: 1\n//   }\n// });\n//\n// const MyDocument = () => (\n//   <Document>\n//     <Page size=\"A4\" style={styles.page}>\n//       <View style={styles.section}>\n//         <Text>Section #1</Text>\n//       </View>\n//       <View style={styles.section}>\n//         <Text>Section #2</Text>\n//       </View>\n//     </Page>\n//   </Document>\n// );\n\nconst PdfCreator = (props) =>{\n  console.log(`\n    props: ${props},\n    `);\n\nreturn (\n  <div className=\"attachmentViewerBg\">\n    <div className=\"attachmentViewer\">\n    <h5> Document Generator </h5>\n    <Button variant=\"danger\" onClick={props.onClosePdfCreator}>\n      close\n    </Button>\n    <p>{props.pdfData.title}</p>\n    <p>{props.pdfData.body}</p>\n    </div>\n    {\n      // <PDFViewer>\n      //   <MyDocument />\n      // </PDFViewer>\n    }\n  </div>\n)\n\n}\n\n\nexport default PdfCreator;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Accordion from 'react-bootstrap/Accordion'\n// import FormCheck from 'react-bootstrap/FormCheck'\n// import AuthContext from '../../context/auth-context';\nimport DatePicker from \"react-datepicker\";\n\nimport './CreateUserForm.css';\n\nconst UpdateUserForm = (props) => {\n\nconsole.log(\"UpdateUserForm.props:  \", {...props});\nconst {...user} = props.user;\nconsole.log(\"UpdateUserForm.props.user:  \", {...user});\n// const [startDate, setStartDate] = useState(new Date());\n\nreturn (\n<div className=\"UpdateFormContainer\">\n<Form onSubmit={props.onConfirm}>\n<Form.Row>\n  <Form.Group as={Col} controlId=\"formGridEmail\">\n    <Form.Label>Email</Form.Label>\n    <Form.Control type=\"email\" placeholder={user.email}/>\n  </Form.Group>\n\n  <Form.Group as={Col} controlId=\"formGridPassword\">\n    <Form.Label>Password</Form.Label>\n    <Form.Control type=\"password\" placeholder={user.password}/>\n  </Form.Group>\n</Form.Row>\n\n<Form.Row>\n\n<Form.Group as={Col} controlId=\"formGridName\">\n  <Form.Label>Name</Form.Label>\n  <Form.Control type=\"text\" placeholder={user.name}/>\n</Form.Group>\n{\n  // <Form.Group as={Col} controlId=\"formGridRole\">\n  //   <Form.Label>Role</Form.Label>\n  //   <Form.Control type=\"text\" placeholder={user.role}/>\n  // </Form.Group>\n}\n\n<Form.Group as={Col} controlId=\"formGridPhone\">\n  <Form.Label>Phone</Form.Label>\n  <Form.Control type=\"number\" placeholder={user.phone}/>\n</Form.Group>\n</Form.Row>\n\n<Form.Row>\n<Form.Group as={Col} controlId=\"formGridDob\">\n  <Form.Label>D.O.B</Form.Label>\n  <Form.Control type=\"date\" placeholder={user.dob}/>\n</Form.Group>\n\n{\n  // <DatePicker className=\"calendarDob\"\n  //   selected={startDate}\n  //   onChange={date => setStartDate(date)}\n  // />\n}\n\n<Form.Group as={Col} controlId=\"formGridEmploymentDate\">\n  <Form.Label>Employment Date</Form.Label>\n  <Form.Control type=\"date\" placeholder={user.employmentDate}/>\n</Form.Group>\n\n<Form.Group as={Col} controlId=\"formGridTerminationDate\">\n  <Form.Label>Termination Date</Form.Label>\n  <Form.Control type=\"date\" placeholder={user.terminationDate}/>\n</Form.Group>\n</Form.Row>\n\n<Form.Row>\n<Form.Group as={Col} controlId=\"formGridAddressNumber\">\n  <Form.Label>Street No.</Form.Label>\n  <Form.Control type=\"number\" placeholder={user.address.number}/>\n</Form.Group>\n\n<Form.Group as={Col} controlId=\"formGridAddressStreet\">\n  <Form.Label>Street Name</Form.Label>\n  <Form.Control type=\"text\" placeholder={user.address.street}/>\n</Form.Group>\n\n<Form.Group as={Col} controlId=\"formGridAddressTown\">\n  <Form.Label>Town</Form.Label>\n  <Form.Control type=\"text\" placeholder={user.address.town}/>\n</Form.Group>\n</Form.Row>\n\n<Form.Row>\n<Form.Group as={Col} controlId=\"formGridAddressParish\">\n  <Form.Label>Parish</Form.Label>\n  <Form.Control type=\"text\" placeholder={user.address.parish}/>\n</Form.Group>\n<Form.Group as={Col} controlId=\"formGridAddressPostOffice\">\n  <Form.Label>Post Office</Form.Label>\n  <Form.Control type=\"text\" placeholder={user.address.postOffice}/>\n</Form.Group>\n</Form.Row>\n\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"1\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n{props.canCancelProfile && (\n  <Button variant=\"danger\" onClick={props.onCancel} >\n  Cancel\n  </Button>\n)}\n\n{props.canConfirm && (\n  <Accordion.Toggle as={Button} variant=\"success\" eventKey=\"0\" className=\"btn\" type=\"submit\">\n  Submit\n  </Accordion.Toggle>\n)}\n\n</Form>\n{\n  // <AuthContext.Consumer>\n// </AuthContext.Consumer>\n}\n</div>\n\n)};\n\nexport default UpdateUserForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Accordion from 'react-bootstrap/Accordion'\n// import FormCheck from 'react-bootstrap/FormCheck'\n// import AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst UpdateUserFieldForm = (props) => {\n\nconsole.log(\"UpdateUserFieldForm.props:  \", {...props});\nconst {...user} = props.user;\nconsole.log(\"UpdateUserFieldForm.props.user:  \", {...user});\n\nreturn (\n<div className=\"UpdateFormContainer\">\n<Form onSubmit={props.onConfirm}>\n<Form.Row>\n  <Form.Group as={Col} controlId=\"formGridFieldSelect\">\n  <Form.Label>Field Options</Form.Label>\n  <Form.Control as=\"select\">\n    <option>select</option>\n    <option>email</option>\n    <option>password</option>\n    <option>name</option>\n    <option>dob</option>\n    <option>phone</option>\n    <option>address.town</option>\n    <option>address.parish</option>\n    <option>employmentDate</option>\n    <option>terminationDate</option>\n  </Form.Control>\n  </Form.Group>\n    <Form.Group as={Col} controlId=\"formGridField\">\n    <Form.Label>Field</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"Query\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridQuery\">\n    <Form.Label>Query</Form.Label>\n    <Form.Label>Date Format YYYY-MM-DD</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"Query\"/>\n  </Form.Group>\n</Form.Row>\n\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"2\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n{props.canCancelProfile && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"5\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n\n{props.canConfirm && (\n  // <Accordion.Toggle as={Button} variant=\"success\" eventKey=\"2\" className=\"btn\" type=\"submit\">\n  // Submit\n  // </Accordion.Toggle>\n  <Button variant=\"success\" type=\"submit\">\n  Submit\n  </Button>\n)}\n\n</Form>\n{\n  // <AuthContext.Consumer>\n// </AuthContext.Consumer>\n}\n</div>\n\n)};\n\nexport default UpdateUserFieldForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Accordion from 'react-bootstrap/Accordion'\n// import FormCheck from 'react-bootstrap/FormCheck'\nimport AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nconst UpdateUserAttendanceForm = (props) => {\n\nconsole.log(\"UpdateUserAttendanceForm.props:  \", {...props});\nconst {...user} = props.user;\nconsole.log(\"UpdateUserAttendanceForm.props.user:  \", {...user});\n\n\nreturn (\n<div className=\"UpdateFormContainer\">\n<Form onSubmit={props.onConfirm}>\n\n<Form.Row>\n  <Form.Group as={Col} controlId=\"formGridAttendanceDate\">\n    <Form.Label>Date</Form.Label>\n    <Form.Control type=\"date\" placeholder=\"Date\"/>\n  </Form.Group>\n  <Form.Group id=\"formGridTodayCheckbox\">\n    <Form.Check type=\"checkbox\" label=\"Today\" />\n  </Form.Group>\n  {\n    // <DatePicker className=\"calendarDob\"\n    //   selected={AuthContext._currentValue.fancyDate}\n    //   onChange={(e) => {console.log(e);AuthContext._currentValue.fancyDate = e}}\n    // />\n  }\n  <Form.Group as={Col} controlId=\"formGridAttendanceStatus\">\n    <Form.Label>Status</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"Attendance Status\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridAttendanceDescription\">\n    <Form.Label>Description</Form.Label>\n    <Form.Control as=\"textarea\" rows=\"3\" placeholder=\"Attendance Description\"/>\n  </Form.Group>\n</Form.Row>\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"2\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n{props.canCancelProfile && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"5\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n\n{props.canConfirm && (\n  <Button variant=\"success\" type=\"submit\">Add Attendance</Button>\n)}\n\n</Form>\n{\n  // <AuthContext.Consumer>\n// </AuthContext.Consumer>\n}\n</div>\n\n)};\n\nexport default UpdateUserAttendanceForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Accordion from 'react-bootstrap/Accordion'\n// import FormCheck from 'react-bootstrap/FormCheck'\nimport AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst UpdateUserAttachmentForm = (props) => {\n\nconsole.log(\"UpdateUserAttachmentForm.props:  \", {...props}, \" AuthContext: \", AuthContext);\nconst {...user} = props.user;\nconsole.log(\"UpdateUserAttachmentForm.props.user:  \", {...user});\nlet file = null;\n\nreturn (\n<div className=\"UpdateFormContainer\">\n<Form onSubmit={props.onConfirm}>\n<Form.Row>\n\n  <Form.Group as={Col} controlId=\"formGridAttachmentFormat\">\n    <Form.Label>Format</Form.Label>\n    <Form.Control type=\"string\" placeholder=\"File format\"/>\n  </Form.Group>\n  </Form.Row>\n\n  <Form.Row>\n  <Form.Group as={Col} controlId=\"formGridAttachmentPath\">\n    <Form.Label>Path</Form.Label>\n    <Form.Control type=\"string\" placeholder=\"File path\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridAttachmentFile\">\n    <Form.Label>File</Form.Label>\n    <Form.Control type=\"file\" placeholder=\"File\" onChange={(e) => {console.log(e.target.files[0]);AuthContext._currentValue.file = e.target.files[0];console.log(AuthContext._currentValue.file);}}/>\n  </Form.Group>\n{\n  // (e) => console.log(e.target.files[0])\n\n  // <Form.Group as={Col} controlId=\"formGridAttachmentName\">\n  //   <Form.Label>Filename</Form.Label>\n  //   <Form.Control type=\"text\" placeholder=\"Filename\"/>\n  // </Form.Group>\n}\n</Form.Row>\n\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"2\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n{props.canCancelProfile && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"5\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n\n{props.canConfirm && (\n  <Button variant=\"success\" type=\"submit\">Add</Button>\n)}\n\n</Form>\n{\n  // <AuthContext.Consumer>\n// </AuthContext.Consumer>\n}\n</div>\n\n)};\n\nexport default UpdateUserAttachmentForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Accordion from 'react-bootstrap/Accordion'\n// import FormCheck from 'react-bootstrap/FormCheck'\n// import AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst UpdateUserLeaveForm = (props) => {\n\nconsole.log(\"UpdateUserLeaveForm.props:  \", {...props});\nconst {...user} = props.user;\nconsole.log(\"UpdateUserLeaveForm.props.user:  \", {...user});\n\n\nreturn (\n<div className=\"UpdateFormContainer\">\n<Form onSubmit={props.onConfirm}>\n<Form.Row>\n  <Form.Group as={Col} controlId=\"formGridLeaveType\">\n    <Form.Label>Type</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"Leave Type\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridLeaveTitle\">\n    <Form.Label>Title</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"Leave Title\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridLeaveStartDate\">\n    <Form.Label>Start Date</Form.Label>\n    <Form.Control type=\"date\" placeholder=\"Start Date\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridLeaveEndDate\">\n    <Form.Label>End Date</Form.Label>\n    <Form.Control type=\"date\" placeholder=\"End Date\"/>\n  </Form.Group>\n\n</Form.Row>\n\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"2\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n{props.canCancelProfile && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"5\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n\n{props.canConfirm && (\n  <Accordion.Toggle as={Button} variant=\"success\" eventKey=\"2\" className=\"btn\" type=\"submit\">\n  Submit\n  </Accordion.Toggle>\n)}\n\n</Form>\n{\n  // <AuthContext.Consumer>\n// </AuthContext.Consumer>\n}\n</div>\n\n)};\n\nexport default UpdateUserLeaveForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Accordion from 'react-bootstrap/Accordion'\n// import AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst SearchUserForm = (props) => {\n// const {...search} = props.search;\n\nreturn (\n<div className=\"SearchFormContainer\">\n  <Form onSubmit={props.onConfirm}>\n<Form.Group controlId=\"formBasicFieldSelect\">\n<Form.Label>Field</Form.Label>\n<Form.Control as=\"select\">\n<option>select</option>\n<option>email</option>\n<option>password</option>\n<option>name</option>\n<option>dob</option>\n<option>phone</option>\n<option>address.town</option>\n<option>address.parish</option>\n<option>role</option>\n<option>employmentDate</option>\n<option>terminationDate</option>\n</Form.Control>\n<Form.Text className=\"text-muted\">\n</Form.Text>\n</Form.Group>\n\n<Form.Group controlId=\"formBasicField\">\n<Form.Label>Field</Form.Label>\n<Form.Control type=\"textarea\" rows=\"5\" placeholder=\"Field\"/>\n</Form.Group>\n\n<Form.Group controlId=\"formBasicQuery\">\n<Form.Label>Query</Form.Label>\n<Form.Control type=\"textarea\" rows=\"5\" placeholder=\"Query\"/>\n</Form.Group>\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"3\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n\n{props.canConfirm && (\n  <Accordion.Toggle as={Button} variant=\"success\" eventKey=\"3\" className=\"btn\" type=\"submit\">\n  Search\n  </Accordion.Toggle>\n)}\n\n{\n// <AuthContext.Consumer>\n// </AuthContext.Consumer>\n\n\n// populate feilds with user object fields\n}\n</Form>\n</div>\n\n\n)};\n\nexport default SearchUserForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Accordion from 'react-bootstrap/Accordion'\n// import AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst SearchUserIdForm = (props) => {\n// const {...search} = props.search;\n\nreturn (\n<div className=\"SearchFormContainer\">\n  <Form onSubmit={props.onConfirm}>\n\n<Form.Group controlId=\"formBasicId\">\n<Form.Label>User Id</Form.Label>\n<Form.Control type=\"text\" placeholder=\"Id\"/>\n</Form.Group>\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"3\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n\n{props.canConfirm && (\n  <Accordion.Toggle as={Button} variant=\"success\" eventKey=\"3\" className=\"btn\" type=\"submit\">\n  Search\n  </Accordion.Toggle>\n)}\n\n{\n// <AuthContext.Consumer>\n// </AuthContext.Consumer>\n}\n</Form>\n</div>\n\n\n)};\n\nexport default SearchUserIdForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Accordion from 'react-bootstrap/Accordion'\n// import AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst SearchUserNameForm = (props) => {\n// const {...search} = props.search;\n\nreturn (\n<div className=\"SearchFormContainer\">\n  <Form onSubmit={props.onConfirm}>\n\n  <Form.Group controlId=\"formBasicName\">\n  <Form.Label>Name</Form.Label>\n  <Form.Control type=\"text\" placeholder=\"Name\"/>\n  </Form.Group>\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"3\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n\n{props.canConfirm && (\n  <Accordion.Toggle as={Button} variant=\"success\" eventKey=\"3\" className=\"btn\" type=\"submit\">\n  Search\n  </Accordion.Toggle>\n)}\n\n{\n// <AuthContext.Consumer>\n// </AuthContext.Consumer>\n}\n</Form>\n</div>\n\n\n)};\n\nexport default SearchUserNameForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Accordion from 'react-bootstrap/Accordion'\n// import AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst SearchUserAttendanceDateForm = (props) => {\n// const {...search} = props.search;\n\nreturn (\n<div className=\"SearchFormContainer\">\n  <Form onSubmit={props.onConfirm}>\n\n<Form.Group controlId=\"formBasicDate\">\n<Form.Label>Attendance Date</Form.Label>\n<Form.Control type=\"date\" placeholder=\"Date\"/>\n</Form.Group>\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"3\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n\n{props.canConfirm && (\n  <Accordion.Toggle as={Button} variant=\"success\" eventKey=\"3\" className=\"btn\" type=\"submit\">\n  Search\n  </Accordion.Toggle>\n)}\n\n{\n// <AuthContext.Consumer>\n// </AuthContext.Consumer>\n}\n</Form>\n</div>\n\n\n)};\n\nexport default SearchUserAttendanceDateForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Accordion from 'react-bootstrap/Accordion'\n// import AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst SearchUserLeaveDateRangeForm = (props) => {\n// const {...search} = props.search;\n\nreturn (\n<div className=\"SearchFormContainer\">\n  <Form onSubmit={props.onConfirm}>\n\n<Form.Group controlId=\"formBasicStartDate\">\n<Form.Label>Start Date</Form.Label>\n<Form.Control type=\"date\" placeholder=\"StartDate\"/>\n</Form.Group>\n\n<Form.Group controlId=\"formBasicEndDate\">\n<Form.Label>End Date</Form.Label>\n<Form.Control type=\"date\" placeholder=\"EndDate\"/>\n</Form.Group>\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"3\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n\n{props.canConfirm && (\n  <Accordion.Toggle as={Button} variant=\"success\" eventKey=\"3\" className=\"btn\" type=\"submit\">\n  Search\n  </Accordion.Toggle>\n)}\n\n{\n// <AuthContext.Consumer>\n// </AuthContext.Consumer>\n}\n</Form>\n</div>\n\n\n)};\n\nexport default SearchUserLeaveDateRangeForm;\n","import S3 from 'react-aws-s3';\nimport S3FileUpload from 'react-s3';\nimport React, { Component } from 'react';\n// import FileViewer from 'react-file-viewer';\n\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n// import Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Accordion from 'react-bootstrap/Accordion';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\nimport TabContainer from 'react-bootstrap/TabContainer';\nimport TabContent from 'react-bootstrap/TabContent';\nimport TabPane from 'react-bootstrap/TabPane';\nimport Nav from 'react-bootstrap/Nav';\nimport Card from 'react-bootstrap/Card';\n\n// import Modal from '../components/Modal/Modal';\n// import Backdrop from '../components/Backdrop/Backdrop';\nimport UserList from '../components/Users/UserList/UserList';\nimport SearchUserList from '../components/Users/UserList/SearchUserList';\nimport UserDetail from '../components/Users/UserDetail';\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\n\nimport SidebarPage from './Sidebar';\nimport AlertBox from '../components/AlertBox';\nimport AttachmentViewer from '../components/AttachmentViewer';\nimport PdfCreator from '../components/PdfCreator';\n\nimport CreateUserForm from '../components/Forms/CreateUserForm';\nimport UpdateUserForm from '../components/Forms/UpdateUserForm';\nimport UpdateUserFieldForm from '../components/Forms/UpdateUserFieldForm';\nimport UpdateUserAttendanceForm from '../components/Forms/UpdateUserAttendanceForm';\nimport UpdateUserAttachmentForm from '../components/Forms/UpdateUserAttachmentForm';\nimport UpdateUserLeaveForm from '../components/Forms/UpdateUserLeaveForm';\nimport SearchUserForm from '../components/Forms/SearchUserForm';\nimport SearchUserIdForm from '../components/Forms/SearchUserIdForm';\nimport SearchUserNameForm from '../components/Forms/SearchUserNameForm';\nimport SearchUserAttendanceDateForm from '../components/Forms/SearchUserAttendanceDateForm';\nimport SearchUserLeaveDateRangeForm from '../components/Forms/SearchUserLeaveDateRangeForm';\n\nimport './Users.css';\n\nclass UsersPage extends Component {\n  state = {\n    creating: false,\n    updating: false,\n    deleting: false,\n    searching: false,\n    users: [],\n    searchUsers: [],\n    isLoading: false,\n    isSorting: false,\n    selectedUser: null,\n    userUpdateField: null,\n    userSearchField: null,\n    userSearchQuery: null,\n    canDelete: null,\n    userAlert: null,\n    file: null,\n    showAttachment: false,\n    showThisAttachmentFile: null,\n    showThisAttachmentType: null,\n    createPdf: false,\n    pdfData: null,\n  };\n  isActive = true;\n\n  static contextType = AuthContext;\n\n  // constructor(props) {\n  //   super(props);\n  // }\n\n  componentDidMount() {\n    this.fetchUsers();\n    if (this.context.user.name === 'admin579'){\n      this.setState({canDelete: true})\n    }\n  }\n\n\n  startCreateUserHandler = () => {\n    this.setState({ creating: true });\n    console.log(\"CreateUserForm...\");\n  };\n  startUpdateUserHandler = () => {\n    this.setState({ updating: true });\n    console.log(\"UpdateUserForm...\");\n  };\n\n  startSearchUserHandler = () => {\n    this.setState({ searching: true });\n    console.log(\"SearchUserForm...\");\n  };\n\n  modalConfirmHandler = (event) => {\n    console.log(`\n      event: ${JSON.stringify(event)},\n      `);\n\n    console.log(\"CreateUserFormData:  \", event.target.formGridEmail.value);\n\n    this.setState({ creating: false });\n    const email = event.target.formGridEmail.value;\n    const password = event.target.formGridPassword.value;\n    const name = event.target.formGridName.value;\n    const role = event.target.formGridRole.value;\n    let dob = event.target.formGridDob.value;\n    let phone = event.target.formGridPhone.value;\n    let addressNumber = event.target.formGridAddressNumber.value;\n    let addressStreet = event.target.formGridAddressStreet.value;\n    let addressTown = event.target.formGridAddressTown.value;\n    let addressParish = event.target.formGridAddressParish.value;\n    let addressPostOffice = event.target.formGridAddressPostOffice.value;\n    let employmentDate = event.target.formGridEmploymentDate.value;\n    let terminationDate = event.target.formGridTerminationDate.value;\n\n    if (\n      email.trim().length === 0 ||\n      password.trim().length === 0 ||\n      name.trim().length === 0 ||\n      role.trim().length === 0 ||\n      dob.trim().length === 0 ||\n      phone.trim().length === 0 ||\n      addressNumber.trim().length === 0 ||\n      addressStreet.trim().length === 0 ||\n      addressTown.trim().length === 0 ||\n      addressParish.trim().length === 0 ||\n      addressPostOffice.trim().length === 0 ||\n      employmentDate.trim().length === 0 ||\n      terminationDate.trim().length === 0\n    ) {\n      console.log(\"blank fields detected!!!...Please try again...\");\n      this.setState({userAlert: \"blank fields detected!!!...Please try again...\"});\n      return;\n    }\n\n    const token = this.context.token;\n    const userId = this.context.userId;\n    const user = { email, password, name, role, dob, phone, addressNumber, addressStreet, addressTown, addressParish, addressPostOffice, employmentDate, terminationDate };\n\n    console.log(`\n      creating user...\n      userId: ${userId}\n      email: ${email},\n      password: ${password},\n      name: ${name},\n      role: ${role},\n      dob: ${dob},\n      phone: ${phone},\n      addressNumber: ${addressNumber},\n      addressStreet: ${addressStreet},\n      addressTown: ${addressTown},\n      addressParish: ${addressParish},\n      addressPostOffice: ${addressPostOffice},\n      employmentDate: ${employmentDate},\n      terminationDate: ${terminationDate},\n      `);\n\n    const requestBody = {\n      query: `\n          mutation {\n            createUser(userInput: {email:\"${email}\",password:\"${password}\",name:\"${name}\",role:\"${role}\",dob:\"${dob}\",addressNumber:${addressNumber},addressStreet:\"${addressStreet}\",addressTown:\"${addressTown}\",addressParish:\"${addressParish}\",addressPostOffice:\"${addressPostOffice}\",phone:\"${phone}\",employmentDate:\"${employmentDate}\",terminationDate:\"${terminationDate}\"})\n            {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}\n          }\n        `\n    };\n\n    fetch('http://localhost:10000/graphql', {\n    // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"create user response data... \" + JSON.stringify(resData.data.createUser));\n        const responseAlert = JSON.stringify(resData.data).slice(0,8);\n        this.setState({userAlert: responseAlert});\n\n        this.setState(prevState => {\n          const updatedUsers = [...prevState.users];\n          updatedUsers.push(resData.data.createUser);\n\n          return { users: updatedUsers };\n        });\n        this.context.users = this.state.users;\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n  };\n\n\n  modalConfirmUpdateHandler = (event) => {\n\n    const token = this.context.token;\n    const userId = this.context.userId;\n    let selectedUserId = this.context.selectedUser._id;\n    if(userId !== selectedUserId && this.context.user.role !== 'admin') {\n      console.log(\"Not the creator or Admin! No edit permission!!\");\n      this.setState({userAlert: \"Not the creator or Admin! No edit permission!!\"});\n      selectedUserId = null;\n    }\n\n    console.log(\"UpdateUserFormData:  \", event.target.formGridEmail.value);\n\n    this.setState({ updating: false });\n\n    let email = event.target.formGridEmail.value;\n    let password = event.target.formGridPassword.value;\n    let name = event.target.formGridName.value;\n    let role = this.context.selectedUser.role;\n    let dob = event.target.formGridDob.value;\n    let phone = event.target.formGridPhone.value;\n    let addressNumber = event.target.formGridAddressNumber.value;\n    let addressStreet = event.target.formGridAddressStreet.value;\n    let addressTown = event.target.formGridAddressTown.value;\n    let addressParish = event.target.formGridAddressParish.value;\n    let addressPostOffice = event.target.formGridAddressPostOffice.value;\n    let employmentDate = event.target.formGridEmploymentDate.value;\n    let terminationDate = event.target.formGridTerminationDate.value;\n\n    if (email.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      email = this.context.selectedUser.email;\n    }\n    if (password.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      password = this.context.selectedUser.password;\n    }\n    if (name.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      name = this.context.selectedUser.name;\n    }\n    // if (role.trim().length === 0) {\n    //   console.log(\"blank fields detected!!!...filling w/ previous data...\");\n    //   role = this.state.selectedUser.role;\n    // }\n    if (dob.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      dob = this.context.selectedUser.dob;\n    }\n    if (phone.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      phone = this.context.selectedUser.phone;\n    }\n    if (addressNumber.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      addressNumber = this.context.selectedUser.address.number;\n    }\n    if (addressStreet.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      addressStreet = this.context.selectedUser.address.street;\n    }\n    if (addressTown.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      addressTown = this.context.selectedUser.address.town;\n    }\n    if (addressParish.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      addressParish = this.context.selectedUser.address.parish;\n    }\n    if (addressPostOffice.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      addressPostOffice = this.context.selectedUser.address.postOffice;\n    }\n    if (employmentDate.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      employmentDate = this.context.selectedUser.employmentDate;\n    }\n    if (terminationDate.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      terminationDate = this.context.selectedUser.terminationDate;\n    }\n\n    const user = { email, password, name, role, dob, phone, addressNumber, addressStreet, addressTown, addressParish, addressPostOffice, employmentDate, terminationDate };\n    console.log(`\n      updating user profile...\n      userId: ${userId}\n      email: ${email},\n      password: ${password},\n      name: ${name},\n      role: ${role},\n      dob: ${dob},\n      phone: ${phone},\n      addressNumber: ${addressNumber},\n      addressStreet: ${addressStreet},\n      addressTown: ${addressTown},\n      addressParish: ${addressParish},\n      addressPostOffice: ${addressPostOffice},\n      employmentDate: ${employmentDate},\n      terminationDate: ${terminationDate},\n      `);\n      this.setState({userAlert: \"updating user profile...\"});\n\n    const requestBody = {\n      query: `\n      mutation {updateUser(userId:\\\"${userId}\\\",selectedUserId:\\\"${selectedUserId}\\\",userInput: {email:\\\"${email}\\\",password:\\\"${password}\\\",name:\\\"${name}\\\",dob:\\\"${dob}\\\",addressNumber:${addressNumber},addressStreet:\\\"${addressStreet}\\\",addressTown:\\\"${addressTown}\\\",addressParish:\\\"${addressParish}\\\", addressPostOffice:\\\"${addressPostOffice}\\\",phone:\\\"${phone}\\\",role:\\\"${role}\\\",employmentDate:\\\"${employmentDate}\\\",terminationDate:\\\"${terminationDate}\\\"})\n      {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n        `};\n\n        // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }})\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n        const updatedUser = resData.data.updateUser;\n        console.log(\"updatedUser:  \", JSON.stringify(updatedUser));\n        this.setState({user: updatedUser})\n        this.state.users.push(resData.data.updateUser);\n        this.context.users = this.state.users;\n\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert, selectedUser: resData.data.updateUser})\n        this.fetchUsers();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n  };\n\n\n  modalConfirmUpdateFieldHandler = (event) => {\n\n    const token = this.context.token;\n    const userId = this.context.userId;\n    let selectedUserId = this.context.selectedUser._id;\n    // if(userId !== selectedUserId && this.context.user.role !== 'admin') {\n    //   console.log(\"Not the creator or Admin! No edit permission!!\");\n    //   selectedUserId = null;\n    // }\n\n\n      console.log(\"UpdateUserFieldFormData:  \", event.target.formGridField.value, event.target.formGridFieldSelect.value);\n      this.setState({ updating: false });\n\n      let field = null;\n      let query = event.target.formGridQuery.value;\n      if (event.target.formGridFieldSelect.value === \"select\") {\n        field = event.target.formGridField.value;\n      } else {\n        field = event.target.formGridFieldSelect.value;\n      }\n      console.log(`\n          field: ${field},\n          query: ${query},\n        `);\n\n        this.setState({ userAlert: \"updating user field...\"})\n\n      const requestBody = {\n        query:`\n          mutation{updateUserField(userId:\"${userId}\",selectedUserId:\"${selectedUserId}\",field:\"${field}\",query:\"${query}\")\n          {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}\n        }\n        `};\n\n        // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData.data.updateUserField));\n\n          const updatedUserId = resData.data.updateUserField._id;\n          const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n          const updatedUserPos = this.state.users.indexOf(updatedUser);\n          const slicedArray = this.state.users.splice(updatedUserPos, 1);\n          console.log(\"updatedUser:  \", JSON.stringify(updatedUser),\"  updatedUserPos:  \", updatedUserPos, \"  slicedArray:  \", slicedArray);\n\n          this.state.users.push(resData.data.updateUserField);\n          this.context.users = this.state.users;\n          const responseAlert = JSON.stringify(resData.data).slice(2,25);\n          this.setState({ userAlert: responseAlert, selectedUser: resData.data.updateUserField})\n          this.fetchUsers();\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({userAlert: err});\n        });\n\n  }\n\n  updateUserAttendanceHandler = (event) => {\n    const token = this.context.token;\n    const userId = this.context.userId;\n    let selectedUserId = this.context.selectedUser._id;\n    // if(userId !== selectedUserId && this.context.user.role !== 'admin') {\n    //   console.log(\"Not the creator or Admin! No edit permission!!\");\n    //   selectedUserId = null;\n    // }\n    if (userId !== selectedUserId && this.context.user.role !== \"admin\" ) {\n      console.log(\"Not the creator or Admin! No edit permission!!\");\n      this.setState({ userAlert: \"Not the creator or Admin! No edit permission!!\"});\n        selectedUserId = null;\n    }\n\n    console.log(\"UpdateUserAttendanceFormData:  \", AuthContext._currentValue.fancyDate);\n\n    this.setState({ updating: false , userUpdateField: null });\n\n    // FIX ME!!!\n    let attendanceDate = AuthContext._currentValue.fancyDate;\n    let attendanceStatus = event.target.formGridAttendanceStatus.value;\n    let attendanceDescription = event.target.formGridAttendanceDescription.value;\n\n    if (\n    // attendanceDate.trim().length === 0 ||\n    attendanceStatus.trim().length === 0\n    ){\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      return\n    }\n\n    const userAttendance = { attendanceDate, attendanceStatus, attendanceDescription }\n    console.log(`\n      adding user attendance item...\n      userId: ${userId},\n      selectedUserId: ${selectedUserId}\n      attendanceDate: ${attendanceDate},\n      attendanceStatus: ${attendanceStatus},\n      attendanceDescription: ${attendanceDescription}\n      `);\n\n      this.setState({ userAlert: \"adding user attendance item...\"});\n\n      const requestBody = {\n        query:`\n          mutation {updateUserAttendance(userId:\"${userId}\", selectedUserId:\"${selectedUserId}\",userInput:{attendanceDate:\"${attendanceDate}\",attendanceStatus:\"${attendanceStatus}\",attendanceDescription:\"${attendanceDescription}\"})\n          {_id,name,email,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description}}}\n        `};\n\n      // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData.data.updateUserAttendance));\n\n          const updatedUserId = resData.data.updateUserAttendance._id;\n          const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n          const updatedUserPos = this.state.users.indexOf(updatedUser);\n          const slicedArray = this.state.users.splice(updatedUserPos, 1);\n          console.log(\"updatedUser:  \", JSON.stringify(updatedUser),\"  updatedUserPos:  \", updatedUserPos, \"  slicedArray:  \", slicedArray);\n\n          this.state.users.push(resData.data.updateUserAttendance);\n          this.context.users = this.state.users;\n          const responseAlert = JSON.stringify(resData.data).slice(2,25);\n          this.setState({ userAlert: responseAlert, selectedUser: resData.data.updateUserAttendance})\n          this.fetchUsers();\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({userAlert: err});\n        });\n\n\n  }\n\n    updateUserAttachmentHandler = (event) => {\n\n    const token = this.context.token;\n    const userId = this.context.userId;\n    let selectedUserId = this.context.selectedUser._id;\n    // if(userId !== selectedUserId && this.context.user.role !== 'admin') {\n    //   console.log(\"Not the creator or Admin! No edit permission!!\");\n    //   selectedUserId = null;\n    // }\n    if (userId !== selectedUserId && this.context.user.role !== \"admin\" ) {\n      console.log(\"Not the creator or Admin! No edit permission!!\");\n      this.setState({userAlert: \"Not the creator or Admin! No edit permission!!\"})\n        selectedUserId = null;\n    }\n\n    console.log(\"UpdateUserAttachmentFormData:  \");\n\n    this.setState({ updating: false , userUpdateField: null });\n\n    // let attachmentName = event.target.formGridAttachmentName.value;\n    let attachmentFormat = event.target.formGridAttachmentFormat.value;\n    let attachmentPath = event.target.formGridAttachmentPath.value;\n    let file = AuthContext._currentValue.file;\n\n    console.log(`\n      uploading to s3...\n      file.name: ${file.name},\n      AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n      `);\n    const config = {\n      bucketName: 'ent-emr-bucket',\n      dirName: attachmentPath,\n      region: 'us-east-2',\n      accessKeyId: \"AKIARFTS6Q6DALQKT4QR\",\n      secretAccessKey: \"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\",\n    }\n    const ReactS3Client = new S3(config);\n    const newFileName = file.name;\n    const attachmentName = newFileName;\n\n    ReactS3Client\n        .uploadFile(file, newFileName)\n        .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n        .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n    if (\n      attachmentName.trim().length === 0 ||\n      attachmentFormat.trim().length === 0 ||\n      attachmentPath.trim().length === 0\n  ) {\n      console.log(\"blank fields detected!!! try again\");\n      return\n    }\n\n    const userAttachment = { attachmentName, attachmentFormat, attachmentPath }\n    console.log(`\n      adding user attachment item...\n      userId: ${userId},\n      selectedUserId: ${selectedUserId}\n      attachmentName: ${attachmentName},\n      attachmentFormat: ${attachmentFormat},\n      attachmentPath: ${attachmentPath},\n      `);\n      this.setState({userAlert: \"adding user attatchment item...\"})\n\n      const requestBody = {\n        query:`\n          mutation{updateUserAttachment(userId:\\\"${userId}\\\",selectedUserId:\\\"${selectedUserId}\\\",userInput:{attachmentName:\\\"${attachmentName}\\\",attachmentFormat:\\\"${attachmentFormat}\\\",attachmentPath:\\\"${attachmentPath}\\\"})\n          {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n        `};\n\n        // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData.data.updateUserAttachment));\n\n          const updatedUserId = resData.data.updateUserAttachment._id;\n          const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n          const updatedUserPos = this.state.users.indexOf(updatedUser);\n          const slicedArray = this.state.users.splice(updatedUserPos, 1);\n          console.log(\"updatedUser:  \", JSON.stringify(updatedUser),\"  updatedUserPos:  \", updatedUserPos, \"  slicedArray:  \", slicedArray);\n\n          this.state.users.push(resData.data.updateUserAttachment);\n          this.context.users = this.state.users;\n          const responseAlert = JSON.stringify(resData.data).slice(2,25);\n          this.setState({ userAlert: responseAlert, selectedUser: resData.data.updateUserAttachment})\n          this.fetchUsers();\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({userAlert: err});\n        });\n\n\n  }\n\n\n  updateUserLeaveHandler = (event) => {\n\n    const token = this.context.token;\n    const userId = this.context.userId;\n    let selectedUserId = this.context.selectedUser._id;\n    // if(userId !== selectedUserId && this.context.user.role !== 'admin') {\n    //   console.log(\"Not the creator or Admin! No edit permission!!\");\n    //   selectedUserId = null;\n    // }\n    if (userId !== selectedUserId && this.context.user.role !== \"admin\" ) {\n      console.log(\"Not the creator or Admin! No edit permission!!\");\n      this.setState({userAlert: \"Not the creator or Admin! No edit permission!!\"})\n        selectedUserId = null;\n    }\n\n    console.log(\"UpdateUserLeaveFormData:  \", event.target.formGridLeaveType.value);\n\n    this.setState({ updating: false , userUpdateField: null });\n\n    let leaveType = event.target.formGridLeaveType.value;\n    let leaveTitle = event.target.formGridLeaveTitle.value;\n    let leaveStartDate = event.target.formGridLeaveStartDate.value;\n    let leaveEndDate = event.target.formGridLeaveEndDate.value;\n\n    if (\n      leaveType.trim().length === 0 ||\n      leaveTitle.trim().length === 0 ||\n      leaveStartDate.trim().length === 0 ||\n      leaveEndDate.trim().length === 0\n    ) {\n      console.log(\"blank fields detected!!!...try again\");\n      this.setState({userAlert: \"blank fields detected!!!...try again\"});\n      return\n    }\n\n    const userLeave = { leaveType, leaveTitle, leaveStartDate, leaveEndDate }\n    console.log(`\n      adding user leave item...\n      userId: ${userId},\n      selectedUserId: ${selectedUserId}\n      leave: {\n        type: ${leaveType},\n        title: ${leaveTitle},\n        startDate: ${leaveStartDate},\n        endDate: ${leaveEndDate}\n      }\n      `);\n      this.setState({userAlert: \"adding user leave item...\"})\n\n      const requestBody = {\n        query:`\n          mutation{updateUserLeave(userId:\\\"${userId}\\\",selectedUserId:\\\"${selectedUserId}\\\",userInput:{leaveType:\\\"${leaveType}\\\",leaveTitle:\\\"${leaveTitle}\\\",leaveStartDate:\\\"${leaveStartDate}\\\",leaveEndDate:\\\"${leaveEndDate}\\\"})\n          {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n        `};\n\n        // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData.data));\n\n          const updatedUserId = resData.data.updateUserLeave._id;\n          const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n          const updatedUserPos = this.state.users.indexOf(updatedUser);\n          const slicedArray = this.state.users.splice(updatedUserPos, 1);\n          console.log(\"updatedUser:  \", JSON.stringify(updatedUser),\"  updatedUserPos:  \", updatedUserPos, \"  slicedArray:  \", slicedArray);\n\n          this.state.users.push(resData.data.updateUserLeave);\n          this.context.users = this.state.users;\n          const responseAlert = JSON.stringify(resData.data).slice(2,25);\n          this.setState({ userAlert: responseAlert, selectedUser: resData.data.updateUserLeave})\n          this.fetchUsers();\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({userAlert: err});\n        });\n\n  }\n\n\n  modalConfirmSearchHandler = (event) => {\n    console.log(\"SearchUserForm:  \");\n\n\n    let userId = this.context.userId;\n\n      console.log(\"SearchUserFormData:  \", event.target.formBasicField.value);\n      this.setState({ searching: false });\n\n      let field = null;\n      let query = event.target.formBasicQuery.value;\n      if (event.target.formBasicFieldSelect.value === \"select\") {\n        field = event.target.formBasicField.value;\n      } else {\n        field = event.target.formBasicFieldSelect.value;\n      }\n\n      this.setState({\n        userSearchField: field,\n        userSearchQuery: query,\n      })\n\n      if (\n        field.trim().length === 0 ||\n        query.trim().length === 0\n      ) {\n        console.log(\"blank fields detected!!!...Please try again...\");\n        this.setState({userAlert: \"blank fields detected!!!...Please try again...\"})\n        return;\n      }\n\n      const search = { field, query }\n      console.log(\"Searching for User:  \", JSON.stringify(search));\n      this.setState({userAlert: \"Searching for User...\"})\n\n      const requestBody = {\n        query: `\n          query {getUserField(userId:\"${userId}\",field:\"${field}\",query:\"${query}\")\n          {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n        `}\n\n      const token = this.context.token;\n\n      // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData));\n\n          const responseAlert = JSON.stringify(resData.data).slice(0,8);\n          this.setState({userAlert: responseAlert});\n\n          const searchUsers = resData.data.getUserField;\n\n          this.setState({ searchUsers: searchUsers})\n          console.log(\"state.searchUsers:  \", this.state.searchUsers);\n          // this.fetchUsers();\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({userAlert: err});\n        });\n  }\n\n  modalConfirmSearchIdHandler = (event) => {\n\n    let userId = this.context.userId;\n    this.setState({ searching: false });\n\n    console.log(\"SearchUserIdFormData:\", event.target.formBasicId.value);\n    let selectedUserId = event.target.formBasicId.value;\n\n    const requestBody = {\n      query: `\n        query {getUserId(userId:\"${userId}\",selectedUserId:\"${selectedUserId}\")\n        {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n      `}\n\n    const token = this.context.token;\n\n    // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({userAlert: responseAlert});\n\n        const searchUsers = resData.data.getUserId;\n\n        this.setState({ searchUsers: [searchUsers] });\n        console.log(\"state.searchUsers:  \", this.state.searchUsers);\n        // this.fetchUsers();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n  }\n  modalConfirmSearchAttendanceDateHandler = (event) => {\n\n    let userId = this.context.userId;\n    this.setState({ searching: false });\n\n    console.log(\"SearchUserAttendanceDateFormData:\");\n\n    const attendanceDate = event.target.formBasicDate.value;\n\n    const requestBody = {\n      query: `\n        query {getUserAttendanceDate(userId:\"${userId}\",attendanceDate:\"${attendanceDate}\")\n        {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n      `}\n\n    const token = this.context.token;\n\n    // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n\n        const responseAlert = JSON.stringify(resData.data).slice(0,8);\n        this.setState({userAlert: responseAlert});\n\n        const searchUsers = resData.data.getUserAttendanceDate;\n\n        this.setState({ searchUsers: searchUsers})\n        console.log(\"state.searchUsers:  \", this.state.searchUsers);\n        // this.fetchUsers();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n  }\n  modalConfirmSearchLeaveDateRangeHandler = (event) => {\n\n    let userId = this.context.userId;\n    this.setState({ searching: false });\n\n    console.log(\"SearchUserLeaveDateRangeFormData:\");\n\n    const startDate = event.target.formBasicStartDate.value;\n    const endDate = event.target.formBasicEndDate.value;\n\n    const requestBody = {\n      query: `\n        query{getUserLeaveDateRange(userId:\"${userId}\",startDate:\"${startDate}\",endDate:\"${endDate}\")\n        {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n      `}\n\n    const token = this.context.token;\n\n    // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n\n        const responseAlert = JSON.stringify(resData.data).slice(0,8);\n        this.setState({userAlert: responseAlert});\n\n        const searchUsers = resData.data.getUserLeaveDateRange;\n\n        this.setState({ searchUsers: searchUsers})\n        console.log(\"state.searchUsers:  \", this.state.searchUsers);\n        // this.fetchUsers();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n  }\n\n  modalConfirmSearchNameHandler = (event) => {\n    console.log(\"SearchUserNameFormData:\", event.target.formBasicName.value);\n\n    let userId = this.context.userId;\n    this.setState({ searching: false });\n\n    let users = this.state.users;\n    const regex = new RegExp(event.target.formBasicName.value,\"i\");\n    console.log(`\n      regex: ${regex},\n      `);\n      let result = users.filter(user => user.name.match(regex))\n      console.log(`\n        result: ${JSON.stringify(result)}\n        `);\n\n        this.setState({ searchUsers: result})\n\n  }\n\n\n  modalCancelHandler = () => {\n    this.setState({ creating: false, updating: false, deleting: false, searching: false});\n  };\n\n  fetchUsers() {\n    console.log(\"fetch users:\");\n    // console.log(\"'fetch users function' context object... \" + JSON.stringify(this.context));\n    const userId = this.context.userId;\n\n    this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n          query {users (userId:\"${userId}\")\n          {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n        `};\n\n    // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          this.context.userAlert = 'Failed!';\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n\n        const responseAlert = JSON.stringify(resData.data).slice(0,8);\n        this.setState({userAlert: responseAlert});\n\n        const users = resData.data.users;\n        console.log(\"resData:  \", resData);\n        console.log(users);\n\n        if (this.isActive) {\n          this.setState({ users: users, isLoading: false });\n        }\n        this.context.users = this.state.users;\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n        if (this.isActive) {\n          this.setState({ isLoading: false });\n        }\n      });\n  }\n\n  fetchUsersAsc = () => {\n    console.log(\"'fetch usersAsc function' context object... \" + JSON.stringify(this.context));\n    const userId = this.context.userId;\n\n    // this.setState({ isSorting: true });\n    const requestBody = {\n      query: `\n          query {usersNameAsc (userId:\"${userId}\")\n          {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n        `};\n\n    // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          this.context.userAlert = 'Failed!';\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const users = resData.data.usersNameAsc;\n        console.log(\"resData:  \", resData);\n        console.log(users);\n\n        const responseAlert = JSON.stringify(resData.data).slice(0,8);\n        this.setState({userAlert: responseAlert});\n\n        this.setState({users: users});\n        // if (this.isActive) {\n        //   this.setState({ users: users, isLoading: false });\n        // }\n        this.context.users = this.state.users;\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n        // if (this.isActive) {\n        //   this.setState({ isLoading: false });\n        // }\n      });\n  }\n  fetchUsersDesc = () => {\n    console.log(\"'fetch usersDesc function' context object... \" + JSON.stringify(this.context));\n    const userId = this.context.userId;\n\n    // this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n          query {usersNameDesc (userId:\"${userId}\")\n          {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n        `};\n\n    // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          this.context.userAlert = 'Failed!';\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const users = resData.data.usersNameDesc;\n        console.log(\"resData:  \", resData);\n        console.log(users);\n\n        const responseAlert = JSON.stringify(resData.data).slice(0,8);\n        this.setState({userAlert: responseAlert});\n\n        // if (this.isActive) {\n        //   this.setState({ users: users, isLoading: false });\n        // }\n        this.setState({users: users});\n        this.context.users = this.state.users;\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n        // if (this.isActive) {\n        //   this.setState({ isLoading: false });\n        // }\n      });\n  }\n\nmodalDeleteHandler = () => {\n  console.log(\"deleting user...selectedUser:  \", this.context.selectedUser);\n\n  const userId = this.context.userId;\n  const selectedUserId = this.context.selectedUser._id;\n\n  if(this.context.user.role !== 'admin') {\n    console.log(\"Not the Admin! No edit permission!!\");\n    this.setState({userAlert: \"Not the Admin! No edit permission!!\"})\n  }\n\n  this.setState({deleting: true, userAlert: \"deleting user..\"});\n\n  const requestBody = {\n    query: `\n        mutation {\n          deleteUser(userId: ${userId}, selectedUserId: ${selectedUserId})\n          {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}\n        }\n      `};\n\n  // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n  fetch('http://localhost:10000/graphql', {\n    method: 'POST',\n    body: JSON.stringify(requestBody),\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + this.context.token\n    }\n  })\n    .then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n      return res.json();\n    })\n    .then(resData => {\n\n      const responseAlert = JSON.stringify(resData.data).slice(0,8);\n      this.setState({userAlert: responseAlert});\n\n      let deletedUser = resData.data.deleteUser;\n      console.log(deletedUser);\n\n      let deletedUserId = deletedUser._id;\n      deletedUser = this.state.users.find(e => e._id === deletedUserId);\n      const deletedUserPos = this.state.users.indexOf(deletedUser);\n      const slicedArray = this.state.users.splice(deletedUserPos, 1);\n      console.log(\"deletedUser:  \", JSON.stringify(deletedUser),\"  deletedUserPos:  \", deletedUserPos, \"  slicedArray:  \", slicedArray);\n\n      this.setState({ deleting: false, selectedUser: null });\n      this.context.selectedUser = null;\n\n      this.fetchUsers();\n\n    })\n    .catch(err => {\n      console.log(err);\n      this.setState({userAlert: err});\n      if (this.isActive) {\n        this.setState({ deleting: false });\n      }\n    });\n\n}\n\ndeleteUserAttendanceItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let selectedUserId = this.state.selectedUser._id;\n  let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n  console.log(`\n    delete user Attendance item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    selectedUserId: ${selectedUserId},\n    attandance date: ${date},\n    `);\n\n    const requestBody = {\n      query: `\n       mutation{deleteUserAttendance(userId:\\\"${userId}\\\",selectedUserId:\\\"${selectedUserId}\\\",attendanceDate:\\\"${date}\\\")\n       {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n    `};\n\n        // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedUser = resData.data.deleteUserAttendance;\n            console.log(\"resData.data:  \",resData.data.deleteUserAttendance);\n\n            const updatedUserId = resData.data.deleteUserAttendance._id;\n            const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n            const updatedUserPos = this.state.users.indexOf(updatedUser);\n            const slicedArray = this.state.users.splice(updatedUserPos, 1);\n            console.log(\"updatedUser:  \", JSON.stringify(updatedUser),\"  updatedUserPos:  \", updatedUserPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.users.push(resData.data.deleteUserAttendance);\n            this.context.users = this.state.users;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            // this.setState({ userAlert: responseAlert, selectedUser: resData.data.deleteUserAttendance})\n            this.fetchUsers();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeleteUserLeaveItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let selectedUserId = this.state.selectedUser._id;\n\n  console.log(`\n    delete user Leave item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    selectedUserId: ${selectedUserId},\n    `);\n\n    const requestBody = {\n      query: `\n       mutation{deleteUserLeave(userId:\\\"${userId}\\\",selectedUserId:\\\"${selectedUserId}\\\",leaveTitle:\\\"${props.title}\\\")\n       {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n    `};\n\n        // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedUser = resData.data.deleteUserLeave;\n            console.log(deletedUser);\n\n            const updatedUserId = resData.data.deleteUserLeave._id;\n            const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n            const updatedUserPos = this.state.users.indexOf(updatedUser);\n            const slicedArray = this.state.users.splice(updatedUserPos, 1);\n            console.log(\"updatedUser:  \", JSON.stringify(updatedUser),\"  updatedUserPos:  \", updatedUserPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.users.push(resData.data.deleteUserLeave);\n            this.context.users = this.state.users;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            // this.setState({ userAlert: responseAlert, selectedUser: resData.data.deleteUserLeave})\n            this.fetchUsers();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeleteUserAttachmentItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let selectedUserId = this.state.selectedUser._id;\n\n  console.log(`\n    delete user Attachment item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    selectedUserId: ${selectedUserId},\n    `);\n\n    console.log(`\n      deleting from s3...\n      file.name: ${props.name},\n      `);\n\n    const config = {\n      bucketName: 'ent-emr-bucket',\n      dirName: props.path,\n      region: 'us-east-2',\n      accessKeyId: \"AKIARFTS6Q6DALQKT4QR\",\n      secretAccessKey: \"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\",\n    }\n    const ReactS3Client = new S3(config);\n    const filename = props.name;\n    // const attachmentName = newFileName;\n    //\n    S3FileUpload\n    .deleteFile(filename, config)\n    .then(response => console.log(response))\n    .catch(err => console.error(err))\n\n\n    const requestBody = {\n      query: `\n       mutation{deleteUserAttachment(userId:\\\"${userId}\\\",selectedUserId:\\\"${selectedUserId}\\\",attachmentName:\\\"${props.name}\\\")\n       {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n    `};\n\n        // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedUser = resData.data.deleteUserAttachment;\n            console.log(deletedUser);\n\n            const updatedUserId = resData.data.deleteUserAttachment._id;\n            const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n            const updatedUserPos = this.state.users.indexOf(updatedUser);\n            const slicedArray = this.state.users.splice(updatedUserPos, 1);\n            console.log(\"updatedUser:  \", JSON.stringify(updatedUser),\"  updatedUserPos:  \", updatedUserPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.users.push(resData.data.deleteUserAttachment);\n            this.context.users = this.state.users;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            // this.setState({ userAlert: responseAlert, selectedUser: resData.data.deleteUserAttachment})\n            this.fetchUsers();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\n\n\nupdateUserSpecial (event) {\n\n  console.log(\"special field to update:  \", event.target.value);\n  const field = event.target.value;\n  this.setState({ userUpdateField: field});\n\n}\n\n  showDetailHandler = userId => {\n\n    this.setState(prevState => {\n      const selectedUser = prevState.users.find(e => e._id === userId);\n      this.context.selectedUser = selectedUser;\n      this.setState({selectedUser: selectedUser});\n      console.log(\"User selected  :  \", selectedUser);\n      return { selectedUser: selectedUser };\n    });\n  };\n\n  onViewAttachment = (attachment) => {\n    console.log(`\n      setting up attachment viewer...\n      attachment: ${JSON.stringify(attachment)}\n      `);\n      this.setState({showAttachment: true})\n\n      const file = \"https://ent-emr-bucket.s3-us-east-2.amazonaws.com/\"+attachment.path+\"/\"+attachment.name;\n      const type = attachment.format;\n\n      this.setState({showThisAttachmentFile: file, showThisAttachmentType: type})\n  }\n\n  closeAttachmentView = () => {\n    console.log(`\n      closing attachment viewer...\n      `);\n      this.setState({showAttachment: false})\n  }\n\n  createPdf = (user) => {\n    console.log(`\n        creating pdf...\n        user: ${JSON.stringify(user)}\n      `);\n\n      const pdfData = {\n        title: user.name,\n        body: user.dob,\n      };\n\n    this.setState({createPdf: true, pdfData: pdfData})\n  }\n\n  closePdfCreator = () => {\n    console.log(`\n      closing pdf creator...\n      `);\n      this.setState({createPdf: false, pdfData: null})\n  }\n\n  userSearchClearlHandler () {\n    console.log(\"clearing user search results\");\n    this.setState({searchUsers: [], userAlert: \"clearing user search results\"});\n  }\n\n\n  componentWillUnmount() {\n    this.isActive = false;\n  }\n\n  render() {\n    return (\n\n    <React.Fragment>\n    {this.state.showAttachment === true && (\n      <AttachmentViewer\n        onCloseAttachmentView={this.closeAttachmentView}\n        attachmentFile={this.state.showThisAttachmentFile}\n        attachmentType={this.state.showThisAttachmentType}\n      />\n    )}\n\n    {this.state.createPdf === true && (\n        <PdfCreator\n          pdfData={this.state.pdfData}\n          onClosePdfCreator={this.closePdfCreator}\n        />\n    )}\n\n    <Accordion>\n\n    <Row>\n\n    <Col md={3} className=\"MasterCol1\">\n\n    <AlertBox\n      authUserId={this.context.userId}\n      alert={this.state.userAlert}\n    />\n\n    <SidebarPage/>\n\n    </Col>\n\n    <Col md={9} className=\"MasterCol2\">\n\n        <Container className=\"containerCombinedDetail\">\n\n        <Tab.Container id=\"left-tabs-example\" defaultActiveKey=\"userDetail\">\n          <Row>\n            <Col sm={2}>\n              <Nav variant=\"pills\" className=\"flex-column\">\n                <Nav.Item>\n                  <Nav.Link eventKey=\"MasterList\">MASTER LIST</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey=\"userDetail\">Selected</Nav.Link>\n                </Nav.Item>\n                { this.context.user.role === \"admin\" && (\n                <Nav.Item>\n                  <Nav.Link eventKey=\"userCreate\">Create New</Nav.Link>\n                </Nav.Item>\n                )}\n                <Nav.Item>\n                  <Nav.Link eventKey=\"disabled\" disabled>Edit:</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey=\"userEditDemographics\">Demographics</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey=\"userEditField\">Single Field</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey=\"disabled\" disabled>Add:</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey=\"userEditAttendance\">Attendance</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey=\"userEditLeave\">Leave</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey=\"userEditAttachment\">Attachment</Nav.Link>\n                </Nav.Item>\n\n                <Nav.Item>\n                  <Nav.Link eventKey=\"disabled\" disabled>Search:</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey=\"SearchInput\">Input</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey=\"SearchResult\">Results</Nav.Link>\n                </Nav.Item>\n              </Nav>\n            </Col>\n\n            <Col sm={10}>\n              <Tab.Content>\n                <Tab.Pane eventKey=\"userDetail\">\n                  {this.state.selectedUser === null && (\n                    <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                      Select a Staff member from the Master List\n                    </Button>\n                  )}\n                  {this.state.isLoading === false &&\n                    this.state.selectedUser !== null\n                    && (\n                      <UserDetail\n                      authUserId={this.context.userId}\n                      AuthContext={this.context}\n                      user={this.state.selectedUser}\n                      onEdit={this.startUpdateUserHandler}\n                      canDelete={this.state.canDelete}\n                      onDelete={this.modalDeleteHandler}\n                      attendanceDelete={this.deleteUserAttendanceItem}\n                      leaveDelete={this.deleteUserLeaveItem}\n                      attachmentDelete={this.deleteUserAttachmentItem}\n                      onViewAttachment={this.onViewAttachment}\n                      onCreatePdf={this.createPdf}\n                      />\n                    )}\n                </Tab.Pane>\n\n                { this.context.user.role === \"admin\" && (\n                  <Tab.Pane eventKey=\"userCreate\">\n                  <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" onClick={this.startCreateUserHandler} >Create a NEW Staff Profile</Button>\n                    {this.state.creating && (\n                      <CreateUserForm\n                        authUserId={this.context.userId}\n                        canCancel\n                        canConfirm\n                        onCancel={this.modalCancelHandler}\n                        onConfirm={this.modalConfirmHandler}\n                        onSubmit={this.modalConfirmHandler}\n                        confirmText=\"Confirm\"\n                      />\n                    )}\n                  </Tab.Pane>\n                )}\n\n\n                <Tab.Pane eventKey=\"userEditDemographics\">\n                  {this.state.selectedUser === null && (\n                    <Button variant=\"outline-warning\" className=\"confirmEditButton\" size=\"lg\">\n                      Select a Staff member from the Master List\n                    </Button>\n                  )}\n                  {this.state.selectedUser !== null &&\n                    this.context.user.role === \"admin\"\n                    && (\n                    <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" onClick={this.startUpdateUserHandler}>Edit Demographics as Admin</Button>\n                  )}\n                  {this.state.selectedUser !== null &&\n                    this.state.selectedUser._id === this.context.user._id\n                    && (\n                    <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" onClick={this.startUpdateUserHandler}>Edit Demographics</Button>\n                  )}\n                  {this.state.selectedUser !== null &&\n                    this.state.selectedUser._id === this.context.user._id && (\n                    <Button variant=\"outline-danger\" className=\"confirmEditButton\" size=\"lg\">\n                      Your Profile\n                    </Button>\n                  )}\n                  {this.state.selectedUser !== null &&\n                    this.state.selectedUser._id !== this.context.user._id && (\n                    <Button variant=\"outline-danger\" className=\"confirmEditButton\" size=\"lg\">\n                      Not my profile\n                    </Button>\n                  )}\n                  {this.state.updating &&\n                    this.state.selectedUser !== null\n                    && (\n                    <UpdateUserForm\n                      authUserId={this.context.userId}\n                      canCancel\n                      canConfirm\n                      onCancel={this.modalCancelHandler}\n                      onConfirm={this.modalConfirmUpdateHandler}\n                      confirmText=\"Confirm\"\n                      user={this.context.selectedUser}\n                    />\n                  )}\n                </Tab.Pane>\n\n                <Tab.Pane eventKey=\"userEditField\">\n                  {this.state.selectedUser === null && (\n                    <Button variant=\"outline-warning\" className=\"confirmEditButton\" size=\"lg\">\n                      Select a Staff member from the Master List\n                    </Button>\n                  )}\n\n                  {this.state.selectedUser !== null &&\n                    this.context.user.role === \"admin\"\n                    && (\n                    <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" onClick={this.startUpdateUserHandler}>Edit Field as Admin</Button>\n                  )}\n                  {this.state.selectedUser !== null &&\n                    this.state.selectedUser._id === this.context.user._id\n                    && (\n                    <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" onClick={this.startUpdateUserHandler}>Edit a Single Field</Button>\n                  )}\n                  {this.state.selectedUser !== null &&\n                    this.state.selectedUser._id === this.context.user._id && (\n                    <Button variant=\"outline-success\" className=\"confirmEditButton\" size=\"lg\">\n                      Your Profile\n                    </Button>\n                  )}\n                  {this.state.selectedUser !== null &&\n                    this.state.selectedUser._id !== this.context.user._id && (\n                    <Button variant=\"outline-danger\" className=\"confirmEditButton\" size=\"lg\">\n                      Not my profile\n                    </Button>\n                  )}\n                  {this.state.updating &&\n                    this.state.selectedUser !== null\n                    && (\n                      <UpdateUserFieldForm\n                        authUserId={this.context.userId}\n                        canCancel\n                        canConfirm\n                        onCancel={this.modalCancelHandler}\n                        onConfirm={this.modalConfirmUpdateFieldHandler}\n                        confirmText=\"Confirm\"\n                        user={this.state.selectedUser}\n                      />\n                  )}\n                </Tab.Pane>\n\n                <Tab.Pane eventKey=\"userEditAttendance\">\n                  {this.state.selectedUser === null && (\n                    <Button variant=\"outline-warning\" className=\"confirmEditButton\" size=\"lg\">\n                      Select a Staff member from the Master List below\n                    </Button>\n                  )}\n\n                  {this.state.selectedUser !== null &&\n                    this.context.user.role === \"admin\"\n                    && (\n                    <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" value='attendance' onClick={this.updateUserSpecial.bind(this)}>Add Attendance as Admin</Button>\n                  )}\n                  {this.state.selectedUser !== null &&\n                    this.state.selectedUser._id === this.context.user._id\n                    && (\n                    <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" value='attendance' onClick={this.updateUserSpecial.bind(this)}>Add Attendance</Button>\n                  )}\n                  {this.state.selectedUser !== null &&\n                    this.state.selectedUser._id === this.context.user._id && (\n                    <Button variant=\"outline-success\" className=\"confirmEditButton\" size=\"lg\">\n                      Your Profile\n                    </Button>\n                  )}\n                  {this.state.selectedUser !== null &&\n                    this.state.selectedUser._id !== this.context.user._id && (\n                    <Button variant=\"outline-danger\" className=\"confirmEditButton\" size=\"lg\">\n                      Not my profile\n                    </Button>\n                  )}\n\n                  {this.state.userUpdateField === 'attendance' &&\n                  this.state.selectedUser !== null\n                   && (\n                     <UpdateUserAttendanceForm\n                    authUserId={this.context.userId}\n                    canCancel\n                      canConfirm\n                      onCancel={this.modalCancelHandler}\n                      onConfirm={this.updateUserAttendanceHandler}\n                      confirmText=\"Confirm\"\n                      user={this.state.selectedUser}\n                    />\n                  )}\n                </Tab.Pane>\n\n                <Tab.Pane eventKey=\"userEditLeave\">\n                {this.state.selectedUser === null && (\n                  <Button variant=\"outline-warning\" className=\"confirmEditButton\" size=\"lg\">\n                    Select a Staff member from the Master List\n                  </Button>\n                )}\n\n                {this.state.selectedUser !== null &&\n                  this.context.user.role === \"admin\"\n                  && (\n                  <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" value='leave' onClick={this.updateUserSpecial.bind(this)}>Add Leave as Admin</Button>\n                )}\n                {this.state.selectedUser !== null &&\n                  this.state.selectedUser._id === this.context.user._id\n                  && (\n                  <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" value='leave' onClick={this.updateUserSpecial.bind(this)}>Add Leave</Button>\n                )}\n                {this.state.selectedUser !== null &&\n                  this.state.selectedUser._id === this.context.user._id && (\n                  <Button variant=\"outline-success\" className=\"confirmEditButton\" size=\"lg\">\n                    Your Profile\n                  </Button>\n                )}\n                {this.state.selectedUser !== null &&\n                  this.state.selectedUser._id !== this.context.user._id && (\n                  <Button variant=\"outline-danger\" className=\"confirmEditButton\" size=\"lg\">\n                    Not my profile\n                  </Button>\n                )}\n\n                {this.state.userUpdateField === 'leave' &&\n                this.state.selectedUser !== null\n                && (<UpdateUserLeaveForm\n                  authUserId={this.context.userId}\n                  canCancel\n                    canConfirm\n                    onCancel={this.modalCancelHandler}\n                    onConfirm={this.updateUserLeaveHandler}\n                    confirmText=\"Confirm\"\n                    user={this.state.selectedUser}\n                  />)}\n                </Tab.Pane>\n\n                <Tab.Pane eventKey=\"userEditAttachment\">\n                {this.state.selectedUser === null && (\n                  <Button variant=\"outline-warning\" className=\"confirmEditButton\" size=\"lg\">\n                    Select a Staff member from the Master List\n                  </Button>\n                )}\n\n                {this.state.selectedUser !== null &&\n                  this.context.user.role === \"admin\"\n                  && (\n                  <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" value='attachments' onClick={this.updateUserSpecial.bind(this)}>Add Attachment as Admin</Button>\n                )}\n                {this.state.selectedUser !== null &&\n                  this.state.selectedUser._id === this.context.user._id\n                  && (\n                  <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" value='attachments' onClick={this.updateUserSpecial.bind(this)}>Add Attachment</Button>\n                )}\n                {this.state.selectedUser !== null &&\n                  this.state.selectedUser._id === this.context.user._id && (\n                  <Button variant=\"outline-success\" className=\"confirmEditButton\" size=\"lg\">\n                    Your Profile\n                  </Button>\n                )}\n                {this.state.selectedUser !== null &&\n                  this.state.selectedUser._id !== this.context.user._id && (\n                  <Button variant=\"outline-danger\" className=\"confirmEditButton\" size=\"lg\">\n                    Not my profile\n                  </Button>\n                )}\n\n                {this.state.userUpdateField === 'attachments' &&\n                this.state.selectedUser !== null\n                && (<UpdateUserAttachmentForm\n                  authUserId={this.context.userId}\n                  canCancel\n                    canConfirm\n                    onCancel={this.modalCancelHandler}\n                    onConfirm={this.updateUserAttachmentHandler}\n                    confirmText=\"Confirm\"\n                    user={this.state.selectedUser}\n                  />)}\n                </Tab.Pane>\n\n                <Tab.Pane eventKey=\"MasterList\">\n                  <Container className=\"containerUserMasterList\">\n                  <Row className=\"searchListRow\">\n                  <Button variant=\"primary\" size=\"sm\" onClick={this.fetchUsersAsc}>\n                     Sort Asc\n                   </Button>\n                  <Button variant=\"info\" size=\"sm\" onClick={this.fetchUsersDesc}>\n                     Sort Desc\n                   </Button>\n                   {this.state.isLoading ? (\n                     <Spinner />\n                   ) : (\n                     <UserList\n                       users={this.state.users}\n                       authUserId={this.context.userId}\n                       onViewDetail={this.showDetailHandler}\n                     />\n                   )}\n                  </Row>\n                  </Container>\n                </Tab.Pane>\n\n                <Tab.Pane eventKey=\"SearchInput\">\n                  <Container className=\"containerSearchUserInput\">\n\n                  <Row className=\"searchUserRowAdd\">\n                  <Button variant=\"primary\" onClick={this.startSearchUserHandler}>Search</Button>\n                  </Row>\n\n                  <Row className=\"searchUserRowForm\">\n                  <Col md={10} className=\"searchUserColForm\">\n                  <Tabs defaultActiveKey=\"Field\" id=\"uncontrolled-tab-example\">\n                  <Tab eventKey=\"Search\" title=\"Search:\" disabled>\n                  </Tab>\n                  <Tab eventKey=\"Field\" title=\"Search by Field:\">\n                  {this.state.searching !== true && (\n                    <Button variant=\"outline-warning\" className=\"confirmEditButton\" size=\"lg\">\n                      Click the 'Search' Button start\n                    </Button>\n                  )}\n                  {this.state.searching === true && (\n                    <SearchUserForm\n                    authUserId={this.context.userId}\n                    canCancel\n                      canConfirm\n                      onCancel={this.modalCancelHandler}\n                      onConfirm={this.modalConfirmSearchHandler}\n                      confirmText=\"Search\"\n                      user={this.context.selectedUser}\n                    />)}\n                  </Tab>\n                  <Tab eventKey=\"Id\" title=\"Search by ID:\">\n                  {this.state.searching !== true && (\n                    <Button variant=\"outline-warning\" className=\"confirmEditButton\" size=\"lg\">\n                      Click the 'Search' Button start\n                    </Button>\n                  )}\n                  {this.state.searching === true && (\n                    <SearchUserIdForm\n                    authUserId={this.context.userId}\n                    canCancel\n                      canConfirm\n                      onCancel={this.modalCancelHandler}\n                      onConfirm={this.modalConfirmSearchIdHandler}\n                      confirmText=\"Search\"\n                      user={this.context.selectedUser}\n                    />\n                    )}\n                  </Tab>\n                  <Tab eventKey=\"Attendance\" title=\"Search by Attendance:\">\n                  {this.state.searching !== true && (\n                    <Button variant=\"outline-warning\" className=\"confirmEditButton\" size=\"lg\">\n                      Click the 'Search' Button start\n                    </Button>\n                  )}\n                  {this.state.searching === true && (\n                    <SearchUserAttendanceDateForm\n                    authUserId={this.context.userId}\n                    canCancel\n                      canConfirm\n                      onCancel={this.modalCancelHandler}\n                      onConfirm={this.modalConfirmSearchAttendanceDateHandler}\n                      confirmText=\"Search\"\n                      user={this.context.selectedUser}\n                    />\n                    )}\n                  </Tab>\n                  <Tab eventKey=\"Leave\" title=\"Search by Leave:\">\n                  {this.state.searching !== true && (\n                    <Button variant=\"outline-warning\" className=\"confirmEditButton\" size=\"lg\">\n                      Click the 'Search' Button start\n                    </Button>\n                  )}\n                  {this.state.searching === true && (\n                    <SearchUserLeaveDateRangeForm\n                    authUserId={this.context.userId}\n                    canCancel\n                      canConfirm\n                      onCancel={this.modalCancelHandler}\n                      onConfirm={this.modalConfirmSearchLeaveDateRangeHandler}\n                      confirmText=\"Search\"\n                      user={this.context.selectedUser}\n                    />\n                    )}\n                  </Tab>\n                  <Tab eventKey=\"Name\" title=\"Search by Name:\">\n                  {this.state.searching !== true && (\n                    <Button variant=\"outline-warning\" className=\"confirmEditButton\" size=\"lg\">\n                      Click the 'Search' Button start\n                    </Button>\n                  )}\n                  {this.state.searching === true && (\n                    <SearchUserNameForm\n                    authUserId={this.context.userId}\n                    canCancel\n                      canConfirm\n                      onCancel={this.modalCancelHandler}\n                      onConfirm={this.modalConfirmSearchNameHandler}\n                      confirmText=\"Search\"\n                      user={this.context.selectedUser}\n                    />\n                  )}\n                  </Tab>\n                  </Tabs>\n                  </Col>\n                  <Col md={10}>\n                  </Col>\n                  </Row>\n\n                  </Container>\n                </Tab.Pane>\n\n                <Tab.Pane eventKey=\"SearchResult\">\n                  <Container className=\"containerSearchUserResults\">\n                  <Row>\n                    <Card className=\"searchCard\">\n                      <Card.Body className=\"searchCardBody\">\n                        <Card.Title>Your Search</Card.Title>\n                        <Card.Text>\n                          Field: {this.state.userSearchField}\n                        </Card.Text>\n                        <Card.Text>\n                          Query: {this.state.userSearchQuery}\n                        </Card.Text>\n                      </Card.Body>\n                    </Card>\n                  </Row>\n                  <Row className=\"searchListRow\">\n\n                  {this.state.searchUsers !== [] && (\n                    <SearchUserList\n                      searchUsers={this.state.searchUsers}\n                      authUserId={this.context.userId}\n                      onViewDetail={this.showDetailHandler}\n                    />\n                  )}\n                  </Row>\n                  </Container>\n                </Tab.Pane>\n              </Tab.Content>\n            </Col>\n          </Row>\n        </Tab.Container>\n\n\n\n        </Container>\n\n    </Col>\n\n  </Row>\n\n</Accordion>\n</React.Fragment>\n    );\n  }\n}\n\nexport default UsersPage;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\n// import { NavLink } from 'react-router-dom';\n\nimport './UserItem.css';\n\nconst patientItem = props => (\n  <li key={props.patientId} className=\"users__list-item_master\">\n  <div>\n    <h5 className=\"userItemHeading\"> Name:</h5>\n    <p className=\"userItemText\">\n      {props.name}\n    </p>\n    <h5 className=\"userItemHeading\"> Reg Date:</h5>\n    <p className=\"userItemText\">\n      {props.registrationDate}\n    </p>\n  </div>\n  <div>\n  <Button variant=\"primary\" onClick={props.onDetail.bind(this, props._id)}>\n        Details\n      </Button>\n  </div>\n  </li>\n);\n\nexport default patientItem;\n","import React from 'react';\n\nimport PatientItem from './PatientItem/PatientItem';\nimport './UserList.css';\n\nconst patientList = props => {\n  const patients = props.patients.map(patient => {\n    const patientRegistrationDate = new Date(patient.registrationDate.substr(0,10)*1000).toISOString().slice(0,10)\n    return (\n      <PatientItem\n        key={patient._id}\n        _id={patient._id}\n        name={patient.name}\n        registrationDate={patientRegistrationDate}\n        onDetail={props.onViewDetail}\n      />\n    );\n  });\n\n  return <ul className=\"user__list1_master\">{patients}</ul>;\n};\n\nexport default patientList;\n","import React from 'react';\nimport Card from 'react-bootstrap/Card';\n\nimport './UserItem.css';\n\n\nconst patientAppointmentItem = props => (\n  <li key={props.userId} className=\"users__list-item_detail\">\n    <div>\n\n    <Card className=\"card\">\n        <Card.Body>\n          <Card.Title>\n            Appointment\n          </Card.Title>\n\n          <Card.Text>\n          <ul className=\"cardUl\">\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Type:</p>\n            <p className=\"userItemText\">\n            {props.type}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Date:</p>\n            <p className=\"userItemText\">\n            {props.date}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Title:</p>\n            <p className=\"userItemText\">\n            {props.title}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Description:</p>\n            <p className=\"userItemText\">\n            {props.description}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Location:</p>\n            <p className=\"userItemText\">\n            {props.location}\n            </p>\n            </li>\n          </ul>\n          </Card.Text>\n        </Card.Body>\n      </Card>\n    </div>\n  </li>\n);\n\nexport default patientAppointmentItem;\n","import React from 'react';\n\n\nimport PatientAppointmentItem from './PatientItem/PatientAppointmentItem';\nimport './UserList.css';\n\nconst patientAppointmentList = props => {\n  console.log(\"patient Appointment list props\", props.patientAppointment);\n  const patientAppointment = props.patientAppointment.map(appointment => {\n  const patientAppointmentDate = new Date(appointment.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n\n    return (\n      <PatientAppointmentItem\n        key={appointment.date}\n        userId={props.authUserId}\n        type={appointment.type}\n        date={patientAppointmentDate}\n        title={appointment.title}\n        description={appointment.description}\n        location={appointment.location}\n      />\n    );\n  });\n\n  return <ul className=\"user__list1_detail\">{patientAppointment}</ul>;\n};\n\nexport default patientAppointmentList;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\n\nimport './UserItem.css';\n\n\nconst patientInsuranceItem = props => (\n  <li key={props.userId} className=\"users__list-item_detail\">\n    <div>\n    <Card className=\"card\">\n        <Card.Body>\n          <Card.Title>\n            Insurance\n          </Card.Title>\n\n          <Card.Text>\n          <ul className=\"cardUl\">\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Company:</p>\n            <p className=\"userItemText\">\n            {props.company}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Number:</p>\n            <p className=\"userItemText\">\n            {props.number}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Description:</p>\n            <p className=\"userItemText\">\n            {props.description}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Expiry:</p>\n            <p className=\"userItemText\">\n            {props.expiry}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Subscriber Company:</p>\n            <p className=\"userItemText\">\n            {props.subscriber.company}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Subscriber Description:</p>\n            <p className=\"userItemText\">\n            {props.subscriber.description}\n            </p>\n            </li>\n          </ul>\n          </Card.Text>\n          <Card.Link href=\"\">\n          { props.canDelete === true && (\n            <Button variant=\"danger\" onClick={props.onDelete.bind(this, props.insurance)}>\n              Delete\n            </Button>\n          )}\n          </Card.Link>\n        </Card.Body>\n      </Card>\n    </div>\n  </li>\n);\n\nexport default patientInsuranceItem;\n","import React from 'react';\n\nimport PatientInsuranceItem from './PatientItem/PatientInsuranceItem';\nimport './UserList.css';\n\nconst patientInsuranceList = props => {\n  console.log(\"patient insurance list props\", props.patientInsurance);\n  const patientInsurance = props.patientInsurance.map(insurance => {\n    const patientInsuranceExpiry = new Date(insurance.expiry.substr(0,10)*1000).toISOString().slice(0,10);\n    return (\n      <PatientInsuranceItem\n        key={insurance.number}\n        userId={props.authUserId}\n        company={insurance.company}\n        number={insurance.number}\n        expiry={patientInsuranceExpiry}\n        description={insurance.description}\n        subscriber={insurance.subscriber}\n        canDelete={props.canDelete}\n        onDelete={props.onDelete}\n        insurance={insurance}\n      />\n    );\n  });\n\n  return <ul className=\"user__list1_detail\">{patientInsurance}</ul>;\n};\n\nexport default patientInsuranceList;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\n\nimport './UserItem.css';\n\n\nconst patientConsultantItem = props => (\n  <li key={props.userId} className=\"users__list-item_detail\">\n    <div>\n    <Card className=\"card\">\n        <Card.Body>\n          <Card.Title>\n            Consultant\n          </Card.Title>\n\n          <Card.Text>\n          <ul className=\"cardUl\">\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Date:</p>\n            <p className=\"userItemText\">\n            {props.date}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> ID:</p>\n            <p className=\"userItemText\">\n            {props.referenceId}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Name:</p>\n            <p className=\"userItemText\">\n            {props.name}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Role:</p>\n            <p className=\"userItemText\">\n            {props.role}\n            </p>\n            </li>\n          </ul>\n          </Card.Text>\n          <Card.Link href=\"\">\n          { props.canDelete === true && (\n            <Button variant=\"danger\" onClick={props.onDelete.bind(this, props.consultant)}>\n              Delete\n            </Button>\n          )}\n          </Card.Link>\n        </Card.Body>\n      </Card>\n    </div>\n  </li>\n);\n\nexport default patientConsultantItem;\n","import React from 'react';\n\nimport PatientConsultantItem from './PatientItem/PatientConsultantItem';\nimport './UserList.css';\n\nconst patientConsultantList = props => {\n  console.log(\"patient consultant list props\", props.patientConsultant);\n  const patientConsultant = props.patientConsultant.map(consultant => {\n    const consultantDate = new Date(consultant.date.substr(0,10)*1000).toISOString().slice(0,10);\n    let consultantId = undefined;\n    let consultantName = undefined;\n    let consultantRole = undefined;\n    if (consultant.reference !== null){\n      consultantId = consultant.reference._id;\n      consultantName = consultant.reference.name;\n      consultantRole = consultant.reference.role;\n    }\n    else {\n      consultantId = 'no consultant info to show';\n      consultantName = 'no consultant info to show';\n      consultantRole = 'no consultant info to show';\n    }\n    return (\n      <PatientConsultantItem\n        key={consultant.date}\n        userId={props.authUserId}\n        date={consultantDate}\n        referenceId={consultantId}\n        referenceName={consultantName}\n        referenceRole={consultantRole}\n        canDelete={props.canDelete}\n        onDelete={props.onDelete}\n        consultant={consultant}\n      />\n    );\n  });\n\n  return <ul className=\"user__list1_detail\">{patientConsultant}</ul>;\n};\n\nexport default patientConsultantList;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\n\nimport './UserItem.css';\n\n\nconst patientNextOfKinItem = props => (\n  <li key={props.userId} className=\"users__list-item_detail\">\n    <div>\n    <Card className=\"card\">\n        <Card.Body>\n          <Card.Title>\n            Next of Kin\n          </Card.Title>\n\n          <Card.Text>\n          <ul className=\"cardUl\">\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Name:</p>\n            <p className=\"userItemText\">\n            {props.name}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Email:</p>\n            <p className=\"userItemText\">\n            {props.email}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Phone:</p>\n            <p className=\"userItemText\">\n            {props.phone}\n            </p>\n            </li>\n          </ul>\n          </Card.Text>\n          <Card.Link href=\"\">\n          { props.canDelete === true && (\n            <Button variant=\"danger\" onClick={props.onDelete.bind(this, props.nextOfKin)}>\n              Delete\n            </Button>\n          )}\n          </Card.Link>\n        </Card.Body>\n      </Card>\n    </div>\n\n  </li>\n);\n\nexport default patientNextOfKinItem;\n","import React from 'react';\n\nimport PatientNextOfKinItem from './PatientItem/PatientNextOfKinItem';\nimport './UserList.css';\n\nconst patientNextOfKinList = props => {\n  console.log(\"patient NextOfKin list props\", props.patientNextOfKin);\n  const patientNextOfKin = props.patientNextOfKin.map(nextOfKin => {\n    return (\n      <PatientNextOfKinItem\n        key={nextOfKin.number}\n        userId={props.authUserId}\n        name={nextOfKin.name}\n        email={nextOfKin.contact.email}\n        phone={nextOfKin.contact.phone}\n        canDelete={props.canDelete}\n        onDelete={props.onDelete}\n        nextOfKin={nextOfKin}\n      />\n    );\n  });\n\n  return <ul className=\"user__list1_detail\">{patientNextOfKin}</ul>;\n};\n\nexport default patientNextOfKinList;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\n\nimport './UserItem.css';\n\n\nconst patientComplaintItem = props => (\n  <li key={props.userId} className=\"users__list-item_detail\">\n    <div>\n    <Card className=\"card\">\n        <Card.Body>\n          <Card.Title>\n            Complaint\n          </Card.Title>\n\n          <Card.Text>\n          <ul className=\"cardUl\">\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Date:</p>\n            <p className=\"userItemText\">\n            {props.date}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Title:</p>\n            <p className=\"userItemText\">\n            {props.title}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Description:</p>\n            <p className=\"userItemText\">\n            {props.description}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Anamnesis:</p>\n            <p className=\"userItemText\">\n            {props.anamnesis}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Attachment:</p>\n            <p className=\"userItemText\">\n            {props.attachment.name}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Format:</p>\n            <p className=\"userItemText\">\n            {props.attachment.format}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Path:</p>\n            <p className=\"userItemText\">\n            {props.attachment.path}\n            </p>\n            </li>\n          </ul>\n          </Card.Text>\n          <Card.Link href=\"\">\n          { props.canDelete === true && (\n            <Button variant=\"danger\" onClick={props.onDelete.bind(this, props.complaint)}>\n              Delete\n            </Button>\n          )}\n          </Card.Link>\n          <Card.Link href=\"\">\n          <Button variant=\"info\" onClick={props.onViewAttachment.bind(this, props.attachment)}>\n            View\n          </Button>\n          </Card.Link>\n        </Card.Body>\n      </Card>\n    </div>\n  </li>\n);\n\nexport default patientComplaintItem;\n","import React from 'react';\n\nimport PatientComplaintItem from './PatientItem/PatientComplaintItem';\nimport './UserList.css';\n\nconst patientComplaintList = props => {\n  console.log(\"patient complaintlist props\", props.patientComplaint);\n  const patientComplaint = props.patientComplaint.map(complaint => {\n    const patientComplaintDate = new Date(complaint.date.substr(0,10)*1000).toISOString().slice(0,10);\n    return (\n      <PatientComplaintItem\n        key={complaint.date}\n        userId={props.authUserId}\n        date={patientComplaintDate}\n        title={complaint.title}\n        description={complaint.description}\n        anamnesis={complaint.anamnesis}\n        attachment={complaint.attachment}\n        canDelete={props.canDelete}\n        onDelete={props.onDelete}\n        complaint={complaint}\n        onViewAttachment={props.onViewAttachment}\n      />\n    );\n  });\n\n  return <ul className=\"user__list1_detail\">{patientComplaint}</ul>;\n};\n\nexport default patientComplaintList;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\n\nimport './UserItem.css';\n\n\nconst patientSurveyItem = props => (\n  <li key={props.userId} className=\"users__list-item_detail\">\n    <div>\n    <Card className=\"card\">\n        <Card.Body>\n          <Card.Title>\n            Survey\n          </Card.Title>\n\n          <Card.Text>\n          <ul className=\"cardUl\">\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Title:</p>\n            <p className=\"userItemText\">\n            {props.title}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Type:</p>\n            <p className=\"userItemText\">\n            {props.type}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Description:</p>\n            <p className=\"userItemText\">\n            {props.description}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Attachment:</p>\n            <p className=\"userItemText\">\n            {props.attachment.name}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Format:</p>\n            <p className=\"userItemText\">\n            {props.attachment.format}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Path:</p>\n            <p className=\"userItemText\">\n            {props.attachment.path}\n            </p>\n            </li>\n          </ul>\n          </Card.Text>\n          <Card.Link href=\"\">\n          { props.canDelete === true && (\n            <Button variant=\"danger\" onClick={props.onDelete.bind(this, props.survey)}>\n              Delete\n            </Button>\n          )}\n          </Card.Link>\n          <Card.Link href=\"\">\n          <Button variant=\"info\" onClick={props.onViewAttachment.bind(this, props.attachment)}>\n            View\n          </Button>\n          </Card.Link>\n        </Card.Body>\n      </Card>\n    </div>\n  </li>\n);\n\nexport default patientSurveyItem;\n","import React from 'react';\n\nimport PatientSurveyItem from './PatientItem/PatientSurveyItem';\nimport './UserList.css';\n\nconst patientSurveyList = props => {\n  console.log(\"patient survey list props\", props.patientSurvey);\n  const patientSurvey = props.patientSurvey.map(survey => {\n    const patientSurveyDate = new Date(survey.date.substr(0,10)*1000).toISOString().slice(0,10);\n    return (\n      <PatientSurveyItem\n        key={survey.title}\n        userId={props.authUserId}\n        title={survey.title}\n        date={patientSurveyDate}\n        description={survey.description}\n        attachment={survey.attachment}\n        canDelete={props.canDelete}\n        onDelete={props.onDelete}\n        survey={survey}\n        onViewAttachment={props.onViewAttachment}\n      />\n    );\n  });\n\n  return <ul className=\"user__list1_detail\">{patientSurvey}</ul>;\n};\n\nexport default patientSurveyList;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\n\nimport './UserItem.css';\n\n\nconst patientVitalsItem = props => (\n  <li key={props.userId} className=\"users__list-item_detail\">\n    <div>\n    <Card className=\"card\">\n        <Card.Body>\n          <Card.Title>\n            Vitals\n          </Card.Title>\n\n          <Card.Text>\n          <ul className=\"cardUl\">\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> date:</p>\n            <p className=\"userItemText\">\n            {props.date}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Pulse Rate:</p>\n            <p className=\"userItemText\">\n            {props.pr}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Blood Pressure 1:</p>\n            <p className=\"userItemText\">\n            {props.bp1}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Blood Pressure 2:</p>\n            <p className=\"userItemText\">\n            {props.bp2}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Resp Rate:</p>\n            <p className=\"userItemText\">\n            {props.rr}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Temp:</p>\n            <p className=\"userItemText\">\n            {props.temp}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> ps02:</p>\n            <p className=\"userItemText\">\n            {props.ps02}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Height:</p>\n            <p className=\"userItemText\">\n            {props.height}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Weight:</p>\n            <p className=\"userItemText\">\n            {props.weight}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Bmi:</p>\n            <p className=\"userItemText\">\n            {props.Bmi}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Urine Type:</p>\n            <p className=\"userItemText\">\n            {props.urineType}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Urine Value:</p>\n            <p className=\"userItemText\">\n            {props.urineValue}\n            </p>\n            </li>\n          </ul>\n          </Card.Text>\n          <Card.Link href=\"\">\n          { props.canDelete === true && (\n            <Button variant=\"danger\" onClick={props.onDelete.bind(this, props.vitals)}>\n              Delete\n            </Button>\n          )}\n          </Card.Link>\n        </Card.Body>\n      </Card>\n    </div>\n\n  </li>\n);\n\nexport default patientVitalsItem;\n","import React from 'react';\n\nimport PatientVitalsItem from './PatientItem/PatientVitalsItem';\nimport './UserList.css';\n\nconst patientVitalsList = props => {\n  console.log(\"patient Vitals list props\", props.patientVitals);\n  const patientVitals = props.patientVitals.map(vitals => {\n    const patientVitalsDate = new Date(vitals.date.substr(0,10)*1000).toISOString().slice(0,10);\n    return (\n      <PatientVitalsItem\n        key={patientVitalsDate}\n        userId={props.authUserId}\n        date={patientVitalsDate}\n        pr={vitals.pr}\n        bp1={vitals.bp1}\n        bp2={vitals.bp2}\n        rr={vitals.rr}\n        temp={vitals.temp}\n        height={vitals.height}\n        weight={vitals.weight}\n        bmi={vitals.bmi}\n        urineType={vitals.urine.type}\n        urineValue={vitals.urine.value}\n        canDelete={props.canDelete}\n        onDelete={props.onDelete}\n        vitals={vitals}\n        />\n    );\n  });\n\n  return <ul className=\"user__list1_detail\">{patientVitals}</ul>;\n};\n\nexport default patientVitalsList;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\n\nimport './UserItem.css';\n\n\nconst patientExaminationItem = props => (\n  <li key={props.userId} className=\"users__list-item_detail\">\n    <div>\n    <Card className=\"card\">\n        <Card.Body>\n          <Card.Title>\n            Examination\n          </Card.Title>\n\n          <Card.Text>\n          <ul className=\"cardUl\">\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Date:</p>\n            <p className=\"userItemText\">\n            {props.date}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> General:</p>\n            <p className=\"userItemText\">\n            {props.general}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Area:</p>\n            <p className=\"userItemText\">\n            {props.area}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Type:</p>\n            <p className=\"userItemText\">\n            {props.type}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Measure:</p>\n            <p className=\"userItemText\">\n            {props.measure}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Value:</p>\n            <p className=\"userItemText\">\n            {props.value}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Description:</p>\n            <p className=\"userItemText\">\n            {props.description}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Follow Up ?</p>\n            <p className=\"userItemText\">\n            {props.followUp}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Attachment Name:</p>\n            <p className=\"userItemText\">\n            {props.attachment.name}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Format:</p>\n            <p className=\"userItemText\">\n            {props.attachment.format}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Path:</p>\n            <p className=\"userItemText\">\n            {props.attachment.path}\n            </p>\n            </li>\n          </ul>\n          </Card.Text>\n          <Card.Link href=\"\">\n          { props.canDelete === true && (\n            <Button variant=\"danger\" onClick={props.onDelete.bind(this, props.examination)}>\n              Delete\n            </Button>\n          )}\n          </Card.Link>\n          <Card.Link href=\"\">\n          <Button variant=\"info\" onClick={props.onViewAttachment.bind(this, props.attachment)}>\n            View\n          </Button>\n          </Card.Link>\n        </Card.Body>\n      </Card>\n    </div>\n  </li>\n);\n\nexport default patientExaminationItem;\n","import React from 'react';\n\nimport PatientExaminationItem from './PatientItem/PatientExaminationItem';\nimport './UserList.css';\n\nconst patientExaminationList = props => {\n  console.log(\"patient examination list props\", props.patientExamination);\n  const patientExamination = props.patientExamination.map(examination => {\n    const patientExaminationDate = new Date(examination.date.substr(0,10)*1000).toISOString().slice(0,10);\n    return (\n      <PatientExaminationItem\n        key={examination.area}\n        userId={props.authUserId}\n        date={patientExaminationDate}\n        general={examination.general}\n        area={examination.area}\n        type={examination.type}\n        measure={examination.measure}\n        value={examination.value}\n        description={examination.description}\n        followUp={examination.followUp}\n        attachment={examination.attachment}\n        canDelete={props.canDelete}\n        onDelete={props.onDelete}\n        examination={examination}\n        onViewAttachment={props.onViewAttachment}\n      />\n    );\n  });\n\n  return <ul className=\"user__list1_detail\">{patientExamination}</ul>;\n};\n\nexport default patientExaminationList;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\n\nimport './UserItem.css';\n\n\nconst patientHistoryItem = props => (\n  <li key={props.userId} className=\"users__list-item_detail\">\n    <div>\n    <Card className=\"card\">\n        <Card.Body>\n          <Card.Title>\n            History\n          </Card.Title>\n\n          <Card.Text>\n          <ul className=\"cardUl\">\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Type:</p>\n            <p className=\"userItemText\">\n            {props.type}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Date:</p>\n            <p className=\"userItemText\">\n            {props.date}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Title:</p>\n            <p className=\"userItemText\">\n            {props.title}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Description:</p>\n            <p className=\"userItemText\">\n            {props.description}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Attachment Name:</p>\n            <p className=\"userItemText\">\n            {props.attachment.name}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Format:</p>\n            <p className=\"userItemText\">\n            {props.attachment.format}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Path:</p>\n            <p className=\"userItemText\">\n            {props.attachment.path}\n            </p>\n            </li>\n          </ul>\n          </Card.Text>\n          <Card.Link href=\"\">\n          { props.canDelete === true && (\n            <Button variant=\"danger\" onClick={props.onDelete.bind(this, props.history)}>\n              Delete\n            </Button>\n          )}\n          </Card.Link>\n          <Card.Link href=\"\">\n          <Button variant=\"info\" onClick={props.onViewAttachment.bind(this, props.attachment)}>\n            View\n          </Button>\n          </Card.Link>\n        </Card.Body>\n      </Card>\n    </div>\n  </li>\n);\n\nexport default patientHistoryItem;\n","import React from 'react';\n\nimport PatientHistoryItem from './PatientItem/PatientHistoryItem';\nimport './UserList.css';\n\nconst patientHistoryList = props => {\n  console.log(\"patient history list props\", props.patientHistory);\n  const patientHistory = props.patientHistory.map(history => {\n    const patientHistoryDate = new Date(history.date.substr(0,10)*1000).toISOString().slice(0,10);\n    return (\n      <PatientHistoryItem\n        key={history.date}\n        userId={props.authUserId}\n        type={history.type}\n        date={patientHistoryDate}\n        title={history.title}\n        description={history.description}\n        attachment={history.attachment}\n        canDelete={props.canDelete}\n        onDelete={props.onDelete}\n        history={history}\n        onViewAttachment={props.onViewAttachment}\n      />\n    );\n  });\n\n  return <ul className=\"user__list1_detail\">{patientHistory}</ul>;\n};\n\nexport default patientHistoryList;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\n\nimport './UserItem.css';\n\n\nconst patientAllergiesItem = props => (\n  <li key={props.userId} className=\"users__list-item_detail\">\n    <div>\n\n    <Card className=\"card\">\n        <Card.Body>\n          <Card.Title>\n            Allergy\n          </Card.Title>\n\n          <Card.Text>\n          <ul className=\"cardUl\">\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Title:</p>\n            <p className=\"userItemText\">\n            {props.title}\n            </p>\n            </li>\n            <li>\n            <p className=\"userItemHeading\"> Type:</p>\n            <p className=\"userItemText\">\n            {props.type}\n            </p>\n            </li>\n            <li>\n            <p className=\"userItemHeading\"> Description:</p>\n            <p className=\"userItemText\">\n            {props.description}\n            </p>\n            </li>\n            <li>\n            <p className=\"userItemHeading\"> Attachment:</p>\n            <p className=\"userItemText\">\n            {props.attachment.name}\n            </p>\n            </li>\n            <li>\n            <p className=\"userItemHeading\"> Format:</p>\n            <p className=\"userItemText\">\n            {props.attachment.format}\n            </p>\n            </li>\n            <li>\n            <p className=\"userItemHeading\"> Path:</p>\n            <p className=\"userItemText\">\n            {props.attachment.path}\n            </p>\n            </li>\n          </ul>\n          </Card.Text>\n          <Card.Link href=\"\">\n          { props.canDelete === true && (\n            <Button variant=\"danger\" onClick={props.onDelete.bind(this, props.allergies)}>\n              Delete\n            </Button>\n          )}\n          </Card.Link>\n          <Card.Link href=\"\">\n          <Button variant=\"info\" onClick={props.onViewAttachment.bind(this, props.attachment)}>\n            View\n          </Button>\n          </Card.Link>\n        </Card.Body>\n      </Card>\n    </div>\n  </li>\n);\n\nexport default patientAllergiesItem;\n","import React from 'react';\n\nimport PatientAllergiesItem from './PatientItem/PatientAllergiesItem';\nimport './UserList.css';\n\nconst patientAllergiesList = props => {\n  console.log(\"patient allergies list props\", props.patientAllergies);\n  const patientAllergies = props.patientAllergies.map(allergies => {\n\n    return (\n      <PatientAllergiesItem\n        key={allergies.title}\n        userId={props.authUserId}\n        title={allergies.title}\n        type={allergies.type}\n        description={allergies.description}\n        attachment={allergies.attachment}\n        canDelete={props.canDelete}\n        onDelete={props.onDelete}\n        allergies={allergies}\n        onViewAttachment={props.onViewAttachment}\n      />\n    );\n  });\n\n  return <ul className=\"user__list1_detail\">{patientAllergies}</ul>;\n};\n\nexport default patientAllergiesList;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\n\nimport './UserItem.css';\n\nconst patientMedicationItem = props => (\n  <li key={props.userId} className=\"users__list-item_detail\">\n    <div>\n    <Card className=\"card\">\n        <Card.Body>\n          <Card.Title>\n            Medication\n          </Card.Title>\n\n          <Card.Text>\n          <ul className=\"cardUl\">\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Title:</p>\n            <p className=\"userItemText\">\n            {props.title}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Type:</p>\n            <p className=\"userItemText\">\n            {props.type}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Description:</p>\n            <p className=\"userItemText\">\n            {props.description}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Attachment:</p>\n            <p className=\"userItemText\">\n            {props.attachment.name}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Format:</p>\n            <p className=\"userItemText\">\n            {props.attachment.format}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Path:</p>\n            <p className=\"userItemText\">\n            {props.attachment.path}\n            </p>\n            </li>\n          </ul>\n          </Card.Text>\n          <Card.Link href=\"\">\n          { props.canDelete === true && (\n            <Button variant=\"danger\" onClick={props.onDelete.bind(this, props.medication)}>\n              Delete\n            </Button>\n          )}\n          </Card.Link>\n          <Card.Link href=\"\">\n          <Button variant=\"info\" onClick={props.onViewAttachment.bind(this, props.attachment)}>\n            View\n          </Button>\n          </Card.Link>\n        </Card.Body>\n      </Card>\n    </div>\n  </li>\n);\n\nexport default patientMedicationItem;\n","import React from 'react';\n\nimport PatientMedicationItem from './PatientItem/PatientMedicationItem';\nimport './UserList.css';\n\nconst patientMedicationList = props => {\n  console.log(\"patient medication list props\", props.patientMedication);\n  const patientMedication = props.patientMedication.map(medication => {\n    return (\n      <PatientMedicationItem\n        key={medication.title}\n        userId={props.authUserId}\n        title={medication.title}\n        type={medication.type}\n        description={medication.description}\n        attachment={medication.attachment}\n        canDelete={props.canDelete}\n        onDelete={props.onDelete}\n        medication={medication}\n        onViewAttachment={props.onViewAttachment}\n      />\n    );\n  });\n\n  return <ul className=\"user__list1_detail\">{patientMedication}</ul>;\n};\n\nexport default patientMedicationList;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\n\nimport './UserItem.css';\n\n\nconst patientInvestigationItem = props => (\n  <li key={props.userId} className=\"users__list-item_detail\">\n    <div>\n    <Card className=\"card\">\n        <Card.Body>\n          <Card.Title>\n            Investigation\n          </Card.Title>\n\n          <Card.Text>\n          <ul className=\"cardUl\">\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Title:</p>\n            <p className=\"userItemText\">\n            {props.title}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Type:</p>\n            <p className=\"userItemText\">\n            {props.type}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Date:</p>\n            <p className=\"userItemText\">\n            {props.date}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Description:</p>\n            <p className=\"userItemText\">\n            {props.description}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Attachment Name:</p>\n            <p className=\"userItemText\">\n            {props.attachment.name}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Format:</p>\n            <p className=\"userItemText\">\n            {props.attachment.format}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Path:</p>\n            <p className=\"userItemText\">\n            {props.attachment.path}\n            </p>\n            </li>\n          </ul>\n          </Card.Text>\n          <Card.Link href=\"\">\n          { props.canDelete === true && (\n            <Button variant=\"danger\" onClick={props.onDelete.bind(this, props.investigation)}>\n              Delete\n            </Button>\n          )}\n          </Card.Link>\n          <Card.Link href=\"\">\n          <Button variant=\"info\" onClick={props.onViewAttachment.bind(this, props.attachment)}>\n            View\n          </Button>\n          </Card.Link>\n        </Card.Body>\n      </Card>\n    </div>\n  </li>\n);\n\nexport default patientInvestigationItem;\n","import React from 'react';\n\nimport PatientInvestigationItem from './PatientItem/PatientInvestigationItem';\nimport './UserList.css';\n\nconst patientInvestigationList = props => {\n  console.log(\"patient investigation list props\", props.patientInvestigation);\n  const patientInvestigation = props.patientInvestigation.map(investigation => {\n    const patientInvestigationDate = new Date(investigation.date.substr(0,10)*1000).toISOString().slice(0,10);\n    return (\n      <PatientInvestigationItem\n        key={investigation.date}\n        userId={props.authUserId}\n        date={patientInvestigationDate}\n        title={investigation.title}\n        type={investigation.type}\n        description={investigation.description}\n        attachment={investigation.attachment}\n        canDelete={props.canDelete}\n        onDelete={props.onDelete}\n        investigation={investigation}\n        onViewAttachment={props.onViewAttachment}\n      />\n    );\n  });\n\n  return <ul className=\"user__list1_detail\">{patientInvestigation}</ul>;\n};\n\nexport default patientInvestigationList;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\n\nimport './UserItem.css';\n\n\nconst patientDiagnosisItem = props => (\n  <li key={props.userId} className=\"users__list-item_detail\">\n    <div>\n    <Card className=\"card\">\n        <Card.Body>\n          <Card.Title>\n            Diagnosis\n          </Card.Title>\n\n          <Card.Text>\n          <ul className=\"cardUl\">\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Title:</p>\n            <p className=\"userItemText\">\n            {props.title}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Date:</p>\n            <p className=\"userItemText\">\n            {props.date}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Type:</p>\n            <p className=\"userItemText\">\n            {props.type}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Description:</p>\n            <p className=\"userItemText\">\n            {props.description}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Attachment:</p>\n            <p className=\"userItemText\">\n            {props.attachment.name}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Format:</p>\n            <p className=\"userItemText\">\n            {props.attachment.format}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Path:</p>\n            <p className=\"userItemText\">\n            {props.attachment.path}\n            </p>\n            </li>\n          </ul>\n          </Card.Text>\n          <Card.Link href=\"\">\n          { props.canDelete === true && (\n            <Button variant=\"danger\" onClick={props.onDelete.bind(this, props.diagnosis)}>\n              Delete\n            </Button>\n          )}\n          </Card.Link>\n          <Card.Link href=\"\">\n          <Button variant=\"info\" onClick={props.onViewAttachment.bind(this, props.attachment)}>\n            View\n          </Button>\n          </Card.Link>\n        </Card.Body>\n      </Card>\n    </div>\n  </li>\n);\n\nexport default patientDiagnosisItem;\n","import React from 'react';\n\nimport PatientDiagnosisItem from './PatientItem/PatientDiagnosisItem';\nimport './UserList.css';\n\nconst patientDiagnosisList = props => {\n  console.log(\"patient diagnosis list props\", props.patientDiagnosis);\n  const patientDiagnosis = props.patientDiagnosis.map(diagnosis => {\n    const patientDiagnosisDate = new Date(diagnosis.date.substr(0,10)*1000).toISOString().slice(0,10);\n    return (\n      <PatientDiagnosisItem\n        key={diagnosis.date}\n        userId={props.authUserId}\n        date={patientDiagnosisDate}\n        title={diagnosis.title}\n        type={diagnosis.type}\n        description={diagnosis.description}\n        attachment={diagnosis.attachment}\n        canDelete={props.canDelete}\n        onDelete={props.onDelete}\n        diagnosis={diagnosis}\n        onViewAttachment={props.onViewAttachment}\n      />\n    );\n  });\n\n  return <ul className=\"user__list1_detail\">{patientDiagnosis}</ul>;\n};\n\nexport default patientDiagnosisList;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\n\nimport './UserItem.css';\n\n\nconst patientTreatmentItem = props => (\n  <li key={props.userId} className=\"users__list-item_detail\">\n    <div>\n    <Card className=\"card\">\n        <Card.Body>\n          <Card.Title>\n            Treatment\n          </Card.Title>\n\n          <Card.Text>\n          <ul className=\"cardUl\">\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Title:</p>\n            <p className=\"userItemText\">\n            {props.title}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Type:</p>\n            <p className=\"userItemText\">\n            {props.type}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Date:</p>\n            <p className=\"userItemText\">\n            {props.date}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Description:</p>\n            <p className=\"userItemText\">\n            {props.description}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Dose:</p>\n            <p className=\"userItemText\">\n            {props.dose}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Frequency:</p>\n            <p className=\"userItemText\">\n            {props.frequency}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Attachment Name:</p>\n            <p className=\"userItemText\">\n            {props.attachment.name}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Format:</p>\n            <p className=\"userItemText\">\n            {props.attachment.format}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Path:</p>\n            <p className=\"userItemText\">\n            {props.attachment.path}\n            </p>\n            </li>\n          </ul>\n          </Card.Text>\n          <Card.Link href=\"\">\n          { props.canDelete === true && (\n            <Button variant=\"danger\" onClick={props.onDelete.bind(this, props.treatment)}>\n              Delete\n            </Button>\n          )}\n          </Card.Link>\n          <Card.Link href=\"\">\n          <Button variant=\"info\" onClick={props.onViewAttachment.bind(this, props.attachment)}>\n            View\n          </Button>\n          </Card.Link>\n        </Card.Body>\n      </Card>\n    </div>\n  </li>\n);\n\nexport default patientTreatmentItem;\n","import React from 'react';\n\nimport PatientTreatmentItem from './PatientItem/PatientTreatmentItem';\nimport './UserList.css';\n\nconst patientTreatmentList = props => {\n  console.log(\"patient treatment list props\", props.patientTreatment);\n  const patientTreatment = props.patientTreatment.map(treatment => {\n    const patientTreatmentDate = new Date(treatment.date.substr(0,10)*1000).toISOString().slice(0,10);\n    return (\n      <PatientTreatmentItem\n        key={treatment.date}\n        userId={props.authUserId}\n        date={patientTreatmentDate}\n        title={treatment.title}\n        type={treatment.type}\n        description={treatment.description}\n        dose={treatment.dose}\n        frequency={treatment.frequency}\n        type={treatment.type}\n        attachment={treatment.attachment}\n        canDelete={props.canDelete}\n        onDelete={props.onDelete}\n        treatment={treatment}\n        onViewAttachment={props.onViewAttachment}\n      />\n    );\n  });\n\n  return <ul className=\"user__list1_detail\">{patientTreatment}</ul>;\n};\n\nexport default patientTreatmentList;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\n\nimport './UserItem.css';\n\n\nconst patientBillingItem = props => (\n  <li key={props.userId} className=\"users__list-item_detail\">\n    <div>\n    <Card className=\"card\">\n        <Card.Body>\n          <Card.Title>\n            Billing\n          </Card.Title>\n\n          <Card.Text>\n          <ul className=\"cardUl\">\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Title:</p>\n            <p className=\"userItemText\">\n            {props.title}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Type:</p>\n            <p className=\"userItemText\">\n            {props.type}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Date:</p>\n            <p className=\"userItemText\">\n            {props.date}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Description:</p>\n            <p className=\"userItemText\">\n            {props.description}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Amount:</p>\n            <p className=\"userItemText\">\n            {props.amount}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Paid ?</p>\n            <p className=\"userItemText\">\n            {props.paid}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Notes:</p>\n            <p className=\"userItemText\">\n            {props.notes}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Attachment:</p>\n            <p className=\"userItemText\">\n            {props.attachment.name}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Format:</p>\n            <p className=\"userItemText\">\n            {props.attachment.format}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Path:</p>\n            <p className=\"userItemText\">\n            {props.attachment.path}\n            </p>\n            </li>\n          </ul>\n          </Card.Text>\n          <Card.Link href=\"\">\n          { props.canDelete === true && (\n            <Button variant=\"danger\" onClick={props.onDelete.bind(this, props.billing)}>\n              Delete\n            </Button>\n          )}\n          </Card.Link>\n          <Card.Link href=\"\">\n          <Button variant=\"info\" onClick={props.onViewAttachment.bind(this, props.attachment)}>\n            View\n          </Button>\n          </Card.Link>\n        </Card.Body>\n      </Card>\n    </div>\n  </li>\n);\n\nexport default patientBillingItem;\n","import React from 'react';\n\nimport PatientBillingItem from './PatientItem/PatientBillingItem';\nimport './UserList.css';\n\nconst patientBillingList = props => {\n  console.log(\"patient billing list props\", props.patientBilling);\n  const patientBilling = props.patientBilling.map(billing => {\n    const patientBillingDate = new Date(billing.date.substr(0,10)*1000).toISOString().slice(0,10);\n    return (\n      <PatientBillingItem\n        key={billing.date}\n        userId={props.authUserId}\n        date={patientBillingDate}\n        type={billing.type}\n        title={billing.title}\n        description={billing.description}\n        amount={billing.amount}\n        paid={billing.paid}\n        notes={billing.notes}\n        attachment={billing.attachment}\n        canDelete={props.canDelete}\n        onDelete={props.onDelete}\n        billing={billing}\n        onViewAttachment={props.onViewAttachment}\n      />\n    );\n  });\n\n  return <ul className=\"user__list1_detail\">{patientBilling}</ul>;\n};\n\nexport default patientBillingList;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\n\nimport './UserItem.css';\n\n\nconst patientAttachmentItem = props => (\n  <li key={props.userId} className=\"users__list-item_detail\">\n    <div>\n    <Card className=\"card\">\n        <Card.Body>\n          <Card.Title>\n            Attachment\n          </Card.Title>\n\n          <Card.Text>\n          <ul className=\"cardUl\">\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Name:</p>\n            <p className=\"userItemText\">\n            {props.name}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Format:</p>\n            <p className=\"userItemText\">\n            {props.format}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Path:</p>\n            <p className=\"userItemText\">\n            {props.path}\n            </p>\n            </li>\n          </ul>\n          </Card.Text>\n          <Card.Link href=\"\">\n          { props.canDelete === true && (\n            <Button variant=\"danger\" onClick={props.onDelete.bind(this, props.attachment)}>\n              Delete\n            </Button>\n          )}\n          </Card.Link>\n          <Card.Link href=\"\">\n          <Button variant=\"info\" onClick={props.onViewAttachment.bind(this, props.attachment)}>\n            View\n          </Button>\n          </Card.Link>\n        </Card.Body>\n      </Card>\n    </div>\n  </li>\n);\n\nexport default patientAttachmentItem;\n","import React from 'react';\n\nimport PatientAttachmentItem from './PatientItem/PatientAttachmentItem';\nimport './UserList.css';\n\nconst patientAttachmentsList = props => {\n  console.log(\"patient attachments list props\", props.patientAttachments);\n  const patientAttachments = props.patientAttachments.map(attachment => {\n\n    return (\n      <PatientAttachmentItem\n        key={attachment.name}\n        userId={props.authUserId}\n        name={attachment.name}\n        format={attachment.format}\n        path={attachment.path}\n        canDelete={props.canDelete}\n        onDelete={props.onDelete}\n        attachment={attachment}\n        onViewAttachment={props.onViewAttachment}\n      />\n    );\n  });\n\n  return <ul className=\"user__list1_detail\">{patientAttachments}</ul>;\n};\n\nexport default patientAttachmentsList;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\n\n\nimport './UserItem.css';\n\n\nconst patientNoteItem = props => (\n  <li key={props.userId} className=\"users__list-item_detail\">\n    <div>\n    <h6 className=\"userItemHeading\"> Note:</h6>\n    <p className=\"userItemText\">\n    {props.note}\n    </p>\n    </div>\n    { props.canDelete === true && (\n      <Button variant=\"danger\" onClick={props.onDelete.bind(this, props.note)}>\n        Delete\n      </Button>\n    )}\n  </li>\n);\n\nexport default patientNoteItem;\n","import React from 'react';\n\nimport PatientNoteItem from './PatientItem/PatientNoteItem';\nimport './UserList.css';\n\nconst patientNotesList = props => {\n  console.log(\"patient Notes list props\", props.patientNotes);\n  const patientNotes = props.patientNotes.map(note => {\n\n    return (\n      <PatientNoteItem\n        key={note}\n        userId={props.authUserId}\n        note={note}\n        canDelete={props.canDelete}\n        onDelete={props.onDelete}\n      />\n    );\n  });\n\n  return <ul className=\"user__list1_master\">{patientNotes}</ul>;\n};\n\nexport default patientNotesList;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\n\nimport './UserItem.css';\n\n\nconst patientTagItem = props => (\n  <li key={props.userId} className=\"users__list-item_detail\">\n    <div>\n    <h6 className=\"userItemHeading\"> Tag:</h6>\n    <p className=\"userItemText\">\n    {props.tag}\n    </p>\n    </div>\n    { props.canDelete === true && (\n      <Button variant=\"danger\" onClick={props.onDelete.bind(this, props.tag)}>\n        Delete\n      </Button>\n    )}\n  </li>\n);\n\nexport default patientTagItem;\n","import React from 'react';\n\nimport PatientTagItem from './PatientItem/PatientTagItem';\nimport './UserList.css';\n\nconst patientTagsList = props => {\n  console.log(\"patient Tags list props\", props.patientTags);\n  const patientTags = props.patientTags.map(tag => {\n\n    return (\n      <PatientTagItem\n        key={tag}\n        userId={props.authUserId}\n        tag={tag}\n        canDelete={props.canDelete}\n        onDelete={props.onDelete}\n      />\n    );\n  });\n\n  return <ul className=\"user__list1_master\">{patientTags}</ul>;\n};\n\nexport default patientTagsList;\n","import React from 'react';\nimport Card from 'react-bootstrap/Card';\n\nimport './UserItem.css';\n\n\nconst VisitConsultantItem = props => (\n  <li key={props.userId} className=\"users__list-item_detail\">\n    <div>\n    <Card className=\"card\">\n        <Card.Body>\n          <Card.Title>\n            Consultant\n          </Card.Title>\n\n          <Card.Text>\n          <ul className=\"cardUl\">\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Date:</p>\n            <p className=\"userItemText\">\n            {props.date}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Name:</p>\n            <p className=\"userItemText\">\n            {props.name}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Role:</p>\n            <p className=\"userItemText\">\n            {props.role}\n            </p>\n            </li>\n          </ul>\n          </Card.Text>\n        </Card.Body>\n      </Card>\n    </div>\n  </li>\n);\n\nexport default VisitConsultantItem;\n","import React from 'react';\n\nimport VisitConsultantItem from './PatientItem/VisitConsultantItem';\nimport './UserList.css';\n\nconst visitConsultantList = props => {\n  console.log(\"VisitConsultantlist props\", props.consultant);\n\n  let consultant = undefined;\n  if (props.consultant) {\n  consultant = props.consultant.map(consultantItem => {\n    const visitConsultantDate = new Date(consultantItem.date.substr(0,10)*1000).toISOString().slice(0,10);\n    const consultantReference = consultantItem.reference;\n    console.log(`\n      visitConsultantDate: ${visitConsultantDate},\n      consultantReference: ${JSON.stringify(consultantReference)},\n      `);\n    return (\n      <VisitConsultantItem\n        key={consultantItem.date}\n        userId={props.authUserId}\n        date={visitConsultantDate}\n        name={consultantReference.name}\n        role={consultantReference.role}\n      />\n    );\n  });\n\n  return <ul className=\"user__list1_detail\">{consultant}</ul>;\n};\n}\nexport default visitConsultantList;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\n\nimport './UserItem.css';\n\nconst VisitComplaintItem = props => (\n  <li key={props.userId} className=\"users__list-item_detail\">\n    <div>\n    <Card className=\"card\">\n        <Card.Body>\n          <Card.Title>\n            Complaint\n          </Card.Title>\n\n          <Card.Text>\n          <ul className=\"cardUl\">\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Date:</p>\n            <p className=\"userItemText\">\n            {props.date}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Title:</p>\n            <p className=\"userItemText\">\n            {props.title}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Description:</p>\n            <p className=\"userItemText\">\n            {props.description}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Anamnesis:</p>\n            <p className=\"userItemText\">\n            {props.anamnesis}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Name:</p>\n            <p className=\"userItemText\">\n            {props.attachmentName}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Format:</p>\n            <p className=\"userItemText\">\n            {props.attachmentFormat}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Path:</p>\n            <p className=\"userItemText\">\n            {props.attachmentPath}\n            </p>\n            </li>\n          </ul>\n          </Card.Text>\n          <Card.Link href=\"\">\n          <Button variant=\"info\" onClick={props.onViewAttachment.bind(this, props.attachment)}>\n            View\n          </Button>\n          </Card.Link>\n        </Card.Body>\n      </Card>\n    </div>\n\n  </li>\n);\n\nexport default VisitComplaintItem;\n","import React from 'react';\n\nimport VisitComplaintItem from './PatientItem/VisitComplaintItem';\nimport './UserList.css';\n\nconst visitComplaintList = props => {\n  console.log(\"VisitComplaintlist props\", props.complaint);\n\n  let complaint = undefined;\n  if (props.complaint) {\n  complaint = props.complaint.map(complaintItem => {\n    const visitComplaintDate = new Date(complaintItem.date.substr(0,10)*1000).toISOString().slice(0,10);\n    const complaintAttachment = complaintItem.attachment;\n    console.log(`\n      visitComplaintDate: ${visitComplaintDate},\n      `);\n    return (\n      <VisitComplaintItem\n        key={complaintItem.date}\n        userId={props.authUserId}\n        date={visitComplaintDate}\n        title={complaintItem.title}\n        description={complaintItem.description}\n        anamnesis={complaintItem.anamnesis}\n        attachment={complaintItem.attachment}\n        attachmentName={complaintAttachment.name}\n        attachmentFormat={complaintAttachment.format}\n        attachmentPath={complaintAttachment.path}\n        onViewAttachment={props.onViewAttachment}\n      />\n    );\n  });\n\n  return <ul className=\"user__list1_detail\">{complaint}</ul>;\n};\n}\n\nexport default visitComplaintList;\n\n// onViewAttachment={props.onViewAttachment}\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\n\nimport './UserItem.css';\n\n\nconst VisitExaminationItem = props => (\n  <li key={props.userId} className=\"users__list-item_detail\">\n    <div>\n    <Card className=\"card\">\n        <Card.Body>\n          <Card.Title>\n            Examination\n          </Card.Title>\n\n          <Card.Text>\n          <ul className=\"cardUl\">\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Date:</p>\n            <p className=\"userItemText\">\n            {props.date}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> General:</p>\n            <p className=\"userItemText\">\n            {props.general}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Area:</p>\n            <p className=\"userItemText\">\n            {props.area}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Type:</p>\n            <p className=\"userItemText\">\n            {props.type}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Measure:</p>\n            <p className=\"userItemText\">\n            {props.measure}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Value:</p>\n            <p className=\"userItemText\">\n            {props.value}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Description:</p>\n            <p className=\"userItemText\">\n            {props.description}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Follow Up ?</p>\n            <p className=\"userItemText\">\n            {props.followUp}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Attachment Name:</p>\n            <p className=\"userItemText\">\n            {props.attachmentName}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Format:</p>\n            <p className=\"userItemText\">\n            {props.attachmentFormat}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Path:</p>\n            <p className=\"userItemText\">\n            {props.attachmentPath}\n            </p>\n            </li>\n          </ul>\n          </Card.Text>\n          <Card.Link href=\"\">\n          <Button variant=\"info\" onClick={props.onViewAttachment.bind(this, props.attachment)}>\n            View\n          </Button>\n          </Card.Link>\n        </Card.Body>\n      </Card>\n    </div>\n\n  </li>\n);\n\nexport default VisitExaminationItem;\n","import React from 'react';\n\nimport VisitExaminationItem from './PatientItem/VisitExaminationItem';\nimport './UserList.css';\n\nconst visitExaminationList = props => {\n  console.log(\"VisitExaminationlist props\", props.examination);\n\n  let examination = undefined;\n  if (props.examination) {\n  examination = props.examination.map(examinationItem => {\n    const visitExaminationDate = new Date(examinationItem.date.substr(0,10)*1000).toISOString().slice(0,10);\n    const examinationAttachment = examinationItem.attachment;\n    console.log(`\n      visitExaminationDate: ${visitExaminationDate},\n      `);\n    return (\n      <VisitExaminationItem\n        key={examinationItem.date}\n        userId={props.authUserId}\n        date={visitExaminationDate}\n        general={examinationItem.general}\n        area={examinationItem.area}\n        type={examinationItem.type}\n        measure={examinationItem.measure}\n        value={examinationItem.value}\n        description={examinationItem.description}\n        followUp={examinationItem.followUp}\n        attachment={examinationItem.attachment}\n        attachmentName={examinationAttachment.name}\n        attachmentFormat={examinationAttachment.format}\n        attachmentPath={examinationAttachment.path}\n        onViewAttachment={props.onViewAttachment}\n      />\n    );\n  });\n\n  return <ul className=\"user__list1_detail\">{examination}</ul>;\n};\n}\nexport default visitExaminationList;\n\n// onViewAttachment={props.onViewAttachment}\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\n\nimport './UserItem.css';\n\n\nconst VisitSurveyItem = props => (\n  <li key={props.userId} className=\"users__list-item_detail\">\n    <div>\n    <Card className=\"card\">\n        <Card.Body>\n          <Card.Title>\n            Survey\n          </Card.Title>\n\n          <Card.Text>\n          <ul className=\"cardUl\">\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Date:</p>\n            <p className=\"userItemText\">\n            {props.date}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Title:</p>\n            <p className=\"userItemText\">\n            {props.title}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Description:</p>\n            <p className=\"userItemText\">\n            {props.description}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Attachment Name:</p>\n            <p className=\"userItemText\">\n            {props.attachmentName}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Format:</p>\n            <p className=\"userItemText\">\n            {props.attachmentFormat}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Path:</p>\n            <p className=\"userItemText\">\n            {props.attachmentPath}\n            </p>\n            </li>\n          </ul>\n          </Card.Text>\n          <Card.Link href=\"\">\n          <Button variant=\"info\" onClick={props.onViewAttachment.bind(this, props.attachment)}>\n            View\n          </Button>\n          </Card.Link>\n        </Card.Body>\n      </Card>\n      </div>\n\n  </li>\n);\n\nexport default VisitSurveyItem;\n","import React from 'react';\n\nimport VisitSurveyItem from './PatientItem/VisitSurveyItem';\nimport './UserList.css';\n\nconst visitSurveyList = props => {\n  console.log(\"VisitSurveylist props\", props.survey);\n\n  let survey = undefined;\n  if (props.survey) {\n  survey = props.survey.map(surveyItem => {\n    const visitSurveyDate = new Date(surveyItem.date.substr(0,10)*1000).toISOString().slice(0,10);\n    const surveyAttachment = surveyItem.attachment;\n    console.log(`\n      visitSurveyDate: ${visitSurveyDate},\n      `);\n    return (\n      <VisitSurveyItem\n        key={surveyItem.date}\n        userId={props.authUserId}\n        date={visitSurveyDate}\n        title={surveyItem.title}\n        description={surveyItem.description}\n        attachment={surveyItem.attachment}\n        attachmentName={surveyAttachment.name}\n        attachmentFormat={surveyAttachment.format}\n        attachmentPath={surveyAttachment.path}\n        onViewAttachment={props.onViewAttachment}\n      />\n    );\n  });\n}\n\n  return <ul className=\"user__list1_detail\">{survey}</ul>;\n};\n\nexport default visitSurveyList;\n\n// onViewAttachment={props.onViewAttachment}\n","import React from 'react';\nimport Card from 'react-bootstrap/Card';\n\nimport './UserItem.css';\n\n\nconst VisitVitalsItem = props => (\n  <li key={props.userId} className=\"users__list-item_detail\">\n    <div>\n    <Card className=\"card\">\n        <Card.Body>\n          <Card.Title>\n            Vitals\n          </Card.Title>\n\n          <Card.Text>\n          <ul className=\"cardUl\">\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> date:</p>\n            <p className=\"userItemText\">\n            {props.date}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Pulse Rate:</p>\n            <p className=\"userItemText\">\n            {props.pr}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Blood Pressure 1:</p>\n            <p className=\"userItemText\">\n            {props.bp1}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Blood Pressure 2:</p>\n            <p className=\"userItemText\">\n            {props.bp2}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Resp Rate:</p>\n            <p className=\"userItemText\">\n            {props.rr}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Temp:</p>\n            <p className=\"userItemText\">\n            {props.temp}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Sp02:</p>\n            <p className=\"userItemText\">\n            {props.ps02}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Height:</p>\n            <p className=\"userItemText\">\n            {props.height}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Weight:</p>\n            <p className=\"userItemText\">\n            {props.weight}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Bmi:</p>\n            <p className=\"userItemText\">\n            {props.Bmi}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Urine Type:</p>\n            <p className=\"userItemText\">\n            {props.urineType}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Urine Value:</p>\n            <p className=\"userItemText\">\n            {props.urineValue}\n            </p>\n            </li>\n          </ul>\n          </Card.Text>\n\n        </Card.Body>\n      </Card>\n    </div>\n  </li>\n);\n\nexport default VisitVitalsItem;\n","import React from 'react';\n\nimport VisitVitalsItem from './PatientItem/VisitVitalsItem';\nimport './UserList.css';\n\nconst visitVitalsList = props => {\n  console.log(\"VisitVitalslist props\", props.vitals);\n  let vitals = undefined;\n  if (props.vitals) {\n\n    vitals = props.vitals.map(vitalsItem => {\n      const visitVitalsDate = new Date(vitalsItem.date.substr(0,10)*1000).toISOString().slice(0,10);\n      const vitalsUrine = vitalsItem.urine;\n      console.log(`\n        visitVitalsDate: ${visitVitalsDate},\n        `);\n      return (\n        <VisitVitalsItem\n          key={vitalsItem.date}\n          userId={props.authUserId}\n          date={visitVitalsDate}\n          pr={vitalsItem.pr}\n          bp1={vitalsItem.bp1}\n          bp2={vitalsItem.bp2}\n          rr={vitalsItem.rr}\n          temp={vitalsItem.temp}\n          ps02={vitalsItem.ps02}\n          height={vitalsItem.height}\n          weight={vitalsItem.weight}\n          bmi={vitalsItem.bmi}\n          urineType={vitalsUrine.type}\n          urineValue={vitalsUrine.value}\n        />\n      );\n    });\n\n  }\n\n\n  return <ul className=\"user__list1_detail\">{vitals}</ul>;\n};\n\nexport default visitVitalsList;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\n\nimport './UserItem.css';\n\n\nconst VisitHistoryItem = props => (\n  <li key={props.userId} className=\"users__list-item_detail\">\n    <div>\n    <Card className=\"card\">\n        <Card.Body>\n          <Card.Title>\n            History\n          </Card.Title>\n\n          <Card.Text>\n          <ul className=\"cardUl\">\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Type:</p>\n            <p className=\"userItemText\">\n            {props.type}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Date:</p>\n            <p className=\"userItemText\">\n            {props.date}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Title:</p>\n            <p className=\"userItemText\">\n            {props.title}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Description:</p>\n            <p className=\"userItemText\">\n            {props.description}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Attachment Name:</p>\n            <p className=\"userItemText\">\n            {props.attachmentName}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Format:</p>\n            <p className=\"userItemText\">\n            {props.attachmentFormat}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Path:</p>\n            <p className=\"userItemText\">\n            {props.attachmentPath}\n            </p>\n            </li>\n          </ul>\n          </Card.Text>\n          <Card.Link href=\"\">\n          <Button variant=\"info\" onClick={props.onViewAttachment.bind(this, props.attachment)}>\n            View\n          </Button>\n          </Card.Link>\n        </Card.Body>\n      </Card>\n    </div>\n\n  </li>\n);\n\nexport default VisitHistoryItem;\n","import React from 'react';\n\nimport VisitHistoryItem from './PatientItem/VisitHistoryItem';\nimport './UserList.css';\n\nconst visitHistoryList = props => {\n  console.log(\"VisitHistorylist props\", props.history);\n\n  let history = undefined;\n  if (props.history) {\n  history = props.history.map(historyItem => {\n    const visitHistoryDate = new Date(historyItem.date.substr(0,10)*1000).toISOString().slice(0,10);\n    const historyAttachment = historyItem.attachment;\n    console.log(`\n      visitHistoryDate: ${visitHistoryDate},\n      `);\n    return (\n      <VisitHistoryItem\n        key={historyItem.date}\n        userId={props.authUserId}\n        date={visitHistoryDate}\n        title={historyItem.title}\n        description={historyItem.description}\n        attachment={historyItem.attachment}\n        attachmentName={historyAttachment.name}\n        attachmentFormat={historyAttachment.format}\n        attachmentPath={historyAttachment.path}\n        onViewAttachment={props.onViewAttachment}\n      />\n    );\n  });\n\n  return <ul className=\"user__list1_detail\">{history}</ul>;\n};\n}\nexport default visitHistoryList;\n\n  // onViewAttachment={props.onViewAttachment}\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\n\nimport './UserItem.css';\n\n\nconst VisitInvestigationItem = props => (\n  <li key={props.userId} className=\"users__list-item_detail\">\n    <div>\n    <Card className=\"card\">\n        <Card.Body>\n          <Card.Title>\n            Investigation\n          </Card.Title>\n\n          <Card.Text>\n          <ul className=\"cardUl\">\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Type:</p>\n            <p className=\"userItemText\">\n            {props.type}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Date:</p>\n            <p className=\"userItemText\">\n            {props.date}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Title:</p>\n            <p className=\"userItemText\">\n            {props.title}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Description:</p>\n            <p className=\"userItemText\">\n            {props.description}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Attachment Name:</p>\n            <p className=\"userItemText\">\n            {props.attachmentName}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Format:</p>\n            <p className=\"userItemText\">\n            {props.attachmentFormat}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Path:</p>\n            <p className=\"userItemText\">\n            {props.attachmentPath}\n            </p>\n            </li>\n          </ul>\n          </Card.Text>\n          <Card.Link href=\"\">\n          <Button variant=\"info\" onClick={props.onViewAttachment.bind(this, props.attachment)}>\n            View\n          </Button>\n          </Card.Link>\n        </Card.Body>\n      </Card>\n    </div>\n  </li>\n);\n\nexport default VisitInvestigationItem;\n","import React from 'react';\n\nimport VisitInvestigationItem from './PatientItem/VisitInvestigationItem';\nimport './UserList.css';\n\nconst visitInvestigationList = props => {\n  console.log(\"VisitInvestigationlist props\", props.investigation);\n\n  let investigation = undefined;\n  if (props.investigation) {\n  investigation = props.investigation.map(investigationItem => {\n    const visitInvestigationDate = new Date(investigationItem.date.substr(0,10)*1000).toISOString().slice(0,10);\n    const investigationAttachment = investigationItem.attachment;\n    console.log(`\n      visitInvestigationDate: ${visitInvestigationDate},\n      `);\n    return (\n      <VisitInvestigationItem\n        key={investigationItem.date}\n        userId={props.authUserId}\n        date={visitInvestigationDate}\n        type={investigationItem.type}\n        title={investigationItem.title}\n        description={investigationItem.description}\n        attachment={investigationItem.attachment}\n        attachmentName={investigationAttachment.name}\n        attachmentFormat={investigationAttachment.format}\n        attachmentPath={investigationAttachment.path}\n        onViewAttachment={props.onViewAttachment}\n      />\n    );\n  });\n}\n\n  return <ul className=\"user__list1_detail\">{investigation}</ul>;\n};\n\nexport default visitInvestigationList;\n\n// onViewAttachment={props.onViewAttachment}\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\n\nimport './UserItem.css';\n\n\nconst VisitDiagnosisItem = props => (\n  <li key={props.userId} className=\"users__list-item_detail\">\n    <div>\n    <Card className=\"card\">\n        <Card.Body>\n          <Card.Title>\n            Diagnosis\n          </Card.Title>\n\n          <Card.Text>\n          <ul className=\"cardUl\">\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Title:</p>\n            <p className=\"userItemText\">\n            {props.title}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Date:</p>\n            <p className=\"userItemText\">\n            {props.date}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Type:</p>\n            <p className=\"userItemText\">\n            {props.type}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Description:</p>\n            <p className=\"userItemText\">\n            {props.description}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Name:</p>\n            <p className=\"userItemText\">\n            {props.attachmentName}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Format:</p>\n            <p className=\"userItemText\">\n            {props.attachmentFormat}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Path:</p>\n            <p className=\"userItemText\">\n            {props.attachmentPath}\n            </p>\n            </li>\n          </ul>\n          </Card.Text>\n          <Card.Link href=\"\">\n          <Button variant=\"info\" onClick={props.onViewAttachment.bind(this, props.attachment)}>\n            View\n          </Button>\n          </Card.Link>\n        </Card.Body>\n      </Card>\n    </div>\n\n  </li>\n);\n\nexport default VisitDiagnosisItem;\n","import React from 'react';\n\nimport VisitDiagnosisItem from './PatientItem/VisitDiagnosisItem';\nimport './UserList.css';\n\nconst visitDiagnosisList = props => {\n  console.log(\"VisitDiagnosislist props\", props.diagnosis);\n\n  let diagnosis = undefined;\n  if (props.diagnosis) {\n  diagnosis = props.diagnosis.map(diagnosisItem => {\n    const visitDiagnosisDate = new Date(diagnosisItem.date.substr(0,10)*1000).toISOString().slice(0,10);\n    const diagnosisAttachment = diagnosisItem.attachment;\n    console.log(`\n      visitDiagnosisDate: ${visitDiagnosisDate},\n      `);\n    return (\n      <VisitDiagnosisItem\n        key={diagnosisItem.date}\n        userId={props.authUserId}\n        date={visitDiagnosisDate}\n        type={diagnosisItem.type}\n        title={diagnosisItem.title}\n        description={diagnosisItem.description}\n        attachment={diagnosisItem.attachment}\n        attachmentName={diagnosisAttachment.name}\n        attachmentFormat={diagnosisAttachment.format}\n        attachmentPath={diagnosisAttachment.path}\n        onViewAttachment={props.onViewAttachment}\n      />\n    );\n  });\n\n  return <ul className=\"user__list1_detail\">{diagnosis}</ul>;\n};\n}\nexport default visitDiagnosisList;\n\n// onViewAttachment={props.onViewAttachment}\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\n\nimport './UserItem.css';\n\n\nconst VisitInvestigationItem = props => (\n  <li key={props.userId} className=\"users__list-item_detail\">\n    <div>\n    <Card className=\"card\">\n        <Card.Body>\n          <Card.Title>\n            Treatment\n          </Card.Title>\n\n          <Card.Text>\n          <ul className=\"cardUl\">\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Title:</p>\n            <p className=\"userItemText\">\n            {props.title}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Type:</p>\n            <p className=\"userItemText\">\n            {props.type}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Date:</p>\n            <p className=\"userItemText\">\n            {props.date}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Description:</p>\n            <p className=\"userItemText\">\n            {props.description}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Dose:</p>\n            <p className=\"userItemText\">\n            {props.dose}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Frequency:</p>\n            <p className=\"userItemText\">\n            {props.frequency}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Attachment Name:</p>\n            <p className=\"userItemText\">\n            {props.attachmentName}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Format:</p>\n            <p className=\"userItemText\">\n            {props.attachmentFormat}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Path:</p>\n            <p className=\"userItemText\">\n            {props.attachmentPath}\n            </p>\n            </li>\n          </ul>\n          </Card.Text>\n          <Card.Link href=\"\">\n          <Button variant=\"info\" onClick={props.onViewAttachment.bind(this, props.attachment)}>\n            View\n          </Button>\n          </Card.Link>\n\n        </Card.Body>\n      </Card>\n    </div>\n  </li>\n);\n\nexport default VisitInvestigationItem;\n","import React from 'react';\n\nimport VisitTreatmentItem from './PatientItem/VisitTreatmentItem';\nimport './UserList.css';\n\nconst visitTreatmentList = props => {\n  console.log(\"VisitTreatmentlist props\", props.treatment);\n  let treatment = undefined;\n  if (props.treatment) {\n  treatment = props.treatment.map(treatmentItem => {\n    const visitTreatmentDate = new Date(treatmentItem.date.substr(0,10)*1000).toISOString().slice(0,10);\n    const treatmentAttachment = treatmentItem.attachment;\n    console.log(`\n      visitTreatmentDate: ${visitTreatmentDate},\n      `);\n    return (\n      <VisitTreatmentItem\n        key={treatmentItem.date}\n        userId={props.authUserId}\n        date={visitTreatmentDate}\n        type={treatmentItem.type}\n        title={treatmentItem.title}\n        type={treatmentItem.type}\n        description={treatmentItem.description}\n        dose={treatmentItem.dose}\n        frequency={treatmentItem.frequency}\n        attachment={treatmentItem.attachment}\n        attachmentName={treatmentAttachment.name}\n        attachmentFormat={treatmentAttachment.format}\n        attachmentPath={treatmentAttachment.path}\n        onViewAttachment={props.onViewAttachment}\n      />\n    );\n  });\n}\n\n  return <ul className=\"user__list1_master\">{treatment}</ul>;\n};\n\nexport default visitTreatmentList;\n\n// onViewAttachment={props.onViewAttachment}\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\n\nimport './UserItem.css';\n\n\nconst VisitBillingItem = props => (\n  <li key={props.userId} className=\"users__list-item_detail\">\n    <div>\n    <Card className=\"card\">\n        <Card.Body>\n          <Card.Title>\n            Billing\n          </Card.Title>\n\n          <Card.Text>\n          <ul className=\"cardUl\">\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Title:</p>\n            <p className=\"userItemText\">\n            {props.title}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Type:</p>\n            <p className=\"userItemText\">\n            {props.type}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Date:</p>\n            <p className=\"userItemText\">\n            {props.date}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Description:</p>\n            <p className=\"userItemText\">\n            {props.description}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Amount:</p>\n            <p className=\"userItemText\">\n            {props.amount}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Paid ?</p>\n            <p className=\"userItemText\">\n            {props.paid}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Notes:</p>\n            <p className=\"userItemText\">\n            {props.notes}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Attachment Name:</p>\n            <p className=\"userItemText\">\n            {props.attachmentName}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Format:</p>\n            <p className=\"userItemText\">\n            {props.attachmentFormat}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Path:</p>\n            <p className=\"userItemText\">\n            {props.attachmentPath}\n            </p>\n            </li>\n          </ul>\n          </Card.Text>\n          <Card.Link href=\"\">\n          <Button variant=\"info\" onClick={props.onViewAttachment.bind(this, props.attachment)}>\n            View\n          </Button>\n          </Card.Link>\n        </Card.Body>\n      </Card>\n    </div>\n  </li>\n);\n\nexport default VisitBillingItem;\n","import React from 'react';\n\nimport VisitBillingItem from './PatientItem/VisitBillingItem';\nimport './UserList.css';\n\nconst visitBillingList = props => {\n  console.log(\"VisitBillinglist props\", props.billing);\n\n  let billing = undefined;\n  if (props.billing) {\n  billing = props.billing.map(billingItem => {\n    const visitBillingDate = new Date(billingItem.date.substr(0,10)*1000).toISOString().slice(0,10);\n    const billingAttachment = billingItem.attachment;\n    console.log(`\n      visitBillingDate: ${visitBillingDate},\n      `);\n    return (\n      <VisitBillingItem\n        key={billingItem.date}\n        userId={props.authUserId}\n        date={visitBillingDate}\n        type={billingItem.type}\n        title={billingItem.title}\n        description={billingItem.description}\n        amount={billingItem.amount}\n        paid={billingItem.paid}\n        notes={billingItem.notes}\n        attachment={billingItem.attachment}\n        attachmentName={billingAttachment.name}\n        attachmentFormat={billingAttachment.format}\n        attachmentPath={billingAttachment.path}\n        onViewAttachment={props.onViewAttachment}\n      />\n    );\n  });\n\n  return <ul className=\"user__list1_detail\">{billing}</ul>;\n};\n}\nexport default visitBillingList;\n\n// onViewAttachment={props.onViewAttachment}\n","import React from 'react';\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\nimport Accordion from 'react-bootstrap/Accordion';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\n\nimport VisitConsultantList from './PatientList/VisitConsultantList';\nimport VisitComplaintList from './PatientList/VisitComplaintList';\nimport VisitExaminationList from './PatientList/VisitExaminationList';\nimport VisitSurveyList from './PatientList/VisitSurveyList';\nimport VisitVitalsList from './PatientList/VisitVitalsList';\nimport VisitHistoryList from './PatientList/VisitHistoryList';\nimport VisitInvestigationList from './PatientList/VisitInvestigationList';\nimport VisitDiagnosisList from './PatientList/VisitDiagnosisList';\nimport VisitTreatmentList from './PatientList/VisitTreatmentList';\nimport VisitBillingList from './PatientList/VisitBillingList';\n\nimport './PatientDetail.css';\n\nconst PatientVisit = (props) => {\n  let visit = {\n    date: \"\",\n    patientName: \"\",\n    consultant: \"\",\n    complaint: \"\",\n    examination: \"\",\n    survey: \"\",\n    vitals: \"\",\n    history: \"\",\n    investigation: \"\",\n    diagnosis: \"\",\n    treatment: \"\",\n    billing: \"\",\n  };\n  if (props.visit !== null) {\n    visit = props.visit;\n  }\n\n  const consultant = visit.consultant;\n  const complaint = visit.complaint;\n  const examination = visit.examination;\n  const survey = visit.survey;\n  const vitals = visit.vitals;\n  const history = visit.history;\n  const investigation = visit.investigation;\n  const diagnosis = visit.diagnosis;\n  const treatment = visit.treatment;\n  const billing = visit.billing;\n\n  console.log(`\n    patientVisit: ${JSON.stringify(visit)},\n    date: ${visit.date},\n    consultant: ${consultant},\n    complaint: ${complaint},\n    examination: ${examination},\n    survey: ${survey},\n    investigation: ${investigation},\n    diagnosis: ${diagnosis},\n    treatment: ${treatment},\n    billing: ${billing},\n        `);\n    return (\n      <div className=\"PatientDetailBox1\">\n      <p>Date: {new Date(visit.date).toISOString().slice(0,10)}</p>\n      <p>Patient: {visit.patientName}</p>\n      <Tabs defaultActiveKey=\"Visit\" id=\"uncontrolled-tab-example\" className=\"tab\">\n      <Tab eventKey=\"\" title=\"Visit:\" disabled>\n      </Tab>\n      <Tab eventKey=\"Consultant\" title=\"Consultant\">\n      <Card className=\"PatientDetailCard\">\n      <Card.Body>\n      <Card.Text>\n        Consultants\n      </Card.Text>\n      <VisitConsultantList\n        consultant={consultant}\n        authUserId={props.authUserId}\n        />\n      </Card.Body>\n      </Card>\n      </Tab>\n      <Tab eventKey=\"Complaint\" title=\"Complaint\">\n      <Card className=\"PatientDetailCard\">\n      <Card.Body>\n      <Card.Text>\n        Complaints\n      </Card.Text>\n      <VisitComplaintList\n        complaint={complaint}\n        authUserId={props.authUserId}\n        onViewAttachment={props.onViewAttachment}\n        />\n      </Card.Body>\n      </Card>\n      </Tab>\n      <Tab eventKey=\"Examination\" title=\"Examination\">\n      <Card className=\"PatientDetailCard\">\n      <Card.Body>\n      <Card.Text>\n        Examinations\n      </Card.Text>\n      <VisitExaminationList\n        examination={examination}\n        authUserId={props.authUserId}\n        onViewAttachment={props.onViewAttachment}\n        />\n      </Card.Body>\n      </Card>\n      </Tab>\n      <Tab eventKey=\"Survey\" title=\"Survey\">\n      <Card className=\"PatientDetailCard\">\n      <Card.Body>\n      <Card.Text>\n        Surveys\n      </Card.Text>\n      <VisitSurveyList\n        survey={survey}\n        authUserId={props.authUserId}\n        onViewAttachment={props.onViewAttachment}\n        />\n      </Card.Body>\n      </Card>\n      </Tab>\n      <Tab eventKey=\"Vitals\" title=\"Vitals\">\n      <Card className=\"PatientDetailCard\">\n      <Card.Body>\n      <Card.Text>\n        Vitals\n      </Card.Text>\n      <VisitVitalsList\n        vitals={vitals}\n        authUserId={props.authUserId}\n        />\n      </Card.Body>\n      </Card>\n      </Tab>\n      <Tab eventKey=\"History\" title=\"History\">\n      <Card className=\"PatientDetailCard\">\n      <Card.Body>\n      <Card.Text>\n        History\n      </Card.Text>\n      <VisitHistoryList\n        history={history}\n        authUserId={props.authUserId}\n        onViewAttachment={props.onViewAttachment}\n        />\n      </Card.Body>\n      </Card>\n      </Tab>\n      <Tab eventKey=\"Investigation\" title=\"Investigation\">\n      <Card className=\"PatientDetailCard\">\n      <Card.Body>\n      <Card.Text>\n        Investigations\n      </Card.Text>\n      <VisitInvestigationList\n        investigation={investigation}\n        authUserId={props.authUserId}\n        onViewAttachment={props.onViewAttachment}\n        />\n      </Card.Body>\n      </Card>\n      </Tab>\n      <Tab eventKey=\"Diagnosis\" title=\"Diagnosis\">\n      <Card className=\"PatientDetailCard\">\n      <Card.Body>\n      <Card.Text>\n        Diagnosis\n      </Card.Text>\n      <VisitDiagnosisList\n        diagnosis={diagnosis}\n        authUserId={props.authUserId}\n        onViewAttachment={props.onViewAttachment}\n        />\n      </Card.Body>\n      </Card>\n      </Tab>\n      <Tab eventKey=\"Treatment\" title=\"Treatment\">\n      <Card className=\"PatientDetailCard\">\n      <Card.Body>\n      <Card.Text>\n        Treatment\n      </Card.Text>\n      <VisitTreatmentList\n        treatment={treatment}\n        authUserId={props.authUserId}\n        onViewAttachment={props.onViewAttachment}\n        />\n      </Card.Body>\n      </Card>\n      </Tab>\n      <Tab eventKey=\"Billing\" title=\"Billing\">\n      <Card className=\"PatientDetailCard\">\n      <Card.Body>\n      <Card.Text>\n        Billing\n      </Card.Text>\n      <VisitBillingList\n        billing={billing}\n        authUserId={props.authUserId}\n        onViewAttachment={props.onViewAttachment}\n        />\n      </Card.Body>\n      </Card>\n      </Tab>\n      </Tabs>\n      </div>\n    )\n\n}\n\nexport default PatientVisit;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Accordion from 'react-bootstrap/Accordion'\n// import AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst SearchPatientVisitForm = (props) => {\n// const {...search} = props.search;\n\nreturn (\n<div className=\"SearchFormContainer\">\n  <Form onSubmit={props.onGetVisit}>\n\n  <Form.Group controlId=\"formBasicVisitDate\">\n  <Form.Label>Visit Date</Form.Label>\n  <Form.Control type=\"date\" placeholder=\"VisitDate\"/>\n  </Form.Group>\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"10\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n\n{props.canConfirm && (\n  <Button variant=\"primary\" type=\"submit\">\n  Submit\n  </Button>\n)}\n\n{\n// <AuthContext.Consumer>\n// </AuthContext.Consumer>\n\n\n// populate feilds with user object fields\n}\n</Form>\n</div>\n\n\n)};\n\nexport default SearchPatientVisitForm;\n","import {parse, stringify} from 'flatted/esm';\nimport React from 'react';\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\nimport Accordion from 'react-bootstrap/Accordion';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\nimport Form from 'react-bootstrap/Form';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nimport AuthContext from '../../context/auth-context';\n\n\nimport PatientAppointmentList from './PatientList/PatientAppointmentList';\nimport PatientInsuranceList from './PatientList/PatientInsuranceList';\nimport PatientConsultantList from './PatientList/PatientConsultantList';\nimport PatientNextOfKinList from './PatientList/PatientNextOfKinList';\nimport PatientComplaintList from './PatientList/PatientComplaintList';\nimport PatientSurveyList from './PatientList/PatientSurveyList';\nimport PatientVitalsList from './PatientList/PatientVitalsList';\nimport PatientExaminationList from './PatientList/PatientExaminationList';\nimport PatientHistoryList from './PatientList/PatientHistoryList';\nimport PatientAllergiesList from './PatientList/PatientAllergiesList';\nimport PatientMedicationList from './PatientList/PatientMedicationList';\nimport PatientInvestigationList from './PatientList/PatientInvestigationList';\nimport PatientDiagnosisList from './PatientList/PatientDiagnosisList';\nimport PatientTreatmentList from './PatientList/PatientTreatmentList';\nimport PatientBillingList from './PatientList/PatientBillingList';\nimport PatientAttachmentsList from './PatientList/PatientAttachmentsList';\nimport PatientNotesList from './PatientList/PatientNotesList';\nimport PatientTagsList from './PatientList/PatientTagsList';\nimport PatientVisit from './PatientVisit';\n\nimport SearchPatientVisitForm from '../../components/Forms/SearchPatientVisitForm';\n\n\nimport './PatientDetail.css';\n\nconst PatientDetail = (props) => {\n  const {...patient} = props.patient;\n  // const authPatientId = props.authUserId;\n  const patientAppointment = patient.appointments;\n  const patientInsurance = patient.insurance;\n  const patientConsultant = patient.consultant;\n  const patientNextOfKin = patient.nextOfKin;\n  const patientComplaint = patient.complaints;\n  const patientSurvey = patient.surveys;\n  const patientVitals = patient.vitals;\n  const patientExamination = patient.examination;\n  const patientHistory = patient.history;\n  const patientAllergies = patient.allergies;\n  const patientMedication = patient.medication;\n  const patientInvestigation = patient.investigation;\n  const patientDiagnosis = patient.diagnosis;\n  const patientTreatment = patient.treatment;\n  const patientBilling = patient.billing;\n  const patientAttachments = patient.attachments;\n  const patientNotes = patient.notes;\n  const patientTags = patient.tags;\n  const patientRegistrationDate = new Date(patient.registrationDate.substr(0,10)*1000).toISOString().slice(0,10);\n  const patientDob = new Date(patient.dob.substr(0,10)*1000).toISOString().slice(0,10);\n  // const patientReferralDate = new Date(patient.referralDate*1000).toUTCString();\n  let patientReferralDate = patient.referralDate;\n  if (patient.referralDate) {\n    patientReferralDate = new Date(patient.referralDate.substr(0,10)*1000).toISOString().slice(0,10);\n  }\n  let patientExpirationDate = undefined;\n  if (patient.expirationDate !== null)\n  {patientExpirationDate = new Date(patient.expirationDate.substr(0,10)*1000).toISOString().slice(0,10);}\n  else {patientExpirationDate = patient.expirationDate;}\n  // let visit = \"noVisit\";\n  // if (props.visit) {\n  //   visit = props.visit;\n  // }\n  const token = props.token;\n  const userId = props.authUserId;\n  const patientId = patient._id;\n\n  console.log(\"PatientDetail.props.patient:  \", {...patient});\n  // console.log(\"patientExamination[1].date:  \", new Date(patientExamination[1].date.substr(0,10)*1000).toISOString());\n  // console.log(\"patientConsultant[1].date:  \", patientConsultant[1].date);\n  // console.log(\"patientComplaint[1].date:  \", patientComplaint[1].date);\n  // console.log(\"patientComplaint[1].date:  \", new Date(patientComplaint[1].date.substr(0,10)*1000).toLocaleString());\n\n\n\n  return (\n    <div className=\"PatientDetailBox1\">\n\n    <Tabs defaultActiveKey=\"Demographics\" id=\"uncontrolled-tab-example\" className=\"tab\">\n      \n      <Tab eventKey=\"Demographics\" title=\"Demographics\">\n      <Card className=\"PatientDetailCard\">\n      <Card.Body>\n      <Card.Title><span className=\"ul\">Patient Details</span></Card.Title>\n      <Row className=\"detailCardRow\">\n        <Col md={4} className=\"detailCardCol\">\n          <Card.Text>\n            <span className=\"bold\">ID :</span> {patient._id}\n          </Card.Text>\n          <Card.Text>\n            <span className=\"bold\">Title :</span> {patient.title}\n          </Card.Text>\n          <Card.Text>\n            <span className=\"bold\">Name :</span> {patient.name}\n          </Card.Text>\n          <Card.Text>\n            <span className=\"bold\">D.O.B :</span> {patientDob}\n          </Card.Text>\n          <Card.Text>\n            <span className=\"bold\">Age :</span> {patient.age}\n          </Card.Text>\n          <Card.Text>\n            <span className=\"bold\">Gender :</span> {patient.gender}\n          </Card.Text>\n          <Card.Text>\n            <span className=\"bold\">Reg Date :</span> {patientRegistrationDate}\n          </Card.Text>\n          <Card.Text>\n            <span className=\"bold\">Ref Date :</span> {patientReferralDate}\n          </Card.Text>\n          <Card.Text>\n            <span className=\"bold\">Exp Date :</span> {patientExpirationDate}\n          </Card.Text>\n        </Col>\n\n        <Col md={4} className=\"detailCardCol\">\n          <Card.Text>\n            <span className=\"bold\">Phone :</span> {patient.contact.phone}\n          </Card.Text>\n          <Card.Text>\n            <span className=\"bold\">Email :</span> {patient.contact.email}\n          </Card.Text>\n          <Card.Text>\n            <span className=\"bold\">Address :</span>\n          </Card.Text>\n          <Card.Text>\n            <span className=\"bold\">Street No :</span> {patient.address.number}\n          </Card.Text>\n          <Card.Text>\n            <span className=\"bold\">Street Name :</span> {patient.address.street}\n          </Card.Text>\n          <Card.Text>\n            <span className=\"bold\">Town :</span> {patient.address.town}\n          </Card.Text>\n          <Card.Text>\n            <span className=\"bold\">Parish :</span> {patient.address.parish}\n          </Card.Text>\n          <Card.Text>\n            <span className=\"bold\">PO :</span> {patient.address.postOffice}\n          </Card.Text>\n        </Col>\n\n        <Col md={4} className=\"detailCardCol\">\n          <Card.Text>\n            <span className=\"bold\">Job Position :</span> {patient.occupation.role}\n          </Card.Text>\n          <Card.Text>\n            <span className=\"bold\">Employer :</span> {patient.occupation.employer}\n          </Card.Text>\n          <Card.Text>\n            <span className=\"bold\">Employer Phone :</span> {patient.occupation.contact.phone}\n          </Card.Text>\n          <Card.Text>\n            <span className=\"bold\">Employer Email :</span> {patient.occupation.contact.email}\n          </Card.Text>\n          <Card.Text>\n            <span className=\"bold\">Referring Doctor :</span>\n          </Card.Text>\n          <Card.Text>\n            <span className=\"bold\">Name :</span> {patient.referringDoctor.name}\n          </Card.Text>\n          <Card.Text>\n            <span className=\"bold\">Phone :</span> {patient.referringDoctor.phone}\n          </Card.Text>\n          <Card.Text>\n            <span className=\"bold\">Email :</span> {patient.referringDoctor.email}\n          </Card.Text>\n          <Card.Text>\n            <span className=\"bold\">Attending Physician :</span>\n          </Card.Text>\n          <Card.Text>\n            <span className=\"bold\">Name :</span> {patient.attendingPhysician.name}\n          </Card.Text>\n          <Card.Text>\n            <span className=\"bold\">Phone :</span> {patient.attendingPhysician.phone}\n          </Card.Text>\n          <Card.Text>\n            <span className=\"bold\">Email :</span> {patient.attendingPhysician.email}\n          </Card.Text>\n        </Col>\n      </Row>\n\n      <Row className=\"detailCardRow\">\n        <Col className=\"detailCardCol\">\n          { props.canDelete === true && (\n            <Button variant=\"danger\" onClick={props.onDelete}>\n              Delete Patient !!??\n            </Button>\n          )}\n        </Col>\n\n        <Col className=\"detailCardCol\">\n          <Button variant=\"warning\" onClick={props.onCreatePdf.bind(this, patient)}>\n            Create Pdf\n          </Button>\n        </Col>\n      </Row>\n\n      </Card.Body>\n      </Card>\n      </Tab>\n\n      <Tab eventKey=\"Appointments\" title=\"Appointments\">\n      <Card.Text>\n        Appointments:\n      </Card.Text>\n      <PatientAppointmentList\n      patientAppointment={patientAppointment}\n      authUserId={props.authUserId}\n      />\n      </Tab>\n\n      <Tab eventKey=\"Consultant\" title=\"Consultant\">\n      <Card.Text>\n        Consultants:\n      </Card.Text>\n      { patientConsultant !== null &&\n        (<PatientConsultantList\n          patientConsultant={patientConsultant}\n          authUserId={props.authUserId}\n          canDelete={props.canDelete}\n          onDelete={props.consultantDelete}\n          />)\n      }\n      </Tab>\n\n      <Tab eventKey=\"Insurance\" title=\"Insurance\">\n      <Card.Text>\n        Insurance:\n      </Card.Text>\n      <PatientInsuranceList\n        patientInsurance={patientInsurance}\n        authUserId={props.authUserId}\n        canDelete={props.canDelete}\n        onDelete={props.insuranceDelete}\n        />\n      </Tab>\n\n      <Tab eventKey=\"NextOfKin\" title=\"NextOfKin\">\n      <Card.Text>\n        NextOfKin:\n      </Card.Text>\n      <PatientNextOfKinList\n        patientNextOfKin={patientNextOfKin}\n        authUserId={props.authUserId}\n        canDelete={props.canDelete}\n        onDelete={props.nextOfKinDelete}\n        />\n      </Tab>\n\n      <Tab eventKey=\"Complaint\" title=\"Complaint\">\n      <Card.Text>\n        Complaint:\n      </Card.Text>\n      <PatientComplaintList\n        patientComplaint={patientComplaint}\n        authUserId={props.authUserId}\n        canDelete={props.canDelete}\n        onDelete={props.complaintDelete}\n        onViewAttachment={props.onViewAttachment}\n        />\n      </Tab>\n      <Tab eventKey=\"Survey\" title=\"Survey\">\n      <Card.Text>\n        Surveys:\n      </Card.Text>\n      <PatientSurveyList\n        patientSurvey={patientSurvey}\n        authUserId={props.authUserId}\n        canDelete={props.canDelete}\n        onDelete={props.surveyDelete}\n        onViewAttachment={props.onViewAttachment}\n        />\n      </Tab>\n      <Tab eventKey=\"Vitals\" title=\"Vitals\">\n      <Card.Text>\n        Vitals:\n      </Card.Text>\n      <PatientVitalsList\n        patientVitals={patientVitals}\n        authUserId={props.authUserId}\n        canDelete={props.canDelete}\n        onDelete={props.vitalsDelete}\n        />\n      </Tab>\n      <Tab eventKey=\"Examination\" title=\"Examination\">\n      <Card.Text>\n        Examination:\n      </Card.Text>\n      <PatientExaminationList\n        patientExamination={patientExamination}\n        authUserId={props.authUserId}\n        canDelete={props.canDelete}\n        onDelete={props.examinationDelete}\n        onViewAttachment={props.onViewAttachment}\n        />\n      </Tab>\n      <Tab eventKey=\"History\" title=\"History\">\n      <Card.Text>\n        History:\n      </Card.Text>\n      <PatientHistoryList\n        patientHistory={patientHistory}\n        authUserId={props.authUserId}\n        canDelete={props.canDelete}\n        onDelete={props.historyDelete}\n        onViewAttachment={props.onViewAttachment}\n        />\n      </Tab>\n      <Tab eventKey=\"Allergies\" title=\"Allergies\">\n      <Card.Text>\n        Allergies:\n      </Card.Text>\n      <PatientAllergiesList\n        patientAllergies={patientAllergies}\n        authUserId={props.authUserId}\n        canDelete={props.canDelete}\n        onDelete={props.allergiesDelete}\n        onViewAttachment={props.onViewAttachment}\n        />\n      </Tab>\n      <Tab eventKey=\"Medication\" title=\"Medication\">\n      <Card.Text>\n        Medication:\n      </Card.Text>\n      <PatientMedicationList\n        patientMedication={patientMedication}\n        authUserId={props.authUserId}\n        canDelete={props.canDelete}\n        onDelete={props.medicationDelete}\n        onViewAttachment={props.onViewAttachment}\n        />\n      </Tab>\n      <Tab eventKey=\"Investigation\" title=\"Investigation\">\n      <Card.Text>\n        Investigation:\n      </Card.Text>\n      <PatientInvestigationList\n        patientInvestigation={patientInvestigation}\n        authUserId={props.authUserId}\n        canDelete={props.canDelete}\n        onDelete={props.investigationDelete}\n        onViewAttachment={props.onViewAttachment}\n        />\n      </Tab>\n      <Tab eventKey=\"Diagnosis\" title=\"Diagnosis\">\n      <Card.Text>\n        Diagnosis:\n      </Card.Text>\n      <PatientDiagnosisList\n        patientDiagnosis={patientDiagnosis}\n        authUserId={props.authUserId}\n        canDelete={props.canDelete}\n        onDelete={props.diagnosisDelete}\n        onViewAttachment={props.onViewAttachment}\n        />\n      </Tab>\n      <Tab eventKey=\"Treatment\" title=\"Treatment\">\n      <Card.Text>\n        Treatment:\n      </Card.Text>\n      <PatientTreatmentList\n        patientTreatment={patientTreatment}\n        authUserId={props.authUserId}\n        canDelete={props.canDelete}\n        onDelete={props.treatmentDelete}\n        onViewAttachment={props.onViewAttachment}\n        />\n      </Tab>\n      <Tab eventKey=\"Billing\" title=\"Billing\">\n      <Card.Text>\n        Billing:\n      </Card.Text>\n      <PatientBillingList\n        patientBilling={patientBilling}\n        authUserId={props.authUserId}\n        canDelete={props.canDelete}\n        onDelete={props.billingDelete}\n        onViewAttachment={props.onViewAttachment}\n        />\n      </Tab>\n      <Tab eventKey=\"Attachments\" title=\"Attachments\">\n      <Card.Text>\n        Attachments:\n      </Card.Text>\n      <PatientAttachmentsList\n        patientAttachments={patientAttachments}\n        authUserId={props.authUserId}\n        canDelete={props.canDelete}\n        onDelete={props.attachmentDelete}\n        onViewAttachment={props.onViewAttachment}\n        />\n      </Tab>\n      <Tab eventKey=\"Notes\" title=\"Notes\">\n      <Card.Text>\n        Notes:\n      </Card.Text>\n      <PatientNotesList\n        patientNotes={patientNotes}\n        authUserId={props.authUserId}\n        canDelete={props.canDelete}\n        onDelete={props.noteDelete}\n        />\n      </Tab>\n      <Tab eventKey=\"Tags\" title=\"Tags\">\n      <Card.Text>\n        Tags:\n      </Card.Text>\n      <PatientTagsList\n        patientTags={patientTags}\n        authUserId={props.authUserId}\n        canDelete={props.canDelete}\n        onDelete={props.tagDelete}\n        />\n      </Tab>\n      <Tab eventKey=\"Visit\" title=\"Visit\">\n      <Card.Text>\n      </Card.Text>\n      <SearchPatientVisitForm\n            authUserId={props.authUserId}\n              canConfirm\n              onGetVisit={props.onGetVisit}\n              confirmText=\"Search\"\n              patient={props.patient}\n            />\n      {  props.visit !== null && (\n        <PatientVisit\n          authUserId={props.authUserId}\n          visit={props.visit}\n          onViewAttachment={props.onViewAttachment}\n          />\n        )}\n      </Tab>\n    </Tabs>\n  </div>\n  );\n}\n\nexport default PatientDetail;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\n\n\nimport './UserItem.css';\n\nconst searchPatientItem = props => (\n  <li key={props.patientId} className=\"users__list-item_detail\">\n  <div>\n    <h5 className=\"userItemHeading\"> Name:</h5>\n    <p className=\"userItemText\">\n      {props.name}\n    </p>\n    <h5 className=\"userItemHeading\"> Address:</h5>\n    <p className=\"userItemText\">\n      {props.addressParish}\n    </p>\n    <p className=\"userItemText\">\n      {props.addressTown}\n    </p>\n  </div>\n  <div>\n  <Button variant=\"primary\" onClick={props.onDetail.bind(this, props._id)}>\n        Details\n      </Button>\n  </div>\n  </li>\n);\n\nexport default searchPatientItem;\n","import React from 'react';\nimport Accordion from 'react-bootstrap/Accordion';\nimport Button from 'react-bootstrap/Button';\n\nimport SearchPatientItem from './PatientItem/SearchPatientItem';\nimport './UserList.css';\n\nconst searchPatientList = props => {\n  const searchPatients = props.searchPatients.map(patient => {\n    return (\n      <React.Fragment>\n      <SearchPatientItem\n        key={patient._id}\n        userId={props.authUserId}\n        _id={patient._id}\n        name={patient.name}\n        addressParish={patient.address.parish}\n        addressTown={patient.address.town}\n        onDetail={props.onViewDetail}\n      />\n      </React.Fragment>\n    );\n  });\n\n  return <ul className=\"user__list1_master\">{searchPatients}</ul>;\n};\n\nexport default searchPatientList;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Accordion from 'react-bootstrap/Accordion'\n// import AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst SearchPatientForm = (props) => {\n// const {...search} = props.search;\n\nreturn (\n<div className=\"SearchFormContainer\">\n  <Form onSubmit={props.onConfirm}>\n  <Form.Group controlId=\"formBasicFieldSelect\">\n  <Form.Label>Field</Form.Label>\n  <Form.Control as=\"select\">\n  <option>select</option>\n  <option>name</option>\n  <option>dob</option>\n  <option>age</option>\n  <option>gender</option>\n  <option>address.town</option>\n  <option>address.parish</option>\n  <option>registrationDate</option>\n  <option>referralDate</option>\n  <option>expirationDate</option>\n  <option>attendingPhysician.name</option>\n  <option>referringDoctor.name</option>\n  </Form.Control>\n  </Form.Group>\n\n  <Form.Group controlId=\"formBasicField\">\n  <Form.Label>Field</Form.Label>\n  <Form.Control type=\"text\" placeholder=\"Field\"/>\n  </Form.Group>\n\n<Form.Group controlId=\"formBasicQuery\">\n<Form.Label>Query</Form.Label>\n<Form.Control type=\"textarea\" rows=\"5\" placeholder=\"Query\"/>\n</Form.Group>\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"10\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n\n{props.canConfirm && (\n  <Accordion.Toggle as={Button} variant=\"success\" eventKey=\"10\" type=\"submit\">\n  Submit\n  </Accordion.Toggle>\n)}\n\n{\n// <AuthContext.Consumer>\n// </AuthContext.Consumer>\n\n\n// populate feilds with user object fields\n}\n</Form>\n</div>\n\n\n)};\n\nexport default SearchPatientForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Accordion from 'react-bootstrap/Accordion'\n// import AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst SearchPatientIdForm = (props) => {\n// const {...search} = props.search;\n\nreturn (\n<div className=\"SearchFormContainer\">\n  <Form onSubmit={props.onConfirm}>\n  <Form.Group controlId=\"formBasicId\">\n  <Form.Label>Patient Id</Form.Label>\n  <Form.Control type=\"text\" placeholder=\"Id\"/>\n  </Form.Group>\n\n  {props.canCancel && (\n    <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"5\" className=\"btn\" onClick={props.onCancel}>\n    Cancel\n    </Accordion.Toggle>\n  )}\n\n  {props.canConfirm && (\n    <Button variant=\"success\" type=\"submit\">Search</Button>\n  )}\n\n</Form>\n</div>\n\n\n)};\n\nexport default SearchPatientIdForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Accordion from 'react-bootstrap/Accordion'\n// import AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst SearchPatientNameForm = (props) => {\n// const {...search} = props.search;\n\nreturn (\n<div className=\"SearchFormContainer\">\n  <Form onSubmit={props.onConfirm}>\n\n  <Form.Group controlId=\"formBasicName\">\n  <Form.Label>Name</Form.Label>\n  <Form.Control type=\"text\" placeholder=\"Name\"/>\n  </Form.Group>\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"10\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n\n{props.canConfirm && (\n  <Accordion.Toggle as={Button} variant=\"success\" eventKey=\"10\" type=\"submit\">\n  Submit\n  </Accordion.Toggle>\n)}\n\n{\n// <AuthContext.Consumer>\n// </AuthContext.Consumer>\n\n\n// populate feilds with user object fields\n}\n</Form>\n</div>\n\n\n)};\n\nexport default SearchPatientNameForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Accordion from 'react-bootstrap/Accordion'\n// import FormCheck from 'react-bootstrap/FormCheck'\n// import { NavLink } from 'react-router-dom';\n// import AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst CreatePatientForm = (props) => {\n\n  // console.log({...props});\n  // console.log(\"CreatePatientForm:  \", AuthContext.token);\n\nreturn (\n<div className=\"CreateFormContainer\">\n<Form onSubmit={props.onConfirm}>\n<Form.Row>\n  <Form.Group as={Col} controlId=\"formGridTitle\">\n    <Form.Label>Title</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"Patient Title\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridName\">\n    <Form.Label>Name</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"Patient Name\"/>\n  </Form.Group>\n\n<Form.Group as={Col} controlId=\"formGridDob\">\n  <Form.Label>D.O.B</Form.Label>\n  <Form.Control type=\"date\" placeholder=\"Date of Birth\"/>\n</Form.Group>\n<Form.Group as={Col} controlId=\"formGridAge\">\n  <Form.Label>Age</Form.Label>\n  <Form.Control type=\"number\" placeholder=\"Age\"/>\n</Form.Group>\n<Form.Group as={Col} controlId=\"formGridGender\">\n  <Form.Label>Gender</Form.Label>\n  <Form.Control as=\"select\">\n    <option>Male</option>\n    <option>Female</option>\n  </Form.Control>\n</Form.Group>\n</Form.Row>\n\n<Form.Row>\n<Form.Group as={Col} controlId=\"formGridContactEmail\">\n  <Form.Label>Email</Form.Label>\n  <Form.Control type=\"email\" placeholder=\"Patient Email\"/>\n</Form.Group>\n\n<Form.Group as={Col} controlId=\"formGridContactPhone\">\n  <Form.Label>Phone</Form.Label>\n  <Form.Control type=\"number\" placeholder=\"Address Phone\"/>\n</Form.Group>\n</Form.Row>\n\n<Form.Row>\n<Form.Group as={Col} controlId=\"formGridAddressNumber\">\n  <Form.Label>Street No.</Form.Label>\n  <Form.Control type=\"number\" placeholder=\"Address Street No.\"/>\n</Form.Group>\n<Form.Group as={Col} controlId=\"formGridAddressStreet\">\n  <Form.Label>Street Name</Form.Label>\n  <Form.Control type=\"text\" placeholder=\"Address Street Name\"/>\n</Form.Group>\n<Form.Group as={Col} controlId=\"formGridAddressTown\">\n  <Form.Label>Town</Form.Label>\n  <Form.Control type=\"text\" placeholder=\"Address Town\"/>\n</Form.Group>\n<Form.Group as={Col} controlId=\"formGridAddressParish\">\n  <Form.Label>Parish</Form.Label>\n  <Form.Control type=\"text\" placeholder=\"Address Parish\"/>\n</Form.Group>\n<Form.Group as={Col} controlId=\"formGridAddressPostOffice\">\n  <Form.Label>Post Office</Form.Label>\n  <Form.Control type=\"text\" placeholder=\"Address PostOffice\"/>\n</Form.Group>\n</Form.Row>\n\n<Form.Row>\n<Form.Group as={Col} controlId=\"formGridRegistrationDate\">\n  <Form.Label>Registration Date</Form.Label>\n  <Form.Control type=\"date\" placeholder=\"Registration Date\"/>\n</Form.Group>\n<Form.Group as={Col} controlId=\"formGridReferralDate\">\n  <Form.Label>Referral Date</Form.Label>\n  <Form.Control type=\"date\" placeholder=\"Referral Date\"/>\n</Form.Group>\n<Form.Group as={Col} controlId=\"formGridExpirationDate\">\n  <Form.Label>Expiration Date</Form.Label>\n  <Form.Control type=\"date\" placeholder=\"Expiration Date\"/>\n</Form.Group>\n</Form.Row>\n\n<Form.Row>\n<Form.Group as={Col} controlId=\"formGridReferringDoctorName\">\n  <Form.Label>Referring Doctor: Name</Form.Label>\n  <Form.Control type=\"text\" placeholder='Ref Doctor Name' />\n</Form.Group>\n<Form.Group as={Col} controlId=\"formGridReferringDoctorEmail\">\n  <Form.Label>Referring Doctor: Email</Form.Label>\n  <Form.Control type=\"email\" placeholder='Ref Doctor Email'/>\n</Form.Group>\n<Form.Group as={Col} controlId=\"formGridReferringDoctorPhone\">\n  <Form.Label>Referring Doctor: Phone</Form.Label>\n  <Form.Control type=\"number\" placeholder=\"Ref Doctor Phone\"/>\n</Form.Group>\n</Form.Row>\n\n<Form.Row>\n<Form.Group as={Col} controlId=\"formGridAttendingPhysicianName\">\n  <Form.Label>Attending Physician: Name</Form.Label>\n  <Form.Control type=\"text\" placeholder='Attending Physician Name' />\n</Form.Group>\n<Form.Group as={Col} controlId=\"formGridAttendingPhysicianEmail\">\n  <Form.Label>Attending Physician: Email</Form.Label>\n  <Form.Control type=\"email\" placeholder='Attending Physician Email'/>\n</Form.Group>\n<Form.Group as={Col} controlId=\"formGridAttendingPhysicianPhone\">\n  <Form.Label>Attending Physician: Phone</Form.Label>\n  <Form.Control type=\"number\" placeholder=\"Attending Physician Phone\"/>\n</Form.Group>\n</Form.Row>\n\n<Form.Row>\n<Form.Group as={Col} controlId=\"formGridOccupationRole\">\n  <Form.Label>Job Role</Form.Label>\n  <Form.Control type=\"text\" placeholder=\"Job Role\"/>\n</Form.Group>\n<Form.Group as={Col} controlId=\"formGridOccupationEmployer\">\n  <Form.Label>Employer</Form.Label>\n  <Form.Control type=\"text\" placeholder=\"Employer Name\"/>\n</Form.Group>\n<Form.Group as={Col} controlId=\"formGridOccupationEmployerContactPhone\">\n  <Form.Label>Employer: Phone</Form.Label>\n  <Form.Control type=\"number\" placeholder=\"Employer Phone\"/>\n</Form.Group>\n</Form.Row>\n<Form.Row>\n<Form.Group as={Col} controlId=\"formGridOccupationEmployerContactEmail\">\n  <Form.Label>Employer: Email</Form.Label>\n  <Form.Control type=\"email\" placeholder=\"Employer Email\" />\n</Form.Group>\n</Form.Row>\n\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"2\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n\n{props.canConfirm && (\n    <Button variant=\"success\" type=\"submit\">Create New</Button>\n)}\n\n</Form>\n{\n  // <AuthContext.Consumer>\n// </AuthContext.Consumer>\n}\n</div>\n\n)};\n\nexport default CreatePatientForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Accordion from 'react-bootstrap/Accordion'\n// import FormCheck from 'react-bootstrap/FormCheck'\n// import AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst UpdatePatientForm = (props) => {\n\nconsole.log(\"UpdatePatientForm.props:  \", {...props});\nconst {...patient} = props.patient;\nconsole.log(\"UpdatePatientForm.props.patient:  \", {...patient});\n\n\nreturn (\n  <div className=\"UpdateFormContainer\">\n  <Form onSubmit={props.onConfirm}>\n  <Form.Row>\n    <Form.Group as={Col} controlId=\"formGridTitle\">\n      <Form.Label>Title</Form.Label>\n      <Form.Control type=\"text\" placeholder={patient.title}/>\n    </Form.Group>\n    <Form.Group as={Col} controlId=\"formGridName\">\n      <Form.Label>Name</Form.Label>\n      <Form.Control type=\"text\" placeholder={patient.name}/>\n    </Form.Group>\n\n  <Form.Group as={Col} controlId=\"formGridDob\">\n    <Form.Label>D.O.B</Form.Label>\n    <Form.Control type=\"date\" placeholder={patient.dob}/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridAge\">\n    <Form.Label>Age</Form.Label>\n    <Form.Control type=\"number\" placeholder={patient.age}/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridGender\">\n    <Form.Label>Gender</Form.Label>\n    <Form.Control as=\"select\">\n      <option>Male</option>\n      <option>Female</option>\n    </Form.Control>\n  </Form.Group>\n  </Form.Row>\n\n  <Form.Row>\n  <Form.Group as={Col} controlId=\"formGridContactEmail\">\n    <Form.Label>Email</Form.Label>\n    <Form.Control type=\"email\" placeholder={patient.contact.email}/>\n  </Form.Group>\n\n  <Form.Group as={Col} controlId=\"formGridContactPhone\">\n    <Form.Label>Phone</Form.Label>\n    <Form.Control type=\"number\" placeholder={patient.contact.phone}/>\n  </Form.Group>\n  </Form.Row>\n\n  <Form.Row>\n  <Form.Group as={Col} controlId=\"formGridAddressNumber\">\n    <Form.Label>Street No.</Form.Label>\n    <Form.Control type=\"number\" placeholder={patient.address.number}/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridAddressStreet\">\n    <Form.Label>Street Name</Form.Label>\n    <Form.Control type=\"text\" placeholder={patient.address.street}/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridAddressTown\">\n    <Form.Label>Town</Form.Label>\n    <Form.Control type=\"text\" placeholder={patient.address.town}/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridAddressParish\">\n    <Form.Label>Parish</Form.Label>\n    <Form.Control type=\"text\" placeholder={patient.address.parish}/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridAddressPostOffice\">\n    <Form.Label>Post Office</Form.Label>\n    <Form.Control type=\"text\" placeholder={patient.address.postOffice}/>\n  </Form.Group>\n  </Form.Row>\n\n  <Form.Row>\n  <Form.Group as={Col} controlId=\"formGridRegistrationDate\">\n    <Form.Label>Registration Date</Form.Label>\n    <Form.Control type=\"date\" placeholder={patient.registrationDate}/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridReferralDate\">\n    <Form.Label>Referral Date</Form.Label>\n    <Form.Control type=\"date\" placeholder={patient.referralDate}/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridExpirationDate\">\n    <Form.Label>Expiration Date</Form.Label>\n    <Form.Control type=\"date\" placeholder={patient.expirationDate}/>\n  </Form.Group>\n  </Form.Row>\n\n  <Form.Row>\n  <Form.Group as={Col} controlId=\"formGridReferringDoctorName\">\n    <Form.Label>Referring Doctor: Name</Form.Label>\n    <Form.Control type=\"text\" placeholder={patient.referringDoctor.name}/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridReferringDoctorEmail\">\n    <Form.Label>Referring Doctor: Email</Form.Label>\n    <Form.Control type=\"email\" placeholder={patient.referringDoctor.email}/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridReferringDoctorPhone\">\n    <Form.Label>Referring Doctor: Phone</Form.Label>\n    <Form.Control type=\"number\" placeholder={patient.referringDoctor.phone}/>\n  </Form.Group>\n  </Form.Row>\n\n  <Form.Row>\n  <Form.Group as={Col} controlId=\"formGridAttendingPhysicianName\">\n    <Form.Label>Attending Physician: Name</Form.Label>\n    <Form.Control type=\"text\" placeholder={patient.attendingPhysician.name}/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridAttendingPhysicianEmail\">\n    <Form.Label>Attending Physician: Email</Form.Label>\n    <Form.Control type=\"email\" placeholder={patient.attendingPhysician.email}/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridAttendingPhysicianPhone\">\n    <Form.Label>Attending Physician: Phone</Form.Label>\n    <Form.Control type=\"number\" placeholder={patient.attendingPhysician.phone}/>\n  </Form.Group>\n  </Form.Row>\n\n  <Form.Row>\n  <Form.Group as={Col} controlId=\"formGridOccupationRole\">\n    <Form.Label>Job Role</Form.Label>\n    <Form.Control type=\"text\" placeholder={patient.occupation.role}/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridOccupationEmployer\">\n    <Form.Label>Employer</Form.Label>\n    <Form.Control type=\"text\" placeholder={patient.occupation.employer}/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridOccupationEmployerContactPhone\">\n    <Form.Label>Employer: Phone</Form.Label>\n    <Form.Control type=\"number\" placeholder={patient.occupation.contact.phone}/>\n  </Form.Group>\n  </Form.Row>\n  <Form.Row>\n  <Form.Group as={Col} controlId=\"formGridOccupationEmployerContactEmail\">\n    <Form.Label>Employer: Email</Form.Label>\n    <Form.Control type=\"email\" placeholder={patient.occupation.contact.email}/>\n  </Form.Group>\n  </Form.Row>\n\n\n  {props.canCancel && (\n    <Button variant=\"danger\" onClick={props.onCancel}>Cancel</Button>\n  )}\n\n  {props.canConfirm && (\n    <Button variant=\"success\" type=\"submit\">Edit Patient</Button>\n  )}\n\n  </Form>\n  {\n    // <AuthContext.Consumer>\n  // </AuthContext.Consumer>\n  }\n  </div>\n)};\n\nexport default UpdatePatientForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Accordion from 'react-bootstrap/Accordion'\n// import FormCheck from 'react-bootstrap/FormCheck'\n// import AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst UpdatePatientFieldForm = (props) => {\n\nconsole.log(\"UpdatePatientFieldForm.props:  \", {...props});\nconst {...patient} = props.patient;\nconsole.log(\"UpdatePatientFieldForm.props.user:  \", {...patient});\n\nreturn (\n<div className=\"UpdateFormContainer\">\n<Form onSubmit={props.onConfirm}>\n<Form.Row>\n<Form.Group as={Col} controlId=\"formGridFieldSelect\">\n<Form.Label>Field Options</Form.Label>\n<Form.Control as=\"select\">\n<option>select</option>\n<option>name</option>\n<option>dob</option>\n<option>age</option>\n<option>gender</option>\n<option>address.town</option>\n<option>address.parish</option>\n<option>registrationDate</option>\n<option>referralDate</option>\n<option>expirationDate</option>\n<option>attendingPhysician.name</option>\n<option>referringDoctor.name</option>\n</Form.Control>\n</Form.Group>\n  <Form.Group as={Col} controlId=\"formGridField\">\n    <Form.Label>Field</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"Field\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridQuery\">\n    <Form.Label>Query</Form.Label>\n    <Form.Label>Date Format YYYY-MM-DD</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"Query\"/>\n  </Form.Group>\n</Form.Row>\n\n\n{props.canCancel && (\n  <Button variant=\"danger\" onClick={props.onCancel}>Cancel</Button>\n)}\n\n{props.canConfirm && (\n  <Button variant=\"success\" type=\"submit\">Edit Patient Field</Button>\n)}\n\n</Form>\n</div>\n\n)};\n\nexport default UpdatePatientFieldForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Accordion from 'react-bootstrap/Accordion'\n// import FormCheck from 'react-bootstrap/FormCheck'\n// import AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst UpdatePatientConsultantForm = (props) => {\n\nconsole.log(\"UpdatePatientConsultantForm.props:  \", {...props});\nconst {...patient} = props.patient;\nconsole.log(\"UpdatePatientConsultantForm.props.patient:  \", {...patient});\n\n\nreturn (\n<div className=\"UpdateFormContainer\">\n<Form onSubmit={props.onConfirm}>\n<Form.Row>\n  <Form.Group as={Col} controlId=\"formGridConsultantDate\">\n    <Form.Label>Consultation Date</Form.Label>\n    <Form.Control type=\"date\" placeholder=\"ConsultantDate\"/>\n  </Form.Group>\n  </Form.Row>\n\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"9\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n\n{props.canConfirm && (\n  <Accordion.Toggle as={Button} variant=\"success\" eventKey=\"9\" className=\"btn\" type=\"submit\">\n  Submit\n  </Accordion.Toggle>\n)}\n\n</Form>\n{\n  // <AuthContext.Consumer>\n// </AuthContext.Consumer>\n}\n</div>\n\n)};\n\nexport default UpdatePatientConsultantForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Accordion from 'react-bootstrap/Accordion'\n// import FormCheck from 'react-bootstrap/FormCheck'\n// import AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst UpdatePatientInsuranceForm = (props) => {\n\nconsole.log(\"UpdatePatientInsuranceForm.props:  \", {...props});\nconst {...patient} = props.patient;\nconsole.log(\"UpdatePatientInsuranceForm.props.patient:  \", {...patient});\n\n\nreturn (\n<div className=\"UpdateFormContainer\">\n<Form onSubmit={props.onConfirm}>\n<Form.Row>\n  <Form.Group as={Col} controlId=\"formGridInsuranceCompany\">\n    <Form.Label>Company</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"insuranceCompany\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridInsuranceNumber\">\n    <Form.Label>Number</Form.Label>\n    <Form.Control type=\"number\" placeholder=\"insuranceNumber\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridInsuranceDescription\">\n    <Form.Label>Description</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"insuranceDescription\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridInsuranceExpiry\">\n    <Form.Label>Expiry</Form.Label>\n    <Form.Control type=\"date\" placeholder=\"insuranceExpiry\"/>\n  </Form.Group>\n\n</Form.Row>\n\n<Form.Row>\n\n<Form.Group as={Col} controlId=\"formGridInsuranceSubscriberCompany\">\n  <Form.Label>Subscriber Company</Form.Label>\n  <Form.Control type=\"text\" placeholder=\"insuranceSubscriberCompany\"/>\n</Form.Group>\n<Form.Group as={Col} controlId=\"formGridInsuranceSubscriberDescription\">\n  <Form.Label>Description</Form.Label>\n  <Form.Control tas=\"textarea\" rows=\"3\" placeholder=\"insuranceSubscriberDescription\"/>\n</Form.Group>\n\n</Form.Row>\n\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"9\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n\n{props.canConfirm && (\n  <Accordion.Toggle as={Button} variant=\"success\" eventKey=\"9\" className=\"btn\" type=\"submit\">\n  Submit\n  </Accordion.Toggle>\n)}\n\n</Form>\n{\n  // <AuthContext.Consumer>\n// </AuthContext.Consumer>\n}\n</div>\n\n)};\n\nexport default UpdatePatientInsuranceForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Accordion from 'react-bootstrap/Accordion'\n// import FormCheck from 'react-bootstrap/FormCheck'\n// import AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst UpdatePatientNextOfKinForm = (props) => {\n\nconsole.log(\"UpdatePatientNextOfKinForm.props:  \", {...props});\nconst {...patient} = props.patient;\nconsole.log(\"UpdatePatientNextOfKinForm.props.patient:  \", {...patient});\n\n\nreturn (\n<div className=\"UpdateFormContainer\">\n<Form onSubmit={props.onConfirm}>\n<Form.Row>\n  <Form.Group as={Col} controlId=\"formGridNextOfKinName\">\n    <Form.Label>Name</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"NextOfKinName\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridNextOfKinPhone\">\n    <Form.Label>Phone</Form.Label>\n    <Form.Control type=\"number\" placeholder=\"NextOfKinPhone\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridNextOfKinEmail\">\n    <Form.Label>Email</Form.Label>\n    <Form.Control type=\"email\" placeholder=\"NextOfKinEmail\"/>\n  </Form.Group>\n\n</Form.Row>\n\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"9\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n\n{props.canConfirm && (\n  <Accordion.Toggle as={Button} variant=\"success\" eventKey=\"9\" className=\"btn\" type=\"submit\">\n  Submit\n  </Accordion.Toggle>\n)}\n\n</Form>\n{\n  // <AuthContext.Consumer>\n// </AuthContext.Consumer>\n}\n</div>\n\n)};\n\nexport default UpdatePatientNextOfKinForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Accordion from 'react-bootstrap/Accordion'\n// import FormCheck from 'react-bootstrap/FormCheck'\nimport AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst UpdatePatientComplaintForm = (props) => {\n\nconsole.log(\"UpdatePatientComplaintForm.props:  \", {...props});\nconst {...patient} = props.patient;\nconsole.log(\"UpdatePatientComplaintForm.props.patient:  \", {...patient});\n\n\nreturn (\n<div className=\"UpdateFormContainer\">\n<Form onSubmit={props.onConfirm}>\n<Form.Row>\n  <Form.Group as={Col} controlId=\"formGridComplaintDate\">\n    <Form.Label>Date</Form.Label>\n    <Form.Control type=\"date\" placeholder=\"ComplaintDate\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridComplaintTitle\">\n    <Form.Label>Title</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"ComplaintTitle\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridComplaintDescription\">\n    <Form.Label>Description</Form.Label>\n    <Form.Control as=\"textarea\" rows=\"3\" placeholder=\"ComplaintDescription\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridComplaintAnamnesis\">\n    <Form.Label>Anamnesis</Form.Label>\n    <Form.Control as=\"textarea\" rows=\"3\" placeholder=\"ComplaintAnamnesis\"/>\n  </Form.Group>\n\n  </Form.Row>\n\n  <Form.Row>\n\n  <Form.Group as={Col} controlId=\"formGridComplaintAttachmentFormat\">\n    <Form.Label>Attachment Format</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"complaintAttachmentFormat\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridComplaintAttachmentPath\">\n    <Form.Label>Attachment Path</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"complaintAttachmentPath\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridComplaintAttachmentFile\">\n    <Form.Label>File</Form.Label>\n    <Form.Control type=\"file\" placeholder=\"File\" onChange={(e) => {console.log(e.target.files[0]);AuthContext._currentValue.file = e.target.files[0];console.log(AuthContext._currentValue.file);}}/>\n  </Form.Group>\n  </Form.Row>\n\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"9\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n\n{props.canConfirm && (\n  <Accordion.Toggle as={Button} variant=\"success\" eventKey=\"9\" className=\"btn\" type=\"submit\">\n  Submit\n  </Accordion.Toggle>\n)}\n\n</Form>\n{\n  // <Form.Group as={Col} controlId=\"formGridComplaintAttachmentName\">\n  //   <Form.Label>ComplaintAttachmentName</Form.Label>\n  //   <Form.Control type=\"text\" placeholder=\"complaintAttachmentName\"/>\n  // </Form.Group>\n  // <AuthContext.Consumer>\n// </AuthContext.Consumer>\n}\n</div>\n\n)};\n\nexport default UpdatePatientComplaintForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Accordion from 'react-bootstrap/Accordion'\n// import FormCheck from 'react-bootstrap/FormCheck'\nimport AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst UpdatePatientSurveyForm = (props) => {\n\nconsole.log(\"UpdatePatientSurveyForm.props:  \", {...props});\nconst {...patient} = props.patient;\nconsole.log(\"UpdatePatientSurveyForm.props.patient:  \", {...patient});\n\n\nreturn (\n<div className=\"UpdateFormContainer\">\n<Form onSubmit={props.onConfirm}>\n<Form.Row>\n  <Form.Group as={Col} controlId=\"formGridSurveyDate\">\n    <Form.Label>Date</Form.Label>\n    <Form.Control type=\"date\" placeholder=\"SurveyDate\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridSurveyTitle\">\n    <Form.Label>Title</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"SurveyTitle\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridSurveyDescription\">\n    <Form.Label>Description</Form.Label>\n    <Form.Control as=\"textarea\" rows=\"3\" placeholder=\"SurveyDescription\"/>\n  </Form.Group>\n  </Form.Row>\n\n  <Form.Row>\n\n  <Form.Group as={Col} controlId=\"formGridSurveyAttachmentFormat\">\n    <Form.Label>Attachment Format</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"SurveyAttachmentFormat\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridSurveyAttachmentPath\">\n    <Form.Label>Attachment Path</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"SurveyAttachmentPath\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridSurveyAttachmentFile\">\n    <Form.Label>File</Form.Label>\n    <Form.Control type=\"file\" placeholder=\"File\" onChange={(e) => {console.log(e.target.files[0]);AuthContext._currentValue.file = e.target.files[0];console.log(AuthContext._currentValue.file);}}/>\n  </Form.Group>\n  </Form.Row>\n\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"9\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n\n{props.canConfirm && (\n  <Accordion.Toggle as={Button} variant=\"success\" eventKey=\"9\" className=\"btn\" type=\"submit\">\n  Submit\n  </Accordion.Toggle>\n)}\n\n</Form>\n{\n  // <Form.Group as={Col} controlId=\"formGridSurveyAttachmentName\">\n  //   <Form.Label>SurveyAttachmentName</Form.Label>\n  //   <Form.Control type=\"text\" placeholder=\"SurveyAttachmentName\"/>\n  // </Form.Group>\n  // <AuthContext.Consumer>\n// </AuthContext.Consumer>\n}\n</div>\n\n)};\n\nexport default UpdatePatientSurveyForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Accordion from 'react-bootstrap/Accordion'\n// import FormCheck from 'react-bootstrap/FormCheck'\n// import AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst UpdatePatientVitalsForm = (props) => {\n\nconsole.log(\"UpdatePatientVitalsForm.props:  \", {...props});\nconst {...patient} = props.patient;\nconsole.log(\"UpdatePatientVitalsForm.props.patient:  \", {...patient});\n\n\nreturn (\n<div className=\"UpdateFormContainer\">\n<Form onSubmit={props.onConfirm}>\n<Form.Row>\n  <Form.Group as={Col} controlId=\"formGridVitalsDate\">\n    <Form.Label>Date</Form.Label>\n    <Form.Control type=\"date\" placeholder=\"VitalsDate\"/>\n  </Form.Group>\n\n  <Form.Group as={Col} controlId=\"formGridVitalsPr\">\n    <Form.Label>Pulse rate (unit)</Form.Label>\n    <Form.Control type=\"number\" placeholder=\"VitalsPr\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridVitalsBp1\">\n    <Form.Label>Blood pressure 1 </Form.Label>\n    <Form.Control type=\"number\" placeholder=\"VitalsBp1\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridVitalsBp2\">\n    <Form.Label>Blood pressure 2</Form.Label>\n    <Form.Control type=\"number\" placeholder=\"VitalsBp2\"/>\n  </Form.Group>\n</Form.Row>\n\n<Form.Row>\n<Form.Group as={Col} controlId=\"formGridVitalsRr\">\n  <Form.Label>Respiratory rate (unit)</Form.Label>\n  <Form.Control type=\"number\" placeholder=\"VitalsRr\"/>\n</Form.Group>\n<Form.Group as={Col} controlId=\"formGridVitalsTemp\">\n  <Form.Label>Temperature (unit) </Form.Label>\n  <Form.Control type=\"number\" placeholder=\"VitalsTemp\"/>\n</Form.Group>\n<Form.Group as={Col} controlId=\"formGridVitalsPs02\">\n  <Form.Label>02 saturation (unit)</Form.Label>\n  <Form.Control type=\"number\" placeholder=\"VitalsPs02\"/>\n</Form.Group>\n</Form.Row>\n\n<Form.Row>\n  <Form.Group as={Col} controlId=\"formGridVitalsHeight\">\n    <Form.Label>Height (unit)</Form.Label>\n    <Form.Control type=\"number\" placeholder=\"VitalsHeight\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridVitalsWeight\">\n    <Form.Label>Weight (unit)</Form.Label>\n    <Form.Control type=\"number\" placeholder=\"VitalsWeight\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridVitalsBmi\">\n    <Form.Label>Bmi</Form.Label>\n    <Form.Control type=\"number\" placeholder=\"VitalsBmi\"/>\n  </Form.Group>\n</Form.Row>\n\n<Form.Row>\n<Form.Group as={Col} controlId=\"formGridVitalsUrineType\">\n  <Form.Label>Urine type</Form.Label>\n  <Form.Control type=\"text\" placeholder=\"VitalsUrineType\"/>\n</Form.Group>\n<Form.Group as={Col} controlId=\"formGridVitalsUrineValue\">\n  <Form.Label>Urine value</Form.Label>\n  <Form.Control type=\"text\" placeholder=\"VitalsUrineValue\"/>\n</Form.Group>\n</Form.Row>\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"9\" className=\"btn\">\n  Cancel\n  </Accordion.Toggle>\n)\n// <Button variant=\"danger\" onClick={props.onCancel}>\n// Cancel\n// </Button>\n}\n\n{props.canConfirm && (\n  <Accordion.Toggle as={Button} variant=\"success\" eventKey=\"9\" className=\"btn\" type=\"submit\">\n  Submit\n  </Accordion.Toggle>\n)}\n\n</Form>\n{\n  // <AuthContext.Consumer>\n// </AuthContext.Consumer>\n}\n</div>\n\n)};\n\nexport default UpdatePatientVitalsForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Accordion from 'react-bootstrap/Accordion'\n// import FormCheck from 'react-bootstrap/FormCheck'\nimport AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst UpdatePatientExaminationForm = (props) => {\n\nconsole.log(\"UpdatePatientExaminationForm.props:  \", {...props});\nconst {...patient} = props.patient;\nconsole.log(\"UpdatePatientExaminationForm.props.patient:  \", {...patient});\n\n\nreturn (\n<div className=\"UpdateFormContainer\">\n<Form onSubmit={props.onConfirm}>\n<Form.Row>\n  <Form.Group as={Col} controlId=\"formGridExaminationDate\">\n    <Form.Label>Date</Form.Label>\n    <Form.Control type=\"date\" placeholder=\"ExaminationDate\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridExaminationAreaSelect\">\n    <Form.Label>Area Options</Form.Label>\n    <Form.Control as=\"select\">\n    <option>select</option>\n    <option>nose</option>\n    <option>fauces</option>\n    <option>ears</option>\n    <option>larynx</option>\n    <option>neck</option>\n    <option>chest</option>\n    <option>cvs</option>\n    <option>abdomen</option>\n    </Form.Control>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridExaminationArea\">\n    <Form.Label>Area</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"ExaminationArea\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridExaminationGeneral\">\n    <Form.Label>General</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"ExaminationGeneral\"/>\n  </Form.Group>\n  </Form.Row>\n\n  <Form.Row>\n  <Form.Group as={Col} controlId=\"formGridExaminationType\">\n    <Form.Label>Type</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"ExaminationType\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridExaminationMeasure\">\n    <Form.Label>Measure</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"ExaminationMeasure\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridExaminationValue\">\n    <Form.Label>Value</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"ExaminationValue\"/>\n  </Form.Group>\n  </Form.Row>\n\n  <Form.Row>\n  <Form.Group as={Col} controlId=\"formGridExaminationDescription\">\n    <Form.Label>Description</Form.Label>\n    <Form.Control as=\"textarea\" rows=\"3\" placeholder=\"ExaminationDescription\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridExaminationFollowUp\">\n    <Form.Label>FollowUp ?</Form.Label>\n    <Form.Control as=\"select\">\n      <option>true</option>\n      <option>false</option>\n    </Form.Control>\n  </Form.Group>\n  </Form.Row>\n\n  <Form.Row>\n\n  <Form.Group as={Col} controlId=\"formGridExaminationAttachmentFormat\">\n    <Form.Label>Attachment Format</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"ExaminationAttachmentFormat\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridExaminationAttachmentPath\">\n    <Form.Label>Attachment Path</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"ExaminationAttachmentPath\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridExaminationAttachmentFile\">\n    <Form.Label>File</Form.Label>\n    <Form.Control type=\"file\" placeholder=\"File\" onChange={(e) => {console.log(e.target.files[0]);AuthContext._currentValue.file = e.target.files[0];console.log(AuthContext._currentValue.file);}}/>\n  </Form.Group>\n  </Form.Row>\n\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"9\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n\n{props.canConfirm && (\n  <Accordion.Toggle as={Button} variant=\"success\" eventKey=\"9\" className=\"btn\" type=\"submit\">\n  Submit\n  </Accordion.Toggle>\n)}\n\n</Form>\n{\n  // <Form.Group as={Col} controlId=\"formGridExaminationAttachmentName\">\n  //   <Form.Label>ExaminationAttachmentName</Form.Label>\n  //   <Form.Control type=\"text\" placeholder=\"ExaminationAttachmentName\"/>\n  // </Form.Group>\n  // <AuthContext.Consumer>\n// </AuthContext.Consumer>\n}\n</div>\n\n)};\n\nexport default UpdatePatientExaminationForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Accordion from 'react-bootstrap/Accordion'\n// import FormCheck from 'react-bootstrap/FormCheck'\nimport AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst UpdatePatientHistoryForm = (props) => {\n\nconsole.log(\"UpdatePatientHistoryForm.props:  \", {...props});\nconst {...patient} = props.patient;\nconsole.log(\"UpdatePatientHistoryForm.props.patient:  \", {...patient});\n\n\nreturn (\n<div className=\"UpdateFormContainer\">\n<Form onSubmit={props.onConfirm}>\n<Form.Row>\n  <Form.Group as={Col} controlId=\"formGridHistoryType\">\n    <Form.Label>Type</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"HistoryType\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridHistoryDate\">\n    <Form.Label>Date</Form.Label>\n    <Form.Control type=\"date\" placeholder=\"HistoryDate\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridHistoryTitle\">\n    <Form.Label>Title</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"HistoryTitle\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridHistoryDescription\">\n    <Form.Label>Description</Form.Label>\n    <Form.Control as=\"textarea\" rows=\"3\" placeholder=\"HistoryDescription\"/>\n  </Form.Group>\n  </Form.Row>\n\n  <Form.Row>\n\n  <Form.Group as={Col} controlId=\"formGridHistoryAttachmentFormat\">\n    <Form.Label>Attachment Format</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"HistoryAttachmentFormat\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridHistoryAttachmentPath\">\n    <Form.Label>Attachment Path</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"HistoryAttachmentPath\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridHistoryAttachmentFile\">\n    <Form.Label>File</Form.Label>\n    <Form.Control type=\"file\" placeholder=\"File\" onChange={(e) => {console.log(e.target.files[0]);AuthContext._currentValue.file = e.target.files[0];console.log(AuthContext._currentValue.file);}}/>\n  </Form.Group>\n  </Form.Row>\n\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"9\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n\n{props.canConfirm && (\n  <Accordion.Toggle as={Button} variant=\"success\" eventKey=\"9\" className=\"btn\" type=\"submit\">\n  Submit\n  </Accordion.Toggle>\n)}\n\n</Form>\n{\n  // <Form.Group as={Col} controlId=\"formGridHistoryAttachmentName\">\n  //   <Form.Label>HistoryAttachmentName</Form.Label>\n  //   <Form.Control type=\"text\" placeholder=\"HistoryAttachmentName\"/>\n  // </Form.Group>\n  // <AuthContext.Consumer>\n// </AuthContext.Consumer>\n}\n</div>\n\n)};\n\nexport default UpdatePatientHistoryForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Accordion from 'react-bootstrap/Accordion'\n// import FormCheck from 'react-bootstrap/FormCheck'\nimport AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst UpdatePatientAllergiesForm = (props) => {\n\nconsole.log(\"UpdatePatientAllergiesForm.props:  \", {...props});\nconst {...patient} = props.patient;\nconsole.log(\"UpdatePatientAllergiesForm.props.patient:  \", {...patient});\n\n\nreturn (\n<div className=\"UpdateFormContainer\">\n<Form onSubmit={props.onConfirm}>\n<Form.Row>\n  <Form.Group as={Col} controlId=\"formGridAllergiesTitle\">\n    <Form.Label>Title</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"AllergiesTitle\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridAllergiesTypeSelect\">\n    <Form.Label>Type Options</Form.Label>\n    <Form.Control as=\"select\">\n    <option>select</option>\n    <option>food</option>\n    <option>drug</option>\n    </Form.Control>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridAllergiesType\">\n    <Form.Label>Type</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"AllergiesType\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridAllergiesDescription\">\n    <Form.Label>Description</Form.Label>\n    <Form.Control as=\"textarea\" rows=\"3\" placeholder=\"AllergiesDescription\"/>\n  </Form.Group>\n  </Form.Row>\n\n  <Form.Row>\n\n  <Form.Group as={Col} controlId=\"formGridAllergiesAttachmentFormat\">\n    <Form.Label>Attachment Format</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"AllergiesAttachmentFormat\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridAllergiesAttachmentPath\">\n    <Form.Label>Attachment Path</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"AllergiesAttachmentPath\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridAllergiesAttachmentFile\">\n    <Form.Label>File</Form.Label>\n    <Form.Control type=\"file\" placeholder=\"File\" onChange={(e) => {console.log(e.target.files[0]);AuthContext._currentValue.file = e.target.files[0];console.log(AuthContext._currentValue.file);}}/>\n  </Form.Group>\n  </Form.Row>\n\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"9\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n\n{props.canConfirm && (\n  <Accordion.Toggle as={Button} variant=\"success\" eventKey=\"9\" className=\"btn\" type=\"submit\">\n  Submit\n  </Accordion.Toggle>\n)}\n\n</Form>\n{\n  // <Form.Group as={Col} controlId=\"formGridAllergiesAttachmentName\">\n  //   <Form.Label>AllergiesAttachmentName</Form.Label>\n  //   <Form.Control type=\"text\" placeholder=\"AllergiesAttachmentName\"/>\n  // </Form.Group>\n  // <AuthContext.Consumer>\n// </AuthContext.Consumer>\n}\n</div>\n\n)};\n\nexport default UpdatePatientAllergiesForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Accordion from 'react-bootstrap/Accordion'\n// import FormCheck from 'react-bootstrap/FormCheck'\nimport AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst UpdatePatientMedicationForm = (props) => {\n\nconsole.log(\"UpdatePatientMedicationForm.props:  \", {...props});\nconst {...patient} = props.patient;\nconsole.log(\"UpdatePatientMedicationForm.props.patient:  \", {...patient});\n\n\nreturn (\n<div className=\"UpdateFormContainer\">\n<Form onSubmit={props.onConfirm}>\n<Form.Row>\n  <Form.Group as={Col} controlId=\"formGridMedicationTitle\">\n    <Form.Label>Title</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"MedicationTitle\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridMedicationType\">\n    <Form.Label>Type</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"MedicationType\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridMedicationDescription\">\n    <Form.Label>Description</Form.Label>\n    <Form.Control as=\"textarea\" rows=\"3\" placeholder=\"MedicationDescription\"/>\n  </Form.Group>\n  </Form.Row>\n\n  <Form.Row>\n\n  <Form.Group as={Col} controlId=\"formGridMedicationAttachmentFormat\">\n    <Form.Label>Attachment Format</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"MedicationAttachmentFormat\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridMedicationAttachmentPath\">\n    <Form.Label>Attachment Path</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"MedicationAttachmentPath\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridMedicationAttachmentFile\">\n    <Form.Label>File</Form.Label>\n    <Form.Control type=\"file\" placeholder=\"File\" onChange={(e) => {console.log(e.target.files[0]);AuthContext._currentValue.file = e.target.files[0];console.log(AuthContext._currentValue.file);}}/>\n  </Form.Group>\n  </Form.Row>\n\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"9\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n\n{props.canConfirm && (\n  <Accordion.Toggle as={Button} variant=\"success\" eventKey=\"9\" className=\"btn\" type=\"submit\">\n  Submit\n  </Accordion.Toggle>\n)}\n\n</Form>\n{\n  // <Form.Group as={Col} controlId=\"formGridMedicationAttachmentName\">\n  //   <Form.Label>MedicationAttachmentName</Form.Label>\n  //   <Form.Control type=\"text\" placeholder=\"MedicationAttachmentName\"/>\n  // </Form.Group>\n  // <AuthContext.Consumer>\n// </AuthContext.Consumer>\n}\n</div>\n\n)};\n\nexport default UpdatePatientMedicationForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Accordion from 'react-bootstrap/Accordion'\n// import FormCheck from 'react-bootstrap/FormCheck'\nimport AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst UpdatePatientInvestigationForm = (props) => {\n\nconsole.log(\"UpdatePatientInvestigationForm.props:  \", {...props});\nconst {...patient} = props.patient;\nconsole.log(\"UpdatePatientInvestigationForm.props.patient:  \", {...patient});\n\n\nreturn (\n<div className=\"UpdateFormContainer\">\n<Form onSubmit={props.onConfirm}>\n<Form.Row>\n  <Form.Group as={Col} controlId=\"formGridInvestigationDate\">\n    <Form.Label>Date</Form.Label>\n    <Form.Control type=\"date\" placeholder=\"InvestigationDate\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridInvestigationTitle\">\n    <Form.Label>Title</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"InvestigationTitle\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridInvestigationTypeSelect\">\n    <Form.Label>Type Options</Form.Label>\n    <Form.Control as=\"select\">\n    <option>select</option>\n    <option>procedure</option>\n    <option>prescription</option>\n    </Form.Control>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridInvestigationType\">\n    <Form.Label>Type</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"InvestigationType\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridInvestigationDescription\">\n    <Form.Label>Description</Form.Label>\n    <Form.Control as=\"textarea\" rows=\"3\" placeholder=\"InvestigationDescription\"/>\n  </Form.Group>\n  </Form.Row>\n\n  <Form.Row>\n\n  <Form.Group as={Col} controlId=\"formGridInvestigationAttachmentFormat\">\n    <Form.Label>Attachment Format</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"InvestigationAttachmentFormat\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridInvestigationAttachmentPath\">\n    <Form.Label>Attachment Path</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"InvestigationAttachmentPath\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridInvestigationAttachmentFile\">\n    <Form.Label>File</Form.Label>\n    <Form.Control type=\"file\" placeholder=\"File\" onChange={(e) => {console.log(e.target.files[0]);AuthContext._currentValue.file = e.target.files[0];console.log(AuthContext._currentValue.file);}}/>\n  </Form.Group>\n  </Form.Row>\n\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"9\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n\n{props.canConfirm && (\n  <Accordion.Toggle as={Button} variant=\"success\" eventKey=\"9\" className=\"btn\" type=\"submit\">\n  Submit\n  </Accordion.Toggle>\n)}\n\n</Form>\n{\n  // <Form.Group as={Col} controlId=\"formGridInvestigationAttachmentName\">\n  //   <Form.Label>InvestigationAttachmentName</Form.Label>\n  //   <Form.Control type=\"text\" placeholder=\"InvestigationAttachmentName\"/>\n  // </Form.Group>\n  // <AuthContext.Consumer>\n// </AuthContext.Consumer>\n}\n</div>\n\n)};\n\nexport default UpdatePatientInvestigationForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Accordion from 'react-bootstrap/Accordion'\n// import FormCheck from 'react-bootstrap/FormCheck'\nimport AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst UpdatePatientDiagnosisForm = (props) => {\n\nconsole.log(\"UpdatePatientDiagnosisForm.props:  \", {...props});\nconst {...patient} = props.patient;\nconsole.log(\"UpdatePatientDiagnosisForm.props.patient:  \", {...patient});\n\n\nreturn (\n<div className=\"UpdateFormContainer\">\n<Form onSubmit={props.onConfirm}>\n<Form.Row>\n  <Form.Group as={Col} controlId=\"formGridDiagnosisDate\">\n    <Form.Label>Date</Form.Label>\n    <Form.Control type=\"date\" placeholder=\"DiagnosisDate\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridDiagnosisTitle\">\n    <Form.Label>Title</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"DiagnosisTitle\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridDiagnosisType\">\n    <Form.Label>Type</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"DiagnosisType\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridDiagnosisDescription\">\n    <Form.Label>Description</Form.Label>\n    <Form.Control as=\"textarea\" rows=\"3\" placeholder=\"DiagnosisDescription\"/>\n  </Form.Group>\n  </Form.Row>\n\n  <Form.Row>\n\n  <Form.Group as={Col} controlId=\"formGridDiagnosisAttachmentFormat\">\n    <Form.Label>Attachment Format</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"DiagnosisAttachmentFormat\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridDiagnosisAttachmentPath\">\n    <Form.Label>Attachment Path</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"DiagnosisAttachmentPath\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridDiagnosisAttachmentFile\">\n    <Form.Label>File</Form.Label>\n    <Form.Control type=\"file\" placeholder=\"File\" onChange={(e) => {console.log(e.target.files[0]);AuthContext._currentValue.file = e.target.files[0];console.log(AuthContext._currentValue.file);}}/>\n  </Form.Group>\n  </Form.Row>\n\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"9\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n\n{props.canConfirm && (\n  <Accordion.Toggle as={Button} variant=\"success\" eventKey=\"9\" className=\"btn\" type=\"submit\">\n  Submit\n  </Accordion.Toggle>\n)}\n\n</Form>\n{\n  // <Form.Group as={Col} controlId=\"formGridDiagnosisAttachmentName\">\n  //   <Form.Label>DiagnosisAttachmentName</Form.Label>\n  //   <Form.Control type=\"text\" placeholder=\"DiagnosisAttachmentName\"/>\n  // </Form.Group>\n  // <AuthContext.Consumer>\n// </AuthContext.Consumer>\n}\n</div>\n\n)};\n\nexport default UpdatePatientDiagnosisForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Accordion from 'react-bootstrap/Accordion'\n// import FormCheck from 'react-bootstrap/FormCheck'\nimport AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst UpdatePatientTreatmentForm = (props) => {\n\nconsole.log(\"UpdatePatientTreatmentForm.props:  \", {...props});\nconst {...patient} = props.patient;\nconsole.log(\"UpdatePatientTreatmentForm.props.patient:  \", {...patient});\n\n\nreturn (\n<div className=\"UpdateFormContainer\">\n<Form onSubmit={props.onConfirm}>\n<Form.Row>\n  <Form.Group as={Col} controlId=\"formGridTreatmentDate\">\n    <Form.Label>Date</Form.Label>\n    <Form.Control type=\"date\" placeholder=\"TreatmentDate\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridTreatmentTitle\">\n    <Form.Label>Title</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"TreatmentTitle\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridTreatmentType\">\n    <Form.Label>Type</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"TreatmentType\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridTreatmentDescription\">\n    <Form.Label>Description</Form.Label>\n    <Form.Control as=\"textarea\" rows=\"3\" placeholder=\"TreatmentDescription\"/>\n  </Form.Group>\n  </Form.Row>\n\n  <Form.Row>\n  <Form.Group as={Col} controlId=\"formGridTreatmentDose\">\n    <Form.Label>Dose</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"TreatmentDose\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridTreatmentFrequency\">\n    <Form.Label>Frequency</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"TreatmentFrequency\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridTreatmentTypeSelect\">\n    <Form.Label>Type Options</Form.Label>\n    <Form.Control as=\"select\">\n    <option>select</option>\n    <option>procedure</option>\n    <option>prescription</option>\n    </Form.Control>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridTreatmentType\">\n    <Form.Label>Type</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"TreatmentType\"/>\n  </Form.Group>\n  </Form.Row>\n\n  <Form.Row>\n\n  <Form.Group as={Col} controlId=\"formGridTreatmentAttachmentFormat\">\n    <Form.Label>Attachment Format</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"TreatmentAttachmentFormat\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridTreatmentAttachmentPath\">\n    <Form.Label>Attachment Path</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"TreatmentAttachmentPath\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridTreatmentAttachmentFile\">\n    <Form.Label>File</Form.Label>\n    <Form.Control type=\"file\" placeholder=\"File\" onChange={(e) => {console.log(e.target.files[0]);AuthContext._currentValue.file = e.target.files[0];console.log(AuthContext._currentValue.file);}}/>\n  </Form.Group>\n  </Form.Row>\n\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"9\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n\n{props.canConfirm && (\n  <Accordion.Toggle as={Button} variant=\"success\" eventKey=\"9\" className=\"btn\" type=\"submit\">\n  Submit\n  </Accordion.Toggle>\n)}\n\n</Form>\n{\n  // <Form.Group as={Col} controlId=\"formGridTreatmentAttachmentName\">\n  //   <Form.Label>TreatmentAttachmentName</Form.Label>\n  //   <Form.Control type=\"text\" placeholder=\"DiagnosisAttachmentName\"/>\n  // </Form.Group>\n  // <AuthContext.Consumer>\n// </AuthContext.Consumer>\n}\n</div>\n\n)};\n\nexport default UpdatePatientTreatmentForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Accordion from 'react-bootstrap/Accordion'\n// import FormCheck from 'react-bootstrap/FormCheck'\nimport AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst UpdatePatientBillingForm = (props) => {\n\nconsole.log(\"UpdatePatientBillingForm.props:  \", {...props});\nconst {...patient} = props.patient;\nconsole.log(\"UpdatePatientBillingForm.props.patient:  \", {...patient});\n\n\nreturn (\n<div className=\"UpdateFormContainer\">\n<Form onSubmit={props.onConfirm}>\n<Form.Row>\n  <Form.Group as={Col} controlId=\"formGridBillingDate\">\n    <Form.Label>Date</Form.Label>\n    <Form.Control type=\"date\" placeholder=\"BillingDate\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridBillingTitle\">\n    <Form.Label>Title</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"BillingTitle\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridBillingType\">\n    <Form.Label>Type</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"BillingType\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridBillingDescription\">\n    <Form.Label>Description</Form.Label>\n    <Form.Control as=\"textarea\" rows=\"3\" placeholder=\"BillingDescription\"/>\n  </Form.Group>\n  </Form.Row>\n\n  <Form.Row>\n  <Form.Group as={Col} controlId=\"formGridBillingAmount\">\n    <Form.Label>Amount</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"BillingAmount\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridBillingPaid\">\n        <Form.Label>Paid ?</Form.Label>\n        <Form.Control as=\"select\">\n          <option>true</option>\n          <option>false</option>\n        </Form.Control>\n      </Form.Group>\n      <Form.Group as={Col} controlId=\"formGridBillingNotes\">\n        <Form.Label>Notes</Form.Label>\n        <Form.Control as=\"textarea\" rows=\"3\" placeholder=\"BillingNotes\"/>\n      </Form.Group>\n\n  </Form.Row>\n\n  <Form.Row>\n\n  <Form.Group as={Col} controlId=\"formGridBillingAttachmentFormat\">\n    <Form.Label>Attachment Format</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"BillingAttachmentFormat\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridBillingAttachmentPath\">\n    <Form.Label>Attachment Path</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"BillingAttachmentPath\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridBillingAttachmentFile\">\n    <Form.Label>File</Form.Label>\n    <Form.Control type=\"file\" placeholder=\"File\" onChange={(e) => {console.log(e.target.files[0]);AuthContext._currentValue.file = e.target.files[0];console.log(AuthContext._currentValue.file);}}/>\n  </Form.Group>\n  </Form.Row>\n\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"9\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n\n{props.canConfirm && (\n  <Accordion.Toggle as={Button} variant=\"success\" eventKey=\"9\" className=\"btn\" type=\"submit\">\n  Submit\n  </Accordion.Toggle>\n)}\n\n</Form>\n{\n  // <Form.Group as={Col} controlId=\"formGridBillingAttachmentName\">\n  //   <Form.Label>BillingAttachmentName</Form.Label>\n  //   <Form.Control type=\"text\" placeholder=\"BillingAttachmentName\"/>\n  // </Form.Group>\n  // <AuthContext.Consumer>\n// </AuthContext.Consumer>\n}\n</div>\n\n)};\n\nexport default UpdatePatientBillingForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Accordion from 'react-bootstrap/Accordion'\n// import FormCheck from 'react-bootstrap/FormCheck'\nimport AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst UpdatePatientAttachmentForm = (props) => {\n\nconsole.log(\"UpdatePatientAttachmentForm.props:  \", {...props});\nconst {...patient} = props.patient;\nconsole.log(\"UpdatePatientAttachmentForm.props.patient:  \", {...patient});\n\n\nreturn (\n<div className=\"UpdateFormContainer\">\n<Form onSubmit={props.onConfirm}>\n\n  <Form.Row>\n\n  <Form.Group as={Col} controlId=\"formGridPatientAttachmentFormat\">\n    <Form.Label>Format</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"PatientAttachmentFormat\"/>\n  </Form.Group>\n  </Form.Row>\n\n  <Form.Row>\n  <Form.Group as={Col} controlId=\"formGridPatientAttachmentPath\">\n    <Form.Label>Path</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"PatientAttachmentPath\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridAttachmentFile\">\n    <Form.Label>File</Form.Label>\n    <Form.Control type=\"file\" placeholder=\"File\" onChange={(e) => {console.log(e.target.files[0]);AuthContext._currentValue.file = e.target.files[0];console.log(AuthContext._currentValue.file);}}/>\n  </Form.Group>\n  </Form.Row>\n\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"9\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n\n{props.canConfirm && (\n  <Button variant=\"success\" type=\"submit\">Add</Button>\n)}\n\n</Form>\n{// <Form.Group as={Col} controlId=\"formGridPatientAttachmentName\">\n//   <Form.Label>PatientAttachmentName</Form.Label>\n//   <Form.Control type=\"text\" placeholder=\"PatientAttachmentName\"/>\n// </Form.Group>\n  // <AuthContext.Consumer>\n// </AuthContext.Consumer>\n}\n</div>\n\n)};\n\nexport default UpdatePatientAttachmentForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Accordion from 'react-bootstrap/Accordion'\n// import FormCheck from 'react-bootstrap/FormCheck'\n// import AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst UpdatePatientNoteForm = (props) => {\n\nconsole.log(\"UpdatePatientNoteForm.props:  \", {...props});\nconst {...patient} = props.patient;\nconsole.log(\"UpdatePatientNoteForm.props.patient:  \", {...patient});\n\n\nreturn (\n<div className=\"UpdateFormContainer\">\n<Form onSubmit={props.onConfirm}>\n<Form.Row>\n  <Form.Group as={Col} controlId=\"formGridNote\">\n    <Form.Label>Note</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"Note\"/>\n  </Form.Group>\n  </Form.Row>\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"9\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n\n{props.canConfirm && (\n  <Accordion.Toggle as={Button} variant=\"success\" eventKey=\"9\" className=\"btn\" type=\"submit\">\n  Submit\n  </Accordion.Toggle>\n)}\n\n</Form>\n{\n  // <AuthContext.Consumer>\n// </AuthContext.Consumer>\n}\n</div>\n\n)};\n\nexport default UpdatePatientNoteForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Accordion from 'react-bootstrap/Accordion'\n// import FormCheck from 'react-bootstrap/FormCheck'\n// import AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst UpdatePatientTagForm = (props) => {\n\nconsole.log(\"UpdatePatientTagForm.props:  \", {...props});\nconst {...patient} = props.patient;\nconsole.log(\"UpdatePatientTagForm.props.patient:  \", {...patient});\n\n\nreturn (\n<div className=\"UpdateFormContainer\">\n<Form onSubmit={props.onConfirm}>\n<Form.Row>\n  <Form.Group as={Col} controlId=\"formGridTag\">\n    <Form.Label>Tag</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"Tag\"/>\n  </Form.Group>\n  </Form.Row>\n\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"9\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n\n{props.canConfirm && (\n  <Accordion.Toggle as={Button} variant=\"success\" eventKey=\"9\" className=\"btn\" type=\"submit\">\n  Submit\n  </Accordion.Toggle>\n)}\n\n</Form>\n{\n  // <AuthContext.Consumer>\n// </AuthContext.Consumer>\n}\n</div>\n\n)};\n\nexport default UpdatePatientTagForm;\n","import React, { Component } from 'react';\nimport S3 from 'react-aws-s3';\nimport S3FileUpload from 'react-s3';\n\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Button from 'react-bootstrap/Button';\nimport Accordion from 'react-bootstrap/Accordion';\nimport SidebarPage from './Sidebar';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\nimport TabContainer from 'react-bootstrap/TabContainer';\nimport TabContent from 'react-bootstrap/TabContent';\nimport TabPane from 'react-bootstrap/TabPane';\nimport Nav from 'react-bootstrap/Nav';\nimport Card from 'react-bootstrap/Card';\n\nimport PatientList from '../components/Patients/PatientList/PatientList';\nimport PatientDetail from '../components/Patients/PatientDetail';\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\nimport SearchPatientList from '../components/Patients/PatientList/SearchPatientList';\nimport SearchPatientForm from '../components/Forms/SearchPatientForm';\nimport SearchPatientIdForm from '../components/Forms/SearchPatientIdForm';\nimport SearchPatientNameForm from '../components/Forms/SearchPatientNameForm';\nimport SearchPatientVisitForm from '../components/Forms/SearchPatientVisitForm';\n\nimport AlertBox from '../components/AlertBox';\nimport AttachmentViewer from '../components/AttachmentViewer';\nimport PdfCreator from '../components/PdfCreator';\n\nimport CreatePatientForm from '../components/Forms/CreatePatientForm';\nimport UpdatePatientForm from '../components/Forms/UpdatePatientForm';\nimport UpdatePatientFieldForm from '../components/Forms/UpdatePatientFieldForm';\nimport UpdatePatientConsultantForm from '../components/Forms/UpdatePatientConsultantForm';\nimport UpdatePatientInsuranceForm from '../components/Forms/UpdatePatientInsuranceForm';\nimport UpdatePatientNextOfKinForm from '../components/Forms/UpdatePatientNextOfKinForm';\nimport UpdatePatientComplaintForm from '../components/Forms/UpdatePatientComplaintForm';\nimport UpdatePatientSurveyForm from '../components/Forms/UpdatePatientSurveyForm';\nimport UpdatePatientVitalsForm from '../components/Forms/UpdatePatientVitalsForm';\nimport UpdatePatientExaminationForm from '../components/Forms/UpdatePatientExaminationForm';\nimport UpdatePatientHistoryForm from '../components/Forms/UpdatePatientHistoryForm';\nimport UpdatePatientAllergiesForm from '../components/Forms/UpdatePatientAllergiesForm';\nimport UpdatePatientMedicationForm from '../components/Forms/UpdatePatientMedicationForm';\nimport UpdatePatientInvestigationForm from '../components/Forms/UpdatePatientInvestigationForm';\nimport UpdatePatientDiagnosisForm from '../components/Forms/UpdatePatientDiagnosisForm';\nimport UpdatePatientTreatmentForm from '../components/Forms/UpdatePatientTreatmentForm';\nimport UpdatePatientBillingForm from '../components/Forms/UpdatePatientBillingForm';\nimport UpdatePatientAttachmentForm from '../components/Forms/UpdatePatientAttachmentForm';\nimport UpdatePatientNoteForm from '../components/Forms/UpdatePatientNoteForm';\nimport UpdatePatientTagForm from '../components/Forms/UpdatePatientTagForm';\n\nimport './Users.css';\n\nclass PatientsPage extends Component {\n  state = {\n    creating: false,\n    updating: false,\n    searching: false,\n    updatingArray: false,\n    deleting: false,\n    patients: [],\n    searchPatients: [],\n    isLoading: false,\n    selectedPatient: null,\n    patientUpdateField: null,\n    patientSearchField: null,\n    patientSearchQuery: null,\n    canDelete: null,\n    visit: null,\n    userAlert: null,\n    showAttachment: false,\n    showThisAttachmentFile: null,\n    showThisAttachmentType: null,\n    createPdf: false,\n    pdfData: null,\n  };\n  isActive = true;\n\n  static contextType = AuthContext;\n\n  constructor(props) {\n    super(props);\n    this.nameElRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.fetchPatients();\n    if (this.context.user.name === 'admin579'){\n      this.setState({canDelete: true})\n    }\n  }\n\n\n  startCreatePatientHandler = () => {\n    this.setState({ creating: true });\n    console.log(\"CreatePatientForm...\");\n  };\n  startUpdatePatientHandler = () => {\n    this.setState({ updating: true, updatingArray: true });\n    console.log(\"UpdatePatientForm...\");\n  };\n  startSearchPatientHandler = () => {\n    this.setState({ searching: true });\n    console.log(\"SearchPatientForm...\");\n  };\n\n  modalConfirmHandler = (event) => {\n\n    console.log(\"CreatePatientFormData:  \", event.target.formGridName.value);\n\n    this.setState({ creating: false });\n    const userId = this.context.userId;\n\n    let title = event.target.formGridTitle.value;\n    let name = event.target.formGridName.value;\n    let dob = event.target.formGridDob.value;\n    let age = event.target.formGridAge.value;\n    let gender = event.target.formGridGender.value;\n    let addressNumber = event.target.formGridAddressNumber.value;\n    let addressStreet = event.target.formGridAddressStreet.value;\n    let addressTown = event.target.formGridAddressTown.value;\n    let addressParish = event.target.formGridAddressParish.value;\n    let addressPostOffice = event.target.formGridAddressPostOffice.value;\n    let contactPhone = event.target.formGridContactPhone.value;\n    let contactEmail = event.target.formGridContactEmail.value;\n    let registrationDate = event.target.formGridRegistrationDate.value;\n    let referralDate = event.target.formGridReferralDate.value;\n    let expirationDate = event.target.formGridExpirationDate.value;\n    let attendingPhysicianName = event.target.formGridAttendingPhysicianName.value;\n    let attendingPhysicianEmail = event.target.formGridAttendingPhysicianEmail.value;\n    let attendingPhysicianPhone = event.target.formGridAttendingPhysicianPhone.value;\n    let referringDoctorName = event.target.formGridReferringDoctorName.value;\n    let referringDoctorEmail = event.target.formGridReferringDoctorEmail.value;\n    let referringDoctorPhone = event.target.formGridReferringDoctorPhone.value;\n    let occupationRole = event.target.formGridOccupationRole.value;\n    let occupationEmployer = event.target.formGridOccupationEmployer.value;\n    let occupationEmployerContactPhone = event.target.formGridOccupationEmployerContactPhone.value;\n    let occupationEmployerContactEmail = event.target.formGridOccupationEmployerContactEmail.value;\n\n\n    if (\n      name.trim().length === 0 ||\n      // title.trim().length === 0 ||\n      // name.trim().length === 0 ||\n      // dob.trim().length === 0 ||\n      // age.trim().length === 0 ||\n      // gender.trim().length === 0 ||\n      // addressNumber.trim().length === 0 ||\n      // addressStreet.trim().length === 0 ||\n      // addressTown.trim().length === 0 ||\n      // addressParish.trim().length === 0 ||\n      // addressPostOffice.trim().length === 0 ||\n      contactPhone.trim().length === 0\n      // contactEmail.trim().length === 0 ||\n      // registrationDate.trim().length === 0 ||\n      // referralDate.trim().length === 0 ||\n      // expirationDate.trim().length === 0 ||\n      // attendingPhysicianName.trim().length === 0 ||\n      // attendingPhysicianEmail.trim().length === 0 ||\n      // attendingPhysicianPhone.trim().length === 0 ||\n      // referringDoctorName.trim().length === 0 ||\n      // referringDoctorEmail.trim().length === 0 ||\n      // referringDoctorPhone.trim().length === 0 ||\n      // occupationRole.trim().length === 0 ||\n      // occupationEmployer.trim().length === 0 ||\n      // occupationEmployerContactPhone.trim().length === 0 ||\n      // occupationEmployerContactEmail.trim().length === 0\n\n    ) {\n      console.log(\"patient must have at least a Name and Contact Number!!!...Please try again...\");\n      this.setState({userAlert: \"patient requires Name and Contact Number!!!... Try again...\"});\n      return;\n    }\n\n    const patient = { title, name, dob, age, gender, addressNumber, addressStreet, addressTown, addressParish, addressPostOffice, contactPhone, contactEmail, registrationDate, referralDate, expirationDate, attendingPhysicianName, attendingPhysicianEmail, attendingPhysicianPhone, referringDoctorName, referringDoctorEmail, referringDoctorPhone, occupationRole, occupationEmployer, occupationEmployerContactPhone, occupationEmployerContactEmail };\n    console.log(`\n      creating patient...\n      title: ${title},\n      name: ${name},\n      dob: ${dob},\n      age: ${age},\n      gender: ${gender},\n      addressNumber: ${addressNumber},\n      addressStreet: ${addressStreet},\n      addressTown: ${addressTown},\n      addressParish: ${addressParish},\n      addressPostOffice: ${addressPostOffice},\n      contactPhone: ${contactPhone},\n      contactEmail: ${contactEmail},\n      registrationDate: ${registrationDate},\n      referralDate: ${referralDate},\n      expirationDate: ${expirationDate},\n      attendingPhysicianName: ${attendingPhysicianName},\n      attendingPhysicianEmail: ${attendingPhysicianEmail},\n      attendingPhysicianPhone: ${attendingPhysicianPhone},\n      referringDoctorName: ${referringDoctorName},\n      referringDoctorEmail: ${referringDoctorEmail},\n      referringDoctorPhone: ${referringDoctorPhone},\n      occupationRole: ${occupationRole},\n      occupationEmployer: ${occupationEmployer},\n      occupationEmployerContactPhone: ${occupationEmployerContactPhone},\n      occupationEmployerContactEmail: ${occupationEmployerContactEmail},\n      `);\n\n    const requestBody = {\n      query: `\n          mutation {createPatient(userId:\\\"${userId}\\\", patientInput:{title:\\\"${title}\\\",name:\\\"${name}\\\",dob:\\\"${dob}\\\",age:${age},gender:\\\"${gender}\\\",addressNumber:${addressNumber},addressStreet:\\\"${addressStreet}\\\",addressTown:\\\"${addressTown}\\\",addressParish:\\\"${addressParish}\\\",addressPostOffice:\\\"${addressPostOffice}\\\",contactPhone:\\\"${contactPhone}\\\",contactEmail:\\\"${contactEmail}\\\",registrationDate:\\\"${registrationDate}\\\",referralDate:\\\"${referralDate}\\\",expirationDate:\\\"${expirationDate}\\\",referringDoctorName:\\\"${referringDoctorName}\\\",referringDoctorEmail:\\\"${referringDoctorEmail}\\\",referringDoctorPhone:\\\"${referringDoctorPhone}\\\",attendingPhysicianName:\\\"${attendingPhysicianName}\\\",attendingPhysicianEmail:\\\"${attendingPhysicianEmail}\\\",attendingPhysicianPhone:\\\"${attendingPhysicianPhone}\\\",occupationRole:\\\"${occupationRole}\\\",occupationEmployer:\\\"${occupationEmployer}\\\",occupationEmployerContactPhone:\\\"${occupationEmployerContactPhone}\\\",occupationEmployerContactEmail:\\\"${occupationEmployerContactEmail}\\\"})\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n        `};\n\n    const token = this.context.token;\n\n    // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(`\n          response data:\n          ${JSON.stringify(resData.data.createPatient)}\n          `);\n          const responseAlert = JSON.stringify(resData.data).slice(2,15);\n          this.setState({userAlert: responseAlert});\n\n        const newPatient = resData.data.createPatient;\n        this.setState(prevState => {\n          const updatedPatients = [...prevState.patients];\n          updatedPatients.push(newPatient);\n\n          return { patients: updatedPatients };\n        });\n\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n  };\n\n  modalCancelHandler = () => {\n    this.setState({ creating: false, updating: false, selectedPatient: null });\n  };\n\n\n  modalConfirmUpdateHandler = (event) => {\n\n    // if(this.context.user.role !== 'admin') {\n    //   console.log(\"Not the Admin! No edit permission!!\");\n    // }\n\n    const userId = this.context.userId;\n    const selectedPatientId = this.context.selectedPatient._id;\n\n    console.log(\"UpdatePatientFormData:  \", event.target.formGridName.value);\n\n\n    this.setState({ updating: false });\n\n    let title = event.target.formGridTitle.value;\n    let name = event.target.formGridName.value;\n    let dob = event.target.formGridDob.value;\n    let age = event.target.formGridAge.value;\n    let gender = event.target.formGridGender.value;\n    let addressNumber = event.target.formGridAddressNumber.value;\n    let addressStreet = event.target.formGridAddressStreet.value;\n    let addressTown = event.target.formGridAddressTown.value;\n    let addressParish = event.target.formGridAddressParish.value;\n    let addressPostOffice = event.target.formGridAddressPostOffice.value;\n    let contactPhone = event.target.formGridContactPhone.value;\n    let contactEmail = event.target.formGridContactEmail.value;\n    let registrationDate = event.target.formGridRegistrationDate.value;\n    let referralDate = event.target.formGridReferralDate.value;\n    let expirationDate = event.target.formGridExpirationDate.value;\n    let attendingPhysicianName = event.target.formGridAttendingPhysicianName.value;\n    let attendingPhysicianEmail = event.target.formGridAttendingPhysicianEmail.value;\n    let attendingPhysicianPhone = event.target.formGridAttendingPhysicianPhone.value;\n    let referringDoctorName = event.target.formGridReferringDoctorName.value;\n    let referringDoctorEmail = event.target.formGridReferringDoctorEmail.value;\n    let referringDoctorPhone = event.target.formGridReferringDoctorPhone.value;\n    let occupationRole = event.target.formGridOccupationRole.value;\n    let occupationEmployer = event.target.formGridOccupationEmployer.value;\n    let occupationEmployerContactPhone = event.target.formGridOccupationEmployerContactPhone.value;\n    let occupationEmployerContactEmail = event.target.formGridOccupationEmployerContactEmail.value;\n\n    if (title.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      title = this.context.selectedPatient.title;\n    }\n    if (name.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      name = this.context.selectedPatient.name;\n    }\n    if (dob.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      dob = this.context.selectedPatient.dob;\n    }\n    if (gender.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      gender = this.context.selectedPatient.gender;\n    }\n    if (age.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      age = this.context.selectedPatient.age;\n    }\n    if (addressNumber.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      addressNumber = this.context.selectedPatient.address.number;\n    }\n    if (addressStreet.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      addressStreet = this.context.selectedPatient.address.street;\n    }\n    if (addressTown.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      addressTown = this.context.selectedPatient.address.town;\n    }\n    if (addressParish.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      addressParish = this.context.selectedPatient.address.parish;\n    }\n    if (addressPostOffice.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      addressPostOffice = this.context.selectedPatient.address.postOffice;\n    }\n    if (contactPhone.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      contactPhone = this.context.selectedPatient.contact.phone;\n    }\n    if (contactEmail.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      contactEmail = this.context.selectedPatient.contact.email;\n    }\n    if (registrationDate.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      registrationDate = this.context.selectedPatient.registrationDate;\n    }\n    if (attendingPhysicianName.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      attendingPhysicianName = this.context.selectedPatient.attendingPhysician.name;\n    }\n    if (attendingPhysicianEmail.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      attendingPhysicianEmail = this.context.selectedPatient.attendingPhysician.email;\n    }\n    if (attendingPhysicianPhone.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      attendingPhysicianPhone = this.context.selectedPatient.attendingPhysician.phone;\n    }\n    if (referringDoctorName.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      referringDoctorName = this.context.selectedPatient.referringDoctor.name;\n    }\n    if (referringDoctorEmail.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      referringDoctorEmail = this.context.selectedPatient.referringDoctor.email;\n    }\n    if (referringDoctorPhone.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      referringDoctorPhone = this.context.selectedPatient.referringDoctor.phone;\n    }\n    if (occupationRole.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      occupationRole = this.context.selectedPatient.occupation.role;\n    }\n    if (occupationEmployer.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      occupationEmployer = this.context.selectedPatient.occupation.employer;\n    }\n    if (occupationEmployerContactEmail.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      occupationEmployerContactEmail = this.context.selectedPatient.occupation.contact.email;\n    }\n    if (occupationEmployerContactPhone.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      occupationEmployerContactPhone = this.context.selectedPatient.occupation.contact.phone;\n    }\n\n    const patient = { title, name, dob, age, gender, addressNumber, addressStreet, addressTown, addressParish, addressPostOffice, contactPhone, contactEmail, registrationDate, referralDate, expirationDate, attendingPhysicianName, attendingPhysicianEmail, attendingPhysicianPhone, referringDoctorName, referringDoctorEmail, referringDoctorPhone, occupationRole, occupationEmployer, occupationEmployerContactPhone, occupationEmployerContactEmail };\n    console.log(`\n      updating patient...\n      title: ${title},\n      name: ${name},\n      dob: ${dob},\n      age: ${age},\n      gender: ${gender},\n      addressNumber: ${addressNumber},\n      addressStreet: ${addressStreet},\n      addressTown: ${addressTown},\n      addressParish: ${addressParish},\n      addressPostOffice: ${addressPostOffice},\n      contactPhone: ${contactPhone},\n      contactEmail: ${contactEmail},\n      registrationDate: ${registrationDate},\n      referralDate: ${referralDate},\n      expirationDate: ${expirationDate},\n      attendingPhysicianName: ${attendingPhysicianName},\n      attendingPhysicianEmail: ${attendingPhysicianEmail},\n      attendingPhysicianPhone: ${attendingPhysicianPhone},\n      referringDoctorName: ${referringDoctorName},\n      referringDoctorEmail: ${referringDoctorEmail},\n      referringDoctorPhone: ${referringDoctorPhone},\n      occupationRole: ${occupationRole},\n      occupationEmployer: ${occupationEmployer},\n      occupationEmployerContactPhone: ${occupationEmployerContactPhone},\n      occupationEmployerContactEmail: ${occupationEmployerContactEmail},\n      `);\n      this.setState({userAlert: \"updating patient...\"});\n\n    const requestBody = {\n      query: `\n          mutation {updatePatient(userId:\"${userId}\",patientId:\"${selectedPatientId}\", patientInput:{title:\"${title}\",name:\"${name}\",dob:\"${dob}\",age:${age},gender:\"${gender}\",addressNumber:${addressNumber},addressStreet:\"${addressStreet}\",addressTown:\"${addressTown}\",addressParish:\"${addressParish}\",addressPostOffice:\"${addressPostOffice}\",contactPhone:\"${contactPhone}\",contactEmail:\"${contactEmail}\",registrationDate:\"${registrationDate}\",referralDate:\"${referralDate}\",expirationDate:\"${expirationDate}\",referringDoctorName:\"${referringDoctorName}\",referringDoctorEmail:\"${referringDoctorEmail}\",referringDoctorPhone:\"${referringDoctorPhone}\",attendingPhysicianName:\"${attendingPhysicianName}\",attendingPhysicianEmail:\"${attendingPhysicianEmail}\",attendingPhysicianPhone:\"${attendingPhysicianPhone}\",occupationRole:\"${occupationRole}\",occupationEmployer:\"${occupationEmployer}\",occupationEmployerContactPhone:\"${occupationEmployerContactPhone}\",occupationEmployerContactEmail:\"${occupationEmployerContactPhone}\"})\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n        `};\n\n    const token = this.context.token;\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n\n        const updatedPatientId = resData.data.updatePatient._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatient);\n\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatient})\n        this.fetchPatients();\n\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n  };\n\n\n  modalConfirmUpdateFieldHandler = (event) => {\n\n    const token = this.context.token;\n    const userId = this.context.userId;\n    let selectedPatientId = this.context.selectedPatient._id;\n\n    // if( this.context.user.role !== 'admin') {\n    //   console.log(\"Not the creator or Admin! No edit permission!!\");\n    //   selectedPatientId = null;\n    // }\n\n      console.log(\"UpdatePatientFieldFormData:  \", event.target.formGridField.value);\n      this.setState({ updating: false });\n\n      let field = null;\n      let query = event.target.formGridQuery.value;\n      if (event.target.formGridFieldSelect.value === \"select\") {\n        field = event.target.formGridField.value;\n      } else {\n        field = event.target.formGridFieldSelect.value;\n      }\n\n      const requestBody = {\n        query:`\n          mutation {updatePatientField(userId:\\\"${userId}\\\",patientId:\\\"${selectedPatientId}\\\",field:\\\"${field}\\\",query:\\\"${query}\\\")\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n        `};\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData.data.updatePatientField));\n\n          const updatedPatientId = resData.data.updatePatientField._id;\n          const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n          const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n          const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n          console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n          this.state.patients.push(resData.data.updatePatientField);\n          this.context.patients = this.state.patients;\n          const responseAlert = JSON.stringify(resData.data).slice(2,25);\n          this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientField})\n          this.fetchPatients();\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({userAlert: err});\n        });\n\n  }\n\n\nupdatePatientConsultantHandler = (event) => {\n\n  let token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n  const patientConsultantReference = this.context.selectedUser._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n  if (patientConsultantReference === undefined) {\n    console.log(`\n      select a Staff member before adding a Patient Consultant!!\n      `);\n      this.setState({userAlert: \"select a Staff member before adding a Patient Consultant!!...\"});\n      token = null;\n  }\n\n  console.log(\"UpdatePatientConsultantFormData:  \", event.target.formGridConsultantDate.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let consultantDate = event.target.formGridConsultantDate.value;\n\n  const patientConsultant = { consultantDate, patientConsultantReference };\n  console.log(`\n    adding patient consultant item...\n    userId: ${userId},\n    selectedPatientId: ${selectedPatientId},\n    consultantDate: ${consultantDate},\n    consultantReference: ${patientConsultantReference},\n    `);\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientConsultant(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{consultantDate:\" ${consultantDate}\",consultantReference: \"${patientConsultantReference}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    };\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData.data));\n\n          const updatedPatientId = resData.data.updatePatientConsultant._id;\n          const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n          const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n          const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n          console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n          this.state.patients.push(resData.data.updatePatientConsultant);\n          this.context.patients = this.state.patients;\n          const responseAlert = JSON.stringify(resData.data).slice(2,25);\n          this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientConsultant})\n          this.fetchPatients();\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({userAlert: err});\n        });\n\n}\nupdatePatientInsuranceHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientInsuranceFormData:  \", event.target.formGridInsuranceCompany.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let insuranceCompany = event.target.formGridInsuranceCompany.value;\n  let insuranceNumber = event.target.formGridInsuranceNumber.value;\n  let insuranceExpiry = event.target.formGridInsuranceExpiry.value;\n  let insuranceDescription = event.target.formGridInsuranceDescription.value;\n  let insuranceSubscriberCompany = event.target.formGridInsuranceSubscriberCompany.value;\n  let insuranceSubscriberDescription = event.target.formGridInsuranceSubscriberDescription.value;\n\n  const patientInsurance = { insuranceCompany, insuranceNumber, insuranceExpiry, insuranceDescription, insuranceSubscriberCompany, insuranceSubscriberDescription };\n  console.log(`\n    adding patient insurance item...\n    userId: ${userId},\n    selectedPatientId: ${selectedPatientId},\n    insuranceCompany: ${insuranceCompany},\n    insuranceNumber: ${insuranceNumber},\n    insuranceExpiry: ${insuranceExpiry},\n    insuranceDescription: ${insuranceDescription},\n    insuranceSubscriberCompany: ${insuranceSubscriberCompany},\n    insuranceSubscriberDescription: ${insuranceSubscriberDescription},\n    `);\n    this.setState({userAlert: \"adding patient insurance item...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientInsurance(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{insuranceCompany:\"${insuranceCompany}\",insuranceNumber:\"${insuranceNumber}\",insuranceDescription:\"${insuranceDescription}\",insuranceExpiry:\"${insuranceExpiry}\",insuranceSubscriberCompany:\"${insuranceSubscriberCompany}\",insuranceSubscriberDescription:\"${insuranceSubscriberDescription}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    };\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData.data));\n\n          const updatedPatientId = resData.data.updatePatientInsurance._id;\n          const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n          const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n          const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n          console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n          this.state.patients.push(resData.data.updatePatientInsurance);\n          this.context.patients = this.state.patients;\n          const responseAlert = JSON.stringify(resData.data).slice(2,25);\n          this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientInsurance})\n          this.fetchPatients();\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({userAlert: err});\n        });\n\n}\n\nupdatePatientNextOfKinHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientNextOfKinFormData:  \", event.target.formGridNextOfKinName.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let nextOfKinName = event.target.formGridNextOfKinName.value;\n  let nextOfKinPhone = event.target.formGridNextOfKinPhone.value;\n  let nextOfKinEmail = event.target.formGridNextOfKinEmail.value;\n\n  const patientNextOfKin = { nextOfKinName, nextOfKinPhone, nextOfKinEmail };\n  console.log(`\n    adding patient nextOfKin item...\n    userId: ${userId},\n    selectedPatientId: ${selectedPatientId},\n    nextOfKinName: ${nextOfKinName},\n    nextOfKinPhone: ${nextOfKinPhone},\n    nextOfKinEmail: ${nextOfKinEmail},\n    `);\n    this.setState({userAlert: \"adding patient nextOfKin item...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientNextOfKin(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{nextOfKinName:\"${nextOfKinName}\",nextOfKinEmail:\"${nextOfKinEmail}\",nextOfKinPhone:\"${nextOfKinPhone}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    };\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData.data));\n\n          const updatedPatientId = resData.data.updatePatientNextOfKin._id;\n          const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n          const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n          const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n          console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n          this.state.patients.push(resData.data.updatePatientNextOfKin);\n          this.context.patients = this.state.patients;\n          const responseAlert = JSON.stringify(resData.data).slice(2,25);\n          this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientNextOfKin})\n          this.fetchPatients();\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({userAlert: err});\n        });\n}\n\n\nupdatePatientComplaintHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientComplaintFormData:  \", event.target.formGridComplaintTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let complaintTitle = event.target.formGridComplaintTitle.value;\n  let complaintDate = event.target.formGridComplaintDate.value;\n  let complaintDescription = event.target.formGridComplaintDescription.value;\n  let complaintAnamnesis = event.target.formGridComplaintAnamnesis.value;\n  // let complaintAttachmentName = event.target.formGridComplaintAttachmentName.value;\n  let complaintAttachmentFormat = event.target.formGridComplaintAttachmentFormat.value;\n  let complaintAttachmentPath = event.target.formGridComplaintAttachmentPath.value;\n  let file = AuthContext._currentValue.file;\n\n  console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n  const config = {\n    bucketName: 'ent-emr-bucket',\n    dirName: complaintAttachmentPath,\n    region: 'us-east-2',\n    accessKeyId: \"AKIARFTS6Q6DALQKT4QR\",\n    secretAccessKey: \"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\",\n  }\n  const ReactS3Client = new S3(config);\n  const newFileName = file.name;\n  const complaintAttachmentName = newFileName;\n\n  ReactS3Client\n      .uploadFile(file, newFileName)\n      .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n      .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n  const patientComplaint = { complaintTitle, complaintDate, complaintDescription, complaintAnamnesis, complaintAttachmentName, complaintAttachmentFormat, complaintAttachmentPath };\n  console.log(`\n    adding patient complaint...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    complaintTitle: ${complaintTitle},\n    complaintDate: ${complaintDate},\n    complaintDescription: ${complaintDescription},\n    complaintAnamnesis: ${complaintAnamnesis},\n    complaintAttachmentName: ${complaintAttachmentName},\n    complaintAttachmentFormat: ${complaintAttachmentFormat},\n    complaintAttachmentPath: ${complaintAttachmentPath},\n    `);\n    this.setState({userAlert: \"adding patient complaint...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientComplaint(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{complaintDate:\"${complaintDate}\",complaintTitle:\"${complaintTitle}\",complaintDescription:\"${complaintDescription}\",complaintAnamnesis:\"${complaintAnamnesis}\",complaintAttachmentName:\"${complaintAttachmentName}\",complaintAttachmentFormat:\"${complaintAttachmentFormat}\",complaintAttachmentPath:\"${complaintAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientComplaint._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientComplaint);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientComplaint})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n}\n\nupdatePatientSurveyHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientSurveyFormData:  \", event.target.formGridSurveyTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let surveyDate = event.target.formGridSurveyDate.value;\n  let surveyTitle = event.target.formGridSurveyTitle.value;\n  let surveyDescription = event.target.formGridSurveyDescription.value;\n  // let surveyAttachmentName = event.target.formGridSurveyAttachmentName.value;\n  let surveyAttachmentFormat = event.target.formGridSurveyAttachmentFormat.value;\n  let surveyAttachmentPath = event.target.formGridSurveyAttachmentPath.value;\n  let file = AuthContext._currentValue.file;\n\n  console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n  const config = {\n    bucketName: 'ent-emr-bucket',\n    dirName: surveyAttachmentPath,\n    region: 'us-east-2',\n    accessKeyId: \"AKIARFTS6Q6DALQKT4QR\",\n    secretAccessKey: \"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\",\n  }\n  const ReactS3Client = new S3(config);\n  const newFileName = file.name;\n  const surveyAttachmentName = newFileName;\n\n  ReactS3Client\n      .uploadFile(file, newFileName)\n      .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n      .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n  const patientSurvey = { surveyDate, surveyTitle, surveyDescription, surveyAttachmentName, surveyAttachmentFormat, surveyAttachmentPath };\n  console.log(`\n    adding patient survey...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    surveyDate: ${surveyDate},\n    surveyTitle: ${surveyTitle},\n    surveyDescription: ${surveyDescription},\n    surveyAttachmentName: ${surveyAttachmentName},\n    surveyAttachmentFormat: ${surveyAttachmentFormat},\n    surveyAttachmentPath: ${surveyAttachmentPath},\n    `);\n    this.setState({userAlert: \"adding patient survey...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientSurvey(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{surveyDate:\"${surveyDate}\",surveyTitle:\"${surveyTitle}\",surveyDescription:\"${surveyDescription}\",surveyAttachmentName:\"${surveyAttachmentName}\",surveyAttachmentFormat:\"${surveyAttachmentFormat}\",surveyAttachmentPath:\"${surveyAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientSurvey._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientSurvey);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientSurvey})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n}\n\nupdatePatientVitalsHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientVitalsFormData:  \", event.target.formGridVitalsDate.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let vitalsDate = event.target.formGridVitalsDate.value;\n  let vitalsPr = event.target.formGridVitalsPr.value;\n  let vitalsBp1 = event.target.formGridVitalsBp1.value;\n  let vitalsBp2 = event.target.formGridVitalsBp2.value;\n  let vitalsRr = event.target.formGridVitalsRr.value;\n  let vitalsTemp = event.target.formGridVitalsTemp.value;\n  let vitalsPs02 = event.target.formGridVitalsPs02.value;\n  let vitalsHeight = event.target.formGridVitalsHeight.value;\n  let vitalsWeight = event.target.formGridVitalsWeight.value;\n  let vitalsBmi = event.target.formGridVitalsBmi.value;\n  let vitalsUrineType = event.target.formGridVitalsUrineType.value;\n  let vitalsUrineValue = event.target.formGridVitalsUrineValue.value;\n\n  const patientVitals = {  };\n  console.log(`\n    adding patient vitals...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    `);\n    this.setState({userAlert: \"adding patient vitals...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientVitals(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{vitalsDate:\"${vitalsDate}\",vitalsPr:${vitalsPr},vitalsBp1:${vitalsBp1},vitalsBp2:${vitalsBp2},vitalsRr:${vitalsRr},vitalsTemp:${vitalsTemp},vitalsPs02:${vitalsPs02},vitalsHeight:${vitalsHeight},vitalsWeight:${vitalsWeight},vitalsBmi:${vitalsBmi},vitalsUrineType:\"${vitalsUrineType}\",vitalsUrineValue:\"${vitalsUrineValue}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientVitals._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientVitals);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientVitals})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n}\n\n\nupdatePatientExaminationHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientExaminationFormData:  \", event.target.formGridExaminationArea.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let examinationDate = event.target.formGridExaminationDate.value;\n  let examinationGeneral = event.target.formGridExaminationGeneral.value;\n  let examinationArea = undefined;\n  if (event.target.formGridExaminationAreaSelect === \"select\") {\n    examinationArea = event.target.formGridExaminationArea.value;\n  } else {\n    examinationArea = event.target.formGridExaminationAreaSelect.value;\n  }\n  let examinationType = event.target.formGridExaminationType.value;\n  let examinationMeasure = event.target.formGridExaminationMeasure.value;\n  let examinationValue = event.target.formGridExaminationValue.value;\n  let examinationDescription = event.target.formGridExaminationDescription.value;\n  let examinationFollowUp = event.target.formGridExaminationFollowUp.value;\n  // let examinationAttachmentName = event.target.formGridExaminationAttachmentName.value;\n  let examinationAttachmentFormat = event.target.formGridExaminationAttachmentFormat.value;\n  let examinationAttachmentPath = event.target.formGridExaminationAttachmentPath.value;\n  let file = AuthContext._currentValue.file;\n\n  console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n  const config = {\n    bucketName: 'ent-emr-bucket',\n    dirName: examinationAttachmentPath,\n    region: 'us-east-2',\n    accessKeyId: \"AKIARFTS6Q6DALQKT4QR\",\n    secretAccessKey: \"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\",\n  }\n  const ReactS3Client = new S3(config);\n  const newFileName = file.name;\n  const examinationAttachmentName = newFileName;\n\n  ReactS3Client\n      .uploadFile(file, newFileName)\n      .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n      .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n  const patientExamination = { examinationArea, examinationGeneral, examinationType, examinationMeasure, examinationValue, examinationAttachmentName, examinationAttachmentFormat, examinationAttachmentPath };\n\n  console.log(`\n    adding patient examination...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    examinationDate: ${examinationDate},\n    examinationGeneral: ${examinationGeneral},\n    examinationArea: ${examinationArea},\n    examinationType: ${examinationType},\n    examinationMeasure: ${examinationMeasure},\n    examinationValue: ${examinationValue},\n    examinationDescription: ${examinationDescription},\n    examinationFollowUp: ${examinationFollowUp},\n    examinationAttachmentName: ${examinationAttachmentName},\n    examinationAttachmentFormat: ${examinationAttachmentFormat},\n    examinationAttachmentPath: ${examinationAttachmentPath},\n    `);\n    this.setState({userAlert: \"adding patient examination...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientExamination(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{examinationDate:\"${examinationDate}\",examinationGeneral:\"${examinationGeneral}\",examinationArea:\"${examinationArea}\",examinationType:\"${examinationType}\",examinationMeasure:\"${examinationMeasure}\",examinationValue:\"${examinationValue}\",examinationDescription:\"${examinationDescription}\",examinationFollowUp:${examinationFollowUp},examinationAttachmentName:\"${examinationAttachmentName}\",examinationAttachmentFormat:\"${examinationAttachmentFormat}\",examinationAttachmentPath:\"${examinationAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientExamination._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientExamination);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientExamination})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n}\n\n\nupdatePatientHistoryHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientHistoryFormData:  \", event.target.formGridHistoryTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let historyType = event.target.formGridHistoryType.value;\n  let historyDate = event.target.formGridHistoryDate.value;\n  let historyTitle = event.target.formGridHistoryTitle.value;\n  let historyDescription = event.target.formGridHistoryDescription.value;\n  // let historyAttachmentName = event.target.formGridHistoryAttachmentName.value;\n  let historyAttachmentFormat = event.target.formGridHistoryAttachmentFormat.value;\n  let historyAttachmentPath = event.target.formGridHistoryAttachmentPath.value;\n  let file = AuthContext._currentValue.file;\n\n  console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n  const config = {\n    bucketName: 'ent-emr-bucket',\n    dirName: historyAttachmentPath,\n    region: 'us-east-2',\n    accessKeyId: \"AKIARFTS6Q6DALQKT4QR\",\n    secretAccessKey: \"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\",\n  }\n  const ReactS3Client = new S3(config);\n  const newFileName = file.name;\n  const historyAttachmentName = newFileName;\n\n  ReactS3Client\n      .uploadFile(file, newFileName)\n      .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n      .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n  const patientHistory = { historyType, historyDate, historyTitle, historyDescription, historyAttachmentName, historyAttachmentFormat, historyAttachmentPath };\n  console.log(`\n    adding patient history...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    historyType: ${historyType},\n    historyDate: ${historyDate},\n    historyTitle: ${historyTitle},\n    historyDescription: ${historyDescription},\n    historyAttachmentName: ${historyAttachmentName},\n    historyAttachmentFormat: ${historyAttachmentFormat},\n    historyAttachmentPath: ${historyAttachmentPath},\n    `);\n    this.setState({userAlert: \"adding patient history...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientHistory(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{historyTitle:\"${historyTitle}\",historyType:\"${historyType}\",historyDate:\"${historyDate}\",historyDescription:\"${historyDescription}\",historyAttachmentName:\"${historyAttachmentName}\",historyAttachmentFormat:\"${historyAttachmentFormat}\",historyAttachmentPath:\"${historyAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientHistory._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientHistory);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientHistory})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n}\n\n\nupdatePatientAllergiesHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientAllergiesFormData:  \", event.target.formGridAllergiesTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let allergiesTitle = event.target.formGridAllergiesTitle.value;\n  let allergiesType = undefined;\n  if (event.target.formGridAllergiesTypeSelect === \"select\") {\n    allergiesType = event.target.formGridAllergiesType.value;\n  } else {\n    allergiesType = event.target.formGridAllergiesTypeSelect.value;\n  }\n  let allergiesDescription = event.target.formGridAllergiesDescription.value;\n  // let allergiesAttachmentName = event.target.formGridAllergiesAttachmentName.value;\n  let allergiesAttachmentFormat = event.target.formGridAllergiesAttachmentFormat.value;\n  let allergiesAttachmentPath = event.target.formGridAllergiesAttachmentPath.value;\n  let file = AuthContext._currentValue.file;\n\n  console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n  const config = {\n    bucketName: 'ent-emr-bucket',\n    dirName: allergiesAttachmentPath,\n    region: 'us-east-2',\n    accessKeyId: \"AKIARFTS6Q6DALQKT4QR\",\n    secretAccessKey: \"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\",\n  }\n  const ReactS3Client = new S3(config);\n  const newFileName = file.name;\n  const allergiesAttachmentName = newFileName;\n\n  ReactS3Client\n      .uploadFile(file, newFileName)\n      .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n      .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n  const patientAllergies = { allergiesTitle, allergiesType, allergiesDescription, allergiesAttachmentName, allergiesAttachmentFormat, allergiesAttachmentPath };\n\n  console.log(`\n    adding patient allergies...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    allergiesTitle: ${allergiesTitle},\n    allergiesType: ${allergiesType},\n    allergiesDescription: ${allergiesDescription},\n    allergiesAttachmentName: ${allergiesAttachmentName},\n    allergiesAttachmentFormat: ${allergiesAttachmentFormat},\n    allergiesAttachmentPath: ${allergiesAttachmentPath},\n    `);\n    this.setState({userAlert: \"adding patient allergies...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientAllergies(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{allergiesTitle:\"${allergiesTitle}\",allergiesType:\"${allergiesType}\", allergiesDescription:\"${allergiesDescription}\",allergiesAttachmentName:\"${allergiesAttachmentName}\",allergiesAttachmentFormat:\"${allergiesAttachmentFormat}\",allergiesAttachmentPath:\"${allergiesAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientAllergies._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientAllergies);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientAllergies})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n\n}\n\n\nupdatePatientMedicationHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientMedicationFormData:  \", event.target.formGridMedicationTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let medicationTitle = event.target.formGridMedicationTitle.value;\n  let medicationType = event.target.formGridMedicationType.value;\n  let medicationDescription = event.target.formGridMedicationDescription.value;\n  // let medicationAttachmentName = event.target.formGridMedicationAttachmentName.value;\n  let medicationAttachmentFormat = event.target.formGridMedicationAttachmentFormat.value;\n  let medicationAttachmentPath = event.target.formGridMedicationAttachmentPath.value;\n  let file = AuthContext._currentValue.file;\n\n  console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n  const config = {\n    bucketName: 'ent-emr-bucket',\n    dirName: medicationAttachmentPath,\n    region: 'us-east-2',\n    accessKeyId: \"AKIARFTS6Q6DALQKT4QR\",\n    secretAccessKey: \"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\",\n  }\n  const ReactS3Client = new S3(config);\n  const newFileName = file.name;\n  const medicationAttachmentName = newFileName;\n\n  ReactS3Client\n      .uploadFile(file, newFileName)\n      .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n      .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n  const patientMedication = { medicationTitle, medicationType, medicationDescription, medicationAttachmentName, medicationAttachmentFormat, medicationAttachmentPath };\n\n  console.log(`\n    adding patient medication...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    medicationTitle: ${medicationTitle},\n    medicationType: ${medicationType},\n    medicationDescription: ${medicationDescription},\n    medicationAttachmentName: ${medicationAttachmentName},\n    medicationAttachmentFormat: ${medicationAttachmentFormat},\n    medicationAttachmentPath: ${medicationAttachmentPath},\n    `);\n    this.setState({userAlert: \"adding patient medication...\"});\n\n    const requestBody = {\n      query:`\n      mutation {updatePatientMedication(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{medicationTitle:\"${medicationTitle}\",medicationType:\"${medicationType}\" medicationDescription:\"${medicationDescription}\",medicationAttachmentName:\"${medicationAttachmentName}\",medicationAttachmentFormat:\"${medicationAttachmentFormat}\",medicationAttachmentPath:\"${medicationAttachmentPath}\"})\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientMedication._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientMedication);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientMedication})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n}\n\n\nupdatePatientInvestigationHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientInvestigationFormData:  \", event.target.formGridInvestigationTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let investigationDate = event.target.formGridInvestigationDate.value;\n  let investigationTitle = event.target.formGridInvestigationTitle.value;\n  let investigationType = undefined;\n  if (event.target.formGridInvestigationTypeSelect === \"select\") {\n    investigationType = event.target.formGridInvestigationType.value;\n  } else {\n    investigationType = event.target.formGridInvestigationTypeSelect.value;\n  }\n  let investigationDescription = event.target.formGridInvestigationDescription.value;\n  // let investigationAttachmentName = event.target.formGridInvestigationAttachmentName.value;\n  let investigationAttachmentFormat = event.target.formGridInvestigationAttachmentFormat.value;\n  let investigationAttachmentPath = event.target.formGridInvestigationAttachmentPath.value;\n  let file = AuthContext._currentValue.file;\n\n  console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n  const config = {\n    bucketName: 'ent-emr-bucket',\n    dirName: investigationAttachmentPath,\n    region: 'us-east-2',\n    accessKeyId: \"AKIARFTS6Q6DALQKT4QR\",\n    secretAccessKey: \"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\",\n  }\n  const ReactS3Client = new S3(config);\n  const newFileName = file.name;\n  const investigationAttachmentName = newFileName;\n\n  ReactS3Client\n      .uploadFile(file, newFileName)\n      .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n      .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n  const patientInvestigation = { investigationDate, investigationTitle, investigationType, investigationDescription, investigationAttachmentName, investigationAttachmentFormat, investigationAttachmentPath };\n\n  console.log(`\n    adding patient investigation...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    investigationDate: ${investigationDate},\n    investigationTitle: ${investigationTitle},\n    investigationType: ${investigationType},\n    investigationDescription: ${investigationDescription},\n    investigationAttachmentName: ${investigationAttachmentName},\n    investigationAttachmentFormat: ${investigationAttachmentFormat},\n    investigationAttachmentPath: ${investigationAttachmentPath},\n    `);\n    this.setState({userAlert: \"adding patient investigation...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientInvestigation(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{investigationDate:\"${investigationDate}\",investigationTitle:\"${investigationTitle}\",investigationType:\"${investigationType}\",investigationDescription:\"${investigationDescription}\",investigationAttachmentName:\"${investigationAttachmentName}\",investigationAttachmentFormat:\"${investigationAttachmentFormat}\",investigationAttachmentPath:\"${investigationAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientInvestigation._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientInvestigation);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientInvestigation})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n}\n\n\nupdatePatientDiagnosisHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientDiagnosisFormData:  \", event.target.formGridDiagnosisTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let diagnosisDate = event.target.formGridDiagnosisDate.value;\n  let diagnosisTitle = event.target.formGridDiagnosisTitle.value;\n  let diagnosisType = event.target.formGridDiagnosisType.value;\n  let diagnosisDescription = event.target.formGridDiagnosisDescription.value;\n  // let diagnosisAttachmentName = event.target.formGridDiagnosisAttachmentName.value;\n  let diagnosisAttachmentFormat = event.target.formGridDiagnosisAttachmentFormat.value;\n  let diagnosisAttachmentPath = event.target.formGridDiagnosisAttachmentPath.value;\n  let file = AuthContext._currentValue.file;\n\n  console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n  const config = {\n    bucketName: 'ent-emr-bucket',\n    dirName: diagnosisAttachmentPath,\n    region: 'us-east-2',\n    accessKeyId: \"AKIARFTS6Q6DALQKT4QR\",\n    secretAccessKey: \"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\",\n  }\n  const ReactS3Client = new S3(config);\n  const newFileName = file.name;\n  const diagnosisAttachmentName = newFileName;\n\n  ReactS3Client\n      .uploadFile(file, newFileName)\n      .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n      .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n  const patientDiagnosis = { diagnosisDate, diagnosisTitle, diagnosisType, diagnosisDescription, diagnosisAttachmentName, diagnosisAttachmentFormat, diagnosisAttachmentPath };\n\n  console.log(`\n    adding patient diagnosis...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    diagnosisDate: ${diagnosisDate},\n    diagnosisTitle: ${diagnosisTitle},\n    diagnosisType: ${diagnosisType},\n    diagnosisDescription: ${diagnosisDescription},\n    diagnosisAttachmentName: ${diagnosisAttachmentName},\n    diagnosisAttachmentFormat: ${diagnosisAttachmentFormat},\n    diagnosisAttachmentPath: ${diagnosisAttachmentPath},\n    `);\n    this.setState({userAlert: \"adding patient diagnosis...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientDiagnosis(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{diagnosisDate:\"${diagnosisDate}\",diagnosisTitle:\"${diagnosisTitle}\",diagnosisType:\"${diagnosisType}\",diagnosisDescription:\"${diagnosisDescription}\",diagnosisAttachmentName:\"${diagnosisAttachmentName}\",diagnosisAttachmentFormat:\"${diagnosisAttachmentFormat}\",diagnosisAttachmentPath:\"${diagnosisAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientDiagnosis._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientDiagnosis);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientDiagnosis})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n}\n\n\nupdatePatientTreatmentHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientTreatmentFormData:  \", event.target.formGridTreatmentTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let treatmentDate = event.target.formGridTreatmentDate.value;\n  let treatmentTitle = event.target.formGridTreatmentTitle.value;\n  let treatmentDescription = event.target.formGridTreatmentDescription.value;\n  let treatmentDose = event.target.formGridTreatmentDose.value;\n  let treatmentFrequency = event.target.formGridTreatmentFrequency.value;\n  let treatmentType = undefined;\n  if (event.target.formGridInvestigationTypeSelect === \"select\") {\n    treatmentType = event.target.formGridTreatmentType.value;\n  } else {\n    treatmentType = event.target.formGridTreatmentTypeSelect.value;\n  }\n  // let treatmentAttachmentName = event.target.formGridTreatmentAttachmentName.value;\n  let treatmentAttachmentFormat = event.target.formGridTreatmentAttachmentFormat.value;\n  let treatmentAttachmentPath = event.target.formGridTreatmentAttachmentPath.value;\n  let file = AuthContext._currentValue.file;\n\n  console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n  const config = {\n    bucketName: 'ent-emr-bucket',\n    dirName: treatmentAttachmentPath,\n    region: 'us-east-2',\n    accessKeyId: \"AKIARFTS6Q6DALQKT4QR\",\n    secretAccessKey: \"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\",\n  }\n  const ReactS3Client = new S3(config);\n  const newFileName = file.name;\n  const treatmentAttachmentName = newFileName;\n\n  ReactS3Client\n      .uploadFile(file, newFileName)\n      .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n      .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n\n  const patientTreatment = { treatmentDate, treatmentTitle, treatmentDescription, treatmentDose, treatmentFrequency, treatmentType, treatmentAttachmentName, treatmentAttachmentFormat, treatmentAttachmentPath };\n\n  console.log(`\n    adding patient treatment...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    treatmentDate: ${treatmentDate},\n    treatmentTitle: ${treatmentTitle},\n    treatmentDescription: ${treatmentDescription},\n    treatmentDose: ${treatmentDose},\n    treatmentFrequency: ${treatmentFrequency},\n    treatmentType: ${treatmentType},\n    treatmentAttachmentName: ${treatmentAttachmentName},\n    treatmentAttachmentFormat: ${treatmentAttachmentFormat},\n    treatmentAttachmentPath: ${treatmentAttachmentPath},\n    `);\n    this.setState({userAlert: \"adding patient treatment...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientTreatment(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{treatmentDate:\"${treatmentDate}\",treatmentTitle:\"${treatmentTitle}\",treatmentType:\"${treatmentType}\",treatmentDescription:\"${treatmentDescription}\",treatmentDose:\"${treatmentDose}\",treatmentFrequency:\"${treatmentFrequency}\",treatmentAttachmentName:\"${treatmentAttachmentName}\",treatmentAttachmentFormat:\"${treatmentAttachmentFormat}\",treatmentAttachmentPath:\"${treatmentAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `}\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientTreatment._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientTreatment);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientTreatment})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n}\n\n\n\nupdatePatientBillingHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientBillingFormData:  \", event.target.formGridBillingTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let billingDate = event.target.formGridBillingDate.value;\n  let billingTitle = event.target.formGridBillingTitle.value;\n  let billingType = event.target.formGridBillingType.value;\n  let billingDescription = event.target.formGridBillingDescription.value;\n  let billingAmount = event.target.formGridBillingAmount.value;\n  let billingPaid = event.target.formGridBillingPaid.value;\n  let billingNotes = event.target.formGridBillingNotes.value;\n  // let billingAttachmentName = event.target.formGridBillingAttachmentName.value;\n  let billingAttachmentFormat = event.target.formGridBillingAttachmentFormat.value;\n  let billingAttachmentPath = event.target.formGridBillingAttachmentPath.value;\n  let file = AuthContext._currentValue.file;\n\n  console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n  const config = {\n    bucketName: 'ent-emr-bucket',\n    dirName: billingAttachmentPath,\n    region: 'us-east-2',\n    accessKeyId: \"AKIARFTS6Q6DALQKT4QR\",\n    secretAccessKey: \"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\",\n  }\n  const ReactS3Client = new S3(config);\n  const newFileName = file.name;\n  const billingAttachmentName = newFileName;\n\n  ReactS3Client\n      .uploadFile(file, newFileName)\n      .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n      .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n  const patientBilling = { billingDate, billingTitle, billingType, billingDescription, billingAmount, billingPaid, billingNotes, billingAttachmentName, billingAttachmentFormat, billingAttachmentPath };\n\n  console.log(`\n    adding patient billing...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    billingDate: ${billingDate},\n    billingTitle: ${billingTitle},\n    billingType: ${billingType},\n    billingDescription: ${billingDescription},\n    billingAmount: ${billingAmount},\n    billingPaid: ${billingPaid},\n    billingNotes: ${billingNotes},\n    billingAttachmentName: ${billingAttachmentName},\n    billingAttachmentFormat: ${billingAttachmentFormat},\n    billingAttachmentPath: ${billingAttachmentPath},\n    `);\n    this.setState({userAlert: \"adding patient billing...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientBilling(userId:\\\"${userId}\\\", patientId:\\\"${selectedPatientId}\\\",patientInput:{billingDate:\\\"${billingDate}\\\",billingTitle:\\\"${billingTitle}\\\",billingType:\\\"${billingType}\\\",billingDescription:\\\"${billingDescription}\\\",billingAmount:${billingAmount},billingPaid:${billingPaid},billingNotes:\\\"${billingNotes}\\\",billingAttachmentName:\\\"${billingAttachmentName}\\\",billingAttachmentFormat:\\\"${billingAttachmentFormat}\\\",billingAttachmentPath:\\\"${billingAttachmentPath}\\\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientBilling._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientBilling);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientBilling})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n\n}\n\nupdatePatientAttachmentHandler = (event) => {\n\n    const token = this.context.token;\n    const userId = this.context.userId;\n    let selectedPatientId = this.context.selectedPatient._id;\n\n    // if(this.context.user.role !== 'admin') {\n    //   console.log(\"No edit permission!!\");\n    //   return;\n    // }\n\n    console.log(`\n        UpdatePatientAttachmentFormData:\n      `);\n\n    this.setState({ updating: false , patientUpdateField: null });\n\n    // let attachmentName = event.target.formGridPatientAttachmentName.value;\n    let attachmentFormat = event.target.formGridPatientAttachmentFormat.value;\n    let attachmentPath = event.target.formGridPatientAttachmentPath.value;\n    let file = AuthContext._currentValue.file;\n\n    console.log(`\n      uploading to s3...\n      file.name: ${file.name},\n      AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n      `);\n    const config = {\n      bucketName: 'ent-emr-bucket',\n      dirName: attachmentPath,\n      region: 'us-east-2',\n      accessKeyId: \"AKIARFTS6Q6DALQKT4QR\",\n      secretAccessKey: \"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\",\n    }\n    const ReactS3Client = new S3(config);\n    const newFileName = file.name;\n    const attachmentName = newFileName;\n\n    ReactS3Client\n        .uploadFile(file, newFileName)\n        .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n        .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n    if (\n      attachmentName.trim().length === 0 ||\n      attachmentFormat.trim().length === 0 ||\n      attachmentPath.trim().length === 0\n    ) {\n      console.log(\"blank fields detected!!!...Please try again...\");\n      this.setState({userAlert: \"blank fields detected!!!...Please try again...\"});\n      return;\n    }\n\n    this.setState({userAlert: \"adding patient attachment\"});\n\n    const requestBody = {\n                    query:`\n                    mutation {updatePatientAttachment(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{attachmentName:\"${attachmentName}\",attachmentFormat:\"${attachmentFormat}\",attachmentPath:\"${attachmentFormat}\"})\n                    {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n            `}\n\n    fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            console.log(\"response data... \" + JSON.stringify(resData.data));\n\n            const updatedPatientId = resData.data.updatePatientAttachment._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.updatePatientAttachment);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientAttachment})\n            this.fetchPatients();\n          })\n          .catch(err => {\n            console.log(err);\n            this.setState({userAlert: err});\n          });\n\n}\n\nupdatePatientNoteHandler = (event) => {\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(`\n      UpdatePatientNoteFormData:\n      ${event.target.formGridNote.value}\n    `);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n    let note = event.target.formGridNote.value;\n\n    if (\n      note.trim().length === 0\n    ) {\n      console.log(\"Can't Submit a blank form!!!...Please try again...\");\n      this.setState({userAlert: \"Can't Submit a blank form!!!...Please try again...\"});\n      return;\n    }\n\n    this.setState({userAlert: \"adding patient note\"});\n\n    const requestBody = {\n              query:`\n              mutation {updatePatientNotes(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{notes:\"${note}\"})\n              {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n            `}\n\n    fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            console.log(\"response data... \" + JSON.stringify(resData.data));\n\n            const updatedPatientId = resData.data.updatePatientNotes._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.updatePatientNotes);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientNotes})\n            this.fetchPatients();\n          })\n          .catch(err => {\n            console.log(err);\n            this.setState({userAlert: err});\n          });\n\n}\nupdatePatientTagHandler = (event) => {\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(`\n      UpdatePatientTagFormData:\n      ${event.target.formGridTag.value}\n    `);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n    let tag = event.target.formGridTag.value;\n\n    if (\n      tag.trim().length === 0\n    ) {\n      console.log(\"Can't Submit a blank form!!!...Please try again...\");\n      this.setState({userAlert: \"Can't Submit a blank form!!!...Please try again...\"});\n      return;\n    }\n\n    const requestBody = {\n                    query:`\n                    mutation {updatePatientTags(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{tag:\"${tag}\"})\n                    {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n            `}\n    this.setState({userAlert: \"adding patient tag\"});\n\n\n    fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            console.log(\"response data... \" + JSON.stringify(resData.data));\n\n            const updatedPatientId = resData.data.updatePatientTags._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.updatePatientTags);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientTags})\n            this.fetchPatients();\n          })\n          .catch(err => {\n            console.log(err);\n            this.setState({userAlert: err});\n          });\n\n\n}\n\n\nmodalConfirmSearchHandler = (event) => {\n  console.log(\"SearchPatientForm:  \");\n\n\n  let userId = this.context.userId;\n\n    console.log(\"SearchPatientFormData:  \", event.target.formBasicField.value);\n    this.setState({ searching: false });\n\n    let field = null;\n    let query = event.target.formBasicQuery.value;\n    if (event.target.formBasicFieldSelect.value === \"select\") {\n      field = event.target.formBasicField.value;\n    } else {\n      field = event.target.formBasicFieldSelect.value;\n    }\n\n    this.setState({\n      patientSearchField: field,\n      patientSearchQuery: query,\n    })\n\n    if (\n      field.trim().length === 0 ||\n      query.trim().length === 0\n    ) {\n      console.log(\"blank fields detected!!!...Please try again...\");\n      return;\n    }\n\n\n\n    const search = { field, query }\n    console.log(\"Searching for Patient:  \", JSON.stringify(search));\n    this.setState({userAlert: \"Searching for Patient:  \"});\n\n    const requestBody = {\n      query: `\n        query {\n          getPatientField(userId: \"${userId}\", field: \"${field}\", query: \"${query}\" )\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n    const token = this.context.token;\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n        const responseAlert = JSON.stringify(resData.data).slice(2,15);\n        this.setState({userAlert: responseAlert});\n\n        const searchPatients = resData.data.getPatientField;\n\n        this.setState({ searchPatients: searchPatients})\n        console.log(\"state.searchPatients:  \", this.state.searchPatients);\n        // this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n}\n\nmodalConfirmSearchIdHandler = (event) => {\n  console.log(\"SearchPatientIdFormData\");\n\n  let userId = this.context.userId;\n  this.setState({ searching: false });\n\n  const patientId = event.target.formBasicId.value;\n\n  const requestBody = {\n    query: `\n      query {getPatientId(userId:\\\"${userId}\\\",patientId:\\\"${patientId}\\\")\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{_id,title,time,location},consultant{date,reference{_id,name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `}\n\n  const token = this.context.token;\n\n  fetch('http://localhost:10000/graphql', {\n    method: 'POST',\n    body: JSON.stringify(requestBody),\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + token\n    }\n  })\n    .then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n      return res.json();\n    })\n    .then(resData => {\n      console.log(\"response data... \" + JSON.stringify(resData));\n      const responseAlert = JSON.stringify(resData.data).slice(2,25);\n      this.setState({userAlert: responseAlert});\n\n      const searchPatients = resData.data.getPatientId;\n\n      this.setState({ searchPatients: [searchPatients]})\n      console.log(\"state.searchPatients:  \", this.state.searchPatients);\n      // this.fetchUsers();\n    })\n    .catch(err => {\n      console.log(err);\n      this.setState({userAlert: err});\n    });\n}\n\nmodalConfirmSearchVisitHandler = (event) => {\n  console.log(\"SearchPatientVisitFormData\");\n\n  let userId = this.context.userId;\n  this.setState({ searching: false });\n\n  const requestBody = {\n    query: `\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{_id,title,time,location,date},consultant{date,reference{_id,name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `}\n\n  const token = this.context.token;\n\n  fetch('http://localhost:10000/graphql', {\n    method: 'POST',\n    body: JSON.stringify(requestBody),\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + token\n    }\n  })\n    .then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n      return res.json();\n    })\n    .then(resData => {\n      console.log(\"response data... \" + JSON.stringify(resData));\n\n      const searchPatients = resData.data.getPatientId;\n\n      this.setState({ searchPatients: searchPatients})\n      console.log(\"state.searchPatients:  \", this.state.searchPatients);\n      // this.fetchUsers();\n    })\n    .catch(err => {\n      console.log(err);\n      this.setState({userAlert: err});\n    });\n\n}\n\nmodalConfirmSearchNameHandler = (event) => {\n  console.log(\"SearchPatientNameFormData:\", event.target.formBasicName.value);\n\n  let userId = this.context.userId;\n  this.setState({ searching: false });\n\n  let patients = this.state.patients;\n  const regex = new RegExp(event.target.formBasicName.value,\"i\");\n  console.log(`\n    regex: ${regex},\n    `);\n    let result = patients.filter(patient => patient.name.match(regex))\n    console.log(`\n      result: ${JSON.stringify(result)}\n      `);\n\n      this.setState({ searchPatients: result})\n\n}\n\n  getPatientVisit = (event) => {\n\n    const selectedPatient = this.state.selectedPatient;\n    event.preventDefault();\n    console.log(`\n        getUserVisit function:\n        selectedPatient.consultant: ${JSON.stringify(selectedPatient.consultant)},\n        selectedPatient.complaints: ${JSON.stringify(selectedPatient.complaints)},\n        visitDate: ${new Date(event.target.formBasicVisitDate.value)},\n        complaintDate: ${new Date(1580515200*1000)},\n      `);\n\n    let visitDate = new Date(event.target.formBasicVisitDate.value).toISOString().substring(0, 10);\n    let visitSurveys = selectedPatient.surveys.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    let visitConsultants = selectedPatient.consultant.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    let visitComplaints = selectedPatient.complaints.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    // let visitSurveys = selectedPatient.surveys.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString() === visitDate);\n    let visitVitals = selectedPatient.vitals.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    let visitExaminations = selectedPatient.examination.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    let visitHistory = selectedPatient.history.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    let visitInvestigations = selectedPatient.investigation.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    let visitDiagnosis = selectedPatient.diagnosis.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    let visitTreatments = selectedPatient.treatment.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    let visitBilling = selectedPatient.billing.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n\n      const visit = {\n        date: visitDate,\n        patientName: this.context.selectedPatient.name,\n        consultant: visitConsultants,\n        complaint: visitComplaints,\n        examination: visitExaminations,\n        survey: visitSurveys,\n        vitals: visitVitals,\n        history: visitHistory,\n        investigation: visitInvestigations,\n        diagnosis: visitDiagnosis,\n        treatment: visitTreatments,\n        billing: visitBilling,\n      };\n\n      console.log(`\n        visit: ${JSON.stringify(visit)},\n        `);\n        this.context.visit = visit;\n        this.setState({visit: visit});\n\n  }\n\n\n  modalCancelHandler = () => {\n    this.setState({ creating: false, updating: false, searching: false, selectedPatient: null });\n  };\n\n\n  fetchPatients() {\n    console.log(\"fetch patients function:  \");\n    const userId = this.context.userId;\n    const token = this.context.token;\n\n    this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n          query {patients(userId:\"${userId}\")\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{_id,title,time,location,date},consultant{date,reference{_id,name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n        `\n    };\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"resData\", resData);\n        const patients = resData.data.patients;\n        console.log(patients);\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({userAlert: responseAlert});\n\n        this.context.patients = this.state.patients;\n        if (this.isActive) {\n          this.setState({ patients: patients, isLoading: false });\n        }\n\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n        if (this.isActive) {\n          this.setState({ isLoading: false });\n        }\n      });\n  }\n\n  fetchPatientsAsc = () => {\n    console.log(\"fetch patients function:  \");\n    const userId = this.context.userId;\n    const token = this.context.token;\n\n    // this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n          query {patientsNameAsc(userId:\"${userId}\")\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{_id,title,time,location,date},consultant{date,reference{_id,name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n        `\n    };\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"resData\", resData);\n        const patients = resData.data.patientsNameAsc;\n        console.log(patients);\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({userAlert: responseAlert});\n\n        this.context.patients = patients;\n        this.setState({ patients: patients});\n        // if (this.isActive) {\n        //   this.setState({ patients: patients, isLoading: false });\n        // }\n\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n        // if (this.isActive) {\n        //   this.setState({ isLoading: false });\n        // }\n      });\n  }\n\n  fetchPatientsDesc = () => {\n    console.log(\"fetch patients function:  \");\n    const userId = this.context.userId;\n    const token = this.context.token;\n\n    // this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n          query {patientsNameDesc(userId:\"${userId}\")\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{_id,title,time,location,date},consultant{date,reference{_id,name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n        `\n    };\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"resData\", resData);\n        const patients = resData.data.patientsNameDesc;\n        console.log(patients);\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({userAlert: responseAlert});\n\n        this.context.patients = patients\n        // if (this.isActive) {\n        //   this.setState({ patients: patients, isLoading: false });\n        // }\n        this.setState({ patients: patients});\n\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n        // if (this.isActive) {\n        //   this.setState({ isLoading: false });\n        // }\n      });\n  }\n\n\n  modalDeleteHandler = () => {\n    console.log(\"deleting patient...selectedPatient:  \", this.context.selectedPatient);\n\n    const selectedPatientId = this.context.selectedPatient._id;\n    const userId = this.context.selectedUser._id;\n\n    if(this.context.user.role !== 'admin') {\n      console.log(\"Not the Admin! No edit permission!!\");\n    }\n\n    this.setState({deleting: true});\n\n\n    const requestBody = {\n      query: `\n          mutation {deletePatient(userId:\"${userId}\",patientId:\"${selectedPatientId}\")\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n        `\n    };\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        let deletedPatient = resData.data.deletePatient;\n        console.log(deletedPatient);\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({userAlert: responseAlert});\n\n        let deletedPatientId = deletedPatient._id;\n        deletedPatient = this.state.patients.find(e => e._id === deletedPatientId);\n        const deletedPatientPos = this.state.patients.indexOf(deletedPatient);\n        const slicedArray = this.state.patients.splice(deletedPatientPos, 1);\n        console.log(\"deletedPatient:  \", JSON.stringify(deletedPatient),\"  deletedUserPos:  \", deletedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.setState({ deleting: false });\n\n        this.fetchPatients();\n\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n        if (this.isActive) {\n          this.setState({ deleting: false });\n        }\n      });\n  }\n\n\n  deletePatientInsuranceItem = (props) => {\n\n    let token = this.context.token;\n    let userId = this.context.userId;\n    let patientId = this.state.selectedPatient._id;\n\n    console.log(`\n      delete patient insurance item:\n      props: ${JSON.stringify(props)},\n      token: ${token},\n      userId: ${userId},\n      patientId: ${patientId},\n      `);\n\n      const requestBody = {\n        query: `\n         mutation {deletePatientInsurance (userId:\\\"${userId}\\\", patientId:\\\"${patientId}\\\",insuranceCompany:\\\"${props.company}\\\",insuranceNumber:\"${props.number}\")\n         {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `};\n\n          fetch('http://localhost:10000/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n              'Content-Type': 'application/json',\n              Authorization: 'Bearer ' + token\n            }\n          })\n            .then(res => {\n              if (res.status !== 200 && res.status !== 201) {\n                throw new Error('Failed!');\n              }\n              return res.json();\n            })\n            .then(resData => {\n              let deletedPatient = resData.data.deletePatientInsurance;\n              console.log(deletedPatient);\n\n              const updatedPatientId = resData.data.deletePatientInsurance._id;\n              const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n              const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n              const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n              console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n              this.state.patients.push(resData.data.deletePatientInsurance);\n              this.context.patients = this.state.patients;\n              const responseAlert = JSON.stringify(resData.data).slice(2,25);\n              this.setState({ userAlert: responseAlert})\n              // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientInsurance})\n              this.fetchPatients();\n\n            })\n            .catch(err => {\n              console.log(err);\n            });\n\n  }\n\n  deletePatientConsultantItem = (props) => {\n\n    let token = this.context.token;\n    let userId = this.context.userId;\n    let patientId = this.state.selectedPatient._id;\n    let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n    console.log(`\n      delete patient consultant item:\n      props: ${JSON.stringify(props)},\n      token: ${token},\n      userId: ${userId},\n      patientId: ${patientId},\n      consultant date: ${date},\n      `);\n\n      const requestBody = {\n        query: `\n         mutation {deletePatientConsultant (userId:\\\"${userId}\\\", patientId:\\\"${patientId}\\\",consultantId:\\\"${props.reference.id}\\\",consultantDate:\\\"${date}\\\")\n         {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `};\n\n          fetch('http://localhost:10000/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n              'Content-Type': 'application/json',\n              Authorization: 'Bearer ' + token\n            }\n          })\n            .then(res => {\n              if (res.status !== 200 && res.status !== 201) {\n                throw new Error('Failed!');\n              }\n              return res.json();\n            })\n            .then(resData => {\n              let deletedPatient = resData.data.deletePatientConsultant;\n              console.log(deletedPatient);\n\n              const updatedPatientId = resData.data.deletePatientConsultant._id;\n              const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n              const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n              const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n              console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n              this.state.patients.push(resData.data.deletePatientConsultant);\n              this.context.patients = this.state.patients;\n              const responseAlert = JSON.stringify(resData.data).slice(2,25);\n              this.setState({ userAlert: responseAlert})\n              // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientConsultant})\n              this.fetchPatients();\n\n            })\n            .catch(err => {\n              console.log(err);\n            });\n}\n\ndeletePatientNextOfKinItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n\n  console.log(`\n    delete patient nextOfKin item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientNextOfKin (userId:\\\"${userId}\\\", patientId:\\\"${patientId}\\\",nextOfKinName:\\\"${props.name}\\\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientNextOfKin;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientNextOfKin._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientNextOfKin);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientNextOfKin})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientComplaintItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n  let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n  console.log(`\n    delete patient Complaint item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    complaint date: ${date},\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientComplaint (userId:\\\"${userId}\\\", patientId:\\\"${patientId}\\\",complaintTitle:\\\"${props.title}\\\",complaintDate:\\\"${date}\\\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientComplaint;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientComplaint._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientComplaint);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientComplaint})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientSurveyItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n  let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n  console.log(`\n    delete patient Survey item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    survey date: ${date}\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientSurvey (userId:\\\"${userId}\\\", patientId:\\\"${patientId}\\\",surveyTitle:\\\"${props.title}\\\",surveyDate:\\\"${date}\\\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientSurvey;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientSurvey._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientSurvey);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientSurvey})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientVitalsItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n  let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n  console.log(`\n    delete patient Vitals item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    vitals date: ${date},\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientVitals (userId:\\\"${userId}\\\", patientId:\\\"${patientId}\\\",vitalsDate:\\\"${date}\\\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientVitals;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientVitals._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientVitals);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientVitals})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientExaminationItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n  let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n  console.log(`\n    delete patient Examination item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    examination date: ${date},\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientExamination (userId:\\\"${userId}\\\", patientId:\\\"${patientId}\\\",examinationType:\\\"${props.type}\\\",examinationDate:\\\"${date}\\\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientExamination;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientExamination._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientExamination);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientExamination})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientHistoryItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n  let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n  console.log(`\n    delete patient History item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    history date: ${date},\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientHistory (userId:\\\"${userId}\\\", patientId:\\\"${patientId}\\\",historyTitle:\\\"${props.title}\\\",historyDate:\\\"${date}\\\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientHistory;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientHistory._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientHistory);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientHistory})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientAllergiesItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n\n  console.log(`\n    delete patient Allergies item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientAllergies (userId:\\\"${userId}\\\", patientId:\\\"${patientId}\\\",allergiesTitle:\\\"${props.title}\\\",allergiesType:\\\"${props.type}\\\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientAllergies;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientAllergies._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientAllergies);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientAllergies})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientMedicationItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n\n  console.log(`\n    delete patient Medication item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientMedication (userId:\\\"${userId}\\\", patientId:\\\"${patientId}\\\",medicationTitle:\\\"${props.title}\\\",medicationType:\\\"${props.type}\\\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientMedication;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientMedication._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientMedication);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientMedication})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientInvestigationItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n  let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n  console.log(`\n    delete patient Investigation item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    investigation date: ${date},\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientInvestigation (userId:\\\"${userId}\\\", patientId:\\\"${patientId}\\\",investigationDate:\\\"${date}\\\",investigationTitle:\\\"${props.title}\\\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientInvestigation;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientInvestigation._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientInvestigation);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientInvestigation})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientDiagnosisItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n  let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n  console.log(`\n    delete patient Diagnosis item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    diagnosis date: ${date}\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientDiagnosis (userId:\\\"${userId}\\\",patientId:\\\"${patientId}\\\",diagnosisDate:\\\"${date}\\\",diagnosisTitle:\\\"${props.title}\\\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientDiagnosis;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientDiagnosis._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientDiagnosis);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientDiagnosis})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientTreatmentItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n  let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n  console.log(`\n    delete patient Treatment item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    treatment date: ${date},\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientTreatment (userId:\\\"${userId}\\\", patientId:\\\"${patientId}\\\",treatmentDate:\\\"${date}\\\",treatmentTitle:\\\"${props.title}\\\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientTreatment;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientTreatment._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientTreatment);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientTreatment})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientBillingItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n  let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n  console.log(`\n    delete patient Billing item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    billing date: ${date},\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientBilling (userId:\\\"${userId}\\\", patientId:\\\"${patientId}\\\",billingDate:\\\"${date}\\\",billingTitle:\\\"${props.title}\\\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientBilling;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientBilling._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientBilling);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientBilling})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientAttachmentItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n\n  console.log(`\n    deleting from s3...\n    file.name: ${props.name},\n    `);\n\n  const config = {\n    bucketName: 'ent-emr-bucket',\n    dirName: props.path,\n    region: 'us-east-2',\n    accessKeyId: \"AKIARFTS6Q6DALQKT4QR\",\n    secretAccessKey: \"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\",\n  }\n  const ReactS3Client = new S3(config);\n  const filename = props.name;\n  // const attachmentName = newFileName;\n  //\n  S3FileUpload\n  .deleteFile(filename, config)\n  .then(response => console.log(response))\n  .catch(err => console.error(err))\n\n  console.log(`\n    delete patient Attachment item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientAttachment (userId:\\\"${userId}\\\", patientId:\\\"${patientId}\\\",attachmentName:\\\"${props.name}\\\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientAttachment;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientAttachment._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientAttachment);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientAttachment})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientNoteItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n\n  console.log(`\n    delete patient Note item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    `);\n\n    const requestBody = {\n      query: `\n\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientNextOfKin;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientNextOfKin._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientNextOfKin);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientNextOfKin})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientTagItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n\n  console.log(`\n    delete patient Tag item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    `);\n\n    const requestBody = {\n      query: `\n\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientNextOfKin;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientNextOfKin._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientNextOfKin);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientNextOfKin})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n            this.setState({ userAlert: err})\n          });\n}\n\n\n  updatePatientSpecial (event) {\n\n    console.log(\"special field to update:  \", event.target.value);\n    const field = event.target.value;\n    this.setState({ patientUpdateField: field});\n\n  }\n\n  onViewAttachment = (attachment) => {\n    console.log(`\n      setting up attachment viewer...\n      attachment: ${JSON.stringify(attachment)}\n      `);\n      this.setState({showAttachment: true})\n\n      const file = \"https://ent-emr-bucket.s3-us-east-2.amazonaws.com/\"+attachment.path+\"/\"+attachment.name;\n      const type = attachment.format;\n\n      this.setState({showThisAttachmentFile: file, showThisAttachmentType: type})\n  }\n\n  closeAttachmentView = () => {\n    console.log(`\n      closing attachment viewer...\n      `);\n      this.setState({showAttachment: false})\n  }\n\n  createPdf = (patient) => {\n    console.log(`\n        creating pdf...\n        user: ${JSON.stringify(patient)}\n      `);\n\n      const pdfData = {\n        title: patient.name,\n        body: patient.dob,\n      };\n\n    this.setState({createPdf: true, pdfData: pdfData})\n  }\n\n  closePdfCreator = () => {\n    console.log(`\n      closing pdf creator...\n      `);\n      this.setState({createPdf: false, pdfData: null} )\n  }\n\n\n  showDetailHandler = patientId => {\n\n    this.setState(prevState => {\n      const selectedPatient = prevState.patients.find(e => e._id === patientId);\n      this.context.selectedPatient = selectedPatient;\n      this.context.selectedPatientId = selectedPatient._id;\n      console.log(\"selectedPatient:  \", selectedPatient);\n      return { selectedPatient: selectedPatient };\n    });\n  };\n\n\n  componentWillUnmount() {\n    this.isActive = false;\n  }\n\n  render() {\n    return (\n\n    <React.Fragment>\n    {this.state.showAttachment === true && (\n      <AttachmentViewer\n        onCloseAttachmentView={this.closeAttachmentView}\n        attachmentFile={this.state.showThisAttachmentFile}\n        attachmentType={this.state.showThisAttachmentType}\n      />\n    )}\n\n    {this.state.createPdf === true && (\n        <PdfCreator\n          pdfData={this.state.pdfData}\n          onClosePdfCreator={this.closePdfCreator}\n        />\n    )}\n\n    <Accordion>\n\n    <Row>\n    <Col md={3} className=\"MasterCol1\">\n\n    <AlertBox\n          authUserId={this.context.userId}\n          alert={this.state.userAlert}\n        />\n      <SidebarPage/>\n    </Col>\n\n    <Col md={9} className=\"MasterCol2\">\n    <Container className=\"containerCombinedDetail\">\n\n    <Tab.Container id=\"left-tabs-example\" defaultActiveKey=\"patientDetail\">\n      <Row>\n        <Col sm={2}>\n          <Nav variant=\"pills\" className=\"flex-column\">\n            <Nav.Item>\n              <Nav.Link eventKey=\"MasterList\">MASTER LIST</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientDetail\">Selected</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientCreate\">Create New</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"disabled\" disabled>Edit:</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditDemographics\">Demographics</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditField\">Single Field</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"disabled\" disabled>Add:</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditConsultant\">Consultant</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditInsurance\">Insurance</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditNextOfKin\">Next of Kin</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditComplaint\">Complaint</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditSurvey\">Survey</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditVitals\">Vitals</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditExamination\">Examination</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditHistory\">History</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditAllergies\">Allergies</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditMedication\">Medication</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditInvestigation\">Investigation</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditDiagnosis\">Diagnosis</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditTreatment\">Treatment</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditBilling\">Billing</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditAttachment\">Attachment</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditNote\">Note</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditTag\">Tag</Nav.Link>\n            </Nav.Item>\n\n            <Nav.Item>\n              <Nav.Link eventKey=\"disabled\" disabled>Search:</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"SearchInput\">Input</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"SearchResult\">Search</Nav.Link>\n            </Nav.Item>\n          </Nav>\n        </Col>\n        <Col sm={10}>\n          <Tab.Content>\n            <Tab.Pane eventKey=\"patientDetail\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.isLoading === false &&\n                this.state.selectedPatient !== null\n                &&\n                (<PatientDetail\n                  authUserId={this.context.userId}\n                  token={this.context.token}\n                  patient={this.state.selectedPatient}\n                  onEdit={this.startUpdatePatientHandler}\n                  canDelete={this.state.canDelete}\n                  onDelete={this.modalDeleteHandler}\n                  onGetVisit={this.getPatientVisit}\n                  visit={this.context.visit}\n                  fetchUsers={this.fetchUsers}\n                  consultantDelete={this.deletePatientConsultantItem}\n                  insuranceDelete={this.deletePatientInsuranceItem}\n                  nextOfKinDelete={this.deletePatientNextOfKinItem}\n                  complaintDelete={this.deletePatientComplaintItem}\n                  surveyDelete={this.deletePatientSurveyItem}\n                  vitalsDelete={this.deletePatientVitalsItem}\n                  examinationDelete={this.deletePatientExaminationItem}\n                  historyDelete={this.deletePatientHistoryItem}\n                  allergiesDelete={this.deletePatientAllergiesItem}\n                  medicationDelete={this.deletePatientMedicationItem}\n                  investigationDelete={this.deletePatientInvestigationItem}\n                  diagnosisDelete={this.deletePatientDiagnosisItem}\n                  treatmentDelete={this.deletePatientTreatmentItem}\n                  billingDelete={this.deletePatientBillingItem}\n                  attachmentDelete={this.deletePatientAttachmentItem}\n                  noteDelete={this.deletePatientNoteItem}\n                  tagDelete={this.deletePatientTagItem}\n                  onViewAttachment={this.onViewAttachment}\n                  onCreatePdf={this.createPdf}\n                  />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientCreate\">\n              <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" onClick={this.startCreatePatientHandler} >Create NEW Patient Profile</Button>\n              {\n                this.state.creating && (\n                  <CreatePatientForm\n                  canCancel\n                    canConfirm\n                    onCancel={this.modalCancelHandler}\n                    onConfirm={this.modalConfirmHandler}\n                    confirmText=\"Confirm\"\n                  />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditDemographics\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" onClick={this.startUpdatePatientHandler}>Edit Demographics</Button>\n              )}\n              {this.state.updating &&\n                this.state.selectedPatient !== null\n                && (\n                <UpdatePatientForm\n                authUserId={this.context.userId}\n                canCancel\n                  canConfirm\n                  onCancel={this.modalCancelHandler}\n                  onConfirm={this.modalConfirmUpdateHandler}\n                  confirmText=\"Confirm\"\n                  patient={this.state.selectedPatient}\n                />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditField\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" onClick={this.startUpdatePatientHandler}>Edit a Single Field</Button>\n              )}\n              {this.state.updating &&\n                this.state.selectedPatient !== null\n                && (\n                  <UpdatePatientFieldForm\n                    authUserId={this.context.userId}\n                    canCancel\n                    canConfirm\n                    onCancel={this.modalCancelHandler}\n                    onConfirm={this.modalConfirmUpdateFieldHandler}\n                    confirmText=\"Confirm\"\n                    patient={this.state.selectedPatient}\n                  />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditConsultant\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='consultant' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add a Consultant</Button>\n              )}\n              {this.state.patientUpdateField === 'consultant' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientConsultantForm\n                authUserId={this.context.userId}\n                canCancel\n                  canConfirm\n                  onCancel={this.modalCancelHandler}\n                  onConfirm={this.updatePatientConsultantHandler}\n                  confirmText=\"Confirm\"\n                  consultant={this.context.selectedUser}\n                />\n              )}\n              {this.state.patientUpdateField === 'consultant' &&\n              this.state.selectedPatient !== null &&\n              (\n                <Row>\n                <p>Add Consultant: {this.context.selectedUser.name}</p>\n                <p> To Paitient: {this.state.selectedPatient.name} ??</p>\n                <hr/>\n                </Row>\n              )}\n              {this.state.patientUpdateField === 'consultant' &&\n              this.state.selectedPatient !== null &&\n              (\n                <Row>\n                <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                  Select someone from the Staff page\n                </Button>\n                </Row>\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditInsurance\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='insurance' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Insurance</Button>\n              )}\n              {this.state.patientUpdateField === 'insurance' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientInsuranceForm\n                authUserId={this.context.userId}\n                canCancel\n                  canConfirm\n                  onCancel={this.modalCancelHandler}\n                  onConfirm={this.updatePatientInsuranceHandler}\n                  confirmText=\"Confirm\"\n                  patient={this.state.selectedPatient}\n                />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditNextOfKin\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='nextOfKin' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add NextOfKin</Button>\n              )}\n              {this.state.patientUpdateField === 'nextOfKin' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientNextOfKinForm\n                      authUserId={this.context.userId}\n                      canCancel\n                        canConfirm\n                        onCancel={this.modalCancelHandler}\n                        onConfirm={this.updatePatientNextOfKinHandler}\n                        confirmText=\"Confirm\"\n                        patient={this.state.selectedPatient}\n                      />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditComplaint\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='complaint' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Complaint</Button>\n              )}\n              {this.state.patientUpdateField === 'complaint' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientComplaintForm\n                      authUserId={this.context.userId}\n                      canCancel\n                        canConfirm\n                        onCancel={this.modalCancelHandler}\n                        onConfirm={this.updatePatientComplaintHandler}\n                        confirmText=\"Confirm\"\n                        patient={this.state.selectedPatient}\n                      />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditSurvey\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='survey' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Survey</Button>\n              )}\n              {this.state.patientUpdateField === 'survey' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientSurveyForm\n                      authUserId={this.context.userId}\n                      canCancel\n                        canConfirm\n                        onCancel={this.modalCancelHandler}\n                        onConfirm={this.updatePatientSurveyHandler}\n                        confirmText=\"Confirm\"\n                        patient={this.state.selectedPatient}\n                      />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditVitals\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='vitals' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Vitals</Button>\n              )}\n              {this.state.patientUpdateField === 'vitals' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientVitalsForm\n                      authUserId={this.context.userId}\n                      canCancel\n                        canConfirm\n                        onCancel={this.modalCancelHandler}\n                        onConfirm={this.updatePatientVitalsHandler}\n                        confirmText=\"Confirm\"\n                        patient={this.state.selectedPatient}\n                      />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditExamination\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='examintion' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Examination</Button>\n              )}\n              {this.state.patientUpdateField === 'examintion' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientExaminationForm\n                      authUserId={this.context.userId}\n                      canCancel\n                        canConfirm\n                        onCancel={this.modalCancelHandler}\n                        onConfirm={this.updatePatientExaminationHandler}\n                        confirmText=\"Confirm\"\n                        patient={this.state.selectedPatient}\n                      />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditHistory\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='history' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add History</Button>\n              )}\n              {this.state.patientUpdateField === 'history' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientHistoryForm\n                authUserId={this.context.userId}\n                canCancel\n                  canConfirm\n                  onCancel={this.modalCancelHandler}\n                  onConfirm={this.updatePatientHistoryHandler}\n                  confirmText=\"Confirm\"\n                  patient={this.state.selectedPatient}\n                />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditAllergies\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='allergies' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Allergies</Button>\n              )}\n              {this.state.patientUpdateField === 'allergies' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientAllergiesForm\n                      authUserId={this.context.userId}\n                      canCancel\n                        canConfirm\n                        onCancel={this.modalCancelHandler}\n                        onConfirm={this.updatePatientAllergiesHandler}\n                        confirmText=\"Confirm\"\n                        patient={this.state.selectedPatient}\n                      />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditMedication\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='medication' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Medication</Button>\n              )}\n              {this.state.patientUpdateField === 'medication' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientMedicationForm\n                authUserId={this.context.userId}\n                canCancel\n                  canConfirm\n                  onCancel={this.modalCancelHandler}\n                  onConfirm={this.updatePatientMedicationHandler}\n                  confirmText=\"Confirm\"\n                  patient={this.state.selectedPatient}\n                />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditInvestigation\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='investigation' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Investigation</Button>\n              )}\n              {this.state.patientUpdateField === 'investigation' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientInvestigationForm\n                      authUserId={this.context.userId}\n                      canCancel\n                        canConfirm\n                        onCancel={this.modalCancelHandler}\n                        onConfirm={this.updatePatientInvestigationHandler}\n                        confirmText=\"Confirm\"\n                        patient={this.state.selectedPatient}\n                      />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditDiagnosis\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='diagnosis' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Diagnosis</Button>\n              )}\n              {this.state.patientUpdateField === 'diagnosis' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientDiagnosisForm\n                      authUserId={this.context.userId}\n                      canCancel\n                        canConfirm\n                        onCancel={this.modalCancelHandler}\n                        onConfirm={this.updatePatientDiagnosisHandler}\n                        confirmText=\"Confirm\"\n                        patient={this.state.selectedPatient}\n                      />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditTreatment\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='treatment' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Treatment</Button>\n              )}\n              {this.state.patientUpdateField === 'treatment' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientTreatmentForm\n                      authUserId={this.context.userId}\n                      canCancel\n                        canConfirm\n                        onCancel={this.modalCancelHandler}\n                        onConfirm={this.updatePatientTreatmentHandler}\n                        confirmText=\"Confirm\"\n                        patient={this.state.selectedPatient}\n                      />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditBilling\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='billing' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Billing</Button>\n              )}\n              {this.state.patientUpdateField === 'billing' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientBillingForm\n                      authUserId={this.context.userId}\n                      canCancel\n                        canConfirm\n                        onCancel={this.modalCancelHandler}\n                        onConfirm={this.updatePatientBillingHandler}\n                        confirmText=\"Confirm\"\n                        patient={this.state.selectedPatient}\n                      />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditAttachment\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='attachment' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Attachment</Button>\n              )}\n              {this.state.patientUpdateField === 'attachment' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientAttachmentForm\n                      authUserId={this.context.userId}\n                      canCancel\n                        canConfirm\n                        onCancel={this.modalCancelHandler}\n                        onConfirm={this.updatePatientAttachmentHandler}\n                        confirmText=\"Confirm\"\n                        patient={this.state.selectedPatient}\n                      />\n                    )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditNote\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='notes' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Note</Button>\n              )}\n              {this.state.patientUpdateField === 'notes' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientNoteForm\n                      authUserId={this.context.userId}\n                      canCancel\n                        canConfirm\n                        onCancel={this.modalCancelHandler}\n                        onConfirm={this.updatePatientNoteHandler}\n                        confirmText=\"Confirm\"\n                        patient={this.state.selectedPatient}\n                      />\n                    )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditTag\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='tags' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Tag</Button>\n              )}\n              {this.state.patientUpdateField === 'tags' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientTagForm\n                      authUserId={this.context.userId}\n                      canCancel\n                        canConfirm\n                        onCancel={this.modalCancelHandler}\n                        onConfirm={this.updatePatientTagHandler}\n                        confirmText=\"Confirm\"\n                        patient={this.state.selectedPatient}\n                      />\n                    )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"MasterList\">\n              <Container className=\"containerUserMasterList\">\n              <Row className=\"searchListRow\">\n              <Button variant=\"primary\" size=\"sm\" onClick={this.fetchPatientsAsc}>\n                 Sort Asc\n               </Button>\n              <Button variant=\"info\" size=\"sm\" onClick={this.fetchPatientsDesc}>\n                 Sort Desc\n               </Button>\n              {this.state.isLoading ? (\n                <Spinner />\n              ) : (\n                <PatientList\n                  patients={this.state.patients}\n                  authUserId={this.context.userId}\n                  onViewDetail={this.showDetailHandler}\n                />\n              )}\n              </Row>\n              </Container>\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"SearchInput\">\n              <Container className=\"containerSearchUserInput\">\n                {this.context.token && (\n                <Row className=\"searchUserRowAdd\">\n                <Button variant=\"primary\" onClick={this.startSearchPatientHandler}>Search</Button>\n                </Row>\n              )}\n\n              <Row className=\"searchUserRowForm\">\n              <Col md={10} className=\"searchUserColForm\">\n              <Tabs defaultActiveKey=\"Field\" id=\"uncontrolled-tab-example\">\n              <Tab eventKey=\"Search\" title=\"Search:\" disabled>\n              </Tab>\n              <Tab eventKey=\"Field\" title=\"Search by Field:\">\n              {this.state.searching !== true && (\n                <Button variant=\"outline-warning\" className=\"confirmEditButton\" size=\"lg\">\n                  Click the 'Search' Button start\n                </Button>\n              )}\n              {this.state.searching === true && (\n                <SearchPatientForm\n                authUserId={this.context.userId}\n                canCancel\n                  canConfirm\n                  onCancel={this.modalCancelHandler}\n                  onConfirm={this.modalConfirmSearchHandler}\n                  confirmText=\"Search\"\n                  patient={this.context.selectedPatient}\n                />\n              )}\n              </Tab>\n              <Tab eventKey=\"Id\" title=\"Search by ID:\">\n              {this.state.searching !== true && (\n                <Button variant=\"outline-warning\" className=\"confirmEditButton\" size=\"lg\">\n                  Click the 'Search' Button start\n                </Button>\n              )}\n              {this.state.searching === true && (\n                <SearchPatientIdForm\n                authUserId={this.context.userId}\n                canCancel\n                  canConfirm\n                  onCancel={this.modalCancelHandler}\n                  onConfirm={this.modalConfirmSearchIdHandler}\n                  confirmText=\"Search\"\n                  patient={this.context.selectedPatient}\n                />\n              )}\n              </Tab>\n\n              <Tab eventKey=\"Name\" title=\"Search by Name:\">\n              {this.state.searching !== true && (\n                <Button variant=\"outline-warning\" className=\"confirmEditButton\" size=\"lg\">\n                  Click the 'Search' Button start\n                </Button>\n              )}\n              {this.state.searching === true && (\n                <SearchPatientNameForm\n                authUserId={this.context.userId}\n                canCancel\n                  canConfirm\n                  onCancel={this.modalCancelHandler}\n                  onConfirm={this.modalConfirmSearchNameHandler}\n                  confirmText=\"Search\"\n                  patient={this.context.selectedPatient}\n                />\n              )}\n              </Tab>\n              </Tabs>\n              </Col>\n              </Row>\n              </Container>\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"SearchResult\">\n              <Container className=\"containerSearchUserResults\">\n              <Row>\n                <Card className=\"searchCard\">\n                  <Card.Body className=\"searchCardBody\">\n                    <Card.Title>Your Search</Card.Title>\n                    <Card.Text>\n                      Field: {this.state.patientSearchField}\n                    </Card.Text>\n                    <Card.Text>\n                      Query: {this.state.patientSearchQuery}\n                    </Card.Text>\n                  </Card.Body>\n                </Card>\n              </Row>\n              <Row className=\"searchListRow\">\n              {\n                this.state.searchPatients !== [] &&\n                <SearchPatientList\n                  searchPatients={this.state.searchPatients}\n                  authUserId={this.context.userId}\n                  onCancel={this.modalCancelHandler}\n                    onViewDetail={this.showDetailHandler}\n                />\n              }\n              </Row>\n              </Container>\n            </Tab.Pane>\n          </Tab.Content>\n        </Col>\n      </Row>\n    </Tab.Container>\n\n\n\n    </Container>\n\n\n\n\n\n    </Col>\n\n    <Col md={3} className=\"MasterCol3\">\n\n\n    </Col>\n    </Row>\n\n</Accordion>\n\n      </React.Fragment>\n    );\n  }\n}\n\nexport default PatientsPage;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\n// import { NavLink } from 'react-router-dom';\n\nimport './UserItem.css';\n\nconst appointmentItem = props => (\n\n  <li key={props.appointmentId} className=\"users__list-item_master\">\n    <div>\n    <h5 className=\"userItemHeading\">Patient:</h5>\n    <p className=\"userItemText\">\n      {props.patient}\n    </p>\n    <h5 className=\"userItemHeading\">Date:</h5>\n    <p className=\"userItemText\">\n      {props.date}\n    </p>\n    <h5 className=\"userItemHeading\">Time:</h5>\n    <p className=\"userItemText\">\n      {props.time}\n    </p>\n\n    </div>\n    <div>\n    <Button variant=\"primary\" onClick={props.onDetail.bind(this, props._id)}>\n          Details\n        </Button>\n    </div>\n  </li>\n);\n\nexport default appointmentItem;\n","import React from 'react';\n\nimport AppointmentItem from './AppointmentItem/AppointmentItem';\nimport './UserList.css';\n\nconst appointmentList = props => {\n\n  const appointment = props.appointments.map(appointment => {\n\n    const appointmentDate = new Date(appointment.date.substr(0,10)*1000).toISOString().slice(0,10);\n    const appointmentPatient = appointment.patient;\n\n    return (\n      <AppointmentItem\n        key={appointment._id}\n        userId={appointment.authUserId}\n        _id={appointment._id}\n        title={appointment.title}\n        patient={appointmentPatient.name}\n        date={appointmentDate}\n        time={appointment.time}\n        onDetail={props.onViewDetail}\n      />\n    );\n  });\n\n  return <ul className=\"user__list1_master\">{appointment}</ul>;\n};\n\nexport default appointmentList;\n","import React from 'react';\n\nimport './UserItem.css';\n\n\nconst appointmentNoteItem = props => (\n  <li key={props.userId} className=\"users__list-item_master\">\n    <div>\n      <p>\n        Note: {props.note}\n      </p>\n    </div>\n  </li>\n);\n\nexport default appointmentNoteItem;\n","import React from 'react';\n\nimport AppointmentNoteItem from './AppointmentItem/AppointmentNoteItem';\nimport './UserList.css';\n\nconst appointmentNoteList = props => {\n  console.log(\"appointment notes list props\", props.appointmentNote);\n  const appointmentNote = props.appointmentNote.map(note => {\n    return (\n      <AppointmentNoteItem\n        key={note}\n        userId={props.authUserId}\n        note={note}\n      />\n    );\n  });\n\n  return <ul className=\"user__list1_master\">{appointmentNote}</ul>;\n};\n\nexport default appointmentNoteList;\n","import React from 'react';\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\nimport Accordion from 'react-bootstrap/Accordion';\nimport AppointmentNoteList from './AppointmentList/AppointmentNoteList';\n\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nimport './PatientDetail.css';\n\nconst AppointmentDetail = (props) => {\n  const {...appointment} = props.appointment;\n  const authUserId = props.authUserId;\n  const appointmentDate = new Date(appointment.date.substr(0,10)*1000).toISOString().slice(0,10);\n  const appointmentNote = appointment.notes;\n  const appointmentPatientConsultant = appointment.patient.consultant;\n  console.log(\"appointmentPatientConsultant:  \", appointmentPatientConsultant);\n  console.log(\"AppointmentDetail.props.appointment:  \", {...appointment}, appointmentNote);\n  return (\n    <div className=\"PatientDetailBox\">\n    <Card className=\"PatientDetailCard\">\n    <Card.Body>\n      <Card.Title><span className=\"ul\">Appointment Details</span></Card.Title>\n\n      <Row className=\"detailCardRow\">\n        <Col md={6} className=\"detailCardCol\">\n          <Card.Text>\n            <span className=\"bold\">ID :</span> {appointment._id}\n          </Card.Text>\n          <Card.Text>\n            <span className=\"bold\">Date :</span> {appointmentDate}\n          </Card.Text>\n          <Card.Text>\n            <span className=\"bold\">Time :</span> {appointment.time}\n          </Card.Text>\n          <Card.Text>\n            <span className=\"bold\">Seen Time :</span> {appointment.seenTime}\n          </Card.Text>\n          <Card.Text>\n            <span className=\"bold\">Check-in Time :</span> {appointment.checkinTime}\n          </Card.Text>\n          <Card.Text>\n            <span className=\"bold\">Title :</span> {appointment.title}\n          </Card.Text>\n          <Card.Text>\n            <span className=\"bold\">Type :</span> {appointment.type}\n          </Card.Text>\n\n        </Col>\n\n        <Col md={6} className=\"detailCardCol\">\n          <Card.Text>\n            <span className=\"bold\">Patient Name :</span> {appointment.patient.name}\n          </Card.Text>\n          <Card.Text>\n            <span className=\"bold\">Patient Phone :</span> {appointment.patient.contact.phone}\n          </Card.Text>\n          <Card.Text>\n            <span className=\"bold\">Patient Email :</span> {appointment.patient.contact.email}\n          </Card.Text>\n          <Card.Text>\n            <span className=\"bold\">Description :</span> {appointment.description}\n          </Card.Text>\n          <Card.Text>\n            <span className=\"bold\">Location :</span> {appointment.location}\n          </Card.Text>\n          <Card.Text>\n            <span className=\"bold\">In-Progress ?</span> {appointment.inProgress}\n          </Card.Text>\n          {appointment.important === true &&(\n            <p>Yes</p>\n          )}\n          <Card.Text>\n            <span className=\"bold\">Attended ?</span> {appointment.attended}\n          </Card.Text>\n          {appointment.attended === true &&(\n            <p>Yes</p>\n          )}\n          <Card.Text>\n            <span className=\"bold\">Important ?</span>\n          </Card.Text>\n          {appointment.important === true &&(\n            <p>Yes</p>\n          )}\n\n        </Col>\n\n      </Row>\n\n      <Row className=\"detailCardRow\">\n        <Col className=\"detailCardCol\">\n        <Card.Text>\n        <span className=\"bold\">Notes :</span>\n        </Card.Text>\n        </Col>\n      </Row>\n\n      <Row className=\"detailCardRow\">\n        <Col md={6} className=\"detailCardCol\">\n          { props.canDelete === true && (\n            <Button variant=\"danger\" onClick={props.onDelete}>\n              Delete Appointment !!??\n            </Button>\n          )}\n        </Col>\n\n        <Col md={6} className=\"detailCardCol\">\n          <Button variant=\"warning\" onClick={props.onCreatePdf.bind(this, appointment)}>\n            Create Pdf\n          </Button>\n        </Col>\n      </Row>\n\n      <AppointmentNoteList\n        appointmentNote={appointmentNote}\n        authUserId={props.authUserId}\n        />\n\n    </Card.Body>\n\n\n  </Card>\n    </div>\n\n  );\n}\n\nexport default AppointmentDetail;\n","import React from 'react';\n// import { NavLink } from 'react-router-dom';\n\n\nimport './UserItem.css';\n\nconst searchAppointmentItem = props => (\n  <li key={props.appointmentId} className=\"users__list-item_master\">\n    <div>\n      <h1> Title: {props.title}</h1>\n      <p>\n        Type: {props.type}\n      </p>\n\n    </div>\n    <div>\n    <button className=\"btn\" onClick={props.onDetail.bind(this, props._id)}>\n          View Details\n        </button>\n    </div>\n  </li>\n);\n\nexport default searchAppointmentItem;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Accordion from 'react-bootstrap/Accordion';\n\nimport SearchAppointmentItem from './AppointmentItem/SearchAppointmentItem';\nimport './UserList.css';\n\nconst searchAppointmentList = props => {\n  const searchAppointments = props.searchAppointments.map(appointment => {\n    return (\n      <React.Fragment>\n      <SearchAppointmentItem\n        key={appointment._id}\n        userId={props.authUserId}\n        _id={appointment._id}\n        title={appointment.title}\n        type={appointment.type}\n        onDetail={props.onViewDetail}\n      />\n      </React.Fragment>\n    );\n  });\n\n  return <ul className=\"user__list1_master\">{searchAppointments}</ul>;\n};\n\nexport default searchAppointmentList;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Accordion from 'react-bootstrap/Accordion';\n\n// import AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst SearchAppointmentForm = (props) => {\n// const {...search} = props.search;\n\nreturn (\n<div className=\"SearchFormContainer\">\n  <Form onSubmit={props.onConfirm}>\n  <Form.Group controlId=\"formBasicFieldSelect\">\n  <Form.Label>Field Options</Form.Label>\n  <Form.Control as=\"select\">\n  <option>select</option>\n  <option>title</option>\n  <option>type</option>\n  <option>date</option>\n  <option>checkinTime</option>\n  <option>seenTime</option>\n  <option>location</option>\n  <option>description</option>\n  <option>patient.name</option>\n  <option>inProgress</option>\n  <option>attended</option>\n  <option>important</option>\n  </Form.Control>\n  </Form.Group>\n\n<Form.Group controlId=\"formBasicField\">\n<Form.Label>Field</Form.Label>\n<Form.Control type=\"text\" placeholder=\"Field\"/>\n</Form.Group>\n\n<Form.Group controlId=\"formBasicQuery\">\n<Form.Label>Query</Form.Label>\n<Form.Control type=\"textarea\" rows=\"5\" placeholder=\"Query\" />\n</Form.Group>\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"5\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n\n{props.canConfirm && (\n  <Button variant=\"success\" type=\"submit\">Search</Button>\n)}\n\n{\n// <AuthContext.Consumer>\n// </AuthContext.Consumer>\n\n\n// populate feilds with user object fields\n}\n</Form>\n</div>\n\n\n)};\n\nexport default SearchAppointmentForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Accordion from 'react-bootstrap/Accordion';\n\n// import AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst SearchAppointmentIdForm = (props) => {\n// const {...search} = props.search;\n\nreturn (\n<div className=\"SearchFormContainer\">\n  <Form onSubmit={props.onConfirm}>\n\n<Form.Group controlId=\"formBasicId\">\n<Form.Label>Appointment Id</Form.Label>\n<Form.Control type=\"text\" placeholder=\"Id\"/>\n</Form.Group>\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"5\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n\n{props.canConfirm && (\n  <Button variant=\"success\" type=\"submit\">Search</Button>\n)}\n\n{\n// <AuthContext.Consumer>\n// </AuthContext.Consumer>\n\n\n// populate feilds with user object fields\n}\n</Form>\n</div>\n\n\n)};\n\nexport default SearchAppointmentIdForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Accordion from 'react-bootstrap/Accordion';\n\n// import AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst SearchAppointmentPatientForm = (props) => {\n// const {...search} = props.search;\n\nreturn (\n<div className=\"SearchFormContainer\">\n  <Form onSubmit={props.onConfirm}>\n\n<Form.Group controlId=\"formBasicPatientId\">\n<Form.Label>Patient Id</Form.Label>\n<Form.Control type=\"text\" placeholder=\"Patient Id\"/>\n</Form.Group>\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"5\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n\n{props.canConfirm && (\n  <Button variant=\"success\" type=\"submit\">Search</Button>\n)}\n\n{\n// <AuthContext.Consumer>\n// </AuthContext.Consumer>\n\n\n// populate feilds with user object fields\n}\n</Form>\n</div>\n\n\n)};\n\nexport default SearchAppointmentPatientForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Accordion from 'react-bootstrap/Accordion';\n\n// import AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst SearchAppointmentDateForm = (props) => {\n// const {...search} = props.search;\n\nreturn (\n<div className=\"SearchFormContainer\">\n  <Form onSubmit={props.onConfirm}>\n\n<Form.Group controlId=\"formBasicDate\">\n<Form.Label>Appointment Date</Form.Label>\n<Form.Control type=\"date\" placeholder=\"Appointment Date\"/>\n</Form.Group>\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"5\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n\n{props.canConfirm && (\n  <Button variant=\"success\" type=\"submit\">Search</Button>\n)}\n\n{\n// <AuthContext.Consumer>\n// </AuthContext.Consumer>\n\n\n// populate feilds with user object fields\n}\n</Form>\n</div>\n\n\n)};\n\nexport default SearchAppointmentDateForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Accordion from 'react-bootstrap/Accordion';\n\n// import AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst SearchAppointmentDateRangeForm = (props) => {\n// const {...search} = props.search;\n\nreturn (\n<div className=\"SearchFormContainer\">\n  <Form onSubmit={props.onConfirm}>\n\n<Form.Group controlId=\"formBasicStartDate\">\n<Form.Label>Appointment Start Date</Form.Label>\n<Form.Control type=\"date\" placeholder=\"Appointment Date Range\"/>\n</Form.Group>\n<Form.Group controlId=\"formBasicEndDate\">\n<Form.Label>Appointment End Date</Form.Label>\n<Form.Control type=\"date\" placeholder=\"Appointment Date Range\"/>\n</Form.Group>\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"5\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n\n{props.canConfirm && (\n  <Button variant=\"success\" type=\"submit\">Search</Button>\n)}\n\n{\n// <AuthContext.Consumer>\n// </AuthContext.Consumer>\n\n\n// populate feilds with user object fields\n}\n</Form>\n</div>\n\n\n)};\n\nexport default SearchAppointmentDateRangeForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Accordion from 'react-bootstrap/Accordion';\nimport Alert from 'react-bootstrap/Alert'\nimport TimeField from 'react-simple-timefield';\n// import FormCheck from 'react-bootstrap/FormCheck'\n// import { NavLink } from 'react-router-dom';\nimport AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst CreateAppointmentForm = (props) => {\n\n  // console.log({...props});\n  console.log(\"CreateAppointmentForm:  \", AuthContext.token);\n\nreturn (\n<div className=\"CreateFormContainer\">\n<Form onSubmit={props.onConfirm}>\n<Form.Row>\n<Alert variant=\"primary\">\n  Create an appointment for: {props.selectedPatient.name}\n</Alert>\n</Form.Row>\n<Form.Row>\n  <Form.Group as={Col} controlId=\"formGridTitle\">\n    <Form.Label>Title</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"Title\"/>\n  </Form.Group>\n\n<Form.Group as={Col} controlId=\"formGridType\">\n  <Form.Label>Type</Form.Label>\n  <Form.Control type=\"text\" placeholder=\"Type\" />\n</Form.Group>\n\n<Form.Group as={Col} controlId=\"formGridLocation\">\n  <Form.Label>Location</Form.Label>\n  <Form.Control type=\"text\" placeholder=\"Location\" />\n</Form.Group>\n</Form.Row>\n\n<Form.Row>\n<Form.Group as={Col} controlId=\"formGridDate\">\n  <Form.Label>Date</Form.Label>\n  <Form.Control type=\"date\" placeholder=\"Date\" />\n</Form.Group>\n<Form.Group as={Col} controlId=\"formGridTime\">\n  <Form.Label>Scheduled Time</Form.Label>\n    <Form.Control type=\"time\" placeholder=\"Time\" />\n</Form.Group>\n<Form.Group as={Col} controlId=\"formGridCheckinTime\">\n  <Form.Label>Check-in Time</Form.Label>\n    <Form.Control type=\"time\" placeholder=\"CheckinTime\" />\n</Form.Group>\n<Form.Group as={Col} controlId=\"formGridSeenTime\">\n  <Form.Label>Seen Time</Form.Label>\n    <Form.Control type=\"time\" placeholder=\"SeenTime\" />\n</Form.Group>\n</Form.Row>\n\n<Form.Row>\n<Form.Group as={Col} controlId=\"formGridDescription\">\n  <Form.Label>Description</Form.Label>\n  <Form.Control as=\"textarea\" rows=\"2\" placeholder=\"Description\" />\n</Form.Group>\n\n<Form.Group as={Col} controlId=\"formGridInProgress\">\n      <Form.Label>In Progress ?</Form.Label>\n      <Form.Control as=\"select\">\n        <option>false</option>\n        <option>true</option>\n      </Form.Control>\n    </Form.Group>\n\n    <Form.Group as={Col} controlId=\"formGridAttended\">\n          <Form.Label>Attended ?</Form.Label>\n          <Form.Control as=\"select\">\n            <option>false</option>\n            <option>true</option>\n          </Form.Control>\n        </Form.Group>\n\n        <Form.Group as={Col} controlId=\"formGridImportant\">\n              <Form.Label>Important ?</Form.Label>\n              <Form.Control as=\"select\">\n                <option>false</option>\n                <option>true</option>\n              </Form.Control>\n            </Form.Group>\n</Form.Row>\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"4\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n\n{props.canConfirm && (\n  <Button variant=\"success\" type=\"submit\">Create New</Button>\n)}\n\n</Form>\n</div>\n\n)};\n\nexport default CreateAppointmentForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Accordion from 'react-bootstrap/Accordion'\n// import FormCheck from 'react-bootstrap/FormCheck'\n// import AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst UpdateAppointmentForm = (props) => {\n\nconsole.log(\"UpdateAppointmentForm.props:  \", {...props});\nconst {...appointment} = props.appointment;\nconsole.log(\"UpdateAppointmentForm.props.appointment:  \", {...appointment});\n\n\nreturn (\n<div className=\"UpdateFormContainer\">\n<Form onSubmit={props.onConfirm}>\n<Form.Row>\n  <Form.Group as={Col} controlId=\"formGridTitle\">\n    <Form.Label>Title</Form.Label>\n    <Form.Control type=\"text\" placeholder={appointment.title}/>\n  </Form.Group>\n\n<Form.Group as={Col} controlId=\"formGridType\">\n  <Form.Label>Type</Form.Label>\n  <Form.Control type=\"text\" placeholder={appointment.type} />\n</Form.Group>\n\n<Form.Group as={Col} controlId=\"formGridLocation\">\n  <Form.Label>Location</Form.Label>\n  <Form.Control type=\"text\" placeholder={appointment.location} />\n</Form.Group>\n</Form.Row>\n\n<Form.Row>\n<Form.Group as={Col} controlId=\"formGridDate\">\n  <Form.Label>Date</Form.Label>\n  <Form.Control type=\"date\" placeholder={appointment.date} />\n</Form.Group>\n<Form.Group as={Col} controlId=\"formGridTime\">\n  <Form.Label>Scheduled Time</Form.Label>\n    <Form.Control type=\"time\" placeholder={appointment.time}/>\n</Form.Group>\n<Form.Group as={Col} controlId=\"formGridCheckinTime\">\n  <Form.Label>Check-in Time</Form.Label>\n    <Form.Control type=\"time\" placeholder={appointment.checkinTime}/>\n</Form.Group>\n<Form.Group as={Col} controlId=\"formGridSeenTime\">\n  <Form.Label>Seen Time</Form.Label>\n    <Form.Control type=\"time\" placeholder={appointment.seenTime}/>\n</Form.Group>\n</Form.Row>\n\n<Form.Row>\n<Form.Group as={Col} controlId=\"formGridDescription\">\n  <Form.Label>Description</Form.Label>\n  <Form.Control as=\"textarea\" rows=\"2\" placeholder={appointment.description} />\n</Form.Group>\n\n<Form.Group as={Col} controlId=\"formGridInProgress\">\n      <Form.Label>In Progress ?</Form.Label>\n      <Form.Control as=\"select\">\n        <option>false</option>\n        <option>true</option>\n      </Form.Control>\n    </Form.Group>\n\n    <Form.Group as={Col} controlId=\"formGridAttended\">\n          <Form.Label>Attended ?</Form.Label>\n          <Form.Control as=\"select\">\n            <option>false</option>\n            <option>true</option>\n          </Form.Control>\n        </Form.Group>\n\n        <Form.Group as={Col} controlId=\"formGridImportant\">\n              <Form.Label>Important ?</Form.Label>\n              <Form.Control as=\"select\">\n                <option>false</option>\n                <option>true</option>\n              </Form.Control>\n            </Form.Group>\n</Form.Row>\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"2\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n\n{props.canConfirm && (\n  <Accordion.Toggle as={Button} variant=\"success\" eventKey=\"2\" className=\"btn\" type=\"submit\">\n  Submit\n  </Accordion.Toggle>\n)}\n\n</Form>\n{\n  // <AuthContext.Consumer>\n// </AuthContext.Consumer>\n}\n</div>\n\n)};\n\nexport default UpdateAppointmentForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Accordion from 'react-bootstrap/Accordion'\n// import FormCheck from 'react-bootstrap/FormCheck'\n// import AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst UpdateAppointmentFieldForm = (props) => {\n\nconsole.log(\"UpdateAppointmentFieldForm.props:  \", {...props});\nconst {...appointment} = props.appointment;\nconsole.log(\"UpdateAppointmentFieldForm.props.user:  \", {...appointment});\n\nreturn (\n<div className=\"UpdateFormContainer\">\n<Form onSubmit={props.onConfirm}>\n<Form.Row>\n  <Form.Group as={Col} controlId=\"formGridFieldSelect\">\n  <Form.Label>Field Options</Form.Label>\n  <Form.Control as=\"select\">\n    <option>select</option>\n    <option>title</option>\n    <option>type</option>\n    <option>date</option>\n    <option>checkinTime</option>\n    <option>seenTime</option>\n    <option>location</option>\n    <option>description</option>\n    <option>patient.name</option>\n    <option>inProgress</option>\n    <option>attended</option>\n    <option>important</option>\n  </Form.Control>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridField\">\n    <Form.Label>Field</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"Field\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridQuery\">\n    <Form.Label>Query</Form.Label>\n    <Form.Label>Time Format 24Hr ex 16:15</Form.Label>\n    <Form.Label>Date Format YYYY-MM-DD</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"Query\"/>\n  </Form.Group>\n</Form.Row>\n\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"2\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n{props.canCancelProfile && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"5\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n\n{props.canConfirm && (\n  // <Accordion.Toggle as={Button} variant=\"success\" eventKey=\"2\" className=\"btn\" type=\"submit\">\n  // Submit\n  // </Accordion.Toggle>\n  <Button variant=\"success\" type=\"submit\">\n  Submit\n  </Button>\n)}\n\n</Form>\n{\n  // <AuthContext.Consumer>\n// </AuthContext.Consumer>\n}\n</div>\n\n)};\n\nexport default UpdateAppointmentFieldForm;\n","import ReactDOM from 'react-dom';\nimport React, { Component } from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Button from 'react-bootstrap/Button';\nimport Accordion from 'react-bootstrap/Accordion';\nimport SidebarPage from './Sidebar';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\nimport TabContainer from 'react-bootstrap/TabContainer';\nimport TabContent from 'react-bootstrap/TabContent';\nimport TabPane from 'react-bootstrap/TabPane';\nimport Nav from 'react-bootstrap/Nav';\nimport Card from 'react-bootstrap/Card';\n\n// import Modal from '../components/Modal/Modal';\n// import Backdrop from '../components/Backdrop/Backdrop';\nimport AlertBox from '../components/AlertBox';\nimport PdfCreator from '../components/PdfCreator';\n\nimport AppointmentList from '../components/Appointments/AppointmentList/AppointmentList';\nimport AppointmentDetail from '../components/Appointments/AppointmentDetail';\nimport PatientDetail from '../components/Patients/PatientDetail';\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\nimport SearchAppointmentList from '../components/Appointments/AppointmentList/SearchAppointmentList';\nimport SearchAppointmentForm from '../components/Forms/SearchAppointmentForm';\nimport SearchAppointmentIdForm from '../components/Forms/SearchAppointmentIdForm';\nimport SearchAppointmentPatientForm from '../components/Forms/SearchAppointmentPatientForm';\nimport SearchAppointmentDateForm from '../components/Forms/SearchAppointmentDateForm';\nimport SearchAppointmentDateRangeForm from '../components/Forms/SearchAppointmentDateRangeForm';\n\nimport CreateAppointmentForm from '../components/Forms/CreateAppointmentForm';\nimport UpdateAppointmentForm from '../components/Forms/UpdateAppointmentForm';\nimport UpdateAppointmentFieldForm from '../components/Forms/UpdateAppointmentFieldForm';\nimport './Users.css';\n\nclass AppointmentsPage extends Component {\n  state = {\n    creating: false,\n    updating: false,\n    deleting: false,\n    searching: false,\n    searchAppointments: [],\n    appointments: [],\n    isLoading: false,\n    selectedAppointment: null,\n    selectedPatient: null,\n    appointmentUpdateField: null,\n    appointmentSearchField: null,\n    appointmentSearchQuery: null,\n    canDelete: null,\n    userAlert: null,\n    createPdf: false,\n    pdfData: null,\n  };\n  isActive = true;\n\n  static contextType = AuthContext;\n\n  // constructor(props) {\n  //   super(props);\n  // }\n\n  componentDidMount() {\n    this.fetchAppointments();\n    this.fetchAppointmentToday();\n    this.fetchAppointmentInProgress();\n    if (this.context.user.name === 'admin579'){\n      this.setState({canDelete: true})\n    }\n    // this.setState({selectedPatient: this.context.selectedPatient});\n    // console.log(`\n    //   context.selectedPatient: ${JSON.stringify(this.context.selectedPatient)},\n    //   state.selectedPatient: ${JSON.stringify(this.state.selectedPatient)},\n    //   `);\n  }\n\n\n  startCreateAppointmentHandler = () => {\n    this.setState({ creating: true });\n    console.log(\"CreateAppointmentForm...\", this.context.selectedPatient);\n  };\n  startUpdateAppointmentHandler = () => {\n    this.setState({ updating: true });\n    console.log(\"UpdateAppointmentForm...\");\n  };\n  startSearchAppointmentHandler = () => {\n    this.setState({ searching: true });\n    console.log(\"SearchAppointmentForm...\");\n  };\n\n  modalConfirmHandler = (event) => {\n\n    console.log(\"CreateAppointmentFormData:  \", event.target.formGridTitle.value);\n\n    this.setState({ creating: false });\n    const userId = this.context.userId;\n    const selectedPatientId = this.context.selectedPatient._id;\n    console.log(`\n        userId: ${userId}\n        patientId: ${selectedPatientId}\n      `);\n\n      if (selectedPatientId === undefined) {\n        console.log(`\n          select a Patient before creating an Appointment!!\n          `);\n          this.setState({userAlert: \"select a Patient before creating an Appointment!!...\"});\n          return\n      }\n    const title = event.target.formGridTitle.value;\n    const type = event.target.formGridType.value;\n    const date = event.target.formGridDate.value;\n    const time = event.target.formGridTime.value;\n    const seenTime = event.target.formGridSeenTime.value;\n    const checkinTime = event.target.formGridCheckinTime.value;\n    const location = event.target.formGridLocation.value;\n    const description = event.target.formGridDescription.value;\n    const inProgress = event.target.formGridInProgress.value;\n    const attended = event.target.formGridAttended.value;\n    const important = event.target.formGridImportant.value;\n\n    if (\n      title.trim().length === 0 ||\n      type.trim().length === 0 ||\n      date.trim().length === 0 ||\n      time.trim().length === 0 ||\n      location.trim().length === 0 ||\n      description.trim().length === 0 ||\n      inProgress.trim().length === 0 ||\n      attended.trim().length === 0 ||\n      important.trim().length === 0\n    ) {\n      console.log(\"blank fields detected!!!...Please try again...\");\n      this.setState({userAlert: \"blank fields detected!!!...Please try again...\"});\n      return\n    }\n\n    const appointment = { title, type, date, time, seenTime, checkinTime, location, description, inProgress, attended, important };\n    console.log(`\n        creating appointment...\n        title: ${title},\n        type: ${type},\n        date: ${date},\n        time: ${time},\n        seenTime: ${seenTime},\n        checkinTime: ${checkinTime},\n        location: ${location},\n        description: ${description},\n        inProgress: ${inProgress},\n        attended: ${attended},\n        important: ${important},\n      `);\n      this.setState({userAlert: \"creating appointment...\"});\n\n    const requestBody = {\n      query: `\n          mutation {createAppointment(userId:\\\"${userId}\\\",patientId:\\\"${selectedPatientId}\\\",appointmentInput:{title:\\\"${title}\\\",type:\\\"${type}\\\",date:\\\"${date}\\\",time:\\\"${time}\\\",seenTime:\\\"${seenTime}\\\",checkinTime:\\\"${checkinTime}\\\",location:\\\"${location}\\\",description:\\\"${description}\\\",inProgress:${inProgress},attended:${attended},important:${important},})\n          {_id,title,type,date,time,seenTime,checkinTime,location,description,patient{_id,name,appointments{_id,date,title}},inProgress,attended,important}}\n        `,\n    };\n\n    const token = this.context.token;\n\n    // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data.createAppointment));\n        const responseAlert = JSON.stringify(resData.data).slice(2,15);\n        this.setState({userAlert: responseAlert});\n\n        this.setState(prevState => {\n          const updatedAppointments = [...prevState.appointments];\n          updatedAppointments.push(resData.data.createAppointment);\n\n          return { appointments: updatedAppointments };\n        });\n        this.context.appointments = this.state.appointments;\n        // this.fetchAppointments();\n\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n  };\n\n  modalCancelHandler = () => {\n    this.setState({ creating: false, updating: false, searching: false, selectedAppointment: null });\n  };\n\n\n  modalConfirmUpdateHandler = (event) => {\n\n    if(this.context.user.role !== 'admin') {\n      console.log(\"Not the Admin! No edit permission!!\");\n      this.setState({userAlert: \"Not the Admin! No edit permission!!\"});\n    }\n\n    const userId = this.context.userId;\n    const appointmentId = this.context.selectedAppointment._id;\n    const selectedPatientId = this.context.selectedPatientId;\n    console.log(`\n        userId: ${userId}\n        appointmentd: ${appointmentId},\n      `);\n\n    // console.log(\"UpdateUserFormData:  \", event);\n    console.log(\"UpdateAppointmentFormData:  \", event.target.formGridTitle.value);\n\n\n    this.setState({ updating: false });\n    let title = event.target.formGridTitle.value;\n    let type = event.target.formGridType.value;\n    let date = event.target.formGridDate.value;\n    let time = event.target.formGridTime.value;\n    let seenTime = event.target.formGridSeenTime.value;\n    let checkinTime = event.target.formGridCheckinTime.value;\n    let location = event.target.formGridLocation.value;\n    let description = event.target.formGridDescription.value;\n    let inProgress = event.target.formGridInProgress.value;\n    let attended = event.target.formGridAttended.value;\n    let important = event.target.formGridImportant.value;\n\n    if (title.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      title  = this.context.selectedAppointment.title;\n      // return;\n    }\n    if (type.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      type  = this.context.selectedAppointment.type;\n    }\n    if (date.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      date  = this.context.selectedAppointment.date;\n    }\n    if (time.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      time  = this.context.selectedAppointment.time;\n    }\n    if (seenTime.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      seenTime  = this.context.selectedAppointment.seenTime;\n    }\n    if (checkinTime.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      checkinTime  = this.context.selectedAppointment.checkinTime;\n    }\n    if (location.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      location  = this.context.selectedAppointment.location;\n    }\n    if (description.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      description  = this.context.selectedAppointment.description;\n    }\n    if (inProgress.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      inProgress  = this.context.selectedAppointment.inProgress;\n    }\n    if (attended.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      attended  = this.context.selectedAppointment.attended;\n    }\n    if (important.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      important  = this.context.selectedAppointment.important;\n    }\n\n    const appointment = { title, type, date, time, seenTime, checkinTime, location, description, inProgress, attended, important, };\n    console.log(`\n        updating appointment...\n        title: ${title},\n        type: ${type},\n        date: ${date},\n        time: ${time},\n        seenTime: ${seenTime},\n        checkinTime: ${checkinTime},\n        location: ${location},\n        description: ${description},\n        inProgress: ${inProgress},\n        attended: ${attended},\n        important: ${important},\n      `);\n      this.setState({userAlert: \"updating appointment...\"});\n\n    const requestBody = {\n      query: `\n      mutation {updateAppointment(userId:\\\"${userId}\\\",appointmentId:\\\"${appointmentId}\\\",appointmentInput:{title:\\\"${title}\\\",type:\\\"${type}\\\",date:\\\"${date}\\\",time:\\\"${time}\\\",seenTime:\\\"${seenTime}\\\",checkinTime:\\\"${checkinTime}\\\",location:\\\"${location}\\\",description:\\\"${description}\\\",inProgress:${inProgress},attended:${attended},important:${important},})\n      {_id,title,type,date,time,seenTime,checkinTime,location,description,patient{_id,name,appointments{_id,date,title}},inProgress,attended,important,notes}}\n        `\n    };\n\n    const token = this.context.token;\n\n    // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n\n        const updatedAppointmentId = resData.data.updateAppointment._id;\n        const updatedAppointment = this.state.appointments.find(e => e._id === updatedAppointmentId);\n        const updatedAppointmentPos = this.state.appointments.indexOf(updatedAppointment);\n        const slicedArray = this.state.appointments.splice(updatedAppointmentPos, 1);\n        console.log(\"updatedAppointment:  \", JSON.stringify(updatedAppointment),\"  updatedPatientPos:  \", updatedAppointmentPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.appointments.push(resData.data.updateAppointment);\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert, selectedAppointment: resData.data.updateAppointment})\n        this.fetchAppointments();\n\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n  };\n\n\n  updateAppointmentPatientHandler = (event) => {\n\n    const token = this.context.token;\n    const userId = this.context.userId;\n    let selectedAppointmentId = this.context.selectedAppointment._id;\n    let selectedPatientId = this.context.selectedPatient._id;\n    if(\n      this.context.user.role !== 'admin'\n    ) {\n      console.log(\"No edit permission!!\");\n      this.setState({userAlert: \"No edit permission!!\"});\n      return;\n    }\n\n    if (selectedPatientId === undefined) {\n      console.log(`\n        select a Patient before creating an Appointment!!\n        `);\n        this.setState({userAlert: \"select a Patient before creating an Appointment!!...\"});\n        return\n    }\n\n    this.setState({ updating: false , patientUpdateField: null });\n\n    console.log(`\n      updating appointment patient...\n      userId: ${userId},\n      appointmentId: ${selectedAppointmentId},\n      patientId: ${selectedPatientId},\n      `);\n      this.setState({userAlert: \"updating appointment patient...\"});\n\n      const requestBody = {\n        query:`\n        mutation {updateAppointmentPatient(userId:\\\"${userId}\\\",appointmentId:\\\"${selectedAppointmentId}\\\",patientId:\\\"${selectedPatientId}\\\")\n        {_id,title,type,date,time,seenTime,checkinTime,location,description,patient{_id,name,appointments{_id,date,title},consultant{reference{_id,name,role}}},inProgress,attended,important}}\n        `\n      }\n\n      // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData));\n\n          const updatedAppointmentId = resData.data.updateAppointmentPatient._id;\n          const updatedAppointment = this.state.appointments.find(e => e._id === updatedAppointmentId);\n          const updatedAppointmentPos = this.state.appointments.indexOf(updatedAppointment);\n          const slicedArray = this.state.appointments.splice(updatedAppointmentPos, 1);\n          console.log(\"updatedAppointment:  \", JSON.stringify(updatedAppointment),\"  updatedPatientPos:  \", updatedAppointmentPos, \"  slicedArray:  \", slicedArray);\n\n          this.state.appointments.push(resData.data.updateAppointmentPatient);\n          const responseAlert = JSON.stringify(resData.data).slice(2,25);\n          this.setState({ userAlert: responseAlert, selectedAppointment: resData.data.updateAppointmentPatient})\n          this.fetchAppointments();\n\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({userAlert: err});\n        });\n\n\n  }\n\n\n  modalConfirmUpdateFieldHandler = (event) => {\n\n    const token = this.context.token;\n    const userId = this.context.userId;\n    let selectedAppointmentId = this.context.selectedAppointment._id;\n    if( this.context.user.role !== 'admin') {\n      console.log(\"Not the creator or Admin! No edit permission!!\");\n      selectedAppointmentId = null;\n    }\n\n      console.log(\"UpdateAppointmentFieldFormData:  \", event.target.formGridField.value);\n      this.setState({ updating: false });\n\n      let field = null;\n      let query = event.target.formGridQuery.value;\n      if (event.target.formGridFieldSelect.value === \"select\") {\n        field = event.target.formGridField.value;\n      } else {\n        field = event.target.formGridFieldSelect.value;\n      }\n\n      const requestBody = {\n        query:`\n        mutation {updateAppointmentField(userId:\\\"${userId}\\\",appointmentId:\\\"${selectedAppointmentId}\\\",field:\\\"${field}\\\",query:\\\"${query}\\\")\n        {_id,title,type,date,time,seenTime,checkinTime,location,description,patient{_id,name,appointments{_id,date,title}},inProgress,attended,important,notes}}\n        `};\n\n      // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData.data.updateAppointmentField));\n\n          const updatedAppointmentId = resData.data.updateAppointmentField._id;\n          const updatedAppointment = this.state.appointments.find(e => e._id === updatedAppointmentId);\n          const updatedAppointmentPos = this.state.appointments.indexOf(updatedAppointment);\n          const slicedArray = this.state.appointments.splice(updatedAppointmentPos, 1);\n          console.log(\"updatedAppointment:  \", JSON.stringify(updatedAppointment),\"  updatedAppointmentPos:  \", updatedAppointmentPos, \"  slicedArray:  \", slicedArray);\n\n          this.state.appointments.push(resData.data.updateAppointmentField);\n          this.context.appointments = this.state.appointments;\n          const responseAlert = JSON.stringify(resData.data).slice(2,25);\n          this.setState({ userAlert: responseAlert, selectedAppointment: resData.data.updateAppointmentField})\n          this.fetchAppointments();\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({userAlert: err});\n        });\n\n  }\n\n\n  modalConfirmSearchHandler = (event) => {\n    console.log(\"SearchAppointmentForm:  \");\n\n\n    let userId = this.context.userId;\n\n      console.log(\"SearchAppointmentFormData:  \", event.target.formBasicField.value);\n      this.setState({ searching: false });\n\n      let field = null;\n      let query = event.target.formBasicQuery.value;\n      if (event.target.formBasicFieldSelect.value === \"select\") {\n        field = event.target.formBasicField.value;\n      } else {\n        field = event.target.formBasicFieldSelect.value;\n      }\n\n      if (\n        field.trim().length === 0 ||\n        query.trim().length === 0\n      ) {\n        console.log(\"blank fields detected!!!...Please try again...\");\n        this.setState({userAlert: \"blank fields detected!!!...Please try again...\"});\n        return;\n      }\n\n      const search = { field, query }\n      console.log(\"Searching for Appointment:  \", JSON.stringify(search));\n\n      const requestBody = {\n        query: `\n          query {getAppointmentField(userId:\"${userId}\", field:\"${field}\", query:\"${query}\")\n          {_id,title,type,date,time,seenTime,checkinTime,location,description,patient{_id,name,appointments{_id,date,title},consultant{reference{_id,name,role}}},inProgress,attended,important}}\n        `}\n\n      const token = this.context.token;\n\n      // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData));\n          const responseAlert = JSON.stringify(resData.data).slice(2,15);\n          this.setState({userAlert: responseAlert});\n\n          const searchAppointments = resData.data.getAppointmentField;\n\n          this.setState({ searchAppointments: searchAppointments})\n          console.log(\"state.searchAppointments:  \", this.state.searchAppointments);\n          // this.fetchAppointments();\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({userAlert: err});\n        });\n  }\n\n  modalConfirmSearchIdHandler = (event) => {\n    console.log(`\n      SearchAppointmentIdFormData\n      `);\n\n      let userId = this.context.userId;\n      this.setState({ searching: false });\n      let selectedAppointmentId = event.target.formBasicId.value;\n\n      const requestBody = {\n        query: `\n          query {getAppointmentId(userId:\"${userId}\", appointmentId:\"${selectedAppointmentId}\")\n          {_id,title,type,date,time,patient{_id,name},location,description,inProgress,important,attended}}\n        `}\n\n      const token = this.context.token;\n\n      // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData));\n          const responseAlert = JSON.stringify(resData.data).slice(2,15);\n          this.setState({userAlert: responseAlert});\n\n          const searchAppointments = resData.data.getAppointmentId;\n\n          this.setState({ searchAppointments: [searchAppointments]})\n          console.log(\"state.searchAppointments:  \", this.state.searchAppointments);\n          // this.fetchUsers();\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({userAlert: err});\n        });\n  }\n\n  modalConfirmSearchPatientHandler = (event) => {\n    console.log(`\n      SearchAppointmentPatientFormData\n      `);\n\n      let userId = this.context.userId;\n      this.setState({ searching: false });\n      let selectedPatientId = event.target.formBasicPatientId.value;\n\n      const requestBody = {\n        query: `\n          query {getAppointmentPatient(userId:\"${userId}\", patientId:\"${selectedPatientId}\")\n          {_id,title,type,date,time,patient{_id,name},location,description,inProgress,important,attended}}\n        `}\n\n      const token = this.context.token;\n\n      // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData));\n          const responseAlert = JSON.stringify(resData.data).slice(2,15);\n          // const responseAlert = JSON.stringify(resData.errors).slice(2,15);\n          this.setState({userAlert: responseAlert});\n\n          const searchAppointments = resData.data.getAppointmentPatient;\n\n          this.setState({ searchAppointments: searchAppointments })\n          // this.state.searchApointments.push(searchAppointments)\n          console.log(\"state.searchApointments:  \", this.state.searchApointments);\n          // this.fetchUsers();\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({userAlert: err});\n        });\n\n  }\n  modalConfirmSearchDateHandler = (event) => {\n    console.log(`\n      SearchAppointmentDateFormData\n      `);\n\n      let userId = this.context.userId;\n      this.setState({ searching: false });\n      let appointmentDate = event.target.formBasicDate.value;\n\n      const requestBody = {\n        query: `\n          query {getAppointmentDate(userId:\"${userId}\",date:\"${appointmentDate}\")\n          {_id,title,type,date,time,patient{_id,name},location,description,inProgress,important,attended}}\n        `}\n\n      const token = this.context.token;\n\n      // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData));\n          const responseAlert = JSON.stringify(resData.data).slice(2,15);\n          this.setState({userAlert: responseAlert});\n\n          const searchAppointments = resData.data.getAppointmentDate;\n\n          this.setState({ searchAppointments: searchAppointments})\n          console.log(\"state.searchAppointments:  \", this.state.searchAppointments);\n          // this.fetchUsers();\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({userAlert: err});\n        });\n\n  }\n  modalConfirmSearchDateRangeHandler = (event) => {\n    console.log(`\n      SearchAppointmentDateRangeFormData\n      `);\n\n      let userId = this.context.userId;\n      this.setState({ searching: false });\n      let appointmentStartDate = event.target.formBasicStartDate.value;\n      let appointmentEndDate = event.target.formBasicEndDate.value;\n\n      const requestBody = {\n        query: `\n          query {getAppointmentDateRange(userId:\"${userId}\",startDate:\"${appointmentStartDate}\",endDate:\"${appointmentEndDate}\")\n          {_id,title,type,date,time,patient{_id,name},location,description,inProgress,important,attended}}\n        `}\n\n      const token = this.context.token;\n\n      // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData));\n          const responseAlert = JSON.stringify(resData.data).slice(2,15);\n          this.setState({userAlert: responseAlert});\n\n          const searchApointments = resData.data.getApointmentId;\n\n          this.setState({ searchApointments: searchApointments})\n          console.log(\"state.searchApointments:  \", this.state.searchApointments);\n          // this.fetchUsers();\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({userAlert: err});\n        });\n\n\n  }\n\n\n\n  modalCancelHandler = () => {\n    this.setState({ creating: false, updating: false, searching: false, selectedAppointment: null });\n  };\n\n\n  fetchAppointments() {\n    console.log(\"'fetch appointments function' context object... \" + JSON.stringify(this.context));\n    const userId = this.context.userId;\n\n    this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n            query {appointments(userId:\"${userId}\")\n            {_id,title,type,date,time,seenTime,checkinTime,location,description,patient{_id,name,contact{email,phone},consultant{reference{_id,name,role}}},inProgress,attended,important,notes}}\n        `};\n\n    // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const appointments = resData.data.appointments;\n        console.log(appointments);\n        const responseAlert = JSON.stringify(resData.data).slice(2,15);\n        this.setState({userAlert: responseAlert});\n\n        this.context.appointments = this.state.appointments;\n        if (this.isActive) {\n          this.setState({ appointments: appointments, isLoading: false });\n        }\n\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n        if (this.isActive) {\n          this.setState({ isLoading: false });\n        }\n      });\n  }\n\n  fetchAppointmentsAsc = () => {\n    console.log(\"'fetch appointments function' context object... \" + JSON.stringify(this.context));\n    const userId = this.context.userId;\n\n    // this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n            query {appointmentsDateAsc(userId:\"${userId}\")\n            {_id,title,type,date,time,seenTime,checkinTime,location,description,patient{_id,name,contact{email,phone},consultant{reference{_id,name,role}}},inProgress,attended,important,notes}}\n        `};\n\n    // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const appointments = resData.data.appointmentsDateAsc;\n        console.log(appointments);\n        const responseAlert = JSON.stringify(resData.data).slice(2,15);\n        this.setState({userAlert: responseAlert});\n\n        this.context.appointments = appointments;\n        this.setState({appointments: appointments})\n        // if (this.isActive) {\n        //   this.setState({ appointments: appointments, isLoading: false });\n        // }\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n        // if (this.isActive) {\n        //   this.setState({ isLoading: false });\n        // }\n      });\n  }\n  fetchAppointmentsDesc = () => {\n    console.log(\"'fetch appointments function' context object... \" + JSON.stringify(this.context));\n    const userId = this.context.userId;\n\n    // this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n            query {appointmentsDateDesc(userId:\"${userId}\")\n            {_id,title,type,date,time,seenTime,checkinTime,location,description,patient{_id,name,contact{email,phone},consultant{reference{_id,name,role}}},inProgress,attended,important,notes}}\n        `};\n\n    // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const appointments = resData.data.appointmentsDateDesc;\n        console.log(appointments);\n        const responseAlert = JSON.stringify(resData.data).slice(2,15);\n        this.setState({userAlert: responseAlert});\n\n        this.context.appointments = appointments;\n        this.setState({appointments: appointments})\n        // if (this.isActive) {\n        //   this.setState({ appointments: appointments, isLoading: false });\n        // }\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n        // if (this.isActive) {\n        //   this.setState({ isLoading: false });\n        // }\n      });\n  }\n\n  modalDeleteHandler = () => {\n    console.log(\"deleting appointment...selectedAppointment:  \", this.context.selectedAppointment);\n\n    const userId = this.context.userId;\n    const selectedAppointmentId = this.context.selectedAppointment._id;\n\n    if(this.context.user.role !== 'admin') {\n      console.log(\"Not the Admin! No edit permission!!\");\n      this.setState({userAlert: \"Not the Admin! No edit permission!!\"});\n    }\n\n    this.setState({deleting: true});\n\n\n    const requestBody = {\n      query: `\n          mutation {deleteAppointment(userId:\"${userId}\",appointmentId:\"${selectedAppointmentId}\")\n          {_id,title,type,date,time,seenTime,checkinTime,location,description,patient{_id,name,appointments{_id,date,title}},inProgress,attended,important,notes}}\n        `};\n\n    // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"resData:  \", resData);\n        // console.log(\"resData.data.deleteAppointment:  \", resData.data.deleteAppointment);\n        let deletedAppointment = resData.data.deleteAppointment;\n        console.log(deletedAppointment);\n        const responseAlert = JSON.stringify(resData.data).slice(2,15);\n        this.setState({userAlert: responseAlert});\n\n        let deletedAppointmentId = deletedAppointment._id;\n        deletedAppointment = this.state.appointments.find(e => e._id === deletedAppointmentId);\n        const deletedAppointmentPos = this.state.appointments.indexOf(deletedAppointment);\n        const slicedArray = this.state.appointments.splice(deletedAppointmentPos, 1);\n        console.log(\"deletedAppointment:  \", JSON.stringify(deletedAppointment),\"  deletedUserPos:  \", deletedAppointmentPos, \"  slicedArray:  \", slicedArray);\n\n        this.setState({ deleting: false });\n\n        this.fetchAppointments();\n\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n        if (this.isActive) {\n          this.setState({ deleting: false });\n        }\n      });\n\n\n  }\n\n  updateAppointmentSpecial (event) {\n\n    console.log(\"special field to update:  \", event.target.value);\n    const field = event.target.value;\n    this.setState({ appointmentUpdateField: field});\n\n  }\n\n\n  showDetailHandler = appointmentId => {\n\n    this.setState(prevState => {\n      const selectedAppointment = prevState.appointments.find(e => e._id === appointmentId);\n      this.setState({selectedAppointment: selectedAppointment});\n      this.context.selectedAppointment = selectedAppointment;\n      console.log(\"selectedAppointment:  \", selectedAppointment);\n      return { selecteAppointment: selectedAppointment };\n    });\n  };\n\n\n  fetchAppointmentToday() {\n    console.log(\"fetching todays appts function:  \");\n\n    const token = this.context.token;\n    const userId = this.context.userId;\n\n    const requestBody = {\n      query: `\n          query {getAppointmentToday(userId:\"${userId}\")\n          {_id,title,type,date,time,patient{_id,name},location,description,inProgress,important,attended}}\n        `\n    };\n\n    // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        this.context.appointmentsToday = resData.data.getAppointmentToday;\n        console.log(\"context today's appts:  \", JSON.stringify(this.context.appointmentsToday));\n\n        const responseAlert = JSON.stringify(resData.data).slice(2,15);\n        this.setState({userAlert: responseAlert});\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n\n  }\n\n\n  fetchAppointmentInProgress() {\n    console.log(\"fetching inProgress appts function:  \");\n\n    const token = this.context.token;\n    const userId = this.context.userId;\n\n    const requestBody = {\n      query: `\n          query {getAppointmentField(userId:\\\"${userId}\\\",field:\\\"inProgress\\\",query:\\\"true\\\"){_id,title,type,date,time,patient{_id,name},location,description,inProgress,important,attended}}\n        `\n    };\n\n    // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        this.context.appointmentsInProgress = resData.data.getAppointmentField;\n        console.log(\"context in progress appts:  \", JSON.stringify(this.context.appointmentsInProgress));\n\n        const responseAlert = JSON.stringify(resData.data).slice(2,15);\n        this.setState({userAlert: responseAlert});\n\n        if (this.state.selectedPatient === {} || this.context.selectedstate === null) {\n          this.setState({userAlert: \"No Patient Selected\"})\n        }\n        console.log(`\n          context.selectedPatient: ${JSON.stringify(this.context.selectedPatient)},\n          state.selectedPatient: ${JSON.stringify(this.state.selectedPatient)},\n          `);\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n\n  }\n\n  createPdf = (appointment) => {\n    console.log(`\n        creating pdf...\n        user: ${JSON.stringify(appointment)}\n      `);\n\n      const pdfData = {\n        title: appointment.title,\n        body: appointment.date,\n      };\n\n    this.setState({createPdf: true, pdfData: pdfData})\n  }\n\n  closePdfCreator = () => {\n    console.log(`\n      closing pdf creator...\n      `);\n      this.setState({createPdf: false, pdfData: null})\n  }\n\n  componentWillUnmount() {\n    this.isActive = false;\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n\n      {this.state.createPdf === true && (\n          <PdfCreator\n            pdfData={this.state.pdfData}\n            onClosePdfCreator={this.closePdfCreator}\n          />\n      )}\n\n      <Accordion>\n\n      <Row>\n\n      <Col md={3} className=\"MasterCol1\">\n\n      <AlertBox\n            authUserId={this.context.userId}\n            alert={this.state.userAlert}\n          />\n      <SidebarPage/>\n\n      </Col>\n\n      <Col md={9} className=\"MasterCol2\">\n\n          <Container className=\"containerCombinedDetail\">\n\n          <Tab.Container id=\"left-tabs-example\" defaultActiveKey=\"appointmentDetail\">\n            <Row>\n              <Col sm={2}>\n                <Nav variant=\"pills\" className=\"flex-column\">\n                  <Nav.Item>\n                    <Nav.Link eventKey=\"MasterList\">MASTER LIST</Nav.Link>\n                  </Nav.Item>\n                  <Nav.Item>\n                    <Nav.Link eventKey=\"appointmentDetail\">Selected</Nav.Link>\n                  </Nav.Item>\n                  <Nav.Item>\n                    <Nav.Link eventKey=\"appointmentCreate\">Create New</Nav.Link>\n                  </Nav.Item>\n                  <Nav.Item>\n                    <Nav.Link eventKey=\"disabled\" disabled>Edit:</Nav.Link>\n                  </Nav.Item>\n                  <Nav.Item>\n                    <Nav.Link eventKey=\"appointmentEditBasic\">Basic Info</Nav.Link>\n                  </Nav.Item>\n                  <Nav.Item>\n                    <Nav.Link eventKey=\"appointmentEditField\">Single Field</Nav.Link>\n                  </Nav.Item>\n                  <Nav.Item>\n                    <Nav.Link eventKey=\"appointmentEditPatient\">Patient</Nav.Link>\n                  </Nav.Item>\n                  <Nav.Item>\n                    <Nav.Link eventKey=\"disabled\" disabled>Search:</Nav.Link>\n                  </Nav.Item>\n                  <Nav.Item>\n                    <Nav.Link eventKey=\"SearchInput\">Input</Nav.Link>\n                  </Nav.Item>\n                  <Nav.Item>\n                    <Nav.Link eventKey=\"SearchResult\">Results</Nav.Link>\n                  </Nav.Item>\n                </Nav>\n              </Col>\n              <Col sm={10}>\n                <Tab.Content>\n                  <Tab.Pane eventKey=\"appointmentDetail\">\n                    {this.state.selectedAppointment === null && (\n                      <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                        Select an Appointment from the Master List\n                      </Button>\n                    )}\n                    {\n                      this.state.isLoading === false &&\n                      this.state.selectedAppointment !== null\n                      &&\n                      (\n                        <AppointmentDetail\n                        authUserId={this.context.userId}\n                        appointment={this.state.selectedAppointment}\n                        onEdit={this.startUpdateAppointmentHandler}\n                        canDelete={this.state.canDelete}\n                        onDelete={this.modalDeleteHandler}\n                        onCreatePdf={this.createPdf}\n                        />\n                    )}\n                  </Tab.Pane>\n\n                  <Tab.Pane eventKey=\"appointmentCreate\">\n                    <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" onClick={this.startCreateAppointmentHandler} >Create New</Button>\n                    {\n                      this.state.creating &&\n                      this.context.selectedPatient._id !== null\n                      && (\n                        <CreateAppointmentForm\n                        canCancel\n                          canConfirm\n                          onCancel={this.modalCancelHandler}\n                          onConfirm={this.modalConfirmHandler}\n                          onSubmit={this.modalConfirmHandler}\n                          confirmText=\"Confirm\"\n                          selectedPatient={this.context.selectedPatient}\n                        />\n                    )}\n                  </Tab.Pane>\n\n                  <Tab.Pane eventKey=\"appointmentEditBasic\">\n                    {this.state.selectedAppointment === null && (\n                      <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                        Select an Appointment from the Master List\n                      </Button>\n                    )}\n                    {this.state.selectedAppointment !== null && (\n                      <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" onClick={this.startUpdateAppointmentHandler}>Edit Basic Data</Button>\n                    )}\n                    {this.state.updating &&\n                      this.state.selectedAppointment !== null\n                      && (\n                      <UpdateAppointmentForm\n                      authUserId={this.context.userId}\n                      canCancel\n                        canConfirm\n                        onCancel={this.modalCancelHandler}\n                        onConfirm={this.modalConfirmUpdateHandler}\n                        confirmText=\"Confirm\"\n                        appointment={this.state.selectedAppointment}\n                      />\n                    )}\n                  </Tab.Pane>\n\n                  <Tab.Pane eventKey=\"appointmentEditField\">\n                    {this.state.selectedAppointment === null && (\n                      <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                        Select an Appointment from the Master List\n                      </Button>\n                    )}\n                    {this.state.selectedAppointment !== null && (\n                      <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" onClick={this.startUpdateAppointmentHandler}>Edit a Single Field</Button>\n                    )}\n                    {this.state.updating &&\n                      this.state.selectedAppointment !== null\n                      && (\n                        <UpdateAppointmentFieldForm\n                          authUserId={this.context.userId}\n                          canCancel\n                          canConfirm\n                          onCancel={this.modalCancelHandler}\n                          onConfirm={this.modalConfirmUpdateFieldHandler}\n                          confirmText=\"Confirm\"\n                          appointment={this.state.selectedAppointment}\n                        />\n                    )}\n                  </Tab.Pane>\n\n                  <Tab.Pane eventKey=\"appointmentEditPatient\">\n                    {this.state.selectedAppointment === null && (\n                      <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                        Select an Appointment from the Master List\n                      </Button>\n                    )}\n                    {this.state.selectedAppointment !== null && (\n                      <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" value='patient' onClick={this.updateAppointmentSpecial.bind(this)}>Change Patient:</Button>\n                    )}\n                    {this.state.selecteAppointment !== null &&\n                      this.context.selectedPatient === null &&\n                      this.state.appointmentUpdateField === \"patient\" && (\n                        <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                          Select someone from the Patients page\n                        </Button>\n                      )}\n                    {this.state.selectedAppointment !== null &&\n                      this.context.selectedPatient !== null &&\n                      this.state.appointmentUpdateField === \"patient\" && (\n                      <Row>\n                      <Col md={8} className=\"updateUserColAdd\">\n                      <p><span className=\"bold\">Add Patient :</span> {this.context.selectedPatient.name}</p>\n                      <p><span className=\"bold\">To Appointment :</span> {this.state.selectedAppointment.title}  <span className=\"bold\">On :</span> {new Date(this.state.selecteAppointment.date.substr(0,10)*1000).toISOString().slice(0,10)} <span className=\"bold\">At :</span> {this.state.selecteAppointment.time} ??</p>\n                      <Button variant=\"success\" onClick={this.updateAppointmentPatientHandler}>\n                        Yes\n                      </Button>\n                      </Col>\n                      </Row>\n                    )}\n                  </Tab.Pane>\n\n                  <Tab.Pane eventKey=\"MasterList\">\n                    <Container className=\"containerUserMasterList\">\n                    <Row className=\"searchListRow\">\n                    <Button variant=\"primary\" size=\"sm\" onClick={this.fetchAppointmentsAsc}>\n                       Sort Asc\n                     </Button>\n                    <Button variant=\"info\" size=\"sm\" onClick={this.fetchAppointmentsDesc}>\n                       Sort Desc\n                     </Button>\n                    {this.state.isLoading ? (\n                      <Spinner />\n                    ) :\n                    (\n                      <AppointmentList\n                        appointments={this.state.appointments}\n                        authUserId={this.context.userId}\n                        onViewDetail={this.showDetailHandler}\n                      />\n                    )}\n                    </Row>\n                    </Container>\n                  </Tab.Pane>\n\n                  <Tab.Pane eventKey=\"SearchInput\">\n                    <Container className=\"containerSearchUserInput\">\n                    <Row className=\"searchUserRowAdd\">\n                    <Button variant=\"primary\" onClick={this.startSearchAppointmentHandler}>Search</Button>\n                    </Row>\n\n                    <Row className=\"searchUserRowForm\">\n                    <Col md={10} className=\"searchUserColForm\">\n                    <Tabs defaultActiveKey=\"Field\" id=\"uncontrolled-tab-example\">\n                    <Tab eventKey=\"Search\" title=\"Search:\" disabled>\n                    </Tab>\n                    <Tab eventKey=\"Field\" title=\"Search by Field:\">\n                    {this.state.searching !== true && (\n                      <Button variant=\"outline-warning\" className=\"confirmEditButton\" size=\"lg\">\n                        Click the 'Search' Button start\n                      </Button>\n                    )}\n                    {this.state.searching === true && (\n                      <SearchAppointmentForm\n                      authUserId={this.context.userId}\n                      canCancel\n                        canConfirm\n                        onCancel={this.modalCancelHandler}\n                        onConfirm={this.modalConfirmSearchHandler}\n                        confirmText=\"Search\"\n                        appointment={this.context.selectedAppointment}\n                      />\n                    )}\n                    </Tab>\n                    <Tab eventKey=\"Id\" title=\"Search by Id:\">\n                    {this.state.searching !== true && (\n                      <Button variant=\"outline-warning\" className=\"confirmEditButton\" size=\"lg\">\n                        Click the 'Search' Button start\n                      </Button>\n                    )}\n                      {this.state.searching === true && (\n                        <SearchAppointmentIdForm\n                        authUserId={this.context.userId}\n                        canCancel\n                          canConfirm\n                          onCancel={this.modalCancelHandler}\n                          onConfirm={this.modalConfirmSearchIdHandler}\n                          confirmText=\"Search\"\n                          appointment={this.context.selectedAppointment}\n                        />\n                      )}\n                    </Tab>\n                    <Tab eventKey=\"Patient\" title=\"Search by Patient:\">\n                    {this.state.searching !== true && (\n                      <Button variant=\"outline-warning\" className=\"confirmEditButton\" size=\"lg\">\n                        Click the 'Search' Button start\n                      </Button>\n                    )}\n                      {this.state.searching === true && (\n                        <SearchAppointmentPatientForm\n                        authUserId={this.context.userId}\n                        canCancel\n                          canConfirm\n                          onCancel={this.modalCancelHandler}\n                          onConfirm={this.modalConfirmSearchPatientHandler}\n                          confirmText=\"Search\"\n                          appointment={this.context.selectedAppointment}\n                        />\n                      )}\n                    </Tab>\n                    <Tab eventKey=\"Date\" title=\"Search by Date:\">\n                    {this.state.searching !== true && (\n                      <Button variant=\"outline-warning\" className=\"confirmEditButton\" size=\"lg\">\n                        Click the 'Search' Button start\n                      </Button>\n                    )}\n                      {this.state.searching === true && (\n                        <SearchAppointmentDateForm\n                        authUserId={this.context.userId}\n                        canCancel\n                          canConfirm\n                          onCancel={this.modalCancelHandler}\n                          onConfirm={this.modalConfirmSearchDateHandler}\n                          confirmText=\"Search\"\n                          appointment={this.context.selectedAppointment}\n                        />\n                      )}\n                    </Tab>\n                    <Tab eventKey=\"Date Range\" title=\"Search by Date Range:\">\n                    {this.state.searching !== true && (\n                      <Button variant=\"outline-warning\" className=\"confirmEditButton\" size=\"lg\">\n                        Click the 'Search' Button start\n                      </Button>\n                    )}\n                      {this.state.searching === true && (\n                        <SearchAppointmentDateRangeForm\n                        authUserId={this.context.userId}\n                        canCancel\n                          canConfirm\n                          onCancel={this.modalCancelHandler}\n                          onConfirm={this.modalConfirmSearchDateRangeHandler}\n                          confirmText=\"Search\"\n                          appointment={this.context.selectedAppointment}\n                        />\n                      )}\n                    </Tab>\n                    </Tabs>\n                    </Col>\n                    <Col md={10}>\n                    </Col>\n                    </Row>\n                    </Container>\n                  </Tab.Pane>\n\n                  <Tab.Pane eventKey=\"SearchResult\">\n                    <Container className=\"containerSearchUserResults\">\n                    <Row>\n                      <Card className=\"searchCard\">\n                        <Card.Body className=\"searchCardBody\">\n                          <Card.Title>Your Search</Card.Title>\n                          <Card.Text>\n                            Field: {this.state.appointmentSearchField}\n                          </Card.Text>\n                          <Card.Text>\n                            Query: {this.state.appointmentSearchQuery}\n                          </Card.Text>\n                        </Card.Body>\n                      </Card>\n                    </Row>\n                    <Row className=\"searchListRow\">\n                    {\n                      this.state.searchAppointments !== [] && (\n                      <SearchAppointmentList\n                        searchAppointments={this.state.searchAppointments}\n                        authUserId={this.context.userId}\n                        onCancel={this.modalCancelHandler}\n                          onViewDetail={this.showDetailHandler}\n                      />\n                    )}\n                    </Row>\n                    </Container>\n                  </Tab.Pane>\n                </Tab.Content>\n              </Col>\n            </Row>\n          </Tab.Container>\n\n\n          </Container>\n\n      </Col>\n    </Row>\n\n  </Accordion>\n\n        {\n        //   this.state.isLoading === false &&\n        //   (<PatientDetail\n        //     authUserId={this.context.userId}\n        //     patient={this.context.selectedPatient}\n        //     className=\"PatientDetailBox2\"\n        // />)\n      }\n      </React.Fragment>\n    );\n  }\n}\n\nexport default AppointmentsPage;\n","import React from 'react';\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nimport UserAttendanceList from './UserList/UserAttendanceList';\nimport UserLeaveList from './UserList/UserLeaveList';\nimport UserAttachmentList from './UserList/UserAttachmentList';\n\nimport './thisUserProfile.css';\n\nconst thisUserProfile = (props) => {\n\n  const {...user} = props.user;\n  console.log(\"thisUserProfile.props.user:  \" + {...user});\n\n  const authUserId = props.authUserId;\n  const userAddress = user.address;\n  const userAttendance = user.attendance;\n  console.log(\"Profile: userAttendance\", userAttendance);\n  const userLeave = user.leave;\n  console.log(\"Profile: userLeave\", userLeave);\n  const userAttachment = user.attachments;\n  console.log(\"Profile: userAttachment\", userAttachment);\n  const userEmploymentDate = new Date(user.employmentDate.substr(0,10)*1000).toISOString().slice(0,10);\n  const userTerminationDate = new Date(user.terminationDate.substr(0,10)*1000).toISOString().slice(0,10);\n  // const authSelectedUser = JSON.stringify(props.AuthContext.selectedUser);\n  // console.log(props.user.slice(0,5) === '{\"_id' , props.user.slice(0,5));\n\n  return (\n\n  <Tabs defaultActiveKey=\"Demographics\" id=\"uncontrolled-tab-example\">\n    <Tab eventKey=\"\" title=\"Details:\" disabled>\n    </Tab>\n    <Tab eventKey=\"Demographics\" title=\"Demographics\">\n    <Card className=\"UserDetailCard\">\n    <Card.Body>\n      <Card.Title><span className=\"ul\">Your Profile Details</span></Card.Title>\n      <Row className=\"detailCardRow\">\n        <Col className=\"detailCardCol\">\n          <Card.Text>\n            <span className=\"bold\">ID:</span> {user._id}\n          </Card.Text>\n          <Card.Text>\n            <span className=\"bold\">Name:</span> {user.name}\n          </Card.Text>\n          <Card.Text>\n            <span className=\"bold\">Phone:</span> {user.phone}\n          </Card.Text>\n          <Card.Text>\n            <span className=\"bold\">Email:</span> {user.email}\n          </Card.Text>\n          <Card.Text>\n            <span className=\"bold\">Role:</span> {user.role}\n          </Card.Text>\n        </Col>\n\n        <Col className=\"detailCardCol\">\n          <Card.Text>\n            <span className=\"bold\">Start Date:</span> {userEmploymentDate}\n          </Card.Text>\n          <Card.Text>\n            <span className=\"bold\">End Date:</span> {userTerminationDate}\n          </Card.Text>\n          <Card.Text>\n            <span className=\"bold\">Address:</span>\n          </Card.Text>\n          <Card.Text>\n            <span className=\"bold\">Street & Number :</span> {userAddress.number}, {userAddress.street}\n          </Card.Text>\n          <Card.Text>\n            <span className=\"bold\">Town :</span> {userAddress.town}\n          </Card.Text>\n          <Card.Text>\n            <span className=\"bold\">Parish :</span> {userAddress.parish}\n          </Card.Text>\n          <Card.Text>\n            <span className=\"bold\">Post Office :</span> {userAddress.postOffice}\n          </Card.Text>\n        </Col>\n      </Row>\n\n      <Row className=\"detailCardRow\">\n        <Col className=\"detailCardCol\">\n        <Button variant=\"warning\" onClick={props.onCreatePdf.bind(this, user)}>\n          Create Pdf\n        </Button>\n        </Col>\n      </Row>\n\n\n    </Card.Body>\n    </Card>\n    </Tab>\n    <Tab eventKey=\"Attendance\" title=\"Attendance\">\n    <Card.Text>\n      Attendance:\n    </Card.Text>\n    <UserAttendanceList\n        userAttendance={userAttendance}\n        authUserId={authUserId}\n        canDelete={props.canDelete}\n        onDelete={props.attendanceDelete}\n      />\n    </Tab>\n    <Tab eventKey=\"Leave\" title=\"Leave\">\n    <Card.Text>\n      Leave:\n    </Card.Text>\n    <UserLeaveList\n        userLeave={userLeave}\n        authUserId={authUserId}\n        canDelete={props.canDelete}\n        onDelete={props.leaveDelete}\n      />\n    </Tab>\n    <Tab eventKey=\"Attachments\" title=\"Attachments\">\n    <Card.Text>\n      Attachments:\n    </Card.Text>\n    <UserAttachmentList\n        userAttachment={userAttachment}\n        authUserId={authUserId}\n        canDelete={props.canDelete}\n        onDelete={props.attachmentDelete}\n        onViewAttachment={props.onViewAttachment}\n      />\n    </Tab>\n  </Tabs>\n  );\n}\n\nexport default thisUserProfile;\n","import S3 from 'react-aws-s3';\nimport S3FileUpload from 'react-s3';\nimport React, { Component } from 'react';\nimport UpdateUserForm from '../components/Forms/UpdateUserForm';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Accordion from 'react-bootstrap/Accordion';\nimport Button from 'react-bootstrap/Button';\nimport SidebarPage from './Sidebar';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\nimport TabContainer from 'react-bootstrap/TabContainer';\nimport TabContent from 'react-bootstrap/TabContent';\nimport TabPane from 'react-bootstrap/TabPane';\nimport Nav from 'react-bootstrap/Nav';\n\nimport AlertBox from '../components/AlertBox';\nimport AttachmentViewer from '../components/AttachmentViewer';\nimport PdfCreator from '../components/PdfCreator';\n\nimport UpdateUserFieldForm from '../components/Forms/UpdateUserFieldForm';\nimport UpdateUserAttendanceForm from '../components/Forms/UpdateUserAttendanceForm';\nimport UpdateUserAttachmentForm from '../components/Forms/UpdateUserAttachmentForm';\nimport UpdateUserLeaveForm from '../components/Forms/UpdateUserLeaveForm';\n\nimport ThisUserProfile from '../components/Users/thisUserProfile';\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\nimport './Users.css';\n\nclass ThisUserPage extends Component {\n  state = {\n    user: null,\n    users: [],\n    updating: false,\n    isLoading: false,\n    userUpdateField: null,\n    userAlert: null,\n    canDelete: null,\n    showAttachment: false,\n    createPdf: false,\n    pdfData: null,\n    showThisAttachmentFile: null,\n    showThisAttachmentType: null,\n  };\n  isActive = true;\n\n  static contextType = AuthContext;\n\n  // constructor(props) {\n  //   super(props);\n  // }\n\n  componentDidMount() {\n    this.getThisUser();\n    // this.getCreds();\n    if (this.context.user.name === 'admin579'){\n      this.setState({canDelete: true})\n    }\n  }\n\n  startUpdateUserHandler = () => {\n    this.setState({ updating: true });\n    console.log(\"UpdateUserForm...\");\n  };\n\n\n  modalConfirmUpdateHandler = (event) => {\n    const token = this.context.token;\n    let userId = this.context.userId;\n    let selectedUserId = this.context.selectedUser._id;\n    if(userId !== selectedUserId && this.context.user.role !== 'admin') {\n      console.log(\"Not the creator or Admin! No edit permission!!\");\n      this.setState({userAlert: \"Not the creator or Admin! No edit permission!!\"});\n      selectedUserId = null;\n    }\n    console.log(\"UpdateUserFormData:  \", event.target.formGridEmail.value);\n    this.setState({ updating: false });\n    let email = event.target.formGridEmail.value;\n    let password = event.target.formGridPassword.value;\n    let name = event.target.formGridName.value;\n    let role = this.context.user.role;\n    let dob = event.target.formGridDob.value;\n    let phone = event.target.formGridPhone.value;\n    let addressNumber = event.target.formGridAddressNumber.value;\n    let addressStreet = event.target.formGridAddressStreet.value;\n    let addressTown = event.target.formGridAddressTown.value;\n    let addressParish = event.target.formGridAddressParish.value;\n    let addressPostOffice = event.target.formGridAddressPostOffice.value;\n    let employmentDate = event.target.formGridEmploymentDate.value;\n    let terminationDate = event.target.formGridTerminationDate.value;\n\n    if (email.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      email = this.context.user.email;\n    }\n    if (password.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      password = this.context.user.password;\n    }\n    if (name.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      name = this.context.user.name;\n    }\n    // if (role.trim().length === 0) {\n    //   console.log(\"blank fields detected!!!...filling w/ previous data...\");\n    //   role = this.state.user.role;\n    // }\n    if (dob.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      dob = this.context.user.dob;\n    }\n    if (phone.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      phone = this.context.user.phone;\n    }\n    if (addressNumber.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      addressNumber = this.context.user.address.number;\n    }\n    if (addressStreet.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      addressStreet = this.context.user.address.street;\n    }\n    if (addressTown.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      addressTown = this.context.user.address.town;\n    }\n    if (addressParish.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      addressParish = this.context.user.address.parish;\n    }\n    if (addressPostOffice.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      addressPostOffice = this.context.user.address.postOffice;\n    }\n    if (employmentDate.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      employmentDate = this.context.user.employmentDate;\n    }\n    if (terminationDate.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      terminationDate = this.context.user.terminationDate;\n    }\n\n\n    const user = { email, password, name, role, dob, phone, addressNumber, addressStreet, addressTown, addressParish, addressPostOffice, employmentDate, terminationDate };\n    console.log(`\n      updating user profile...\n      userId: ${userId}\n      email: ${email},\n      password: ${password},\n      name: ${name},\n      role: ${role},\n      dob: ${dob},\n      phone: ${phone},\n      addressNumber: ${addressNumber},\n      addressStreet: ${addressStreet},\n      addressTown: ${addressTown},\n      addressParish: ${addressParish},\n      addressPostOffice: ${addressPostOffice},\n      employmentDate: ${employmentDate},\n      terminationDate: ${terminationDate},\n      `);\n\n    const requestBody = {\n      query: `\n        mutation {updateUser(userId:\\\"${userId}\\\",selectedUserId:\\\"${userId}\\\",userInput: {email:\\\"${email}\\\",password:\\\"${password}\\\",name:\\\"${name}\\\",dob:\\\"${dob}\\\",addressNumber:${addressNumber},addressStreet:\\\"${addressStreet}\\\",addressTown:\\\"${addressTown}\\\",addressParish:\\\"${addressParish}\\\", addressPostOffice:\\\"${addressPostOffice}\\\",phone:\\\"${phone}\\\",role:\\\"${role}\\\",employmentDate:\\\"${employmentDate}\\\",terminationDate:\\\"${terminationDate}\\\"})\n        {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n        `};\n\n    // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }})\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n\n        const updatedUser = resData.data.updateUser;\n        console.log(\"updatedUser:  \", JSON.stringify(updatedUser));\n        this.state.users.push(updatedUser);\n        this.context.users = this.state.users;\n\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert, user: updatedUser})\n        this.getThisUser();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n    };\n\n    modalConfirmUpdateFieldHandler = (event) => {\n\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedUserId = this.context.selectedUser._id;\n      if(userId !== selectedUserId && this.context.user.role !== 'admin') {\n        console.log(\"Not the creator or Admin! No edit permission!!\");\n        this.setState({userAlert: \"Not the creator or Admin! No edit permission!!\"});\n        selectedUserId = null;\n      }\n\n        console.log(\"UpdateUserFieldFormData:  \", event.target.formGridField.value);\n        this.setState({ updating: false });\n\n        let field = event.target.formGridField.value;\n        let query = event.target.formGridQuery.value;\n\n        const requestBody = {\n          query:`\n            mutation{updateUserField(userId:\\\"${userId}\\\",selectedUserId:\\\"${userId}\\\",field:\\\"${field}\\\",query:\\\"${query}\\\")\n            {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n          `};\n\n        // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            console.log(\"response data... \" + JSON.stringify(resData.data.updateUserField));\n\n            const updatedUserId = resData.data.updateUserField._id;\n            const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n            const updatedUserPos = this.state.users.indexOf(updatedUser);\n            const slicedArray = this.state.users.splice(updatedUserPos, 1);\n            console.log(\"updatedUser:  \", JSON.stringify(updatedUser),\"  updatedUserPos:  \", updatedUserPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.users.push(resData.data.updateUserField);\n            this.context.users = this.state.users;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            this.getThisUser();\n          })\n          .catch(err => {\n            console.log(err);\n            this.setState({userAlert: err});\n          });\n\n    }\n\n  updateUserAttendanceHandler = (event) => {\n    const token = this.context.token;\n    const userId = this.state.user._id;\n    // let selectedUserId = this.context.selectedUser._id;\n    // if(userId !== selectedUserId && this.context.user.role !== 'admin') {\n    //   console.log(\"Not the creator or Admin! No edit permission!!\");\n    //   selectedUserId = null;\n    // }\n    console.log(\"UpdateUserAttendanceFormData:  \", event.target.formGridAttendanceDate.value);\n\n    this.setState({ updating: false , userUpdateField: null });\n\n    let attendanceDate = event.target.formGridAttendanceDate.value;\n    // let attendanceDate = event.target.formGridTodayCheckbox.value;\n    // create today's date object\n    let attendanceStatus = event.target.formGridAttendanceStatus.value;\n    let attendanceDescription = event.target.formGridAttendanceDescription.value;\n\n    if (attendanceDate.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      attendanceDate = this.context.selectedUser.attendanceDate;\n    }\n    if (attendanceStatus.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      attendanceStatus = this.context.selectedUser.attendanceStatus;\n    }\n    if (attendanceDescription.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      attendanceDescription = this.context.selectedUser.attendanceDescription;\n    }\n\n    const userAttendance = { attendanceDate, attendanceStatus, attendanceDescription }\n    console.log(`\n      adding user attendance item...\n      userId: ${userId},\n      attendanceDate: ${attendanceDate},\n      attendanceStatus: ${attendanceStatus},\n      attendanceDescription: ${attendanceDescription}\n      `);\n\n      const requestBody = {\n        query:`\n          mutation {updateUserAttendance(userId:\"${userId}\", selectedUserId:\"${userId}\",userInput:{attendanceDate:\"${attendanceDate}\",attendanceStatus:\"${attendanceStatus}\",attendanceDescription:\"${attendanceDescription}\"})\n          {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n        `};\n\n      // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }})\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData.data.updateUserAttendance));\n\n          const updatedUserId = resData.data.updateUserAttendance._id;\n          const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n          const updatedUserPos = this.state.users.indexOf(updatedUser);\n          const slicedArray = this.state.users.splice(updatedUserPos, 1);\n          console.log(\"updatedUser:  \", JSON.stringify(updatedUser),\"  updatedUserPos:  \", updatedUserPos, \"  slicedArray:  \", slicedArray);\n          this.state.users.push(resData.data.updateUserAttendance);\n          this.context.users = this.state.users;\n          const responseAlert = JSON.stringify(resData.data).slice(2,25);\n          this.setState({ userAlert: responseAlert})\n          this.getThisUser();\n\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({userAlert: err});\n        });\n  };\n\n\n  updateUserLeaveHandler = (event) => {\n    const token = this.context.token;\n    const userId = this.context.userId;\n    let selectedUserId = this.context.selectedUser._id;\n    if(userId !== selectedUserId && this.context.user.role !== 'admin') {\n      console.log(\"Not the creator or Admin! No edit permission!!\");\n      this.setState({userAlert: \"Not the creator or Admin! No edit permission!!\"});\n      selectedUserId = null;\n    }\n\n    console.log(\"UpdateUserLeaveFormData:  \", event.target.formGridLeaveType.value);\n\n    this.setState({ updating: false , userUpdateField: null });\n\n    let leaveType = event.target.formGridLeaveType.value;\n    let leaveTitle = event.target.formGridLeaveTitle.value;\n    let leaveStartDate = event.target.formGridLeaveStartDate.value;\n    let leaveEndDate = event.target.formGridLeaveEndDate.value;\n\n    if (leaveType.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      leaveType = this.context.selectedUser.leaveType;\n    }\n    if (leaveTitle.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      leaveTitle = this.context.selectedUser.leaveTitle;\n    }\n    if (leaveStartDate.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      leaveStartDate = this.context.selectedUser.leaveStartDate;\n    }\n    if (leaveEndDate.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      leaveEndDate = this.context.selectedUser.leaveEndDate;\n    }\n\n    const userLeave = { leaveType, leaveTitle, leaveStartDate, leaveEndDate }\n    console.log(`\n      adding user attendance item...\n      userId: ${userId},\n      selectedUserId: ${selectedUserId}\n      leave: {\n        type: ${leaveType},\n        title: ${leaveTitle},\n        startDate: ${leaveStartDate},\n        endDate: ${leaveEndDate}\n      }\n      `);\n\n      const requestBody = {\n        query:`\n          mutation {updateUserLeave(userId:\"${userId}\", selectedUserId:\"${userId}\",userInput:{leaveType:\"${leaveType}\",leaveTitle:\"${leaveTitle}\",leaveStartDate:\"${leaveStartDate}\",leaveEndDate:\"${leaveEndDate}\"})\n          {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n        `};\n\n      // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }})\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData.data));\n\n          const updatedUserId = resData.data.updateUserLeave._id;\n          const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n          const updatedUserPos = this.state.users.indexOf(updatedUser);\n          const slicedArray = this.state.users.splice(updatedUserPos, 1);\n          console.log(\"updatedUser:  \", JSON.stringify(updatedUser),\"  updatedUserPos:  \", updatedUserPos, \"  slicedArray:  \", slicedArray);\n\n          this.state.users.push(resData.data.updateUserLeave);\n          this.context.users = this.state.users;\n          const responseAlert = JSON.stringify(resData.data).slice(2,25);\n          this.setState({ userAlert: responseAlert})\n          this.getThisUser();\n\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({userAlert: err});\n        });\n  };\n\n\n  updateUserAttachmentHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  // let selectedUserId = this.context.selectedUser._id;\n  // if(userId !== selectedUserId && this.context.user.role !== 'admin') {\n  //   console.log(\"Not the creator or Admin! No edit permission!!\");\n  //   selectedUserId = null;\n  // }\n  // if (userId !== selectedUserId && this.context.user.role !== \"admin\" ) {\n  //   console.log(\"Not the creator or Admin! No edit permission!!\");\n  //   this.setState({userAlert: \"Not the creator or Admin! No edit permission!!\"})\n  //     selectedUserId = null;\n  // }\n\n  console.log(\"UpdateUserAttachmentFormData:  \");\n\n  this.setState({ updating: false , userUpdateField: null });\n\n  // let attachmentName = event.target.formGridAttachmentName.value;\n  let attachmentFormat = event.target.formGridAttachmentFormat.value;\n  let attachmentPath = event.target.formGridAttachmentPath.value;\n  let file = AuthContext._currentValue.file;\n\n  console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n  const config = {\n    bucketName: 'ent-emr-bucket',\n    dirName: attachmentPath,\n    region: 'us-east-2',\n    accessKeyId: \"AKIARFTS6Q6DALQKT4QR\",\n    secretAccessKey: \"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\",\n  }\n  const ReactS3Client = new S3(config);\n  const newFileName = file.name;\n  const attachmentName = newFileName;\n\n  ReactS3Client\n      .uploadFile(file, newFileName)\n      .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n      .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n\n  if (\n    attachmentName.trim().length === 0 ||\n    attachmentFormat.trim().length === 0 ||\n    attachmentPath.trim().length === 0\n) {\n    console.log(\"blank fields detected!!! try again\");\n    return\n  }\n\n  const userAttachment = { attachmentName, attachmentFormat, attachmentPath }\n  console.log(`\n    adding user attendance item...\n    userId: ${userId},\n    selectedUserId: ${userId}\n    attachmentName: ${attachmentName},\n    attachmentFormat: ${attachmentFormat},\n    attachmentPath: ${attachmentPath}\n    `);\n    this.setState({userAlert: \"adding user attachment item...\"})\n\n    const requestBody = {\n      query:`\n        mutation{updateUserAttachment(userId:\\\"${userId}\\\",selectedUserId:\\\"${userId}\\\",userInput:{attachmentName:\\\"${attachmentName}\\\",attachmentFormat:\\\"${attachmentFormat}\\\",attachmentPath:\\\"${attachmentPath}\\\"})\n        {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n      `};\n\n    // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data.updateUserAttachment));\n\n        const updatedUserId = resData.data.updateUserAttachment._id;\n        const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n        const updatedUserPos = this.state.users.indexOf(updatedUser);\n        const slicedArray = this.state.users.splice(updatedUserPos, 1);\n        console.log(\"updatedUser:  \", JSON.stringify(updatedUser),\"  updatedUserPos:  \", updatedUserPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.users.push(resData.data.updateUserAttachment);\n        this.context.users = this.state.users;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        // this.setState({ userAlert: responseAlert})\n        this.getThisUser();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n\n}\n\n\n  getThisUser() {\n    this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n      query {getThisUser\n        {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n        `};\n\n    // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }})\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"resdata...\" + JSON.stringify(resData));\n        const thisUser = resData.data.getThisUser;\n        if (this.isActive) {\n\n          this.setState({ user: thisUser, isLoading: false });\n\n          this.context.user = thisUser;\n          console.log(\"this.context.user:  \" + this.context.user.name);\n\n          sessionStorage.setItem('thisUser', JSON.stringify(thisUser));\n        }\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n        if (this.isActive) {\n          this.setState({ isLoading: false });\n        }\n      });\n  }\n\n  getCreds() {\n    this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n      query {getCreds\n        {atlas{user,pw,db},s3{bucketName,region,accessKeyId,secretAccessKey},jwt{encode}}}\n        `};\n\n    // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }})\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"resdata...\" + JSON.stringify(resData));\n        const creds = resData.data.getCreds;\n        if (this.isActive) {\n\n          this.setState({ isLoading: false });\n\n          this.context.creds = creds;\n        }\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n        if (this.isActive) {\n          this.setState({ isLoading: false });\n        }\n      });\n  }\n\n\n  modalCancelHandler = () => {\n    this.setState({ updating: false  });\n  };\n\n\n  deleteUserAttendanceItem = (props) => {\n\n    let token = this.context.token;\n    let userId = this.context.userId;\n    let selectedUserId = this.state.selectedUser._id;\n    let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n    console.log(`\n      delete user Attendance item:\n      props: ${JSON.stringify(props)},\n      token: ${token},\n      userId: ${userId},\n      selectedUserId: ${userId},\n      attandance date: ${date},\n      `);\n\n      const requestBody = {\n        query: `\n         mutation{deleteUserAttendance(userId:\\\"${userId}\\\",selectedUserId:\\\"${userId}\\\",attendanceDate:\\\"${date}\\\")\n         {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n      `};\n\n          // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n          fetch('http://localhost:10000/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n              'Content-Type': 'application/json',\n              Authorization: 'Bearer ' + token\n            }\n          })\n            .then(res => {\n              if (res.status !== 200 && res.status !== 201) {\n                throw new Error('Failed!');\n              }\n              return res.json();\n            })\n            .then(resData => {\n              let deletedUser = resData.data.deleteUserAttendance;\n              console.log(\"resData.data:  \",resData.data.deleteUserAttendance);\n\n              const updatedUserId = resData.data.deleteUserAttendance._id;\n              const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n              const updatedUserPos = this.state.users.indexOf(updatedUser);\n              const slicedArray = this.state.users.splice(updatedUserPos, 1);\n              console.log(\"updatedUser:  \", JSON.stringify(updatedUser),\"  updatedUserPos:  \", updatedUserPos, \"  slicedArray:  \", slicedArray);\n\n              this.state.users.push(resData.data.deleteUserAttendance);\n              this.context.users = this.state.users;\n              const responseAlert = JSON.stringify(resData.data).slice(2,25);\n              this.setState({ userAlert: responseAlert})\n              // this.setState({ userAlert: responseAlert, selectedUser: resData.data.deleteUserAttendance})\n              this.getThisUser();\n\n\n            })\n            .catch(err => {\n              console.log(err);\n            });\n  }\n\n  deleteUserLeaveItem = (props) => {\n\n    let token = this.context.token;\n    let userId = this.context.userId;\n\n    console.log(`\n      delete user Leave item:\n      props: ${JSON.stringify(props)},\n      token: ${token},\n      userId: ${userId},\n      selectedUserId: ${userId},\n      `);\n\n      const requestBody = {\n        query: `\n         mutation{deleteUserLeave(userId:\\\"${userId}\\\",selectedUserId:\\\"${userId}\\\",leaveTitle:\\\"${props.title}\\\")\n         {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n      `};\n\n          // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n          fetch('http://localhost:10000/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n              'Content-Type': 'application/json',\n              Authorization: 'Bearer ' + token\n            }\n          })\n            .then(res => {\n              if (res.status !== 200 && res.status !== 201) {\n                throw new Error('Failed!');\n              }\n              return res.json();\n            })\n            .then(resData => {\n              let deletedUser = resData.data.deleteUserLeave;\n              console.log(deletedUser);\n\n              const updatedUserId = resData.data.deleteUserLeave._id;\n              const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n              const updatedUserPos = this.state.users.indexOf(updatedUser);\n              const slicedArray = this.state.users.splice(updatedUserPos, 1);\n              console.log(\"updatedUser:  \", JSON.stringify(updatedUser),\"  updatedUserPos:  \", updatedUserPos, \"  slicedArray:  \", slicedArray);\n\n              this.state.users.push(resData.data.deleteUserLeave);\n              this.context.users = this.state.users;\n              const responseAlert = JSON.stringify(resData.data).slice(2,25);\n              this.setState({ userAlert: responseAlert})\n              // this.setState({ userAlert: responseAlert, selectedUser: resData.data.deleteUserLeave})\n              this.getThisUser();\n\n\n            })\n            .catch(err => {\n              console.log(err);\n            });\n  }\n\n  deleteUserAttachmentItem = (props) => {\n\n    let token = this.context.token;\n    let userId = this.context.userId;\n\n    console.log(`\n      delete user Attachment item:\n      props: ${JSON.stringify(props)},\n      token: ${token},\n      userId: ${userId},\n      selectedUserId: ${userId},\n      `);\n\n      console.log(`\n        deleting from s3...\n        file.name: ${props.name},\n        `);\n\n      const config = {\n        bucketName: 'ent-emr-bucket',\n        dirName: props.path,\n        region: 'us-east-2',\n        accessKeyId: \"AKIARFTS6Q6DALQKT4QR\",\n        secretAccessKey: \"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\",\n      }\n      const ReactS3Client = new S3(config);\n      const filename = props.name;\n      // const attachmentName = newFileName;\n      //\n      S3FileUpload\n      .deleteFile(filename, config)\n      .then(response => console.log(response))\n      .catch(err => console.error(err))\n\n\n      const requestBody = {\n        query: `\n         mutation{deleteUserAttachment(userId:\\\"${userId}\\\",selectedUserId:\\\"${userId}\\\",attachmentName:\\\"${props.name}\\\")\n         {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n      `};\n\n          // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n          fetch('http://localhost:10000/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n              'Content-Type': 'application/json',\n              Authorization: 'Bearer ' + token\n            }\n          })\n            .then(res => {\n              if (res.status !== 200 && res.status !== 201) {\n                throw new Error('Failed!');\n              }\n              return res.json();\n            })\n            .then(resData => {\n              let deletedUser = resData.data.deleteUserAttachment;\n              console.log(deletedUser);\n\n              const updatedUserId = resData.data.deleteUserAttachment._id;\n              const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n              const updatedUserPos = this.state.users.indexOf(updatedUser);\n              const slicedArray = this.state.users.splice(updatedUserPos, 1);\n              console.log(\"updatedUser:  \", JSON.stringify(updatedUser),\"  updatedUserPos:  \", updatedUserPos, \"  slicedArray:  \", slicedArray);\n\n              this.state.users.push(resData.data.deleteUserAttachment);\n              this.context.users = this.state.users;\n              const responseAlert = JSON.stringify(resData.data).slice(2,25);\n              this.setState({ userAlert: responseAlert})\n              // this.setState({ userAlert: responseAlert, selectedUser: resData.data.deleteUserAttachment})\n              this.getThisUser();\n\n            })\n            .catch(err => {\n              console.log(err);\n            });\n  }\n\n\n  updateUserSpecialProfile (event) {\n    console.log(\"special field to update:  \", event.target.value);\n    const field = event.target.value;\n    this.setState({ userUpdateField: field});\n  }\n\n  onViewAttachment = (attachment) => {\n    console.log(`\n      setting up attachment viewer...\n      attachment: ${JSON.stringify(attachment)}\n      `);\n      this.setState({showAttachment: true})\n\n      const file = \"https://ent-emr-bucket.s3-us-east-2.amazonaws.com/\"+attachment.path+\"/\"+attachment.name+\".\"+attachment.format;\n      const type = attachment.format;\n\n      this.setState({showThisAttachmentFile: file, showThisAttachmentType: type})\n  }\n\n  closeAttachmentView = () => {\n    console.log(`\n      closing attachment viewer...\n      `);\n      this.setState({showAttachment: false})\n  }\n\n  createPdf = (user) => {\n    console.log(`\n        creating pdf...\n        user: ${JSON.stringify(user)}\n      `);\n\n      const pdfData = {\n        title: user.name,\n        body: user.dob,\n      };\n\n    this.setState({createPdf: true, pdfData: pdfData})\n  }\n\n  closePdfCreator = () => {\n    console.log(`\n      closing pdf creator...\n      `);\n      this.setState({createPdf: false, pdfData: null})\n  }\n\n\n  componentWillUnmount() {\n    this.isActive = false;\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n\n      {this.state.showAttachment === true && (\n        <AttachmentViewer\n          onCloseAttachmentView={this.closeAttachmentView}\n          attachmentFile={this.state.showThisAttachmentFile}\n          attachmentType={this.state.showThisAttachmentType}\n        />\n      )}\n\n      {this.state.createPdf === true && (\n          <PdfCreator\n            pdfData={this.state.pdfData}\n            onClosePdfCreator={this.closePdfCreator}\n          />\n      )}\n\n      <Row>\n      <Col md={3} className=\"MasterCol1\">\n      <AlertBox\n        authUserId={this.context.userId}\n        alert={this.state.userAlert}\n      />\n      <SidebarPage\n        you={this.state.user}\n      />\n      </Col>\n\n      <Col md={9} className=\"MasterCol2\">\n        <Container className=\"containerProfile\">\n\n        <Tab.Container id=\"left-tabs-example\" defaultActiveKey=\"Detail\">\n          <Row>\n            <Col sm={2}>\n              <Nav variant=\"pills\" className=\"flex-column\">\n                <Nav.Item>\n                  <Nav.Link eventKey=\"Detail\">You</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey=\"disabled\" disabled>Edit:</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey=\"Demographics\">Demographics</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey=\"userEditField\">Single Field</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey=\"disabled\" disabled>Add:</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey=\"Attandance\">Attendance</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey=\"Attachment\">Attachment</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey=\"Leave\">Leave</Nav.Link>\n                </Nav.Item>\n              </Nav>\n            </Col>\n            <Col sm={10}>\n              <Tab.Content>\n                <Tab.Pane eventKey=\"Detail\">\n                  {this.state.user !== null && (\n                      <ThisUserProfile\n                        user={this.state.user}\n                        authUserId={this.context.userId}\n                        canDelete={this.state.canDelete}\n                        attendanceDelete={this.deleteUserAttendanceItem}\n                        leaveDelete={this.deleteUserLeaveItem}\n                        attachmentDelete={this.deleteUserAttachmentItem}\n                        onViewAttachment={this.onViewAttachment}\n                        onCreatePdf={this.createPdf}\n                      />\n                    )}\n                </Tab.Pane>\n\n                <Tab.Pane eventKey=\"Demographics\">\n                  <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" onClick={this.startUpdateUserHandler}>Edit Demographics</Button>\n                  {this.state.updating === true && (\n                    <UpdateUserForm\n                    canCancelProfile\n                      canConfirm\n                      onCancel={this.modalCancelHandler}\n                      onConfirm={this.modalConfirmUpdateHandler}\n                      confirmText=\"Confirm\"\n                      user={this.state.user}\n                      authUserId={this.context.userId}\n                    />\n                  )}\n                </Tab.Pane>\n\n                <Tab.Pane eventKey=\"userEditField\">\n                  {this.state.selectedUser === null && (\n                    <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                      Select a Staff member from the Master List\n                    </Button>\n                  )}\n                  {this.state.selectedUser !== null && (\n                    <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" onClick={this.startUpdateUserHandler}>Edit a Single Field</Button>\n                  )}\n                  {this.state.updating &&\n                    this.state.selectedUser !== null\n                    && (\n                      <UpdateUserFieldForm\n                        authUserId={this.context.userId}\n                        canCancel\n                        canConfirm\n                        onCancel={this.modalCancelHandler}\n                        onConfirm={this.modalConfirmUpdateFieldHandler}\n                        confirmText=\"Confirm\"\n                        user={this.state.selectedUser}\n                      />\n                  )}\n                </Tab.Pane>\n\n                <Tab.Pane eventKey=\"Attandance\">\n                  <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" value='attendance' onClick={this.updateUserSpecialProfile.bind(this)}>Add Attendance</Button>\n                  {this.state.userUpdateField === 'attendance' && (\n                    <UpdateUserAttendanceForm\n                    authUserId={this.context.userId}\n                    canCancelProfile\n                      canConfirm\n                      onCancel={this.modalCancelHandler}\n                      onConfirm={this.updateUserAttendanceHandler}\n                      confirmText=\"Confirm\"\n                      user={this.state.selectedUser}\n                    />\n                  )}\n                </Tab.Pane>\n\n                <Tab.Pane eventKey=\"Attachment\">\n                  <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" value='attachments' onClick={this.updateUserSpecialProfile.bind(this)}>Add Attachment</Button>\n                  {this.state.userUpdateField === 'attachments' && (\n                    <UpdateUserAttachmentForm\n                    authUserId={this.context.userId}\n                    canCancelProfile\n                      canConfirm\n                      onCancel={this.modalCancelHandler}\n                      onConfirm={this.updateUserAttachmentHandler}\n                      confirmText=\"Confirm\"\n                      user={this.state.selectedUser}\n                    />\n                  )}\n                </Tab.Pane>\n\n                <Tab.Pane eventKey=\"Leave\">\n                  <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" value='leave' onClick={this.updateUserSpecialProfile.bind(this)}>Add Leave</Button>\n                  {this.state.userUpdateField === 'leave' && (\n                    <UpdateUserLeaveForm\n                    authUserId={this.context.userId}\n                    canCancelProfile\n                      canConfirm\n                      onCancel={this.modalCancelHandler}\n                      onConfirm={this.updateUserLeaveHandler}\n                      confirmText=\"Confirm\"\n                      user={this.state.selectedUser}\n                    />\n                  )}\n                </Tab.Pane>\n              </Tab.Content>\n            </Col>\n          </Row>\n        </Tab.Container>\n\n\n\n        </Container>\n      </Col>\n      </Row>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default ThisUserPage;\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport Button from 'react-bootstrap/Button';\n\nimport AuthContext from '../../context/auth-context';\nimport './MainNavigation.css';\n\n\nconst mainNavigation = props => (\n  <AuthContext.Consumer>\n    {context => {\n      return (\n        <header className=\"main-navigation\">\n          <div className=\"main-navigation__logo\">\n            <h1>ENT EMR 0.1.1</h1>\n\n          </div>\n          <nav className=\"main-navigation__items\">\n\n            <ul>\n              {!context.token && (\n                <li>\n                  <NavLink to=\"/auth\">Login</NavLink>\n                </li>\n              )}\n              {!context.token && (\n                <li>\n                  <NavLink to=\"/signup\">Signup</NavLink>\n                </li>\n              )}\n              {context.token && (\n                <React.Fragment>\n                  <li>\n                    <NavLink to=\"/profile\">My Profile</NavLink>\n                  </li>\n                  <li>\n                    <NavLink to=\"/users\">Staff</NavLink>\n                  </li>\n                  <li>\n                    <NavLink to=\"/patients\">Patients</NavLink>\n                  </li>\n                  <li>\n                    <NavLink to=\"/appointments\">Appointments</NavLink>\n                  </li>\n                  <li>\n                    <button onClick={context.logout}>Logout</button>\n                  </li>\n                </React.Fragment>\n              )}\n            </ul>\n          </nav>\n        </header>\n      );\n    }}\n  </AuthContext.Consumer>\n);\n\nexport default mainNavigation;\n","import React, { Component } from 'react';\nimport { BrowserRouter, Route, Redirect, Switch } from 'react-router-dom';\n\nimport AuthPage from './pages/Auth';\nimport SignupPage from './pages/Signup';\nimport UsersPage from './pages/Users';\nimport PatientsPage from './pages/Patients';\nimport AppointmentsPage from './pages/Appointments';\nimport ThisUserPage from './pages/thisUser';\nimport SidebarPage from './pages/Sidebar';\nimport MainNavigation from './components/Navigation/MainNavigation';\nimport AuthContext from './context/auth-context';\n\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    token: null,\n    userId: null,\n    context: this.context,\n  };\n\n  static contextType = AuthContext;\n\n  constructor(props) {\n    super(props);\n    this.sessionStorageAuth = null;\n  }\n\n  login = (token, userId, tokenExpiration) => {\n    this.setState({ token: token, userId: userId });\n  };\n\n  logout = () => {\n    this.setState({\n       token: null,\n       userId: null\n      });\n    sessionStorage.clear();\n    this.context = {\n      token: null,\n      userId: null,\n      user: {},\n      users:[],\n      selectedUser: {},\n      selectedPatient: {},\n      selectedAppointment: {},\n      patient: {},\n      appointment: {},\n      appointmentPatientId: null,\n      userUpdateField: null,\n      patientUpdateField: null,\n      appointmentUpdateField: null,\n      appointmentsToday: null,\n      appointmentsWeekImportant: null,\n      appointmentsInProgress: null,\n      userAlert: \"\",\n      visit: null,\n      file: null,\n      fancyDate: null,\n      login: this.login,\n      logout: this.logout,\n      creds: null,\n    }\n  };\n\n\n  // componentDidMount() {\n  //\n  // }\n\n  render() {\n    return (\n      <BrowserRouter>\n        <React.Fragment>\n          <AuthContext.Provider\n            value={{\n              token: this.state.token,\n              userId: this.state.userId,\n              user: {},\n              users:[],\n              selectedUser: {},\n              selectedPatient: {},\n              selectedAppointment: {},\n              patient: {},\n              appointment: {},\n              appointmentPatientId: null,\n              userUpdateField: null,\n              patientUpdateField: null,\n              appointmentUpdateField: null,\n              appointmentsToday: null,\n              appointmentsWeekImportant: null,\n              appointmentsInProgress: null,\n              userAlert: \"\",\n              visit: null,\n              file: null,\n              fancyDate: null,\n              login: this.login,\n              logout: this.logout,\n              creds: null,\n            }}\n          >\n            <MainNavigation />\n            <main className=\"main-content\">\n              <Switch>\n\n                { // logged in -> pages\n                this.state.token && <Redirect from=\"/\" to=\"/users\" exact />}\n                {this.state.token && (<Route path=\"/users\" component={UsersPage} />)}\n                {this.state.token && (<Route path=\"/patients\" component={PatientsPage} />)}\n                {this.state.token && (<Route path=\"/appointments\" component={AppointmentsPage} />)}\n                {this.state.token && (<Route path=\"/profile\" component={ThisUserPage} />)}\n\n                { // logged in -> users page from login page\n                  this.state.token && (<Redirect from=\"/auth\" to=\"/profile\" exact />)}\n\n                { //if not logged in -> go to login page\n                  !this.state.token && (<Route path=\"/auth\" component={AuthPage} />)}\n                  {!this.state.token && (<Route path=\"/signup\" component={SignupPage} />)}\n                {!this.state.token && <Redirect to=\"/auth\" exact />}\n              </Switch>\n            </main>\n\n          </AuthContext.Provider>\n        </React.Fragment>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\n// Put any other imports below so that CSS from your\n// components takes precedence over default styles.\n\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}