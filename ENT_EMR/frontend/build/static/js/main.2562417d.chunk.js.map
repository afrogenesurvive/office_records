{"version":3,"sources":["context/auth-context.js","components/AlertBox.js","pages/Auth.js","components/Forms/CreateUserForm.js","pages/Signup.js","components/Users/UserList/UserItem/UserItem.js","components/Users/UserList/UserList.js","components/Users/UserList/UserItem/SearchUserItem.js","components/Users/UserList/SearchUserList.js","components/Users/UserList/UserItem/UserAttendanceItem.js","components/Users/UserList/UserAttendanceList.js","components/Users/UserList/UserItem/UserLeaveItem.js","components/Users/UserList/UserLeaveList.js","components/Users/UserList/UserItem/UserAttachmentItem.js","components/Users/UserList/UserAttachmentList.js","components/Users/UserDetail.js","components/Spinner/Spinner.js","components/Appointments/AppointmentList/AppointmentItem/AppointmentTodayItem.js","components/Appointments/AppointmentList/AppointmentTodayList.js","components/Appointments/AppointmentList/AppointmentItem/AppointmentInProgressItem.js","components/Appointments/AppointmentList/AppointmentInProgressList.js","pages/Sidebar.js","components/AttachmentViewer.js","components/PdfCreator.js","components/Forms/UpdateUserForm.js","components/Forms/UpdateUserFieldForm.js","components/Forms/UpdateUserAttendanceForm.js","components/Forms/UpdateUserAttachmentForm.js","components/Forms/UpdateUserLeaveForm.js","components/Forms/SearchUserForm.js","components/Forms/SearchUserIdForm.js","components/Forms/SearchUserNameForm.js","components/Forms/SearchUserAttendanceDateForm.js","components/Forms/SearchUserLeaveDateRangeForm.js","pages/Users.js","components/Patients/PatientList/PatientItem/PatientItem.js","components/Patients/PatientList/PatientList.js","components/Patients/PatientList/PatientItem/PatientAppointmentItem.js","components/Patients/PatientList/PatientAppointmentList.js","components/Patients/PatientList/PatientItem/PatientInsuranceItem.js","components/Patients/PatientList/PatientInsuranceList.js","components/Patients/PatientList/PatientItem/PatientConsultantItem.js","components/Patients/PatientList/PatientConsultantList.js","components/Patients/PatientList/PatientItem/PatientNextOfKinItem.js","components/Patients/PatientList/PatientNextOfKinList.js","components/Patients/PatientList/PatientItem/PatientComplaintItem.js","components/Patients/PatientList/PatientComplaintList.js","components/Patients/PatientList/PatientItem/PatientSurveyItem.js","components/Patients/PatientList/PatientSurveyList.js","components/Patients/PatientList/PatientItem/PatientVitalsItem.js","components/Patients/PatientList/PatientVitalsList.js","components/Patients/PatientList/PatientItem/PatientExaminationItem.js","components/Patients/PatientList/PatientExaminationList.js","components/Patients/PatientList/PatientItem/PatientHistoryItem.js","components/Patients/PatientList/PatientHistoryList.js","components/Patients/PatientList/PatientItem/PatientAllergiesItem.js","components/Patients/PatientList/PatientAllergiesList.js","components/Patients/PatientList/PatientItem/PatientMedicationItem.js","components/Patients/PatientList/PatientMedicationList.js","components/Patients/PatientList/PatientItem/PatientInvestigationItem.js","components/Patients/PatientList/PatientInvestigationList.js","components/Patients/PatientList/PatientItem/PatientDiagnosisItem.js","components/Patients/PatientList/PatientDiagnosisList.js","components/Patients/PatientList/PatientItem/PatientTreatmentItem.js","components/Patients/PatientList/PatientTreatmentList.js","components/Patients/PatientList/PatientItem/PatientBillingItem.js","components/Patients/PatientList/PatientBillingList.js","components/Patients/PatientList/PatientItem/PatientAttachmentItem.js","components/Patients/PatientList/PatientAttachmentsList.js","components/Patients/PatientList/PatientItem/PatientNoteItem.js","components/Patients/PatientList/PatientNotesList.js","components/Patients/PatientList/PatientItem/PatientTagItem.js","components/Patients/PatientList/PatientTagsList.js","components/Patients/PatientList/PatientItem/VisitConsultantItem.js","components/Patients/PatientList/VisitConsultantList.js","components/Patients/PatientList/PatientItem/VisitComplaintItem.js","components/Patients/PatientList/VisitComplaintList.js","components/Patients/PatientList/PatientItem/VisitExaminationItem.js","components/Patients/PatientList/VisitExaminationList.js","components/Patients/PatientList/PatientItem/VisitSurveyItem.js","components/Patients/PatientList/VisitSurveyList.js","components/Patients/PatientList/PatientItem/VisitVitalsItem.js","components/Patients/PatientList/VisitVitalsList.js","components/Patients/PatientList/PatientItem/VisitHistoryItem.js","components/Patients/PatientList/VisitHistoryList.js","components/Patients/PatientList/PatientItem/VisitInvestigationItem.js","components/Patients/PatientList/VisitInvestigationList.js","components/Patients/PatientList/PatientItem/VisitDiagnosisItem.js","components/Patients/PatientList/VisitDiagnosisList.js","components/Patients/PatientList/PatientItem/VisitTreatmentItem.js","components/Patients/PatientList/VisitTreatmentList.js","components/Patients/PatientList/PatientItem/VisitBillingItem.js","components/Patients/PatientList/VisitBillingList.js","components/Patients/PatientVisit.js","components/Forms/SearchPatientVisitForm.js","components/Patients/PatientDetail.js","components/Patients/PatientList/PatientItem/SearchPatientItem.js","components/Patients/PatientList/SearchPatientList.js","components/Forms/SearchPatientForm.js","components/Forms/SearchPatientIdForm.js","components/Forms/SearchPatientNameForm.js","components/Forms/CreatePatientForm.js","components/Forms/UpdatePatientForm.js","components/Forms/UpdatePatientFieldForm.js","components/Forms/UpdatePatientConsultantForm.js","components/Forms/UpdatePatientInsuranceForm.js","components/Forms/UpdatePatientNextOfKinForm.js","components/Forms/UpdatePatientComplaintForm.js","components/Forms/UpdatePatientSurveyForm.js","components/Forms/UpdatePatientVitalsForm.js","components/Forms/UpdatePatientExaminationForm.js","components/Forms/UpdatePatientHistoryForm.js","components/Forms/UpdatePatientAllergiesForm.js","components/Forms/UpdatePatientMedicationForm.js","components/Forms/UpdatePatientInvestigationForm.js","components/Forms/UpdatePatientDiagnosisForm.js","components/Forms/UpdatePatientTreatmentForm.js","components/Forms/UpdatePatientBillingForm.js","components/Forms/UpdatePatientAttachmentForm.js","components/Forms/UpdatePatientNoteForm.js","components/Forms/UpdatePatientTagForm.js","pages/Patients.js","components/Appointments/AppointmentList/AppointmentItem/AppointmentItem.js","components/Appointments/AppointmentList/AppointmentList.js","components/Appointments/AppointmentList/AppointmentItem/AppointmentNoteItem.js","components/Appointments/AppointmentList/AppointmentNoteList.js","components/Appointments/AppointmentDetail.js","components/Appointments/AppointmentList/AppointmentItem/SearchAppointmentItem.js","components/Appointments/AppointmentList/SearchAppointmentList.js","components/Forms/SearchAppointmentForm.js","components/Forms/SearchAppointmentIdForm.js","components/Forms/SearchAppointmentPatientForm.js","components/Forms/SearchAppointmentDateForm.js","components/Forms/SearchAppointmentDateRangeForm.js","components/Forms/CreateAppointmentForm.js","components/Forms/UpdateAppointmentForm.js","components/Forms/UpdateAppointmentFieldForm.js","pages/Appointments.js","components/Users/thisUserProfile.js","pages/thisUser.js","components/Navigation/MainNavigation.js","App.js","index.js"],"names":["React","createContext","token","userId","user","users","selectedUser","selectedPatient","selectedAppointment","patient","appointment","appointmentPatientId","userUpdateField","patientUpdateField","appointmentUpdateField","appointmentsToday","appointmentsWeekImportant","appointmentsInProgress","userAlert","visit","file","fancyDate","creds","login","tokenExpiration","logout","AlertBox","props","alert","console","log","className","Alert","variant","AuthPage","state","submitHandler","event","preventDefault","email","target","formBasicEmail","value","password","formBasicPassword","trim","length","requestBody","query","fetch","method","body","JSON","stringify","headers","then","res","status","Error","json","resData","responseAlert","data","slice","setState","context","catch","err","Row","authUserId","this","Form","onSubmit","Group","controlId","Label","Control","type","placeholder","Text","Button","size","to","Component","contextType","AuthContext","CreateUserForm","onConfirm","as","Col","onChange","e","checked","canCancel","Accordion","Toggle","eventKey","onClick","onCancel","canConfirm","successText","SignupPage","success","modalConfirmHandler","formGridEmail","creating","formGridPassword","name","formGridName","role","formGridRole","dob","formGridDob","phone","formGridPhone","addressNumber","formGridAddressNumber","addressStreet","formGridAddressStreet","addressTown","formGridAddressTown","addressParish","formGridAddressParish","addressPostOffice","formGridAddressPostOffice","employmentDate","formGridEmploymentDate","formGridEmploymentDateTodayCheckbox","Date","toISOString","terminationDate","formGridTerminationDate","formGridTerminationDateTodayCheckbox","Authorization","Fragment","md","confirmText","userItem","key","onDetail","bind","_id","userList","map","onViewDetail","searchUserItem","searchUserList","searchUsers","SearchUserItem","userAttendanceItem","Card","Body","Title","date","description","Link","href","canDelete","onDelete","attendance","userAttendanceList","userAttendance","userAttendanceDate","substr","UserAttendanceItem","userLeaveItem","startDate","endDate","leave","userLeaveList","userLeave","userLeaveStartDate","userLeaveEndDate","UserLeaveItem","userAttachmentItem","format","path","attachment","onViewAttachment","userAttachmentList","userAttachment","UserAttachmentItem","UserDetail","attachments","userEmploymentDate","userTerminationDate","Tabs","defaultActiveKey","id","Tab","title","onCreatePdf","UserAttendanceList","attendanceDelete","UserLeaveList","leaveDelete","UserAttachmentList","attachmentDelete","spinner","appointmentTodayItem","time","todayDate","appointmentTodayList","appointmentToday","appointmentTodayDate","AppointmentTodayItem","appointmentInProgressItem","inProgressDate","appointmentInProgressList","appointmentInProgress","appointmentInProgressDate","AppointmentInProgressItem","SidebarPage","authContext","_currentValue","isActive","Container","border","Subtitle","AppointmentTodayList","AppointmentInProgressList","AttachmentViewer","fileType","attachmentType","onCloseAttachmentView","attachmentFile","filePath","PdfCreator","onClosePdfCreator","pdfData","UpdateUserForm","address","number","street","town","parish","postOffice","canCancelProfile","UpdateUserFieldForm","UpdateUserAttendanceForm","rows","UpdateUserAttachmentForm","files","UpdateUserLeaveForm","SearchUserForm","SearchUserIdForm","SearchUserNameForm","SearchUserAttendanceDateForm","SearchUserLeaveDateRangeForm","UsersPage","updating","deleting","searching","isLoading","isSorting","userSearchField","userSearchQuery","showAttachment","showThisAttachmentFile","showThisAttachmentType","createPdf","startCreateUserHandler","startUpdateUserHandler","startSearchUserHandler","createUser","prevState","updatedUsers","push","modalConfirmUpdateHandler","selectedUserId","updatedUser","updateUser","fetchUsers","modalConfirmUpdateFieldHandler","formGridField","formGridFieldSelect","field","formGridQuery","updateUserField","updatedUserId","find","updatedUserPos","indexOf","slicedArray","splice","updateUserAttendanceHandler","attendanceDate","formGridAttendanceDate","formGridAttendanceDateTodayCheckbox","attendanceStatus","formGridAttendanceStatus","attendanceDescription","formGridAttendanceDescription","updateUserAttendance","updateUserAttachmentHandler","attachmentFormat","formGridAttachmentFormat","attachmentPath","config","bucketName","s3","dirName","region","accessKeyId","secretAccessKey","ReactS3Client","S3","newFileName","attachmentName","uploadFile","error","updateUserAttachment","updateUserLeaveHandler","formGridLeaveType","leaveType","leaveTitle","formGridLeaveTitle","leaveStartDate","formGridLeaveStartDate","formGridLeaveStartDateTodayCheckbox","leaveEndDate","formGridLeaveEndDate","formGridLeaveEndDateTodayCheckbox","updateUserLeave","modalConfirmSearchHandler","formBasicField","formBasicQuery","formBasicFieldSelect","search","getUserField","modalConfirmSearchIdHandler","formBasicId","getUserId","modalConfirmSearchAttendanceDateHandler","formBasicDate","formBasicDateTodayCheckbox","getUserAttendanceDate","modalConfirmSearchLeaveDateRangeHandler","formBasicStartDate","formBasicEndDate","getUserLeaveDateRange","modalConfirmSearchNameHandler","formBasicName","regex","RegExp","result","filter","match","modalCancelHandler","fetchUsersAsc","usersNameAsc","fetchUsersDesc","usersNameDesc","modalDeleteHandler","deletedUser","deleteUser","deletedUserId","deletedUserPos","deleteUserAttendanceItem","deleteUserAttendance","deleteUserLeaveItem","deleteUserLeave","deleteUserAttachmentItem","deleteUserAttachment","showDetailHandler","closeAttachmentView","closePdfCreator","sm","Nav","Item","disabled","Content","Pane","onEdit","updateUserSpecial","SearchUserList","patientItem","patientId","age","gender","patientList","patients","patientRegistrationDate","registrationDate","PatientItem","patientAppointmentItem","location","patientAppointmentList","patientAppointment","patientAppointmentDate","PatientAppointmentItem","patientInsuranceItem","company","expiry","subscriber","insurance","patientInsuranceList","patientInsurance","patientInsuranceExpiry","PatientInsuranceItem","patientConsultantItem","referenceId","referenceName","referenceRole","consultant","patientConsultantList","patientConsultant","consultantDate","consultantId","undefined","consultantName","consultantRole","reference","PatientConsultantItem","patientNextOfKinItem","nextOfKin","patientNextOfKinList","patientNextOfKin","PatientNextOfKinItem","contact","patientComplaintItem","anamnesis","complaint","patientComplaintList","patientComplaint","patientComplaintDate","PatientComplaintItem","patientSurveyItem","survey","patientSurveyList","patientSurvey","patientSurveyDate","PatientSurveyItem","patientVitalsItem","pr","bp1","bp2","rr","temp","ps02","height","weight","Bmi","urineType","urineValue","vitals","patientVitalsList","patientVitals","patientVitalsDate","PatientVitalsItem","bmi","urine","patientExaminationItem","general","area","measure","followUp","examination","patientExaminationList","patientExamination","patientExaminationDate","PatientExaminationItem","patientHistoryItem","history","patientHistoryList","patientHistory","patientHistoryDate","PatientHistoryItem","patientAllergiesItem","allergies","patientAllergiesList","patientAllergies","PatientAllergiesItem","patientMedicationItem","medication","patientMedicationList","patientMedication","PatientMedicationItem","patientInvestigationItem","investigation","patientInvestigationList","patientInvestigation","patientInvestigationDate","PatientInvestigationItem","patientDiagnosisItem","diagnosis","patientDiagnosisList","patientDiagnosis","patientDiagnosisDate","PatientDiagnosisItem","patientTreatmentItem","dose","frequency","treatment","patientTreatmentList","patientTreatment","patientTreatmentDate","PatientTreatmentItem","patientBillingItem","amount","paid","notes","billing","patientBillingList","patientBilling","patientBillingDate","PatientBillingItem","patientAttachmentItem","patientAttachmentsList","patientAttachments","PatientAttachmentItem","patientNoteItem","note","patientNotesList","patientNotes","PatientNoteItem","patientTagItem","tag","patientTagsList","patientTags","PatientTagItem","VisitConsultantItem","visitConsultantList","consultantItem","visitConsultantDate","consultantReference","VisitComplaintItem","visitComplaintList","complaintItem","visitComplaintDate","complaintAttachment","VisitExaminationItem","visitExaminationList","examinationItem","visitExaminationDate","examinationAttachment","VisitSurveyItem","visitSurveyList","surveyItem","visitSurveyDate","surveyAttachment","VisitVitalsItem","visitVitalsList","vitalsItem","visitVitalsDate","vitalsUrine","VisitHistoryItem","visitHistoryList","historyItem","visitHistoryDate","historyAttachment","VisitInvestigationItem","visitInvestigationList","investigationItem","visitInvestigationDate","investigationAttachment","VisitDiagnosisItem","visitDiagnosisList","diagnosisItem","visitDiagnosisDate","diagnosisAttachment","visitTreatmentList","treatmentItem","visitTreatmentDate","treatmentAttachment","VisitTreatmentItem","VisitBillingItem","visitBillingList","billingItem","visitBillingDate","billingAttachment","PatientVisit","patientName","VisitConsultantList","VisitComplaintList","VisitExaminationList","VisitSurveyList","VisitVitalsList","VisitHistoryList","VisitInvestigationList","VisitDiagnosisList","VisitTreatmentList","VisitBillingList","SearchPatientVisitForm","onGetVisit","PatientDetail","appointments","complaints","surveys","tags","patientDob","patientReferralDate","referralDate","patientExpirationDate","expirationDate","occupation","employer","referringDoctor","attendingPhysician","PatientAppointmentList","appointmentDelete","PatientConsultantList","consultantDelete","PatientInsuranceList","insuranceDelete","PatientNextOfKinList","nextOfKinDelete","PatientComplaintList","complaintDelete","PatientSurveyList","surveyDelete","PatientVitalsList","vitalsDelete","PatientExaminationList","examinationDelete","PatientHistoryList","historyDelete","PatientAllergiesList","allergiesDelete","PatientMedicationList","medicationDelete","PatientInvestigationList","investigationDelete","PatientDiagnosisList","diagnosisDelete","PatientTreatmentList","treatmentDelete","PatientBillingList","billingDelete","PatientAttachmentsList","PatientNotesList","noteDelete","PatientTagsList","tagDelete","searchPatientItem","searchPatientList","searchPatients","SearchPatientItem","SearchPatientForm","SearchPatientIdForm","SearchPatientNameForm","CreatePatientForm","UpdatePatientForm","UpdatePatientFieldForm","UpdatePatientConsultantForm","UpdatePatientInsuranceForm","tas","UpdatePatientNextOfKinForm","UpdatePatientComplaintForm","UpdatePatientSurveyForm","UpdatePatientVitalsForm","UpdatePatientExaminationForm","UpdatePatientHistoryForm","UpdatePatientAllergiesForm","UpdatePatientMedicationForm","UpdatePatientInvestigationForm","UpdatePatientDiagnosisForm","UpdatePatientTreatmentForm","UpdatePatientBillingForm","UpdatePatientAttachmentForm","UpdatePatientNoteForm","UpdatePatientTagForm","PatientsPage","updatingArray","patientSearchField","patientSearchQuery","startCreatePatientHandler","startUpdatePatientHandler","startSearchPatientHandler","formGridTitle","formGridAge","formGridGender","contactPhone","formGridContactPhone","contactEmail","formGridContactEmail","formGridRegistrationDate","formGridRegistrationDateTodayCheckbox","formGridReferralDate","formGridReferralDateTodayCheckbox","formGridExpirationDate","attendingPhysicianName","formGridAttendingPhysicianName","attendingPhysicianEmail","formGridAttendingPhysicianEmail","attendingPhysicianPhone","formGridAttendingPhysicianPhone","referringDoctorName","formGridReferringDoctorName","referringDoctorEmail","formGridReferringDoctorEmail","referringDoctorPhone","formGridReferringDoctorPhone","occupationRole","formGridOccupationRole","occupationEmployer","formGridOccupationEmployer","occupationEmployerContactPhone","formGridOccupationEmployerContactPhone","occupationEmployerContactEmail","formGridOccupationEmployerContactEmail","createPatient","newPatient","updatedPatients","selectedPatientId","formGridExpirationDateTodayCheckbox","updatedPatientId","updatePatient","updatedPatient","updatedPatientPos","fetchPatients","updatePatientField","updatePatientConsultantHandler","patientConsultantReference","formGridConsultantDate","formGridConsultantDateTodayCheckbox","updatePatientConsultant","updatePatientInsuranceHandler","formGridInsuranceCompany","insuranceCompany","insuranceNumber","formGridInsuranceNumber","insuranceExpiry","formGridInsuranceExpiry","insuranceDescription","formGridInsuranceDescription","insuranceSubscriberCompany","formGridInsuranceSubscriberCompany","insuranceSubscriberDescription","formGridInsuranceSubscriberDescription","updatePatientInsurance","updatePatientNextOfKinHandler","formGridNextOfKinName","nextOfKinName","nextOfKinPhone","formGridNextOfKinPhone","nextOfKinEmail","formGridNextOfKinEmail","updatePatientNextOfKin","updatePatientComplaintHandler","formGridComplaintTitle","complaintTitle","complaintDate","formGridComplaintDate","formGridComplaintDateTodayCheckbox","complaintDescription","formGridComplaintDescription","complaintAnamnesis","formGridComplaintAnamnesis","complaintAttachmentFormat","formGridComplaintAttachmentFormat","complaintAttachmentPath","complaintAttachmentName","updatePatientComplaint","updatePatientSurveyHandler","formGridSurveyTitle","surveyDate","formGridSurveyDate","formGridSurveyDateTodayCheckbox","surveyTitle","surveyDescription","formGridSurveyDescription","surveyAttachmentFormat","formGridSurveyAttachmentFormat","surveyAttachmentPath","surveyAttachmentName","updatePatientSurvey","updatePatientVitalsHandler","formGridVitalsDate","vitalsDate","formGridVitalsDateTodayCheckbox","vitalsPr","formGridVitalsPr","vitalsBp1","formGridVitalsBp1","vitalsBp2","formGridVitalsBp2","vitalsRr","formGridVitalsRr","vitalsTemp","formGridVitalsTemp","vitalsPs02","formGridVitalsPs02","vitalsHeight","formGridVitalsHeight","vitalsWeight","formGridVitalsWeight","vitalsBmi","formGridVitalsBmi","vitalsUrineType","formGridVitalsUrineType","vitalsUrineValue","formGridVitalsUrineValue","updatePatientVitals","updatePatientExaminationHandler","formGridExaminationArea","examinationDate","formGridExaminationDate","formGridExaminationDateTodayCheckbox","examinationGeneral","formGridExaminationGeneral","examinationArea","formGridExaminationAreaSelect","examinationType","formGridExaminationType","examinationMeasure","formGridExaminationMeasure","examinationValue","formGridExaminationValue","examinationDescription","formGridExaminationDescription","examinationFollowUp","formGridExaminationFollowUp","examinationAttachmentFormat","formGridExaminationAttachmentFormat","examinationAttachmentPath","examinationAttachmentName","updatePatientExamination","updatePatientHistoryHandler","formGridHistoryTitle","historyType","formGridHistoryType","historyDate","formGridHistoryDate","formGridHistoryDateTodayCheckbox","historyTitle","historyDescription","formGridHistoryDescription","historyAttachmentFormat","formGridHistoryAttachmentFormat","historyAttachmentPath","historyAttachmentName","updatePatientHistory","updatePatientAllergiesHandler","formGridAllergiesTitle","allergiesTitle","allergiesType","formGridAllergiesTypeSelect","formGridAllergiesType","allergiesDescription","formGridAllergiesDescription","allergiesAttachmentFormat","formGridAllergiesAttachmentFormat","allergiesAttachmentPath","allergiesAttachmentName","updatePatientAllergies","updatePatientMedicationHandler","formGridMedicationTitle","medicationTitle","medicationType","formGridMedicationType","medicationDescription","formGridMedicationDescription","medicationAttachmentFormat","formGridMedicationAttachmentFormat","medicationAttachmentPath","medicationAttachmentName","updatePatientMedication","updatePatientInvestigationHandler","formGridInvestigationTitle","investigationDate","formGridInvestigationDate","formGridInvestigationDateTodayCheckbox","investigationTitle","investigationType","formGridInvestigationTypeSelect","formGridInvestigationType","investigationDescription","formGridInvestigationDescription","investigationAttachmentFormat","formGridInvestigationAttachmentFormat","investigationAttachmentPath","investigationAttachmentName","updatePatientInvestigation","updatePatientDiagnosisHandler","formGridDiagnosisTitle","diagnosisDate","formGridDiagnosisDate","formGridDiagnosisDateTodayCheckbox","diagnosisTitle","diagnosisType","formGridDiagnosisType","diagnosisDescription","formGridDiagnosisDescription","diagnosisAttachmentFormat","formGridDiagnosisAttachmentFormat","diagnosisAttachmentPath","diagnosisAttachmentName","updatePatientDiagnosis","updatePatientTreatmentHandler","formGridTreatmentTitle","treatmentDate","formGridTreatmentDate","formGridTreatmentDateTodayCheckbox","treatmentTitle","treatmentDescription","formGridTreatmentDescription","treatmentDose","formGridTreatmentDose","treatmentFrequency","formGridTreatmentFrequency","treatmentType","formGridTreatmentType","formGridTreatmentTypeSelect","treatmentAttachmentFormat","formGridTreatmentAttachmentFormat","treatmentAttachmentPath","treatmentAttachmentName","updatePatientTreatment","updatePatientBillingHandler","formGridBillingTitle","billingDate","formGridBillingDate","formGridBillingDateTodayCheckbox","billingTitle","billingType","formGridBillingType","billingDescription","formGridBillingDescription","billingAmount","formGridBillingAmount","billingPaid","formGridBillingPaid","billingNotes","formGridBillingNotes","billingAttachmentFormat","formGridBillingAttachmentFormat","billingAttachmentPath","billingAttachmentName","updatePatientBilling","updatePatientAttachmentHandler","formGridPatientAttachmentFormat","updatePatientAttachment","updatePatientNoteHandler","formGridNote","updatePatientNotes","updatePatientTagHandler","formGridTag","updatePatientTags","getPatientField","getPatientId","getPatientVisit","formBasicVisitDate","visitDate","substring","visitSurveys","x","visitConsultants","visitComplaints","visitVitals","visitExaminations","visitHistory","visitInvestigations","visitDiagnosis","visitTreatments","visitBilling","fetchPatientsAsc","patientsNameAsc","fetchPatientsDesc","patientsNameDesc","deletedPatient","deletePatient","deletedPatientId","deletedPatientPos","deletePatientInsuranceItem","deletePatientInsurance","deletePatientAppointmentItem","deletePatientAppointment","deletePatientConsultantItem","deletePatientConsultant","deletePatientNextOfKinItem","deletePatientNextOfKin","deletePatientComplaintItem","deletePatientComplaint","deletePatientSurveyItem","deletePatientSurvey","deletePatientVitalsItem","deletePatientVitals","deletePatientExaminationItem","deletePatientExamination","deletePatientHistoryItem","deletePatientHistory","deletePatientAllergiesItem","deletePatientAllergies","deletePatientMedicationItem","deletePatientMedication","deletePatientInvestigationItem","deletePatientInvestigation","deletePatientDiagnosisItem","deletePatientDiagnosis","deletePatientTreatmentItem","deletePatientTreatment","deletePatientBillingItem","deletePatientBilling","deletePatientAttachmentItem","deletePatientAttachment","deletePatientNoteItem","deletePatientNote","deletePatientTagItem","deletePatientTag","nameElRef","createRef","updatePatientSpecial","PatientList","SearchPatientList","appointmentItem","appointmentId","appointmentList","appointmentDate","appointmentPatient","AppointmentItem","appointmentNoteItem","appointmentNoteList","appointmentNote","AppointmentNoteItem","AppointmentDetail","appointmentPatientContact","seenTime","checkinTime","inProgress","attended","important","AppointmentNoteList","searchAppointmentItem","resultDate","searchAppointmentList","searchAppointments","searchAppointmentDate","SearchAppointmentItem","SearchAppointmentForm","SearchAppointmentIdForm","SearchAppointmentPatientForm","SearchAppointmentDateForm","SearchAppointmentDateRangeForm","CreateAppointmentForm","UpdateAppointmentForm","UpdateAppointmentFieldForm","AppointmentsPage","appointmentSearchField","appointmentSearchQuery","startCreateAppointmentHandler","startUpdateAppointmentHandler","startSearchAppointmentHandler","formGridType","formGridDate","formGridDateTodayCheckbox","formGridTime","formGridSeenTime","formGridCheckinTime","formGridLocation","formGridDescription","formGridInProgress","formGridAttended","formGridImportant","createAppointment","fetchAppointments","updatedAppointmentId","updateAppointment","updatedAppointment","updatedAppointmentPos","updateAppointmentPatientHandler","selectedAppointmentId","updateAppointmentPatient","updateAppointmentField","getAppointmentField","getAppointmentId","modalConfirmSearchPatientHandler","formBasicPatientId","getAppointmentPatient","searchApointments","modalConfirmSearchDateHandler","getAppointmentDate","modalConfirmSearchDateRangeHandler","appointmentStartDate","appointmentEndDate","getAppointmentDateRange","fetchAppointmentsAsc","appointmentsDateAsc","fetchAppointmentsDesc","appointmentsDateDesc","deletedAppointment","deleteAppointment","deletedAppointmentId","deletedAppointmentPos","selecteAppointment","fetchAppointmentToday","fetchAppointmentInProgress","getAppointmentToday","selectedstate","updateAppointmentSpecial","AppointmentList","SearchAppointmentList","thisUserProfile","userAddress","ThisUserPage","getThisUser","getCreds","thisUser","sessionStorage","setItem","you","updateUserSpecialProfile","mainNavigation","Consumer","App","clear","sessionStorageAuth","Provider","from","exact","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2562417d.chunk.js","sourcesContent":["import React from 'react';\n\nexport default React.createContext({\n    token: null,\n    userId: null,\n    user: {},\n    users:[],\n    selectedUser: {},\n    selectedPatient: {},\n    selectedAppointment: {},\n    patient: {},\n    appointment: {},\n    appointmentPatientId: null,\n    userUpdateField: null,\n    patientUpdateField: null,\n    appointmentUpdateField: null,\n    appointmentsToday: null,\n    appointmentsWeekImportant: null,\n    appointmentsInProgress: null,\n    userAlert: null,\n    visit: null,\n    file: null,\n    fancyDate: null,\n    creds: null,\n    login: (token, userId, tokenExpiration) => {},\n    logout: () => {}\n});\n","\nimport React from 'react';\nimport Alert from 'react-bootstrap/Alert'\n\nimport './alertBox.css'\n\nconst AlertBox = (props) => {\n\n  let alert = \"Alerts shown here\";\n  if (props.alert !== null) {\n    // console.log(\"alert incoming!!\");\n    alert = '\"'+props.alert+'\"';\n  }\n\n  console.log(`\n      alert: ${alert},\n    `);\n\nreturn (\n  <div className=\"alertBox\">\n  <Alert variant=\"warning\">\n  {alert}\n  </Alert>\n  </div>\n)\n\n}\n\nexport default AlertBox;\n","import React, { Component } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport { NavLink } from 'react-router-dom';\nimport Form from 'react-bootstrap/Form';\nimport Row from 'react-bootstrap/Row';\n\n\nimport './Auth.css';\nimport AuthContext from '../context/auth-context';\nimport AlertBox from '../components/AlertBox';\n\n\nclass AuthPage extends Component {\n  state = {\n    userAlert: null,\n  };\n  static contextType = AuthContext;\n\n  // constructor(props) {\n  //   super(props);\n  // }\n\n  // switchModeHandler = () => {\n  //   this.setState(prevState => {\n  //     return { isLogin: !prevState.isLogin };\n  //   });\n  // };\n\n\n  submitHandler = event => {\n    console.log(\"login function...\");\n    event.preventDefault();\n    const email = event.target.formBasicEmail.value;\n    const password = event.target.formBasicPassword.value;\n\n    if (email.trim().length === 0 || password.trim().length === 0) {\n      return;\n    }\n\n    let requestBody = {\n      query: `\n        query {\n          login(email: \"${email}\", password: \"${password}\") {\n            userId\n            token\n            tokenExpiration\n          }\n        }\n      `};\n\n    fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n    // fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          // this.context.userAlert = 'Failed!';\n          throw new Error('Failed!');\n        }\n        // this.context.userAlert = 'Failed!';\n        return res.json();\n      })\n      .then(resData => {\n        const responseAlert = JSON.stringify(resData.data).slice(2,25)\n        console.log(`\n          resData slice: ${responseAlert},\n          resData: ${JSON.stringify(resData.data)},\n          `);\n\n          this.setState({userAlert: responseAlert})\n        if (resData.data.login.token) {\n          this.context.login(\n            resData.data.login.token,\n            resData.data.login.userId,\n            resData.data.login.tokenExpiration\n          );\n\n          // const sessionStorageLoginInfo = {\n          //   token: resData.data.login.token,\n          //   userId: resData.data.login.userId,\n          //   tokenExpiration: resData.data.login.tokenExpiration\n          // };\n\n          // sessionStorage.setItem('login info', sessionStorageLoginInfo);\n          // sessionStorage.setItem('login info', JSON.stringify(sessionStorageLoginInfo));\n\n        }\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n        // this.context.userAlert = err;\n        // console.log(`\n        //   err: ${this.context.userAlert}\n        //   `);\n      });\n  };\n\n  render() {\n    return (\n      <Row>\n      <AlertBox\n        authUserId={this.context.userId}\n        alert={this.state.userAlert}\n      />\n\n\n      <Form className=\"auth-form\" onSubmit={this.submitHandler}>\n      <Form.Group controlId=\"formBasicEmail\">\n        <Form.Label>Email address</Form.Label>\n        <Form.Control type=\"email\" placeholder=\"Enter email\"/>\n        <Form.Text className=\"text-muted\">\n          We'll never share your email with anyone else.\n        </Form.Text>\n      </Form.Group>\n\n      <Form.Group controlId=\"formBasicPassword\">\n        <Form.Label>Password</Form.Label>\n        <Form.Control type=\"password\" placeholder=\"Password\" />\n      </Form.Group>\n      <Button variant=\"outline-success\" type=\"submit\" className=\"loginButton\" size=\"lg\">\n        Login\n      </Button>\n\n      <Button variant=\"outline-warning\" className=\"loginButton\" size=\"lg\">\n        <NavLink to=\"/signup\">Signup</NavLink>\n      </Button>\n    </Form>\n\n      </Row>\n\n\n    );\n  }\n}\n\nexport default AuthPage;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\n// import FormCheck from 'react-bootstrap/FormCheck'\n// import { NavLink } from 'react-router-dom';\nimport Accordion from 'react-bootstrap/Accordion';\n// import AuthContext from '../../context/auth-context';\n// import DatePicker from \"react-datepicker\";\n\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport './CreateUserForm.css';\n\nconst CreateUserForm = (props) => {\n\n  console.log(\"CreateUserForm...\", {...props});\nreturn (\n<div className=\"CreateFormContainer\">\n<Form onSubmit={props.onConfirm}>\n<Form.Row>\n  <Form.Group as={Col} controlId=\"formGridEmail\">\n    <Form.Label>Email</Form.Label>\n    <Form.Control type=\"email\" placeholder=\"Enter email\"/>\n  </Form.Group>\n\n  <Form.Group as={Col} controlId=\"formGridPassword\">\n    <Form.Label>Password</Form.Label>\n    <Form.Control type=\"password\" placeholder=\"Password\"/>\n  </Form.Group>\n</Form.Row>\n\n<Form.Row>\n\n<Form.Group as={Col} controlId=\"formGridName\">\n  <Form.Label>Name</Form.Label>\n  <Form.Control type=\"text\" placeholder=\"Name\" />\n</Form.Group>\n\n\n<Form.Group as={Col} controlId=\"formGridRole\">\n  <Form.Label>Role</Form.Label>\n  <Form.Control as=\"select\">\n  <option>guest</option>\n  <option>nurse</option>\n  <option>doctor</option>\n  <option>staff</option>\n\n  </Form.Control>\n</Form.Group>\n\n<Form.Group as={Col} controlId=\"formGridPhone\">\n  <Form.Label>Phone</Form.Label>\n  <Form.Control type=\"number\" placeholder=\"phone\"/>\n</Form.Group>\n</Form.Row>\n\n<Form.Row>\n<Form.Group as={Col} controlId=\"formGridDob\">\n  <Form.Label>D.O.B</Form.Label>\n  <Form.Control type=\"date\" placeholder=\"Date of Birth\"/>\n</Form.Group>\n\n  {\n    // <DatePicker className=\"calendarDob\"\n    //   selected={AuthContext._currentValue.fancyDate}\n    //   onChange={(e) => {console.log(e);AuthContext._currentValue.fancyDate = e}}\n    // />\n  }\n\n<Form.Group as={Col} controlId=\"formGridEmploymentDate\">\n  <Form.Label>Employment Date</Form.Label>\n  <Form.Control type=\"date\" placeholder=\"employmentDate\" />\n</Form.Group>\n<Form.Group as={Col} controlId=\"formGridEmploymentDateTodayCheckbox\">\n  <Form.Label>Today's Date?</Form.Label>\n  <Form.Control type=\"checkbox\" onChange={(e) => {console.log(e.target.checked)}}/>\n</Form.Group>\n\n<Form.Group as={Col} controlId=\"formGridTerminationDate\">\n  <Form.Label>Termination Date</Form.Label>\n  <Form.Control type=\"date\" placeholder=\"terminationDate\" />\n</Form.Group>\n</Form.Row>\n<Form.Group as={Col} controlId=\"formGridTerminationDateTodayCheckbox\">\n  <Form.Label>Today's Date?</Form.Label>\n  <Form.Control type=\"checkbox\" onChange={(e) => {console.log(e.target.checked)}}/>\n</Form.Group>\n\n\n<Form.Row>\n<Form.Group as={Col} controlId=\"formGridAddressNumber\">\n  <Form.Label>Street No.</Form.Label>\n  <Form.Control type=\"number\" placeholder=\"addressNumber\"/>\n</Form.Group>\n\n<Form.Group as={Col} controlId=\"formGridAddressStreet\">\n  <Form.Label>Street Name</Form.Label>\n  <Form.Control type=\"text\" placeholder=\"addressStreet\"/>\n</Form.Group>\n\n<Form.Group as={Col} controlId=\"formGridAddressTown\">\n  <Form.Label>Town</Form.Label>\n  <Form.Control type=\"text\" placeholder=\"addressTown\"/>\n</Form.Group>\n</Form.Row>\n\n<Form.Row>\n<Form.Group as={Col} controlId=\"formGridAddressParish\">\n  <Form.Label>Parish</Form.Label>\n  <Form.Control type=\"text\" placeholder=\"addressParish\"/>\n</Form.Group>\n<Form.Group as={Col} controlId=\"formGridAddressPostOffice\">\n  <Form.Label>Post Office</Form.Label>\n  <Form.Control type=\"text\" placeholder=\"addressPostOffice\"/>\n</Form.Group>\n</Form.Row>\n\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"0\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n\n{props.canConfirm && (\n  <Button variant=\"success\" type=\"submit\">Create</Button>\n)}\n<p>{props.successText}</p>\n\n</Form>\n{\n  // <AuthContext.Consumer>\n// </AuthContext.Consumer>\n}\n</div>\n\n)};\n\nexport default CreateUserForm;\n","import React, { Component } from 'react';\n// import Form from 'react-bootstrap/Form';\n// import Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n// import Button from 'react-bootstrap/Button';\n// import Card from 'react-bootstrap/Card';\n\nimport AlertBox from '../components/AlertBox';\nimport CreateUserForm from '../components/Forms/CreateUserForm';\nimport './Auth.css';\n\nclass SignupPage extends Component {\n  state = {\n    success: \"Signup!!\",\n    userAlert: null,\n  };\n\n  modalConfirmHandler = (event) => {\n\n    event.preventDefault();\n    console.log(\"signing up...\");\n    console.log(\"CreateUserFormData:  \", event.target.formGridEmail.value);\n\n    this.setState({ creating: false });\n    const email = event.target.formGridEmail.value;\n    const password = event.target.formGridPassword.value;\n    const name = event.target.formGridName.value;\n    const role = event.target.formGridRole.value;\n    let dob = event.target.formGridDob.value;\n    let phone = event.target.formGridPhone.value;\n    let addressNumber = event.target.formGridAddressNumber.value;\n    let addressStreet = event.target.formGridAddressStreet.value;\n    let addressTown = event.target.formGridAddressTown.value;\n    let addressParish = event.target.formGridAddressParish.value;\n    let addressPostOffice = event.target.formGridAddressPostOffice.value;\n\n    let employmentDate = event.target.formGridEmploymentDate.value;\n    if (event.target.formGridEmploymentDateTodayCheckbox.checked === true) {\n      employmentDate = new Date().toISOString().slice(0,10);\n    }\n\n    let terminationDate = event.target.formGridTerminationDate.value;\n    if (event.target.formGridTerminationDateTodayCheckbox.checked === true) {\n      terminationDate = new Date().toISOString().slice(0,10);\n    }\n\n    if (\n      email.trim().length === 0 ||\n      password.trim().length === 0 ||\n      name.trim().length === 0 ||\n      role.trim().length === 0 ||\n      dob.trim().length === 0 ||\n      phone.trim().length === 0 ||\n      addressNumber.trim().length === 0 ||\n      addressStreet.trim().length === 0 ||\n      addressTown.trim().length === 0 ||\n      addressParish.trim().length === 0 ||\n      addressPostOffice.trim().length === 0 ||\n      employmentDate.trim().length === 0 ||\n      terminationDate.trim().length === 0\n    ) {\n      console.log(\"blank fields detected!!!...Please try again...\");\n      this.setState({userAlert: \"blank fields detected!!!...Please try again...\"});\n      return;\n    }\n\n    const token = this.context.token;\n    const userId = this.context.userId;\n    const user = { email, password, name, role, dob, phone, addressNumber, addressStreet, addressTown, addressParish, addressPostOffice, employmentDate, terminationDate };\n\n    console.log(`\n      creating user...\n      userId: ${userId}\n      email: ${email},\n      password: ${password},\n      name: ${name},\n      role: ${role},\n      dob: ${dob},\n      phone: ${phone},\n      addressNumber: ${addressNumber},\n      addressStreet: ${addressStreet},\n      addressTown: ${addressTown},\n      addressParish: ${addressParish},\n      addressPostOffice: ${addressPostOffice},\n      employmentDate: ${employmentDate},\n      terminationDate: ${terminationDate},\n      `);\n      this.setState({userAlert: \"creating user...\"});\n\n    const requestBody = {\n      query: `\n          mutation {\n            createUser(userInput: {email:\"${email}\",password:\"${password}\",name:\"${name}\",role:\"${role}\",\n\n            employmentDate:\"${employmentDate}\",terminationDate:\"${terminationDate}\"})\n            {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}\n          }\n        `\n    };\n\n    fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n    // fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n        console.log(\"resData head slice:  \", JSON.stringify(resData).slice(2,7));\n        if (JSON.stringify(resData).slice(2,7) === 'error') {\n          console.log(\"signup...failed...\");\n          this.setState({success: \"Something went wrong!!!\" });\n        } else {\n          this.setState({success: \"Signup success...Proceed to login\" });\n          console.log(this.state.success);\n        }\n        this.setState({userAlert: JSON.stringify(resData).slice(2,7)})\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n\n      <Row>\n      <AlertBox\n        authUserId={this.context.userId}\n        alert={this.state.userAlert}\n      />\n\n      <Col className=\"signupRow\" md={8}>\n        <CreateUserForm\n          canConfirm\n          onConfirm={this.modalConfirmHandler}\n          onSubmit={this.modalConfirmHandler}\n          confirmText=\"Confirm\"\n          successText={this.state.success}\n        />\n      </Col>\n      </Row>\n\n      </React.Fragment>\n    );\n  }\n}\n\nexport default SignupPage;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\n\nimport './UserItem.css';\n\nconst userItem = props => (\n  <li key={props.userId} className=\"users__list-item_master\">\n    <div>\n      <h5 className=\"userItemHeading\"> Name:</h5>\n      <p className=\"userItemText\">\n        {props.name}\n      </p>\n      <h5 className=\"userItemHeading\"> Role:</h5>\n      <p className=\"userItemText\">\n        {props.role}\n      </p>\n    </div>\n    <div>\n    <Button variant=\"primary\" onClick={props.onDetail.bind(this, props._id)}>\n          Details\n        </Button>\n    </div>\n  </li>\n);\n\nexport default userItem;\n","import React from 'react';\n\nimport UserItem from './UserItem/UserItem';\nimport './UserList.css';\n\nconst userList = props => {\n\n  const users = props.users.map(user => {\n    return (\n      <UserItem\n        key={user._id}\n        userId={props.authUserId}\n        _id={user._id}\n        name={user.name}\n        email={user.email}\n        role={user.role}\n        onDetail={props.onViewDetail}\n      />\n    );\n  });\n\n  return <ul className=\"user__list1_master\">{users}</ul>;\n};\n\nexport default userList;\n","import React from 'react';\n// import { NavLink } from 'react-router-dom';\nimport Button from 'react-bootstrap/Button';\n\nimport './UserItem.css';\n\nconst searchUserItem = props => (\n  <li key={props.userId} className=\"users__list-item_master\">\n    <div>\n      <p className=\"userItemHeading\"> Name:</p>\n      <p className=\"userItemText\">\n        {props.name}\n      </p>\n      <p className=\"userItemHeading\"> Role:</p>\n      <p className=\"userItemText\">\n        {props.role}\n      </p>\n    </div>\n    <div>\n    <Button variant=\"primary\" onClick={props.onDetail.bind(this, props._id)}>\n          Details\n        </Button>\n    </div>\n  </li>\n);\n\nexport default searchUserItem;\n","import React from 'react';\n// import Accordion from 'react-bootstrap/Accordion';\n// import Button from 'react-bootstrap/Button';\n\nimport SearchUserItem from './UserItem/SearchUserItem';\nimport './UserList.css';\n\nconst searchUserList = props => {\n  console.log(\" search user list:  \", props.searchUsers);\n\n  const searchUsers = props.searchUsers.map(user => {\n    return (\n      <React.Fragment>\n      <SearchUserItem\n        key={user._id}\n        userId={props.authUserId}\n        _id={user._id}\n        name={user.name}\n        email={user.email}\n        role={user.role}\n        onDetail={props.onViewDetail}\n      />\n      </React.Fragment>\n    );\n  });\n  return <ul className=\"user__list1_master\">{searchUsers}</ul>;\n};\n\nexport default searchUserList;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card'\nimport './UserItem.css';\n\nconst userAttendanceItem = props => (\n  <li key={props.userId} className=\"users__list-item_detail\">\n    <div>\n\n    <Card className=\"card\">\n      <Card.Body>\n        <Card.Title>\n          Attendance\n        </Card.Title>\n\n        \n        <ul className=\"cardUl\">\n          <li className=\"cardLi\">\n          <p className=\"userItemHeading\"> Date:</p>\n          <p className=\"userItemText\">\n          {props.date}\n          </p>\n          </li>\n          <li>\n          <p className=\"userItemHeading\"> Status:</p>\n          <p className=\"userItemText\">\n          {props.status}\n          </p>\n          </li>\n          <li>\n          <p className=\"userItemHeading\"> Description:</p>\n          <p className=\"userItemText\">\n          {props.description}\n          </p>\n          </li>\n        </ul>\n        \n        <Card.Link href=\"\">\n        { props.canDelete === true && (\n          <Button variant=\"danger\" onClick={props.onDelete.bind(this, props.attendance)}>\n            Delete\n          </Button>\n        )}\n        </Card.Link>\n      </Card.Body>\n    </Card>\n    </div>\n  </li>\n);\n\nexport default userAttendanceItem;\n","import React from 'react';\n\nimport UserAttendanceItem from './UserItem/UserAttendanceItem';\nimport './UserList.css';\n\nconst userAttendanceList = props => {\n  console.log(\"user attendance list props\", props.userAttendance);\n\n  const userAttendance = props.userAttendance.map(attendance => {\n    let userAttendanceDate = attendance.date;\n    if (userAttendanceDate !== null) {\n      userAttendanceDate = new Date (attendance.date.substr(0,10)*1000).toISOString().slice(0,10);\n      console.log(\"userAttendanceDate\", userAttendanceDate);\n    }\n\n    // const userAttendanceDate = new Date (attendance.date.substr(0,10)*1000).toLocaleString();\n    // const userAttendanceDate = new Date (attendance.date.substr(0,10)*1000).toUTCString();\n    // console.log(\"userAttendanceDate\", userAttendanceDate);\n\n    return (\n      <UserAttendanceItem\n        key={attendance.date}\n        userId={props.authUserId}\n        date={userAttendanceDate}\n        status={attendance.status}\n        description={attendance.description}\n        canDelete={props.canDelete}\n        onDelete={props.onDelete}\n        attendance={attendance}\n      />\n    );\n  });\n\n  return <ul className=\"user__list1_detail\">{userAttendance}</ul>;\n};\n\nexport default userAttendanceList;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card'\n\nimport './UserItem.css';\n\nconst userLeaveItem = props => (\n  <li key={props.userId} className=\"users__list-item_detail\">\n    <div>\n\n    <Card className=\"card\">\n      <Card.Body>\n        <Card.Title>\n          Leave\n        </Card.Title>\n\n        \n        <ul className=\"cardUl\">\n          <li className=\"cardLi\">\n          <p className=\"userItemHeading\"> Type:</p>\n          <p className=\"userItemText\">\n          {props.type}\n          </p>\n          </li>\n          <li>\n          <p className=\"userItemHeading\"> Start Date:</p>\n          <p className=\"userItemText\">\n          {props.startDate}\n          </p>\n          </li>\n          <li>\n          <p className=\"userItemHeading\"> End Date:</p>\n          <p className=\"userItemText\">\n          {props.endDate}\n          </p>\n          </li>\n        </ul>\n        \n        <Card.Link href=\"\">\n        { props.canDelete === true && (\n          <Button variant=\"danger\" onClick={props.onDelete.bind(this, props.leave)}>\n            Delete\n          </Button>\n        )}\n        </Card.Link>\n      </Card.Body>\n    </Card>\n    </div>\n\n  </li>\n);\n\nexport default userLeaveItem;\n","import React from 'react';\n\nimport UserLeaveItem from './UserItem/UserLeaveItem';\nimport './UserList.css';\n\nconst userLeaveList = props => {\n  console.log(\"user leave list props\", props.userLeave);\n  const userLeave = props.userLeave.map(leave => {\n    const userLeaveStartDate = new Date (leave.startDate.substr(0,10)*1000).toISOString().slice(0,10);\n    const userLeaveEndDate = new Date (leave.endDate.substr(0,10)*1000).toISOString().slice(0,10);\n    return (\n      <UserLeaveItem\n        key={leave.type}\n        userId={props.authUserId}\n        type={leave.type}\n        startDate={userLeaveStartDate}\n        endDate={userLeaveEndDate}\n        description={leave.description}\n        canDelete={props.canDelete}\n        onDelete={props.onDelete}\n        leave={leave}\n      />\n    );\n  });\n\n  return <ul className=\"user__list1_detail\">{userLeave}</ul>;\n};\n\nexport default userLeaveList;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card'\n// import { NavLink } from 'react-router-dom';\n\nimport './UserItem.css';\n\nconst userAttachmentItem = props => (\n  <li key={props.userId} className=\"users__list-item_detail\">\n    <div>\n\n    <Card className=\"card\">\n      <Card.Body>\n        <Card.Title>\n          Attachment\n        </Card.Title>\n\n        \n        <ul className=\"cardUl\">\n          <li className=\"cardLi\">\n          <p className=\"userItemHeading\"> Name:</p>\n          <p className=\"userItemText\">\n          {props.name}\n          </p>\n          </li>\n          <li>\n          <p className=\"userItemHeading\"> Format:</p>\n          <p className=\"userItemText\">\n          {props.format}\n          </p>\n          </li>\n          <li>\n          <p className=\"userItemHeading\"> Path:</p>\n          <p className=\"userItemText\">\n          {props.path}\n          </p>\n          </li>\n        </ul>\n        \n        <Card.Link href=\"\">\n        { props.canDelete === true && (\n          <Button variant=\"danger\"  className=\"listButton\" onClick={props.onDelete.bind(this, props.attachment)}>\n            Delete\n          </Button>\n        )}\n        </Card.Link>\n        <Card.Link href=\"\">\n        <Button variant=\"primary\"  className=\"listButton\" onClick={props.onViewAttachment.bind(this, props.attachment)}>\n          View\n        </Button>\n        </Card.Link>\n      </Card.Body>\n    </Card>\n\n    </div>\n\n\n  </li>\n);\n\nexport default userAttachmentItem;\n","import React from 'react';\n\nimport UserAttachmentItem from './UserItem/UserAttachmentItem';\nimport './UserList.css';\n\nconst userAttachmentList = props => {\n  console.log(\"user attachment list props\", props.userAttachment);\n  const userAttachment = props.userAttachment.map(attachment => {\n    return (\n      <UserAttachmentItem\n        key={attachment.name}\n        userId={props.authUserId}\n        name={attachment.name}\n        format={attachment.format}\n        path={attachment.path}\n        canDelete={props.canDelete}\n        onDelete={props.onDelete}\n        attachment={attachment}\n        onViewAttachment={props.onViewAttachment}\n      />\n    );\n  });\n\n  return <ul className=\"user__list1_detail\">{userAttachment}</ul>;\n};\n\nexport default userAttachmentList;\n","import React from 'react';\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\n// import Accordion from 'react-bootstrap/Accordion';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nimport UserAttendanceList from './UserList/UserAttendanceList';\nimport UserLeaveList from './UserList/UserLeaveList';\nimport UserAttachmentList from './UserList/UserAttachmentList';\n// import AuthContext from '../../context/auth-context';\n\nimport './UserDetail.css';\n\nconst UserDetail = (props) => {\n\n  const {...user} = props.user;\n  const authUserId = props.authUserId;\n  const userAttendance = user.attendance;\n  const userLeave = user.leave;\n  const userAttachment = user.attachments;\n  // const authSelectedUser = JSON.stringify(props.AuthContext.selectedUser);\n  const userEmploymentDate = new Date(user.employmentDate.substr(0,10)*1000).toISOString().slice(0,10);\n  let userTerminationDate = user.terminationDate;\n  if (user.terminationDate !== null) {\n    userTerminationDate = new Date(user.terminationDate.substr(0,10)*1000).toISOString().slice(0,10);\n  }\n\n  // console.log(\"user attendance:  \", userAttendance, authSelectedUser.slice(0,5) === '{\"_id' , authSelectedUser.slice(0,5));\n  console.log(\"UserDetail.props.authUserId:  \",authUserId, \"  UserDetail.props.user:  \", {...user});\n\n  return (\n    <div className={\"UserDetailBox1\"}>\n\n    <Tabs defaultActiveKey=\"profile\" id=\"uncontrolled-tab-example\" className=\"tab\">\n\n      <Tab eventKey=\"Demographics\" title=\"Demographics\">\n      <Card className=\"UserDetailCard\">\n      <Card.Body>\n        <Card.Title><span className=\"ul\">User Details</span></Card.Title>\n        <Row className=\"detailCardRow\">\n          <Col className=\"detailCardCol\">\n            <Card.Text>\n              <span className=\"bold\">ID :</span> {user._id}\n            </Card.Text>\n            <Card.Text>\n              <span className=\"bold\">Name :</span> {user.name}\n            </Card.Text>\n            <Card.Text>\n              <span className=\"bold\">Email :</span> {user.email}\n            </Card.Text>\n            <Card.Text>\n              <span className=\"bold\">Phone :</span> {user.phone}\n            </Card.Text>\n            <Card.Text>\n              <span className=\"bold\">Role :</span> {user.role}\n            </Card.Text>\n          </Col>\n\n          <Col className=\"detailCardCol\">\n            <Card.Text>\n              <span className=\"bold\">Employment Date:</span> {userEmploymentDate}\n            </Card.Text>\n            <Card.Text>\n              <span className=\"bold\">Termination Date:</span> {userTerminationDate}\n            </Card.Text>\n          </Col>\n        </Row>\n\n        <Row className=\"detailCardRow\">\n          <Col className=\"detailCardCol\">\n            { props.canDelete === true && (\n              <Button variant=\"danger\" onClick={props.onDelete}>\n                Delete Staff !!??\n              </Button>\n            )}\n          </Col>\n\n          <Col>\n            <Button variant=\"warning\" onClick={props.onCreatePdf.bind(this, user)}>\n              Create Pdf\n            </Button>\n          </Col>\n        </Row>\n\n      </Card.Body>\n      </Card>\n      </Tab>\n      <Tab eventKey=\"Attendance\" title=\"Attendance\">\n      <UserAttendanceList\n          userAttendance={userAttendance}\n          authUserId={props.AuthContext.userId}\n          canDelete={props.canDelete}\n          onDelete={props.attendanceDelete}\n        />\n      </Tab>\n      <Tab eventKey=\"Leave\" title=\"Leave\">\n      <UserLeaveList\n          userLeave={userLeave}\n          authUserId={props.AuthContext.userId}\n          canDelete={props.canDelete}\n          onDelete={props.leaveDelete}\n        />\n      </Tab>\n      <Tab eventKey=\"Attachments\" title=\"Attachments\">\n      <UserAttachmentList\n          userAttachment={userAttachment}\n          authUserId={props.AuthContext.userId}\n          canDelete={props.canDelete}\n          onDelete={props.attachmentDelete}\n          onViewAttachment={props.onViewAttachment}\n        />\n      </Tab>\n    </Tabs>\n\n    </div>\n\n  );\n}\n\nexport default UserDetail;\n","import React from 'react';\n\nimport './Spinner.css';\n\nconst spinner = () => (\n  <div className=\"spinner\">\n    <div className=\"lds-dual-ring\" />\n  </div>\n);\n\nexport default spinner;\n","import React from 'react';\n\nimport './UserItem.css';\n\nconst appointmentTodayItem = props => (\n\n  <li key={props.userId} className=\"users__list-item_master\">\n    <div>\n      <p>\n        <span className=\"bold\">Time :</span> {props.time}\n      </p>\n      <p>\n        <span className=\"bold\">Title :</span> {props.title}\n      </p>\n      <p>\n        <span className=\"bold\">Date :</span> {props.todayDate}\n      </p>\n    </div>\n  </li>\n);\n\nexport default appointmentTodayItem;\n","import React from 'react';\n\nimport AppointmentTodayItem from './AppointmentItem/AppointmentTodayItem';\nimport './UserList.css';\n\nconst appointmentTodayList = props => {\n  console.log(\"patient Today list props\", props.appointmentToday);\n  const appointmentToday = props.appointmentToday.map(appointment => {\n    const appointmentTodayDate = new Date(appointment.date.substr(0,10)*1000).toISOString().slice(0,10);\n    console.log(\"appointmentTodayDate\", appointmentTodayDate);\n    return (\n      <AppointmentTodayItem\n        key={appointment.title}\n        userId={props.authUserId}\n        todayDate={appointmentTodayDate}\n        title={appointment.title}\n        date={appointment.date}\n        time={appointment.time}\n      />\n    );\n  });\n\n  return <ul className=\"user__list1_master\">{appointmentToday}</ul>;\n};\n\nexport default appointmentTodayList;\n","import React from 'react';\n\nimport './UserItem.css';\n\n\nconst appointmentInProgressItem = props => (\n  <li key={props.userId} className=\"users__list-item_master\">\n    <div>\n      <p>\n        <span className=\"bold\">Time :</span> {props.time}\n      </p>\n      <p>\n        <span className=\"bold\">Title :</span> {props.title}\n      </p>\n      <p>\n        <span className=\"bold\">Date :</span> {props.inProgressDate}\n      </p>\n    </div>\n  </li>\n);\n\nexport default appointmentInProgressItem;\n","import React from 'react';\n\nimport AppointmentInProgressItem from './AppointmentItem/AppointmentInProgressItem';\nimport './UserList.css';\n\nconst appointmentInProgressList = props => {\n  console.log(\"patient InProgress list props\", props.appointmentInProgress);\n  const appointmentInProgress = props.appointmentInProgress.map(appointment => {\n    const appointmentInProgressDate = new Date(appointment.date.substr(0,10)*1000).toISOString().slice(0,10);\n    return (\n      <AppointmentInProgressItem\n        key={appointment.title}\n        userId={props.authUserId}\n        inProgressDate={appointmentInProgressDate}\n        title={appointment.title}\n        date={appointment.date}\n        time={appointment.time}\n      />\n    );\n  });\n\n  return <ul className=\"user__list1_master\">{appointmentInProgress}</ul>;\n};\n\nexport default appointmentInProgressList;\n","// import ReactDOM from 'react-dom';\nimport React, { Component } from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Button from 'react-bootstrap/Button';\n// import Accordion from 'react-bootstrap/Accordion';\nimport Card from 'react-bootstrap/Card';\n\n\nimport AppointmentTodayList from '../components/Appointments/AppointmentList/AppointmentTodayList';\nimport AppointmentInProgressList from '../components/Appointments/AppointmentList/AppointmentInProgressList';\n\n// import Modal from '../components/Modal/Modal';\n// import Backdrop from '../components/Backdrop/Backdrop';\n// import Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\nimport './Sidebar.css';\n\nclass SidebarPage extends Component {\n  state = {\n    authContext: AuthContext._currentValue,\n  };\n  isActive = true;\n\n  static contextType = AuthContext;\n\n  // constructor(props) {\n  //   super(props);\n  //   // this.appointmentsToday = this.context.appointmentsToday;\n  //   // this.appointmentsWeekImportant = this.context.appointmentsWeekImportant;\n  //   // this.appointmentsInprogress = this.context.appointmentsInprogress;\n  // }\n\n\n\n\n  componentDidMount() {\n    console.log(\"state:  \", this.state.authContext);\n    // console.log(\"context:  \", AuthContext._currentValue);\n    // run get today appts func and req\n  }\n\n\n  componentWillUnmount() {\n    this.isActive = false;\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n      <Container className=\"sidebarContainer\">\n      <Row className=\"sidebarRow1\">\n      <Col md={12} className=\"\">\n\n      <Card border=\"primary\" className=\"sidebarCard\">\n      <Card.Body>\n        <Card.Title className=\"cardTitle\">You</Card.Title>\n        <Card.Subtitle className=\"mb-2\">ID:</Card.Subtitle>\n        <Card.Text>\n          {this.context.user._id}\n        </Card.Text>\n        <Card.Subtitle className=\"mb-2\">Name:</Card.Subtitle>\n        <Card.Text>\n          {this.context.user.name}\n        </Card.Text>\n        <Card.Subtitle className=\"mb-2\">Role:</Card.Subtitle>\n        <Card.Text>\n          {this.context.user.role}\n        </Card.Text>\n      </Card.Body>\n      </Card>\n\n      <Card border=\"secondary\" className=\"sidebarCard\">\n      <Card.Body>\n        <Card.Title className=\"cardTitle\">Selection</Card.Title>\n        <Card.Subtitle className=\"mb-2\">Staff:</Card.Subtitle>\n        <Card.Text>\n          {this.context.selectedUser.name}\n        </Card.Text>\n        <Card.Subtitle className=\"mb-2\">Patient:</Card.Subtitle>\n        <Card.Text>\n          {this.context.selectedPatient.name}\n        </Card.Text>\n        <Card.Subtitle className=\"mb-2\">Appointment:</Card.Subtitle>\n        <Card.Text>\n          {this.context.selectedAppointment.title}\n        </Card.Text>\n      </Card.Body>\n      </Card>\n      </Col>\n      </Row>\n      <Row className=\"sidebarRow2\">\n      <Col md={12} className=\"apptSidebarCol\">\n      <h5 className=\"apptSidebarTitle\">Appointments Today</h5>\n      {this.context.appointmentsToday === null && (\n        <Button variant=\"outline-warning\">\n          Check the Appointments page to load\n        </Button>\n      )}\n      {this.context.appointmentsToday !== null && (\n\n        <AppointmentTodayList\n          appointmentToday={this.context.appointmentsToday}\n          authUserId={this.context.userId}\n          />\n      )}\n\n      </Col>\n      </Row>\n      <Row className=\"apptSidebarRow\">\n      <Col md={12} className=\"\">\n      <h5 className=\"apptSidebarTitle\">Appointments InProgress</h5>\n      {this.context.appointmentsToday === null && (\n        <Button variant=\"outline-warning\">\n          Check the Appointments page to load\n        </Button>\n      )}\n      {this.context.appointmentsInProgress !== null && (\n\n        <AppointmentInProgressList\n          appointmentInProgress={this.context.appointmentsInProgress}\n          authUserId={this.context.userId}\n          />\n      )}\n\n      </Col>\n      </Row>\n      </Container>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default SidebarPage;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport FileViewer from 'react-file-viewer';\n\nimport \"./AttachmentViewer.css\"\n\nconst AttachmentViewer = (props) =>{\n  const fileType = props.attachmentType.substr(1,4)\n\n  console.log(`\n    fileType: ${props.attachmentType},\n    also fileType: ${fileType},\n    `);\n\n\nreturn (\n  <div className=\"attachmentViewerBg\">\n    <div className=\"attachmentViewer\">\n    <h5 className=\"attachmentViewerTitle\">AttachmentViewer</h5>\n    <Button variant=\"danger\" className=\"attachmentViewerCloseButton\" onClick={props.onCloseAttachmentView}>\n      close\n    </Button>\n    {props.attachmentFile && (\n      <FileViewer\n          fileType={props.attachmentType}\n          filePath={props.attachmentFile}\n      />\n    )}\n\n\n    </div>\n  </div>\n)\n\n}\n\n\nexport default AttachmentViewer;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport { Page, Text, View, Document, StyleSheet } from '@react-pdf/renderer';\nimport { PDFViewer } from '@react-pdf/renderer';\n\nimport \"./AttachmentViewer.css\"\n\n// const styles = StyleSheet.create({\n//   page: {\n//     flexDirection: 'row',\n//     backgroundColor: '#E4E4E4'\n//   },\n//   section: {\n//     margin: 10,\n//     padding: 10,\n//     flexGrow: 1\n//   }\n// });\n//\n// const MyDocument = () => (\n//   <Document>\n//     <Page size=\"A4\" style={styles.page}>\n//       <View style={styles.section}>\n//         <Text>Section #1</Text>\n//       </View>\n//       <View style={styles.section}>\n//         <Text>Section #2</Text>\n//       </View>\n//     </Page>\n//   </Document>\n// );\n\nconst PdfCreator = (props) =>{\n  console.log(`\n    props: ${props},\n    `);\n\nreturn (\n  <div className=\"attachmentViewerBg\">\n    <div className=\"attachmentViewer\">\n    <h5> Document Generator </h5>\n    <Button variant=\"danger\" onClick={props.onClosePdfCreator}>\n      close\n    </Button>\n    <p>{props.pdfData.title}</p>\n    <p>{props.pdfData.body}</p>\n    </div>\n    {\n      // <PDFViewer>\n      //   <MyDocument />\n      // </PDFViewer>\n    }\n  </div>\n)\n\n}\n\n\nexport default PdfCreator;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Accordion from 'react-bootstrap/Accordion'\n// import FormCheck from 'react-bootstrap/FormCheck'\n// import AuthContext from '../../context/auth-context';\nimport DatePicker from \"react-datepicker\";\n\nimport './CreateUserForm.css';\n\nconst UpdateUserForm = (props) => {\n\nconsole.log(\"UpdateUserForm.props:  \", {...props});\nconst {...user} = props.user;\nconsole.log(\"UpdateUserForm.props.user:  \", {...user});\n// const [startDate, setStartDate] = useState(new Date());\n\nreturn (\n<div className=\"UpdateFormContainer\">\n<Form onSubmit={props.onConfirm}>\n<Form.Row>\n  <Form.Group as={Col} controlId=\"formGridEmail\">\n    <Form.Label>Email</Form.Label>\n    <Form.Control type=\"email\" placeholder={user.email}/>\n  </Form.Group>\n\n  <Form.Group as={Col} controlId=\"formGridPassword\">\n    <Form.Label>Password</Form.Label>\n    <Form.Control type=\"password\" placeholder={user.password}/>\n  </Form.Group>\n</Form.Row>\n\n<Form.Row>\n\n<Form.Group as={Col} controlId=\"formGridName\">\n  <Form.Label>Name</Form.Label>\n  <Form.Control type=\"text\" placeholder={user.name}/>\n</Form.Group>\n{\n  // <Form.Group as={Col} controlId=\"formGridRole\">\n  //   <Form.Label>Role</Form.Label>\n  //   <Form.Control type=\"text\" placeholder={user.role}/>\n  // </Form.Group>\n}\n\n<Form.Group as={Col} controlId=\"formGridPhone\">\n  <Form.Label>Phone</Form.Label>\n  <Form.Control type=\"number\" placeholder={user.phone}/>\n</Form.Group>\n</Form.Row>\n\n<Form.Row>\n<Form.Group as={Col} controlId=\"formGridDob\">\n  <Form.Label>D.O.B</Form.Label>\n  <Form.Control type=\"date\" placeholder={user.dob}/>\n</Form.Group>\n\n{\n  // <DatePicker className=\"calendarDob\"\n  //   selected={startDate}\n  //   onChange={date => setStartDate(date)}\n  // />\n}\n\n<Form.Group as={Col} controlId=\"formGridEmploymentDate\">\n  <Form.Label>Employment Date</Form.Label>\n  <Form.Control type=\"date\" placeholder={user.employmentDate}/>\n</Form.Group>\n<Form.Group as={Col} controlId=\"formGridEmploymentDateTodayCheckbox\">\n  <Form.Label>Today's Date</Form.Label>\n  <Form.Control type=\"checkbox\" onChange={(e) => {console.log(e.target.checked)}}/>\n</Form.Group>\n\n<Form.Group as={Col} controlId=\"formGridTerminationDate\">\n  <Form.Label>Termination Date</Form.Label>\n  <Form.Control type=\"date\" placeholder={user.terminationDate}/>\n</Form.Group>\n<Form.Group as={Col} controlId=\"formGridTerminationDateTodayCheckbox\">\n  <Form.Label>Today's Date</Form.Label>\n  <Form.Control type=\"checkbox\" onChange={(e) => {console.log(e.target.checked)}}/>\n</Form.Group>\n</Form.Row>\n\n\n<Form.Row>\n<Form.Group as={Col} controlId=\"formGridAddressNumber\">\n  <Form.Label>Street No.</Form.Label>\n  <Form.Control type=\"number\" placeholder={user.address.number}/>\n</Form.Group>\n\n<Form.Group as={Col} controlId=\"formGridAddressStreet\">\n  <Form.Label>Street Name</Form.Label>\n  <Form.Control type=\"text\" placeholder={user.address.street}/>\n</Form.Group>\n\n<Form.Group as={Col} controlId=\"formGridAddressTown\">\n  <Form.Label>Town</Form.Label>\n  <Form.Control type=\"text\" placeholder={user.address.town}/>\n</Form.Group>\n</Form.Row>\n\n<Form.Row>\n<Form.Group as={Col} controlId=\"formGridAddressParish\">\n  <Form.Label>Parish</Form.Label>\n  <Form.Control type=\"text\" placeholder={user.address.parish}/>\n</Form.Group>\n<Form.Group as={Col} controlId=\"formGridAddressPostOffice\">\n  <Form.Label>Post Office</Form.Label>\n  <Form.Control type=\"text\" placeholder={user.address.postOffice}/>\n</Form.Group>\n</Form.Row>\n\n\n{props.canCancel && (\n  <Button variant=\"danger\" onClick={props.onCancel}>Cancel</Button>\n)}\n{props.canCancelProfile && (\n  <Button variant=\"danger\" onClick={props.onCancel}>Cancel</Button>\n)}\n\n{props.canConfirm && (\n  <Button variant=\"primary\" type=\"submit\">\n  Submit\n  </Button>\n)}\n\n</Form>\n</div>\n\n)};\n\nexport default UpdateUserForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Accordion from 'react-bootstrap/Accordion'\n// import FormCheck from 'react-bootstrap/FormCheck'\n// import AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst UpdateUserFieldForm = (props) => {\n\nconsole.log(\"UpdateUserFieldForm.props:  \", {...props});\nconst {...user} = props.user;\nconsole.log(\"UpdateUserFieldForm.props.user:  \", {...user});\n\nreturn (\n<div className=\"UpdateFormContainer\">\n<Form onSubmit={props.onConfirm}>\n<Form.Row>\n  <Form.Group as={Col} controlId=\"formGridFieldSelect\">\n  <Form.Label>Field Options</Form.Label>\n  <Form.Control as=\"select\">\n    <option>select</option>\n    <option>email</option>\n    <option>password</option>\n    <option>name</option>\n    <option>dob</option>\n    <option>phone</option>\n    <option>address.town</option>\n    <option>address.parish</option>\n    <option>employmentDate</option>\n    <option>terminationDate</option>\n  </Form.Control>\n  </Form.Group>\n    <Form.Group as={Col} controlId=\"formGridField\">\n    <Form.Label>Field</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"Query\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridQuery\">\n    <Form.Label>Query</Form.Label>\n    <Form.Label>Date Format YYYY-MM-DD</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"Query\"/>\n  </Form.Group>\n</Form.Row>\n\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"2\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n{props.canCancelProfile && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"5\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n\n{props.canConfirm && (\n  // <Accordion.Toggle as={Button} variant=\"success\" eventKey=\"2\" className=\"btn\" type=\"submit\">\n  // Submit\n  // </Accordion.Toggle>\n  <Button variant=\"success\" type=\"submit\">\n  Submit\n  </Button>\n)}\n\n</Form>\n{\n  // <AuthContext.Consumer>\n// </AuthContext.Consumer>\n}\n</div>\n\n)};\n\nexport default UpdateUserFieldForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Accordion from 'react-bootstrap/Accordion'\n// import FormCheck from 'react-bootstrap/FormCheck'\nimport AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nconst UpdateUserAttendanceForm = (props) => {\n\nconsole.log(\"UpdateUserAttendanceForm.props:  \", {...props});\nconst {...user} = props.user;\nconsole.log(\"UpdateUserAttendanceForm.props.user:  \", {...user});\n\n\nreturn (\n<div className=\"UpdateFormContainer\">\n<Form onSubmit={props.onConfirm}>\n\n<Form.Row>\n  <Form.Group as={Col} controlId=\"formGridAttendanceDate\">\n    <Form.Label>Date</Form.Label>\n    <Form.Control type=\"date\" placeholder=\"Date\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridAttendanceDateTodayCheckbox\">\n    <Form.Label>Today's Date?</Form.Label>\n    <Form.Control type=\"checkbox\" onChange={(e) => {console.log(e.target.checked)}}/>\n  </Form.Group>\n  {\n    // <DatePicker className=\"calendarDob\"\n    //   selected={AuthContext._currentValue.fancyDate}\n    //   onChange={(e) => {console.log(e);AuthContext._currentValue.fancyDate = e}}\n    // />\n  }\n  <Form.Group as={Col} controlId=\"formGridAttendanceStatus\">\n    <Form.Label>Status</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"Attendance Status\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridAttendanceDescription\">\n    <Form.Label>Description</Form.Label>\n    <Form.Control as=\"textarea\" rows=\"3\" placeholder=\"Attendance Description\"/>\n  </Form.Group>\n</Form.Row>\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"2\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n{props.canCancelProfile && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"5\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n\n{props.canConfirm && (\n  <Button variant=\"success\" type=\"submit\">Add Attendance</Button>\n)}\n\n</Form>\n{\n  // <AuthContext.Consumer>\n// </AuthContext.Consumer>\n}\n</div>\n\n)};\n\nexport default UpdateUserAttendanceForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Accordion from 'react-bootstrap/Accordion'\n// import FormCheck from 'react-bootstrap/FormCheck'\nimport AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst UpdateUserAttachmentForm = (props) => {\n\nconsole.log(\"UpdateUserAttachmentForm.props:  \", {...props}, \" AuthContext: \", AuthContext);\nconst {...user} = props.user;\nconsole.log(\"UpdateUserAttachmentForm.props.user:  \", {...user});\n// let file = null;\n\nreturn (\n<div className=\"UpdateFormContainer\">\n<Form onSubmit={props.onConfirm}>\n<Form.Row>\n\n  <Form.Group as={Col} controlId=\"formGridAttachmentFormat\">\n    <Form.Label>Format</Form.Label>\n    <Form.Control type=\"string\" placeholder=\"File format\"/>\n  </Form.Group>\n  </Form.Row>\n\n  <Form.Row>\n  {\n  //   <Form.Group as={Col} controlId=\"formGridAttachmentPath\">\n  //   <Form.Label>Path</Form.Label>\n  //   <Form.Control type=\"string\" placeholder=\"File path\"/>\n  // </Form.Group>\n}\n  <Form.Group as={Col} controlId=\"formGridAttachmentFile\">\n    <Form.Label>File</Form.Label>\n    <Form.Control type=\"file\" placeholder=\"File\" onChange={(e) => {console.log(e.target.files[0]);AuthContext._currentValue.file = e.target.files[0];console.log(AuthContext._currentValue.file);}}/>\n  </Form.Group>\n{\n  // (e) => console.log(e.target.files[0])\n\n  // <Form.Group as={Col} controlId=\"formGridAttachmentName\">\n  //   <Form.Label>Filename</Form.Label>\n  //   <Form.Control type=\"text\" placeholder=\"Filename\"/>\n  // </Form.Group>\n}\n</Form.Row>\n\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"2\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n{props.canCancelProfile && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"5\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n\n{props.canConfirm && (\n  <Button variant=\"success\" type=\"submit\">Add</Button>\n)}\n\n</Form>\n{\n  // <AuthContext.Consumer>\n// </AuthContext.Consumer>\n}\n</div>\n\n)};\n\nexport default UpdateUserAttachmentForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Accordion from 'react-bootstrap/Accordion'\n// import FormCheck from 'react-bootstrap/FormCheck'\n// import AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst UpdateUserLeaveForm = (props) => {\n\nconsole.log(\"UpdateUserLeaveForm.props:  \", {...props});\nconst {...user} = props.user;\nconsole.log(\"UpdateUserLeaveForm.props.user:  \", {...user});\n\n\nreturn (\n<div className=\"UpdateFormContainer\">\n<Form onSubmit={props.onConfirm}>\n<Form.Row>\n  <Form.Group as={Col} controlId=\"formGridLeaveType\">\n    <Form.Label>Type</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"Leave Type\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridLeaveTitle\">\n    <Form.Label>Title</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"Leave Title\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridLeaveStartDate\">\n    <Form.Label>Start Date</Form.Label>\n    <Form.Control type=\"date\" placeholder=\"Start Date\"/>\n  </Form.Group>\n\n  <Form.Group as={Col} controlId=\"formGridLeaveStartDateTodayCheckbox\">\n    <Form.Label>Today's Date?</Form.Label>\n    <Form.Control type=\"checkbox\" onChange={(e) => {console.log(e.target.checked)}}/>\n  </Form.Group>\n\n  <Form.Group as={Col} controlId=\"formGridLeaveEndDate\">\n    <Form.Label>End Date</Form.Label>\n    <Form.Control type=\"date\" placeholder=\"End Date\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridLeaveEndDateTodayCheckbox\">\n    <Form.Label>Today's Date?</Form.Label>\n    <Form.Control type=\"checkbox\" onChange={(e) => {console.log(e.target.checked)}}/>\n  </Form.Group>\n\n</Form.Row>\n\n\n{props.canCancel && (\n  <Button variant=\"danger\" onClick={props.onCancel}>Cancel</Button>\n)}\n{props.canCancelProfile && (\n  <Button variant=\"danger\" onClick={props.onCancel}>Cancel</Button>\n)}\n\n{props.canConfirm && (\n  <Button variant=\"primary\" type=\"submit\">\n  Submit\n  </Button>\n)}\n\n</Form>\n</div>\n\n)};\n\nexport default UpdateUserLeaveForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\n// import AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst SearchUserForm = (props) => {\n// const {...search} = props.search;\n\nreturn (\n<div className=\"SearchFormContainer\">\n  <Form onSubmit={props.onConfirm}>\n<Form.Group controlId=\"formBasicFieldSelect\">\n<Form.Label>Field</Form.Label>\n<Form.Control as=\"select\">\n<option>select</option>\n<option>email</option>\n<option>password</option>\n<option>name</option>\n<option>dob</option>\n<option>phone</option>\n<option>address.town</option>\n<option>address.parish</option>\n<option>role</option>\n<option>employmentDate</option>\n<option>terminationDate</option>\n</Form.Control>\n<Form.Text className=\"text-muted\">\n</Form.Text>\n</Form.Group>\n\n<Form.Group controlId=\"formBasicField\">\n<Form.Label>Field</Form.Label>\n<Form.Control type=\"textarea\" rows=\"5\" placeholder=\"Field\"/>\n</Form.Group>\n\n<Form.Group controlId=\"formBasicQuery\">\n<Form.Label>Query</Form.Label>\n<Form.Control type=\"textarea\" rows=\"5\" placeholder=\"Query\"/>\n</Form.Group>\n\n{props.canCancel && (\n  <Button variant=\"danger\" onClick={props.onCancel}>Cancel</Button>\n)}\n\n{props.canConfirm && (\n  <Button variant=\"primary\" type=\"submit\">\n  Submit\n  </Button>\n)}\n\n{\n// <AuthContext.Consumer>\n// </AuthContext.Consumer>\n\n\n// populate feilds with user object fields\n}\n</Form>\n</div>\n\n\n)};\n\nexport default SearchUserForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\n// import AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst SearchUserIdForm = (props) => {\n// const {...search} = props.search;\n\nreturn (\n<div className=\"SearchFormContainer\">\n  <Form onSubmit={props.onConfirm}>\n\n<Form.Group controlId=\"formBasicId\">\n<Form.Label>User Id</Form.Label>\n<Form.Control type=\"text\" placeholder=\"Id\"/>\n</Form.Group>\n\n{props.canCancel && (\n  <Button variant=\"danger\" onClick={props.onCancel}>Cancel</Button>\n)}\n\n{props.canConfirm && (\n  <Button variant=\"primary\" type=\"submit\">\n  Submit\n  </Button>\n)}\n</Form>\n</div>\n\n\n)};\n\nexport default SearchUserIdForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\n// import AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst SearchUserNameForm = (props) => {\n// const {...search} = props.search;\n\nreturn (\n<div className=\"SearchFormContainer\">\n  <Form onSubmit={props.onConfirm}>\n\n  <Form.Group controlId=\"formBasicName\">\n  <Form.Label>Name</Form.Label>\n  <Form.Control type=\"text\" placeholder=\"Name\"/>\n  </Form.Group>\n\n  {props.canCancel && (\n    <Button variant=\"danger\" onClick={props.onCancel}>Cancel</Button>\n  )}\n\n  {props.canConfirm && (\n    <Button variant=\"primary\" type=\"submit\">\n    Submit\n    </Button>\n  )}\n</Form>\n</div>\n\n\n)};\n\nexport default SearchUserNameForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\n// import AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst SearchUserAttendanceDateForm = (props) => {\n// const {...search} = props.search;\n\nreturn (\n<div className=\"SearchFormContainer\">\n  <Form onSubmit={props.onConfirm}>\n\n<Form.Group controlId=\"formBasicDate\">\n<Form.Label>Attendance Date</Form.Label>\n<Form.Control type=\"date\" placeholder=\"Date\"/>\n</Form.Group>\n\n<Form.Group controlId=\"formBasicDateTodayCheckbox\">\n  <Form.Label>Today's Date?</Form.Label>\n  <Form.Control type=\"checkbox\" onChange={(e) => {console.log(e.target.checked)}}/>\n</Form.Group>\n\n{props.canCancel && (\n  <Button variant=\"danger\" onClick={props.onCancel}>Cancel</Button>\n)}\n\n{props.canConfirm && (\n  <Button variant=\"primary\" type=\"submit\">\n  Submit\n  </Button>\n)}\n\n{\n// <AuthContext.Consumer>\n// </AuthContext.Consumer>\n}\n</Form>\n</div>\n\n\n)};\n\nexport default SearchUserAttendanceDateForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\n// import AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst SearchUserLeaveDateRangeForm = (props) => {\n// const {...search} = props.search;\n\nreturn (\n<div className=\"SearchFormContainer\">\n  <Form onSubmit={props.onConfirm}>\n\n<Form.Group controlId=\"formBasicStartDate\">\n<Form.Label>Start Date</Form.Label>\n<Form.Control type=\"date\" placeholder=\"StartDate\"/>\n</Form.Group>\n\n<Form.Group controlId=\"formBasicEndDate\">\n<Form.Label>End Date</Form.Label>\n<Form.Control type=\"date\" placeholder=\"EndDate\"/>\n</Form.Group>\n\n{props.canCancel && (\n  <Button variant=\"danger\" onClick={props.onCancel}>Cancel</Button>\n)}\n\n{props.canConfirm && (\n  <Button variant=\"primary\" type=\"submit\">\n  Submit\n  </Button>\n)}\n</Form>\n</div>\n\n\n)};\n\nexport default SearchUserLeaveDateRangeForm;\n","import S3 from 'react-aws-s3';\n// import S3FileUpload from 'react-s3';\nimport React, { Component } from 'react';\n// import FileViewer from 'react-file-viewer';\n\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n// import Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Accordion from 'react-bootstrap/Accordion';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\n// import TabContainer from 'react-bootstrap/TabContainer';\n// import TabContent from 'react-bootstrap/TabContent';\n// import TabPane from 'react-bootstrap/TabPane';\nimport Nav from 'react-bootstrap/Nav';\nimport Card from 'react-bootstrap/Card';\n\n// import Modal from '../components/Modal/Modal';\n// import Backdrop from '../components/Backdrop/Backdrop';\nimport UserList from '../components/Users/UserList/UserList';\nimport SearchUserList from '../components/Users/UserList/SearchUserList';\nimport UserDetail from '../components/Users/UserDetail';\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\n\nimport SidebarPage from './Sidebar';\nimport AlertBox from '../components/AlertBox';\nimport AttachmentViewer from '../components/AttachmentViewer';\nimport PdfCreator from '../components/PdfCreator';\n\nimport CreateUserForm from '../components/Forms/CreateUserForm';\nimport UpdateUserForm from '../components/Forms/UpdateUserForm';\nimport UpdateUserFieldForm from '../components/Forms/UpdateUserFieldForm';\nimport UpdateUserAttendanceForm from '../components/Forms/UpdateUserAttendanceForm';\nimport UpdateUserAttachmentForm from '../components/Forms/UpdateUserAttachmentForm';\nimport UpdateUserLeaveForm from '../components/Forms/UpdateUserLeaveForm';\nimport SearchUserForm from '../components/Forms/SearchUserForm';\nimport SearchUserIdForm from '../components/Forms/SearchUserIdForm';\nimport SearchUserNameForm from '../components/Forms/SearchUserNameForm';\nimport SearchUserAttendanceDateForm from '../components/Forms/SearchUserAttendanceDateForm';\nimport SearchUserLeaveDateRangeForm from '../components/Forms/SearchUserLeaveDateRangeForm';\n\nimport './Users.css';\n\nclass UsersPage extends Component {\n  state = {\n    creating: false,\n    updating: false,\n    deleting: false,\n    searching: false,\n    users: [],\n    searchUsers: [],\n    isLoading: false,\n    isSorting: false,\n    selectedUser: null,\n    userUpdateField: null,\n    userSearchField: null,\n    userSearchQuery: null,\n    canDelete: null,\n    userAlert: null,\n    file: null,\n    showAttachment: false,\n    showThisAttachmentFile: null,\n    showThisAttachmentType: null,\n    createPdf: false,\n    pdfData: null,\n  };\n  isActive = true;\n\n  static contextType = AuthContext;\n\n  // constructor(props) {\n  //   super(props);\n  // }\n\n  componentDidMount() {\n    this.fetchUsers();\n    if (this.context.user.name === \"Lord-of-the-Manor\"){\n      this.setState({canDelete: true})\n    }\n    // if (this.context.user.name === 'admin579'){\n    //   this.setState({canDelete: true})\n    // }\n  }\n\n\n  startCreateUserHandler = () => {\n    this.setState({ creating: true });\n    console.log(\"CreateUserForm...\");\n  };\n  startUpdateUserHandler = () => {\n    this.setState({ updating: true });\n    console.log(\"UpdateUserForm...\");\n  };\n\n  startSearchUserHandler = () => {\n    this.setState({ searching: true });\n    console.log(\"SearchUserForm...\");\n  };\n\n  modalConfirmHandler = (event) => {\n\n    console.log(\"CreateUserFormData:  \", event.target.formGridEmail.value);\n\n    this.setState({ creating: false });\n    const email = event.target.formGridEmail.value;\n    const password = event.target.formGridPassword.value;\n    const name = event.target.formGridName.value;\n    const role = event.target.formGridRole.value;\n    let dob = event.target.formGridDob.value;\n    let phone = event.target.formGridPhone.value;\n    let addressNumber = event.target.formGridAddressNumber.value;\n    let addressStreet = event.target.formGridAddressStreet.value;\n    let addressTown = event.target.formGridAddressTown.value;\n    let addressParish = event.target.formGridAddressParish.value;\n    let addressPostOffice = event.target.formGridAddressPostOffice.value;\n\n    let employmentDate = event.target.formGridEmploymentDate.value;\n    if (event.target.formGridEmploymentDateTodayCheckbox.checked === true) {\n      employmentDate = new Date().toISOString().slice(0,10);\n    }\n\n    let terminationDate = event.target.formGridTerminationDate.value;\n\n    if (\n      email.trim().length === 0 ||\n      password.trim().length === 0 ||\n      name.trim().length === 0 ||\n      role.trim().length === 0 ||\n      dob.trim().length === 0 ||\n      phone.trim().length === 0 ||\n      addressNumber.trim().length === 0 ||\n      addressStreet.trim().length === 0 ||\n      addressTown.trim().length === 0 ||\n      addressParish.trim().length === 0 ||\n      addressPostOffice.trim().length === 0 ||\n      employmentDate.trim().length === 0\n    ) {\n      console.log(\"blank fields detected!!!...Please try again...\");\n      this.setState({userAlert: \"blank fields detected!!!...Please try again...\"});\n      return;\n    }\n\n    const token = this.context.token;\n    const userId = this.context.userId;\n\n    console.log(`\n      creating user...\n      userId: ${userId}\n      email: ${email},\n      password: ${password},\n      name: ${name},\n      role: ${role},\n      dob: ${dob},\n      phone: ${phone},\n      addressNumber: ${addressNumber},\n      addressStreet: ${addressStreet},\n      addressTown: ${addressTown},\n      addressParish: ${addressParish},\n      addressPostOffice: ${addressPostOffice},\n      employmentDate: ${employmentDate},\n      terminationDate: ${terminationDate},\n      `);\n\n    const requestBody = {\n      query: `\n          mutation {createUser(userInput: {email:\"${email}\",password:\"${password}\",name:\"${name}\",dob:\"${dob}\",addressNumber:${addressNumber},addressStreet:\"${addressStreet}\",addressTown:\"${addressTown}\",addressParish:\"${addressParish}\", addressPostOffice:\"${addressPostOffice}\",phone:\"${phone}\",role:\"${role}\",employmentDate:\"${employmentDate}\",terminationDate:\"${terminationDate}\"})\n          {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}\n        }\n        `};\n\n\n    fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n    // fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"create user response data... \" + JSON.stringify(resData.data.createUser));\n\n        // this.state.users.push(resData.data.createUser)\n        this.setState(prevState => {\n          const updatedUsers = [...prevState.users];\n          updatedUsers.push(resData.data.createUser);\n\n          return { users: updatedUsers };\n        });\n        this.context.users.push(resData.data.createUser);\n        const responseAlert = JSON.stringify(resData.data).slice(0,8);\n        this.setState({userAlert: responseAlert});\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n  };\n\n\n  modalConfirmUpdateHandler = (event) => {\n\n    const token = this.context.token;\n    const userId = this.context.userId;\n    let selectedUserId = this.context.selectedUser._id;\n    if(userId !== selectedUserId && this.context.user.role !== 'admin') {\n      console.log(\"Not the creator or Admin! No edit permission!!\");\n      this.setState({userAlert: \"Not the creator or Admin! No edit permission!!\"});\n      selectedUserId = null;\n    }\n\n    console.log(\"UpdateUserFormData:  \", event.target.formGridEmail.value);\n\n    this.setState({ updating: false });\n\n    let email = event.target.formGridEmail.value;\n    let password = event.target.formGridPassword.value;\n    let name = event.target.formGridName.value;\n    let role = this.context.selectedUser.role;\n    let dob = event.target.formGridDob.value;\n    let phone = event.target.formGridPhone.value;\n    let addressNumber = event.target.formGridAddressNumber.value;\n    let addressStreet = event.target.formGridAddressStreet.value;\n    let addressTown = event.target.formGridAddressTown.value;\n    let addressParish = event.target.formGridAddressParish.value;\n    let addressPostOffice = event.target.formGridAddressPostOffice.value;\n\n    let employmentDate = event.target.formGridEmploymentDate.value;\n    if (event.target.formGridEmploymentDateTodayCheckbox.checked === true) {\n      employmentDate = new Date().toISOString().slice(0,10);\n    }\n\n    let terminationDate = event.target.formGridTerminationDate.value;\n    if (event.target.formGridTerminationDateTodayCheckbox.checked === true) {\n      terminationDate = new Date().toISOString().slice(0,10);\n    }\n\n    if (email.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      email = this.context.selectedUser.email;\n    }\n    if (password.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      password = this.context.selectedUser.password;\n    }\n    if (name.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      name = this.context.selectedUser.name;\n    }\n    // if (role.trim().length === 0) {\n    //   console.log(\"blank fields detected!!!...filling w/ previous data...\");\n    //   role = this.state.selectedUser.role;\n    // }\n    if (dob.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      dob = this.context.selectedUser.dob;\n    }\n    if (phone.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      phone = this.context.selectedUser.phone;\n    }\n    if (addressNumber.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      addressNumber = this.context.selectedUser.address.number;\n    }\n    if (addressStreet.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      addressStreet = this.context.selectedUser.address.street;\n    }\n    if (addressTown.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      addressTown = this.context.selectedUser.address.town;\n    }\n    if (addressParish.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      addressParish = this.context.selectedUser.address.parish;\n    }\n    if (addressPostOffice.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      addressPostOffice = this.context.selectedUser.address.postOffice;\n    }\n    if (employmentDate.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      employmentDate = this.context.selectedUser.employmentDate;\n    }\n    if (terminationDate.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      terminationDate = this.context.selectedUser.terminationDate;\n    }\n\n    console.log(`\n      updating user profile...\n      userId: ${userId}\n      email: ${email},\n      password: ${password},\n      name: ${name},\n      role: ${role},\n      dob: ${dob},\n      phone: ${phone},\n      addressNumber: ${addressNumber},\n      addressStreet: ${addressStreet},\n      addressTown: ${addressTown},\n      addressParish: ${addressParish},\n      addressPostOffice: ${addressPostOffice},\n      employmentDate: ${employmentDate},\n      terminationDate: ${terminationDate},\n      `);\n      this.setState({userAlert: \"updating user profile...\"});\n\n    const requestBody = {\n      query: `\n      mutation {updateUser(userId:\"${userId}\",selectedUserId:\"${selectedUserId}\",userInput: {email:\"${email}\",password:\"${password}\",name:\"${name}\",dob:\"${dob}\",addressNumber:${addressNumber},addressStreet:\"${addressStreet}\",addressTown:\"${addressTown}\",addressParish:\"${addressParish}\", addressPostOffice:\"${addressPostOffice}\",phone:\"${phone}\",role:\"${role}\",employmentDate:\"${employmentDate}\",terminationDate:\"${terminationDate}\"})\n      {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n        `};\n\n        fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n    // fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }})\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n        const updatedUser = resData.data.updateUser;\n        console.log(\"updatedUser:  \", JSON.stringify(updatedUser));\n        this.setState({user: updatedUser})\n        this.state.users.push(resData.data.updateUser);\n        this.context.users = this.state.users;\n\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert})\n        // this.setState({ userAlert: responseAlert, selectedUser: resData.data.updateUser})\n        this.fetchUsers();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n  };\n\n\n  modalConfirmUpdateFieldHandler = (event) => {\n\n    const token = this.context.token;\n    const userId = this.context.userId;\n    let selectedUserId = this.context.selectedUser._id;\n    // if(userId !== selectedUserId && this.context.user.role !== 'admin') {\n    //   console.log(\"Not the creator or Admin! No edit permission!!\");\n    //   selectedUserId = null;\n    // }\n\n\n      console.log(\"UpdateUserFieldFormData:  \", event.target.formGridField.value, event.target.formGridFieldSelect.value);\n      this.setState({ updating: false });\n\n      let field = null;\n      let query = event.target.formGridQuery.value;\n      if (event.target.formGridFieldSelect.value === \"select\") {\n        field = event.target.formGridField.value;\n      } else {\n        field = event.target.formGridFieldSelect.value;\n      }\n      console.log(`\n          field: ${field},\n          query: ${query},\n        `);\n\n        this.setState({ userAlert: \"updating user field...\"})\n\n      const requestBody = {\n        query:`\n          mutation{updateUserField(userId:\"${userId}\",selectedUserId:\"${selectedUserId}\",field:\"${field}\",query:\"${query}\")\n          {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}\n        }\n        `};\n\n        fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n      // fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData.data.updateUserField));\n\n          const updatedUserId = resData.data.updateUserField._id;\n          const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n          const updatedUserPos = this.state.users.indexOf(updatedUser);\n          const slicedArray = this.state.users.splice(updatedUserPos, 1);\n          console.log(\"updatedUser:  \", JSON.stringify(updatedUser),\"  updatedUserPos:  \", updatedUserPos, \"  slicedArray:  \", slicedArray);\n\n          this.state.users.push(resData.data.updateUserField);\n          this.context.users = this.state.users;\n          const responseAlert = JSON.stringify(resData.data).slice(2,25);\n          this.setState({ userAlert: responseAlert})\n          this.fetchUsers();\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({userAlert: err});\n        });\n\n  }\n\n  updateUserAttendanceHandler = (event) => {\n    const token = this.context.token;\n    const userId = this.context.userId;\n    let selectedUserId = this.context.selectedUser._id;\n    // if(userId !== selectedUserId && this.context.user.role !== 'admin') {\n    //   console.log(\"Not the creator or Admin! No edit permission!!\");\n    //   selectedUserId = null;\n    // }\n    if (userId !== selectedUserId && this.context.user.role !== \"admin\" ) {\n      console.log(\"Not the creator or Admin! No edit permission!!\");\n      this.setState({ userAlert: \"Not the creator or Admin! No edit permission!!\"});\n        selectedUserId = null;\n    }\n\n    console.log(\"UpdateUserAttendanceFormData:  \", );\n\n    this.setState({ updating: false , userUpdateField: null });\n\n\n    let attendanceDate = event.target.formGridAttendanceDate.value;\n    if (event.target.formGridAttendanceDateTodayCheckbox.checked === true) {\n      attendanceDate = new Date().toISOString().slice(0,10);\n    }\n\n    let attendanceStatus = event.target.formGridAttendanceStatus.value;\n    let attendanceDescription = event.target.formGridAttendanceDescription.value;\n\n    if (\n    attendanceDate.trim().length === 0 ||\n    attendanceStatus.trim().length === 0\n    ){\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      return\n    }\n\n    console.log(`\n      adding user attendance item...\n      userId: ${userId},\n      selectedUserId: ${selectedUserId}\n      attendanceDate: ${attendanceDate},\n      attendanceStatus: ${attendanceStatus},\n      attendanceDescription: ${attendanceDescription}\n      `);\n\n      this.setState({ userAlert: \"adding user attendance item...\"});\n\n      const requestBody = {\n        query:`\n          mutation {updateUserAttendance(userId:\"${userId}\", selectedUserId:\"${selectedUserId}\",userInput:{attendanceDate:\"${attendanceDate}\",attendanceStatus:\"${attendanceStatus}\",attendanceDescription:\"${attendanceDescription}\"})\n          {_id,name,email,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description}}}\n        `};\n\n      fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n      // fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData.data.updateUserAttendance));\n\n          const updatedUserId = resData.data.updateUserAttendance._id;\n          const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n          const updatedUserPos = this.state.users.indexOf(updatedUser);\n          const slicedArray = this.state.users.splice(updatedUserPos, 1);\n          console.log(\"updatedUser:  \", JSON.stringify(updatedUser),\"  updatedUserPos:  \", updatedUserPos, \"  slicedArray:  \", slicedArray);\n\n          this.state.users.push(resData.data.updateUserAttendance);\n          this.context.users = this.state.users;\n          const responseAlert = JSON.stringify(resData.data).slice(2,25);\n          this.setState({ userAlert: responseAlert})\n          this.fetchUsers();\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({userAlert: err});\n        });\n\n\n  }\n\n    updateUserAttachmentHandler = (event) => {\n\n    const token = this.context.token;\n    const userId = this.context.userId;\n    let selectedUserId = this.context.selectedUser._id;\n    // if(userId !== selectedUserId && this.context.user.role !== 'admin') {\n    //   console.log(\"Not the creator or Admin! No edit permission!!\");\n    //   selectedUserId = null;\n    // }\n    if (userId !== selectedUserId && this.context.user.role !== \"admin\" ) {\n      console.log(\"Not the creator or Admin! No edit permission!!\");\n      this.setState({userAlert: \"Not the creator or Admin! No edit permission!!\"})\n        selectedUserId = null;\n    }\n\n    console.log(\"UpdateUserAttachmentFormData:  \");\n\n    this.setState({ updating: false , userUpdateField: null });\n\n    // let attachmentName = event.target.formGridAttachmentName.value;\n    let attachmentFormat = event.target.formGridAttachmentFormat.value;\n    let attachmentPath = \"uploads/staff/\"+selectedUserId+\"/attachments\";\n    // let attachmentPath = event.target.formGridAttachmentPath.value;\n    let file = AuthContext._currentValue.file;\n\n    console.log(`\n      uploading to s3...\n      file.name: ${file.name},\n      AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n      `);\n    const config = {\n      bucketName: this.context.creds.s3.bucketName,\n      dirName: attachmentPath,\n      region: this.context.creds.s3.region,\n      accessKeyId: this.context.creds.s3.accessKeyId,\n      secretAccessKey: this.context.creds.s3.secretAccessKey,\n    }\n    const ReactS3Client = new S3(config);\n    const newFileName = file.name;\n    const attachmentName = newFileName;\n\n    ReactS3Client\n        .uploadFile(file, newFileName)\n        .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n        .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n    if (\n      attachmentName.trim().length === 0 ||\n      attachmentFormat.trim().length === 0 ||\n      attachmentPath.trim().length === 0\n  ) {\n      console.log(\"blank fields detected!!! try again\");\n      return\n    }\n\n    console.log(`\n      adding user attachment item...\n      userId: ${userId},\n      selectedUserId: ${selectedUserId}\n      attachmentName: ${attachmentName},\n      attachmentFormat: ${attachmentFormat},\n      attachmentPath: ${attachmentPath},\n      `);\n      this.setState({userAlert: \"adding user attatchment item...\"})\n\n      const requestBody = {\n        query:`\n          mutation{updateUserAttachment(userId:\"${userId}\",selectedUserId:\"${selectedUserId}\",userInput:{attachmentName:\"${attachmentName}\",attachmentFormat:\"${attachmentFormat}\",attachmentPath:\"${attachmentPath}\"})\n          {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n        `};\n\n        fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n      // fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData.data.updateUserAttachment));\n\n          const updatedUserId = resData.data.updateUserAttachment._id;\n          const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n          const updatedUserPos = this.state.users.indexOf(updatedUser);\n          const slicedArray = this.state.users.splice(updatedUserPos, 1);\n          console.log(\"updatedUser:  \", JSON.stringify(updatedUser),\"  updatedUserPos:  \", updatedUserPos, \"  slicedArray:  \", slicedArray);\n\n          this.state.users.push(resData.data.updateUserAttachment);\n          this.context.users = this.state.users;\n          const responseAlert = JSON.stringify(resData.data).slice(2,25);\n          this.setState({ userAlert: responseAlert})\n          this.fetchUsers();\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({userAlert: err});\n        });\n\n\n  }\n\n\n  updateUserLeaveHandler = (event) => {\n\n    const token = this.context.token;\n    const userId = this.context.userId;\n    let selectedUserId = this.context.selectedUser._id;\n    // if(userId !== selectedUserId && this.context.user.role !== 'admin') {\n    //   console.log(\"Not the creator or Admin! No edit permission!!\");\n    //   selectedUserId = null;\n    // }\n    if (userId !== selectedUserId && this.context.user.role !== \"admin\" ) {\n      console.log(\"Not the creator or Admin! No edit permission!!\");\n      this.setState({userAlert: \"Not the creator or Admin! No edit permission!!\"})\n        selectedUserId = null;\n    }\n\n    console.log(\"UpdateUserLeaveFormData:  \", event.target.formGridLeaveType.value);\n\n    this.setState({ updating: false , userUpdateField: null });\n\n    let leaveType = event.target.formGridLeaveType.value;\n    let leaveTitle = event.target.formGridLeaveTitle.value;\n\n    let leaveStartDate = event.target.formGridLeaveStartDate.value;\n    if (event.target.formGridLeaveStartDateTodayCheckbox.checked === true) {\n      leaveStartDate = new Date().toISOString().slice(0,10);\n    }\n\n    let leaveEndDate = event.target.formGridLeaveEndDate.value;\n    if (event.target.formGridLeaveEndDateTodayCheckbox.checked === true) {\n      leaveEndDate = new Date().toISOString().slice(0,10);\n    }\n\n    if (\n      leaveType.trim().length === 0 ||\n      leaveTitle.trim().length === 0 ||\n      leaveStartDate.trim().length === 0 ||\n      leaveEndDate.trim().length === 0\n    ) {\n      console.log(\"blank fields detected!!!...try again\");\n      this.setState({userAlert: \"blank fields detected!!!...try again\"});\n      return\n    }\n\n    console.log(`\n      adding user leave item...\n      userId: ${userId},\n      selectedUserId: ${selectedUserId}\n      leave: {\n        type: ${leaveType},\n        title: ${leaveTitle},\n        startDate: ${leaveStartDate},\n        endDate: ${leaveEndDate}\n      }\n      `);\n      this.setState({userAlert: \"adding user leave item...\"})\n\n      const requestBody = {\n        query:`\n          mutation{updateUserLeave(userId:\"${userId}\",selectedUserId:\"${selectedUserId}\",userInput:{leaveType:\"${leaveType}\",leaveTitle:\"${leaveTitle}\",leaveStartDate:\"${leaveStartDate}\",leaveEndDate:\"${leaveEndDate}\"})\n          {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n        `};\n\n        fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n      // fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData.data));\n\n          const updatedUserId = resData.data.updateUserLeave._id;\n          const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n          const updatedUserPos = this.state.users.indexOf(updatedUser);\n          const slicedArray = this.state.users.splice(updatedUserPos, 1);\n          console.log(\"updatedUser:  \", JSON.stringify(updatedUser),\"  updatedUserPos:  \", updatedUserPos, \"  slicedArray:  \", slicedArray);\n\n          this.state.users.push(resData.data.updateUserLeave);\n          this.context.users = this.state.users;\n          const responseAlert = JSON.stringify(resData.data).slice(2,25);\n          this.setState({ userAlert: responseAlert})\n          this.fetchUsers();\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({userAlert: err});\n        });\n\n  }\n\n\n  modalConfirmSearchHandler = (event) => {\n    console.log(\"SearchUserForm:  \");\n\n\n    let userId = this.context.userId;\n\n      console.log(\"SearchUserFormData:  \", event.target.formBasicField.value);\n      this.setState({ searching: false });\n\n      let field = null;\n      let query = event.target.formBasicQuery.value;\n      if (event.target.formBasicFieldSelect.value === \"select\") {\n        field = event.target.formBasicField.value;\n      } else {\n        field = event.target.formBasicFieldSelect.value;\n      }\n\n      this.setState({\n        userSearchField: field,\n        userSearchQuery: query,\n      })\n\n      if (\n        field.trim().length === 0 ||\n        query.trim().length === 0\n      ) {\n        console.log(\"blank fields detected!!!...Please try again...\");\n        this.setState({userAlert: \"blank fields detected!!!...Please try again...\"})\n        return;\n      }\n\n      const search = { field, query }\n      console.log(\"Searching for User:  \", JSON.stringify(search));\n      this.setState({userAlert: \"Searching for User...\"})\n\n      const requestBody = {\n        query: `\n          query {getUserField(userId:\"${userId}\",field:\"${field}\",query:\"${query}\")\n          {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n        `}\n\n      const token = this.context.token;\n\n      fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n      // fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData));\n\n          const responseAlert = JSON.stringify(resData.data).slice(0,8);\n          this.setState({userAlert: responseAlert});\n\n          const searchUsers = resData.data.getUserField;\n\n          this.setState({ searchUsers: searchUsers})\n          console.log(\"state.searchUsers:  \", this.state.searchUsers);\n          // this.fetchUsers();\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({userAlert: err});\n        });\n  }\n\n  modalConfirmSearchIdHandler = (event) => {\n\n    let userId = this.context.userId;\n    this.setState({ searching: false });\n\n    console.log(\"SearchUserIdFormData:\", event.target.formBasicId.value);\n    let selectedUserId = event.target.formBasicId.value;\n\n    const requestBody = {\n      query: `\n        query {getUserId(userId:\"${userId}\",selectedUserId:\"${selectedUserId}\")\n        {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n      `}\n\n    const token = this.context.token;\n\n    fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n    // fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({userAlert: responseAlert});\n\n        const searchUsers = resData.data.getUserId;\n\n        this.setState({ searchUsers: [searchUsers] });\n        console.log(\"state.searchUsers:  \", this.state.searchUsers);\n        // this.fetchUsers();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n  }\n  modalConfirmSearchAttendanceDateHandler = (event) => {\n\n    let userId = this.context.userId;\n    this.setState({ searching: false });\n\n    console.log(\"SearchUserAttendanceDateFormData:\");\n\n    let attendanceDate = event.target.formBasicDate.value;\n    if (event.target.formBasicDateTodayCheckbox.checked === true) {\n      attendanceDate = new Date().toISOString().slice(0,10);\n    }\n\n    const requestBody = {\n      query: `\n        query {getUserAttendanceDate(userId:\"${userId}\",attendanceDate:\"${attendanceDate}\")\n        {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n      `}\n\n    const token = this.context.token;\n\n    fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n    // fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n\n        const responseAlert = JSON.stringify(resData.data).slice(0,8);\n        this.setState({userAlert: responseAlert});\n\n        const searchUsers = resData.data.getUserAttendanceDate;\n\n        this.setState({ searchUsers: searchUsers})\n        console.log(\"state.searchUsers:  \", this.state.searchUsers);\n        // this.fetchUsers();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n  }\n  modalConfirmSearchLeaveDateRangeHandler = (event) => {\n\n    let userId = this.context.userId;\n    this.setState({ searching: false });\n\n    console.log(\"SearchUserLeaveDateRangeFormData:\");\n\n    const startDate = event.target.formBasicStartDate.value;\n    const endDate = event.target.formBasicEndDate.value;\n\n    const requestBody = {\n      query: `\n        query{getUserLeaveDateRange(userId:\"${userId}\",startDate:\"${startDate}\",endDate:\"${endDate}\")\n        {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n      `}\n\n    const token = this.context.token;\n\n    fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n    // fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n\n        const responseAlert = JSON.stringify(resData.data).slice(0,8);\n        this.setState({userAlert: responseAlert});\n\n        const searchUsers = resData.data.getUserLeaveDateRange;\n\n        this.setState({ searchUsers: searchUsers})\n        console.log(\"state.searchUsers:  \", this.state.searchUsers);\n        // this.fetchUsers();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n  }\n\n  modalConfirmSearchNameHandler = (event) => {\n    console.log(\"SearchUserNameFormData:\", event.target.formBasicName.value);\n    this.setState({ searching: false });\n\n    let users = this.state.users;\n    const regex = new RegExp(event.target.formBasicName.value,\"i\");\n    console.log(`\n      regex: ${regex},\n      `);\n      let result = users.filter(user => user.name.match(regex))\n      console.log(`\n        result: ${JSON.stringify(result)}\n        `);\n\n        this.setState({ searchUsers: result})\n\n  }\n\n\n  modalCancelHandler = () => {\n    this.setState({ creating: false, updating: false, deleting: false, searching: false});\n  };\n\n  fetchUsers() {\n    console.log(\"fetch users:\");\n    // console.log(\"'fetch users function' context object... \" + JSON.stringify(this.context));\n    const userId = this.context.userId;\n\n    this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n          query {users (userId:\"${userId}\")\n          {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n        `};\n\n    fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n    // fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          this.context.userAlert = 'Failed!';\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n\n        const responseAlert = JSON.stringify(resData.data).slice(0,8);\n        this.setState({userAlert: responseAlert});\n\n        const users = resData.data.users;\n        console.log(\"resData:  \", resData);\n        console.log(users);\n\n        if (this.isActive) {\n          this.setState({ users: users, isLoading: false });\n        }\n        this.context.users = this.state.users;\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n        if (this.isActive) {\n          this.setState({ isLoading: false });\n        }\n      });\n  }\n\n  fetchUsersAsc = () => {\n    console.log(\"'fetch usersAsc function' context object... \" + JSON.stringify(this.context));\n    const userId = this.context.userId;\n\n    // this.setState({ isSorting: true });\n    const requestBody = {\n      query: `\n          query {usersNameAsc (userId:\"${userId}\")\n          {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n        `};\n\n    fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n    // fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          this.context.userAlert = 'Failed!';\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const users = resData.data.usersNameAsc;\n        console.log(\"resData:  \", resData);\n        console.log(users);\n\n        const responseAlert = JSON.stringify(resData.data).slice(0,8);\n        this.setState({userAlert: responseAlert});\n\n        this.setState({users: users});\n        // if (this.isActive) {\n        //   this.setState({ users: users, isLoading: false });\n        // }\n        this.context.users = this.state.users;\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n        // if (this.isActive) {\n        //   this.setState({ isLoading: false });\n        // }\n      });\n  }\n  fetchUsersDesc = () => {\n    console.log(\"'fetch usersDesc function' context object... \" + JSON.stringify(this.context));\n    const userId = this.context.userId;\n\n    // this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n          query {usersNameDesc (userId:\"${userId}\")\n          {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n        `};\n\n    fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n    // fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          this.context.userAlert = 'Failed!';\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const users = resData.data.usersNameDesc;\n        console.log(\"resData:  \", resData);\n        console.log(users);\n\n        const responseAlert = JSON.stringify(resData.data).slice(0,8);\n        this.setState({userAlert: responseAlert});\n\n        // if (this.isActive) {\n        //   this.setState({ users: users, isLoading: false });\n        // }\n        this.setState({users: users});\n        this.context.users = this.state.users;\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n        // if (this.isActive) {\n        //   this.setState({ isLoading: false });\n        // }\n      });\n  }\n\nmodalDeleteHandler = () => {\n  console.log(\"deleting user...selectedUser:  \", this.context.selectedUser);\n\n  const userId = this.context.userId;\n  const selectedUserId = this.context.selectedUser._id;\n\n  if(this.context.user.role !== 'admin') {\n    console.log(\"Not the Admin! No edit permission!!\");\n    this.setState({userAlert: \"Not the Admin! No edit permission!!\"})\n  }\n\n  this.setState({deleting: true, userAlert: \"deleting user..\"});\n\n  const requestBody = {\n    query: `\n        mutation {\n          deleteUser(userId: \"${userId}\", selectedUserId: \"${selectedUserId}\")\n          {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}\n        }\n      `};\n\n  fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n  // fetch('http://localhost:10000/graphql', {\n    method: 'POST',\n    body: JSON.stringify(requestBody),\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + this.context.token\n    }\n  })\n    .then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n      return res.json();\n    })\n    .then(resData => {\n\n      const responseAlert = JSON.stringify(resData.data).slice(0,8);\n      this.setState({userAlert: responseAlert});\n\n      let deletedUser = resData.data.deleteUser;\n      console.log(deletedUser);\n\n      let deletedUserId = deletedUser._id;\n      deletedUser = this.state.users.find(e => e._id === deletedUserId);\n      const deletedUserPos = this.state.users.indexOf(deletedUser);\n      const slicedArray = this.state.users.splice(deletedUserPos, 1);\n      console.log(\"deletedUser:  \", JSON.stringify(deletedUser),\"  deletedUserPos:  \", deletedUserPos, \"  slicedArray:  \", slicedArray);\n\n      this.setState({ deleting: false });\n      // this.setState({ deleting: false, selectedUser: null });\n      // this.context.selectedUser = null;\n\n      this.fetchUsers();\n\n    })\n    .catch(err => {\n      console.log(err);\n      this.setState({userAlert: err});\n      if (this.isActive) {\n        this.setState({ deleting: false });\n      }\n    });\n\n}\n\ndeleteUserAttendanceItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let selectedUserId = this.state.selectedUser._id;\n  let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n  console.log(`\n    delete user Attendance item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    selectedUserId: ${selectedUserId},\n    attandance date: ${date},\n    `);\n\n    const requestBody = {\n      query: `\n       mutation{deleteUserAttendance(userId:\"${userId}\",selectedUserId:\"${selectedUserId}\",attendanceDate:\"${date}\")\n       {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n    `};\n\n        fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n        // fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            console.log(\"resData.data:  \",resData.data.deleteUserAttendance);\n\n            const updatedUserId = resData.data.deleteUserAttendance._id;\n            const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n            const updatedUserPos = this.state.users.indexOf(updatedUser);\n            const slicedArray = this.state.users.splice(updatedUserPos, 1);\n            console.log(\"updatedUser:  \", JSON.stringify(updatedUser),\"  updatedUserPos:  \", updatedUserPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.users.push(resData.data.deleteUserAttendance);\n            this.context.users = this.state.users;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            this.fetchUsers();\n\n          })\n          .catch(err => {\n            console.log(err);\n            this.setState({ userAlert: err })\n          });\n}\n\ndeleteUserLeaveItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let selectedUserId = this.state.selectedUser._id;\n\n  console.log(`\n    delete user Leave item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    selectedUserId: ${selectedUserId},\n    `);\n\n    const requestBody = {\n      query: `\n       mutation{deleteUserLeave(userId:\"${userId}\",selectedUserId:\"${selectedUserId}\",leaveTitle:\"${props.title}\")\n       {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n    `};\n\n        fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n        // fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedUser = resData.data.deleteUserLeave;\n            console.log(deletedUser);\n\n            const updatedUserId = resData.data.deleteUserLeave._id;\n            const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n            const updatedUserPos = this.state.users.indexOf(updatedUser);\n            const slicedArray = this.state.users.splice(updatedUserPos, 1);\n            console.log(\"updatedUser:  \", JSON.stringify(updatedUser),\"  updatedUserPos:  \", updatedUserPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.users.push(resData.data.deleteUserLeave);\n            this.context.users = this.state.users;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            this.fetchUsers();\n\n          })\n          .catch(err => {\n            console.log(err);\n            this.setState({ userAlert: err })\n          });\n}\n\ndeleteUserAttachmentItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let selectedUserId = this.state.selectedUser._id;\n\n  console.log(`\n    delete user Attachment item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    selectedUserId: ${selectedUserId},\n    `);\n\n    // console.log(`\n    //   deleting from s3...\n    //   file.name: ${props.name},\n    //   `);\n    //\n    //   const config = {\n    //     bucketName: this.context.creds.s3.bucketName,\n    //     dirName: props.path,\n    //     region: this.context.creds.s3.region,\n    //     accessKeyId: this.context.creds.s3.accessKeyId,\n    //     secretAccessKey: this.context.creds.s3.secretAccessKey,\n    //   }\n    // const ReactS3Client = new S3(config);\n    // const filename = props.name;\n    // // const attachmentName = newFileName;\n    // //\n    // S3FileUpload\n    // .deleteFile(filename, config)\n    // .then(response => console.log(response))\n    // .catch(err => console.error(err))\n\n\n    const requestBody = {\n      query: `\n       mutation{deleteUserAttachment(userId:\"${userId}\",selectedUserId:\"${selectedUserId}\",attachmentName:\"${props.name}\")\n       {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n    `};\n\n        fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n        // fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedUser = resData.data.deleteUserAttachment;\n            console.log(deletedUser);\n\n            const updatedUserId = resData.data.deleteUserAttachment._id;\n            const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n            const updatedUserPos = this.state.users.indexOf(updatedUser);\n            const slicedArray = this.state.users.splice(updatedUserPos, 1);\n            console.log(\"updatedUser:  \", JSON.stringify(updatedUser),\"  updatedUserPos:  \", updatedUserPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.users.push(resData.data.deleteUserAttachment);\n            this.context.users = this.state.users;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            this.fetchUsers();\n\n          })\n          .catch(err => {\n            console.log(err);\n            this.setState({ userAlert: err })\n          });\n}\n\n\n\nupdateUserSpecial (event) {\n\n  console.log(\"special field to update:  \", event.target.value);\n  const field = event.target.value;\n  this.setState({ userUpdateField: field});\n\n}\n\n  showDetailHandler = userId => {\n\n    this.setState(prevState => {\n      const selectedUser = prevState.users.find(e => e._id === userId);\n      this.context.selectedUser = selectedUser;\n      this.setState({selectedUser: selectedUser});\n      console.log(\"User selected  :  \", selectedUser);\n      return { selectedUser: selectedUser };\n    });\n  };\n\n  onViewAttachment = (attachment) => {\n    console.log(`\n      setting up attachment viewer...\n      attachment: ${JSON.stringify(attachment)}\n      `);\n      this.setState({showAttachment: true})\n\n      const file = \"https://ent-emr-bucket.s3-us-east-2.amazonaws.com/\"+attachment.path+\"/\"+attachment.name;\n      const type = attachment.format;\n\n      this.setState({showThisAttachmentFile: file, showThisAttachmentType: type})\n  }\n\n  closeAttachmentView = () => {\n    console.log(`\n      closing attachment viewer...\n      `);\n      this.setState({showAttachment: false})\n  }\n\n  createPdf = (user) => {\n    console.log(`\n        creating pdf...\n        user: ${JSON.stringify(user)}\n      `);\n\n      const pdfData = {\n        title: user.name,\n        body: user.dob,\n      };\n\n    this.setState({createPdf: true, pdfData: pdfData})\n  }\n\n  closePdfCreator = () => {\n    console.log(`\n      closing pdf creator...\n      `);\n      this.setState({createPdf: false, pdfData: null})\n  }\n\n  userSearchClearlHandler () {\n    console.log(\"clearing user search results\");\n    this.setState({searchUsers: [], userAlert: \"clearing user search results\"});\n  }\n\n\n  componentWillUnmount() {\n    this.isActive = false;\n  }\n\n  render() {\n    return (\n\n    <React.Fragment>\n    {this.state.showAttachment === true && (\n      <AttachmentViewer\n        onCloseAttachmentView={this.closeAttachmentView}\n        attachmentFile={this.state.showThisAttachmentFile}\n        attachmentType={this.state.showThisAttachmentType}\n      />\n    )}\n\n    {this.state.createPdf === true && (\n        <PdfCreator\n          pdfData={this.state.pdfData}\n          onClosePdfCreator={this.closePdfCreator}\n        />\n    )}\n\n    <Accordion>\n\n    <Row>\n\n    <Col md={3} className=\"MasterCol1\">\n\n    <AlertBox\n      authUserId={this.context.userId}\n      alert={this.state.userAlert}\n    />\n\n    <SidebarPage/>\n\n    </Col>\n\n    <Col md={9} className=\"MasterCol2\">\n\n        <Container className=\"containerCombinedDetail\">\n\n        <Tab.Container id=\"left-tabs-example\" defaultActiveKey=\"userDetail\">\n          <Row>\n            <Col sm={2}>\n              <Nav variant=\"pills\" className=\"flex-column\">\n                <Nav.Item>\n                  <Nav.Link eventKey=\"MasterList\">MASTER LIST</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey=\"userDetail\">Selected</Nav.Link>\n                </Nav.Item>\n                { this.context.user.role === \"admin\" && (\n                <Nav.Item>\n                  <Nav.Link eventKey=\"userCreate\">Create New</Nav.Link>\n                </Nav.Item>\n                )}\n                <Nav.Item>\n                  <Nav.Link eventKey=\"disabled\" disabled>Edit:</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey=\"userEditDemographics\">Demographics</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey=\"userEditField\">Single Field</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey=\"disabled\" disabled>Add:</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey=\"userEditAttendance\">Attendance</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey=\"userEditLeave\">Leave</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey=\"userEditAttachment\">Attachment</Nav.Link>\n                </Nav.Item>\n\n                <Nav.Item>\n                  <Nav.Link eventKey=\"disabled\" disabled>Search:</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey=\"SearchInput\">Input</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey=\"SearchResult\">Results</Nav.Link>\n                </Nav.Item>\n              </Nav>\n            </Col>\n\n            <Col sm={10}>\n              <Tab.Content>\n                <Tab.Pane eventKey=\"userDetail\">\n                  {this.state.selectedUser === null && (\n                    <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                      Select a Staff member from the Master List\n                    </Button>\n                  )}\n                  {this.state.isLoading === false &&\n                    this.state.selectedUser !== null\n                    && (\n                      <UserDetail\n                      authUserId={this.context.userId}\n                      AuthContext={this.context}\n                      user={this.state.selectedUser}\n                      onEdit={this.startUpdateUserHandler}\n                      canDelete={this.state.canDelete}\n                      onDelete={this.modalDeleteHandler}\n                      attendanceDelete={this.deleteUserAttendanceItem}\n                      leaveDelete={this.deleteUserLeaveItem}\n                      attachmentDelete={this.deleteUserAttachmentItem}\n                      onViewAttachment={this.onViewAttachment}\n                      onCreatePdf={this.createPdf}\n                      />\n                    )}\n                </Tab.Pane>\n\n                { this.context.user.role === \"admin\" && (\n                  <Tab.Pane eventKey=\"userCreate\">\n                  <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" onClick={this.startCreateUserHandler} >Create a NEW Staff Profile</Button>\n                    {this.state.creating && (\n                      <CreateUserForm\n                        authUserId={this.context.userId}\n                        canCancel\n                        canConfirm\n                        onCancel={this.modalCancelHandler}\n                        onConfirm={this.modalConfirmHandler}\n                        onSubmit={this.modalConfirmHandler}\n                        confirmText=\"Confirm\"\n                      />\n                    )}\n                  </Tab.Pane>\n                )}\n\n\n                <Tab.Pane eventKey=\"userEditDemographics\">\n                  {this.state.selectedUser === null && (\n                    <Button variant=\"outline-warning\" className=\"confirmEditButton\" size=\"lg\">\n                      Select a Staff member from the Master List\n                    </Button>\n                  )}\n                  {this.state.selectedUser !== null &&\n                    this.context.user.role === \"admin\"\n                    && (\n                    <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" onClick={this.startUpdateUserHandler}>Edit Demographics as Admin</Button>\n                  )}\n                  {this.state.selectedUser !== null &&\n                    this.state.selectedUser._id === this.context.user._id\n                    && (\n                    <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" onClick={this.startUpdateUserHandler}>Edit Demographics</Button>\n                  )}\n                  {this.state.selectedUser !== null &&\n                    this.state.selectedUser._id === this.context.user._id && (\n                    <Button variant=\"outline-danger\" className=\"confirmEditButton\" size=\"lg\">\n                      Your Profile\n                    </Button>\n                  )}\n                  {this.state.selectedUser !== null &&\n                    this.state.selectedUser._id !== this.context.user._id && (\n                    <Button variant=\"outline-danger\" className=\"confirmEditButton\" size=\"lg\">\n                      Not my profile\n                    </Button>\n                  )}\n                  {this.state.updating &&\n                    this.state.selectedUser !== null\n                    && (\n                    <UpdateUserForm\n                      authUserId={this.context.userId}\n                      canCancel\n                      canConfirm\n                      onCancel={this.modalCancelHandler}\n                      onConfirm={this.modalConfirmUpdateHandler}\n                      confirmText=\"Confirm\"\n                      user={this.context.selectedUser}\n                    />\n                  )}\n                </Tab.Pane>\n\n                <Tab.Pane eventKey=\"userEditField\">\n                  {this.state.selectedUser === null && (\n                    <Button variant=\"outline-warning\" className=\"confirmEditButton\" size=\"lg\">\n                      Select a Staff member from the Master List\n                    </Button>\n                  )}\n\n                  {this.state.selectedUser !== null &&\n                    this.context.user.role === \"admin\"\n                    && (\n                    <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" onClick={this.startUpdateUserHandler}>Edit Field as Admin</Button>\n                  )}\n                  {this.state.selectedUser !== null &&\n                    this.state.selectedUser._id === this.context.user._id\n                    && (\n                    <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" onClick={this.startUpdateUserHandler}>Edit a Single Field</Button>\n                  )}\n                  {this.state.selectedUser !== null &&\n                    this.state.selectedUser._id === this.context.user._id && (\n                    <Button variant=\"outline-success\" className=\"confirmEditButton\" size=\"lg\">\n                      Your Profile\n                    </Button>\n                  )}\n                  {this.state.selectedUser !== null &&\n                    this.state.selectedUser._id !== this.context.user._id && (\n                    <Button variant=\"outline-danger\" className=\"confirmEditButton\" size=\"lg\">\n                      Not my profile\n                    </Button>\n                  )}\n                  {this.state.updating &&\n                    this.state.selectedUser !== null\n                    && (\n                      <UpdateUserFieldForm\n                        authUserId={this.context.userId}\n                        canCancel\n                        canConfirm\n                        onCancel={this.modalCancelHandler}\n                        onConfirm={this.modalConfirmUpdateFieldHandler}\n                        confirmText=\"Confirm\"\n                        user={this.state.selectedUser}\n                      />\n                  )}\n                </Tab.Pane>\n\n                <Tab.Pane eventKey=\"userEditAttendance\">\n                  {this.state.selectedUser === null && (\n                    <Button variant=\"outline-warning\" className=\"confirmEditButton\" size=\"lg\">\n                      Select a Staff member from the Master List below\n                    </Button>\n                  )}\n\n                  {this.state.selectedUser !== null &&\n                    this.context.user.role === \"admin\"\n                    && (\n                    <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" value='attendance' onClick={this.updateUserSpecial.bind(this)}>Add Attendance as Admin</Button>\n                  )}\n                  {this.state.selectedUser !== null &&\n                    this.state.selectedUser._id === this.context.user._id\n                    && (\n                    <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" value='attendance' onClick={this.updateUserSpecial.bind(this)}>Add Attendance</Button>\n                  )}\n                  {this.state.selectedUser !== null &&\n                    this.state.selectedUser._id === this.context.user._id && (\n                    <Button variant=\"outline-success\" className=\"confirmEditButton\" size=\"lg\">\n                      Your Profile\n                    </Button>\n                  )}\n                  {this.state.selectedUser !== null &&\n                    this.state.selectedUser._id !== this.context.user._id && (\n                    <Button variant=\"outline-danger\" className=\"confirmEditButton\" size=\"lg\">\n                      Not my profile\n                    </Button>\n                  )}\n\n                  {this.state.userUpdateField === 'attendance' &&\n                  this.state.selectedUser !== null\n                   && (\n                     <UpdateUserAttendanceForm\n                    authUserId={this.context.userId}\n                    canCancel\n                      canConfirm\n                      onCancel={this.modalCancelHandler}\n                      onConfirm={this.updateUserAttendanceHandler}\n                      confirmText=\"Confirm\"\n                      user={this.state.selectedUser}\n                    />\n                  )}\n                </Tab.Pane>\n\n                <Tab.Pane eventKey=\"userEditLeave\">\n                {this.state.selectedUser === null && (\n                  <Button variant=\"outline-warning\" className=\"confirmEditButton\" size=\"lg\">\n                    Select a Staff member from the Master List\n                  </Button>\n                )}\n\n                {this.state.selectedUser !== null &&\n                  this.context.user.role === \"admin\"\n                  && (\n                  <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" value='leave' onClick={this.updateUserSpecial.bind(this)}>Add Leave as Admin</Button>\n                )}\n                {this.state.selectedUser !== null &&\n                  this.state.selectedUser._id === this.context.user._id\n                  && (\n                  <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" value='leave' onClick={this.updateUserSpecial.bind(this)}>Add Leave</Button>\n                )}\n                {this.state.selectedUser !== null &&\n                  this.state.selectedUser._id === this.context.user._id && (\n                  <Button variant=\"outline-success\" className=\"confirmEditButton\" size=\"lg\">\n                    Your Profile\n                  </Button>\n                )}\n                {this.state.selectedUser !== null &&\n                  this.state.selectedUser._id !== this.context.user._id && (\n                  <Button variant=\"outline-danger\" className=\"confirmEditButton\" size=\"lg\">\n                    Not my profile\n                  </Button>\n                )}\n\n                {this.state.userUpdateField === 'leave' &&\n                this.state.selectedUser !== null\n                && (<UpdateUserLeaveForm\n                  authUserId={this.context.userId}\n                  canCancel\n                    canConfirm\n                    onCancel={this.modalCancelHandler}\n                    onConfirm={this.updateUserLeaveHandler}\n                    confirmText=\"Confirm\"\n                    user={this.state.selectedUser}\n                  />)}\n                </Tab.Pane>\n\n                <Tab.Pane eventKey=\"userEditAttachment\">\n                {this.state.selectedUser === null && (\n                  <Button variant=\"outline-warning\" className=\"confirmEditButton\" size=\"lg\">\n                    Select a Staff member from the Master List\n                  </Button>\n                )}\n\n                {this.state.selectedUser !== null &&\n                  this.context.user.role === \"admin\"\n                  && (\n                  <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" value='attachments' onClick={this.updateUserSpecial.bind(this)}>Add Attachment as Admin</Button>\n                )}\n                {this.state.selectedUser !== null &&\n                  this.state.selectedUser._id === this.context.user._id\n                  && (\n                  <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" value='attachments' onClick={this.updateUserSpecial.bind(this)}>Add Attachment</Button>\n                )}\n                {this.state.selectedUser !== null &&\n                  this.state.selectedUser._id === this.context.user._id && (\n                  <Button variant=\"outline-success\" className=\"confirmEditButton\" size=\"lg\">\n                    Your Profile\n                  </Button>\n                )}\n                {this.state.selectedUser !== null &&\n                  this.state.selectedUser._id !== this.context.user._id && (\n                  <Button variant=\"outline-danger\" className=\"confirmEditButton\" size=\"lg\">\n                    Not my profile\n                  </Button>\n                )}\n\n                {this.state.userUpdateField === 'attachments' &&\n                this.state.selectedUser !== null\n                && (<UpdateUserAttachmentForm\n                  authUserId={this.context.userId}\n                  canCancel\n                    canConfirm\n                    onCancel={this.modalCancelHandler}\n                    onConfirm={this.updateUserAttachmentHandler}\n                    confirmText=\"Confirm\"\n                    user={this.state.selectedUser}\n                  />)}\n                </Tab.Pane>\n\n                <Tab.Pane eventKey=\"MasterList\">\n                  <Container className=\"containerUserMasterList\">\n                  <Row className=\"searchListRow\">\n                  <Button variant=\"primary\" size=\"sm\" onClick={this.fetchUsersAsc}>\n                     Sort Asc\n                   </Button>\n                  <Button variant=\"info\" size=\"sm\" onClick={this.fetchUsersDesc}>\n                     Sort Desc\n                   </Button>\n                   {this.state.isLoading ? (\n                     <Spinner />\n                   ) : (\n                     <UserList\n                       users={this.state.users}\n                       authUserId={this.context.userId}\n                       onViewDetail={this.showDetailHandler}\n                     />\n                   )}\n                  </Row>\n                  </Container>\n                </Tab.Pane>\n\n                <Tab.Pane eventKey=\"SearchInput\">\n                  <Container className=\"containerSearchUserInput\">\n\n                  <Row className=\"searchUserRowAdd\">\n                  <Button variant=\"primary\" onClick={this.startSearchUserHandler}>Search</Button>\n                  </Row>\n\n                  <Row className=\"searchUserRowForm\">\n                  <Col md={10} className=\"searchUserColForm\">\n                  <Tabs defaultActiveKey=\"Field\" id=\"uncontrolled-tab-example\">\n                  <Tab eventKey=\"Search\" title=\"Search:\" disabled>\n                  </Tab>\n                  <Tab eventKey=\"Field\" title=\"Search by Field:\">\n                  {this.state.searching !== true && (\n                    <Button variant=\"outline-warning\" className=\"confirmEditButton\" size=\"lg\">\n                      Click the 'Search' Button start\n                    </Button>\n                  )}\n                  {this.state.searching === true && (\n                    <SearchUserForm\n                    authUserId={this.context.userId}\n                    canCancel\n                      canConfirm\n                      onCancel={this.modalCancelHandler}\n                      onConfirm={this.modalConfirmSearchHandler}\n                      confirmText=\"Search\"\n                      user={this.context.selectedUser}\n                    />)}\n                  </Tab>\n                  <Tab eventKey=\"Id\" title=\"Search by ID:\">\n                  {this.state.searching !== true && (\n                    <Button variant=\"outline-warning\" className=\"confirmEditButton\" size=\"lg\">\n                      Click the 'Search' Button start\n                    </Button>\n                  )}\n                  {this.state.searching === true && (\n                    <SearchUserIdForm\n                    authUserId={this.context.userId}\n                    canCancel\n                      canConfirm\n                      onCancel={this.modalCancelHandler}\n                      onConfirm={this.modalConfirmSearchIdHandler}\n                      confirmText=\"Search\"\n                      user={this.context.selectedUser}\n                    />\n                    )}\n                  </Tab>\n                  <Tab eventKey=\"Attendance\" title=\"Search by Attendance:\">\n                  {this.state.searching !== true && (\n                    <Button variant=\"outline-warning\" className=\"confirmEditButton\" size=\"lg\">\n                      Click the 'Search' Button start\n                    </Button>\n                  )}\n                  {this.state.searching === true && (\n                    <SearchUserAttendanceDateForm\n                    authUserId={this.context.userId}\n                    canCancel\n                      canConfirm\n                      onCancel={this.modalCancelHandler}\n                      onConfirm={this.modalConfirmSearchAttendanceDateHandler}\n                      confirmText=\"Search\"\n                      user={this.context.selectedUser}\n                    />\n                    )}\n                  </Tab>\n                  <Tab eventKey=\"Leave\" title=\"Search by Leave:\">\n                  {this.state.searching !== true && (\n                    <Button variant=\"outline-warning\" className=\"confirmEditButton\" size=\"lg\">\n                      Click the 'Search' Button start\n                    </Button>\n                  )}\n                  {this.state.searching === true && (\n                    <SearchUserLeaveDateRangeForm\n                    authUserId={this.context.userId}\n                    canCancel\n                      canConfirm\n                      onCancel={this.modalCancelHandler}\n                      onConfirm={this.modalConfirmSearchLeaveDateRangeHandler}\n                      confirmText=\"Search\"\n                      user={this.context.selectedUser}\n                    />\n                    )}\n                  </Tab>\n                  <Tab eventKey=\"Name\" title=\"Search by Name:\">\n                  {this.state.searching !== true && (\n                    <Button variant=\"outline-warning\" className=\"confirmEditButton\" size=\"lg\">\n                      Click the 'Search' Button start\n                    </Button>\n                  )}\n                  {this.state.searching === true && (\n                    <SearchUserNameForm\n                    authUserId={this.context.userId}\n                    canCancel\n                      canConfirm\n                      onCancel={this.modalCancelHandler}\n                      onConfirm={this.modalConfirmSearchNameHandler}\n                      confirmText=\"Search\"\n                      user={this.context.selectedUser}\n                    />\n                  )}\n                  </Tab>\n                  </Tabs>\n                  </Col>\n                  <Col md={10}>\n                  </Col>\n                  </Row>\n\n                  </Container>\n                </Tab.Pane>\n\n                <Tab.Pane eventKey=\"SearchResult\">\n                  <Container className=\"containerSearchUserResults\">\n                  <Row>\n                    <Card className=\"searchCard\">\n                      <Card.Body className=\"searchCardBody\">\n                        <Card.Title>Your Search</Card.Title>\n                        <Card.Text>\n                          Field: {this.state.userSearchField}\n                        </Card.Text>\n                        <Card.Text>\n                          Query: {this.state.userSearchQuery}\n                        </Card.Text>\n                      </Card.Body>\n                    </Card>\n                  </Row>\n                  <Row className=\"searchListRow\">\n\n                  {this.state.searchUsers !== [] && (\n                    <SearchUserList\n                      searchUsers={this.state.searchUsers}\n                      authUserId={this.context.userId}\n                      onViewDetail={this.showDetailHandler}\n                    />\n                  )}\n                  </Row>\n                  </Container>\n                </Tab.Pane>\n              </Tab.Content>\n            </Col>\n          </Row>\n        </Tab.Container>\n\n\n\n        </Container>\n\n    </Col>\n\n  </Row>\n\n</Accordion>\n</React.Fragment>\n    );\n  }\n}\n\nexport default UsersPage;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\n// import { NavLink } from 'react-router-dom';\n\nimport './UserItem.css';\n\nconst patientItem = props => (\n  <li key={props.patientId} className=\"users__list-item_master\">\n  <div>\n    <h5 className=\"userItemHeading\"> Name:</h5>\n    <p className=\"userItemText\">\n      {props.name}\n    </p>\n    <h5 className=\"userItemHeading\"> Age:</h5>\n    <p className=\"userItemText\">\n      {props.age}\n    </p>\n    <h5 className=\"userItemHeading\"> Gender:</h5>\n    <p className=\"userItemText\">\n      {props.gender}\n    </p>\n  </div>\n  <div>\n  <Button variant=\"primary\" onClick={props.onDetail.bind(this, props._id)}>\n        Details\n      </Button>\n  </div>\n  </li>\n);\n\nexport default patientItem;\n","import React from 'react';\n\nimport PatientItem from './PatientItem/PatientItem';\nimport './UserList.css';\n\nconst patientList = props => {\n  const patients = props.patients.map(patient => {\n    let patientRegistrationDate = null;\n    if (patient.registrationDate !== null) {\n       patientRegistrationDate = new Date(patient.registrationDate.substr(0,10)*1000).toISOString().slice(0,10)\n    }\n\n    return (\n      <PatientItem\n        key={patient._id}\n        _id={patient._id}\n        name={patient.name}\n        age={patient.age}\n        gender={patient.gender}\n        registrationDate={patientRegistrationDate}\n        onDetail={props.onViewDetail}\n      />\n    );\n  });\n\n  return <ul className=\"user__list1_master\">{patients}</ul>;\n};\n\nexport default patientList;\n","import React from 'react';\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\n\nimport './UserItem.css';\n\n\nconst patientAppointmentItem = props => (\n  <li key={props.userId} className=\"users__list-item_detail\">\n    <div>\n\n    <Card className=\"card\">\n        <Card.Body>\n          <Card.Title>\n            Appointment\n          </Card.Title>\n\n          \n          <ul className=\"cardUl\">\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Type:</p>\n            <p className=\"userItemText\">\n            {props.type}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Date:</p>\n            <p className=\"userItemText\">\n            {props.date}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Time:</p>\n            <p className=\"userItemText\">\n            {props.time}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Title:</p>\n            <p className=\"userItemText\">\n            {props.title}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Description:</p>\n            <p className=\"userItemText\">\n            {props.description}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Location:</p>\n            <p className=\"userItemText\">\n            {props.location}\n            </p>\n            </li>\n          </ul>\n          \n          <Card.Link href=\"\">\n          { props.canDelete === true && (\n            <Button variant=\"danger\" onClick={props.onDelete.bind(this, props.appointment)}>\n              Delete\n            </Button>\n          )}\n          </Card.Link>\n        </Card.Body>\n      </Card>\n    </div>\n  </li>\n);\n\nexport default patientAppointmentItem;\n","import React from 'react';\n\n\nimport PatientAppointmentItem from './PatientItem/PatientAppointmentItem';\nimport './UserList.css';\n\nconst patientAppointmentList = props => {\n  console.log(\"patient Appointment list props\", props.patientAppointment);\n  const patientAppointment = props.patientAppointment.map(appointment => {\n  const patientAppointmentDate = new Date(appointment.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n\n    return (\n      <PatientAppointmentItem\n        key={appointment.date}\n        userId={props.authUserId}\n        type={appointment.type}\n        date={patientAppointmentDate}\n        canDelete={props.canDelete}\n        onDelete={props.onDelete}\n        time={appointment.time}\n        title={appointment.title}\n        description={appointment.description}\n        location={appointment.location}\n        appointment={appointment}\n      />\n    );\n  });\n\n  return <ul className=\"user__list1_detail\">{patientAppointment}</ul>;\n};\n\nexport default patientAppointmentList;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\n\nimport './UserItem.css';\n\n\nconst patientInsuranceItem = props => (\n  <li key={props.userId} className=\"users__list-item_detail\">\n    <div>\n    <Card className=\"card\">\n        <Card.Body>\n          <Card.Title>\n            Insurance\n          </Card.Title>\n\n          \n          <ul className=\"cardUl\">\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Company:</p>\n            <p className=\"userItemText\">\n            {props.company}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Number:</p>\n            <p className=\"userItemText\">\n            {props.number}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Description:</p>\n            <p className=\"userItemText\">\n            {props.description}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Expiry:</p>\n            <p className=\"userItemText\">\n            {props.expiry}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Subscriber Company:</p>\n            <p className=\"userItemText\">\n            {props.subscriber.company}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Subscriber Description:</p>\n            <p className=\"userItemText\">\n            {props.subscriber.description}\n            </p>\n            </li>\n          </ul>\n          \n          <Card.Link href=\"\">\n          { props.canDelete === true && (\n            <Button variant=\"danger\" onClick={props.onDelete.bind(this, props.insurance)}>\n              Delete\n            </Button>\n          )}\n          </Card.Link>\n        </Card.Body>\n      </Card>\n    </div>\n  </li>\n);\n\nexport default patientInsuranceItem;\n","import React from 'react';\n\nimport PatientInsuranceItem from './PatientItem/PatientInsuranceItem';\nimport './UserList.css';\n\nconst patientInsuranceList = props => {\n  console.log(\"patient insurance list props\", props.patientInsurance);\n  const patientInsurance = props.patientInsurance.map(insurance => {\n    const patientInsuranceExpiry = new Date(insurance.expiry.substr(0,10)*1000).toISOString().slice(0,10);\n    return (\n      <PatientInsuranceItem\n        key={insurance.number}\n        userId={props.authUserId}\n        company={insurance.company}\n        number={insurance.number}\n        expiry={patientInsuranceExpiry}\n        description={insurance.description}\n        subscriber={insurance.subscriber}\n        canDelete={props.canDelete}\n        onDelete={props.onDelete}\n        insurance={insurance}\n      />\n    );\n  });\n\n  return <ul className=\"user__list1_detail\">{patientInsurance}</ul>;\n};\n\nexport default patientInsuranceList;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\n\nimport './UserItem.css';\n\n\nconst patientConsultantItem = props => (\n  <li key={props.userId} className=\"users__list-item_detail\">\n    <div>\n    <Card className=\"card\">\n        <Card.Body>\n          <Card.Title>\n            Consultant\n          </Card.Title>\n\n\n          <ul className=\"cardUl\">\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Date:</p>\n            <p className=\"userItemText\">\n            {props.date}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> ID:</p>\n            <p className=\"userItemText\">\n            {props.referenceId}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Name:</p>\n            <p className=\"userItemText\">\n            {props.referenceName}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Role:</p>\n            <p className=\"userItemText\">\n            {props.referenceRole}\n            </p>\n            </li>\n          </ul>\n\n          <Card.Link href=\"\">\n          { props.canDelete === true && (\n            <Button variant=\"danger\" onClick={props.onDelete.bind(this, props.consultant)}>\n              Delete\n            </Button>\n          )}\n          </Card.Link>\n        </Card.Body>\n      </Card>\n    </div>\n  </li>\n);\n\nexport default patientConsultantItem;\n","import React from 'react';\n\nimport PatientConsultantItem from './PatientItem/PatientConsultantItem';\nimport './UserList.css';\n\nconst patientConsultantList = props => {\n  console.log(\"patient consultant list props\", props.patientConsultant);\n  const patientConsultant = props.patientConsultant.map(consultant => {\n    const consultantDate = new Date(consultant.date.substr(0,10)*1000).toISOString().slice(0,10);\n    let consultantId = undefined;\n    let consultantName = undefined;\n    let consultantRole = undefined;\n    if (consultant.reference !== null){\n      consultantId = consultant.reference._id;\n      consultantName = consultant.reference.name;\n      consultantRole = consultant.reference.role;\n    }\n    else {\n      consultantId = 'no consultant info to show';\n      consultantName = 'no consultant info to show';\n      consultantRole = 'no consultant info to show';\n    }\n    return (\n      <PatientConsultantItem\n        key={consultant.date}\n        userId={props.authUserId}\n        date={consultantDate}\n        referenceId={consultantId}\n        referenceName={consultantName}\n        referenceRole={consultantRole}\n        canDelete={props.canDelete}\n        onDelete={props.onDelete}\n        consultant={consultant}\n      />\n    );\n  });\n\n  return <ul className=\"user__list1_detail\">{patientConsultant}</ul>;\n};\n\nexport default patientConsultantList;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\n\nimport './UserItem.css';\n\n\nconst patientNextOfKinItem = props => (\n  <li key={props.userId} className=\"users__list-item_detail\">\n    <div>\n    <Card className=\"card\">\n        <Card.Body>\n          <Card.Title>\n            Next of Kin\n          </Card.Title>\n\n\n          <ul className=\"cardUl\">\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Name:</p>\n            <p className=\"userItemText\">\n            {props.name}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Email:</p>\n            <p className=\"userItemText\">\n            {props.email}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Phone:</p>\n            <p className=\"userItemText\">\n            {props.phone}\n            </p>\n            </li>\n          </ul>\n\n          <Card.Link href=\"\">\n          { props.canDelete === true && (\n            <Button variant=\"danger\" onClick={props.onDelete.bind(this, props.nextOfKin)}>\n              Delete\n            </Button>\n          )}\n          </Card.Link>\n        </Card.Body>\n      </Card>\n    </div>\n\n  </li>\n);\n\nexport default patientNextOfKinItem;\n","import React from 'react';\n\nimport PatientNextOfKinItem from './PatientItem/PatientNextOfKinItem';\nimport './UserList.css';\n\nconst patientNextOfKinList = props => {\n  console.log(\"patient NextOfKin list props\", props.patientNextOfKin);\n  const patientNextOfKin = props.patientNextOfKin.map(nextOfKin => {\n    return (\n      <PatientNextOfKinItem\n        key={nextOfKin.number}\n        userId={props.authUserId}\n        name={nextOfKin.name}\n        email={nextOfKin.contact.email}\n        phone={nextOfKin.contact.phone}\n        canDelete={props.canDelete}\n        onDelete={props.onDelete}\n        nextOfKin={nextOfKin}\n      />\n    );\n  });\n\n  return <ul className=\"user__list1_detail\">{patientNextOfKin}</ul>;\n};\n\nexport default patientNextOfKinList;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\n\nimport './UserItem.css';\n\n\nconst patientComplaintItem = props => (\n  <li key={props.userId} className=\"users__list-item_detail\">\n    <div>\n    <Card className=\"card\">\n        <Card.Body>\n          <Card.Title>\n            Complaint\n          </Card.Title>\n\n          \n          <ul className=\"cardUl\">\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Date:</p>\n            <p className=\"userItemText\">\n            {props.date}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Title:</p>\n            <p className=\"userItemText\">\n            {props.title}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Description:</p>\n            <p className=\"userItemText\">\n            {props.description}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Anamnesis:</p>\n            <p className=\"userItemText\">\n            {props.anamnesis}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Attachment:</p>\n            <p className=\"userItemText\">\n            {props.attachment.name}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Format:</p>\n            <p className=\"userItemText\">\n            {props.attachment.format}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Path:</p>\n            <p className=\"userItemText\">\n            {props.attachment.path}\n            </p>\n            </li>\n          </ul>\n          \n          <Card.Link href=\"\">\n          { props.canDelete === true && (\n            <Button variant=\"danger\" onClick={props.onDelete.bind(this, props.complaint)}>\n              Delete\n            </Button>\n          )}\n          </Card.Link>\n          <Card.Link href=\"\">\n          <Button variant=\"info\" onClick={props.onViewAttachment.bind(this, props.attachment)}>\n            View\n          </Button>\n          </Card.Link>\n        </Card.Body>\n      </Card>\n    </div>\n  </li>\n);\n\nexport default patientComplaintItem;\n","import React from 'react';\n\nimport PatientComplaintItem from './PatientItem/PatientComplaintItem';\nimport './UserList.css';\n\nconst patientComplaintList = props => {\n  console.log(\"patient complaintlist props\", props.patientComplaint);\n  const patientComplaint = props.patientComplaint.map(complaint => {\n    const patientComplaintDate = new Date(complaint.date.substr(0,10)*1000).toISOString().slice(0,10);\n    return (\n      <PatientComplaintItem\n        key={complaint.date}\n        userId={props.authUserId}\n        date={patientComplaintDate}\n        title={complaint.title}\n        description={complaint.description}\n        anamnesis={complaint.anamnesis}\n        attachment={complaint.attachment}\n        canDelete={props.canDelete}\n        onDelete={props.onDelete}\n        complaint={complaint}\n        onViewAttachment={props.onViewAttachment}\n      />\n    );\n  });\n\n  return <ul className=\"user__list1_detail\">{patientComplaint}</ul>;\n};\n\nexport default patientComplaintList;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\n\nimport './UserItem.css';\n\n\nconst patientSurveyItem = props => (\n  <li key={props.userId} className=\"users__list-item_detail\">\n    <div>\n    <Card className=\"card\">\n        <Card.Body>\n          <Card.Title>\n            Survey\n          </Card.Title>\n\n          \n          <ul className=\"cardUl\">\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Title:</p>\n            <p className=\"userItemText\">\n            {props.title}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Type:</p>\n            <p className=\"userItemText\">\n            {props.type}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Description:</p>\n            <p className=\"userItemText\">\n            {props.description}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Attachment:</p>\n            <p className=\"userItemText\">\n            {props.attachment.name}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Format:</p>\n            <p className=\"userItemText\">\n            {props.attachment.format}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Path:</p>\n            <p className=\"userItemText\">\n            {props.attachment.path}\n            </p>\n            </li>\n          </ul>\n          \n          <Card.Link href=\"\">\n          { props.canDelete === true && (\n            <Button variant=\"danger\" onClick={props.onDelete.bind(this, props.survey)}>\n              Delete\n            </Button>\n          )}\n          </Card.Link>\n          <Card.Link href=\"\">\n          <Button variant=\"info\" onClick={props.onViewAttachment.bind(this, props.attachment)}>\n            View\n          </Button>\n          </Card.Link>\n        </Card.Body>\n      </Card>\n    </div>\n  </li>\n);\n\nexport default patientSurveyItem;\n","import React from 'react';\n\nimport PatientSurveyItem from './PatientItem/PatientSurveyItem';\nimport './UserList.css';\n\nconst patientSurveyList = props => {\n  console.log(\"patient survey list props\", props.patientSurvey);\n  const patientSurvey = props.patientSurvey.map(survey => {\n    const patientSurveyDate = new Date(survey.date.substr(0,10)*1000).toISOString().slice(0,10);\n    return (\n      <PatientSurveyItem\n        key={survey.title}\n        userId={props.authUserId}\n        title={survey.title}\n        date={patientSurveyDate}\n        description={survey.description}\n        attachment={survey.attachment}\n        canDelete={props.canDelete}\n        onDelete={props.onDelete}\n        survey={survey}\n        onViewAttachment={props.onViewAttachment}\n      />\n    );\n  });\n\n  return <ul className=\"user__list1_detail\">{patientSurvey}</ul>;\n};\n\nexport default patientSurveyList;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\n\nimport './UserItem.css';\n\n\nconst patientVitalsItem = props => (\n  <li key={props.userId} className=\"users__list-item_detail\">\n    <div>\n    <Card className=\"card\">\n        <Card.Body>\n          <Card.Title>\n            Vitals\n          </Card.Title>\n\n          \n          <ul className=\"cardUl\">\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> date:</p>\n            <p className=\"userItemText\">\n            {props.date}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Pulse Rate:</p>\n            <p className=\"userItemText\">\n            {props.pr}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Blood Pressure 1:</p>\n            <p className=\"userItemText\">\n            {props.bp1}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Blood Pressure 2:</p>\n            <p className=\"userItemText\">\n            {props.bp2}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Resp Rate:</p>\n            <p className=\"userItemText\">\n            {props.rr}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Temp:</p>\n            <p className=\"userItemText\">\n            {props.temp}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> ps02:</p>\n            <p className=\"userItemText\">\n            {props.ps02}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Height:</p>\n            <p className=\"userItemText\">\n            {props.height}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Weight:</p>\n            <p className=\"userItemText\">\n            {props.weight}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Bmi:</p>\n            <p className=\"userItemText\">\n            {props.Bmi}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Urine Type:</p>\n            <p className=\"userItemText\">\n            {props.urineType}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Urine Value:</p>\n            <p className=\"userItemText\">\n            {props.urineValue}\n            </p>\n            </li>\n          </ul>\n\n          <Card.Link href=\"\">\n          { props.canDelete === true && (\n            <Button variant=\"danger\" onClick={props.onDelete.bind(this, props.vitals)}>\n              Delete\n            </Button>\n          )}\n          </Card.Link>\n        </Card.Body>\n      </Card>\n    </div>\n\n  </li>\n);\n\nexport default patientVitalsItem;\n","import React from 'react';\n\nimport PatientVitalsItem from './PatientItem/PatientVitalsItem';\nimport './UserList.css';\n\nconst patientVitalsList = props => {\n  console.log(\"patient Vitals list props\", props.patientVitals);\n  const patientVitals = props.patientVitals.map(vitals => {\n    const patientVitalsDate = new Date(vitals.date.substr(0,10)*1000).toISOString().slice(0,10);\n    return (\n      <PatientVitalsItem\n        key={patientVitalsDate}\n        userId={props.authUserId}\n        date={patientVitalsDate}\n        pr={vitals.pr}\n        bp1={vitals.bp1}\n        bp2={vitals.bp2}\n        rr={vitals.rr}\n        temp={vitals.temp}\n        height={vitals.height}\n        weight={vitals.weight}\n        bmi={vitals.bmi}\n        urineType={vitals.urine.type}\n        urineValue={vitals.urine.value}\n        canDelete={props.canDelete}\n        onDelete={props.onDelete}\n        vitals={vitals}\n        />\n    );\n  });\n\n  return <ul className=\"user__list1_detail\">{patientVitals}</ul>;\n};\n\nexport default patientVitalsList;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\n\nimport './UserItem.css';\n\n\nconst patientExaminationItem = props => (\n  <li key={props.userId} className=\"users__list-item_detail\">\n    <div>\n    <Card className=\"card\">\n        <Card.Body>\n          <Card.Title>\n            Examination\n          </Card.Title>\n\n          \n          <ul className=\"cardUl\">\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Date:</p>\n            <p className=\"userItemText\">\n            {props.date}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> General:</p>\n            <p className=\"userItemText\">\n            {props.general}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Area:</p>\n            <p className=\"userItemText\">\n            {props.area}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Type:</p>\n            <p className=\"userItemText\">\n            {props.type}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Measure:</p>\n            <p className=\"userItemText\">\n            {props.measure}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Value:</p>\n            <p className=\"userItemText\">\n            {props.value}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Description:</p>\n            <p className=\"userItemText\">\n            {props.description}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Follow Up ?</p>\n            <p className=\"userItemText\">\n            {props.followUp}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Attachment Name:</p>\n            <p className=\"userItemText\">\n            {props.attachment.name}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Format:</p>\n            <p className=\"userItemText\">\n            {props.attachment.format}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Path:</p>\n            <p className=\"userItemText\">\n            {props.attachment.path}\n            </p>\n            </li>\n          </ul>\n          \n          <Card.Link href=\"\">\n          { props.canDelete === true && (\n            <Button variant=\"danger\" onClick={props.onDelete.bind(this, props.examination)}>\n              Delete\n            </Button>\n          )}\n          </Card.Link>\n          <Card.Link href=\"\">\n          <Button variant=\"info\" onClick={props.onViewAttachment.bind(this, props.attachment)}>\n            View\n          </Button>\n          </Card.Link>\n        </Card.Body>\n      </Card>\n    </div>\n  </li>\n);\n\nexport default patientExaminationItem;\n","import React from 'react';\n\nimport PatientExaminationItem from './PatientItem/PatientExaminationItem';\nimport './UserList.css';\n\nconst patientExaminationList = props => {\n  console.log(\"patient examination list props\", props.patientExamination);\n  const patientExamination = props.patientExamination.map(examination => {\n    const patientExaminationDate = new Date(examination.date.substr(0,10)*1000).toISOString().slice(0,10);\n    return (\n      <PatientExaminationItem\n        key={examination.area}\n        userId={props.authUserId}\n        date={patientExaminationDate}\n        general={examination.general}\n        area={examination.area}\n        type={examination.type}\n        measure={examination.measure}\n        value={examination.value}\n        description={examination.description}\n        followUp={examination.followUp}\n        attachment={examination.attachment}\n        canDelete={props.canDelete}\n        onDelete={props.onDelete}\n        examination={examination}\n        onViewAttachment={props.onViewAttachment}\n      />\n    );\n  });\n\n  return <ul className=\"user__list1_detail\">{patientExamination}</ul>;\n};\n\nexport default patientExaminationList;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\n\nimport './UserItem.css';\n\n\nconst patientHistoryItem = props => (\n  <li key={props.userId} className=\"users__list-item_detail\">\n    <div>\n    <Card className=\"card\">\n        <Card.Body>\n          <Card.Title>\n            History\n          </Card.Title>\n\n          \n          <ul className=\"cardUl\">\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Type:</p>\n            <p className=\"userItemText\">\n            {props.type}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Date:</p>\n            <p className=\"userItemText\">\n            {props.date}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Title:</p>\n            <p className=\"userItemText\">\n            {props.title}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Description:</p>\n            <p className=\"userItemText\">\n            {props.description}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Attachment Name:</p>\n            <p className=\"userItemText\">\n            {props.attachment.name}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Format:</p>\n            <p className=\"userItemText\">\n            {props.attachment.format}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Path:</p>\n            <p className=\"userItemText\">\n            {props.attachment.path}\n            </p>\n            </li>\n          </ul>\n          \n          <Card.Link href=\"\">\n          { props.canDelete === true && (\n            <Button variant=\"danger\" onClick={props.onDelete.bind(this, props.history)}>\n              Delete\n            </Button>\n          )}\n          </Card.Link>\n          <Card.Link href=\"\">\n          <Button variant=\"info\" onClick={props.onViewAttachment.bind(this, props.attachment)}>\n            View\n          </Button>\n          </Card.Link>\n        </Card.Body>\n      </Card>\n    </div>\n  </li>\n);\n\nexport default patientHistoryItem;\n","import React from 'react';\n\nimport PatientHistoryItem from './PatientItem/PatientHistoryItem';\nimport './UserList.css';\n\nconst patientHistoryList = props => {\n  console.log(\"patient history list props\", props.patientHistory);\n  const patientHistory = props.patientHistory.map(history => {\n    const patientHistoryDate = new Date(history.date.substr(0,10)*1000).toISOString().slice(0,10);\n    return (\n      <PatientHistoryItem\n        key={history.date}\n        userId={props.authUserId}\n        type={history.type}\n        date={patientHistoryDate}\n        title={history.title}\n        description={history.description}\n        attachment={history.attachment}\n        canDelete={props.canDelete}\n        onDelete={props.onDelete}\n        history={history}\n        onViewAttachment={props.onViewAttachment}\n      />\n    );\n  });\n\n  return <ul className=\"user__list1_detail\">{patientHistory}</ul>;\n};\n\nexport default patientHistoryList;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\n\nimport './UserItem.css';\n\n\nconst patientAllergiesItem = props => (\n  <li key={props.userId} className=\"users__list-item_detail\">\n    <div>\n\n    <Card className=\"card\">\n        <Card.Body>\n          <Card.Title>\n            Allergy\n          </Card.Title>\n\n          \n          <ul className=\"cardUl\">\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Title:</p>\n            <p className=\"userItemText\">\n            {props.title}\n            </p>\n            </li>\n            <li>\n            <p className=\"userItemHeading\"> Type:</p>\n            <p className=\"userItemText\">\n            {props.type}\n            </p>\n            </li>\n            <li>\n            <p className=\"userItemHeading\"> Description:</p>\n            <p className=\"userItemText\">\n            {props.description}\n            </p>\n            </li>\n            <li>\n            <p className=\"userItemHeading\"> Attachment:</p>\n            <p className=\"userItemText\">\n            {props.attachment.name}\n            </p>\n            </li>\n            <li>\n            <p className=\"userItemHeading\"> Format:</p>\n            <p className=\"userItemText\">\n            {props.attachment.format}\n            </p>\n            </li>\n            <li>\n            <p className=\"userItemHeading\"> Path:</p>\n            <p className=\"userItemText\">\n            {props.attachment.path}\n            </p>\n            </li>\n          </ul>\n          \n          <Card.Link href=\"\">\n          { props.canDelete === true && (\n            <Button variant=\"danger\" onClick={props.onDelete.bind(this, props.allergies)}>\n              Delete\n            </Button>\n          )}\n          </Card.Link>\n          <Card.Link href=\"\">\n          <Button variant=\"info\" onClick={props.onViewAttachment.bind(this, props.attachment)}>\n            View\n          </Button>\n          </Card.Link>\n        </Card.Body>\n      </Card>\n    </div>\n  </li>\n);\n\nexport default patientAllergiesItem;\n","import React from 'react';\n\nimport PatientAllergiesItem from './PatientItem/PatientAllergiesItem';\nimport './UserList.css';\n\nconst patientAllergiesList = props => {\n  console.log(\"patient allergies list props\", props.patientAllergies);\n  const patientAllergies = props.patientAllergies.map(allergies => {\n\n    return (\n      <PatientAllergiesItem\n        key={allergies.title}\n        userId={props.authUserId}\n        title={allergies.title}\n        type={allergies.type}\n        description={allergies.description}\n        attachment={allergies.attachment}\n        canDelete={props.canDelete}\n        onDelete={props.onDelete}\n        allergies={allergies}\n        onViewAttachment={props.onViewAttachment}\n      />\n    );\n  });\n\n  return <ul className=\"user__list1_detail\">{patientAllergies}</ul>;\n};\n\nexport default patientAllergiesList;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\n\nimport './UserItem.css';\n\nconst patientMedicationItem = props => (\n  <li key={props.userId} className=\"users__list-item_detail\">\n    <div>\n    <Card className=\"card\">\n        <Card.Body>\n          <Card.Title>\n            Medication\n          </Card.Title>\n\n          \n          <ul className=\"cardUl\">\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Title:</p>\n            <p className=\"userItemText\">\n            {props.title}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Type:</p>\n            <p className=\"userItemText\">\n            {props.type}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Description:</p>\n            <p className=\"userItemText\">\n            {props.description}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Attachment:</p>\n            <p className=\"userItemText\">\n            {props.attachment.name}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Format:</p>\n            <p className=\"userItemText\">\n            {props.attachment.format}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Path:</p>\n            <p className=\"userItemText\">\n            {props.attachment.path}\n            </p>\n            </li>\n          </ul>\n          \n          <Card.Link href=\"\">\n          { props.canDelete === true && (\n            <Button variant=\"danger\" onClick={props.onDelete.bind(this, props.medication)}>\n              Delete\n            </Button>\n          )}\n          </Card.Link>\n          <Card.Link href=\"\">\n          <Button variant=\"info\" onClick={props.onViewAttachment.bind(this, props.attachment)}>\n            View\n          </Button>\n          </Card.Link>\n        </Card.Body>\n      </Card>\n    </div>\n  </li>\n);\n\nexport default patientMedicationItem;\n","import React from 'react';\n\nimport PatientMedicationItem from './PatientItem/PatientMedicationItem';\nimport './UserList.css';\n\nconst patientMedicationList = props => {\n  console.log(\"patient medication list props\", props.patientMedication);\n  const patientMedication = props.patientMedication.map(medication => {\n    return (\n      <PatientMedicationItem\n        key={medication.title}\n        userId={props.authUserId}\n        title={medication.title}\n        type={medication.type}\n        description={medication.description}\n        attachment={medication.attachment}\n        canDelete={props.canDelete}\n        onDelete={props.onDelete}\n        medication={medication}\n        onViewAttachment={props.onViewAttachment}\n      />\n    );\n  });\n\n  return <ul className=\"user__list1_detail\">{patientMedication}</ul>;\n};\n\nexport default patientMedicationList;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\n\nimport './UserItem.css';\n\n\nconst patientInvestigationItem = props => (\n  <li key={props.userId} className=\"users__list-item_detail\">\n    <div>\n    <Card className=\"card\">\n        <Card.Body>\n          <Card.Title>\n            Investigation\n          </Card.Title>\n\n\n          <ul className=\"cardUl\">\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Title:</p>\n            <p className=\"userItemText\">\n            {props.title}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Type:</p>\n            <p className=\"userItemText\">\n            {props.type}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Date:</p>\n            <p className=\"userItemText\">\n            {props.date}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Description:</p>\n            <p className=\"userItemText\">\n            {props.description}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Attachment Name:</p>\n            <p className=\"userItemText\">\n            {props.attachment.name}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Format:</p>\n            <p className=\"userItemText\">\n            {props.attachment.format}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Path:</p>\n            <p className=\"userItemText\">\n            {props.attachment.path}\n            </p>\n            </li>\n          </ul>\n\n          <Card.Link href=\"\">\n          { props.canDelete === true && (\n            <Button variant=\"danger\" onClick={props.onDelete.bind(this, props.investigation)}>\n              Delete\n            </Button>\n          )}\n          </Card.Link>\n          <Card.Link href=\"\">\n          <Button variant=\"info\" onClick={props.onViewAttachment.bind(this, props.attachment)}>\n            View\n          </Button>\n          </Card.Link>\n        </Card.Body>\n      </Card>\n    </div>\n  </li>\n);\n\nexport default patientInvestigationItem;\n","import React from 'react';\n\nimport PatientInvestigationItem from './PatientItem/PatientInvestigationItem';\nimport './UserList.css';\n\nconst patientInvestigationList = props => {\n  console.log(\"patient investigation list props\", props.patientInvestigation);\n  const patientInvestigation = props.patientInvestigation.map(investigation => {\n    const patientInvestigationDate = new Date(investigation.date.substr(0,10)*1000).toISOString().slice(0,10);\n    return (\n      <PatientInvestigationItem\n        key={investigation.date}\n        userId={props.authUserId}\n        date={patientInvestigationDate}\n        title={investigation.title}\n        type={investigation.type}\n        description={investigation.description}\n        attachment={investigation.attachment}\n        canDelete={props.canDelete}\n        onDelete={props.onDelete}\n        investigation={investigation}\n        onViewAttachment={props.onViewAttachment}\n      />\n    );\n  });\n\n  return <ul className=\"user__list1_detail\">{patientInvestigation}</ul>;\n};\n\nexport default patientInvestigationList;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\n\nimport './UserItem.css';\n\n\nconst patientDiagnosisItem = props => (\n  <li key={props.userId} className=\"users__list-item_detail\">\n    <div>\n    <Card className=\"card\">\n        <Card.Body>\n          <Card.Title>\n            Diagnosis\n          </Card.Title>\n\n          \n          <ul className=\"cardUl\">\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Title:</p>\n            <p className=\"userItemText\">\n            {props.title}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Date:</p>\n            <p className=\"userItemText\">\n            {props.date}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Type:</p>\n            <p className=\"userItemText\">\n            {props.type}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Description:</p>\n            <p className=\"userItemText\">\n            {props.description}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Attachment:</p>\n            <p className=\"userItemText\">\n            {props.attachment.name}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Format:</p>\n            <p className=\"userItemText\">\n            {props.attachment.format}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Path:</p>\n            <p className=\"userItemText\">\n            {props.attachment.path}\n            </p>\n            </li>\n          </ul>\n          \n          <Card.Link href=\"\">\n          { props.canDelete === true && (\n            <Button variant=\"danger\" onClick={props.onDelete.bind(this, props.diagnosis)}>\n              Delete\n            </Button>\n          )}\n          </Card.Link>\n          <Card.Link href=\"\">\n          <Button variant=\"info\" onClick={props.onViewAttachment.bind(this, props.attachment)}>\n            View\n          </Button>\n          </Card.Link>\n        </Card.Body>\n      </Card>\n    </div>\n  </li>\n);\n\nexport default patientDiagnosisItem;\n","import React from 'react';\n\nimport PatientDiagnosisItem from './PatientItem/PatientDiagnosisItem';\nimport './UserList.css';\n\nconst patientDiagnosisList = props => {\n  console.log(\"patient diagnosis list props\", props.patientDiagnosis);\n  const patientDiagnosis = props.patientDiagnosis.map(diagnosis => {\n    const patientDiagnosisDate = new Date(diagnosis.date.substr(0,10)*1000).toISOString().slice(0,10);\n    return (\n      <PatientDiagnosisItem\n        key={diagnosis.date}\n        userId={props.authUserId}\n        date={patientDiagnosisDate}\n        title={diagnosis.title}\n        type={diagnosis.type}\n        description={diagnosis.description}\n        attachment={diagnosis.attachment}\n        canDelete={props.canDelete}\n        onDelete={props.onDelete}\n        diagnosis={diagnosis}\n        onViewAttachment={props.onViewAttachment}\n      />\n    );\n  });\n\n  return <ul className=\"user__list1_detail\">{patientDiagnosis}</ul>;\n};\n\nexport default patientDiagnosisList;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\n\nimport './UserItem.css';\n\n\nconst patientTreatmentItem = props => (\n  <li key={props.userId} className=\"users__list-item_detail\">\n    <div>\n    <Card className=\"card\">\n        <Card.Body>\n          <Card.Title>\n            Treatment\n          </Card.Title>\n\n          \n          <ul className=\"cardUl\">\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Title:</p>\n            <p className=\"userItemText\">\n            {props.title}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Type:</p>\n            <p className=\"userItemText\">\n            {props.type}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Date:</p>\n            <p className=\"userItemText\">\n            {props.date}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Description:</p>\n            <p className=\"userItemText\">\n            {props.description}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Dose:</p>\n            <p className=\"userItemText\">\n            {props.dose}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Frequency:</p>\n            <p className=\"userItemText\">\n            {props.frequency}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Attachment Name:</p>\n            <p className=\"userItemText\">\n            {props.attachment.name}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Format:</p>\n            <p className=\"userItemText\">\n            {props.attachment.format}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Path:</p>\n            <p className=\"userItemText\">\n            {props.attachment.path}\n            </p>\n            </li>\n          </ul>\n          \n          <Card.Link href=\"\">\n          { props.canDelete === true && (\n            <Button variant=\"danger\" onClick={props.onDelete.bind(this, props.treatment)}>\n              Delete\n            </Button>\n          )}\n          </Card.Link>\n          <Card.Link href=\"\">\n          <Button variant=\"info\" onClick={props.onViewAttachment.bind(this, props.attachment)}>\n            View\n          </Button>\n          </Card.Link>\n        </Card.Body>\n      </Card>\n    </div>\n  </li>\n);\n\nexport default patientTreatmentItem;\n","import React from 'react';\n\nimport PatientTreatmentItem from './PatientItem/PatientTreatmentItem';\nimport './UserList.css';\n\nconst patientTreatmentList = props => {\n  console.log(\"patient treatment list props\", props.patientTreatment);\n  const patientTreatment = props.patientTreatment.map(treatment => {\n    const patientTreatmentDate = new Date(treatment.date.substr(0,10)*1000).toISOString().slice(0,10);\n    return (\n      <PatientTreatmentItem\n        key={treatment.title}\n        userId={props.authUserId}\n        date={patientTreatmentDate}\n        title={treatment.title}\n        type={treatment.type}\n        description={treatment.description}\n        dose={treatment.dose}\n        frequency={treatment.frequency}\n        attachment={treatment.attachment}\n        canDelete={props.canDelete}\n        onDelete={props.onDelete}\n        treatment={treatment}\n        onViewAttachment={props.onViewAttachment}\n      />\n    );\n  });\n\n  return <ul className=\"user__list1_detail\">{patientTreatment}</ul>;\n};\n\nexport default patientTreatmentList;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\n\nimport './UserItem.css';\n\n\nconst patientBillingItem = props => (\n  <li key={props.userId} className=\"users__list-item_detail\">\n    <div>\n    <Card className=\"card\">\n        <Card.Body>\n          <Card.Title>\n            Billing\n          </Card.Title>\n\n          \n          <ul className=\"cardUl\">\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Title:</p>\n            <p className=\"userItemText\">\n            {props.title}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Type:</p>\n            <p className=\"userItemText\">\n            {props.type}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Date:</p>\n            <p className=\"userItemText\">\n            {props.date}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Description:</p>\n            <p className=\"userItemText\">\n            {props.description}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Amount:</p>\n            <p className=\"userItemText\">\n            {props.amount}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Paid ?</p>\n            <p className=\"userItemText\">\n            {props.paid}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Notes:</p>\n            <p className=\"userItemText\">\n            {props.notes}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Attachment:</p>\n            <p className=\"userItemText\">\n            {props.attachment.name}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Format:</p>\n            <p className=\"userItemText\">\n            {props.attachment.format}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Path:</p>\n            <p className=\"userItemText\">\n            {props.attachment.path}\n            </p>\n            </li>\n          </ul>\n          \n          <Card.Link href=\"\">\n          { props.canDelete === true && (\n            <Button variant=\"danger\" onClick={props.onDelete.bind(this, props.billing)}>\n              Delete\n            </Button>\n          )}\n          </Card.Link>\n          <Card.Link href=\"\">\n          <Button variant=\"info\" onClick={props.onViewAttachment.bind(this, props.attachment)}>\n            View\n          </Button>\n          </Card.Link>\n        </Card.Body>\n      </Card>\n    </div>\n  </li>\n);\n\nexport default patientBillingItem;\n","import React from 'react';\n\nimport PatientBillingItem from './PatientItem/PatientBillingItem';\nimport './UserList.css';\n\nconst patientBillingList = props => {\n  console.log(\"patient billing list props\", props.patientBilling);\n  const patientBilling = props.patientBilling.map(billing => {\n    const patientBillingDate = new Date(billing.date.substr(0,10)*1000).toISOString().slice(0,10);\n    return (\n      <PatientBillingItem\n        key={billing.date}\n        userId={props.authUserId}\n        date={patientBillingDate}\n        type={billing.type}\n        title={billing.title}\n        description={billing.description}\n        amount={billing.amount}\n        paid={billing.paid}\n        notes={billing.notes}\n        attachment={billing.attachment}\n        canDelete={props.canDelete}\n        onDelete={props.onDelete}\n        billing={billing}\n        onViewAttachment={props.onViewAttachment}\n      />\n    );\n  });\n\n  return <ul className=\"user__list1_detail\">{patientBilling}</ul>;\n};\n\nexport default patientBillingList;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\n\nimport './UserItem.css';\n\n\nconst patientAttachmentItem = props => (\n  <li key={props.userId} className=\"users__list-item_detail\">\n    <div>\n    <Card className=\"card\">\n        <Card.Body>\n          <Card.Title>\n            Attachment\n          </Card.Title>\n\n          \n          <ul className=\"cardUl\">\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Name:</p>\n            <p className=\"userItemText\">\n            {props.name}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Format:</p>\n            <p className=\"userItemText\">\n            {props.format}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Path:</p>\n            <p className=\"userItemText\">\n            {props.path}\n            </p>\n            </li>\n          </ul>\n          \n          <Card.Link href=\"\">\n          { props.canDelete === true && (\n            <Button variant=\"danger\" onClick={props.onDelete.bind(this, props.attachment)}>\n              Delete\n            </Button>\n          )}\n          </Card.Link>\n          <Card.Link href=\"\">\n          <Button variant=\"info\" onClick={props.onViewAttachment.bind(this, props.attachment)}>\n            View\n          </Button>\n          </Card.Link>\n        </Card.Body>\n      </Card>\n    </div>\n  </li>\n);\n\nexport default patientAttachmentItem;\n","import React from 'react';\n\nimport PatientAttachmentItem from './PatientItem/PatientAttachmentItem';\nimport './UserList.css';\n\nconst patientAttachmentsList = props => {\n  console.log(\"patient attachments list props\", props.patientAttachments);\n  const patientAttachments = props.patientAttachments.map(attachment => {\n\n    return (\n      <PatientAttachmentItem\n        key={attachment.name}\n        userId={props.authUserId}\n        name={attachment.name}\n        format={attachment.format}\n        path={attachment.path}\n        canDelete={props.canDelete}\n        onDelete={props.onDelete}\n        attachment={attachment}\n        onViewAttachment={props.onViewAttachment}\n      />\n    );\n  });\n\n  return <ul className=\"user__list1_detail\">{patientAttachments}</ul>;\n};\n\nexport default patientAttachmentsList;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\n\n\nimport './UserItem.css';\n\n\nconst patientNoteItem = props => (\n  <li key={props.userId} className=\"users__list-item_master\">\n    <div>\n    <h6 className=\"userItemHeading\"> Note:</h6>\n    <p className=\"userItemText\">\n    {props.note}\n    </p>\n    </div>\n    { props.canDelete === true && (\n      <Button variant=\"danger\" onClick={props.onDelete.bind(this, props.note)}>\n        Delete\n      </Button>\n    )}\n  </li>\n);\n\nexport default patientNoteItem;\n","import React from 'react';\n\nimport PatientNoteItem from './PatientItem/PatientNoteItem';\nimport './UserList.css';\n\nconst patientNotesList = props => {\n  console.log(\"patient Notes list props\", props.patientNotes);\n  const patientNotes = props.patientNotes.map(note => {\n\n    return (\n      <PatientNoteItem\n        key={note}\n        userId={props.authUserId}\n        note={note}\n        canDelete={props.canDelete}\n        onDelete={props.onDelete}\n      />\n    );\n  });\n\n  return <ul className=\"user__list1_master\">{patientNotes}</ul>;\n};\n\nexport default patientNotesList;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\n\nimport './UserItem.css';\n\n\nconst patientTagItem = props => (\n  <li key={props.userId} className=\"users__list-item_master\">\n    <div>\n    <h6 className=\"userItemHeading\"> Tag:</h6>\n    <p className=\"userItemText\">\n    {props.tag}\n    </p>\n    </div>\n    { props.canDelete === true && (\n      <Button variant=\"danger\" onClick={props.onDelete.bind(this, props.tag)}>\n        Delete\n      </Button>\n    )}\n  </li>\n);\n\nexport default patientTagItem;\n","import React from 'react';\n\nimport PatientTagItem from './PatientItem/PatientTagItem';\nimport './UserList.css';\n\nconst patientTagsList = props => {\n  console.log(\"patient Tags list props\", props.patientTags);\n  const patientTags = props.patientTags.map(tag => {\n\n    return (\n      <PatientTagItem\n        key={tag}\n        userId={props.authUserId}\n        tag={tag}\n        canDelete={props.canDelete}\n        onDelete={props.onDelete}\n      />\n    );\n  });\n\n  return <ul className=\"user__list1_master\">{patientTags}</ul>;\n};\n\nexport default patientTagsList;\n","import React from 'react';\nimport Card from 'react-bootstrap/Card';\n\nimport './UserItem.css';\n\n\nconst VisitConsultantItem = props => (\n  <li key={props.userId} className=\"users__list-item_detail\">\n    <div>\n    <Card className=\"card\">\n        <Card.Body>\n          <Card.Title>\n            Consultant\n          </Card.Title>\n\n          \n          <ul className=\"cardUl\">\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Date:</p>\n            <p className=\"userItemText\">\n            {props.date}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Name:</p>\n            <p className=\"userItemText\">\n            {props.name}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Role:</p>\n            <p className=\"userItemText\">\n            {props.role}\n            </p>\n            </li>\n          </ul>\n          \n        </Card.Body>\n      </Card>\n    </div>\n  </li>\n);\n\nexport default VisitConsultantItem;\n","import React from 'react';\n\nimport VisitConsultantItem from './PatientItem/VisitConsultantItem';\nimport './UserList.css';\n\nconst visitConsultantList = props => {\n  console.log(\"VisitConsultantlist props\", props.consultant);\n\n  let consultant = undefined;\n  if (props.consultant) {\n  consultant = props.consultant.map(consultantItem => {\n    const visitConsultantDate = new Date(consultantItem.date.substr(0,10)*1000).toISOString().slice(0,10);\n    const consultantReference = consultantItem.reference;\n    console.log(`\n      visitConsultantDate: ${visitConsultantDate},\n      consultantReference: ${JSON.stringify(consultantReference)},\n      `);\n    return (\n      <VisitConsultantItem\n        key={consultantItem.date}\n        userId={props.authUserId}\n        date={visitConsultantDate}\n        name={consultantReference.name}\n        role={consultantReference.role}\n      />\n    );\n  });\n\n  return <ul className=\"user__list1_detail\">{consultant}</ul>;\n};\n}\nexport default visitConsultantList;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\n\nimport './UserItem.css';\n\nconst VisitComplaintItem = props => (\n  <li key={props.userId} className=\"users__list-item_detail\">\n    <div>\n    <Card className=\"card\">\n        <Card.Body>\n          <Card.Title>\n            Complaint\n          </Card.Title>\n\n          \n          <ul className=\"cardUl\">\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Date:</p>\n            <p className=\"userItemText\">\n            {props.date}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Title:</p>\n            <p className=\"userItemText\">\n            {props.title}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Description:</p>\n            <p className=\"userItemText\">\n            {props.description}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Anamnesis:</p>\n            <p className=\"userItemText\">\n            {props.anamnesis}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Name:</p>\n            <p className=\"userItemText\">\n            {props.attachmentName}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Format:</p>\n            <p className=\"userItemText\">\n            {props.attachmentFormat}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Path:</p>\n            <p className=\"userItemText\">\n            {props.attachmentPath}\n            </p>\n            </li>\n          </ul>\n          \n          <Card.Link href=\"\">\n          <Button variant=\"info\" onClick={props.onViewAttachment.bind(this, props.attachment)}>\n            View\n          </Button>\n          </Card.Link>\n        </Card.Body>\n      </Card>\n    </div>\n\n  </li>\n);\n\nexport default VisitComplaintItem;\n","import React from 'react';\n\nimport VisitComplaintItem from './PatientItem/VisitComplaintItem';\nimport './UserList.css';\n\nconst visitComplaintList = props => {\n  console.log(\"VisitComplaintlist props\", props.complaint);\n\n  let complaint = undefined;\n  if (props.complaint) {\n  complaint = props.complaint.map(complaintItem => {\n    const visitComplaintDate = new Date(complaintItem.date.substr(0,10)*1000).toISOString().slice(0,10);\n    const complaintAttachment = complaintItem.attachment;\n    console.log(`\n      visitComplaintDate: ${visitComplaintDate},\n      `);\n    return (\n      <VisitComplaintItem\n        key={complaintItem.date}\n        userId={props.authUserId}\n        date={visitComplaintDate}\n        title={complaintItem.title}\n        description={complaintItem.description}\n        anamnesis={complaintItem.anamnesis}\n        attachment={complaintItem.attachment}\n        attachmentName={complaintAttachment.name}\n        attachmentFormat={complaintAttachment.format}\n        attachmentPath={complaintAttachment.path}\n        onViewAttachment={props.onViewAttachment}\n      />\n    );\n  });\n\n  return <ul className=\"user__list1_detail\">{complaint}</ul>;\n};\n}\n\nexport default visitComplaintList;\n\n// onViewAttachment={props.onViewAttachment}\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\n\nimport './UserItem.css';\n\n\nconst VisitExaminationItem = props => (\n  <li key={props.userId} className=\"users__list-item_detail\">\n    <div>\n    <Card className=\"card\">\n        <Card.Body>\n          <Card.Title>\n            Examination\n          </Card.Title>\n\n          \n          <ul className=\"cardUl\">\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Date:</p>\n            <p className=\"userItemText\">\n            {props.date}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> General:</p>\n            <p className=\"userItemText\">\n            {props.general}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Area:</p>\n            <p className=\"userItemText\">\n            {props.area}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Type:</p>\n            <p className=\"userItemText\">\n            {props.type}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Measure:</p>\n            <p className=\"userItemText\">\n            {props.measure}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Value:</p>\n            <p className=\"userItemText\">\n            {props.value}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Description:</p>\n            <p className=\"userItemText\">\n            {props.description}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Follow Up ?</p>\n            <p className=\"userItemText\">\n            {props.followUp}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Attachment Name:</p>\n            <p className=\"userItemText\">\n            {props.attachmentName}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Format:</p>\n            <p className=\"userItemText\">\n            {props.attachmentFormat}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Path:</p>\n            <p className=\"userItemText\">\n            {props.attachmentPath}\n            </p>\n            </li>\n          </ul>\n          \n          <Card.Link href=\"\">\n          <Button variant=\"info\" onClick={props.onViewAttachment.bind(this, props.attachment)}>\n            View\n          </Button>\n          </Card.Link>\n        </Card.Body>\n      </Card>\n    </div>\n\n  </li>\n);\n\nexport default VisitExaminationItem;\n","import React from 'react';\n\nimport VisitExaminationItem from './PatientItem/VisitExaminationItem';\nimport './UserList.css';\n\nconst visitExaminationList = props => {\n  console.log(\"VisitExaminationlist props\", props.examination);\n\n  let examination = undefined;\n  if (props.examination) {\n  examination = props.examination.map(examinationItem => {\n    const visitExaminationDate = new Date(examinationItem.date.substr(0,10)*1000).toISOString().slice(0,10);\n    const examinationAttachment = examinationItem.attachment;\n    console.log(`\n      visitExaminationDate: ${visitExaminationDate},\n      `);\n    return (\n      <VisitExaminationItem\n        key={examinationItem.date}\n        userId={props.authUserId}\n        date={visitExaminationDate}\n        general={examinationItem.general}\n        area={examinationItem.area}\n        type={examinationItem.type}\n        measure={examinationItem.measure}\n        value={examinationItem.value}\n        description={examinationItem.description}\n        followUp={examinationItem.followUp}\n        attachment={examinationItem.attachment}\n        attachmentName={examinationAttachment.name}\n        attachmentFormat={examinationAttachment.format}\n        attachmentPath={examinationAttachment.path}\n        onViewAttachment={props.onViewAttachment}\n      />\n    );\n  });\n\n  return <ul className=\"user__list1_detail\">{examination}</ul>;\n};\n}\nexport default visitExaminationList;\n\n// onViewAttachment={props.onViewAttachment}\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\n\nimport './UserItem.css';\n\n\nconst VisitSurveyItem = props => (\n  <li key={props.userId} className=\"users__list-item_detail\">\n    <div>\n    <Card className=\"card\">\n        <Card.Body>\n          <Card.Title>\n            Survey\n          </Card.Title>\n\n          \n          <ul className=\"cardUl\">\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Date:</p>\n            <p className=\"userItemText\">\n            {props.date}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Title:</p>\n            <p className=\"userItemText\">\n            {props.title}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Description:</p>\n            <p className=\"userItemText\">\n            {props.description}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Attachment Name:</p>\n            <p className=\"userItemText\">\n            {props.attachmentName}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Format:</p>\n            <p className=\"userItemText\">\n            {props.attachmentFormat}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Path:</p>\n            <p className=\"userItemText\">\n            {props.attachmentPath}\n            </p>\n            </li>\n          </ul>\n          \n          <Card.Link href=\"\">\n          <Button variant=\"info\" onClick={props.onViewAttachment.bind(this, props.attachment)}>\n            View\n          </Button>\n          </Card.Link>\n        </Card.Body>\n      </Card>\n      </div>\n\n  </li>\n);\n\nexport default VisitSurveyItem;\n","import React from 'react';\n\nimport VisitSurveyItem from './PatientItem/VisitSurveyItem';\nimport './UserList.css';\n\nconst visitSurveyList = props => {\n  console.log(\"VisitSurveylist props\", props.survey);\n\n  let survey = undefined;\n  if (props.survey) {\n  survey = props.survey.map(surveyItem => {\n    const visitSurveyDate = new Date(surveyItem.date.substr(0,10)*1000).toISOString().slice(0,10);\n    const surveyAttachment = surveyItem.attachment;\n    console.log(`\n      visitSurveyDate: ${visitSurveyDate},\n      `);\n    return (\n      <VisitSurveyItem\n        key={surveyItem.date}\n        userId={props.authUserId}\n        date={visitSurveyDate}\n        title={surveyItem.title}\n        description={surveyItem.description}\n        attachment={surveyItem.attachment}\n        attachmentName={surveyAttachment.name}\n        attachmentFormat={surveyAttachment.format}\n        attachmentPath={surveyAttachment.path}\n        onViewAttachment={props.onViewAttachment}\n      />\n    );\n  });\n}\n\n  return <ul className=\"user__list1_detail\">{survey}</ul>;\n};\n\nexport default visitSurveyList;\n\n// onViewAttachment={props.onViewAttachment}\n","import React from 'react';\nimport Card from 'react-bootstrap/Card';\n\nimport './UserItem.css';\n\n\nconst VisitVitalsItem = props => (\n  <li key={props.userId} className=\"users__list-item_detail\">\n    <div>\n    <Card className=\"card\">\n        <Card.Body>\n          <Card.Title>\n            Vitals\n          </Card.Title>\n\n          \n          <ul className=\"cardUl\">\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> date:</p>\n            <p className=\"userItemText\">\n            {props.date}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Pulse Rate:</p>\n            <p className=\"userItemText\">\n            {props.pr}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Blood Pressure 1:</p>\n            <p className=\"userItemText\">\n            {props.bp1}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Blood Pressure 2:</p>\n            <p className=\"userItemText\">\n            {props.bp2}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Resp Rate:</p>\n            <p className=\"userItemText\">\n            {props.rr}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Temp:</p>\n            <p className=\"userItemText\">\n            {props.temp}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Sp02:</p>\n            <p className=\"userItemText\">\n            {props.ps02}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Height:</p>\n            <p className=\"userItemText\">\n            {props.height}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Weight:</p>\n            <p className=\"userItemText\">\n            {props.weight}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Bmi:</p>\n            <p className=\"userItemText\">\n            {props.Bmi}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Urine Type:</p>\n            <p className=\"userItemText\">\n            {props.urineType}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Urine Value:</p>\n            <p className=\"userItemText\">\n            {props.urineValue}\n            </p>\n            </li>\n          </ul>\n          \n\n        </Card.Body>\n      </Card>\n    </div>\n  </li>\n);\n\nexport default VisitVitalsItem;\n","import React from 'react';\n\nimport VisitVitalsItem from './PatientItem/VisitVitalsItem';\nimport './UserList.css';\n\nconst visitVitalsList = props => {\n  console.log(\"VisitVitalslist props\", props.vitals);\n  let vitals = undefined;\n  if (props.vitals) {\n\n    vitals = props.vitals.map(vitalsItem => {\n      const visitVitalsDate = new Date(vitalsItem.date.substr(0,10)*1000).toISOString().slice(0,10);\n      const vitalsUrine = vitalsItem.urine;\n      console.log(`\n        visitVitalsDate: ${visitVitalsDate},\n        `);\n      return (\n        <VisitVitalsItem\n          key={vitalsItem.date}\n          userId={props.authUserId}\n          date={visitVitalsDate}\n          pr={vitalsItem.pr}\n          bp1={vitalsItem.bp1}\n          bp2={vitalsItem.bp2}\n          rr={vitalsItem.rr}\n          temp={vitalsItem.temp}\n          ps02={vitalsItem.ps02}\n          height={vitalsItem.height}\n          weight={vitalsItem.weight}\n          bmi={vitalsItem.bmi}\n          urineType={vitalsUrine.type}\n          urineValue={vitalsUrine.value}\n        />\n      );\n    });\n\n  }\n\n\n  return <ul className=\"user__list1_detail\">{vitals}</ul>;\n};\n\nexport default visitVitalsList;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\n\nimport './UserItem.css';\n\n\nconst VisitHistoryItem = props => (\n  <li key={props.userId} className=\"users__list-item_detail\">\n    <div>\n    <Card className=\"card\">\n        <Card.Body>\n          <Card.Title>\n            History\n          </Card.Title>\n\n          \n          <ul className=\"cardUl\">\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Type:</p>\n            <p className=\"userItemText\">\n            {props.type}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Date:</p>\n            <p className=\"userItemText\">\n            {props.date}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Title:</p>\n            <p className=\"userItemText\">\n            {props.title}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Description:</p>\n            <p className=\"userItemText\">\n            {props.description}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Attachment Name:</p>\n            <p className=\"userItemText\">\n            {props.attachmentName}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Format:</p>\n            <p className=\"userItemText\">\n            {props.attachmentFormat}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Path:</p>\n            <p className=\"userItemText\">\n            {props.attachmentPath}\n            </p>\n            </li>\n          </ul>\n          \n          <Card.Link href=\"\">\n          <Button variant=\"info\" onClick={props.onViewAttachment.bind(this, props.attachment)}>\n            View\n          </Button>\n          </Card.Link>\n        </Card.Body>\n      </Card>\n    </div>\n\n  </li>\n);\n\nexport default VisitHistoryItem;\n","import React from 'react';\n\nimport VisitHistoryItem from './PatientItem/VisitHistoryItem';\nimport './UserList.css';\n\nconst visitHistoryList = props => {\n  console.log(\"VisitHistorylist props\", props.history);\n\n  let history = undefined;\n  if (props.history) {\n  history = props.history.map(historyItem => {\n    const visitHistoryDate = new Date(historyItem.date.substr(0,10)*1000).toISOString().slice(0,10);\n    const historyAttachment = historyItem.attachment;\n    console.log(`\n      visitHistoryDate: ${visitHistoryDate},\n      `);\n    return (\n      <VisitHistoryItem\n        key={historyItem.date}\n        userId={props.authUserId}\n        date={visitHistoryDate}\n        title={historyItem.title}\n        description={historyItem.description}\n        attachment={historyItem.attachment}\n        attachmentName={historyAttachment.name}\n        attachmentFormat={historyAttachment.format}\n        attachmentPath={historyAttachment.path}\n        onViewAttachment={props.onViewAttachment}\n      />\n    );\n  });\n\n  return <ul className=\"user__list1_detail\">{history}</ul>;\n};\n}\nexport default visitHistoryList;\n\n  // onViewAttachment={props.onViewAttachment}\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\n\nimport './UserItem.css';\n\n\nconst VisitInvestigationItem = props => (\n  <li key={props.userId} className=\"users__list-item_detail\">\n    <div>\n    <Card className=\"card\">\n        <Card.Body>\n          <Card.Title>\n            Investigation\n          </Card.Title>\n\n          \n          <ul className=\"cardUl\">\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Type:</p>\n            <p className=\"userItemText\">\n            {props.type}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Date:</p>\n            <p className=\"userItemText\">\n            {props.date}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Title:</p>\n            <p className=\"userItemText\">\n            {props.title}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Description:</p>\n            <p className=\"userItemText\">\n            {props.description}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Attachment Name:</p>\n            <p className=\"userItemText\">\n            {props.attachmentName}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Format:</p>\n            <p className=\"userItemText\">\n            {props.attachmentFormat}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Path:</p>\n            <p className=\"userItemText\">\n            {props.attachmentPath}\n            </p>\n            </li>\n          </ul>\n          \n          <Card.Link href=\"\">\n          <Button variant=\"info\" onClick={props.onViewAttachment.bind(this, props.attachment)}>\n            View\n          </Button>\n          </Card.Link>\n        </Card.Body>\n      </Card>\n    </div>\n  </li>\n);\n\nexport default VisitInvestigationItem;\n","import React from 'react';\n\nimport VisitInvestigationItem from './PatientItem/VisitInvestigationItem';\nimport './UserList.css';\n\nconst visitInvestigationList = props => {\n  console.log(\"VisitInvestigationlist props\", props.investigation);\n\n  let investigation = undefined;\n  if (props.investigation) {\n  investigation = props.investigation.map(investigationItem => {\n    const visitInvestigationDate = new Date(investigationItem.date.substr(0,10)*1000).toISOString().slice(0,10);\n    const investigationAttachment = investigationItem.attachment;\n    console.log(`\n      visitInvestigationDate: ${visitInvestigationDate},\n      `);\n    return (\n      <VisitInvestigationItem\n        key={investigationItem.date}\n        userId={props.authUserId}\n        date={visitInvestigationDate}\n        type={investigationItem.type}\n        title={investigationItem.title}\n        description={investigationItem.description}\n        attachment={investigationItem.attachment}\n        attachmentName={investigationAttachment.name}\n        attachmentFormat={investigationAttachment.format}\n        attachmentPath={investigationAttachment.path}\n        onViewAttachment={props.onViewAttachment}\n      />\n    );\n  });\n}\n\n  return <ul className=\"user__list1_detail\">{investigation}</ul>;\n};\n\nexport default visitInvestigationList;\n\n// onViewAttachment={props.onViewAttachment}\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\n\nimport './UserItem.css';\n\n\nconst VisitDiagnosisItem = props => (\n  <li key={props.userId} className=\"users__list-item_detail\">\n    <div>\n    <Card className=\"card\">\n        <Card.Body>\n          <Card.Title>\n            Diagnosis\n          </Card.Title>\n\n          \n          <ul className=\"cardUl\">\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Title:</p>\n            <p className=\"userItemText\">\n            {props.title}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Date:</p>\n            <p className=\"userItemText\">\n            {props.date}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Type:</p>\n            <p className=\"userItemText\">\n            {props.type}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Description:</p>\n            <p className=\"userItemText\">\n            {props.description}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Name:</p>\n            <p className=\"userItemText\">\n            {props.attachmentName}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Format:</p>\n            <p className=\"userItemText\">\n            {props.attachmentFormat}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Path:</p>\n            <p className=\"userItemText\">\n            {props.attachmentPath}\n            </p>\n            </li>\n          </ul>\n          \n          <Card.Link href=\"\">\n          <Button variant=\"info\" onClick={props.onViewAttachment.bind(this, props.attachment)}>\n            View\n          </Button>\n          </Card.Link>\n        </Card.Body>\n      </Card>\n    </div>\n\n  </li>\n);\n\nexport default VisitDiagnosisItem;\n","import React from 'react';\n\nimport VisitDiagnosisItem from './PatientItem/VisitDiagnosisItem';\nimport './UserList.css';\n\nconst visitDiagnosisList = props => {\n  console.log(\"VisitDiagnosislist props\", props.diagnosis);\n\n  let diagnosis = undefined;\n  if (props.diagnosis) {\n  diagnosis = props.diagnosis.map(diagnosisItem => {\n    const visitDiagnosisDate = new Date(diagnosisItem.date.substr(0,10)*1000).toISOString().slice(0,10);\n    const diagnosisAttachment = diagnosisItem.attachment;\n    console.log(`\n      visitDiagnosisDate: ${visitDiagnosisDate},\n      `);\n    return (\n      <VisitDiagnosisItem\n        key={diagnosisItem.date}\n        userId={props.authUserId}\n        date={visitDiagnosisDate}\n        type={diagnosisItem.type}\n        title={diagnosisItem.title}\n        description={diagnosisItem.description}\n        attachment={diagnosisItem.attachment}\n        attachmentName={diagnosisAttachment.name}\n        attachmentFormat={diagnosisAttachment.format}\n        attachmentPath={diagnosisAttachment.path}\n        onViewAttachment={props.onViewAttachment}\n      />\n    );\n  });\n\n  return <ul className=\"user__list1_detail\">{diagnosis}</ul>;\n};\n}\nexport default visitDiagnosisList;\n\n// onViewAttachment={props.onViewAttachment}\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\n\nimport './UserItem.css';\n\n\nconst VisitInvestigationItem = props => (\n  <li key={props.userId} className=\"users__list-item_detail\">\n    <div>\n    <Card className=\"card\">\n        <Card.Body>\n          <Card.Title>\n            Treatment\n          </Card.Title>\n\n          \n          <ul className=\"cardUl\">\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Title:</p>\n            <p className=\"userItemText\">\n            {props.title}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Type:</p>\n            <p className=\"userItemText\">\n            {props.type}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Date:</p>\n            <p className=\"userItemText\">\n            {props.date}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Description:</p>\n            <p className=\"userItemText\">\n            {props.description}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Dose:</p>\n            <p className=\"userItemText\">\n            {props.dose}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Frequency:</p>\n            <p className=\"userItemText\">\n            {props.frequency}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Attachment Name:</p>\n            <p className=\"userItemText\">\n            {props.attachmentName}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Format:</p>\n            <p className=\"userItemText\">\n            {props.attachmentFormat}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Path:</p>\n            <p className=\"userItemText\">\n            {props.attachmentPath}\n            </p>\n            </li>\n          </ul>\n          \n          <Card.Link href=\"\">\n          <Button variant=\"info\" onClick={props.onViewAttachment.bind(this, props.attachment)}>\n            View\n          </Button>\n          </Card.Link>\n\n        </Card.Body>\n      </Card>\n    </div>\n  </li>\n);\n\nexport default VisitInvestigationItem;\n","import React from 'react';\n\nimport VisitTreatmentItem from './PatientItem/VisitTreatmentItem';\nimport './UserList.css';\n\nconst visitTreatmentList = props => {\n  console.log(\"VisitTreatmentlist props\", props.treatment);\n  let treatment = undefined;\n  if (props.treatment) {\n  treatment = props.treatment.map(treatmentItem => {\n    const visitTreatmentDate = new Date(treatmentItem.date.substr(0,10)*1000).toISOString().slice(0,10);\n    const treatmentAttachment = treatmentItem.attachment;\n    console.log(`\n      visitTreatmentDate: ${visitTreatmentDate},\n      `);\n    return (\n      <VisitTreatmentItem\n        key={treatmentItem.date}\n        userId={props.authUserId}\n        date={visitTreatmentDate}\n        type={treatmentItem.type}\n        title={treatmentItem.title}\n        description={treatmentItem.description}\n        dose={treatmentItem.dose}\n        frequency={treatmentItem.frequency}\n        attachment={treatmentItem.attachment}\n        attachmentName={treatmentAttachment.name}\n        attachmentFormat={treatmentAttachment.format}\n        attachmentPath={treatmentAttachment.path}\n        onViewAttachment={props.onViewAttachment}\n      />\n    );\n  });\n}\n\n  return <ul className=\"user__list1_master\">{treatment}</ul>;\n};\n\nexport default visitTreatmentList;\n\n// onViewAttachment={props.onViewAttachment}\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\n\nimport './UserItem.css';\n\n\nconst VisitBillingItem = props => (\n  <li key={props.userId} className=\"users__list-item_detail\">\n    <div>\n    <Card className=\"card\">\n        <Card.Body>\n          <Card.Title>\n            Billing\n          </Card.Title>\n\n          \n          <ul className=\"cardUl\">\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Title:</p>\n            <p className=\"userItemText\">\n            {props.title}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Type:</p>\n            <p className=\"userItemText\">\n            {props.type}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Date:</p>\n            <p className=\"userItemText\">\n            {props.date}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Description:</p>\n            <p className=\"userItemText\">\n            {props.description}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Amount:</p>\n            <p className=\"userItemText\">\n            {props.amount}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Paid ?</p>\n            <p className=\"userItemText\">\n            {props.paid}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Notes:</p>\n            <p className=\"userItemText\">\n            {props.notes}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Attachment Name:</p>\n            <p className=\"userItemText\">\n            {props.attachmentName}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Format:</p>\n            <p className=\"userItemText\">\n            {props.attachmentFormat}\n            </p>\n            </li>\n            <li className=\"cardLi\">\n            <p className=\"userItemHeading\"> Path:</p>\n            <p className=\"userItemText\">\n            {props.attachmentPath}\n            </p>\n            </li>\n          </ul>\n          \n          <Card.Link href=\"\">\n          <Button variant=\"info\" onClick={props.onViewAttachment.bind(this, props.attachment)}>\n            View\n          </Button>\n          </Card.Link>\n        </Card.Body>\n      </Card>\n    </div>\n  </li>\n);\n\nexport default VisitBillingItem;\n","import React from 'react';\n\nimport VisitBillingItem from './PatientItem/VisitBillingItem';\nimport './UserList.css';\n\nconst visitBillingList = props => {\n  console.log(\"VisitBillinglist props\", props.billing);\n\n  let billing = undefined;\n  if (props.billing) {\n  billing = props.billing.map(billingItem => {\n    const visitBillingDate = new Date(billingItem.date.substr(0,10)*1000).toISOString().slice(0,10);\n    const billingAttachment = billingItem.attachment;\n    console.log(`\n      visitBillingDate: ${visitBillingDate},\n      `);\n    return (\n      <VisitBillingItem\n        key={billingItem.date}\n        userId={props.authUserId}\n        date={visitBillingDate}\n        type={billingItem.type}\n        title={billingItem.title}\n        description={billingItem.description}\n        amount={billingItem.amount}\n        paid={billingItem.paid}\n        notes={billingItem.notes}\n        attachment={billingItem.attachment}\n        attachmentName={billingAttachment.name}\n        attachmentFormat={billingAttachment.format}\n        attachmentPath={billingAttachment.path}\n        onViewAttachment={props.onViewAttachment}\n      />\n    );\n  });\n\n  return <ul className=\"user__list1_detail\">{billing}</ul>;\n};\n}\nexport default visitBillingList;\n\n// onViewAttachment={props.onViewAttachment}\n","import React from 'react';\nimport Card from 'react-bootstrap/Card';\n// import Button from 'react-bootstrap/Button';\n// import Accordion from 'react-bootstrap/Accordion';\n// import Row from 'react-bootstrap/Row';\n// import Col from 'react-bootstrap/Col';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\n\nimport VisitConsultantList from './PatientList/VisitConsultantList';\nimport VisitComplaintList from './PatientList/VisitComplaintList';\nimport VisitExaminationList from './PatientList/VisitExaminationList';\nimport VisitSurveyList from './PatientList/VisitSurveyList';\nimport VisitVitalsList from './PatientList/VisitVitalsList';\nimport VisitHistoryList from './PatientList/VisitHistoryList';\nimport VisitInvestigationList from './PatientList/VisitInvestigationList';\nimport VisitDiagnosisList from './PatientList/VisitDiagnosisList';\nimport VisitTreatmentList from './PatientList/VisitTreatmentList';\nimport VisitBillingList from './PatientList/VisitBillingList';\n\nimport './PatientDetail.css';\n\nconst PatientVisit = (props) => {\n  let visit = {\n    date: \"\",\n    patientName: \"\",\n    consultant: \"\",\n    complaint: \"\",\n    examination: \"\",\n    survey: \"\",\n    vitals: \"\",\n    history: \"\",\n    investigation: \"\",\n    diagnosis: \"\",\n    treatment: \"\",\n    billing: \"\",\n  };\n  if (props.visit !== null) {\n    visit = props.visit;\n  }\n\n  const consultant = visit.consultant;\n  const complaint = visit.complaint;\n  const examination = visit.examination;\n  const survey = visit.survey;\n  const vitals = visit.vitals;\n  const history = visit.history;\n  const investigation = visit.investigation;\n  const diagnosis = visit.diagnosis;\n  const treatment = visit.treatment;\n  const billing = visit.billing;\n\n  console.log(`\n    patientVisit: ${JSON.stringify(visit)},\n    date: ${visit.date},\n    consultant: ${consultant},\n    complaint: ${complaint},\n    examination: ${examination},\n    survey: ${survey},\n    investigation: ${investigation},\n    diagnosis: ${diagnosis},\n    treatment: ${treatment},\n    billing: ${billing},\n        `);\n    return (\n      <div className=\"PatientDetailBox1\">\n      <p>Date: {new Date(visit.date).toISOString().slice(0,10)}</p>\n      <p>Patient: {visit.patientName}</p>\n      <Tabs defaultActiveKey=\"Visit\" id=\"uncontrolled-tab-example\" className=\"tab\">\n      <Tab eventKey=\"\" title=\"Visit:\" disabled>\n      </Tab>\n      <Tab eventKey=\"Consultant\" title=\"Consultant\">\n      <Card className=\"PatientDetailCard\">\n      <Card.Body>\n      <Card.Text>\n        Consultants\n      </Card.Text>\n      <VisitConsultantList\n        consultant={consultant}\n        authUserId={props.authUserId}\n        />\n      </Card.Body>\n      </Card>\n      </Tab>\n      <Tab eventKey=\"Complaint\" title=\"Complaint\">\n      <Card className=\"PatientDetailCard\">\n      <Card.Body>\n      <Card.Text>\n        Complaints\n      </Card.Text>\n      <VisitComplaintList\n        complaint={complaint}\n        authUserId={props.authUserId}\n        onViewAttachment={props.onViewAttachment}\n        />\n      </Card.Body>\n      </Card>\n      </Tab>\n      <Tab eventKey=\"Examination\" title=\"Examination\">\n      <Card className=\"PatientDetailCard\">\n      <Card.Body>\n      <Card.Text>\n        Examinations\n      </Card.Text>\n      <VisitExaminationList\n        examination={examination}\n        authUserId={props.authUserId}\n        onViewAttachment={props.onViewAttachment}\n        />\n      </Card.Body>\n      </Card>\n      </Tab>\n      <Tab eventKey=\"Survey\" title=\"Survey\">\n      <Card className=\"PatientDetailCard\">\n      <Card.Body>\n      <Card.Text>\n        Surveys\n      </Card.Text>\n      <VisitSurveyList\n        survey={survey}\n        authUserId={props.authUserId}\n        onViewAttachment={props.onViewAttachment}\n        />\n      </Card.Body>\n      </Card>\n      </Tab>\n      <Tab eventKey=\"Vitals\" title=\"Vitals\">\n      <Card className=\"PatientDetailCard\">\n      <Card.Body>\n      <Card.Text>\n        Vitals\n      </Card.Text>\n      <VisitVitalsList\n        vitals={vitals}\n        authUserId={props.authUserId}\n        />\n      </Card.Body>\n      </Card>\n      </Tab>\n      <Tab eventKey=\"History\" title=\"History\">\n      <Card className=\"PatientDetailCard\">\n      <Card.Body>\n      <Card.Text>\n        History\n      </Card.Text>\n      <VisitHistoryList\n        history={history}\n        authUserId={props.authUserId}\n        onViewAttachment={props.onViewAttachment}\n        />\n      </Card.Body>\n      </Card>\n      </Tab>\n      <Tab eventKey=\"Investigation\" title=\"Investigation\">\n      <Card className=\"PatientDetailCard\">\n      <Card.Body>\n      <Card.Text>\n        Investigations\n      </Card.Text>\n      <VisitInvestigationList\n        investigation={investigation}\n        authUserId={props.authUserId}\n        onViewAttachment={props.onViewAttachment}\n        />\n      </Card.Body>\n      </Card>\n      </Tab>\n      <Tab eventKey=\"Diagnosis\" title=\"Diagnosis\">\n      <Card className=\"PatientDetailCard\">\n      <Card.Body>\n      <Card.Text>\n        Diagnosis\n      </Card.Text>\n      <VisitDiagnosisList\n        diagnosis={diagnosis}\n        authUserId={props.authUserId}\n        onViewAttachment={props.onViewAttachment}\n        />\n      </Card.Body>\n      </Card>\n      </Tab>\n      <Tab eventKey=\"Treatment\" title=\"Treatment\">\n      <Card className=\"PatientDetailCard\">\n      <Card.Body>\n      <Card.Text>\n        Treatment\n      </Card.Text>\n      <VisitTreatmentList\n        treatment={treatment}\n        authUserId={props.authUserId}\n        onViewAttachment={props.onViewAttachment}\n        />\n      </Card.Body>\n      </Card>\n      </Tab>\n      <Tab eventKey=\"Billing\" title=\"Billing\">\n      <Card className=\"PatientDetailCard\">\n      <Card.Body>\n      <Card.Text>\n        Billing\n      </Card.Text>\n      <VisitBillingList\n        billing={billing}\n        authUserId={props.authUserId}\n        onViewAttachment={props.onViewAttachment}\n        />\n      </Card.Body>\n      </Card>\n      </Tab>\n      </Tabs>\n      </div>\n    )\n\n}\n\nexport default PatientVisit;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\n// import AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst SearchPatientVisitForm = (props) => {\n// const {...search} = props.search;\n\nreturn (\n<div className=\"SearchFormContainer\">\n  <Form onSubmit={props.onGetVisit}>\n\n  <Form.Group controlId=\"formBasicVisitDate\">\n  <Form.Label>Visit Date</Form.Label>\n  <Form.Control type=\"date\" placeholder=\"VisitDate\"/>\n  </Form.Group>\n\n{props.canCancel && (\n  <Button variant=\"danger\" onClick={props.onCancel}>Cancel</Button>\n)}\n\n{props.canConfirm && (\n  <Button variant=\"primary\" type=\"submit\">\n  Submit\n  </Button>\n)}\n\n</Form>\n</div>\n\n\n)};\n\nexport default SearchPatientVisitForm;\n","// import {parse, stringify} from 'flatted/esm';\nimport React from 'react';\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\n// import Accordion from 'react-bootstrap/Accordion';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\n// import Form from 'react-bootstrap/Form';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\n// import AuthContext from '../../context/auth-context';\n\n\nimport PatientAppointmentList from './PatientList/PatientAppointmentList';\nimport PatientInsuranceList from './PatientList/PatientInsuranceList';\nimport PatientConsultantList from './PatientList/PatientConsultantList';\nimport PatientNextOfKinList from './PatientList/PatientNextOfKinList';\nimport PatientComplaintList from './PatientList/PatientComplaintList';\nimport PatientSurveyList from './PatientList/PatientSurveyList';\nimport PatientVitalsList from './PatientList/PatientVitalsList';\nimport PatientExaminationList from './PatientList/PatientExaminationList';\nimport PatientHistoryList from './PatientList/PatientHistoryList';\nimport PatientAllergiesList from './PatientList/PatientAllergiesList';\nimport PatientMedicationList from './PatientList/PatientMedicationList';\nimport PatientInvestigationList from './PatientList/PatientInvestigationList';\nimport PatientDiagnosisList from './PatientList/PatientDiagnosisList';\nimport PatientTreatmentList from './PatientList/PatientTreatmentList';\nimport PatientBillingList from './PatientList/PatientBillingList';\nimport PatientAttachmentsList from './PatientList/PatientAttachmentsList';\nimport PatientNotesList from './PatientList/PatientNotesList';\nimport PatientTagsList from './PatientList/PatientTagsList';\nimport PatientVisit from './PatientVisit';\n\nimport SearchPatientVisitForm from '../../components/Forms/SearchPatientVisitForm';\n\n\nimport './PatientDetail.css';\n\nconst PatientDetail = (props) => {\n  const {...patient} = props.patient;\n  // const authPatientId = props.authUserId;\n  const patientAppointment = patient.appointments;\n  const patientInsurance = patient.insurance;\n  const patientConsultant = patient.consultant;\n  const patientNextOfKin = patient.nextOfKin;\n  const patientComplaint = patient.complaints;\n  const patientSurvey = patient.surveys;\n  const patientVitals = patient.vitals;\n  const patientExamination = patient.examination;\n  const patientHistory = patient.history;\n  const patientAllergies = patient.allergies;\n  const patientMedication = patient.medication;\n  const patientInvestigation = patient.investigation;\n  const patientDiagnosis = patient.diagnosis;\n  const patientTreatment = patient.treatment;\n  const patientBilling = patient.billing;\n  const patientAttachments = patient.attachments;\n  const patientNotes = patient.notes;\n  const patientTags = patient.tags;\n  const patientRegistrationDate = new Date(patient.registrationDate.substr(0,10)*1000).toISOString().slice(0,10);\n  const patientDob = new Date(patient.dob.substr(0,10)*1000).toISOString().slice(0,10);\n  // const patientReferralDate = new Date(patient.referralDate*1000).toUTCString();\n  let patientReferralDate = patient.referralDate;\n  if (patient.referralDate) {\n    patientReferralDate = new Date(patient.referralDate.substr(0,10)*1000).toISOString().slice(0,10);\n  }\n  let patientExpirationDate = undefined;\n  if (patient.expirationDate !== null)\n  {patientExpirationDate = new Date(patient.expirationDate.substr(0,10)*1000).toISOString().slice(0,10);}\n  else {patientExpirationDate = patient.expirationDate;}\n  // let visit = \"noVisit\";\n  // if (props.visit) {\n  //   visit = props.visit;\n  // }\n  // const token = props.token;\n  // const userId = props.authUserId;\n  // const patientId = patient._id;\n\n  console.log(\"PatientDetail.props.patient:  \", {...patient});\n  // console.log(\"patientExamination[1].date:  \", new Date(patientExamination[1].date.substr(0,10)*1000).toISOString());\n  // console.log(\"patientConsultant[1].date:  \", patientConsultant[1].date);\n  // console.log(\"patientComplaint[1].date:  \", patientComplaint[1].date);\n  // console.log(\"patientComplaint[1].date:  \", new Date(patientComplaint[1].date.substr(0,10)*1000).toLocaleString());\n\n\n\n  return (\n    <div className=\"PatientDetailBox1\">\n\n    <Tabs defaultActiveKey=\"Demographics\" id=\"uncontrolled-tab-example\" className=\"tab\">\n\n      <Tab eventKey=\"Demographics\" title=\"Demographics\">\n      <Card className=\"PatientDetailCard\">\n      <Card.Body>\n      <Card.Title><span className=\"ul\">Patient Details</span></Card.Title>\n      <Row className=\"detailCardRow\">\n        <Col md={4} className=\"detailCardCol\">\n          <Card.Text>\n            <span className=\"bold\">ID :</span> {patient._id}\n          </Card.Text>\n          <Card.Text>\n            <span className=\"bold\">Title :</span> {patient.title}\n          </Card.Text>\n          <Card.Text>\n            <span className=\"bold\">Name :</span> {patient.name}\n          </Card.Text>\n          <Card.Text>\n            <span className=\"bold\">D.O.B :</span> {patientDob}\n          </Card.Text>\n          <Card.Text>\n            <span className=\"bold\">Age :</span> {patient.age}\n          </Card.Text>\n          <Card.Text>\n            <span className=\"bold\">Gender :</span> {patient.gender}\n          </Card.Text>\n          <Card.Text>\n            <span className=\"bold\">Reg Date :</span> {patientRegistrationDate}\n          </Card.Text>\n          <Card.Text>\n            <span className=\"bold\">Ref Date :</span> {patientReferralDate}\n          </Card.Text>\n          <Card.Text>\n            <span className=\"bold\">Exp Date :</span> {patientExpirationDate}\n          </Card.Text>\n        </Col>\n\n        <Col md={4} className=\"detailCardCol\">\n          <Card.Text>\n            <span className=\"bold\">Phone :</span> {patient.contact.phone}\n          </Card.Text>\n          <Card.Text>\n            <span className=\"bold\">Email :</span> {patient.contact.email}\n          </Card.Text>\n          <Card.Text>\n            <span className=\"bold\">Address :</span>\n          </Card.Text>\n          <Card.Text>\n            <span className=\"bold\">Street No :</span> {patient.address.number}\n          </Card.Text>\n          <Card.Text>\n            <span className=\"bold\">Street Name :</span> {patient.address.street}\n          </Card.Text>\n          <Card.Text>\n            <span className=\"bold\">Town :</span> {patient.address.town}\n          </Card.Text>\n          <Card.Text>\n            <span className=\"bold\">Parish :</span> {patient.address.parish}\n          </Card.Text>\n          <Card.Text>\n            <span className=\"bold\">PO :</span> {patient.address.postOffice}\n          </Card.Text>\n        </Col>\n\n        <Col md={4} className=\"detailCardCol\">\n          <Card.Text>\n            <span className=\"bold\">Job Position :</span> {patient.occupation.role}\n          </Card.Text>\n          <Card.Text>\n            <span className=\"bold\">Employer :</span> {patient.occupation.employer}\n          </Card.Text>\n          <Card.Text>\n            <span className=\"bold\">Employer Phone :</span> {patient.occupation.contact.phone}\n          </Card.Text>\n          <Card.Text>\n            <span className=\"bold\">Employer Email :</span> {patient.occupation.contact.email}\n          </Card.Text>\n          <Card.Text>\n            <span className=\"bold\">Referring Doctor :</span>\n          </Card.Text>\n          <Card.Text>\n            <span className=\"bold\">Name :</span> {patient.referringDoctor.name}\n          </Card.Text>\n          <Card.Text>\n            <span className=\"bold\">Phone :</span> {patient.referringDoctor.phone}\n          </Card.Text>\n          <Card.Text>\n            <span className=\"bold\">Email :</span> {patient.referringDoctor.email}\n          </Card.Text>\n          <Card.Text>\n            <span className=\"bold\">Attending Physician :</span>\n          </Card.Text>\n          <Card.Text>\n            <span className=\"bold\">Name :</span> {patient.attendingPhysician.name}\n          </Card.Text>\n          <Card.Text>\n            <span className=\"bold\">Phone :</span> {patient.attendingPhysician.phone}\n          </Card.Text>\n          <Card.Text>\n            <span className=\"bold\">Email :</span> {patient.attendingPhysician.email}\n          </Card.Text>\n        </Col>\n      </Row>\n\n      <Row className=\"detailCardRow\">\n        <Col className=\"detailCardCol\">\n          { props.canDelete === true && (\n            <Button variant=\"danger\" onClick={props.onDelete}>\n              Delete Patient !!??\n            </Button>\n          )}\n        </Col>\n\n        <Col className=\"detailCardCol\">\n          <Button variant=\"warning\" onClick={props.onCreatePdf.bind(this, patient)}>\n            Create Pdf\n          </Button>\n        </Col>\n      </Row>\n\n      </Card.Body>\n      </Card>\n      </Tab>\n\n      <Tab eventKey=\"Appointments\" title=\"Appointments\">\n      <Card.Text>\n        Appointments:\n      </Card.Text>\n      <PatientAppointmentList\n      patientAppointment={patientAppointment}\n      authUserId={props.authUserId}\n      canDelete={props.canDelete}\n      onDelete={props.appointmentDelete}\n      />\n      </Tab>\n\n      <Tab eventKey=\"Consultant\" title=\"Consultant\">\n      <Card.Text>\n        Consultants:\n      </Card.Text>\n      { patientConsultant !== null &&\n        (<PatientConsultantList\n          patientConsultant={patientConsultant}\n          authUserId={props.authUserId}\n          canDelete={props.canDelete}\n          onDelete={props.consultantDelete}\n          />)\n      }\n      </Tab>\n\n      <Tab eventKey=\"Insurance\" title=\"Insurance\">\n      <Card.Text>\n        Insurance:\n      </Card.Text>\n      <PatientInsuranceList\n        patientInsurance={patientInsurance}\n        authUserId={props.authUserId}\n        canDelete={props.canDelete}\n        onDelete={props.insuranceDelete}\n        />\n      </Tab>\n\n      <Tab eventKey=\"NextOfKin\" title=\"NextOfKin\">\n      <Card.Text>\n        NextOfKin:\n      </Card.Text>\n      <PatientNextOfKinList\n        patientNextOfKin={patientNextOfKin}\n        authUserId={props.authUserId}\n        canDelete={props.canDelete}\n        onDelete={props.nextOfKinDelete}\n        />\n      </Tab>\n\n      <Tab eventKey=\"Complaint\" title=\"Complaint\">\n      <Card.Text>\n        Complaint:\n      </Card.Text>\n      <PatientComplaintList\n        patientComplaint={patientComplaint}\n        authUserId={props.authUserId}\n        canDelete={props.canDelete}\n        onDelete={props.complaintDelete}\n        onViewAttachment={props.onViewAttachment}\n        />\n      </Tab>\n      <Tab eventKey=\"Survey\" title=\"Survey\">\n      <Card.Text>\n        Surveys:\n      </Card.Text>\n      <PatientSurveyList\n        patientSurvey={patientSurvey}\n        authUserId={props.authUserId}\n        canDelete={props.canDelete}\n        onDelete={props.surveyDelete}\n        onViewAttachment={props.onViewAttachment}\n        />\n      </Tab>\n      <Tab eventKey=\"Vitals\" title=\"Vitals\">\n      <Card.Text>\n        Vitals:\n      </Card.Text>\n      <PatientVitalsList\n        patientVitals={patientVitals}\n        authUserId={props.authUserId}\n        canDelete={props.canDelete}\n        onDelete={props.vitalsDelete}\n        />\n      </Tab>\n      <Tab eventKey=\"Examination\" title=\"Examination\">\n      <Card.Text>\n        Examination:\n      </Card.Text>\n      <PatientExaminationList\n        patientExamination={patientExamination}\n        authUserId={props.authUserId}\n        canDelete={props.canDelete}\n        onDelete={props.examinationDelete}\n        onViewAttachment={props.onViewAttachment}\n        />\n      </Tab>\n      <Tab eventKey=\"History\" title=\"History\">\n      <Card.Text>\n        History:\n      </Card.Text>\n      <PatientHistoryList\n        patientHistory={patientHistory}\n        authUserId={props.authUserId}\n        canDelete={props.canDelete}\n        onDelete={props.historyDelete}\n        onViewAttachment={props.onViewAttachment}\n        />\n      </Tab>\n      <Tab eventKey=\"Allergies\" title=\"Allergies\">\n      <Card.Text>\n        Allergies:\n      </Card.Text>\n      <PatientAllergiesList\n        patientAllergies={patientAllergies}\n        authUserId={props.authUserId}\n        canDelete={props.canDelete}\n        onDelete={props.allergiesDelete}\n        onViewAttachment={props.onViewAttachment}\n        />\n      </Tab>\n      <Tab eventKey=\"Medication\" title=\"Medication\">\n      <Card.Text>\n        Medication:\n      </Card.Text>\n      <PatientMedicationList\n        patientMedication={patientMedication}\n        authUserId={props.authUserId}\n        canDelete={props.canDelete}\n        onDelete={props.medicationDelete}\n        onViewAttachment={props.onViewAttachment}\n        />\n      </Tab>\n      <Tab eventKey=\"Investigation\" title=\"Investigation\">\n      <Card.Text>\n        Investigation:\n      </Card.Text>\n      <PatientInvestigationList\n        patientInvestigation={patientInvestigation}\n        authUserId={props.authUserId}\n        canDelete={props.canDelete}\n        onDelete={props.investigationDelete}\n        onViewAttachment={props.onViewAttachment}\n        />\n      </Tab>\n      <Tab eventKey=\"Diagnosis\" title=\"Diagnosis\">\n      <Card.Text>\n        Diagnosis:\n      </Card.Text>\n      <PatientDiagnosisList\n        patientDiagnosis={patientDiagnosis}\n        authUserId={props.authUserId}\n        canDelete={props.canDelete}\n        onDelete={props.diagnosisDelete}\n        onViewAttachment={props.onViewAttachment}\n        />\n      </Tab>\n      <Tab eventKey=\"Treatment\" title=\"Treatment\">\n      <Card.Text>\n        Treatment:\n      </Card.Text>\n      <PatientTreatmentList\n        patientTreatment={patientTreatment}\n        authUserId={props.authUserId}\n        canDelete={props.canDelete}\n        onDelete={props.treatmentDelete}\n        onViewAttachment={props.onViewAttachment}\n        />\n      </Tab>\n      <Tab eventKey=\"Billing\" title=\"Billing\">\n      <Card.Text>\n        Billing:\n      </Card.Text>\n      <PatientBillingList\n        patientBilling={patientBilling}\n        authUserId={props.authUserId}\n        canDelete={props.canDelete}\n        onDelete={props.billingDelete}\n        onViewAttachment={props.onViewAttachment}\n        />\n      </Tab>\n      <Tab eventKey=\"Attachments\" title=\"Attachments\">\n      <Card.Text>\n        Attachments:\n      </Card.Text>\n      <PatientAttachmentsList\n        patientAttachments={patientAttachments}\n        authUserId={props.authUserId}\n        canDelete={props.canDelete}\n        onDelete={props.attachmentDelete}\n        onViewAttachment={props.onViewAttachment}\n        />\n      </Tab>\n      <Tab eventKey=\"Notes\" title=\"Notes\">\n      <Card.Text>\n        Notes:\n      </Card.Text>\n      <PatientNotesList\n        patientNotes={patientNotes}\n        authUserId={props.authUserId}\n        canDelete={props.canDelete}\n        onDelete={props.noteDelete}\n        />\n      </Tab>\n      <Tab eventKey=\"Tags\" title=\"Tags\">\n      <Card.Text>\n        Tags:\n      </Card.Text>\n      <PatientTagsList\n        patientTags={patientTags}\n        authUserId={props.authUserId}\n        canDelete={props.canDelete}\n        onDelete={props.tagDelete}\n        />\n      </Tab>\n      <Tab eventKey=\"Visit\" title=\"Visit\">\n      <Card.Text>\n      </Card.Text>\n      <SearchPatientVisitForm\n            authUserId={props.authUserId}\n              canConfirm\n              onGetVisit={props.onGetVisit}\n              confirmText=\"Search\"\n              patient={props.patient}\n            />\n      {  props.visit !== null && (\n        <PatientVisit\n          authUserId={props.authUserId}\n          visit={props.visit}\n          onViewAttachment={props.onViewAttachment}\n          />\n        )}\n      </Tab>\n    </Tabs>\n  </div>\n  );\n}\n\nexport default PatientDetail;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\n\n\nimport './UserItem.css';\n\nconst searchPatientItem = props => (\n  <li key={props.patientId} className=\"users__list-item_master\">\n  <div>\n    <h5 className=\"userItemHeading\"> Name:</h5>\n    <p className=\"userItemText\">\n      {props.name}\n    </p>\n    <h5 className=\"userItemHeading\"> Address:</h5>\n    <p className=\"userItemText\">\n      {props.addressParish}\n    </p>\n    <p className=\"userItemText\">\n      {props.addressTown}\n    </p>\n  </div>\n  <div>\n  <Button variant=\"primary\" onClick={props.onDetail.bind(this, props._id)}>\n        Details\n      </Button>\n  </div>\n  </li>\n);\n\nexport default searchPatientItem;\n","import React from 'react';\n\nimport SearchPatientItem from './PatientItem/SearchPatientItem';\nimport './UserList.css';\n\nconst searchPatientList = props => {\n  const searchPatients = props.searchPatients.map(patient => {\n    return (\n      <React.Fragment>\n      <SearchPatientItem\n        key={patient._id}\n        userId={props.authUserId}\n        _id={patient._id}\n        name={patient.name}\n        addressParish={patient.address.parish}\n        addressTown={patient.address.town}\n        onDetail={props.onViewDetail}\n      />\n      </React.Fragment>\n    );\n  });\n\n  return <ul className=\"user__list1_master\">{searchPatients}</ul>;\n};\n\nexport default searchPatientList;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\n// import AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst SearchPatientForm = (props) => {\n// const {...search} = props.search;\n\nreturn (\n<div className=\"SearchFormContainer\">\n  <Form onSubmit={props.onConfirm}>\n  <Form.Group controlId=\"formBasicFieldSelect\">\n  <Form.Label>Field</Form.Label>\n  <Form.Control as=\"select\">\n  <option>select</option>\n  <option>name</option>\n  <option>dob</option>\n  <option>age</option>\n  <option>gender</option>\n  <option>address.town</option>\n  <option>address.parish</option>\n  <option>registrationDate</option>\n  <option>referralDate</option>\n  <option>expirationDate</option>\n  <option>attendingPhysician.name</option>\n  <option>referringDoctor.name</option>\n  </Form.Control>\n  </Form.Group>\n\n  <Form.Group controlId=\"formBasicField\">\n  <Form.Label>Field</Form.Label>\n  <Form.Control type=\"text\" placeholder=\"Field\"/>\n  </Form.Group>\n\n<Form.Group controlId=\"formBasicQuery\">\n<Form.Label>Query</Form.Label>\n<Form.Control type=\"textarea\" rows=\"5\" placeholder=\"Query\"/>\n</Form.Group>\n\n{props.canCancel && (\n  <Button variant=\"danger\" onClick={props.onCancel}>Cancel</Button>\n)}\n\n{props.canConfirm && (\n  <Button variant=\"success\" type=\"submit\">Search</Button>\n)}\n\n</Form>\n</div>\n\n\n)};\n\nexport default SearchPatientForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\n// import AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst SearchPatientIdForm = (props) => {\n// const {...search} = props.search;\n\nreturn (\n<div className=\"SearchFormContainer\">\n  <Form onSubmit={props.onConfirm}>\n  <Form.Group controlId=\"formBasicId\">\n  <Form.Label>Patient Id</Form.Label>\n  <Form.Control type=\"text\" placeholder=\"Id\"/>\n  </Form.Group>\n\n  {props.canCancel && (\n    <Button variant=\"danger\" onClick={props.onCancel}>Cancel</Button>\n  )}\n\n  {props.canConfirm && (\n    <Button variant=\"success\" type=\"submit\">Search</Button>\n  )}\n\n</Form>\n</div>\n\n\n)};\n\nexport default SearchPatientIdForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\n// import AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst SearchPatientNameForm = (props) => {\n// const {...search} = props.search;\n\nreturn (\n<div className=\"SearchFormContainer\">\n  <Form onSubmit={props.onConfirm}>\n\n  <Form.Group controlId=\"formBasicName\">\n  <Form.Label>Name</Form.Label>\n  <Form.Control type=\"text\" placeholder=\"Name\"/>\n  </Form.Group>\n\n{props.canCancel && (\n  <Button variant=\"danger\" onClick={props.onCancel}>Cancel</Button>\n)}\n\n{props.canConfirm && (\n  <Button variant=\"success\" type=\"submit\">Search</Button>\n)}\n\n</Form>\n</div>\n\n\n)};\n\nexport default SearchPatientNameForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Accordion from 'react-bootstrap/Accordion'\n// import FormCheck from 'react-bootstrap/FormCheck'\n// import { NavLink } from 'react-router-dom';\n// import AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst CreatePatientForm = (props) => {\n\n  // console.log({...props});\n  // console.log(\"CreatePatientForm:  \", AuthContext.token);\n\nreturn (\n<div className=\"CreateFormContainer\">\n<Form onSubmit={props.onConfirm}>\n<Form.Row>\n  <Form.Group as={Col} controlId=\"formGridTitle\">\n    <Form.Label>Title</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"Patient Title\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridName\">\n    <Form.Label>Name</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"Patient Name\"/>\n  </Form.Group>\n\n<Form.Group as={Col} controlId=\"formGridDob\">\n  <Form.Label>D.O.B</Form.Label>\n  <Form.Control type=\"date\" placeholder=\"Date of Birth\"/>\n</Form.Group>\n<Form.Group as={Col} controlId=\"formGridAge\">\n  <Form.Label>Age</Form.Label>\n  <Form.Control type=\"number\" placeholder=\"Age\"/>\n</Form.Group>\n<Form.Group as={Col} controlId=\"formGridGender\">\n  <Form.Label>Gender</Form.Label>\n  <Form.Control as=\"select\">\n    <option>Male</option>\n    <option>Female</option>\n  </Form.Control>\n</Form.Group>\n</Form.Row>\n\n<Form.Row>\n<Form.Group as={Col} controlId=\"formGridContactEmail\">\n  <Form.Label>Email</Form.Label>\n  <Form.Control type=\"email\" placeholder=\"Patient Email\"/>\n</Form.Group>\n\n<Form.Group as={Col} controlId=\"formGridContactPhone\">\n  <Form.Label>Phone</Form.Label>\n  <Form.Control type=\"number\" placeholder=\"Address Phone\"/>\n</Form.Group>\n</Form.Row>\n\n<Form.Row>\n<Form.Group as={Col} controlId=\"formGridAddressNumber\">\n  <Form.Label>Street No.</Form.Label>\n  <Form.Control type=\"number\" placeholder=\"Address Street No.\"/>\n</Form.Group>\n<Form.Group as={Col} controlId=\"formGridAddressStreet\">\n  <Form.Label>Street Name</Form.Label>\n  <Form.Control type=\"text\" placeholder=\"Address Street Name\"/>\n</Form.Group>\n<Form.Group as={Col} controlId=\"formGridAddressTown\">\n  <Form.Label>Town</Form.Label>\n  <Form.Control type=\"text\" placeholder=\"Address Town\"/>\n</Form.Group>\n<Form.Group as={Col} controlId=\"formGridAddressParish\">\n  <Form.Label>Parish</Form.Label>\n  <Form.Control type=\"text\" placeholder=\"Address Parish\"/>\n</Form.Group>\n<Form.Group as={Col} controlId=\"formGridAddressPostOffice\">\n  <Form.Label>Post Office</Form.Label>\n  <Form.Control type=\"text\" placeholder=\"Address PostOffice\"/>\n</Form.Group>\n</Form.Row>\n\n<Form.Row>\n<Form.Group as={Col} controlId=\"formGridRegistrationDate\">\n  <Form.Label>Registration Date</Form.Label>\n  <Form.Control type=\"date\" placeholder=\"Registration Date\"/>\n</Form.Group>\n<Form.Group as={Col} controlId=\"formGridRegistrationDateTodayCheckbox\">\n  <Form.Label>Today's Date?</Form.Label>\n  <Form.Control type=\"checkbox\" onChange={(e) => {console.log(e.target.checked)}}/>\n</Form.Group>\n\n<Form.Group as={Col} controlId=\"formGridReferralDate\">\n  <Form.Label>Referral Date</Form.Label>\n  <Form.Control type=\"date\" placeholder=\"Referral Date\"/>\n</Form.Group>\n<Form.Group as={Col} controlId=\"formGridReferralDateTodayCheckbox\">\n  <Form.Label>Today's Date?</Form.Label>\n  <Form.Control type=\"checkbox\" onChange={(e) => {console.log(e.target.checked)}}/>\n</Form.Group>\n\n<Form.Group as={Col} controlId=\"formGridExpirationDate\">\n  <Form.Label>Expiration Date</Form.Label>\n  <Form.Control type=\"date\" placeholder=\"Expiration Date\"/>\n</Form.Group>\n</Form.Row>\n\n<Form.Row>\n<Form.Group as={Col} controlId=\"formGridReferringDoctorName\">\n  <Form.Label>Referring Doctor: Name</Form.Label>\n  <Form.Control type=\"text\" placeholder='Ref Doctor Name' />\n</Form.Group>\n<Form.Group as={Col} controlId=\"formGridReferringDoctorEmail\">\n  <Form.Label>Referring Doctor: Email</Form.Label>\n  <Form.Control type=\"email\" placeholder='Ref Doctor Email'/>\n</Form.Group>\n<Form.Group as={Col} controlId=\"formGridReferringDoctorPhone\">\n  <Form.Label>Referring Doctor: Phone</Form.Label>\n  <Form.Control type=\"number\" placeholder=\"Ref Doctor Phone\"/>\n</Form.Group>\n</Form.Row>\n\n<Form.Row>\n<Form.Group as={Col} controlId=\"formGridAttendingPhysicianName\">\n  <Form.Label>Attending Physician: Name</Form.Label>\n  <Form.Control type=\"text\" placeholder='Attending Physician Name' />\n</Form.Group>\n<Form.Group as={Col} controlId=\"formGridAttendingPhysicianEmail\">\n  <Form.Label>Attending Physician: Email</Form.Label>\n  <Form.Control type=\"email\" placeholder='Attending Physician Email'/>\n</Form.Group>\n<Form.Group as={Col} controlId=\"formGridAttendingPhysicianPhone\">\n  <Form.Label>Attending Physician: Phone</Form.Label>\n  <Form.Control type=\"number\" placeholder=\"Attending Physician Phone\"/>\n</Form.Group>\n</Form.Row>\n\n<Form.Row>\n<Form.Group as={Col} controlId=\"formGridOccupationRole\">\n  <Form.Label>Job Role</Form.Label>\n  <Form.Control type=\"text\" placeholder=\"Job Role\"/>\n</Form.Group>\n<Form.Group as={Col} controlId=\"formGridOccupationEmployer\">\n  <Form.Label>Employer</Form.Label>\n  <Form.Control type=\"text\" placeholder=\"Employer Name\"/>\n</Form.Group>\n<Form.Group as={Col} controlId=\"formGridOccupationEmployerContactPhone\">\n  <Form.Label>Employer: Phone</Form.Label>\n  <Form.Control type=\"number\" placeholder=\"Employer Phone\"/>\n</Form.Group>\n</Form.Row>\n<Form.Row>\n<Form.Group as={Col} controlId=\"formGridOccupationEmployerContactEmail\">\n  <Form.Label>Employer: Email</Form.Label>\n  <Form.Control type=\"email\" placeholder=\"Employer Email\" />\n</Form.Group>\n</Form.Row>\n\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"2\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n\n{props.canConfirm && (\n    <Button variant=\"success\" type=\"submit\">Create New</Button>\n)}\n\n</Form>\n{\n  // <AuthContext.Consumer>\n// </AuthContext.Consumer>\n}\n</div>\n\n)};\n\nexport default CreatePatientForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\n// import FormCheck from 'react-bootstrap/FormCheck'\n// import AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst UpdatePatientForm = (props) => {\n\nconsole.log(\"UpdatePatientForm.props:  \", {...props});\nconst {...patient} = props.patient;\nconsole.log(\"UpdatePatientForm.props.patient:  \", {...patient});\n\n\nreturn (\n  <div className=\"UpdateFormContainer\">\n  <Form onSubmit={props.onConfirm}>\n  <Form.Row>\n    <Form.Group as={Col} controlId=\"formGridTitle\">\n      <Form.Label>Title</Form.Label>\n      <Form.Control type=\"text\" placeholder={patient.title}/>\n    </Form.Group>\n    <Form.Group as={Col} controlId=\"formGridName\">\n      <Form.Label>Name</Form.Label>\n      <Form.Control type=\"text\" placeholder={patient.name}/>\n    </Form.Group>\n\n  <Form.Group as={Col} controlId=\"formGridDob\">\n    <Form.Label>D.O.B</Form.Label>\n    <Form.Control type=\"date\" placeholder={patient.dob}/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridAge\">\n    <Form.Label>Age</Form.Label>\n    <Form.Control type=\"number\" placeholder={patient.age}/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridGender\">\n    <Form.Label>Gender</Form.Label>\n    <Form.Control as=\"select\">\n      <option>Male</option>\n      <option>Female</option>\n    </Form.Control>\n  </Form.Group>\n  </Form.Row>\n\n  <Form.Row>\n  <Form.Group as={Col} controlId=\"formGridContactEmail\">\n    <Form.Label>Email</Form.Label>\n    <Form.Control type=\"email\" placeholder={patient.contact.email}/>\n  </Form.Group>\n\n  <Form.Group as={Col} controlId=\"formGridContactPhone\">\n    <Form.Label>Phone</Form.Label>\n    <Form.Control type=\"number\" placeholder={patient.contact.phone}/>\n  </Form.Group>\n  </Form.Row>\n\n  <Form.Row>\n  <Form.Group as={Col} controlId=\"formGridAddressNumber\">\n    <Form.Label>Street No.</Form.Label>\n    <Form.Control type=\"number\" placeholder={patient.address.number}/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridAddressStreet\">\n    <Form.Label>Street Name</Form.Label>\n    <Form.Control type=\"text\" placeholder={patient.address.street}/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridAddressTown\">\n    <Form.Label>Town</Form.Label>\n    <Form.Control type=\"text\" placeholder={patient.address.town}/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridAddressParish\">\n    <Form.Label>Parish</Form.Label>\n    <Form.Control type=\"text\" placeholder={patient.address.parish}/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridAddressPostOffice\">\n    <Form.Label>Post Office</Form.Label>\n    <Form.Control type=\"text\" placeholder={patient.address.postOffice}/>\n  </Form.Group>\n  </Form.Row>\n\n  <Form.Row>\n  <Form.Group as={Col} controlId=\"formGridRegistrationDate\">\n    <Form.Label>Registration Date</Form.Label>\n    <Form.Control type=\"date\" placeholder={patient.registrationDate}/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridRegistrationDateTodayCheckbox\">\n    <Form.Label>Today's Date?</Form.Label>\n    <Form.Control type=\"checkbox\" onChange={(e) => {console.log(e.target.checked)}}/>\n  </Form.Group>\n\n  <Form.Group as={Col} controlId=\"formGridReferralDate\">\n    <Form.Label>Referral Date</Form.Label>\n    <Form.Control type=\"date\" placeholder={patient.referralDate}/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridReferralDateTodayCheckbox\">\n    <Form.Label>Today's Date?</Form.Label>\n    <Form.Control type=\"checkbox\" onChange={(e) => {console.log(e.target.checked)}}/>\n  </Form.Group>\n\n  <Form.Group as={Col} controlId=\"formGridExpirationDate\">\n    <Form.Label>Expiration Date</Form.Label>\n    <Form.Control type=\"date\" placeholder={patient.expirationDate}/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridExpirationDateTodayCheckbox\">\n    <Form.Label>Today's Date?</Form.Label>\n    <Form.Control type=\"checkbox\" onChange={(e) => {console.log(e.target.checked)}}/>\n  </Form.Group>\n  </Form.Row>\n\n  <Form.Row>\n  <Form.Group as={Col} controlId=\"formGridReferringDoctorName\">\n    <Form.Label>Referring Doctor: Name</Form.Label>\n    <Form.Control type=\"text\" placeholder={patient.referringDoctor.name}/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridReferringDoctorEmail\">\n    <Form.Label>Referring Doctor: Email</Form.Label>\n    <Form.Control type=\"email\" placeholder={patient.referringDoctor.email}/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridReferringDoctorPhone\">\n    <Form.Label>Referring Doctor: Phone</Form.Label>\n    <Form.Control type=\"number\" placeholder={patient.referringDoctor.phone}/>\n  </Form.Group>\n  </Form.Row>\n\n  <Form.Row>\n  <Form.Group as={Col} controlId=\"formGridAttendingPhysicianName\">\n    <Form.Label>Attending Physician: Name</Form.Label>\n    <Form.Control type=\"text\" placeholder={patient.attendingPhysician.name}/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridAttendingPhysicianEmail\">\n    <Form.Label>Attending Physician: Email</Form.Label>\n    <Form.Control type=\"email\" placeholder={patient.attendingPhysician.email}/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridAttendingPhysicianPhone\">\n    <Form.Label>Attending Physician: Phone</Form.Label>\n    <Form.Control type=\"number\" placeholder={patient.attendingPhysician.phone}/>\n  </Form.Group>\n  </Form.Row>\n\n  <Form.Row>\n  <Form.Group as={Col} controlId=\"formGridOccupationRole\">\n    <Form.Label>Job Role</Form.Label>\n    <Form.Control type=\"text\" placeholder={patient.occupation.role}/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridOccupationEmployer\">\n    <Form.Label>Employer</Form.Label>\n    <Form.Control type=\"text\" placeholder={patient.occupation.employer}/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridOccupationEmployerContactPhone\">\n    <Form.Label>Employer: Phone</Form.Label>\n    <Form.Control type=\"number\" placeholder={patient.occupation.contact.phone}/>\n  </Form.Group>\n  </Form.Row>\n  <Form.Row>\n  <Form.Group as={Col} controlId=\"formGridOccupationEmployerContactEmail\">\n    <Form.Label>Employer: Email</Form.Label>\n    <Form.Control type=\"email\" placeholder={patient.occupation.contact.email}/>\n  </Form.Group>\n  </Form.Row>\n\n\n  {props.canCancel && (\n    <Button variant=\"danger\" onClick={props.onCancel}>Cancel</Button>\n  )}\n\n  {props.canConfirm && (\n    <Button variant=\"success\" type=\"submit\">Edit Patient</Button>\n  )}\n\n  </Form>\n  {\n    // <AuthContext.Consumer>\n  // </AuthContext.Consumer>\n  }\n  </div>\n)};\n\nexport default UpdatePatientForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\n// import FormCheck from 'react-bootstrap/FormCheck'\n// import AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst UpdatePatientFieldForm = (props) => {\n\nconsole.log(\"UpdatePatientFieldForm.props:  \", {...props});\nconst {...patient} = props.patient;\nconsole.log(\"UpdatePatientFieldForm.props.user:  \", {...patient});\n\nreturn (\n<div className=\"UpdateFormContainer\">\n<Form onSubmit={props.onConfirm}>\n<Form.Row>\n<Form.Group as={Col} controlId=\"formGridFieldSelect\">\n<Form.Label>Field Options</Form.Label>\n<Form.Control as=\"select\">\n<option>select</option>\n<option>name</option>\n<option>dob</option>\n<option>age</option>\n<option>gender</option>\n<option>address.town</option>\n<option>address.parish</option>\n<option>registrationDate</option>\n<option>referralDate</option>\n<option>expirationDate</option>\n<option>attendingPhysician.name</option>\n<option>referringDoctor.name</option>\n</Form.Control>\n</Form.Group>\n  <Form.Group as={Col} controlId=\"formGridField\">\n    <Form.Label>Field</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"Field\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridQuery\">\n    <Form.Label>Query</Form.Label>\n    <Form.Label>Date Format YYYY-MM-DD</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"Query\"/>\n  </Form.Group>\n</Form.Row>\n\n\n{props.canCancel && (\n  <Button variant=\"danger\" onClick={props.onCancel}>Cancel</Button>\n)}\n\n{props.canConfirm && (\n  <Button variant=\"success\" type=\"submit\">Edit Patient Field</Button>\n)}\n\n</Form>\n</div>\n\n)};\n\nexport default UpdatePatientFieldForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Accordion from 'react-bootstrap/Accordion'\n// import FormCheck from 'react-bootstrap/FormCheck'\n// import AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst UpdatePatientConsultantForm = (props) => {\n\nconsole.log(\"UpdatePatientConsultantForm.props:  \", {...props});\nconst {...patient} = props.patient;\nconsole.log(\"UpdatePatientConsultantForm.props.patient:  \", {...patient});\n\n\nreturn (\n<div className=\"UpdateFormContainer\">\n<Form onSubmit={props.onConfirm}>\n<Form.Row>\n  <Form.Group as={Col} controlId=\"formGridConsultantDate\">\n    <Form.Label>Consultation Date</Form.Label>\n    <Form.Control type=\"date\" placeholder=\"ConsultantDate\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridConsultantDateTodayCheckbox\">\n    <Form.Label>Today's Date?</Form.Label>\n    <Form.Control type=\"checkbox\" onChange={(e) => {console.log(e.target.checked)}}/>\n  </Form.Group>\n\n  </Form.Row>\n\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"9\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n\n{props.canConfirm && (\n  <Accordion.Toggle as={Button} variant=\"success\" eventKey=\"9\" className=\"btn\" type=\"submit\">\n  Submit\n  </Accordion.Toggle>\n)}\n\n</Form>\n{\n  // <AuthContext.Consumer>\n// </AuthContext.Consumer>\n}\n</div>\n\n)};\n\nexport default UpdatePatientConsultantForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Accordion from 'react-bootstrap/Accordion'\n// import FormCheck from 'react-bootstrap/FormCheck'\n// import AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst UpdatePatientInsuranceForm = (props) => {\n\nconsole.log(\"UpdatePatientInsuranceForm.props:  \", {...props});\nconst {...patient} = props.patient;\nconsole.log(\"UpdatePatientInsuranceForm.props.patient:  \", {...patient});\n\n\nreturn (\n<div className=\"UpdateFormContainer\">\n<Form onSubmit={props.onConfirm}>\n<Form.Row>\n  <Form.Group as={Col} controlId=\"formGridInsuranceCompany\">\n    <Form.Label>Company</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"insuranceCompany\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridInsuranceNumber\">\n    <Form.Label>Number</Form.Label>\n    <Form.Control type=\"number\" placeholder=\"insuranceNumber\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridInsuranceDescription\">\n    <Form.Label>Description</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"insuranceDescription\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridInsuranceExpiry\">\n    <Form.Label>Expiry</Form.Label>\n    <Form.Control type=\"date\" placeholder=\"insuranceExpiry\"/>\n  </Form.Group>\n\n</Form.Row>\n\n<Form.Row>\n\n<Form.Group as={Col} controlId=\"formGridInsuranceSubscriberCompany\">\n  <Form.Label>Subscriber Company</Form.Label>\n  <Form.Control type=\"text\" placeholder=\"insuranceSubscriberCompany\"/>\n</Form.Group>\n<Form.Group as={Col} controlId=\"formGridInsuranceSubscriberDescription\">\n  <Form.Label>Description</Form.Label>\n  <Form.Control tas=\"textarea\" rows=\"3\" placeholder=\"insuranceSubscriberDescription\"/>\n</Form.Group>\n\n</Form.Row>\n\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"9\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n\n{props.canConfirm && (\n  <Accordion.Toggle as={Button} variant=\"success\" eventKey=\"9\" className=\"btn\" type=\"submit\">\n  Submit\n  </Accordion.Toggle>\n)}\n\n</Form>\n{\n  // <AuthContext.Consumer>\n// </AuthContext.Consumer>\n}\n</div>\n\n)};\n\nexport default UpdatePatientInsuranceForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Accordion from 'react-bootstrap/Accordion'\n// import FormCheck from 'react-bootstrap/FormCheck'\n// import AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst UpdatePatientNextOfKinForm = (props) => {\n\nconsole.log(\"UpdatePatientNextOfKinForm.props:  \", {...props});\nconst {...patient} = props.patient;\nconsole.log(\"UpdatePatientNextOfKinForm.props.patient:  \", {...patient});\n\n\nreturn (\n<div className=\"UpdateFormContainer\">\n<Form onSubmit={props.onConfirm}>\n<Form.Row>\n  <Form.Group as={Col} controlId=\"formGridNextOfKinName\">\n    <Form.Label>Name</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"NextOfKinName\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridNextOfKinPhone\">\n    <Form.Label>Phone</Form.Label>\n    <Form.Control type=\"number\" placeholder=\"NextOfKinPhone\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridNextOfKinEmail\">\n    <Form.Label>Email</Form.Label>\n    <Form.Control type=\"email\" placeholder=\"NextOfKinEmail\"/>\n  </Form.Group>\n\n</Form.Row>\n\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"9\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n\n{props.canConfirm && (\n  <Accordion.Toggle as={Button} variant=\"success\" eventKey=\"9\" className=\"btn\" type=\"submit\">\n  Submit\n  </Accordion.Toggle>\n)}\n\n</Form>\n{\n  // <AuthContext.Consumer>\n// </AuthContext.Consumer>\n}\n</div>\n\n)};\n\nexport default UpdatePatientNextOfKinForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Accordion from 'react-bootstrap/Accordion'\n// import FormCheck from 'react-bootstrap/FormCheck'\nimport AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst UpdatePatientComplaintForm = (props) => {\n\nconsole.log(\"UpdatePatientComplaintForm.props:  \", {...props});\nconst {...patient} = props.patient;\nconsole.log(\"UpdatePatientComplaintForm.props.patient:  \", {...patient});\n\n\nreturn (\n<div className=\"UpdateFormContainer\">\n<Form onSubmit={props.onConfirm}>\n<Form.Row>\n  <Form.Group as={Col} controlId=\"formGridComplaintDate\">\n    <Form.Label>Date</Form.Label>\n    <Form.Control type=\"date\" placeholder=\"ComplaintDate\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridComplaintDateTodayCheckbox\">\n    <Form.Label>Today's Date?</Form.Label>\n    <Form.Control type=\"checkbox\" onChange={(e) => {console.log(e.target.checked)}}/>\n  </Form.Group>\n\n  <Form.Group as={Col} controlId=\"formGridComplaintTitle\">\n    <Form.Label>Title</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"ComplaintTitle\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridComplaintDescription\">\n    <Form.Label>Description</Form.Label>\n    <Form.Control as=\"textarea\" rows=\"3\" placeholder=\"ComplaintDescription\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridComplaintAnamnesis\">\n    <Form.Label>Anamnesis</Form.Label>\n    <Form.Control as=\"textarea\" rows=\"3\" placeholder=\"ComplaintAnamnesis\"/>\n  </Form.Group>\n\n  </Form.Row>\n\n  <Form.Row>\n\n  <Form.Group as={Col} controlId=\"formGridComplaintAttachmentFormat\">\n    <Form.Label>Attachment Format</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"complaintAttachmentFormat\"/>\n  </Form.Group>\n  {\n  //   <Form.Group as={Col} controlId=\"formGridComplaintAttachmentPath\">\n  //   <Form.Label>Attachment Path</Form.Label>\n  //   <Form.Control type=\"text\" placeholder=\"complaintAttachmentPath\"/>\n  // </Form.Group>\n}\n  <Form.Group as={Col} controlId=\"formGridComplaintAttachmentFile\">\n    <Form.Label>File</Form.Label>\n    <Form.Control type=\"file\" placeholder=\"File\" onChange={(e) => {console.log(e.target.files[0]);AuthContext._currentValue.file = e.target.files[0];console.log(AuthContext._currentValue.file);}}/>\n  </Form.Group>\n  </Form.Row>\n\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"9\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n\n{props.canConfirm && (\n  <Accordion.Toggle as={Button} variant=\"success\" eventKey=\"9\" className=\"btn\" type=\"submit\">\n  Submit\n  </Accordion.Toggle>\n)}\n\n</Form>\n{\n  // <Form.Group as={Col} controlId=\"formGridComplaintAttachmentName\">\n  //   <Form.Label>ComplaintAttachmentName</Form.Label>\n  //   <Form.Control type=\"text\" placeholder=\"complaintAttachmentName\"/>\n  // </Form.Group>\n  // <AuthContext.Consumer>\n// </AuthContext.Consumer>\n}\n</div>\n\n)};\n\nexport default UpdatePatientComplaintForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Accordion from 'react-bootstrap/Accordion'\n// import FormCheck from 'react-bootstrap/FormCheck'\nimport AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst UpdatePatientSurveyForm = (props) => {\n\nconsole.log(\"UpdatePatientSurveyForm.props:  \", {...props});\nconst {...patient} = props.patient;\nconsole.log(\"UpdatePatientSurveyForm.props.patient:  \", {...patient});\n\n\nreturn (\n<div className=\"UpdateFormContainer\">\n<Form onSubmit={props.onConfirm}>\n<Form.Row>\n  <Form.Group as={Col} controlId=\"formGridSurveyDate\">\n    <Form.Label>Date</Form.Label>\n    <Form.Control type=\"date\" placeholder=\"SurveyDate\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridSurveyDateTodayCheckbox\">\n    <Form.Label>Today's Date?</Form.Label>\n    <Form.Control type=\"checkbox\" onChange={(e) => {console.log(e.target.checked)}}/>\n  </Form.Group>\n\n  <Form.Group as={Col} controlId=\"formGridSurveyTitle\">\n    <Form.Label>Title</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"SurveyTitle\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridSurveyDescription\">\n    <Form.Label>Description</Form.Label>\n    <Form.Control as=\"textarea\" rows=\"3\" placeholder=\"SurveyDescription\"/>\n  </Form.Group>\n  </Form.Row>\n\n  <Form.Row>\n\n  <Form.Group as={Col} controlId=\"formGridSurveyAttachmentFormat\">\n    <Form.Label>Attachment Format</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"SurveyAttachmentFormat\"/>\n  </Form.Group>\n  {\n  //   <Form.Group as={Col} controlId=\"formGridAttachmentPath\">\n  //   <Form.Label>Path</Form.Label>\n  //   <Form.Control type=\"string\" placeholder=\"File path\"/>\n  // </Form.Group>\n}\n  <Form.Group as={Col} controlId=\"formGridSurveyAttachmentFile\">\n    <Form.Label>File</Form.Label>\n    <Form.Control type=\"file\" placeholder=\"File\" onChange={(e) => {console.log(e.target.files[0]);AuthContext._currentValue.file = e.target.files[0];console.log(AuthContext._currentValue.file);}}/>\n  </Form.Group>\n  </Form.Row>\n\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"9\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n\n{props.canConfirm && (\n  <Accordion.Toggle as={Button} variant=\"success\" eventKey=\"9\" className=\"btn\" type=\"submit\">\n  Submit\n  </Accordion.Toggle>\n)}\n\n</Form>\n{\n  // <Form.Group as={Col} controlId=\"formGridSurveyAttachmentName\">\n  //   <Form.Label>SurveyAttachmentName</Form.Label>\n  //   <Form.Control type=\"text\" placeholder=\"SurveyAttachmentName\"/>\n  // </Form.Group>\n  // <AuthContext.Consumer>\n// </AuthContext.Consumer>\n}\n</div>\n\n)};\n\nexport default UpdatePatientSurveyForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Accordion from 'react-bootstrap/Accordion';\n// import FormCheck from 'react-bootstrap/FormCheck'\n// import AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst UpdatePatientVitalsForm = (props) => {\n\nconsole.log(\"UpdatePatientVitalsForm.props:  \", {...props});\nconst {...patient} = props.patient;\nconsole.log(\"UpdatePatientVitalsForm.props.patient:  \", {...patient});\n\n\nreturn (\n<div className=\"UpdateFormContainer\">\n<Form onSubmit={props.onConfirm}>\n<Form.Row>\n  <Form.Group as={Col} controlId=\"formGridVitalsDate\">\n    <Form.Label>Date</Form.Label>\n    <Form.Control type=\"date\" placeholder=\"VitalsDate\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridVitalsDateTodayCheckbox\">\n    <Form.Label>Today's Date?</Form.Label>\n    <Form.Control type=\"checkbox\" onChange={(e) => {console.log(e.target.checked)}}/>\n  </Form.Group>\n\n  <Form.Group as={Col} controlId=\"formGridVitalsPr\">\n    <Form.Label>Pulse rate (unit)</Form.Label>\n    <Form.Control type=\"number\" placeholder=\"VitalsPr\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridVitalsBp1\">\n    <Form.Label>Blood pressure 1 </Form.Label>\n    <Form.Control type=\"number\" placeholder=\"VitalsBp1\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridVitalsBp2\">\n    <Form.Label>Blood pressure 2</Form.Label>\n    <Form.Control type=\"number\" placeholder=\"VitalsBp2\"/>\n  </Form.Group>\n</Form.Row>\n\n<Form.Row>\n<Form.Group as={Col} controlId=\"formGridVitalsRr\">\n  <Form.Label>Respiratory rate (unit)</Form.Label>\n  <Form.Control type=\"number\" placeholder=\"VitalsRr\"/>\n</Form.Group>\n<Form.Group as={Col} controlId=\"formGridVitalsTemp\">\n  <Form.Label>Temperature (unit) </Form.Label>\n  <Form.Control type=\"number\" placeholder=\"VitalsTemp\"/>\n</Form.Group>\n<Form.Group as={Col} controlId=\"formGridVitalsPs02\">\n  <Form.Label>02 saturation (unit)</Form.Label>\n  <Form.Control type=\"number\" placeholder=\"VitalsPs02\"/>\n</Form.Group>\n</Form.Row>\n\n<Form.Row>\n  <Form.Group as={Col} controlId=\"formGridVitalsHeight\">\n    <Form.Label>Height (unit)</Form.Label>\n    <Form.Control type=\"number\" placeholder=\"VitalsHeight\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridVitalsWeight\">\n    <Form.Label>Weight (unit)</Form.Label>\n    <Form.Control type=\"number\" placeholder=\"VitalsWeight\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridVitalsBmi\">\n    <Form.Label>Bmi</Form.Label>\n    <Form.Control type=\"number\" placeholder=\"VitalsBmi\"/>\n  </Form.Group>\n</Form.Row>\n\n<Form.Row>\n<Form.Group as={Col} controlId=\"formGridVitalsUrineType\">\n  <Form.Label>Urine type</Form.Label>\n  <Form.Control type=\"text\" placeholder=\"VitalsUrineType\"/>\n</Form.Group>\n<Form.Group as={Col} controlId=\"formGridVitalsUrineValue\">\n  <Form.Label>Urine value</Form.Label>\n  <Form.Control type=\"text\" placeholder=\"VitalsUrineValue\"/>\n</Form.Group>\n</Form.Row>\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"9\" className=\"btn\">\n  Cancel\n  </Accordion.Toggle>\n)\n// <Button variant=\"danger\" onClick={props.onCancel}>\n// Cancel\n// </Button>\n}\n\n{props.canConfirm && (\n  <Accordion.Toggle as={Button} variant=\"success\" eventKey=\"9\" className=\"btn\" type=\"submit\">\n  Submit\n  </Accordion.Toggle>\n)}\n\n</Form>\n{\n  // <AuthContext.Consumer>\n// </AuthContext.Consumer>\n}\n</div>\n\n)};\n\nexport default UpdatePatientVitalsForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Accordion from 'react-bootstrap/Accordion'\n// import FormCheck from 'react-bootstrap/FormCheck'\nimport AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst UpdatePatientExaminationForm = (props) => {\n\nconsole.log(\"UpdatePatientExaminationForm.props:  \", {...props});\nconst {...patient} = props.patient;\nconsole.log(\"UpdatePatientExaminationForm.props.patient:  \", {...patient});\n\n\nreturn (\n<div className=\"UpdateFormContainer\">\n<Form onSubmit={props.onConfirm}>\n<Form.Row>\n  <Form.Group as={Col} controlId=\"formGridExaminationDate\">\n    <Form.Label>Date</Form.Label>\n    <Form.Control type=\"date\" placeholder=\"ExaminationDate\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridExaminationDateTodayCheckbox\">\n    <Form.Label>Today's Date?</Form.Label>\n    <Form.Control type=\"checkbox\" onChange={(e) => {console.log(e.target.checked)}}/>\n  </Form.Group>\n\n  <Form.Group as={Col} controlId=\"formGridExaminationAreaSelect\">\n    <Form.Label>Area Options</Form.Label>\n    <Form.Control as=\"select\">\n    <option>select</option>\n    <option>nose</option>\n    <option>fauces</option>\n    <option>ears</option>\n    <option>larynx</option>\n    <option>neck</option>\n    <option>chest</option>\n    <option>cvs</option>\n    <option>abdomen</option>\n    </Form.Control>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridExaminationArea\">\n    <Form.Label>Area</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"ExaminationArea\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridExaminationGeneral\">\n    <Form.Label>General</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"ExaminationGeneral\"/>\n  </Form.Group>\n  </Form.Row>\n\n  <Form.Row>\n  <Form.Group as={Col} controlId=\"formGridExaminationType\">\n    <Form.Label>Type</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"ExaminationType\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridExaminationMeasure\">\n    <Form.Label>Measure</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"ExaminationMeasure\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridExaminationValue\">\n    <Form.Label>Value</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"ExaminationValue\"/>\n  </Form.Group>\n  </Form.Row>\n\n  <Form.Row>\n  <Form.Group as={Col} controlId=\"formGridExaminationDescription\">\n    <Form.Label>Description</Form.Label>\n    <Form.Control as=\"textarea\" rows=\"3\" placeholder=\"ExaminationDescription\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridExaminationFollowUp\">\n    <Form.Label>FollowUp ?</Form.Label>\n    <Form.Control as=\"select\">\n      <option>true</option>\n      <option>false</option>\n    </Form.Control>\n  </Form.Group>\n  </Form.Row>\n\n  <Form.Row>\n\n  <Form.Group as={Col} controlId=\"formGridExaminationAttachmentFormat\">\n    <Form.Label>Attachment Format</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"ExaminationAttachmentFormat\"/>\n  </Form.Group>\n  {\n  //   <Form.Group as={Col} controlId=\"formGridAttachmentPath\">\n  //   <Form.Label>Path</Form.Label>\n  //   <Form.Control type=\"string\" placeholder=\"File path\"/>\n  // </Form.Group>\n}\n  <Form.Group as={Col} controlId=\"formGridExaminationAttachmentFile\">\n    <Form.Label>File</Form.Label>\n    <Form.Control type=\"file\" placeholder=\"File\" onChange={(e) => {console.log(e.target.files[0]);AuthContext._currentValue.file = e.target.files[0];console.log(AuthContext._currentValue.file);}}/>\n  </Form.Group>\n  </Form.Row>\n\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"9\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n\n{props.canConfirm && (\n  <Accordion.Toggle as={Button} variant=\"success\" eventKey=\"9\" className=\"btn\" type=\"submit\">\n  Submit\n  </Accordion.Toggle>\n)}\n\n</Form>\n{\n  // <Form.Group as={Col} controlId=\"formGridExaminationAttachmentName\">\n  //   <Form.Label>ExaminationAttachmentName</Form.Label>\n  //   <Form.Control type=\"text\" placeholder=\"ExaminationAttachmentName\"/>\n  // </Form.Group>\n  // <AuthContext.Consumer>\n// </AuthContext.Consumer>\n}\n</div>\n\n)};\n\nexport default UpdatePatientExaminationForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Accordion from 'react-bootstrap/Accordion'\n// import FormCheck from 'react-bootstrap/FormCheck'\nimport AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst UpdatePatientHistoryForm = (props) => {\n\nconsole.log(\"UpdatePatientHistoryForm.props:  \", {...props});\nconst {...patient} = props.patient;\nconsole.log(\"UpdatePatientHistoryForm.props.patient:  \", {...patient});\n\n\nreturn (\n<div className=\"UpdateFormContainer\">\n<Form onSubmit={props.onConfirm}>\n<Form.Row>\n  <Form.Group as={Col} controlId=\"formGridHistoryType\">\n    <Form.Label>Type</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"HistoryType\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridHistoryDate\">\n    <Form.Label>Date</Form.Label>\n    <Form.Control type=\"date\" placeholder=\"HistoryDate\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridHistoryDateTodayCheckbox\">\n    <Form.Label>Today's Date?</Form.Label>\n    <Form.Control type=\"checkbox\" onChange={(e) => {console.log(e.target.checked)}}/>\n  </Form.Group>\n\n  <Form.Group as={Col} controlId=\"formGridHistoryTitle\">\n    <Form.Label>Title</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"HistoryTitle\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridHistoryDescription\">\n    <Form.Label>Description</Form.Label>\n    <Form.Control as=\"textarea\" rows=\"3\" placeholder=\"HistoryDescription\"/>\n  </Form.Group>\n  </Form.Row>\n\n  <Form.Row>\n\n  <Form.Group as={Col} controlId=\"formGridHistoryAttachmentFormat\">\n    <Form.Label>Attachment Format</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"HistoryAttachmentFormat\"/>\n  </Form.Group>\n  {\n  //   <Form.Group as={Col} controlId=\"formGridAttachmentPath\">\n  //   <Form.Label>Path</Form.Label>\n  //   <Form.Control type=\"string\" placeholder=\"File path\"/>\n  // </Form.Group>\n}\n  <Form.Group as={Col} controlId=\"formGridHistoryAttachmentFile\">\n    <Form.Label>File</Form.Label>\n    <Form.Control type=\"file\" placeholder=\"File\" onChange={(e) => {console.log(e.target.files[0]);AuthContext._currentValue.file = e.target.files[0];console.log(AuthContext._currentValue.file);}}/>\n  </Form.Group>\n  </Form.Row>\n\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"9\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n\n{props.canConfirm && (\n  <Accordion.Toggle as={Button} variant=\"success\" eventKey=\"9\" className=\"btn\" type=\"submit\">\n  Submit\n  </Accordion.Toggle>\n)}\n\n</Form>\n{\n  // <Form.Group as={Col} controlId=\"formGridHistoryAttachmentName\">\n  //   <Form.Label>HistoryAttachmentName</Form.Label>\n  //   <Form.Control type=\"text\" placeholder=\"HistoryAttachmentName\"/>\n  // </Form.Group>\n  // <AuthContext.Consumer>\n// </AuthContext.Consumer>\n}\n</div>\n\n)};\n\nexport default UpdatePatientHistoryForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Accordion from 'react-bootstrap/Accordion'\n// import FormCheck from 'react-bootstrap/FormCheck'\nimport AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst UpdatePatientAllergiesForm = (props) => {\n\nconsole.log(\"UpdatePatientAllergiesForm.props:  \", {...props});\nconst {...patient} = props.patient;\nconsole.log(\"UpdatePatientAllergiesForm.props.patient:  \", {...patient});\n\n\nreturn (\n<div className=\"UpdateFormContainer\">\n<Form onSubmit={props.onConfirm}>\n<Form.Row>\n  <Form.Group as={Col} controlId=\"formGridAllergiesTitle\">\n    <Form.Label>Title</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"AllergiesTitle\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridAllergiesTypeSelect\">\n    <Form.Label>Type Options</Form.Label>\n    <Form.Control as=\"select\">\n    <option>select</option>\n    <option>food</option>\n    <option>drug</option>\n    </Form.Control>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridAllergiesType\">\n    <Form.Label>Type</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"AllergiesType\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridAllergiesDescription\">\n    <Form.Label>Description</Form.Label>\n    <Form.Control as=\"textarea\" rows=\"3\" placeholder=\"AllergiesDescription\"/>\n  </Form.Group>\n  </Form.Row>\n\n  <Form.Row>\n\n  <Form.Group as={Col} controlId=\"formGridAllergiesAttachmentFormat\">\n    <Form.Label>Attachment Format</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"AllergiesAttachmentFormat\"/>\n  </Form.Group>\n  {\n  //   <Form.Group as={Col} controlId=\"formGridAttachmentPath\">\n  //   <Form.Label>Path</Form.Label>\n  //   <Form.Control type=\"string\" placeholder=\"File path\"/>\n  // </Form.Group>\n}\n  <Form.Group as={Col} controlId=\"formGridAllergiesAttachmentFile\">\n    <Form.Label>File</Form.Label>\n    <Form.Control type=\"file\" placeholder=\"File\" onChange={(e) => {console.log(e.target.files[0]);AuthContext._currentValue.file = e.target.files[0];console.log(AuthContext._currentValue.file);}}/>\n  </Form.Group>\n  </Form.Row>\n\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"9\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n\n{props.canConfirm && (\n  <Accordion.Toggle as={Button} variant=\"success\" eventKey=\"9\" className=\"btn\" type=\"submit\">\n  Submit\n  </Accordion.Toggle>\n)}\n\n</Form>\n{\n  // <Form.Group as={Col} controlId=\"formGridAllergiesAttachmentName\">\n  //   <Form.Label>AllergiesAttachmentName</Form.Label>\n  //   <Form.Control type=\"text\" placeholder=\"AllergiesAttachmentName\"/>\n  // </Form.Group>\n  // <AuthContext.Consumer>\n// </AuthContext.Consumer>\n}\n</div>\n\n)};\n\nexport default UpdatePatientAllergiesForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Accordion from 'react-bootstrap/Accordion'\n// import FormCheck from 'react-bootstrap/FormCheck'\nimport AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst UpdatePatientMedicationForm = (props) => {\n\nconsole.log(\"UpdatePatientMedicationForm.props:  \", {...props});\nconst {...patient} = props.patient;\nconsole.log(\"UpdatePatientMedicationForm.props.patient:  \", {...patient});\n\n\nreturn (\n<div className=\"UpdateFormContainer\">\n<Form onSubmit={props.onConfirm}>\n<Form.Row>\n  <Form.Group as={Col} controlId=\"formGridMedicationTitle\">\n    <Form.Label>Title</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"MedicationTitle\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridMedicationType\">\n    <Form.Label>Type</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"MedicationType\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridMedicationDescription\">\n    <Form.Label>Description</Form.Label>\n    <Form.Control as=\"textarea\" rows=\"3\" placeholder=\"MedicationDescription\"/>\n  </Form.Group>\n  </Form.Row>\n\n  <Form.Row>\n\n  <Form.Group as={Col} controlId=\"formGridMedicationAttachmentFormat\">\n    <Form.Label>Attachment Format</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"MedicationAttachmentFormat\"/>\n  </Form.Group>\n  {\n  //   <Form.Group as={Col} controlId=\"formGridAttachmentPath\">\n  //   <Form.Label>Path</Form.Label>\n  //   <Form.Control type=\"string\" placeholder=\"File path\"/>\n  // </Form.Group>\n}\n  <Form.Group as={Col} controlId=\"formGridMedicationAttachmentFile\">\n    <Form.Label>File</Form.Label>\n    <Form.Control type=\"file\" placeholder=\"File\" onChange={(e) => {console.log(e.target.files[0]);AuthContext._currentValue.file = e.target.files[0];console.log(AuthContext._currentValue.file);}}/>\n  </Form.Group>\n  </Form.Row>\n\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"9\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n\n{props.canConfirm && (\n  <Accordion.Toggle as={Button} variant=\"success\" eventKey=\"9\" className=\"btn\" type=\"submit\">\n  Submit\n  </Accordion.Toggle>\n)}\n\n</Form>\n{\n  // <Form.Group as={Col} controlId=\"formGridMedicationAttachmentName\">\n  //   <Form.Label>MedicationAttachmentName</Form.Label>\n  //   <Form.Control type=\"text\" placeholder=\"MedicationAttachmentName\"/>\n  // </Form.Group>\n  // <AuthContext.Consumer>\n// </AuthContext.Consumer>\n}\n</div>\n\n)};\n\nexport default UpdatePatientMedicationForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Accordion from 'react-bootstrap/Accordion'\n// import FormCheck from 'react-bootstrap/FormCheck'\nimport AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst UpdatePatientInvestigationForm = (props) => {\n\nconsole.log(\"UpdatePatientInvestigationForm.props:  \", {...props});\nconst {...patient} = props.patient;\nconsole.log(\"UpdatePatientInvestigationForm.props.patient:  \", {...patient});\n\n\nreturn (\n<div className=\"UpdateFormContainer\">\n<Form onSubmit={props.onConfirm}>\n<Form.Row>\n  <Form.Group as={Col} controlId=\"formGridInvestigationDate\">\n    <Form.Label>Date</Form.Label>\n    <Form.Control type=\"date\" placeholder=\"InvestigationDate\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridInvestigationTitle\">\n    <Form.Label>Title</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"InvestigationTitle\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridInvestigationTypeSelect\">\n    <Form.Label>Type Options</Form.Label>\n    <Form.Control as=\"select\">\n    <option>select</option>\n    <option>procedure</option>\n    <option>prescription</option>\n    </Form.Control>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridInvestigationType\">\n    <Form.Label>Type</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"InvestigationType\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridInvestigationDescription\">\n    <Form.Label>Description</Form.Label>\n    <Form.Control as=\"textarea\" rows=\"3\" placeholder=\"InvestigationDescription\"/>\n  </Form.Group>\n  </Form.Row>\n\n  <Form.Row>\n\n  <Form.Group as={Col} controlId=\"formGridInvestigationAttachmentFormat\">\n    <Form.Label>Attachment Format</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"InvestigationAttachmentFormat\"/>\n  </Form.Group>\n  {\n  //   <Form.Group as={Col} controlId=\"formGridAttachmentPath\">\n  //   <Form.Label>Path</Form.Label>\n  //   <Form.Control type=\"string\" placeholder=\"File path\"/>\n  // </Form.Group>\n}\n  <Form.Group as={Col} controlId=\"formGridInvestigationAttachmentFile\">\n    <Form.Label>File</Form.Label>\n    <Form.Control type=\"file\" placeholder=\"File\" onChange={(e) => {console.log(e.target.files[0]);AuthContext._currentValue.file = e.target.files[0];console.log(AuthContext._currentValue.file);}}/>\n  </Form.Group>\n  </Form.Row>\n\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"9\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n\n{props.canConfirm && (\n  <Accordion.Toggle as={Button} variant=\"success\" eventKey=\"9\" className=\"btn\" type=\"submit\">\n  Submit\n  </Accordion.Toggle>\n)}\n\n</Form>\n{\n  // <Form.Group as={Col} controlId=\"formGridInvestigationAttachmentName\">\n  //   <Form.Label>InvestigationAttachmentName</Form.Label>\n  //   <Form.Control type=\"text\" placeholder=\"InvestigationAttachmentName\"/>\n  // </Form.Group>\n  // <AuthContext.Consumer>\n// </AuthContext.Consumer>\n}\n</div>\n\n)};\n\nexport default UpdatePatientInvestigationForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Accordion from 'react-bootstrap/Accordion'\n// import FormCheck from 'react-bootstrap/FormCheck'\nimport AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst UpdatePatientDiagnosisForm = (props) => {\n\nconsole.log(\"UpdatePatientDiagnosisForm.props:  \", {...props});\nconst {...patient} = props.patient;\nconsole.log(\"UpdatePatientDiagnosisForm.props.patient:  \", {...patient});\n\n\nreturn (\n<div className=\"UpdateFormContainer\">\n<Form onSubmit={props.onConfirm}>\n<Form.Row>\n  <Form.Group as={Col} controlId=\"formGridDiagnosisDate\">\n    <Form.Label>Date</Form.Label>\n    <Form.Control type=\"date\" placeholder=\"DiagnosisDate\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridDiagnosisDateTodayCheckbox\">\n    <Form.Label>Today's Date?</Form.Label>\n    <Form.Control type=\"checkbox\" onChange={(e) => {console.log(e.target.checked)}}/>\n  </Form.Group>\n\n  <Form.Group as={Col} controlId=\"formGridDiagnosisTitle\">\n    <Form.Label>Title</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"DiagnosisTitle\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridDiagnosisType\">\n    <Form.Label>Type</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"DiagnosisType\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridDiagnosisDescription\">\n    <Form.Label>Description</Form.Label>\n    <Form.Control as=\"textarea\" rows=\"3\" placeholder=\"DiagnosisDescription\"/>\n  </Form.Group>\n  </Form.Row>\n\n  <Form.Row>\n\n  <Form.Group as={Col} controlId=\"formGridDiagnosisAttachmentFormat\">\n    <Form.Label>Attachment Format</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"DiagnosisAttachmentFormat\"/>\n  </Form.Group>\n  {\n  //   <Form.Group as={Col} controlId=\"formGridAttachmentPath\">\n  //   <Form.Label>Path</Form.Label>\n  //   <Form.Control type=\"string\" placeholder=\"File path\"/>\n  // </Form.Group>\n}\n  <Form.Group as={Col} controlId=\"formGridDiagnosisAttachmentFile\">\n    <Form.Label>File</Form.Label>\n    <Form.Control type=\"file\" placeholder=\"File\" onChange={(e) => {console.log(e.target.files[0]);AuthContext._currentValue.file = e.target.files[0];console.log(AuthContext._currentValue.file);}}/>\n  </Form.Group>\n  </Form.Row>\n\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"9\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n\n{props.canConfirm && (\n  <Accordion.Toggle as={Button} variant=\"success\" eventKey=\"9\" className=\"btn\" type=\"submit\">\n  Submit\n  </Accordion.Toggle>\n)}\n\n</Form>\n{\n  // <Form.Group as={Col} controlId=\"formGridDiagnosisAttachmentName\">\n  //   <Form.Label>DiagnosisAttachmentName</Form.Label>\n  //   <Form.Control type=\"text\" placeholder=\"DiagnosisAttachmentName\"/>\n  // </Form.Group>\n  // <AuthContext.Consumer>\n// </AuthContext.Consumer>\n}\n</div>\n\n)};\n\nexport default UpdatePatientDiagnosisForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Accordion from 'react-bootstrap/Accordion'\n// import FormCheck from 'react-bootstrap/FormCheck'\nimport AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst UpdatePatientTreatmentForm = (props) => {\n\nconsole.log(\"UpdatePatientTreatmentForm.props:  \", {...props});\nconst {...patient} = props.patient;\nconsole.log(\"UpdatePatientTreatmentForm.props.patient:  \", {...patient});\n\n\nreturn (\n<div className=\"UpdateFormContainer\">\n<Form onSubmit={props.onConfirm}>\n<Form.Row>\n  <Form.Group as={Col} controlId=\"formGridTreatmentDate\">\n    <Form.Label>Date</Form.Label>\n    <Form.Control type=\"date\" placeholder=\"TreatmentDate\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridTreatmentDateTodayCheckbox\">\n    <Form.Label>Today's Date?</Form.Label>\n    <Form.Control type=\"checkbox\" onChange={(e) => {console.log(e.target.checked)}}/>\n  </Form.Group>\n\n  <Form.Group as={Col} controlId=\"formGridTreatmentTitle\">\n    <Form.Label>Title</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"TreatmentTitle\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridTreatmentType\">\n    <Form.Label>Type</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"TreatmentType\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridTreatmentDescription\">\n    <Form.Label>Description</Form.Label>\n    <Form.Control as=\"textarea\" rows=\"3\" placeholder=\"TreatmentDescription\"/>\n  </Form.Group>\n  </Form.Row>\n\n  <Form.Row>\n  <Form.Group as={Col} controlId=\"formGridTreatmentDose\">\n    <Form.Label>Dose</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"TreatmentDose\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridTreatmentFrequency\">\n    <Form.Label>Frequency</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"TreatmentFrequency\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridTreatmentTypeSelect\">\n    <Form.Label>Type Options</Form.Label>\n    <Form.Control as=\"select\">\n    <option>select</option>\n    <option>procedure</option>\n    <option>prescription</option>\n    </Form.Control>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridTreatmentType\">\n    <Form.Label>Type</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"TreatmentType\"/>\n  </Form.Group>\n  </Form.Row>\n\n  <Form.Row>\n\n  <Form.Group as={Col} controlId=\"formGridTreatmentAttachmentFormat\">\n    <Form.Label>Attachment Format</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"TreatmentAttachmentFormat\"/>\n  </Form.Group>\n  {\n  //   <Form.Group as={Col} controlId=\"formGridAttachmentPath\">\n  //   <Form.Label>Path</Form.Label>\n  //   <Form.Control type=\"string\" placeholder=\"File path\"/>\n  // </Form.Group>\n}\n  <Form.Group as={Col} controlId=\"formGridTreatmentAttachmentFile\">\n    <Form.Label>File</Form.Label>\n    <Form.Control type=\"file\" placeholder=\"File\" onChange={(e) => {console.log(e.target.files[0]);AuthContext._currentValue.file = e.target.files[0];console.log(AuthContext._currentValue.file);}}/>\n  </Form.Group>\n  </Form.Row>\n\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"9\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n\n{props.canConfirm && (\n  <Accordion.Toggle as={Button} variant=\"success\" eventKey=\"9\" className=\"btn\" type=\"submit\">\n  Submit\n  </Accordion.Toggle>\n)}\n\n</Form>\n{\n  // <Form.Group as={Col} controlId=\"formGridTreatmentAttachmentName\">\n  //   <Form.Label>TreatmentAttachmentName</Form.Label>\n  //   <Form.Control type=\"text\" placeholder=\"DiagnosisAttachmentName\"/>\n  // </Form.Group>\n  // <AuthContext.Consumer>\n// </AuthContext.Consumer>\n}\n</div>\n\n)};\n\nexport default UpdatePatientTreatmentForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Accordion from 'react-bootstrap/Accordion'\n// import FormCheck from 'react-bootstrap/FormCheck'\nimport AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst UpdatePatientBillingForm = (props) => {\n\nconsole.log(\"UpdatePatientBillingForm.props:  \", {...props});\nconst {...patient} = props.patient;\nconsole.log(\"UpdatePatientBillingForm.props.patient:  \", {...patient});\n\n\nreturn (\n<div className=\"UpdateFormContainer\">\n<Form onSubmit={props.onConfirm}>\n<Form.Row>\n  <Form.Group as={Col} controlId=\"formGridBillingDate\">\n    <Form.Label>Date</Form.Label>\n    <Form.Control type=\"date\" placeholder=\"BillingDate\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridBillingDateTodayCheckbox\">\n    <Form.Label>Today's Date?</Form.Label>\n    <Form.Control type=\"checkbox\" onChange={(e) => {console.log(e.target.checked)}}/>\n  </Form.Group>\n\n  <Form.Group as={Col} controlId=\"formGridBillingTitle\">\n    <Form.Label>Title</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"BillingTitle\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridBillingType\">\n    <Form.Label>Type</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"BillingType\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridBillingDescription\">\n    <Form.Label>Description</Form.Label>\n    <Form.Control as=\"textarea\" rows=\"3\" placeholder=\"BillingDescription\"/>\n  </Form.Group>\n  </Form.Row>\n\n  <Form.Row>\n  <Form.Group as={Col} controlId=\"formGridBillingAmount\">\n    <Form.Label>Amount</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"BillingAmount\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridBillingPaid\">\n        <Form.Label>Paid ?</Form.Label>\n        <Form.Control as=\"select\">\n          <option>true</option>\n          <option>false</option>\n        </Form.Control>\n      </Form.Group>\n      <Form.Group as={Col} controlId=\"formGridBillingNotes\">\n        <Form.Label>Notes</Form.Label>\n        <Form.Control as=\"textarea\" rows=\"3\" placeholder=\"BillingNotes\"/>\n      </Form.Group>\n\n  </Form.Row>\n\n  <Form.Row>\n\n  <Form.Group as={Col} controlId=\"formGridBillingAttachmentFormat\">\n    <Form.Label>Attachment Format</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"BillingAttachmentFormat\"/>\n  </Form.Group>\n  {\n  //   <Form.Group as={Col} controlId=\"formGridAttachmentPath\">\n  //   <Form.Label>Path</Form.Label>\n  //   <Form.Control type=\"string\" placeholder=\"File path\"/>\n  // </Form.Group>\n}\n  <Form.Group as={Col} controlId=\"formGridBillingAttachmentFile\">\n    <Form.Label>File</Form.Label>\n    <Form.Control type=\"file\" placeholder=\"File\" onChange={(e) => {console.log(e.target.files[0]);AuthContext._currentValue.file = e.target.files[0];console.log(AuthContext._currentValue.file);}}/>\n  </Form.Group>\n  </Form.Row>\n\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"9\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n\n{props.canConfirm && (\n  <Accordion.Toggle as={Button} variant=\"success\" eventKey=\"9\" className=\"btn\" type=\"submit\">\n  Submit\n  </Accordion.Toggle>\n)}\n\n</Form>\n{\n  // <Form.Group as={Col} controlId=\"formGridBillingAttachmentName\">\n  //   <Form.Label>BillingAttachmentName</Form.Label>\n  //   <Form.Control type=\"text\" placeholder=\"BillingAttachmentName\"/>\n  // </Form.Group>\n  // <AuthContext.Consumer>\n// </AuthContext.Consumer>\n}\n</div>\n\n)};\n\nexport default UpdatePatientBillingForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Accordion from 'react-bootstrap/Accordion'\n// import FormCheck from 'react-bootstrap/FormCheck'\nimport AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst UpdatePatientAttachmentForm = (props) => {\n\nconsole.log(\"UpdatePatientAttachmentForm.props:  \", {...props});\nconst {...patient} = props.patient;\nconsole.log(\"UpdatePatientAttachmentForm.props.patient:  \", {...patient});\n\n\nreturn (\n<div className=\"UpdateFormContainer\">\n<Form onSubmit={props.onConfirm}>\n\n  <Form.Row>\n\n  <Form.Group as={Col} controlId=\"formGridPatientAttachmentFormat\">\n    <Form.Label>Format</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"PatientAttachmentFormat\"/>\n  </Form.Group>\n  </Form.Row>\n\n  <Form.Row>\n  {\n  //   <Form.Group as={Col} controlId=\"formGridAttachmentPath\">\n  //   <Form.Label>Path</Form.Label>\n  //   <Form.Control type=\"string\" placeholder=\"File path\"/>\n  // </Form.Group>\n}\n  <Form.Group as={Col} controlId=\"formGridAttachmentFile\">\n    <Form.Label>File</Form.Label>\n    <Form.Control type=\"file\" placeholder=\"File\" onChange={(e) => {console.log(e.target.files[0]);AuthContext._currentValue.file = e.target.files[0];console.log(AuthContext._currentValue.file);}}/>\n  </Form.Group>\n  </Form.Row>\n\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"9\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n\n{props.canConfirm && (\n  <Button variant=\"success\" type=\"submit\">Add</Button>\n)}\n\n</Form>\n{// <Form.Group as={Col} controlId=\"formGridPatientAttachmentName\">\n//   <Form.Label>PatientAttachmentName</Form.Label>\n//   <Form.Control type=\"text\" placeholder=\"PatientAttachmentName\"/>\n// </Form.Group>\n  // <AuthContext.Consumer>\n// </AuthContext.Consumer>\n}\n</div>\n\n)};\n\nexport default UpdatePatientAttachmentForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Accordion from 'react-bootstrap/Accordion'\n// import FormCheck from 'react-bootstrap/FormCheck'\n// import AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst UpdatePatientNoteForm = (props) => {\n\nconsole.log(\"UpdatePatientNoteForm.props:  \", {...props});\nconst {...patient} = props.patient;\nconsole.log(\"UpdatePatientNoteForm.props.patient:  \", {...patient});\n\n\nreturn (\n<div className=\"UpdateFormContainer\">\n<Form onSubmit={props.onConfirm}>\n<Form.Row>\n  <Form.Group as={Col} controlId=\"formGridNote\">\n    <Form.Label>Note</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"Note\"/>\n  </Form.Group>\n  </Form.Row>\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"9\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n\n{props.canConfirm && (\n  <Accordion.Toggle as={Button} variant=\"success\" eventKey=\"9\" className=\"btn\" type=\"submit\">\n  Submit\n  </Accordion.Toggle>\n)}\n\n</Form>\n{\n  // <AuthContext.Consumer>\n// </AuthContext.Consumer>\n}\n</div>\n\n)};\n\nexport default UpdatePatientNoteForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Accordion from 'react-bootstrap/Accordion'\n// import FormCheck from 'react-bootstrap/FormCheck'\n// import AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst UpdatePatientTagForm = (props) => {\n\nconsole.log(\"UpdatePatientTagForm.props:  \", {...props});\nconst {...patient} = props.patient;\nconsole.log(\"UpdatePatientTagForm.props.patient:  \", {...patient});\n\n\nreturn (\n<div className=\"UpdateFormContainer\">\n<Form onSubmit={props.onConfirm}>\n<Form.Row>\n  <Form.Group as={Col} controlId=\"formGridTag\">\n    <Form.Label>Tag</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"Tag\"/>\n  </Form.Group>\n  </Form.Row>\n\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"9\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n\n{props.canConfirm && (\n  <Accordion.Toggle as={Button} variant=\"success\" eventKey=\"9\" className=\"btn\" type=\"submit\">\n  Submit\n  </Accordion.Toggle>\n)}\n\n</Form>\n{\n  // <AuthContext.Consumer>\n// </AuthContext.Consumer>\n}\n</div>\n\n)};\n\nexport default UpdatePatientTagForm;\n","import React, { Component } from 'react';\nimport S3 from 'react-aws-s3';\n// import S3FileUpload from 'react-s3';\n\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Button from 'react-bootstrap/Button';\nimport Accordion from 'react-bootstrap/Accordion';\nimport SidebarPage from './Sidebar';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\n// import TabContainer from 'react-bootstrap/TabContainer';\n// import TabContent from 'react-bootstrap/TabContent';\n// import TabPane from 'react-bootstrap/TabPane';\nimport Nav from 'react-bootstrap/Nav';\nimport Card from 'react-bootstrap/Card';\n\nimport PatientList from '../components/Patients/PatientList/PatientList';\nimport PatientDetail from '../components/Patients/PatientDetail';\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\nimport SearchPatientList from '../components/Patients/PatientList/SearchPatientList';\nimport SearchPatientForm from '../components/Forms/SearchPatientForm';\nimport SearchPatientIdForm from '../components/Forms/SearchPatientIdForm';\nimport SearchPatientNameForm from '../components/Forms/SearchPatientNameForm';\n// import SearchPatientVisitForm from '../components/Forms/SearchPatientVisitForm';\n\nimport AlertBox from '../components/AlertBox';\nimport AttachmentViewer from '../components/AttachmentViewer';\nimport PdfCreator from '../components/PdfCreator';\n\nimport CreatePatientForm from '../components/Forms/CreatePatientForm';\nimport UpdatePatientForm from '../components/Forms/UpdatePatientForm';\nimport UpdatePatientFieldForm from '../components/Forms/UpdatePatientFieldForm';\nimport UpdatePatientConsultantForm from '../components/Forms/UpdatePatientConsultantForm';\nimport UpdatePatientInsuranceForm from '../components/Forms/UpdatePatientInsuranceForm';\nimport UpdatePatientNextOfKinForm from '../components/Forms/UpdatePatientNextOfKinForm';\nimport UpdatePatientComplaintForm from '../components/Forms/UpdatePatientComplaintForm';\nimport UpdatePatientSurveyForm from '../components/Forms/UpdatePatientSurveyForm';\nimport UpdatePatientVitalsForm from '../components/Forms/UpdatePatientVitalsForm';\nimport UpdatePatientExaminationForm from '../components/Forms/UpdatePatientExaminationForm';\nimport UpdatePatientHistoryForm from '../components/Forms/UpdatePatientHistoryForm';\nimport UpdatePatientAllergiesForm from '../components/Forms/UpdatePatientAllergiesForm';\nimport UpdatePatientMedicationForm from '../components/Forms/UpdatePatientMedicationForm';\nimport UpdatePatientInvestigationForm from '../components/Forms/UpdatePatientInvestigationForm';\nimport UpdatePatientDiagnosisForm from '../components/Forms/UpdatePatientDiagnosisForm';\nimport UpdatePatientTreatmentForm from '../components/Forms/UpdatePatientTreatmentForm';\nimport UpdatePatientBillingForm from '../components/Forms/UpdatePatientBillingForm';\nimport UpdatePatientAttachmentForm from '../components/Forms/UpdatePatientAttachmentForm';\nimport UpdatePatientNoteForm from '../components/Forms/UpdatePatientNoteForm';\nimport UpdatePatientTagForm from '../components/Forms/UpdatePatientTagForm';\n\nimport './Users.css';\n\nclass PatientsPage extends Component {\n  state = {\n    creating: false,\n    updating: false,\n    searching: false,\n    updatingArray: false,\n    deleting: false,\n    patients: [],\n    searchPatients: [],\n    isLoading: false,\n    selectedPatient: null,\n    patientUpdateField: null,\n    patientSearchField: null,\n    patientSearchQuery: null,\n    canDelete: null,\n    visit: null,\n    userAlert: null,\n    showAttachment: false,\n    showThisAttachmentFile: null,\n    showThisAttachmentType: null,\n    createPdf: false,\n    pdfData: null,\n  };\n  isActive = true;\n\n  static contextType = AuthContext;\n\n  constructor(props) {\n    super(props);\n    this.nameElRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.fetchPatients();\n    if (this.context.user.name === \"Lord-of-the-Manor\"){\n      this.setState({canDelete: true})\n    }\n    // if (this.context.user.name === 'admin579'){\n    //   this.setState({canDelete: true})\n    // }\n  }\n\n\n  startCreatePatientHandler = () => {\n    this.setState({ creating: true });\n    console.log(\"CreatePatientForm...\");\n  };\n  startUpdatePatientHandler = () => {\n    this.setState({ updating: true, updatingArray: true });\n    console.log(\"UpdatePatientForm...\");\n  };\n  startSearchPatientHandler = () => {\n    this.setState({ searching: true });\n    console.log(\"SearchPatientForm...\");\n  };\n\n  modalConfirmHandler = (event) => {\n\n    console.log(\"CreatePatientFormData:  \", event.target.formGridName.value);\n\n    this.setState({ creating: false });\n    const userId = this.context.userId;\n\n    let title = event.target.formGridTitle.value;\n    let name = event.target.formGridName.value;\n    let dob = event.target.formGridDob.value;\n    let age = event.target.formGridAge.value;\n    let gender = event.target.formGridGender.value;\n    let addressNumber = event.target.formGridAddressNumber.value;\n    let addressStreet = event.target.formGridAddressStreet.value;\n    let addressTown = event.target.formGridAddressTown.value;\n    let addressParish = event.target.formGridAddressParish.value;\n    let addressPostOffice = event.target.formGridAddressPostOffice.value;\n    let contactPhone = event.target.formGridContactPhone.value;\n    let contactEmail = event.target.formGridContactEmail.value;\n\n    let registrationDate = event.target.formGridRegistrationDate.value;\n    if (event.target.formGridRegistrationDateTodayCheckbox.checked === true) {\n      registrationDate = new Date().toISOString().slice(0,10);\n    }\n    let referralDate = event.target.formGridReferralDate.value;\n    if (event.target.formGridReferralDateTodayCheckbox.checked === true) {\n      referralDate = new Date().toISOString().slice(0,10);\n    }\n\n    let expirationDate = event.target.formGridExpirationDate.value;\n    let attendingPhysicianName = event.target.formGridAttendingPhysicianName.value;\n    let attendingPhysicianEmail = event.target.formGridAttendingPhysicianEmail.value;\n    let attendingPhysicianPhone = event.target.formGridAttendingPhysicianPhone.value;\n    let referringDoctorName = event.target.formGridReferringDoctorName.value;\n    let referringDoctorEmail = event.target.formGridReferringDoctorEmail.value;\n    let referringDoctorPhone = event.target.formGridReferringDoctorPhone.value;\n    let occupationRole = event.target.formGridOccupationRole.value;\n    let occupationEmployer = event.target.formGridOccupationEmployer.value;\n    let occupationEmployerContactPhone = event.target.formGridOccupationEmployerContactPhone.value;\n    let occupationEmployerContactEmail = event.target.formGridOccupationEmployerContactEmail.value;\n\n\n    if (\n      name.trim().length === 0 ||\n      // title.trim().length === 0 ||\n      // name.trim().length === 0 ||\n      // dob.trim().length === 0 ||\n      age.trim().length === 0 ||\n      // gender.trim().length === 0 ||\n      addressNumber.trim().length === 0 ||\n      addressStreet.trim().length === 0 ||\n      // addressTown.trim().length === 0 ||\n      // addressParish.trim().length === 0 ||\n      // addressPostOffice.trim().length === 0 ||\n      contactPhone.trim().length === 0 ||\n      // contactEmail.trim().length === 0 ||\n      registrationDate.trim().length === 0\n      // referralDate.trim().length === 0 ||\n      // expirationDate.trim().length === 0 ||\n      // attendingPhysicianName.trim().length === 0 ||\n      // attendingPhysicianEmail.trim().length === 0 ||\n      // attendingPhysicianPhone.trim().length === 0 ||\n      // referringDoctorName.trim().length === 0 ||\n      // referringDoctorEmail.trim().length === 0 ||\n      // referringDoctorPhone.trim().length === 0 ||\n      // occupationRole.trim().length === 0 ||\n      // occupationEmployer.trim().length === 0 ||\n      // occupationEmployerContactPhone.trim().length === 0 ||\n      // occupationEmployerContactEmail.trim().length === 0\n\n    ) {\n      console.log(\"patient must have at least: Name, Age, Contact Number, Street Name & Number and Registration Date!!!...Please try again...\");\n      this.setState({userAlert: \"patient must have at least: Name, Age, Contact Number, Street Name & Number and Registration Date!!!...Please try again...\"});\n      return;\n    }\n\n    console.log(`\n      creating patient...\n      title: ${title},\n      name: ${name},\n      dob: ${dob},\n      age: ${age},\n      gender: ${gender},\n      addressNumber: ${addressNumber},\n      addressStreet: ${addressStreet},\n      addressTown: ${addressTown},\n      addressParish: ${addressParish},\n      addressPostOffice: ${addressPostOffice},\n      contactPhone: ${contactPhone},\n      contactEmail: ${contactEmail},\n      registrationDate: ${registrationDate},\n      referralDate: ${referralDate},\n      expirationDate: ${expirationDate},\n      attendingPhysicianName: ${attendingPhysicianName},\n      attendingPhysicianEmail: ${attendingPhysicianEmail},\n      attendingPhysicianPhone: ${attendingPhysicianPhone},\n      referringDoctorName: ${referringDoctorName},\n      referringDoctorEmail: ${referringDoctorEmail},\n      referringDoctorPhone: ${referringDoctorPhone},\n      occupationRole: ${occupationRole},\n      occupationEmployer: ${occupationEmployer},\n      occupationEmployerContactPhone: ${occupationEmployerContactPhone},\n      occupationEmployerContactEmail: ${occupationEmployerContactEmail},\n      `);\n\n    const requestBody = {\n      query: `\n        mutation {createPatient(userId:\"${userId}\", patientInput:{title:\"${title}\",name:\"${name}\",dob:\"${dob}\",age:${age},gender:\"${gender}\",addressNumber:${addressNumber},addressStreet:\"${addressStreet}\",addressTown:\"${addressTown}\",addressParish:\"${addressParish}\",addressPostOffice:\"${addressPostOffice}\",contactPhone:\"${contactPhone}\",contactEmail:\"${contactEmail}\",registrationDate:\"${registrationDate}\",referralDate:\"${referralDate}\",expirationDate:\"${expirationDate}\",referringDoctorName:\"${referringDoctorName}\",referringDoctorEmail:\"${referringDoctorEmail}\",referringDoctorPhone:\"${referringDoctorPhone}\",attendingPhysicianName:\"${attendingPhysicianName}\",attendingPhysicianEmail:\"${attendingPhysicianEmail}\",attendingPhysicianPhone:\"${attendingPhysicianPhone}\",occupationRole:\"${occupationRole}\",occupationEmployer:\"${occupationEmployer}\",occupationEmployerContactPhone:\"${occupationEmployerContactPhone}\",occupationEmployerContactEmail:\"${occupationEmployerContactEmail}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n        `};\n\n    const token = this.context.token;\n\n    fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n    // fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(`\n          response data:\n          ${JSON.stringify(resData.data.createPatient)}\n          `);\n          const responseAlert = JSON.stringify(resData.data).slice(2,15);\n          this.setState({userAlert: responseAlert});\n\n        const newPatient = resData.data.createPatient;\n        this.setState(prevState => {\n          const updatedPatients = [...prevState.patients];\n          updatedPatients.push(newPatient);\n\n          return { patients: updatedPatients };\n        });\n\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n  };\n\n  modalCancelHandler = () => {\n    this.setState({ creating: false, updating: false, selectedPatient: null });\n  };\n\n\n  modalConfirmUpdateHandler = (event) => {\n\n    // if(this.context.user.role !== 'admin') {\n    //   console.log(\"Not the Admin! No edit permission!!\");\n    // }\n\n    const userId = this.context.userId;\n    const selectedPatientId = this.context.selectedPatient._id;\n\n    console.log(\"UpdatePatientFormData:  \", event.target.formGridName.value);\n\n\n    this.setState({ updating: false });\n\n    let title = event.target.formGridTitle.value;\n    let name = event.target.formGridName.value;\n    let dob = event.target.formGridDob.value;\n    let age = event.target.formGridAge.value;\n    let gender = event.target.formGridGender.value;\n    let addressNumber = event.target.formGridAddressNumber.value;\n    let addressStreet = event.target.formGridAddressStreet.value;\n    let addressTown = event.target.formGridAddressTown.value;\n    let addressParish = event.target.formGridAddressParish.value;\n    let addressPostOffice = event.target.formGridAddressPostOffice.value;\n    let contactPhone = event.target.formGridContactPhone.value;\n    let contactEmail = event.target.formGridContactEmail.value;\n\n    let registrationDate = event.target.formGridRegistrationDate.value;\n    if (event.target.formGridRegistrationDateTodayCheckbox.checked === true) {\n      registrationDate = new Date().toISOString().slice(0,10);\n    }\n\n    let referralDate = event.target.formGridReferralDate.value;\n    if (event.target.formGridReferralDateTodayCheckbox.checked === true) {\n      referralDate = new Date().toISOString().slice(0,10);\n    }\n\n    let expirationDate = event.target.formGridExpirationDate.value;\n    if (event.target.formGridExpirationDateTodayCheckbox.checked === true) {\n      expirationDate = new Date().toISOString().slice(0,10);\n    }\n\n    let attendingPhysicianName = event.target.formGridAttendingPhysicianName.value;\n    let attendingPhysicianEmail = event.target.formGridAttendingPhysicianEmail.value;\n    let attendingPhysicianPhone = event.target.formGridAttendingPhysicianPhone.value;\n    let referringDoctorName = event.target.formGridReferringDoctorName.value;\n    let referringDoctorEmail = event.target.formGridReferringDoctorEmail.value;\n    let referringDoctorPhone = event.target.formGridReferringDoctorPhone.value;\n    let occupationRole = event.target.formGridOccupationRole.value;\n    let occupationEmployer = event.target.formGridOccupationEmployer.value;\n    let occupationEmployerContactPhone = event.target.formGridOccupationEmployerContactPhone.value;\n    let occupationEmployerContactEmail = event.target.formGridOccupationEmployerContactEmail.value;\n\n    if (title.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      title = this.context.selectedPatient.title;\n    }\n    if (name.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      name = this.context.selectedPatient.name;\n    }\n    if (dob.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      dob = this.context.selectedPatient.dob;\n    }\n    if (gender.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      gender = this.context.selectedPatient.gender;\n    }\n    if (age.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      age = this.context.selectedPatient.age;\n    }\n    if (addressNumber.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      addressNumber = this.context.selectedPatient.address.number;\n    }\n    if (addressStreet.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      addressStreet = this.context.selectedPatient.address.street;\n    }\n    if (addressTown.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      addressTown = this.context.selectedPatient.address.town;\n    }\n    if (addressParish.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      addressParish = this.context.selectedPatient.address.parish;\n    }\n    if (addressPostOffice.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      addressPostOffice = this.context.selectedPatient.address.postOffice;\n    }\n    if (contactPhone.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      contactPhone = this.context.selectedPatient.contact.phone;\n    }\n    if (contactEmail.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      contactEmail = this.context.selectedPatient.contact.email;\n    }\n    if (registrationDate.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      registrationDate = this.context.selectedPatient.registrationDate;\n    }\n    if (attendingPhysicianName.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      attendingPhysicianName = this.context.selectedPatient.attendingPhysician.name;\n    }\n    if (attendingPhysicianEmail.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      attendingPhysicianEmail = this.context.selectedPatient.attendingPhysician.email;\n    }\n    if (attendingPhysicianPhone.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      attendingPhysicianPhone = this.context.selectedPatient.attendingPhysician.phone;\n    }\n    if (referringDoctorName.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      referringDoctorName = this.context.selectedPatient.referringDoctor.name;\n    }\n    if (referringDoctorEmail.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      referringDoctorEmail = this.context.selectedPatient.referringDoctor.email;\n    }\n    if (referringDoctorPhone.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      referringDoctorPhone = this.context.selectedPatient.referringDoctor.phone;\n    }\n    if (occupationRole.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      occupationRole = this.context.selectedPatient.occupation.role;\n    }\n    if (occupationEmployer.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      occupationEmployer = this.context.selectedPatient.occupation.employer;\n    }\n    if (occupationEmployerContactEmail.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      occupationEmployerContactEmail = this.context.selectedPatient.occupation.contact.email;\n    }\n    if (occupationEmployerContactPhone.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      occupationEmployerContactPhone = this.context.selectedPatient.occupation.contact.phone;\n    }\n\n\n    console.log(`\n      updating patient...\n      title: ${title},\n      name: ${name},\n      dob: ${dob},\n      age: ${age},\n      gender: ${gender},\n      addressNumber: ${addressNumber},\n      addressStreet: ${addressStreet},\n      addressTown: ${addressTown},\n      addressParish: ${addressParish},\n      addressPostOffice: ${addressPostOffice},\n      contactPhone: ${contactPhone},\n      contactEmail: ${contactEmail},\n      registrationDate: ${registrationDate},\n      referralDate: ${referralDate},\n      expirationDate: ${expirationDate},\n      attendingPhysicianName: ${attendingPhysicianName},\n      attendingPhysicianEmail: ${attendingPhysicianEmail},\n      attendingPhysicianPhone: ${attendingPhysicianPhone},\n      referringDoctorName: ${referringDoctorName},\n      referringDoctorEmail: ${referringDoctorEmail},\n      referringDoctorPhone: ${referringDoctorPhone},\n      occupationRole: ${occupationRole},\n      occupationEmployer: ${occupationEmployer},\n      occupationEmployerContactPhone: ${occupationEmployerContactPhone},\n      occupationEmployerContactEmail: ${occupationEmployerContactEmail},\n      `);\n      this.setState({userAlert: \"updating patient...\"});\n\n    const requestBody = {\n      query: `\n          mutation {updatePatient(userId:\"${userId}\",patientId:\"${selectedPatientId}\", patientInput:{title:\"${title}\",name:\"${name}\",dob:\"${dob}\",age:${age},gender:\"${gender}\",addressNumber:${addressNumber},addressStreet:\"${addressStreet}\",addressTown:\"${addressTown}\",addressParish:\"${addressParish}\",addressPostOffice:\"${addressPostOffice}\",contactPhone:\"${contactPhone}\",contactEmail:\"${contactEmail}\",registrationDate:\"${registrationDate}\",referralDate:\"${referralDate}\",expirationDate:\"${expirationDate}\",referringDoctorName:\"${referringDoctorName}\",referringDoctorEmail:\"${referringDoctorEmail}\",referringDoctorPhone:\"${referringDoctorPhone}\",attendingPhysicianName:\"${attendingPhysicianName}\",attendingPhysicianEmail:\"${attendingPhysicianEmail}\",attendingPhysicianPhone:\"${attendingPhysicianPhone}\",occupationRole:\"${occupationRole}\",occupationEmployer:\"${occupationEmployer}\",occupationEmployerContactPhone:\"${occupationEmployerContactPhone}\",occupationEmployerContactEmail:\"${occupationEmployerContactPhone}\"})\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n        `};\n\n    const token = this.context.token;\n\n    fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n\n        const updatedPatientId = resData.data.updatePatient._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatient);\n\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatient})\n        this.fetchPatients();\n\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n  };\n\n\n  modalConfirmUpdateFieldHandler = (event) => {\n\n    const token = this.context.token;\n    const userId = this.context.userId;\n    let selectedPatientId = this.context.selectedPatient._id;\n\n    // if( this.context.user.role !== 'admin') {\n    //   console.log(\"Not the creator or Admin! No edit permission!!\");\n    //   selectedPatientId = null;\n    // }\n\n      console.log(\"UpdatePatientFieldFormData:  \", event.target.formGridField.value);\n      this.setState({ updating: false });\n\n      let field = null;\n      let query = event.target.formGridQuery.value;\n      if (event.target.formGridFieldSelect.value === \"select\") {\n        field = event.target.formGridField.value;\n      } else {\n        field = event.target.formGridFieldSelect.value;\n      }\n\n      const requestBody = {\n        query:`\n          mutation {updatePatientField(userId:\"${userId}\",patientId:\"${selectedPatientId}\",field:\"${field}\",query:\"${query}\")\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n        `};\n\n\n      fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData.data.updatePatientField));\n\n          const updatedPatientId = resData.data.updatePatientField._id;\n          const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n          const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n          const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n          console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n          this.state.patients.push(resData.data.updatePatientField);\n          this.context.patients = this.state.patients;\n          const responseAlert = JSON.stringify(resData.data).slice(2,25);\n          this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientField})\n          this.fetchPatients();\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({userAlert: err});\n        });\n\n  }\n\n\nupdatePatientConsultantHandler = (event) => {\n\n  let token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n  const patientConsultantReference = this.context.selectedUser._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n  if (patientConsultantReference === undefined) {\n    console.log(`\n      select a Staff member before adding a Patient Consultant!!\n      `);\n      this.setState({userAlert: \"select a Staff member before adding a Patient Consultant!!...\"});\n      token = null;\n  }\n\n  console.log(\"UpdatePatientConsultantFormData:  \", event.target.formGridConsultantDate.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let consultantDate = event.target.formGridConsultantDate.value;\n  if (event.target.formGridConsultantDateTodayCheckbox.checked === true) {\n    consultantDate = new Date().toISOString().slice(0,10);\n  }\n\n  console.log(`\n    adding patient consultant item...\n    userId: ${userId},\n    selectedPatientId: ${selectedPatientId},\n    consultantDate: ${consultantDate},\n    consultantReference: ${patientConsultantReference},\n    `);\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientConsultant(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{consultantDate:\" ${consultantDate}\",consultantReference: \"${patientConsultantReference}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    };\n\n\n      fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData.data));\n\n          const updatedPatientId = resData.data.updatePatientConsultant._id;\n          const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n          const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n          const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n          console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n          this.state.patients.push(resData.data.updatePatientConsultant);\n          this.context.patients = this.state.patients;\n          const responseAlert = JSON.stringify(resData.data).slice(2,25);\n          this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientConsultant})\n          this.fetchPatients();\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({userAlert: err});\n        });\n\n}\nupdatePatientInsuranceHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientInsuranceFormData:  \", event.target.formGridInsuranceCompany.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let insuranceCompany = event.target.formGridInsuranceCompany.value;\n  let insuranceNumber = event.target.formGridInsuranceNumber.value;\n\n  let insuranceExpiry = event.target.formGridInsuranceExpiry.value;\n\n  let insuranceDescription = event.target.formGridInsuranceDescription.value;\n  let insuranceSubscriberCompany = event.target.formGridInsuranceSubscriberCompany.value;\n  let insuranceSubscriberDescription = event.target.formGridInsuranceSubscriberDescription.value;\n\n\n  console.log(`\n    adding patient insurance item...\n    userId: ${userId},\n    selectedPatientId: ${selectedPatientId},\n    insuranceCompany: ${insuranceCompany},\n    insuranceNumber: ${insuranceNumber},\n    insuranceExpiry: ${insuranceExpiry},\n    insuranceDescription: ${insuranceDescription},\n    insuranceSubscriberCompany: ${insuranceSubscriberCompany},\n    insuranceSubscriberDescription: ${insuranceSubscriberDescription},\n    `);\n    this.setState({userAlert: \"adding patient insurance item...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientInsurance(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{insuranceCompany:\"${insuranceCompany}\",insuranceNumber:\"${insuranceNumber}\",insuranceDescription:\"${insuranceDescription}\",insuranceExpiry:\"${insuranceExpiry}\",insuranceSubscriberCompany:\"${insuranceSubscriberCompany}\",insuranceSubscriberDescription:\"${insuranceSubscriberDescription}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    };\n\n\n      fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData.data));\n\n          const updatedPatientId = resData.data.updatePatientInsurance._id;\n          const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n          const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n          const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n          console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n          this.state.patients.push(resData.data.updatePatientInsurance);\n          this.context.patients = this.state.patients;\n          const responseAlert = JSON.stringify(resData.data).slice(2,25);\n          this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientInsurance})\n          this.fetchPatients();\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({userAlert: err});\n        });\n\n}\n\nupdatePatientNextOfKinHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientNextOfKinFormData:  \", event.target.formGridNextOfKinName.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let nextOfKinName = event.target.formGridNextOfKinName.value;\n  let nextOfKinPhone = event.target.formGridNextOfKinPhone.value;\n  let nextOfKinEmail = event.target.formGridNextOfKinEmail.value;\n\n\n  console.log(`\n    adding patient nextOfKin item...\n    userId: ${userId},\n    selectedPatientId: ${selectedPatientId},\n    nextOfKinName: ${nextOfKinName},\n    nextOfKinPhone: ${nextOfKinPhone},\n    nextOfKinEmail: ${nextOfKinEmail},\n    `);\n    this.setState({userAlert: \"adding patient nextOfKin item...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientNextOfKin(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{nextOfKinName:\"${nextOfKinName}\",nextOfKinEmail:\"${nextOfKinEmail}\",nextOfKinPhone:\"${nextOfKinPhone}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    };\n\n\n      fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData.data));\n\n          const updatedPatientId = resData.data.updatePatientNextOfKin._id;\n          const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n          const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n          const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n          console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n          this.state.patients.push(resData.data.updatePatientNextOfKin);\n          this.context.patients = this.state.patients;\n          const responseAlert = JSON.stringify(resData.data).slice(2,25);\n          this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientNextOfKin})\n          this.fetchPatients();\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({userAlert: err});\n        });\n}\n\n\nupdatePatientComplaintHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientComplaintFormData:  \", event.target.formGridComplaintTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let complaintTitle = event.target.formGridComplaintTitle.value;\n\n  let complaintDate = event.target.formGridComplaintDate.value;\n  if (event.target.formGridComplaintDateTodayCheckbox.checked === true) {\n    complaintDate = new Date().toISOString().slice(0,10);\n  }\n\n  let complaintDescription = event.target.formGridComplaintDescription.value;\n  let complaintAnamnesis = event.target.formGridComplaintAnamnesis.value;\n  // let complaintAttachmentName = event.target.formGridComplaintAttachmentName.value;\n  let complaintAttachmentFormat = event.target.formGridComplaintAttachmentFormat.value;\n  // let complaintAttachmentPath = event.target.formGridComplaintAttachmentPath.value;\n  let complaintAttachmentPath = \"uploads/patients/\"+selectedPatientId+\"/complaints\";\n  let file = AuthContext._currentValue.file;\n\n  console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n    const config = {\n      bucketName: this.context.creds.s3.bucketName,\n      dirName: complaintAttachmentPath,\n      region: this.context.creds.s3.region,\n      accessKeyId: this.context.creds.s3.accessKeyId,\n      secretAccessKey: this.context.creds.s3.secretAccessKey,\n    }\n\n  const ReactS3Client = new S3(config);\n  const newFileName = file.name;\n  const complaintAttachmentName = newFileName;\n\n  ReactS3Client\n      .uploadFile(file, newFileName)\n      .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n      .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n\n  console.log(`\n    adding patient complaint...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    complaintTitle: ${complaintTitle},\n    complaintDate: ${complaintDate},\n    complaintDescription: ${complaintDescription},\n    complaintAnamnesis: ${complaintAnamnesis},\n    complaintAttachmentName: ${complaintAttachmentName},\n    complaintAttachmentFormat: ${complaintAttachmentFormat},\n    complaintAttachmentPath: ${complaintAttachmentPath},\n    `);\n    this.setState({userAlert: \"adding patient complaint...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientComplaint(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{complaintDate:\"${complaintDate}\",complaintTitle:\"${complaintTitle}\",complaintDescription:\"${complaintDescription}\",complaintAnamnesis:\"${complaintAnamnesis}\",complaintAttachmentName:\"${complaintAttachmentName}\",complaintAttachmentFormat:\"${complaintAttachmentFormat}\",complaintAttachmentPath:\"${complaintAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n\n    fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientComplaint._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientComplaint);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientComplaint})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n}\n\nupdatePatientSurveyHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientSurveyFormData:  \", event.target.formGridSurveyTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let surveyDate = event.target.formGridSurveyDate.value;\n  if (event.target.formGridSurveyDateTodayCheckbox.checked === true) {\n    surveyDate = new Date().toISOString().slice(0,10);\n  }\n\n  let surveyTitle = event.target.formGridSurveyTitle.value;\n  let surveyDescription = event.target.formGridSurveyDescription.value;\n  // let surveyAttachmentName = event.target.formGridSurveyAttachmentName.value;\n  let surveyAttachmentFormat = event.target.formGridSurveyAttachmentFormat.value;\n  let surveyAttachmentPath = \"uploads/patients/\"+selectedPatientId+\"/surveys\";\n  // let surveyAttachmentPath = event.target.formGridSurveyAttachmentPath.value;\n  let file = AuthContext._currentValue.file;\n\n  console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n\n    const config = {\n      bucketName: this.context.creds.s3.bucketName,\n      dirName: surveyAttachmentPath,\n      region: this.context.creds.s3.region,\n      accessKeyId: this.context.creds.s3.accessKeyId,\n      secretAccessKey: this.context.creds.s3.secretAccessKey,\n    }\n\n  const ReactS3Client = new S3(config);\n  const newFileName = file.name;\n  const surveyAttachmentName = newFileName;\n\n  ReactS3Client\n      .uploadFile(file, newFileName)\n      .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n      .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n\n  console.log(`\n    adding patient survey...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    surveyDate: ${surveyDate},\n    surveyTitle: ${surveyTitle},\n    surveyDescription: ${surveyDescription},\n    surveyAttachmentName: ${surveyAttachmentName},\n    surveyAttachmentFormat: ${surveyAttachmentFormat},\n    surveyAttachmentPath: ${surveyAttachmentPath},\n    `);\n    this.setState({userAlert: \"adding patient survey...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientSurvey(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{surveyDate:\"${surveyDate}\",surveyTitle:\"${surveyTitle}\",surveyDescription:\"${surveyDescription}\",surveyAttachmentName:\"${surveyAttachmentName}\",surveyAttachmentFormat:\"${surveyAttachmentFormat}\",surveyAttachmentPath:\"${surveyAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n\n    fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientSurvey._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientSurvey);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientSurvey})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n}\n\nupdatePatientVitalsHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientVitalsFormData:  \", event.target.formGridVitalsDate.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let vitalsDate = event.target.formGridVitalsDate.value;\n  if (event.target.formGridVitalsDateTodayCheckbox.checked === true) {\n    vitalsDate = new Date().toISOString().slice(0,10);\n  }\n\n  let vitalsPr = event.target.formGridVitalsPr.value;\n  let vitalsBp1 = event.target.formGridVitalsBp1.value;\n  let vitalsBp2 = event.target.formGridVitalsBp2.value;\n  let vitalsRr = event.target.formGridVitalsRr.value;\n  let vitalsTemp = event.target.formGridVitalsTemp.value;\n  let vitalsPs02 = event.target.formGridVitalsPs02.value;\n  let vitalsHeight = event.target.formGridVitalsHeight.value;\n  let vitalsWeight = event.target.formGridVitalsWeight.value;\n  let vitalsBmi = event.target.formGridVitalsBmi.value;\n  let vitalsUrineType = event.target.formGridVitalsUrineType.value;\n  let vitalsUrineValue = event.target.formGridVitalsUrineValue.value;\n\n  console.log(`\n    adding patient vitals...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    `);\n    this.setState({userAlert: \"adding patient vitals...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientVitals(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{vitalsDate:\"${vitalsDate}\",vitalsPr:${vitalsPr},vitalsBp1:${vitalsBp1},vitalsBp2:${vitalsBp2},vitalsRr:${vitalsRr},vitalsTemp:${vitalsTemp},vitalsPs02:${vitalsPs02},vitalsHeight:${vitalsHeight},vitalsWeight:${vitalsWeight},vitalsBmi:${vitalsBmi},vitalsUrineType:\"${vitalsUrineType}\",vitalsUrineValue:\"${vitalsUrineValue}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n\n    fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientVitals._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientVitals);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientVitals})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n}\n\n\nupdatePatientExaminationHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientExaminationFormData:  \", event.target.formGridExaminationArea.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let examinationDate = event.target.formGridExaminationDate.value;\n  if (event.target.formGridExaminationDateTodayCheckbox.checked === true) {\n    examinationDate = new Date().toISOString().slice(0,10);\n  }\n\n  let examinationGeneral = event.target.formGridExaminationGeneral.value;\n  let examinationArea = undefined;\n  if (event.target.formGridExaminationAreaSelect === \"select\") {\n    examinationArea = event.target.formGridExaminationArea.value;\n  } else {\n    examinationArea = event.target.formGridExaminationAreaSelect.value;\n  }\n  let examinationType = event.target.formGridExaminationType.value;\n  let examinationMeasure = event.target.formGridExaminationMeasure.value;\n  let examinationValue = event.target.formGridExaminationValue.value;\n  let examinationDescription = event.target.formGridExaminationDescription.value;\n  let examinationFollowUp = event.target.formGridExaminationFollowUp.value;\n  // let examinationAttachmentName = event.target.formGridExaminationAttachmentName.value;\n  let examinationAttachmentFormat = event.target.formGridExaminationAttachmentFormat.value;\n  let examinationAttachmentPath = \"uploads/patients/\"+selectedPatientId+\"/examinations\";\n  // let examinationAttachmentPath = event.target.formGridExaminationAttachmentPath.value;\n  let file = AuthContext._currentValue.file;\n\n  console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n    const config = {\n      bucketName: this.context.creds.s3.bucketName,\n      dirName: examinationAttachmentPath,\n      region: this.context.creds.s3.region,\n      accessKeyId: this.context.creds.s3.accessKeyId,\n      secretAccessKey: this.context.creds.s3.secretAccessKey,\n    }\n  const ReactS3Client = new S3(config);\n  const newFileName = file.name;\n  const examinationAttachmentName = newFileName;\n\n  ReactS3Client\n      .uploadFile(file, newFileName)\n      .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n      .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n\n  console.log(`\n    adding patient examination...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    examinationDate: ${examinationDate},\n    examinationGeneral: ${examinationGeneral},\n    examinationArea: ${examinationArea},\n    examinationType: ${examinationType},\n    examinationMeasure: ${examinationMeasure},\n    examinationValue: ${examinationValue},\n    examinationDescription: ${examinationDescription},\n    examinationFollowUp: ${examinationFollowUp},\n    examinationAttachmentName: ${examinationAttachmentName},\n    examinationAttachmentFormat: ${examinationAttachmentFormat},\n    examinationAttachmentPath: ${examinationAttachmentPath},\n    `);\n    this.setState({userAlert: \"adding patient examination...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientExamination(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{examinationDate:\"${examinationDate}\",examinationGeneral:\"${examinationGeneral}\",examinationArea:\"${examinationArea}\",examinationType:\"${examinationType}\",examinationMeasure:\"${examinationMeasure}\",examinationValue:\"${examinationValue}\",examinationDescription:\"${examinationDescription}\",examinationFollowUp:${examinationFollowUp},examinationAttachmentName:\"${examinationAttachmentName}\",examinationAttachmentFormat:\"${examinationAttachmentFormat}\",examinationAttachmentPath:\"${examinationAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n\n    fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientExamination._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientExamination);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientExamination})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n}\n\n\nupdatePatientHistoryHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientHistoryFormData:  \", event.target.formGridHistoryTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let historyType = event.target.formGridHistoryType.value;\n\n  let historyDate = event.target.formGridHistoryDate.value;\n  if (event.target.formGridHistoryDateTodayCheckbox.checked === true) {\n    historyDate = new Date().toISOString().slice(0,10);\n  }\n\n  let historyTitle = event.target.formGridHistoryTitle.value;\n  let historyDescription = event.target.formGridHistoryDescription.value;\n  // let historyAttachmentName = event.target.formGridHistoryAttachmentName.value;\n  let historyAttachmentFormat = event.target.formGridHistoryAttachmentFormat.value;\n  let historyAttachmentPath = \"uploads/patients/\"+selectedPatientId+\"/history\";\n  // let historyAttachmentPath = event.target.formGridHistoryAttachmentPath.value;\n  let file = AuthContext._currentValue.file;\n\n  console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n    const config = {\n      bucketName: this.context.creds.s3.bucketName,\n      dirName: historyAttachmentPath,\n      region: this.context.creds.s3.region,\n      accessKeyId: this.context.creds.s3.accessKeyId,\n      secretAccessKey: this.context.creds.s3.secretAccessKey,\n    }\n  const ReactS3Client = new S3(config);\n  const newFileName = file.name;\n  const historyAttachmentName = newFileName;\n\n  ReactS3Client\n      .uploadFile(file, newFileName)\n      .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n      .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n\n  console.log(`\n    adding patient history...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    historyType: ${historyType},\n    historyDate: ${historyDate},\n    historyTitle: ${historyTitle},\n    historyDescription: ${historyDescription},\n    historyAttachmentName: ${historyAttachmentName},\n    historyAttachmentFormat: ${historyAttachmentFormat},\n    historyAttachmentPath: ${historyAttachmentPath},\n    `);\n    this.setState({userAlert: \"adding patient history...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientHistory(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{historyTitle:\"${historyTitle}\",historyType:\"${historyType}\",historyDate:\"${historyDate}\",historyDescription:\"${historyDescription}\",historyAttachmentName:\"${historyAttachmentName}\",historyAttachmentFormat:\"${historyAttachmentFormat}\",historyAttachmentPath:\"${historyAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n\n    fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientHistory._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientHistory);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientHistory})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n}\n\n\nupdatePatientAllergiesHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientAllergiesFormData:  \", event.target.formGridAllergiesTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let allergiesTitle = event.target.formGridAllergiesTitle.value;\n  let allergiesType = undefined;\n  if (event.target.formGridAllergiesTypeSelect === \"select\") {\n    allergiesType = event.target.formGridAllergiesType.value;\n  } else {\n    allergiesType = event.target.formGridAllergiesTypeSelect.value;\n  }\n  let allergiesDescription = event.target.formGridAllergiesDescription.value;\n  // let allergiesAttachmentName = event.target.formGridAllergiesAttachmentName.value;\n  let allergiesAttachmentFormat = event.target.formGridAllergiesAttachmentFormat.value;\n  let allergiesAttachmentPath = \"uploads/patients/\"+selectedPatientId+\"/allergies\";\n  // let allergiesAttachmentPath = event.target.formGridAllergiesAttachmentPath.value;\n  let file = AuthContext._currentValue.file;\n\n  console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n    const config = {\n      bucketName: this.context.creds.s3.bucketName,\n      dirName: allergiesAttachmentPath,\n      region: this.context.creds.s3.region,\n      accessKeyId: this.context.creds.s3.accessKeyId,\n      secretAccessKey: this.context.creds.s3.secretAccessKey,\n    }\n  const ReactS3Client = new S3(config);\n  const newFileName = file.name;\n  const allergiesAttachmentName = newFileName;\n\n  ReactS3Client\n      .uploadFile(file, newFileName)\n      .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n      .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n\n  console.log(`\n    adding patient allergies...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    allergiesTitle: ${allergiesTitle},\n    allergiesType: ${allergiesType},\n    allergiesDescription: ${allergiesDescription},\n    allergiesAttachmentName: ${allergiesAttachmentName},\n    allergiesAttachmentFormat: ${allergiesAttachmentFormat},\n    allergiesAttachmentPath: ${allergiesAttachmentPath},\n    `);\n    this.setState({userAlert: \"adding patient allergies...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientAllergies(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{allergiesTitle:\"${allergiesTitle}\",allergiesType:\"${allergiesType}\", allergiesDescription:\"${allergiesDescription}\",allergiesAttachmentName:\"${allergiesAttachmentName}\",allergiesAttachmentFormat:\"${allergiesAttachmentFormat}\",allergiesAttachmentPath:\"${allergiesAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n\n    fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientAllergies._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientAllergies);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientAllergies})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n\n}\n\n\nupdatePatientMedicationHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientMedicationFormData:  \", event.target.formGridMedicationTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let medicationTitle = event.target.formGridMedicationTitle.value;\n  let medicationType = event.target.formGridMedicationType.value;\n  let medicationDescription = event.target.formGridMedicationDescription.value;\n  // let medicationAttachmentName = event.target.formGridMedicationAttachmentName.value;\n  let medicationAttachmentFormat = event.target.formGridMedicationAttachmentFormat.value;\n  let medicationAttachmentPath = \"uploads/patients/\"+selectedPatientId+\"/medication\";\n  // let medicationAttachmentPath = event.target.formGridMedicationAttachmentPath.value;\n  let file = AuthContext._currentValue.file;\n\n  console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n    const config = {\n      bucketName: this.context.creds.s3.bucketName,\n      dirName: medicationAttachmentPath,\n      region: this.context.creds.s3.region,\n      accessKeyId: this.context.creds.s3.accessKeyId,\n      secretAccessKey: this.context.creds.s3.secretAccessKey,\n    }\n  const ReactS3Client = new S3(config);\n  const newFileName = file.name;\n  const medicationAttachmentName = newFileName;\n\n  ReactS3Client\n      .uploadFile(file, newFileName)\n      .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n      .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n\n  console.log(`\n    adding patient medication...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    medicationTitle: ${medicationTitle},\n    medicationType: ${medicationType},\n    medicationDescription: ${medicationDescription},\n    medicationAttachmentName: ${medicationAttachmentName},\n    medicationAttachmentFormat: ${medicationAttachmentFormat},\n    medicationAttachmentPath: ${medicationAttachmentPath},\n    `);\n    this.setState({userAlert: \"adding patient medication...\"});\n\n    const requestBody = {\n      query:`\n      mutation {updatePatientMedication(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{medicationTitle:\"${medicationTitle}\",medicationType:\"${medicationType}\" medicationDescription:\"${medicationDescription}\",medicationAttachmentName:\"${medicationAttachmentName}\",medicationAttachmentFormat:\"${medicationAttachmentFormat}\",medicationAttachmentPath:\"${medicationAttachmentPath}\"})\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n\n    fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientMedication._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientMedication);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientMedication})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n}\n\n\nupdatePatientInvestigationHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientInvestigationFormData:  \", event.target.formGridInvestigationTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let investigationDate = event.target.formGridInvestigationDate.value;\n  if (event.target.formGridInvestigationDateTodayCheckbox.checked === true) {\n    investigationDate = new Date().toISOString().slice(0,10);\n  }\n\n  let investigationTitle = event.target.formGridInvestigationTitle.value;\n  let investigationType = undefined;\n  if (event.target.formGridInvestigationTypeSelect === \"select\") {\n    investigationType = event.target.formGridInvestigationType.value;\n  } else {\n    investigationType = event.target.formGridInvestigationTypeSelect.value;\n  }\n  let investigationDescription = event.target.formGridInvestigationDescription.value;\n  // let investigationAttachmentName = event.target.formGridInvestigationAttachmentName.value;\n  let investigationAttachmentFormat = event.target.formGridInvestigationAttachmentFormat.value;\n  let investigationAttachmentPath = \"uploads/patients/\"+selectedPatientId+\"/investigation\";\n  // let investigationAttachmentPath = event.target.formGridInvestigationAttachmentPath.value;\n  let file = AuthContext._currentValue.file;\n\n  console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n    const config = {\n      bucketName: this.context.creds.s3.bucketName,\n      dirName: investigationAttachmentPath,\n      region: this.context.creds.s3.region,\n      accessKeyId: this.context.creds.s3.accessKeyId,\n      secretAccessKey: this.context.creds.s3.secretAccessKey,\n    }\n  const ReactS3Client = new S3(config);\n  const newFileName = file.name;\n  const investigationAttachmentName = newFileName;\n\n  ReactS3Client\n      .uploadFile(file, newFileName)\n      .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n      .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n\n  console.log(`\n    adding patient investigation...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    investigationDate: ${investigationDate},\n    investigationTitle: ${investigationTitle},\n    investigationType: ${investigationType},\n    investigationDescription: ${investigationDescription},\n    investigationAttachmentName: ${investigationAttachmentName},\n    investigationAttachmentFormat: ${investigationAttachmentFormat},\n    investigationAttachmentPath: ${investigationAttachmentPath},\n    `);\n    this.setState({userAlert: \"adding patient investigation...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientInvestigation(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{investigationDate:\"${investigationDate}\",investigationTitle:\"${investigationTitle}\",investigationType:\"${investigationType}\",investigationDescription:\"${investigationDescription}\",investigationAttachmentName:\"${investigationAttachmentName}\",investigationAttachmentFormat:\"${investigationAttachmentFormat}\",investigationAttachmentPath:\"${investigationAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n\n    fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientInvestigation._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientInvestigation);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientInvestigation})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n}\n\n\nupdatePatientDiagnosisHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientDiagnosisFormData:  \", event.target.formGridDiagnosisTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let diagnosisDate = event.target.formGridDiagnosisDate.value;\n  if (event.target.formGridDiagnosisDateTodayCheckbox.checked === true) {\n    diagnosisDate = new Date().toISOString().slice(0,10);\n  }\n\n  let diagnosisTitle = event.target.formGridDiagnosisTitle.value;\n  let diagnosisType = event.target.formGridDiagnosisType.value;\n  let diagnosisDescription = event.target.formGridDiagnosisDescription.value;\n  // let diagnosisAttachmentName = event.target.formGridDiagnosisAttachmentName.value;\n  let diagnosisAttachmentFormat = event.target.formGridDiagnosisAttachmentFormat.value;\n  let diagnosisAttachmentPath = \"uploads/patients/\"+selectedPatientId+\"/diagnosis\";\n  // let diagnosisAttachmentPath = event.target.formGridDiagnosisAttachmentPath.value;\n  let file = AuthContext._currentValue.file;\n\n  console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n    const config = {\n      bucketName: this.context.creds.s3.bucketName,\n      dirName: diagnosisAttachmentPath,\n      region: this.context.creds.s3.region,\n      accessKeyId: this.context.creds.s3.accessKeyId,\n      secretAccessKey: this.context.creds.s3.secretAccessKey,\n    }\n  const ReactS3Client = new S3(config);\n  const newFileName = file.name;\n  const diagnosisAttachmentName = newFileName;\n\n  ReactS3Client\n      .uploadFile(file, newFileName)\n      .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n      .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n\n  console.log(`\n    adding patient diagnosis...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    diagnosisDate: ${diagnosisDate},\n    diagnosisTitle: ${diagnosisTitle},\n    diagnosisType: ${diagnosisType},\n    diagnosisDescription: ${diagnosisDescription},\n    diagnosisAttachmentName: ${diagnosisAttachmentName},\n    diagnosisAttachmentFormat: ${diagnosisAttachmentFormat},\n    diagnosisAttachmentPath: ${diagnosisAttachmentPath},\n    `);\n    this.setState({userAlert: \"adding patient diagnosis...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientDiagnosis(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{diagnosisDate:\"${diagnosisDate}\",diagnosisTitle:\"${diagnosisTitle}\",diagnosisType:\"${diagnosisType}\",diagnosisDescription:\"${diagnosisDescription}\",diagnosisAttachmentName:\"${diagnosisAttachmentName}\",diagnosisAttachmentFormat:\"${diagnosisAttachmentFormat}\",diagnosisAttachmentPath:\"${diagnosisAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n\n    fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientDiagnosis._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientDiagnosis);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientDiagnosis})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n}\n\n\nupdatePatientTreatmentHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientTreatmentFormData:  \", event.target.formGridTreatmentTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let treatmentDate = event.target.formGridTreatmentDate.value;\n  if (event.target.formGridTreatmentDateTodayCheckbox.checked === true) {\n    treatmentDate = new Date().toISOString().slice(0,10);\n  }\n\n  let treatmentTitle = event.target.formGridTreatmentTitle.value;\n  let treatmentDescription = event.target.formGridTreatmentDescription.value;\n  let treatmentDose = event.target.formGridTreatmentDose.value;\n  let treatmentFrequency = event.target.formGridTreatmentFrequency.value;\n  let treatmentType = undefined;\n  if (event.target.formGridInvestigationTypeSelect === \"select\") {\n    treatmentType = event.target.formGridTreatmentType.value;\n  } else {\n    treatmentType = event.target.formGridTreatmentTypeSelect.value;\n  }\n  // let treatmentAttachmentName = event.target.formGridTreatmentAttachmentName.value;\n  let treatmentAttachmentFormat = event.target.formGridTreatmentAttachmentFormat.value;\n  let treatmentAttachmentPath = \"uploads/patients/\"+selectedPatientId+\"/treatment\";\n  // let treatmentAttachmentPath = event.target.formGridTreatmentAttachmentPath.value;\n  let file = AuthContext._currentValue.file;\n\n  console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n    const config = {\n      bucketName: this.context.creds.s3.bucketName,\n      dirName: treatmentAttachmentPath,\n      region: this.context.creds.s3.region,\n      accessKeyId: this.context.creds.s3.accessKeyId,\n      secretAccessKey: this.context.creds.s3.secretAccessKey,\n    }\n  const ReactS3Client = new S3(config);\n  const newFileName = file.name;\n  const treatmentAttachmentName = newFileName;\n\n  ReactS3Client\n      .uploadFile(file, newFileName)\n      .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n      .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n\n  console.log(`\n    adding patient treatment...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    treatmentDate: ${treatmentDate},\n    treatmentTitle: ${treatmentTitle},\n    treatmentDescription: ${treatmentDescription},\n    treatmentDose: ${treatmentDose},\n    treatmentFrequency: ${treatmentFrequency},\n    treatmentType: ${treatmentType},\n    treatmentAttachmentName: ${treatmentAttachmentName},\n    treatmentAttachmentFormat: ${treatmentAttachmentFormat},\n    treatmentAttachmentPath: ${treatmentAttachmentPath},\n    `);\n    this.setState({userAlert: \"adding patient treatment...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientTreatment(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{treatmentDate:\"${treatmentDate}\",treatmentTitle:\"${treatmentTitle}\",treatmentType:\"${treatmentType}\",treatmentDescription:\"${treatmentDescription}\",treatmentDose:\"${treatmentDose}\",treatmentFrequency:\"${treatmentFrequency}\",treatmentAttachmentName:\"${treatmentAttachmentName}\",treatmentAttachmentFormat:\"${treatmentAttachmentFormat}\",treatmentAttachmentPath:\"${treatmentAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `}\n\n\n    fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientTreatment._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientTreatment);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientTreatment})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n}\n\n\n\nupdatePatientBillingHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientBillingFormData:  \", event.target.formGridBillingTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let billingDate = event.target.formGridBillingDate.value;\n  if (event.target.formGridBillingDateTodayCheckbox.checked === true) {\n    billingDate = new Date().toISOString().slice(0,10);\n  }\n\n  let billingTitle = event.target.formGridBillingTitle.value;\n  let billingType = event.target.formGridBillingType.value;\n  let billingDescription = event.target.formGridBillingDescription.value;\n  let billingAmount = event.target.formGridBillingAmount.value;\n  let billingPaid = event.target.formGridBillingPaid.value;\n  let billingNotes = event.target.formGridBillingNotes.value;\n  // let billingAttachmentName = event.target.formGridBillingAttachmentName.value;\n  let billingAttachmentFormat = event.target.formGridBillingAttachmentFormat.value;\n  let billingAttachmentPath = \"uploads/patients/\"+selectedPatientId+\"/billing\";\n  // let billingAttachmentPath = event.target.formGridBillingAttachmentPath.value;\n  let file = AuthContext._currentValue.file;\n\n  console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n    const config = {\n      bucketName: this.context.creds.s3.bucketName,\n      dirName: billingAttachmentPath,\n      region: this.context.creds.s3.region,\n      accessKeyId: this.context.creds.s3.accessKeyId,\n      secretAccessKey: this.context.creds.s3.secretAccessKey,\n    }\n  const ReactS3Client = new S3(config);\n  const newFileName = file.name;\n  const billingAttachmentName = newFileName;\n\n  ReactS3Client\n      .uploadFile(file, newFileName)\n      .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n      .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n\n  console.log(`\n    adding patient billing...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    billingDate: ${billingDate},\n    billingTitle: ${billingTitle},\n    billingType: ${billingType},\n    billingDescription: ${billingDescription},\n    billingAmount: ${billingAmount},\n    billingPaid: ${billingPaid},\n    billingNotes: ${billingNotes},\n    billingAttachmentName: ${billingAttachmentName},\n    billingAttachmentFormat: ${billingAttachmentFormat},\n    billingAttachmentPath: ${billingAttachmentPath},\n    `);\n    this.setState({userAlert: \"adding patient billing...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientBilling(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{billingDate:\"${billingDate}\",billingTitle:\"${billingTitle}\",billingType:\"${billingType}\",billingDescription:\"${billingDescription}\",billingAmount:${billingAmount},billingPaid:${billingPaid},billingNotes:\"${billingNotes}\",billingAttachmentName:\"${billingAttachmentName}\",billingAttachmentFormat:\"${billingAttachmentFormat}\",billingAttachmentPath:\"${billingAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n\n    fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientBilling._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientBilling);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientBilling})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n\n}\n\nupdatePatientAttachmentHandler = (event) => {\n\n    const token = this.context.token;\n    const userId = this.context.userId;\n    let selectedPatientId = this.context.selectedPatient._id;\n\n    // if(this.context.user.role !== 'admin') {\n    //   console.log(\"No edit permission!!\");\n    //   return;\n    // }\n\n    console.log(`\n        UpdatePatientAttachmentFormData:\n      `);\n\n    this.setState({ updating: false , patientUpdateField: null });\n\n    // let attachmentName = event.target.formGridPatientAttachmentName.value;\n    let attachmentFormat = event.target.formGridPatientAttachmentFormat.value;\n    let attachmentPath = \"uploads/patients/\"+selectedPatientId+\"/attachments\";\n    // let attachmentPath = event.target.formGridPatientAttachmentPath.value;\n    let file = AuthContext._currentValue.file;\n\n    console.log(`\n      uploading to s3...\n      file.name: ${file.name},\n      AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n      `);\n      const config = {\n        bucketName: this.context.creds.s3.bucketName,\n        dirName: attachmentPath,\n        region: this.context.creds.s3.region,\n        accessKeyId: this.context.creds.s3.accessKeyId,\n        secretAccessKey: this.context.creds.s3.secretAccessKey,\n      }\n    const ReactS3Client = new S3(config);\n    const newFileName = file.name;\n    const attachmentName = newFileName;\n\n    ReactS3Client\n        .uploadFile(file, newFileName)\n        .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n        .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n    if (\n      attachmentName.trim().length === 0 ||\n      attachmentFormat.trim().length === 0 ||\n      attachmentPath.trim().length === 0\n    ) {\n      console.log(\"blank fields detected!!!...Please try again...\");\n      this.setState({userAlert: \"blank fields detected!!!...Please try again...\"});\n      return;\n    }\n\n    this.setState({userAlert: \"adding patient attachment\"});\n\n    const requestBody = {\n                    query:`\n                    mutation {updatePatientAttachment(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{attachmentName:\"${attachmentName}\",attachmentFormat:\"${attachmentFormat}\",attachmentPath:\"${attachmentFormat}\"})\n                    {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n            `}\n\n\n    fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            console.log(\"response data... \" + JSON.stringify(resData.data));\n\n            const updatedPatientId = resData.data.updatePatientAttachment._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.updatePatientAttachment);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientAttachment})\n            this.fetchPatients();\n          })\n          .catch(err => {\n            console.log(err);\n            this.setState({userAlert: err});\n          });\n\n}\n\nupdatePatientNoteHandler = (event) => {\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(`\n      UpdatePatientNoteFormData:\n      ${event.target.formGridNote.value}\n    `);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n    let note = event.target.formGridNote.value;\n\n    if (\n      note.trim().length === 0\n    ) {\n      console.log(\"Can't Submit a blank form!!!...Please try again...\");\n      this.setState({userAlert: \"Can't Submit a blank form!!!...Please try again...\"});\n      return;\n    }\n\n    this.setState({userAlert: \"adding patient note\"});\n\n    const requestBody = {\n              query:`\n              mutation {updatePatientNotes(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{notes:\"${note}\"})\n              {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n            `}\n\n\n    fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            console.log(\"response data... \" + JSON.stringify(resData.data));\n\n            const updatedPatientId = resData.data.updatePatientNotes._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.updatePatientNotes);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientNotes})\n            this.fetchPatients();\n          })\n          .catch(err => {\n            console.log(err);\n            this.setState({userAlert: err});\n          });\n\n}\nupdatePatientTagHandler = (event) => {\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(`\n      UpdatePatientTagFormData:\n      ${event.target.formGridTag.value}\n    `);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n    let tag = event.target.formGridTag.value;\n\n    if (\n      tag.trim().length === 0\n    ) {\n      console.log(\"Can't Submit a blank form!!!...Please try again...\");\n      this.setState({userAlert: \"Can't Submit a blank form!!!...Please try again...\"});\n      return;\n    }\n\n    const requestBody = {\n                    query:`\n                    mutation {updatePatientTags(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{tag:\"${tag}\"})\n                    {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n            `}\n    this.setState({userAlert: \"adding patient tag\"});\n\n\n    fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            console.log(\"response data... \" + JSON.stringify(resData.data));\n\n            const updatedPatientId = resData.data.updatePatientTags._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.updatePatientTags);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            this.fetchPatients();\n          })\n          .catch(err => {\n            console.log(err);\n            this.setState({userAlert: err});\n          });\n\n\n}\n\n\nmodalConfirmSearchHandler = (event) => {\n  console.log(\"SearchPatientForm:  \");\n\n\n  let userId = this.context.userId;\n\n    console.log(\"SearchPatientFormData:  \", event.target.formBasicField.value);\n    this.setState({ searching: false });\n\n    let field = null;\n    let query = event.target.formBasicQuery.value;\n    if (event.target.formBasicFieldSelect.value === \"select\") {\n      field = event.target.formBasicField.value;\n    } else {\n      field = event.target.formBasicFieldSelect.value;\n    }\n\n    this.setState({\n      patientSearchField: field,\n      patientSearchQuery: query,\n    })\n\n    if (\n      field.trim().length === 0 ||\n      query.trim().length === 0\n    ) {\n      console.log(\"blank fields detected!!!...Please try again...\");\n      return;\n    }\n\n\n    this.setState({userAlert: \"Searching for Patient:  \"});\n\n    const requestBody = {\n      query: `\n        query {\n          getPatientField(userId: \"${userId}\", field: \"${field}\", query: \"${query}\" )\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n    const token = this.context.token;\n\n    fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n        const responseAlert = JSON.stringify(resData.data).slice(2,15);\n        this.setState({userAlert: responseAlert});\n\n        const searchPatients = resData.data.getPatientField;\n\n        this.setState({ searchPatients: searchPatients})\n        console.log(\"state.searchPatients:  \", this.state.searchPatients);\n        // this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n}\n\nmodalConfirmSearchIdHandler = (event) => {\n  console.log(\"SearchPatientIdFormData\");\n\n  let userId = this.context.userId;\n  this.setState({ searching: false });\n\n  const patientId = event.target.formBasicId.value;\n\n  const requestBody = {\n    query: `\n      query {getPatientId(userId:\"${userId}\",patientId:\"${patientId}\")\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{_id,title,time,location},consultant{date,reference{_id,name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `}\n\n  const token = this.context.token;\n\n  fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n    method: 'POST',\n    body: JSON.stringify(requestBody),\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + token\n    }\n  })\n    .then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n      return res.json();\n    })\n    .then(resData => {\n      console.log(\"response data... \" + JSON.stringify(resData));\n      const responseAlert = JSON.stringify(resData.data).slice(2,25);\n      this.setState({userAlert: responseAlert});\n\n      const searchPatients = resData.data.getPatientId;\n\n      this.setState({ searchPatients: [searchPatients]})\n      console.log(\"state.searchPatients:  \", this.state.searchPatients);\n      // this.fetchUsers();\n    })\n    .catch(err => {\n      console.log(err);\n      this.setState({userAlert: err});\n    });\n}\n\n\nmodalConfirmSearchNameHandler = (event) => {\n  console.log(\"SearchPatientNameFormData:\", event.target.formBasicName.value);\n\n  // let userId = this.context.userId;\n  this.setState({ searching: false });\n\n  let patients = this.state.patients;\n  const regex = new RegExp(event.target.formBasicName.value,\"i\");\n  console.log(`\n    regex: ${regex},\n    `);\n    let result = patients.filter(patient => patient.name.match(regex))\n    console.log(`\n      result: ${JSON.stringify(result)}\n      `);\n\n      this.setState({ searchPatients: result})\n\n}\n\n  getPatientVisit = (event) => {\n\n    const selectedPatient = this.state.selectedPatient;\n    event.preventDefault();\n    console.log(`\n        getUserVisit function:\n        selectedPatient.consultant: ${JSON.stringify(selectedPatient.consultant)},\n        selectedPatient.complaints: ${JSON.stringify(selectedPatient.complaints)},\n        visitDate: ${new Date(event.target.formBasicVisitDate.value)},\n        complaintDate: ${new Date(1580515200*1000)},\n      `);\n\n    let visitDate = new Date(event.target.formBasicVisitDate.value).toISOString().substring(0, 10);\n    let visitSurveys = selectedPatient.surveys.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    let visitConsultants = selectedPatient.consultant.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    let visitComplaints = selectedPatient.complaints.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    // let visitSurveys = selectedPatient.surveys.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString() === visitDate);\n    let visitVitals = selectedPatient.vitals.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    let visitExaminations = selectedPatient.examination.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    let visitHistory = selectedPatient.history.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    let visitInvestigations = selectedPatient.investigation.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    let visitDiagnosis = selectedPatient.diagnosis.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    let visitTreatments = selectedPatient.treatment.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    let visitBilling = selectedPatient.billing.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n\n      const visit = {\n        date: visitDate,\n        patientName: this.context.selectedPatient.name,\n        consultant: visitConsultants,\n        complaint: visitComplaints,\n        examination: visitExaminations,\n        survey: visitSurveys,\n        vitals: visitVitals,\n        history: visitHistory,\n        investigation: visitInvestigations,\n        diagnosis: visitDiagnosis,\n        treatment: visitTreatments,\n        billing: visitBilling,\n      };\n\n      console.log(`\n        visit: ${JSON.stringify(visit)},\n        `);\n        this.context.visit = visit;\n        this.setState({visit: visit});\n\n  }\n\n\n  modalCancelHandler = () => {\n    this.setState({ creating: false, updating: false, searching: false, selectedPatient: null });\n  };\n\n\n  fetchPatients() {\n    console.log(\"fetch patients function:  \");\n    const userId = this.context.userId;\n    const token = this.context.token;\n\n    this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n          query {patients(userId:\"${userId}\")\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{_id,title,time,location,date},consultant{date,reference{_id,name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n        `\n    };\n\n    fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"resData\", resData);\n        const patients = resData.data.patients;\n        console.log(patients);\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({userAlert: responseAlert});\n\n        this.context.patients = this.state.patients;\n        if (this.isActive) {\n          this.setState({ patients: patients, isLoading: false });\n        }\n\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n        if (this.isActive) {\n          this.setState({ isLoading: false });\n        }\n      });\n  }\n\n  fetchPatientsAsc = () => {\n    console.log(\"fetch patients function:  \");\n    const userId = this.context.userId;\n    const token = this.context.token;\n\n    // this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n          query {patientsNameAsc(userId:\"${userId}\")\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{_id,title,time,location,date},consultant{date,reference{_id,name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n        `\n    };\n\n    fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"resData\", resData);\n        const patients = resData.data.patientsNameAsc;\n        console.log(patients);\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({userAlert: responseAlert});\n\n        this.context.patients = patients;\n        this.setState({ patients: patients});\n        // if (this.isActive) {\n        //   this.setState({ patients: patients, isLoading: false });\n        // }\n\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n        // if (this.isActive) {\n        //   this.setState({ isLoading: false });\n        // }\n      });\n  }\n\n  fetchPatientsDesc = () => {\n    console.log(\"fetch patients function:  \");\n    const userId = this.context.userId;\n    const token = this.context.token;\n\n    // this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n          query {patientsNameDesc(userId:\"${userId}\")\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{_id,title,time,location,date},consultant{date,reference{_id,name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n        `\n    };\n\n    fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"resData\", resData);\n        const patients = resData.data.patientsNameDesc;\n        console.log(patients);\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({userAlert: responseAlert});\n\n        this.context.patients = patients\n        // if (this.isActive) {\n        //   this.setState({ patients: patients, isLoading: false });\n        // }\n        this.setState({ patients: patients});\n\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n        // if (this.isActive) {\n        //   this.setState({ isLoading: false });\n        // }\n      });\n  }\n\n\n  modalDeleteHandler = () => {\n    console.log(\"deleting patient...selectedPatient:  \", this.context.selectedPatient);\n\n    const selectedPatientId = this.context.selectedPatient._id;\n    const userId = this.context.selectedUser._id;\n\n    if(this.context.user.role !== 'admin') {\n      console.log(\"Not the Admin! No edit permission!!\");\n    }\n\n    this.setState({deleting: true});\n\n\n    const requestBody = {\n      query: `\n          mutation {deletePatient(userId:\"${userId}\",patientId:\"${selectedPatientId}\")\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n        `\n    };\n\n    fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        let deletedPatient = resData.data.deletePatient;\n        console.log(deletedPatient);\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({userAlert: responseAlert});\n\n        let deletedPatientId = deletedPatient._id;\n        deletedPatient = this.state.patients.find(e => e._id === deletedPatientId);\n        const deletedPatientPos = this.state.patients.indexOf(deletedPatient);\n        const slicedArray = this.state.patients.splice(deletedPatientPos, 1);\n        console.log(\"deletedPatient:  \", JSON.stringify(deletedPatient),\"  deletedUserPos:  \", deletedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.setState({ deleting: false });\n\n        this.fetchPatients();\n\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n        if (this.isActive) {\n          this.setState({ deleting: false });\n        }\n      });\n  }\n\n\n  deletePatientInsuranceItem = (props) => {\n\n    let token = this.context.token;\n    let userId = this.context.userId;\n    let patientId = this.state.selectedPatient._id;\n\n    console.log(`\n      delete patient insurance item:\n      props: ${JSON.stringify(props)},\n      token: ${token},\n      userId: ${userId},\n      patientId: ${patientId},\n      `);\n\n      const requestBody = {\n        query: `\n         mutation {deletePatientInsurance (userId:\"${userId}\", patientId:\"${patientId}\",insuranceCompany:\"${props.company}\",insuranceNumber:\"${props.number}\")\n         {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `};\n\n          fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n              'Content-Type': 'application/json',\n              Authorization: 'Bearer ' + token\n            }\n          })\n            .then(res => {\n              if (res.status !== 200 && res.status !== 201) {\n                throw new Error('Failed!');\n              }\n              return res.json();\n            })\n            .then(resData => {\n              let deletedPatient = resData.data.deletePatientInsurance;\n              console.log(deletedPatient);\n\n              const updatedPatientId = resData.data.deletePatientInsurance._id;\n              const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n              const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n              const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n              console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n              this.state.patients.push(resData.data.deletePatientInsurance);\n              this.context.patients = this.state.patients;\n              const responseAlert = JSON.stringify(resData.data).slice(2,25);\n              this.setState({ userAlert: responseAlert})\n              // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientInsurance})\n              this.fetchPatients();\n\n            })\n            .catch(err => {\n              console.log(err);\n            });\n\n  }\n\n  deletePatientAppointmentItem = (props) => {\n\n    let token = this.context.token;\n    let userId = this.context.userId;\n    let patientId = this.state.selectedPatient._id;\n    let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n    console.log(`\n      delete patient appointment item:\n      props: ${JSON.stringify(props)},\n      token: ${token},\n      userId: ${userId},\n      patientId: ${patientId},\n      appointment date: ${date},\n      `);\n\n      const requestBody = {\n        query: `\n         mutation {deletePatientAppointment (userId:\"${userId}\", patientId:\"${patientId}\",appointmentId:\"${props._id}\",appointmentDate:\"${date}\")\n         {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `};\n\n          fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n              'Content-Type': 'application/json',\n              Authorization: 'Bearer ' + token\n            }\n          })\n            .then(res => {\n              if (res.status !== 200 && res.status !== 201) {\n                throw new Error('Failed!');\n              }\n              return res.json();\n            })\n            .then(resData => {\n              let deletedPatient = resData.data.deletePatientAppointment;\n              console.log(deletedPatient);\n\n              const updatedPatientId = resData.data.deletePatientAppointment._id;\n              const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n              const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n              const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n              console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n              this.state.patients.push(resData.data.deletePatientAppointment);\n              this.context.patients = this.state.patients;\n              const responseAlert = JSON.stringify(resData.data).slice(2,25);\n              this.setState({ userAlert: responseAlert})\n              this.fetchPatients();\n\n            })\n            .catch(err => {\n              console.log(err);\n            });\n}\n\n  deletePatientConsultantItem = (props) => {\n\n    let token = this.context.token;\n    let userId = this.context.userId;\n    let patientId = this.state.selectedPatient._id;\n    let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n    console.log(`\n      delete patient consultant item:\n      props: ${JSON.stringify(props)},\n      token: ${token},\n      userId: ${userId},\n      patientId: ${patientId},\n      consultant date: ${date},\n      `);\n\n      const requestBody = {\n        query: `\n         mutation {deletePatientConsultant (userId:\"${userId}\", patientId:\"${patientId}\",consultantId:\"${props.reference.id}\",consultantDate:\"${date}\")\n         {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `};\n\n          fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n              'Content-Type': 'application/json',\n              Authorization: 'Bearer ' + token\n            }\n          })\n            .then(res => {\n              if (res.status !== 200 && res.status !== 201) {\n                throw new Error('Failed!');\n              }\n              return res.json();\n            })\n            .then(resData => {\n              let deletedPatient = resData.data.deletePatientConsultant;\n              console.log(deletedPatient);\n\n              const updatedPatientId = resData.data.deletePatientConsultant._id;\n              const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n              const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n              const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n              console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n              this.state.patients.push(resData.data.deletePatientConsultant);\n              this.context.patients = this.state.patients;\n              const responseAlert = JSON.stringify(resData.data).slice(2,25);\n              this.setState({ userAlert: responseAlert})\n              this.fetchPatients();\n\n            })\n            .catch(err => {\n              console.log(err);\n            });\n}\n\ndeletePatientNextOfKinItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n\n  console.log(`\n    delete patient nextOfKin item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientNextOfKin (userId:\"${userId}\", patientId:\"${patientId}\",nextOfKinName:\"${props.name}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientNextOfKin;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientNextOfKin._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientNextOfKin);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientComplaintItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n  let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n  console.log(`\n    delete patient Complaint item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    complaint date: ${date},\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientComplaint (userId:\"${userId}\", patientId:\"${patientId}\",complaintTitle:\"${props.title}\",complaintDate:\"${date}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientComplaint;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientComplaint._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientComplaint);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientSurveyItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n  let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n  console.log(`\n    delete patient Survey item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    survey date: ${date}\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientSurvey (userId:\"${userId}\", patientId:\"${patientId}\",surveyTitle:\"${props.title}\",surveyDate:\"${date}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientSurvey;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientSurvey._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientSurvey);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientVitalsItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n  let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n  console.log(`\n    delete patient Vitals item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    vitals date: ${date},\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientVitals (userId:\"${userId}\", patientId:\"${patientId}\",vitalsDate:\"${date}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientVitals;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientVitals._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientVitals);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientExaminationItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n  let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n  console.log(`\n    delete patient Examination item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    examination date: ${date},\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientExamination (userId:\"${userId}\", patientId:\"${patientId}\",examinationType:\"${props.type}\",examinationDate:\"${date}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientExamination;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientExamination._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientExamination);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientHistoryItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n  let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n  console.log(`\n    delete patient History item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    history date: ${date},\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientHistory (userId:\"${userId}\", patientId:\"${patientId}\",historyTitle:\"${props.title}\",historyDate:\"${date}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientHistory;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientHistory._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientHistory);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientAllergiesItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n\n  console.log(`\n    delete patient Allergies item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientAllergies (userId:\"${userId}\", patientId:\"${patientId}\",allergiesTitle:\"${props.title}\",allergiesType:\"${props.type}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientAllergies;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientAllergies._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientAllergies);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientMedicationItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n\n  console.log(`\n    delete patient Medication item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientMedication (userId:\"${userId}\", patientId:\"${patientId}\",medicationTitle:\"${props.title}\",medicationType:\"${props.type}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientMedication;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientMedication._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientMedication);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert});\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientInvestigationItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n  let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n  console.log(`\n    delete patient Investigation item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    investigation date: ${date},\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientInvestigation (userId:\"${userId}\", patientId:\"${patientId}\",investigationDate:\"${date}\",investigationTitle:\"${props.title}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientInvestigation;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientInvestigation._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientInvestigation);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientDiagnosisItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n  let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n  console.log(`\n    delete patient Diagnosis item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    diagnosis date: ${date}\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientDiagnosis (userId:\"${userId}\",patientId:\"${patientId}\",diagnosisDate:\"${date}\",diagnosisTitle:\"${props.title}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientDiagnosis;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientDiagnosis._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientDiagnosis);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert});\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientTreatmentItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n  let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n  console.log(`\n    delete patient Treatment item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    treatment date: ${date},\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientTreatment (userId:\"${userId}\", patientId:\"${patientId}\",treatmentDate:\"${date}\",treatmentTitle:\"${props.title}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientTreatment;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientTreatment._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientTreatment);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert});\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientBillingItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n  let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n  console.log(`\n    delete patient Billing item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    billing date: ${date},\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientBilling (userId:\"${userId}\", patientId:\"${patientId}\",billingDate:\"${date}\",billingTitle:\"${props.title}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientBilling;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientBilling._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientBilling);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert});\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientAttachmentItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n\n  // console.log(`\n  //   deleting from s3...\n  //   file.name: ${props.name},\n  //   `);\n  //\n  //   const config = {\n  //     bucketName: this.context.creds.s3.bucketName,\n  //     dirName: props.path,\n  //     region: this.context.creds.s3.region,\n  //     accessKeyId: this.context.creds.s3.accessKeyId,\n  //     secretAccessKey: this.context.creds.s3.secretAccessKey,\n  //   }\n  // const ReactS3Client = new S3(config);\n  // const filename = props.name;\n  // // const attachmentName = newFileName;\n  // //\n  // S3FileUpload\n  // .deleteFile(filename, config)\n  // .then(response => console.log(response))\n  // .catch(err => console.error(err))\n\n  console.log(`\n    delete patient Attachment item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientAttachment (userId:\"${userId}\", patientId:\"${patientId}\",attachmentName:\"${props.name}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientAttachment;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientAttachment._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientAttachment);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert});\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientNoteItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n\n  console.log(`\n    delete patient Note item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    `);\n\n    const requestBody = {\n      query: `\n\n    `};\n\n        fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientNote;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientNote._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientNote);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert});\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientTagItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n\n  console.log(`\n    delete patient Tag item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    `);\n\n    const requestBody = {\n      query: `\n\n    `};\n\n        fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientTag;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientTag._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientTag);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert});\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n            this.setState({ userAlert: err})\n          });\n}\n\n\n  updatePatientSpecial (event) {\n\n    console.log(\"special field to update:  \", event.target.value);\n    const field = event.target.value;\n    this.setState({ patientUpdateField: field});\n\n  }\n\n  onViewAttachment = (attachment) => {\n    console.log(`\n      setting up attachment viewer...\n      attachment: ${JSON.stringify(attachment)}\n      `);\n      this.setState({showAttachment: true})\n\n      const file = \"https://ent-emr-bucket.s3-us-east-2.amazonaws.com/\"+attachment.path+\"/\"+attachment.name;\n      const type = attachment.format;\n\n      this.setState({showThisAttachmentFile: file, showThisAttachmentType: type})\n  }\n\n  closeAttachmentView = () => {\n    console.log(`\n      closing attachment viewer...\n      `);\n      this.setState({showAttachment: false})\n  }\n\n  createPdf = (patient) => {\n    console.log(`\n        creating pdf...\n        user: ${JSON.stringify(patient)}\n      `);\n\n      const pdfData = {\n        title: patient.name,\n        body: patient.dob,\n      };\n\n    this.setState({createPdf: true, pdfData: pdfData})\n  }\n\n  closePdfCreator = () => {\n    console.log(`\n      closing pdf creator...\n      `);\n      this.setState({createPdf: false, pdfData: null} )\n  }\n\n\n  showDetailHandler = patientId => {\n\n    this.setState(prevState => {\n      const selectedPatient = prevState.patients.find(e => e._id === patientId);\n      this.context.selectedPatient = selectedPatient;\n      this.context.selectedPatientId = selectedPatient._id;\n      console.log(\"selectedPatient:  \", selectedPatient);\n      return { selectedPatient: selectedPatient };\n    });\n  };\n\n\n  componentWillUnmount() {\n    this.isActive = false;\n  }\n\n  render() {\n    return (\n\n    <React.Fragment>\n    {this.state.showAttachment === true && (\n      <AttachmentViewer\n        onCloseAttachmentView={this.closeAttachmentView}\n        attachmentFile={this.state.showThisAttachmentFile}\n        attachmentType={this.state.showThisAttachmentType}\n      />\n    )}\n\n    {this.state.createPdf === true && (\n        <PdfCreator\n          pdfData={this.state.pdfData}\n          onClosePdfCreator={this.closePdfCreator}\n        />\n    )}\n\n    <Accordion>\n\n    <Row>\n    <Col md={3} className=\"MasterCol1\">\n\n    <AlertBox\n          authUserId={this.context.userId}\n          alert={this.state.userAlert}\n        />\n      <SidebarPage/>\n    </Col>\n\n    <Col md={9} className=\"MasterCol2\">\n    <Container className=\"containerCombinedDetail\">\n\n    <Tab.Container id=\"left-tabs-example\" defaultActiveKey=\"patientDetail\">\n      <Row>\n        <Col sm={2}>\n          <Nav variant=\"pills\" className=\"flex-column\">\n            <Nav.Item>\n              <Nav.Link eventKey=\"MasterList\">MASTER LIST</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientDetail\">Selected</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientCreate\">Create New</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"disabled\" disabled>Edit:</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditDemographics\">Demographics</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditField\">Single Field</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"disabled\" disabled>Add:</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditConsultant\">Consultant</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditInsurance\">Insurance</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditNextOfKin\">Next of Kin</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditComplaint\">Complaint</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditSurvey\">Survey</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditVitals\">Vitals</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditExamination\">Examination</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditHistory\">History</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditAllergies\">Allergies</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditMedication\">Medication</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditInvestigation\">Investigation</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditDiagnosis\">Diagnosis</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditTreatment\">Treatment</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditBilling\">Billing</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditAttachment\">Attachment</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditNote\">Note</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditTag\">Tag</Nav.Link>\n            </Nav.Item>\n\n            <Nav.Item>\n              <Nav.Link eventKey=\"disabled\" disabled>Search:</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"SearchInput\">Input</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"SearchResult\">Search</Nav.Link>\n            </Nav.Item>\n          </Nav>\n        </Col>\n        <Col sm={10}>\n          <Tab.Content>\n            <Tab.Pane eventKey=\"patientDetail\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.isLoading === false &&\n                this.state.selectedPatient !== null\n                &&\n                (<PatientDetail\n                  authUserId={this.context.userId}\n                  token={this.context.token}\n                  patient={this.state.selectedPatient}\n                  onEdit={this.startUpdatePatientHandler}\n                  canDelete={this.state.canDelete}\n                  onDelete={this.modalDeleteHandler}\n                  onGetVisit={this.getPatientVisit}\n                  visit={this.context.visit}\n                  fetchUsers={this.fetchUsers}\n                  appointmentDelete={this.deletePatientAppointmentItem}\n                  consultantDelete={this.deletePatientConsultantItem}\n                  insuranceDelete={this.deletePatientInsuranceItem}\n                  nextOfKinDelete={this.deletePatientNextOfKinItem}\n                  complaintDelete={this.deletePatientComplaintItem}\n                  surveyDelete={this.deletePatientSurveyItem}\n                  vitalsDelete={this.deletePatientVitalsItem}\n                  examinationDelete={this.deletePatientExaminationItem}\n                  historyDelete={this.deletePatientHistoryItem}\n                  allergiesDelete={this.deletePatientAllergiesItem}\n                  medicationDelete={this.deletePatientMedicationItem}\n                  investigationDelete={this.deletePatientInvestigationItem}\n                  diagnosisDelete={this.deletePatientDiagnosisItem}\n                  treatmentDelete={this.deletePatientTreatmentItem}\n                  billingDelete={this.deletePatientBillingItem}\n                  attachmentDelete={this.deletePatientAttachmentItem}\n                  noteDelete={this.deletePatientNoteItem}\n                  tagDelete={this.deletePatientTagItem}\n                  onViewAttachment={this.onViewAttachment}\n                  onCreatePdf={this.createPdf}\n                  />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientCreate\">\n              <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" onClick={this.startCreatePatientHandler} >Create NEW Patient Profile</Button>\n              {\n                this.state.creating && (\n                  <CreatePatientForm\n                  canCancel\n                    canConfirm\n                    onCancel={this.modalCancelHandler}\n                    onConfirm={this.modalConfirmHandler}\n                    confirmText=\"Confirm\"\n                  />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditDemographics\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" onClick={this.startUpdatePatientHandler}>Edit Demographics</Button>\n              )}\n              {this.state.updating &&\n                this.state.selectedPatient !== null\n                && (\n                <UpdatePatientForm\n                authUserId={this.context.userId}\n                canCancel\n                  canConfirm\n                  onCancel={this.modalCancelHandler}\n                  onConfirm={this.modalConfirmUpdateHandler}\n                  confirmText=\"Confirm\"\n                  patient={this.state.selectedPatient}\n                />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditField\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" onClick={this.startUpdatePatientHandler}>Edit a Single Field</Button>\n              )}\n              {this.state.updating &&\n                this.state.selectedPatient !== null\n                && (\n                  <UpdatePatientFieldForm\n                    authUserId={this.context.userId}\n                    canCancel\n                    canConfirm\n                    onCancel={this.modalCancelHandler}\n                    onConfirm={this.modalConfirmUpdateFieldHandler}\n                    confirmText=\"Confirm\"\n                    patient={this.state.selectedPatient}\n                  />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditConsultant\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='consultant' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add a Consultant</Button>\n              )}\n              {this.state.patientUpdateField === 'consultant' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientConsultantForm\n                authUserId={this.context.userId}\n                canCancel\n                  canConfirm\n                  onCancel={this.modalCancelHandler}\n                  onConfirm={this.updatePatientConsultantHandler}\n                  confirmText=\"Confirm\"\n                  consultant={this.context.selectedUser}\n                />\n              )}\n              {this.state.patientUpdateField === 'consultant' &&\n              this.state.selectedPatient !== null &&\n              (\n                <Row>\n                <p>Add Consultant: {this.context.selectedUser.name}</p>\n                <p> To Paitient: {this.state.selectedPatient.name} ??</p>\n                <hr/>\n                </Row>\n              )}\n              {this.state.patientUpdateField === 'consultant' &&\n              this.state.selectedPatient !== null &&\n              (\n                <Row>\n                <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                  Select someone from the Staff page\n                </Button>\n                </Row>\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditInsurance\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='insurance' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Insurance</Button>\n              )}\n              {this.state.patientUpdateField === 'insurance' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientInsuranceForm\n                authUserId={this.context.userId}\n                canCancel\n                  canConfirm\n                  onCancel={this.modalCancelHandler}\n                  onConfirm={this.updatePatientInsuranceHandler}\n                  confirmText=\"Confirm\"\n                  patient={this.state.selectedPatient}\n                />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditNextOfKin\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='nextOfKin' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add NextOfKin</Button>\n              )}\n              {this.state.patientUpdateField === 'nextOfKin' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientNextOfKinForm\n                      authUserId={this.context.userId}\n                      canCancel\n                        canConfirm\n                        onCancel={this.modalCancelHandler}\n                        onConfirm={this.updatePatientNextOfKinHandler}\n                        confirmText=\"Confirm\"\n                        patient={this.state.selectedPatient}\n                      />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditComplaint\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='complaint' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Complaint</Button>\n              )}\n              {this.state.patientUpdateField === 'complaint' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientComplaintForm\n                      authUserId={this.context.userId}\n                      canCancel\n                        canConfirm\n                        onCancel={this.modalCancelHandler}\n                        onConfirm={this.updatePatientComplaintHandler}\n                        confirmText=\"Confirm\"\n                        patient={this.state.selectedPatient}\n                      />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditSurvey\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='survey' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Survey</Button>\n              )}\n              {this.state.patientUpdateField === 'survey' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientSurveyForm\n                      authUserId={this.context.userId}\n                      canCancel\n                        canConfirm\n                        onCancel={this.modalCancelHandler}\n                        onConfirm={this.updatePatientSurveyHandler}\n                        confirmText=\"Confirm\"\n                        patient={this.state.selectedPatient}\n                      />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditVitals\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='vitals' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Vitals</Button>\n              )}\n              {this.state.patientUpdateField === 'vitals' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientVitalsForm\n                      authUserId={this.context.userId}\n                      canCancel\n                        canConfirm\n                        onCancel={this.modalCancelHandler}\n                        onConfirm={this.updatePatientVitalsHandler}\n                        confirmText=\"Confirm\"\n                        patient={this.state.selectedPatient}\n                      />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditExamination\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='examintion' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Examination</Button>\n              )}\n              {this.state.patientUpdateField === 'examintion' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientExaminationForm\n                      authUserId={this.context.userId}\n                      canCancel\n                        canConfirm\n                        onCancel={this.modalCancelHandler}\n                        onConfirm={this.updatePatientExaminationHandler}\n                        confirmText=\"Confirm\"\n                        patient={this.state.selectedPatient}\n                      />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditHistory\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='history' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add History</Button>\n              )}\n              {this.state.patientUpdateField === 'history' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientHistoryForm\n                authUserId={this.context.userId}\n                canCancel\n                  canConfirm\n                  onCancel={this.modalCancelHandler}\n                  onConfirm={this.updatePatientHistoryHandler}\n                  confirmText=\"Confirm\"\n                  patient={this.state.selectedPatient}\n                />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditAllergies\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='allergies' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Allergies</Button>\n              )}\n              {this.state.patientUpdateField === 'allergies' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientAllergiesForm\n                      authUserId={this.context.userId}\n                      canCancel\n                        canConfirm\n                        onCancel={this.modalCancelHandler}\n                        onConfirm={this.updatePatientAllergiesHandler}\n                        confirmText=\"Confirm\"\n                        patient={this.state.selectedPatient}\n                      />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditMedication\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='medication' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Medication</Button>\n              )}\n              {this.state.patientUpdateField === 'medication' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientMedicationForm\n                authUserId={this.context.userId}\n                canCancel\n                  canConfirm\n                  onCancel={this.modalCancelHandler}\n                  onConfirm={this.updatePatientMedicationHandler}\n                  confirmText=\"Confirm\"\n                  patient={this.state.selectedPatient}\n                />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditInvestigation\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='investigation' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Investigation</Button>\n              )}\n              {this.state.patientUpdateField === 'investigation' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientInvestigationForm\n                      authUserId={this.context.userId}\n                      canCancel\n                        canConfirm\n                        onCancel={this.modalCancelHandler}\n                        onConfirm={this.updatePatientInvestigationHandler}\n                        confirmText=\"Confirm\"\n                        patient={this.state.selectedPatient}\n                      />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditDiagnosis\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='diagnosis' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Diagnosis</Button>\n              )}\n              {this.state.patientUpdateField === 'diagnosis' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientDiagnosisForm\n                      authUserId={this.context.userId}\n                      canCancel\n                        canConfirm\n                        onCancel={this.modalCancelHandler}\n                        onConfirm={this.updatePatientDiagnosisHandler}\n                        confirmText=\"Confirm\"\n                        patient={this.state.selectedPatient}\n                      />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditTreatment\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='treatment' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Treatment</Button>\n              )}\n              {this.state.patientUpdateField === 'treatment' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientTreatmentForm\n                      authUserId={this.context.userId}\n                      canCancel\n                        canConfirm\n                        onCancel={this.modalCancelHandler}\n                        onConfirm={this.updatePatientTreatmentHandler}\n                        confirmText=\"Confirm\"\n                        patient={this.state.selectedPatient}\n                      />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditBilling\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='billing' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Billing</Button>\n              )}\n              {this.state.patientUpdateField === 'billing' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientBillingForm\n                      authUserId={this.context.userId}\n                      canCancel\n                        canConfirm\n                        onCancel={this.modalCancelHandler}\n                        onConfirm={this.updatePatientBillingHandler}\n                        confirmText=\"Confirm\"\n                        patient={this.state.selectedPatient}\n                      />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditAttachment\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='attachment' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Attachment</Button>\n              )}\n              {this.state.patientUpdateField === 'attachment' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientAttachmentForm\n                      authUserId={this.context.userId}\n                      canCancel\n                        canConfirm\n                        onCancel={this.modalCancelHandler}\n                        onConfirm={this.updatePatientAttachmentHandler}\n                        confirmText=\"Confirm\"\n                        patient={this.state.selectedPatient}\n                      />\n                    )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditNote\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='notes' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Note</Button>\n              )}\n              {this.state.patientUpdateField === 'notes' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientNoteForm\n                      authUserId={this.context.userId}\n                      canCancel\n                        canConfirm\n                        onCancel={this.modalCancelHandler}\n                        onConfirm={this.updatePatientNoteHandler}\n                        confirmText=\"Confirm\"\n                        patient={this.state.selectedPatient}\n                      />\n                    )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditTag\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='tags' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Tag</Button>\n              )}\n              {this.state.patientUpdateField === 'tags' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientTagForm\n                      authUserId={this.context.userId}\n                      canCancel\n                        canConfirm\n                        onCancel={this.modalCancelHandler}\n                        onConfirm={this.updatePatientTagHandler}\n                        confirmText=\"Confirm\"\n                        patient={this.state.selectedPatient}\n                      />\n                    )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"MasterList\">\n              <Container className=\"containerUserMasterList\">\n              <Row className=\"searchListRow\">\n              <Button variant=\"primary\" size=\"sm\" onClick={this.fetchPatientsAsc}>\n                 Sort Asc\n               </Button>\n              <Button variant=\"info\" size=\"sm\" onClick={this.fetchPatientsDesc}>\n                 Sort Desc\n               </Button>\n              {this.state.isLoading ? (\n                <Spinner />\n              ) : (\n                <PatientList\n                  patients={this.state.patients}\n                  authUserId={this.context.userId}\n                  onViewDetail={this.showDetailHandler}\n                />\n              )}\n              </Row>\n              </Container>\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"SearchInput\">\n              <Container className=\"containerSearchUserInput\">\n                {this.context.token && (\n                <Row className=\"searchUserRowAdd\">\n                <Button variant=\"primary\" onClick={this.startSearchPatientHandler}>Search</Button>\n                </Row>\n              )}\n\n              <Row className=\"searchUserRowForm\">\n              <Col md={10} className=\"searchUserColForm\">\n              <Tabs defaultActiveKey=\"Field\" id=\"uncontrolled-tab-example\">\n              <Tab eventKey=\"Search\" title=\"Search:\" disabled>\n              </Tab>\n              <Tab eventKey=\"Field\" title=\"Search by Field:\">\n              {this.state.searching !== true && (\n                <Button variant=\"outline-warning\" className=\"confirmEditButton\" size=\"lg\">\n                  Click the 'Search' Button start\n                </Button>\n              )}\n              {this.state.searching === true && (\n                <SearchPatientForm\n                authUserId={this.context.userId}\n                canCancel\n                  canConfirm\n                  onCancel={this.modalCancelHandler}\n                  onConfirm={this.modalConfirmSearchHandler}\n                  confirmText=\"Search\"\n                  patient={this.context.selectedPatient}\n                />\n              )}\n              </Tab>\n              <Tab eventKey=\"Id\" title=\"Search by ID:\">\n              {this.state.searching !== true && (\n                <Button variant=\"outline-warning\" className=\"confirmEditButton\" size=\"lg\">\n                  Click the 'Search' Button start\n                </Button>\n              )}\n              {this.state.searching === true && (\n                <SearchPatientIdForm\n                authUserId={this.context.userId}\n                canCancel\n                  canConfirm\n                  onCancel={this.modalCancelHandler}\n                  onConfirm={this.modalConfirmSearchIdHandler}\n                  confirmText=\"Search\"\n                  patient={this.context.selectedPatient}\n                />\n              )}\n              </Tab>\n\n              <Tab eventKey=\"Name\" title=\"Search by Name:\">\n              {this.state.searching !== true && (\n                <Button variant=\"outline-warning\" className=\"confirmEditButton\" size=\"lg\">\n                  Click the 'Search' Button start\n                </Button>\n              )}\n              {this.state.searching === true && (\n                <SearchPatientNameForm\n                authUserId={this.context.userId}\n                canCancel\n                  canConfirm\n                  onCancel={this.modalCancelHandler}\n                  onConfirm={this.modalConfirmSearchNameHandler}\n                  confirmText=\"Search\"\n                  patient={this.context.selectedPatient}\n                />\n              )}\n              </Tab>\n              </Tabs>\n              </Col>\n              </Row>\n              </Container>\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"SearchResult\">\n              <Container className=\"containerSearchUserResults\">\n              <Row>\n                <Card className=\"searchCard\">\n                  <Card.Body className=\"searchCardBody\">\n                    <Card.Title>Your Search</Card.Title>\n                    <Card.Text>\n                      Field: {this.state.patientSearchField}\n                    </Card.Text>\n                    <Card.Text>\n                      Query: {this.state.patientSearchQuery}\n                    </Card.Text>\n                  </Card.Body>\n                </Card>\n              </Row>\n              <Row className=\"searchListRow\">\n              {\n                this.state.searchPatients !== [] &&\n                <SearchPatientList\n                  searchPatients={this.state.searchPatients}\n                  authUserId={this.context.userId}\n                  onCancel={this.modalCancelHandler}\n                    onViewDetail={this.showDetailHandler}\n                />\n              }\n              </Row>\n              </Container>\n            </Tab.Pane>\n          </Tab.Content>\n        </Col>\n      </Row>\n    </Tab.Container>\n\n\n\n    </Container>\n\n\n\n\n\n    </Col>\n\n    <Col md={3} className=\"MasterCol3\">\n\n\n    </Col>\n    </Row>\n\n</Accordion>\n\n      </React.Fragment>\n    );\n  }\n}\n\nexport default PatientsPage;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\n// import { NavLink } from 'react-router-dom';\n\nimport './UserItem.css';\n\nconst appointmentItem = props => (\n\n  <li key={props.appointmentId} className=\"users__list-item_master\">\n    <div>\n    <h5 className=\"userItemHeading\">Title:</h5>\n    <p className=\"userItemText\">\n      {props.title}\n    </p>\n    <h5 className=\"userItemHeading\">Patient:</h5>\n    <p className=\"userItemText\">\n      {props.patient}\n    </p>\n    <h5 className=\"userItemHeading\">Date:</h5>\n    <p className=\"userItemText\">\n      {props.date}\n    </p>\n    <h5 className=\"userItemHeading\">Time:</h5>\n    <p className=\"userItemText\">\n      {props.time}\n    </p>\n\n    </div>\n    <div>\n    <Button variant=\"primary\" onClick={props.onDetail.bind(this, props._id)}>\n          Details\n        </Button>\n    </div>\n  </li>\n);\n\nexport default appointmentItem;\n","import React from 'react';\n\nimport AppointmentItem from './AppointmentItem/AppointmentItem';\nimport './UserList.css';\n\nconst appointmentList = props => {\n\n  const appointment = props.appointments.map(appointment => {\n\n    const appointmentDate = new Date(appointment.date.substr(0,10)*1000).toISOString().slice(0,10);\n    const appointmentPatient = appointment.patient;\n\n    return (\n      <AppointmentItem\n        key={appointment.title}\n        userId={appointment.authUserId}\n        _id={appointment._id}\n        title={appointment.title}\n        patient={appointmentPatient.name}\n        date={appointmentDate}\n        time={appointment.time}\n        onDetail={props.onViewDetail}\n      />\n    );\n  });\n\n  return <ul className=\"user__list1_master\">{appointment}</ul>;\n};\n\nexport default appointmentList;\n","import React from 'react';\n\nimport './UserItem.css';\n\n\nconst appointmentNoteItem = props => (\n  <li key={props.userId} className=\"users__list-item_master\">\n    <div>\n      <p>\n        <span className=\"bold\">Note :</span> {props.note}\n      </p>\n    </div>\n  </li>\n);\n\nexport default appointmentNoteItem;\n","import React from 'react';\n\nimport AppointmentNoteItem from './AppointmentItem/AppointmentNoteItem';\nimport './UserList.css';\n\nconst appointmentNoteList = props => {\n  console.log(\"appointment notes list props\", props.appointmentNote);\n  const appointmentNote = props.appointmentNote.map(note => {\n    return (\n      <AppointmentNoteItem\n        key={note}\n        userId={props.authUserId}\n        note={note}\n      />\n    );\n  });\n\n  return <ul className=\"user__list1_master\">{appointmentNote}</ul>;\n};\n\nexport default appointmentNoteList;\n","import React from 'react';\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\n// import Accordion from 'react-bootstrap/Accordion';\nimport AppointmentNoteList from './AppointmentList/AppointmentNoteList';\n\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nimport './PatientDetail.css';\n\nconst AppointmentDetail = (props) => {\n  const {...appointment} = props.appointment;\n  // const authUserId = props.authUserId;\n  const appointmentDate = new Date(appointment.date.substr(0,10)*1000).toISOString().slice(0,10);\n  const appointmentNote = appointment.notes;\n  const appointmentPatientContact = appointment.patient.contact;\n  console.log(\"appointmentPatientContact:  \", appointmentPatientContact.phone);\n  console.log(\"AppointmentDetail.props.appointment:  \", {...appointment}, appointmentNote);\n  return (\n    <div className=\"PatientDetailBox\">\n    <Card className=\"PatientDetailCard\">\n    <Card.Body>\n      <Card.Title><span className=\"ul\">Appointment Details</span></Card.Title>\n\n      <Row className=\"detailCardRow\">\n        <Col md={6} className=\"detailCardCol\">\n          <Card.Text>\n            <span className=\"bold\">ID :</span> {appointment._id}\n          </Card.Text>\n          <Card.Text>\n            <span className=\"bold\">Date :</span> {appointmentDate}\n          </Card.Text>\n          <Card.Text>\n            <span className=\"bold\">Time :</span> {appointment.time}\n          </Card.Text>\n          <Card.Text>\n            <span className=\"bold\">Seen Time :</span> {appointment.seenTime}\n          </Card.Text>\n          <Card.Text>\n            <span className=\"bold\">Check-in Time :</span> {appointment.checkinTime}\n          </Card.Text>\n          <Card.Text>\n            <span className=\"bold\">Title :</span> {appointment.title}\n          </Card.Text>\n          <Card.Text>\n            <span className=\"bold\">Type :</span> {appointment.type}\n          </Card.Text>\n\n        </Col>\n\n        <Col md={6} className=\"detailCardCol\">\n          <Card.Text>\n            <span className=\"bold\">Patient Name :</span> {appointment.patient.name}\n          </Card.Text>\n          <Card.Text>\n            <span className=\"bold\">Patient Phone :</span> {appointmentPatientContact.phone}\n          </Card.Text>\n          <Card.Text>\n            <span className=\"bold\">Patient Email :</span> {appointmentPatientContact.email}\n          </Card.Text>\n          <Card.Text>\n            <span className=\"bold\">Description :</span> {appointment.description}\n          </Card.Text>\n          <Card.Text>\n            <span className=\"bold\">Location :</span> {appointment.location}\n          </Card.Text>\n          <Card.Text>\n            <span className=\"bold\">In-Progress ?</span> {appointment.inProgress}\n          </Card.Text>\n          {appointment.inProgress === true &&(\n            <p>Yes</p>\n          )}\n          <Card.Text>\n            <span className=\"bold\">Attended ?</span> {appointment.attended}\n          </Card.Text>\n          {appointment.attended === true &&(\n            <p>Yes</p>\n          )}\n          <Card.Text>\n            <span className=\"bold\">Important ?</span>\n          </Card.Text>\n          {appointment.important === true &&(\n            <p>Yes</p>\n          )}\n\n        </Col>\n\n      </Row>\n\n      <Row className=\"detailCardRow\">\n        <Col className=\"detailCardCol\">\n        <Card.Text>\n        <span className=\"bold\">Notes :</span>\n        </Card.Text>\n        </Col>\n      </Row>\n\n      <Row className=\"detailCardRow\">\n        <Col md={6} className=\"detailCardCol\">\n          { props.canDelete === true && (\n            <Button variant=\"danger\" onClick={props.onDelete}>\n              Delete Appointment !!??\n            </Button>\n          )}\n        </Col>\n\n        <Col md={6} className=\"detailCardCol\">\n          <Button variant=\"warning\" onClick={props.onCreatePdf.bind(this, appointment)}>\n            Create Pdf\n          </Button>\n        </Col>\n      </Row>\n\n      <AppointmentNoteList\n        appointmentNote={appointmentNote}\n        authUserId={props.authUserId}\n        />\n\n    </Card.Body>\n\n\n  </Card>\n    </div>\n\n  );\n}\n\nexport default AppointmentDetail;\n","import React from 'react';\n// import { NavLink } from 'react-router-dom';\n\n\nimport './UserItem.css';\n\nconst searchAppointmentItem = props => (\n  <li key={props.appointmentId} className=\"users__list-item_master\">\n    <div>\n      <p>\n      <span className=\"bold\">Title :</span> {props.title}\n      </p>\n      <p>\n        <span className=\"bold\">Date :</span> {props.resultDate}\n      </p>\n      <p>\n        <span className=\"bold\">Time :</span> {props.time}\n      </p>\n\n    </div>\n    <div>\n    <button className=\"btn\" onClick={props.onDetail.bind(this, props._id)}>\n          View Details\n        </button>\n    </div>\n  </li>\n);\n\nexport default searchAppointmentItem;\n","import React from 'react';\n\nimport SearchAppointmentItem from './AppointmentItem/SearchAppointmentItem';\nimport './UserList.css';\n\nconst searchAppointmentList = props => {\n  const searchAppointments = props.searchAppointments.map(appointment => {\n    const searchAppointmentDate = new Date(appointment.date.substr(0,10)*1000).toISOString().slice(0,10);\n    return (\n      <React.Fragment>\n      <SearchAppointmentItem\n        key={appointment.title}\n        userId={props.authUserId}\n        _id={appointment._id}\n        title={appointment.title}\n        resultDate={searchAppointmentDate}\n        time={appointment.time}\n        type={appointment.type}\n        onDetail={props.onViewDetail}\n      />\n      </React.Fragment>\n    );\n  });\n\n  return <ul className=\"user__list1_master\">{searchAppointments}</ul>;\n};\n\nexport default searchAppointmentList;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\n\n// import AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst SearchAppointmentForm = (props) => {\n// const {...search} = props.search;\n\nreturn (\n<div className=\"SearchFormContainer\">\n  <Form onSubmit={props.onConfirm}>\n  <Form.Group controlId=\"formBasicFieldSelect\">\n  <Form.Label>Field Options</Form.Label>\n  <Form.Control as=\"select\">\n  <option>select</option>\n  <option>title</option>\n  <option>type</option>\n  <option>date</option>\n  <option>checkinTime</option>\n  <option>seenTime</option>\n  <option>location</option>\n  <option>description</option>\n  <option>patient.name</option>\n  <option>inProgress</option>\n  <option>attended</option>\n  <option>important</option>\n  </Form.Control>\n  </Form.Group>\n\n<Form.Group controlId=\"formBasicField\">\n<Form.Label>Field</Form.Label>\n<Form.Control type=\"text\" placeholder=\"Field\"/>\n</Form.Group>\n\n<Form.Group controlId=\"formBasicQuery\">\n<Form.Label>Query</Form.Label>\n<Form.Control type=\"textarea\" rows=\"5\" placeholder=\"Query\" />\n</Form.Group>\n\n{props.canCancel && (\n  <Button variant=\"danger\" onClick={props.onCancel}>Cancel</Button>\n)}\n\n{props.canConfirm && (\n  <Button variant=\"success\" type=\"submit\">Search</Button>\n)}\n</Form>\n</div>\n\n\n)};\n\nexport default SearchAppointmentForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\n\n// import AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst SearchAppointmentIdForm = (props) => {\n// const {...search} = props.search;\n\nreturn (\n<div className=\"SearchFormContainer\">\n  <Form onSubmit={props.onConfirm}>\n\n<Form.Group controlId=\"formBasicId\">\n<Form.Label>Appointment Id</Form.Label>\n<Form.Control type=\"text\" placeholder=\"Id\"/>\n</Form.Group>\n\n{props.canCancel && (\n  <Button variant=\"danger\" onClick={props.onCancel}>Cancel</Button>\n)}\n\n{props.canConfirm && (\n  <Button variant=\"success\" type=\"submit\">Search</Button>\n)}\n\n</Form>\n</div>\n\n\n)};\n\nexport default SearchAppointmentIdForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\n\n// import AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst SearchAppointmentPatientForm = (props) => {\n// const {...search} = props.search;\n\nreturn (\n<div className=\"SearchFormContainer\">\n  <Form onSubmit={props.onConfirm}>\n\n<Form.Group controlId=\"formBasicPatientId\">\n<Form.Label>Patient Id</Form.Label>\n<Form.Control type=\"text\" placeholder=\"Patient Id\"/>\n</Form.Group>\n\n{props.canCancel && (\n  <Button variant=\"danger\" onClick={props.onCancel}>Cancel</Button>\n)}\n\n{props.canConfirm && (\n  <Button variant=\"success\" type=\"submit\">Search</Button>\n)}\n\n</Form>\n</div>\n\n\n)};\n\nexport default SearchAppointmentPatientForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\n\n// import AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst SearchAppointmentDateForm = (props) => {\n// const {...search} = props.search;\n\nreturn (\n<div className=\"SearchFormContainer\">\n  <Form onSubmit={props.onConfirm}>\n\n<Form.Group controlId=\"formBasicDate\">\n<Form.Label>Appointment Date</Form.Label>\n<Form.Control type=\"date\" placeholder=\"Appointment Date\"/>\n</Form.Group>\n<Form.Group controlId=\"formBasicDateTodayCheckbox\">\n  <Form.Label>Today's Date?</Form.Label>\n  <Form.Control type=\"checkbox\" onChange={(e) => {console.log(e.target.checked)}}/>\n</Form.Group>\n\n{props.canCancel && (\n  <Button variant=\"danger\" onClick={props.onCancel}>Cancel</Button>\n)}\n\n{props.canConfirm && (\n  <Button variant=\"success\" type=\"submit\">Search</Button>\n)}\n</Form>\n</div>\n\n\n)};\n\nexport default SearchAppointmentDateForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\n\n// import AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst SearchAppointmentDateRangeForm = (props) => {\n// const {...search} = props.search;\n\nreturn (\n<div className=\"SearchFormContainer\">\n  <Form onSubmit={props.onConfirm}>\n\n<Form.Group controlId=\"formBasicStartDate\">\n<Form.Label>Appointment Start Date</Form.Label>\n<Form.Control type=\"date\" placeholder=\"Appointment Date Range\"/>\n</Form.Group>\n<Form.Group controlId=\"formBasicEndDate\">\n<Form.Label>Appointment End Date</Form.Label>\n<Form.Control type=\"date\" placeholder=\"Appointment Date Range\"/>\n</Form.Group>\n\n{props.canCancel && (\n  <Button variant=\"danger\" onClick={props.onCancel}>Cancel</Button>\n)}\n\n{props.canConfirm && (\n  <Button variant=\"success\" type=\"submit\">Search</Button>\n)}\n</Form>\n</div>\n\n\n)};\n\nexport default SearchAppointmentDateRangeForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Accordion from 'react-bootstrap/Accordion';\nimport Alert from 'react-bootstrap/Alert';\n// import FormCheck from 'react-bootstrap/FormCheck'\n// import { NavLink } from 'react-router-dom';\nimport AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst CreateAppointmentForm = (props) => {\n\n  // console.log({...props});\n  console.log(\"CreateAppointmentForm:  \", AuthContext.token);\n\nreturn (\n<div className=\"CreateFormContainer\">\n<Form onSubmit={props.onConfirm}>\n<Form.Row>\n<Alert variant=\"primary\">\n  Create an appointment for: {props.selectedPatient.name}\n</Alert>\n</Form.Row>\n<Form.Row>\n  <Form.Group as={Col} controlId=\"formGridTitle\">\n    <Form.Label>Title</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"Title\"/>\n  </Form.Group>\n\n<Form.Group as={Col} controlId=\"formGridType\">\n  <Form.Label>Type</Form.Label>\n  <Form.Control type=\"text\" placeholder=\"Type\" />\n</Form.Group>\n\n<Form.Group as={Col} controlId=\"formGridLocation\">\n  <Form.Label>Location</Form.Label>\n  <Form.Control type=\"text\" placeholder=\"Location\" />\n</Form.Group>\n</Form.Row>\n\n<Form.Row>\n<Form.Group as={Col} controlId=\"formGridDate\">\n  <Form.Label>Date</Form.Label>\n  <Form.Control type=\"date\" placeholder=\"Date\" />\n</Form.Group>\n<Form.Group as={Col} controlId=\"formGridDateTodayCheckbox\">\n  <Form.Label>Today's Date?</Form.Label>\n  <Form.Control type=\"checkbox\" onChange={(e) => {console.log(e.target.checked)}}/>\n</Form.Group>\n\n<Form.Group as={Col} controlId=\"formGridTime\">\n  <Form.Label>Scheduled Time</Form.Label>\n    <Form.Control type=\"time\" placeholder=\"Time\" />\n</Form.Group>\n<Form.Group as={Col} controlId=\"formGridCheckinTime\">\n  <Form.Label>Check-in Time</Form.Label>\n    <Form.Control type=\"time\" placeholder=\"CheckinTime\" />\n</Form.Group>\n<Form.Group as={Col} controlId=\"formGridSeenTime\">\n  <Form.Label>Seen Time</Form.Label>\n    <Form.Control type=\"time\" placeholder=\"SeenTime\" />\n</Form.Group>\n</Form.Row>\n\n<Form.Row>\n<Form.Group as={Col} controlId=\"formGridDescription\">\n  <Form.Label>Description</Form.Label>\n  <Form.Control as=\"textarea\" rows=\"2\" placeholder=\"Description\" />\n</Form.Group>\n\n<Form.Group as={Col} controlId=\"formGridInProgress\">\n      <Form.Label>In Progress ?</Form.Label>\n      <Form.Control as=\"select\">\n        <option>false</option>\n        <option>true</option>\n      </Form.Control>\n    </Form.Group>\n\n    <Form.Group as={Col} controlId=\"formGridAttended\">\n          <Form.Label>Attended ?</Form.Label>\n          <Form.Control as=\"select\">\n            <option>false</option>\n            <option>true</option>\n          </Form.Control>\n        </Form.Group>\n\n        <Form.Group as={Col} controlId=\"formGridImportant\">\n              <Form.Label>Important ?</Form.Label>\n              <Form.Control as=\"select\">\n                <option>false</option>\n                <option>true</option>\n              </Form.Control>\n            </Form.Group>\n</Form.Row>\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"4\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n\n{props.canConfirm && (\n  <Button variant=\"success\" type=\"submit\">Create New</Button>\n)}\n\n</Form>\n</div>\n\n)};\n\nexport default CreateAppointmentForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Accordion from 'react-bootstrap/Accordion'\n// import FormCheck from 'react-bootstrap/FormCheck'\n// import AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst UpdateAppointmentForm = (props) => {\n\nconsole.log(\"UpdateAppointmentForm.props:  \", {...props});\nconst {...appointment} = props.appointment;\nconsole.log(\"UpdateAppointmentForm.props.appointment:  \", {...appointment});\n\n\nreturn (\n<div className=\"UpdateFormContainer\">\n<Form onSubmit={props.onConfirm}>\n<Form.Row>\n  <Form.Group as={Col} controlId=\"formGridTitle\">\n    <Form.Label>Title</Form.Label>\n    <Form.Control type=\"text\" placeholder={appointment.title}/>\n  </Form.Group>\n\n<Form.Group as={Col} controlId=\"formGridType\">\n  <Form.Label>Type</Form.Label>\n  <Form.Control type=\"text\" placeholder={appointment.type} />\n</Form.Group>\n\n<Form.Group as={Col} controlId=\"formGridLocation\">\n  <Form.Label>Location</Form.Label>\n  <Form.Control type=\"text\" placeholder={appointment.location} />\n</Form.Group>\n</Form.Row>\n\n<Form.Row>\n<Form.Group as={Col} controlId=\"formGridDate\">\n  <Form.Label>Date</Form.Label>\n  <Form.Control type=\"date\" placeholder={appointment.date} />\n</Form.Group>\n<Form.Group as={Col} controlId=\"formGridDateTodayCheckbox\">\n  <Form.Label>Today's Date?</Form.Label>\n  <Form.Control type=\"checkbox\" onChange={(e) => {console.log(e.target.checked)}}/>\n</Form.Group>\n\n<Form.Group as={Col} controlId=\"formGridTime\">\n  <Form.Label>Scheduled Time</Form.Label>\n    <Form.Control type=\"time\" placeholder={appointment.time}/>\n</Form.Group>\n<Form.Group as={Col} controlId=\"formGridCheckinTime\">\n  <Form.Label>Check-in Time</Form.Label>\n    <Form.Control type=\"time\" placeholder={appointment.checkinTime}/>\n</Form.Group>\n<Form.Group as={Col} controlId=\"formGridSeenTime\">\n  <Form.Label>Seen Time</Form.Label>\n    <Form.Control type=\"time\" placeholder={appointment.seenTime}/>\n</Form.Group>\n</Form.Row>\n\n<Form.Row>\n<Form.Group as={Col} controlId=\"formGridDescription\">\n  <Form.Label>Description</Form.Label>\n  <Form.Control as=\"textarea\" rows=\"2\" placeholder={appointment.description} />\n</Form.Group>\n\n<Form.Group as={Col} controlId=\"formGridInProgress\">\n      <Form.Label>In Progress ?</Form.Label>\n      <Form.Control as=\"select\">\n        <option>false</option>\n        <option>true</option>\n      </Form.Control>\n    </Form.Group>\n\n    <Form.Group as={Col} controlId=\"formGridAttended\">\n          <Form.Label>Attended ?</Form.Label>\n          <Form.Control as=\"select\">\n            <option>false</option>\n            <option>true</option>\n          </Form.Control>\n        </Form.Group>\n\n        <Form.Group as={Col} controlId=\"formGridImportant\">\n              <Form.Label>Important ?</Form.Label>\n              <Form.Control as=\"select\">\n                <option>false</option>\n                <option>true</option>\n              </Form.Control>\n            </Form.Group>\n</Form.Row>\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"2\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n\n{props.canConfirm && (\n  <Accordion.Toggle as={Button} variant=\"success\" eventKey=\"2\" className=\"btn\" type=\"submit\">\n  Submit\n  </Accordion.Toggle>\n)}\n\n</Form>\n{\n  // <AuthContext.Consumer>\n// </AuthContext.Consumer>\n}\n</div>\n\n)};\n\nexport default UpdateAppointmentForm;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\n// import FormCheck from 'react-bootstrap/FormCheck'\n// import AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst UpdateAppointmentFieldForm = (props) => {\n\nconsole.log(\"UpdateAppointmentFieldForm.props:  \", {...props});\nconst {...appointment} = props.appointment;\nconsole.log(\"UpdateAppointmentFieldForm.props.user:  \", {...appointment});\n\nreturn (\n<div className=\"UpdateFormContainer\">\n<Form onSubmit={props.onConfirm}>\n<Form.Row>\n  <Form.Group as={Col} controlId=\"formGridFieldSelect\">\n  <Form.Label>Field Options</Form.Label>\n  <Form.Control as=\"select\">\n    <option>select</option>\n    <option>title</option>\n    <option>type</option>\n    <option>date</option>\n    <option>checkinTime</option>\n    <option>seenTime</option>\n    <option>location</option>\n    <option>description</option>\n    <option>patient.name</option>\n    <option>inProgress</option>\n    <option>attended</option>\n    <option>important</option>\n  </Form.Control>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridField\">\n    <Form.Label>Field</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"Field\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridQuery\">\n    <Form.Label>Query</Form.Label>\n    <Form.Label>Time Format 24Hr ex 16:15</Form.Label>\n    <Form.Label>Date Format YYYY-MM-DD</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"Query\"/>\n  </Form.Group>\n</Form.Row>\n\n\n{props.canCancel && (\n  <Button variant=\"danger\" onClick={props.onCancel}>Cancel</Button>\n)}\n{props.canCancelProfile && (\n  <Button variant=\"danger\" onClick={props.onCancel}>Cancel</Button>\n)}\n\n{props.canConfirm && (\n  <Button variant=\"success\" type=\"submit\">\n  Submit\n  </Button>\n)}\n\n</Form>\n</div>\n\n)};\n\nexport default UpdateAppointmentFieldForm;\n","// import ReactDOM from 'react-dom';\nimport React, { Component } from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Button from 'react-bootstrap/Button';\nimport Accordion from 'react-bootstrap/Accordion';\nimport SidebarPage from './Sidebar';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\n// import TabContainer from 'react-bootstrap/TabContainer';\n// import TabContent from 'react-bootstrap/TabContent';\n// import TabPane from 'react-bootstrap/TabPane';\nimport Nav from 'react-bootstrap/Nav';\nimport Card from 'react-bootstrap/Card';\n\n// import Modal from '../components/Modal/Modal';\n// import Backdrop from '../components/Backdrop/Backdrop';\nimport AlertBox from '../components/AlertBox';\nimport PdfCreator from '../components/PdfCreator';\n\nimport AppointmentList from '../components/Appointments/AppointmentList/AppointmentList';\nimport AppointmentDetail from '../components/Appointments/AppointmentDetail';\n// import PatientDetail from '../components/Patients/PatientDetail';\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\nimport SearchAppointmentList from '../components/Appointments/AppointmentList/SearchAppointmentList';\nimport SearchAppointmentForm from '../components/Forms/SearchAppointmentForm';\nimport SearchAppointmentIdForm from '../components/Forms/SearchAppointmentIdForm';\nimport SearchAppointmentPatientForm from '../components/Forms/SearchAppointmentPatientForm';\nimport SearchAppointmentDateForm from '../components/Forms/SearchAppointmentDateForm';\nimport SearchAppointmentDateRangeForm from '../components/Forms/SearchAppointmentDateRangeForm';\n\nimport CreateAppointmentForm from '../components/Forms/CreateAppointmentForm';\nimport UpdateAppointmentForm from '../components/Forms/UpdateAppointmentForm';\nimport UpdateAppointmentFieldForm from '../components/Forms/UpdateAppointmentFieldForm';\nimport './Users.css';\n\nclass AppointmentsPage extends Component {\n  state = {\n    creating: false,\n    updating: false,\n    deleting: false,\n    searching: false,\n    searchAppointments: [],\n    appointments: [],\n    isLoading: false,\n    selectedAppointment: null,\n    selectedPatient: null,\n    appointmentUpdateField: null,\n    appointmentSearchField: null,\n    appointmentSearchQuery: null,\n    canDelete: null,\n    userAlert: null,\n    createPdf: false,\n    pdfData: null,\n  };\n  isActive = true;\n\n  static contextType = AuthContext;\n\n  // constructor(props) {\n  //   super(props);\n  // }\n\n  componentDidMount() {\n    this.fetchAppointments();\n    this.fetchAppointmentToday();\n    this.fetchAppointmentInProgress();\n    if (this.context.user.name === \"Lord-of-the-Manor\"){\n      this.setState({canDelete: true})\n    }\n    // this.setState({selectedPatient: this.context.selectedPatient});\n    // console.log(`\n    //   context.selectedPatient: ${JSON.stringify(this.context.selectedPatient)},\n    //   state.selectedPatient: ${JSON.stringify(this.state.selectedPatient)},\n    //   `);\n  }\n\n\n  startCreateAppointmentHandler = () => {\n    this.setState({ creating: true });\n    console.log(\"CreateAppointmentForm...\", this.context.selectedPatient);\n  };\n  startUpdateAppointmentHandler = () => {\n    this.setState({ updating: true });\n    console.log(\"UpdateAppointmentForm...\");\n  };\n  startSearchAppointmentHandler = () => {\n    this.setState({ searching: true });\n    console.log(\"SearchAppointmentForm...\");\n  };\n\n  modalConfirmHandler = (event) => {\n\n    console.log(\"CreateAppointmentFormData:  \", event.target.formGridTitle.value);\n\n    this.setState({ creating: false });\n    const userId = this.context.userId;\n    const selectedPatientId = this.context.selectedPatient._id;\n    console.log(`\n        userId: ${userId}\n        patientId: ${selectedPatientId}\n      `);\n\n      if (selectedPatientId === undefined) {\n        console.log(`\n          select a Patient before creating an Appointment!!\n          `);\n          this.setState({userAlert: \"select a Patient before creating an Appointment!!...\"});\n          return\n      }\n    const title = event.target.formGridTitle.value;\n    const type = event.target.formGridType.value;\n\n    let date = event.target.formGridDate.value;\n    if (event.target.formGridDateTodayCheckbox.checked === true) {\n      date = new Date().toISOString().slice(0,10);\n    }\n    const time = event.target.formGridTime.value;\n    const seenTime = event.target.formGridSeenTime.value;\n    const checkinTime = event.target.formGridCheckinTime.value;\n    const location = event.target.formGridLocation.value;\n    const description = event.target.formGridDescription.value;\n    const inProgress = event.target.formGridInProgress.value;\n    const attended = event.target.formGridAttended.value;\n    const important = event.target.formGridImportant.value;\n\n    if (\n      title.trim().length === 0 ||\n      type.trim().length === 0 ||\n      date.trim().length === 0 ||\n      time.trim().length === 0 ||\n      location.trim().length === 0 ||\n      description.trim().length === 0 ||\n      inProgress.trim().length === 0 ||\n      attended.trim().length === 0 ||\n      important.trim().length === 0\n    ) {\n      console.log(\"blank fields detected!!!...Please try again...\");\n      this.setState({userAlert: \"blank fields detected!!!...Please try again...\"});\n      return\n    }\n\n    // const appointment = { title, type, date, time, seenTime, checkinTime, location, description, inProgress, attended, important };\n    console.log(`\n        creating appointment...\n        title: ${title},\n        type: ${type},\n        date: ${date},\n        time: ${time},\n        seenTime: ${seenTime},\n        checkinTime: ${checkinTime},\n        location: ${location},\n        description: ${description},\n        inProgress: ${inProgress},\n        attended: ${attended},\n        important: ${important},\n      `);\n      this.setState({userAlert: \"creating appointment...\"});\n\n    const requestBody = {\n      query: `\n          mutation {createAppointment(userId:\"${userId}\",patientId:\"${selectedPatientId}\",appointmentInput:{title:\"${title}\",type:\"${type}\",date:\"${date}\",time:\"${time}\",seenTime:\"${seenTime}\",checkinTime:\"${checkinTime}\",location:\"${location}\",description:\"${description}\",inProgress:${inProgress},attended:${attended},important:${important},})\n          {_id,title,type,date,time,seenTime,checkinTime,location,description,patient{_id,name,appointments{_id,date,title}},inProgress,attended,important}}\n        `,\n    };\n\n    const token = this.context.token;\n\n    fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n    // fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data.createAppointment));\n        const responseAlert = JSON.stringify(resData.data).slice(2,15);\n        this.setState({userAlert: responseAlert});\n\n        this.state.appointments.push(resData.data.createAppointment);\n        // this.setState(prevState => {\n        //   const updatedAppointments = [...prevState.appointments];\n        //   updatedAppointments.push(resData.data.createAppointment);\n        //\n        //   return { appointments: updatedAppointments };\n        // });\n        this.context.appointments = this.state.appointments;\n        this.fetchAppointments();\n\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n  };\n\n  modalCancelHandler = () => {\n    this.setState({ creating: false, updating: false, searching: false, selectedAppointment: null });\n  };\n\n\n  modalConfirmUpdateHandler = (event) => {\n\n    if(this.context.user.role !== 'admin') {\n      console.log(\"Not the Admin! No edit permission!!\");\n      this.setState({userAlert: \"Not the Admin! No edit permission!!\"});\n    }\n\n    const userId = this.context.userId;\n    const appointmentId = this.context.selectedAppointment._id;\n    // const selectedPatientId = this.context.selectedPatientId;\n    console.log(`\n        userId: ${userId}\n        appointmentd: ${appointmentId},\n      `);\n\n    // console.log(\"UpdateUserFormData:  \", event);\n    console.log(\"UpdateAppointmentFormData:  \", event.target.formGridTitle.value);\n\n\n    this.setState({ updating: false });\n    let title = event.target.formGridTitle.value;\n    let type = event.target.formGridType.value;\n\n    let date = event.target.formGridDate.value;\n    if (event.target.formGridDateTodayCheckbox.checked === true) {\n      date = new Date().toISOString().slice(0,10);\n    }\n\n    let time = event.target.formGridTime.value;\n    let seenTime = event.target.formGridSeenTime.value;\n    let checkinTime = event.target.formGridCheckinTime.value;\n    let location = event.target.formGridLocation.value;\n    let description = event.target.formGridDescription.value;\n    let inProgress = event.target.formGridInProgress.value;\n    let attended = event.target.formGridAttended.value;\n    let important = event.target.formGridImportant.value;\n\n    if (title.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      title  = this.context.selectedAppointment.title;\n      // return;\n    }\n    if (type.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      type  = this.context.selectedAppointment.type;\n    }\n    if (date.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      date  = this.context.selectedAppointment.date;\n    }\n    if (time.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      time  = this.context.selectedAppointment.time;\n    }\n    if (seenTime.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      seenTime  = this.context.selectedAppointment.seenTime;\n    }\n    if (checkinTime.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      checkinTime  = this.context.selectedAppointment.checkinTime;\n    }\n    if (location.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      location  = this.context.selectedAppointment.location;\n    }\n    if (description.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      description  = this.context.selectedAppointment.description;\n    }\n    if (inProgress.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      inProgress  = this.context.selectedAppointment.inProgress;\n    }\n    if (attended.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      attended  = this.context.selectedAppointment.attended;\n    }\n    if (important.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      important  = this.context.selectedAppointment.important;\n    }\n\n    console.log(`\n        updating appointment...\n        title: ${title},\n        type: ${type},\n        date: ${date},\n        time: ${time},\n        seenTime: ${seenTime},\n        checkinTime: ${checkinTime},\n        location: ${location},\n        description: ${description},\n        inProgress: ${inProgress},\n        attended: ${attended},\n        important: ${important},\n      `);\n      this.setState({userAlert: \"updating appointment...\"});\n\n    const requestBody = {\n      query: `\n      mutation {updateAppointment(userId:\"${userId}\",appointmentId:\"${appointmentId}\",appointmentInput:{title:\"${title}\",type:\"${type}\",date:\"${date}\",time:\"${time}\",seenTime:\"${seenTime}\",checkinTime:\"${checkinTime}\",location:\"${location}\",description:\"${description}\",inProgress:${inProgress},attended:${attended},important:${important},})\n      {_id,title,type,date,time,seenTime,checkinTime,location,description,patient{_id,name,appointments{_id,date,title}},inProgress,attended,important,notes}}\n        `\n    };\n\n    const token = this.context.token;\n\n    fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n\n        const updatedAppointmentId = resData.data.updateAppointment._id;\n        const updatedAppointment = this.state.appointments.find(e => e._id === updatedAppointmentId);\n        const updatedAppointmentPos = this.state.appointments.indexOf(updatedAppointment);\n        const slicedArray = this.state.appointments.splice(updatedAppointmentPos, 1);\n        console.log(\"updatedAppointment:  \", JSON.stringify(updatedAppointment),\"  updatedPatientPos:  \", updatedAppointmentPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.appointments.push(resData.data.updateAppointment);\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert})\n        this.fetchAppointments();\n\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n  };\n\n\n  updateAppointmentPatientHandler = (event) => {\n\n    const token = this.context.token;\n    const userId = this.context.userId;\n    let selectedAppointmentId = this.context.selectedAppointment._id;\n    let selectedPatientId = this.context.selectedPatient._id;\n    if(\n      this.context.user.role !== 'admin'\n    ) {\n      console.log(\"No edit permission!!\");\n      this.setState({userAlert: \"No edit permission!!\"});\n      return;\n    }\n\n    if (selectedPatientId === undefined) {\n      console.log(`\n        select a Patient before creating an Appointment!!\n        `);\n        this.setState({userAlert: \"select a Patient before creating an Appointment!!...\"});\n        return\n    }\n\n    this.setState({ updating: false , patientUpdateField: null });\n\n    console.log(`\n      updating appointment patient...\n      userId: ${userId},\n      appointmentId: ${selectedAppointmentId},\n      patientId: ${selectedPatientId},\n      `);\n      this.setState({userAlert: \"updating appointment patient...\"});\n\n      const requestBody = {\n        query:`\n        mutation {updateAppointmentPatient(userId:\"${userId}\",appointmentId:\"${selectedAppointmentId}\",patientId:\"${selectedPatientId}\")\n        {_id,title,type,date,time,seenTime,checkinTime,location,description,patient{_id,name,appointments{_id,date,title},consultant{reference{_id,name,role}}},inProgress,attended,important}}\n        `\n      }\n\n      fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData));\n\n          const updatedAppointmentId = resData.data.updateAppointmentPatient._id;\n          const updatedAppointment = this.state.appointments.find(e => e._id === updatedAppointmentId);\n          const updatedAppointmentPos = this.state.appointments.indexOf(updatedAppointment);\n          const slicedArray = this.state.appointments.splice(updatedAppointmentPos, 1);\n          console.log(\"updatedAppointment:  \", JSON.stringify(updatedAppointment),\"  updatedPatientPos:  \", updatedAppointmentPos, \"  slicedArray:  \", slicedArray);\n\n          this.state.appointments.push(resData.data.updateAppointmentPatient);\n          const responseAlert = JSON.stringify(resData.data).slice(2,25);\n          this.setState({ userAlert: responseAlert})\n          this.fetchAppointments();\n\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({userAlert: err});\n        });\n\n\n  }\n\n\n  modalConfirmUpdateFieldHandler = (event) => {\n    event.preventDefault();\n\n    const token = this.context.token;\n    const userId = this.context.userId;\n    let selectedAppointmentId = this.context.selectedAppointment._id;\n    if( this.context.user.role !== 'admin') {\n      console.log(\"Not the creator or Admin! No edit permission!!\");\n      selectedAppointmentId = null;\n    }\n\n      console.log(\"UpdateAppointmentFieldFormData:  \", event.target.formGridField.value);\n      this.setState({ updating: false });\n\n      let field = null;\n      let query = event.target.formGridQuery.value;\n      if (event.target.formGridFieldSelect.value === \"select\") {\n        field = event.target.formGridField.value;\n      } else {\n        field = event.target.formGridFieldSelect.value;\n      }\n\n      const requestBody = {\n        query:`\n        mutation {updateAppointmentField(userId:\"${userId}\",appointmentId:\"${selectedAppointmentId}\",field:\"${field}\",query:\"${query}\")\n        {_id,title,type,date,time,seenTime,checkinTime,location,description,patient{_id,name,appointments{_id,date,title}},inProgress,attended,important,notes}}\n        `};\n\n      fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData.data.updateAppointmentField));\n\n          const responseAlert = JSON.stringify(resData.data).slice(2,25);\n          this.setState({ userAlert: responseAlert})\n          // this.setState({ userAlert: responseAlert, selectedAppointment: resData.data.updateAppointmentField})\n\n          const updatedAppointmentId = resData.data.updateAppointmentField._id;\n          const updatedAppointment = this.state.appointments.find(e => e._id === updatedAppointmentId);\n          const updatedAppointmentPos = this.state.appointments.indexOf(updatedAppointment);\n          const slicedArray = this.state.appointments.splice(updatedAppointmentPos, 1);\n          console.log(\"updatedAppointment:  \", JSON.stringify(updatedAppointment),\"  updatedAppointmentPos:  \", updatedAppointmentPos, \"  slicedArray:  \", slicedArray);\n\n          this.state.appointments.push(resData.data.updateAppointmentField);\n          this.context.appointments = this.state.appointments;\n\n          this.fetchAppointments();\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({userAlert: err});\n        });\n\n  }\n\n\n  modalConfirmSearchHandler = (event) => {\n    console.log(\"SearchAppointmentForm:  \");\n\n\n    let userId = this.context.userId;\n\n      console.log(\"SearchAppointmentFormData:  \", event.target.formBasicField.value);\n      this.setState({ searching: false });\n\n      let field = null;\n      let query = event.target.formBasicQuery.value;\n      if (event.target.formBasicFieldSelect.value === \"select\") {\n        field = event.target.formBasicField.value;\n      } else {\n        field = event.target.formBasicFieldSelect.value;\n      }\n\n      if (\n        field.trim().length === 0 ||\n        query.trim().length === 0\n      ) {\n        console.log(\"blank fields detected!!!...Please try again...\");\n        this.setState({userAlert: \"blank fields detected!!!...Please try again...\"});\n        return;\n      }\n\n      const search = { field, query }\n      console.log(\"Searching for Appointment:  \", JSON.stringify(search));\n\n      const requestBody = {\n        query: `\n          query {getAppointmentField(userId:\"${userId}\", field:\"${field}\", query:\"${query}\")\n          {_id,title,type,date,time,seenTime,checkinTime,location,description,patient{_id,name,appointments{_id,date,title},consultant{reference{_id,name,role}}},inProgress,attended,important}}\n        `}\n\n      const token = this.context.token;\n\n      fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData));\n          const responseAlert = JSON.stringify(resData.data).slice(2,15);\n          this.setState({userAlert: responseAlert});\n\n          const searchAppointments = resData.data.getAppointmentField;\n\n          this.setState({ searchAppointments: searchAppointments})\n          console.log(\"state.searchAppointments:  \", this.state.searchAppointments);\n          // this.fetchAppointments();\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({userAlert: err});\n        });\n  }\n\n  modalConfirmSearchIdHandler = (event) => {\n    console.log(`\n      SearchAppointmentIdFormData\n      `);\n\n      let userId = this.context.userId;\n      this.setState({ searching: false });\n      let selectedAppointmentId = event.target.formBasicId.value;\n\n      const requestBody = {\n        query: `\n          query {getAppointmentId(userId:\"${userId}\", appointmentId:\"${selectedAppointmentId}\")\n          {_id,title,type,date,time,patient{_id,name},location,description,inProgress,important,attended}}\n        `}\n\n      const token = this.context.token;\n\n      fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData));\n          const responseAlert = JSON.stringify(resData.data).slice(2,15);\n          this.setState({userAlert: responseAlert});\n\n          const searchAppointments = resData.data.getAppointmentId;\n\n          this.setState({ searchAppointments: [searchAppointments]})\n          console.log(\"state.searchAppointments:  \", this.state.searchAppointments);\n          // this.fetchUsers();\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({userAlert: err});\n        });\n  }\n\n  modalConfirmSearchPatientHandler = (event) => {\n    console.log(`\n      SearchAppointmentPatientFormData\n      `);\n\n      let userId = this.context.userId;\n      this.setState({ searching: false });\n      let selectedPatientId = event.target.formBasicPatientId.value;\n\n      const requestBody = {\n        query: `\n          query {getAppointmentPatient(userId:\"${userId}\", patientId:\"${selectedPatientId}\")\n          {_id,title,type,date,time,patient{_id,name},location,description,inProgress,important,attended}}\n        `}\n\n      const token = this.context.token;\n\n      fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData));\n          const responseAlert = JSON.stringify(resData.data).slice(2,15);\n          // const responseAlert = JSON.stringify(resData.errors).slice(2,15);\n          this.setState({userAlert: responseAlert});\n\n          const searchAppointments = resData.data.getAppointmentPatient;\n\n          this.setState({ searchAppointments: searchAppointments })\n          // this.state.searchApointments.push(searchAppointments)\n          console.log(\"state.searchApointments:  \", this.state.searchApointments);\n          // this.fetchUsers();\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({userAlert: err});\n        });\n\n  }\n  modalConfirmSearchDateHandler = (event) => {\n    console.log(`\n      SearchAppointmentDateFormData\n      `);\n\n      let userId = this.context.userId;\n      this.setState({ searching: false });\n\n      let appointmentDate = event.target.formBasicDate.value;\n      if (event.target.formBasicDateTodayCheckbox.checked === true) {\n        appointmentDate = new Date().toISOString().slice(0,10);\n      }\n\n      const requestBody = {\n        query: `\n          query {getAppointmentDate(userId:\"${userId}\",date:\"${appointmentDate}\")\n          {_id,title,type,date,time,patient{_id,name},location,description,inProgress,important,attended}}\n        `}\n\n      const token = this.context.token;\n\n      fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData));\n          const responseAlert = JSON.stringify(resData.data).slice(2,15);\n          this.setState({userAlert: responseAlert});\n\n          const searchAppointments = resData.data.getAppointmentDate;\n\n          this.setState({ searchAppointments: searchAppointments})\n          console.log(\"state.searchAppointments:  \", this.state.searchAppointments);\n          // this.fetchUsers();\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({userAlert: err});\n        });\n\n  }\n  modalConfirmSearchDateRangeHandler = (event) => {\n    console.log(`\n      SearchAppointmentDateRangeFormData\n      `);\n\n      let userId = this.context.userId;\n      this.setState({ searching: false });\n      let appointmentStartDate = event.target.formBasicStartDate.value;\n      let appointmentEndDate = event.target.formBasicEndDate.value;\n\n      const requestBody = {\n        query: `\n          query {getAppointmentDateRange(userId:\"${userId}\",startDate:\"${appointmentStartDate}\",endDate:\"${appointmentEndDate}\")\n          {_id,title,type,date,time,patient{_id,name},location,description,inProgress,important,attended}}\n        `}\n\n      const token = this.context.token;\n\n      fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData));\n          const responseAlert = JSON.stringify(resData.data).slice(2,15);\n          this.setState({userAlert: responseAlert});\n\n          const searchAppointments = resData.data.getAppointmentDateRange;\n\n          this.setState({ searchAppointments: searchAppointments})\n          console.log(\"state.searchApointments:  \", this.state.searchAppointments);\n          // this.fetchUsers();\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({userAlert: err});\n        });\n\n\n  }\n\n\n\n  modalCancelHandler = () => {\n    this.setState({ creating: false, updating: false, searching: false, selectedAppointment: null });\n  };\n\n\n  fetchAppointments() {\n    console.log(\"'fetch appointments function' context object... \" + JSON.stringify(this.context));\n    const userId = this.context.userId;\n\n    this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n            query {appointments(userId:\"${userId}\")\n            {_id,title,type,date,time,seenTime,checkinTime,location,description,patient{_id,name,contact{email,phone},consultant{reference{_id,name,role}}},inProgress,attended,important,notes}}\n        `};\n\n    fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const appointments = resData.data.appointments;\n        console.log(appointments);\n        const responseAlert = JSON.stringify(resData.data).slice(2,15);\n        this.setState({userAlert: responseAlert});\n\n        this.context.appointments = this.state.appointments;\n        if (this.isActive) {\n          this.setState({ appointments: appointments, isLoading: false });\n        }\n\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n        if (this.isActive) {\n          this.setState({ isLoading: false });\n        }\n      });\n  }\n\n  fetchAppointmentsAsc = () => {\n    console.log(\"'fetch appointments function' context object... \" + JSON.stringify(this.context));\n    const userId = this.context.userId;\n\n    // this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n            query {appointmentsDateAsc(userId:\"${userId}\")\n            {_id,title,type,date,time,seenTime,checkinTime,location,description,patient{_id,name,contact{email,phone},consultant{reference{_id,name,role}}},inProgress,attended,important,notes}}\n        `};\n\n    fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const appointments = resData.data.appointmentsDateAsc;\n        console.log(appointments);\n        const responseAlert = JSON.stringify(resData.data).slice(2,15);\n        this.setState({userAlert: responseAlert});\n\n        this.context.appointments = appointments;\n        this.setState({appointments: appointments})\n        // if (this.isActive) {\n        //   this.setState({ appointments: appointments, isLoading: false });\n        // }\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n        // if (this.isActive) {\n        //   this.setState({ isLoading: false });\n        // }\n      });\n  }\n  fetchAppointmentsDesc = () => {\n    console.log(\"'fetch appointments function' context object... \" + JSON.stringify(this.context));\n    const userId = this.context.userId;\n\n    // this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n            query {appointmentsDateDesc(userId:\"${userId}\")\n            {_id,title,type,date,time,seenTime,checkinTime,location,description,patient{_id,name,contact{email,phone},consultant{reference{_id,name,role}}},inProgress,attended,important,notes}}\n        `};\n\n    fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const appointments = resData.data.appointmentsDateDesc;\n        console.log(appointments);\n        const responseAlert = JSON.stringify(resData.data).slice(2,15);\n        this.setState({userAlert: responseAlert});\n\n        this.context.appointments = appointments;\n        this.setState({appointments: appointments})\n        // if (this.isActive) {\n        //   this.setState({ appointments: appointments, isLoading: false });\n        // }\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n        // if (this.isActive) {\n        //   this.setState({ isLoading: false });\n        // }\n      });\n  }\n\n  modalDeleteHandler = () => {\n    console.log(\"deleting appointment...selectedAppointment:  \", this.context.selectedAppointment);\n\n    const userId = this.context.userId;\n    const selectedAppointmentId = this.context.selectedAppointment._id;\n\n    if(this.context.user.role !== 'admin') {\n      console.log(\"Not the Admin! No edit permission!!\");\n      this.setState({userAlert: \"Not the Admin! No edit permission!!\"});\n    }\n\n    this.setState({deleting: true});\n\n\n    const requestBody = {\n      query: `\n          mutation {deleteAppointment(userId:\"${userId}\",appointmentId:\"${selectedAppointmentId}\")\n          {_id,title,type,date,time,seenTime,checkinTime,location,description,patient{_id,name,appointments{_id,date,title}},inProgress,attended,important,notes}}\n        `};\n\n    fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"resData:  \", resData);\n        // console.log(\"resData.data.deleteAppointment:  \", resData.data.deleteAppointment);\n        let deletedAppointment = resData.data.deleteAppointment;\n        console.log(deletedAppointment);\n        const responseAlert = JSON.stringify(resData.data).slice(2,15);\n        this.setState({userAlert: responseAlert});\n\n        let deletedAppointmentId = deletedAppointment._id;\n        deletedAppointment = this.state.appointments.find(e => e._id === deletedAppointmentId);\n        const deletedAppointmentPos = this.state.appointments.indexOf(deletedAppointment);\n        const slicedArray = this.state.appointments.splice(deletedAppointmentPos, 1);\n        console.log(\"deletedAppointment:  \", JSON.stringify(deletedAppointment),\"  deletedUserPos:  \", deletedAppointmentPos, \"  slicedArray:  \", slicedArray);\n\n        this.setState({ deleting: false });\n\n        this.fetchAppointments();\n\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n        if (this.isActive) {\n          this.setState({ deleting: false });\n        }\n      });\n\n\n  }\n\n  updateAppointmentSpecial (event) {\n\n    console.log(\"special field to update:  \", event.target.value);\n    const field = event.target.value;\n    this.setState({ appointmentUpdateField: field});\n\n  }\n\n\n  showDetailHandler = appointmentId => {\n\n    this.setState(prevState => {\n      const selectedAppointment = prevState.appointments.find(e => e._id === appointmentId);\n      this.setState({selectedAppointment: selectedAppointment});\n      this.context.selectedAppointment = selectedAppointment;\n      console.log(\"selectedAppointment:  \", selectedAppointment);\n      return { selecteAppointment: selectedAppointment };\n    });\n  };\n\n\n  fetchAppointmentToday() {\n    console.log(\"fetching todays appts function:  \");\n\n    const token = this.context.token;\n    const userId = this.context.userId;\n\n    const requestBody = {\n      query: `\n          query {getAppointmentToday(userId:\"${userId}\")\n          {_id,title,type,date,time,patient{_id,name},location,description,inProgress,important,attended}}\n        `\n    };\n\n    fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        this.context.appointmentsToday = resData.data.getAppointmentToday;\n        console.log(\"context today's appts:  \", JSON.stringify(this.context.appointmentsToday));\n\n        const responseAlert = JSON.stringify(resData.data).slice(2,15);\n        this.setState({userAlert: responseAlert});\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n\n  }\n\n\n  fetchAppointmentInProgress() {\n    console.log(\"fetching inProgress appts function:  \");\n\n    const token = this.context.token;\n    const userId = this.context.userId;\n\n    const requestBody = {\n      query: `\n          query {getAppointmentField(userId:\"${userId}\",field:\"inProgress\",query:\"true\"){_id,title,type,date,time,patient{_id,name},location,description,inProgress,important,attended}}\n        `\n    };\n\n    fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        this.context.appointmentsInProgress = resData.data.getAppointmentField;\n        console.log(\"context in progress appts:  \", JSON.stringify(this.context.appointmentsInProgress));\n\n        const responseAlert = JSON.stringify(resData.data).slice(2,15);\n        this.setState({userAlert: responseAlert});\n\n        if (this.state.selectedPatient === {} || this.context.selectedstate === null) {\n          this.setState({userAlert: \"No Patient Selected\"})\n        }\n        console.log(`\n          context.selectedPatient: ${JSON.stringify(this.context.selectedPatient)},\n          state.selectedPatient: ${JSON.stringify(this.state.selectedPatient)},\n          `);\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n\n  }\n\n  createPdf = (appointment) => {\n    console.log(`\n        creating pdf...\n        user: ${JSON.stringify(appointment)}\n      `);\n\n      const pdfData = {\n        title: appointment.title,\n        body: appointment.date,\n      };\n\n    this.setState({createPdf: true, pdfData: pdfData})\n  }\n\n  closePdfCreator = () => {\n    console.log(`\n      closing pdf creator...\n      `);\n      this.setState({createPdf: false, pdfData: null})\n  }\n\n  componentWillUnmount() {\n    this.isActive = false;\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n\n      {this.state.createPdf === true && (\n          <PdfCreator\n            pdfData={this.state.pdfData}\n            onClosePdfCreator={this.closePdfCreator}\n          />\n      )}\n\n      <Accordion>\n\n      <Row>\n\n      <Col md={3} className=\"MasterCol1\">\n\n      <AlertBox\n            authUserId={this.context.userId}\n            alert={this.state.userAlert}\n          />\n      <SidebarPage/>\n\n      </Col>\n\n      <Col md={9} className=\"MasterCol2\">\n\n          <Container className=\"containerCombinedDetail\">\n\n          <Tab.Container id=\"left-tabs-example\" defaultActiveKey=\"appointmentDetail\">\n            <Row>\n              <Col sm={2}>\n                <Nav variant=\"pills\" className=\"flex-column\">\n                  <Nav.Item>\n                    <Nav.Link eventKey=\"MasterList\">MASTER LIST</Nav.Link>\n                  </Nav.Item>\n                  <Nav.Item>\n                    <Nav.Link eventKey=\"appointmentDetail\">Selected</Nav.Link>\n                  </Nav.Item>\n                  <Nav.Item>\n                    <Nav.Link eventKey=\"appointmentCreate\">Create New</Nav.Link>\n                  </Nav.Item>\n                  <Nav.Item>\n                    <Nav.Link eventKey=\"disabled\" disabled>Edit:</Nav.Link>\n                  </Nav.Item>\n                  <Nav.Item>\n                    <Nav.Link eventKey=\"appointmentEditBasic\">Basic Info</Nav.Link>\n                  </Nav.Item>\n                  <Nav.Item>\n                    <Nav.Link eventKey=\"appointmentEditField\">Single Field</Nav.Link>\n                  </Nav.Item>\n                  <Nav.Item>\n                    <Nav.Link eventKey=\"appointmentEditPatient\">Patient</Nav.Link>\n                  </Nav.Item>\n                  <Nav.Item>\n                    <Nav.Link eventKey=\"disabled\" disabled>Search:</Nav.Link>\n                  </Nav.Item>\n                  <Nav.Item>\n                    <Nav.Link eventKey=\"SearchInput\">Input</Nav.Link>\n                  </Nav.Item>\n                  <Nav.Item>\n                    <Nav.Link eventKey=\"SearchResult\">Results</Nav.Link>\n                  </Nav.Item>\n                </Nav>\n              </Col>\n              <Col sm={10}>\n                <Tab.Content>\n                  <Tab.Pane eventKey=\"appointmentDetail\">\n                    {this.state.selectedAppointment === null && (\n                      <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                        Select an Appointment from the Master List\n                      </Button>\n                    )}\n                    {\n                      this.state.isLoading === false &&\n                      this.state.selectedAppointment !== null\n                      &&\n                      (\n                        <AppointmentDetail\n                        authUserId={this.context.userId}\n                        appointment={this.state.selectedAppointment}\n                        onEdit={this.startUpdateAppointmentHandler}\n                        canDelete={this.state.canDelete}\n                        onDelete={this.modalDeleteHandler}\n                        onCreatePdf={this.createPdf}\n                        />\n                    )}\n                  </Tab.Pane>\n\n                  <Tab.Pane eventKey=\"appointmentCreate\">\n                    <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" onClick={this.startCreateAppointmentHandler} >Create New</Button>\n                    {\n                      this.state.creating &&\n                      this.context.selectedPatient._id !== null\n                      && (\n                        <CreateAppointmentForm\n                        canCancel\n                          canConfirm\n                          onCancel={this.modalCancelHandler}\n                          onConfirm={this.modalConfirmHandler}\n                          onSubmit={this.modalConfirmHandler}\n                          confirmText=\"Confirm\"\n                          selectedPatient={this.context.selectedPatient}\n                        />\n                    )}\n                  </Tab.Pane>\n\n                  <Tab.Pane eventKey=\"appointmentEditBasic\">\n                    {this.state.selectedAppointment === null && (\n                      <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                        Select an Appointment from the Master List\n                      </Button>\n                    )}\n                    {this.state.selectedAppointment !== null && (\n                      <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" onClick={this.startUpdateAppointmentHandler}>Edit Basic Data</Button>\n                    )}\n                    {this.state.updating &&\n                      this.state.selectedAppointment !== null\n                      && (\n                      <UpdateAppointmentForm\n                      authUserId={this.context.userId}\n                      canCancel\n                        canConfirm\n                        onCancel={this.modalCancelHandler}\n                        onConfirm={this.modalConfirmUpdateHandler}\n                        confirmText=\"Confirm\"\n                        appointment={this.state.selectedAppointment}\n                      />\n                    )}\n                  </Tab.Pane>\n\n                  <Tab.Pane eventKey=\"appointmentEditField\">\n                    {this.state.selectedAppointment === null && (\n                      <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                        Select an Appointment from the Master List\n                      </Button>\n                    )}\n                    {this.state.selectedAppointment !== null && (\n                      <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" onClick={this.startUpdateAppointmentHandler}>Edit a Single Field</Button>\n                    )}\n                    {this.state.updating &&\n                      this.state.selectedAppointment !== null\n                      && (\n                        <UpdateAppointmentFieldForm\n                          authUserId={this.context.userId}\n                          canCancel\n                          canConfirm\n                          onCancel={this.modalCancelHandler}\n                          onConfirm={this.modalConfirmUpdateFieldHandler}\n                          confirmText=\"Confirm\"\n                          appointment={this.state.selectedAppointment}\n                        />\n                    )}\n                  </Tab.Pane>\n\n                  <Tab.Pane eventKey=\"appointmentEditPatient\">\n                    {this.state.selectedAppointment === null && (\n                      <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                        Select an Appointment from the Master List\n                      </Button>\n                    )}\n                    {this.state.selectedAppointment !== null && (\n                      <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" value='patient' onClick={this.updateAppointmentSpecial.bind(this)}>Change Patient:</Button>\n                    )}\n                    {this.state.selecteAppointment !== null &&\n                      this.context.selectedPatient === null &&\n                      this.state.appointmentUpdateField === \"patient\" && (\n                        <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                          Select someone from the Patients page\n                        </Button>\n                      )}\n                    {this.state.selectedAppointment !== null &&\n                      this.context.selectedPatient !== null &&\n                      this.state.appointmentUpdateField === \"patient\" && (\n                      <Row>\n                      <Col md={8} className=\"updateUserColAdd\">\n                      <p><span className=\"bold\">Add Patient :</span> {this.context.selectedPatient.name}</p>\n                      <p><span className=\"bold\">To Appointment :</span> {this.state.selectedAppointment.title}  <span className=\"bold\">On :</span> {new Date(this.state.selecteAppointment.date.substr(0,10)*1000).toISOString().slice(0,10)} <span className=\"bold\">At :</span> {this.state.selecteAppointment.time} ??</p>\n                      <Button variant=\"success\" onClick={this.updateAppointmentPatientHandler}>\n                        Yes\n                      </Button>\n                      </Col>\n                      </Row>\n                    )}\n                  </Tab.Pane>\n\n                  <Tab.Pane eventKey=\"MasterList\">\n                    <Container className=\"containerUserMasterList\">\n                    <Row className=\"searchListRow\">\n                    <Button variant=\"primary\" size=\"sm\" onClick={this.fetchAppointmentsAsc}>\n                       Sort Asc\n                     </Button>\n                    <Button variant=\"info\" size=\"sm\" onClick={this.fetchAppointmentsDesc}>\n                       Sort Desc\n                     </Button>\n                    {this.state.isLoading ? (\n                      <Spinner />\n                    ) :\n                    (\n                      <AppointmentList\n                        appointments={this.state.appointments}\n                        authUserId={this.context.userId}\n                        onViewDetail={this.showDetailHandler}\n                      />\n                    )}\n                    </Row>\n                    </Container>\n                  </Tab.Pane>\n\n                  <Tab.Pane eventKey=\"SearchInput\">\n                    <Container className=\"containerSearchUserInput\">\n                    <Row className=\"searchUserRowAdd\">\n                    <Button variant=\"primary\" onClick={this.startSearchAppointmentHandler}>Search</Button>\n                    </Row>\n\n                    <Row className=\"searchUserRowForm\">\n                    <Col md={10} className=\"searchUserColForm\">\n                    <Tabs defaultActiveKey=\"Field\" id=\"uncontrolled-tab-example\">\n                    <Tab eventKey=\"Search\" title=\"Search:\" disabled>\n                    </Tab>\n                    <Tab eventKey=\"Field\" title=\"Search by Field:\">\n                    {this.state.searching !== true && (\n                      <Button variant=\"outline-warning\" className=\"confirmEditButton\" size=\"lg\">\n                        Click the 'Search' Button start\n                      </Button>\n                    )}\n                    {this.state.searching === true && (\n                      <SearchAppointmentForm\n                      authUserId={this.context.userId}\n                      canCancel\n                        canConfirm\n                        onCancel={this.modalCancelHandler}\n                        onConfirm={this.modalConfirmSearchHandler}\n                        confirmText=\"Search\"\n                        appointment={this.context.selectedAppointment}\n                      />\n                    )}\n                    </Tab>\n                    <Tab eventKey=\"Id\" title=\"Search by Id:\">\n                    {this.state.searching !== true && (\n                      <Button variant=\"outline-warning\" className=\"confirmEditButton\" size=\"lg\">\n                        Click the 'Search' Button start\n                      </Button>\n                    )}\n                      {this.state.searching === true && (\n                        <SearchAppointmentIdForm\n                        authUserId={this.context.userId}\n                        canCancel\n                          canConfirm\n                          onCancel={this.modalCancelHandler}\n                          onConfirm={this.modalConfirmSearchIdHandler}\n                          confirmText=\"Search\"\n                          appointment={this.context.selectedAppointment}\n                        />\n                      )}\n                    </Tab>\n                    <Tab eventKey=\"Patient\" title=\"Search by Patient:\">\n                    {this.state.searching !== true && (\n                      <Button variant=\"outline-warning\" className=\"confirmEditButton\" size=\"lg\">\n                        Click the 'Search' Button start\n                      </Button>\n                    )}\n                      {this.state.searching === true && (\n                        <SearchAppointmentPatientForm\n                        authUserId={this.context.userId}\n                        canCancel\n                          canConfirm\n                          onCancel={this.modalCancelHandler}\n                          onConfirm={this.modalConfirmSearchPatientHandler}\n                          confirmText=\"Search\"\n                          appointment={this.context.selectedAppointment}\n                        />\n                      )}\n                    </Tab>\n                    <Tab eventKey=\"Date\" title=\"Search by Date:\">\n                    {this.state.searching !== true && (\n                      <Button variant=\"outline-warning\" className=\"confirmEditButton\" size=\"lg\">\n                        Click the 'Search' Button start\n                      </Button>\n                    )}\n                      {this.state.searching === true && (\n                        <SearchAppointmentDateForm\n                        authUserId={this.context.userId}\n                        canCancel\n                          canConfirm\n                          onCancel={this.modalCancelHandler}\n                          onConfirm={this.modalConfirmSearchDateHandler}\n                          confirmText=\"Search\"\n                          appointment={this.context.selectedAppointment}\n                        />\n                      )}\n                    </Tab>\n                    <Tab eventKey=\"Date Range\" title=\"Search by Date Range:\">\n                    {this.state.searching !== true && (\n                      <Button variant=\"outline-warning\" className=\"confirmEditButton\" size=\"lg\">\n                        Click the 'Search' Button start\n                      </Button>\n                    )}\n                      {this.state.searching === true && (\n                        <SearchAppointmentDateRangeForm\n                        authUserId={this.context.userId}\n                        canCancel\n                          canConfirm\n                          onCancel={this.modalCancelHandler}\n                          onConfirm={this.modalConfirmSearchDateRangeHandler}\n                          confirmText=\"Search\"\n                          appointment={this.context.selectedAppointment}\n                        />\n                      )}\n                    </Tab>\n                    </Tabs>\n                    </Col>\n                    <Col md={10}>\n                    </Col>\n                    </Row>\n                    </Container>\n                  </Tab.Pane>\n\n                  <Tab.Pane eventKey=\"SearchResult\">\n                    <Container className=\"containerSearchUserResults\">\n                    <Row>\n                      <Card className=\"searchCard\">\n                        <Card.Body className=\"searchCardBody\">\n                          <Card.Title>Your Search</Card.Title>\n                          <Card.Text>\n                            Field: {this.state.appointmentSearchField}\n                          </Card.Text>\n                          <Card.Text>\n                            Query: {this.state.appointmentSearchQuery}\n                          </Card.Text>\n                        </Card.Body>\n                      </Card>\n                    </Row>\n                    <Row className=\"searchListRow\">\n                    {\n                      this.state.searchAppointments !== [] && (\n                      <SearchAppointmentList\n                        searchAppointments={this.state.searchAppointments}\n                        authUserId={this.context.userId}\n                        onCancel={this.modalCancelHandler}\n                          onViewDetail={this.showDetailHandler}\n                      />\n                    )}\n                    </Row>\n                    </Container>\n                  </Tab.Pane>\n                </Tab.Content>\n              </Col>\n            </Row>\n          </Tab.Container>\n\n\n          </Container>\n\n      </Col>\n    </Row>\n\n  </Accordion>\n\n        {\n        //   this.state.isLoading === false &&\n        //   (<PatientDetail\n        //     authUserId={this.context.userId}\n        //     patient={this.context.selectedPatient}\n        //     className=\"PatientDetailBox2\"\n        // />)\n      }\n      </React.Fragment>\n    );\n  }\n}\n\nexport default AppointmentsPage;\n","import React from 'react';\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nimport UserAttendanceList from './UserList/UserAttendanceList';\nimport UserLeaveList from './UserList/UserLeaveList';\nimport UserAttachmentList from './UserList/UserAttachmentList';\n\nimport './thisUserProfile.css';\n\nconst thisUserProfile = (props) => {\n\n  const {...user} = props.user;\n  console.log(\"thisUserProfile.props.user:  \" + {...user});\n\n  const authUserId = props.authUserId;\n  const userAddress = user.address;\n  const userAttendance = user.attendance;\n  console.log(\"Profile: userAttendance\", userAttendance);\n  const userLeave = user.leave;\n  console.log(\"Profile: userLeave\", userLeave);\n  const userAttachment = user.attachments;\n  console.log(\"Profile: userAttachment\", userAttachment);\n  const userEmploymentDate = new Date(user.employmentDate.substr(0,10)*1000).toISOString().slice(0,10);\n  let userTerminationDate = user.terminationDate;\n  if (user.terminationDate !== null) {\n    userTerminationDate = new Date(user.terminationDate.substr(0,10)*1000).toISOString().slice(0,10);\n  }\n  // const authSelectedUser = JSON.stringify(props.AuthContext.selectedUser);\n  // console.log(props.user.slice(0,5) === '{\"_id' , props.user.slice(0,5));\n\n  return (\n\n  <Tabs defaultActiveKey=\"Demographics\" id=\"uncontrolled-tab-example\">\n    <Tab eventKey=\"\" title=\"Details:\" disabled>\n    </Tab>\n    <Tab eventKey=\"Demographics\" title=\"Demographics\">\n    <Card className=\"UserDetailCard\">\n    <Card.Body>\n      <Card.Title><span className=\"ul\">Your Profile Details</span></Card.Title>\n      <Row className=\"detailCardRow\">\n        <Col className=\"detailCardCol\">\n          <Card.Text>\n            <span className=\"bold\">ID:</span> {user._id}\n          </Card.Text>\n          <Card.Text>\n            <span className=\"bold\">Name:</span> {user.name}\n          </Card.Text>\n          <Card.Text>\n            <span className=\"bold\">Phone:</span> {user.phone}\n          </Card.Text>\n          <Card.Text>\n            <span className=\"bold\">Email:</span> {user.email}\n          </Card.Text>\n          <Card.Text>\n            <span className=\"bold\">Role:</span> {user.role}\n          </Card.Text>\n        </Col>\n\n        <Col className=\"detailCardCol\">\n          <Card.Text>\n            <span className=\"bold\">Start Date:</span> {userEmploymentDate}\n          </Card.Text>\n          <Card.Text>\n            <span className=\"bold\">End Date:</span> {userTerminationDate}\n          </Card.Text>\n          <Card.Text>\n            <span className=\"bold\">Address:</span>\n          </Card.Text>\n          <Card.Text>\n            <span className=\"bold\">Street & Number :</span> {userAddress.number}, {userAddress.street}\n          </Card.Text>\n          <Card.Text>\n            <span className=\"bold\">Town :</span> {userAddress.town}\n          </Card.Text>\n          <Card.Text>\n            <span className=\"bold\">Parish :</span> {userAddress.parish}\n          </Card.Text>\n          <Card.Text>\n            <span className=\"bold\">Post Office :</span> {userAddress.postOffice}\n          </Card.Text>\n        </Col>\n      </Row>\n\n      <Row className=\"detailCardRow\">\n        <Col className=\"detailCardCol\">\n        <Button variant=\"warning\" onClick={props.onCreatePdf.bind(this, user)}>\n          Create Pdf\n        </Button>\n        </Col>\n      </Row>\n\n\n    </Card.Body>\n    </Card>\n    </Tab>\n    <Tab eventKey=\"Attendance\" title=\"Attendance\">\n    <Card.Text>\n      Attendance:\n    </Card.Text>\n    <UserAttendanceList\n        userAttendance={userAttendance}\n        authUserId={authUserId}\n        canDelete={props.canDelete}\n        onDelete={props.attendanceDelete}\n      />\n    </Tab>\n    <Tab eventKey=\"Leave\" title=\"Leave\">\n    <Card.Text>\n      Leave:\n    </Card.Text>\n    <UserLeaveList\n        userLeave={userLeave}\n        authUserId={authUserId}\n        canDelete={props.canDelete}\n        onDelete={props.leaveDelete}\n      />\n    </Tab>\n    <Tab eventKey=\"Attachments\" title=\"Attachments\">\n    <Card.Text>\n      Attachments:\n    </Card.Text>\n    <UserAttachmentList\n        userAttachment={userAttachment}\n        authUserId={authUserId}\n        canDelete={props.canDelete}\n        onDelete={props.attachmentDelete}\n        onViewAttachment={props.onViewAttachment}\n      />\n    </Tab>\n  </Tabs>\n  );\n}\n\nexport default thisUserProfile;\n","import S3 from 'react-aws-s3';\n// import S3FileUpload from 'react-s3';\nimport React, { Component } from 'react';\nimport UpdateUserForm from '../components/Forms/UpdateUserForm';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nimport Button from 'react-bootstrap/Button';\nimport SidebarPage from './Sidebar';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\n\n\n\nimport Nav from 'react-bootstrap/Nav';\n\nimport AlertBox from '../components/AlertBox';\nimport AttachmentViewer from '../components/AttachmentViewer';\nimport PdfCreator from '../components/PdfCreator';\n\nimport UpdateUserFieldForm from '../components/Forms/UpdateUserFieldForm';\nimport UpdateUserAttendanceForm from '../components/Forms/UpdateUserAttendanceForm';\nimport UpdateUserAttachmentForm from '../components/Forms/UpdateUserAttachmentForm';\nimport UpdateUserLeaveForm from '../components/Forms/UpdateUserLeaveForm';\n\nimport ThisUserProfile from '../components/Users/thisUserProfile';\n\nimport AuthContext from '../context/auth-context';\nimport './Users.css';\n\nclass ThisUserPage extends Component {\n  state = {\n    user: null,\n    users: [],\n    updating: false,\n    isLoading: false,\n    userUpdateField: null,\n    userAlert: null,\n    canDelete: null,\n    showAttachment: false,\n    createPdf: false,\n    pdfData: null,\n    showThisAttachmentFile: null,\n    showThisAttachmentType: null,\n  };\n  isActive = true;\n\n  static contextType = AuthContext;\n\n  // constructor(props) {\n  //   super(props);\n  // }\n\n  componentDidMount() {\n    this.getThisUser();\n    this.getCreds();\n    if (this.context.user.name === \"Lord-of-the-Manor\"){\n      this.setState({canDelete: true})\n    }\n    // if (this.context.user.name === 'admin579'){\n    //   this.setState({canDelete: true})\n    // }\n  }\n\n  startUpdateUserHandler = () => {\n    this.setState({ updating: true });\n    console.log(\"UpdateUserForm...\");\n  };\n\n\n  modalConfirmUpdateHandler = (event) => {\n    const token = this.context.token;\n    let userId = this.context.userId;\n    let selectedUserId = this.context.selectedUser._id;\n    if(userId !== selectedUserId && this.context.user.role !== 'admin') {\n      console.log(\"Not the creator or Admin! No edit permission!!\");\n      this.setState({userAlert: \"Not the creator or Admin! No edit permission!!\"});\n      selectedUserId = null;\n    }\n    console.log(\"UpdateUserFormData:  \", event.target.formGridEmail.value);\n    this.setState({ updating: false });\n    let email = event.target.formGridEmail.value;\n    let password = event.target.formGridPassword.value;\n    let name = event.target.formGridName.value;\n    let role = this.context.user.role;\n    let dob = event.target.formGridDob.value;\n    let phone = event.target.formGridPhone.value;\n    let addressNumber = event.target.formGridAddressNumber.value;\n    let addressStreet = event.target.formGridAddressStreet.value;\n    let addressTown = event.target.formGridAddressTown.value;\n    let addressParish = event.target.formGridAddressParish.value;\n    let addressPostOffice = event.target.formGridAddressPostOffice.value;\n\n    let employmentDate = event.target.formGridEmploymentDate.value;\n    if (event.target.formGridEmploymentDateTodayCheckbox.checked === true) {\n      employmentDate = new Date().toISOString().slice(0,10);\n    }\n\n    let terminationDate = event.target.formGridTerminationDate.value;\n    if (event.target.formGridTerminationDateTodayCheckbox.checked === true) {\n      terminationDate = new Date().toISOString().slice(0,10);\n    }\n\n    if (email.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      email = this.context.user.email;\n    }\n    if (password.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      password = this.context.user.password;\n    }\n    if (name.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      name = this.context.user.name;\n    }\n    // if (role.trim().length === 0) {\n    //   console.log(\"blank fields detected!!!...filling w/ previous data...\");\n    //   role = this.state.user.role;\n    // }\n    if (dob.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      dob = this.context.user.dob;\n    }\n    if (phone.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      phone = this.context.user.phone;\n    }\n    if (addressNumber.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      addressNumber = this.context.user.address.number;\n    }\n    if (addressStreet.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      addressStreet = this.context.user.address.street;\n    }\n    if (addressTown.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      addressTown = this.context.user.address.town;\n    }\n    if (addressParish.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      addressParish = this.context.user.address.parish;\n    }\n    if (addressPostOffice.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      addressPostOffice = this.context.user.address.postOffice;\n    }\n    if (employmentDate.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      employmentDate = this.context.user.employmentDate;\n    }\n    if (terminationDate.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      terminationDate = this.context.user.terminationDate;\n    }\n\n\n    console.log(`\n      updating user profile...\n      userId: ${userId}\n      email: ${email},\n      password: ${password},\n      name: ${name},\n      role: ${role},\n      dob: ${dob},\n      phone: ${phone},\n      addressNumber: ${addressNumber},\n      addressStreet: ${addressStreet},\n      addressTown: ${addressTown},\n      addressParish: ${addressParish},\n      addressPostOffice: ${addressPostOffice},\n      employmentDate: ${employmentDate},\n      terminationDate: ${terminationDate},\n      `);\n\n    const requestBody = {\n      query: `\n        mutation {updateUser(userId:\"${userId}\",selectedUserId:\"${userId}\",userInput: {email:\"${email}\",password:\"${password}\",name:\"${name}\",dob:\"${dob}\",addressNumber:${addressNumber},addressStreet:\"${addressStreet}\",addressTown:\"${addressTown}\",addressParish:\"${addressParish}\", addressPostOffice:\"${addressPostOffice}\",phone:\"${phone}\",role:\"${role}\",employmentDate:\"${employmentDate}\",terminationDate:\"${terminationDate}\"})\n        {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n        `};\n\n    fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n    // fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }})\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n\n        const updatedUser = resData.data.updateUser;\n        console.log(\"updatedUser:  \", JSON.stringify(updatedUser));\n        this.state.users.push(updatedUser);\n        this.context.users = this.state.users;\n\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert, user: updatedUser})\n        this.getThisUser();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n    };\n\n    modalConfirmUpdateFieldHandler = (event) => {\n\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedUserId = this.context.selectedUser._id;\n      if(userId !== selectedUserId && this.context.user.role !== 'admin') {\n        console.log(\"Not the creator or Admin! No edit permission!!\");\n        this.setState({userAlert: \"Not the creator or Admin! No edit permission!!\"});\n        selectedUserId = null;\n      }\n\n        console.log(\"UpdateUserFieldFormData:  \", event.target.formGridField.value);\n        this.setState({ updating: false });\n\n        let field = event.target.formGridField.value;\n        let query = event.target.formGridQuery.value;\n\n        const requestBody = {\n          query:`\n            mutation{updateUserField(userId:\"${userId}\",selectedUserId:\"${userId}\",field:\"${field}\",query:\"${query}\")\n            {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n          `};\n\n        fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n        // fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            console.log(\"response data... \" + JSON.stringify(resData.data.updateUserField));\n\n            const updatedUserId = resData.data.updateUserField._id;\n            const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n            const updatedUserPos = this.state.users.indexOf(updatedUser);\n            const slicedArray = this.state.users.splice(updatedUserPos, 1);\n            console.log(\"updatedUser:  \", JSON.stringify(updatedUser),\"  updatedUserPos:  \", updatedUserPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.users.push(resData.data.updateUserField);\n            this.context.users = this.state.users;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            this.getThisUser();\n          })\n          .catch(err => {\n            console.log(err);\n            this.setState({userAlert: err});\n          });\n\n    }\n\n  updateUserAttendanceHandler = (event) => {\n    const token = this.context.token;\n    const userId = this.state.user._id;\n    // let selectedUserId = this.context.selectedUser._id;\n    // if(userId !== selectedUserId && this.context.user.role !== 'admin') {\n    //   console.log(\"Not the creator or Admin! No edit permission!!\");\n    //   selectedUserId = null;\n    // }\n    console.log(\"UpdateUserAttendanceFormData:  \", event.target.formGridAttendanceStatus.value);\n\n    this.setState({ updating: false , userUpdateField: null });\n\n    let attendanceDate = event.target.formGridAttendanceDate.value;\n    if (event.target.formGridAttendanceDateTodayCheckbox.checked === true) {\n      attendanceDate = new Date().toISOString().slice(0,10);\n    }\n\n    let attendanceStatus = event.target.formGridAttendanceStatus.value;\n    let attendanceDescription = event.target.formGridAttendanceDescription.value;\n\n    if (attendanceDate.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      attendanceDate = this.context.selectedUser.attendanceDate;\n    }\n    if (attendanceStatus.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      attendanceStatus = this.context.selectedUser.attendanceStatus;\n    }\n    if (attendanceDescription.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      attendanceDescription = this.context.selectedUser.attendanceDescription;\n    }\n\n\n    console.log(`\n      adding user attendance item...\n      userId: ${userId},\n      attendanceDate: ${attendanceDate},\n      attendanceStatus: ${attendanceStatus},\n      attendanceDescription: ${attendanceDescription}\n      `);\n\n      const requestBody = {\n        query:`\n          mutation {updateUserAttendance(userId:\"${userId}\", selectedUserId:\"${userId}\",userInput:{attendanceDate:\"${attendanceDate}\",attendanceStatus:\"${attendanceStatus}\",attendanceDescription:\"${attendanceDescription}\"})\n          {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n        `};\n\n      fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n      // fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }})\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData.data.updateUserAttendance));\n\n          const updatedUserId = resData.data.updateUserAttendance._id;\n          const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n          const updatedUserPos = this.state.users.indexOf(updatedUser);\n          const slicedArray = this.state.users.splice(updatedUserPos, 1);\n          console.log(\"updatedUser:  \", JSON.stringify(updatedUser),\"  updatedUserPos:  \", updatedUserPos, \"  slicedArray:  \", slicedArray);\n          this.state.users.push(resData.data.updateUserAttendance);\n          this.context.users = this.state.users;\n          const responseAlert = JSON.stringify(resData.data).slice(2,25);\n          this.setState({ userAlert: responseAlert})\n          this.getThisUser();\n\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({userAlert: err});\n        });\n  };\n\n\n  updateUserLeaveHandler = (event) => {\n    const token = this.context.token;\n    const userId = this.context.userId;\n    let selectedUserId = this.context.selectedUser._id;\n    if(userId !== selectedUserId && this.context.user.role !== 'admin') {\n      console.log(\"Not the creator or Admin! No edit permission!!\");\n      this.setState({userAlert: \"Not the creator or Admin! No edit permission!!\"});\n      selectedUserId = null;\n    }\n\n    console.log(\"UpdateUserLeaveFormData:  \", event.target.formGridLeaveType.value);\n\n    this.setState({ updating: false , userUpdateField: null });\n\n    let leaveType = event.target.formGridLeaveType.value;\n    let leaveTitle = event.target.formGridLeaveTitle.value;\n\n    let leaveStartDate = event.target.formGridLeaveStartDate.value;\n    if (event.target.formGridLeaveStartDateTodayCheckbox.checked === true) {\n      leaveStartDate = new Date().toISOString().slice(0,10);\n    }\n\n    let leaveEndDate = event.target.formGridLeaveEndDate.value;\n    if (event.target.formGridLeaveEndDateTodayCheckbox.checked === true) {\n      leaveEndDate = new Date().toISOString().slice(0,10);\n    }\n\n    if (leaveType.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      leaveType = this.context.selectedUser.leaveType;\n    }\n    if (leaveTitle.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      leaveTitle = this.context.selectedUser.leaveTitle;\n    }\n    if (leaveStartDate.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      leaveStartDate = this.context.selectedUser.leaveStartDate;\n    }\n    if (leaveEndDate.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      leaveEndDate = this.context.selectedUser.leaveEndDate;\n    }\n\n\n    console.log(`\n      adding user attendance item...\n      userId: ${userId},\n      selectedUserId: ${selectedUserId}\n      leave: {\n        type: ${leaveType},\n        title: ${leaveTitle},\n        startDate: ${leaveStartDate},\n        endDate: ${leaveEndDate}\n      }\n      `);\n\n      const requestBody = {\n        query:`\n          mutation {updateUserLeave(userId:\"${userId}\", selectedUserId:\"${userId}\",userInput:{leaveType:\"${leaveType}\",leaveTitle:\"${leaveTitle}\",leaveStartDate:\"${leaveStartDate}\",leaveEndDate:\"${leaveEndDate}\"})\n          {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n        `};\n\n      fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n      // fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }})\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData.data));\n\n          const updatedUserId = resData.data.updateUserLeave._id;\n          const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n          const updatedUserPos = this.state.users.indexOf(updatedUser);\n          const slicedArray = this.state.users.splice(updatedUserPos, 1);\n          console.log(\"updatedUser:  \", JSON.stringify(updatedUser),\"  updatedUserPos:  \", updatedUserPos, \"  slicedArray:  \", slicedArray);\n\n          this.state.users.push(resData.data.updateUserLeave);\n          this.context.users = this.state.users;\n          const responseAlert = JSON.stringify(resData.data).slice(2,25);\n          this.setState({ userAlert: responseAlert})\n          this.getThisUser();\n\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({userAlert: err});\n        });\n  };\n\n\n  updateUserAttachmentHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  // let selectedUserId = this.context.selectedUser._id;\n  // if(userId !== selectedUserId && this.context.user.role !== 'admin') {\n  //   console.log(\"Not the creator or Admin! No edit permission!!\");\n  //   selectedUserId = null;\n  // }\n  // if (userId !== selectedUserId && this.context.user.role !== \"admin\" ) {\n  //   console.log(\"Not the creator or Admin! No edit permission!!\");\n  //   this.setState({userAlert: \"Not the creator or Admin! No edit permission!!\"})\n  //     selectedUserId = null;\n  // }\n\n  console.log(\"UpdateUserAttachmentFormData:  \");\n\n  this.setState({ updating: false , userUpdateField: null });\n\n  // let attachmentName = event.target.formGridAttachmentName.value;\n  let attachmentFormat = event.target.formGridAttachmentFormat.value;\n  let attachmentPath = \"uploads/staff/\"+userId+\"/attachments\";\n  // let attachmentPath = event.target.formGridAttachmentPath.value;\n  let file = AuthContext._currentValue.file;\n\n  console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n    const config = {\n      bucketName: this.context.creds.s3.bucketName,\n      dirName: attachmentPath,\n      region: this.context.creds.s3.region,\n      accessKeyId: this.context.creds.s3.accessKeyId,\n      secretAccessKey: this.context.creds.s3.secretAccessKey,\n    }\n  const ReactS3Client = new S3(config);\n  const newFileName = file.name;\n  const attachmentName = newFileName;\n\n  ReactS3Client\n      .uploadFile(file, newFileName)\n      .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n      .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n\n  if (\n    attachmentName.trim().length === 0 ||\n    attachmentFormat.trim().length === 0 ||\n    attachmentPath.trim().length === 0\n) {\n    console.log(\"blank fields detected!!! try again\");\n    return\n  }\n\n  const userAttachment = { attachmentName, attachmentFormat, attachmentPath }\n  console.log(`\n    adding user attendance item...\n    userId: ${userId},\n    selectedUserId: ${userId}\n    attachmentName: ${attachmentName},\n    attachmentFormat: ${attachmentFormat},\n    attachmentPath: ${attachmentPath}\n    `);\n    this.setState({userAlert: \"adding user attachment item...\"})\n\n    const requestBody = {\n      query:`\n        mutation{updateUserAttachment(userId:\"${userId}\",selectedUserId:\"${userId}\",userInput:{attachmentName:\"${attachmentName}\",attachmentFormat:\"${attachmentFormat}\",attachmentPath:\"${attachmentPath}\"})\n        {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n      `};\n\n    fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n    // fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data.updateUserAttachment));\n\n        const updatedUserId = resData.data.updateUserAttachment._id;\n        const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n        const updatedUserPos = this.state.users.indexOf(updatedUser);\n        const slicedArray = this.state.users.splice(updatedUserPos, 1);\n        console.log(\"updatedUser:  \", JSON.stringify(updatedUser),\"  updatedUserPos:  \", updatedUserPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.users.push(resData.data.updateUserAttachment);\n        this.context.users = this.state.users;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert})\n        this.getThisUser();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n\n}\n\n\n  getThisUser() {\n    this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n      query {getThisUser\n        {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n        `};\n\n    fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n    // fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }})\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"resdata...\" + JSON.stringify(resData));\n        const thisUser = resData.data.getThisUser;\n        if (this.isActive) {\n\n          this.setState({ user: thisUser, isLoading: false });\n\n          this.context.user = thisUser;\n          console.log(\"this.context.user:  \" + this.context.user.name);\n\n          sessionStorage.setItem('thisUser', JSON.stringify(thisUser));\n        }\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n        if (this.isActive) {\n          this.setState({ isLoading: false });\n        }\n      });\n  }\n\n  getCreds() {\n    this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n      query {getCreds\n        {atlas{user,pw,db},s3{bucketName,region,accessKeyId,secretAccessKey},jwt{encode}}}\n        `};\n\n    fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n    // fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }})\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        // console.log(\"resdata...\" + JSON.stringify(resData));\n        const creds = resData.data.getCreds;\n        if (this.isActive) {\n\n          this.setState({ isLoading: false });\n\n          this.context.creds = creds;\n        }\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n        if (this.isActive) {\n          this.setState({ isLoading: false });\n        }\n      });\n  }\n\n\n  modalCancelHandler = () => {\n    this.setState({ updating: false  });\n  };\n\n\n  deleteUserAttendanceItem = (props) => {\n\n    let token = this.context.token;\n    let userId = this.context.userId;\n    let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n    console.log(`\n      delete user Attendance item:\n      props: ${JSON.stringify(props)},\n      token: ${token},\n      userId: ${userId},\n      selectedUserId: ${userId},\n      attandance date: ${date},\n      `);\n\n      const requestBody = {\n        query:`\n         mutation{deleteUserAttendance(userId:\"${userId}\",selectedUserId:\"${userId}\",attendanceDate:\"${date}\")\n         {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}\n        }\n       `};\n\n          fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n          // fetch('http://localhost:10000/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n              'Content-Type': 'application/json',\n              Authorization: 'Bearer ' + token\n            }\n          })\n            .then(res => {\n              if (res.status !== 200 && res.status !== 201) {\n                throw new Error('Failed!');\n              }\n              return res.json();\n            })\n            .then(resData => {\n              // let deletedUser = resData.data.deleteUserAttendance;\n              console.log(\"resData.data:  \",resData.data.deleteUserAttendance);\n\n              const updatedUserId = resData.data.deleteUserAttendance._id;\n              const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n              const updatedUserPos = this.state.users.indexOf(updatedUser);\n              const slicedArray = this.state.users.splice(updatedUserPos, 1);\n              console.log(\"updatedUser:  \", JSON.stringify(updatedUser),\"  updatedUserPos:  \", updatedUserPos, \"  slicedArray:  \", slicedArray);\n\n              this.state.users.push(resData.data.deleteUserAttendance);\n              this.context.users = this.state.users;\n              const responseAlert = JSON.stringify(resData.data).slice(2,25);\n              this.setState({ userAlert: responseAlert})\n              // this.setState({ userAlert: responseAlert, selectedUser: resData.data.deleteUserAttendance})\n              this.getThisUser();\n\n\n            })\n            .catch(err => {\n              console.log(err);\n              this.setState({userAlert: err});\n            });\n  }\n\n  deleteUserLeaveItem = (props) => {\n\n    let token = this.context.token;\n    let userId = this.context.userId;\n\n    console.log(`\n      delete user Leave item:\n      props: ${JSON.stringify(props)},\n      token: ${token},\n      userId: ${userId},\n      selectedUserId: ${userId},\n      `);\n\n      const requestBody = {\n        query:`\n         mutation{deleteUserLeave(userId:\"${userId}\",selectedUserId:\"${userId}\",leaveTitle:\"${props.title}\")\n         {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n      `};\n\n          fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n          // fetch('http://localhost:10000/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n              'Content-Type': 'application/json',\n              Authorization: 'Bearer ' + token\n            }\n          })\n            .then(res => {\n              if (res.status !== 200 && res.status !== 201) {\n                throw new Error('Failed!');\n              }\n              return res.json();\n            })\n            .then(resData => {\n              // let deletedUser = resData.data.deleteUserLeave;\n              // console.log(deletedUser);\n\n              const updatedUserId = resData.data.deleteUserLeave._id;\n              const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n              const updatedUserPos = this.state.users.indexOf(updatedUser);\n              const slicedArray = this.state.users.splice(updatedUserPos, 1);\n              console.log(\"updatedUser:  \", JSON.stringify(updatedUser),\"  updatedUserPos:  \", updatedUserPos, \"  slicedArray:  \", slicedArray);\n\n              this.state.users.push(resData.data.deleteUserLeave);\n              this.context.users = this.state.users;\n              const responseAlert = JSON.stringify(resData.data).slice(2,25);\n              this.setState({ userAlert: responseAlert})\n              // this.setState({ userAlert: responseAlert, selectedUser: resData.data.deleteUserLeave})\n              // this.getThisUser();\n\n\n            })\n            .catch(err => {\n              console.log(err);\n              this.setState({userAlert: err});\n            });\n  }\n\n  deleteUserAttachmentItem = (props) => {\n\n    let token = this.context.token;\n    let userId = this.context.userId;\n\n    console.log(`\n      delete user Attachment item:\n      props: ${JSON.stringify(props)},\n      token: ${token},\n      userId: ${userId},\n      selectedUserId: ${userId},\n      `);\n\n      // console.log(`\n      //   deleting from s3...\n      //   file.name: ${props.name},\n      //   `);\n      //\n      //   const config = {\n      //     bucketName: this.context.creds.s3.bucketName,\n      //     dirName: props.path,\n      //     region: this.context.creds.s3.region,\n      //     accessKeyId: this.context.creds.s3.accessKeyId,\n      //     secretAccessKey: this.context.creds.s3.secretAccessKey,\n      //   }\n      // const ReactS3Client = new S3(config);\n      // const filename = props.name;\n      // // const attachmentName = newFileName;\n      // //\n      // S3FileUpload\n      // .deleteFile(filename, config)\n      // .then(response => console.log(response))\n      // .catch(err => console.error(err))\n\n\n      const requestBody = {\n        query:`\n         mutation{deleteUserAttachment(userId:\"${userId}\",selectedUserId:\"${userId}\",attachmentName:\"${props.name}\")\n         {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n      `};\n\n          fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n          // fetch('http://localhost:10000/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n              'Content-Type': 'application/json',\n              Authorization: 'Bearer ' + token\n            }\n          })\n            .then(res => {\n              if (res.status !== 200 && res.status !== 201) {\n                throw new Error('Failed!');\n              }\n              return res.json();\n            })\n            .then(resData => {\n              // let deletedUser = resData.data.deleteUserAttachment;\n              // console.log(deletedUser);\n\n              const updatedUserId = resData.data.deleteUserAttachment._id;\n              const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n              const updatedUserPos = this.state.users.indexOf(updatedUser);\n              const slicedArray = this.state.users.splice(updatedUserPos, 1);\n              console.log(\"updatedUser:  \", JSON.stringify(updatedUser),\"  updatedUserPos:  \", updatedUserPos, \"  slicedArray:  \", slicedArray);\n\n              this.state.users.push(resData.data.deleteUserAttachment);\n              this.context.users = this.state.users;\n              const responseAlert = JSON.stringify(resData.data).slice(2,25);\n              this.setState({ userAlert: responseAlert})\n              // this.setState({ userAlert: responseAlert, selectedUser: resData.data.deleteUserAttachment})\n              this.getThisUser();\n\n            })\n            .catch(err => {\n              console.log(err);\n            });\n  }\n\n\n  updateUserSpecialProfile (event) {\n    console.log(\"special field to update:  \", event.target.value);\n    const field = event.target.value;\n    this.setState({ userUpdateField: field});\n  }\n\n  onViewAttachment = (attachment) => {\n    console.log(`\n      setting up attachment viewer...\n      attachment: ${JSON.stringify(attachment)}\n      `);\n      this.setState({showAttachment: true})\n\n      const file = \"https://ent-emr-bucket.s3-us-east-2.amazonaws.com/\"+attachment.path+\"/\"+attachment.name+\".\"+attachment.format;\n      const type = attachment.format;\n\n      this.setState({showThisAttachmentFile: file, showThisAttachmentType: type})\n  }\n\n  closeAttachmentView = () => {\n    console.log(`\n      closing attachment viewer...\n      `);\n      this.setState({showAttachment: false})\n  }\n\n  createPdf = (user) => {\n    console.log(`\n        creating pdf...\n        user: ${JSON.stringify(user)}\n      `);\n\n      const pdfData = {\n        title: user.name,\n        body: user.dob,\n      };\n\n    this.setState({createPdf: true, pdfData: pdfData})\n  }\n\n  closePdfCreator = () => {\n    console.log(`\n      closing pdf creator...\n      `);\n      this.setState({createPdf: false, pdfData: null})\n  }\n\n\n\n  componentWillUnmount() {\n    this.isActive = false;\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n\n      {this.state.showAttachment === true && (\n        <AttachmentViewer\n          onCloseAttachmentView={this.closeAttachmentView}\n          attachmentFile={this.state.showThisAttachmentFile}\n          attachmentType={this.state.showThisAttachmentType}\n        />\n      )}\n\n      {this.state.createPdf === true && (\n          <PdfCreator\n            pdfData={this.state.pdfData}\n            onClosePdfCreator={this.closePdfCreator}\n          />\n      )}\n\n      <Row>\n      <Col md={3} className=\"MasterCol1\">\n      <AlertBox\n        authUserId={this.context.userId}\n        alert={this.state.userAlert}\n      />\n      <SidebarPage\n        you={this.state.user}\n      />\n      </Col>\n\n      <Col md={9} className=\"MasterCol2\">\n        <Container className=\"containerProfile\">\n\n        <Tab.Container id=\"left-tabs-example\" defaultActiveKey=\"Detail\">\n          <Row>\n            <Col sm={2}>\n              <Nav variant=\"pills\" className=\"flex-column\">\n                <Nav.Item>\n                  <Nav.Link eventKey=\"Detail\">You</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey=\"disabled\" disabled>Edit:</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey=\"Demographics\">Demographics</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey=\"userEditField\">Single Field</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey=\"disabled\" disabled>Add:</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey=\"Attandance\">Attendance</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey=\"Attachment\">Attachment</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey=\"Leave\">Leave</Nav.Link>\n                </Nav.Item>\n              </Nav>\n            </Col>\n            <Col sm={10}>\n              <Tab.Content>\n                <Tab.Pane eventKey=\"Detail\">\n                  {this.state.user !== null && (\n                      <ThisUserProfile\n                        user={this.state.user}\n                        authUserId={this.context.userId}\n                        canDelete={this.state.canDelete}\n                        attendanceDelete={this.deleteUserAttendanceItem}\n                        leaveDelete={this.deleteUserLeaveItem}\n                        attachmentDelete={this.deleteUserAttachmentItem}\n                        onViewAttachment={this.onViewAttachment}\n                        onCreatePdf={this.createPdf}\n                      />\n                    )}\n                </Tab.Pane>\n\n                <Tab.Pane eventKey=\"Demographics\">\n                  <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" onClick={this.startUpdateUserHandler}>Edit Demographics</Button>\n                  {this.state.updating === true && (\n                    <UpdateUserForm\n                    canCancelProfile\n                      canConfirm\n                      onCancel={this.modalCancelHandler}\n                      onConfirm={this.modalConfirmUpdateHandler}\n                      confirmText=\"Confirm\"\n                      user={this.state.user}\n                      authUserId={this.context.userId}\n                    />\n                  )}\n                </Tab.Pane>\n\n                <Tab.Pane eventKey=\"userEditField\">\n                  {this.state.selectedUser === null && (\n                    <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                      Select a Staff member from the Master List\n                    </Button>\n                  )}\n                  {this.state.selectedUser !== null && (\n                    <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" onClick={this.startUpdateUserHandler}>Edit a Single Field</Button>\n                  )}\n                  {this.state.updating &&\n                    this.state.selectedUser !== null\n                    && (\n                      <UpdateUserFieldForm\n                        authUserId={this.context.userId}\n                        canCancel\n                        canConfirm\n                        onCancel={this.modalCancelHandler}\n                        onConfirm={this.modalConfirmUpdateFieldHandler}\n                        confirmText=\"Confirm\"\n                        user={this.state.selectedUser}\n                      />\n                  )}\n                </Tab.Pane>\n\n                <Tab.Pane eventKey=\"Attandance\">\n                  <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" value='attendance' onClick={this.updateUserSpecialProfile.bind(this)}>Add Attendance</Button>\n                  {this.state.userUpdateField === 'attendance' && (\n                    <UpdateUserAttendanceForm\n                    authUserId={this.context.userId}\n                    canCancelProfile\n                      canConfirm\n                      onCancel={this.modalCancelHandler}\n                      onConfirm={this.updateUserAttendanceHandler}\n                      confirmText=\"Confirm\"\n                      user={this.state.selectedUser}\n                    />\n                  )}\n                </Tab.Pane>\n\n                <Tab.Pane eventKey=\"Attachment\">\n                  <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" value='attachments' onClick={this.updateUserSpecialProfile.bind(this)}>Add Attachment</Button>\n                  {this.state.userUpdateField === 'attachments' && (\n                    <UpdateUserAttachmentForm\n                    authUserId={this.context.userId}\n                    canCancelProfile\n                      canConfirm\n                      onCancel={this.modalCancelHandler}\n                      onConfirm={this.updateUserAttachmentHandler}\n                      confirmText=\"Confirm\"\n                      user={this.state.selectedUser}\n                    />\n                  )}\n                </Tab.Pane>\n\n                <Tab.Pane eventKey=\"Leave\">\n                  <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" value='leave' onClick={this.updateUserSpecialProfile.bind(this)}>Add Leave</Button>\n                  {this.state.userUpdateField === 'leave' && (\n                    <UpdateUserLeaveForm\n                    authUserId={this.context.userId}\n                    canCancelProfile\n                      canConfirm\n                      onCancel={this.modalCancelHandler}\n                      onConfirm={this.updateUserLeaveHandler}\n                      confirmText=\"Confirm\"\n                      user={this.state.selectedUser}\n                    />\n                  )}\n                </Tab.Pane>\n              </Tab.Content>\n            </Col>\n          </Row>\n        </Tab.Container>\n\n\n\n        </Container>\n      </Col>\n      </Row>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default ThisUserPage;\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\n// import Button from 'react-bootstrap/Button';\n\nimport AuthContext from '../../context/auth-context';\nimport './MainNavigation.css';\n\n\nconst mainNavigation = props => (\n  <AuthContext.Consumer>\n    {context => {\n      return (\n        <header className=\"main-navigation\">\n          <div className=\"main-navigation__logo\">\n            <h1>ENT EMR 0.1.2</h1>\n\n          </div>\n          <nav className=\"main-navigation__items\">\n\n            <ul>\n              {!context.token && (\n                <li>\n                  <NavLink to=\"/auth\">Login</NavLink>\n                </li>\n              )}\n              {!context.token && (\n                <li>\n                  <NavLink to=\"/signup\">Signup</NavLink>\n                </li>\n              )}\n              {context.token && (\n                <React.Fragment>\n                  <li>\n                    <NavLink to=\"/profile\">My Profile</NavLink>\n                  </li>\n                  <li>\n                    <NavLink to=\"/users\">Staff</NavLink>\n                  </li>\n                  <li>\n                    <NavLink to=\"/patients\">Patients</NavLink>\n                  </li>\n                  <li>\n                    <NavLink to=\"/appointments\">Appointments</NavLink>\n                  </li>\n                  <li>\n                    <button onClick={context.logout}>Logout</button>\n                  </li>\n                </React.Fragment>\n              )}\n            </ul>\n          </nav>\n        </header>\n      );\n    }}\n  </AuthContext.Consumer>\n);\n\nexport default mainNavigation;\n","import React, { Component } from 'react';\nimport { BrowserRouter, Route, Redirect, Switch } from 'react-router-dom';\n\nimport AuthPage from './pages/Auth';\nimport SignupPage from './pages/Signup';\nimport UsersPage from './pages/Users';\nimport PatientsPage from './pages/Patients';\nimport AppointmentsPage from './pages/Appointments';\nimport ThisUserPage from './pages/thisUser';\nimport SidebarPage from './pages/Sidebar';\nimport MainNavigation from './components/Navigation/MainNavigation';\nimport AuthContext from './context/auth-context';\n\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    token: null,\n    userId: null,\n    context: this.context,\n  };\n\n  static contextType = AuthContext;\n\n  constructor(props) {\n    super(props);\n    this.sessionStorageAuth = null;\n  }\n\n  login = (token, userId, tokenExpiration) => {\n    this.setState({ token: token, userId: userId });\n  };\n\n  logout = () => {\n    this.setState({\n       token: null,\n       userId: null\n      });\n    sessionStorage.clear();\n    this.context = {\n      token: null,\n      userId: null,\n      user: {},\n      users:[],\n      selectedUser: {},\n      selectedPatient: {},\n      selectedAppointment: {},\n      patient: {},\n      appointment: {},\n      appointmentPatientId: null,\n      userUpdateField: null,\n      patientUpdateField: null,\n      appointmentUpdateField: null,\n      appointmentsToday: null,\n      appointmentsWeekImportant: null,\n      appointmentsInProgress: null,\n      userAlert: \"\",\n      visit: null,\n      file: null,\n      fancyDate: null,\n      login: this.login,\n      logout: this.logout,\n      creds: null,\n    }\n  };\n\n\n  // componentDidMount() {\n  //\n  // }\n\n  render() {\n    return (\n      <BrowserRouter>\n        <React.Fragment>\n          <AuthContext.Provider\n            value={{\n              token: this.state.token,\n              userId: this.state.userId,\n              user: {},\n              users:[],\n              selectedUser: {},\n              selectedPatient: {},\n              selectedAppointment: {},\n              patient: {},\n              appointment: {},\n              appointmentPatientId: null,\n              userUpdateField: null,\n              patientUpdateField: null,\n              appointmentUpdateField: null,\n              appointmentsToday: null,\n              appointmentsWeekImportant: null,\n              appointmentsInProgress: null,\n              userAlert: \"\",\n              visit: null,\n              file: null,\n              fancyDate: null,\n              login: this.login,\n              logout: this.logout,\n              creds: null,\n            }}\n          >\n            <MainNavigation />\n            <main className=\"main-content\">\n              <Switch>\n\n                { // logged in -> pages\n                this.state.token && <Redirect from=\"/\" to=\"/users\" exact />}\n                {this.state.token && (<Route path=\"/users\" component={UsersPage} />)}\n                {this.state.token && (<Route path=\"/patients\" component={PatientsPage} />)}\n                {this.state.token && (<Route path=\"/appointments\" component={AppointmentsPage} />)}\n                {this.state.token && (<Route path=\"/profile\" component={ThisUserPage} />)}\n\n                { // logged in -> users page from login page\n                  this.state.token && (<Redirect from=\"/auth\" to=\"/profile\" exact />)}\n\n                { //if not logged in -> go to login page\n                  !this.state.token && (<Route path=\"/auth\" component={AuthPage} />)}\n                  {!this.state.token && (<Route path=\"/signup\" component={SignupPage} />)}\n                {!this.state.token && <Redirect to=\"/auth\" exact />}\n              </Switch>\n            </main>\n\n          </AuthContext.Provider>\n        </React.Fragment>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\n// Put any other imports below so that CSS from your\n// components takes precedence over default styles.\n\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}