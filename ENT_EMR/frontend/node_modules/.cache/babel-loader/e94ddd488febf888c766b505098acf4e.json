{"ast":null,"code":"var _jsxFileName = \"/Users/pedrojacob/Downloads/AMR/websites/office_records/ENT_EMR/frontend/src/pages/Users.js\";\nimport React, { Component } from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col'; // import Form from 'react-bootstrap/Form';\n\nimport Button from 'react-bootstrap/Button'; // import Modal from '../components/Modal/Modal';\n// import Backdrop from '../components/Backdrop/Backdrop';\n\nimport UserList from '../components/Users/UserList/UserList';\nimport SearchUserList from '../components/Users/UserList/SearchUserList';\nimport UserDetail from '../components/Users/UserDetail';\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\nimport CreateUserForm from '../components/Forms/CreateUserForm';\nimport UpdateUserForm from '../components/Forms/UpdateUserForm';\nimport SearchUserForm from '../components/Forms/SearchUserForm';\nimport './Users.css';\n\nclass UsersPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      creating: false,\n      updating: false,\n      deleting: false,\n      searching: false,\n      users: [],\n      searchUsers: [],\n      isLoading: false,\n      selectedUser: null\n    };\n    this.isActive = true;\n\n    this.startCreateUserHandler = () => {\n      this.setState({\n        creating: true\n      });\n      console.log(\"CreateUserForm...\");\n    };\n\n    this.startUpdateUserHandler = () => {\n      this.setState({\n        updating: true\n      });\n      console.log(\"UpdateUserForm...\");\n    };\n\n    this.startSearchUserHandler = () => {\n      this.setState({\n        searching: true\n      });\n      console.log(\"SearchUserForm...\");\n    };\n\n    this.modalConfirmHandler = event => {\n      console.log(\"CreateUserFormData:  \", event.target.formGridEmail.value);\n      this.setState({\n        creating: false\n      });\n      const email = event.target.formGridEmail.value;\n      const password = event.target.formGridPassword.value;\n      const name = event.target.formGridName.value;\n      const role = event.target.formGridRole.value;\n\n      if (email.trim().length === 0 || password.trim().length === 0 || name.trim().length === 0 || role.trim().length === 0) {\n        console.log(\"blank fields detected!!!...Please try again...\");\n        return;\n      }\n\n      const user = {\n        email,\n        password,\n        name,\n        role\n      };\n      console.log(\"creating user.. \" + JSON.stringify(user));\n      const requestBody = {\n        query: \"\\n          mutation CreateUser($email: String!, $password: String!, $name: String!, $role: String!) {\\n            createUser(userInput: {email: $email, password: $password, name: $name, role: $role}) {\\n              _id\\n              email\\n              password\\n              name\\n              role\\n            }\\n          }\\n        \",\n        variables: {\n          email: email,\n          password: password,\n          name: name,\n          role: role\n        }\n      };\n      const token = this.context.token;\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n        this.setState(prevState => {\n          const updatedUsers = [...prevState.users];\n          updatedUsers.push({\n            _id: resData.data.createUser._id,\n            email: resData.data.createUser.email,\n            name: resData.data.createUser.name,\n            role: resData.data.createUser.role\n          });\n          return {\n            users: updatedUsers\n          };\n        });\n        this.context.users = this.state.users;\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.modalConfirmUpdateHandler = event => {\n      let userId = this.context.userId;\n      let selectedUserId = this.context.selectedUser._id;\n\n      if (userId !== selectedUserId && this.context.user.role !== 'admin') {\n        console.log(\"Not the creator or Admin! No edit permission!!\");\n        selectedUserId = null;\n      }\n\n      console.log(\"UpdateUserFormData:  \", event.target.formGridEmail.value);\n      this.setState({\n        updating: false\n      });\n      let email = event.target.formGridEmail.value;\n      let password = event.target.formGridPassword.value;\n      let name = event.target.formGridName.value;\n      let role = event.target.formGridRole.value;\n\n      if (email.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        email = this.context.selectedUser.email; // return;\n      }\n\n      if (password.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        password = this.context.selectedUser.password;\n      }\n\n      if (name.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        name = this.context.selectedUser.name;\n      }\n\n      if (role.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        role = this.context.selectedUser.role;\n      }\n\n      const user = {\n        email,\n        password,\n        name,\n        role\n      };\n      console.log(\"updating user.. \" + JSON.stringify(user));\n      const requestBody = {\n        query: \"\\n          mutation UpdateUser($userId: ID!, $selectedUserId: ID!, $email: String!, $password: String!, $name: String!, $role: String!) {\\n            updateUser(userId: $userId, selectedUserId: $selectedUserId, userInput: {email: $email, password: $password, name: $name, role: $role}) {\\n              _id\\n              email\\n              password\\n              name\\n              role\\n            }\\n          }\\n        \",\n        variables: {\n          userId: userId,\n          selectedUserId: selectedUserId,\n          email: email,\n          password: password,\n          name: name,\n          role: role\n        }\n      };\n      const token = this.context.token;\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n        const updatedUserId = resData.data.updateUser._id;\n        const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n        const updatedUserPos = this.state.users.indexOf(updatedUser);\n        const slicedArray = this.state.users.splice(updatedUserPos, 1);\n        console.log(\"updatedUser:  \", JSON.stringify(updatedUser), \"  updatedUserPos:  \", updatedUserPos, \"  slicedArray:  \", slicedArray);\n        this.state.users.push({\n          _id: resData.data.updateUser._id,\n          email: resData.data.updateUser.email,\n          name: resData.data.updateUser.name,\n          role: resData.data.updateUser.role\n        });\n        this.context.users = this.state.users;\n        this.fetchUsers();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.modalConfirmSearchHandler = event => {\n      console.log(\"SearchUserForm:  \");\n      let userId = this.context.userId;\n      console.log(\"SearchUserFormData:  \", event.target.formBasicField.value);\n      this.setState({\n        searching: false\n      });\n      let field = event.target.formBasicField.value;\n      let query = event.target.formBasicQuery.value;\n\n      if (field.trim().length === 0 || query.trim().length === 0) {\n        console.log(\"blank fields detected!!!...Please try again...\");\n        return;\n      }\n\n      const search = {\n        field,\n        query\n      };\n      console.log(\"Searching for User:  \", JSON.stringify(search));\n      const requestBody = {\n        query: \"\\n          query getUserField($userId: ID!, $field: String!, $query: String!)\\n          {getUserField(userId: $userId, field: $field, query: $query ){\\n            _id\\n            name\\n            email\\n            role\\n          }\\n        }\\n        \",\n        variables: {\n          userId: userId,\n          field: field,\n          query: query\n        }\n      };\n      const token = this.context.token;\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n        const searchUsers = resData.data.getUserField;\n        this.setState({\n          searchUsers: searchUsers\n        });\n        console.log(\"state.searchUsers:  \", this.state.searchUsers); // this.fetchUsers();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.modalCancelHandler = () => {\n      this.setState({\n        creating: false,\n        updating: false,\n        deleting: false,\n        selectedUser: null\n      });\n    };\n\n    this.modalDeleteHandler = () => {\n      console.log(\"deleting user...selectedUser:  \", this.context.selectedUser);\n      const selectedUserId = this.context.selectedUser._id;\n\n      if (this.context.user.role !== 'admin') {\n        console.log(\"Not the Admin! No edit permission!!\");\n      }\n\n      this.setState({\n        deleting: true\n      });\n      const requestBody = {\n        query: \"\\n        mutation DeleteUser($userId: ID!, $selectedUserId: ID!) {\\n          deleteUser(userId: $userId, selectedUserId: $selectedUserId) {\\n            _id\\n            email\\n            password\\n            name\\n            role\\n          }\\n        }\\n      \",\n        variables: {\n          userId: this.context.userId,\n          selectedUserId: selectedUserId\n        }\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + this.context.token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedUser = resData.data.deleteUser;\n        console.log(deletedUser);\n        let deletedUserId = deletedUser._id;\n        deletedUser = this.state.users.find(e => e._id === deletedUserId);\n        const deletedUserPos = this.state.users.indexOf(deletedUser);\n        const slicedArray = this.state.users.splice(deletedUserPos, 1);\n        console.log(\"deletedUser:  \", JSON.stringify(deletedUser), \"  deletedUserPos:  \", deletedUserPos, \"  slicedArray:  \", slicedArray);\n        this.setState({\n          deleting: false\n        });\n        this.fetchUsers();\n      }).catch(err => {\n        console.log(err);\n\n        if (this.isActive) {\n          this.setState({\n            deleting: false\n          });\n        }\n      });\n    };\n\n    this.showDetailHandler = userId => {\n      this.setState(prevState => {\n        const selectedUser = prevState.users.find(e => e._id === userId);\n        this.context.selectedUser = selectedUser;\n        this.setState({\n          selectedUser: selectedUser\n        });\n        console.log(\"User selected  :  \", selectedUser);\n        return {\n          selectedUser: selectedUser\n        };\n      });\n    };\n\n    this.emailElRef = React.createRef();\n    this.passwordElRef = React.createRef();\n    this.nameElRef = React.createRef();\n    this.roleElRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.fetchUsers();\n  }\n\n  fetchUsers() {\n    console.log(\"'fetch users function' context object... \" + JSON.stringify(this.context));\n    const userId = this.context.userId;\n    this.setState({\n      isLoading: true\n    });\n    const requestBody = {\n      query: \"\\n          query users($userId: ID!) {\\n            users(userId: $userId) {\\n              _id\\n              email\\n              password\\n              name\\n              role\\n            }\\n          }\\n        \",\n      variables: {\n        userId: userId\n      }\n    };\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    }).then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n\n      return res.json();\n    }).then(resData => {\n      const users = resData.data.users;\n      console.log(users);\n\n      if (this.isActive) {\n        this.setState({\n          users: users,\n          isLoading: false\n        });\n      }\n\n      this.context.users = this.state.users;\n    }).catch(err => {\n      console.log(err);\n\n      if (this.isActive) {\n        this.setState({\n          isLoading: false\n        });\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    this.isActive = false;\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 471\n      },\n      __self: this\n    }, React.createElement(Container, {\n      className: \"containerCreateuser\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 472\n      },\n      __self: this\n    }, React.createElement(Row, {\n      className: \"createUserRowAdd\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 473\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 4,\n      className: \"createUserColAdd\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 474\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 475\n      },\n      __self: this\n    }, \"Add New User\")), React.createElement(Col, {\n      md: 8,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 477\n      },\n      __self: this\n    }, this.context.token && React.createElement(Button, {\n      className: \"btn\",\n      onClick: this.startCreateUserHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 479\n      },\n      __self: this\n    }, \"Add\"))), React.createElement(Row, {\n      className: \"createUserRowForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 485\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 10,\n      className: \"createUserColForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 486\n      },\n      __self: this\n    }, this.state.creating && React.createElement(CreateUserForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmHandler,\n      onSubmit: this.modalConfirmHandler,\n      confirmText: \"Confirm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 489\n      },\n      __self: this\n    }), this.state.updating && React.createElement(UpdateUserForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmUpdateHandler,\n      confirmText: \"Confirm\",\n      user: this.context.selectedUser,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 501\n      },\n      __self: this\n    })), React.createElement(Col, {\n      md: 10,\n      className: \"createUserColForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 512\n      },\n      __self: this\n    }), React.createElement(Col, {\n      md: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 526\n      },\n      __self: this\n    }, \"even more form stuff\"))), this.state.searching === true && React.createElement(SearchUserForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmSearchHandler,\n      confirmText: \"Search\",\n      user: this.context.selectedUser,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 535\n      },\n      __self: this\n    }), this.state.searchUsers !== [] && React.createElement(SearchUserList, {\n      searchUsers: this.state.searchUsers,\n      authUserId: this.context.userId,\n      onCancel: this.modalCancelHandler,\n      onViewDetail: this.showDetailHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 547\n      },\n      __self: this\n    }), this.state.isLoading === false && React.createElement(UserDetail, {\n      authUserId: this.context.userId,\n      user: this.state.selectedUser,\n      onEdit: this.startUpdateUserHandler,\n      onDelete: this.modalDeleteHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 555\n      },\n      __self: this\n    }), this.context.token && React.createElement(\"div\", {\n      className: \"users-control\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 563\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 564\n      },\n      __self: this\n    }, \"Search Users\"), React.createElement(\"button\", {\n      className: \"btn\",\n      onClick: this.startSearchUserHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 565\n      },\n      __self: this\n    }, \"+\")), this.state.isLoading ? React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 571\n      },\n      __self: this\n    }) : React.createElement(UserList, {\n      users: this.state.users,\n      authUserId: this.context.userId,\n      onViewDetail: this.showDetailHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 573\n      },\n      __self: this\n    }));\n  }\n\n}\n\nUsersPage.contextType = AuthContext;\nexport default UsersPage;","map":{"version":3,"sources":["/Users/pedrojacob/Downloads/AMR/websites/office_records/ENT_EMR/frontend/src/pages/Users.js"],"names":["React","Component","Container","Row","Col","Button","UserList","SearchUserList","UserDetail","Spinner","AuthContext","CreateUserForm","UpdateUserForm","SearchUserForm","UsersPage","constructor","props","state","creating","updating","deleting","searching","users","searchUsers","isLoading","selectedUser","isActive","startCreateUserHandler","setState","console","log","startUpdateUserHandler","startSearchUserHandler","modalConfirmHandler","event","target","formGridEmail","value","email","password","formGridPassword","name","formGridName","role","formGridRole","trim","length","user","JSON","stringify","requestBody","query","variables","token","context","fetch","method","body","headers","Authorization","then","res","status","Error","json","resData","prevState","updatedUsers","push","_id","data","createUser","catch","err","modalConfirmUpdateHandler","userId","selectedUserId","updatedUserId","updateUser","updatedUser","find","e","updatedUserPos","indexOf","slicedArray","splice","fetchUsers","modalConfirmSearchHandler","formBasicField","field","formBasicQuery","search","getUserField","modalCancelHandler","modalDeleteHandler","deletedUser","deleteUser","deletedUserId","deletedUserPos","showDetailHandler","emailElRef","createRef","passwordElRef","nameElRef","roleElRef","componentDidMount","componentWillUnmount","render","contextType"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\n// import Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\n\n// import Modal from '../components/Modal/Modal';\n// import Backdrop from '../components/Backdrop/Backdrop';\nimport UserList from '../components/Users/UserList/UserList';\nimport SearchUserList from '../components/Users/UserList/SearchUserList';\nimport UserDetail from '../components/Users/UserDetail';\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\n\nimport CreateUserForm from '../components/Forms/CreateUserForm';\nimport UpdateUserForm from '../components/Forms/UpdateUserForm';\nimport SearchUserForm from '../components/Forms/SearchUserForm';\nimport './Users.css';\n\nclass UsersPage extends Component {\n  state = {\n    creating: false,\n    updating: false,\n    deleting: false,\n    searching: false,\n    users: [],\n    searchUsers: [],\n    isLoading: false,\n    selectedUser: null\n  };\n  isActive = true;\n\n  static contextType = AuthContext;\n\n  constructor(props) {\n    super(props);\n    this.emailElRef = React.createRef();\n    this.passwordElRef = React.createRef();\n    this.nameElRef = React.createRef();\n    this.roleElRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.fetchUsers();\n  }\n\n\n  startCreateUserHandler = () => {\n    this.setState({ creating: true });\n    console.log(\"CreateUserForm...\");\n  };\n  startUpdateUserHandler = () => {\n    this.setState({ updating: true });\n    console.log(\"UpdateUserForm...\");\n  };\n  // startUpdateUserHandler = () => {\n  //   this.setState({ deleting: true });\n  //   console.log(\"UpdateUserForm...\");\n  //\n  // };\n\n  startSearchUserHandler = () => {\n    this.setState({ searching: true });\n    console.log(\"SearchUserForm...\");\n  };\n\n  modalConfirmHandler = (event) => {\n\n    console.log(\"CreateUserFormData:  \", event.target.formGridEmail.value);\n\n    this.setState({ creating: false });\n    const email = event.target.formGridEmail.value;\n    const password = event.target.formGridPassword.value;\n    const name = event.target.formGridName.value;\n    const role = event.target.formGridRole.value;\n\n    if (\n      email.trim().length === 0 ||\n      password.trim().length === 0 ||\n      name.trim().length === 0 ||\n      role.trim().length === 0\n    ) {\n      console.log(\"blank fields detected!!!...Please try again...\");\n      return;\n    }\n\n    const user = { email, password, name, role };\n    console.log(\"creating user.. \" + JSON.stringify(user));\n\n    const requestBody = {\n      query: `\n          mutation CreateUser($email: String!, $password: String!, $name: String!, $role: String!) {\n            createUser(userInput: {email: $email, password: $password, name: $name, role: $role}) {\n              _id\n              email\n              password\n              name\n              role\n            }\n          }\n        `,\n        variables: {\n          email: email,\n          password: password,\n          name: name,\n          role: role\n        }\n    };\n\n    const token = this.context.token;\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n        this.setState(prevState => {\n          const updatedUsers = [...prevState.users];\n          updatedUsers.push({\n            _id: resData.data.createUser._id,\n            email: resData.data.createUser.email,\n            name: resData.data.createUser.name,\n            role: resData.data.createUser.role\n          });\n\n          return { users: updatedUsers };\n        });\n        this.context.users = this.state.users;\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n\n  modalConfirmUpdateHandler = (event) => {\n\n    let userId = this.context.userId;\n    let selectedUserId = this.context.selectedUser._id;\n    if(userId !== selectedUserId && this.context.user.role !== 'admin') {\n\n      console.log(\"Not the creator or Admin! No edit permission!!\");\n      selectedUserId = null;\n    }\n\n    console.log(\"UpdateUserFormData:  \", event.target.formGridEmail.value);\n\n    this.setState({ updating: false });\n    let email = event.target.formGridEmail.value;\n    let password = event.target.formGridPassword.value;\n    let name = event.target.formGridName.value;\n    let role = event.target.formGridRole.value;\n\n    if (email.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      email  = this.context.selectedUser.email;\n      // return;\n    }\n    if (password.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      password = this.context.selectedUser.password;\n    }\n    if (name.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      name  = this.context.selectedUser.name;\n    }\n    if (role.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      role  = this.context.selectedUser.role;\n    }\n\n\n    const user = { email, password, name, role };\n    console.log(\"updating user.. \" + JSON.stringify(user));\n\n    const requestBody = {\n      query: `\n          mutation UpdateUser($userId: ID!, $selectedUserId: ID!, $email: String!, $password: String!, $name: String!, $role: String!) {\n            updateUser(userId: $userId, selectedUserId: $selectedUserId, userInput: {email: $email, password: $password, name: $name, role: $role}) {\n              _id\n              email\n              password\n              name\n              role\n            }\n          }\n        `,\n        variables: {\n          userId: userId,\n          selectedUserId: selectedUserId,\n          email: email,\n          password: password,\n          name: name,\n          role: role\n        }\n    };\n\n    const token = this.context.token;\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n\n        const updatedUserId = resData.data.updateUser._id;\n        const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n        const updatedUserPos = this.state.users.indexOf(updatedUser);\n        const slicedArray = this.state.users.splice(updatedUserPos, 1);\n        console.log(\"updatedUser:  \", JSON.stringify(updatedUser),\"  updatedUserPos:  \", updatedUserPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.users.push(\n          {\n              _id: resData.data.updateUser._id,\n              email: resData.data.updateUser.email,\n              name: resData.data.updateUser.name,\n              role: resData.data.updateUser.role\n            }\n        );\n        this.context.users = this.state.users;\n        this.fetchUsers();\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n\n  modalConfirmSearchHandler = (event) => {\n    console.log(\"SearchUserForm:  \");\n\n\n    let userId = this.context.userId;\n\n      console.log(\"SearchUserFormData:  \", event.target.formBasicField.value);\n      this.setState({ searching: false });\n\n      let field = event.target.formBasicField.value;\n      let query = event.target.formBasicQuery.value;\n\n      if (\n        field.trim().length === 0 ||\n        query.trim().length === 0\n      ) {\n        console.log(\"blank fields detected!!!...Please try again...\");\n        return;\n      }\n\n      const search = { field, query }\n      console.log(\"Searching for User:  \", JSON.stringify(search));\n\n      const requestBody = {\n        query: `\n          query getUserField($userId: ID!, $field: String!, $query: String!)\n          {getUserField(userId: $userId, field: $field, query: $query ){\n            _id\n            name\n            email\n            role\n          }\n        }\n        `,\n        variables: {\n          userId: userId,\n          field: field,\n          query: query\n        }\n      }\n\n      const token = this.context.token;\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData));\n\n          const searchUsers = resData.data.getUserField;\n\n          this.setState({ searchUsers: searchUsers})\n          console.log(\"state.searchUsers:  \", this.state.searchUsers);\n          // this.fetchUsers();\n        })\n        .catch(err => {\n          console.log(err);\n        });\n  }\n\n\n  modalCancelHandler = () => {\n    this.setState({ creating: false, updating: false, deleting: false, selectedUser: null });\n  };\n\n  fetchUsers() {\n    console.log(\"'fetch users function' context object... \" + JSON.stringify(this.context));\n    const userId = this.context.userId;\n\n    this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n          query users($userId: ID!) {\n            users(userId: $userId) {\n              _id\n              email\n              password\n              name\n              role\n            }\n          }\n        `,\n        variables: {\n          userId: userId\n        }\n    };\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const users = resData.data.users;\n        console.log(users);\n\n        if (this.isActive) {\n          this.setState({ users: users, isLoading: false });\n        }\n        this.context.users = this.state.users;\n      })\n      .catch(err => {\n        console.log(err);\n        if (this.isActive) {\n          this.setState({ isLoading: false });\n        }\n      });\n  }\n\nmodalDeleteHandler = () => {\n  console.log(\"deleting user...selectedUser:  \", this.context.selectedUser);\n\n  const selectedUserId = this.context.selectedUser._id;\n\n  if(this.context.user.role !== 'admin') {\n    console.log(\"Not the Admin! No edit permission!!\");\n  }\n\n  this.setState({deleting: true});\n\n  const requestBody = {\n    query: `\n        mutation DeleteUser($userId: ID!, $selectedUserId: ID!) {\n          deleteUser(userId: $userId, selectedUserId: $selectedUserId) {\n            _id\n            email\n            password\n            name\n            role\n          }\n        }\n      `,\n      variables: {\n        userId: this.context.userId,\n        selectedUserId: selectedUserId\n      }\n  };\n\n  fetch('http://localhost:10000/graphql', {\n    method: 'POST',\n    body: JSON.stringify(requestBody),\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + this.context.token\n    }\n  })\n    .then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n      return res.json();\n    })\n    .then(resData => {\n      let deletedUser = resData.data.deleteUser;\n      console.log(deletedUser);\n\n      let deletedUserId = deletedUser._id;\n      deletedUser = this.state.users.find(e => e._id === deletedUserId);\n      const deletedUserPos = this.state.users.indexOf(deletedUser);\n      const slicedArray = this.state.users.splice(deletedUserPos, 1);\n      console.log(\"deletedUser:  \", JSON.stringify(deletedUser),\"  deletedUserPos:  \", deletedUserPos, \"  slicedArray:  \", slicedArray);\n\n      this.setState({ deleting: false });\n\n      this.fetchUsers();\n\n    })\n    .catch(err => {\n      console.log(err);\n      if (this.isActive) {\n        this.setState({ deleting: false });\n      }\n    });\n\n\n}\n\n\n\n  showDetailHandler = userId => {\n\n    this.setState(prevState => {\n      const selectedUser = prevState.users.find(e => e._id === userId);\n      this.context.selectedUser = selectedUser;\n      this.setState({selectedUser: selectedUser});\n      console.log(\"User selected  :  \", selectedUser);\n      return { selectedUser: selectedUser };\n    });\n  };\n\n\n  componentWillUnmount() {\n    this.isActive = false;\n  }\n\n  render() {\n    return (\n\n\n      <React.Fragment>\n      <Container className=\"containerCreateuser\">\n    <Row className=\"createUserRowAdd\">\n    <Col md={4} className=\"createUserColAdd\">\n      <p>Add New User</p>\n    </Col>\n    <Col md={8}>\n      {this.context.token && (\n          <Button className=\"btn\" onClick={this.startCreateUserHandler}>\n            Add\n          </Button>\n      )}\n    </Col>\n    </Row>\n    <Row className=\"createUserRowForm\">\n    <Col md={10} className=\"createUserColForm\">\n    {\n      this.state.creating && (\n      <CreateUserForm\n      authUserId={this.context.userId}\n      canCancel\n        canConfirm\n        onCancel={this.modalCancelHandler}\n        onConfirm={this.modalConfirmHandler}\n        onSubmit={this.modalConfirmHandler}\n        confirmText=\"Confirm\"\n      />\n    )\n  }\n  {this.state.updating && (\n    <UpdateUserForm\n    authUserId={this.context.userId}\n    canCancel\n      canConfirm\n      onCancel={this.modalCancelHandler}\n      onConfirm={this.modalConfirmUpdateHandler}\n      confirmText=\"Confirm\"\n      user={this.context.selectedUser}\n    />\n  )}\n    </Col>\n    <Col md={10} className=\"createUserColForm\">\n    {\n      // this.state.searching === true &&\n      // <SearchUserForm\n      // authUserId={this.context.userId}\n      // canCancel\n      //   canConfirm\n      //   onCancel={this.modalCancelHandler}\n      //   onConfirm={this.modalConfirmSearchHandler}\n      //   confirmText=\"Search\"\n      //   user={this.context.selectedUser}\n      // />\n    }\n    </Col>\n    <Col md={10}>\n      even more form stuff\n    </Col>\n    </Row>\n    </Container>\n\n\n\n        {this.state.searching === true &&\n          <SearchUserForm\n          authUserId={this.context.userId}\n          canCancel\n            canConfirm\n            onCancel={this.modalCancelHandler}\n            onConfirm={this.modalConfirmSearchHandler}\n            confirmText=\"Search\"\n            user={this.context.selectedUser}\n          />\n        }\n        {\n          this.state.searchUsers !== [] &&\n          <SearchUserList\n            searchUsers={this.state.searchUsers}\n            authUserId={this.context.userId}\n            onCancel={this.modalCancelHandler}\n              onViewDetail={this.showDetailHandler}\n          />\n        }\n        {this.state.isLoading === false &&\n          (<UserDetail\n            authUserId={this.context.userId}\n            user={this.state.selectedUser}\n            onEdit={this.startUpdateUserHandler}\n            onDelete={this.modalDeleteHandler}\n        />)}\n\n        {this.context.token &&\n          (<div className=\"users-control\">\n            <p>Search Users</p>\n            <button className=\"btn\" onClick={this.startSearchUserHandler}>\n              +\n            </button>\n          </div>\n        )}\n        {this.state.isLoading ? (\n          <Spinner />\n        ) : (\n          <UserList\n            users={this.state.users}\n            authUserId={this.context.userId}\n            onViewDetail={this.showDetailHandler}\n          />\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default UsersPage;\n"]},"metadata":{},"sourceType":"module"}