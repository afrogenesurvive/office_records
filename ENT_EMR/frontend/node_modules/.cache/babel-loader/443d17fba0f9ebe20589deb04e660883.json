{"ast":null,"code":"var _jsxFileName = \"/Users/pedrojacob/Downloads/AMR/websites/office_records/ENT_EMR/frontend/src/pages/Appointments.js\";\nimport ReactDOM from 'react-dom';\nimport React, { Component } from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport Accordion from 'react-bootstrap/Accordion'; // import Modal from '../components/Modal/Modal';\n// import Backdrop from '../components/Backdrop/Backdrop';\n\nimport AppointmentList from '../components/Appointments/AppointmentList/AppointmentList';\nimport AppointmentDetail from '../components/Appointments/AppointmentDetail';\nimport PatientDetail from '../components/Patients/PatientDetail';\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\nimport SearchAppointmentList from '../components/Appointments/AppointmentList/SearchAppointmentList';\nimport SearchAppointmentForm from '../components/Forms/SearchAppointmentForm';\nimport CreateAppointmentForm from '../components/Forms/CreateAppointmentForm';\nimport UpdateAppointmentForm from '../components/Forms/UpdateAppointmentForm';\nimport './Users.css';\n\nclass AppointmentsPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      creating: false,\n      updating: false,\n      deleting: false,\n      searching: false,\n      searchAppointments: [],\n      appointments: [],\n      isLoading: false,\n      selectedAppointment: null,\n      appointmentUpdateField: null\n    };\n    this.isActive = true;\n\n    this.startCreateAppointmentHandler = () => {\n      this.setState({\n        creating: true\n      });\n      console.log(\"CreateAppointmentForm...\", this.context.selectedPatient);\n    };\n\n    this.startUpdateAppointmentHandler = () => {\n      this.setState({\n        updating: true\n      });\n      console.log(\"UpdateAppointmentForm...\");\n    };\n\n    this.startSearchAppointmentHandler = () => {\n      this.setState({\n        searching: true\n      });\n      console.log(\"SearchAppointmentForm...\");\n    };\n\n    this.modalConfirmHandler = event => {\n      const timeInputValue = ReactDOM.findDOMNode(AppointmentsPage).getElementsByClassName('appointmentTimeInput');\n      console.log(\"event:  \", event.target.appointmentTimeInput, timeInputValue);\n      console.log(\"CreateAppointmentFormData:  \", event.target.formGridTitle.value);\n      this.setState({\n        creating: false\n      });\n      const userId = this.context.userId;\n      const patientId = this.context.selectedPatient._id;\n      console.log(\"\\n        userId: \".concat(userId, \"\\n        patientId: \").concat(patientId, \"\\n      \"));\n      const title = event.target.formGridTitle.value;\n      const type = event.target.formGridType.value;\n      const date = event.target.formGridDate.value; // const time = event.target.formGridTime.value;\n\n      const location = event.target.formGridLocation.value;\n      const description = event.target.formGridDescription.value;\n      const inProgress = event.target.formGridInProgress.value;\n      const attended = event.target.formGridAttended.value;\n      const important = event.target.formGridImportant.value;\n      const notes = event.target.formGridNotes.value;\n\n      if (title.trim().length === 0 || type.trim().length === 0 || date.trim().length === 0 || // time.trim().length === 0 ||\n      location.trim().length === 0 || description.trim().length === 0 || inProgress.trim().length === 0 || attended.trim().length === 0 || important.trim().length === 0 || notes.trim().length === 0) {\n        console.log(\"blank fields detected!!!...Please try again...\"); // return;\n      }\n\n      const appointment = {\n        title,\n        type,\n        date,\n        location,\n        description,\n        inProgress,\n        attended,\n        important,\n        notes\n      };\n      console.log(\"creating appointment...\\n        title: \".concat(title, \",\\n        type: \").concat(type, \",\\n        date: \").concat(date, \",\\n        time: ,\\n        location: \").concat(location, \",\\n        description: \").concat(description, \",\\n        inProgress: \").concat(inProgress, \",\\n        attended: \").concat(attended, \",\\n        important: \").concat(important, \",\\n        notes: \").concat(notes, \",\\n      \"));\n      const requestBody = {\n        query: \"\\n          mutation {\\n            createAppointment(userId:\\\"\".concat(userId, \"\\\", patientId:\\\"\").concat(patientId, \"\\\", appointmentInput: {title:\\\"\").concat(title, \"\\\",type:\\\"\").concat(type, \"\\\",date:\\\"\").concat(date, \"\\\",time:\\\"test\\\",location:\\\"\").concat(location, \"\\\",description:\\\"\").concat(description, \"\\\",inProgress:\").concat(inProgress, \",attended:\").concat(attended, \",important:\").concat(important, \",notes:\\\"\").concat(notes, \"\\\"}){_id,title,date,type,patient{name,dob,address},inProgress,attended,important,notes}}\\n        \")\n      };\n      const token = this.context.token;\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + this.context.token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n        this.setState(prevState => {\n          const updatedAppointments = [...prevState.appointments];\n          updatedAppointments.push({\n            _id: resData.data.createAppointment._id,\n            title: resData.data.createAppointment.title,\n            type: resData.data.createAppointment.type,\n            date: resData.data.createAppointment.date,\n            time: resData.data.createAppointment.time,\n            location: resData.data.createAppointment.location,\n            description: resData.data.createAppointment.description,\n            patient: resData.data.createAppointment.patient,\n            inProgress: resData.data.createAppointment.inProgress,\n            attended: resData.data.createAppointment.attended,\n            important: resData.data.createAppointment.important,\n            notes: resData.data.createAppointment.notes\n          });\n          return {\n            appointments: updatedAppointments\n          };\n        });\n        this.fetchAppointments();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.modalCancelHandler = () => {\n      this.setState({\n        creating: false,\n        updating: false,\n        searching: false,\n        selectedAppointment: null\n      });\n    };\n\n    this.modalConfirmUpdateHandler = event => {\n      if (this.context.user.role !== 'admin') {\n        console.log(\"Not the Admin! No edit permission!!\");\n      }\n\n      const userId = this.context.userId;\n      const appointmentId = this.context.selectedAppointment._id; // const patientId = this.context.selectedPatientId;\n\n      console.log(\"\\n        userId: \".concat(userId, \"\\n        appointmentd: \").concat(appointmentId, \",\\n      \")); // console.log(\"UpdateUserFormData:  \", event);\n\n      console.log(\"UpdateAppointmentFormData:  \", event.target.formGridTitle.value);\n      this.setState({\n        updating: false\n      });\n      let title = event.target.formGridTitle.value;\n      let type = event.target.formGridType.value;\n      let date = event.target.formGridDate.value;\n      let location = event.target.formGridLocation.value;\n      let description = event.target.formGridDescription.value;\n      let inProgress = event.target.formGridInProgress.value;\n      let attended = event.target.formGridAttended.value;\n      let important = event.target.formGridImportant.value;\n      let notes = event.target.formGridNotes.value;\n\n      if (title.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        title = this.context.selectedAppointment.title; // return;\n      }\n\n      if (type.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        type = this.context.selectedAppointment.type;\n      }\n\n      if (date.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        date = this.context.selectedAppointment.date;\n      }\n\n      if (location.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        location = this.context.selectedAppointment.location;\n      }\n\n      if (description.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        description = this.context.selectedAppointment.description;\n      }\n\n      if (inProgress.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        inProgress = this.context.selectedAppointment.inProgress;\n      }\n\n      if (attended.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        attended = this.context.selectedAppointment.attended;\n      }\n\n      if (important.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        important = this.context.selectedAppointment.important;\n      }\n\n      if (notes.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        notes = this.context.selectedAppointment.notes;\n      }\n\n      const appointment = {\n        title,\n        type,\n        date,\n        location,\n        description,\n        inProgress,\n        attended,\n        important,\n        notes\n      };\n      console.log(\"\\n        updating appointment...\\n        title: \".concat(title, \"\\n        type: \").concat(type, \"\\n        date: \").concat(date, \"\\n        location: \").concat(location, \"\\n        description: \").concat(description, \"\\n        inProgress: \").concat(inProgress, \"\\n        attended: \").concat(attended, \"\\n        important: \").concat(important, \"\\n        notes: \").concat(notes, \"\\n      \"));\n      const requestBody = {\n        query: \"\\n          mutation {updateAppointment(userId:\\\"\".concat(userId, \"\\\", appointmentId:\\\"\").concat(appointmentId, \"\\\", appointmentInput: {title:\\\"\").concat(title, \"\\\",type:\\\"\").concat(type, \"\\\",date:\\\"\").concat(date, \"\\\",location:\\\"\").concat(location, \"\\\",description:\\\"\").concat(description, \"\\\"}){_id,title,date,patient{name}}}\\n        \"),\n        variables: {\n          userId: userId,\n          appointmentId: appointmentId,\n          title: title,\n          type: type,\n          date: date,\n          location: location,\n          description: description,\n          inProgress: inProgress,\n          attended: attended,\n          important: important,\n          notes: notes\n        }\n      };\n      const token = this.context.token;\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n        const updatedAppointmentId = resData.data.updateAppointment._id;\n        const updatedAppointment = this.state.appointments.find(e => e._id === updatedAppointmentId);\n        const updatedAppointmentPos = this.state.appointments.indexOf(updatedAppointment);\n        const slicedArray = this.state.appointments.splice(updatedAppointmentPos, 1);\n        console.log(\"updatedAppointment:  \", JSON.stringify(updatedAppointment), \"  updatedPatientPos:  \", updatedAppointmentPos, \"  slicedArray:  \", slicedArray);\n        this.state.appointments.push({\n          _id: resData.data.updateAppointment._id,\n          title: resData.data.updateAppointment.title,\n          type: resData.data.updateAppointment.type,\n          date: resData.data.updateAppointment.date,\n          location: resData.data.updateAppointment.location,\n          description: resData.data.updateAppointment.description,\n          patient: resData.data.updateAppointment.patient,\n          inProgress: resData.data.updateAppointment.inProgress,\n          attended: resData.data.updateAppointment.attended,\n          important: resData.data.updateAppointment.important,\n          notes: resData.data.updateAppointment.notes\n        });\n        this.fetchAppointments();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.updateAppointmentPatientHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedAppointmentId = this.context.selectedAppointment._id;\n      let selectedPatientId = this.context.selectedPatient._id;\n\n      if (this.context.user.role !== 'admin') {\n        console.log(\"No edit permission!!\");\n        return;\n      }\n\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      console.log(\"\\n      updating appointment patient...\\n      userId: \".concat(userId, \",\\n      appointmentId: \").concat(selectedAppointmentId, \",\\n      patientId: \").concat(selectedPatientId, \",\\n      \"));\n      const requestBody = {\n        query: \"\\n        mutation {updateAppointmentPatient(userId:\\\"\".concat(userId, \"\\\",appointmentId:\\\"\").concat(selectedAppointmentId, \"\\\",patientId:\\\"\").concat(selectedPatientId, \"\\\")\\n        {_id,title,date,patient{_id,name,address,contact{phone,email},registrationDate,referralDate,expirationDate,insurance{company,number,expiry}},notes,inProgress,attended,important}}\\n        \")\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n        const updatedAppointmentId = resData.data.updateAppointmentPatient._id;\n        const updatedAppointment = this.state.appointments.find(e => e._id === updatedAppointmentId);\n        const updatedAppointmentPos = this.state.appointments.indexOf(updatedAppointment);\n        const slicedArray = this.state.appointments.splice(updatedAppointmentPos, 1);\n        console.log(\"updatedAppointment:  \", JSON.stringify(updatedAppointment), \"  updatedPatientPos:  \", updatedAppointmentPos, \"  slicedArray:  \", slicedArray);\n        this.state.appointments.push(updatedAppointment);\n        this.fetchAppointments();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.modalConfirmSearchHandler = event => {\n      console.log(\"SearchAppointmentForm:  \");\n      let userId = this.context.userId;\n      console.log(\"SearchAppointmentFormData:  \", event.target.formBasicField.value);\n      this.setState({\n        searching: false\n      });\n      let field = event.target.formBasicField.value;\n      let query = event.target.formBasicQuery.value;\n\n      if (field.trim().length === 0 || query.trim().length === 0) {\n        console.log(\"blank fields detected!!!...Please try again...\");\n        return;\n      }\n\n      const search = {\n        field,\n        query\n      };\n      console.log(\"Searching for Appointment:  \", JSON.stringify(search));\n      const requestBody = {\n        query: \"\\n          query GetAppointmentField($userId: ID!, $field: String!, $query: String!)\\n          {getAppointmentField(userId: $userId, field: $field, query: $query ){\\n            _id\\n            title\\n            type\\n            date\\n            location\\n            description\\n            patient{\\n              name\\n              address\\n            }\\n            inProgress\\n            attended\\n            important\\n            notes\\n          }\\n        }\\n        \",\n        variables: {\n          userId: userId,\n          field: field,\n          query: query\n        }\n      };\n      const token = this.context.token;\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n        const searchAppointments = resData.data.getAppointmentField;\n        this.setState({\n          searchAppointments: searchAppointments\n        });\n        console.log(\"state.searchAppointments:  \", this.state.searchAppointments); // this.fetchAppointments();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.modalCancelHandler = () => {\n      this.setState({\n        creating: false,\n        updating: false,\n        searching: false,\n        selectedAppointment: null\n      });\n    };\n\n    this.modalDeleteHandler = () => {\n      console.log(\"deleting appointment...selectedAppointment:  \", this.context.selectedAppointment);\n      const selectedAppointmentId = this.context.selectedAppointment._id;\n\n      if (this.context.user.role !== 'admin') {\n        console.log(\"Not the Admin! No edit permission!!\");\n      }\n\n      this.setState({\n        deleting: true\n      });\n      const requestBody = {\n        query: \"\\n          mutation DeleteAppointment($userId: ID!, $appointmentId: ID!) {\\n            deleteAppointment(userId: $userId, appointmentId: $appointmentId) {\\n              _id\\n              title\\n              type\\n              date\\n              location\\n              description\\n              patient\\n              {\\n                name\\n                dob\\n                address\\n              }\\n              inProgress\\n              attended\\n              important\\n              notes\\n            }\\n          }\\n        \",\n        variables: {\n          userId: this.context.userId,\n          appointmentId: selectedAppointmentId\n        }\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + this.context.token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"resData:  \", resData); // console.log(\"resData.data.deleteAppointment:  \", resData.data.deleteAppointment);\n\n        let deletedAppointment = resData.data.deleteAppointment;\n        console.log(deletedAppointment);\n        let deletedAppointmentId = deletedAppointment._id;\n        deletedAppointment = this.state.appointments.find(e => e._id === deletedAppointmentId);\n        const deletedAppointmentPos = this.state.appointments.indexOf(deletedAppointment);\n        const slicedArray = this.state.appointments.splice(deletedAppointmentPos, 1);\n        console.log(\"deletedAppointment:  \", JSON.stringify(deletedAppointment), \"  deletedUserPos:  \", deletedAppointmentPos, \"  slicedArray:  \", slicedArray);\n        this.setState({\n          deleting: false\n        });\n        this.fetchAppointments();\n      }).catch(err => {\n        console.log(err);\n\n        if (this.isActive) {\n          this.setState({\n            deleting: false\n          });\n        }\n      });\n    };\n\n    this.showDetailHandler = appointmentId => {\n      this.setState(prevState => {\n        const selectedAppointment = prevState.appointments.find(e => e._id === appointmentId);\n        this.setState({\n          selectedAppointment: selectedAppointment\n        });\n        this.context.selectedAppointment = selectedAppointment;\n        console.log(\"selectedAppointment:  \", selectedAppointment);\n        return {\n          selecteAppointment: selectedAppointment\n        };\n      });\n    };\n\n    this.titleELRef = React.createRef();\n    this.typeELRef = React.createRef();\n    this.dateELRef = React.createRef();\n    this.locationELRef = React.createRef();\n    this.descriptionELRef = React.createRef();\n    this.patientELRef = React.createRef();\n    this.inProgressELRef = React.createRef();\n    this.attendedELRef = React.createRef();\n    this.importantELRef = React.createRef();\n    this.notesELRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.fetchAppointments();\n  }\n\n  fetchAppointments() {\n    console.log(\"'fetch appointments function' context object... \" + JSON.stringify(this.context));\n    const userId = this.context.userId;\n    this.setState({\n      isLoading: true\n    });\n    const requestBody = {\n      query: \"\\n          query appointments($userId: ID!) {\\n            appointments(userId: $userId) {\\n              _id\\n              title\\n              type\\n              date\\n              location\\n              description\\n              patient\\n              {\\n                name\\n                dob\\n                address\\n              }\\n              inProgress\\n              attended\\n              important\\n              notes\\n            }\\n          }\\n        \",\n      variables: {\n        userId: userId\n      }\n    };\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    }).then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n\n      return res.json();\n    }).then(resData => {\n      const appointments = resData.data.appointments;\n      console.log(appointments);\n      this.context.appointments = this.state.appointments;\n\n      if (this.isActive) {\n        this.setState({\n          appointments: appointments,\n          isLoading: false\n        });\n      }\n    }).catch(err => {\n      console.log(err);\n\n      if (this.isActive) {\n        this.setState({\n          isLoading: false\n        });\n      }\n    });\n  }\n\n  updateAppointmentSpecial(event) {\n    console.log(\"special field to update:  \", event.target.value);\n    const field = event.target.value;\n    this.setState({\n      appointmentUpdateField: field\n    });\n  }\n\n  componentWillUnmount() {\n    this.isActive = false;\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 664\n      },\n      __self: this\n    }, React.createElement(Accordion, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 666\n      },\n      __self: this\n    }, React.createElement(Container, {\n      className: \"containerUserDetail\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 668\n      },\n      __self: this\n    }, React.createElement(Row, {\n      className: \"createUserRowAdd\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 670\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 4,\n      className: \"createUserColAdd\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 671\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 672\n      },\n      __self: this\n    }, \"Appointment Detail\")), React.createElement(Col, {\n      md: 6,\n      className: \"createUserColAdd\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 674\n      },\n      __self: this\n    }, React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: \"10\",\n      className: \"btn\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 675\n      },\n      __self: this\n    }, \"Details\"))), React.createElement(Accordion.Collapse, {\n      eventKey: \"10\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 681\n      },\n      __self: this\n    }, React.createElement(Row, {\n      className: \"createUserRowForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 682\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 11,\n      className: \"createUserColForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 683\n      },\n      __self: this\n    }, this.state.isLoading === false && this.state.selectedAppointment !== null && React.createElement(AppointmentDetail, {\n      authUserId: this.context.userId,\n      appointment: this.state.selectedAppointment,\n      onEdit: this.startUpdateAppointmentHandler,\n      onDelete: this.modalDeleteHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 689\n      },\n      __self: this\n    }))))), React.createElement(Container, {\n      className: \"containerCreateuser\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 703\n      },\n      __self: this\n    }, React.createElement(Row, {\n      className: \"createUserRowAdd\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 704\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 2,\n      className: \"createUserColAdd\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 705\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 706\n      },\n      __self: this\n    }, \"Add New Appointment\")), React.createElement(Col, {\n      md: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 708\n      },\n      __self: this\n    }, this.context.token && React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: \"11\",\n      className: \"btn\",\n      onClick: this.startCreateAppointmentHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 710\n      },\n      __self: this\n    }, \"Add\")), React.createElement(Col, {\n      md: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 715\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 716\n      },\n      __self: this\n    }, \"Patient\")), React.createElement(Col, {\n      md: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 718\n      },\n      __self: this\n    }, this.context.selectedPatient && React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 720\n      },\n      __self: this\n    }, this.context.selectedPatient.name))), React.createElement(Accordion.Collapse, {\n      eventKey: \"11\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 725\n      },\n      __self: this\n    }, React.createElement(Row, {\n      className: \"createUserRowForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 726\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 12,\n      className: \"createUserColForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 727\n      },\n      __self: this\n    }, this.state.creating && this.context.selectedPatient._id && React.createElement(CreateAppointmentForm, {\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmHandler,\n      onSubmit: this.modalConfirmHandler,\n      confirmText: \"Confirm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 731\n      },\n      __self: this\n    })))), React.createElement(Row, {\n      className: \"updateUserRowAdd\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 745\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 2,\n      className: \"updateUserCol\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 746\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 747\n      },\n      __self: this\n    }, \"Edit Selected Appointment\")), React.createElement(Col, {\n      md: 4,\n      className: \"updateUserCol\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 749\n      },\n      __self: this\n    }, this.context.token && React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: \"12\",\n      className: \"btn\",\n      onClick: this.startUpdateAppointmentHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 751\n      },\n      __self: this\n    }, \"Basic Info & Demographics\")), React.createElement(Col, {\n      md: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 756\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 757\n      },\n      __self: this\n    }, \"Appointment\")), React.createElement(Col, {\n      md: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 759\n      },\n      __self: this\n    }, this.context.selectedAppointment && React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 761\n      },\n      __self: this\n    }, this.context.selectedAppointment.title))), React.createElement(Row, {\n      className: \"createUserRowAdd\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 766\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 3,\n      className: \"updateUserCol2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 767\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 768\n      },\n      __self: this\n    }, \"Edit Selected Appointment\")), React.createElement(Col, {\n      md: 9,\n      className: \"updateUserCol2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 770\n      },\n      __self: this\n    }, this.context.token && React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: \"13\",\n      className: \"btn\",\n      value: \"patient\",\n      onClick: this.updateAppointmentSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 772\n      },\n      __self: this\n    }, \"Patient\"))), React.createElement(Accordion.Collapse, {\n      eventKey: \"12\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 779\n      },\n      __self: this\n    }, React.createElement(Row, {\n      className: \"updateUserRowForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 780\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 10,\n      className: \"updateUserColForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 781\n      },\n      __self: this\n    }, this.state.updating && this.state.selectedAppointment !== null && React.createElement(UpdateAppointmentForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmUpdateHandler,\n      confirmText: \"Confirm\",\n      appointment: this.state.selectedAppointment,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 785\n      },\n      __self: this\n    })))), React.createElement(Accordion.Collapse, {\n      eventKey: \"13\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 799\n      },\n      __self: this\n    }, React.createElement(Row, {\n      className: \"updateUserRowForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 800\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 10,\n      className: \"updateUserColForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 801\n      },\n      __self: this\n    }, this.state.appointmentUpdateField === 'patient' && this.state.selectedAppointment !== null && this.context.selectedPatient !== null && React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 820\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 8,\n      className: \"updateUserColAdd\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 821\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 822\n      },\n      __self: this\n    }, \"Add Patient: \", this.context.selectedPatient.name), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 823\n      },\n      __self: this\n    }, \" To Appointment: \", this.state.selectedAppointment.title, \" ??\"), React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: \"13\",\n      className: \"btn\",\n      onClick: this.updateAppointmentPatientHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 824\n      },\n      __self: this\n    }, \"Yes\"))))))), React.createElement(Container, {\n      className: \"containerSearchuser\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 838\n      },\n      __self: this\n    }, React.createElement(Row, {\n      className: \"createUserRowAdd\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 839\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 4,\n      className: \"createUserColAdd\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 840\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 841\n      },\n      __self: this\n    }, \"Search for a Appointment\")), React.createElement(Col, {\n      md: 8,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 843\n      },\n      __self: this\n    }, this.context.token && React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: \"14\",\n      className: \"btn\",\n      onClick: this.startSearchAppointmentHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 845\n      },\n      __self: this\n    }, \"Search\"))), React.createElement(Accordion.Collapse, {\n      eventKey: \"14\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 853\n      },\n      __self: this\n    }, React.createElement(Row, {\n      className: \"createUserRowForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 854\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 10,\n      className: \"createUserColForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 855\n      },\n      __self: this\n    }, this.state.searching === true && React.createElement(SearchAppointmentForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmSearchHandler,\n      confirmText: \"Search\",\n      appointment: this.context.selectedAppointment,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 858\n      },\n      __self: this\n    })), React.createElement(Col, {\n      md: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 869\n      },\n      __self: this\n    })))), React.createElement(Accordion.Collapse, {\n      eventKey: \"14\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 876\n      },\n      __self: this\n    }, React.createElement(Container, {\n      className: \"containerSearchuser\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 877\n      },\n      __self: this\n    }, React.createElement(Row, {\n      className: \"searchListRow\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 878\n      },\n      __self: this\n    }, this.state.searchAppointments !== [] && React.createElement(SearchAppointmentList, {\n      searchAppointments: this.state.searchAppointments,\n      authUserId: this.context.userId,\n      onCancel: this.modalCancelHandler,\n      onViewDetail: this.showDetailHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 881\n      },\n      __self: this\n    })))), React.createElement(Container, {\n      className: \"containerSearchuser\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 893\n      },\n      __self: this\n    }, React.createElement(Row, {\n      className: \"searchListRow\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 894\n      },\n      __self: this\n    }, this.state.isLoading ? React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 897\n      },\n      __self: this\n    }) : React.createElement(AppointmentList, {\n      appointments: this.state.appointments,\n      authUserId: this.context.userId,\n      onViewDetail: this.showDetailHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 899\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nAppointmentsPage.contextType = AuthContext;\nexport default AppointmentsPage;","map":{"version":3,"sources":["/Users/pedrojacob/Downloads/AMR/websites/office_records/ENT_EMR/frontend/src/pages/Appointments.js"],"names":["ReactDOM","React","Component","Container","Row","Col","Button","Accordion","AppointmentList","AppointmentDetail","PatientDetail","Spinner","AuthContext","SearchAppointmentList","SearchAppointmentForm","CreateAppointmentForm","UpdateAppointmentForm","AppointmentsPage","constructor","props","state","creating","updating","deleting","searching","searchAppointments","appointments","isLoading","selectedAppointment","appointmentUpdateField","isActive","startCreateAppointmentHandler","setState","console","log","context","selectedPatient","startUpdateAppointmentHandler","startSearchAppointmentHandler","modalConfirmHandler","event","timeInputValue","findDOMNode","getElementsByClassName","target","appointmentTimeInput","formGridTitle","value","userId","patientId","_id","title","type","formGridType","date","formGridDate","location","formGridLocation","description","formGridDescription","inProgress","formGridInProgress","attended","formGridAttended","important","formGridImportant","notes","formGridNotes","trim","length","appointment","requestBody","query","token","fetch","method","body","JSON","stringify","headers","Authorization","then","res","status","Error","json","resData","prevState","updatedAppointments","push","data","createAppointment","time","patient","fetchAppointments","catch","err","modalCancelHandler","modalConfirmUpdateHandler","user","role","appointmentId","variables","updatedAppointmentId","updateAppointment","updatedAppointment","find","e","updatedAppointmentPos","indexOf","slicedArray","splice","updateAppointmentPatientHandler","selectedAppointmentId","selectedPatientId","patientUpdateField","updateAppointmentPatient","modalConfirmSearchHandler","formBasicField","field","formBasicQuery","search","getAppointmentField","modalDeleteHandler","deletedAppointment","deleteAppointment","deletedAppointmentId","deletedAppointmentPos","showDetailHandler","selecteAppointment","titleELRef","createRef","typeELRef","dateELRef","locationELRef","descriptionELRef","patientELRef","inProgressELRef","attendedELRef","importantELRef","notesELRef","componentDidMount","updateAppointmentSpecial","componentWillUnmount","render","name","bind","contextType"],"mappings":"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","sourcesContent":["import ReactDOM from 'react-dom';\nimport React, { Component } from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Button from 'react-bootstrap/Button';\nimport Accordion from 'react-bootstrap/Accordion';\n\n// import Modal from '../components/Modal/Modal';\n// import Backdrop from '../components/Backdrop/Backdrop';\nimport AppointmentList from '../components/Appointments/AppointmentList/AppointmentList';\nimport AppointmentDetail from '../components/Appointments/AppointmentDetail';\nimport PatientDetail from '../components/Patients/PatientDetail';\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\nimport SearchAppointmentList from '../components/Appointments/AppointmentList/SearchAppointmentList';\nimport SearchAppointmentForm from '../components/Forms/SearchAppointmentForm';\n\nimport CreateAppointmentForm from '../components/Forms/CreateAppointmentForm';\nimport UpdateAppointmentForm from '../components/Forms/UpdateAppointmentForm';\nimport './Users.css';\n\nclass AppointmentsPage extends Component {\n  state = {\n    creating: false,\n    updating: false,\n    deleting: false,\n    searching: false,\n    searchAppointments: [],\n    appointments: [],\n    isLoading: false,\n    selectedAppointment: null,\n    appointmentUpdateField: null,\n  };\n  isActive = true;\n\n  static contextType = AuthContext;\n\n  constructor(props) {\n    super(props);\n    this.titleELRef = React.createRef();\n    this.typeELRef = React.createRef();\n    this.dateELRef = React.createRef();\n    this.locationELRef = React.createRef();\n    this.descriptionELRef = React.createRef();\n    this.patientELRef = React.createRef();\n    this.inProgressELRef = React.createRef();\n    this.attendedELRef = React.createRef();\n    this.importantELRef = React.createRef();\n    this.notesELRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.fetchAppointments();\n  }\n\n\n  startCreateAppointmentHandler = () => {\n    this.setState({ creating: true });\n    console.log(\"CreateAppointmentForm...\", this.context.selectedPatient);\n  };\n  startUpdateAppointmentHandler = () => {\n    this.setState({ updating: true });\n    console.log(\"UpdateAppointmentForm...\");\n  };\n  startSearchAppointmentHandler = () => {\n    this.setState({ searching: true });\n    console.log(\"SearchAppointmentForm...\");\n  };\n\n  modalConfirmHandler = (event) => {\n    const timeInputValue = ReactDOM.findDOMNode(AppointmentsPage).getElementsByClassName('appointmentTimeInput')\n    console.log(\"event:  \", event.target.appointmentTimeInput, timeInputValue);\n\n    console.log(\"CreateAppointmentFormData:  \", event.target.formGridTitle.value);\n\n    this.setState({ creating: false });\n    const userId = this.context.userId;\n    const patientId = this.context.selectedPatient._id;\n    console.log(`\n        userId: ${userId}\n        patientId: ${patientId}\n      `);\n\n    const title = event.target.formGridTitle.value;\n    const type = event.target.formGridType.value;\n    const date = event.target.formGridDate.value;\n    // const time = event.target.formGridTime.value;\n    const location = event.target.formGridLocation.value;\n    const description = event.target.formGridDescription.value;\n    const inProgress = event.target.formGridInProgress.value;\n    const attended = event.target.formGridAttended.value;\n    const important = event.target.formGridImportant.value;\n    const notes = event.target.formGridNotes.value;\n\n    if (\n      title.trim().length === 0 ||\n      type.trim().length === 0 ||\n      date.trim().length === 0 ||\n      // time.trim().length === 0 ||\n      location.trim().length === 0 ||\n      description.trim().length === 0 ||\n      inProgress.trim().length === 0 ||\n      attended.trim().length === 0 ||\n      important.trim().length === 0 ||\n      notes.trim().length === 0\n    ) {\n      console.log(\"blank fields detected!!!...Please try again...\");\n      // return;\n    }\n\n    const appointment = { title, type, date, location, description, inProgress, attended, important, notes };\n    console.log(`creating appointment...\n        title: ${title},\n        type: ${type},\n        date: ${date},\n        time: ,\n        location: ${location},\n        description: ${description},\n        inProgress: ${inProgress},\n        attended: ${attended},\n        important: ${important},\n        notes: ${notes},\n      `);\n\n    const requestBody = {\n      query: `\n          mutation {\n            createAppointment(userId:\\\"${userId}\\\", patientId:\\\"${patientId}\\\", appointmentInput: {title:\\\"${title}\\\",type:\\\"${type}\\\",date:\\\"${date}\\\",time:\\\"test\\\",location:\\\"${location}\\\",description:\\\"${description}\\\",inProgress:${inProgress},attended:${attended},important:${important},notes:\\\"${notes}\\\"}){_id,title,date,type,patient{name,dob,address},inProgress,attended,important,notes}}\n        `,\n    };\n\n    const token = this.context.token;\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n\n        this.setState(prevState => {\n          const updatedAppointments = [...prevState.appointments];\n          updatedAppointments.push(\n            {\n            _id: resData.data.createAppointment._id,\n            title: resData.data.createAppointment.title,\n            type: resData.data.createAppointment.type,\n            date: resData.data.createAppointment.date,\n            time: resData.data.createAppointment.time,\n            location: resData.data.createAppointment.location,\n            description: resData.data.createAppointment.description,\n            patient: resData.data.createAppointment.patient,\n            inProgress: resData.data.createAppointment.inProgress,\n            attended: resData.data.createAppointment.attended,\n            important: resData.data.createAppointment.important,\n            notes: resData.data.createAppointment.notes\n          }\n        );\n\n          return { appointments: updatedAppointments };\n        });\n\n        this.fetchAppointments();\n\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  modalCancelHandler = () => {\n    this.setState({ creating: false, updating: false, searching: false, selectedAppointment: null });\n  };\n\n\n  modalConfirmUpdateHandler = (event) => {\n\n    if(this.context.user.role !== 'admin') {\n      console.log(\"Not the Admin! No edit permission!!\");\n\n    }\n\n    const userId = this.context.userId;\n    const appointmentId = this.context.selectedAppointment._id;\n    // const patientId = this.context.selectedPatientId;\n    console.log(`\n        userId: ${userId}\n        appointmentd: ${appointmentId},\n      `);\n\n    // console.log(\"UpdateUserFormData:  \", event);\n    console.log(\"UpdateAppointmentFormData:  \", event.target.formGridTitle.value);\n\n\n    this.setState({ updating: false });\n    let title = event.target.formGridTitle.value;\n    let type = event.target.formGridType.value;\n    let date = event.target.formGridDate.value;\n    let location = event.target.formGridLocation.value;\n    let description = event.target.formGridDescription.value;\n    let inProgress = event.target.formGridInProgress.value;\n    let attended = event.target.formGridAttended.value;\n    let important = event.target.formGridImportant.value;\n    let notes = event.target.formGridNotes.value;\n\n    if (title.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      title  = this.context.selectedAppointment.title;\n      // return;\n    }\n    if (type.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      type  = this.context.selectedAppointment.type;\n    }\n    if (date.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      date  = this.context.selectedAppointment.date;\n    }\n    if (location.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      location  = this.context.selectedAppointment.location;\n    }\n    if (description.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      description  = this.context.selectedAppointment.description;\n    }\n    if (inProgress.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      inProgress  = this.context.selectedAppointment.inProgress;\n    }\n    if (attended.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      attended  = this.context.selectedAppointment.attended;\n    }\n    if (important.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      important  = this.context.selectedAppointment.important;\n    }\n    if (notes.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      notes  = this.context.selectedAppointment.notes;\n    }\n\n\n\n    const appointment = { title, type, date, location, description, inProgress, attended, important, notes };\n    console.log(`\n        updating appointment...\n        title: ${title}\n        type: ${type}\n        date: ${date}\n        location: ${location}\n        description: ${description}\n        inProgress: ${inProgress}\n        attended: ${attended}\n        important: ${important}\n        notes: ${notes}\n      `);\n\n    const requestBody = {\n      query: `\n          mutation {updateAppointment(userId:\\\"${userId}\\\", appointmentId:\\\"${appointmentId}\\\", appointmentInput: {title:\\\"${title}\\\",type:\\\"${type}\\\",date:\\\"${date}\\\",location:\\\"${location}\\\",description:\\\"${description}\\\"}){_id,title,date,patient{name}}}\n        `,\n        variables: {\n          userId: userId,\n          appointmentId: appointmentId,\n          title: title,\n          type: type,\n          date: date,\n          location: location,\n          description: description,\n          inProgress: inProgress,\n          attended: attended,\n          important: important,\n          notes: notes\n        }\n    };\n\n    const token = this.context.token;\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n\n        const updatedAppointmentId = resData.data.updateAppointment._id;\n        const updatedAppointment = this.state.appointments.find(e => e._id === updatedAppointmentId);\n        const updatedAppointmentPos = this.state.appointments.indexOf(updatedAppointment);\n        const slicedArray = this.state.appointments.splice(updatedAppointmentPos, 1);\n        console.log(\"updatedAppointment:  \", JSON.stringify(updatedAppointment),\"  updatedPatientPos:  \", updatedAppointmentPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.appointments.push(\n          {\n          _id: resData.data.updateAppointment._id,\n          title: resData.data.updateAppointment.title,\n          type: resData.data.updateAppointment.type,\n          date: resData.data.updateAppointment.date,\n          location: resData.data.updateAppointment.location,\n          description: resData.data.updateAppointment.description,\n          patient: resData.data.updateAppointment.patient,\n          inProgress: resData.data.updateAppointment.inProgress,\n          attended: resData.data.updateAppointment.attended,\n          important: resData.data.updateAppointment.important,\n          notes: resData.data.updateAppointment.notes\n        });\n        this.fetchAppointments();\n\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n\n  updateAppointmentPatientHandler = (event) => {\n\n    const token = this.context.token;\n    const userId = this.context.userId;\n    let selectedAppointmentId = this.context.selectedAppointment._id;\n    let selectedPatientId = this.context.selectedPatient._id;\n    if(\n      this.context.user.role !== 'admin'\n    ) {\n      console.log(\"No edit permission!!\");\n      return;\n    }\n\n    this.setState({ updating: false , patientUpdateField: null });\n\n    console.log(`\n      updating appointment patient...\n      userId: ${userId},\n      appointmentId: ${selectedAppointmentId},\n      patientId: ${selectedPatientId},\n      `);\n\n      const requestBody = {\n        query:`\n        mutation {updateAppointmentPatient(userId:\\\"${userId}\\\",appointmentId:\\\"${selectedAppointmentId}\\\",patientId:\\\"${selectedPatientId}\\\")\n        {_id,title,date,patient{_id,name,address,contact{phone,email},registrationDate,referralDate,expirationDate,insurance{company,number,expiry}},notes,inProgress,attended,important}}\n        `\n      }\n\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData));\n\n          const updatedAppointmentId = resData.data.updateAppointmentPatient._id;\n          const updatedAppointment = this.state.appointments.find(e => e._id === updatedAppointmentId);\n          const updatedAppointmentPos = this.state.appointments.indexOf(updatedAppointment);\n          const slicedArray = this.state.appointments.splice(updatedAppointmentPos, 1);\n          console.log(\"updatedAppointment:  \", JSON.stringify(updatedAppointment),\"  updatedPatientPos:  \", updatedAppointmentPos, \"  slicedArray:  \", slicedArray);\n\n          this.state.appointments.push(updatedAppointment);\n          this.fetchAppointments();\n\n        })\n        .catch(err => {\n          console.log(err);\n        });\n\n\n  }\n\n\n  modalConfirmSearchHandler = (event) => {\n    console.log(\"SearchAppointmentForm:  \");\n\n\n    let userId = this.context.userId;\n\n      console.log(\"SearchAppointmentFormData:  \", event.target.formBasicField.value);\n      this.setState({ searching: false });\n\n      let field = event.target.formBasicField.value;\n      let query = event.target.formBasicQuery.value;\n\n      if (\n        field.trim().length === 0 ||\n        query.trim().length === 0\n      ) {\n        console.log(\"blank fields detected!!!...Please try again...\");\n        return;\n      }\n\n      const search = { field, query }\n      console.log(\"Searching for Appointment:  \", JSON.stringify(search));\n\n      const requestBody = {\n        query: `\n          query GetAppointmentField($userId: ID!, $field: String!, $query: String!)\n          {getAppointmentField(userId: $userId, field: $field, query: $query ){\n            _id\n            title\n            type\n            date\n            location\n            description\n            patient{\n              name\n              address\n            }\n            inProgress\n            attended\n            important\n            notes\n          }\n        }\n        `,\n        variables: {\n          userId: userId,\n          field: field,\n          query: query\n        }\n      }\n\n      const token = this.context.token;\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData));\n\n          const searchAppointments = resData.data.getAppointmentField;\n\n          this.setState({ searchAppointments: searchAppointments})\n          console.log(\"state.searchAppointments:  \", this.state.searchAppointments);\n          // this.fetchAppointments();\n        })\n        .catch(err => {\n          console.log(err);\n        });\n  }\n\n\n\n  modalCancelHandler = () => {\n    this.setState({ creating: false, updating: false, searching: false, selectedAppointment: null });\n  };\n\n\n  fetchAppointments() {\n    console.log(\"'fetch appointments function' context object... \" + JSON.stringify(this.context));\n    const userId = this.context.userId;\n\n    this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n          query appointments($userId: ID!) {\n            appointments(userId: $userId) {\n              _id\n              title\n              type\n              date\n              location\n              description\n              patient\n              {\n                name\n                dob\n                address\n              }\n              inProgress\n              attended\n              important\n              notes\n            }\n          }\n        `,\n        variables: {\n          userId: userId\n        }\n    };\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const appointments = resData.data.appointments;\n        console.log(appointments);\n\n        this.context.appointments = this.state.appointments;\n        if (this.isActive) {\n          this.setState({ appointments: appointments, isLoading: false });\n        }\n      })\n      .catch(err => {\n        console.log(err);\n        if (this.isActive) {\n          this.setState({ isLoading: false });\n        }\n      });\n  }\n\n  modalDeleteHandler = () => {\n    console.log(\"deleting appointment...selectedAppointment:  \", this.context.selectedAppointment);\n\n    const selectedAppointmentId = this.context.selectedAppointment._id;\n\n    if(this.context.user.role !== 'admin') {\n      console.log(\"Not the Admin! No edit permission!!\");\n    }\n\n    this.setState({deleting: true});\n\n\n    const requestBody = {\n      query: `\n          mutation DeleteAppointment($userId: ID!, $appointmentId: ID!) {\n            deleteAppointment(userId: $userId, appointmentId: $appointmentId) {\n              _id\n              title\n              type\n              date\n              location\n              description\n              patient\n              {\n                name\n                dob\n                address\n              }\n              inProgress\n              attended\n              important\n              notes\n            }\n          }\n        `,\n        variables: {\n          userId: this.context.userId,\n          appointmentId: selectedAppointmentId\n        }\n    };\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"resData:  \", resData);\n        // console.log(\"resData.data.deleteAppointment:  \", resData.data.deleteAppointment);\n        let deletedAppointment = resData.data.deleteAppointment;\n        console.log(deletedAppointment);\n\n        let deletedAppointmentId = deletedAppointment._id;\n        deletedAppointment = this.state.appointments.find(e => e._id === deletedAppointmentId);\n        const deletedAppointmentPos = this.state.appointments.indexOf(deletedAppointment);\n        const slicedArray = this.state.appointments.splice(deletedAppointmentPos, 1);\n        console.log(\"deletedAppointment:  \", JSON.stringify(deletedAppointment),\"  deletedUserPos:  \", deletedAppointmentPos, \"  slicedArray:  \", slicedArray);\n\n        this.setState({ deleting: false });\n\n        this.fetchAppointments();\n\n      })\n      .catch(err => {\n        console.log(err);\n        if (this.isActive) {\n          this.setState({ deleting: false });\n        }\n      });\n\n\n  }\n\n  updateAppointmentSpecial (event) {\n\n    console.log(\"special field to update:  \", event.target.value);\n    const field = event.target.value;\n    this.setState({ appointmentUpdateField: field});\n\n  }\n\n\n  showDetailHandler = appointmentId => {\n\n    this.setState(prevState => {\n      const selectedAppointment = prevState.appointments.find(e => e._id === appointmentId);\n      this.setState({selectedAppointment: selectedAppointment});\n      this.context.selectedAppointment = selectedAppointment;\n      console.log(\"selectedAppointment:  \", selectedAppointment);\n      return { selecteAppointment: selectedAppointment };\n    });\n  };\n\n\n  componentWillUnmount() {\n    this.isActive = false;\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n\n      <Accordion>\n\n      <Container className=\"containerUserDetail\">\n\n      <Row className=\"createUserRowAdd\">\n      <Col md={4} className=\"createUserColAdd\">\n      <p>Appointment Detail</p>\n      </Col>\n      <Col md={6} className=\"createUserColAdd\">\n      <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"10\" className=\"btn\">\n      Details\n      </Accordion.Toggle>\n      </Col>\n      </Row>\n\n      <Accordion.Collapse eventKey=\"10\">\n      <Row className=\"createUserRowForm\">\n      <Col md={11} className=\"createUserColForm\">\n      {\n        this.state.isLoading === false &&\n        this.state.selectedAppointment !== null\n        &&\n        (\n          <AppointmentDetail\n          authUserId={this.context.userId}\n          appointment={this.state.selectedAppointment}\n          onEdit={this.startUpdateAppointmentHandler}\n          onDelete={this.modalDeleteHandler}\n      />\n    )\n    }\n      </Col>\n      </Row>\n      </Accordion.Collapse>\n\n      </Container>\n\n      <Container className=\"containerCreateuser\">\n      <Row className=\"createUserRowAdd\">\n      <Col md={2} className=\"createUserColAdd\">\n        <p>Add New Appointment</p>\n      </Col>\n      <Col md={4}>\n        {this.context.token && (\n          <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"11\" className=\"btn\" onClick={this.startCreateAppointmentHandler}>\n          Add\n          </Accordion.Toggle>\n        )}\n      </Col>\n      <Col md={2}>\n        <p>Patient</p>\n      </Col>\n      <Col md={4}>\n        {this.context.selectedPatient && (\n          <p>{this.context.selectedPatient.name}</p>\n        )}\n      </Col>\n      </Row>\n\n      <Accordion.Collapse eventKey=\"11\">\n      <Row className=\"createUserRowForm\">\n      <Col md={12} className=\"createUserColForm\">\n      {\n        this.state.creating && this.context.selectedPatient._id\n        && (\n          <CreateAppointmentForm\n          canCancel\n            canConfirm\n            onCancel={this.modalCancelHandler}\n            onConfirm={this.modalConfirmHandler}\n            onSubmit={this.modalConfirmHandler}\n            confirmText=\"Confirm\"\n          />\n      )}\n      </Col>\n      </Row>\n      </Accordion.Collapse>\n\n\n      <Row className=\"updateUserRowAdd\">\n      <Col md={2} className=\"updateUserCol\">\n      <p>Edit Selected Appointment</p>\n      </Col>\n      <Col md={4} className=\"updateUserCol\">\n      {this.context.token && (\n        <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"12\" className=\"btn\" onClick={this.startUpdateAppointmentHandler}>\n        Basic Info & Demographics\n        </Accordion.Toggle>\n      )}\n      </Col>\n      <Col md={2}>\n        <p>Appointment</p>\n      </Col>\n      <Col md={4}>\n        {this.context.selectedAppointment && (\n          <p>{this.context.selectedAppointment.title}</p>\n        )}\n      </Col>\n      </Row>\n\n      <Row className=\"createUserRowAdd\">\n      <Col md={3} className=\"updateUserCol2\">\n      <p>Edit Selected Appointment</p>\n      </Col>\n      <Col md={9} className=\"updateUserCol2\">\n      {this.context.token && (\n        <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"13\" className=\"btn\" value='patient' onClick={this.updateAppointmentSpecial.bind(this)}>\n        Patient\n        </Accordion.Toggle>\n      )}\n      </Col>\n      </Row>\n\n      <Accordion.Collapse eventKey=\"12\">\n      <Row className=\"updateUserRowForm\">\n      <Col md={10} className=\"updateUserColForm\">\n      {this.state.updating &&\n        this.state.selectedAppointment !== null\n        && (\n        <UpdateAppointmentForm\n        authUserId={this.context.userId}\n        canCancel\n          canConfirm\n          onCancel={this.modalCancelHandler}\n          onConfirm={this.modalConfirmUpdateHandler}\n          confirmText=\"Confirm\"\n          appointment={this.state.selectedAppointment}\n        />\n      )}\n      </Col>\n      </Row>\n      </Accordion.Collapse>\n\n      <Accordion.Collapse eventKey=\"13\">\n      <Row className=\"updateUserRowForm\">\n      <Col md={10} className=\"updateUserColForm\">\n      {\n      //   this.state.appointmentUpdateField === 'patient' &&\n      // this.state.selectedAppointment !== null\n      // && (\n      //   <UpdateAppointmentPatientForm\n      //   authUserId={this.context.userId}\n      //   canCancel\n      //     canConfirm\n      //     onCancel={this.modalCancelHandler}\n      //     onConfirm={this.updateAppointmentPatientHandler}\n      //     confirmText=\"Confirm\"\n      //     appointment={this.state.selectedAppointment}\n      //   />\n      // )\n    }\n      {this.state.appointmentUpdateField === 'patient' &&\n      this.state.selectedAppointment !== null &&\n      this.context.selectedPatient !== null && (\n        <Row>\n        <Col md={8} className=\"updateUserColAdd\">\n        <p>Add Patient: {this.context.selectedPatient.name}</p>\n        <p> To Appointment: {this.state.selectedAppointment.title} ??</p>\n        <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"13\" className=\"btn\" onClick={this.updateAppointmentPatientHandler}>\n        Yes\n        </Accordion.Toggle>\n        </Col>\n        </Row>\n      )}\n      </Col>\n      </Row>\n      </Accordion.Collapse>\n\n      </Container>\n\n\n\n      <Container className=\"containerSearchuser\">\n    <Row className=\"createUserRowAdd\">\n    <Col md={4} className=\"createUserColAdd\">\n      <p>Search for a Appointment</p>\n    </Col>\n    <Col md={8}>\n      {this.context.token && (\n        <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"14\" className=\"btn\" onClick={this.startSearchAppointmentHandler}>\n        Search\n        </Accordion.Toggle>\n      )}\n\n    </Col>\n    </Row>\n\n    <Accordion.Collapse eventKey=\"14\">\n    <Row className=\"createUserRowForm\">\n    <Col md={10} className=\"createUserColForm\">\n    {\n      this.state.searching === true &&\n      <SearchAppointmentForm\n      authUserId={this.context.userId}\n      canCancel\n        canConfirm\n        onCancel={this.modalCancelHandler}\n        onConfirm={this.modalConfirmSearchHandler}\n        confirmText=\"Search\"\n        appointment={this.context.selectedAppointment}\n      />\n    }\n    </Col>\n    <Col md={10}>\n\n    </Col>\n    </Row>\n    </Accordion.Collapse>\n    </Container>\n\n  <Accordion.Collapse eventKey=\"14\">\n    <Container className=\"containerSearchuser\">\n    <Row className=\"searchListRow\">\n    {\n      this.state.searchAppointments !== [] &&\n      <SearchAppointmentList\n        searchAppointments={this.state.searchAppointments}\n        authUserId={this.context.userId}\n        onCancel={this.modalCancelHandler}\n          onViewDetail={this.showDetailHandler}\n      />\n    }\n    </Row>\n    </Container>\n    </Accordion.Collapse>\n\n\n    <Container className=\"containerSearchuser\">\n  <Row className=\"searchListRow\">\n\n  {this.state.isLoading ? (\n    <Spinner />\n  ) : (\n    <AppointmentList\n      appointments={this.state.appointments}\n      authUserId={this.context.userId}\n      onViewDetail={this.showDetailHandler}\n    />\n  )}\n\n  </Row>\n  </Container>\n  </Accordion>\n\n        {\n        //   this.state.isLoading === false &&\n        //   (<PatientDetail\n        //     authUserId={this.context.userId}\n        //     patient={this.context.selectedPatient}\n        //     className=\"PatientDetailBox2\"\n        // />)\n      }\n      </React.Fragment>\n    );\n  }\n}\n\nexport default AppointmentsPage;\n"]},"metadata":{},"sourceType":"module"}