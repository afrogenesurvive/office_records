{"ast":null,"code":"var _jsxFileName = \"/Users/pedrojacob/Downloads/AMR/websites/office_records/ENT_EMR/frontend/src/pages/thisUser.js\";\nimport React, { Component } from 'react';\nimport Modal from '../components/Modal/Modal';\nimport Backdrop from '../components/Backdrop/Backdrop';\nimport ThisUserProfile from '../components/Users/thisUserProfile';\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\nimport './Users.css';\n\nclass UsersPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      user: null,\n      isLoading: false\n    };\n    this.isActive = true;\n    this.emailElRef = React.createRef();\n    this.passwordElRef = React.createRef();\n    this.nameElRef = React.createRef();\n    this.roleElRef = React.createRef();\n    this.user = null;\n  }\n\n  componentDidMount() {\n    this.getThisUser();\n  }\n\n  getThisUser() {\n    this.setState({\n      isLoading: true\n    });\n    const requestBody = {\n      query: \"\\n          query {\\n            getThisUser {\\n              _id\\n              email\\n              password\\n              name\\n              role\\n            }\\n          }\\n        \"\n    };\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    }).then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n\n      return res.json();\n    }).then(resData => {\n      // console.log(\"resdata...\" + JSON.stringify(resData));\n      const thisUser = resData.data.getThisUser;\n\n      if (this.isActive) {\n        this.setState({\n          user: thisUser,\n          isLoading: false\n        });\n        this.context.user = thisUser;\n        console.log(\"thisUser context, user object.name ...\" + this.context.user.name);\n        console.log(\"thisUser context, user object.role ...\" + this.context.user.role);\n        sessionStorage.setItem('thisUser', JSON.stringify(thisUser));\n      }\n    }).catch(err => {\n      console.log(err);\n\n      if (this.isActive) {\n        this.setState({\n          isLoading: false\n        });\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    this.isActive = false;\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, this.state.updating && React.createElement(UpdateUserForm, {\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmUpdateHandler,\n      confirmText: \"Confirm\",\n      user: this.context.selectedUser,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }), this.state.isLoading ? React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }) : React.createElement(ThisUserProfile, {\n      user: this.state.user,\n      authUserId: this.context.userId,\n      onEdit: this.startUpdateUserHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }));\n  }\n\n}\n\nUsersPage.contextType = AuthContext;\nexport default UsersPage;","map":{"version":3,"sources":["/Users/pedrojacob/Downloads/AMR/websites/office_records/ENT_EMR/frontend/src/pages/thisUser.js"],"names":["React","Component","Modal","Backdrop","ThisUserProfile","Spinner","AuthContext","UsersPage","constructor","props","state","user","isLoading","isActive","emailElRef","createRef","passwordElRef","nameElRef","roleElRef","componentDidMount","getThisUser","setState","requestBody","query","fetch","method","body","JSON","stringify","headers","Authorization","context","token","then","res","status","Error","json","resData","thisUser","data","console","log","name","role","sessionStorage","setItem","catch","err","componentWillUnmount","render","updating","modalCancelHandler","modalConfirmUpdateHandler","selectedUser","userId","startUpdateUserHandler","contextType"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport Modal from '../components/Modal/Modal';\nimport Backdrop from '../components/Backdrop/Backdrop';\nimport ThisUserProfile from '../components/Users/thisUserProfile';\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\nimport './Users.css';\n\nclass UsersPage extends Component {\n  state = {\n    user: null,\n    isLoading: false\n  };\n  isActive = true;\n\n  static contextType = AuthContext;\n\n  constructor(props) {\n    super(props);\n    this.emailElRef = React.createRef();\n    this.passwordElRef = React.createRef();\n    this.nameElRef = React.createRef();\n    this.roleElRef = React.createRef();\n    this.user = null;\n  }\n\n  componentDidMount() {\n    this.getThisUser();\n  }\n\n\n\n\n  getThisUser() {\n\n    this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n          query {\n            getThisUser {\n              _id\n              email\n              password\n              name\n              role\n            }\n          }\n        `\n    };\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        // console.log(\"resdata...\" + JSON.stringify(resData));\n        const thisUser = resData.data.getThisUser;\n        if (this.isActive) {\n\n          this.setState({ user: thisUser, isLoading: false });\n\n          this.context.user = thisUser;\n          console.log(\"thisUser context, user object.name ...\" + this.context.user.name);\n          console.log(\"thisUser context, user object.role ...\" + this.context.user.role);\n\n          sessionStorage.setItem('thisUser', JSON.stringify(thisUser));\n\n        }\n      })\n      .catch(err => {\n        console.log(err);\n        if (this.isActive) {\n          this.setState({ isLoading: false });\n        }\n      });\n  }\n\n\n  componentWillUnmount() {\n    this.isActive = false;\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n      {this.state.updating && (\n        <UpdateUserForm\n        canCancel\n          canConfirm\n          onCancel={this.modalCancelHandler}\n          onConfirm={this.modalConfirmUpdateHandler}\n          confirmText=\"Confirm\"\n          user={this.context.selectedUser}\n        />\n      )}\n\n        {this.state.isLoading ? (\n          <Spinner />\n        ) : (\n          <ThisUserProfile\n            user={this.state.user}\n            authUserId={this.context.userId}\n            onEdit={this.startUpdateUserHandler}\n          />\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default UsersPage;\n"]},"metadata":{},"sourceType":"module"}