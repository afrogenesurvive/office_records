{"ast":null,"code":"var _jsxFileName = \"/Users/pedrojacob/Downloads/AMR/websites/office_records/ENT_EMR/frontend/src/pages/Users.js\";\nimport S3 from 'react-aws-s3'; // import S3FileUpload from 'react-s3';\n\nimport React, { Component } from 'react'; // import FileViewer from 'react-file-viewer';\n\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col'; // import Form from 'react-bootstrap/Form';\n\nimport Button from 'react-bootstrap/Button';\nimport Accordion from 'react-bootstrap/Accordion';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab'; // import TabContainer from 'react-bootstrap/TabContainer';\n// import TabContent from 'react-bootstrap/TabContent';\n// import TabPane from 'react-bootstrap/TabPane';\n\nimport Nav from 'react-bootstrap/Nav';\nimport Card from 'react-bootstrap/Card'; // import Modal from '../components/Modal/Modal';\n// import Backdrop from '../components/Backdrop/Backdrop';\n\nimport UserList from '../components/Users/UserList/UserList';\nimport SearchUserList from '../components/Users/UserList/SearchUserList';\nimport UserDetail from '../components/Users/UserDetail';\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\nimport SidebarPage from './Sidebar';\nimport AlertBox from '../components/AlertBox';\nimport LoadingOverlay from '../components/LoadingOverlay';\nimport AttachmentViewer from '../components/AttachmentViewer';\nimport PdfCreator from '../components/PdfCreator';\nimport CreateUserForm from '../components/Forms/CreateUserForm';\nimport UpdateUserForm from '../components/Forms/UpdateUserForm';\nimport UpdateUserFieldForm from '../components/Forms/UpdateUserFieldForm';\nimport UpdateUserAttendanceForm from '../components/Forms/UpdateUserAttendanceForm';\nimport UpdateUserAttachmentForm from '../components/Forms/UpdateUserAttachmentForm';\nimport UpdateUserLeaveForm from '../components/Forms/UpdateUserLeaveForm';\nimport SearchUserForm from '../components/Forms/SearchUserForm';\nimport SearchUserIdForm from '../components/Forms/SearchUserIdForm';\nimport SearchUserNameForm from '../components/Forms/SearchUserNameForm';\nimport SearchUserAttendanceDateForm from '../components/Forms/SearchUserAttendanceDateForm';\nimport SearchUserLeaveDateRangeForm from '../components/Forms/SearchUserLeaveDateRangeForm';\nimport './Users.css';\n\nclass UsersPage extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      creating: false,\n      updating: false,\n      deleting: false,\n      searching: false,\n      users: [],\n      searchUsers: [],\n      isLoading: false,\n      isSorting: false,\n      selectedUser: null,\n      userUpdateField: null,\n      userSearchField: null,\n      userSearchQuery: null,\n      canDelete: null,\n      userAlert: null,\n      overlay: false,\n      overlayStatus: null,\n      file: null,\n      showAttachment: false,\n      showThisAttachmentFile: null,\n      showThisAttachmentType: null,\n      createPdf: false,\n      pdfData: null\n    };\n    this.isActive = true;\n\n    this.startCreateUserHandler = () => {\n      this.setState({\n        creating: true\n      });\n      console.log(\"CreateUserForm...\");\n    };\n\n    this.startUpdateUserHandler = () => {\n      this.setState({\n        updating: true\n      });\n      console.log(\"UpdateUserForm...\");\n    };\n\n    this.startSearchUserHandler = () => {\n      this.setState({\n        searching: true\n      });\n      console.log(\"SearchUserForm...\");\n    };\n\n    this.modalConfirmHandler = event => {\n      console.log(\"CreateUserFormData:  \", event.target.formGridEmail.value);\n      this.setState({\n        creating: false\n      });\n      const email = event.target.formGridEmail.value;\n      const password = event.target.formGridPassword.value;\n      const name = event.target.formGridName.value;\n      const role = event.target.formGridRole.value;\n      let dob = event.target.formGridDob.value;\n      let phone = event.target.formGridPhone.value;\n      let addressNumber = event.target.formGridAddressNumber.value;\n      let addressStreet = event.target.formGridAddressStreet.value;\n      let addressTown = event.target.formGridAddressTown.value;\n      let addressParish = event.target.formGridAddressParish.value;\n      let addressPostOffice = event.target.formGridAddressPostOffice.value;\n      let employmentDate = event.target.formGridEmploymentDate.value;\n\n      if (event.target.formGridEmploymentDateTodayCheckbox.checked === true) {\n        employmentDate = new Date().toISOString().slice(0, 10);\n      }\n\n      let terminationDate = event.target.formGridTerminationDate.value;\n\n      if (email.trim().length === 0 || password.trim().length === 0 || name.trim().length === 0 || role.trim().length === 0 || dob.trim().length === 0 || phone.trim().length === 0 || addressNumber.trim().length === 0 || addressStreet.trim().length === 0 || addressTown.trim().length === 0 || addressParish.trim().length === 0 || addressPostOffice.trim().length === 0 || employmentDate.trim().length === 0) {\n        console.log(\"blank fields detected!!!...Please try again...\");\n        this.setState({\n          userAlert: \"blank fields detected!!!...Please try again...\"\n        });\n        return;\n      }\n\n      const token = this.context.token;\n      const userId = this.context.userId;\n      console.log(`\n      creating user...\n      userId: ${userId}\n      email: ${email},\n      password: ${password},\n      name: ${name},\n      role: ${role},\n      dob: ${dob},\n      phone: ${phone},\n      addressNumber: ${addressNumber},\n      addressStreet: ${addressStreet},\n      addressTown: ${addressTown},\n      addressParish: ${addressParish},\n      addressPostOffice: ${addressPostOffice},\n      employmentDate: ${employmentDate},\n      terminationDate: ${terminationDate},\n      `);\n      const requestBody = {\n        query: `\n          mutation {createUser(userInput: {email:\"${email}\",password:\"${password}\",name:\"${name}\",dob:\"${dob}\",addressNumber:${addressNumber},addressStreet:\"${addressStreet}\",addressTown:\"${addressTown}\",addressParish:\"${addressParish}\", addressPostOffice:\"${addressPostOffice}\",phone:\"${phone}\",role:\"${role}\",employmentDate:\"${employmentDate}\",terminationDate:\"${terminationDate}\"})\n          {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}\n        }\n        `\n      }; // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"create user response data... \" + JSON.stringify(resData.data.createUser)); // this.state.users.push(resData.data.createUser)\n\n        this.setState(prevState => {\n          const updatedUsers = [...prevState.users];\n          updatedUsers.push(resData.data.createUser);\n          return {\n            users: updatedUsers\n          };\n        });\n        this.context.users.push(resData.data.createUser);\n        const responseAlert = JSON.stringify(resData.data).slice(0, 8);\n        this.setState({\n          userAlert: responseAlert\n        });\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.modalConfirmUpdateHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedUserId = this.context.selectedUser._id;\n\n      if (userId !== selectedUserId && this.context.user.role !== 'admin') {\n        console.log(\"Not the creator or Admin! No edit permission!!\");\n        this.setState({\n          userAlert: \"Not the creator or Admin! No edit permission!!\"\n        });\n        selectedUserId = null;\n      }\n\n      console.log(\"UpdateUserFormData:  \", event.target.formGridEmail.value);\n      this.setState({\n        updating: false\n      });\n      let email = event.target.formGridEmail.value;\n      let password = event.target.formGridPassword.value;\n      let name = event.target.formGridName.value;\n      let role = this.context.selectedUser.role;\n      let dob = event.target.formGridDob.value;\n      let phone = event.target.formGridPhone.value;\n      let addressNumber = event.target.formGridAddressNumber.value;\n      let addressStreet = event.target.formGridAddressStreet.value;\n      let addressTown = event.target.formGridAddressTown.value;\n      let addressParish = event.target.formGridAddressParish.value;\n      let addressPostOffice = event.target.formGridAddressPostOffice.value;\n      let employmentDate = event.target.formGridEmploymentDate.value;\n\n      if (event.target.formGridEmploymentDateTodayCheckbox.checked === true) {\n        employmentDate = new Date().toISOString().slice(0, 10);\n      }\n\n      let terminationDate = event.target.formGridTerminationDate.value;\n\n      if (event.target.formGridTerminationDateTodayCheckbox.checked === true) {\n        terminationDate = new Date().toISOString().slice(0, 10);\n      }\n\n      if (email.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        email = this.context.selectedUser.email;\n      }\n\n      if (password.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        password = this.context.selectedUser.password;\n      }\n\n      if (name.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        name = this.context.selectedUser.name;\n      } // if (role.trim().length === 0) {\n      //   console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      //   role = this.state.selectedUser.role;\n      // }\n\n\n      if (dob.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        dob = this.context.selectedUser.dob;\n      }\n\n      if (phone.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        phone = this.context.selectedUser.phone;\n      }\n\n      if (addressNumber.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        addressNumber = this.context.selectedUser.address.number;\n      }\n\n      if (addressStreet.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        addressStreet = this.context.selectedUser.address.street;\n      }\n\n      if (addressTown.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        addressTown = this.context.selectedUser.address.town;\n      }\n\n      if (addressParish.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        addressParish = this.context.selectedUser.address.parish;\n      }\n\n      if (addressPostOffice.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        addressPostOffice = this.context.selectedUser.address.postOffice;\n      }\n\n      if (employmentDate.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        employmentDate = this.context.selectedUser.employmentDate;\n      }\n\n      if (terminationDate.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        terminationDate = this.context.selectedUser.terminationDate;\n      }\n\n      console.log(`\n      updating user profile...\n      userId: ${userId}\n      email: ${email},\n      password: ${password},\n      name: ${name},\n      role: ${role},\n      dob: ${dob},\n      phone: ${phone},\n      addressNumber: ${addressNumber},\n      addressStreet: ${addressStreet},\n      addressTown: ${addressTown},\n      addressParish: ${addressParish},\n      addressPostOffice: ${addressPostOffice},\n      employmentDate: ${employmentDate},\n      terminationDate: ${terminationDate},\n      `);\n      this.setState({\n        userAlert: \"updating user profile...\"\n      });\n      const requestBody = {\n        query: `\n      mutation {updateUser(userId:\"${userId}\",selectedUserId:\"${selectedUserId}\",userInput: {email:\"${email}\",password:\"${password}\",name:\"${name}\",dob:\"${dob}\",addressNumber:${addressNumber},addressStreet:\"${addressStreet}\",addressTown:\"${addressTown}\",addressParish:\"${addressParish}\", addressPostOffice:\"${addressPostOffice}\",phone:\"${phone}\",role:\"${role}\",employmentDate:\"${employmentDate}\",terminationDate:\"${terminationDate}\"})\n      {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n        `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n        const updatedUser = resData.data.updateUser;\n        console.log(\"updatedUser:  \", JSON.stringify(updatedUser));\n        this.setState({\n          user: updatedUser\n        });\n        this.state.users.push(resData.data.updateUser);\n        this.context.users = this.state.users;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        }); // this.setState({ userAlert: responseAlert, selectedUser: resData.data.updateUser})\n\n        this.fetchUsers();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.modalConfirmUpdateFieldHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedUserId = this.context.selectedUser._id; // if(userId !== selectedUserId && this.context.user.role !== 'admin') {\n      //   console.log(\"Not the creator or Admin! No edit permission!!\");\n      //   selectedUserId = null;\n      // }\n\n      console.log(\"UpdateUserFieldFormData:  \", event.target.formGridField.value, event.target.formGridFieldSelect.value);\n      this.setState({\n        updating: false\n      });\n      let field = null;\n      let query = event.target.formGridQuery.value;\n\n      if (event.target.formGridFieldSelect.value === \"select\") {\n        field = event.target.formGridField.value;\n      } else {\n        field = event.target.formGridFieldSelect.value;\n      }\n\n      console.log(`\n          field: ${field},\n          query: ${query},\n        `);\n      this.setState({\n        userAlert: \"updating user field...\"\n      });\n      const requestBody = {\n        query: `\n          mutation{updateUserField(userId:\"${userId}\",selectedUserId:\"${selectedUserId}\",field:\"${field}\",query:\"${query}\")\n          {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}\n        }\n        `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data.updateUserField));\n        const updatedUserId = resData.data.updateUserField._id;\n        const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n        const updatedUserPos = this.state.users.indexOf(updatedUser);\n        const slicedArray = this.state.users.splice(updatedUserPos, 1);\n        console.log(\"updatedUser:  \", JSON.stringify(updatedUser), \"  updatedUserPos:  \", updatedUserPos, \"  slicedArray:  \", slicedArray);\n        this.state.users.push(resData.data.updateUserField);\n        this.context.users = this.state.users;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchUsers();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updateUserAttendanceHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedUserId = this.context.selectedUser._id; // if(userId !== selectedUserId && this.context.user.role !== 'admin') {\n      //   console.log(\"Not the creator or Admin! No edit permission!!\");\n      //   selectedUserId = null;\n      // }\n\n      if (userId !== selectedUserId && this.context.user.role !== \"admin\") {\n        console.log(\"Not the creator or Admin! No edit permission!!\");\n        this.setState({\n          userAlert: \"Not the creator or Admin! No edit permission!!\"\n        });\n        selectedUserId = null;\n      }\n\n      console.log(\"UpdateUserAttendanceFormData:  \");\n      this.setState({\n        updating: false,\n        userUpdateField: null\n      });\n      let attendanceDate = event.target.formGridAttendanceDate.value;\n\n      if (event.target.formGridAttendanceDateTodayCheckbox.checked === true) {\n        attendanceDate = new Date().toISOString().slice(0, 10);\n      }\n\n      let attendanceStatus = event.target.formGridAttendanceStatus.value;\n      let attendanceDescription = event.target.formGridAttendanceDescription.value;\n\n      if (attendanceDate.trim().length === 0 || attendanceStatus.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        return;\n      }\n\n      console.log(`\n      adding user attendance item...\n      userId: ${userId},\n      selectedUserId: ${selectedUserId}\n      attendanceDate: ${attendanceDate},\n      attendanceStatus: ${attendanceStatus},\n      attendanceDescription: ${attendanceDescription}\n      `);\n      this.setState({\n        userAlert: \"adding user attendance item...\"\n      });\n      const requestBody = {\n        query: `\n          mutation {updateUserAttendance(userId:\"${userId}\", selectedUserId:\"${selectedUserId}\",userInput:{attendanceDate:\"${attendanceDate}\",attendanceStatus:\"${attendanceStatus}\",attendanceDescription:\"${attendanceDescription}\"})\n          {_id,name,email,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description}}}\n        `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data.updateUserAttendance));\n        const updatedUserId = resData.data.updateUserAttendance._id;\n        const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n        const updatedUserPos = this.state.users.indexOf(updatedUser);\n        const slicedArray = this.state.users.splice(updatedUserPos, 1);\n        console.log(\"updatedUser:  \", JSON.stringify(updatedUser), \"  updatedUserPos:  \", updatedUserPos, \"  slicedArray:  \", slicedArray);\n        this.state.users.push(resData.data.updateUserAttendance);\n        this.context.users = this.state.users;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchUsers();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updateUserAttachmentHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedUserId = this.context.selectedUser._id; // if(userId !== selectedUserId && this.context.user.role !== 'admin') {\n      //   console.log(\"Not the creator or Admin! No edit permission!!\");\n      //   selectedUserId = null;\n      // }\n\n      if (userId !== selectedUserId && this.context.user.role !== \"admin\") {\n        console.log(\"Not the creator or Admin! No edit permission!!\");\n        this.setState({\n          userAlert: \"Not the creator or Admin! No edit permission!!\"\n        });\n        selectedUserId = null;\n      }\n\n      console.log(\"UpdateUserAttachmentFormData:  \");\n      this.setState({\n        updating: false,\n        userUpdateField: null\n      }); // let attachmentName = event.target.formGridAttachmentName.value;\n\n      let attachmentFormat = event.target.formGridAttachmentFormat.value;\n      let attachmentPath = \"uploads/staff/\" + selectedUserId + \"/attachments\"; // let attachmentPath = event.target.formGridAttachmentPath.value;\n\n      let file = AuthContext._currentValue.file;\n      console.log(`\n      uploading to s3...\n      file.name: ${file.name},\n      AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n      `);\n      const config = {\n        bucketName: this.context.creds.s3.bucketName,\n        dirName: attachmentPath,\n        region: this.context.creds.s3.region,\n        accessKeyId: this.context.creds.s3.accessKeyId,\n        secretAccessKey: this.context.creds.s3.secretAccessKey\n      };\n      const ReactS3Client = new S3(config);\n      const newFileName = file.name;\n      const attachmentName = newFileName;\n      ReactS3Client.uploadFile(file, newFileName).then(data => {\n        console.log(data);\n        this.setState({\n          userAlert: \"attachment upload success!\"\n        });\n      }).catch(err => {\n        console.error(err);\n        this.setState({\n          userAlert: \"upload error:  \" + err\n        });\n      });\n\n      if (attachmentName.trim().length === 0 || attachmentFormat.trim().length === 0 || attachmentPath.trim().length === 0) {\n        console.log(\"blank fields detected!!! try again\");\n        return;\n      }\n\n      console.log(`\n      adding user attachment item...\n      userId: ${userId},\n      selectedUserId: ${selectedUserId}\n      attachmentName: ${attachmentName},\n      attachmentFormat: ${attachmentFormat},\n      attachmentPath: ${attachmentPath},\n      `);\n      this.setState({\n        userAlert: \"adding user attatchment item...\"\n      });\n      const requestBody = {\n        query: `\n          mutation{updateUserAttachment(userId:\"${userId}\",selectedUserId:\"${selectedUserId}\",userInput:{attachmentName:\"${attachmentName}\",attachmentFormat:\"${attachmentFormat}\",attachmentPath:\"${attachmentPath}\"})\n          {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n        `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data.updateUserAttachment));\n        const updatedUserId = resData.data.updateUserAttachment._id;\n        const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n        const updatedUserPos = this.state.users.indexOf(updatedUser);\n        const slicedArray = this.state.users.splice(updatedUserPos, 1);\n        console.log(\"updatedUser:  \", JSON.stringify(updatedUser), \"  updatedUserPos:  \", updatedUserPos, \"  slicedArray:  \", slicedArray);\n        this.state.users.push(resData.data.updateUserAttachment);\n        this.context.users = this.state.users;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchUsers();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updateUserLeaveHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedUserId = this.context.selectedUser._id; // if(userId !== selectedUserId && this.context.user.role !== 'admin') {\n      //   console.log(\"Not the creator or Admin! No edit permission!!\");\n      //   selectedUserId = null;\n      // }\n\n      if (userId !== selectedUserId && this.context.user.role !== \"admin\") {\n        console.log(\"Not the creator or Admin! No edit permission!!\");\n        this.setState({\n          userAlert: \"Not the creator or Admin! No edit permission!!\"\n        });\n        selectedUserId = null;\n      }\n\n      console.log(\"UpdateUserLeaveFormData:  \", event.target.formGridLeaveType.value);\n      this.setState({\n        updating: false,\n        userUpdateField: null\n      });\n      let leaveType = event.target.formGridLeaveType.value;\n      let leaveTitle = event.target.formGridLeaveTitle.value;\n      let leaveStartDate = event.target.formGridLeaveStartDate.value;\n\n      if (event.target.formGridLeaveStartDateTodayCheckbox.checked === true) {\n        leaveStartDate = new Date().toISOString().slice(0, 10);\n      }\n\n      let leaveEndDate = event.target.formGridLeaveEndDate.value;\n\n      if (event.target.formGridLeaveEndDateTodayCheckbox.checked === true) {\n        leaveEndDate = new Date().toISOString().slice(0, 10);\n      }\n\n      if (leaveType.trim().length === 0 || leaveTitle.trim().length === 0 || leaveStartDate.trim().length === 0 || leaveEndDate.trim().length === 0) {\n        console.log(\"blank fields detected!!!...try again\");\n        this.setState({\n          userAlert: \"blank fields detected!!!...try again\"\n        });\n        return;\n      }\n\n      console.log(`\n      adding user leave item...\n      userId: ${userId},\n      selectedUserId: ${selectedUserId}\n      leave: {\n        type: ${leaveType},\n        title: ${leaveTitle},\n        startDate: ${leaveStartDate},\n        endDate: ${leaveEndDate}\n      }\n      `);\n      this.setState({\n        userAlert: \"adding user leave item...\"\n      });\n      const requestBody = {\n        query: `\n          mutation{updateUserLeave(userId:\"${userId}\",selectedUserId:\"${selectedUserId}\",userInput:{leaveType:\"${leaveType}\",leaveTitle:\"${leaveTitle}\",leaveStartDate:\"${leaveStartDate}\",leaveEndDate:\"${leaveEndDate}\"})\n          {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n        `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedUserId = resData.data.updateUserLeave._id;\n        const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n        const updatedUserPos = this.state.users.indexOf(updatedUser);\n        const slicedArray = this.state.users.splice(updatedUserPos, 1);\n        console.log(\"updatedUser:  \", JSON.stringify(updatedUser), \"  updatedUserPos:  \", updatedUserPos, \"  slicedArray:  \", slicedArray);\n        this.state.users.push(resData.data.updateUserLeave);\n        this.context.users = this.state.users;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchUsers();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.modalConfirmSearchHandler = event => {\n      console.log(\"SearchUserForm:  \");\n      let userId = this.context.userId;\n      console.log(\"SearchUserFormData:  \", event.target.formBasicField.value);\n      this.setState({\n        searching: false\n      });\n      let field = null;\n      let query = event.target.formBasicQuery.value;\n\n      if (event.target.formBasicFieldSelect.value === \"select\") {\n        field = event.target.formBasicField.value;\n      } else {\n        field = event.target.formBasicFieldSelect.value;\n      }\n\n      this.setState({\n        userSearchField: field,\n        userSearchQuery: query\n      });\n\n      if (field.trim().length === 0 || query.trim().length === 0) {\n        console.log(\"blank fields detected!!!...Please try again...\");\n        this.setState({\n          userAlert: \"blank fields detected!!!...Please try again...\"\n        });\n        return;\n      }\n\n      const search = {\n        field,\n        query\n      };\n      console.log(\"Searching for User:  \", JSON.stringify(search));\n      this.setState({\n        userAlert: \"Searching for User...\"\n      });\n      const requestBody = {\n        query: `\n          query {getUserField(userId:\"${userId}\",field:\"${field}\",query:\"${query}\")\n          {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n        `\n      };\n      const token = this.context.token;\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n        const responseAlert = JSON.stringify(resData.data).slice(0, 8);\n        this.setState({\n          userAlert: responseAlert\n        });\n        const searchUsers = resData.data.getUserField;\n        this.setState({\n          searchUsers: searchUsers\n        });\n        console.log(\"state.searchUsers:  \", this.state.searchUsers); // this.fetchUsers();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.modalConfirmSearchIdHandler = event => {\n      let userId = this.context.userId;\n      this.setState({\n        searching: false\n      });\n      console.log(\"SearchUserIdFormData:\", event.target.formBasicId.value);\n      let selectedUserId = event.target.formBasicId.value;\n      const requestBody = {\n        query: `\n        query {getUserId(userId:\"${userId}\",selectedUserId:\"${selectedUserId}\")\n        {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n      `\n      };\n      const token = this.context.token;\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        const searchUsers = resData.data.getUserId;\n        this.setState({\n          searchUsers: [searchUsers]\n        });\n        console.log(\"state.searchUsers:  \", this.state.searchUsers); // this.fetchUsers();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.modalConfirmSearchAttendanceDateHandler = event => {\n      let userId = this.context.userId;\n      this.setState({\n        searching: false\n      });\n      console.log(\"SearchUserAttendanceDateFormData:\");\n      let attendanceDate = event.target.formBasicDate.value;\n\n      if (event.target.formBasicDateTodayCheckbox.checked === true) {\n        attendanceDate = new Date().toISOString().slice(0, 10);\n      }\n\n      const requestBody = {\n        query: `\n        query {getUserAttendanceDate(userId:\"${userId}\",attendanceDate:\"${attendanceDate}\")\n        {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n      `\n      };\n      const token = this.context.token;\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n        const responseAlert = JSON.stringify(resData.data).slice(0, 8);\n        this.setState({\n          userAlert: responseAlert\n        });\n        const searchUsers = resData.data.getUserAttendanceDate;\n        this.setState({\n          searchUsers: searchUsers\n        });\n        console.log(\"state.searchUsers:  \", this.state.searchUsers); // this.fetchUsers();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.modalConfirmSearchLeaveDateRangeHandler = event => {\n      let userId = this.context.userId;\n      this.setState({\n        searching: false\n      });\n      console.log(\"SearchUserLeaveDateRangeFormData:\");\n      const startDate = event.target.formBasicStartDate.value;\n      const endDate = event.target.formBasicEndDate.value;\n      const requestBody = {\n        query: `\n        query{getUserLeaveDateRange(userId:\"${userId}\",startDate:\"${startDate}\",endDate:\"${endDate}\")\n        {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n      `\n      };\n      const token = this.context.token;\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n        const responseAlert = JSON.stringify(resData.data).slice(0, 8);\n        this.setState({\n          userAlert: responseAlert\n        });\n        const searchUsers = resData.data.getUserLeaveDateRange;\n        this.setState({\n          searchUsers: searchUsers\n        });\n        console.log(\"state.searchUsers:  \", this.state.searchUsers); // this.fetchUsers();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.modalConfirmSearchNameHandler = event => {\n      console.log(\"SearchUserNameFormData:\", event.target.formBasicName.value);\n      this.setState({\n        searching: false\n      });\n      let users = this.state.users;\n      const regex = new RegExp(event.target.formBasicName.value, \"i\");\n      console.log(`\n      regex: ${regex},\n      `);\n      let result = users.filter(user => user.name.match(regex));\n      console.log(`\n        result: ${JSON.stringify(result)}\n        `);\n      this.setState({\n        searchUsers: result\n      });\n    };\n\n    this.modalCancelHandler = () => {\n      this.setState({\n        creating: false,\n        updating: false,\n        deleting: false,\n        searching: false\n      });\n    };\n\n    this.fetchUsersAsc = () => {\n      console.log(\"'fetch usersAsc function' context object... \" + JSON.stringify(this.context));\n      const userId = this.context.userId; // this.setState({ isSorting: true });\n\n      const requestBody = {\n        query: `\n          query {usersNameAsc (userId:\"${userId}\")\n          {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n        `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + this.context.token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          this.context.userAlert = 'Failed!';\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const users = resData.data.usersNameAsc;\n        console.log(\"resData:  \", resData);\n        console.log(users);\n        const responseAlert = JSON.stringify(resData.data).slice(0, 8);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.setState({\n          users: users\n        }); // if (this.isActive) {\n        //   this.setState({ users: users, isLoading: false });\n        // }\n\n        this.context.users = this.state.users;\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        }); // if (this.isActive) {\n        //   this.setState({ isLoading: false });\n        // }\n      });\n    };\n\n    this.fetchUsersDesc = () => {\n      console.log(\"'fetch usersDesc function' context object... \" + JSON.stringify(this.context));\n      const userId = this.context.userId; // this.setState({ isLoading: true });\n\n      const requestBody = {\n        query: `\n          query {usersNameDesc (userId:\"${userId}\")\n          {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n        `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + this.context.token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          this.context.userAlert = 'Failed!';\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const users = resData.data.usersNameDesc;\n        console.log(\"resData:  \", resData);\n        console.log(users);\n        const responseAlert = JSON.stringify(resData.data).slice(0, 8);\n        this.setState({\n          userAlert: responseAlert\n        }); // if (this.isActive) {\n        //   this.setState({ users: users, isLoading: false });\n        // }\n\n        this.setState({\n          users: users\n        });\n        this.context.users = this.state.users;\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        }); // if (this.isActive) {\n        //   this.setState({ isLoading: false });\n        // }\n      });\n    };\n\n    this.modalDeleteHandler = () => {\n      console.log(\"deleting user...selectedUser:  \", this.context.selectedUser);\n      const userId = this.context.userId;\n      const selectedUserId = this.context.selectedUser._id;\n\n      if (this.context.user.role !== 'admin') {\n        console.log(\"Not the Admin! No edit permission!!\");\n        this.setState({\n          userAlert: \"Not the Admin! No edit permission!!\"\n        });\n      }\n\n      this.setState({\n        deleting: true,\n        userAlert: \"deleting user..\"\n      });\n      const requestBody = {\n        query: `\n        mutation {\n          deleteUser(userId: \"${userId}\", selectedUserId: \"${selectedUserId}\")\n          {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}\n        }\n      `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + this.context.token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const responseAlert = JSON.stringify(resData.data).slice(0, 8);\n        this.setState({\n          userAlert: responseAlert\n        });\n        let deletedUser = resData.data.deleteUser;\n        console.log(deletedUser);\n        let deletedUserId = deletedUser._id;\n        deletedUser = this.state.users.find(e => e._id === deletedUserId);\n        const deletedUserPos = this.state.users.indexOf(deletedUser);\n        const slicedArray = this.state.users.splice(deletedUserPos, 1);\n        console.log(\"deletedUser:  \", JSON.stringify(deletedUser), \"  deletedUserPos:  \", deletedUserPos, \"  slicedArray:  \", slicedArray);\n        this.setState({\n          deleting: false\n        }); // this.setState({ deleting: false, selectedUser: null });\n        // this.context.selectedUser = null;\n\n        this.fetchUsers();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n\n        if (this.isActive) {\n          this.setState({\n            deleting: false\n          });\n        }\n      });\n    };\n\n    this.deleteUserAttendanceItem = props => {\n      let token = this.context.token;\n      let userId = this.context.userId;\n      let selectedUserId = this.state.selectedUser._id;\n      let date = new Date(props.date.substr(0, 10) * 1000).toISOString().slice(0, 10);\n      console.log(`\n    delete user Attendance item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    selectedUserId: ${selectedUserId},\n    attandance date: ${date},\n    `);\n      const requestBody = {\n        query: `\n       mutation{deleteUserAttendance(userId:\"${userId}\",selectedUserId:\"${selectedUserId}\",attendanceDate:\"${date}\")\n       {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"resData.data:  \", resData.data.deleteUserAttendance);\n        const updatedUserId = resData.data.deleteUserAttendance._id;\n        const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n        const updatedUserPos = this.state.users.indexOf(updatedUser);\n        const slicedArray = this.state.users.splice(updatedUserPos, 1);\n        console.log(\"updatedUser:  \", JSON.stringify(updatedUser), \"  updatedUserPos:  \", updatedUserPos, \"  slicedArray:  \", slicedArray);\n        this.state.users.push(resData.data.deleteUserAttendance);\n        this.context.users = this.state.users;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchUsers();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.deleteUserLeaveItem = props => {\n      let token = this.context.token;\n      let userId = this.context.userId;\n      let selectedUserId = this.state.selectedUser._id;\n      console.log(`\n    delete user Leave item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    selectedUserId: ${selectedUserId},\n    `);\n      const requestBody = {\n        query: `\n       mutation{deleteUserLeave(userId:\"${userId}\",selectedUserId:\"${selectedUserId}\",leaveTitle:\"${props.title}\")\n       {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedUser = resData.data.deleteUserLeave;\n        console.log(deletedUser);\n        const updatedUserId = resData.data.deleteUserLeave._id;\n        const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n        const updatedUserPos = this.state.users.indexOf(updatedUser);\n        const slicedArray = this.state.users.splice(updatedUserPos, 1);\n        console.log(\"updatedUser:  \", JSON.stringify(updatedUser), \"  updatedUserPos:  \", updatedUserPos, \"  slicedArray:  \", slicedArray);\n        this.state.users.push(resData.data.deleteUserLeave);\n        this.context.users = this.state.users;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchUsers();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.deleteUserAttachmentItem = props => {\n      let token = this.context.token;\n      let userId = this.context.userId;\n      let selectedUserId = this.state.selectedUser._id;\n      console.log(`\n    delete user Attachment item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    selectedUserId: ${selectedUserId},\n    `); // console.log(`\n      //   deleting from s3...\n      //   file.name: ${props.name},\n      //   `);\n      //\n      //   const config = {\n      //     bucketName: this.context.creds.s3.bucketName,\n      //     dirName: props.path,\n      //     region: this.context.creds.s3.region,\n      //     accessKeyId: this.context.creds.s3.accessKeyId,\n      //     secretAccessKey: this.context.creds.s3.secretAccessKey,\n      //   }\n      // const ReactS3Client = new S3(config);\n      // const filename = props.name;\n      // // const attachmentName = newFileName;\n      // //\n      // S3FileUpload\n      // .deleteFile(filename, config)\n      // .then(response => console.log(response))\n      // .catch(err => console.error(err))\n\n      const requestBody = {\n        query: `\n       mutation{deleteUserAttachment(userId:\"${userId}\",selectedUserId:\"${selectedUserId}\",attachmentName:\"${props.name}\")\n       {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedUser = resData.data.deleteUserAttachment;\n        console.log(deletedUser);\n        const updatedUserId = resData.data.deleteUserAttachment._id;\n        const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n        const updatedUserPos = this.state.users.indexOf(updatedUser);\n        const slicedArray = this.state.users.splice(updatedUserPos, 1);\n        console.log(\"updatedUser:  \", JSON.stringify(updatedUser), \"  updatedUserPos:  \", updatedUserPos, \"  slicedArray:  \", slicedArray);\n        this.state.users.push(resData.data.deleteUserAttachment);\n        this.context.users = this.state.users;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchUsers();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.showDetailHandler = userId => {\n      this.setState(prevState => {\n        const selectedUser = prevState.users.find(e => e._id === userId);\n        this.context.selectedUser = selectedUser;\n        this.setState({\n          selectedUser: selectedUser\n        });\n        console.log(\"User selected  :  \", selectedUser);\n        return {\n          selectedUser: selectedUser\n        };\n      });\n    };\n\n    this.onViewAttachment = attachment => {\n      console.log(`\n      setting up attachment viewer...\n      attachment: ${JSON.stringify(attachment)}\n      `);\n      this.setState({\n        showAttachment: true\n      });\n      const file = \"https://ent-emr-bucket.s3-us-east-2.amazonaws.com/\" + attachment.path + \"/\" + attachment.name;\n      const type = attachment.format;\n      this.setState({\n        showThisAttachmentFile: file,\n        showThisAttachmentType: type\n      });\n    };\n\n    this.closeAttachmentView = () => {\n      console.log(`\n      closing attachment viewer...\n      `);\n      this.setState({\n        showAttachment: false\n      });\n    };\n\n    this.createPdf = user => {\n      console.log(`\n        creating pdf...\n        user: ${JSON.stringify(user)}\n      `);\n      const pdfData = {\n        title: \"This pdf is supplied with Staff data...\",\n        user: {\n          _id: user._id,\n          email: user.email,\n          password: user.password,\n          name: user.name,\n          dob: user.dob,\n          address: {\n            number: user.address.number,\n            street: user.address.street,\n            town: user.address.town,\n            parish: user.address.parish,\n            postOffice: user.address.postOffice\n          },\n          phone: user.phone,\n          role: user.role,\n          employmentDate: user.employmentDate,\n          terminationDate: user.terminationDate,\n          attachments: user.attachments,\n          attendance: user.atttendance,\n          leave: user.leave\n        }\n      };\n      this.setState({\n        createPdf: true,\n        pdfData: pdfData\n      });\n    };\n\n    this.closePdfCreator = () => {\n      console.log(`\n      closing pdf creator...\n      `);\n      this.setState({\n        createPdf: false,\n        pdfData: null\n      });\n    };\n  }\n\n  // constructor(props) {\n  //   super(props);\n  // }\n  componentDidMount() {\n    this.fetchUsers();\n\n    if (this.context.user.name === \"Lord-of-the-Manor\") {\n      this.setState({\n        canDelete: true\n      });\n    } // if (this.context.user.name === 'admin579'){\n    //   this.setState({canDelete: true})\n    // }\n\n  }\n\n  fetchUsers() {\n    console.log(\"fetch users:\");\n    const userId = this.context.userId;\n    this.setState({\n      isLoading: true\n    });\n    const requestBody = {\n      query: `\n          query {users (userId:\"${userId}\")\n          {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n        `\n    };\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    }).then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        this.context.userAlert = 'Failed!';\n        throw new Error('Failed!');\n      }\n\n      return res.json();\n    }).then(resData => {\n      const responseAlert = JSON.stringify(resData.data).slice(0, 8);\n      this.setState({\n        userAlert: responseAlert\n      });\n      const users = resData.data.users;\n      console.log(\"resData:  \", resData);\n      console.log(users);\n\n      if (this.isActive) {\n        this.setState({\n          users: users,\n          isLoading: false\n        });\n      }\n\n      this.context.users = this.state.users;\n    }).catch(err => {\n      console.log(err);\n      this.setState({\n        userAlert: err\n      });\n\n      if (this.isActive) {\n        this.setState({\n          isLoading: false\n        });\n      }\n    });\n  }\n\n  updateUserSpecial(event) {\n    console.log(\"special field to update:  \", event.target.value);\n    const field = event.target.value;\n    this.setState({\n      userUpdateField: field\n    });\n  }\n\n  userSearchClearlHandler() {\n    console.log(\"clearing user search results\");\n    this.setState({\n      searchUsers: [],\n      userAlert: \"clearing user search results\"\n    });\n  }\n\n  componentWillUnmount() {\n    this.isActive = false;\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1493\n      },\n      __self: this\n    }, this.state.showAttachment === true && React.createElement(AttachmentViewer, {\n      onCloseAttachmentView: this.closeAttachmentView,\n      attachmentFile: this.state.showThisAttachmentFile,\n      attachmentType: this.state.showThisAttachmentType,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1495\n      },\n      __self: this\n    }), this.state.createPdf === true && React.createElement(PdfCreator, {\n      pdfData: this.state.pdfData,\n      onClosePdfCreator: this.closePdfCreator,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1503\n      },\n      __self: this\n    }), React.createElement(Accordion, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1509\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1511\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 3,\n      className: \"MasterCol1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1513\n      },\n      __self: this\n    }, React.createElement(AlertBox, {\n      authUserId: this.context.userId,\n      alert: this.state.userAlert,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1515\n      },\n      __self: this\n    }), this.state.overlay === true && React.createElement(LoadingOverlay, {\n      status: this.state.overlayStatus,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1521\n      },\n      __self: this\n    }), React.createElement(SidebarPage, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1526\n      },\n      __self: this\n    })), React.createElement(Col, {\n      md: 9,\n      className: \"MasterCol2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1530\n      },\n      __self: this\n    }, React.createElement(Container, {\n      className: \"containerCombinedDetail\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1532\n      },\n      __self: this\n    }, React.createElement(Tab.Container, {\n      id: \"left-tabs-example\",\n      defaultActiveKey: \"userDetail\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1534\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1535\n      },\n      __self: this\n    }, React.createElement(Col, {\n      sm: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1536\n      },\n      __self: this\n    }, React.createElement(Nav, {\n      variant: \"pills\",\n      className: \"flex-column\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1537\n      },\n      __self: this\n    }, React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1538\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"MasterList\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1539\n      },\n      __self: this\n    }, \"MASTER LIST\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1541\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"userDetail\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1542\n      },\n      __self: this\n    }, \"Selected\")), this.context.user.role === \"admin\" && React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1545\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"userCreate\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1546\n      },\n      __self: this\n    }, \"Create New\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1549\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"disabled\",\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1550\n      },\n      __self: this\n    }, \"Edit:\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1552\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"userEditDemographics\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1553\n      },\n      __self: this\n    }, \"Demographics\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1555\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"userEditField\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1556\n      },\n      __self: this\n    }, \"Single Field\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1558\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"disabled\",\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1559\n      },\n      __self: this\n    }, \"Add:\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1561\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"userEditAttendance\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1562\n      },\n      __self: this\n    }, \"Attendance\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1564\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"userEditLeave\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1565\n      },\n      __self: this\n    }, \"Leave\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1567\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"userEditAttachment\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1568\n      },\n      __self: this\n    }, \"Attachment\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1571\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"disabled\",\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1572\n      },\n      __self: this\n    }, \"Search:\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1574\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"SearchInput\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1575\n      },\n      __self: this\n    }, \"Input\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1577\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"SearchResult\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1578\n      },\n      __self: this\n    }, \"Results\")))), React.createElement(Col, {\n      sm: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1583\n      },\n      __self: this\n    }, React.createElement(Tab.Content, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1584\n      },\n      __self: this\n    }, React.createElement(Tab.Pane, {\n      eventKey: \"userDetail\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1585\n      },\n      __self: this\n    }, this.state.selectedUser === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1587\n      },\n      __self: this\n    }, \"Select a Staff member from the Master List\"), this.state.isLoading === false && this.state.selectedUser !== null && React.createElement(UserDetail, {\n      authUserId: this.context.userId,\n      AuthContext: this.context,\n      user: this.state.selectedUser,\n      onEdit: this.startUpdateUserHandler,\n      canDelete: this.state.canDelete,\n      onDelete: this.modalDeleteHandler,\n      attendanceDelete: this.deleteUserAttendanceItem,\n      leaveDelete: this.deleteUserLeaveItem,\n      attachmentDelete: this.deleteUserAttachmentItem,\n      onViewAttachment: this.onViewAttachment,\n      onCreatePdf: this.createPdf,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1594\n      },\n      __self: this\n    })), this.context.user.role === \"admin\" && React.createElement(Tab.Pane, {\n      eventKey: \"userCreate\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1611\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"outline-primary\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.startCreateUserHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1612\n      },\n      __self: this\n    }, \"Create a NEW Staff Profile\"), this.state.creating && React.createElement(CreateUserForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmHandler,\n      onSubmit: this.modalConfirmHandler,\n      confirmText: \"Confirm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1614\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"userEditDemographics\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1628\n      },\n      __self: this\n    }, this.state.selectedUser === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      className: \"confirmEditButton\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1630\n      },\n      __self: this\n    }, \"Select a Staff member from the Master List\"), this.state.selectedUser !== null && this.context.user.role === \"admin\" && React.createElement(Button, {\n      variant: \"outline-primary\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.startUpdateUserHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1637\n      },\n      __self: this\n    }, \"Edit Demographics as Admin\"), this.state.selectedUser !== null && this.state.selectedUser._id === this.context.user._id && React.createElement(Button, {\n      variant: \"outline-primary\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.startUpdateUserHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1642\n      },\n      __self: this\n    }, \"Edit Demographics\"), this.state.selectedUser !== null && this.state.selectedUser._id === this.context.user._id && React.createElement(Button, {\n      variant: \"outline-danger\",\n      className: \"confirmEditButton\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1646\n      },\n      __self: this\n    }, \"Your Profile\"), this.state.selectedUser !== null && this.state.selectedUser._id !== this.context.user._id && React.createElement(Button, {\n      variant: \"outline-danger\",\n      className: \"confirmEditButton\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1652\n      },\n      __self: this\n    }, \"Not my profile\"), this.state.updating && this.state.selectedUser !== null && React.createElement(UpdateUserForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmUpdateHandler,\n      confirmText: \"Confirm\",\n      user: this.context.selectedUser,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1659\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"userEditField\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1671\n      },\n      __self: this\n    }, this.state.selectedUser === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      className: \"confirmEditButton\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1673\n      },\n      __self: this\n    }, \"Select a Staff member from the Master List\"), this.state.selectedUser !== null && this.context.user.role === \"admin\" && React.createElement(Button, {\n      variant: \"outline-primary\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.startUpdateUserHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1681\n      },\n      __self: this\n    }, \"Edit Field as Admin\"), this.state.selectedUser !== null && this.state.selectedUser._id === this.context.user._id && React.createElement(Button, {\n      variant: \"outline-primary\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.startUpdateUserHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1686\n      },\n      __self: this\n    }, \"Edit a Single Field\"), this.state.selectedUser !== null && this.state.selectedUser._id === this.context.user._id && React.createElement(Button, {\n      variant: \"outline-success\",\n      className: \"confirmEditButton\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1690\n      },\n      __self: this\n    }, \"Your Profile\"), this.state.selectedUser !== null && this.state.selectedUser._id !== this.context.user._id && React.createElement(Button, {\n      variant: \"outline-danger\",\n      className: \"confirmEditButton\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1696\n      },\n      __self: this\n    }, \"Not my profile\"), this.state.updating && this.state.selectedUser !== null && React.createElement(UpdateUserFieldForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmUpdateFieldHandler,\n      confirmText: \"Confirm\",\n      user: this.state.selectedUser,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1703\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"userEditAttendance\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1715\n      },\n      __self: this\n    }, this.state.selectedUser === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      className: \"confirmEditButton\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1717\n      },\n      __self: this\n    }, \"Select a Staff member from the Master List below\"), this.state.selectedUser !== null && this.context.user.role === \"admin\" && React.createElement(Button, {\n      variant: \"outline-primary\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      value: \"attendance\",\n      onClick: this.updateUserSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1725\n      },\n      __self: this\n    }, \"Add Attendance as Admin\"), this.state.selectedUser !== null && this.state.selectedUser._id === this.context.user._id && React.createElement(Button, {\n      variant: \"outline-primary\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      value: \"attendance\",\n      onClick: this.updateUserSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1730\n      },\n      __self: this\n    }, \"Add Attendance\"), this.state.selectedUser !== null && this.state.selectedUser._id === this.context.user._id && React.createElement(Button, {\n      variant: \"outline-success\",\n      className: \"confirmEditButton\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1734\n      },\n      __self: this\n    }, \"Your Profile\"), this.state.selectedUser !== null && this.state.selectedUser._id !== this.context.user._id && React.createElement(Button, {\n      variant: \"outline-danger\",\n      className: \"confirmEditButton\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1740\n      },\n      __self: this\n    }, \"Not my profile\"), this.state.userUpdateField === 'attendance' && this.state.selectedUser !== null && React.createElement(UpdateUserAttendanceForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updateUserAttendanceHandler,\n      confirmText: \"Confirm\",\n      user: this.state.selectedUser,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1748\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"userEditLeave\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1760\n      },\n      __self: this\n    }, this.state.selectedUser === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      className: \"confirmEditButton\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1762\n      },\n      __self: this\n    }, \"Select a Staff member from the Master List\"), this.state.selectedUser !== null && this.context.user.role === \"admin\" && React.createElement(Button, {\n      variant: \"outline-primary\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      value: \"leave\",\n      onClick: this.updateUserSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1770\n      },\n      __self: this\n    }, \"Add Leave as Admin\"), this.state.selectedUser !== null && this.state.selectedUser._id === this.context.user._id && React.createElement(Button, {\n      variant: \"outline-primary\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      value: \"leave\",\n      onClick: this.updateUserSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1775\n      },\n      __self: this\n    }, \"Add Leave\"), this.state.selectedUser !== null && this.state.selectedUser._id === this.context.user._id && React.createElement(Button, {\n      variant: \"outline-success\",\n      className: \"confirmEditButton\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1779\n      },\n      __self: this\n    }, \"Your Profile\"), this.state.selectedUser !== null && this.state.selectedUser._id !== this.context.user._id && React.createElement(Button, {\n      variant: \"outline-danger\",\n      className: \"confirmEditButton\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1785\n      },\n      __self: this\n    }, \"Not my profile\"), this.state.userUpdateField === 'leave' && this.state.selectedUser !== null && React.createElement(UpdateUserLeaveForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updateUserLeaveHandler,\n      confirmText: \"Confirm\",\n      user: this.state.selectedUser,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1792\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"userEditAttachment\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1803\n      },\n      __self: this\n    }, this.state.selectedUser === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      className: \"confirmEditButton\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1805\n      },\n      __self: this\n    }, \"Select a Staff member from the Master List\"), this.state.selectedUser !== null && this.context.user.role === \"admin\" && React.createElement(Button, {\n      variant: \"outline-primary\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      value: \"attachments\",\n      onClick: this.updateUserSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1813\n      },\n      __self: this\n    }, \"Add Attachment as Admin\"), this.state.selectedUser !== null && this.state.selectedUser._id === this.context.user._id && React.createElement(Button, {\n      variant: \"outline-primary\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      value: \"attachments\",\n      onClick: this.updateUserSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1818\n      },\n      __self: this\n    }, \"Add Attachment\"), this.state.selectedUser !== null && this.state.selectedUser._id === this.context.user._id && React.createElement(Button, {\n      variant: \"outline-success\",\n      className: \"confirmEditButton\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1822\n      },\n      __self: this\n    }, \"Your Profile\"), this.state.selectedUser !== null && this.state.selectedUser._id !== this.context.user._id && React.createElement(Button, {\n      variant: \"outline-danger\",\n      className: \"confirmEditButton\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1828\n      },\n      __self: this\n    }, \"Not my profile\"), this.state.userUpdateField === 'attachments' && this.state.selectedUser !== null && React.createElement(UpdateUserAttachmentForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updateUserAttachmentHandler,\n      confirmText: \"Confirm\",\n      user: this.state.selectedUser,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1835\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"MasterList\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1846\n      },\n      __self: this\n    }, React.createElement(Container, {\n      className: \"containerUserMasterList\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1847\n      },\n      __self: this\n    }, React.createElement(Row, {\n      className: \"searchListRow\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1848\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"primary\",\n      size: \"sm\",\n      onClick: this.fetchUsersAsc,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1849\n      },\n      __self: this\n    }, \"Sort Asc\"), React.createElement(Button, {\n      variant: \"info\",\n      size: \"sm\",\n      onClick: this.fetchUsersDesc,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1852\n      },\n      __self: this\n    }, \"Sort Desc\"), this.state.isLoading ? React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1856\n      },\n      __self: this\n    }) : React.createElement(UserList, {\n      users: this.state.users,\n      authUserId: this.context.userId,\n      onViewDetail: this.showDetailHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1858\n      },\n      __self: this\n    })))), React.createElement(Tab.Pane, {\n      eventKey: \"SearchInput\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1868\n      },\n      __self: this\n    }, React.createElement(Container, {\n      className: \"containerSearchUserInput\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1869\n      },\n      __self: this\n    }, React.createElement(Row, {\n      className: \"searchUserRowAdd\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1871\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"primary\",\n      onClick: this.startSearchUserHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1872\n      },\n      __self: this\n    }, \"Search\")), React.createElement(Row, {\n      className: \"searchUserRowForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1875\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 10,\n      className: \"searchUserColForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1876\n      },\n      __self: this\n    }, React.createElement(Tabs, {\n      defaultActiveKey: \"Field\",\n      id: \"uncontrolled-tab-example\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1877\n      },\n      __self: this\n    }, React.createElement(Tab, {\n      eventKey: \"Search\",\n      title: \"Search:\",\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1878\n      },\n      __self: this\n    }), React.createElement(Tab, {\n      eventKey: \"Field\",\n      title: \"Search by Field:\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1880\n      },\n      __self: this\n    }, this.state.searching !== true && React.createElement(Button, {\n      variant: \"outline-warning\",\n      className: \"confirmEditButton\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1882\n      },\n      __self: this\n    }, \"Click the 'Search' Button start\"), this.state.searching === true && React.createElement(SearchUserForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmSearchHandler,\n      confirmText: \"Search\",\n      user: this.context.selectedUser,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1887\n      },\n      __self: this\n    })), React.createElement(Tab, {\n      eventKey: \"Id\",\n      title: \"Search by ID:\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1897\n      },\n      __self: this\n    }, this.state.searching !== true && React.createElement(Button, {\n      variant: \"outline-warning\",\n      className: \"confirmEditButton\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1899\n      },\n      __self: this\n    }, \"Click the 'Search' Button start\"), this.state.searching === true && React.createElement(SearchUserIdForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmSearchIdHandler,\n      confirmText: \"Search\",\n      user: this.context.selectedUser,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1904\n      },\n      __self: this\n    })), React.createElement(Tab, {\n      eventKey: \"Attendance\",\n      title: \"Search by Attendance:\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1915\n      },\n      __self: this\n    }, this.state.searching !== true && React.createElement(Button, {\n      variant: \"outline-warning\",\n      className: \"confirmEditButton\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1917\n      },\n      __self: this\n    }, \"Click the 'Search' Button start\"), this.state.searching === true && React.createElement(SearchUserAttendanceDateForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmSearchAttendanceDateHandler,\n      confirmText: \"Search\",\n      user: this.context.selectedUser,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1922\n      },\n      __self: this\n    })), React.createElement(Tab, {\n      eventKey: \"Leave\",\n      title: \"Search by Leave:\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1933\n      },\n      __self: this\n    }, this.state.searching !== true && React.createElement(Button, {\n      variant: \"outline-warning\",\n      className: \"confirmEditButton\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1935\n      },\n      __self: this\n    }, \"Click the 'Search' Button start\"), this.state.searching === true && React.createElement(SearchUserLeaveDateRangeForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmSearchLeaveDateRangeHandler,\n      confirmText: \"Search\",\n      user: this.context.selectedUser,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1940\n      },\n      __self: this\n    })), React.createElement(Tab, {\n      eventKey: \"Name\",\n      title: \"Search by Name:\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1951\n      },\n      __self: this\n    }, this.state.searching !== true && React.createElement(Button, {\n      variant: \"outline-warning\",\n      className: \"confirmEditButton\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1953\n      },\n      __self: this\n    }, \"Click the 'Search' Button start\"), this.state.searching === true && React.createElement(SearchUserNameForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmSearchNameHandler,\n      confirmText: \"Search\",\n      user: this.context.selectedUser,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1958\n      },\n      __self: this\n    })))), React.createElement(Col, {\n      md: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1971\n      },\n      __self: this\n    })))), React.createElement(Tab.Pane, {\n      eventKey: \"SearchResult\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1978\n      },\n      __self: this\n    }, React.createElement(Container, {\n      className: \"containerSearchUserResults\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1979\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1980\n      },\n      __self: this\n    }, React.createElement(Card, {\n      className: \"searchCard\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1981\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      className: \"searchCardBody\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1982\n      },\n      __self: this\n    }, React.createElement(Card.Title, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1983\n      },\n      __self: this\n    }, \"Your Search\"), React.createElement(Card.Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1984\n      },\n      __self: this\n    }, \"Field: \", this.state.userSearchField), React.createElement(Card.Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1987\n      },\n      __self: this\n    }, \"Query: \", this.state.userSearchQuery)))), React.createElement(Row, {\n      className: \"searchListRow\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1993\n      },\n      __self: this\n    }, this.state.searchUsers !== [] && React.createElement(SearchUserList, {\n      searchUsers: this.state.searchUsers,\n      authUserId: this.context.userId,\n      onViewDetail: this.showDetailHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1996\n      },\n      __self: this\n    })))))))))))));\n  }\n\n}\n\nUsersPage.contextType = AuthContext;\nexport default UsersPage;","map":{"version":3,"sources":["/Users/pedrojacob/Downloads/AMR/websites/office_records/ENT_EMR/frontend/src/pages/Users.js"],"names":["S3","React","Component","Container","Row","Col","Button","Accordion","Tabs","Tab","Nav","Card","UserList","SearchUserList","UserDetail","Spinner","AuthContext","SidebarPage","AlertBox","LoadingOverlay","AttachmentViewer","PdfCreator","CreateUserForm","UpdateUserForm","UpdateUserFieldForm","UpdateUserAttendanceForm","UpdateUserAttachmentForm","UpdateUserLeaveForm","SearchUserForm","SearchUserIdForm","SearchUserNameForm","SearchUserAttendanceDateForm","SearchUserLeaveDateRangeForm","UsersPage","state","creating","updating","deleting","searching","users","searchUsers","isLoading","isSorting","selectedUser","userUpdateField","userSearchField","userSearchQuery","canDelete","userAlert","overlay","overlayStatus","file","showAttachment","showThisAttachmentFile","showThisAttachmentType","createPdf","pdfData","isActive","startCreateUserHandler","setState","console","log","startUpdateUserHandler","startSearchUserHandler","modalConfirmHandler","event","target","formGridEmail","value","email","password","formGridPassword","name","formGridName","role","formGridRole","dob","formGridDob","phone","formGridPhone","addressNumber","formGridAddressNumber","addressStreet","formGridAddressStreet","addressTown","formGridAddressTown","addressParish","formGridAddressParish","addressPostOffice","formGridAddressPostOffice","employmentDate","formGridEmploymentDate","formGridEmploymentDateTodayCheckbox","checked","Date","toISOString","slice","terminationDate","formGridTerminationDate","trim","length","token","context","userId","requestBody","query","fetch","method","body","JSON","stringify","headers","Authorization","then","res","status","Error","json","resData","data","createUser","prevState","updatedUsers","push","responseAlert","catch","err","modalConfirmUpdateHandler","selectedUserId","_id","user","formGridTerminationDateTodayCheckbox","address","number","street","town","parish","postOffice","updatedUser","updateUser","fetchUsers","modalConfirmUpdateFieldHandler","formGridField","formGridFieldSelect","field","formGridQuery","updateUserField","updatedUserId","find","e","updatedUserPos","indexOf","slicedArray","splice","updateUserAttendanceHandler","attendanceDate","formGridAttendanceDate","formGridAttendanceDateTodayCheckbox","attendanceStatus","formGridAttendanceStatus","attendanceDescription","formGridAttendanceDescription","updateUserAttendance","updateUserAttachmentHandler","attachmentFormat","formGridAttachmentFormat","attachmentPath","_currentValue","config","bucketName","creds","s3","dirName","region","accessKeyId","secretAccessKey","ReactS3Client","newFileName","attachmentName","uploadFile","error","updateUserAttachment","updateUserLeaveHandler","formGridLeaveType","leaveType","leaveTitle","formGridLeaveTitle","leaveStartDate","formGridLeaveStartDate","formGridLeaveStartDateTodayCheckbox","leaveEndDate","formGridLeaveEndDate","formGridLeaveEndDateTodayCheckbox","updateUserLeave","modalConfirmSearchHandler","formBasicField","formBasicQuery","formBasicFieldSelect","search","getUserField","modalConfirmSearchIdHandler","formBasicId","getUserId","modalConfirmSearchAttendanceDateHandler","formBasicDate","formBasicDateTodayCheckbox","getUserAttendanceDate","modalConfirmSearchLeaveDateRangeHandler","startDate","formBasicStartDate","endDate","formBasicEndDate","getUserLeaveDateRange","modalConfirmSearchNameHandler","formBasicName","regex","RegExp","result","filter","match","modalCancelHandler","fetchUsersAsc","usersNameAsc","fetchUsersDesc","usersNameDesc","modalDeleteHandler","deletedUser","deleteUser","deletedUserId","deletedUserPos","deleteUserAttendanceItem","props","date","substr","deleteUserAttendance","deleteUserLeaveItem","title","deleteUserLeave","deleteUserAttachmentItem","deleteUserAttachment","showDetailHandler","onViewAttachment","attachment","path","type","format","closeAttachmentView","attachments","attendance","atttendance","leave","closePdfCreator","componentDidMount","updateUserSpecial","userSearchClearlHandler","componentWillUnmount","render","bind","contextType"],"mappings":"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","sourcesContent":["import S3 from 'react-aws-s3';\n// import S3FileUpload from 'react-s3';\nimport React, { Component } from 'react';\n// import FileViewer from 'react-file-viewer';\n\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n// import Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Accordion from 'react-bootstrap/Accordion';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\n// import TabContainer from 'react-bootstrap/TabContainer';\n// import TabContent from 'react-bootstrap/TabContent';\n// import TabPane from 'react-bootstrap/TabPane';\nimport Nav from 'react-bootstrap/Nav';\nimport Card from 'react-bootstrap/Card';\n\n// import Modal from '../components/Modal/Modal';\n// import Backdrop from '../components/Backdrop/Backdrop';\nimport UserList from '../components/Users/UserList/UserList';\nimport SearchUserList from '../components/Users/UserList/SearchUserList';\nimport UserDetail from '../components/Users/UserDetail';\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\n\nimport SidebarPage from './Sidebar';\nimport AlertBox from '../components/AlertBox';\nimport LoadingOverlay from '../components/LoadingOverlay';\nimport AttachmentViewer from '../components/AttachmentViewer';\nimport PdfCreator from '../components/PdfCreator';\n\nimport CreateUserForm from '../components/Forms/CreateUserForm';\nimport UpdateUserForm from '../components/Forms/UpdateUserForm';\nimport UpdateUserFieldForm from '../components/Forms/UpdateUserFieldForm';\nimport UpdateUserAttendanceForm from '../components/Forms/UpdateUserAttendanceForm';\nimport UpdateUserAttachmentForm from '../components/Forms/UpdateUserAttachmentForm';\nimport UpdateUserLeaveForm from '../components/Forms/UpdateUserLeaveForm';\nimport SearchUserForm from '../components/Forms/SearchUserForm';\nimport SearchUserIdForm from '../components/Forms/SearchUserIdForm';\nimport SearchUserNameForm from '../components/Forms/SearchUserNameForm';\nimport SearchUserAttendanceDateForm from '../components/Forms/SearchUserAttendanceDateForm';\nimport SearchUserLeaveDateRangeForm from '../components/Forms/SearchUserLeaveDateRangeForm';\n\nimport './Users.css';\n\nclass UsersPage extends Component {\n  state = {\n    creating: false,\n    updating: false,\n    deleting: false,\n    searching: false,\n    users: [],\n    searchUsers: [],\n    isLoading: false,\n    isSorting: false,\n    selectedUser: null,\n    userUpdateField: null,\n    userSearchField: null,\n    userSearchQuery: null,\n    canDelete: null,\n    userAlert: null,\n    overlay: false,\n    overlayStatus: null,\n    file: null,\n    showAttachment: false,\n    showThisAttachmentFile: null,\n    showThisAttachmentType: null,\n    createPdf: false,\n    pdfData: null,\n  };\n  isActive = true;\n\n  static contextType = AuthContext;\n\n  // constructor(props) {\n  //   super(props);\n  // }\n\n  componentDidMount() {\n    this.fetchUsers();\n    if (this.context.user.name === \"Lord-of-the-Manor\"){\n      this.setState({canDelete: true})\n    }\n    // if (this.context.user.name === 'admin579'){\n    //   this.setState({canDelete: true})\n    // }\n  }\n\n\n  startCreateUserHandler = () => {\n    this.setState({ creating: true });\n    console.log(\"CreateUserForm...\");\n  };\n  startUpdateUserHandler = () => {\n    this.setState({ updating: true });\n    console.log(\"UpdateUserForm...\");\n  };\n\n  startSearchUserHandler = () => {\n    this.setState({ searching: true });\n    console.log(\"SearchUserForm...\");\n  };\n\n  modalConfirmHandler = (event) => {\n\n    console.log(\"CreateUserFormData:  \", event.target.formGridEmail.value);\n\n    this.setState({ creating: false });\n    const email = event.target.formGridEmail.value;\n    const password = event.target.formGridPassword.value;\n    const name = event.target.formGridName.value;\n    const role = event.target.formGridRole.value;\n    let dob = event.target.formGridDob.value;\n    let phone = event.target.formGridPhone.value;\n    let addressNumber = event.target.formGridAddressNumber.value;\n    let addressStreet = event.target.formGridAddressStreet.value;\n    let addressTown = event.target.formGridAddressTown.value;\n    let addressParish = event.target.formGridAddressParish.value;\n    let addressPostOffice = event.target.formGridAddressPostOffice.value;\n\n    let employmentDate = event.target.formGridEmploymentDate.value;\n    if (event.target.formGridEmploymentDateTodayCheckbox.checked === true) {\n      employmentDate = new Date().toISOString().slice(0,10);\n    }\n\n    let terminationDate = event.target.formGridTerminationDate.value;\n\n    if (\n      email.trim().length === 0 ||\n      password.trim().length === 0 ||\n      name.trim().length === 0 ||\n      role.trim().length === 0 ||\n      dob.trim().length === 0 ||\n      phone.trim().length === 0 ||\n      addressNumber.trim().length === 0 ||\n      addressStreet.trim().length === 0 ||\n      addressTown.trim().length === 0 ||\n      addressParish.trim().length === 0 ||\n      addressPostOffice.trim().length === 0 ||\n      employmentDate.trim().length === 0\n    ) {\n      console.log(\"blank fields detected!!!...Please try again...\");\n      this.setState({userAlert: \"blank fields detected!!!...Please try again...\"});\n      return;\n    }\n\n    const token = this.context.token;\n    const userId = this.context.userId;\n\n    console.log(`\n      creating user...\n      userId: ${userId}\n      email: ${email},\n      password: ${password},\n      name: ${name},\n      role: ${role},\n      dob: ${dob},\n      phone: ${phone},\n      addressNumber: ${addressNumber},\n      addressStreet: ${addressStreet},\n      addressTown: ${addressTown},\n      addressParish: ${addressParish},\n      addressPostOffice: ${addressPostOffice},\n      employmentDate: ${employmentDate},\n      terminationDate: ${terminationDate},\n      `);\n\n    const requestBody = {\n      query: `\n          mutation {createUser(userInput: {email:\"${email}\",password:\"${password}\",name:\"${name}\",dob:\"${dob}\",addressNumber:${addressNumber},addressStreet:\"${addressStreet}\",addressTown:\"${addressTown}\",addressParish:\"${addressParish}\", addressPostOffice:\"${addressPostOffice}\",phone:\"${phone}\",role:\"${role}\",employmentDate:\"${employmentDate}\",terminationDate:\"${terminationDate}\"})\n          {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}\n        }\n        `};\n\n\n\n    // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"create user response data... \" + JSON.stringify(resData.data.createUser));\n\n        // this.state.users.push(resData.data.createUser)\n        this.setState(prevState => {\n          const updatedUsers = [...prevState.users];\n          updatedUsers.push(resData.data.createUser);\n\n          return { users: updatedUsers };\n        });\n        this.context.users.push(resData.data.createUser);\n        const responseAlert = JSON.stringify(resData.data).slice(0,8);\n        this.setState({userAlert: responseAlert});\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n  };\n\n\n  modalConfirmUpdateHandler = (event) => {\n\n    const token = this.context.token;\n    const userId = this.context.userId;\n    let selectedUserId = this.context.selectedUser._id;\n    if(userId !== selectedUserId && this.context.user.role !== 'admin') {\n      console.log(\"Not the creator or Admin! No edit permission!!\");\n      this.setState({userAlert: \"Not the creator or Admin! No edit permission!!\"});\n      selectedUserId = null;\n    }\n\n    console.log(\"UpdateUserFormData:  \", event.target.formGridEmail.value);\n\n    this.setState({ updating: false });\n\n    let email = event.target.formGridEmail.value;\n    let password = event.target.formGridPassword.value;\n    let name = event.target.formGridName.value;\n    let role = this.context.selectedUser.role;\n    let dob = event.target.formGridDob.value;\n    let phone = event.target.formGridPhone.value;\n    let addressNumber = event.target.formGridAddressNumber.value;\n    let addressStreet = event.target.formGridAddressStreet.value;\n    let addressTown = event.target.formGridAddressTown.value;\n    let addressParish = event.target.formGridAddressParish.value;\n    let addressPostOffice = event.target.formGridAddressPostOffice.value;\n\n    let employmentDate = event.target.formGridEmploymentDate.value;\n    if (event.target.formGridEmploymentDateTodayCheckbox.checked === true) {\n      employmentDate = new Date().toISOString().slice(0,10);\n    }\n\n    let terminationDate = event.target.formGridTerminationDate.value;\n    if (event.target.formGridTerminationDateTodayCheckbox.checked === true) {\n      terminationDate = new Date().toISOString().slice(0,10);\n    }\n\n    if (email.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      email = this.context.selectedUser.email;\n    }\n    if (password.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      password = this.context.selectedUser.password;\n    }\n    if (name.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      name = this.context.selectedUser.name;\n    }\n    // if (role.trim().length === 0) {\n    //   console.log(\"blank fields detected!!!...filling w/ previous data...\");\n    //   role = this.state.selectedUser.role;\n    // }\n    if (dob.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      dob = this.context.selectedUser.dob;\n    }\n    if (phone.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      phone = this.context.selectedUser.phone;\n    }\n    if (addressNumber.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      addressNumber = this.context.selectedUser.address.number;\n    }\n    if (addressStreet.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      addressStreet = this.context.selectedUser.address.street;\n    }\n    if (addressTown.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      addressTown = this.context.selectedUser.address.town;\n    }\n    if (addressParish.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      addressParish = this.context.selectedUser.address.parish;\n    }\n    if (addressPostOffice.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      addressPostOffice = this.context.selectedUser.address.postOffice;\n    }\n    if (employmentDate.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      employmentDate = this.context.selectedUser.employmentDate;\n    }\n    if (terminationDate.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      terminationDate = this.context.selectedUser.terminationDate;\n    }\n\n    console.log(`\n      updating user profile...\n      userId: ${userId}\n      email: ${email},\n      password: ${password},\n      name: ${name},\n      role: ${role},\n      dob: ${dob},\n      phone: ${phone},\n      addressNumber: ${addressNumber},\n      addressStreet: ${addressStreet},\n      addressTown: ${addressTown},\n      addressParish: ${addressParish},\n      addressPostOffice: ${addressPostOffice},\n      employmentDate: ${employmentDate},\n      terminationDate: ${terminationDate},\n      `);\n      this.setState({userAlert: \"updating user profile...\"});\n\n    const requestBody = {\n      query: `\n      mutation {updateUser(userId:\"${userId}\",selectedUserId:\"${selectedUserId}\",userInput: {email:\"${email}\",password:\"${password}\",name:\"${name}\",dob:\"${dob}\",addressNumber:${addressNumber},addressStreet:\"${addressStreet}\",addressTown:\"${addressTown}\",addressParish:\"${addressParish}\", addressPostOffice:\"${addressPostOffice}\",phone:\"${phone}\",role:\"${role}\",employmentDate:\"${employmentDate}\",terminationDate:\"${terminationDate}\"})\n      {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n        `};\n\n\n        fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }})\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n        const updatedUser = resData.data.updateUser;\n        console.log(\"updatedUser:  \", JSON.stringify(updatedUser));\n        this.setState({user: updatedUser})\n        this.state.users.push(resData.data.updateUser);\n        this.context.users = this.state.users;\n\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert})\n        // this.setState({ userAlert: responseAlert, selectedUser: resData.data.updateUser})\n        this.fetchUsers();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n  };\n\n\n  modalConfirmUpdateFieldHandler = (event) => {\n\n    const token = this.context.token;\n    const userId = this.context.userId;\n    let selectedUserId = this.context.selectedUser._id;\n    // if(userId !== selectedUserId && this.context.user.role !== 'admin') {\n    //   console.log(\"Not the creator or Admin! No edit permission!!\");\n    //   selectedUserId = null;\n    // }\n\n\n      console.log(\"UpdateUserFieldFormData:  \", event.target.formGridField.value, event.target.formGridFieldSelect.value);\n      this.setState({ updating: false });\n\n      let field = null;\n      let query = event.target.formGridQuery.value;\n      if (event.target.formGridFieldSelect.value === \"select\") {\n        field = event.target.formGridField.value;\n      } else {\n        field = event.target.formGridFieldSelect.value;\n      }\n      console.log(`\n          field: ${field},\n          query: ${query},\n        `);\n\n        this.setState({ userAlert: \"updating user field...\"})\n\n      const requestBody = {\n        query:`\n          mutation{updateUserField(userId:\"${userId}\",selectedUserId:\"${selectedUserId}\",field:\"${field}\",query:\"${query}\")\n          {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}\n        }\n        `};\n\n        fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData.data.updateUserField));\n\n          const updatedUserId = resData.data.updateUserField._id;\n          const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n          const updatedUserPos = this.state.users.indexOf(updatedUser);\n          const slicedArray = this.state.users.splice(updatedUserPos, 1);\n          console.log(\"updatedUser:  \", JSON.stringify(updatedUser),\"  updatedUserPos:  \", updatedUserPos, \"  slicedArray:  \", slicedArray);\n\n          this.state.users.push(resData.data.updateUserField);\n          this.context.users = this.state.users;\n          const responseAlert = JSON.stringify(resData.data).slice(2,25);\n          this.setState({ userAlert: responseAlert})\n          this.fetchUsers();\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({userAlert: err});\n        });\n\n  }\n\n  updateUserAttendanceHandler = (event) => {\n    const token = this.context.token;\n    const userId = this.context.userId;\n    let selectedUserId = this.context.selectedUser._id;\n    // if(userId !== selectedUserId && this.context.user.role !== 'admin') {\n    //   console.log(\"Not the creator or Admin! No edit permission!!\");\n    //   selectedUserId = null;\n    // }\n    if (userId !== selectedUserId && this.context.user.role !== \"admin\" ) {\n      console.log(\"Not the creator or Admin! No edit permission!!\");\n      this.setState({ userAlert: \"Not the creator or Admin! No edit permission!!\"});\n        selectedUserId = null;\n    }\n\n    console.log(\"UpdateUserAttendanceFormData:  \", );\n\n    this.setState({ updating: false , userUpdateField: null });\n\n\n    let attendanceDate = event.target.formGridAttendanceDate.value;\n    if (event.target.formGridAttendanceDateTodayCheckbox.checked === true) {\n      attendanceDate = new Date().toISOString().slice(0,10);\n    }\n\n    let attendanceStatus = event.target.formGridAttendanceStatus.value;\n    let attendanceDescription = event.target.formGridAttendanceDescription.value;\n\n    if (\n    attendanceDate.trim().length === 0 ||\n    attendanceStatus.trim().length === 0\n    ){\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      return\n    }\n\n    console.log(`\n      adding user attendance item...\n      userId: ${userId},\n      selectedUserId: ${selectedUserId}\n      attendanceDate: ${attendanceDate},\n      attendanceStatus: ${attendanceStatus},\n      attendanceDescription: ${attendanceDescription}\n      `);\n\n      this.setState({ userAlert: \"adding user attendance item...\"});\n\n      const requestBody = {\n        query:`\n          mutation {updateUserAttendance(userId:\"${userId}\", selectedUserId:\"${selectedUserId}\",userInput:{attendanceDate:\"${attendanceDate}\",attendanceStatus:\"${attendanceStatus}\",attendanceDescription:\"${attendanceDescription}\"})\n          {_id,name,email,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description}}}\n        `};\n\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData.data.updateUserAttendance));\n\n          const updatedUserId = resData.data.updateUserAttendance._id;\n          const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n          const updatedUserPos = this.state.users.indexOf(updatedUser);\n          const slicedArray = this.state.users.splice(updatedUserPos, 1);\n          console.log(\"updatedUser:  \", JSON.stringify(updatedUser),\"  updatedUserPos:  \", updatedUserPos, \"  slicedArray:  \", slicedArray);\n\n          this.state.users.push(resData.data.updateUserAttendance);\n          this.context.users = this.state.users;\n          const responseAlert = JSON.stringify(resData.data).slice(2,25);\n          this.setState({ userAlert: responseAlert})\n          this.fetchUsers();\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({userAlert: err});\n        });\n\n\n  }\n\n    updateUserAttachmentHandler = (event) => {\n\n    const token = this.context.token;\n    const userId = this.context.userId;\n    let selectedUserId = this.context.selectedUser._id;\n    // if(userId !== selectedUserId && this.context.user.role !== 'admin') {\n    //   console.log(\"Not the creator or Admin! No edit permission!!\");\n    //   selectedUserId = null;\n    // }\n    if (userId !== selectedUserId && this.context.user.role !== \"admin\" ) {\n      console.log(\"Not the creator or Admin! No edit permission!!\");\n      this.setState({userAlert: \"Not the creator or Admin! No edit permission!!\"})\n        selectedUserId = null;\n    }\n\n    console.log(\"UpdateUserAttachmentFormData:  \");\n\n    this.setState({ updating: false , userUpdateField: null });\n\n    // let attachmentName = event.target.formGridAttachmentName.value;\n    let attachmentFormat = event.target.formGridAttachmentFormat.value;\n    let attachmentPath = \"uploads/staff/\"+selectedUserId+\"/attachments\";\n    // let attachmentPath = event.target.formGridAttachmentPath.value;\n    let file = AuthContext._currentValue.file;\n\n    console.log(`\n      uploading to s3...\n      file.name: ${file.name},\n      AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n      `);\n    const config = {\n      bucketName: this.context.creds.s3.bucketName,\n      dirName: attachmentPath,\n      region: this.context.creds.s3.region,\n      accessKeyId: this.context.creds.s3.accessKeyId,\n      secretAccessKey: this.context.creds.s3.secretAccessKey,\n    }\n    const ReactS3Client = new S3(config);\n    const newFileName = file.name;\n    const attachmentName = newFileName;\n\n    ReactS3Client\n        .uploadFile(file, newFileName)\n        .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n        .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n    if (\n      attachmentName.trim().length === 0 ||\n      attachmentFormat.trim().length === 0 ||\n      attachmentPath.trim().length === 0\n  ) {\n      console.log(\"blank fields detected!!! try again\");\n      return\n    }\n\n    console.log(`\n      adding user attachment item...\n      userId: ${userId},\n      selectedUserId: ${selectedUserId}\n      attachmentName: ${attachmentName},\n      attachmentFormat: ${attachmentFormat},\n      attachmentPath: ${attachmentPath},\n      `);\n      this.setState({userAlert: \"adding user attatchment item...\"})\n\n      const requestBody = {\n        query:`\n          mutation{updateUserAttachment(userId:\"${userId}\",selectedUserId:\"${selectedUserId}\",userInput:{attachmentName:\"${attachmentName}\",attachmentFormat:\"${attachmentFormat}\",attachmentPath:\"${attachmentPath}\"})\n          {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n        `};\n\n        fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData.data.updateUserAttachment));\n\n          const updatedUserId = resData.data.updateUserAttachment._id;\n          const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n          const updatedUserPos = this.state.users.indexOf(updatedUser);\n          const slicedArray = this.state.users.splice(updatedUserPos, 1);\n          console.log(\"updatedUser:  \", JSON.stringify(updatedUser),\"  updatedUserPos:  \", updatedUserPos, \"  slicedArray:  \", slicedArray);\n\n          this.state.users.push(resData.data.updateUserAttachment);\n          this.context.users = this.state.users;\n          const responseAlert = JSON.stringify(resData.data).slice(2,25);\n          this.setState({ userAlert: responseAlert})\n          this.fetchUsers();\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({userAlert: err});\n        });\n\n\n  }\n\n\n  updateUserLeaveHandler = (event) => {\n\n    const token = this.context.token;\n    const userId = this.context.userId;\n    let selectedUserId = this.context.selectedUser._id;\n    // if(userId !== selectedUserId && this.context.user.role !== 'admin') {\n    //   console.log(\"Not the creator or Admin! No edit permission!!\");\n    //   selectedUserId = null;\n    // }\n    if (userId !== selectedUserId && this.context.user.role !== \"admin\" ) {\n      console.log(\"Not the creator or Admin! No edit permission!!\");\n      this.setState({userAlert: \"Not the creator or Admin! No edit permission!!\"})\n        selectedUserId = null;\n    }\n\n    console.log(\"UpdateUserLeaveFormData:  \", event.target.formGridLeaveType.value);\n\n    this.setState({ updating: false , userUpdateField: null });\n\n    let leaveType = event.target.formGridLeaveType.value;\n    let leaveTitle = event.target.formGridLeaveTitle.value;\n\n    let leaveStartDate = event.target.formGridLeaveStartDate.value;\n    if (event.target.formGridLeaveStartDateTodayCheckbox.checked === true) {\n      leaveStartDate = new Date().toISOString().slice(0,10);\n    }\n\n    let leaveEndDate = event.target.formGridLeaveEndDate.value;\n    if (event.target.formGridLeaveEndDateTodayCheckbox.checked === true) {\n      leaveEndDate = new Date().toISOString().slice(0,10);\n    }\n\n    if (\n      leaveType.trim().length === 0 ||\n      leaveTitle.trim().length === 0 ||\n      leaveStartDate.trim().length === 0 ||\n      leaveEndDate.trim().length === 0\n    ) {\n      console.log(\"blank fields detected!!!...try again\");\n      this.setState({userAlert: \"blank fields detected!!!...try again\"});\n      return\n    }\n\n    console.log(`\n      adding user leave item...\n      userId: ${userId},\n      selectedUserId: ${selectedUserId}\n      leave: {\n        type: ${leaveType},\n        title: ${leaveTitle},\n        startDate: ${leaveStartDate},\n        endDate: ${leaveEndDate}\n      }\n      `);\n      this.setState({userAlert: \"adding user leave item...\"})\n\n      const requestBody = {\n        query:`\n          mutation{updateUserLeave(userId:\"${userId}\",selectedUserId:\"${selectedUserId}\",userInput:{leaveType:\"${leaveType}\",leaveTitle:\"${leaveTitle}\",leaveStartDate:\"${leaveStartDate}\",leaveEndDate:\"${leaveEndDate}\"})\n          {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n        `};\n\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData.data));\n\n          const updatedUserId = resData.data.updateUserLeave._id;\n          const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n          const updatedUserPos = this.state.users.indexOf(updatedUser);\n          const slicedArray = this.state.users.splice(updatedUserPos, 1);\n          console.log(\"updatedUser:  \", JSON.stringify(updatedUser),\"  updatedUserPos:  \", updatedUserPos, \"  slicedArray:  \", slicedArray);\n\n          this.state.users.push(resData.data.updateUserLeave);\n          this.context.users = this.state.users;\n          const responseAlert = JSON.stringify(resData.data).slice(2,25);\n          this.setState({ userAlert: responseAlert})\n          this.fetchUsers();\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({userAlert: err});\n        });\n\n  }\n\n\n  modalConfirmSearchHandler = (event) => {\n    console.log(\"SearchUserForm:  \");\n\n\n    let userId = this.context.userId;\n\n      console.log(\"SearchUserFormData:  \", event.target.formBasicField.value);\n      this.setState({ searching: false });\n\n      let field = null;\n      let query = event.target.formBasicQuery.value;\n      if (event.target.formBasicFieldSelect.value === \"select\") {\n        field = event.target.formBasicField.value;\n      } else {\n        field = event.target.formBasicFieldSelect.value;\n      }\n\n      this.setState({\n        userSearchField: field,\n        userSearchQuery: query,\n      })\n\n      if (\n        field.trim().length === 0 ||\n        query.trim().length === 0\n      ) {\n        console.log(\"blank fields detected!!!...Please try again...\");\n        this.setState({userAlert: \"blank fields detected!!!...Please try again...\"})\n        return;\n      }\n\n      const search = { field, query }\n      console.log(\"Searching for User:  \", JSON.stringify(search));\n      this.setState({userAlert: \"Searching for User...\"})\n\n      const requestBody = {\n        query: `\n          query {getUserField(userId:\"${userId}\",field:\"${field}\",query:\"${query}\")\n          {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n        `}\n\n      const token = this.context.token;\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData));\n\n          const responseAlert = JSON.stringify(resData.data).slice(0,8);\n          this.setState({userAlert: responseAlert});\n\n          const searchUsers = resData.data.getUserField;\n\n          this.setState({ searchUsers: searchUsers})\n          console.log(\"state.searchUsers:  \", this.state.searchUsers);\n          // this.fetchUsers();\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({userAlert: err});\n        });\n  }\n\n  modalConfirmSearchIdHandler = (event) => {\n\n    let userId = this.context.userId;\n    this.setState({ searching: false });\n\n    console.log(\"SearchUserIdFormData:\", event.target.formBasicId.value);\n    let selectedUserId = event.target.formBasicId.value;\n\n    const requestBody = {\n      query: `\n        query {getUserId(userId:\"${userId}\",selectedUserId:\"${selectedUserId}\")\n        {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n      `}\n\n    const token = this.context.token;\n\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({userAlert: responseAlert});\n\n        const searchUsers = resData.data.getUserId;\n\n        this.setState({ searchUsers: [searchUsers] });\n        console.log(\"state.searchUsers:  \", this.state.searchUsers);\n        // this.fetchUsers();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n  }\n  modalConfirmSearchAttendanceDateHandler = (event) => {\n\n    let userId = this.context.userId;\n    this.setState({ searching: false });\n\n    console.log(\"SearchUserAttendanceDateFormData:\");\n\n    let attendanceDate = event.target.formBasicDate.value;\n    if (event.target.formBasicDateTodayCheckbox.checked === true) {\n      attendanceDate = new Date().toISOString().slice(0,10);\n    }\n\n    const requestBody = {\n      query: `\n        query {getUserAttendanceDate(userId:\"${userId}\",attendanceDate:\"${attendanceDate}\")\n        {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n      `}\n\n    const token = this.context.token;\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n\n        const responseAlert = JSON.stringify(resData.data).slice(0,8);\n        this.setState({userAlert: responseAlert});\n\n        const searchUsers = resData.data.getUserAttendanceDate;\n\n        this.setState({ searchUsers: searchUsers})\n        console.log(\"state.searchUsers:  \", this.state.searchUsers);\n        // this.fetchUsers();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n  }\n  modalConfirmSearchLeaveDateRangeHandler = (event) => {\n\n    let userId = this.context.userId;\n    this.setState({ searching: false });\n\n    console.log(\"SearchUserLeaveDateRangeFormData:\");\n\n    const startDate = event.target.formBasicStartDate.value;\n    const endDate = event.target.formBasicEndDate.value;\n\n    const requestBody = {\n      query: `\n        query{getUserLeaveDateRange(userId:\"${userId}\",startDate:\"${startDate}\",endDate:\"${endDate}\")\n        {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n      `}\n\n    const token = this.context.token;\n\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n\n        const responseAlert = JSON.stringify(resData.data).slice(0,8);\n        this.setState({userAlert: responseAlert});\n\n        const searchUsers = resData.data.getUserLeaveDateRange;\n\n        this.setState({ searchUsers: searchUsers})\n        console.log(\"state.searchUsers:  \", this.state.searchUsers);\n        // this.fetchUsers();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n  }\n\n  modalConfirmSearchNameHandler = (event) => {\n    console.log(\"SearchUserNameFormData:\", event.target.formBasicName.value);\n    this.setState({ searching: false });\n\n    let users = this.state.users;\n    const regex = new RegExp(event.target.formBasicName.value,\"i\");\n    console.log(`\n      regex: ${regex},\n      `);\n      let result = users.filter(user => user.name.match(regex))\n      console.log(`\n        result: ${JSON.stringify(result)}\n        `);\n\n        this.setState({ searchUsers: result})\n\n  }\n\n\n  modalCancelHandler = () => {\n    this.setState({ creating: false, updating: false, deleting: false, searching: false});\n  };\n\n  fetchUsers() {\n    console.log(\"fetch users:\");\n    const userId = this.context.userId;\n\n    this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n          query {users (userId:\"${userId}\")\n          {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n        `};\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          this.context.userAlert = 'Failed!';\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n\n        const responseAlert = JSON.stringify(resData.data).slice(0,8);\n        this.setState({userAlert: responseAlert});\n\n        const users = resData.data.users;\n        console.log(\"resData:  \", resData);\n        console.log(users);\n\n        if (this.isActive) {\n          this.setState({ users: users, isLoading: false });\n        }\n        this.context.users = this.state.users;\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n        if (this.isActive) {\n          this.setState({ isLoading: false });\n        }\n      });\n  }\n\n  fetchUsersAsc = () => {\n    console.log(\"'fetch usersAsc function' context object... \" + JSON.stringify(this.context));\n    const userId = this.context.userId;\n\n    // this.setState({ isSorting: true });\n    const requestBody = {\n      query: `\n          query {usersNameAsc (userId:\"${userId}\")\n          {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n        `};\n\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          this.context.userAlert = 'Failed!';\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const users = resData.data.usersNameAsc;\n        console.log(\"resData:  \", resData);\n        console.log(users);\n\n        const responseAlert = JSON.stringify(resData.data).slice(0,8);\n        this.setState({userAlert: responseAlert});\n\n        this.setState({users: users});\n        // if (this.isActive) {\n        //   this.setState({ users: users, isLoading: false });\n        // }\n        this.context.users = this.state.users;\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n        // if (this.isActive) {\n        //   this.setState({ isLoading: false });\n        // }\n      });\n  }\n  fetchUsersDesc = () => {\n    console.log(\"'fetch usersDesc function' context object... \" + JSON.stringify(this.context));\n    const userId = this.context.userId;\n\n    // this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n          query {usersNameDesc (userId:\"${userId}\")\n          {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n        `};\n\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          this.context.userAlert = 'Failed!';\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const users = resData.data.usersNameDesc;\n        console.log(\"resData:  \", resData);\n        console.log(users);\n\n        const responseAlert = JSON.stringify(resData.data).slice(0,8);\n        this.setState({userAlert: responseAlert});\n\n        // if (this.isActive) {\n        //   this.setState({ users: users, isLoading: false });\n        // }\n        this.setState({users: users});\n        this.context.users = this.state.users;\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n        // if (this.isActive) {\n        //   this.setState({ isLoading: false });\n        // }\n      });\n  }\n\nmodalDeleteHandler = () => {\n  console.log(\"deleting user...selectedUser:  \", this.context.selectedUser);\n\n  const userId = this.context.userId;\n  const selectedUserId = this.context.selectedUser._id;\n\n  if(this.context.user.role !== 'admin') {\n    console.log(\"Not the Admin! No edit permission!!\");\n    this.setState({userAlert: \"Not the Admin! No edit permission!!\"})\n  }\n\n  this.setState({deleting: true, userAlert: \"deleting user..\"});\n\n  const requestBody = {\n    query: `\n        mutation {\n          deleteUser(userId: \"${userId}\", selectedUserId: \"${selectedUserId}\")\n          {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}\n        }\n      `};\n\n\n  fetch('http://localhost:10000/graphql', {\n    method: 'POST',\n    body: JSON.stringify(requestBody),\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + this.context.token\n    }\n  })\n    .then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n      return res.json();\n    })\n    .then(resData => {\n\n      const responseAlert = JSON.stringify(resData.data).slice(0,8);\n      this.setState({userAlert: responseAlert});\n\n      let deletedUser = resData.data.deleteUser;\n      console.log(deletedUser);\n\n      let deletedUserId = deletedUser._id;\n      deletedUser = this.state.users.find(e => e._id === deletedUserId);\n      const deletedUserPos = this.state.users.indexOf(deletedUser);\n      const slicedArray = this.state.users.splice(deletedUserPos, 1);\n      console.log(\"deletedUser:  \", JSON.stringify(deletedUser),\"  deletedUserPos:  \", deletedUserPos, \"  slicedArray:  \", slicedArray);\n\n      this.setState({ deleting: false });\n      // this.setState({ deleting: false, selectedUser: null });\n      // this.context.selectedUser = null;\n\n      this.fetchUsers();\n\n    })\n    .catch(err => {\n      console.log(err);\n      this.setState({userAlert: err});\n      if (this.isActive) {\n        this.setState({ deleting: false });\n      }\n    });\n\n}\n\ndeleteUserAttendanceItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let selectedUserId = this.state.selectedUser._id;\n  let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n  console.log(`\n    delete user Attendance item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    selectedUserId: ${selectedUserId},\n    attandance date: ${date},\n    `);\n\n    const requestBody = {\n      query: `\n       mutation{deleteUserAttendance(userId:\"${userId}\",selectedUserId:\"${selectedUserId}\",attendanceDate:\"${date}\")\n       {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n    `};\n\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            console.log(\"resData.data:  \",resData.data.deleteUserAttendance);\n\n            const updatedUserId = resData.data.deleteUserAttendance._id;\n            const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n            const updatedUserPos = this.state.users.indexOf(updatedUser);\n            const slicedArray = this.state.users.splice(updatedUserPos, 1);\n            console.log(\"updatedUser:  \", JSON.stringify(updatedUser),\"  updatedUserPos:  \", updatedUserPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.users.push(resData.data.deleteUserAttendance);\n            this.context.users = this.state.users;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            this.fetchUsers();\n\n          })\n          .catch(err => {\n            console.log(err);\n            this.setState({ userAlert: err })\n          });\n}\n\ndeleteUserLeaveItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let selectedUserId = this.state.selectedUser._id;\n\n  console.log(`\n    delete user Leave item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    selectedUserId: ${selectedUserId},\n    `);\n\n    const requestBody = {\n      query: `\n       mutation{deleteUserLeave(userId:\"${userId}\",selectedUserId:\"${selectedUserId}\",leaveTitle:\"${props.title}\")\n       {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n    `};\n\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedUser = resData.data.deleteUserLeave;\n            console.log(deletedUser);\n\n            const updatedUserId = resData.data.deleteUserLeave._id;\n            const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n            const updatedUserPos = this.state.users.indexOf(updatedUser);\n            const slicedArray = this.state.users.splice(updatedUserPos, 1);\n            console.log(\"updatedUser:  \", JSON.stringify(updatedUser),\"  updatedUserPos:  \", updatedUserPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.users.push(resData.data.deleteUserLeave);\n            this.context.users = this.state.users;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            this.fetchUsers();\n\n          })\n          .catch(err => {\n            console.log(err);\n            this.setState({ userAlert: err })\n          });\n}\n\ndeleteUserAttachmentItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let selectedUserId = this.state.selectedUser._id;\n\n  console.log(`\n    delete user Attachment item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    selectedUserId: ${selectedUserId},\n    `);\n\n    // console.log(`\n    //   deleting from s3...\n    //   file.name: ${props.name},\n    //   `);\n    //\n    //   const config = {\n    //     bucketName: this.context.creds.s3.bucketName,\n    //     dirName: props.path,\n    //     region: this.context.creds.s3.region,\n    //     accessKeyId: this.context.creds.s3.accessKeyId,\n    //     secretAccessKey: this.context.creds.s3.secretAccessKey,\n    //   }\n    // const ReactS3Client = new S3(config);\n    // const filename = props.name;\n    // // const attachmentName = newFileName;\n    // //\n    // S3FileUpload\n    // .deleteFile(filename, config)\n    // .then(response => console.log(response))\n    // .catch(err => console.error(err))\n\n\n    const requestBody = {\n      query: `\n       mutation{deleteUserAttachment(userId:\"${userId}\",selectedUserId:\"${selectedUserId}\",attachmentName:\"${props.name}\")\n       {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n    `};\n\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedUser = resData.data.deleteUserAttachment;\n            console.log(deletedUser);\n\n            const updatedUserId = resData.data.deleteUserAttachment._id;\n            const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n            const updatedUserPos = this.state.users.indexOf(updatedUser);\n            const slicedArray = this.state.users.splice(updatedUserPos, 1);\n            console.log(\"updatedUser:  \", JSON.stringify(updatedUser),\"  updatedUserPos:  \", updatedUserPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.users.push(resData.data.deleteUserAttachment);\n            this.context.users = this.state.users;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            this.fetchUsers();\n\n          })\n          .catch(err => {\n            console.log(err);\n            this.setState({ userAlert: err })\n          });\n}\n\n\n\nupdateUserSpecial (event) {\n\n  console.log(\"special field to update:  \", event.target.value);\n  const field = event.target.value;\n  this.setState({ userUpdateField: field});\n\n}\n\n  showDetailHandler = userId => {\n\n    this.setState(prevState => {\n      const selectedUser = prevState.users.find(e => e._id === userId);\n      this.context.selectedUser = selectedUser;\n      this.setState({selectedUser: selectedUser});\n      console.log(\"User selected  :  \", selectedUser);\n      return { selectedUser: selectedUser };\n    });\n  };\n\n  onViewAttachment = (attachment) => {\n    console.log(`\n      setting up attachment viewer...\n      attachment: ${JSON.stringify(attachment)}\n      `);\n      this.setState({showAttachment: true})\n\n      const file = \"https://ent-emr-bucket.s3-us-east-2.amazonaws.com/\"+attachment.path+\"/\"+attachment.name;\n      const type = attachment.format;\n\n      this.setState({showThisAttachmentFile: file, showThisAttachmentType: type})\n  }\n\n  closeAttachmentView = () => {\n    console.log(`\n      closing attachment viewer...\n      `);\n      this.setState({showAttachment: false})\n  }\n\n  createPdf = (user) => {\n    console.log(`\n        creating pdf...\n        user: ${JSON.stringify(user)}\n      `);\n\n      const pdfData = {\n        title: \"This pdf is supplied with Staff data...\",\n        user: {\n          _id: user._id,\n          email: user.email,\n          password: user.password,\n          name: user.name,\n          dob: user.dob,\n          address:{\n            number: user.address.number,\n            street: user.address.street,\n            town: user.address.town,\n            parish: user.address.parish,\n            postOffice: user.address.postOffice,\n          },\n          phone: user.phone,\n          role: user.role,\n          employmentDate: user.employmentDate,\n          terminationDate: user.terminationDate,\n          attachments: user.attachments,\n          attendance: user.atttendance,\n          leave: user.leave\n        }\n\n      };\n\n    this.setState({createPdf: true, pdfData: pdfData})\n  }\n\n  closePdfCreator = () => {\n    console.log(`\n      closing pdf creator...\n      `);\n      this.setState({createPdf: false, pdfData: null})\n  }\n\n  userSearchClearlHandler () {\n    console.log(\"clearing user search results\");\n    this.setState({searchUsers: [], userAlert: \"clearing user search results\"});\n  }\n\n\n  componentWillUnmount() {\n    this.isActive = false;\n  }\n\n  render() {\n    return (\n\n    <React.Fragment>\n    {this.state.showAttachment === true && (\n      <AttachmentViewer\n        onCloseAttachmentView={this.closeAttachmentView}\n        attachmentFile={this.state.showThisAttachmentFile}\n        attachmentType={this.state.showThisAttachmentType}\n      />\n    )}\n\n    {this.state.createPdf === true && (\n        <PdfCreator\n          pdfData={this.state.pdfData}\n          onClosePdfCreator={this.closePdfCreator}\n        />\n    )}\n\n    <Accordion>\n\n    <Row>\n\n    <Col md={3} className=\"MasterCol1\">\n\n    <AlertBox\n      authUserId={this.context.userId}\n      alert={this.state.userAlert}\n    />\n\n    {this.state.overlay === true && (\n      <LoadingOverlay\n        status={this.state.overlayStatus}\n      />\n    )}\n\n    <SidebarPage/>\n\n    </Col>\n\n    <Col md={9} className=\"MasterCol2\">\n\n        <Container className=\"containerCombinedDetail\">\n\n        <Tab.Container id=\"left-tabs-example\" defaultActiveKey=\"userDetail\">\n          <Row>\n            <Col sm={2}>\n              <Nav variant=\"pills\" className=\"flex-column\">\n                <Nav.Item>\n                  <Nav.Link eventKey=\"MasterList\">MASTER LIST</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey=\"userDetail\">Selected</Nav.Link>\n                </Nav.Item>\n                { this.context.user.role === \"admin\" && (\n                <Nav.Item>\n                  <Nav.Link eventKey=\"userCreate\">Create New</Nav.Link>\n                </Nav.Item>\n                )}\n                <Nav.Item>\n                  <Nav.Link eventKey=\"disabled\" disabled>Edit:</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey=\"userEditDemographics\">Demographics</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey=\"userEditField\">Single Field</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey=\"disabled\" disabled>Add:</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey=\"userEditAttendance\">Attendance</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey=\"userEditLeave\">Leave</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey=\"userEditAttachment\">Attachment</Nav.Link>\n                </Nav.Item>\n\n                <Nav.Item>\n                  <Nav.Link eventKey=\"disabled\" disabled>Search:</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey=\"SearchInput\">Input</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey=\"SearchResult\">Results</Nav.Link>\n                </Nav.Item>\n              </Nav>\n            </Col>\n\n            <Col sm={10}>\n              <Tab.Content>\n                <Tab.Pane eventKey=\"userDetail\">\n                  {this.state.selectedUser === null && (\n                    <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                      Select a Staff member from the Master List\n                    </Button>\n                  )}\n                  {this.state.isLoading === false &&\n                    this.state.selectedUser !== null\n                    && (\n                      <UserDetail\n                      authUserId={this.context.userId}\n                      AuthContext={this.context}\n                      user={this.state.selectedUser}\n                      onEdit={this.startUpdateUserHandler}\n                      canDelete={this.state.canDelete}\n                      onDelete={this.modalDeleteHandler}\n                      attendanceDelete={this.deleteUserAttendanceItem}\n                      leaveDelete={this.deleteUserLeaveItem}\n                      attachmentDelete={this.deleteUserAttachmentItem}\n                      onViewAttachment={this.onViewAttachment}\n                      onCreatePdf={this.createPdf}\n                      />\n                    )}\n                </Tab.Pane>\n\n                { this.context.user.role === \"admin\" && (\n                  <Tab.Pane eventKey=\"userCreate\">\n                  <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" onClick={this.startCreateUserHandler} >Create a NEW Staff Profile</Button>\n                    {this.state.creating && (\n                      <CreateUserForm\n                        authUserId={this.context.userId}\n                        canCancel\n                        canConfirm\n                        onCancel={this.modalCancelHandler}\n                        onConfirm={this.modalConfirmHandler}\n                        onSubmit={this.modalConfirmHandler}\n                        confirmText=\"Confirm\"\n                      />\n                    )}\n                  </Tab.Pane>\n                )}\n\n\n                <Tab.Pane eventKey=\"userEditDemographics\">\n                  {this.state.selectedUser === null && (\n                    <Button variant=\"outline-warning\" className=\"confirmEditButton\" size=\"lg\">\n                      Select a Staff member from the Master List\n                    </Button>\n                  )}\n                  {this.state.selectedUser !== null &&\n                    this.context.user.role === \"admin\"\n                    && (\n                    <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" onClick={this.startUpdateUserHandler}>Edit Demographics as Admin</Button>\n                  )}\n                  {this.state.selectedUser !== null &&\n                    this.state.selectedUser._id === this.context.user._id\n                    && (\n                    <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" onClick={this.startUpdateUserHandler}>Edit Demographics</Button>\n                  )}\n                  {this.state.selectedUser !== null &&\n                    this.state.selectedUser._id === this.context.user._id && (\n                    <Button variant=\"outline-danger\" className=\"confirmEditButton\" size=\"lg\">\n                      Your Profile\n                    </Button>\n                  )}\n                  {this.state.selectedUser !== null &&\n                    this.state.selectedUser._id !== this.context.user._id && (\n                    <Button variant=\"outline-danger\" className=\"confirmEditButton\" size=\"lg\">\n                      Not my profile\n                    </Button>\n                  )}\n                  {this.state.updating &&\n                    this.state.selectedUser !== null\n                    && (\n                    <UpdateUserForm\n                      authUserId={this.context.userId}\n                      canCancel\n                      canConfirm\n                      onCancel={this.modalCancelHandler}\n                      onConfirm={this.modalConfirmUpdateHandler}\n                      confirmText=\"Confirm\"\n                      user={this.context.selectedUser}\n                    />\n                  )}\n                </Tab.Pane>\n\n                <Tab.Pane eventKey=\"userEditField\">\n                  {this.state.selectedUser === null && (\n                    <Button variant=\"outline-warning\" className=\"confirmEditButton\" size=\"lg\">\n                      Select a Staff member from the Master List\n                    </Button>\n                  )}\n\n                  {this.state.selectedUser !== null &&\n                    this.context.user.role === \"admin\"\n                    && (\n                    <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" onClick={this.startUpdateUserHandler}>Edit Field as Admin</Button>\n                  )}\n                  {this.state.selectedUser !== null &&\n                    this.state.selectedUser._id === this.context.user._id\n                    && (\n                    <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" onClick={this.startUpdateUserHandler}>Edit a Single Field</Button>\n                  )}\n                  {this.state.selectedUser !== null &&\n                    this.state.selectedUser._id === this.context.user._id && (\n                    <Button variant=\"outline-success\" className=\"confirmEditButton\" size=\"lg\">\n                      Your Profile\n                    </Button>\n                  )}\n                  {this.state.selectedUser !== null &&\n                    this.state.selectedUser._id !== this.context.user._id && (\n                    <Button variant=\"outline-danger\" className=\"confirmEditButton\" size=\"lg\">\n                      Not my profile\n                    </Button>\n                  )}\n                  {this.state.updating &&\n                    this.state.selectedUser !== null\n                    && (\n                      <UpdateUserFieldForm\n                        authUserId={this.context.userId}\n                        canCancel\n                        canConfirm\n                        onCancel={this.modalCancelHandler}\n                        onConfirm={this.modalConfirmUpdateFieldHandler}\n                        confirmText=\"Confirm\"\n                        user={this.state.selectedUser}\n                      />\n                  )}\n                </Tab.Pane>\n\n                <Tab.Pane eventKey=\"userEditAttendance\">\n                  {this.state.selectedUser === null && (\n                    <Button variant=\"outline-warning\" className=\"confirmEditButton\" size=\"lg\">\n                      Select a Staff member from the Master List below\n                    </Button>\n                  )}\n\n                  {this.state.selectedUser !== null &&\n                    this.context.user.role === \"admin\"\n                    && (\n                    <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" value='attendance' onClick={this.updateUserSpecial.bind(this)}>Add Attendance as Admin</Button>\n                  )}\n                  {this.state.selectedUser !== null &&\n                    this.state.selectedUser._id === this.context.user._id\n                    && (\n                    <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" value='attendance' onClick={this.updateUserSpecial.bind(this)}>Add Attendance</Button>\n                  )}\n                  {this.state.selectedUser !== null &&\n                    this.state.selectedUser._id === this.context.user._id && (\n                    <Button variant=\"outline-success\" className=\"confirmEditButton\" size=\"lg\">\n                      Your Profile\n                    </Button>\n                  )}\n                  {this.state.selectedUser !== null &&\n                    this.state.selectedUser._id !== this.context.user._id && (\n                    <Button variant=\"outline-danger\" className=\"confirmEditButton\" size=\"lg\">\n                      Not my profile\n                    </Button>\n                  )}\n\n                  {this.state.userUpdateField === 'attendance' &&\n                  this.state.selectedUser !== null\n                   && (\n                     <UpdateUserAttendanceForm\n                    authUserId={this.context.userId}\n                    canCancel\n                      canConfirm\n                      onCancel={this.modalCancelHandler}\n                      onConfirm={this.updateUserAttendanceHandler}\n                      confirmText=\"Confirm\"\n                      user={this.state.selectedUser}\n                    />\n                  )}\n                </Tab.Pane>\n\n                <Tab.Pane eventKey=\"userEditLeave\">\n                {this.state.selectedUser === null && (\n                  <Button variant=\"outline-warning\" className=\"confirmEditButton\" size=\"lg\">\n                    Select a Staff member from the Master List\n                  </Button>\n                )}\n\n                {this.state.selectedUser !== null &&\n                  this.context.user.role === \"admin\"\n                  && (\n                  <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" value='leave' onClick={this.updateUserSpecial.bind(this)}>Add Leave as Admin</Button>\n                )}\n                {this.state.selectedUser !== null &&\n                  this.state.selectedUser._id === this.context.user._id\n                  && (\n                  <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" value='leave' onClick={this.updateUserSpecial.bind(this)}>Add Leave</Button>\n                )}\n                {this.state.selectedUser !== null &&\n                  this.state.selectedUser._id === this.context.user._id && (\n                  <Button variant=\"outline-success\" className=\"confirmEditButton\" size=\"lg\">\n                    Your Profile\n                  </Button>\n                )}\n                {this.state.selectedUser !== null &&\n                  this.state.selectedUser._id !== this.context.user._id && (\n                  <Button variant=\"outline-danger\" className=\"confirmEditButton\" size=\"lg\">\n                    Not my profile\n                  </Button>\n                )}\n\n                {this.state.userUpdateField === 'leave' &&\n                this.state.selectedUser !== null\n                && (<UpdateUserLeaveForm\n                  authUserId={this.context.userId}\n                  canCancel\n                    canConfirm\n                    onCancel={this.modalCancelHandler}\n                    onConfirm={this.updateUserLeaveHandler}\n                    confirmText=\"Confirm\"\n                    user={this.state.selectedUser}\n                  />)}\n                </Tab.Pane>\n\n                <Tab.Pane eventKey=\"userEditAttachment\">\n                {this.state.selectedUser === null && (\n                  <Button variant=\"outline-warning\" className=\"confirmEditButton\" size=\"lg\">\n                    Select a Staff member from the Master List\n                  </Button>\n                )}\n\n                {this.state.selectedUser !== null &&\n                  this.context.user.role === \"admin\"\n                  && (\n                  <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" value='attachments' onClick={this.updateUserSpecial.bind(this)}>Add Attachment as Admin</Button>\n                )}\n                {this.state.selectedUser !== null &&\n                  this.state.selectedUser._id === this.context.user._id\n                  && (\n                  <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" value='attachments' onClick={this.updateUserSpecial.bind(this)}>Add Attachment</Button>\n                )}\n                {this.state.selectedUser !== null &&\n                  this.state.selectedUser._id === this.context.user._id && (\n                  <Button variant=\"outline-success\" className=\"confirmEditButton\" size=\"lg\">\n                    Your Profile\n                  </Button>\n                )}\n                {this.state.selectedUser !== null &&\n                  this.state.selectedUser._id !== this.context.user._id && (\n                  <Button variant=\"outline-danger\" className=\"confirmEditButton\" size=\"lg\">\n                    Not my profile\n                  </Button>\n                )}\n\n                {this.state.userUpdateField === 'attachments' &&\n                this.state.selectedUser !== null\n                && (<UpdateUserAttachmentForm\n                  authUserId={this.context.userId}\n                  canCancel\n                    canConfirm\n                    onCancel={this.modalCancelHandler}\n                    onConfirm={this.updateUserAttachmentHandler}\n                    confirmText=\"Confirm\"\n                    user={this.state.selectedUser}\n                  />)}\n                </Tab.Pane>\n\n                <Tab.Pane eventKey=\"MasterList\">\n                  <Container className=\"containerUserMasterList\">\n                  <Row className=\"searchListRow\">\n                  <Button variant=\"primary\" size=\"sm\" onClick={this.fetchUsersAsc}>\n                     Sort Asc\n                   </Button>\n                  <Button variant=\"info\" size=\"sm\" onClick={this.fetchUsersDesc}>\n                     Sort Desc\n                   </Button>\n                   {this.state.isLoading ? (\n                     <Spinner />\n                   ) : (\n                     <UserList\n                       users={this.state.users}\n                       authUserId={this.context.userId}\n                       onViewDetail={this.showDetailHandler}\n                     />\n                   )}\n                  </Row>\n                  </Container>\n                </Tab.Pane>\n\n                <Tab.Pane eventKey=\"SearchInput\">\n                  <Container className=\"containerSearchUserInput\">\n\n                  <Row className=\"searchUserRowAdd\">\n                  <Button variant=\"primary\" onClick={this.startSearchUserHandler}>Search</Button>\n                  </Row>\n\n                  <Row className=\"searchUserRowForm\">\n                  <Col md={10} className=\"searchUserColForm\">\n                  <Tabs defaultActiveKey=\"Field\" id=\"uncontrolled-tab-example\">\n                  <Tab eventKey=\"Search\" title=\"Search:\" disabled>\n                  </Tab>\n                  <Tab eventKey=\"Field\" title=\"Search by Field:\">\n                  {this.state.searching !== true && (\n                    <Button variant=\"outline-warning\" className=\"confirmEditButton\" size=\"lg\">\n                      Click the 'Search' Button start\n                    </Button>\n                  )}\n                  {this.state.searching === true && (\n                    <SearchUserForm\n                    authUserId={this.context.userId}\n                    canCancel\n                      canConfirm\n                      onCancel={this.modalCancelHandler}\n                      onConfirm={this.modalConfirmSearchHandler}\n                      confirmText=\"Search\"\n                      user={this.context.selectedUser}\n                    />)}\n                  </Tab>\n                  <Tab eventKey=\"Id\" title=\"Search by ID:\">\n                  {this.state.searching !== true && (\n                    <Button variant=\"outline-warning\" className=\"confirmEditButton\" size=\"lg\">\n                      Click the 'Search' Button start\n                    </Button>\n                  )}\n                  {this.state.searching === true && (\n                    <SearchUserIdForm\n                    authUserId={this.context.userId}\n                    canCancel\n                      canConfirm\n                      onCancel={this.modalCancelHandler}\n                      onConfirm={this.modalConfirmSearchIdHandler}\n                      confirmText=\"Search\"\n                      user={this.context.selectedUser}\n                    />\n                    )}\n                  </Tab>\n                  <Tab eventKey=\"Attendance\" title=\"Search by Attendance:\">\n                  {this.state.searching !== true && (\n                    <Button variant=\"outline-warning\" className=\"confirmEditButton\" size=\"lg\">\n                      Click the 'Search' Button start\n                    </Button>\n                  )}\n                  {this.state.searching === true && (\n                    <SearchUserAttendanceDateForm\n                    authUserId={this.context.userId}\n                    canCancel\n                      canConfirm\n                      onCancel={this.modalCancelHandler}\n                      onConfirm={this.modalConfirmSearchAttendanceDateHandler}\n                      confirmText=\"Search\"\n                      user={this.context.selectedUser}\n                    />\n                    )}\n                  </Tab>\n                  <Tab eventKey=\"Leave\" title=\"Search by Leave:\">\n                  {this.state.searching !== true && (\n                    <Button variant=\"outline-warning\" className=\"confirmEditButton\" size=\"lg\">\n                      Click the 'Search' Button start\n                    </Button>\n                  )}\n                  {this.state.searching === true && (\n                    <SearchUserLeaveDateRangeForm\n                    authUserId={this.context.userId}\n                    canCancel\n                      canConfirm\n                      onCancel={this.modalCancelHandler}\n                      onConfirm={this.modalConfirmSearchLeaveDateRangeHandler}\n                      confirmText=\"Search\"\n                      user={this.context.selectedUser}\n                    />\n                    )}\n                  </Tab>\n                  <Tab eventKey=\"Name\" title=\"Search by Name:\">\n                  {this.state.searching !== true && (\n                    <Button variant=\"outline-warning\" className=\"confirmEditButton\" size=\"lg\">\n                      Click the 'Search' Button start\n                    </Button>\n                  )}\n                  {this.state.searching === true && (\n                    <SearchUserNameForm\n                    authUserId={this.context.userId}\n                    canCancel\n                      canConfirm\n                      onCancel={this.modalCancelHandler}\n                      onConfirm={this.modalConfirmSearchNameHandler}\n                      confirmText=\"Search\"\n                      user={this.context.selectedUser}\n                    />\n                  )}\n                  </Tab>\n                  </Tabs>\n                  </Col>\n                  <Col md={10}>\n                  </Col>\n                  </Row>\n\n                  </Container>\n                </Tab.Pane>\n\n                <Tab.Pane eventKey=\"SearchResult\">\n                  <Container className=\"containerSearchUserResults\">\n                  <Row>\n                    <Card className=\"searchCard\">\n                      <Card.Body className=\"searchCardBody\">\n                        <Card.Title>Your Search</Card.Title>\n                        <Card.Text>\n                          Field: {this.state.userSearchField}\n                        </Card.Text>\n                        <Card.Text>\n                          Query: {this.state.userSearchQuery}\n                        </Card.Text>\n                      </Card.Body>\n                    </Card>\n                  </Row>\n                  <Row className=\"searchListRow\">\n\n                  {this.state.searchUsers !== [] && (\n                    <SearchUserList\n                      searchUsers={this.state.searchUsers}\n                      authUserId={this.context.userId}\n                      onViewDetail={this.showDetailHandler}\n                    />\n                  )}\n                  </Row>\n                  </Container>\n                </Tab.Pane>\n              </Tab.Content>\n            </Col>\n          </Row>\n        </Tab.Container>\n\n\n\n        </Container>\n\n    </Col>\n\n  </Row>\n\n</Accordion>\n</React.Fragment>\n    );\n  }\n}\n\nexport default UsersPage;\n"]},"metadata":{},"sourceType":"module"}