{"ast":null,"code":"var _jsxFileName = \"/Users/pedrojacob/Downloads/AMR/websites/office_records/ENT_EMR/frontend/src/pages/Appointments.js\";\nimport ReactDOM from 'react-dom';\nimport React, { Component } from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport Accordion from 'react-bootstrap/Accordion';\nimport SidebarPage from './Sidebar';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\nimport Card from 'react-bootstrap/Card'; // import Modal from '../components/Modal/Modal';\n// import Backdrop from '../components/Backdrop/Backdrop';\n\nimport AlertBox from '../components/AlertBox';\nimport PdfCreator from '../components/PdfCreator';\nimport AppointmentList from '../components/Appointments/AppointmentList/AppointmentList';\nimport AppointmentDetail from '../components/Appointments/AppointmentDetail';\nimport PatientDetail from '../components/Patients/PatientDetail';\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\nimport SearchAppointmentList from '../components/Appointments/AppointmentList/SearchAppointmentList';\nimport SearchAppointmentForm from '../components/Forms/SearchAppointmentForm';\nimport SearchAppointmentIdForm from '../components/Forms/SearchAppointmentIdForm';\nimport SearchAppointmentPatientForm from '../components/Forms/SearchAppointmentPatientForm';\nimport SearchAppointmentDateForm from '../components/Forms/SearchAppointmentDateForm';\nimport SearchAppointmentDateRangeForm from '../components/Forms/SearchAppointmentDateRangeForm';\nimport CreateAppointmentForm from '../components/Forms/CreateAppointmentForm';\nimport UpdateAppointmentForm from '../components/Forms/UpdateAppointmentForm';\nimport UpdateAppointmentFieldForm from '../components/Forms/UpdateAppointmentFieldForm';\nimport './Users.css';\n\nclass AppointmentsPage extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      creating: false,\n      updating: false,\n      deleting: false,\n      searching: false,\n      searchAppointments: [],\n      appointments: [],\n      isLoading: false,\n      selectedAppointment: null,\n      appointmentUpdateField: null,\n      appointmentSearchField: null,\n      appointmentSearchQuery: null,\n      canDelete: null,\n      userAlert: null,\n      createPdf: false,\n      pdfData: null\n    };\n    this.isActive = true;\n\n    this.startCreateAppointmentHandler = () => {\n      this.setState({\n        creating: true\n      });\n      console.log(\"CreateAppointmentForm...\", this.context.selectedPatient);\n    };\n\n    this.startUpdateAppointmentHandler = () => {\n      this.setState({\n        updating: true\n      });\n      console.log(\"UpdateAppointmentForm...\");\n    };\n\n    this.startSearchAppointmentHandler = () => {\n      this.setState({\n        searching: true\n      });\n      console.log(\"SearchAppointmentForm...\");\n    };\n\n    this.modalConfirmHandler = event => {\n      console.log(\"CreateAppointmentFormData:  \", event.target.formGridTitle.value);\n      this.setState({\n        creating: false\n      });\n      const userId = this.context.userId;\n      const selectedPatientId = this.context.selectedPatient._id;\n      console.log(`\n        userId: ${userId}\n        patientId: ${selectedPatientId}\n      `);\n\n      if (selectedPatientId === undefined) {\n        console.log(`\n          select a Patient before creating an Appointment!!\n          `);\n        this.setState({\n          userAlert: \"select a Patient before creating an Appointment!!...\"\n        });\n        return;\n      }\n\n      const title = event.target.formGridTitle.value;\n      const type = event.target.formGridType.value;\n      const date = event.target.formGridDate.value;\n      const time = event.target.formGridTime.value;\n      const seenTime = event.target.formGridSeenTime.value;\n      const checkinTime = event.target.formGridCheckinTime.value;\n      const location = event.target.formGridLocation.value;\n      const description = event.target.formGridDescription.value;\n      const inProgress = event.target.formGridInProgress.value;\n      const attended = event.target.formGridAttended.value;\n      const important = event.target.formGridImportant.value;\n\n      if (title.trim().length === 0 || type.trim().length === 0 || date.trim().length === 0 || time.trim().length === 0 || location.trim().length === 0 || description.trim().length === 0 || inProgress.trim().length === 0 || attended.trim().length === 0 || important.trim().length === 0) {\n        console.log(\"blank fields detected!!!...Please try again...\");\n        this.setState({\n          userAlert: \"blank fields detected!!!...Please try again...\"\n        });\n        return;\n      }\n\n      const appointment = {\n        title,\n        type,\n        date,\n        time,\n        seenTime,\n        checkinTime,\n        location,\n        description,\n        inProgress,\n        attended,\n        important\n      };\n      console.log(`\n        creating appointment...\n        title: ${title},\n        type: ${type},\n        date: ${date},\n        time: ${time},\n        seenTime: ${seenTime},\n        checkinTime: ${checkinTime},\n        location: ${location},\n        description: ${description},\n        inProgress: ${inProgress},\n        attended: ${attended},\n        important: ${important},\n      `);\n      this.setState({\n        userAlert: \"creating appointment...\"\n      });\n      const requestBody = {\n        query: `\n          mutation {createAppointment(userId:\\\"${userId}\\\",patientId:\\\"${selectedPatientId}\\\",appointmentInput:{title:\\\"${title}\\\",type:\\\"${type}\\\",date:\\\"${date}\\\",time:\\\"${time}\\\",seenTime:\\\"${seenTime}\\\",checkinTime:\\\"${checkinTime}\\\",location:\\\"${location}\\\",description:\\\"${description}\\\",inProgress:${inProgress},attended:${attended},important:${important},})\n          {_id,title,type,date,time,seenTime,checkinTime,location,description,patient{_id,name,appointments{_id,date,title}},inProgress,attended,important}}\n        `\n      };\n      const token = this.context.token; // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + this.context.token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data.createAppointment));\n        const responseAlert = JSON.stringify(resData.data).slice(2, 15);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.setState(prevState => {\n          const updatedAppointments = [...prevState.appointments];\n          updatedAppointments.push(resData.data.createAppointment);\n          return {\n            appointments: updatedAppointments\n          };\n        });\n        this.context.appointments = this.state.appointments; // this.fetchAppointments();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.modalCancelHandler = () => {\n      this.setState({\n        creating: false,\n        updating: false,\n        searching: false,\n        selectedAppointment: null\n      });\n    };\n\n    this.modalConfirmUpdateHandler = event => {\n      if (this.context.user.role !== 'admin') {\n        console.log(\"Not the Admin! No edit permission!!\");\n        this.setState({\n          userAlert: \"Not the Admin! No edit permission!!\"\n        });\n      }\n\n      const userId = this.context.userId;\n      const appointmentId = this.context.selectedAppointment._id;\n      const selectedPatientId = this.context.selectedPatientId;\n      console.log(`\n        userId: ${userId}\n        appointmentd: ${appointmentId},\n      `); // console.log(\"UpdateUserFormData:  \", event);\n\n      console.log(\"UpdateAppointmentFormData:  \", event.target.formGridTitle.value);\n      this.setState({\n        updating: false\n      });\n      let title = event.target.formGridTitle.value;\n      let type = event.target.formGridType.value;\n      let date = event.target.formGridDate.value;\n      let time = event.target.formGridTime.value;\n      let seenTime = event.target.formGridSeenTime.value;\n      let checkinTime = event.target.formGridCheckinTime.value;\n      let location = event.target.formGridLocation.value;\n      let description = event.target.formGridDescription.value;\n      let inProgress = event.target.formGridInProgress.value;\n      let attended = event.target.formGridAttended.value;\n      let important = event.target.formGridImportant.value;\n\n      if (title.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        title = this.context.selectedAppointment.title; // return;\n      }\n\n      if (type.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        type = this.context.selectedAppointment.type;\n      }\n\n      if (date.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        date = this.context.selectedAppointment.date;\n      }\n\n      if (time.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        time = this.context.selectedAppointment.time;\n      }\n\n      if (seenTime.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        seenTime = this.context.selectedAppointment.seenTime;\n      }\n\n      if (checkinTime.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        checkinTime = this.context.selectedAppointment.checkinTime;\n      }\n\n      if (location.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        location = this.context.selectedAppointment.location;\n      }\n\n      if (description.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        description = this.context.selectedAppointment.description;\n      }\n\n      if (inProgress.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        inProgress = this.context.selectedAppointment.inProgress;\n      }\n\n      if (attended.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        attended = this.context.selectedAppointment.attended;\n      }\n\n      if (important.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        important = this.context.selectedAppointment.important;\n      }\n\n      const appointment = {\n        title,\n        type,\n        date,\n        time,\n        seenTime,\n        checkinTime,\n        location,\n        description,\n        inProgress,\n        attended,\n        important\n      };\n      console.log(`\n        updating appointment...\n        title: ${title},\n        type: ${type},\n        date: ${date},\n        time: ${time},\n        seenTime: ${seenTime},\n        checkinTime: ${checkinTime},\n        location: ${location},\n        description: ${description},\n        inProgress: ${inProgress},\n        attended: ${attended},\n        important: ${important},\n      `);\n      this.setState({\n        userAlert: \"updating appointment...\"\n      });\n      const requestBody = {\n        query: `\n      mutation {updateAppointment(userId:\\\"${userId}\\\",appointmentId:\\\"${appointmentId}\\\",appointmentInput:{title:\\\"${title}\\\",type:\\\"${type}\\\",date:\\\"${date}\\\",time:\\\"${time}\\\",seenTime:\\\"${seenTime}\\\",checkinTime:\\\"${checkinTime}\\\",location:\\\"${location}\\\",description:\\\"${description}\\\",inProgress:${inProgress},attended:${attended},important:${important},})\n      {_id,title,type,date,time,seenTime,checkinTime,location,description,patient{_id,name,appointments{_id,date,title}},inProgress,attended,important,notes}}\n        `\n      };\n      const token = this.context.token; // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n        const updatedAppointmentId = resData.data.updateAppointment._id;\n        const updatedAppointment = this.state.appointments.find(e => e._id === updatedAppointmentId);\n        const updatedAppointmentPos = this.state.appointments.indexOf(updatedAppointment);\n        const slicedArray = this.state.appointments.splice(updatedAppointmentPos, 1);\n        console.log(\"updatedAppointment:  \", JSON.stringify(updatedAppointment), \"  updatedPatientPos:  \", updatedAppointmentPos, \"  slicedArray:  \", slicedArray);\n        this.state.appointments.push(resData.data.updateAppointment);\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert,\n          selectedAppointment: resData.data.updateAppointment\n        });\n        this.fetchAppointments();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updateAppointmentPatientHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedAppointmentId = this.context.selectedAppointment._id;\n      let selectedPatientId = this.context.selectedPatient._id;\n\n      if (this.context.user.role !== 'admin') {\n        console.log(\"No edit permission!!\");\n        this.setState({\n          userAlert: \"No edit permission!!\"\n        });\n        return;\n      }\n\n      if (selectedPatientId === undefined) {\n        console.log(`\n        select a Patient before creating an Appointment!!\n        `);\n        this.setState({\n          userAlert: \"select a Patient before creating an Appointment!!...\"\n        });\n        return;\n      }\n\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      console.log(`\n      updating appointment patient...\n      userId: ${userId},\n      appointmentId: ${selectedAppointmentId},\n      patientId: ${selectedPatientId},\n      `);\n      this.setState({\n        userAlert: \"updating appointment patient...\"\n      });\n      const requestBody = {\n        query: `\n        mutation {updateAppointmentPatient(userId:\\\"${userId}\\\",appointmentId:\\\"${selectedAppointmentId}\\\",patientId:\\\"${selectedPatientId}\\\")\n        {_id,title,type,date,time,seenTime,checkinTime,location,description,patient{_id,name,appointments{_id,date,title},consultant{reference{_id,name,role}}},inProgress,attended,important}}\n        `\n      }; // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n        const updatedAppointmentId = resData.data.updateAppointmentPatient._id;\n        const updatedAppointment = this.state.appointments.find(e => e._id === updatedAppointmentId);\n        const updatedAppointmentPos = this.state.appointments.indexOf(updatedAppointment);\n        const slicedArray = this.state.appointments.splice(updatedAppointmentPos, 1);\n        console.log(\"updatedAppointment:  \", JSON.stringify(updatedAppointment), \"  updatedPatientPos:  \", updatedAppointmentPos, \"  slicedArray:  \", slicedArray);\n        this.state.appointments.push(resData.data.updateAppointmentPatient);\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert,\n          selectedAppointment: resData.data.updateAppointmentPatient\n        });\n        this.fetchAppointments();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.modalConfirmUpdateFieldHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedAppointmentId = this.context.selectedAppointment._id;\n\n      if (this.context.user.role !== 'admin') {\n        console.log(\"Not the creator or Admin! No edit permission!!\");\n        selectedAppointmentId = null;\n      }\n\n      console.log(\"UpdateAppointmentFieldFormData:  \", event.target.formGridField.value);\n      this.setState({\n        updating: false\n      });\n      let field = null;\n      let query = event.target.formGridQuery.value;\n\n      if (event.target.formGridFieldSelect.value === \"select\") {\n        field = event.target.formGridField.value;\n      } else {\n        field = event.target.formGridFieldSelect.value;\n      }\n\n      const requestBody = {\n        query: `\n        mutation {updateAppointmentField(userId:\\\"${userId}\\\",appointmentId:\\\"${selectedAppointmentId}\\\",field:\\\"${field}\\\",query:\\\"${query}\\\")\n        {_id,title,type,date,time,seenTime,checkinTime,location,description,patient{_id,name,appointments{_id,date,title}},inProgress,attended,important,notes}}\n        `\n      }; // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data.updateAppointmentField));\n        const updatedAppointmentId = resData.data.updateAppointmentField._id;\n        const updatedAppointment = this.state.appointments.find(e => e._id === updatedAppointmentId);\n        const updatedAppointmentPos = this.state.appointments.indexOf(updatedAppointment);\n        const slicedArray = this.state.appointments.splice(updatedAppointmentPos, 1);\n        console.log(\"updatedAppointment:  \", JSON.stringify(updatedAppointment), \"  updatedAppointmentPos:  \", updatedAppointmentPos, \"  slicedArray:  \", slicedArray);\n        this.state.appointments.push(resData.data.updateAppointmentField);\n        this.context.appointments = this.state.appointments;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert,\n          selectedAppointment: resData.data.updateAppointmentField\n        });\n        this.fetchAppointments();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.modalConfirmSearchHandler = event => {\n      console.log(\"SearchAppointmentForm:  \");\n      let userId = this.context.userId;\n      console.log(\"SearchAppointmentFormData:  \", event.target.formBasicField.value);\n      this.setState({\n        searching: false\n      });\n      let field = null;\n      let query = event.target.formBasicQuery.value;\n\n      if (event.target.formBasicFieldSelect.value === \"select\") {\n        field = event.target.formBasicField.value;\n      } else {\n        field = event.target.formBasicFieldSelect.value;\n      }\n\n      if (field.trim().length === 0 || query.trim().length === 0) {\n        console.log(\"blank fields detected!!!...Please try again...\");\n        this.setState({\n          userAlert: \"blank fields detected!!!...Please try again...\"\n        });\n        return;\n      }\n\n      const search = {\n        field,\n        query\n      };\n      console.log(\"Searching for Appointment:  \", JSON.stringify(search));\n      const requestBody = {\n        query: `\n          query {getAppointmentField(userId:\"${userId}\", field:\"${field}\", query:\"${query}\")\n          {_id,title,type,date,time,seenTime,checkinTime,location,description,patient{_id,name,appointments{_id,date,title},consultant{reference{_id,name,role}}},inProgress,attended,important}}\n        `\n      };\n      const token = this.context.token; // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n        const responseAlert = JSON.stringify(resData.data).slice(2, 15);\n        this.setState({\n          userAlert: responseAlert\n        });\n        const searchAppointments = resData.data.getAppointmentField;\n        this.setState({\n          searchAppointments: searchAppointments\n        });\n        console.log(\"state.searchAppointments:  \", this.state.searchAppointments); // this.fetchAppointments();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.modalConfirmSearchIdHandler = event => {\n      console.log(`\n      SearchAppointmentIdFormData\n      `);\n      let userId = this.context.userId;\n      this.setState({\n        searching: false\n      });\n      let selectedAppointmentId = event.target.formBasicId.value;\n      const requestBody = {\n        query: `\n          query {getAppointmentId(userId:\"${userId}\", appointmentId:\"${selectedAppointmentId}\")\n          {_id,title,type,date,time,patient{_id,name},location,description,inProgress,important,attended}}\n        `\n      };\n      const token = this.context.token; // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n        const responseAlert = JSON.stringify(resData.data).slice(2, 15);\n        this.setState({\n          userAlert: responseAlert\n        });\n        const searchAppointments = resData.data.getAppointmentId;\n        this.setState({\n          searchAppointments: [searchAppointments]\n        });\n        console.log(\"state.searchAppointments:  \", this.state.searchAppointments); // this.fetchUsers();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.modalConfirmSearchPatientHandler = event => {\n      console.log(`\n      SearchAppointmentPatientFormData\n      `);\n      let userId = this.context.userId;\n      this.setState({\n        searching: false\n      });\n      let selectedPatientId = event.target.formBasicPatientId.value;\n      const requestBody = {\n        query: `\n          query {getAppointmentPatient(userId:\"${userId}\", patientId:\"${selectedPatientId}\")\n          {_id,title,type,date,time,patient{_id,name},location,description,inProgress,important,attended}}\n        `\n      };\n      const token = this.context.token; // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n        const responseAlert = JSON.stringify(resData.data).slice(2, 15); // const responseAlert = JSON.stringify(resData.errors).slice(2,15);\n\n        this.setState({\n          userAlert: responseAlert\n        });\n        const searchAppointments = resData.data.getAppointmentPatient;\n        this.setState({\n          searchAppointments: searchAppointments\n        }); // this.state.searchApointments.push(searchAppointments)\n\n        console.log(\"state.searchApointments:  \", this.state.searchApointments); // this.fetchUsers();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.modalConfirmSearchDateHandler = event => {\n      console.log(`\n      SearchAppointmentDateFormData\n      `);\n      let userId = this.context.userId;\n      this.setState({\n        searching: false\n      });\n      let appointmentDate = event.target.formBasicDate.value;\n      const requestBody = {\n        query: `\n          query {getAppointmentDate(userId:\"${userId}\",date:\"${appointmentDate}\")\n          {_id,title,type,date,time,patient{_id,name},location,description,inProgress,important,attended}}\n        `\n      };\n      const token = this.context.token; // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n        const responseAlert = JSON.stringify(resData.data).slice(2, 15);\n        this.setState({\n          userAlert: responseAlert\n        });\n        const searchAppointments = resData.data.getAppointmentDate;\n        this.setState({\n          searchAppointments: searchAppointments\n        });\n        console.log(\"state.searchAppointments:  \", this.state.searchAppointments); // this.fetchUsers();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.modalConfirmSearchDateRangeHandler = event => {\n      console.log(`\n      SearchAppointmentDateRangeFormData\n      `);\n      let userId = this.context.userId;\n      this.setState({\n        searching: false\n      });\n      let appointmentStartDate = event.target.formBasicStartDate.value;\n      let appointmentEndDate = event.target.formBasicEndDate.value;\n      const requestBody = {\n        query: `\n          query {getAppointmentDateRange(userId:\"${userId}\",startDate:\"${appointmentStartDate}\",endDate:\"${appointmentEndDate}\")\n          {_id,title,type,date,time,patient{_id,name},location,description,inProgress,important,attended}}\n        `\n      };\n      const token = this.context.token; // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n        const responseAlert = JSON.stringify(resData.data).slice(2, 15);\n        this.setState({\n          userAlert: responseAlert\n        });\n        const searchApointments = resData.data.getApointmentId;\n        this.setState({\n          searchApointments: searchApointments\n        });\n        console.log(\"state.searchApointments:  \", this.state.searchApointments); // this.fetchUsers();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.modalCancelHandler = () => {\n      this.setState({\n        creating: false,\n        updating: false,\n        searching: false,\n        selectedAppointment: null\n      });\n    };\n\n    this.fetchAppointmentsAsc = () => {\n      console.log(\"'fetch appointments function' context object... \" + JSON.stringify(this.context));\n      const userId = this.context.userId; // this.setState({ isLoading: true });\n\n      const requestBody = {\n        query: `\n            query {appointmentsDateAsc(userId:\"${userId}\")\n            {_id,title,type,date,time,seenTime,checkinTime,location,description,patient{_id,name,consultant{reference{_id,name,role}}},inProgress,attended,important,notes}}\n        `\n      }; // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + this.context.token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const appointments = resData.data.appointmentsDateAsc;\n        console.log(appointments);\n        const responseAlert = JSON.stringify(resData.data).slice(2, 15);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.context.appointments = appointments;\n        this.setState({\n          appointments: appointments\n        }); // if (this.isActive) {\n        //   this.setState({ appointments: appointments, isLoading: false });\n        // }\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        }); // if (this.isActive) {\n        //   this.setState({ isLoading: false });\n        // }\n      });\n    };\n\n    this.fetchAppointmentsDesc = () => {\n      console.log(\"'fetch appointments function' context object... \" + JSON.stringify(this.context));\n      const userId = this.context.userId; // this.setState({ isLoading: true });\n\n      const requestBody = {\n        query: `\n            query {appointmentsDateDesc(userId:\"${userId}\")\n            {_id,title,type,date,time,seenTime,checkinTime,location,description,patient{_id,name,consultant{reference{_id,name,role}}},inProgress,attended,important,notes}}\n        `\n      }; // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + this.context.token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const appointments = resData.data.appointmentsDateDesc;\n        console.log(appointments);\n        const responseAlert = JSON.stringify(resData.data).slice(2, 15);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.context.appointments = appointments;\n        this.setState({\n          appointments: appointments\n        }); // if (this.isActive) {\n        //   this.setState({ appointments: appointments, isLoading: false });\n        // }\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        }); // if (this.isActive) {\n        //   this.setState({ isLoading: false });\n        // }\n      });\n    };\n\n    this.modalDeleteHandler = () => {\n      console.log(\"deleting appointment...selectedAppointment:  \", this.context.selectedAppointment);\n      const userId = this.context.userId;\n      const selectedAppointmentId = this.context.selectedAppointment._id;\n\n      if (this.context.user.role !== 'admin') {\n        console.log(\"Not the Admin! No edit permission!!\");\n        this.setState({\n          userAlert: \"Not the Admin! No edit permission!!\"\n        });\n      }\n\n      this.setState({\n        deleting: true\n      });\n      const requestBody = {\n        query: `\n          mutation {deleteAppointment(userId:\"${userId}\",appointmentId:\"${selectedAppointmentId}\")\n          {_id,title,type,date,time,seenTime,checkinTime,location,description,patient{_id,name,appointments{_id,date,title}},inProgress,attended,important,notes}}\n        `\n      }; // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + this.context.token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"resData:  \", resData); // console.log(\"resData.data.deleteAppointment:  \", resData.data.deleteAppointment);\n\n        let deletedAppointment = resData.data.deleteAppointment;\n        console.log(deletedAppointment);\n        const responseAlert = JSON.stringify(resData.data).slice(2, 15);\n        this.setState({\n          userAlert: responseAlert\n        });\n        let deletedAppointmentId = deletedAppointment._id;\n        deletedAppointment = this.state.appointments.find(e => e._id === deletedAppointmentId);\n        const deletedAppointmentPos = this.state.appointments.indexOf(deletedAppointment);\n        const slicedArray = this.state.appointments.splice(deletedAppointmentPos, 1);\n        console.log(\"deletedAppointment:  \", JSON.stringify(deletedAppointment), \"  deletedUserPos:  \", deletedAppointmentPos, \"  slicedArray:  \", slicedArray);\n        this.setState({\n          deleting: false\n        });\n        this.fetchAppointments();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n\n        if (this.isActive) {\n          this.setState({\n            deleting: false\n          });\n        }\n      });\n    };\n\n    this.showDetailHandler = appointmentId => {\n      this.setState(prevState => {\n        const selectedAppointment = prevState.appointments.find(e => e._id === appointmentId);\n        this.setState({\n          selectedAppointment: selectedAppointment\n        });\n        this.context.selectedAppointment = selectedAppointment;\n        console.log(\"selectedAppointment:  \", selectedAppointment);\n        return {\n          selecteAppointment: selectedAppointment\n        };\n      });\n    };\n\n    this.createPdf = appointment => {\n      console.log(`\n        creating pdf...\n        user: ${JSON.stringify(appointment)}\n      `);\n      const pdfData = {\n        title: appointment.title,\n        body: appointment.date\n      };\n      this.setState({\n        createPdf: true,\n        pdfData: pdfData\n      });\n    };\n\n    this.closePdfCreator = () => {\n      console.log(`\n      closing pdf creator...\n      `);\n      this.setState({\n        createPdf: false,\n        pdfData: null\n      });\n    };\n  }\n\n  // constructor(props) {\n  //   super(props);\n  // }\n  componentDidMount() {\n    this.fetchAppointments();\n    this.fetchAppointmentToday();\n    this.fetchAppointmentInProgress();\n\n    if (this.context.user.name === 'admin579') {\n      this.setState({\n        canDelete: true\n      });\n    }\n  }\n\n  fetchAppointments() {\n    console.log(\"'fetch appointments function' context object... \" + JSON.stringify(this.context));\n    const userId = this.context.userId;\n    this.setState({\n      isLoading: true\n    });\n    const requestBody = {\n      query: `\n            query {appointments(userId:\"${userId}\")\n            {_id,title,type,date,time,seenTime,checkinTime,location,description,patient{_id,name,consultant{reference{_id,name,role}}},inProgress,attended,important,notes}}\n        `\n    }; // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    }).then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n\n      return res.json();\n    }).then(resData => {\n      const appointments = resData.data.appointments;\n      console.log(appointments);\n      const responseAlert = JSON.stringify(resData.data).slice(2, 15);\n      this.setState({\n        userAlert: responseAlert\n      });\n      this.context.appointments = this.state.appointments;\n\n      if (this.isActive) {\n        this.setState({\n          appointments: appointments,\n          isLoading: false\n        });\n      }\n    }).catch(err => {\n      console.log(err);\n      this.setState({\n        userAlert: err\n      });\n\n      if (this.isActive) {\n        this.setState({\n          isLoading: false\n        });\n      }\n    });\n  }\n\n  updateAppointmentSpecial(event) {\n    console.log(\"special field to update:  \", event.target.value);\n    const field = event.target.value;\n    this.setState({\n      appointmentUpdateField: field\n    });\n  }\n\n  fetchAppointmentToday() {\n    console.log(\"fetching todays appts function:  \");\n    const token = this.context.token;\n    const userId = this.context.userId;\n    const requestBody = {\n      query: `\n          query {getAppointmentToday(userId:\"${userId}\")\n          {_id,title,type,date,time,patient{_id,name},location,description,inProgress,important,attended}}\n        `\n    }; // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    }).then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n\n      return res.json();\n    }).then(resData => {\n      this.context.appointmentsToday = resData.data.getAppointmentToday;\n      console.log(\"context today's appts:  \", JSON.stringify(this.context.appointmentsToday));\n      const responseAlert = JSON.stringify(resData.data).slice(2, 15);\n      this.setState({\n        userAlert: responseAlert\n      });\n    }).catch(err => {\n      console.log(err);\n      this.setState({\n        userAlert: err\n      });\n    });\n  }\n\n  fetchAppointmentInProgress() {\n    console.log(\"fetching inProgress appts function:  \");\n    const token = this.context.token;\n    const userId = this.context.userId;\n    const requestBody = {\n      query: `\n          query {getAppointmentField(userId:\\\"${userId}\\\",field:\\\"inProgress\\\",query:\\\"true\\\"){_id,title,type,date,time,patient{_id,name},location,description,inProgress,important,attended}}\n        `\n    }; // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    }).then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n\n      return res.json();\n    }).then(resData => {\n      this.context.appointmentsInProgress = resData.data.getAppointmentField;\n      console.log(\"context in progress appts:  \", JSON.stringify(this.context.appointmentsInProgress));\n      const responseAlert = JSON.stringify(resData.data).slice(2, 15);\n      this.setState({\n        userAlert: responseAlert\n      });\n    }).catch(err => {\n      console.log(err);\n      this.setState({\n        userAlert: err\n      });\n    });\n  }\n\n  componentWillUnmount() {\n    this.isActive = false;\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1097\n      },\n      __self: this\n    }, this.state.createPdf === true && React.createElement(PdfCreator, {\n      pdfData: this.state.pdfData,\n      onClosePdfCreator: this.closePdfCreator,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1100\n      },\n      __self: this\n    }), React.createElement(Accordion, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1106\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1108\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 3,\n      className: \"MasterCol1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1110\n      },\n      __self: this\n    }, React.createElement(AlertBox, {\n      authUserId: this.context.userId,\n      alert: this.state.userAlert,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1112\n      },\n      __self: this\n    }), React.createElement(SidebarPage, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1116\n      },\n      __self: this\n    })), React.createElement(Col, {\n      md: 9,\n      className: \"MasterCol2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1120\n      },\n      __self: this\n    }, React.createElement(Container, {\n      className: \"containerCombinedDetail\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1122\n      },\n      __self: this\n    }, React.createElement(Tabs, {\n      defaultActiveKey: \"appointmentDetail\",\n      id: \"uncontrolled-tab-example\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1123\n      },\n      __self: this\n    }, React.createElement(Tab, {\n      eventKey: \"appointmentDetail\",\n      title: \"Selected Appointment Data\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1124\n      },\n      __self: this\n    }, this.state.selectedAppointment === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1126\n      },\n      __self: this\n    }, \"Select an Appointment from the Master List\"), this.state.isLoading === false && this.state.selectedAppointment !== null && React.createElement(AppointmentDetail, {\n      authUserId: this.context.userId,\n      appointment: this.state.selectedAppointment,\n      onEdit: this.startUpdateAppointmentHandler,\n      canDelete: this.state.canDelete,\n      onDelete: this.modalDeleteHandler,\n      onCreatePdf: this.createPdf,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1135\n      },\n      __self: this\n    })), React.createElement(Tab, {\n      eventKey: \"appointmentCreate\",\n      title: \"Create New\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1146\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"outline-primary\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.startCreateAppointmentHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1147\n      },\n      __self: this\n    }, \"Create New\"), this.state.creating && this.context.selectedPatient._id !== null && React.createElement(CreateAppointmentForm, {\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmHandler,\n      onSubmit: this.modalConfirmHandler,\n      confirmText: \"Confirm\",\n      selectedPatient: this.context.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1152\n      },\n      __self: this\n    })), React.createElement(Tab, {\n      eventKey: \"appointmentEditBasic\",\n      title: \"Edit Basic Data\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1164\n      },\n      __self: this\n    }, this.state.selectedAppointment === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1166\n      },\n      __self: this\n    }, \"Select an Appointment from the Master List\"), this.state.selectedAppointment !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.startUpdateAppointmentHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1171\n      },\n      __self: this\n    }, \"Edit Basic Data\"), this.state.updating && this.state.selectedAppointment !== null && React.createElement(UpdateAppointmentForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmUpdateHandler,\n      confirmText: \"Confirm\",\n      appointment: this.state.selectedAppointment,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1176\n      },\n      __self: this\n    })), React.createElement(Tab, {\n      eventKey: \"appointmentEditField\",\n      title: \"Edit a Single Field\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1188\n      },\n      __self: this\n    }, this.state.selectedAppointment === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1190\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedAppointment !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.startUpdateAppointmentHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1195\n      },\n      __self: this\n    }, \"Edit a Single Field\"), this.state.updating && this.state.selectedAppointment !== null && React.createElement(UpdateAppointmentFieldForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmUpdateFieldHandler,\n      confirmText: \"Confirm\",\n      appointment: this.state.selectedAppointment,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1200\n      },\n      __self: this\n    })), React.createElement(Tab, {\n      eventKey: \"appointmentEditPatient\",\n      title: \"Change Patient\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1212\n      },\n      __self: this\n    }, this.state.selectedAppointment === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1214\n      },\n      __self: this\n    }, \"Select an Appointment from the Master List\"), this.state.selectedAppointment !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      value: \"patient\",\n      onClick: this.updateAppointmentSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1219\n      },\n      __self: this\n    }, \"Change Patient:\"), this.state.updating && this.state.selectedAppointment !== null(React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1223\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 8,\n      className: \"updateUserColAdd\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1224\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1225\n      },\n      __self: this\n    }, \"Add Patient: \", this.context.selectedPatient.name), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1226\n      },\n      __self: this\n    }, \" To Appointment: \", this.state.selectedAppointment.title, \" ??\"), React.createElement(Button, {\n      variant: \"success\",\n      onClick: this.updateAppointmentPatientHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1227\n      },\n      __self: this\n    }, \"Yes\"))))), React.createElement(Tab, {\n      eventKey: \"MasterList\",\n      title: \"MASTER LIST\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1235\n      },\n      __self: this\n    }, React.createElement(Container, {\n      className: \"containerUserMasterList\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1236\n      },\n      __self: this\n    }, React.createElement(Row, {\n      className: \"searchListRow\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1237\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"primary\",\n      size: \"sm\",\n      onClick: this.fetchAppointmentsAsc,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1238\n      },\n      __self: this\n    }, \"Sort Asc\"), React.createElement(Button, {\n      variant: \"info\",\n      size: \"sm\",\n      onClick: this.fetchAppointmentsDesc,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1241\n      },\n      __self: this\n    }, \"Sort Desc\"), this.state.isLoading ? React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1245\n      },\n      __self: this\n    }) : React.createElement(AppointmentList, {\n      appointments: this.state.appointments,\n      authUserId: this.context.userId,\n      onViewDetail: this.showDetailHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1248\n      },\n      __self: this\n    })))), React.createElement(Tab, {\n      eventKey: \"SearchInput\",\n      title: \"Search\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1258\n      },\n      __self: this\n    }, React.createElement(Container, {\n      className: \"containerSearchUserInput\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1259\n      },\n      __self: this\n    }, React.createElement(Row, {\n      className: \"searchUserRowAdd\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1260\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"primary\",\n      onClick: this.startSearchAppointmentHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1261\n      },\n      __self: this\n    }, \"Search\")), React.createElement(Row, {\n      className: \"searchUserRowForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1264\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 10,\n      className: \"searchUserColForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1265\n      },\n      __self: this\n    }, React.createElement(Tabs, {\n      defaultActiveKey: \"Field\",\n      id: \"uncontrolled-tab-example\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1266\n      },\n      __self: this\n    }, React.createElement(Tab, {\n      eventKey: \"Search\",\n      title: \"Search:\",\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1267\n      },\n      __self: this\n    }), React.createElement(Tab, {\n      eventKey: \"Field\",\n      title: \"Search by Field:\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1269\n      },\n      __self: this\n    }, this.state.searching !== true && React.createElement(Button, {\n      variant: \"outline-warning\",\n      className: \"confirmEditButton\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1271\n      },\n      __self: this\n    }, \"Click the 'Search' Button start\"), this.state.searching === true && React.createElement(SearchAppointmentForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmSearchHandler,\n      confirmText: \"Search\",\n      appointment: this.context.selectedAppointment,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1276\n      },\n      __self: this\n    })), React.createElement(Tab, {\n      eventKey: \"Id\",\n      title: \"Search by Id:\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1287\n      },\n      __self: this\n    }, this.state.searching !== true && React.createElement(Button, {\n      variant: \"outline-warning\",\n      className: \"confirmEditButton\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1289\n      },\n      __self: this\n    }, \"Click the 'Search' Button start\"), this.state.searching === true && React.createElement(SearchAppointmentIdForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmSearchIdHandler,\n      confirmText: \"Search\",\n      appointment: this.context.selectedAppointment,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1294\n      },\n      __self: this\n    })), React.createElement(Tab, {\n      eventKey: \"Patient\",\n      title: \"Search by Patient:\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1305\n      },\n      __self: this\n    }, this.state.searching !== true && React.createElement(Button, {\n      variant: \"outline-warning\",\n      className: \"confirmEditButton\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1307\n      },\n      __self: this\n    }, \"Click the 'Search' Button start\"), this.state.searching === true && React.createElement(SearchAppointmentPatientForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmSearchPatientHandler,\n      confirmText: \"Search\",\n      appointment: this.context.selectedAppointment,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1312\n      },\n      __self: this\n    })), React.createElement(Tab, {\n      eventKey: \"Date\",\n      title: \"Search by Date:\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1323\n      },\n      __self: this\n    }, this.state.searching !== true && React.createElement(Button, {\n      variant: \"outline-warning\",\n      className: \"confirmEditButton\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1325\n      },\n      __self: this\n    }, \"Click the 'Search' Button start\"), this.state.searching === true && React.createElement(SearchAppointmentDateForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmSearchDateHandler,\n      confirmText: \"Search\",\n      appointment: this.context.selectedAppointment,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1330\n      },\n      __self: this\n    })), React.createElement(Tab, {\n      eventKey: \"Date Range\",\n      title: \"Search by Date Range:\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1341\n      },\n      __self: this\n    }, this.state.searching !== true && React.createElement(Button, {\n      variant: \"outline-warning\",\n      className: \"confirmEditButton\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1343\n      },\n      __self: this\n    }, \"Click the 'Search' Button start\"), this.state.searching === true && React.createElement(SearchAppointmentDateRangeForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmSearchDateRangeHandler,\n      confirmText: \"Search\",\n      appointment: this.context.selectedAppointment,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1348\n      },\n      __self: this\n    })))), React.createElement(Col, {\n      md: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1361\n      },\n      __self: this\n    })))), React.createElement(Tab, {\n      eventKey: \"SearchResult\",\n      title: \"Search Results\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1367\n      },\n      __self: this\n    }, React.createElement(Container, {\n      className: \"containerSearchUserResults\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1368\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1369\n      },\n      __self: this\n    }, React.createElement(Card, {\n      className: \"searchCard\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1370\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      className: \"searchCardBody\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1371\n      },\n      __self: this\n    }, React.createElement(Card.Title, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1372\n      },\n      __self: this\n    }, \"Your Search\"), React.createElement(Card.Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1373\n      },\n      __self: this\n    }, \"Field: \", this.state.appointmentSearchField), React.createElement(Card.Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1376\n      },\n      __self: this\n    }, \"Query: \", this.state.appointmentSearchQuery)))), React.createElement(Row, {\n      className: \"searchListRow\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1382\n      },\n      __self: this\n    }, this.state.searchAppointments !== [] && React.createElement(SearchAppointmentList, {\n      searchAppointments: this.state.searchAppointments,\n      authUserId: this.context.userId,\n      onCancel: this.modalCancelHandler,\n      onViewDetail: this.showDetailHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1385\n      },\n      __self: this\n    }))))))))));\n  }\n\n}\n\nAppointmentsPage.contextType = AuthContext;\nexport default AppointmentsPage;","map":{"version":3,"sources":["/Users/pedrojacob/Downloads/AMR/websites/office_records/ENT_EMR/frontend/src/pages/Appointments.js"],"names":["ReactDOM","React","Component","Container","Row","Col","Button","Accordion","SidebarPage","Tabs","Tab","Card","AlertBox","PdfCreator","AppointmentList","AppointmentDetail","PatientDetail","Spinner","AuthContext","SearchAppointmentList","SearchAppointmentForm","SearchAppointmentIdForm","SearchAppointmentPatientForm","SearchAppointmentDateForm","SearchAppointmentDateRangeForm","CreateAppointmentForm","UpdateAppointmentForm","UpdateAppointmentFieldForm","AppointmentsPage","state","creating","updating","deleting","searching","searchAppointments","appointments","isLoading","selectedAppointment","appointmentUpdateField","appointmentSearchField","appointmentSearchQuery","canDelete","userAlert","createPdf","pdfData","isActive","startCreateAppointmentHandler","setState","console","log","context","selectedPatient","startUpdateAppointmentHandler","startSearchAppointmentHandler","modalConfirmHandler","event","target","formGridTitle","value","userId","selectedPatientId","_id","undefined","title","type","formGridType","date","formGridDate","time","formGridTime","seenTime","formGridSeenTime","checkinTime","formGridCheckinTime","location","formGridLocation","description","formGridDescription","inProgress","formGridInProgress","attended","formGridAttended","important","formGridImportant","trim","length","appointment","requestBody","query","token","fetch","method","body","JSON","stringify","headers","Authorization","then","res","status","Error","json","resData","data","createAppointment","responseAlert","slice","prevState","updatedAppointments","push","catch","err","modalCancelHandler","modalConfirmUpdateHandler","user","role","appointmentId","updatedAppointmentId","updateAppointment","updatedAppointment","find","e","updatedAppointmentPos","indexOf","slicedArray","splice","fetchAppointments","updateAppointmentPatientHandler","selectedAppointmentId","patientUpdateField","updateAppointmentPatient","modalConfirmUpdateFieldHandler","formGridField","field","formGridQuery","formGridFieldSelect","updateAppointmentField","modalConfirmSearchHandler","formBasicField","formBasicQuery","formBasicFieldSelect","search","getAppointmentField","modalConfirmSearchIdHandler","formBasicId","getAppointmentId","modalConfirmSearchPatientHandler","formBasicPatientId","getAppointmentPatient","searchApointments","modalConfirmSearchDateHandler","appointmentDate","formBasicDate","getAppointmentDate","modalConfirmSearchDateRangeHandler","appointmentStartDate","formBasicStartDate","appointmentEndDate","formBasicEndDate","getApointmentId","fetchAppointmentsAsc","appointmentsDateAsc","fetchAppointmentsDesc","appointmentsDateDesc","modalDeleteHandler","deletedAppointment","deleteAppointment","deletedAppointmentId","deletedAppointmentPos","showDetailHandler","selecteAppointment","closePdfCreator","componentDidMount","fetchAppointmentToday","fetchAppointmentInProgress","name","updateAppointmentSpecial","appointmentsToday","getAppointmentToday","appointmentsInProgress","componentWillUnmount","render","bind","contextType"],"mappings":"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","sourcesContent":["import ReactDOM from 'react-dom';\nimport React, { Component } from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Button from 'react-bootstrap/Button';\nimport Accordion from 'react-bootstrap/Accordion';\nimport SidebarPage from './Sidebar';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\nimport Card from 'react-bootstrap/Card';\n\n// import Modal from '../components/Modal/Modal';\n// import Backdrop from '../components/Backdrop/Backdrop';\nimport AlertBox from '../components/AlertBox';\nimport PdfCreator from '../components/PdfCreator';\n\nimport AppointmentList from '../components/Appointments/AppointmentList/AppointmentList';\nimport AppointmentDetail from '../components/Appointments/AppointmentDetail';\nimport PatientDetail from '../components/Patients/PatientDetail';\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\nimport SearchAppointmentList from '../components/Appointments/AppointmentList/SearchAppointmentList';\nimport SearchAppointmentForm from '../components/Forms/SearchAppointmentForm';\nimport SearchAppointmentIdForm from '../components/Forms/SearchAppointmentIdForm';\nimport SearchAppointmentPatientForm from '../components/Forms/SearchAppointmentPatientForm';\nimport SearchAppointmentDateForm from '../components/Forms/SearchAppointmentDateForm';\nimport SearchAppointmentDateRangeForm from '../components/Forms/SearchAppointmentDateRangeForm';\n\nimport CreateAppointmentForm from '../components/Forms/CreateAppointmentForm';\nimport UpdateAppointmentForm from '../components/Forms/UpdateAppointmentForm';\nimport UpdateAppointmentFieldForm from '../components/Forms/UpdateAppointmentFieldForm';\nimport './Users.css';\n\nclass AppointmentsPage extends Component {\n  state = {\n    creating: false,\n    updating: false,\n    deleting: false,\n    searching: false,\n    searchAppointments: [],\n    appointments: [],\n    isLoading: false,\n    selectedAppointment: null,\n    appointmentUpdateField: null,\n    appointmentSearchField: null,\n    appointmentSearchQuery: null,\n    canDelete: null,\n    userAlert: null,\n    createPdf: false,\n    pdfData: null,\n  };\n  isActive = true;\n\n  static contextType = AuthContext;\n\n  // constructor(props) {\n  //   super(props);\n  // }\n\n  componentDidMount() {\n    this.fetchAppointments();\n    this.fetchAppointmentToday();\n    this.fetchAppointmentInProgress();\n    if (this.context.user.name === 'admin579'){\n      this.setState({canDelete: true})\n    }\n  }\n\n\n  startCreateAppointmentHandler = () => {\n    this.setState({ creating: true });\n    console.log(\"CreateAppointmentForm...\", this.context.selectedPatient);\n  };\n  startUpdateAppointmentHandler = () => {\n    this.setState({ updating: true });\n    console.log(\"UpdateAppointmentForm...\");\n  };\n  startSearchAppointmentHandler = () => {\n    this.setState({ searching: true });\n    console.log(\"SearchAppointmentForm...\");\n  };\n\n  modalConfirmHandler = (event) => {\n\n    console.log(\"CreateAppointmentFormData:  \", event.target.formGridTitle.value);\n\n    this.setState({ creating: false });\n    const userId = this.context.userId;\n    const selectedPatientId = this.context.selectedPatient._id;\n    console.log(`\n        userId: ${userId}\n        patientId: ${selectedPatientId}\n      `);\n\n      if (selectedPatientId === undefined) {\n        console.log(`\n          select a Patient before creating an Appointment!!\n          `);\n          this.setState({userAlert: \"select a Patient before creating an Appointment!!...\"});\n          return\n      }\n    const title = event.target.formGridTitle.value;\n    const type = event.target.formGridType.value;\n    const date = event.target.formGridDate.value;\n    const time = event.target.formGridTime.value;\n    const seenTime = event.target.formGridSeenTime.value;\n    const checkinTime = event.target.formGridCheckinTime.value;\n    const location = event.target.formGridLocation.value;\n    const description = event.target.formGridDescription.value;\n    const inProgress = event.target.formGridInProgress.value;\n    const attended = event.target.formGridAttended.value;\n    const important = event.target.formGridImportant.value;\n\n    if (\n      title.trim().length === 0 ||\n      type.trim().length === 0 ||\n      date.trim().length === 0 ||\n      time.trim().length === 0 ||\n      location.trim().length === 0 ||\n      description.trim().length === 0 ||\n      inProgress.trim().length === 0 ||\n      attended.trim().length === 0 ||\n      important.trim().length === 0\n    ) {\n      console.log(\"blank fields detected!!!...Please try again...\");\n      this.setState({userAlert: \"blank fields detected!!!...Please try again...\"});\n      return\n    }\n\n    const appointment = { title, type, date, time, seenTime, checkinTime, location, description, inProgress, attended, important };\n    console.log(`\n        creating appointment...\n        title: ${title},\n        type: ${type},\n        date: ${date},\n        time: ${time},\n        seenTime: ${seenTime},\n        checkinTime: ${checkinTime},\n        location: ${location},\n        description: ${description},\n        inProgress: ${inProgress},\n        attended: ${attended},\n        important: ${important},\n      `);\n      this.setState({userAlert: \"creating appointment...\"});\n\n    const requestBody = {\n      query: `\n          mutation {createAppointment(userId:\\\"${userId}\\\",patientId:\\\"${selectedPatientId}\\\",appointmentInput:{title:\\\"${title}\\\",type:\\\"${type}\\\",date:\\\"${date}\\\",time:\\\"${time}\\\",seenTime:\\\"${seenTime}\\\",checkinTime:\\\"${checkinTime}\\\",location:\\\"${location}\\\",description:\\\"${description}\\\",inProgress:${inProgress},attended:${attended},important:${important},})\n          {_id,title,type,date,time,seenTime,checkinTime,location,description,patient{_id,name,appointments{_id,date,title}},inProgress,attended,important}}\n        `,\n    };\n\n    const token = this.context.token;\n\n    // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data.createAppointment));\n        const responseAlert = JSON.stringify(resData.data).slice(2,15);\n        this.setState({userAlert: responseAlert});\n\n        this.setState(prevState => {\n          const updatedAppointments = [...prevState.appointments];\n          updatedAppointments.push(resData.data.createAppointment);\n\n          return { appointments: updatedAppointments };\n        });\n        this.context.appointments = this.state.appointments;\n        // this.fetchAppointments();\n\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n  };\n\n  modalCancelHandler = () => {\n    this.setState({ creating: false, updating: false, searching: false, selectedAppointment: null });\n  };\n\n\n  modalConfirmUpdateHandler = (event) => {\n\n    if(this.context.user.role !== 'admin') {\n      console.log(\"Not the Admin! No edit permission!!\");\n      this.setState({userAlert: \"Not the Admin! No edit permission!!\"});\n    }\n\n    const userId = this.context.userId;\n    const appointmentId = this.context.selectedAppointment._id;\n    const selectedPatientId = this.context.selectedPatientId;\n    console.log(`\n        userId: ${userId}\n        appointmentd: ${appointmentId},\n      `);\n\n    // console.log(\"UpdateUserFormData:  \", event);\n    console.log(\"UpdateAppointmentFormData:  \", event.target.formGridTitle.value);\n\n\n    this.setState({ updating: false });\n    let title = event.target.formGridTitle.value;\n    let type = event.target.formGridType.value;\n    let date = event.target.formGridDate.value;\n    let time = event.target.formGridTime.value;\n    let seenTime = event.target.formGridSeenTime.value;\n    let checkinTime = event.target.formGridCheckinTime.value;\n    let location = event.target.formGridLocation.value;\n    let description = event.target.formGridDescription.value;\n    let inProgress = event.target.formGridInProgress.value;\n    let attended = event.target.formGridAttended.value;\n    let important = event.target.formGridImportant.value;\n\n    if (title.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      title  = this.context.selectedAppointment.title;\n      // return;\n    }\n    if (type.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      type  = this.context.selectedAppointment.type;\n    }\n    if (date.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      date  = this.context.selectedAppointment.date;\n    }\n    if (time.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      time  = this.context.selectedAppointment.time;\n    }\n    if (seenTime.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      seenTime  = this.context.selectedAppointment.seenTime;\n    }\n    if (checkinTime.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      checkinTime  = this.context.selectedAppointment.checkinTime;\n    }\n    if (location.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      location  = this.context.selectedAppointment.location;\n    }\n    if (description.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      description  = this.context.selectedAppointment.description;\n    }\n    if (inProgress.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      inProgress  = this.context.selectedAppointment.inProgress;\n    }\n    if (attended.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      attended  = this.context.selectedAppointment.attended;\n    }\n    if (important.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      important  = this.context.selectedAppointment.important;\n    }\n\n    const appointment = { title, type, date, time, seenTime, checkinTime, location, description, inProgress, attended, important, };\n    console.log(`\n        updating appointment...\n        title: ${title},\n        type: ${type},\n        date: ${date},\n        time: ${time},\n        seenTime: ${seenTime},\n        checkinTime: ${checkinTime},\n        location: ${location},\n        description: ${description},\n        inProgress: ${inProgress},\n        attended: ${attended},\n        important: ${important},\n      `);\n      this.setState({userAlert: \"updating appointment...\"});\n\n    const requestBody = {\n      query: `\n      mutation {updateAppointment(userId:\\\"${userId}\\\",appointmentId:\\\"${appointmentId}\\\",appointmentInput:{title:\\\"${title}\\\",type:\\\"${type}\\\",date:\\\"${date}\\\",time:\\\"${time}\\\",seenTime:\\\"${seenTime}\\\",checkinTime:\\\"${checkinTime}\\\",location:\\\"${location}\\\",description:\\\"${description}\\\",inProgress:${inProgress},attended:${attended},important:${important},})\n      {_id,title,type,date,time,seenTime,checkinTime,location,description,patient{_id,name,appointments{_id,date,title}},inProgress,attended,important,notes}}\n        `\n    };\n\n    const token = this.context.token;\n\n    // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n\n        const updatedAppointmentId = resData.data.updateAppointment._id;\n        const updatedAppointment = this.state.appointments.find(e => e._id === updatedAppointmentId);\n        const updatedAppointmentPos = this.state.appointments.indexOf(updatedAppointment);\n        const slicedArray = this.state.appointments.splice(updatedAppointmentPos, 1);\n        console.log(\"updatedAppointment:  \", JSON.stringify(updatedAppointment),\"  updatedPatientPos:  \", updatedAppointmentPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.appointments.push(resData.data.updateAppointment);\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert, selectedAppointment: resData.data.updateAppointment})\n        this.fetchAppointments();\n\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n  };\n\n\n  updateAppointmentPatientHandler = (event) => {\n\n    const token = this.context.token;\n    const userId = this.context.userId;\n    let selectedAppointmentId = this.context.selectedAppointment._id;\n    let selectedPatientId = this.context.selectedPatient._id;\n    if(\n      this.context.user.role !== 'admin'\n    ) {\n      console.log(\"No edit permission!!\");\n      this.setState({userAlert: \"No edit permission!!\"});\n      return;\n    }\n\n    if (selectedPatientId === undefined) {\n      console.log(`\n        select a Patient before creating an Appointment!!\n        `);\n        this.setState({userAlert: \"select a Patient before creating an Appointment!!...\"});\n        return\n    }\n\n    this.setState({ updating: false , patientUpdateField: null });\n\n    console.log(`\n      updating appointment patient...\n      userId: ${userId},\n      appointmentId: ${selectedAppointmentId},\n      patientId: ${selectedPatientId},\n      `);\n      this.setState({userAlert: \"updating appointment patient...\"});\n\n      const requestBody = {\n        query:`\n        mutation {updateAppointmentPatient(userId:\\\"${userId}\\\",appointmentId:\\\"${selectedAppointmentId}\\\",patientId:\\\"${selectedPatientId}\\\")\n        {_id,title,type,date,time,seenTime,checkinTime,location,description,patient{_id,name,appointments{_id,date,title},consultant{reference{_id,name,role}}},inProgress,attended,important}}\n        `\n      }\n\n      // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData));\n\n          const updatedAppointmentId = resData.data.updateAppointmentPatient._id;\n          const updatedAppointment = this.state.appointments.find(e => e._id === updatedAppointmentId);\n          const updatedAppointmentPos = this.state.appointments.indexOf(updatedAppointment);\n          const slicedArray = this.state.appointments.splice(updatedAppointmentPos, 1);\n          console.log(\"updatedAppointment:  \", JSON.stringify(updatedAppointment),\"  updatedPatientPos:  \", updatedAppointmentPos, \"  slicedArray:  \", slicedArray);\n\n          this.state.appointments.push(resData.data.updateAppointmentPatient);\n          const responseAlert = JSON.stringify(resData.data).slice(2,25);\n          this.setState({ userAlert: responseAlert, selectedAppointment: resData.data.updateAppointmentPatient})\n          this.fetchAppointments();\n\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({userAlert: err});\n        });\n\n\n  }\n\n\n  modalConfirmUpdateFieldHandler = (event) => {\n\n    const token = this.context.token;\n    const userId = this.context.userId;\n    let selectedAppointmentId = this.context.selectedAppointment._id;\n    if( this.context.user.role !== 'admin') {\n      console.log(\"Not the creator or Admin! No edit permission!!\");\n      selectedAppointmentId = null;\n    }\n\n      console.log(\"UpdateAppointmentFieldFormData:  \", event.target.formGridField.value);\n      this.setState({ updating: false });\n\n      let field = null;\n      let query = event.target.formGridQuery.value;\n      if (event.target.formGridFieldSelect.value === \"select\") {\n        field = event.target.formGridField.value;\n      } else {\n        field = event.target.formGridFieldSelect.value;\n      }\n\n      const requestBody = {\n        query:`\n        mutation {updateAppointmentField(userId:\\\"${userId}\\\",appointmentId:\\\"${selectedAppointmentId}\\\",field:\\\"${field}\\\",query:\\\"${query}\\\")\n        {_id,title,type,date,time,seenTime,checkinTime,location,description,patient{_id,name,appointments{_id,date,title}},inProgress,attended,important,notes}}\n        `};\n\n      // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData.data.updateAppointmentField));\n\n          const updatedAppointmentId = resData.data.updateAppointmentField._id;\n          const updatedAppointment = this.state.appointments.find(e => e._id === updatedAppointmentId);\n          const updatedAppointmentPos = this.state.appointments.indexOf(updatedAppointment);\n          const slicedArray = this.state.appointments.splice(updatedAppointmentPos, 1);\n          console.log(\"updatedAppointment:  \", JSON.stringify(updatedAppointment),\"  updatedAppointmentPos:  \", updatedAppointmentPos, \"  slicedArray:  \", slicedArray);\n\n          this.state.appointments.push(resData.data.updateAppointmentField);\n          this.context.appointments = this.state.appointments;\n          const responseAlert = JSON.stringify(resData.data).slice(2,25);\n          this.setState({ userAlert: responseAlert, selectedAppointment: resData.data.updateAppointmentField})\n          this.fetchAppointments();\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({userAlert: err});\n        });\n\n  }\n\n\n  modalConfirmSearchHandler = (event) => {\n    console.log(\"SearchAppointmentForm:  \");\n\n\n    let userId = this.context.userId;\n\n      console.log(\"SearchAppointmentFormData:  \", event.target.formBasicField.value);\n      this.setState({ searching: false });\n\n      let field = null;\n      let query = event.target.formBasicQuery.value;\n      if (event.target.formBasicFieldSelect.value === \"select\") {\n        field = event.target.formBasicField.value;\n      } else {\n        field = event.target.formBasicFieldSelect.value;\n      }\n\n      if (\n        field.trim().length === 0 ||\n        query.trim().length === 0\n      ) {\n        console.log(\"blank fields detected!!!...Please try again...\");\n        this.setState({userAlert: \"blank fields detected!!!...Please try again...\"});\n        return;\n      }\n\n      const search = { field, query }\n      console.log(\"Searching for Appointment:  \", JSON.stringify(search));\n\n      const requestBody = {\n        query: `\n          query {getAppointmentField(userId:\"${userId}\", field:\"${field}\", query:\"${query}\")\n          {_id,title,type,date,time,seenTime,checkinTime,location,description,patient{_id,name,appointments{_id,date,title},consultant{reference{_id,name,role}}},inProgress,attended,important}}\n        `}\n\n      const token = this.context.token;\n\n      // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData));\n          const responseAlert = JSON.stringify(resData.data).slice(2,15);\n          this.setState({userAlert: responseAlert});\n\n          const searchAppointments = resData.data.getAppointmentField;\n\n          this.setState({ searchAppointments: searchAppointments})\n          console.log(\"state.searchAppointments:  \", this.state.searchAppointments);\n          // this.fetchAppointments();\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({userAlert: err});\n        });\n  }\n\n  modalConfirmSearchIdHandler = (event) => {\n    console.log(`\n      SearchAppointmentIdFormData\n      `);\n\n      let userId = this.context.userId;\n      this.setState({ searching: false });\n      let selectedAppointmentId = event.target.formBasicId.value;\n\n      const requestBody = {\n        query: `\n          query {getAppointmentId(userId:\"${userId}\", appointmentId:\"${selectedAppointmentId}\")\n          {_id,title,type,date,time,patient{_id,name},location,description,inProgress,important,attended}}\n        `}\n\n      const token = this.context.token;\n\n      // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData));\n          const responseAlert = JSON.stringify(resData.data).slice(2,15);\n          this.setState({userAlert: responseAlert});\n\n          const searchAppointments = resData.data.getAppointmentId;\n\n          this.setState({ searchAppointments: [searchAppointments]})\n          console.log(\"state.searchAppointments:  \", this.state.searchAppointments);\n          // this.fetchUsers();\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({userAlert: err});\n        });\n  }\n\n  modalConfirmSearchPatientHandler = (event) => {\n    console.log(`\n      SearchAppointmentPatientFormData\n      `);\n\n      let userId = this.context.userId;\n      this.setState({ searching: false });\n      let selectedPatientId = event.target.formBasicPatientId.value;\n\n      const requestBody = {\n        query: `\n          query {getAppointmentPatient(userId:\"${userId}\", patientId:\"${selectedPatientId}\")\n          {_id,title,type,date,time,patient{_id,name},location,description,inProgress,important,attended}}\n        `}\n\n      const token = this.context.token;\n\n      // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData));\n          const responseAlert = JSON.stringify(resData.data).slice(2,15);\n          // const responseAlert = JSON.stringify(resData.errors).slice(2,15);\n          this.setState({userAlert: responseAlert});\n\n          const searchAppointments = resData.data.getAppointmentPatient;\n\n          this.setState({ searchAppointments: searchAppointments })\n          // this.state.searchApointments.push(searchAppointments)\n          console.log(\"state.searchApointments:  \", this.state.searchApointments);\n          // this.fetchUsers();\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({userAlert: err});\n        });\n\n  }\n  modalConfirmSearchDateHandler = (event) => {\n    console.log(`\n      SearchAppointmentDateFormData\n      `);\n\n      let userId = this.context.userId;\n      this.setState({ searching: false });\n      let appointmentDate = event.target.formBasicDate.value;\n\n      const requestBody = {\n        query: `\n          query {getAppointmentDate(userId:\"${userId}\",date:\"${appointmentDate}\")\n          {_id,title,type,date,time,patient{_id,name},location,description,inProgress,important,attended}}\n        `}\n\n      const token = this.context.token;\n\n      // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData));\n          const responseAlert = JSON.stringify(resData.data).slice(2,15);\n          this.setState({userAlert: responseAlert});\n\n          const searchAppointments = resData.data.getAppointmentDate;\n\n          this.setState({ searchAppointments: searchAppointments})\n          console.log(\"state.searchAppointments:  \", this.state.searchAppointments);\n          // this.fetchUsers();\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({userAlert: err});\n        });\n\n  }\n  modalConfirmSearchDateRangeHandler = (event) => {\n    console.log(`\n      SearchAppointmentDateRangeFormData\n      `);\n\n      let userId = this.context.userId;\n      this.setState({ searching: false });\n      let appointmentStartDate = event.target.formBasicStartDate.value;\n      let appointmentEndDate = event.target.formBasicEndDate.value;\n\n      const requestBody = {\n        query: `\n          query {getAppointmentDateRange(userId:\"${userId}\",startDate:\"${appointmentStartDate}\",endDate:\"${appointmentEndDate}\")\n          {_id,title,type,date,time,patient{_id,name},location,description,inProgress,important,attended}}\n        `}\n\n      const token = this.context.token;\n\n      // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData));\n          const responseAlert = JSON.stringify(resData.data).slice(2,15);\n          this.setState({userAlert: responseAlert});\n\n          const searchApointments = resData.data.getApointmentId;\n\n          this.setState({ searchApointments: searchApointments})\n          console.log(\"state.searchApointments:  \", this.state.searchApointments);\n          // this.fetchUsers();\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({userAlert: err});\n        });\n\n\n  }\n\n\n\n  modalCancelHandler = () => {\n    this.setState({ creating: false, updating: false, searching: false, selectedAppointment: null });\n  };\n\n\n  fetchAppointments() {\n    console.log(\"'fetch appointments function' context object... \" + JSON.stringify(this.context));\n    const userId = this.context.userId;\n\n    this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n            query {appointments(userId:\"${userId}\")\n            {_id,title,type,date,time,seenTime,checkinTime,location,description,patient{_id,name,consultant{reference{_id,name,role}}},inProgress,attended,important,notes}}\n        `};\n\n    // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const appointments = resData.data.appointments;\n        console.log(appointments);\n        const responseAlert = JSON.stringify(resData.data).slice(2,15);\n        this.setState({userAlert: responseAlert});\n\n        this.context.appointments = this.state.appointments;\n        if (this.isActive) {\n          this.setState({ appointments: appointments, isLoading: false });\n        }\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n        if (this.isActive) {\n          this.setState({ isLoading: false });\n        }\n      });\n  }\n\n  fetchAppointmentsAsc = () => {\n    console.log(\"'fetch appointments function' context object... \" + JSON.stringify(this.context));\n    const userId = this.context.userId;\n\n    // this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n            query {appointmentsDateAsc(userId:\"${userId}\")\n            {_id,title,type,date,time,seenTime,checkinTime,location,description,patient{_id,name,consultant{reference{_id,name,role}}},inProgress,attended,important,notes}}\n        `};\n\n    // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const appointments = resData.data.appointmentsDateAsc;\n        console.log(appointments);\n        const responseAlert = JSON.stringify(resData.data).slice(2,15);\n        this.setState({userAlert: responseAlert});\n\n        this.context.appointments = appointments;\n        this.setState({appointments: appointments})\n        // if (this.isActive) {\n        //   this.setState({ appointments: appointments, isLoading: false });\n        // }\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n        // if (this.isActive) {\n        //   this.setState({ isLoading: false });\n        // }\n      });\n  }\n  fetchAppointmentsDesc = () => {\n    console.log(\"'fetch appointments function' context object... \" + JSON.stringify(this.context));\n    const userId = this.context.userId;\n\n    // this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n            query {appointmentsDateDesc(userId:\"${userId}\")\n            {_id,title,type,date,time,seenTime,checkinTime,location,description,patient{_id,name,consultant{reference{_id,name,role}}},inProgress,attended,important,notes}}\n        `};\n\n    // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const appointments = resData.data.appointmentsDateDesc;\n        console.log(appointments);\n        const responseAlert = JSON.stringify(resData.data).slice(2,15);\n        this.setState({userAlert: responseAlert});\n\n        this.context.appointments = appointments;\n        this.setState({appointments: appointments})\n        // if (this.isActive) {\n        //   this.setState({ appointments: appointments, isLoading: false });\n        // }\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n        // if (this.isActive) {\n        //   this.setState({ isLoading: false });\n        // }\n      });\n  }\n\n  modalDeleteHandler = () => {\n    console.log(\"deleting appointment...selectedAppointment:  \", this.context.selectedAppointment);\n\n    const userId = this.context.userId;\n    const selectedAppointmentId = this.context.selectedAppointment._id;\n\n    if(this.context.user.role !== 'admin') {\n      console.log(\"Not the Admin! No edit permission!!\");\n      this.setState({userAlert: \"Not the Admin! No edit permission!!\"});\n    }\n\n    this.setState({deleting: true});\n\n\n    const requestBody = {\n      query: `\n          mutation {deleteAppointment(userId:\"${userId}\",appointmentId:\"${selectedAppointmentId}\")\n          {_id,title,type,date,time,seenTime,checkinTime,location,description,patient{_id,name,appointments{_id,date,title}},inProgress,attended,important,notes}}\n        `};\n\n    // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"resData:  \", resData);\n        // console.log(\"resData.data.deleteAppointment:  \", resData.data.deleteAppointment);\n        let deletedAppointment = resData.data.deleteAppointment;\n        console.log(deletedAppointment);\n        const responseAlert = JSON.stringify(resData.data).slice(2,15);\n        this.setState({userAlert: responseAlert});\n\n        let deletedAppointmentId = deletedAppointment._id;\n        deletedAppointment = this.state.appointments.find(e => e._id === deletedAppointmentId);\n        const deletedAppointmentPos = this.state.appointments.indexOf(deletedAppointment);\n        const slicedArray = this.state.appointments.splice(deletedAppointmentPos, 1);\n        console.log(\"deletedAppointment:  \", JSON.stringify(deletedAppointment),\"  deletedUserPos:  \", deletedAppointmentPos, \"  slicedArray:  \", slicedArray);\n\n        this.setState({ deleting: false });\n\n        this.fetchAppointments();\n\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n        if (this.isActive) {\n          this.setState({ deleting: false });\n        }\n      });\n\n\n  }\n\n  updateAppointmentSpecial (event) {\n\n    console.log(\"special field to update:  \", event.target.value);\n    const field = event.target.value;\n    this.setState({ appointmentUpdateField: field});\n\n  }\n\n\n  showDetailHandler = appointmentId => {\n\n    this.setState(prevState => {\n      const selectedAppointment = prevState.appointments.find(e => e._id === appointmentId);\n      this.setState({selectedAppointment: selectedAppointment});\n      this.context.selectedAppointment = selectedAppointment;\n      console.log(\"selectedAppointment:  \", selectedAppointment);\n      return { selecteAppointment: selectedAppointment };\n    });\n  };\n\n\n  fetchAppointmentToday() {\n    console.log(\"fetching todays appts function:  \");\n\n    const token = this.context.token;\n    const userId = this.context.userId;\n\n    const requestBody = {\n      query: `\n          query {getAppointmentToday(userId:\"${userId}\")\n          {_id,title,type,date,time,patient{_id,name},location,description,inProgress,important,attended}}\n        `\n    };\n\n    // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        this.context.appointmentsToday = resData.data.getAppointmentToday;\n        console.log(\"context today's appts:  \", JSON.stringify(this.context.appointmentsToday));\n\n        const responseAlert = JSON.stringify(resData.data).slice(2,15);\n        this.setState({userAlert: responseAlert});\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n\n  }\n\n\n  fetchAppointmentInProgress() {\n    console.log(\"fetching inProgress appts function:  \");\n\n    const token = this.context.token;\n    const userId = this.context.userId;\n\n    const requestBody = {\n      query: `\n          query {getAppointmentField(userId:\\\"${userId}\\\",field:\\\"inProgress\\\",query:\\\"true\\\"){_id,title,type,date,time,patient{_id,name},location,description,inProgress,important,attended}}\n        `\n    };\n\n    // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        this.context.appointmentsInProgress = resData.data.getAppointmentField;\n        console.log(\"context in progress appts:  \", JSON.stringify(this.context.appointmentsInProgress));\n\n        const responseAlert = JSON.stringify(resData.data).slice(2,15);\n        this.setState({userAlert: responseAlert});\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n\n  }\n\n  createPdf = (appointment) => {\n    console.log(`\n        creating pdf...\n        user: ${JSON.stringify(appointment)}\n      `);\n\n      const pdfData = {\n        title: appointment.title,\n        body: appointment.date,\n      };\n\n    this.setState({createPdf: true, pdfData: pdfData})\n  }\n\n  closePdfCreator = () => {\n    console.log(`\n      closing pdf creator...\n      `);\n      this.setState({createPdf: false, pdfData: null})\n  }\n\n  componentWillUnmount() {\n    this.isActive = false;\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n\n      {this.state.createPdf === true && (\n          <PdfCreator\n            pdfData={this.state.pdfData}\n            onClosePdfCreator={this.closePdfCreator}\n          />\n      )}\n\n      <Accordion>\n\n      <Row>\n\n      <Col md={3} className=\"MasterCol1\">\n\n      <AlertBox\n            authUserId={this.context.userId}\n            alert={this.state.userAlert}\n          />\n      <SidebarPage/>\n\n      </Col>\n\n      <Col md={9} className=\"MasterCol2\">\n\n          <Container className=\"containerCombinedDetail\">\n            <Tabs defaultActiveKey=\"appointmentDetail\" id=\"uncontrolled-tab-example\">\n              <Tab eventKey=\"appointmentDetail\" title=\"Selected Appointment Data\">\n                  {this.state.selectedAppointment === null && (\n                    <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                      Select an Appointment from the Master List\n                    </Button>\n                  )}\n                  {\n                    this.state.isLoading === false &&\n                    this.state.selectedAppointment !== null\n                    &&\n                    (\n                      <AppointmentDetail\n                      authUserId={this.context.userId}\n                      appointment={this.state.selectedAppointment}\n                      onEdit={this.startUpdateAppointmentHandler}\n                      canDelete={this.state.canDelete}\n                      onDelete={this.modalDeleteHandler}\n                      onCreatePdf={this.createPdf}\n                  />\n                )}\n              </Tab>\n\n              <Tab eventKey=\"appointmentCreate\" title=\"Create New\">\n              <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" onClick={this.startCreateAppointmentHandler} >Create New</Button>\n              {\n                this.state.creating &&\n                this.context.selectedPatient._id !== null\n                && (\n                  <CreateAppointmentForm\n                  canCancel\n                    canConfirm\n                    onCancel={this.modalCancelHandler}\n                    onConfirm={this.modalConfirmHandler}\n                    onSubmit={this.modalConfirmHandler}\n                    confirmText=\"Confirm\"\n                    selectedPatient={this.context.selectedPatient}\n                  />\n              )}\n              </Tab>\n\n              <Tab eventKey=\"appointmentEditBasic\" title=\"Edit Basic Data\">\n              {this.state.selectedAppointment === null && (\n                <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                  Select an Appointment from the Master List\n                </Button>\n              )}\n              {this.state.selectedAppointment !== null && (\n                <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" onClick={this.startUpdateAppointmentHandler}>Edit Basic Data</Button>\n              )}\n              {this.state.updating &&\n                this.state.selectedAppointment !== null\n                && (\n                <UpdateAppointmentForm\n                authUserId={this.context.userId}\n                canCancel\n                  canConfirm\n                  onCancel={this.modalCancelHandler}\n                  onConfirm={this.modalConfirmUpdateHandler}\n                  confirmText=\"Confirm\"\n                  appointment={this.state.selectedAppointment}\n                />\n              )}\n              </Tab>\n\n              <Tab eventKey=\"appointmentEditField\" title=\"Edit a Single Field\">\n              {this.state.selectedAppointment === null && (\n                <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedAppointment !== null && (\n                <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" onClick={this.startUpdateAppointmentHandler}>Edit a Single Field</Button>\n              )}\n              {this.state.updating &&\n                this.state.selectedAppointment !== null\n                && (\n                  <UpdateAppointmentFieldForm\n                    authUserId={this.context.userId}\n                    canCancel\n                    canConfirm\n                    onCancel={this.modalCancelHandler}\n                    onConfirm={this.modalConfirmUpdateFieldHandler}\n                    confirmText=\"Confirm\"\n                    appointment={this.state.selectedAppointment}\n                  />\n              )}\n              </Tab>\n\n              <Tab eventKey=\"appointmentEditPatient\" title=\"Change Patient\">\n              {this.state.selectedAppointment === null && (\n                <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                  Select an Appointment from the Master List\n                </Button>\n              )}\n              {this.state.selectedAppointment !== null && (\n                <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" value='patient' onClick={this.updateAppointmentSpecial.bind(this)}>Change Patient:</Button>\n              )}\n              {this.state.updating &&\n                this.state.selectedAppointment !== null (\n                <Row>\n                <Col md={8} className=\"updateUserColAdd\">\n                <p>Add Patient: {this.context.selectedPatient.name}</p>\n                <p> To Appointment: {this.state.selectedAppointment.title} ??</p>\n                <Button variant=\"success\" onClick={this.updateAppointmentPatientHandler}>\n                  Yes\n                </Button>\n                </Col>\n                </Row>\n              )}\n              </Tab>\n\n              <Tab eventKey=\"MasterList\" title=\"MASTER LIST\">\n              <Container className=\"containerUserMasterList\">\n              <Row className=\"searchListRow\">\n              <Button variant=\"primary\" size=\"sm\" onClick={this.fetchAppointmentsAsc}>\n                 Sort Asc\n               </Button>\n              <Button variant=\"info\" size=\"sm\" onClick={this.fetchAppointmentsDesc}>\n                 Sort Desc\n               </Button>\n              {this.state.isLoading ? (\n                <Spinner />\n              ) :\n              (\n                <AppointmentList\n                  appointments={this.state.appointments}\n                  authUserId={this.context.userId}\n                  onViewDetail={this.showDetailHandler}\n                />\n              )}\n              </Row>\n              </Container>\n              </Tab>\n\n              <Tab eventKey=\"SearchInput\" title=\"Search\">\n              <Container className=\"containerSearchUserInput\">\n              <Row className=\"searchUserRowAdd\">\n              <Button variant=\"primary\" onClick={this.startSearchAppointmentHandler}>Search</Button>\n              </Row>\n\n              <Row className=\"searchUserRowForm\">\n              <Col md={10} className=\"searchUserColForm\">\n              <Tabs defaultActiveKey=\"Field\" id=\"uncontrolled-tab-example\">\n              <Tab eventKey=\"Search\" title=\"Search:\" disabled>\n              </Tab>\n              <Tab eventKey=\"Field\" title=\"Search by Field:\">\n              {this.state.searching !== true && (\n                <Button variant=\"outline-warning\" className=\"confirmEditButton\" size=\"lg\">\n                  Click the 'Search' Button start\n                </Button>\n              )}\n              {this.state.searching === true && (\n                <SearchAppointmentForm\n                authUserId={this.context.userId}\n                canCancel\n                  canConfirm\n                  onCancel={this.modalCancelHandler}\n                  onConfirm={this.modalConfirmSearchHandler}\n                  confirmText=\"Search\"\n                  appointment={this.context.selectedAppointment}\n                />\n              )}\n              </Tab>\n              <Tab eventKey=\"Id\" title=\"Search by Id:\">\n              {this.state.searching !== true && (\n                <Button variant=\"outline-warning\" className=\"confirmEditButton\" size=\"lg\">\n                  Click the 'Search' Button start\n                </Button>\n              )}\n                {this.state.searching === true && (\n                  <SearchAppointmentIdForm\n                  authUserId={this.context.userId}\n                  canCancel\n                    canConfirm\n                    onCancel={this.modalCancelHandler}\n                    onConfirm={this.modalConfirmSearchIdHandler}\n                    confirmText=\"Search\"\n                    appointment={this.context.selectedAppointment}\n                  />\n                )}\n              </Tab>\n              <Tab eventKey=\"Patient\" title=\"Search by Patient:\">\n              {this.state.searching !== true && (\n                <Button variant=\"outline-warning\" className=\"confirmEditButton\" size=\"lg\">\n                  Click the 'Search' Button start\n                </Button>\n              )}\n                {this.state.searching === true && (\n                  <SearchAppointmentPatientForm\n                  authUserId={this.context.userId}\n                  canCancel\n                    canConfirm\n                    onCancel={this.modalCancelHandler}\n                    onConfirm={this.modalConfirmSearchPatientHandler}\n                    confirmText=\"Search\"\n                    appointment={this.context.selectedAppointment}\n                  />\n                )}\n              </Tab>\n              <Tab eventKey=\"Date\" title=\"Search by Date:\">\n              {this.state.searching !== true && (\n                <Button variant=\"outline-warning\" className=\"confirmEditButton\" size=\"lg\">\n                  Click the 'Search' Button start\n                </Button>\n              )}\n                {this.state.searching === true && (\n                  <SearchAppointmentDateForm\n                  authUserId={this.context.userId}\n                  canCancel\n                    canConfirm\n                    onCancel={this.modalCancelHandler}\n                    onConfirm={this.modalConfirmSearchDateHandler}\n                    confirmText=\"Search\"\n                    appointment={this.context.selectedAppointment}\n                  />\n                )}\n              </Tab>\n              <Tab eventKey=\"Date Range\" title=\"Search by Date Range:\">\n              {this.state.searching !== true && (\n                <Button variant=\"outline-warning\" className=\"confirmEditButton\" size=\"lg\">\n                  Click the 'Search' Button start\n                </Button>\n              )}\n                {this.state.searching === true && (\n                  <SearchAppointmentDateRangeForm\n                  authUserId={this.context.userId}\n                  canCancel\n                    canConfirm\n                    onCancel={this.modalCancelHandler}\n                    onConfirm={this.modalConfirmSearchDateRangeHandler}\n                    confirmText=\"Search\"\n                    appointment={this.context.selectedAppointment}\n                  />\n                )}\n              </Tab>\n              </Tabs>\n              </Col>\n              <Col md={10}>\n              </Col>\n              </Row>\n              </Container>\n              </Tab>\n\n              <Tab eventKey=\"SearchResult\" title=\"Search Results\">\n              <Container className=\"containerSearchUserResults\">\n              <Row>\n                <Card className=\"searchCard\">\n                  <Card.Body className=\"searchCardBody\">\n                    <Card.Title>Your Search</Card.Title>\n                    <Card.Text>\n                      Field: {this.state.appointmentSearchField}\n                    </Card.Text>\n                    <Card.Text>\n                      Query: {this.state.appointmentSearchQuery}\n                    </Card.Text>\n                  </Card.Body>\n                </Card>\n              </Row>\n              <Row className=\"searchListRow\">\n              {\n                this.state.searchAppointments !== [] && (\n                <SearchAppointmentList\n                  searchAppointments={this.state.searchAppointments}\n                  authUserId={this.context.userId}\n                  onCancel={this.modalCancelHandler}\n                    onViewDetail={this.showDetailHandler}\n                />\n              )}\n              </Row>\n              </Container>\n              </Tab>\n\n            </Tabs>\n          </Container>\n\n      </Col>\n    </Row>\n\n  </Accordion>\n\n        {\n        //   this.state.isLoading === false &&\n        //   (<PatientDetail\n        //     authUserId={this.context.userId}\n        //     patient={this.context.selectedPatient}\n        //     className=\"PatientDetailBox2\"\n        // />)\n      }\n      </React.Fragment>\n    );\n  }\n}\n\nexport default AppointmentsPage;\n"]},"metadata":{},"sourceType":"module"}