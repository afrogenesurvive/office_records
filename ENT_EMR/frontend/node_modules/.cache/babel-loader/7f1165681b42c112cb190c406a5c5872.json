{"ast":null,"code":"var _jsxFileName = \"/Users/pedrojacob/Downloads/AMR/websites/office_records/ENT_EMR/frontend/src/pages/thisUser.js\";\nimport S3 from 'react-aws-s3';\nimport React, { Component } from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\nimport Nav from 'react-bootstrap/Nav';\nimport AuthContext from '../context/auth-context';\nimport AlertBox from '../components/AlertBox';\nimport AttachmentViewer from '../components/AttachmentViewer';\nimport PdfCreator from '../components/PdfCreator';\nimport LoadingOverlay from '../components/LoadingOverlay';\nimport SidebarPage from './Sidebar';\nimport UpdateUserForm from '../components/Forms/UpdateUserForm';\nimport ThisUserProfile from '../components/Users/thisUserProfile';\nimport UpdateUserFieldForm from '../components/Forms/UpdateUserFieldForm';\nimport UpdateUserAttendanceForm from '../components/Forms/UpdateUserAttendanceForm';\nimport UpdateUserAttachmentForm from '../components/Forms/UpdateUserAttachmentForm';\nimport UpdateUserLeaveForm from '../components/Forms/UpdateUserLeaveForm';\nimport './Users.css';\n\nclass ThisUserPage extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      user: null,\n      users: [],\n      updating: false,\n      isLoading: false,\n      userUpdateField: null,\n      userAlert: null,\n      overlay: false,\n      overlayStatus: \"test\",\n      canDelete: null,\n      showAttachment: false,\n      createPdf: false,\n      pdfData: null,\n      showThisAttachmentFile: null,\n      showThisAttachmentType: null\n    };\n    this.isActive = true;\n\n    this.startUpdateUserHandler = () => {\n      this.setState({\n        updating: true\n      });\n    };\n\n    this.modalConfirmUpdateHandler = event => {\n      const token = this.context.token;\n      let userId = this.context.userId;\n      let selectedUserId = this.context.selectedUser._id;\n\n      if (userId !== selectedUserId && this.context.user.role !== 'admin') {\n        this.setState({\n          userAlert: \"Not the creator or Admin! No edit permission!!\"\n        });\n        selectedUserId = null;\n      }\n\n      this.setState({\n        updating: false,\n        userAlert: \"Updating selected Staff ...\"\n      });\n      let email = event.target.formGridEmail.value;\n      let password = event.target.formGridPassword.value;\n      let name = event.target.formGridName.value;\n      let role = this.context.user.role;\n      let dob = event.target.formGridDob.value;\n      let phone = event.target.formGridPhone.value;\n      let addressNumber = event.target.formGridAddressNumber.value;\n      let addressStreet = event.target.formGridAddressStreet.value;\n      let addressTown = event.target.formGridAddressTown.value;\n      let addressParish = event.target.formGridAddressParish.value;\n      let addressPostOffice = event.target.formGridAddressPostOffice.value;\n      let employmentDate = event.target.formGridEmploymentDate.value;\n\n      if (event.target.formGridEmploymentDateTodayCheckbox.checked === true) {\n        employmentDate = new Date().toISOString().slice(0, 10);\n      }\n\n      let terminationDate = event.target.formGridTerminationDate.value;\n\n      if (event.target.formGridTerminationDateTodayCheckbox.checked === true) {\n        terminationDate = new Date().toISOString().slice(0, 10);\n      }\n\n      if (email.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        email = this.context.user.email;\n      }\n\n      if (password.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        password = this.context.user.password;\n      }\n\n      if (name.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        name = this.context.user.name;\n      } // if (role.trim().length === 0) {\n      //   console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      //   role = this.state.user.role;\n      // }\n\n\n      if (dob.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        dob = this.context.user.dob;\n      }\n\n      if (phone.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        phone = this.context.user.phone;\n      }\n\n      if (addressNumber.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        addressNumber = this.context.user.address.number;\n      }\n\n      if (addressStreet.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        addressStreet = this.context.user.address.street;\n      }\n\n      if (addressTown.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        addressTown = this.context.user.address.town;\n      }\n\n      if (addressParish.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        addressParish = this.context.user.address.parish;\n      }\n\n      if (addressPostOffice.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        addressPostOffice = this.context.user.address.postOffice;\n      }\n\n      if (employmentDate.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        employmentDate = this.context.user.employmentDate;\n      }\n\n      if (terminationDate.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        terminationDate = this.context.user.terminationDate;\n      }\n\n      const requestBody = {\n        query: `\n        mutation {updateUser(userId:\"${userId}\",selectedUserId:\"${userId}\",userInput: {email:\"${email}\",password:\"${password}\",name:\"${name}\",dob:\"${dob}\",addressNumber:${addressNumber},addressStreet:\"${addressStreet}\",addressTown:\"${addressTown}\",addressParish:\"${addressParish}\", addressPostOffice:\"${addressPostOffice}\",phone:\"${phone}\",role:\"${role}\",employmentDate:\"${employmentDate}\",terminationDate:\"${terminationDate}\"})\n        {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n        `\n      }; // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const updatedUser = resData.data.updateUser;\n        this.state.users.push(updatedUser);\n        this.context.users = this.state.users;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert,\n          user: updatedUser\n        });\n        this.getThisUser();\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.modalConfirmUpdateFieldHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedUserId = this.context.selectedUser._id;\n\n      if (userId !== selectedUserId && this.context.user.role !== 'admin') {\n        this.setState({\n          userAlert: \"Not the creator or Admin! No edit permission!!\"\n        });\n        selectedUserId = null;\n      }\n\n      this.setState({\n        updating: false,\n        userAlert: \"Updating selected Staff by Field...\"\n      });\n      let field = null;\n      let query = event.target.formGridQuery.value;\n\n      if (event.target.formGridFieldSelect.value === \"select\") {\n        field = event.target.formGridField.value;\n      } else {\n        field = event.target.formGridFieldSelect.value;\n      }\n\n      const requestBody = {\n        query: `\n          mutation{updateUserField(userId:\"${userId}\",selectedUserId:\"${userId}\",field:\"${field}\",query:\"${query}\")\n          {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n        `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const updatedUserId = resData.data.updateUserField._id;\n        const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n        const updatedUserPos = this.state.users.indexOf(updatedUser);\n        const slicedArray = this.state.users.splice(updatedUserPos, 1);\n        this.state.users.push(resData.data.updateUserField);\n        this.context.users = this.state.users;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.getThisUser();\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updateUserAttendanceHandler = event => {\n      const token = this.context.token;\n      const userId = this.state.user._id;\n      console.log(\"UpdateUserAttendanceFormData:  \", event.target.formGridAttendanceStatus.value);\n      console.log(`\n      dates & raisins...\n      this.context.fancyDate: ${new Date(AuthContext._currentValue.fancyDate).toISOString().slice(0, 10)},\n      event.target.formGridAttendanceDateTodayCheckbox.checked: ${event.target.formGridAttendanceDateTodayCheckbox.checked},\n      `);\n      this.setState({\n        updating: false,\n        userUpdateField: null,\n        userAlert: \"Adding Attendance for selected Staff...\"\n      });\n      let attendanceDate = event.target.formGridAttendanceDate.value;\n\n      if (event.target.formGridAttendanceDateTodayCheckbox.checked === true) {\n        console.log(\"1\");\n        attendanceDate = new Date().toISOString().slice(0, 10);\n      } // if (\n      //   AuthContext._currentValue.fancyDate !== null &&\n      //   event.target.formGridAttendanceDateTodayCheckbox.checked !== true\n      // ) {\n      //   console.log(\"2\");\n      //   attendanceDate = new Date(AuthContext._currentValue.fancyDate).toISOString().slice(0,10);\n      // }\n\n\n      let attendanceStatus = event.target.formGridAttendanceStatus.value;\n      let attendanceDescription = event.target.formGridAttendanceDescription.value;\n\n      if (attendanceDate.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        attendanceDate = this.context.selectedUser.attendanceDate;\n      }\n\n      if (attendanceStatus.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        attendanceStatus = this.context.selectedUser.attendanceStatus;\n      }\n\n      if (attendanceDescription.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        attendanceDescription = this.context.selectedUser.attendanceDescription;\n      }\n\n      const requestBody = {\n        query: `\n          mutation {updateUserAttendance(userId:\"${userId}\", selectedUserId:\"${userId}\",userInput:{attendanceDate:\"${attendanceDate}\",attendanceStatus:\"${attendanceStatus}\",attendanceDescription:\"${attendanceDescription}\"})\n          {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n        `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const updatedUserId = resData.data.updateUserAttendance._id;\n        const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n        const updatedUserPos = this.state.users.indexOf(updatedUser);\n        const slicedArray = this.state.users.splice(updatedUserPos, 1);\n        this.state.users.push(resData.data.updateUserAttendance);\n        this.context.users = this.state.users;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.getThisUser();\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updateUserLeaveHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedUserId = this.context.selectedUser._id;\n\n      if (userId !== selectedUserId && this.context.user.role !== 'admin') {\n        this.setState({\n          userAlert: \"Not the creator or Admin! No edit permission!!\"\n        });\n        selectedUserId = null;\n      }\n\n      this.setState({\n        updating: false,\n        userUpdateField: null,\n        userAlert: \"Adding Leave for selected Staff...\"\n      });\n      let leaveType = event.target.formGridLeaveType.value;\n      let leaveTitle = event.target.formGridLeaveTitle.value;\n      let leaveStartDate = event.target.formGridLeaveStartDate.value;\n\n      if (event.target.formGridLeaveStartDateTodayCheckbox.checked === true) {\n        leaveStartDate = new Date().toISOString().slice(0, 10);\n      }\n\n      let leaveEndDate = event.target.formGridLeaveEndDate.value;\n\n      if (event.target.formGridLeaveEndDateTodayCheckbox.checked === true) {\n        leaveEndDate = new Date().toISOString().slice(0, 10);\n      }\n\n      if (leaveType.trim().length === 0) {\n        setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        leaveType = this.context.selectedUser.leaveType;\n      }\n\n      if (leaveTitle.trim().length === 0) {\n        setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        leaveTitle = this.context.selectedUser.leaveTitle;\n      }\n\n      if (leaveStartDate.trim().length === 0) {\n        setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        leaveStartDate = this.context.selectedUser.leaveStartDate;\n      }\n\n      if (leaveEndDate.trim().length === 0) {\n        setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        leaveEndDate = this.context.selectedUser.leaveEndDate;\n      }\n\n      const requestBody = {\n        query: `\n        mutation {updateUserLeave(userId:\"${userId}\", selectedUserId:\"${userId}\",userInput:{leaveType:\"${leaveType}\",leaveTitle:\"${leaveTitle}\",leaveStartDate:\"${leaveStartDate}\",leaveEndDate:\"${leaveEndDate}\"})\n        {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n      `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const updatedUserId = resData.data.updateUserLeave._id;\n        const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n        const updatedUserPos = this.state.users.indexOf(updatedUser);\n        const slicedArray = this.state.users.splice(updatedUserPos, 1);\n        this.state.users.push(resData.data.updateUserLeave);\n        this.context.users = this.state.users;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.getThisUser();\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updateUserAttachmentHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      this.setState({\n        updating: false,\n        userUpdateField: null,\n        userAlert: \"Adding Attachment to selected Staff...\"\n      });\n      let attachmentFormat = event.target.formGridAttachmentFormat.value;\n      let attachmentPath = \"uploads/staff/\" + userId + \"/attachments\";\n      let file = AuthContext._currentValue.file;\n      const config = {\n        bucketName: this.context.creds.s3.bucketName,\n        dirName: attachmentPath,\n        region: this.context.creds.s3.region,\n        accessKeyId: this.context.creds.s3.accessKeyId,\n        secretAccessKey: this.context.creds.s3.secretAccessKey\n      };\n      const ReactS3Client = new S3(config);\n      const newFileName = file.name;\n      const attachmentName = newFileName;\n      ReactS3Client.uploadFile(file, newFileName).then(data => {\n        console.log(data);\n        this.setState({\n          userAlert: \"attachment upload success!\"\n        });\n      }).catch(err => {\n        console.error(err);\n        this.setState({\n          userAlert: \"upload error:  \" + err\n        });\n      });\n\n      if (attachmentName.trim().length === 0 || attachmentFormat.trim().length === 0 || attachmentPath.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!! try again\"\n        });\n        return;\n      }\n\n      const userAttachment = {\n        attachmentName,\n        attachmentFormat,\n        attachmentPath\n      };\n      console.log(`\n    adding user attendance item...\n    userId: ${userId},\n    selectedUserId: ${userId}\n    attachmentName: ${attachmentName},\n    attachmentFormat: ${attachmentFormat},\n    attachmentPath: ${attachmentPath}\n    `);\n      this.setState({\n        userAlert: \"adding user attachment item...\"\n      });\n      const requestBody = {\n        query: `\n        mutation{updateUserAttachment(userId:\"${userId}\",selectedUserId:\"${userId}\",userInput:{attachmentName:\"${attachmentName}\",attachmentFormat:\"${attachmentFormat}\",attachmentPath:\"${attachmentPath}\"})\n        {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n      `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const updatedUserId = resData.data.updateUserAttachment._id;\n        const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n        const updatedUserPos = this.state.users.indexOf(updatedUser);\n        const slicedArray = this.state.users.splice(updatedUserPos, 1);\n        this.state.users.push(resData.data.updateUserAttachment);\n        this.context.users = this.state.users;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.getThisUser();\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.modalCancelHandler = () => {\n      this.setState({\n        updating: false\n      });\n    };\n\n    this.deleteUserAttendanceItem = props => {\n      let token = this.context.token;\n      let userId = this.context.userId;\n      let date = new Date(props.date.substr(0, 10) * 1000).toISOString().slice(0, 10);\n      const requestBody = {\n        query: `\n       mutation{deleteUserAttendance(userId:\"${userId}\",selectedUserId:\"${userId}\",attendanceDate:\"${date}\")\n       {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}\n      }\n     `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const updatedUserId = resData.data.deleteUserAttendance._id;\n        const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n        const updatedUserPos = this.state.users.indexOf(updatedUser);\n        const slicedArray = this.state.users.splice(updatedUserPos, 1);\n        this.state.users.push(resData.data.deleteUserAttendance);\n        this.context.users = this.state.users;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.getThisUser();\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.deleteUserLeaveItem = props => {\n      let token = this.context.token;\n      let userId = this.context.userId;\n      const requestBody = {\n        query: `\n       mutation{deleteUserLeave(userId:\"${userId}\",selectedUserId:\"${userId}\",leaveTitle:\"${props.title}\")\n       {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const updatedUserId = resData.data.deleteUserLeave._id;\n        const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n        const updatedUserPos = this.state.users.indexOf(updatedUser);\n        const slicedArray = this.state.users.splice(updatedUserPos, 1);\n        this.state.users.push(resData.data.deleteUserLeave);\n        this.context.users = this.state.users;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.deleteUserAttachmentItem = props => {\n      let token = this.context.token;\n      let userId = this.context.userId;\n      console.log(`\n      delete user Attachment item:\n      props: ${JSON.stringify(props)},\n      token: ${token},\n      userId: ${userId},\n      selectedUserId: ${userId},\n      `); // console.log(`\n      //   deleting from s3...\n      //   file.name: ${props.name},\n      //   `);\n      //\n      //   const config = {\n      //     bucketName: this.context.creds.s3.bucketName,\n      //     dirName: props.path,\n      //     region: this.context.creds.s3.region,\n      //     accessKeyId: this.context.creds.s3.accessKeyId,\n      //     secretAccessKey: this.context.creds.s3.secretAccessKey,\n      //   }\n      // const ReactS3Client = new S3(config);\n      // const filename = props.name;\n      // // const attachmentName = newFileName;\n      // //\n      // S3FileUpload\n      // .deleteFile(filename, config)\n      // .then(response => console.log(response))\n      // .catch(err => console.error(err))\n\n      const requestBody = {\n        query: `\n         mutation{deleteUserAttachment(userId:\"${userId}\",selectedUserId:\"${userId}\",attachmentName:\"${props.name}\")\n         {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n      `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        // let deletedUser = resData.data.deleteUserAttachment;\n        // console.log(deletedUser);\n        const updatedUserId = resData.data.deleteUserAttachment._id;\n        const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n        const updatedUserPos = this.state.users.indexOf(updatedUser);\n        const slicedArray = this.state.users.splice(updatedUserPos, 1);\n        console.log(\"updatedUser:  \", JSON.stringify(updatedUser), \"  updatedUserPos:  \", updatedUserPos, \"  slicedArray:  \", slicedArray);\n        this.state.users.push(resData.data.deleteUserAttachment);\n        this.context.users = this.state.users;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        }); // this.setState({ userAlert: responseAlert, selectedUser: resData.data.deleteUserAttachment})\n\n        this.getThisUser();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.onViewAttachment = attachment => {\n      console.log(`\n      setting up attachment viewer...\n      attachment: ${JSON.stringify(attachment)}\n      `);\n      const file = \"https://ent-emr-bucket.s3-us-east-2.amazonaws.com/\" + attachment.path + \"/\" + attachment.name + \".\" + attachment.format;\n      const type = attachment.format;\n      this.setState({\n        showThisAttachmentFile: file,\n        showThisAttachmentType: type\n      });\n      this.setState({\n        showAttachment: true\n      });\n    };\n\n    this.closeAttachmentView = () => {\n      console.log(`\n      closing attachment viewer...\n      `);\n      this.setState({\n        showAttachment: false\n      });\n    };\n\n    this.createPdf = user => {\n      console.log(`\n        creating pdf...\n        user: ${JSON.stringify(user)}g\n      `);\n      const pdfData = {\n        title: \"This pdf is supplied with your profile data...\",\n        user: {\n          _id: user._id,\n          email: user.email,\n          password: user.password,\n          name: user.name,\n          dob: user.dob,\n          address: {\n            number: user.address.number,\n            street: user.address.street,\n            town: user.address.town,\n            parish: user.address.parish,\n            postOffice: user.address.postOffice\n          },\n          phone: user.phone,\n          role: user.role,\n          employmentDate: user.employmentDate,\n          terminationDate: user.terminationDate,\n          attachments: user.attachments,\n          attendance: user.atttendance,\n          leave: user.leave\n        }\n      };\n      this.setState({\n        createPdf: true,\n        pdfData: pdfData\n      });\n    };\n\n    this.closePdfCreator = () => {\n      console.log(`\n      closing pdf creator...\n      `);\n      this.setState({\n        createPdf: false,\n        pdfData: null\n      });\n    };\n  }\n\n  componentDidMount() {\n    if (this.context.user.name === \"Lord-of-the-Manor\") {\n      this.setState({\n        canDelete: true,\n        overlay: true,\n        overlayStatus: \"loading your profile...\"\n      });\n    }\n\n    this.getThisUser();\n    this.getCreds();\n  }\n\n  getThisUser() {\n    this.setState({\n      isLoading: true\n    });\n    const requestBody = {\n      query: `\n      query {getThisUser\n        {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n        `\n    };\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    }).then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n\n      return res.json();\n    }).then(resData => {\n      console.log(\"resdata...\" + JSON.stringify(resData));\n      const thisUser = resData.data.getThisUser;\n\n      if (this.isActive) {\n        this.setState({\n          user: thisUser,\n          isLoading: false,\n          overlay: false\n        });\n      }\n    }).catch(err => {\n      console.log(err);\n      this.setState({\n        userAlert: err\n      });\n\n      if (this.isActive) {\n        this.setState({\n          isLoading: false\n        });\n      }\n    });\n  }\n\n  getCreds() {\n    this.setState({\n      isLoading: true\n    });\n    const requestBody = {\n      query: `\n      query {getCreds\n        {atlas{user,pw,db},s3{bucketName,region,accessKeyId,secretAccessKey},jwt{encode},gdrive{clientId,developerKey}}}\n        `\n    };\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    }).then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n\n      return res.json();\n    }).then(resData => {\n      const creds = resData.data.getCreds;\n\n      if (this.isActive) {\n        this.setState({\n          isLoading: false\n        });\n        this.context.creds = creds;\n      }\n    }).catch(err => {\n      this.setState({\n        userAlert: err\n      });\n\n      if (this.isActive) {\n        this.setState({\n          isLoading: false\n        });\n      }\n    });\n  }\n\n  updateUserSpecialProfile(event) {\n    console.log(\"special field to update:  \", event.target.value);\n    const field = event.target.value;\n    this.setState({\n      userUpdateField: field\n    });\n  }\n\n  componentWillUnmount() {\n    this.isActive = false;\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 790\n      },\n      __self: this\n    }, this.state.showAttachment === true && React.createElement(AttachmentViewer, {\n      onCloseAttachmentView: this.closeAttachmentView,\n      attachmentFile: this.state.showThisAttachmentFile,\n      attachmentType: this.state.showThisAttachmentType,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 793\n      },\n      __self: this\n    }), this.state.createPdf === true && React.createElement(PdfCreator, {\n      pdfData: this.state.pdfData,\n      onClosePdfCreator: this.closePdfCreator,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 801\n      },\n      __self: this\n    }), React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 807\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 3,\n      className: \"MasterCol1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 808\n      },\n      __self: this\n    }, React.createElement(AlertBox, {\n      authUserId: this.context.userId,\n      alert: this.state.userAlert,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 809\n      },\n      __self: this\n    }), this.state.overlay === true && React.createElement(LoadingOverlay, {\n      status: this.state.overlayStatus,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 815\n      },\n      __self: this\n    }), React.createElement(SidebarPage, {\n      you: this.state.user,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 820\n      },\n      __self: this\n    })), React.createElement(Col, {\n      md: 9,\n      className: \"MasterCol2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 825\n      },\n      __self: this\n    }, React.createElement(Container, {\n      className: \"containerProfile\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 826\n      },\n      __self: this\n    }, React.createElement(Tab.Container, {\n      id: \"left-tabs-example\",\n      defaultActiveKey: \"Detail\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 828\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 829\n      },\n      __self: this\n    }, React.createElement(Col, {\n      sm: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 830\n      },\n      __self: this\n    }, React.createElement(Nav, {\n      variant: \"pills\",\n      className: \"flex-column\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 831\n      },\n      __self: this\n    }, React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 832\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"Detail\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 833\n      },\n      __self: this\n    }, \"You\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 835\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"disabled\",\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 836\n      },\n      __self: this\n    }, \"Edit:\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 838\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"Demographics\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 839\n      },\n      __self: this\n    }, \"Demographics\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 841\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"userEditField\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 842\n      },\n      __self: this\n    }, \"Single Field\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 844\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"disabled\",\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 845\n      },\n      __self: this\n    }, \"Add:\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 847\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"Attandance\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 848\n      },\n      __self: this\n    }, \"Attendance\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 850\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"Attachment\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 851\n      },\n      __self: this\n    }, \"Attachment\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 853\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"Leave\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 854\n      },\n      __self: this\n    }, \"Leave\")))), React.createElement(Col, {\n      sm: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 858\n      },\n      __self: this\n    }, React.createElement(Tab.Content, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 859\n      },\n      __self: this\n    }, React.createElement(Tab.Pane, {\n      eventKey: \"Detail\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 860\n      },\n      __self: this\n    }, this.state.user !== null && React.createElement(ThisUserProfile, {\n      user: this.state.user,\n      authUserId: this.context.userId,\n      canDelete: this.state.canDelete,\n      attendanceDelete: this.deleteUserAttendanceItem,\n      leaveDelete: this.deleteUserLeaveItem,\n      attachmentDelete: this.deleteUserAttachmentItem,\n      onViewAttachment: this.onViewAttachment,\n      onCreatePdf: this.createPdf,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 862\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"Demographics\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 875\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"outline-primary\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.startUpdateUserHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 876\n      },\n      __self: this\n    }, \"Edit Demographics\"), this.state.updating === true && React.createElement(UpdateUserForm, {\n      canCancelProfile: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmUpdateHandler,\n      confirmText: \"Confirm\",\n      user: this.state.user,\n      authUserId: this.context.userId,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 878\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"userEditField\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 890\n      },\n      __self: this\n    }, this.state.selectedUser === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 892\n      },\n      __self: this\n    }, \"Select a Staff member from the Master List\"), this.state.selectedUser !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.startUpdateUserHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 897\n      },\n      __self: this\n    }, \"Edit a Single Field\"), this.state.updating && this.state.selectedUser !== null && React.createElement(UpdateUserFieldForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmUpdateFieldHandler,\n      confirmText: \"Confirm\",\n      user: this.state.selectedUser,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 902\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"Attandance\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 914\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"outline-primary\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      value: \"attendance\",\n      onClick: this.updateUserSpecialProfile.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 915\n      },\n      __self: this\n    }, \"Add Attendance\"), this.state.userUpdateField === 'attendance' && React.createElement(UpdateUserAttendanceForm, {\n      authUserId: this.context.userId,\n      canCancelProfile: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updateUserAttendanceHandler,\n      confirmText: \"Confirm\",\n      user: this.state.selectedUser,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 917\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"Attachment\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 929\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"outline-primary\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      value: \"attachments\",\n      onClick: this.updateUserSpecialProfile.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 930\n      },\n      __self: this\n    }, \"Add Attachment\"), this.state.userUpdateField === 'attachments' && React.createElement(UpdateUserAttachmentForm, {\n      authUserId: this.context.userId,\n      canCancelProfile: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updateUserAttachmentHandler,\n      confirmText: \"Confirm\",\n      user: this.state.selectedUser,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 932\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"Leave\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 944\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"outline-primary\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      value: \"leave\",\n      onClick: this.updateUserSpecialProfile.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 945\n      },\n      __self: this\n    }, \"Add Leave\"), this.state.userUpdateField === 'leave' && React.createElement(UpdateUserLeaveForm, {\n      authUserId: this.context.userId,\n      canCancelProfile: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updateUserLeaveHandler,\n      confirmText: \"Confirm\",\n      user: this.state.selectedUser,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 947\n      },\n      __self: this\n    }))))))))));\n  }\n\n}\n\nThisUserPage.contextType = AuthContext;\nexport default ThisUserPage;","map":{"version":3,"sources":["/Users/pedrojacob/Downloads/AMR/websites/office_records/ENT_EMR/frontend/src/pages/thisUser.js"],"names":["S3","React","Component","Container","Row","Col","Button","Tabs","Tab","Nav","AuthContext","AlertBox","AttachmentViewer","PdfCreator","LoadingOverlay","SidebarPage","UpdateUserForm","ThisUserProfile","UpdateUserFieldForm","UpdateUserAttendanceForm","UpdateUserAttachmentForm","UpdateUserLeaveForm","ThisUserPage","state","user","users","updating","isLoading","userUpdateField","userAlert","overlay","overlayStatus","canDelete","showAttachment","createPdf","pdfData","showThisAttachmentFile","showThisAttachmentType","isActive","startUpdateUserHandler","setState","modalConfirmUpdateHandler","event","token","context","userId","selectedUserId","selectedUser","_id","role","email","target","formGridEmail","value","password","formGridPassword","name","formGridName","dob","formGridDob","phone","formGridPhone","addressNumber","formGridAddressNumber","addressStreet","formGridAddressStreet","addressTown","formGridAddressTown","addressParish","formGridAddressParish","addressPostOffice","formGridAddressPostOffice","employmentDate","formGridEmploymentDate","formGridEmploymentDateTodayCheckbox","checked","Date","toISOString","slice","terminationDate","formGridTerminationDate","formGridTerminationDateTodayCheckbox","trim","length","address","number","street","town","parish","postOffice","requestBody","query","fetch","method","body","JSON","stringify","headers","Authorization","then","res","status","Error","json","resData","updatedUser","data","updateUser","push","responseAlert","getThisUser","catch","err","modalConfirmUpdateFieldHandler","field","formGridQuery","formGridFieldSelect","formGridField","updatedUserId","updateUserField","find","e","updatedUserPos","indexOf","slicedArray","splice","updateUserAttendanceHandler","console","log","formGridAttendanceStatus","_currentValue","fancyDate","formGridAttendanceDateTodayCheckbox","attendanceDate","formGridAttendanceDate","attendanceStatus","attendanceDescription","formGridAttendanceDescription","updateUserAttendance","updateUserLeaveHandler","leaveType","formGridLeaveType","leaveTitle","formGridLeaveTitle","leaveStartDate","formGridLeaveStartDate","formGridLeaveStartDateTodayCheckbox","leaveEndDate","formGridLeaveEndDate","formGridLeaveEndDateTodayCheckbox","updateUserLeave","updateUserAttachmentHandler","attachmentFormat","formGridAttachmentFormat","attachmentPath","file","config","bucketName","creds","s3","dirName","region","accessKeyId","secretAccessKey","ReactS3Client","newFileName","attachmentName","uploadFile","error","userAttachment","updateUserAttachment","modalCancelHandler","deleteUserAttendanceItem","props","date","substr","deleteUserAttendance","deleteUserLeaveItem","title","deleteUserLeave","deleteUserAttachmentItem","deleteUserAttachment","onViewAttachment","attachment","path","format","type","closeAttachmentView","attachments","attendance","atttendance","leave","closePdfCreator","componentDidMount","getCreds","thisUser","updateUserSpecialProfile","componentWillUnmount","render","bind","contextType"],"mappings":"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","sourcesContent":["import S3 from 'react-aws-s3';\nimport React, { Component } from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\nimport Nav from 'react-bootstrap/Nav';\n\nimport AuthContext from '../context/auth-context';\nimport AlertBox from '../components/AlertBox';\nimport AttachmentViewer from '../components/AttachmentViewer';\nimport PdfCreator from '../components/PdfCreator';\nimport LoadingOverlay from '../components/LoadingOverlay';\nimport SidebarPage from './Sidebar';\n\nimport UpdateUserForm from '../components/Forms/UpdateUserForm';\nimport ThisUserProfile from '../components/Users/thisUserProfile';\nimport UpdateUserFieldForm from '../components/Forms/UpdateUserFieldForm';\nimport UpdateUserAttendanceForm from '../components/Forms/UpdateUserAttendanceForm';\nimport UpdateUserAttachmentForm from '../components/Forms/UpdateUserAttachmentForm';\nimport UpdateUserLeaveForm from '../components/Forms/UpdateUserLeaveForm';\n\nimport './Users.css';\n\nclass ThisUserPage extends Component {\n  state = {\n    user: null,\n    users: [],\n    updating: false,\n    isLoading: false,\n    userUpdateField: null,\n    userAlert: null,\n    overlay: false,\n    overlayStatus: \"test\",\n    canDelete: null,\n    showAttachment: false,\n    createPdf: false,\n    pdfData: null,\n    showThisAttachmentFile: null,\n    showThisAttachmentType: null,\n  };\n  isActive = true;\n\n  static contextType = AuthContext;\n\n  componentDidMount() {\n\n    if (this.context.user.name === \"Lord-of-the-Manor\"){\n      this.setState({canDelete: true, overlay: true, overlayStatus: \"loading your profile...\"})\n    }\n    this.getThisUser();\n    this.getCreds();\n  }\n\n  startUpdateUserHandler = () => {\n    this.setState({ updating: true });\n  };\n\n  modalConfirmUpdateHandler = (event) => {\n\n    const token = this.context.token;\n    let userId = this.context.userId;\n    let selectedUserId = this.context.selectedUser._id;\n    if(userId !== selectedUserId && this.context.user.role !== 'admin') {\n      this.setState({userAlert: \"Not the creator or Admin! No edit permission!!\"});\n      selectedUserId = null;\n    }\n    this.setState({ updating: false, userAlert: \"Updating selected Staff ...\" });\n    let email = event.target.formGridEmail.value;\n    let password = event.target.formGridPassword.value;\n    let name = event.target.formGridName.value;\n    let role = this.context.user.role;\n    let dob = event.target.formGridDob.value;\n    let phone = event.target.formGridPhone.value;\n    let addressNumber = event.target.formGridAddressNumber.value;\n    let addressStreet = event.target.formGridAddressStreet.value;\n    let addressTown = event.target.formGridAddressTown.value;\n    let addressParish = event.target.formGridAddressParish.value;\n    let addressPostOffice = event.target.formGridAddressPostOffice.value;\n    let employmentDate = event.target.formGridEmploymentDate.value;\n    if (event.target.formGridEmploymentDateTodayCheckbox.checked === true) {\n      employmentDate = new Date().toISOString().slice(0,10);\n    }\n    let terminationDate = event.target.formGridTerminationDate.value;\n    if (event.target.formGridTerminationDateTodayCheckbox.checked === true) {\n      terminationDate = new Date().toISOString().slice(0,10);\n    }\n    if (email.trim().length === 0 ) {\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      email = this.context.user.email;\n    }\n    if (password.trim().length === 0) {\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      password = this.context.user.password;\n    }\n    if (name.trim().length === 0) {\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      name = this.context.user.name;\n    }\n    // if (role.trim().length === 0) {\n    //   console.log(\"blank fields detected!!!...filling w/ previous data...\");\n    //   role = this.state.user.role;\n    // }\n    if (dob.trim().length === 0) {\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      dob = this.context.user.dob;\n    }\n    if (phone.trim().length === 0) {\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      phone = this.context.user.phone;\n    }\n    if (addressNumber.trim().length === 0) {\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      addressNumber = this.context.user.address.number;\n    }\n    if (addressStreet.trim().length === 0) {\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      addressStreet = this.context.user.address.street;\n    }\n    if (addressTown.trim().length === 0) {\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      addressTown = this.context.user.address.town;\n    }\n    if (addressParish.trim().length === 0) {\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      addressParish = this.context.user.address.parish;\n    }\n    if (addressPostOffice.trim().length === 0) {\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      addressPostOffice = this.context.user.address.postOffice;\n    }\n    if (employmentDate.trim().length === 0) {\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      employmentDate = this.context.user.employmentDate;\n    }\n    if (terminationDate.trim().length === 0) {\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      terminationDate = this.context.user.terminationDate;\n    }\n\n    const requestBody = {\n      query: `\n        mutation {updateUser(userId:\"${userId}\",selectedUserId:\"${userId}\",userInput: {email:\"${email}\",password:\"${password}\",name:\"${name}\",dob:\"${dob}\",addressNumber:${addressNumber},addressStreet:\"${addressStreet}\",addressTown:\"${addressTown}\",addressParish:\"${addressParish}\", addressPostOffice:\"${addressPostOffice}\",phone:\"${phone}\",role:\"${role}\",employmentDate:\"${employmentDate}\",terminationDate:\"${terminationDate}\"})\n        {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n        `};\n\n    // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }})\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const updatedUser = resData.data.updateUser;\n        this.state.users.push(updatedUser);\n        this.context.users = this.state.users;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert, user: updatedUser})\n        this.getThisUser();\n      })\n      .catch(err => {\n        this.setState({userAlert: err});\n      });\n    };\n\n    modalConfirmUpdateFieldHandler = (event) => {\n\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedUserId = this.context.selectedUser._id;\n      if(userId !== selectedUserId && this.context.user.role !== 'admin') {\n        this.setState({userAlert: \"Not the creator or Admin! No edit permission!!\"});\n        selectedUserId = null;\n      }\n\n      this.setState({ updating: false, userAlert: \"Updating selected Staff by Field...\" });\n\n      let field = null;\n      let query = event.target.formGridQuery.value;\n      if (event.target.formGridFieldSelect.value === \"select\") {\n        field = event.target.formGridField.value;\n      } else {\n        field = event.target.formGridFieldSelect.value;\n      }\n\n      const requestBody = {\n        query:`\n          mutation{updateUserField(userId:\"${userId}\",selectedUserId:\"${userId}\",field:\"${field}\",query:\"${query}\")\n          {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n        `};\n\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          const updatedUserId = resData.data.updateUserField._id;\n          const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n          const updatedUserPos = this.state.users.indexOf(updatedUser);\n          const slicedArray = this.state.users.splice(updatedUserPos, 1);\n          this.state.users.push(resData.data.updateUserField);\n          this.context.users = this.state.users;\n          const responseAlert = JSON.stringify(resData.data).slice(2,25);\n          this.setState({ userAlert: responseAlert})\n          this.getThisUser();\n        })\n        .catch(err => {\n          this.setState({userAlert: err});\n        });\n    }\n\n  updateUserAttendanceHandler = (event) => {\n    const token = this.context.token;\n    const userId = this.state.user._id;\n    console.log(\"UpdateUserAttendanceFormData:  \", event.target.formGridAttendanceStatus.value, );\n\n    console.log(`\n      dates & raisins...\n      this.context.fancyDate: ${new Date(AuthContext._currentValue.fancyDate).toISOString().slice(0,10)},\n      event.target.formGridAttendanceDateTodayCheckbox.checked: ${event.target.formGridAttendanceDateTodayCheckbox.checked},\n      `);\n    this.setState({ updating: false , userUpdateField: null, userAlert: \"Adding Attendance for selected Staff...\" });\n\n    let attendanceDate = event.target.formGridAttendanceDate.value;\n    if (event.target.formGridAttendanceDateTodayCheckbox.checked === true) {\n      console.log(\"1\");\n      attendanceDate = new Date().toISOString().slice(0,10);\n    }\n\n    // if (\n    //   AuthContext._currentValue.fancyDate !== null &&\n    //   event.target.formGridAttendanceDateTodayCheckbox.checked !== true\n    // ) {\n    //   console.log(\"2\");\n    //   attendanceDate = new Date(AuthContext._currentValue.fancyDate).toISOString().slice(0,10);\n    // }\n\n    let attendanceStatus = event.target.formGridAttendanceStatus.value;\n    let attendanceDescription = event.target.formGridAttendanceDescription.value;\n\n    if (attendanceDate.trim().length === 0) {\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      attendanceDate = this.context.selectedUser.attendanceDate;\n    }\n    if (attendanceStatus.trim().length === 0) {\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      attendanceStatus = this.context.selectedUser.attendanceStatus;\n    }\n    if (attendanceDescription.trim().length === 0) {\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      attendanceDescription = this.context.selectedUser.attendanceDescription;\n    }\n\n      const requestBody = {\n        query:`\n          mutation {updateUserAttendance(userId:\"${userId}\", selectedUserId:\"${userId}\",userInput:{attendanceDate:\"${attendanceDate}\",attendanceStatus:\"${attendanceStatus}\",attendanceDescription:\"${attendanceDescription}\"})\n          {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n        `};\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }})\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          const updatedUserId = resData.data.updateUserAttendance._id;\n          const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n          const updatedUserPos = this.state.users.indexOf(updatedUser);\n          const slicedArray = this.state.users.splice(updatedUserPos, 1);\n          this.state.users.push(resData.data.updateUserAttendance);\n          this.context.users = this.state.users;\n          const responseAlert = JSON.stringify(resData.data).slice(2,25);\n          this.setState({ userAlert: responseAlert})\n          this.getThisUser();\n        })\n        .catch(err => {\n          this.setState({userAlert: err});\n        });\n  };\n\n\n  updateUserLeaveHandler = (event) => {\n    const token = this.context.token;\n    const userId = this.context.userId;\n    let selectedUserId = this.context.selectedUser._id;\n    if(userId !== selectedUserId && this.context.user.role !== 'admin') {\n      this.setState({userAlert: \"Not the creator or Admin! No edit permission!!\"});\n      selectedUserId = null;\n    }\n\n    this.setState({ updating: false , userUpdateField: null, userAlert: \"Adding Leave for selected Staff...\" });\n\n    let leaveType = event.target.formGridLeaveType.value;\n    let leaveTitle = event.target.formGridLeaveTitle.value;\n    let leaveStartDate = event.target.formGridLeaveStartDate.value;\n    if (event.target.formGridLeaveStartDateTodayCheckbox.checked === true) {\n      leaveStartDate = new Date().toISOString().slice(0,10);\n    }\n\n    let leaveEndDate = event.target.formGridLeaveEndDate.value;\n    if (event.target.formGridLeaveEndDateTodayCheckbox.checked === true) {\n      leaveEndDate = new Date().toISOString().slice(0,10);\n    }\n\n    if (leaveType.trim().length === 0) {\n      setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      leaveType = this.context.selectedUser.leaveType;\n    }\n    if (leaveTitle.trim().length === 0) {\n      setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      leaveTitle = this.context.selectedUser.leaveTitle;\n    }\n    if (leaveStartDate.trim().length === 0) {\n      setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      leaveStartDate = this.context.selectedUser.leaveStartDate;\n    }\n    if (leaveEndDate.trim().length === 0) {\n      setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      leaveEndDate = this.context.selectedUser.leaveEndDate;\n    }\n\n    const requestBody = {\n      query:`\n        mutation {updateUserLeave(userId:\"${userId}\", selectedUserId:\"${userId}\",userInput:{leaveType:\"${leaveType}\",leaveTitle:\"${leaveTitle}\",leaveStartDate:\"${leaveStartDate}\",leaveEndDate:\"${leaveEndDate}\"})\n        {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n      `};\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }})\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const updatedUserId = resData.data.updateUserLeave._id;\n        const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n        const updatedUserPos = this.state.users.indexOf(updatedUser);\n        const slicedArray = this.state.users.splice(updatedUserPos, 1);\n        this.state.users.push(resData.data.updateUserLeave);\n        this.context.users = this.state.users;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert})\n        this.getThisUser();\n      })\n      .catch(err => {\n        this.setState({userAlert: err});\n      });\n  };\n\n  updateUserAttachmentHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n\n  this.setState({ updating: false , userUpdateField: null, userAlert: \"Adding Attachment to selected Staff...\" });\n\n  let attachmentFormat = event.target.formGridAttachmentFormat.value;\n  let attachmentPath = \"uploads/staff/\"+userId+\"/attachments\";\n  let file = AuthContext._currentValue.file;\n\n  const config = {\n    bucketName: this.context.creds.s3.bucketName,\n    dirName: attachmentPath,\n    region: this.context.creds.s3.region,\n    accessKeyId: this.context.creds.s3.accessKeyId,\n    secretAccessKey: this.context.creds.s3.secretAccessKey,\n  }\n  const ReactS3Client = new S3(config);\n  const newFileName = file.name;\n  const attachmentName = newFileName;\n\n  ReactS3Client\n      .uploadFile(file, newFileName)\n      .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n      .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n  if (\n    attachmentName.trim().length === 0 ||\n    attachmentFormat.trim().length === 0 ||\n    attachmentPath.trim().length === 0\n) {\n    this.setState({ userAlert: \"blank fields detected!!! try again\"});\n    return\n  }\n\n  const userAttachment = { attachmentName, attachmentFormat, attachmentPath }\n  console.log(`\n    adding user attendance item...\n    userId: ${userId},\n    selectedUserId: ${userId}\n    attachmentName: ${attachmentName},\n    attachmentFormat: ${attachmentFormat},\n    attachmentPath: ${attachmentPath}\n    `);\n    this.setState({userAlert: \"adding user attachment item...\"})\n\n    const requestBody = {\n      query:`\n        mutation{updateUserAttachment(userId:\"${userId}\",selectedUserId:\"${userId}\",userInput:{attachmentName:\"${attachmentName}\",attachmentFormat:\"${attachmentFormat}\",attachmentPath:\"${attachmentPath}\"})\n        {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n      `};\n\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const updatedUserId = resData.data.updateUserAttachment._id;\n        const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n        const updatedUserPos = this.state.users.indexOf(updatedUser);\n        const slicedArray = this.state.users.splice(updatedUserPos, 1);\n        this.state.users.push(resData.data.updateUserAttachment);\n        this.context.users = this.state.users;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert})\n        this.getThisUser();\n      })\n      .catch(err => {\n        this.setState({userAlert: err});\n      });\n}\n\n\n  getThisUser() {\n    this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n      query {getThisUser\n        {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n        `};\n\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }})\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"resdata...\" + JSON.stringify(resData));\n        const thisUser = resData.data.getThisUser;\n        if (this.isActive) {\n          this.setState({ user: thisUser, isLoading: false, overlay: false });\n        }\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n        if (this.isActive) {\n          this.setState({ isLoading: false });\n        }\n      });\n  }\n\n  getCreds() {\n    this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n      query {getCreds\n        {atlas{user,pw,db},s3{bucketName,region,accessKeyId,secretAccessKey},jwt{encode},gdrive{clientId,developerKey}}}\n        `};\n\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }})\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const creds = resData.data.getCreds;\n        if (this.isActive) {\n          this.setState({ isLoading: false });\n          this.context.creds = creds;\n        }\n      })\n      .catch(err => {\n        this.setState({userAlert: err});\n        if (this.isActive) {\n          this.setState({ isLoading: false });\n        }\n      });\n  }\n\n\n  modalCancelHandler = () => {\n    this.setState({ updating: false  });\n  };\n\n\n  deleteUserAttendanceItem = (props) => {\n\n    let token = this.context.token;\n    let userId = this.context.userId;\n    let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n    const requestBody = {\n      query:`\n       mutation{deleteUserAttendance(userId:\"${userId}\",selectedUserId:\"${userId}\",attendanceDate:\"${date}\")\n       {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}\n      }\n     `};\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const updatedUserId = resData.data.deleteUserAttendance._id;\n        const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n        const updatedUserPos = this.state.users.indexOf(updatedUser);\n        const slicedArray = this.state.users.splice(updatedUserPos, 1);\n        this.state.users.push(resData.data.deleteUserAttendance);\n        this.context.users = this.state.users;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert})\n        this.getThisUser();\n      })\n      .catch(err => {\n        this.setState({userAlert: err});\n      });\n  }\n\n  deleteUserLeaveItem = (props) => {\n\n    let token = this.context.token;\n    let userId = this.context.userId;\n\n    const requestBody = {\n      query:`\n       mutation{deleteUserLeave(userId:\"${userId}\",selectedUserId:\"${userId}\",leaveTitle:\"${props.title}\")\n       {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n    `};\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const updatedUserId = resData.data.deleteUserLeave._id;\n        const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n        const updatedUserPos = this.state.users.indexOf(updatedUser);\n        const slicedArray = this.state.users.splice(updatedUserPos, 1);\n        this.state.users.push(resData.data.deleteUserLeave);\n        this.context.users = this.state.users;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert})\n      })\n      .catch(err => {\n        this.setState({userAlert: err});\n      });\n  }\n\n  deleteUserAttachmentItem = (props) => {\n\n    let token = this.context.token;\n    let userId = this.context.userId;\n\n    console.log(`\n      delete user Attachment item:\n      props: ${JSON.stringify(props)},\n      token: ${token},\n      userId: ${userId},\n      selectedUserId: ${userId},\n      `);\n\n      // console.log(`\n      //   deleting from s3...\n      //   file.name: ${props.name},\n      //   `);\n      //\n      //   const config = {\n      //     bucketName: this.context.creds.s3.bucketName,\n      //     dirName: props.path,\n      //     region: this.context.creds.s3.region,\n      //     accessKeyId: this.context.creds.s3.accessKeyId,\n      //     secretAccessKey: this.context.creds.s3.secretAccessKey,\n      //   }\n      // const ReactS3Client = new S3(config);\n      // const filename = props.name;\n      // // const attachmentName = newFileName;\n      // //\n      // S3FileUpload\n      // .deleteFile(filename, config)\n      // .then(response => console.log(response))\n      // .catch(err => console.error(err))\n\n\n      const requestBody = {\n        query:`\n         mutation{deleteUserAttachment(userId:\"${userId}\",selectedUserId:\"${userId}\",attachmentName:\"${props.name}\")\n         {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n      `};\n\n\n          fetch('http://localhost:10000/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n              'Content-Type': 'application/json',\n              Authorization: 'Bearer ' + token\n            }\n          })\n            .then(res => {\n              if (res.status !== 200 && res.status !== 201) {\n                throw new Error('Failed!');\n              }\n              return res.json();\n            })\n            .then(resData => {\n              // let deletedUser = resData.data.deleteUserAttachment;\n              // console.log(deletedUser);\n\n              const updatedUserId = resData.data.deleteUserAttachment._id;\n              const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n              const updatedUserPos = this.state.users.indexOf(updatedUser);\n              const slicedArray = this.state.users.splice(updatedUserPos, 1);\n              console.log(\"updatedUser:  \", JSON.stringify(updatedUser),\"  updatedUserPos:  \", updatedUserPos, \"  slicedArray:  \", slicedArray);\n\n              this.state.users.push(resData.data.deleteUserAttachment);\n              this.context.users = this.state.users;\n              const responseAlert = JSON.stringify(resData.data).slice(2,25);\n              this.setState({ userAlert: responseAlert})\n              // this.setState({ userAlert: responseAlert, selectedUser: resData.data.deleteUserAttachment})\n              this.getThisUser();\n\n            })\n            .catch(err => {\n              console.log(err);\n            });\n  }\n\n\n  updateUserSpecialProfile (event) {\n    console.log(\"special field to update:  \", event.target.value);\n    const field = event.target.value;\n    this.setState({ userUpdateField: field});\n  }\n\n  onViewAttachment = (attachment) => {\n    console.log(`\n      setting up attachment viewer...\n      attachment: ${JSON.stringify(attachment)}\n      `);\n\n      const file = \"https://ent-emr-bucket.s3-us-east-2.amazonaws.com/\"+attachment.path+\"/\"+attachment.name+\".\"+attachment.format;\n      const type = attachment.format;\n      this.setState({showThisAttachmentFile: file, showThisAttachmentType: type})\n\n      this.setState({showAttachment: true})\n  }\n\n  closeAttachmentView = () => {\n    console.log(`\n      closing attachment viewer...\n      `);\n      this.setState({showAttachment: false})\n  }\n\n  createPdf = (user) => {\n    console.log(`\n        creating pdf...\n        user: ${JSON.stringify(user)}g\n      `);\n\n      const pdfData = {\n          title: \"This pdf is supplied with your profile data...\",\n          user: {\n            _id: user._id,\n            email: user.email,\n            password: user.password,\n            name: user.name,\n            dob: user.dob,\n            address:{\n              number: user.address.number,\n              street: user.address.street,\n              town: user.address.town,\n              parish: user.address.parish,\n              postOffice: user.address.postOffice,\n            },\n            phone: user.phone,\n            role: user.role,\n            employmentDate: user.employmentDate,\n            terminationDate: user.terminationDate,\n            attachments: user.attachments,\n            attendance: user.atttendance,\n            leave: user.leave\n          }\n      };\n\n    this.setState({createPdf: true, pdfData: pdfData})\n  }\n\n  closePdfCreator = () => {\n    console.log(`\n      closing pdf creator...\n      `);\n      this.setState({createPdf: false, pdfData: null})\n  }\n\n\n\n  componentWillUnmount() {\n    this.isActive = false;\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n\n      {this.state.showAttachment === true && (\n        <AttachmentViewer\n          onCloseAttachmentView={this.closeAttachmentView}\n          attachmentFile={this.state.showThisAttachmentFile}\n          attachmentType={this.state.showThisAttachmentType}\n        />\n      )}\n\n      {this.state.createPdf === true && (\n          <PdfCreator\n            pdfData={this.state.pdfData}\n            onClosePdfCreator={this.closePdfCreator}\n          />\n      )}\n\n      <Row>\n      <Col md={3} className=\"MasterCol1\">\n      <AlertBox\n        authUserId={this.context.userId}\n        alert={this.state.userAlert}\n      />\n\n      {this.state.overlay === true && (\n        <LoadingOverlay\n          status={this.state.overlayStatus}\n        />\n      )}\n\n      <SidebarPage\n        you={this.state.user}\n      />\n      </Col>\n\n      <Col md={9} className=\"MasterCol2\">\n        <Container className=\"containerProfile\">\n\n        <Tab.Container id=\"left-tabs-example\" defaultActiveKey=\"Detail\">\n          <Row>\n            <Col sm={2}>\n              <Nav variant=\"pills\" className=\"flex-column\">\n                <Nav.Item>\n                  <Nav.Link eventKey=\"Detail\">You</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey=\"disabled\" disabled>Edit:</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey=\"Demographics\">Demographics</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey=\"userEditField\">Single Field</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey=\"disabled\" disabled>Add:</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey=\"Attandance\">Attendance</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey=\"Attachment\">Attachment</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey=\"Leave\">Leave</Nav.Link>\n                </Nav.Item>\n              </Nav>\n            </Col>\n            <Col sm={10}>\n              <Tab.Content>\n                <Tab.Pane eventKey=\"Detail\">\n                  {this.state.user !== null && (\n                      <ThisUserProfile\n                        user={this.state.user}\n                        authUserId={this.context.userId}\n                        canDelete={this.state.canDelete}\n                        attendanceDelete={this.deleteUserAttendanceItem}\n                        leaveDelete={this.deleteUserLeaveItem}\n                        attachmentDelete={this.deleteUserAttachmentItem}\n                        onViewAttachment={this.onViewAttachment}\n                        onCreatePdf={this.createPdf}\n                      />\n                    )}\n                </Tab.Pane>\n\n                <Tab.Pane eventKey=\"Demographics\">\n                  <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" onClick={this.startUpdateUserHandler}>Edit Demographics</Button>\n                  {this.state.updating === true && (\n                    <UpdateUserForm\n                    canCancelProfile\n                      canConfirm\n                      onCancel={this.modalCancelHandler}\n                      onConfirm={this.modalConfirmUpdateHandler}\n                      confirmText=\"Confirm\"\n                      user={this.state.user}\n                      authUserId={this.context.userId}\n                    />\n                  )}\n                </Tab.Pane>\n\n                <Tab.Pane eventKey=\"userEditField\">\n                  {this.state.selectedUser === null && (\n                    <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                      Select a Staff member from the Master List\n                    </Button>\n                  )}\n                  {this.state.selectedUser !== null && (\n                    <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" onClick={this.startUpdateUserHandler}>Edit a Single Field</Button>\n                  )}\n                  {this.state.updating &&\n                    this.state.selectedUser !== null\n                    && (\n                      <UpdateUserFieldForm\n                        authUserId={this.context.userId}\n                        canCancel\n                        canConfirm\n                        onCancel={this.modalCancelHandler}\n                        onConfirm={this.modalConfirmUpdateFieldHandler}\n                        confirmText=\"Confirm\"\n                        user={this.state.selectedUser}\n                      />\n                  )}\n                </Tab.Pane>\n\n                <Tab.Pane eventKey=\"Attandance\">\n                  <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" value='attendance' onClick={this.updateUserSpecialProfile.bind(this)}>Add Attendance</Button>\n                  {this.state.userUpdateField === 'attendance' && (\n                    <UpdateUserAttendanceForm\n                    authUserId={this.context.userId}\n                    canCancelProfile\n                      canConfirm\n                      onCancel={this.modalCancelHandler}\n                      onConfirm={this.updateUserAttendanceHandler}\n                      confirmText=\"Confirm\"\n                      user={this.state.selectedUser}\n                    />\n                  )}\n                </Tab.Pane>\n\n                <Tab.Pane eventKey=\"Attachment\">\n                  <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" value='attachments' onClick={this.updateUserSpecialProfile.bind(this)}>Add Attachment</Button>\n                  {this.state.userUpdateField === 'attachments' && (\n                    <UpdateUserAttachmentForm\n                    authUserId={this.context.userId}\n                    canCancelProfile\n                      canConfirm\n                      onCancel={this.modalCancelHandler}\n                      onConfirm={this.updateUserAttachmentHandler}\n                      confirmText=\"Confirm\"\n                      user={this.state.selectedUser}\n                    />\n                  )}\n                </Tab.Pane>\n\n                <Tab.Pane eventKey=\"Leave\">\n                  <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" value='leave' onClick={this.updateUserSpecialProfile.bind(this)}>Add Leave</Button>\n                  {this.state.userUpdateField === 'leave' && (\n                    <UpdateUserLeaveForm\n                    authUserId={this.context.userId}\n                    canCancelProfile\n                      canConfirm\n                      onCancel={this.modalCancelHandler}\n                      onConfirm={this.updateUserLeaveHandler}\n                      confirmText=\"Confirm\"\n                      user={this.state.selectedUser}\n                    />\n                  )}\n                </Tab.Pane>\n              </Tab.Content>\n            </Col>\n          </Row>\n        </Tab.Container>\n\n\n\n        </Container>\n      </Col>\n      </Row>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default ThisUserPage;\n"]},"metadata":{},"sourceType":"module"}