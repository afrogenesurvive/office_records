{"ast":null,"code":"var _jsxFileName = \"/Users/pedrojacob/Downloads/AMR/websites/office_records/ENT_EMR/frontend/src/pages/thisUser.js\";\nimport React, { Component } from 'react';\nimport Modal from '../components/Modal/Modal';\nimport Backdrop from '../components/Backdrop/Backdrop';\nimport ThisUserProfile from '../components/Users/thisUserProfile';\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\nimport './Users.css';\n\nclass UsersPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      user: null,\n      updating: false,\n      isLoading: false\n    };\n    this.isActive = true;\n\n    this.modalConfirmUpdateHandler = event => {\n      let userId = this.context.userId;\n      let selectedUserId = this.state.selectedUser._id;\n\n      if (userId !== selectedUserId && this.context.user.role !== 'admin') {\n        console.log(\"Not the creator or Admin! No edit permission!!\");\n        selectedUserId = null;\n      } // console.log(\"UpdateUserFormData:  \", event);\n\n\n      console.log(\"UpdateUserFormData:  \", event.target.formGridEmail.value);\n      this.setState({\n        updating: false\n      });\n      let email = event.target.formGridEmail.value;\n      let password = event.target.formGridPassword.value;\n      let name = event.target.formGridName.value;\n      let role = event.target.formGridRole.value;\n\n      if (email.trim().length === 0 || password.trim().length === 0 || name.trim().length === 0 || role.trim().length === 0) {\n        console.log(\"blank feilds detected!!...email:  \", email, \"  password:  \", password, \"  name:  \", name, \"  role:  \", role);\n        email = this.state.selectedUser.email;\n        password = this.state.selectedUser.password;\n        name = this.state.selectedUser.name;\n        role = this.state.selectedUser.role;\n        console.log(\"inputting previous data...email:  \", email, \"  password:  \", password, \"  name:  \", name, \"  role:  \", role); // return;\n      }\n\n      const user = {\n        email,\n        password,\n        name,\n        role\n      };\n      console.log(\"updating user.. \" + JSON.stringify(user));\n      const requestBody = {\n        query: \"\\n          mutation UpdateUser($userId: ID!, $selectedUserId: ID!, $email: String!, $password: String!, $name: String!, $role: String!) {\\n            updateUser(userId: $userId, selectedUserId: $selectedUserId, userInput: {email: $email, password: $password, name: $name, role: $role}) {\\n              _id\\n              email\\n              password\\n              name\\n              role\\n            }\\n          }\\n        \",\n        variables: {\n          userId: userId,\n          selectedUserId: selectedUserId,\n          email: email,\n          password: password,\n          name: name,\n          role: role\n        }\n      };\n      const token = this.context.token;\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n        const updatedUserId = resData.data.updateUser._id;\n        const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n        const updatedUserPos = this.state.users.indexOf(updatedUser);\n        const slicedArray = this.state.users.splice(updatedUserPos, 1);\n        console.log(\"updatedUser:  \", JSON.stringify(updatedUser), \"  updatedUserPos:  \", updatedUserPos, \"  slicedArray:  \", slicedArray);\n        this.state.users.push({\n          _id: resData.data.updateUser._id,\n          email: resData.data.updateUser.email,\n          name: resData.data.updateUser.name,\n          role: resData.data.updateUser.role\n        });\n        this.fetchUsers();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.emailElRef = React.createRef();\n    this.passwordElRef = React.createRef();\n    this.nameElRef = React.createRef();\n    this.roleElRef = React.createRef();\n    this.user = null;\n  }\n\n  componentDidMount() {\n    this.getThisUser();\n  }\n\n  getThisUser() {\n    this.setState({\n      isLoading: true\n    });\n    const requestBody = {\n      query: \"\\n          query {\\n            getThisUser {\\n              _id\\n              email\\n              password\\n              name\\n              role\\n            }\\n          }\\n        \"\n    };\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    }).then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n\n      return res.json();\n    }).then(resData => {\n      // console.log(\"resdata...\" + JSON.stringify(resData));\n      const thisUser = resData.data.getThisUser;\n\n      if (this.isActive) {\n        this.setState({\n          user: thisUser,\n          isLoading: false\n        });\n        this.context.user = thisUser;\n        console.log(\"thisUser context, user object.name ...\" + this.context.user.name);\n        console.log(\"thisUser context, user object.role ...\" + this.context.user.role);\n        sessionStorage.setItem('thisUser', JSON.stringify(thisUser));\n      }\n    }).catch(err => {\n      console.log(err);\n\n      if (this.isActive) {\n        this.setState({\n          isLoading: false\n        });\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    this.isActive = false;\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }, this.state.updating && React.createElement(UpdateUserForm, {\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmUpdateHandler,\n      confirmText: \"Confirm\",\n      user: this.state.user,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }), this.state.isLoading ? React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }) : React.createElement(ThisUserProfile, {\n      user: this.state.user,\n      authUserId: this.context.userId,\n      onEdit: this.startUpdateUserHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }));\n  }\n\n}\n\nUsersPage.contextType = AuthContext;\nexport default UsersPage;","map":{"version":3,"sources":["/Users/pedrojacob/Downloads/AMR/websites/office_records/ENT_EMR/frontend/src/pages/thisUser.js"],"names":["React","Component","Modal","Backdrop","ThisUserProfile","Spinner","AuthContext","UsersPage","constructor","props","state","user","updating","isLoading","isActive","modalConfirmUpdateHandler","event","userId","context","selectedUserId","selectedUser","_id","role","console","log","target","formGridEmail","value","setState","email","password","formGridPassword","name","formGridName","formGridRole","trim","length","JSON","stringify","requestBody","query","variables","token","fetch","method","body","headers","Authorization","then","res","status","Error","json","resData","updatedUserId","data","updateUser","updatedUser","users","find","e","updatedUserPos","indexOf","slicedArray","splice","push","fetchUsers","catch","err","emailElRef","createRef","passwordElRef","nameElRef","roleElRef","componentDidMount","getThisUser","thisUser","sessionStorage","setItem","componentWillUnmount","render","modalCancelHandler","startUpdateUserHandler","contextType"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport Modal from '../components/Modal/Modal';\nimport Backdrop from '../components/Backdrop/Backdrop';\nimport ThisUserProfile from '../components/Users/thisUserProfile';\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\nimport './Users.css';\n\nclass UsersPage extends Component {\n  state = {\n    user: null,\n    updating: false,\n    isLoading: false\n  };\n  isActive = true;\n\n  static contextType = AuthContext;\n\n  constructor(props) {\n    super(props);\n    this.emailElRef = React.createRef();\n    this.passwordElRef = React.createRef();\n    this.nameElRef = React.createRef();\n    this.roleElRef = React.createRef();\n    this.user = null;\n  }\n\n  componentDidMount() {\n    this.getThisUser();\n  }\n\n\n  modalConfirmUpdateHandler = (event) => {\n\n    let userId = this.context.userId;\n    let selectedUserId = this.state.selectedUser._id;\n    if(userId !== selectedUserId && this.context.user.role !== 'admin') {\n\n      console.log(\"Not the creator or Admin! No edit permission!!\");\n      selectedUserId = null;\n    }\n\n    // console.log(\"UpdateUserFormData:  \", event);\n    console.log(\"UpdateUserFormData:  \", event.target.formGridEmail.value);\n\n\n    this.setState({ updating: false });\n    let email = event.target.formGridEmail.value;\n    let password = event.target.formGridPassword.value;\n    let name = event.target.formGridName.value;\n    let role = event.target.formGridRole.value;\n\n\n\n    if (\n      email.trim().length === 0 ||\n      password.trim().length === 0 ||\n      name.trim().length === 0 ||\n      role.trim().length === 0\n    ) {\n      console.log(\"blank feilds detected!!...email:  \", email, \"  password:  \", password, \"  name:  \", name, \"  role:  \", role);\n\n      email = this.state.selectedUser.email;\n      password = this.state.selectedUser.password;\n      name = this.state.selectedUser.name;\n      role = this.state.selectedUser.role;\n      console.log(\"inputting previous data...email:  \", email, \"  password:  \", password, \"  name:  \", name, \"  role:  \", role);\n\n      // return;\n    }\n\n\n\n    const user = { email, password, name, role };\n    console.log(\"updating user.. \" + JSON.stringify(user));\n\n    const requestBody = {\n      query: `\n          mutation UpdateUser($userId: ID!, $selectedUserId: ID!, $email: String!, $password: String!, $name: String!, $role: String!) {\n            updateUser(userId: $userId, selectedUserId: $selectedUserId, userInput: {email: $email, password: $password, name: $name, role: $role}) {\n              _id\n              email\n              password\n              name\n              role\n            }\n          }\n        `,\n        variables: {\n          userId: userId,\n          selectedUserId: selectedUserId,\n          email: email,\n          password: password,\n          name: name,\n          role: role\n        }\n    };\n\n    const token = this.context.token;\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n\n        const updatedUserId = resData.data.updateUser._id;\n        const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n        const updatedUserPos = this.state.users.indexOf(updatedUser);\n        const slicedArray = this.state.users.splice(updatedUserPos, 1);\n        console.log(\"updatedUser:  \", JSON.stringify(updatedUser),\"  updatedUserPos:  \", updatedUserPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.users.push(\n          {\n              _id: resData.data.updateUser._id,\n              email: resData.data.updateUser.email,\n              name: resData.data.updateUser.name,\n              role: resData.data.updateUser.role\n            }\n        );\n        this.fetchUsers();\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n\n  getThisUser() {\n\n    this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n          query {\n            getThisUser {\n              _id\n              email\n              password\n              name\n              role\n            }\n          }\n        `\n    };\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        // console.log(\"resdata...\" + JSON.stringify(resData));\n        const thisUser = resData.data.getThisUser;\n        if (this.isActive) {\n\n          this.setState({ user: thisUser, isLoading: false });\n\n          this.context.user = thisUser;\n          console.log(\"thisUser context, user object.name ...\" + this.context.user.name);\n          console.log(\"thisUser context, user object.role ...\" + this.context.user.role);\n\n          sessionStorage.setItem('thisUser', JSON.stringify(thisUser));\n\n        }\n      })\n      .catch(err => {\n        console.log(err);\n        if (this.isActive) {\n          this.setState({ isLoading: false });\n        }\n      });\n  }\n\n\n  componentWillUnmount() {\n    this.isActive = false;\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n      {this.state.updating && (\n        <UpdateUserForm\n        canCancel\n          canConfirm\n          onCancel={this.modalCancelHandler}\n          onConfirm={this.modalConfirmUpdateHandler}\n          confirmText=\"Confirm\"\n          user={this.state.user}\n        />\n      )}\n\n        {this.state.isLoading ? (\n          <Spinner />\n        ) : (\n          <ThisUserProfile\n            user={this.state.user}\n            authUserId={this.context.userId}\n            onEdit={this.startUpdateUserHandler}\n          />\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default UsersPage;\n"]},"metadata":{},"sourceType":"module"}