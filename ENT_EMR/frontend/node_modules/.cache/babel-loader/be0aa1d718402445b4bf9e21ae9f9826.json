{"ast":null,"code":"var _jsxFileName = \"/Users/pedrojacob/Downloads/AMR/websites/office_records/ENT_EMR/frontend/src/pages/Auth.js\";\nimport React, { Component } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport { NavLink } from 'react-router-dom';\nimport Form from 'react-bootstrap/Form';\nimport './Auth.css';\nimport AuthContext from '../context/auth-context'; // import ThisUserContext from '../context/thisUser-context';\n\nclass AuthPage extends Component {\n  // state = {\n  //   isLogin: true\n  // };\n  // static contextType = ThisUserContext;\n  constructor(props) {\n    super(props);\n\n    this.submitHandler = event => {\n      console.log(\"login function...\");\n      event.preventDefault();\n      const email = this.emailEl.current.value;\n      const password = this.passwordEl.current.value;\n\n      if (email.trim().length === 0 || password.trim().length === 0) {\n        return;\n      }\n\n      let requestBody = {\n        query: \"\\n        query Login($email: String!, $password: String!) {\\n          login(email: $email, password: $password) {\\n            userId\\n            token\\n            tokenExpiration\\n          }\\n        }\\n      \",\n        variables: {\n          email: email,\n          password: password\n        }\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"your data... \" + JSON.stringify(resData.data));\n\n        if (resData.data.login.token) {\n          this.context.login(resData.data.login.token, resData.data.login.userId, resData.data.login.tokenExpiration); // const sessionStorageLoginInfo = {\n          //   token: resData.data.login.token,\n          //   userId: resData.data.login.userId,\n          //   tokenExpiration: resData.data.login.tokenExpiration\n          // };\n          // sessionStorage.setItem('login info', sessionStorageLoginInfo);\n          // sessionStorage.setItem('login info', JSON.stringify(sessionStorageLoginInfo));\n        }\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.emailEl = React.createRef();\n    this.passwordEl = React.createRef();\n  } // switchModeHandler = () => {\n  //   this.setState(prevState => {\n  //     return { isLogin: !prevState.isLogin };\n  //   });\n  // };\n\n\n  render() {\n    return React.createElement(Form, {\n      className: \"auth-form\",\n      onSubmit: this.submitHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(Form.Group, {\n      controlId: \"formBasicEmail\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, React.createElement(Form.Label, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, \"Email address\"), React.createElement(Form.Control, {\n      type: \"email\",\n      placeholder: \"Enter email\",\n      ref: this.passwordEl,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }), React.createElement(Form.Text, {\n      className: \"text-muted\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, \"We'll never share your email with anyone else.\")), React.createElement(Form.Group, {\n      controlId: \"formBasicPassword\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, React.createElement(Form.Label, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, \"Password\"), React.createElement(Form.Control, {\n      type: \"password\",\n      placeholder: \"Password\",\n      ref: this.emailEl,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    })), React.createElement(Form.Group, {\n      controlId: \"formBasicCheckbox\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, React.createElement(Form.Check, {\n      type: \"checkbox\",\n      label: \"Check me out\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    })), React.createElement(Button, {\n      variant: \"primary\",\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, \"Login\"), React.createElement(Button, {\n      variant: \"secondary\",\n      type: \"button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, React.createElement(NavLink, {\n      to: \"/signup\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, \"Signup\")));\n  }\n\n}\n\nAuthPage.contextType = AuthContext;\nexport default AuthPage;","map":{"version":3,"sources":["/Users/pedrojacob/Downloads/AMR/websites/office_records/ENT_EMR/frontend/src/pages/Auth.js"],"names":["React","Component","Button","NavLink","Form","AuthContext","AuthPage","constructor","props","submitHandler","event","console","log","preventDefault","email","emailEl","current","value","password","passwordEl","trim","length","requestBody","query","variables","fetch","method","body","JSON","stringify","headers","then","res","status","Error","json","resData","data","login","token","context","userId","tokenExpiration","catch","err","createRef","render","contextType"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport { NavLink } from 'react-router-dom';\nimport Form from 'react-bootstrap/Form';\n\nimport './Auth.css';\nimport AuthContext from '../context/auth-context';\n// import ThisUserContext from '../context/thisUser-context';\n\nclass AuthPage extends Component {\n  // state = {\n  //   isLogin: true\n  // };\n\n  static contextType = AuthContext;\n  // static contextType = ThisUserContext;\n\n  constructor(props) {\n    super(props);\n    this.emailEl = React.createRef();\n    this.passwordEl = React.createRef();\n  }\n\n  // switchModeHandler = () => {\n  //   this.setState(prevState => {\n  //     return { isLogin: !prevState.isLogin };\n  //   });\n  // };\n\n\n  submitHandler = event => {\n    console.log(\"login function...\");\n    event.preventDefault();\n    const email = this.emailEl.current.value;\n    const password = this.passwordEl.current.value;\n\n    if (email.trim().length === 0 || password.trim().length === 0) {\n      return;\n    }\n\n    let requestBody = {\n      query: `\n        query Login($email: String!, $password: String!) {\n          login(email: $email, password: $password) {\n            userId\n            token\n            tokenExpiration\n          }\n        }\n      `,\n      variables: {\n        email: email,\n        password: password\n      }\n    };\n\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"your data... \" + JSON.stringify(resData.data));\n        if (resData.data.login.token) {\n          this.context.login(\n            resData.data.login.token,\n            resData.data.login.userId,\n            resData.data.login.tokenExpiration\n          );\n\n          // const sessionStorageLoginInfo = {\n          //   token: resData.data.login.token,\n          //   userId: resData.data.login.userId,\n          //   tokenExpiration: resData.data.login.tokenExpiration\n          // };\n\n          // sessionStorage.setItem('login info', sessionStorageLoginInfo);\n          // sessionStorage.setItem('login info', JSON.stringify(sessionStorageLoginInfo));\n\n        }\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  render() {\n    return (\n      \n      <Form className=\"auth-form\" onSubmit={this.submitHandler}>\n      <Form.Group controlId=\"formBasicEmail\">\n        <Form.Label>Email address</Form.Label>\n        <Form.Control type=\"email\" placeholder=\"Enter email\" ref={this.passwordEl}/>\n        <Form.Text className=\"text-muted\">\n          We'll never share your email with anyone else.\n        </Form.Text>\n      </Form.Group>\n\n      <Form.Group controlId=\"formBasicPassword\">\n        <Form.Label>Password</Form.Label>\n        <Form.Control type=\"password\" placeholder=\"Password\" ref={this.emailEl} />\n      </Form.Group>\n      <Form.Group controlId=\"formBasicCheckbox\">\n        <Form.Check type=\"checkbox\" label=\"Check me out\" />\n      </Form.Group>\n      <Button variant=\"primary\" type=\"submit\">\n        Login\n      </Button>\n\n      <Button variant=\"secondary\" type=\"button\">\n        <NavLink to=\"/signup\">Signup</NavLink>\n      </Button>\n    </Form>\n    );\n  }\n}\n\nexport default AuthPage;\n"]},"metadata":{},"sourceType":"module"}