{"ast":null,"code":"var _jsxFileName = \"/Users/pedrojacob/Downloads/AMR/websites/office_records/ENT_EMR/frontend/src/pages/Patients.js\";\nimport React, { Component } from 'react';\nimport Modal from '../components/Modal/Modal';\nimport Backdrop from '../components/Backdrop/Backdrop';\nimport PatientList from '../components/Patients/PatientList/PatientList';\nimport PatientDetail from '../components/Patients/PatientDetail';\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\nimport './Patients.css';\n\nclass PatientsPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      creating: false,\n      patients: [],\n      isLoading: false,\n      selectedPatient: null\n    };\n    this.isActive = true;\n\n    this.startCreatePatientHandler = () => {\n      this.setState({\n        creating: true\n      });\n    };\n\n    this.modalConfirmHandler = () => {\n      this.setState({\n        creating: false\n      });\n      const userId = this.context.userId;\n      const name = this.nameElRef.current.value;\n      const dob = this.dobElRef.current.value;\n      const address = this.addressElRef.current.value;\n      const contactPhone = this.contactPhoneElRef.current.value;\n      const contactEmail = this.contactEmailElRef.current.value;\n      const registrationDate = this.registrationDateElRef.current.value;\n      const referringDoctor = this.referringDoctorElRef.current.value;\n      const referringDoctorName = this.referringDoctorNameElRef.current.value;\n      const referringDoctorEmail = this.referringDoctorEmailElRef.current.value;\n      const referringDoctorPhone = this.referringDoctorPhoneElRef.current.value;\n      const occupationRole = this.occupationRoleElRef.current.value;\n      const occupationEmployer = this.occupationEmployerElRef.current.value;\n      const occupationEmployerContactPhone = this.occupationEmployerContactPhoneElRef.current.value;\n      const occupationEmployerContactEmail = this.occupationEmployerContactEmailElRef.current.value;\n\n      if (name.trim().length === 0 || dob.trim().length === 0 || address.trim().length === 0 || contactPhone.trim().length === 0 || contactEmail.trim().length === 0 || registrationDate.trim().length === 0 || referringDoctor.trim().length === 0 || referringDoctorName.trim().length === 0 || referringDoctorEmail.trim().length === 0 || referringDoctorPhone.trim().length === 0 || occupationRole.trim().length === 0 || occupationEmployer.trim().length === 0 || occupationEmployerContactPhone.trim().length === 0 || occupationEmployerContactEmail.trim().length === 0) {\n        return;\n      }\n\n      const patient = {\n        name,\n        dob,\n        address,\n        contactPhone,\n        contactEmail,\n        registrationDate,\n        referringDoctor,\n        referringDoctorName,\n        referringDoctorEmail,\n        referringDoctorPhone,\n        occupationRole,\n        occupationEmployer,\n        occupationEmployerContactPhone,\n        occupationEmployerContactEmail\n      };\n      console.log(\"creating patient.. \" + JSON.stringify(patient));\n      const requestBody = {\n        query: \"\\n          mutation CreatePaitient($userId: ID!, $name: String!, $dob: String!, $address: String!, $contactPhone: String!, $contactEmail: String!, $registrationDate: String!, $referringDoctor: String!, $referringDoctorName: String!, $referringDoctorEmail: String!, $referringDoctorPhone: String!, $occupationRole: String!, $occupationEmployer: String!, $occupationEmployerContactPhone: String!, $occupationEmployerContactEmail: String!) {\\n            createPaitient(userId: $userId, patientInput: { email: $email, name: $name, dob: $dob, address: $address, contactPhone: $contactPhone, contactEmail: $contactEmail, registrationDate: $registrationDate, referringDoctor: $referringDoctor, referringDoctorName: $referringDoctorName, referringDoctorEmail: $referringDoctorEmail, referringDoctorPhone: $referringDoctorPhone, occupationRole: $occupationRole, occupationEmployer: $occupationEmployer, occupationEmployerContactPhone: $occupationEmployerContactPhone, occupationEmployerContactEmail: $occupationEmployerContactEmail}) {\\n              _id\\n              name\\n              address\\n              contact{\\n                email\\n                phone\\n              }\\n              registrationDate\\n              referringDoctor\\n              {\\n                name\\n                email\\n                phone\\n              }\\n              occupation\\n              {\\n                role\\n                employer\\n                contact\\n                {\\n                  email\\n                  phone\\n                }\\n              }\\n            }\\n          }\\n        \",\n        variables: {\n          userId: userId,\n          name: name,\n          dob: dob,\n          address: address,\n          contactPhone: contactPhone,\n          contactEmail: contactEmail,\n          registrationDate: registrationDate,\n          referringDoctor: referringDoctor,\n          referringDoctorName: referringDoctorName,\n          referringDoctorEmail: referringDoctorEmail,\n          referringDoctorPhone: referringDoctorPhone,\n          occupationRole: occupationRole,\n          occupationEmployer: occupationEmployer,\n          occupationEmployerContactPhone: occupationEmployerContactPhone,\n          occupationEmployerContactEmail: occupationEmployerContactEmail\n        }\n      };\n      const token = this.context.token;\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n        this.setState(prevState => {\n          const updatedPatients = [...prevState.patients];\n          updatedPatients.push({\n            _id: resData.data.createPatient._id,\n            name: resData.data.createPatient.name,\n            dob: resData.data.createPatient.dob,\n            address: resData.data.createPatient.address,\n            contactPhone: resData.data.createPatient.contactPhone,\n            contactEmail: resData.data.createPatient.contactEmail,\n            registrationDate: resData.data.createPatient.registrationDate,\n            referringDoctor: resData.data.createPatient.referringDoctor,\n            referringDoctorName: resData.data.createPatient.referringDoctorName,\n            referringDoctorEmail: resData.data.createPatient.referringDoctorEmail,\n            referringDoctorPhone: resData.data.createPatient.referringDoctorPhone,\n            occupationRole: resData.data.createPatient.occupationRole,\n            occupationEmployer: resData.data.createPatient.occupationEmployer,\n            occupationEmployerContactPhone: resData.data.createPatient.occupationEmployerContactPhone,\n            occupationEmployerContactEmail: resData.data.createPatient.occupationEmployerContactEmail\n          });\n          return {\n            patients: updatedPatients\n          };\n        });\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.modalCancelHandler = () => {\n      this.setState({\n        creating: false,\n        selectedPatient: null\n      });\n    };\n\n    this.showDetailHandler = patientId => {\n      this.setState(prevState => {\n        const selectedPatient = prevState.patients.find(e => e._id === patientId);\n        this.context.selectedPatientId = selectedPatient;\n        console.log(\"here:  \", selectedPatient);\n        return {\n          selectedPatient: selectedPatient\n        };\n      });\n    };\n\n    this.nameElRef = React.createRef();\n    this.dobElRef = React.createRef();\n    this.addressElRef = React.createRef();\n    this.contactPhoneElRef = React.createRef();\n    this.contactEmailElRef = React.createRef();\n    this.registrationDateElRef = React.createRef();\n    this.referringDoctorElRef = React.createRef();\n    this.referringDoctorNameElRef = React.createRef();\n    this.referringDoctorEmailElRef = React.createRef();\n    this.referringDoctorPhoneElRef = React.createRef();\n    this.occupationRoleElRef = React.createRef();\n    this.occupationEmployerElRef = React.createRef();\n    this.occupationEmployerContactPhoneElRef = React.createRef();\n    this.occupationEmployerContactEmailElRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.fetchPatients();\n  }\n\n  fetchPatients() {\n    console.log(\"'fetch patients function' context object... \" + JSON.stringify(this.context));\n    const userId = this.context.userId;\n    this.setState({\n      isLoading: true\n    });\n    const requestBody = {\n      query: \"\\n          query patients($userId: ID!) {\\n            patients(userId: $userId) {\\n              _id\\n              name\\n              address\\n              contact{\\n                email\\n                phone\\n              }\\n              registrationDate\\n              referringDoctor\\n              {\\n                name\\n                email\\n                phone\\n              }\\n              occupation\\n              {\\n                role\\n                employer\\n                contact\\n                {\\n                  email\\n                  phone\\n                }\\n              }\\n            }\\n          }\\n        \",\n      variables: {\n        userId: userId\n      }\n    };\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    }).then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n\n      return res.json();\n    }).then(resData => {\n      const patients = resData.data.patients;\n      console.log(patients);\n\n      if (this.isActive) {\n        this.setState({\n          patients: patients,\n          isLoading: false\n        });\n      }\n    }).catch(err => {\n      console.log(err);\n\n      if (this.isActive) {\n        this.setState({\n          isLoading: false\n        });\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    this.isActive = false;\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280\n      },\n      __self: this\n    }, this.state.creating && React.createElement(CreatePatientForm, {\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmHandler,\n      confirmText: \"Confirm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282\n      },\n      __self: this\n    }), this.state.isLoading === false && React.createElement(UserDetail, {\n      authUserId: this.context.userId,\n      user: this.context.selectedPatientId,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291\n      },\n      __self: this\n    }), this.context.token && React.createElement(\"div\", {\n      className: \"patients-control\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298\n      },\n      __self: this\n    }, \"Add New Patient\"), React.createElement(\"button\", {\n      className: \"btn\",\n      onClick: this.startCreatePatientHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299\n      },\n      __self: this\n    }, \"+\")), this.state.isLoading ? React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305\n      },\n      __self: this\n    }) : React.createElement(PatientList, {\n      patients: this.state.patients,\n      authUserId: this.context.userId,\n      onViewDetail: this.showDetailHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307\n      },\n      __self: this\n    }));\n  }\n\n}\n\nPatientsPage.contextType = AuthContext;\nexport default PatientsPage;","map":{"version":3,"sources":["/Users/pedrojacob/Downloads/AMR/websites/office_records/ENT_EMR/frontend/src/pages/Patients.js"],"names":["React","Component","Modal","Backdrop","PatientList","PatientDetail","Spinner","AuthContext","PatientsPage","constructor","props","state","creating","patients","isLoading","selectedPatient","isActive","startCreatePatientHandler","setState","modalConfirmHandler","userId","context","name","nameElRef","current","value","dob","dobElRef","address","addressElRef","contactPhone","contactPhoneElRef","contactEmail","contactEmailElRef","registrationDate","registrationDateElRef","referringDoctor","referringDoctorElRef","referringDoctorName","referringDoctorNameElRef","referringDoctorEmail","referringDoctorEmailElRef","referringDoctorPhone","referringDoctorPhoneElRef","occupationRole","occupationRoleElRef","occupationEmployer","occupationEmployerElRef","occupationEmployerContactPhone","occupationEmployerContactPhoneElRef","occupationEmployerContactEmail","occupationEmployerContactEmailElRef","trim","length","patient","console","log","JSON","stringify","requestBody","query","variables","token","fetch","method","body","headers","Authorization","then","res","status","Error","json","resData","prevState","updatedPatients","push","_id","data","createPatient","catch","err","modalCancelHandler","showDetailHandler","patientId","find","e","selectedPatientId","createRef","componentDidMount","fetchPatients","componentWillUnmount","render","contextType"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport Modal from '../components/Modal/Modal';\nimport Backdrop from '../components/Backdrop/Backdrop';\nimport PatientList from '../components/Patients/PatientList/PatientList';\nimport PatientDetail from '../components/Patients/PatientDetail';\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\nimport './Patients.css';\n\nclass PatientsPage extends Component {\n  state = {\n    creating: false,\n    patients: [],\n    isLoading: false,\n    selectedPatient: null\n  };\n  isActive = true;\n\n  static contextType = AuthContext;\n\n  constructor(props) {\n    super(props);\n    this.nameElRef = React.createRef();\n    this.dobElRef = React.createRef();\n    this.addressElRef = React.createRef();\n    this.contactPhoneElRef = React.createRef();\n    this.contactEmailElRef = React.createRef();\n    this.registrationDateElRef = React.createRef();\n    this.referringDoctorElRef = React.createRef();\n    this.referringDoctorNameElRef = React.createRef();\n    this.referringDoctorEmailElRef = React.createRef();\n    this.referringDoctorPhoneElRef = React.createRef();\n    this.occupationRoleElRef = React.createRef();\n    this.occupationEmployerElRef = React.createRef();\n    this.occupationEmployerContactPhoneElRef = React.createRef();\n    this.occupationEmployerContactEmailElRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.fetchPatients();\n  }\n\n\n  startCreatePatientHandler = () => {\n    this.setState({ creating: true });\n  };\n\n  modalConfirmHandler = () => {\n    this.setState({ creating: false });\n\n    const userId = this.context.userId;\n\n    const name = this.nameElRef.current.value;\n    const dob = this.dobElRef.current.value;\n    const address = this.addressElRef.current.value;\n    const contactPhone = this.contactPhoneElRef.current.value;\n    const contactEmail = this.contactEmailElRef.current.value;\n    const registrationDate = this.registrationDateElRef.current.value;\n    const referringDoctor = this.referringDoctorElRef.current.value;\n    const referringDoctorName = this.referringDoctorNameElRef.current.value;\n    const referringDoctorEmail = this.referringDoctorEmailElRef.current.value;\n    const referringDoctorPhone = this.referringDoctorPhoneElRef.current.value;\n    const occupationRole = this.occupationRoleElRef.current.value;\n    const occupationEmployer = this.occupationEmployerElRef.current.value;\n    const occupationEmployerContactPhone = this.occupationEmployerContactPhoneElRef.current.value;\n    const occupationEmployerContactEmail = this.occupationEmployerContactEmailElRef.current.value;\n\n    if (\n      name.trim().length === 0 ||\n      dob.trim().length === 0 ||\n      address.trim().length === 0 ||\n      contactPhone.trim().length === 0 ||\n      contactEmail.trim().length === 0 ||\n      registrationDate.trim().length === 0 ||\n      referringDoctor.trim().length === 0 ||\n      referringDoctorName.trim().length === 0 ||\n      referringDoctorEmail.trim().length === 0 ||\n      referringDoctorPhone.trim().length === 0 ||\n      occupationRole.trim().length === 0 ||\n      occupationEmployer.trim().length === 0 ||\n      occupationEmployerContactPhone.trim().length === 0 ||\n      occupationEmployerContactEmail.trim().length === 0\n    ) {\n      return;\n    }\n\n    const patient = { name, dob, address, contactPhone, contactEmail, registrationDate, referringDoctor, referringDoctorName, referringDoctorEmail, referringDoctorPhone, occupationRole, occupationEmployer, occupationEmployerContactPhone, occupationEmployerContactEmail };\n    console.log(\"creating patient.. \" + JSON.stringify(patient));\n\n    const requestBody = {\n      query: `\n          mutation CreatePaitient($userId: ID!, $name: String!, $dob: String!, $address: String!, $contactPhone: String!, $contactEmail: String!, $registrationDate: String!, $referringDoctor: String!, $referringDoctorName: String!, $referringDoctorEmail: String!, $referringDoctorPhone: String!, $occupationRole: String!, $occupationEmployer: String!, $occupationEmployerContactPhone: String!, $occupationEmployerContactEmail: String!) {\n            createPaitient(userId: $userId, patientInput: { email: $email, name: $name, dob: $dob, address: $address, contactPhone: $contactPhone, contactEmail: $contactEmail, registrationDate: $registrationDate, referringDoctor: $referringDoctor, referringDoctorName: $referringDoctorName, referringDoctorEmail: $referringDoctorEmail, referringDoctorPhone: $referringDoctorPhone, occupationRole: $occupationRole, occupationEmployer: $occupationEmployer, occupationEmployerContactPhone: $occupationEmployerContactPhone, occupationEmployerContactEmail: $occupationEmployerContactEmail}) {\n              _id\n              name\n              address\n              contact{\n                email\n                phone\n              }\n              registrationDate\n              referringDoctor\n              {\n                name\n                email\n                phone\n              }\n              occupation\n              {\n                role\n                employer\n                contact\n                {\n                  email\n                  phone\n                }\n              }\n            }\n          }\n        `,\n        variables: {\n          userId: userId,\n          name: name,\n          dob: dob,\n          address: address,\n          contactPhone: contactPhone,\n          contactEmail: contactEmail,\n          registrationDate: registrationDate,\n          referringDoctor: referringDoctor,\n          referringDoctorName: referringDoctorName,\n          referringDoctorEmail: referringDoctorEmail,\n          referringDoctorPhone: referringDoctorPhone,\n          occupationRole: occupationRole,\n          occupationEmployer: occupationEmployer,\n          occupationEmployerContactPhone: occupationEmployerContactPhone,\n          occupationEmployerContactEmail: occupationEmployerContactEmail\n        }\n    };\n\n    const token = this.context.token;\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n        this.setState(prevState => {\n          const updatedPatients = [...prevState.patients];\n          updatedPatients.push({\n            _id: resData.data.createPatient._id,\n            name: resData.data.createPatient.name,\n            dob: resData.data.createPatient.dob,\n            address: resData.data.createPatient.address,\n            contactPhone: resData.data.createPatient.contactPhone,\n            contactEmail: resData.data.createPatient.contactEmail,\n            registrationDate: resData.data.createPatient.registrationDate,\n            referringDoctor: resData.data.createPatient.referringDoctor,\n            referringDoctorName: resData.data.createPatient.referringDoctorName,\n            referringDoctorEmail: resData.data.createPatient.referringDoctorEmail,\n            referringDoctorPhone: resData.data.createPatient.referringDoctorPhone,\n            occupationRole: resData.data.createPatient.occupationRole,\n            occupationEmployer: resData.data.createPatient.occupationEmployer,\n            occupationEmployerContactPhone: resData.data.createPatient.occupationEmployerContactPhone,\n            occupationEmployerContactEmail: resData.data.createPatient.occupationEmployerContactEmail\n          });\n\n          return { patients: updatedPatients };\n        });\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  modalCancelHandler = () => {\n    this.setState({ creating: false, selectedPatient: null });\n  };\n\n  fetchPatients() {\n    console.log(\"'fetch patients function' context object... \" + JSON.stringify(this.context));\n    const userId = this.context.userId;\n\n    this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n          query patients($userId: ID!) {\n            patients(userId: $userId) {\n              _id\n              name\n              address\n              contact{\n                email\n                phone\n              }\n              registrationDate\n              referringDoctor\n              {\n                name\n                email\n                phone\n              }\n              occupation\n              {\n                role\n                employer\n                contact\n                {\n                  email\n                  phone\n                }\n              }\n            }\n          }\n        `,\n        variables: {\n          userId: userId\n        }\n    };\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const patients = resData.data.patients;\n        console.log(patients);\n\n        if (this.isActive) {\n          this.setState({ patients: patients, isLoading: false });\n        }\n      })\n      .catch(err => {\n        console.log(err);\n        if (this.isActive) {\n          this.setState({ isLoading: false });\n        }\n      });\n  }\n\n\n  showDetailHandler = patientId => {\n\n    this.setState(prevState => {\n      const selectedPatient = prevState.patients.find(e => e._id === patientId);\n      this.context.selectedPatientId = selectedPatient;\n      console.log(\"here:  \", selectedPatient);\n      return { selectedPatient: selectedPatient };\n    });\n  };\n\n\n  componentWillUnmount() {\n    this.isActive = false;\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        {this.state.creating && (\n          <CreatePatientForm\n          canCancel\n            canConfirm\n            onCancel={this.modalCancelHandler}\n            onConfirm={this.modalConfirmHandler}\n            confirmText=\"Confirm\"\n          />\n        )}\n        {this.state.isLoading === false &&\n          (<UserDetail\n            authUserId={this.context.userId}\n            user={this.context.selectedPatientId}\n        />)}\n\n        {this.context.token &&\n          (<div className=\"patients-control\">\n            <p>Add New Patient</p>\n            <button className=\"btn\" onClick={this.startCreatePatientHandler}>\n              +\n            </button>\n          </div>\n        )}\n        {this.state.isLoading ? (\n          <Spinner />\n        ) : (\n          <PatientList\n            patients={this.state.patients}\n            authUserId={this.context.userId}\n            onViewDetail={this.showDetailHandler}\n          />\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default PatientsPage;\n"]},"metadata":{},"sourceType":"module"}