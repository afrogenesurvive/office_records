{"ast":null,"code":"var _jsxFileName = \"/Users/pedrojacob/Downloads/AMR/websites/office_records/ENT_EMR/frontend/src/pages/Appointments.js\";\nimport React, { Component } from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport Accordion from 'react-bootstrap/Accordion';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\nimport Nav from 'react-bootstrap/Nav';\nimport Card from 'react-bootstrap/Card';\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\nimport AlertBox from '../components/AlertBox';\nimport PdfCreator from '../components/PdfCreator';\nimport LoadingOverlay from '../components/LoadingOverlay';\nimport SidebarPage from './Sidebar';\nimport SidebarControl from '../components/SidebarControl';\nimport AppointmentList from '../components/Appointments/AppointmentList/AppointmentList';\nimport AppointmentDetail from '../components/Appointments/AppointmentDetail';\nimport SearchAppointmentList from '../components/Appointments/AppointmentList/SearchAppointmentList';\nimport SearchAppointmentForm from '../components/Forms/SearchAppointmentForm';\nimport SearchAppointmentIdForm from '../components/Forms/SearchAppointmentIdForm';\nimport SearchAppointmentPatientForm from '../components/Forms/SearchAppointmentPatientForm';\nimport SearchAppointmentDateForm from '../components/Forms/SearchAppointmentDateForm';\nimport SearchAppointmentDateRangeForm from '../components/Forms/SearchAppointmentDateRangeForm';\nimport CreateAppointmentForm from '../components/Forms/CreateAppointmentForm';\nimport UpdateAppointmentForm from '../components/Forms/UpdateAppointmentForm';\nimport UpdateAppointmentFieldForm from '../components/Forms/UpdateAppointmentFieldForm';\nimport './Users.css';\n\nclass AppointmentsPage extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      creating: false,\n      updating: false,\n      deleting: false,\n      searching: false,\n      searchAppointments: [],\n      appointments: [],\n      isLoading: false,\n      selectedAppointment: null,\n      selectedPatient: null,\n      appointmentUpdateField: null,\n      appointmentSearchField: null,\n      appointmentSearchQuery: null,\n      canDelete: null,\n      userAlert: null,\n      overlay: false,\n      overlayStatus: \"test\",\n      creatingDocument: false,\n      createPdf: false,\n      pdfData: null,\n      pdfType: null,\n      sidebarShow: true,\n      mCol1Size: 3,\n      mCol2Size: 9\n    };\n    this.isActive = true;\n\n    this.startCreateAppointmentHandler = () => {\n      this.setState({\n        creating: true\n      });\n    };\n\n    this.startUpdateAppointmentHandler = () => {\n      this.setState({\n        updating: true\n      });\n    };\n\n    this.startSearchAppointmentHandler = () => {\n      this.setState({\n        searching: true\n      });\n    };\n\n    this.modalConfirmHandler = event => {\n      this.setState({\n        creating: false,\n        userAlert: \"creating appointment...\"\n      });\n      const userId = this.context.userId;\n      const selectedPatientId = this.context.selectedPatient._id;\n      const token = this.context.token;\n\n      if (selectedPatientId === undefined) {\n        this.setState({\n          userAlert: \"select a Patient before creating an Appointment!!...\"\n        });\n        return;\n      }\n\n      const title = event.target.formGridTitle.value;\n      const type = event.target.formGridType.value;\n      let date = event.target.formGridDate.value;\n\n      if (event.target.formGridDateTodayCheckbox.checked === true) {\n        date = new Date().toISOString().slice(0, 10);\n      }\n\n      if (event.target.newAppointmentCalendarDate.value !== null && event.target.formGridDateTodayCheckbox.checked !== true) {\n        console.log(\"fancyDate2\", new Date(event.target.newAppointmentCalendarDate.value).toISOString().slice(0, 10));\n        date = new Date(event.target.newAppointmentCalendarDate.value).toISOString().slice(0, 10);\n      }\n\n      const time = event.target.formGridTime.value;\n      const seenTime = event.target.formGridSeenTime.value;\n      const checkinTime = event.target.formGridCheckinTime.value;\n      const location = event.target.formGridLocation.value;\n      const description = event.target.formGridDescription.value;\n      const inProgress = event.target.formGridInProgress.value;\n      const attended = event.target.formGridAttended.value;\n      const important = event.target.formGridImportant.value;\n\n      if (title.trim().length === 0 || type.trim().length === 0 || date.trim().length === 0 || time.trim().length === 0 || location.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...Please try again...\"\n        });\n        return;\n      }\n\n      ;\n      const requestBody = {\n        query: `\n          mutation {createAppointment(userId:\"${userId}\",\n          patientId:\"${selectedPatientId}\",\n          appointmentInput:{\n            title:\"${title}\",\n            type:\"${type}\",\n            date:\"${date}\",\n            time:\"${time}\",\n            seenTime:\"${seenTime}\",\n            checkinTime:\"${checkinTime}\",\n            location:\"${location}\",\n            description:\"${description}\",\n            inProgress:${inProgress},\n            attended:${attended},\n            important:${important}})\n          {_id,title,type,date,time,seenTime,checkinTime,location,description,patient{_id,name,contact{phone,email},appointments{_id,date,title}},inProgress,attended,important,notes}}\n        `\n      }; // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const responseAlert = JSON.stringify(resData.data).slice(2, 15);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.state.appointments.push(resData.data.createAppointment);\n        this.context.appointments = this.state.appointments;\n        this.fetchAppointments();\n        this.setState({\n          selectedAppointment: resData.data.createAppointment\n        });\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.modalCancelHandler = () => {\n      this.setState({\n        creating: false,\n        updating: false,\n        searching: false,\n        selectedAppointment: null\n      });\n    };\n\n    this.modalConfirmUpdateHandler = event => {\n      if (this.context.user.role !== 'admin') {\n        this.setState({\n          userAlert: \"Not the Admin! No edit permission!!\"\n        });\n      }\n\n      const token = this.context.token;\n      const userId = this.context.userId;\n      const appointmentId = this.context.selectedAppointment._id;\n      this.setState({\n        updating: false,\n        userAlert: \"updating appointment...\"\n      });\n      let title = event.target.formGridTitle.value;\n      let type = event.target.formGridType.value;\n      let date = event.target.formGridDate.value;\n\n      if (event.target.formGridDateTodayCheckbox.checked === true) {\n        date = new Date().toISOString().slice(0, 10);\n      }\n\n      if (event.target.updateAppointmentCalendarDate.value !== null && event.target.formGridDateTodayCheckbox.checked !== true) {\n        console.log(\"fancyDate2\", new Date(event.target.updateAppointmentCalendarDate.value).toISOString().slice(0, 10));\n        date = new Date(event.target.updateAppointmentCalendarDate.value).toISOString().slice(0, 10);\n      }\n\n      let time = event.target.formGridTime.value;\n      let seenTime = event.target.formGridSeenTime.value;\n      let checkinTime = event.target.formGridCheckinTime.value;\n      let location = event.target.formGridLocation.value;\n      let description = event.target.formGridDescription.value;\n      let inProgress = event.target.formGridInProgress.value;\n      let attended = event.target.formGridAttended.value;\n      let important = event.target.formGridImportant.value;\n\n      if (title.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        title = this.context.selectedAppointment.title;\n      }\n\n      if (type.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        type = this.context.selectedAppointment.type;\n      }\n\n      if (date.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        date = this.context.selectedAppointment.date;\n      }\n\n      if (time.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        time = this.context.selectedAppointment.time;\n      }\n\n      if (seenTime.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        seenTime = this.context.selectedAppointment.seenTime;\n      }\n\n      if (checkinTime.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        checkinTime = this.context.selectedAppointment.checkinTime;\n      }\n\n      if (location.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        location = this.context.selectedAppointment.location;\n      }\n\n      if (description.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        description = this.context.selectedAppointment.description;\n      }\n\n      if (inProgress.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        inProgress = this.context.selectedAppointment.inProgress;\n      }\n\n      if (attended.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        attended = this.context.selectedAppointment.attended;\n      }\n\n      if (important.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        important = this.context.selectedAppointment.important;\n      }\n\n      const requestBody = {\n        query: `\n      mutation {updateAppointment(userId:\"${userId}\",appointmentId:\"${appointmentId}\",appointmentInput:{title:\"${title}\",type:\"${type}\",date:\"${date}\",time:\"${time}\",seenTime:\"${seenTime}\",checkinTime:\"${checkinTime}\",location:\"${location}\",description:\"${description}\",inProgress:${inProgress},attended:${attended},important:${important},})\n      {_id,title,type,date,time,seenTime,checkinTime,location,description,patient{_id,name,contact{phone,email},appointments{_id,date,title}},inProgress,attended,important,notes}}\n        `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const updatedAppointmentId = resData.data.updateAppointment._id;\n        const updatedAppointment = this.state.appointments.find(e => e._id === updatedAppointmentId);\n        const updatedAppointmentPos = this.state.appointments.indexOf(updatedAppointment);\n        const slicedArray = this.state.appointments.splice(updatedAppointmentPos, 1);\n        this.state.appointments.push(resData.data.updateAppointment);\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25); // this.setState({ userAlert: responseAlert })\n\n        this.fetchAppointments();\n        this.setState({\n          userAlert: responseAlert,\n          selectedAppointment: resData.data.updateAppointment\n        });\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updateAppointmentPatientHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedAppointmentId = this.context.selectedAppointment._id;\n      let selectedPatientId = this.context.selectedPatient._id;\n\n      if (this.context.user.role !== 'admin') {\n        this.setState({\n          userAlert: \"No edit permission!!\"\n        });\n        return;\n      }\n\n      if (selectedPatientId === undefined) {\n        this.setState({\n          userAlert: \"select a Patient before creating an Appointment!!...\"\n        });\n        return;\n      }\n\n      this.setState({\n        updating: false,\n        patientUpdateField: null,\n        userAlert: \"updating appointment patient...\"\n      });\n      const requestBody = {\n        query: `\n        mutation {updateAppointmentPatient(userId:\"${userId}\",appointmentId:\"${selectedAppointmentId}\",patientId:\"${selectedPatientId}\")\n        {_id,title,type,date,time,seenTime,checkinTime,location,description,patient{_id,name,contact{phone,email},appointments{_id,date,title}},inProgress,attended,important,notes}}\n        `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const updatedAppointmentId = resData.data.updateAppointmentPatient._id;\n        const updatedAppointment = this.state.appointments.find(e => e._id === updatedAppointmentId);\n        const updatedAppointmentPos = this.state.appointments.indexOf(updatedAppointment);\n        const slicedArray = this.state.appointments.splice(updatedAppointmentPos, 1);\n        this.state.appointments.push(resData.data.updateAppointmentPatient);\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchAppointments();\n        this.setState({\n          selectedAppointment: resData.data.updateAppointmentPatient\n        });\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.modalConfirmUpdateFieldHandler = event => {\n      event.preventDefault();\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedAppointmentId = this.context.selectedAppointment._id;\n\n      if (this.context.user.role !== 'admin') {\n        this.setState({\n          userAlert: \"Not the creator or Admin! No edit permission!!\"\n        });\n        selectedAppointmentId = null;\n      }\n\n      this.setState({\n        updating: false,\n        userAlert: \"Updating selected Appointment by Field\"\n      });\n      let field = null;\n      let query = event.target.formGridQuery.value;\n\n      if (event.target.formGridFieldSelect.value === \"select\") {\n        field = event.target.formGridField.value;\n      } else {\n        field = event.target.formGridFieldSelect.value;\n      }\n\n      const requestBody = {\n        query: `\n      mutation {updateAppointmentField(userId:\"${userId}\",appointmentId:\"${selectedAppointmentId}\",field:\"${field}\",query:\"${query}\")\n      {_id,title,type,date,time,seenTime,checkinTime,location,description,patient{_id,name,contact{phone,email},appointments{_id,date,title}},inProgress,attended,important,notes}}\n      `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        const updatedAppointmentId = resData.data.updateAppointmentField._id;\n        const updatedAppointment = this.state.appointments.find(e => e._id === updatedAppointmentId);\n        const updatedAppointmentPos = this.state.appointments.indexOf(updatedAppointment);\n        const slicedArray = this.state.appointments.splice(updatedAppointmentPos, 1);\n        this.state.appointments.push(resData.data.updateAppointmentField);\n        this.context.appointments = this.state.appointments;\n        this.fetchAppointments();\n        this.setState({\n          userAlert: responseAlert,\n          selectedAppointment: resData.data.updateAppointmentField\n        });\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.modalConfirmSearchHandler = event => {\n      let userId = this.context.userId;\n      const token = this.context.token;\n      this.setState({\n        searching: false,\n        userAlert: \"Searching for Appointment...\"\n      });\n      let field = null;\n      let query = event.target.formBasicQuery.value;\n\n      if (event.target.formBasicFieldSelect.value === \"select\") {\n        field = event.target.formBasicField.value;\n      } else {\n        field = event.target.formBasicFieldSelect.value;\n      }\n\n      if (field.trim().length === 0 || query.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...Please try again...\"\n        });\n        return;\n      }\n\n      const search = {\n        field,\n        query\n      };\n      const requestBody = {\n        query: `\n        query {getAppointmentField(userId:\"${userId}\", field:\"${field}\", query:\"${query}\")\n        {_id,title,type,date,time,seenTime,checkinTime,location,description,patient{_id,name,contact{phone,email},appointments{_id,date,title}},inProgress,attended,important,notes}}\n      `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const responseAlert = JSON.stringify(resData.data).slice(2, 15);\n        this.setState({\n          searchAppointments: resData.data.getAppointmentField,\n          userAlert: responseAlert\n        }); // this.fetchAppointments();\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.modalConfirmSearchIdHandler = event => {\n      let userId = this.context.userId;\n      const token = this.context.token;\n      this.setState({\n        searching: false,\n        userAlert: \"Searching for Appointment by Id...\"\n      });\n      let selectedAppointmentId = event.target.formBasicId.value;\n      const requestBody = {\n        query: `\n          query {getAppointmentId(userId:\"${userId}\", appointmentId:\"${selectedAppointmentId}\")\n          {_id,title,type,date,time,seenTime,checkinTime,location,description,patient{_id,name,contact{phone,email},appointments{_id,date,title}},inProgress,attended,important,notes}}\n        `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const responseAlert = JSON.stringify(resData.data).slice(2, 15);\n        this.setState({\n          searchAppointments: [resData.data.getAppointmentId],\n          userAlert: responseAlert\n        }); // this.fetchUsers();\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.modalConfirmSearchPatientHandler = event => {\n      let userId = this.context.userId;\n      const token = this.context.token;\n      this.setState({\n        searching: false,\n        userAlert: \"Searching for Appointment by Patient...\"\n      });\n      let selectedPatientId = event.target.formBasicPatientId.value;\n      const requestBody = {\n        query: `\n          query {getAppointmentPatient(userId:\"${userId}\", patientId:\"${selectedPatientId}\")\n          {_id,title,type,date,time,seenTime,checkinTime,location,description,patient{_id,name,contact{phone,email},appointments{_id,date,title}},inProgress,attended,important,notes}}\n        `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const responseAlert = JSON.stringify(resData.data).slice(2, 15);\n        this.setState({\n          searchAppointments: resData.data.getAppointmentPatient,\n          userAlert: responseAlert\n        }); // this.fetchUsers();\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.modalConfirmSearchDateHandler = event => {\n      console.log(\"here\");\n      let userId = this.context.userId;\n      const token = this.context.token;\n      this.setState({\n        searching: false,\n        userAlert: \"Searching for Appointment by Date...\"\n      });\n      let appointmentDate = event.target.formBasicDate.value;\n\n      if (event.target.formBasicDateTodayCheckbox.checked === true) {\n        appointmentDate = new Date().toISOString().slice(0, 10);\n      }\n\n      if (event.target.formBasicDateTodayCheckbox.checked === true && event.target.appointmentCalendarDate.value !== null) {\n        console.log(\"fancyDate2\", new Date(event.target.appointmentCalendarDate.value).toISOString().slice(0, 10));\n        appointmentDate = new Date(event.target.appointmentCalendarDate.value).toISOString().slice(0, 10);\n      }\n\n      const requestBody = {\n        query: `\n          query {getAppointmentDate(userId:\"${userId}\",date:\"${appointmentDate}\")\n          {_id,title,type,date,time,seenTime,checkinTime,location,description,patient{_id,name,contact{phone,email},appointments{_id,date,title}},inProgress,attended,important,notes}}\n        `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const responseAlert = JSON.stringify(resData.data).slice(2, 15);\n        this.setState({\n          searchAppointments: resData.data.getAppointmentDate,\n          userAlert: responseAlert\n        }); // this.fetchUsers();\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.modalConfirmSearchDateRangeHandler = event => {\n      let userId = this.context.userId;\n      const token = this.context.token;\n      this.setState({\n        searching: false,\n        userAlert: \"Searching for Appointment by Date range...\"\n      });\n      let appointmentStartDate = event.target.formBasicStartDate.value;\n      let appointmentEndDate = event.target.formBasicEndDate.value;\n      const requestBody = {\n        query: `\n          query {getAppointmentDateRange(userId:\"${userId}\",startDate:\"${appointmentStartDate}\",endDate:\"${appointmentEndDate}\")\n          {_id,title,type,date,time,seenTime,checkinTime,location,description,patient{_id,name,contact{phone,email},appointments{_id,date,title}},inProgress,attended,important,notes}}\n        `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const responseAlert = JSON.stringify(resData.data).slice(2, 15);\n        this.setState({\n          searchAppointments: resData.data.getAppointmentDateRange,\n          userAlert: responseAlert\n        }); // this.fetchUsers();\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.modalCancelHandler = () => {\n      this.setState({\n        creating: false,\n        updating: false,\n        searching: false,\n        selectedAppointment: null\n      });\n    };\n\n    this.fetchAppointmentsAsc = () => {\n      const userId = this.context.userId;\n      const token = this.context.token;\n      this.setState({\n        isLoading: true,\n        userAlert: \"Fetching Appointment Master List in Ascending order...\"\n      });\n      const requestBody = {\n        query: `\n            query {appointmentsDateAsc(userId:\"${userId}\")\n            {_id,title,type,date,time,seenTime,checkinTime,location,description,patient{_id,name,contact{phone,email},appointments{_id,date,title}},inProgress,attended,important,notes}}\n        `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const responseAlert = JSON.stringify(resData.data).slice(2, 15);\n        this.setState({\n          appointments: resData.data.appointmentsDateAsc,\n          userAlert: responseAlert,\n          isLoading: false\n        });\n        this.context.appointments = resData.data.appointmentsDateAsc;\n      }).catch(err => {\n        this.setState({\n          userAlert: err,\n          isLoading: false\n        });\n      });\n    };\n\n    this.fetchAppointmentsDesc = () => {\n      this.setState({\n        isLoading: true,\n        userAlert: \"Fetching Appointment Master List in Ascending order...\"\n      });\n      const userId = this.context.userId;\n      const token = this.context.token;\n      const requestBody = {\n        query: `\n            query {appointmentsDateDesc(userId:\"${userId}\")\n            {_id,title,type,date,time,seenTime,checkinTime,location,description,patient{_id,name,contact{phone,email},appointments{_id,date,title}},inProgress,attended,important,notes}}\n        `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const appointments = resData.data.appointmentsDateDesc;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.context.appointments = appointments;\n        this.setState({\n          appointments: appointments,\n          userAlert: responseAlert,\n          isLoading: false\n        }); // if (this.isActive) {\n        //   this.setState({ appointments: appointments, isLoading: false });\n        // }\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        }); // if (this.isActive) {\n        //   this.setState({ isLoading: false });\n        // }\n      });\n    };\n\n    this.modalDeleteHandler = () => {\n      const userId = this.context.userId;\n      const selectedAppointmentId = this.context.selectedAppointment._id;\n\n      if (this.context.user.role !== 'admin') {\n        this.setState({\n          userAlert: \"Not the Admin! No edit permission!!\"\n        });\n      }\n\n      this.setState({\n        deleting: true,\n        userAlert: \"Deleting selected Appointment...\"\n      });\n      const requestBody = {\n        query: `\n          mutation {deleteAppointment(userId:\"${userId}\",appointmentId:\"${selectedAppointmentId}\")\n          {_id,title,type,date,time,seenTime,checkinTime,location,description,patient{_id,name,appointments{_id,date,title}},inProgress,attended,important,notes}}\n        `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + this.context.token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedAppointment = resData.data.deleteAppointment;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 15);\n        let deletedAppointmentId = deletedAppointment._id;\n        deletedAppointment = this.state.appointments.find(e => e._id === deletedAppointmentId);\n        const deletedAppointmentPos = this.state.appointments.indexOf(deletedAppointment);\n        const slicedArray = this.state.appointments.splice(deletedAppointmentPos, 1);\n        this.setState({\n          deleting: false,\n          userAlert: responseAlert\n        });\n        this.fetchAppointments();\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n\n        if (this.isActive) {\n          this.setState({\n            deleting: false\n          });\n        }\n      });\n    };\n\n    this.showDetailHandler = appointmentId => {\n      this.setState(prevState => {\n        const selectedAppointment = prevState.appointments.find(e => e._id === appointmentId);\n        this.setState({\n          selectedAppointment: selectedAppointment\n        });\n        this.context.selectedAppointment = selectedAppointment;\n        return {\n          selecteAppointment: selectedAppointment\n        };\n      });\n    };\n\n    this.createPdf = appointment => {\n      const pdfData = {\n        title: \"This pdf is supplied with Appointment data...\",\n        appointment: {\n          _id: appointment._id,\n          title: appointment.title,\n          type: appointment.type,\n          date: appointment.date,\n          time: appointment.time,\n          seenTime: appointment.seenTime,\n          checkinTime: appointment.checkinTime,\n          location: appointment.location,\n          description: appointment.description,\n          patient: {\n            _id: appointment.patient._id,\n            name: appointment.patient.name,\n            contact: {\n              email: appointment.patient.contact.email,\n              phone: appointment.patient.contact.phone\n            }\n          },\n          inProgress: appointment.inProgress,\n          attended: appointment.attended,\n          important: appointment.important,\n          notes: appointment.notes\n        }\n      };\n      this.setState({\n        createPdf: true,\n        pdfData: pdfData\n      });\n    };\n\n    this.closePdfCreator = () => {\n      this.setState({\n        createPdf: false,\n        pdfData: null\n      });\n    };\n\n    this.showSidebar = () => {\n      console.log(`\n      showing sidebar...\n      `);\n      this.setState({\n        sidebarShow: true,\n        mCol2Size: 9\n      });\n    };\n\n    this.hideSidebar = () => {\n      console.log(`\n      hiding sidebar...\n      `);\n      this.setState({\n        sidebarShow: false,\n        mCol2Size: 11\n      });\n    };\n  }\n\n  componentDidMount() {\n    if (this.context.user.name === \"Lord-of-the-Manor\") {\n      this.setState({\n        canDelete: true\n      });\n    }\n\n    if (JSON.stringify(this.context.selectedAppointment) !== \"{}\") {\n      this.setState({\n        selectedAppointment: this.context.selectedAppointment\n      });\n    }\n\n    this.setState({\n      selectedPatient: this.context.selectedPatient\n    });\n    this.fetchAppointments();\n    this.fetchAppointmentToday();\n    this.fetchAppointmentInProgress();\n  }\n\n  fetchAppointments() {\n    const userId = this.context.userId;\n    const token = this.context.token;\n    this.setState({\n      isLoading: true,\n      userAlert: \"Fetching Appointment Master List...\"\n    });\n    const requestBody = {\n      query: `\n            query {appointments(userId:\"${userId}\")\n            {_id,title,type,date,time,seenTime,checkinTime,location,description,patient{_id,name,contact{phone,email},appointments{_id,date,title}},inProgress,attended,important,notes}}\n        `\n    };\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    }).then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n\n      return res.json();\n    }).then(resData => {\n      const responseAlert = JSON.stringify(resData.data).slice(2, 25); // if (this.isActive) {\n\n      this.setState({\n        appointments: resData.data.appointments,\n        isLoading: false,\n        userAlert: responseAlert\n      });\n      this.context.appointments = this.state.appointments; // }\n    }).catch(err => {\n      this.setState({\n        userAlert: err\n      });\n\n      if (this.isActive) {\n        this.setState({\n          isLoading: false\n        });\n      }\n    });\n  }\n\n  updateAppointmentSpecial(event) {\n    const field = event.target.value;\n    this.setState({\n      appointmentUpdateField: field\n    });\n  }\n\n  fetchAppointmentToday() {\n    this.setState({\n      userAlert: \"Fetching Today's Appointments...\"\n    });\n    const token = this.context.token;\n    const userId = this.context.userId;\n    const requestBody = {\n      query: `\n          query {getAppointmentToday(userId:\"${userId}\")\n          {_id,title,type,date,time,seenTime,checkinTime,location,description,patient{_id,name,contact{phone,email},appointments{_id,date,title}},inProgress,attended,important,notes}}\n        `\n    };\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    }).then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n\n      return res.json();\n    }).then(resData => {\n      this.context.appointmentsToday = resData.data.getAppointmentToday;\n      const responseAlert = JSON.stringify(resData.data).slice(2, 15);\n      this.setState({\n        userAlert: responseAlert\n      });\n    }).catch(err => {\n      this.setState({\n        userAlert: err\n      });\n    });\n  }\n\n  fetchAppointmentInProgress() {\n    this.setState({\n      userAlert: \"Fetching Today's Appointments In-Progress...\"\n    });\n    const token = this.context.token;\n    const userId = this.context.userId;\n    const requestBody = {\n      query: `\n          query {getAppointmentField(userId:\"${userId}\",field:\"inProgress\",query:\"true\")\n          {_id,title,type,date,time,seenTime,checkinTime,location,description,patient{_id,name,contact{phone,email},appointments{_id,date,title}},inProgress,attended,important,notes}}\n        `\n    };\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    }).then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n\n      return res.json();\n    }).then(resData => {\n      this.context.appointmentsInProgress = resData.data.getAppointmentField;\n      const responseAlert = JSON.stringify(resData.data).slice(2, 15);\n      this.setState({\n        userAlert: responseAlert\n      });\n\n      if (this.state.selectedPatient === {} || this.context.selectedstate === null) {\n        this.setState({\n          userAlert: \"No Patient Selected\"\n        });\n      }\n    }).catch(err => {\n      this.setState({\n        userAlert: err\n      });\n    });\n  }\n\n  componentWillUnmount() {\n    this.isActive = false;\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 965\n      },\n      __self: this\n    }, this.state.creatingDocument === true && React.createElement(PdfCreator, {\n      pdfType: this.state.pdfType,\n      pdfData: this.state.pdfData,\n      onClosePdfCreator: this.closePdfCreator,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 968\n      },\n      __self: this\n    }), React.createElement(AlertBox, {\n      authUserId: this.context.userId,\n      alert: this.state.userAlert,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 974\n      },\n      __self: this\n    }), React.createElement(SidebarControl, {\n      onShowSidebar: this.showSidebar,\n      onHideSidebar: this.hideSidebar,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 978\n      },\n      __self: this\n    }), React.createElement(Accordion, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 983\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 985\n      },\n      __self: this\n    }, this.state.sidebarShow === true && React.createElement(Col, {\n      md: 3,\n      className: \"MasterCol1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 988\n      },\n      __self: this\n    }, React.createElement(SidebarPage, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 989\n      },\n      __self: this\n    })), React.createElement(Col, {\n      md: 9,\n      className: \"MasterCol2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 993\n      },\n      __self: this\n    }, React.createElement(Container, {\n      className: \"containerCombinedDetail\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 995\n      },\n      __self: this\n    }, React.createElement(Tab.Container, {\n      id: \"left-tabs-example\",\n      defaultActiveKey: \"appointmentDetail\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 997\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 998\n      },\n      __self: this\n    }, React.createElement(Col, {\n      sm: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 999\n      },\n      __self: this\n    }, React.createElement(Nav, {\n      variant: \"pills\",\n      className: \"flex-column\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1000\n      },\n      __self: this\n    }, React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1001\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"MasterList\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1002\n      },\n      __self: this\n    }, \"MASTER LIST\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1004\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"disabled\",\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1005\n      },\n      __self: this\n    }, \"Search:\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1007\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"SearchInput\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1008\n      },\n      __self: this\n    }, \"Input\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1010\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"SearchResult\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1011\n      },\n      __self: this\n    }, \"Results\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1013\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"appointmentDetail\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1014\n      },\n      __self: this\n    }, \"Selected\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1016\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"appointmentCreate\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1017\n      },\n      __self: this\n    }, \"Create New\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1019\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"disabled\",\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1020\n      },\n      __self: this\n    }, \"Edit:\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1022\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"appointmentEditBasic\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1023\n      },\n      __self: this\n    }, \"Basic Info\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1025\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"appointmentEditField\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1026\n      },\n      __self: this\n    }, \"Single Field\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1028\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"appointmentEditPatient\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1029\n      },\n      __self: this\n    }, \"Patient\")))), React.createElement(Col, {\n      sm: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1034\n      },\n      __self: this\n    }, React.createElement(Tab.Content, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1035\n      },\n      __self: this\n    }, React.createElement(Tab.Pane, {\n      eventKey: \"appointmentDetail\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1036\n      },\n      __self: this\n    }, this.state.selectedAppointment === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1038\n      },\n      __self: this\n    }, \"Select an Appointment from the Master List\"), this.state.isLoading === false && this.state.selectedAppointment !== null && React.createElement(AppointmentDetail, {\n      authUserId: this.context.userId,\n      appointment: this.state.selectedAppointment,\n      onEdit: this.startUpdateAppointmentHandler,\n      canDelete: this.state.canDelete,\n      onDelete: this.modalDeleteHandler,\n      onCreatePdf: this.createPdf,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1047\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"appointmentCreate\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1058\n      },\n      __self: this\n    }, this.context.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1060\n      },\n      __self: this\n    }, \"Select someone from the Patients Page\"), this.context.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.startCreateAppointmentHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1065\n      },\n      __self: this\n    }, \"Create New\"), this.state.creating && this.context.selectedPatient !== null && React.createElement(CreateAppointmentForm, {\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmHandler,\n      onSubmit: this.modalConfirmHandler,\n      confirmText: \"Confirm\",\n      selectedPatient: this.context.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1071\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"appointmentEditBasic\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1083\n      },\n      __self: this\n    }, this.state.selectedAppointment === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1085\n      },\n      __self: this\n    }, \"Select an Appointment from the Master List\"), this.state.selectedAppointment !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.startUpdateAppointmentHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1090\n      },\n      __self: this\n    }, \"Edit Basic Data\"), this.state.updating && this.state.selectedAppointment !== null && React.createElement(UpdateAppointmentForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmUpdateHandler,\n      confirmText: \"Confirm\",\n      appointment: this.state.selectedAppointment,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1095\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"appointmentEditField\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1107\n      },\n      __self: this\n    }, this.state.selectedAppointment === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1109\n      },\n      __self: this\n    }, \"Select an Appointment from the Master List\"), this.state.selectedAppointment !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.startUpdateAppointmentHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1114\n      },\n      __self: this\n    }, \"Edit a Single Field\"), this.state.updating && this.state.selectedAppointment !== null && React.createElement(UpdateAppointmentFieldForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmUpdateFieldHandler,\n      confirmText: \"Confirm\",\n      appointment: this.state.selectedAppointment,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1119\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"appointmentEditPatient\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1131\n      },\n      __self: this\n    }, this.state.selectedAppointment === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1133\n      },\n      __self: this\n    }, \"Select an Appointment from the Master List\"), this.state.selectedAppointment !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      value: \"patient\",\n      onClick: this.updateAppointmentSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1138\n      },\n      __self: this\n    }, \"Change Patient:\"), this.state.selecteAppointment !== null && this.context.selectedPatient === null && this.state.appointmentUpdateField === \"patient\" && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1143\n      },\n      __self: this\n    }, \"Select someone from the Patients page\"), this.state.selectedAppointment !== null && this.context.selectedPatient !== null && this.state.appointmentUpdateField === \"patient\" && React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1150\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 8,\n      className: \"updateUserColAdd\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1151\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1152\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"bold\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1152\n      },\n      __self: this\n    }, \"Add Patient :\"), \" \", this.context.selectedPatient.name), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1153\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"bold\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1153\n      },\n      __self: this\n    }, \"To Appointment :\"), \" \", this.state.selectedAppointment.title, \"  \", React.createElement(\"span\", {\n      className: \"bold\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1153\n      },\n      __self: this\n    }, \"On :\"), \" \", new Date(this.state.selecteAppointment.date.substr(0, 10) * 1000).toISOString().slice(0, 10), \" \", React.createElement(\"span\", {\n      className: \"bold\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1153\n      },\n      __self: this\n    }, \"At :\"), \" \", this.state.selecteAppointment.time, \" ??\"), React.createElement(Button, {\n      variant: \"success\",\n      onClick: this.updateAppointmentPatientHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1154\n      },\n      __self: this\n    }, \"Yes\")))), React.createElement(Tab.Pane, {\n      eventKey: \"MasterList\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1162\n      },\n      __self: this\n    }, React.createElement(Container, {\n      className: \"containerUserMasterList\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1163\n      },\n      __self: this\n    }, React.createElement(Row, {\n      className: \"searchListRow\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1164\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"primary\",\n      size: \"sm\",\n      onClick: this.fetchAppointmentsAsc,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1165\n      },\n      __self: this\n    }, \"Sort Asc\"), React.createElement(Button, {\n      variant: \"info\",\n      size: \"sm\",\n      onClick: this.fetchAppointmentsDesc,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1168\n      },\n      __self: this\n    }, \"Sort Desc\"), this.state.isLoading ? React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1172\n      },\n      __self: this\n    }) : React.createElement(AppointmentList, {\n      appointments: this.state.appointments,\n      authUserId: this.context.userId,\n      onViewDetail: this.showDetailHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1175\n      },\n      __self: this\n    })))), React.createElement(Tab.Pane, {\n      eventKey: \"SearchInput\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1185\n      },\n      __self: this\n    }, React.createElement(Container, {\n      className: \"containerSearchUserInput\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1186\n      },\n      __self: this\n    }, React.createElement(Row, {\n      className: \"searchUserRowAdd\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1187\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"primary\",\n      onClick: this.startSearchAppointmentHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1188\n      },\n      __self: this\n    }, \"Search\")), React.createElement(Row, {\n      className: \"searchUserRowForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1191\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 10,\n      className: \"searchUserColForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1192\n      },\n      __self: this\n    }, React.createElement(Tabs, {\n      defaultActiveKey: \"Field\",\n      id: \"uncontrolled-tab-example\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1193\n      },\n      __self: this\n    }, React.createElement(Tab, {\n      eventKey: \"Search\",\n      title: \"Search:\",\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1194\n      },\n      __self: this\n    }), React.createElement(Tab, {\n      eventKey: \"Field\",\n      title: \"Search by Field:\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1196\n      },\n      __self: this\n    }, this.state.searching !== true && React.createElement(Button, {\n      variant: \"outline-warning\",\n      className: \"confirmEditButton\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1198\n      },\n      __self: this\n    }, \"Click the 'Search' Button start\"), this.state.searching === true && React.createElement(SearchAppointmentForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmSearchHandler,\n      confirmText: \"Search\",\n      appointment: this.context.selectedAppointment,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1203\n      },\n      __self: this\n    })), React.createElement(Tab, {\n      eventKey: \"Id\",\n      title: \"Search by Id:\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1214\n      },\n      __self: this\n    }, this.state.searching !== true && React.createElement(Button, {\n      variant: \"outline-warning\",\n      className: \"confirmEditButton\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1216\n      },\n      __self: this\n    }, \"Click the 'Search' Button start\"), this.state.searching === true && React.createElement(SearchAppointmentIdForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmSearchIdHandler,\n      confirmText: \"Search\",\n      appointment: this.context.selectedAppointment,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1221\n      },\n      __self: this\n    })), React.createElement(Tab, {\n      eventKey: \"Patient\",\n      title: \"Search by Patient:\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1232\n      },\n      __self: this\n    }, this.state.searching !== true && React.createElement(Button, {\n      variant: \"outline-warning\",\n      className: \"confirmEditButton\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1234\n      },\n      __self: this\n    }, \"Click the 'Search' Button start\"), this.state.searching === true && React.createElement(SearchAppointmentPatientForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmSearchPatientHandler,\n      confirmText: \"Search\",\n      appointment: this.context.selectedAppointment,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1239\n      },\n      __self: this\n    })), React.createElement(Tab, {\n      eventKey: \"Date\",\n      title: \"Search by Date:\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1250\n      },\n      __self: this\n    }, this.state.searching !== true && React.createElement(Button, {\n      variant: \"outline-warning\",\n      className: \"confirmEditButton\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1252\n      },\n      __self: this\n    }, \"Click the 'Search' Button start\"), this.state.searching === true && React.createElement(SearchAppointmentDateForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmSearchDateHandler,\n      confirmText: \"Search\",\n      appointment: this.context.selectedAppointment,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1257\n      },\n      __self: this\n    })), React.createElement(Tab, {\n      eventKey: \"Date Range\",\n      title: \"Search by Date Range:\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1268\n      },\n      __self: this\n    }, this.state.searching !== true && React.createElement(Button, {\n      variant: \"outline-warning\",\n      className: \"confirmEditButton\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1270\n      },\n      __self: this\n    }, \"Click the 'Search' Button start\"), this.state.searching === true && React.createElement(SearchAppointmentDateRangeForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmSearchDateRangeHandler,\n      confirmText: \"Search\",\n      appointment: this.context.selectedAppointment,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1275\n      },\n      __self: this\n    })))), React.createElement(Col, {\n      md: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1288\n      },\n      __self: this\n    })))), React.createElement(Tab.Pane, {\n      eventKey: \"SearchResult\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1294\n      },\n      __self: this\n    }, React.createElement(Container, {\n      className: \"containerSearchUserResults\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1295\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1296\n      },\n      __self: this\n    }, React.createElement(Card, {\n      className: \"searchCard\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1297\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      className: \"searchCardBody\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1298\n      },\n      __self: this\n    }, React.createElement(Card.Title, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1299\n      },\n      __self: this\n    }, \"Your Search\"), React.createElement(Card.Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1300\n      },\n      __self: this\n    }, \"Field: \", this.state.appointmentSearchField), React.createElement(Card.Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1303\n      },\n      __self: this\n    }, \"Query: \", this.state.appointmentSearchQuery)))), React.createElement(Row, {\n      className: \"searchListRow\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1309\n      },\n      __self: this\n    }, this.state.searchAppointments !== [] && React.createElement(SearchAppointmentList, {\n      searchAppointments: this.state.searchAppointments,\n      authUserId: this.context.userId,\n      onCancel: this.modalCancelHandler,\n      onViewDetail: this.showDetailHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1312\n      },\n      __self: this\n    })))))))))))));\n  }\n\n}\n\nAppointmentsPage.contextType = AuthContext;\nexport default AppointmentsPage;","map":{"version":3,"sources":["/Users/pedrojacob/Downloads/AMR/websites/office_records/ENT_EMR/frontend/src/pages/Appointments.js"],"names":["React","Component","Container","Row","Col","Button","Accordion","Tabs","Tab","Nav","Card","Spinner","AuthContext","AlertBox","PdfCreator","LoadingOverlay","SidebarPage","SidebarControl","AppointmentList","AppointmentDetail","SearchAppointmentList","SearchAppointmentForm","SearchAppointmentIdForm","SearchAppointmentPatientForm","SearchAppointmentDateForm","SearchAppointmentDateRangeForm","CreateAppointmentForm","UpdateAppointmentForm","UpdateAppointmentFieldForm","AppointmentsPage","state","creating","updating","deleting","searching","searchAppointments","appointments","isLoading","selectedAppointment","selectedPatient","appointmentUpdateField","appointmentSearchField","appointmentSearchQuery","canDelete","userAlert","overlay","overlayStatus","creatingDocument","createPdf","pdfData","pdfType","sidebarShow","mCol1Size","mCol2Size","isActive","startCreateAppointmentHandler","setState","startUpdateAppointmentHandler","startSearchAppointmentHandler","modalConfirmHandler","event","userId","context","selectedPatientId","_id","token","undefined","title","target","formGridTitle","value","type","formGridType","date","formGridDate","formGridDateTodayCheckbox","checked","Date","toISOString","slice","newAppointmentCalendarDate","console","log","time","formGridTime","seenTime","formGridSeenTime","checkinTime","formGridCheckinTime","location","formGridLocation","description","formGridDescription","inProgress","formGridInProgress","attended","formGridAttended","important","formGridImportant","trim","length","requestBody","query","fetch","method","body","JSON","stringify","headers","Authorization","then","res","status","Error","json","resData","responseAlert","data","push","createAppointment","fetchAppointments","catch","err","modalCancelHandler","modalConfirmUpdateHandler","user","role","appointmentId","updateAppointmentCalendarDate","updatedAppointmentId","updateAppointment","updatedAppointment","find","e","updatedAppointmentPos","indexOf","slicedArray","splice","updateAppointmentPatientHandler","selectedAppointmentId","patientUpdateField","updateAppointmentPatient","modalConfirmUpdateFieldHandler","preventDefault","field","formGridQuery","formGridFieldSelect","formGridField","updateAppointmentField","modalConfirmSearchHandler","formBasicQuery","formBasicFieldSelect","formBasicField","search","getAppointmentField","modalConfirmSearchIdHandler","formBasicId","getAppointmentId","modalConfirmSearchPatientHandler","formBasicPatientId","getAppointmentPatient","modalConfirmSearchDateHandler","appointmentDate","formBasicDate","formBasicDateTodayCheckbox","appointmentCalendarDate","getAppointmentDate","modalConfirmSearchDateRangeHandler","appointmentStartDate","formBasicStartDate","appointmentEndDate","formBasicEndDate","getAppointmentDateRange","fetchAppointmentsAsc","appointmentsDateAsc","fetchAppointmentsDesc","appointmentsDateDesc","modalDeleteHandler","deletedAppointment","deleteAppointment","deletedAppointmentId","deletedAppointmentPos","showDetailHandler","prevState","selecteAppointment","appointment","patient","name","contact","email","phone","notes","closePdfCreator","showSidebar","hideSidebar","componentDidMount","fetchAppointmentToday","fetchAppointmentInProgress","updateAppointmentSpecial","appointmentsToday","getAppointmentToday","appointmentsInProgress","selectedstate","componentWillUnmount","render","bind","substr","contextType"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Button from 'react-bootstrap/Button';\nimport Accordion from 'react-bootstrap/Accordion';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\nimport Nav from 'react-bootstrap/Nav';\nimport Card from 'react-bootstrap/Card';\n\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\nimport AlertBox from '../components/AlertBox';\nimport PdfCreator from '../components/PdfCreator';\nimport LoadingOverlay from '../components/LoadingOverlay';\nimport SidebarPage from './Sidebar';\nimport SidebarControl from '../components/SidebarControl';\n\nimport AppointmentList from '../components/Appointments/AppointmentList/AppointmentList';\nimport AppointmentDetail from '../components/Appointments/AppointmentDetail';\nimport SearchAppointmentList from '../components/Appointments/AppointmentList/SearchAppointmentList';\nimport SearchAppointmentForm from '../components/Forms/SearchAppointmentForm';\nimport SearchAppointmentIdForm from '../components/Forms/SearchAppointmentIdForm';\nimport SearchAppointmentPatientForm from '../components/Forms/SearchAppointmentPatientForm';\nimport SearchAppointmentDateForm from '../components/Forms/SearchAppointmentDateForm';\nimport SearchAppointmentDateRangeForm from '../components/Forms/SearchAppointmentDateRangeForm';\nimport CreateAppointmentForm from '../components/Forms/CreateAppointmentForm';\nimport UpdateAppointmentForm from '../components/Forms/UpdateAppointmentForm';\nimport UpdateAppointmentFieldForm from '../components/Forms/UpdateAppointmentFieldForm';\n\nimport './Users.css';\n\nclass AppointmentsPage extends Component {\n  state = {\n    creating: false,\n    updating: false,\n    deleting: false,\n    searching: false,\n    searchAppointments: [],\n    appointments: [],\n    isLoading: false,\n    selectedAppointment: null,\n    selectedPatient: null,\n    appointmentUpdateField: null,\n    appointmentSearchField: null,\n    appointmentSearchQuery: null,\n    canDelete: null,\n    userAlert: null,\n    overlay: false,\n    overlayStatus: \"test\",\n    creatingDocument: false,\n    createPdf: false,\n    pdfData: null,\n    pdfType: null,\n    sidebarShow: true,\n    mCol1Size: 3,\n    mCol2Size: 9\n  };\n  isActive = true;\n\n  static contextType = AuthContext;\n\n  componentDidMount() {\n    if (this.context.user.name === \"Lord-of-the-Manor\"){\n      this.setState({canDelete: true})\n    }\n\n    if (JSON.stringify(this.context.selectedAppointment) !== \"{}\") {\n      this.setState({ selectedAppointment: this.context.selectedAppointment })\n    }\n    this.setState({ selectedPatient: this.context.selectedPatient })\n\n    this.fetchAppointments();\n    this.fetchAppointmentToday();\n    this.fetchAppointmentInProgress();\n  }\n\n\n  startCreateAppointmentHandler = () => {\n    this.setState({ creating: true });\n  };\n  startUpdateAppointmentHandler = () => {\n    this.setState({ updating: true });\n  };\n  startSearchAppointmentHandler = () => {\n    this.setState({ searching: true });\n  };\n\n  modalConfirmHandler = (event) => {\n\n    this.setState({ creating: false, userAlert: \"creating appointment...\" });\n    const userId = this.context.userId;\n    const selectedPatientId = this.context.selectedPatient._id;\n    const token = this.context.token;\n      if (selectedPatientId === undefined) {\n        this.setState({userAlert: \"select a Patient before creating an Appointment!!...\"});\n        return\n      }\n    const title = event.target.formGridTitle.value;\n    const type = event.target.formGridType.value;\n    let date = event.target.formGridDate.value;\n    if (event.target.formGridDateTodayCheckbox.checked === true) {\n      date = new Date().toISOString().slice(0,10);\n    }\n    if (\n      event.target.newAppointmentCalendarDate.value !== null &&\n      event.target.formGridDateTodayCheckbox.checked !== true\n    ) {\n      console.log(\"fancyDate2\", new Date(event.target.newAppointmentCalendarDate.value).toISOString().slice(0,10));\n      date = new Date(event.target.newAppointmentCalendarDate.value).toISOString().slice(0,10);\n    }\n    const time = event.target.formGridTime.value;\n    const seenTime = event.target.formGridSeenTime.value;\n    const checkinTime = event.target.formGridCheckinTime.value;\n    const location = event.target.formGridLocation.value;\n    const description = event.target.formGridDescription.value;\n    const inProgress = event.target.formGridInProgress.value;\n    const attended = event.target.formGridAttended.value;\n    const important = event.target.formGridImportant.value;\n\n    if (\n      title.trim().length === 0 ||\n      type.trim().length === 0 ||\n      date.trim().length === 0 ||\n      time.trim().length === 0 ||\n      location.trim().length === 0\n    ) {\n      this.setState({userAlert: \"blank fields detected!!!...Please try again...\"});\n      return\n    };\n\n    const requestBody = {\n      query: `\n          mutation {createAppointment(userId:\"${userId}\",\n          patientId:\"${selectedPatientId}\",\n          appointmentInput:{\n            title:\"${title}\",\n            type:\"${type}\",\n            date:\"${date}\",\n            time:\"${time}\",\n            seenTime:\"${seenTime}\",\n            checkinTime:\"${checkinTime}\",\n            location:\"${location}\",\n            description:\"${description}\",\n            inProgress:${inProgress},\n            attended:${attended},\n            important:${important}})\n          {_id,title,type,date,time,seenTime,checkinTime,location,description,patient{_id,name,contact{phone,email},appointments{_id,date,title}},inProgress,attended,important,notes}}\n        `\n    };\n\n    // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const responseAlert = JSON.stringify(resData.data).slice(2,15);\n        this.setState({userAlert: responseAlert});\n\n        this.state.appointments.push(resData.data.createAppointment);\n        this.context.appointments = this.state.appointments;\n        this.fetchAppointments();\n        this.setState({selectedAppointment: resData.data.createAppointment})\n      })\n      .catch(err => {\n        this.setState({userAlert: err});\n      });\n  };\n\n  modalCancelHandler = () => {\n    this.setState({ creating: false, updating: false, searching: false, selectedAppointment: null });\n  };\n\n\n  modalConfirmUpdateHandler = (event) => {\n\n    if(this.context.user.role !== 'admin') {\n      this.setState({userAlert: \"Not the Admin! No edit permission!!\"});\n    }\n\n    const token = this.context.token;\n    const userId = this.context.userId;\n    const appointmentId = this.context.selectedAppointment._id;\n\n    this.setState({ updating: false, userAlert: \"updating appointment...\" });\n    let title = event.target.formGridTitle.value;\n    let type = event.target.formGridType.value;\n\n    let date = event.target.formGridDate.value;\n    if (event.target.formGridDateTodayCheckbox.checked === true) {\n      date = new Date().toISOString().slice(0,10);\n    }\n    if (\n      event.target.updateAppointmentCalendarDate.value !== null &&\n      event.target.formGridDateTodayCheckbox.checked !== true\n    ) {\n      console.log(\"fancyDate2\", new Date(event.target.updateAppointmentCalendarDate.value).toISOString().slice(0,10));\n      date = new Date(event.target.updateAppointmentCalendarDate.value).toISOString().slice(0,10);\n    }\n\n    let time = event.target.formGridTime.value;\n    let seenTime = event.target.formGridSeenTime.value;\n    let checkinTime = event.target.formGridCheckinTime.value;\n    let location = event.target.formGridLocation.value;\n    let description = event.target.formGridDescription.value;\n    let inProgress = event.target.formGridInProgress.value;\n    let attended = event.target.formGridAttended.value;\n    let important = event.target.formGridImportant.value;\n\n    if (title.trim().length === 0 ) {\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      title  = this.context.selectedAppointment.title;\n    }\n    if (type.trim().length === 0 ) {\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      type  = this.context.selectedAppointment.type;\n    }\n    if (date.trim().length === 0 ) {\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      date  = this.context.selectedAppointment.date;\n    }\n    if (time.trim().length === 0 ) {\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      time  = this.context.selectedAppointment.time;\n    }\n    if (seenTime.trim().length === 0 ) {\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      seenTime  = this.context.selectedAppointment.seenTime;\n    }\n    if (checkinTime.trim().length === 0 ) {\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      checkinTime  = this.context.selectedAppointment.checkinTime;\n    }\n    if (location.trim().length === 0 ) {\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      location  = this.context.selectedAppointment.location;\n    }\n    if (description.trim().length === 0 ) {\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      description  = this.context.selectedAppointment.description;\n    }\n    if (inProgress.trim().length === 0 ) {\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      inProgress  = this.context.selectedAppointment.inProgress;\n    }\n    if (attended.trim().length === 0 ) {\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      attended  = this.context.selectedAppointment.attended;\n    }\n    if (important.trim().length === 0 ) {\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      important  = this.context.selectedAppointment.important;\n    }\n\n    const requestBody = {\n      query: `\n      mutation {updateAppointment(userId:\"${userId}\",appointmentId:\"${appointmentId}\",appointmentInput:{title:\"${title}\",type:\"${type}\",date:\"${date}\",time:\"${time}\",seenTime:\"${seenTime}\",checkinTime:\"${checkinTime}\",location:\"${location}\",description:\"${description}\",inProgress:${inProgress},attended:${attended},important:${important},})\n      {_id,title,type,date,time,seenTime,checkinTime,location,description,patient{_id,name,contact{phone,email},appointments{_id,date,title}},inProgress,attended,important,notes}}\n        `\n    };\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const updatedAppointmentId = resData.data.updateAppointment._id;\n        const updatedAppointment = this.state.appointments.find(e => e._id === updatedAppointmentId);\n        const updatedAppointmentPos = this.state.appointments.indexOf(updatedAppointment);\n        const slicedArray = this.state.appointments.splice(updatedAppointmentPos, 1);\n        this.state.appointments.push(resData.data.updateAppointment);\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        // this.setState({ userAlert: responseAlert })\n        this.fetchAppointments();\n        this.setState({ userAlert: responseAlert, selectedAppointment: resData.data.updateAppointment })\n      })\n      .catch(err => {\n        this.setState({userAlert: err});\n      });\n  };\n\n\n  updateAppointmentPatientHandler = (event) => {\n\n    const token = this.context.token;\n    const userId = this.context.userId;\n    let selectedAppointmentId = this.context.selectedAppointment._id;\n    let selectedPatientId = this.context.selectedPatient._id;\n    if(\n      this.context.user.role !== 'admin'\n    ) {\n      this.setState({userAlert: \"No edit permission!!\"});\n      return;\n    }\n\n    if (selectedPatientId === undefined) {\n        this.setState({userAlert: \"select a Patient before creating an Appointment!!...\"});\n        return\n    }\n\n    this.setState({ updating: false , patientUpdateField: null, userAlert: \"updating appointment patient...\" });\n\n      const requestBody = {\n        query:`\n        mutation {updateAppointmentPatient(userId:\"${userId}\",appointmentId:\"${selectedAppointmentId}\",patientId:\"${selectedPatientId}\")\n        {_id,title,type,date,time,seenTime,checkinTime,location,description,patient{_id,name,contact{phone,email},appointments{_id,date,title}},inProgress,attended,important,notes}}\n        `\n      }\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const updatedAppointmentId = resData.data.updateAppointmentPatient._id;\n        const updatedAppointment = this.state.appointments.find(e => e._id === updatedAppointmentId);\n        const updatedAppointmentPos = this.state.appointments.indexOf(updatedAppointment);\n        const slicedArray = this.state.appointments.splice(updatedAppointmentPos, 1);\n        this.state.appointments.push(resData.data.updateAppointmentPatient);\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert})\n        this.fetchAppointments();\n        this.setState({selectedAppointment: resData.data.updateAppointmentPatient})\n      })\n      .catch(err => {\n        this.setState({userAlert: err});\n      });\n  }\n\n  modalConfirmUpdateFieldHandler = (event) => {\n    event.preventDefault();\n\n    const token = this.context.token;\n    const userId = this.context.userId;\n    let selectedAppointmentId = this.context.selectedAppointment._id;\n    if( this.context.user.role !== 'admin') {\n      this.setState({ userAlert: \"Not the creator or Admin! No edit permission!!\"});\n      selectedAppointmentId = null;\n    }\n    this.setState({ updating: false, userAlert: \"Updating selected Appointment by Field\" });\n\n    let field = null;\n    let query = event.target.formGridQuery.value;\n    if (event.target.formGridFieldSelect.value === \"select\") {\n      field = event.target.formGridField.value;\n    } else {\n      field = event.target.formGridFieldSelect.value;\n    }\n\n    const requestBody = {\n      query:`\n      mutation {updateAppointmentField(userId:\"${userId}\",appointmentId:\"${selectedAppointmentId}\",field:\"${field}\",query:\"${query}\")\n      {_id,title,type,date,time,seenTime,checkinTime,location,description,patient{_id,name,contact{phone,email},appointments{_id,date,title}},inProgress,attended,important,notes}}\n      `};\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n\n        const updatedAppointmentId = resData.data.updateAppointmentField._id;\n        const updatedAppointment = this.state.appointments.find(e => e._id === updatedAppointmentId);\n        const updatedAppointmentPos = this.state.appointments.indexOf(updatedAppointment);\n        const slicedArray = this.state.appointments.splice(updatedAppointmentPos, 1);\n        this.state.appointments.push(resData.data.updateAppointmentField);\n        this.context.appointments = this.state.appointments;\n        this.fetchAppointments();\n        this.setState({ userAlert: responseAlert, selectedAppointment: resData.data.updateAppointmentField })\n      })\n      .catch(err => {\n        this.setState({userAlert: err});\n      });\n  }\n\n  modalConfirmSearchHandler = (event) => {\n\n    let userId = this.context.userId;\n    const token = this.context.token;\n\n    this.setState({ searching: false, userAlert: \"Searching for Appointment...\" });\n\n    let field = null;\n    let query = event.target.formBasicQuery.value;\n    if (event.target.formBasicFieldSelect.value === \"select\") {\n      field = event.target.formBasicField.value;\n    } else {\n      field = event.target.formBasicFieldSelect.value;\n    }\n\n    if (\n      field.trim().length === 0 ||\n      query.trim().length === 0\n    ) {\n      this.setState({userAlert: \"blank fields detected!!!...Please try again...\"});\n      return;\n    }\n\n    const search = { field, query }\n    const requestBody = {\n      query: `\n        query {getAppointmentField(userId:\"${userId}\", field:\"${field}\", query:\"${query}\")\n        {_id,title,type,date,time,seenTime,checkinTime,location,description,patient{_id,name,contact{phone,email},appointments{_id,date,title}},inProgress,attended,important,notes}}\n      `}\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const responseAlert = JSON.stringify(resData.data).slice(2,15);\n        this.setState({ searchAppointments: resData.data.getAppointmentField, userAlert: responseAlert})\n        // this.fetchAppointments();\n      })\n      .catch(err => {\n        this.setState({userAlert: err});\n      });\n  }\n\n  modalConfirmSearchIdHandler = (event) => {\n\n      let userId = this.context.userId;\n      const token = this.context.token;\n      this.setState({ searching: false, userAlert: \"Searching for Appointment by Id...\" });\n      let selectedAppointmentId = event.target.formBasicId.value;\n      const requestBody = {\n        query: `\n          query {getAppointmentId(userId:\"${userId}\", appointmentId:\"${selectedAppointmentId}\")\n          {_id,title,type,date,time,seenTime,checkinTime,location,description,patient{_id,name,contact{phone,email},appointments{_id,date,title}},inProgress,attended,important,notes}}\n        `}\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          const responseAlert = JSON.stringify(resData.data).slice(2,15);\n          this.setState({ searchAppointments: [resData.data.getAppointmentId], userAlert: responseAlert})\n          // this.fetchUsers();\n        })\n        .catch(err => {\n          this.setState({userAlert: err});\n        });\n  }\n\n  modalConfirmSearchPatientHandler = (event) => {\n\n      let userId = this.context.userId;\n      const token = this.context.token;\n      this.setState({ searching: false, userAlert: \"Searching for Appointment by Patient...\" });\n      let selectedPatientId = event.target.formBasicPatientId.value;\n      const requestBody = {\n        query: `\n          query {getAppointmentPatient(userId:\"${userId}\", patientId:\"${selectedPatientId}\")\n          {_id,title,type,date,time,seenTime,checkinTime,location,description,patient{_id,name,contact{phone,email},appointments{_id,date,title}},inProgress,attended,important,notes}}\n        `}\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          const responseAlert = JSON.stringify(resData.data).slice(2,15);\n          this.setState({ searchAppointments: resData.data.getAppointmentPatient, userAlert: responseAlert })\n          // this.fetchUsers();\n        })\n        .catch(err => {\n          this.setState({userAlert: err});\n        });\n\n  }\n  modalConfirmSearchDateHandler = (event) => {\n    console.log(\"here\");\n\n      let userId = this.context.userId;\n      const token = this.context.token;\n      this.setState({ searching: false, userAlert: \"Searching for Appointment by Date...\" });\n      let appointmentDate = event.target.formBasicDate.value;\n      if (event.target.formBasicDateTodayCheckbox.checked === true) {\n        appointmentDate = new Date().toISOString().slice(0,10);\n      }\n\n      if (\n        event.target.formBasicDateTodayCheckbox.checked === true &&\n        event.target.appointmentCalendarDate.value !== null\n      ) {\n        console.log(\"fancyDate2\", new Date(event.target.appointmentCalendarDate.value).toISOString().slice(0,10));\n        appointmentDate = new Date(event.target.appointmentCalendarDate.value).toISOString().slice(0,10);\n      }\n\n      const requestBody = {\n        query: `\n          query {getAppointmentDate(userId:\"${userId}\",date:\"${appointmentDate}\")\n          {_id,title,type,date,time,seenTime,checkinTime,location,description,patient{_id,name,contact{phone,email},appointments{_id,date,title}},inProgress,attended,important,notes}}\n        `}\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const responseAlert = JSON.stringify(resData.data).slice(2,15);\n        this.setState({ searchAppointments: resData.data.getAppointmentDate, userAlert: responseAlert});\n        // this.fetchUsers();\n      })\n      .catch(err => {\n        this.setState({userAlert: err});\n      });\n\n  }\n  modalConfirmSearchDateRangeHandler = (event) => {\n\n      let userId = this.context.userId;\n      const token = this.context.token;\n      this.setState({ searching: false, userAlert: \"Searching for Appointment by Date range...\" });\n      let appointmentStartDate = event.target.formBasicStartDate.value;\n      let appointmentEndDate = event.target.formBasicEndDate.value;\n\n      const requestBody = {\n        query: `\n          query {getAppointmentDateRange(userId:\"${userId}\",startDate:\"${appointmentStartDate}\",endDate:\"${appointmentEndDate}\")\n          {_id,title,type,date,time,seenTime,checkinTime,location,description,patient{_id,name,contact{phone,email},appointments{_id,date,title}},inProgress,attended,important,notes}}\n        `}\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const responseAlert = JSON.stringify(resData.data).slice(2,15);\n        this.setState({ searchAppointments: resData.data.getAppointmentDateRange, userAlert: responseAlert});\n        // this.fetchUsers();\n      })\n      .catch(err => {\n        this.setState({userAlert: err});\n      });\n  }\n\n\n\n  modalCancelHandler = () => {\n    this.setState({ creating: false, updating: false, searching: false, selectedAppointment: null });\n  };\n\n\n  fetchAppointments() {\n\n    const userId = this.context.userId;\n    const token = this.context.token;\n    this.setState({ isLoading: true, userAlert: \"Fetching Appointment Master List...\" });\n    const requestBody = {\n      query: `\n            query {appointments(userId:\"${userId}\")\n            {_id,title,type,date,time,seenTime,checkinTime,location,description,patient{_id,name,contact{phone,email},appointments{_id,date,title}},inProgress,attended,important,notes}}\n        `};\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        // if (this.isActive) {\n          this.setState({ appointments: resData.data.appointments, isLoading: false, userAlert: responseAlert });\n          this.context.appointments = this.state.appointments;\n        // }\n      })\n      .catch(err => {\n        this.setState({userAlert: err});\n        if (this.isActive) {\n          this.setState({ isLoading: false });\n        }\n      });\n  }\n\n  fetchAppointmentsAsc = () => {\n\n    const userId = this.context.userId;\n    const token = this.context.token;\n    this.setState({ isLoading: true, userAlert: \"Fetching Appointment Master List in Ascending order...\" });\n    const requestBody = {\n      query: `\n            query {appointmentsDateAsc(userId:\"${userId}\")\n            {_id,title,type,date,time,seenTime,checkinTime,location,description,patient{_id,name,contact{phone,email},appointments{_id,date,title}},inProgress,attended,important,notes}}\n        `};\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const responseAlert = JSON.stringify(resData.data).slice(2,15);\n        this.setState({appointments: resData.data.appointmentsDateAsc, userAlert: responseAlert, isLoading: false })\n        this.context.appointments = resData.data.appointmentsDateAsc;\n      })\n      .catch(err => {\n        this.setState({userAlert: err, isLoading: false});\n      });\n  }\n  fetchAppointmentsDesc = () => {\n\n    this.setState({ isLoading: true, userAlert: \"Fetching Appointment Master List in Ascending order...\" });\n    const userId = this.context.userId;\n    const token = this.context.token;\n    const requestBody = {\n      query: `\n            query {appointmentsDateDesc(userId:\"${userId}\")\n            {_id,title,type,date,time,seenTime,checkinTime,location,description,patient{_id,name,contact{phone,email},appointments{_id,date,title}},inProgress,attended,important,notes}}\n        `};\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const appointments = resData.data.appointmentsDateDesc;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.context.appointments = appointments;\n        this.setState({appointments: appointments, userAlert: responseAlert, isLoading: false})\n        // if (this.isActive) {\n        //   this.setState({ appointments: appointments, isLoading: false });\n        // }\n      })\n      .catch(err => {\n        this.setState({userAlert: err});\n        // if (this.isActive) {\n        //   this.setState({ isLoading: false });\n        // }\n      });\n  }\n\n  modalDeleteHandler = () => {\n\n    const userId = this.context.userId;\n    const selectedAppointmentId = this.context.selectedAppointment._id;\n\n    if(this.context.user.role !== 'admin') {\n      this.setState({userAlert: \"Not the Admin! No edit permission!!\"});\n    }\n\n    this.setState({deleting: true, userAlert: \"Deleting selected Appointment...\"});\n\n    const requestBody = {\n      query: `\n          mutation {deleteAppointment(userId:\"${userId}\",appointmentId:\"${selectedAppointmentId}\")\n          {_id,title,type,date,time,seenTime,checkinTime,location,description,patient{_id,name,appointments{_id,date,title}},inProgress,attended,important,notes}}\n        `};\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        let deletedAppointment = resData.data.deleteAppointment;\n        const responseAlert = JSON.stringify(resData.data).slice(2,15);\n        let deletedAppointmentId = deletedAppointment._id;\n        deletedAppointment = this.state.appointments.find(e => e._id === deletedAppointmentId);\n        const deletedAppointmentPos = this.state.appointments.indexOf(deletedAppointment);\n        const slicedArray = this.state.appointments.splice(deletedAppointmentPos, 1);\n        this.setState({ deleting: false, userAlert: responseAlert });\n        this.fetchAppointments();\n      })\n      .catch(err => {\n        this.setState({userAlert: err});\n        if (this.isActive) {\n          this.setState({ deleting: false });\n        }\n      });\n\n\n  }\n\n  updateAppointmentSpecial (event) {\n\n    const field = event.target.value;\n    this.setState({ appointmentUpdateField: field});\n\n  }\n\n\n  showDetailHandler = appointmentId => {\n\n    this.setState(prevState => {\n      const selectedAppointment = prevState.appointments.find(e => e._id === appointmentId);\n      this.setState({selectedAppointment: selectedAppointment});\n      this.context.selectedAppointment = selectedAppointment;\n      return { selecteAppointment: selectedAppointment };\n    });\n  };\n\n\n  fetchAppointmentToday() {\n\n    this.setState({ userAlert: \"Fetching Today's Appointments...\"})\n    const token = this.context.token;\n    const userId = this.context.userId;\n    const requestBody = {\n      query: `\n          query {getAppointmentToday(userId:\"${userId}\")\n          {_id,title,type,date,time,seenTime,checkinTime,location,description,patient{_id,name,contact{phone,email},appointments{_id,date,title}},inProgress,attended,important,notes}}\n        `\n    };\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        this.context.appointmentsToday = resData.data.getAppointmentToday;\n        const responseAlert = JSON.stringify(resData.data).slice(2,15);\n        this.setState({userAlert: responseAlert});\n      })\n      .catch(err => {\n        this.setState({userAlert: err});\n      });\n  }\n\n\n  fetchAppointmentInProgress() {\n\n    this.setState({ userAlert: \"Fetching Today's Appointments In-Progress...\"})\n    const token = this.context.token;\n    const userId = this.context.userId;\n    const requestBody = {\n      query: `\n          query {getAppointmentField(userId:\"${userId}\",field:\"inProgress\",query:\"true\")\n          {_id,title,type,date,time,seenTime,checkinTime,location,description,patient{_id,name,contact{phone,email},appointments{_id,date,title}},inProgress,attended,important,notes}}\n        `\n    };\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        this.context.appointmentsInProgress = resData.data.getAppointmentField;\n        const responseAlert = JSON.stringify(resData.data).slice(2,15);\n        this.setState({userAlert: responseAlert});\n        if (this.state.selectedPatient === {} || this.context.selectedstate === null) {\n          this.setState({userAlert: \"No Patient Selected\"})\n        }\n      })\n      .catch(err => {\n        this.setState({userAlert: err});\n      });\n  }\n\n  createPdf = (appointment) => {\n\n      const pdfData = {\n        title: \"This pdf is supplied with Appointment data...\",\n        appointment: {\n          _id: appointment._id,\n          title: appointment.title,\n          type: appointment.type,\n          date: appointment.date,\n          time: appointment.time,\n          seenTime: appointment.seenTime,\n          checkinTime: appointment.checkinTime,\n          location: appointment.location,\n          description: appointment.description,\n          patient:{\n            _id: appointment.patient._id,\n            name: appointment.patient.name,\n            contact:\n            {\n              email: appointment.patient.contact.email,\n              phone: appointment.patient.contact.phone\n            }},\n              inProgress: appointment.inProgress,\n              attended: appointment.attended,\n              important: appointment.important,\n              notes: appointment.notes\n            }\n        }\n\n    this.setState({createPdf: true, pdfData: pdfData})\n  }\n\n  closePdfCreator = () => {\n      this.setState({createPdf: false, pdfData: null})\n  }\n\n\n  showSidebar = () => {\n    console.log(`\n      showing sidebar...\n      `);\n      this.setState({\n        sidebarShow: true,\n        mCol2Size: 9\n      })\n  }\n\n  hideSidebar = () => {\n    console.log(`\n      hiding sidebar...\n      `);\n      this.setState({\n        sidebarShow: false,\n        mCol2Size: 11\n      })\n  }\n\n  componentWillUnmount() {\n    this.isActive = false;\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n\n      {this.state.creatingDocument === true && (\n        <PdfCreator\n          pdfType={this.state.pdfType}\n          pdfData={this.state.pdfData}\n          onClosePdfCreator={this.closePdfCreator}\n        />\n      )}\n      <AlertBox\n        authUserId={this.context.userId}\n        alert={this.state.userAlert}\n      />\n      <SidebarControl\n        onShowSidebar={this.showSidebar}\n        onHideSidebar={this.hideSidebar}\n      />\n\n      <Accordion>\n\n      <Row>\n\n      {this.state.sidebarShow === true && (\n        <Col md={3} className=\"MasterCol1\">\n          <SidebarPage/>\n        </Col>\n      )}\n\n      <Col md={9} className=\"MasterCol2\">\n\n          <Container className=\"containerCombinedDetail\">\n\n          <Tab.Container id=\"left-tabs-example\" defaultActiveKey=\"appointmentDetail\">\n            <Row>\n              <Col sm={2}>\n                <Nav variant=\"pills\" className=\"flex-column\">\n                  <Nav.Item>\n                    <Nav.Link eventKey=\"MasterList\">MASTER LIST</Nav.Link>\n                  </Nav.Item>\n                  <Nav.Item>\n                    <Nav.Link eventKey=\"disabled\" disabled>Search:</Nav.Link>\n                  </Nav.Item>\n                  <Nav.Item>\n                    <Nav.Link eventKey=\"SearchInput\">Input</Nav.Link>\n                  </Nav.Item>\n                  <Nav.Item>\n                    <Nav.Link eventKey=\"SearchResult\">Results</Nav.Link>\n                  </Nav.Item>\n                  <Nav.Item>\n                    <Nav.Link eventKey=\"appointmentDetail\">Selected</Nav.Link>\n                  </Nav.Item>\n                  <Nav.Item>\n                    <Nav.Link eventKey=\"appointmentCreate\">Create New</Nav.Link>\n                  </Nav.Item>\n                  <Nav.Item>\n                    <Nav.Link eventKey=\"disabled\" disabled>Edit:</Nav.Link>\n                  </Nav.Item>\n                  <Nav.Item>\n                    <Nav.Link eventKey=\"appointmentEditBasic\">Basic Info</Nav.Link>\n                  </Nav.Item>\n                  <Nav.Item>\n                    <Nav.Link eventKey=\"appointmentEditField\">Single Field</Nav.Link>\n                  </Nav.Item>\n                  <Nav.Item>\n                    <Nav.Link eventKey=\"appointmentEditPatient\">Patient</Nav.Link>\n                  </Nav.Item>\n\n                </Nav>\n              </Col>\n              <Col sm={10}>\n                <Tab.Content>\n                  <Tab.Pane eventKey=\"appointmentDetail\">\n                    {this.state.selectedAppointment === null && (\n                      <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                        Select an Appointment from the Master List\n                      </Button>\n                    )}\n                    {\n                      this.state.isLoading === false &&\n                      this.state.selectedAppointment !== null\n                      &&\n                      (\n                        <AppointmentDetail\n                        authUserId={this.context.userId}\n                        appointment={this.state.selectedAppointment}\n                        onEdit={this.startUpdateAppointmentHandler}\n                        canDelete={this.state.canDelete}\n                        onDelete={this.modalDeleteHandler}\n                        onCreatePdf={this.createPdf}\n                        />\n                    )}\n                  </Tab.Pane>\n\n                  <Tab.Pane eventKey=\"appointmentCreate\">\n                  {this.context.selectedPatient === null && (\n                    <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                      Select someone from the Patients Page\n                    </Button>\n                  )}\n                  {this.context.selectedPatient !== null && (\n                      <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" onClick={this.startCreateAppointmentHandler} >Create New</Button>\n                  )}\n\n                    {this.state.creating &&\n                      this.context.selectedPatient !== null\n                      && (\n                        <CreateAppointmentForm\n                        canCancel\n                          canConfirm\n                          onCancel={this.modalCancelHandler}\n                          onConfirm={this.modalConfirmHandler}\n                          onSubmit={this.modalConfirmHandler}\n                          confirmText=\"Confirm\"\n                          selectedPatient={this.context.selectedPatient}\n                        />\n                    )}\n                  </Tab.Pane>\n\n                  <Tab.Pane eventKey=\"appointmentEditBasic\">\n                    {this.state.selectedAppointment === null && (\n                      <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                        Select an Appointment from the Master List\n                      </Button>\n                    )}\n                    {this.state.selectedAppointment !== null && (\n                      <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" onClick={this.startUpdateAppointmentHandler}>Edit Basic Data</Button>\n                    )}\n                    {this.state.updating &&\n                      this.state.selectedAppointment !== null\n                      && (\n                      <UpdateAppointmentForm\n                      authUserId={this.context.userId}\n                      canCancel\n                        canConfirm\n                        onCancel={this.modalCancelHandler}\n                        onConfirm={this.modalConfirmUpdateHandler}\n                        confirmText=\"Confirm\"\n                        appointment={this.state.selectedAppointment}\n                      />\n                    )}\n                  </Tab.Pane>\n\n                  <Tab.Pane eventKey=\"appointmentEditField\">\n                    {this.state.selectedAppointment === null && (\n                      <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                        Select an Appointment from the Master List\n                      </Button>\n                    )}\n                    {this.state.selectedAppointment !== null && (\n                      <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" onClick={this.startUpdateAppointmentHandler}>Edit a Single Field</Button>\n                    )}\n                    {this.state.updating &&\n                      this.state.selectedAppointment !== null\n                      && (\n                        <UpdateAppointmentFieldForm\n                          authUserId={this.context.userId}\n                          canCancel\n                          canConfirm\n                          onCancel={this.modalCancelHandler}\n                          onConfirm={this.modalConfirmUpdateFieldHandler}\n                          confirmText=\"Confirm\"\n                          appointment={this.state.selectedAppointment}\n                        />\n                    )}\n                  </Tab.Pane>\n\n                  <Tab.Pane eventKey=\"appointmentEditPatient\">\n                    {this.state.selectedAppointment === null && (\n                      <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                        Select an Appointment from the Master List\n                      </Button>\n                    )}\n                    {this.state.selectedAppointment !== null && (\n                      <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" value='patient' onClick={this.updateAppointmentSpecial.bind(this)}>Change Patient:</Button>\n                    )}\n                    {this.state.selecteAppointment !== null &&\n                      this.context.selectedPatient === null &&\n                      this.state.appointmentUpdateField === \"patient\" && (\n                        <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                          Select someone from the Patients page\n                        </Button>\n                      )}\n                    {this.state.selectedAppointment !== null &&\n                      this.context.selectedPatient !== null &&\n                      this.state.appointmentUpdateField === \"patient\" && (\n                      <Row>\n                      <Col md={8} className=\"updateUserColAdd\">\n                      <p><span className=\"bold\">Add Patient :</span> {this.context.selectedPatient.name}</p>\n                      <p><span className=\"bold\">To Appointment :</span> {this.state.selectedAppointment.title}  <span className=\"bold\">On :</span> {new Date(this.state.selecteAppointment.date.substr(0,10)*1000).toISOString().slice(0,10)} <span className=\"bold\">At :</span> {this.state.selecteAppointment.time} ??</p>\n                      <Button variant=\"success\" onClick={this.updateAppointmentPatientHandler}>\n                        Yes\n                      </Button>\n                      </Col>\n                      </Row>\n                    )}\n                  </Tab.Pane>\n\n                  <Tab.Pane eventKey=\"MasterList\">\n                    <Container className=\"containerUserMasterList\">\n                    <Row className=\"searchListRow\">\n                    <Button variant=\"primary\" size=\"sm\" onClick={this.fetchAppointmentsAsc}>\n                       Sort Asc\n                     </Button>\n                    <Button variant=\"info\" size=\"sm\" onClick={this.fetchAppointmentsDesc}>\n                       Sort Desc\n                     </Button>\n                    {this.state.isLoading ? (\n                      <Spinner />\n                    ) :\n                    (\n                      <AppointmentList\n                        appointments={this.state.appointments}\n                        authUserId={this.context.userId}\n                        onViewDetail={this.showDetailHandler}\n                      />\n                    )}\n                    </Row>\n                    </Container>\n                  </Tab.Pane>\n\n                  <Tab.Pane eventKey=\"SearchInput\">\n                    <Container className=\"containerSearchUserInput\">\n                    <Row className=\"searchUserRowAdd\">\n                    <Button variant=\"primary\" onClick={this.startSearchAppointmentHandler}>Search</Button>\n                    </Row>\n\n                    <Row className=\"searchUserRowForm\">\n                    <Col md={10} className=\"searchUserColForm\">\n                    <Tabs defaultActiveKey=\"Field\" id=\"uncontrolled-tab-example\">\n                    <Tab eventKey=\"Search\" title=\"Search:\" disabled>\n                    </Tab>\n                    <Tab eventKey=\"Field\" title=\"Search by Field:\">\n                    {this.state.searching !== true && (\n                      <Button variant=\"outline-warning\" className=\"confirmEditButton\" size=\"lg\">\n                        Click the 'Search' Button start\n                      </Button>\n                    )}\n                    {this.state.searching === true && (\n                      <SearchAppointmentForm\n                      authUserId={this.context.userId}\n                      canCancel\n                        canConfirm\n                        onCancel={this.modalCancelHandler}\n                        onConfirm={this.modalConfirmSearchHandler}\n                        confirmText=\"Search\"\n                        appointment={this.context.selectedAppointment}\n                      />\n                    )}\n                    </Tab>\n                    <Tab eventKey=\"Id\" title=\"Search by Id:\">\n                    {this.state.searching !== true && (\n                      <Button variant=\"outline-warning\" className=\"confirmEditButton\" size=\"lg\">\n                        Click the 'Search' Button start\n                      </Button>\n                    )}\n                      {this.state.searching === true && (\n                        <SearchAppointmentIdForm\n                        authUserId={this.context.userId}\n                        canCancel\n                          canConfirm\n                          onCancel={this.modalCancelHandler}\n                          onConfirm={this.modalConfirmSearchIdHandler}\n                          confirmText=\"Search\"\n                          appointment={this.context.selectedAppointment}\n                        />\n                      )}\n                    </Tab>\n                    <Tab eventKey=\"Patient\" title=\"Search by Patient:\">\n                    {this.state.searching !== true && (\n                      <Button variant=\"outline-warning\" className=\"confirmEditButton\" size=\"lg\">\n                        Click the 'Search' Button start\n                      </Button>\n                    )}\n                      {this.state.searching === true && (\n                        <SearchAppointmentPatientForm\n                        authUserId={this.context.userId}\n                        canCancel\n                          canConfirm\n                          onCancel={this.modalCancelHandler}\n                          onConfirm={this.modalConfirmSearchPatientHandler}\n                          confirmText=\"Search\"\n                          appointment={this.context.selectedAppointment}\n                        />\n                      )}\n                    </Tab>\n                    <Tab eventKey=\"Date\" title=\"Search by Date:\">\n                    {this.state.searching !== true && (\n                      <Button variant=\"outline-warning\" className=\"confirmEditButton\" size=\"lg\">\n                        Click the 'Search' Button start\n                      </Button>\n                    )}\n                      {this.state.searching === true && (\n                        <SearchAppointmentDateForm\n                        authUserId={this.context.userId}\n                        canCancel\n                          canConfirm\n                          onCancel={this.modalCancelHandler}\n                          onConfirm={this.modalConfirmSearchDateHandler}\n                          confirmText=\"Search\"\n                          appointment={this.context.selectedAppointment}\n                        />\n                      )}\n                    </Tab>\n                    <Tab eventKey=\"Date Range\" title=\"Search by Date Range:\">\n                    {this.state.searching !== true && (\n                      <Button variant=\"outline-warning\" className=\"confirmEditButton\" size=\"lg\">\n                        Click the 'Search' Button start\n                      </Button>\n                    )}\n                      {this.state.searching === true && (\n                        <SearchAppointmentDateRangeForm\n                        authUserId={this.context.userId}\n                        canCancel\n                          canConfirm\n                          onCancel={this.modalCancelHandler}\n                          onConfirm={this.modalConfirmSearchDateRangeHandler}\n                          confirmText=\"Search\"\n                          appointment={this.context.selectedAppointment}\n                        />\n                      )}\n                    </Tab>\n                    </Tabs>\n                    </Col>\n                    <Col md={10}>\n                    </Col>\n                    </Row>\n                    </Container>\n                  </Tab.Pane>\n\n                  <Tab.Pane eventKey=\"SearchResult\">\n                    <Container className=\"containerSearchUserResults\">\n                    <Row>\n                      <Card className=\"searchCard\">\n                        <Card.Body className=\"searchCardBody\">\n                          <Card.Title>Your Search</Card.Title>\n                          <Card.Text>\n                            Field: {this.state.appointmentSearchField}\n                          </Card.Text>\n                          <Card.Text>\n                            Query: {this.state.appointmentSearchQuery}\n                          </Card.Text>\n                        </Card.Body>\n                      </Card>\n                    </Row>\n                    <Row className=\"searchListRow\">\n                    {\n                      this.state.searchAppointments !== [] && (\n                      <SearchAppointmentList\n                        searchAppointments={this.state.searchAppointments}\n                        authUserId={this.context.userId}\n                        onCancel={this.modalCancelHandler}\n                          onViewDetail={this.showDetailHandler}\n                      />\n                    )}\n                    </Row>\n                    </Container>\n                  </Tab.Pane>\n                </Tab.Content>\n              </Col>\n            </Row>\n          </Tab.Container>\n\n\n          </Container>\n\n      </Col>\n    </Row>\n\n  </Accordion>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default AppointmentsPage;\n"]},"metadata":{},"sourceType":"module"}