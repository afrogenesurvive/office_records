{"ast":null,"code":"var _jsxFileName = \"/Users/pedrojacob/Downloads/AMR/websites/office_records/ENT_EMR/frontend/src/pages/Patients.js\";\nimport React, { Component } from 'react';\nimport S3 from 'react-aws-s3';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport Accordion from 'react-bootstrap/Accordion';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\nimport Nav from 'react-bootstrap/Nav';\nimport Card from 'react-bootstrap/Card';\nimport PatientList from '../components/Patients/PatientList/PatientList';\nimport PatientDetail from '../components/Patients/PatientDetail';\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\nimport SearchPatientList from '../components/Patients/PatientList/SearchPatientList';\nimport SearchPatientForm from '../components/Forms/SearchPatientForm';\nimport SearchPatientIdForm from '../components/Forms/SearchPatientIdForm';\nimport SearchPatientNameForm from '../components/Forms/SearchPatientNameForm';\nimport AlertBox from '../components/AlertBox';\nimport AttachmentViewer from '../components/AttachmentViewer';\nimport PdfCreator from '../components/PdfCreator';\nimport LoadingOverlay from '../components/LoadingOverlay';\nimport SidebarPage from './Sidebar';\nimport SidebarControl from '../components/SidebarControl';\nimport CreatePatientForm from '../components/Forms/CreatePatientForm';\nimport UpdatePatientForm from '../components/Forms/UpdatePatientForm';\nimport UpdatePatientFieldForm from '../components/Forms/UpdatePatientFieldForm';\nimport UpdatePatientConsultantForm from '../components/Forms/UpdatePatientConsultantForm';\nimport UpdatePatientInsuranceForm from '../components/Forms/UpdatePatientInsuranceForm';\nimport UpdatePatientNextOfKinForm from '../components/Forms/UpdatePatientNextOfKinForm';\nimport UpdatePatientComplaintForm from '../components/Forms/UpdatePatientComplaintForm';\nimport UpdatePatientSurveyForm from '../components/Forms/UpdatePatientSurveyForm';\nimport UpdatePatientSystematicInquiryForm from '../components/Forms/UpdatePatientSystematicInquiryForm';\nimport UpdatePatientVitalsForm from '../components/Forms/UpdatePatientVitalsForm';\nimport UpdatePatientExaminationForm from '../components/Forms/UpdatePatientExaminationForm';\nimport UpdatePatientHistoryForm from '../components/Forms/UpdatePatientHistoryForm';\nimport UpdatePatientAllergiesForm from '../components/Forms/UpdatePatientAllergiesForm';\nimport UpdatePatientMedicationForm from '../components/Forms/UpdatePatientMedicationForm';\nimport UpdatePatientInvestigationForm from '../components/Forms/UpdatePatientInvestigationForm';\nimport UpdatePatientDiagnosisForm from '../components/Forms/UpdatePatientDiagnosisForm';\nimport UpdatePatientTreatmentForm from '../components/Forms/UpdatePatientTreatmentForm';\nimport UpdatePatientBillingForm from '../components/Forms/UpdatePatientBillingForm';\nimport UpdatePatientVigilanceForm from '../components/Forms/UpdatePatientVigilanceForm';\nimport UpdatePatientAttachmentForm from '../components/Forms/UpdatePatientAttachmentForm';\nimport UpdatePatientNoteForm from '../components/Forms/UpdatePatientNoteForm';\nimport UpdatePatientTagForm from '../components/Forms/UpdatePatientTagForm';\nimport './Users.css';\n\nclass PatientsPage extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      creating: false,\n      updating: false,\n      searching: false,\n      updatingArray: false,\n      deleting: false,\n      patients: [],\n      searchPatients: [],\n      isLoading: false,\n      selectedPatient: null,\n      selectedUser: null,\n      patientUpdateField: null,\n      patientSearchField: null,\n      patientSearchQuery: null,\n      canDelete: null,\n      visit: null,\n      visitList: [],\n      selectedVisit: null,\n      newVisit: false,\n      createVisitChecklist: {\n        consultant: false,\n        complaint: false,\n        diagnosis: false,\n        examination: false,\n        investigation: false,\n        survey: false,\n        systematicInquiry: false,\n        treatment: false,\n        vitals: false,\n        billing: false,\n        vigilance: false\n      },\n      newVisit: false,\n      userAlert: null,\n      overlay: false,\n      overlayStatus: \"test\",\n      showAttachment: false,\n      showThisAttachmentFile: null,\n      showThisAttachmentType: null,\n      creatingDocument: false,\n      createPdf: false,\n      pdfData: null,\n      pdfType: null,\n      sidebarShow: true,\n      mCol1Size: 3,\n      mCol2Size: 9,\n      creds: null\n    };\n    this.isActive = true;\n\n    this.startCreatePatientHandler = () => {\n      this.setState({\n        creating: true\n      });\n    };\n\n    this.startCreateVisitHandler = () => {\n      this.setState({\n        newVisit: true\n      });\n    };\n\n    this.startUpdatePatientHandler = () => {\n      this.setState({\n        updating: true,\n        updatingArray: true\n      });\n    };\n\n    this.startSearchPatientHandler = () => {\n      this.setState({\n        searching: true\n      });\n    };\n\n    this.modalConfirmHandler = event => {\n      this.setState({\n        creating: false,\n        userAlert: \"Creating New Patient ...\"\n      });\n      const userId = this.context.userId;\n      const token = this.context.token;\n      let title = event.target.formGridTitle.value;\n      let name = event.target.formGridName.value;\n      let dob = event.target.formGridDob.value;\n      let age = event.target.formGridAge.value;\n      let gender = event.target.formGridGender.value;\n      let addressNumber = event.target.formGridAddressNumber.value;\n      let addressStreet = event.target.formGridAddressStreet.value;\n      let addressTown = event.target.formGridAddressTown.value;\n      let addressParish = event.target.formGridAddressParish.value;\n      let addressPostOffice = event.target.formGridAddressPostOffice.value;\n      let contactPhone = event.target.formGridContactPhone.value;\n      let contactEmail = event.target.formGridContactEmail.value;\n      let registrationDate = new Date(event.target.patientCalendarRegistrationDate.value).toISOString().slice(0, 10);\n\n      if (event.target.formGridRegistrationDateTodayCheckbox.checked === true) {\n        registrationDate = new Date().toISOString().slice(0, 10);\n      }\n\n      let referralDate = new Date(event.target.patientCalendarReferralDate.value).toISOString().slice(0, 10);\n\n      if (event.target.formGridReferralDateTodayCheckbox.checked === true) {\n        referralDate = new Date().toISOString().slice(0, 10);\n      }\n\n      let expirationDate = event.target.formGridExpirationDate.value;\n      let attendingPhysicianName = event.target.formGridAttendingPhysicianName.value;\n      let attendingPhysicianEmail = event.target.formGridAttendingPhysicianEmail.value;\n      let attendingPhysicianPhone = event.target.formGridAttendingPhysicianPhone.value;\n      let referringDoctorName = event.target.formGridReferringDoctorName.value;\n      let referringDoctorEmail = event.target.formGridReferringDoctorEmail.value;\n      let referringDoctorPhone = event.target.formGridReferringDoctorPhone.value;\n      let occupationRole = event.target.formGridOccupationRole.value;\n      let occupationEmployer = event.target.formGridOccupationEmployer.value;\n      let occupationEmployerContactPhone = event.target.formGridOccupationEmployerContactPhone.value;\n      let occupationEmployerContactEmail = event.target.formGridOccupationEmployerContactEmail.value;\n\n      if (name.trim().length === 0 || age.trim().length === 0 || addressNumber.trim().length === 0 || addressStreet.trim().length === 0 || contactPhone.trim().length === 0 || registrationDate.trim().length === 0) {\n        this.setState({\n          userAlert: \"patient must have at least: Name, Age, Contact Number, Street Name & Number and Registration Date!!!...Please try again...\"\n        });\n        return;\n      }\n\n      const requestBody = {\n        query: `\n        mutation {createPatient(userId:\"${userId}\", patientInput:{title:\"${title}\",name:\"${name}\",dob:\"${dob}\",age:${age},gender:\"${gender}\",addressNumber:${addressNumber},addressStreet:\"${addressStreet}\",addressTown:\"${addressTown}\",addressParish:\"${addressParish}\",addressPostOffice:\"${addressPostOffice}\",contactPhone:\"${contactPhone}\",contactEmail:\"${contactEmail}\",registrationDate:\"${registrationDate}\",referralDate:\"${referralDate}\",expirationDate:\"${expirationDate}\",referringDoctorName:\"${referringDoctorName}\",referringDoctorEmail:\"${referringDoctorEmail}\",referringDoctorPhone:\"${referringDoctorPhone}\",attendingPhysicianName:\"${attendingPhysicianName}\",attendingPhysicianEmail:\"${attendingPhysicianEmail}\",attendingPhysicianPhone:\"${attendingPhysicianPhone}\",occupationRole:\"${occupationRole}\",occupationEmployer:\"${occupationEmployer}\",occupationEmployerContactPhone:\"${occupationEmployerContactPhone}\",occupationEmployerContactEmail:\"${occupationEmployerContactEmail}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n        `\n      }; // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const responseAlert = JSON.stringify(resData.data).slice(2, 15);\n        this.setState({\n          userAlert: responseAlert\n        });\n        const newPatient = resData.data.createPatient;\n        this.setState(prevState => {\n          const updatedPatients = [...prevState.patients];\n          updatedPatients.push(newPatient);\n          return {\n            patients: updatedPatients\n          };\n        });\n        this.setState({\n          selecteAppointment: resData.data.createPatient\n        });\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.modalCancelHandler = () => {\n      this.setState({\n        creating: false,\n        updating: false\n      });\n    };\n\n    this.modalConfirmUpdateHandler = event => {\n      const userId = this.context.userId;\n      const selectedPatientId = this.context.selectedPatient._id;\n      const token = this.context.token;\n      this.setState({\n        updating: false,\n        userAlert: \"Updating selected Patient...\"\n      });\n      let title = event.target.formGridTitle.value;\n      let name = event.target.formGridName.value;\n      let dob = event.target.formGridDob.value;\n      let age = event.target.formGridAge.value;\n      let gender = event.target.formGridGender.value;\n      let addressNumber = event.target.formGridAddressNumber.value;\n      let addressStreet = event.target.formGridAddressStreet.value;\n      let addressTown = event.target.formGridAddressTown.value;\n      let addressParish = event.target.formGridAddressParish.value;\n      let addressPostOffice = event.target.formGridAddressPostOffice.value;\n      let contactPhone = event.target.formGridContactPhone.value;\n      let contactEmail = event.target.formGridContactEmail.value;\n      let registrationDate = new Date(event.target.patientCalendarRegistrationDate.value).toISOString().slice(0, 10);\n\n      if (event.target.formGridRegistrationDateTodayCheckbox.checked === true) {\n        registrationDate = new Date().toISOString().slice(0, 10);\n      }\n\n      let referralDate = new Date(event.target.patientCalendarReferralDate.value).toISOString().slice(0, 10);\n\n      if (event.target.formGridReferralDateTodayCheckbox.checked === true) {\n        referralDate = new Date().toISOString().slice(0, 10);\n      }\n\n      let expirationDate = new Date(event.target.patientCalendarExpirationDate.value).toISOString().slice(0, 10);\n\n      if (event.target.formGridExpirationDateTodayCheckbox.checked === true) {\n        expirationDate = new Date().toISOString().slice(0, 10);\n      }\n\n      let attendingPhysicianName = event.target.formGridAttendingPhysicianName.value;\n      let attendingPhysicianEmail = event.target.formGridAttendingPhysicianEmail.value;\n      let attendingPhysicianPhone = event.target.formGridAttendingPhysicianPhone.value;\n      let referringDoctorName = event.target.formGridReferringDoctorName.value;\n      let referringDoctorEmail = event.target.formGridReferringDoctorEmail.value;\n      let referringDoctorPhone = event.target.formGridReferringDoctorPhone.value;\n      let occupationRole = event.target.formGridOccupationRole.value;\n      let occupationEmployer = event.target.formGridOccupationEmployer.value;\n      let occupationEmployerContactPhone = event.target.formGridOccupationEmployerContactPhone.value;\n      let occupationEmployerContactEmail = event.target.formGridOccupationEmployerContactEmail.value;\n\n      if (title.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        title = this.context.selectedPatient.title;\n      }\n\n      if (name.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        name = this.context.selectedPatient.name;\n      }\n\n      if (dob.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        dob = this.context.selectedPatient.dob;\n      }\n\n      if (gender.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        gender = this.context.selectedPatient.gender;\n      }\n\n      if (age.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        age = this.context.selectedPatient.age;\n      }\n\n      if (addressNumber.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        addressNumber = this.context.selectedPatient.address.number;\n      }\n\n      if (addressStreet.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        addressStreet = this.context.selectedPatient.address.street;\n      }\n\n      if (addressTown.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        addressTown = this.context.selectedPatient.address.town;\n      }\n\n      if (addressParish.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        addressParish = this.context.selectedPatient.address.parish;\n      }\n\n      if (addressPostOffice.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        addressPostOffice = this.context.selectedPatient.address.postOffice;\n      }\n\n      if (contactPhone.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        contactPhone = this.context.selectedPatient.contact.phone;\n      }\n\n      if (contactEmail.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        contactEmail = this.context.selectedPatient.contact.email;\n      }\n\n      if (registrationDate.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        registrationDate = this.context.selectedPatient.registrationDate;\n      }\n\n      if (attendingPhysicianName.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        attendingPhysicianName = this.context.selectedPatient.attendingPhysician.name;\n      }\n\n      if (attendingPhysicianEmail.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        attendingPhysicianEmail = this.context.selectedPatient.attendingPhysician.email;\n      }\n\n      if (attendingPhysicianPhone.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        attendingPhysicianPhone = this.context.selectedPatient.attendingPhysician.phone;\n      }\n\n      if (referringDoctorName.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        referringDoctorName = this.context.selectedPatient.referringDoctor.name;\n      }\n\n      if (referringDoctorEmail.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        referringDoctorEmail = this.context.selectedPatient.referringDoctor.email;\n      }\n\n      if (referringDoctorPhone.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        referringDoctorPhone = this.context.selectedPatient.referringDoctor.phone;\n      }\n\n      if (occupationRole.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        occupationRole = this.context.selectedPatient.occupation.role;\n      }\n\n      if (occupationEmployer.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        occupationEmployer = this.context.selectedPatient.occupation.employer;\n      }\n\n      if (occupationEmployerContactEmail.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        occupationEmployerContactEmail = this.context.selectedPatient.occupation.contact.email;\n      }\n\n      if (occupationEmployerContactPhone.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        occupationEmployerContactPhone = this.context.selectedPatient.occupation.contact.phone;\n      }\n\n      const requestBody = {\n        query: `\n          mutation {updatePatient(userId:\"${userId}\",patientId:\"${selectedPatientId}\", patientInput:{title:\"${title}\",name:\"${name}\",dob:\"${dob}\",age:${age},gender:\"${gender}\",addressNumber:${addressNumber},addressStreet:\"${addressStreet}\",addressTown:\"${addressTown}\",addressParish:\"${addressParish}\",addressPostOffice:\"${addressPostOffice}\",contactPhone:\"${contactPhone}\",contactEmail:\"${contactEmail}\",registrationDate:\"${registrationDate}\",referralDate:\"${referralDate}\",expirationDate:\"${expirationDate}\",referringDoctorName:\"${referringDoctorName}\",referringDoctorEmail:\"${referringDoctorEmail}\",referringDoctorPhone:\"${referringDoctorPhone}\",attendingPhysicianName:\"${attendingPhysicianName}\",attendingPhysicianEmail:\"${attendingPhysicianEmail}\",attendingPhysicianPhone:\"${attendingPhysicianPhone}\",occupationRole:\"${occupationRole}\",occupationEmployer:\"${occupationEmployer}\",occupationEmployerContactPhone:\"${occupationEmployerContactPhone}\",occupationEmployerContactEmail:\"${occupationEmployerContactPhone}\"})\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n        `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const updatedPatientId = resData.data.updatePatient._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        this.state.patients.push(resData.data.updatePatient);\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.fetchPatients();\n        this.setState({\n          userAlert: responseAlert,\n          selectedPatient: resData.data.updatePatient\n        });\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.modalConfirmUpdateFieldHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id;\n      this.setState({\n        updating: false,\n        userAlert: \"Updating selected Patient by Field...\"\n      });\n      let field = null;\n      let query = event.target.formGridQuery.value;\n\n      if (event.target.formGridFieldSelect.value === \"select\") {\n        field = event.target.formGridField.value;\n      } else {\n        field = event.target.formGridFieldSelect.value;\n      }\n\n      const requestBody = {\n        query: `\n        mutation {updatePatientField(userId:\"${userId}\",patientId:\"${selectedPatientId}\",field:\"${field}\",query:\"${query}\")\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const updatedPatientId = resData.data.updatePatientField._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        this.state.patients.push(resData.data.updatePatientField);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.fetchPatients();\n        this.setState({\n          userAlert: responseAlert,\n          selectedPatient: resData.data.updatePatientField\n        });\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientConsultantHandler = event => {\n      event.preventDefault();\n      let token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id;\n      const patientConsultantReference = this.context.selectedUser._id;\n\n      if (patientConsultantReference === undefined) {\n        this.setState({\n          userAlert: \"select a Staff member before adding a Patient Consultant!!...\"\n        });\n        token = null;\n      }\n\n      this.setState({\n        updating: false,\n        patientUpdateField: null,\n        userAlert: \"Adding selected Patient Consultant...\"\n      });\n      let consultantDate = new Date(event.target.patientConsultantCalendarDate.value).toISOString().slice(0, 10);\n\n      if (event.target.formGridConsultantDateTodayCheckbox.checked === true) {\n        consultantDate = new Date().toISOString().slice(0, 10);\n      }\n\n      const requestBody = {\n        query: `\n      mutation {updatePatientConsultant(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{consultantDate:\" ${consultantDate}\",consultantReference: \"${patientConsultantReference}\"})\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const updatedPatientId = resData.data.updatePatientConsultant._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        this.state.patients.push(resData.data.updatePatientConsultant);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.fetchPatients();\n        this.setState({\n          userAlert: responseAlert,\n          selectedPatient: resData.data.updatePatientConsultant\n        });\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientInsuranceHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id;\n      this.setState({\n        updating: false,\n        patientUpdateField: null,\n        userAlert: \"Adding selected Patient Insurance...\"\n      });\n      let insuranceCompany = event.target.formGridInsuranceCompany.value;\n      let insuranceNumber = event.target.formGridInsuranceNumber.value;\n      let insuranceExpiry = event.target.patientCalendarInsuranceExpiryDate.value; // if (event.target.patientCalendarInsuranceExpiryDate.value !== null &&\n      //   event.target.formGridInsuranceExpiry.value === null\n      //   ) {\n      //   console.log(`patientCalendarInsuranceExpiryDate: ${new Date(event.target.patientCalendarInsuranceExpiryDate.value).toISOString().slice(0,10)} `);\n      //   insuranceExpiry = new Date(event.target.patientCalendarInsuranceExpiryDate.value).toISOString().slice(0,10);\n      // }\n\n      let insuranceDescription = event.target.formGridInsuranceDescription.value;\n      let insuranceSubscriberCompany = event.target.formGridInsuranceSubscriberCompany.value;\n      let insuranceSubscriberDescription = event.target.formGridInsuranceSubscriberDescription.value;\n      const requestBody = {\n        query: `\n        mutation {updatePatientInsurance(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{insuranceCompany:\"${insuranceCompany}\",insuranceNumber:\"${insuranceNumber}\",insuranceDescription:\"${insuranceDescription}\",insuranceExpiry:\"${insuranceExpiry}\",insuranceSubscriberCompany:\"${insuranceSubscriberCompany}\",insuranceSubscriberDescription:\"${insuranceSubscriberDescription}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const updatedPatientId = resData.data.updatePatientInsurance._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        this.state.patients.push(resData.data.updatePatientInsurance);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.fetchPatients();\n        this.setState({\n          userAlert: responseAlert,\n          selectedPatient: resData.data.updatePatientInsurance\n        });\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientNextOfKinHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id;\n      this.setState({\n        updating: false,\n        patientUpdateField: null,\n        userAlert: \"Adding selected Patient Next of Kin...\"\n      });\n      let nextOfKinName = event.target.formGridNextOfKinName.value;\n      let nextOfKinPhone = event.target.formGridNextOfKinPhone.value;\n      let nextOfKinEmail = event.target.formGridNextOfKinEmail.value;\n      const requestBody = {\n        query: `\n        mutation {updatePatientNextOfKin(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{nextOfKinName:\"${nextOfKinName}\",nextOfKinEmail:\"${nextOfKinEmail}\",nextOfKinPhone:\"${nextOfKinPhone}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const updatedPatientId = resData.data.updatePatientNextOfKin._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        this.state.patients.push(resData.data.updatePatientNextOfKin);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.fetchPatients();\n        this.setState({\n          userAlert: responseAlert,\n          selectedPatient: resData.data.updatePatientNextOfKin\n        });\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientComplaintHandler = event => {\n      event.preventDefault();\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id;\n      this.setState({\n        updating: false,\n        patientUpdateField: null,\n        userAlert: \"Adding selected Patient Complaint...\"\n      });\n      let complaintTitle = event.target.formGridComplaintTitle.value;\n      let complaintDate = null;\n\n      if (event.target.formGridComplaintDate) {\n        complaintDate = event.target.formGridComplaintDate.value;\n      }\n\n      if (event.target.formGridComplaintDateTodayCheckbox.checked === true) {\n        complaintDate = new Date().toISOString().slice(0, 10);\n      }\n\n      if (event.target.patientComplaintCalendarDate.value !== null && event.target.formGridComplaintDateTodayCheckbox.checked !== true) {\n        console.log(\"fancyDate2\", new Date(event.target.patientComplaintCalendarDate.value).toISOString().slice(0, 10));\n        complaintDate = new Date(event.target.patientComplaintCalendarDate.value).toISOString().slice(0, 10);\n      }\n\n      let complaintDescription = event.target.formGridComplaintDescription.value;\n      let complaintAnamnesis = event.target.formGridComplaintAnamnesis.value;\n      let complaintAttachmentFormat = event.target.formGridComplaintAttachmentFormat.value;\n      let complaintAttachmentPath = \"uploads/patients/\" + selectedPatientId + \"/complaints\";\n      let complaintAttachmentName = null;\n\n      if (event.target.fileInput.value !== \"\") {\n        const file = AuthContext._currentValue.file;\n        const config = {\n          bucketName: this.state.creds.s3.bucketName,\n          dirName: complaintAttachmentPath,\n          region: this.state.creds.s3.region,\n          accessKeyId: this.state.creds.s3.accessKeyId,\n          secretAccessKey: this.state.creds.s3.secretAccessKey\n        };\n        const ReactS3Client = new S3(config);\n        const newFileName = file.name;\n        const complaintAttachmentName = newFileName;\n        this.setState({\n          userAlert: \"uploading attachment ...\"\n        });\n        ReactS3Client.uploadFile(file, newFileName).then(data => {\n          console.log(data);\n          this.setState({\n            userAlert: \"attachment upload success!\"\n          });\n        }).catch(err => {\n          console.error(err);\n          this.setState({\n            userAlert: \"upload error:  \" + err\n          });\n        });\n      }\n\n      const requestBody = {\n        query: `\n      mutation {updatePatientComplaint(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{complaintDate:\"${complaintDate}\",complaintTitle:\"${complaintTitle}\",complaintDescription:\"${complaintDescription}\",complaintAnamnesis:\"${complaintAnamnesis}\",complaintAttachmentName:\"${complaintAttachmentName}\",complaintAttachmentFormat:\"${complaintAttachmentFormat}\",complaintAttachmentPath:\"${complaintAttachmentPath}\"})\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const updatedPatientId = resData.data.updatePatientComplaint._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        this.state.patients.push(resData.data.updatePatientComplaint);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.fetchPatients();\n        this.setState({\n          userAlert: responseAlert,\n          selectedPatient: resData.data.updatePatientComplaint\n        });\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientSurveyHandler = event => {\n      event.preventDefault();\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id;\n      this.setState({\n        updating: false,\n        patientUpdateField: null,\n        userAlert: \"Adding selected Patient Survey...\"\n      });\n      let surveyDate = null;\n\n      if (event.target.formGridSurveyDate) {\n        surveyDate = event.target.formGridSurveyDate.value;\n      }\n\n      if (event.target.formGridSurveyDateTodayCheckbox.checked === true) {\n        surveyDate = new Date().toISOString().slice(0, 10);\n      }\n\n      if (event.target.patientSurveyCalendarDate.value !== null && event.target.formGridSurveyDateTodayCheckbox.checked !== true) {\n        console.log(\"fancyDate2\", new Date(event.target.patientSurveyCalendarDate.value).toISOString().slice(0, 10));\n        surveyDate = new Date(event.target.patientSurveyCalendarDate.value).toISOString().slice(0, 10);\n      }\n\n      let surveyTitle = event.target.formGridSurveyTitle.value;\n      let surveyDescription = event.target.formGridSurveyDescription.value;\n      let surveyAttachmentFormat = event.target.formGridSurveyAttachmentFormat.value;\n      let surveyAttachmentPath = \"uploads/patients/\" + selectedPatientId + \"/surveys\";\n      let surveyAttachmentName = null;\n\n      if (event.target.fileInput.value !== \"\") {\n        const file = AuthContext._currentValue.file;\n        const config = {\n          bucketName: this.state.creds.s3.bucketName,\n          dirName: surveyAttachmentPath,\n          region: this.state.creds.s3.region,\n          accessKeyId: this.state.creds.s3.accessKeyId,\n          secretAccessKey: this.state.creds.s3.secretAccessKey\n        };\n        const ReactS3Client = new S3(config);\n        const newFileName = file.name;\n        const surveyAttachmentName = newFileName;\n        this.setState({\n          userAlert: \"uploading attachment ...\"\n        });\n        ReactS3Client.uploadFile(file, newFileName).then(data => {\n          console.log(data);\n          this.setState({\n            userAlert: \"attachment upload success!\"\n          });\n        }).catch(err => {\n          console.error(err);\n          this.setState({\n            userAlert: \"upload error:  \" + err\n          });\n        });\n      }\n\n      const requestBody = {\n        query: `\n      mutation {updatePatientSurvey(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{surveyDate:\"${surveyDate}\",surveyTitle:\"${surveyTitle}\",surveyDescription:\"${surveyDescription}\",surveyAttachmentName:\"${surveyAttachmentName}\",surveyAttachmentFormat:\"${surveyAttachmentFormat}\",surveyAttachmentPath:\"${surveyAttachmentPath}\"})\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const updatedPatientId = resData.data.updatePatientSurvey._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        this.state.patients.push(resData.data.updatePatientSurvey);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.fetchPatients();\n        this.setState({\n          userAlert: responseAlert,\n          selectedPatient: resData.data.updatePatientSurvey\n        });\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientSystematicInquiryHandler = event => {\n      event.preventDefault();\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id;\n      this.setState({\n        updating: false,\n        patientUpdateField: null,\n        userAlert: \"Adding selected Patient Systematic Inquiry...\"\n      });\n      let systematicInquiryDate = null;\n\n      if (event.target.formGridSystematicInquiryDate) {\n        systematicInquiryDate = event.target.formGridSystematicInquiryDate.value;\n      }\n\n      if (event.target.formGridSystematicInquiryDateTodayCheckbox.checked === true) {\n        systematicInquiryDate = new Date().toISOString().slice(0, 10);\n      }\n\n      if (event.target.patientSystematicInquiryCalendarDate.value !== null && event.target.formGridSystematicInquiryDateTodayCheckbox.checked !== true) {\n        console.log(\"fancyDate2\", new Date(event.target.patientSystematicInquiryCalendarDate.value).toISOString().slice(0, 10));\n        systematicInquiryDate = new Date(event.target.patientSystematicInquiryCalendarDate.value).toISOString().slice(0, 10);\n      }\n\n      let systematicInquiryTitle = event.target.formGridSystematicInquiryTitle.value;\n      let systematicInquiryDescription = event.target.formGridSystematicInquiryDescription.value;\n      let systematicInquiryAttachmentFormat = event.target.formGridSystematicInquiryAttachmentFormat.value;\n      let systematicInquiryAttachmentPath = \"uploads/patients/\" + selectedPatientId + \"/systematicInquirys\";\n      let systematicInquiryAttachmentName = null;\n\n      if (event.target.fileInput.value !== \"\") {\n        const file = AuthContext._currentValue.file;\n        const config = {\n          bucketName: this.state.creds.s3.bucketName,\n          dirName: systematicInquiryAttachmentPath,\n          region: this.state.creds.s3.region,\n          accessKeyId: this.state.creds.s3.accessKeyId,\n          secretAccessKey: this.state.creds.s3.secretAccessKey\n        };\n        const ReactS3Client = new S3(config);\n        const newFileName = file.name;\n        const systematicInquiryAttachmentName = newFileName;\n        this.setState({\n          userAlert: \"uploading attachment ...\"\n        }); // ReactS3Client\n        //     .uploadFile(file, newFileName)\n        //     .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\" });})\n        //     .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err });})\n      }\n\n      const requestBody = {\n        query: `\n      mutation {updatePatientSystematicInquiry(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{systematicInquiryDate:\"${systematicInquiryDate}\",systematicInquiryTitle:\"${systematicInquiryTitle}\",systematicInquiryDescription:\"${systematicInquiryDescription}\",systematicInquiryAttachmentName:\"${systematicInquiryAttachmentName}\",systematicInquiryAttachmentFormat:\"${systematicInquiryAttachmentFormat}\",systematicInquiryAttachmentPath:\"${systematicInquiryAttachmentPath}\"})\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const updatedPatientId = resData.data.updatePatientSystematicInquiry._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        this.state.patients.push(resData.data.updatePatientSystematicInquiry);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.fetchPatients();\n        this.setState({\n          userAlert: responseAlert,\n          selectedPatient: resData.data.updatePatientSystematicInquiry\n        });\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientVitalsHandler = event => {\n      event.preventDefault();\n      const token = this.context.token;\n      const userId = this.context.userId;\n      const selectedPatientId = this.context.selectedPatient._id;\n      this.setState({\n        updating: false,\n        patientUpdateField: null,\n        userAlert: \"Adding selected Patient Vitals...\"\n      });\n      let vitalsDate = null;\n\n      if (event.target.formGridVitalsDate) {\n        vitalsDate = event.target.formGridVitalsDate.value;\n      }\n\n      if (event.target.formGridVitalsDateTodayCheckbox.checked === true) {\n        vitalsDate = new Date().toISOString().slice(0, 10);\n      }\n\n      if (event.target.patientVitalsCalendarDate.value !== null && event.target.formGridVitalsDateTodayCheckbox.checked !== true) {\n        console.log(\"fancyDate2\", new Date(event.target.patientVitalsCalendarDate.value).toISOString().slice(0, 10));\n        vitalsDate = new Date(event.target.patientVitalsCalendarDate.value).toISOString().slice(0, 10);\n      }\n\n      const vitalsPr = event.target.formGridVitalsPr.value;\n      const vitalsBp1 = event.target.formGridVitalsBp1.value;\n      const vitalsBp2 = event.target.formGridVitalsBp2.value;\n      const vitalsRr = event.target.formGridVitalsRr.value;\n      const vitalsTemp = event.target.formGridVitalsTemp.value;\n      const vitalsPs02 = event.target.formGridVitalsPs02.value;\n      const vitalsHeight = event.target.formGridVitalsHeight.value;\n      const vitalsWeight = event.target.formGridVitalsWeight.value;\n      const vitalsBmi = event.target.formGridVitalsBmi.value;\n      const vitalsUrineType = event.target.formGridVitalsUrineType.value;\n      const vitalsUrineValue = event.target.formGridVitalsUrineValue.value;\n      const requestBody = {\n        query: `\n      mutation {updatePatientVitals(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{vitalsDate:\"${vitalsDate}\",vitalsPr:${vitalsPr},vitalsBp1:${vitalsBp1},vitalsBp2:${vitalsBp2},vitalsRr:${vitalsRr},vitalsTemp:${vitalsTemp},vitalsPs02:${vitalsPs02},vitalsHeight:${vitalsHeight},vitalsWeight:${vitalsWeight},vitalsBmi:${vitalsBmi},vitalsUrineType:\"${vitalsUrineType}\",vitalsUrineValue:\"${vitalsUrineValue}\"})\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const updatedPatientId = resData.data.updatePatientVitals._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        this.state.patients.push(resData.data.updatePatientVitals);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.fetchPatients();\n        this.setState({\n          userAlert: responseAlert,\n          selectedPatient: resData.data.updatePatientVitals\n        });\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientExaminationHandler = event => {\n      event.preventDefault();\n      const token = this.context.token;\n      const userId = this.context.userId;\n      const selectedPatientId = this.context.selectedPatient._id;\n      this.setState({\n        updating: false,\n        patientUpdateField: null,\n        userAlert: \"Adding selected Patient Examination...\"\n      });\n      let examinationDate = null;\n\n      if (event.target.formGridExaminationDate) {\n        examinationDate = event.target.formGridExaminationDate.value;\n      }\n\n      if (event.target.formGridExaminationDateTodayCheckbox.checked === true) {\n        examinationDate = new Date().toISOString().slice(0, 10);\n      }\n\n      if (event.target.patientExaminationCalendarDate.value !== null && event.target.formGridExaminationDateTodayCheckbox.checked !== true) {\n        console.log(\"fancyDate2\", new Date(event.target.patientExaminationCalendarDate.value).toISOString().slice(0, 10));\n        examinationDate = new Date(event.target.patientExaminationCalendarDate.value).toISOString().slice(0, 10);\n      }\n\n      const examinationGeneral = event.target.formGridExaminationGeneral.value;\n      let examinationArea = undefined;\n\n      if (event.target.formGridExaminationAreaSelect.value === \"select\") {\n        examinationArea = event.target.formGridExaminationArea.value;\n      } else {\n        examinationArea = event.target.formGridExaminationAreaSelect.value;\n      }\n\n      const examinationType = event.target.formGridExaminationType.value;\n      const examinationMeasure = event.target.formGridExaminationMeasure.value;\n      const examinationValue = event.target.formGridExaminationValue.value;\n      const examinationDescription = event.target.formGridExaminationDescription.value;\n      const examinationFollowUp = event.target.formGridExaminationFollowUp.value;\n      const examinationAttachmentFormat = event.target.formGridExaminationAttachmentFormat.value;\n      const examinationAttachmentPath = \"uploads/patients/\" + selectedPatientId + \"/examinations\";\n      let examinationAttachmentName = null;\n\n      if (event.target.fileInput.value !== \"\") {\n        const file = AuthContext._currentValue.file;\n        const config = {\n          bucketName: this.state.creds.s3.bucketName,\n          dirName: examinationAttachmentPath,\n          region: this.state.creds.s3.region,\n          accessKeyId: this.state.creds.s3.accessKeyId,\n          secretAccessKey: this.state.creds.s3.secretAccessKey\n        };\n        const ReactS3Client = new S3(config);\n        const newFileName = file.name;\n        const examinationAttachmentName = newFileName;\n        this.setState({\n          userAlert: \"uploading attachment ...\"\n        });\n        ReactS3Client.uploadFile(file, newFileName).then(data => {\n          console.log(data);\n          this.setState({\n            userAlert: \"attachment upload success!\"\n          });\n        }).catch(err => {\n          console.error(err);\n          this.setState({\n            userAlert: \"upload error:  \" + err\n          });\n        });\n      }\n\n      const requestBody = {\n        query: `\n      mutation {updatePatientExamination(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{examinationDate:\"${examinationDate}\",examinationGeneral:\"${examinationGeneral}\",examinationArea:\"${examinationArea}\",examinationType:\"${examinationType}\",examinationMeasure:\"${examinationMeasure}\",examinationValue:\"${examinationValue}\",examinationDescription:\"${examinationDescription}\",examinationFollowUp:${examinationFollowUp},examinationAttachmentName:\"${examinationAttachmentName}\",examinationAttachmentFormat:\"${examinationAttachmentFormat}\",examinationAttachmentPath:\"${examinationAttachmentPath}\"})\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const updatedPatientId = resData.data.updatePatientExamination._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        this.state.patients.push(resData.data.updatePatientExamination);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.fetchPatients();\n        this.setState({\n          userAlert: responseAlert,\n          selectedPatient: resData.data.updatePatientExamination\n        });\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientHistoryHandler = event => {\n      event.preventDefault();\n      const token = this.context.token;\n      const userId = this.context.userId;\n      const selectedPatientId = this.context.selectedPatient._id;\n      this.setState({\n        updating: false,\n        patientUpdateField: null,\n        userAlert: \"Adding selected Patient History...\"\n      });\n      const historyType = event.target.formGridHistoryType.value;\n      let historyDate = event.target.formGridHistoryDate.value;\n\n      if (event.target.formGridHistoryDateTodayCheckbox.checked === true) {\n        historyDate = new Date().toISOString().slice(0, 10);\n      }\n\n      if (event.target.patientHistoryCalendarDate.value !== null && event.target.formGridHistoryDateTodayCheckbox.checked !== true) {\n        console.log(\"fancyDate2\", new Date(event.target.patientHistoryCalendarDate.value).toISOString().slice(0, 10));\n        historyDate = new Date(event.target.patientHistoryCalendarDate.value).toISOString().slice(0, 10);\n      }\n\n      const historyTitle = event.target.formGridHistoryTitle.value;\n      const historyDescription = event.target.formGridHistoryDescription.value;\n      const historyAttachmentFormat = event.target.formGridHistoryAttachmentFormat.value;\n      const historyAttachmentPath = \"uploads/patients/\" + selectedPatientId + \"/history\";\n      let historyAttachmentName = null;\n\n      if (event.target.fileInput.value !== \"\") {\n        const file = AuthContext._currentValue.file;\n        const config = {\n          bucketName: this.state.creds.s3.bucketName,\n          dirName: historyAttachmentPath,\n          region: this.state.creds.s3.region,\n          accessKeyId: this.state.creds.s3.accessKeyId,\n          secretAccessKey: this.state.creds.s3.secretAccessKey\n        };\n        const ReactS3Client = new S3(config);\n        const newFileName = file.name;\n        const historyAttachmentName = newFileName;\n        this.setState({\n          userAlert: \"uploading attachment ...\"\n        });\n        ReactS3Client.uploadFile(file, newFileName).then(data => {\n          console.log(data);\n          this.setState({\n            userAlert: \"attachment upload success!\"\n          });\n        }).catch(err => {\n          console.error(err);\n          this.setState({\n            userAlert: \"upload error:  \" + err\n          });\n        });\n      }\n\n      const requestBody = {\n        query: `\n      mutation {updatePatientHistory(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{historyTitle:\"${historyTitle}\",historyType:\"${historyType}\",historyDate:\"${historyDate}\",historyDescription:\"${historyDescription}\",historyAttachmentName:\"${historyAttachmentName}\",historyAttachmentFormat:\"${historyAttachmentFormat}\",historyAttachmentPath:\"${historyAttachmentPath}\"})\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const updatedPatientId = resData.data.updatePatientHistory._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        this.state.patients.push(resData.data.updatePatientHistory);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.fetchPatients();\n        this.setState({\n          userAlert: responseAlert,\n          selectedPatient: resData.data.updatePatientHistory\n        });\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientAllergiesHandler = event => {\n      event.preventDefault();\n      const token = this.context.token;\n      const userId = this.context.userId;\n      const selectedPatientId = this.context.selectedPatient._id;\n      this.setState({\n        updating: false,\n        patientUpdateField: null,\n        userAlert: \"Adding selected Patient Allergies...\"\n      });\n      const allergiesTitle = event.target.formGridAllergiesTitle.value;\n      let allergiesType = undefined;\n\n      if (event.target.formGridAllergiesTypeSelect === \"select\") {\n        allergiesType = event.target.formGridAllergiesType.value;\n      } else {\n        allergiesType = event.target.formGridAllergiesTypeSelect.value;\n      }\n\n      const allergiesDescription = event.target.formGridAllergiesDescription.value;\n      const allergiesAttachmentFormat = event.target.formGridAllergiesAttachmentFormat.value;\n      const allergiesAttachmentPath = \"uploads/patients/\" + selectedPatientId + \"/allergies\";\n      let allergiesAttachmentName = null;\n\n      if (event.target.fileInput.value !== \"\") {\n        const file = AuthContext._currentValue.file;\n        const config = {\n          bucketName: this.state.creds.s3.bucketName,\n          dirName: allergiesAttachmentPath,\n          region: this.state.creds.s3.region,\n          accessKeyId: this.state.creds.s3.accessKeyId,\n          secretAccessKey: this.state.creds.s3.secretAccessKey\n        };\n        const ReactS3Client = new S3(config);\n        const newFileName = file.name;\n        const allergiesAttachmentName = newFileName;\n        this.setState({\n          userAlert: \"uploading attachment ...\"\n        });\n        ReactS3Client.uploadFile(file, newFileName).then(data => {\n          console.log(data);\n          this.setState({\n            userAlert: \"attachment upload success!\"\n          });\n        }).catch(err => {\n          console.error(err);\n          this.setState({\n            userAlert: \"upload error:  \" + err\n          });\n        });\n      }\n\n      const requestBody = {\n        query: `\n      mutation {updatePatientAllergies(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{allergiesTitle:\"${allergiesTitle}\",allergiesType:\"${allergiesType}\", allergiesDescription:\"${allergiesDescription}\",allergiesAttachmentName:\"${allergiesAttachmentName}\",allergiesAttachmentFormat:\"${allergiesAttachmentFormat}\",allergiesAttachmentPath:\"${allergiesAttachmentPath}\"})\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const updatedPatientId = resData.data.updatePatientAllergies._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        this.state.patients.push(resData.data.updatePatientAllergies);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.fetchPatients();\n        this.setState({\n          userAlert: responseAlert,\n          selectedPatient: resData.data.updatePatientAllergies\n        });\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientMedicationHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      const selectedPatientId = this.context.selectedPatient._id;\n      this.setState({\n        updating: false,\n        patientUpdateField: null,\n        userAlert: \"Adding selected Patient Medication...\"\n      });\n      const medicationTitle = event.target.formGridMedicationTitle.value;\n      const medicationType = event.target.formGridMedicationType.value;\n      const medicationDescription = event.target.formGridMedicationDescription.value;\n      const medicationAttachmentFormat = event.target.formGridMedicationAttachmentFormat.value;\n      const medicationAttachmentPath = \"uploads/patients/\" + selectedPatientId + \"/medication\";\n      let medicationAttachmentName = null;\n\n      if (event.target.fileInput.value !== \"\") {\n        const file = AuthContext._currentValue.file;\n        const config = {\n          bucketName: this.state.creds.s3.bucketName,\n          dirName: medicationAttachmentPath,\n          region: this.state.creds.s3.region,\n          accessKeyId: this.state.creds.s3.accessKeyId,\n          secretAccessKey: this.state.creds.s3.secretAccessKey\n        };\n        const ReactS3Client = new S3(config);\n        const newFileName = file.name;\n        const medicationAttachmentName = newFileName;\n        this.setState({\n          userAlert: \"uploading attachment ...\"\n        });\n        ReactS3Client.uploadFile(file, newFileName).then(data => {\n          console.log(data);\n          this.setState({\n            userAlert: \"attachment upload success!\"\n          });\n        }).catch(err => {\n          console.error(err);\n          this.setState({\n            userAlert: \"upload error:  \" + err\n          });\n        });\n      }\n\n      const requestBody = {\n        query: `\n    mutation {updatePatientMedication(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{medicationTitle:\"${medicationTitle}\",medicationType:\"${medicationType}\" medicationDescription:\"${medicationDescription}\",medicationAttachmentName:\"${medicationAttachmentName}\",medicationAttachmentFormat:\"${medicationAttachmentFormat}\",medicationAttachmentPath:\"${medicationAttachmentPath}\"})\n    {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const updatedPatientId = resData.data.updatePatientMedication._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        this.state.patients.push(resData.data.updatePatientMedication);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.fetchPatients();\n        this.setState({\n          userAlert: responseAlert,\n          selectedPatient: resData.data.updatePatientMedication\n        });\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientInvestigationHandler = event => {\n      event.preventDefault();\n      const token = this.context.token;\n      const userId = this.context.userId;\n      const selectedPatientId = this.context.selectedPatient._id;\n      this.setState({\n        updating: false,\n        patientUpdateField: null,\n        userAlert: \"Adding selected Patient Investigation...\"\n      });\n      let investigationDate = null;\n\n      if (event.target.formGridInvestigationDate) {\n        investigationDate = event.target.formGridInvestigationDate.value;\n      }\n\n      if (event.target.formGridInvestigationDateTodayCheckbox.checked === true) {\n        investigationDate = new Date().toISOString().slice(0, 10);\n      }\n\n      if (event.target.patientInvestigationCalendarDate.value !== null && event.target.formGridInvestigationDateTodayCheckbox.checked !== true) {\n        console.log(\"fancyDate2\", new Date(event.target.patientInvestigationCalendarDate.value).toISOString().slice(0, 10));\n        investigationDate = new Date(event.target.patientInvestigationCalendarDate.value).toISOString().slice(0, 10);\n      }\n\n      const investigationTitle = event.target.formGridInvestigationTitle.value;\n      let investigationType = undefined;\n\n      if (event.target.formGridInvestigationTypeSelect === \"select\") {\n        investigationType = event.target.formGridInvestigationType.value;\n      } else {\n        investigationType = event.target.formGridInvestigationTypeSelect.value;\n      }\n\n      const investigationDescription = event.target.formGridInvestigationDescription.value;\n      const investigationAttachmentFormat = event.target.formGridInvestigationAttachmentFormat.value;\n      const investigationAttachmentPath = \"uploads/patients/\" + selectedPatientId + \"/investigation\";\n      let investigationAttachmentName = null;\n\n      if (event.target.fileInput.value !== \"\") {\n        const file = AuthContext._currentValue.file;\n        const config = {\n          bucketName: this.state.creds.s3.bucketName,\n          dirName: investigationAttachmentPath,\n          region: this.state.creds.s3.region,\n          accessKeyId: this.state.creds.s3.accessKeyId,\n          secretAccessKey: this.state.creds.s3.secretAccessKey\n        };\n        const ReactS3Client = new S3(config);\n        const newFileName = file.name;\n        const investigationAttachmentName = newFileName;\n        this.setState({\n          userAlert: \"uploading attachment ...\"\n        });\n        ReactS3Client.uploadFile(file, newFileName).then(data => {\n          console.log(data);\n          this.setState({\n            userAlert: \"attachment upload success!\"\n          });\n        }).catch(err => {\n          console.error(err);\n          this.setState({\n            userAlert: \"upload error:  \" + err\n          });\n        });\n      }\n\n      const requestBody = {\n        query: `\n      mutation {updatePatientInvestigation(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{investigationDate:\"${investigationDate}\",investigationTitle:\"${investigationTitle}\",investigationType:\"${investigationType}\",investigationDescription:\"${investigationDescription}\",investigationAttachmentName:\"${investigationAttachmentName}\",investigationAttachmentFormat:\"${investigationAttachmentFormat}\",investigationAttachmentPath:\"${investigationAttachmentPath}\"})\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const updatedPatientId = resData.data.updatePatientInvestigation._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        this.state.patients.push(resData.data.updatePatientInvestigation);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.fetchPatients();\n        this.setState({\n          userAlert: responseAlert,\n          selectedPatient: resData.data.updatePatientInvestigation\n        });\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientDiagnosisHandler = event => {\n      event.preventDefault();\n      const token = this.context.token;\n      const userId = this.context.userId;\n      const selectedPatientId = this.context.selectedPatient._id;\n      this.setState({\n        updating: false,\n        patientUpdateField: null,\n        userAlert: \"Adding selected Patient Diagnosis...\"\n      });\n      let diagnosisDate = null;\n\n      if (event.target.formGridDiagnosisDate) {\n        diagnosisDate = event.target.formGridDiagnosisDate.value;\n      }\n\n      if (event.target.formGridDiagnosisDateTodayCheckbox.checked === true) {\n        diagnosisDate = new Date().toISOString().slice(0, 10);\n      }\n\n      if (event.target.patientDiagnosisCalendarDate.value !== null && event.target.formGridDiagnosisDateTodayCheckbox.checked !== true) {\n        console.log(\"fancyDate2\", new Date(event.target.patientDiagnosisCalendarDate.value).toISOString().slice(0, 10));\n        diagnosisDate = new Date(event.target.patientDiagnosisCalendarDate.value).toISOString().slice(0, 10);\n      }\n\n      const diagnosisTitle = event.target.formGridDiagnosisTitle.value;\n      const diagnosisType = event.target.formGridDiagnosisType.value;\n      const diagnosisDescription = event.target.formGridDiagnosisDescription.value;\n      const diagnosisAttachmentFormat = event.target.formGridDiagnosisAttachmentFormat.value;\n      const diagnosisAttachmentPath = \"uploads/patients/\" + selectedPatientId + \"/diagnosis\";\n      let diagnosisAttachmentName = null;\n\n      if (event.target.fileInput.value !== \"\") {\n        const file = AuthContext._currentValue.file;\n        const config = {\n          bucketName: this.state.creds.s3.bucketName,\n          dirName: diagnosisAttachmentPath,\n          region: this.state.creds.s3.region,\n          accessKeyId: this.state.creds.s3.accessKeyId,\n          secretAccessKey: this.state.creds.s3.secretAccessKey\n        };\n        const ReactS3Client = new S3(config);\n        const newFileName = file.name;\n        const diagnosisAttachmentName = newFileName;\n        this.setState({\n          userAlert: \"uploading attachment ...\"\n        });\n        ReactS3Client.uploadFile(file, newFileName).then(data => {\n          console.log(data);\n          this.setState({\n            userAlert: \"attachment upload success!\"\n          });\n        }).catch(err => {\n          console.error(err);\n          this.setState({\n            userAlert: \"upload error:  \" + err\n          });\n        });\n      }\n\n      const requestBody = {\n        query: `\n      mutation {updatePatientDiagnosis(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{diagnosisDate:\"${diagnosisDate}\",diagnosisTitle:\"${diagnosisTitle}\",diagnosisType:\"${diagnosisType}\",diagnosisDescription:\"${diagnosisDescription}\",diagnosisAttachmentName:\"${diagnosisAttachmentName}\",diagnosisAttachmentFormat:\"${diagnosisAttachmentFormat}\",diagnosisAttachmentPath:\"${diagnosisAttachmentPath}\"})\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const updatedPatientId = resData.data.updatePatientDiagnosis._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        this.state.patients.push(resData.data.updatePatientDiagnosis);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.fetchPatients();\n        this.setState({\n          userAlert: responseAlert,\n          selectedPatient: resData.data.updatePatientDiagnosis\n        });\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientTreatmentHandler = event => {\n      event.preventDefault();\n      const token = this.context.token;\n      const userId = this.context.userId;\n      const selectedPatientId = this.context.selectedPatient._id;\n      this.setState({\n        updating: false,\n        patientUpdateField: null,\n        userAlert: \"Adding selected Patient Treatment...\"\n      });\n      let treatmentDate = null;\n\n      if (event.target.formGridTreatmentDate) {\n        treatmentDate = event.target.formGridTreatmentDate.value;\n      }\n\n      if (event.target.formGridTreatmentDateTodayCheckbox.checked === true) {\n        treatmentDate = new Date().toISOString().slice(0, 10);\n      }\n\n      if (event.target.patientTreatmentCalendarDate.value !== null && event.target.formGridTreatmentDateTodayCheckbox.checked !== true) {\n        console.log(\"fancyDate2\", new Date(event.target.patientTreatmentCalendarDate.value).toISOString().slice(0, 10));\n        treatmentDate = new Date(event.target.patientTreatmentCalendarDate.value).toISOString().slice(0, 10);\n      }\n\n      const treatmentTitle = event.target.formGridTreatmentTitle.value;\n      const treatmentDescription = event.target.formGridTreatmentDescription.value;\n      const treatmentDose = event.target.formGridTreatmentDose.value;\n      const treatmentFrequency = event.target.formGridTreatmentFrequency.value;\n      let treatmentType = undefined;\n\n      if (event.target.formGridInvestigationTypeSelect === \"select\") {\n        treatmentType = event.target.formGridTreatmentType.value;\n      } else {\n        treatmentType = event.target.formGridTreatmentTypeSelect.value;\n      }\n\n      const treatmentAttachmentFormat = event.target.formGridTreatmentAttachmentFormat.value;\n      const treatmentAttachmentPath = \"uploads/patients/\" + selectedPatientId + \"/treatment\";\n      let treatmentAttachmentName = null;\n\n      if (event.target.fileInput.value !== \"\") {\n        const file = AuthContext._currentValue.file;\n        const config = {\n          bucketName: this.state.creds.s3.bucketName,\n          dirName: treatmentAttachmentPath,\n          region: this.state.creds.s3.region,\n          accessKeyId: this.state.creds.s3.accessKeyId,\n          secretAccessKey: this.state.creds.s3.secretAccessKey\n        };\n        const ReactS3Client = new S3(config);\n        const newFileName = file.name;\n        const treatmentAttachmentName = newFileName;\n        this.setState({\n          userAlert: \"uploading attachment ...\"\n        });\n        ReactS3Client.uploadFile(file, newFileName).then(data => {\n          console.log(data);\n          this.setState({\n            userAlert: \"attachment upload success!\"\n          });\n        }).catch(err => {\n          console.error(err);\n          this.setState({\n            userAlert: \"upload error:  \" + err\n          });\n        });\n      }\n\n      const requestBody = {\n        query: `\n      mutation {updatePatientTreatment(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{treatmentDate:\"${treatmentDate}\",treatmentTitle:\"${treatmentTitle}\",treatmentType:\"${treatmentType}\",treatmentDescription:\"${treatmentDescription}\",treatmentDose:\"${treatmentDose}\",treatmentFrequency:\"${treatmentFrequency}\",treatmentAttachmentName:\"${treatmentAttachmentName}\",treatmentAttachmentFormat:\"${treatmentAttachmentFormat}\",treatmentAttachmentPath:\"${treatmentAttachmentPath}\"})\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const updatedPatientId = resData.data.updatePatientTreatment._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        this.state.patients.push(resData.data.updatePatientTreatment);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.fetchPatients();\n        this.setState({\n          userAlert: responseAlert,\n          selectedPatient: resData.data.updatePatientTreatment\n        });\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientBillingHandler = event => {\n      event.preventDefault();\n      const token = this.context.token;\n      const userId = this.context.userId;\n      const selectedPatientId = this.context.selectedPatient._id;\n      this.setState({\n        updating: false,\n        patientUpdateField: null,\n        userAlert: \"Adding selected Patient Billing...\"\n      });\n      let billingDate = null;\n\n      if (event.target.formGridBillingDate !== null) {\n        billingDate = event.target.formGridBillingDate.value;\n      }\n\n      if (event.target.formGridBillingDateTodayCheckbox.checked === true) {\n        billingDate = new Date().toISOString().slice(0, 10);\n      }\n\n      if (event.target.patientBillingCalendarDate.value !== null && event.target.formGridBillingDateTodayCheckbox.checked !== true) {\n        console.log(\"fancyDate2\", new Date(event.target.patientBillingCalendarDate.value).toISOString().slice(0, 10));\n        billingDate = new Date(event.target.patientBillingCalendarDate.value).toISOString().slice(0, 10);\n      }\n\n      const billingTitle = event.target.formGridBillingTitle.value;\n      const billingType = event.target.formGridBillingType.value;\n      const billingDescription = event.target.formGridBillingDescription.value;\n      const billingAmount = event.target.formGridBillingAmount.value;\n      const billingPaid = event.target.formGridBillingPaid.value;\n      const billingNotes = event.target.formGridBillingNotes.value;\n      const billingAttachmentFormat = event.target.formGridBillingAttachmentFormat.value;\n      const billingAttachmentPath = \"uploads/patients/\" + selectedPatientId + \"/billing\";\n      let billingAttachmentName = null;\n\n      if (event.target.fileInput.value !== \"\") {\n        const file = AuthContext._currentValue.file;\n        const config = {\n          bucketName: this.state.creds.s3.bucketName,\n          dirName: billingAttachmentPath,\n          region: this.state.creds.s3.region,\n          accessKeyId: this.state.creds.s3.accessKeyId,\n          secretAccessKey: this.state.creds.s3.secretAccessKey\n        };\n        const ReactS3Client = new S3(config);\n        const newFileName = file.name;\n        billingAttachmentName = newFileName;\n        this.setState({\n          userAlert: \"uploading attachment ...\"\n        });\n        ReactS3Client.uploadFile(file, newFileName).then(data => {\n          console.log(data);\n          this.setState({\n            userAlert: \"attachment upload success!\"\n          });\n        }).catch(err => {\n          console.error(err);\n          this.setState({\n            userAlert: \"upload error:  \" + err\n          });\n        });\n      }\n\n      const requestBody = {\n        query: `\n      mutation {updatePatientBilling(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{billingDate:\"${billingDate}\",billingTitle:\"${billingTitle}\",billingType:\"${billingType}\",billingDescription:\"${billingDescription}\",billingAmount:${billingAmount},billingPaid:${billingPaid},billingNotes:\"${billingNotes}\",billingAttachmentName:\"${billingAttachmentName}\",billingAttachmentFormat:\"${billingAttachmentFormat}\",billingAttachmentPath:\"${billingAttachmentPath}\"})\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const updatedPatientId = resData.data.updatePatientBilling._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        this.state.patients.push(resData.data.updatePatientBilling);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.fetchPatients();\n        this.setState({\n          userAlert: responseAlert,\n          selectedPatient: resData.data.updatePatientBilling\n        });\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientVigilanceHandler = event => {\n      event.preventDefault();\n      const token = this.context.token;\n      const userId = this.context.userId;\n      const selectedPatientId = this.context.selectedPatient._id;\n      this.setState({\n        updating: false,\n        patientUpdateField: null,\n        userAlert: \"Adding selected Patient Vigilance...\"\n      });\n      let vigilanceDate = null;\n\n      if (event.target.formGridVigilanceDate) {\n        vigilanceDate = event.target.formGridVigilanceDate.value;\n      }\n\n      if (event.target.formGridVigilanceDateTodayCheckbox.checked === true) {\n        vigilanceDate = new Date().toISOString().slice(0, 10);\n      }\n\n      if (event.target.patientVigilanceCalendarDate.value !== null && event.target.formGridVigilanceDateTodayCheckbox.checked !== true) {\n        console.log(\"fancyDate2\", new Date(event.target.patientVigilanceCalendarDate.value).toISOString().slice(0, 10));\n        vigilanceDate = new Date(event.target.patientVigilanceCalendarDate.value).toISOString().slice(0, 10);\n      }\n\n      const vigilanceChronicIllnessDiabetesMedication = event.target.formGridVigilanceChronicIllnessDiabetesMedication.checked;\n      const vigilanceChronicIllnessDiabetesTesting = event.target.formGridVigilanceChronicIllnessDiabetesTesting.checked;\n      const vigilanceChronicIllnessDiabetesComment = event.target.formGridVigilanceChronicIllnessDiabetesComment.value;\n      const vigilanceChronicIllnessHbpMedication = event.target.formGridVigilanceChronicIllnessHbpMedication.checked;\n      const vigilanceChronicIllnessHbpTesting = event.target.formGridVigilanceChronicIllnessHbpTesting.checked;\n      const vigilanceChronicIllnessHbpComment = event.target.formGridVigilanceChronicIllnessHbpComment.value;\n      const vigilanceChronicIllnessDyslipidemiaMedication = event.target.formGridVigilanceChronicIllnessDyslipidemiaMedication.checked;\n      const vigilanceChronicIllnessDyslipidemiaTesting = event.target.formGridVigilanceChronicIllnessDyslipidemiaTesting.checked;\n      const vigilanceChronicIllnessDyslipidemiaComment = event.target.formGridVigilanceChronicIllnessDyslipidemiaComment.value;\n      const vigilanceChronicIllnessCadMedication = event.target.formGridVigilanceChronicIllnessCadMedication.checked;\n      const vigilanceChronicIllnessCadTesting = event.target.formGridVigilanceChronicIllnessCadTesting.checked;\n      const vigilanceChronicIllnessCadComment = event.target.formGridVigilanceChronicIllnessCadComment.value;\n      const vigilanceLifestyleWeightMedication = event.target.formGridVigilanceLifestyleWeightMedication.checked;\n      const vigilanceLifestyleWeightTesting = event.target.formGridVigilanceLifestyleWeightTesting.checked;\n      const vigilanceLifestyleWeightComment = event.target.formGridVigilanceLifestyleWeightComment.value;\n      const vigilanceLifestyleDietMedication = event.target.formGridVigilanceLifestyleDietMedication.checked;\n      const vigilanceLifestyleDietTesting = event.target.formGridVigilanceLifestyleDietTesting.checked;\n      const vigilanceLifestyleDietComment = event.target.formGridVigilanceLifestyleDietComment.value;\n      const vigilanceLifestyleSmokingMedication = event.target.formGridVigilanceLifestyleSmokingMedication.checked;\n      const vigilanceLifestyleSmokingTesting = event.target.formGridVigilanceLifestyleSmokingTesting.checked;\n      const vigilanceLifestyleSmokingComment = event.target.formGridVigilanceLifestyleSmokingComment.value;\n      const vigilanceLifestyleSubstanceAbuseMedication = event.target.formGridVigilanceLifestyleSubstanceAbuseMedication.checked;\n      const vigilanceLifestyleSubstanceAbuseTesting = event.target.formGridVigilanceLifestyleSubstanceAbuseTesting.checked;\n      const vigilanceLifestyleSubstanceAbuseComment = event.target.formGridVigilanceLifestyleSubstanceAbuseComment.value;\n      const vigilanceLifestyleExerciseMedication = event.target.formGridVigilanceLifestyleExerciseMedication.checked;\n      const vigilanceLifestyleExerciseTesting = event.target.formGridVigilanceLifestyleExerciseTesting.checked;\n      const vigilanceLifestyleExerciseComment = event.target.formGridVigilanceLifestyleExerciseComment.value;\n      const vigilanceLifestyleAllergiesMedication = event.target.formGridVigilanceLifestyleAllergiesMedication.checked;\n      const vigilanceLifestyleAllergiesTesting = event.target.formGridVigilanceLifestyleAllergiesTesting.checked;\n      const vigilanceLifestyleAllergiesComment = event.target.formGridVigilanceLifestyleAllergiesComment.value;\n      const vigilanceLifestyleAsthmaMedication = event.target.formGridVigilanceLifestyleAsthmaMedication.checked;\n      const vigilanceLifestyleAsthmaTesting = event.target.formGridVigilanceLifestyleAsthmaTesting.checked;\n      const vigilanceLifestyleAsthmaComment = event.target.formGridVigilanceLifestyleAsthmaComment.value;\n      const vigilanceScreeningBreastMedication = event.target.formGridVigilanceScreeningBreastMedication.checked;\n      const vigilanceScreeningBreastTesting = event.target.formGridVigilanceScreeningBreastTesting.checked;\n      const vigilanceScreeningBreastComment = event.target.formGridVigilanceScreeningBreastComment.value;\n      const vigilanceScreeningProstateMedication = event.target.formGridVigilanceScreeningProstateMedication.checked;\n      const vigilanceScreeningProstateTesting = event.target.formGridVigilanceScreeningProstateTesting.checked;\n      const vigilanceScreeningProstateComment = event.target.formGridVigilanceScreeningProstateComment.value;\n      const vigilanceScreeningCervixMedication = event.target.formGridVigilanceScreeningCervixMedication.checked;\n      const vigilanceScreeningCervixTesting = event.target.formGridVigilanceScreeningCervixTesting.checked;\n      const vigilanceScreeningCervixComment = event.target.formGridVigilanceScreeningCervixComment.value;\n      const vigilanceScreeningColonMedication = event.target.formGridVigilanceScreeningColonMedication.checked;\n      const vigilanceScreeningColonTesting = event.target.formGridVigilanceScreeningColonTesting.checked;\n      const vigilanceScreeningColonComment = event.target.formGridVigilanceScreeningColonComment.value;\n      const vigilanceScreeningDentalMedication = event.target.formGridVigilanceScreeningDentalMedication.checked;\n      const vigilanceScreeningDentalTesting = event.target.formGridVigilanceScreeningDentalTesting.checked;\n      const vigilanceScreeningDentalComment = event.target.formGridVigilanceScreeningDentalComment.value;\n      const vigilanceVaccinesInfluenzaMedication = event.target.formGridVigilanceVaccinesInfluenzaMedication.checked;\n      const vigilanceVaccinesInfluenzaTesting = event.target.formGridVigilanceVaccinesInfluenzaTesting.checked;\n      const vigilanceVaccinesInfluenzaComment = event.target.formGridVigilanceVaccinesInfluenzaComment.value;\n      const vigilanceVaccinesVaricellaMedication = event.target.formGridVigilanceVaccinesVaricellaMedication.checked;\n      const vigilanceVaccinesVaricellaTesting = event.target.formGridVigilanceVaccinesVaricellaTesting.checked;\n      const vigilanceVaccinesVaricellaComment = event.target.formGridVigilanceVaccinesVaricellaComment.value;\n      const vigilanceVaccinesHpvMedication = event.target.formGridVigilanceVaccinesHpvMedication.checked;\n      const vigilanceVaccinesHpvTesting = event.target.formGridVigilanceVaccinesHpvTesting.checked;\n      const vigilanceVaccinesHpvComment = event.target.formGridVigilanceVaccinesHpvComment.value;\n      const vigilanceVaccinesMmrMedication = event.target.formGridVigilanceVaccinesMmrMedication.checked;\n      const vigilanceVaccinesMmrTesting = event.target.formGridVigilanceVaccinesMmrTesting.checked;\n      const vigilanceVaccinesMmrComment = event.target.formGridVigilanceVaccinesMmrComment.value;\n      const vigilanceVaccinesTetanusMedication = event.target.formGridVigilanceVaccinesTetanusMedication.checked;\n      const vigilanceVaccinesTetanusTesting = event.target.formGridVigilanceVaccinesTetanusTesting.checked;\n      const vigilanceVaccinesTetanusComment = event.target.formGridVigilanceVaccinesTetanusComment.value;\n      const vigilanceVaccinesPneumovaxMedication = event.target.formGridVigilanceVaccinesPneumovaxMedication.checked;\n      const vigilanceVaccinesPneumovaxTesting = event.target.formGridVigilanceVaccinesPneumovaxTesting.checked;\n      const vigilanceVaccinesPneumovaxComment = event.target.formGridVigilanceVaccinesPneumovaxComment.value;\n      const vigilanceVaccinesOtherName = event.target.formGridVigilanceVaccinesOtherName.value;\n      const vigilanceVaccinesOtherMedication = event.target.formGridVigilanceVaccinesOtherMedication.checked;\n      const vigilanceVaccinesOtherTesting = event.target.formGridVigilanceVaccinesOtherTesting.checked;\n      const vigilanceVaccinesOtherComment = event.target.formGridVigilanceVaccinesOtherComment.value;\n      const requestBody = {\n        query: `\n      mutation {updatePatientVigilance(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{\n        vigilanceDate:\"${vigilanceDate}\",\n        vigilanceChronicIllnessDiabetesMedication: ${vigilanceChronicIllnessDiabetesMedication},\n        vigilanceChronicIllnessDiabetesTesting: ${vigilanceChronicIllnessDiabetesTesting},\n        vigilanceChronicIllnessDiabetesComment: \"${vigilanceChronicIllnessDiabetesComment}\",\n        vigilanceChronicIllnessHbpMedication: ${vigilanceChronicIllnessHbpMedication},\n        vigilanceChronicIllnessHbpTesting: ${vigilanceChronicIllnessHbpTesting},\n        vigilanceChronicIllnessHbpComment: \"${vigilanceChronicIllnessHbpComment}\",\n        vigilanceChronicIllnessDyslipidemiaMedication: ${vigilanceChronicIllnessDyslipidemiaMedication},\n        vigilanceChronicIllnessDyslipidemiaTesting: ${vigilanceChronicIllnessDyslipidemiaTesting},\n        vigilanceChronicIllnessDyslipidemiaComment: \"${vigilanceChronicIllnessDyslipidemiaComment}\",\n        vigilanceChronicIllnessCadMedication: ${vigilanceChronicIllnessCadMedication},\n        vigilanceChronicIllnessCadTesting: ${vigilanceChronicIllnessCadTesting},\n        vigilanceChronicIllnessCadComment: \"${vigilanceChronicIllnessCadComment}\",\n        vigilanceLifestyleWeightMedication: ${vigilanceLifestyleWeightMedication},\n        vigilanceLifestyleWeightTesting: ${vigilanceLifestyleWeightTesting},\n        vigilanceLifestyleWeightComment: \"${vigilanceLifestyleWeightComment}\",\n        vigilanceLifestyleDietMedication: ${vigilanceLifestyleDietMedication},\n        vigilanceLifestyleDietTesting: ${vigilanceLifestyleDietTesting},\n        vigilanceLifestyleDietComment: \"${vigilanceLifestyleDietComment}\",\n        vigilanceLifestyleSmokingMedication: ${vigilanceLifestyleSmokingMedication},\n        vigilanceLifestyleSmokingTesting: ${vigilanceLifestyleSmokingTesting},\n        vigilanceLifestyleSmokingComment: \"${vigilanceLifestyleSmokingComment}\",\n        vigilanceLifestyleSubstanceAbuseMedication: ${vigilanceLifestyleSubstanceAbuseMedication},\n        vigilanceLifestyleSubstanceAbuseTesting: ${vigilanceLifestyleSubstanceAbuseTesting},\n        vigilanceLifestyleSubstanceAbuseComment: \"${vigilanceLifestyleSubstanceAbuseComment}\",\n        vigilanceLifestyleExerciseMedication: ${vigilanceLifestyleExerciseMedication},\n        vigilanceLifestyleExerciseTesting: ${vigilanceLifestyleExerciseTesting},\n        vigilanceLifestyleExerciseComment: \"${vigilanceLifestyleExerciseComment}\",\n        vigilanceLifestyleAllergiesMedication: ${vigilanceLifestyleAllergiesMedication},\n        vigilanceLifestyleAllergiesTesting: ${vigilanceLifestyleAllergiesTesting},\n        vigilanceLifestyleAllergiesComment: \"${vigilanceLifestyleAllergiesComment}\",\n        vigilanceLifestyleAsthmaMedication: ${vigilanceLifestyleAsthmaMedication},\n        vigilanceLifestyleAsthmaTesting: ${vigilanceLifestyleAsthmaTesting},\n        vigilanceLifestyleAsthmaComment: \"${vigilanceLifestyleAsthmaComment}\",\n        vigilanceScreeningBreastMedication: ${vigilanceScreeningBreastMedication},\n        vigilanceScreeningBreastTesting: ${vigilanceScreeningBreastTesting},\n        vigilanceScreeningBreastComment: \"${vigilanceScreeningBreastComment}\",\n        vigilanceScreeningProstateMedication: ${vigilanceScreeningProstateMedication},\n        vigilanceScreeningProstateTesting: ${vigilanceScreeningProstateTesting},\n        vigilanceScreeningProstateComment: \"${vigilanceScreeningProstateComment}\",\n        vigilanceScreeningCervixMedication: ${vigilanceScreeningCervixMedication},\n        vigilanceScreeningCervixTesting: ${vigilanceScreeningCervixTesting},\n        vigilanceScreeningCervixComment: \"${vigilanceScreeningCervixComment}\",\n        vigilanceScreeningColonMedication: ${vigilanceScreeningColonMedication},\n        vigilanceScreeningColonTesting: ${vigilanceScreeningColonTesting},\n        vigilanceScreeningColonComment: \"${vigilanceScreeningColonComment}\",\n        vigilanceScreeningDentalMedication: ${vigilanceScreeningDentalMedication},\n        vigilanceScreeningDentalTesting: ${vigilanceScreeningDentalTesting},\n        vigilanceScreeningDentalComment: \"${vigilanceScreeningDentalComment}\",\n        vigilanceVaccinesInfluenzaMedication: ${vigilanceVaccinesInfluenzaMedication},\n        vigilanceVaccinesInfluenzaTesting: ${vigilanceVaccinesInfluenzaTesting},\n        vigilanceVaccinesInfluenzaComment: \"${vigilanceVaccinesInfluenzaComment}\",\n        vigilanceVaccinesVaricellaMedication: ${vigilanceVaccinesVaricellaMedication},\n        vigilanceVaccinesVaricellaTesting: ${vigilanceVaccinesVaricellaTesting},\n        vigilanceVaccinesVaricellaComment: \"${vigilanceVaccinesVaricellaComment}\",\n        vigilanceVaccinesHpvMedication: ${vigilanceVaccinesHpvMedication},\n        vigilanceVaccinesHpvTesting: ${vigilanceVaccinesHpvTesting},\n        vigilanceVaccinesHpvComment: \"${vigilanceVaccinesHpvComment}\",\n        vigilanceVaccinesMmrMedication: ${vigilanceVaccinesMmrMedication},\n        vigilanceVaccinesMmrTesting: ${vigilanceVaccinesMmrTesting},\n        vigilanceVaccinesMmrComment: \"${vigilanceVaccinesMmrComment}\",\n        vigilanceVaccinesTetanusMedication: ${vigilanceVaccinesTetanusMedication},\n        vigilanceVaccinesTetanusTesting: ${vigilanceVaccinesTetanusTesting},\n        vigilanceVaccinesTetanusComment: \"${vigilanceVaccinesTetanusComment}\",\n        vigilanceVaccinesPneumovaxMedication: ${vigilanceVaccinesPneumovaxMedication},\n        vigilanceVaccinesPneumovaxTesting: ${vigilanceVaccinesPneumovaxTesting},\n        vigilanceVaccinesPneumovaxComment: \"${vigilanceVaccinesPneumovaxComment}\",\n        vigilanceVaccinesOtherName: \"${vigilanceVaccinesOtherName}\",\n        vigilanceVaccinesOtherMedication: ${vigilanceVaccinesOtherMedication},\n        vigilanceVaccinesOtherTesting: ${vigilanceVaccinesOtherTesting},\n        vigilanceVaccinesOtherComment: \"${vigilanceVaccinesOtherComment}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const updatedPatientId = resData.data.updatePatientVigilance._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        this.state.patients.push(resData.data.updatePatientVigilance);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.fetchPatients();\n        this.setState({\n          userAlert: responseAlert,\n          selectedPatient: resData.data.updatePatientVigilance\n        });\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientAttachmentHandler = event => {\n      event.preventDefault();\n\n      if (event.target.fileInput.value === \"\") {\n        this.setState({\n          userAlert: \"no file chosen. Please try again\"\n        });\n        return;\n      }\n\n      const token = this.context.token;\n      const userId = this.context.userId;\n      const selectedPatientId = this.context.selectedPatient._id;\n      this.setState({\n        updating: false,\n        patientUpdateField: null,\n        userAlert: \"Adding selected Patient Attachment...\"\n      });\n      const attachmentFormat = event.target.formGridPatientAttachmentFormat.value;\n      const attachmentPath = \"uploads/patients/\" + selectedPatientId + \"/attachments\";\n      let attachmentName = null;\n\n      if (event.target.fileInput.value !== \"\") {\n        let file = AuthContext._currentValue.file;\n        const config = {\n          bucketName: this.state.creds.s3.bucketName,\n          dirName: attachmentPath,\n          region: this.state.creds.s3.region,\n          accessKeyId: this.state.creds.s3.accessKeyId,\n          secretAccessKey: this.state.creds.s3.secretAccessKey\n        };\n        const ReactS3Client = new S3(config);\n        const newFileName = file.name;\n        attachmentName = newFileName;\n        this.setState({\n          userAlert: \"uploading attachment ...\"\n        });\n        ReactS3Client.uploadFile(file, newFileName).then(data => {\n          console.log(data);\n          this.setState({\n            userAlert: \"attachment upload success!\"\n          });\n        }).catch(err => {\n          console.error(err);\n          this.setState({\n            userAlert: \"upload error:  \" + err\n          });\n        });\n      }\n\n      if (attachmentName.trim().length === 0 || attachmentFormat.trim().length === 0 || attachmentPath.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...Please try again...\"\n        });\n        return;\n      }\n\n      const requestBody = {\n        query: `\n            mutation {updatePatientAttachment(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{attachmentName:\"${attachmentName}\",attachmentFormat:\"${attachmentFormat}\",attachmentPath:\"${attachmentPath}\"})\n            {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n          `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const updatedPatientId = resData.data.updatePatientAttachment._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        this.state.patients.push(resData.data.updatePatientAttachment);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.fetchPatients();\n        this.setState({\n          userAlert: responseAlert,\n          selectedPatient: resData.data.updatePatientAttachment\n        });\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientNoteHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      const selectedPatientId = this.context.selectedPatient._id;\n      this.setState({\n        updating: false,\n        patientUpdateField: null,\n        userAlert: \"Adding selected Patient Note ...\"\n      });\n      const note = event.target.formGridNote.value;\n\n      if (note.trim().length === 0) {\n        this.setState({\n          userAlert: \"Can't Submit a blank form!!!...Please try again...\"\n        });\n        return;\n      }\n\n      const requestBody = {\n        query: `\n          mutation {updatePatientNotes(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{notes:\"${note}\"})\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const updatedPatientId = resData.data.updatePatientNotes._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        this.state.patients.push(resData.data.updatePatientNotes);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.fetchPatients();\n        this.setState({\n          userAlert: responseAlert,\n          selectedPatient: resData.data.updatePatientNotes\n        });\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientTagHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      const selectedPatientId = this.context.selectedPatient._id;\n      this.setState({\n        updating: false,\n        patientUpdateField: null,\n        userAlert: \"Adding selected Patient Tag...\"\n      });\n      const tag = event.target.formGridTag.value;\n\n      if (tag.trim().length === 0) {\n        console.log(\"Can't Submit a blank form!!!...Please try again...\");\n        this.setState({\n          userAlert: \"Can't Submit a blank form!!!...Please try again...\"\n        });\n        return;\n      }\n\n      const requestBody = {\n        query: `\n          mutation {updatePatientTags(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{tag:\"${tag}\"})\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const updatedPatientId = resData.data.updatePatientTags._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        this.state.patients.push(resData.data.updatePatientTags);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.fetchPatients();\n        this.setState({\n          userAlert: responseAlert,\n          selectedPatient: resData.data.updatePatientTags\n        });\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.modalConfirmSearchHandler = event => {\n      const userId = this.context.userId;\n      const token = this.context.token;\n      this.setState({\n        searching: false,\n        userAlert: \"Now Searching Patients...\"\n      });\n      let field = null;\n      const query = event.target.formBasicQuery.value;\n\n      if (event.target.formBasicFieldSelect.value === \"select\") {\n        field = event.target.formBasicField.value;\n      } else {\n        field = event.target.formBasicFieldSelect.value;\n      }\n\n      this.setState({\n        patientSearchField: field,\n        patientSearchQuery: query\n      });\n\n      if (field.trim().length === 0 || query.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...Please try again...\"\n        });\n        return;\n      }\n\n      const requestBody = {\n        query: `\n      query {\n        getPatientField(userId: \"${userId}\", field: \"${field}\", query: \"${query}\" )\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const responseAlert = JSON.stringify(resData.data).slice(2, 15);\n        const searchPatients = resData.data.getPatientField;\n        this.setState({\n          searchPatients: searchPatients,\n          userAlert: responseAlert\n        }); // this.fetchPatients();\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.modalConfirmSearchIdHandler = event => {\n      const userId = this.context.userId;\n      this.setState({\n        searching: false,\n        userAlert: \"Searching Patients by Id...\"\n      });\n      const patientId = event.target.formBasicId.value;\n      const requestBody = {\n        query: `\n      query {getPatientId(userId:\"${userId}\",patientId:\"${patientId}\")\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n      };\n      const token = this.context.token;\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        const searchPatients = resData.data.getPatientId;\n        this.setState({\n          searchPatients: [searchPatients],\n          userAlert: responseAlert\n        });\n        console.log(\"state.searchPatients:  \", this.state.searchPatients); // this.fetchUsers();\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.modalConfirmSearchNameHandler = event => {\n      this.setState({\n        searching: false,\n        userAlert: \"Searching Patients by Name...\"\n      });\n      const patients = this.state.patients;\n      const regex = new RegExp(event.target.formBasicName.value, \"i\");\n      let result = patients.filter(patient => patient.name.match(regex));\n      this.setState({\n        searchPatients: result\n      });\n    };\n\n    this.getPatientVisit = event => {\n      const selectedPatient = this.state.selectedPatient;\n      event.preventDefault();\n      let visitDate = new Date(event.target.formBasicVisitDate.value).toISOString().substring(0, 10);\n      let visitSurveys = selectedPatient.surveys.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n      let visitConsultants = selectedPatient.consultant.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n      let visitComplaints = selectedPatient.complaints.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate); // let visitSurveys = selectedPatient.surveys.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString() === visitDate);\n\n      let visitSystematicInquiry = selectedPatient.systematicInquiry.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n      let visitVitals = selectedPatient.vitals.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n      let visitExaminations = selectedPatient.examination.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n      let visitHistory = selectedPatient.history.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n      let visitInvestigations = selectedPatient.investigation.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n      let visitDiagnosis = selectedPatient.diagnosis.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n      let visitTreatments = selectedPatient.treatment.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n      let visitBilling = selectedPatient.billing.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n      let visitVigilance = selectedPatient.vigilance.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n      const visit = {\n        date: visitDate,\n        patientName: this.context.selectedPatient.name,\n        consultant: visitConsultants,\n        complaint: visitComplaints,\n        examination: visitExaminations,\n        survey: visitSurveys,\n        systematicInquiry: visitSystematicInquiry,\n        vitals: visitVitals,\n        history: visitHistory,\n        investigation: visitInvestigations,\n        diagnosis: visitDiagnosis,\n        treatment: visitTreatments,\n        billing: visitBilling,\n        vigilance: visitVigilance\n      };\n      this.setState({\n        visit: visit\n      });\n    };\n\n    this.getVisitList = () => {\n      const selectedPatient = this.state.selectedPatient;\n      const patientName = this.state.selectedPatient.name;\n      let selectedPatientAppointmentDateArray = [];\n      let selectedPatientAppointmentVisitArray = [];\n      let selectedPatientAppointments = this.state.selectedPatient.appointments.map(appointments => {\n        selectedPatientAppointmentDateArray.push(new Date(appointments.date.substr(0, 10) * 1000).toISOString().substring(0, 10));\n      });\n      selectedPatientAppointmentDateArray.map(appointmentDate => {\n        thisGetVisit(appointmentDate, patientName);\n      });\n\n      function thisGetVisit(argsDate, argsPatientName) {\n        const visitDate = argsDate;\n        const visitSurveys = selectedPatient.surveys.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n        const visitConsultants = selectedPatient.consultant.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n        const visitComplaints = selectedPatient.complaints.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate); // let visitSurveys = selectedPatient.surveys.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString() === visitDate);\n\n        const visitVitals = selectedPatient.vitals.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n        const visitSystematicInquiry = selectedPatient.systematicInquiry.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n        const visitExaminations = selectedPatient.examination.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n        const visitHistory = selectedPatient.history.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n        const visitInvestigations = selectedPatient.investigation.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n        const visitDiagnosis = selectedPatient.diagnosis.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n        const visitTreatments = selectedPatient.treatment.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n        const visitBilling = selectedPatient.billing.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n        const visitVigilance = selectedPatient.vigilance.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n        const visit = {\n          date: visitDate,\n          patientName: argsPatientName,\n          consultant: visitConsultants,\n          complaint: visitComplaints,\n          examination: visitExaminations,\n          survey: visitSurveys,\n          systematicInquiry: visitSystematicInquiry,\n          vitals: visitVitals,\n          history: visitHistory,\n          investigation: visitInvestigations,\n          diagnosis: visitDiagnosis,\n          treatment: visitTreatments,\n          billing: visitBilling,\n          vigilance: visitVigilance\n        };\n        selectedPatientAppointmentVisitArray.push(visit);\n      }\n\n      this.setState({\n        visitList: selectedPatientAppointmentVisitArray\n      });\n    };\n\n    this.getVisitListAsc = () => {\n      let list = this.state.visitList;\n      list.sort((a, b) => {\n        if (a.date < b.date) return -1;\n        return a.date > b.date ? 1 : 0;\n      });\n      this.setState({\n        visitList: list\n      });\n    };\n\n    this.getVisitListDesc = () => {\n      let list = this.state.visitList;\n      list.sort((a, b) => {\n        if (a.date < b.date) return 1;\n        return a.date > b.date ? -1 : 0;\n      });\n      this.setState({\n        visitList: list\n      });\n    };\n\n    this.modalCancelHandler = () => {\n      this.setState({\n        creating: false,\n        updating: false,\n        searching: false,\n        selectedPatient: null\n      });\n    };\n\n    this.fetchPatientsAsc = () => {\n      const userId = this.context.userId;\n      const token = this.context.token; // this.setState({ isLoading: true });\n\n      const requestBody = {\n        query: `\n          query {patientsNameAsc(userId:\"${userId}\")\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n        `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const patients = resData.data.patientsNameAsc;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.context.patients = patients;\n        this.setState({\n          patients: patients\n        }); // if (this.isActive) {\n        //   this.setState({ patients: patients, isLoading: false });\n        // }\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        }); // if (this.isActive) {\n        //   this.setState({ isLoading: false });\n        // }\n      });\n    };\n\n    this.fetchPatientsDesc = () => {\n      const userId = this.context.userId;\n      const token = this.context.token; // this.setState({ isLoading: true });\n\n      const requestBody = {\n        query: `\n          query {patientsNameDesc(userId:\"${userId}\")\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n        `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const patients = resData.data.patientsNameDesc;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.context.patients = patients; // if (this.isActive) {\n        //   this.setState({ patients: patients, isLoading: false });\n        // }\n\n        this.setState({\n          patients: patients\n        });\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        }); // if (this.isActive) {\n        //   this.setState({ isLoading: false });\n        // }\n      });\n    };\n\n    this.modalDeleteHandler = () => {\n      const selectedPatientId = this.context.selectedPatient._id;\n      const userId = this.context.selectedUser._id;\n\n      if (this.context.user.role !== 'admin') {\n        this.setState({\n          userAlert: \"Not the Admin! No edit permission!!\"\n        });\n      }\n\n      this.setState({\n        deleting: true,\n        userAlert: \"Deleting selected Patient...\"\n      });\n      const requestBody = {\n        query: `\n          mutation {deletePatient(userId:\"${userId}\",patientId:\"${selectedPatientId}\")\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n        `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + this.context.token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatient;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        let deletedPatientId = deletedPatient._id;\n        deletedPatient = this.state.patients.find(e => e._id === deletedPatientId);\n        const deletedPatientPos = this.state.patients.indexOf(deletedPatient);\n        const slicedArray = this.state.patients.splice(deletedPatientPos, 1);\n        this.setState({\n          deleting: false\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n\n        if (this.isActive) {\n          this.setState({\n            deleting: false\n          });\n        }\n      });\n    };\n\n    this.deletePatientInsuranceItem = props => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      const patientId = this.state.selectedPatient._id;\n      const requestBody = {\n        query: `\n       mutation {deletePatientInsurance (userId:\"${userId}\", patientId:\"${patientId}\",insuranceCompany:\"${props.company}\",insuranceNumber:\"${props.number}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatientInsurance;\n        const updatedPatientId = resData.data.deletePatientInsurance._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        this.state.patients.push(resData.data.deletePatientInsurance);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.deletePatientAppointmentItem = props => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      const patientId = this.state.selectedPatient._id;\n      const date = new Date(props.date.substr(0, 10) * 1000).toISOString().slice(0, 10);\n      const requestBody = {\n        query: `\n         mutation {deletePatientAppointment (userId:\"${userId}\", patientId:\"${patientId}\",appointmentId:\"${props._id}\",appointmentDate:\"${date}\")\n         {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatientAppointment;\n        const updatedPatientId = resData.data.deletePatientAppointment._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        this.state.patients.push(resData.data.deletePatientAppointment);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.deletePatientConsultantItem = props => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      const patientId = this.state.selectedPatient._id;\n      const date = new Date(props.date.substr(0, 10) * 1000).toISOString().slice(0, 10);\n      const requestBody = {\n        query: `\n         mutation {deletePatientConsultant (userId:\"${userId}\", patientId:\"${patientId}\",consultantId:\"${props.reference.id}\",consultantDate:\"${date}\")\n         {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const deletedPatient = resData.data.deletePatientConsultant;\n        const updatedPatientId = resData.data.deletePatientConsultant._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        this.state.patients.push(resData.data.deletePatientConsultant);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.deletePatientNextOfKinItem = props => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      const patientId = this.state.selectedPatient._id;\n      const requestBody = {\n        query: `\n       mutation {deletePatientNextOfKin (userId:\"${userId}\", patientId:\"${patientId}\",nextOfKinName:\"${props.name}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatientNextOfKin;\n        const updatedPatientId = resData.data.deletePatientNextOfKin._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        this.state.patients.push(resData.data.deletePatientNextOfKin);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.deletePatientComplaintItem = props => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      const patientId = this.state.selectedPatient._id;\n      const date = new Date(props.date.substr(0, 10) * 1000).toISOString().slice(0, 10);\n      const requestBody = {\n        query: `\n       mutation {deletePatientComplaint (userId:\"${userId}\", patientId:\"${patientId}\",complaintTitle:\"${props.title}\",complaintDate:\"${date}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const deletedPatient = resData.data.deletePatientComplaint;\n        const updatedPatientId = resData.data.deletePatientComplaint._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        this.state.patients.push(resData.data.deletePatientComplaint);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.deletePatientSurveyItem = props => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      const patientId = this.state.selectedPatient._id;\n      const date = new Date(props.date.substr(0, 10) * 1000).toISOString().slice(0, 10);\n      const requestBody = {\n        query: `\n       mutation {deletePatientSurvey (userId:\"${userId}\", patientId:\"${patientId}\",surveyTitle:\"${props.title}\",surveyDate:\"${date}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatientSurvey;\n        const updatedPatientId = resData.data.deletePatientSurvey._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        this.state.patients.push(resData.data.deletePatientSurvey);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.deletePatientSystematicInquiryItem = props => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      const patientId = this.state.selectedPatient._id;\n      const date = new Date(props.date.substr(0, 10) * 1000).toISOString().slice(0, 10);\n      const requestBody = {\n        query: `\n       mutation {deletePatientSystematicInquiry (userId:\"${userId}\", patientId:\"${patientId}\",systematicInquiryTitle:\"${props.title}\",systematicInquiryDate:\"${date}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatientSystematicInquiry;\n        const updatedPatientId = resData.data.deletePatientSystematicInquiry._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        this.state.patients.push(resData.data.deletePatientSystematicInquiry);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.deletePatientVitalsItem = props => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      const patientId = this.state.selectedPatient._id;\n      const date = new Date(props.date.substr(0, 10) * 1000).toISOString().slice(0, 10);\n      const requestBody = {\n        query: `\n       mutation {deletePatientVitals (userId:\"${userId}\", patientId:\"${patientId}\",vitalsDate:\"${date}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatientVitals;\n        const updatedPatientId = resData.data.deletePatientVitals._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        this.state.patients.push(resData.data.deletePatientVitals);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.deletePatientExaminationItem = props => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      const patientId = this.state.selectedPatient._id;\n      const date = new Date(props.date.substr(0, 10) * 1000).toISOString().slice(0, 10);\n      const requestBody = {\n        query: `\n       mutation {deletePatientExamination (userId:\"${userId}\", patientId:\"${patientId}\",examinationType:\"${props.type}\",examinationDate:\"${date}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatientExamination;\n        const updatedPatientId = resData.data.deletePatientExamination._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        this.state.patients.push(resData.data.deletePatientExamination);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.deletePatientHistoryItem = props => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      const patientId = this.state.selectedPatient._id;\n      const date = new Date(props.date.substr(0, 10) * 1000).toISOString().slice(0, 10);\n      const requestBody = {\n        query: `\n       mutation {deletePatientHistory (userId:\"${userId}\", patientId:\"${patientId}\",historyTitle:\"${props.title}\",historyDate:\"${date}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatientHistory;\n        const updatedPatientId = resData.data.deletePatientHistory._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        this.state.patients.push(resData.data.deletePatientHistory);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.deletePatientAllergiesItem = props => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      const patientId = this.state.selectedPatient._id;\n      const requestBody = {\n        query: `\n       mutation {deletePatientAllergies (userId:\"${userId}\", patientId:\"${patientId}\",allergiesTitle:\"${props.title}\",allergiesType:\"${props.type}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatientAllergies;\n        const updatedPatientId = resData.data.deletePatientAllergies._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        this.state.patients.push(resData.data.deletePatientAllergies);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.deletePatientMedicationItem = props => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      const patientId = this.state.selectedPatient._id;\n      const requestBody = {\n        query: `\n       mutation {deletePatientMedication (userId:\"${userId}\", patientId:\"${patientId}\",medicationTitle:\"${props.title}\",medicationType:\"${props.type}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatientMedication;\n        const updatedPatientId = resData.data.deletePatientMedication._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        this.state.patients.push(resData.data.deletePatientMedication);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.deletePatientInvestigationItem = props => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      const patientId = this.state.selectedPatient._id;\n      const date = new Date(props.date.substr(0, 10) * 1000).toISOString().slice(0, 10);\n      const requestBody = {\n        query: `\n         mutation {deletePatientInvestigation (userId:\"${userId}\", patientId:\"${patientId}\",investigationDate:\"${date}\",investigationTitle:\"${props.title}\")\n         {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const deletedPatient = resData.data.deletePatientInvestigation;\n        const updatedPatientId = resData.data.deletePatientInvestigation._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        this.state.patients.push(resData.data.deletePatientInvestigation);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.deletePatientDiagnosisItem = props => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      const patientId = this.state.selectedPatient._id;\n      const date = new Date(props.date.substr(0, 10) * 1000).toISOString().slice(0, 10);\n      const requestBody = {\n        query: `\n       mutation {deletePatientDiagnosis (userId:\"${userId}\",patientId:\"${patientId}\",diagnosisDate:\"${date}\",diagnosisTitle:\"${props.title}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n       `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const deletedPatient = resData.data.deletePatientDiagnosis;\n        const updatedPatientId = resData.data.deletePatientDiagnosis._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        this.state.patients.push(resData.data.deletePatientDiagnosis);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.deletePatientTreatmentItem = props => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      const patientId = this.state.selectedPatient._id;\n      const date = new Date(props.date.substr(0, 10) * 1000).toISOString().slice(0, 10);\n      const requestBody = {\n        query: `\n     mutation {deletePatientTreatment (userId:\"${userId}\", patientId:\"${patientId}\",treatmentDate:\"${date}\",treatmentTitle:\"${props.title}\")\n     {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n  `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const deletedPatient = resData.data.deletePatientTreatment;\n        const updatedPatientId = resData.data.deletePatientTreatment._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        this.state.patients.push(resData.data.deletePatientTreatment);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.deletePatientBillingItem = props => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      const patientId = this.state.selectedPatient._id;\n      const date = new Date(props.date.substr(0, 10) * 1000).toISOString().slice(0, 10);\n      const requestBody = {\n        query: `\n       mutation {deletePatientBilling (userId:\"${userId}\", patientId:\"${patientId}\",billingDate:\"${date}\",billingTitle:\"${props.title}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const deletedPatient = resData.data.deletePatientBilling;\n        const updatedPatientId = resData.data.deletePatientBilling._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        this.state.patients.push(resData.data.deletePatientBilling);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.deletePatientVigilanceItem = props => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      const patientId = this.state.selectedPatient._id;\n      const date = new Date(props.date.substr(0, 10) * 1000).toISOString().slice(0, 10);\n      const requestBody = {\n        query: `\n       mutation {deletePatientVigilance (userId:\"${userId}\", patientId:\"${patientId}\",vigilanceDate:\"${date}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n     `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const deletedPatient = resData.data.deletePatientVigilance;\n        const updatedPatientId = resData.data.deletePatientVigilance._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        this.state.patients.push(resData.data.deletePatientVigilance);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.deletePatientAttachmentItem = props => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      const patientId = this.state.selectedPatient._id; //   const config = {\n      //     bucketName: this.state.creds.s3.bucketName,\n      //     dirName: props.path,\n      //     region: this.state.creds.s3.region,\n      //     accessKeyId: this.state.creds.s3.accessKeyId,\n      //     secretAccessKey: this.state.creds.s3.secretAccessKey,\n      //   }\n      // const ReactS3Client = new S3(config);\n      // const filename = props.name;\n      // // const attachmentName = newFileName;\n      // //\n      // S3FileUpload\n      // .deleteFile(filename, config)\n      // .then(response => console.log(response))\n      // .catch(err => console.error(err))\n\n      const requestBody = {\n        query: `\n       mutation {deletePatientAttachment (userId:\"${userId}\", patientId:\"${patientId}\",attachmentName:\"${props.name}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const deletedPatient = resData.data.deletePatientAttachment;\n        const updatedPatientId = resData.data.deletePatientAttachment._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        this.state.patients.push(resData.data.deletePatientAttachment);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.deletePatientNoteItem = props => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      const patientId = this.state.selectedPatient._id;\n      const requestBody = {\n        query: `\n    mutation {deletePatientNote (userId:\"${userId}\", patientId:\"${patientId}\",note:\"${props}\")\n    {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n  `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatientNote;\n        const updatedPatientId = resData.data.deletePatientNote._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        this.state.patients.push(resData.data.deletePatientNote);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.deletePatientTagItem = props => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      const patientId = this.state.selectedPatient._id;\n      const requestBody = {\n        query: `\n    mutation {deletePatientTag (userId:\"${userId}\", patientId:\"${patientId}\",tag:\"${props}\")\n    {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n  `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatientTag;\n        const updatedPatientId = resData.data.deletePatientTag._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        this.state.patients.push(resData.data.deletePatientTag);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.onViewAttachment = attachment => {\n      this.setState({\n        showAttachment: true\n      });\n      const file = \"https://ent-emr-bucket.s3-us-east-2.amazonaws.com/\" + attachment.path + \"/\" + attachment.name;\n      const type = attachment.format;\n      this.setState({\n        showThisAttachmentFile: file,\n        showThisAttachmentType: type\n      });\n    };\n\n    this.closeAttachmentView = () => {\n      this.setState({\n        showAttachment: false\n      });\n    };\n\n    this.createPdfTest = event => {\n      event.preventDefault();\n      console.log(`\n      create pdf user otf input here...\n      ${event.target.formGridDocGenUserInput.value}\n      ${event.target.formGridDocGenVisitDate.value}\n    `);\n      const patient = this.state.selectedPatient;\n      const pdfData = {\n        title: \"This pdf is supplied with Patient data...\",\n        date: new Date(),\n        test: event.target.formGridDocGenUserInput.value,\n        patient: {\n          _id: patient._id,\n          title: patient.title,\n          name: patient.name,\n          dob: patient.dob,\n          age: patient.age,\n          gender: patient.gender,\n          address: {\n            number: patient.number,\n            street: patient.street,\n            town: patient.town,\n            parish: patient.parish,\n            postOffice: patient.postOffice\n          },\n          registrationDate: patient.registrationDate,\n          referralDate: patient.referralDate,\n          expirationDate: patient.expirationDate,\n          attendingPhysician: {\n            name: patient.attendingPhysician.name,\n            email: patient.attendingPhysician.email,\n            phone: patient.attendingPhysician.phone\n          },\n          referringDoctor: {\n            name: patient.referringDoctor.name,\n            email: patient.referringDoctor.email,\n            phone: patient.referringDoctor.phone\n          },\n          contact: {\n            phone: patient.contact.phone,\n            email: patient.contact.email\n          },\n          occupation: {\n            role: patient.occupation.role,\n            employer: patient.occupation.employer,\n            contact: {\n              phone: patient.occupation.contact.phone,\n              email: patient.occupation.contact.email\n            }\n          },\n          appointments: patient.appointments,\n          consultant: patient.consultant,\n          insurance: patient.insurance,\n          nextOfKin: patient.nextOfKin,\n          complaints: patient.complaints,\n          surveys: patient.surveys,\n          systematicInquiry: patient.systematicInquiry,\n          vitals: patient.vitals,\n          examination: patient.examination,\n          history: patient.history,\n          allergies: patient.allergies,\n          medication: patient.medication,\n          investigation: patient.investigation,\n          diagnosis: patient.diagnosis,\n          treatment: patient.treatment,\n          billing: patient.billing,\n          vigilance: patient.vigilance,\n          attachments: patient.attachments,\n          notes: patient.notes,\n          tags: patient.tags\n        }\n      };\n      this.setState({\n        creatingDocument: true,\n        pdfType: \"test\",\n        pdfData: pdfData\n      });\n    };\n\n    this.createReferralInput = event => {\n      event.preventDefault();\n\n      if (event.target.patientReferralCalendarVisitDate.value.trim().length === 0 || event.target.formGridDocGenReferralFindings.value.trim().length === 0 || event.target.formGridDocGenReferralRecommendation.value.trim().length === 0) {\n        this.setState({\n          userAlert: \"Blank fields detected... please check your info and try again\"\n        });\n        return;\n      }\n\n      const visitDate = new Date(event.target.patientReferralCalendarVisitDate.value).toISOString().substring(0, 10);\n      const patient = this.state.selectedPatient;\n      const visitDiagnosis = patient.diagnosis.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n      const visitTreatment = patient.treatment.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n      console.log(`\n        create referral user otf input here...\n        ${visitDate}\n        ${event.target.patientReferralCalendarVisitDate.value},\n        ${event.target.formGridDocGenReferralRecommendation.value},\n        ${event.target.formGridDocGenReferralFindings.value},\n        visitDiagnosis: ${JSON.stringify(visitDiagnosis)},\n      `);\n\n      if (JSON.stringify(visitTreatment) === \"[]\" || JSON.stringify(visitDiagnosis) === \"[]\") {\n        this.setState({\n          userAlert: `Incomplete or No Visit found for : ${visitDate}. Check your info and try again.`\n        });\n        return;\n      }\n\n      const pdfData = {\n        title: \"Referral\",\n        visitDate: visitDate,\n        findings: event.target.formGridDocGenReferralFindings.value,\n        recommendation: event.target.formGridDocGenReferralRecommendation.value,\n        patient: {\n          _id: patient._id,\n          title: patient.title,\n          name: patient.name,\n          dob: patient.dob,\n          age: patient.age,\n          gender: patient.gender,\n          address: {\n            number: patient.number,\n            street: patient.street,\n            town: patient.town,\n            parish: patient.parish,\n            postOffice: patient.postOffice\n          },\n          registrationDate: patient.registrationDate,\n          referralDate: patient.referralDate,\n          expirationDate: patient.expirationDate,\n          attendingPhysician: {\n            name: patient.attendingPhysician.name,\n            email: patient.attendingPhysician.email,\n            phone: patient.attendingPhysician.phone\n          },\n          referringDoctor: {\n            name: patient.referringDoctor.name,\n            email: patient.referringDoctor.email,\n            phone: patient.referringDoctor.phone\n          },\n          contact: {\n            phone: patient.contact.phone,\n            email: patient.contact.email\n          },\n          occupation: {\n            role: patient.occupation.role,\n            employer: patient.occupation.employer,\n            contact: {\n              phone: patient.occupation.contact.phone,\n              email: patient.occupation.contact.email\n            }\n          },\n          appointments: patient.appointments,\n          consultant: patient.consultant,\n          insurance: patient.insurance,\n          nextOfKin: patient.nextOfKin,\n          complaints: patient.complaints,\n          surveys: patient.surveys,\n          systematicInquiry: patient.systematicInquiry,\n          vitals: patient.vitals,\n          examination: patient.examination,\n          history: patient.history,\n          allergies: patient.allergies,\n          medication: patient.medication,\n          investigation: patient.investigation,\n          diagnosis: patient.diagnosis,\n          treatment: patient.treatment,\n          billing: patient.billing,\n          vigilance: patient.vigilance,\n          attachments: patient.attachments,\n          notes: patient.notes,\n          tags: patient.tags\n        },\n        date: new Date(),\n        referral: \"test referral... now w/ input\",\n        visitDiagnosis: visitDiagnosis,\n        visitTreatment: visitTreatment,\n        letterheadImage: \"https://photos.app.goo.gl/SrVuahmr14khGBoM9\"\n      };\n      this.setState({\n        creatingDocument: true,\n        pdfData: pdfData,\n        pdfType: \"patientReferral\"\n      });\n    };\n\n    this.createOperationReminderInput = event => {\n      event.preventDefault();\n\n      if (event.target.formGridDocGenOperationReminderName.value.trim().length === 0 || event.target.patientOperationReminderCalendarOperationDate.value.trim().length === 0 || event.target.formGridDocGenOperationReminderTime.value.trim().length === 0 || event.target.formGridDocGenOperationReminderHospitalName.value.trim().length === 0 || event.target.formGridDocGenOperationReminderHopsitalAddress.value.trim().length === 0 || event.target.patientOperationReminderCalendarFastDate.value.trim().length === 0 || event.target.formGridDocGenOperationReminderFastTime.value.trim().length === 0 || event.target.formGridDocGenOperationReminderEstimateCost.value.trim().length === 0) {\n        this.setState({\n          userAlert: \"Blank fields detected... please check your info and try again\"\n        });\n        return;\n      }\n\n      const date = new Date(event.target.patientOperationReminderCalendarOperationDate.value).toISOString().substring(0, 10);\n      const fastDate = new Date(event.target.patientOperationReminderCalendarFastDate.value).toISOString().substring(0, 10);\n      const patient = this.state.selectedPatient;\n      console.log(`\n        create operation reminder user otf input here...\n      `);\n      const pdfData = {\n        title: \"Operation Reminder\",\n        patient: {\n          _id: patient._id,\n          title: patient.title,\n          name: patient.name,\n          dob: patient.dob,\n          age: patient.age,\n          gender: patient.gender,\n          address: {\n            number: patient.address.number,\n            street: patient.address.street,\n            town: patient.address.town,\n            parish: patient.address.parish,\n            postOffice: patient.address.postOffice\n          },\n          registrationDate: patient.registrationDate,\n          referralDate: patient.referralDate,\n          expirationDate: patient.expirationDate,\n          attendingPhysician: {\n            name: patient.attendingPhysician.name,\n            email: patient.attendingPhysician.email,\n            phone: patient.attendingPhysician.phone\n          },\n          referringDoctor: {\n            name: patient.referringDoctor.name,\n            email: patient.referringDoctor.email,\n            phone: patient.referringDoctor.phone\n          },\n          contact: {\n            phone: patient.contact.phone,\n            email: patient.contact.email\n          },\n          occupation: {\n            role: patient.occupation.role,\n            employer: patient.occupation.employer,\n            contact: {\n              phone: patient.occupation.contact.phone,\n              email: patient.occupation.contact.email\n            }\n          },\n          appointments: patient.appointments,\n          consultant: patient.consultant,\n          insurance: patient.insurance,\n          nextOfKin: patient.nextOfKin,\n          complaints: patient.complaints,\n          surveys: patient.surveys,\n          systematicInquiry: patient.systematicInquiry,\n          vitals: patient.vitals,\n          examination: patient.examination,\n          history: patient.history,\n          allergies: patient.allergies,\n          medication: patient.medication,\n          investigation: patient.investigation,\n          diagnosis: patient.diagnosis,\n          treatment: patient.treatment,\n          billing: patient.billing,\n          vigilance: patient.vigilance,\n          attachments: patient.attachments,\n          notes: patient.notes,\n          tags: patient.tags\n        },\n        today: new Date(),\n        date: date,\n        name: event.target.formGridDocGenOperationReminderName.value,\n        time: event.target.formGridDocGenOperationReminderTime.value,\n        hospitalName: event.target.formGridDocGenOperationReminderHospitalName.value,\n        hospitalAddress: event.target.formGridDocGenOperationReminderHopsitalAddress.value,\n        fastDate: fastDate,\n        fastTime: event.target.formGridDocGenOperationReminderFastTime.value,\n        estimateCost: event.target.formGridDocGenOperationReminderEstimateCost.value,\n        letterheadImage: \"https://photos.app.goo.gl/SrVuahmr14khGBoM9\"\n      };\n      this.setState({\n        creatingDocument: true,\n        pdfData: pdfData,\n        pdfType: \"operationReminder\"\n      });\n    };\n\n    this.createMiscNoteInput = event => {\n      event.preventDefault();\n\n      if (event.target.formGridDocGenMiscNote1.value.trim().length === 0 || event.target.formGridDocGenMiscNote2.value.trim().length === 0) {\n        this.setState({\n          userAlert: \"Blank fields detected... please check your info and try again\"\n        });\n        return;\n      }\n\n      const patient = this.state.selectedPatient;\n      console.log(`\n        create misc note user otf input here...\n      `);\n      const pdfData = {\n        title: \"Miscellaneous Note\",\n        patient: {\n          _id: patient._id,\n          title: patient.title,\n          name: patient.name,\n          dob: patient.dob,\n          age: patient.age,\n          gender: patient.gender,\n          address: {\n            number: patient.address.number,\n            street: patient.address.street,\n            town: patient.address.town,\n            parish: patient.address.parish,\n            postOffice: patient.address.postOffice\n          },\n          registrationDate: patient.registrationDate,\n          referralDate: patient.referralDate,\n          expirationDate: patient.expirationDate,\n          attendingPhysician: {\n            name: patient.attendingPhysician.name,\n            email: patient.attendingPhysician.email,\n            phone: patient.attendingPhysician.phone\n          },\n          referringDoctor: {\n            name: patient.referringDoctor.name,\n            email: patient.referringDoctor.email,\n            phone: patient.referringDoctor.phone\n          },\n          contact: {\n            phone: patient.contact.phone,\n            email: patient.contact.email\n          },\n          occupation: {\n            role: patient.occupation.role,\n            employer: patient.occupation.employer,\n            contact: {\n              phone: patient.occupation.contact.phone,\n              email: patient.occupation.contact.email\n            }\n          },\n          appointments: patient.appointments,\n          consultant: patient.consultant,\n          insurance: patient.insurance,\n          nextOfKin: patient.nextOfKin,\n          complaints: patient.complaints,\n          surveys: patient.surveys,\n          systematicInquiry: patient.systematicInquiry,\n          vitals: patient.vitals,\n          examination: patient.examination,\n          history: patient.history,\n          allergies: patient.allergies,\n          medication: patient.medication,\n          investigation: patient.investigation,\n          diagnosis: patient.diagnosis,\n          treatment: patient.treatment,\n          billing: patient.billing,\n          vigilance: patient.vigilance,\n          attachments: patient.attachments,\n          notes: patient.notes,\n          tags: patient.tags\n        },\n        date: new Date(),\n        note1: event.target.formGridDocGenMiscNote1.value,\n        note2: event.target.formGridDocGenMiscNote2.value,\n        letterheadImage: \"https://photos.app.goo.gl/SrVuahmr14khGBoM9\"\n      };\n      this.setState({\n        creatingDocument: true,\n        pdfData: pdfData,\n        pdfType: \"miscNote\"\n      });\n    };\n\n    this.createSickNoteInput = event => {\n      event.preventDefault();\n\n      if (event.target.formGridDocGenSickNoteAddress.value.trim().length === 0 || event.target.formGridDocGenSickNoteDuration.value.trim().length === 0 || event.target.patientSickNoteCalendarStartDate.value.trim().length === 0) {\n        this.setState({\n          userAlert: \"Blank fields detected... please check your info and try again\"\n        });\n        return;\n      }\n\n      const date = new Date().toISOString().substring(0, 10);\n      const startDate = new Date(event.target.patientSickNoteCalendarStartDate.value).toISOString().substring(0, 10);\n      const patient = this.state.selectedPatient;\n      console.log(`\n        create Sick note user otf input here...\n      `);\n      const pdfData = {\n        title: \"Sick Note\",\n        patient: {\n          _id: patient._id,\n          title: patient.title,\n          name: patient.name,\n          dob: patient.dob,\n          age: patient.age,\n          gender: patient.gender,\n          address: {\n            number: patient.address.number,\n            street: patient.address.street,\n            town: patient.address.town,\n            parish: patient.address.parish,\n            postOffice: patient.address.postOffice\n          },\n          registrationDate: patient.registrationDate,\n          referralDate: patient.referralDate,\n          expirationDate: patient.expirationDate,\n          attendingPhysician: {\n            name: patient.attendingPhysician.name,\n            email: patient.attendingPhysician.email,\n            phone: patient.attendingPhysician.phone\n          },\n          referringDoctor: {\n            name: patient.referringDoctor.name,\n            email: patient.referringDoctor.email,\n            phone: patient.referringDoctor.phone\n          },\n          contact: {\n            phone: patient.contact.phone,\n            email: patient.contact.email\n          },\n          occupation: {\n            role: patient.occupation.role,\n            employer: patient.occupation.employer,\n            contact: {\n              phone: patient.occupation.contact.phone,\n              email: patient.occupation.contact.email\n            }\n          },\n          appointments: patient.appointments,\n          consultant: patient.consultant,\n          insurance: patient.insurance,\n          nextOfKin: patient.nextOfKin,\n          complaints: patient.complaints,\n          surveys: patient.surveys,\n          systematicInquiry: patient.systematicInquiry,\n          vitals: patient.vitals,\n          examination: patient.examination,\n          history: patient.history,\n          allergies: patient.allergies,\n          medication: patient.medication,\n          investigation: patient.investigation,\n          diagnosis: patient.diagnosis,\n          treatment: patient.treatment,\n          billing: patient.billing,\n          vigilance: patient.vigilance,\n          attachments: patient.attachments,\n          notes: patient.notes,\n          tags: patient.tags\n        },\n        receiverAddress: event.target.formGridDocGenSickNoteAddress.value,\n        date: date,\n        duration: event.target.formGridDocGenSickNoteDuration.value,\n        startDate: startDate,\n        letterheadImage: \"https://photos.app.goo.gl/SrVuahmr14khGBoM9\"\n      };\n      this.setState({\n        creatingDocument: true,\n        pdfData: pdfData,\n        pdfType: \"sickNote\"\n      });\n    };\n\n    this.createDiagTestInput = event => {\n      event.preventDefault();\n\n      if (event.target.patientDiagTestCalendarVisitDate.value.trim().length === 0 || event.target.formGridDocGenDiagTestReceiver.value.trim().length === 0 || event.target.formGridDocGenDiagTestRequired.value.trim().length === 0) {\n        this.setState({\n          userAlert: \"Blank fields detected... please check your info and try again\"\n        });\n        return;\n      }\n\n      const patient = this.state.selectedPatient;\n      const date = new Date().toISOString().substring(0, 10);\n      const visitDate = new Date(event.target.patientDiagTestCalendarVisitDate.value).toISOString().substring(0, 10);\n      const visitDiagnosis = patient.diagnosis.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n      console.log(`\n        create tests & screening user otf input here...\n        ${visitDate}\n      `);\n\n      if (JSON.stringify(visitDiagnosis) === \"[]\") {\n        this.setState({\n          userAlert: `Incomplete or No Visit found for : ${visitDate}. Check your info and try again.`\n        });\n        return;\n      }\n\n      const pdfData = {\n        title: \"Tests & Screenings\",\n        patient: {\n          _id: patient._id,\n          title: patient.title,\n          name: patient.name,\n          dob: patient.dob,\n          age: patient.age,\n          gender: patient.gender,\n          address: {\n            number: patient.address.number,\n            street: patient.address.street,\n            town: patient.address.town,\n            parish: patient.address.parish,\n            postOffice: patient.address.postOffice\n          },\n          registrationDate: patient.registrationDate,\n          referralDate: patient.referralDate,\n          expirationDate: patient.expirationDate,\n          attendingPhysician: {\n            name: patient.attendingPhysician.name,\n            email: patient.attendingPhysician.email,\n            phone: patient.attendingPhysician.phone\n          },\n          referringDoctor: {\n            name: patient.referringDoctor.name,\n            email: patient.referringDoctor.email,\n            phone: patient.referringDoctor.phone\n          },\n          contact: {\n            phone: patient.contact.phone,\n            email: patient.contact.email\n          },\n          occupation: {\n            role: patient.occupation.role,\n            employer: patient.occupation.employer,\n            contact: {\n              phone: patient.occupation.contact.phone,\n              email: patient.occupation.contact.email\n            }\n          },\n          appointments: patient.appointments,\n          consultant: patient.consultant,\n          insurance: patient.insurance,\n          nextOfKin: patient.nextOfKin,\n          complaints: patient.complaints,\n          surveys: patient.surveys,\n          systematicInquiry: patient.systematicInquiry,\n          vitals: patient.vitals,\n          examination: patient.examination,\n          history: patient.history,\n          allergies: patient.allergies,\n          medication: patient.medication,\n          investigation: patient.investigation,\n          diagnosis: patient.diagnosis,\n          treatment: patient.treatment,\n          billing: patient.billing,\n          vigilance: patient.vigilance,\n          attachments: patient.attachments,\n          notes: patient.notes,\n          tags: patient.tags\n        },\n        visitDate: visitDate,\n        visitDiagnosis: visitDiagnosis,\n        receiver: event.target.formGridDocGenDiagTestReceiver.value,\n        requiredTests: event.target.formGridDocGenDiagTestReceiver.value,\n        date: date,\n        letterheadImage: \"https://photos.app.goo.gl/SrVuahmr14khGBoM9\"\n      };\n      this.setState({\n        creatingDocument: true,\n        pdfData: pdfData,\n        pdfType: \"DiagTest\"\n      });\n    };\n\n    this.createInsuranceNoteInput = event => {\n      event.preventDefault();\n\n      if (event.target.formGridDocGenInsuranceNotePolicyNumber.value.trim().length === 0 || event.target.formGridDocGenInsuranceNoteOperation.value.trim().length === 0 || event.target.patientInsuranceNoteCalendarOperationDate.value.trim().length === 0 || event.target.formGridDocGenInsuranceNoteSurgeonFee.value.trim().length === 0 || event.target.formGridDocGenInsuranceNoteAssistantSurgeonFee.value.trim().length === 0 || event.target.formGridDocGenInsuranceNoteAnesthetistFee.value.trim().length === 0) {\n        this.setState({\n          userAlert: \"Blank fields detected... please check your info and try again\"\n        });\n        return;\n      }\n\n      const date = new Date().toISOString().substring(0, 10);\n      const operationDate = new Date(event.target.patientInsuranceNoteCalendarOperationDate.value).toISOString().substring(0, 10);\n      const patient = this.state.selectedPatient;\n      const policyNumber = event.target.formGridDocGenInsuranceNotePolicyNumber.value;\n      const patientInsurance = patient.insurance.filter(x => x.number === policyNumber);\n      console.log(`\n        create Insurance note user otf input here...\n        ${JSON.stringify(patientInsurance)}\n      `);\n      const pdfData = {\n        title: \"Insurance Note\",\n        patient: {\n          _id: patient._id,\n          title: patient.title,\n          name: patient.name,\n          dob: patient.dob,\n          age: patient.age,\n          gender: patient.gender,\n          address: {\n            number: patient.address.number,\n            street: patient.address.street,\n            town: patient.address.town,\n            parish: patient.address.parish,\n            postOffice: patient.address.postOffice\n          },\n          registrationDate: patient.registrationDate,\n          referralDate: patient.referralDate,\n          expirationDate: patient.expirationDate,\n          attendingPhysician: {\n            name: patient.attendingPhysician.name,\n            email: patient.attendingPhysician.email,\n            phone: patient.attendingPhysician.phone\n          },\n          referringDoctor: {\n            name: patient.referringDoctor.name,\n            email: patient.referringDoctor.email,\n            phone: patient.referringDoctor.phone\n          },\n          contact: {\n            phone: patient.contact.phone,\n            email: patient.contact.email\n          },\n          occupation: {\n            role: patient.occupation.role,\n            employer: patient.occupation.employer,\n            contact: {\n              phone: patient.occupation.contact.phone,\n              email: patient.occupation.contact.email\n            }\n          },\n          appointments: patient.appointments,\n          consultant: patient.consultant,\n          insurance: patient.insurance,\n          nextOfKin: patient.nextOfKin,\n          complaints: patient.complaints,\n          surveys: patient.surveys,\n          systematicInquiry: patient.systematicInquiry,\n          vitals: patient.vitals,\n          examination: patient.examination,\n          history: patient.history,\n          allergies: patient.allergies,\n          medication: patient.medication,\n          investigation: patient.investigation,\n          diagnosis: patient.diagnosis,\n          treatment: patient.treatment,\n          billing: patient.billing,\n          vigilance: patient.vigilance,\n          attachments: patient.attachments,\n          notes: patient.notes,\n          tags: patient.tags\n        },\n        date: date,\n        patientInsurance: JSON.stringify(patientInsurance),\n        operation: event.target.formGridDocGenInsuranceNoteOperation.value,\n        operationDate: operationDate,\n        surgeonFee: event.target.formGridDocGenInsuranceNoteSurgeonFee.value,\n        assistantSurgeonFee: event.target.formGridDocGenInsuranceNoteAssistantSurgeonFee.value,\n        anesthetistsFee: event.target.formGridDocGenInsuranceNoteAnesthetistFee.value,\n        letterheadImage: \"https://photos.app.goo.gl/SrVuahmr14khGBoM9\"\n      };\n      this.setState({\n        creatingDocument: true,\n        pdfData: pdfData,\n        pdfType: \"insuranceNote\"\n      });\n    };\n\n    this.createPrescriptionInput = event => {\n      event.preventDefault();\n\n      if (event.target.formGridDocGenPrescriptionPescription.value.trim().length === 0 || event.target.formGridDocGenPrescriptionGeneric.value.trim().length === 0 || event.target.formGridDocGenPrescriptionRepeat.value.trim().length === 0) {\n        this.setState({\n          userAlert: \"Blank fields detected... please check your info and try again\"\n        });\n        return;\n      }\n\n      let generic = null;\n\n      if (event.target.formGridDocGenPrescriptionGeneric.checked === true) {\n        generic = \"yes\";\n      }\n\n      if (event.target.formGridDocGenPrescriptionGeneric.checked !== true) {\n        generic = \"no\";\n      }\n\n      const date = new Date().toISOString().substring(0, 10);\n      const patient = this.state.selectedPatient;\n      const pdfData = {\n        title: \"Prescription\",\n        patient: {\n          _id: patient._id,\n          title: patient.title,\n          name: patient.name,\n          dob: patient.dob,\n          age: patient.age,\n          gender: patient.gender,\n          address: {\n            number: patient.number,\n            street: patient.street,\n            town: patient.town,\n            parish: patient.parish,\n            postOffice: patient.postOffice\n          },\n          registrationDate: patient.registrationDate,\n          referralDate: patient.referralDate,\n          expirationDate: patient.expirationDate,\n          attendingPhysician: {\n            name: patient.attendingPhysician.name,\n            email: patient.attendingPhysician.email,\n            phone: patient.attendingPhysician.phone\n          },\n          referringDoctor: {\n            name: patient.referringDoctor.name,\n            email: patient.referringDoctor.email,\n            phone: patient.referringDoctor.phone\n          },\n          contact: {\n            phone: patient.contact.phone,\n            email: patient.contact.email\n          }\n        },\n        date: date,\n        prescription: event.target.formGridDocGenPrescriptionPescription.value,\n        generic: generic,\n        repeat: event.target.formGridDocGenPrescriptionRepeat.value,\n        consultantName: this.context.selectedUser.name,\n        letterheadImage: \"https://photos.app.goo.gl/SrVuahmr14khGBoM9\"\n      };\n      this.setState({\n        creatingDocument: true,\n        pdfData: pdfData,\n        pdfType: \"prescription\"\n      });\n    };\n\n    this.createProcedureConsentInput = event => {\n      event.preventDefault();\n\n      if (event.target.formGridDocGenProcedureConsentGiver.value.trim().length === 0 || event.target.formGridDocGenProcedureConsentGiverRelation.value.trim().length === 0 || event.target.formGridDocGenProcedureConsentProcedure.value.trim().length === 0) {\n        this.setState({\n          userAlert: \"Blank fields detected... please check your info and try again\"\n        });\n        return;\n      }\n\n      const date = new Date().toISOString().substring(0, 10);\n      const patient = this.state.selectedPatient;\n      const pdfData = {\n        title: \"Consent for Medical/Surgical Treatment\",\n        patient: {\n          _id: patient._id,\n          title: patient.title,\n          name: patient.name,\n          dob: patient.dob,\n          age: patient.age,\n          gender: patient.gender,\n          address: {\n            number: patient.number,\n            street: patient.street,\n            town: patient.town,\n            parish: patient.parish,\n            postOffice: patient.postOffice\n          },\n          registrationDate: patient.registrationDate,\n          referralDate: patient.referralDate,\n          expirationDate: patient.expirationDate,\n          attendingPhysician: {\n            name: patient.attendingPhysician.name,\n            email: patient.attendingPhysician.email,\n            phone: patient.attendingPhysician.phone\n          },\n          referringDoctor: {\n            name: patient.referringDoctor.name,\n            email: patient.referringDoctor.email,\n            phone: patient.referringDoctor.phone\n          },\n          contact: {\n            phone: patient.contact.phone,\n            email: patient.contact.email\n          }\n        },\n        date: date,\n        consentGiver: event.target.formGridDocGenProcedureConsentGiver.value,\n        consentGiverRelation: event.target.formGridDocGenProcedureConsentGiverRelation.value,\n        consentProcedure: event.target.formGridDocGenProcedureConsentProcedure.value,\n        referral: \"test procedure consent...\",\n        letterheadImage: \"https://photos.app.goo.gl/SrVuahmr14khGBoM9\"\n      };\n      this.setState({\n        creatingDocument: true,\n        pdfData: pdfData,\n        pdfType: \"procedureConsent\"\n      });\n    };\n\n    this.createFitToFlyInput = event => {\n      event.preventDefault();\n\n      if (event.target.formGridDocGenUnfitToFlyClinicalFeatures.value.trim().length === 0 || event.target.formGridDocGenUnfitToFlyProvisonalInvestigation.value.trim().length === 0 || event.target.formGridDocGenUnfitToFlyConclusion.value.trim().length === 0) {\n        this.setState({\n          userAlert: \"Blank fields detected... please check your info and try again\"\n        });\n        return;\n      }\n\n      const date = new Date().toISOString().substring(0, 10);\n      const patient = this.state.selectedPatient;\n      const pdfData = {\n        title: \"Unfit-to-Fly Authorization\",\n        patient: {\n          _id: patient._id,\n          title: patient.title,\n          name: patient.name,\n          dob: patient.dob,\n          age: patient.age,\n          gender: patient.gender,\n          address: {\n            number: patient.number,\n            street: patient.street,\n            town: patient.town,\n            parish: patient.parish,\n            postOffice: patient.postOffice\n          },\n          registrationDate: patient.registrationDate,\n          referralDate: patient.referralDate,\n          expirationDate: patient.expirationDate,\n          attendingPhysician: {\n            name: patient.attendingPhysician.name,\n            email: patient.attendingPhysician.email,\n            phone: patient.attendingPhysician.phone\n          },\n          referringDoctor: {\n            name: patient.referringDoctor.name,\n            email: patient.referringDoctor.email,\n            phone: patient.referringDoctor.phone\n          },\n          contact: {\n            phone: patient.contact.phone,\n            email: patient.contact.email\n          }\n        },\n        date: date,\n        clinicalFeatures: event.target.formGridDocGenUnfitToFlyClinicalFeatures.value,\n        provisionalInvestigation: event.target.formGridDocGenUnfitToFlyProvisonalInvestigation.value,\n        conclusion: event.target.formGridDocGenUnfitToFlyConclusion.value,\n        input: event.target.formGridDocGenProcedureConsent.value,\n        referral: \"test fit-to-fly authorization...\",\n        letterheadImage: \"https://photos.app.goo.gl/SrVuahmr14khGBoM9\"\n      };\n      this.setState({\n        creatingDocument: true,\n        pdfData: pdfData,\n        pdfType: \"fitToFlyAuthorization\"\n      });\n    };\n\n    this.createTreatmentInstructionInput = event => {\n      event.preventDefault();\n\n      if (event.target.formGridDocGenTreatmentInstruction.value.trim().length === 0) {\n        this.setState({\n          userAlert: \"Blank fields detected... please check your info and try again\"\n        });\n        return;\n      }\n\n      const date = new Date().toISOString().substring(0, 10);\n      const patient = this.state.selectedPatient;\n      const pdfData = {\n        title: \"Treatment Instructions\",\n        patient: {\n          _id: patient._id,\n          title: patient.title,\n          name: patient.name,\n          dob: patient.dob,\n          age: patient.age,\n          gender: patient.gender,\n          address: {\n            number: patient.number,\n            street: patient.street,\n            town: patient.town,\n            parish: patient.parish,\n            postOffice: patient.postOffice\n          },\n          registrationDate: patient.registrationDate,\n          referralDate: patient.referralDate,\n          expirationDate: patient.expirationDate,\n          attendingPhysician: {\n            name: patient.attendingPhysician.name,\n            email: patient.attendingPhysician.email,\n            phone: patient.attendingPhysician.phone\n          },\n          referringDoctor: {\n            name: patient.referringDoctor.name,\n            email: patient.referringDoctor.email,\n            phone: patient.referringDoctor.phone\n          },\n          contact: {\n            phone: patient.contact.phone,\n            email: patient.contact.email\n          }\n        },\n        date: date,\n        treatmentInstruction: event.target.formGridDocGenTreatmentInstruction.value,\n        referral: \"test Treatment Instruction...\",\n        letterheadImage: \"https://photos.app.goo.gl/SrVuahmr14khGBoM9\"\n      };\n      this.setState({\n        creatingDocument: true,\n        pdfData: pdfData,\n        pdfType: \"treatmentInstruction\"\n      });\n    };\n\n    this.closePdfCreator = () => {\n      this.setState({\n        creatingDocument: false,\n        pdfData: null,\n        pdfType: null\n      });\n    };\n\n    this.showDetailHandler = patientId => {\n      this.setState({\n        visitList: []\n      });\n      this.setState(prevState => {\n        const selectedPatient = prevState.patients.find(e => e._id === patientId);\n        this.context.selectedPatient = selectedPatient;\n        this.context.selectedPatientId = selectedPatient._id;\n        return {\n          selectedPatient: selectedPatient\n        };\n      });\n    };\n\n    this.selectVisit = props => {\n      this.setState({\n        selectedVisit: props\n      });\n    };\n\n    this.closeVisit = () => {\n      this.setState({\n        visit: null,\n        selectedVisit: null\n      });\n    };\n\n    this.createVisitChecklistUpdate = props => {\n      this.setState({\n        userAlert: `creating visit: ${props} addedd...`\n      });\n      let newState = Object.assign({}, this.state);\n      newState.createVisitChecklist[props] = true;\n      this.setState(newState);\n    };\n\n    this.newVisitComplete = () => {\n      this.setState({\n        userAlert: \"New Visit creation complete...\",\n        newVisit: false,\n        createVisitChecklist: {\n          consultant: true,\n          complaint: true,\n          diagnosis: true,\n          examination: true,\n          investigation: true,\n          survey: true,\n          systematicInquiry: true,\n          treatment: true,\n          vitals: true,\n          billing: true,\n          vigilance: true\n        }\n      });\n    };\n\n    this.showSidebar = () => {\n      console.log(`\n    showing sidebar...\n    `);\n      this.setState({\n        sidebarShow: true,\n        mCol2Size: 9\n      });\n    };\n\n    this.hideSidebar = () => {\n      console.log(`\n    hiding sidebar...\n    `);\n      this.setState({\n        sidebarShow: false,\n        mCol2Size: 11\n      });\n    };\n  }\n\n  componentDidMount() {\n    if (this.context.user.name === \"Lord-of-the-Manor\") {\n      this.setState({\n        canDelete: true\n      });\n    }\n\n    if (JSON.stringify(this.context.selectedPatient) !== \"{}\") {\n      this.setState({\n        selectedPatient: this.context.selectedPatient\n      });\n    }\n\n    console.log(`this.context.selectedUser, ${JSON.stringify(this.context.selectedUser)}`);\n    this.fetchPatients();\n  }\n\n  getCreds() {\n    // this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n      query {getCreds\n        {atlas{user,pw,db},s3{bucketName,region,accessKeyId,secretAccessKey},jwt{encode},gdrive{clientId,developerKey}}}\n        `\n    };\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    }).then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n\n      return res.json();\n    }).then(resData => {\n      const creds = resData.data.getCreds;\n      this.setState({\n        creds: creds\n      }); // this.state.creds = creds;\n    }).catch(err => {\n      this.setState({\n        userAlert: err\n      });\n    });\n  }\n\n  fetchPatients() {\n    const userId = this.context.userId;\n    const token = this.context.token;\n    this.setState({\n      isLoading: true,\n      userAlert: \"Fetching Patient Master List...\"\n    });\n    const requestBody = {\n      query: `\n          query {patients(userId:\"${userId}\")\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n        `\n    };\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    }).then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n\n      return res.json();\n    }).then(resData => {\n      const patients = resData.data.patients;\n      const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n      this.setState({\n        userAlert: responseAlert\n      });\n      this.context.patients = this.state.patients;\n\n      if (this.isActive) {\n        this.setState({\n          patients: patients,\n          isLoading: false\n        });\n      }\n    }).catch(err => {\n      this.setState({\n        userAlert: err\n      });\n\n      if (this.isActive) {\n        this.setState({\n          isLoading: false\n        });\n      }\n    });\n  }\n\n  updatePatientSpecial(event) {\n    const field = event.target.value;\n    this.setState({\n      patientUpdateField: field\n    });\n  }\n\n  componentWillUnmount() {\n    this.isActive = false;\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4425\n      },\n      __self: this\n    }, this.state.showAttachment === true && React.createElement(AttachmentViewer, {\n      onCloseAttachmentView: this.closeAttachmentView,\n      attachmentFile: this.state.showThisAttachmentFile,\n      attachmentType: this.state.showThisAttachmentType,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4427\n      },\n      __self: this\n    }), this.state.creatingDocument === true && React.createElement(PdfCreator, {\n      pdfType: this.state.pdfType,\n      pdfData: this.state.pdfData,\n      onClosePdfCreator: this.closePdfCreator,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4434\n      },\n      __self: this\n    }), React.createElement(AlertBox, {\n      authUserId: this.context.userId,\n      alert: this.state.userAlert,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4440\n      },\n      __self: this\n    }), React.createElement(SidebarControl, {\n      onShowSidebar: this.showSidebar,\n      onHideSidebar: this.hideSidebar,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4444\n      },\n      __self: this\n    }), React.createElement(Accordion, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4449\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4450\n      },\n      __self: this\n    }, this.state.sidebarShow === true && React.createElement(Col, {\n      md: 3,\n      className: \"MasterCol1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4453\n      },\n      __self: this\n    }, React.createElement(SidebarPage, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4454\n      },\n      __self: this\n    })), React.createElement(Col, {\n      md: this.state.mCol2Size,\n      className: \"MasterCol2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4458\n      },\n      __self: this\n    }, React.createElement(Container, {\n      className: \"containerCombinedDetail\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4459\n      },\n      __self: this\n    }, React.createElement(Tab.Container, {\n      id: \"left-tabs-example\",\n      defaultActiveKey: \"patientDetail\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4460\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4461\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 2,\n      className: \"vertMenu\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4462\n      },\n      __self: this\n    }, React.createElement(Nav, {\n      variant: \"pills\",\n      className: \"flex-column\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4463\n      },\n      __self: this\n    }, React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4464\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"MasterList\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4465\n      },\n      __self: this\n    }, \"MASTER LIST\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4467\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"disabled\",\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4468\n      },\n      __self: this\n    }, \"Search:\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4470\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"SearchInput\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4471\n      },\n      __self: this\n    }, \"Input\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4473\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"SearchResult\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4474\n      },\n      __self: this\n    }, \"Results\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4476\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientDetail\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4477\n      },\n      __self: this\n    }, \"Selected\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4479\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientCreate\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4480\n      },\n      __self: this\n    }, \"Create New\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4482\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"disabled\",\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4483\n      },\n      __self: this\n    }, \"Edit:\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4485\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientEditDemographics\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4486\n      },\n      __self: this\n    }, \"Demographics\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4488\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientEditField\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4489\n      },\n      __self: this\n    }, \"Single Field\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4491\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"disabled\",\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4492\n      },\n      __self: this\n    }, \"Add:\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4494\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientAddVisit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4495\n      },\n      __self: this\n    }, \"Visit\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4497\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientEditConsultant\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4498\n      },\n      __self: this\n    }, \"Consultant\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4500\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientEditInsurance\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4501\n      },\n      __self: this\n    }, \"Insurance\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4503\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientEditNextOfKin\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4504\n      },\n      __self: this\n    }, \"Next of Kin\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4506\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientEditComplaint\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4507\n      },\n      __self: this\n    }, \"History\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4509\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientEditSurvey\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4510\n      },\n      __self: this\n    }, \"Survey\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4512\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientEditSystematicInquiry\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4513\n      },\n      __self: this\n    }, \"Systematic Inquiry\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4515\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientEditVitals\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4516\n      },\n      __self: this\n    }, \"Vitals\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4518\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientEditExamination\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4519\n      },\n      __self: this\n    }, \"Examination\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4521\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientEditHistory\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4522\n      },\n      __self: this\n    }, \"Past History\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4524\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientEditAllergies\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4525\n      },\n      __self: this\n    }, \"Allergies\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4527\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientEditMedication\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4528\n      },\n      __self: this\n    }, \"Medication\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4530\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientEditInvestigation\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4531\n      },\n      __self: this\n    }, \"Investigation\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4533\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientEditDiagnosis\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4534\n      },\n      __self: this\n    }, \"Diagnosis\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4536\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientEditTreatment\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4537\n      },\n      __self: this\n    }, \"Treatment\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4539\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientEditBilling\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4540\n      },\n      __self: this\n    }, \"Billing\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4542\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientEditVigilance\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4543\n      },\n      __self: this\n    }, \"Vigilance\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4545\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientEditAttachment\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4546\n      },\n      __self: this\n    }, \"Attachment\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4548\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientEditNote\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4549\n      },\n      __self: this\n    }, \"Note\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4551\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientEditTag\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4552\n      },\n      __self: this\n    }, \"Tag\")))), React.createElement(Col, {\n      md: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4558\n      },\n      __self: this\n    }, React.createElement(Tab.Content, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4559\n      },\n      __self: this\n    }, React.createElement(Tab.Pane, {\n      eventKey: \"patientDetail\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4560\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4562\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-danger\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4567\n      },\n      __self: this\n    }, \"Don't forget to select someone from the Staff page before editing Patient Consultant information !!!\"), this.state.isLoading === false && this.state.selectedPatient !== null && React.createElement(PatientDetail, {\n      authUserId: this.context.userId,\n      token: this.context.token,\n      patient: this.state.selectedPatient,\n      users: this.context.users,\n      onEdit: this.startUpdatePatientHandler,\n      canDelete: this.state.canDelete,\n      onDelete: this.modalDeleteHandler,\n      onGetVisit: this.getPatientVisit,\n      visit: this.state.visit,\n      selectedVisit: this.state.selectedVisit,\n      fetchUsers: this.fetchUsers,\n      appointmentDelete: this.deletePatientAppointmentItem,\n      consultantDelete: this.deletePatientConsultantItem,\n      insuranceDelete: this.deletePatientInsuranceItem,\n      nextOfKinDelete: this.deletePatientNextOfKinItem,\n      complaintDelete: this.deletePatientComplaintItem,\n      surveyDelete: this.deletePatientSurveyItem,\n      systematicInquiryDelete: this.deletePatientSystematicInquiryItem,\n      vitalsDelete: this.deletePatientVitalsItem,\n      examinationDelete: this.deletePatientExaminationItem,\n      historyDelete: this.deletePatientHistoryItem,\n      allergiesDelete: this.deletePatientAllergiesItem,\n      medicationDelete: this.deletePatientMedicationItem,\n      investigationDelete: this.deletePatientInvestigationItem,\n      diagnosisDelete: this.deletePatientDiagnosisItem,\n      treatmentDelete: this.deletePatientTreatmentItem,\n      billingDelete: this.deletePatientBillingItem,\n      vigilanceDelete: this.deletePatientVigilanceItem,\n      attachmentDelete: this.deletePatientAttachmentItem,\n      noteDelete: this.deletePatientNoteItem,\n      tagDelete: this.deletePatientTagItem,\n      onViewAttachment: this.onViewAttachment,\n      onCreatePdfTest: this.createPdfTest,\n      onCreateReferralInput: this.createReferralInput,\n      onCreateOperationReminderInput: this.createOperationReminderInput,\n      onCreateMiscNoteInput: this.createMiscNoteInput,\n      onCreateSickNoteInput: this.createSickNoteInput,\n      onCreateDiagTestInput: this.createDiagTestInput,\n      onCreateInsuranceNoteInput: this.createInsuranceNoteInput,\n      onCreatePrescriptionInput: this.createPrescriptionInput,\n      onCreateProcedureConsentInput: this.createProcedureConsentInput,\n      onCreateFitToFlyInput: this.createFitToFlyInput,\n      onCreateTreatmentInstructionInput: this.createTreatmentInstructionInput,\n      onGetVisitList: this.getVisitList,\n      visitList: this.state.visitList,\n      onSelectVisit: this.selectVisit,\n      onCloseVisit: this.closeVisit,\n      onSortVisitListAsc: this.getVisitListAsc,\n      onSortVisitListDesc: this.getVisitListDesc,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4573\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientCreate\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4627\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"outline-primary\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.startCreatePatientHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4628\n      },\n      __self: this\n    }, \"Create NEW Patient Profile\"), this.state.creating && React.createElement(CreatePatientForm, {\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmHandler,\n      confirmText: \"Confirm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4630\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientAddVisit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4640\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4642\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && this.state.newVisit !== true && React.createElement(Button, {\n      variant: \"outline-primary\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.startCreateVisitHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4648\n      },\n      __self: this\n    }, \"Add NEW Visit\"), this.state.selectedPatient !== null && this.state.newVisit === true && React.createElement(Accordion, {\n      defaultActiveKey: \"0\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4652\n      },\n      __self: this\n    }, React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4653\n      },\n      __self: this\n    }, React.createElement(Card.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4654\n      },\n      __self: this\n    }, React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: \"0\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4655\n      },\n      __self: this\n    }, \"Guide:\")), React.createElement(Accordion.Collapse, {\n      eventKey: \"0\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4659\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4660\n      },\n      __self: this\n    }, React.createElement(Card.Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4661\n      },\n      __self: this\n    }, \"To create a NEW Patient Visit, fill in the forms below.\"), React.createElement(Card.Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4664\n      },\n      __self: this\n    }, \"Everytime you submit a form with new info, a new item is added to the current Patient visit.\"), React.createElement(Card.Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4667\n      },\n      __self: this\n    }, \"When you are done with a section click the GREEN Done adding Complaints, Vitals etc and continue to the next form.\"), React.createElement(Card.Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4670\n      },\n      __self: this\n    }, \"Once you have submitted all the information required scroll to the bottom and click the green button.\")))), React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4676\n      },\n      __self: this\n    }, React.createElement(Card.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4677\n      },\n      __self: this\n    }, React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: \"1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4678\n      },\n      __self: this\n    }, \"Consultant\")), React.createElement(Accordion.Collapse, {\n      eventKey: \"1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4682\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4683\n      },\n      __self: this\n    }, \"Add Consultant form:\", this.state.createVisitChecklist.consultant === true && React.createElement(Button, {\n      variant: \"warning\",\n      size: \"lg\",\n      className: \"formButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4686\n      },\n      __self: this\n    }, \"Consultant for this Visit has already been added!!\"), this.state.createVisitChecklist.consultant === false && JSON.stringify(this.context.selectedUser) === \"{}\" && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4692\n      },\n      __self: this\n    }, \"Select someone from the Staff page\"), this.state.createVisitChecklist.consultant === false && this.context.selectedUser !== null && React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4698\n      },\n      __self: this\n    }, React.createElement(Card.Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4699\n      },\n      __self: this\n    }, \"Add Consultant: \", this.context.selectedUser.name, \"  ...\"), React.createElement(Card.Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4700\n      },\n      __self: this\n    }, \" To Paitient: \", this.state.selectedPatient.name, \" ??\")), this.state.createVisitChecklist.consultant === false && this.context.selectedUser !== null && React.createElement(UpdatePatientConsultantForm, {\n      authUserId: this.context.userId,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientConsultantHandler,\n      confirmText: \"Confirm\",\n      consultant: this.context.selectedUser,\n      visit: true,\n      onCreateVisitChecklistUpdate: this.createVisitChecklistUpdate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4705\n      },\n      __self: this\n    })))), React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4719\n      },\n      __self: this\n    }, React.createElement(Card.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4720\n      },\n      __self: this\n    }, React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: \"2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4721\n      },\n      __self: this\n    }, \"Complaint\")), React.createElement(Accordion.Collapse, {\n      eventKey: \"2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4725\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4726\n      },\n      __self: this\n    }, \"Add Complaint form:\", this.state.createVisitChecklist.complaint === true && React.createElement(Button, {\n      variant: \"warning\",\n      size: \"lg\",\n      className: \"formButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4729\n      },\n      __self: this\n    }, \"Complaint for this Visit has already been added!!\"), this.state.createVisitChecklist.complaint === false && React.createElement(UpdatePatientComplaintForm, {\n      authUserId: this.context.userId,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientComplaintHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      visit: true,\n      onCreateVisitChecklistUpdate: this.createVisitChecklistUpdate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4734\n      },\n      __self: this\n    })))), React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4748\n      },\n      __self: this\n    }, React.createElement(Card.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4749\n      },\n      __self: this\n    }, React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: \"3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4750\n      },\n      __self: this\n    }, \"Vitals\")), React.createElement(Accordion.Collapse, {\n      eventKey: \"3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4754\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4755\n      },\n      __self: this\n    }, \"Add Vitals form:\", this.state.createVisitChecklist.vitals === true && React.createElement(Button, {\n      variant: \"warning\",\n      size: \"lg\",\n      className: \"formButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4758\n      },\n      __self: this\n    }, \"Vitals for this Visit have already been added!!\"), this.state.createVisitChecklist.vitals === false && React.createElement(UpdatePatientVitalsForm, {\n      authUserId: this.context.userId,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientVitalsHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      visit: true,\n      onCreateVisitChecklistUpdate: this.createVisitChecklistUpdate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4763\n      },\n      __self: this\n    })))), React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4777\n      },\n      __self: this\n    }, React.createElement(Card.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4778\n      },\n      __self: this\n    }, React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: \"4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4779\n      },\n      __self: this\n    }, \"Examination\")), React.createElement(Accordion.Collapse, {\n      eventKey: \"4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4783\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4784\n      },\n      __self: this\n    }, \"Add Examination form:\", this.state.createVisitChecklist.examination === true && React.createElement(Button, {\n      variant: \"warning\",\n      size: \"lg\",\n      className: \"formButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4787\n      },\n      __self: this\n    }, \"Examination for this Visit has already been added!!\"), this.state.createVisitChecklist.examination === false && React.createElement(UpdatePatientExaminationForm, {\n      authUserId: this.context.userId,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientExaminationHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      visit: true,\n      onCreateVisitChecklistUpdate: this.createVisitChecklistUpdate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4792\n      },\n      __self: this\n    })))), React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4806\n      },\n      __self: this\n    }, React.createElement(Card.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4807\n      },\n      __self: this\n    }, React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: \"5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4808\n      },\n      __self: this\n    }, \"Survey\")), React.createElement(Accordion.Collapse, {\n      eventKey: \"5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4812\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4813\n      },\n      __self: this\n    }, \"Add Survey form:\", this.state.createVisitChecklist.survey === true && React.createElement(Button, {\n      variant: \"warning\",\n      size: \"lg\",\n      className: \"formButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4816\n      },\n      __self: this\n    }, \"Survey for this Visit has already been added!!\"), this.state.createVisitChecklist.survey === false && React.createElement(UpdatePatientSurveyForm, {\n      authUserId: this.context.userId,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientSurveyHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      visit: true,\n      onCreateVisitChecklistUpdate: this.createVisitChecklistUpdate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4821\n      },\n      __self: this\n    })))), React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4835\n      },\n      __self: this\n    }, React.createElement(Card.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4836\n      },\n      __self: this\n    }, React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: \"22\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4837\n      },\n      __self: this\n    }, \"SystematicInquiry\")), React.createElement(Accordion.Collapse, {\n      eventKey: \"22\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4841\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4842\n      },\n      __self: this\n    }, \"Add Systematic Inquiry form:\", this.state.createVisitChecklist.systematicInquiry === true && React.createElement(Button, {\n      variant: \"warning\",\n      size: \"lg\",\n      className: \"formButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4845\n      },\n      __self: this\n    }, \"Systematic Inquiry for this Visit has already been added!!\"), this.state.createVisitChecklist.systematicInquiry === false && React.createElement(UpdatePatientSystematicInquiryForm, {\n      authUserId: this.context.userId,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientSystematicInquiryHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      visit: true,\n      onCreateVisitChecklistUpdate: this.createVisitChecklistUpdate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4850\n      },\n      __self: this\n    })))), React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4864\n      },\n      __self: this\n    }, React.createElement(Card.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4865\n      },\n      __self: this\n    }, React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: \"6\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4866\n      },\n      __self: this\n    }, \"Investigation\")), React.createElement(Accordion.Collapse, {\n      eventKey: \"6\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4870\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4871\n      },\n      __self: this\n    }, \"Add Investigation form:\", this.state.createVisitChecklist.investigation === true && React.createElement(Button, {\n      variant: \"warning\",\n      size: \"lg\",\n      className: \"formButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4874\n      },\n      __self: this\n    }, \"Investigation for this Visit has already been added!!\"), this.state.createVisitChecklist.investigation === false && React.createElement(UpdatePatientInvestigationForm, {\n      authUserId: this.context.userId,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientInvestigationHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      visit: true,\n      onCreateVisitChecklistUpdate: this.createVisitChecklistUpdate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4879\n      },\n      __self: this\n    })))), React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4893\n      },\n      __self: this\n    }, React.createElement(Card.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4894\n      },\n      __self: this\n    }, React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: \"7\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4895\n      },\n      __self: this\n    }, \"Diagnosis\")), React.createElement(Accordion.Collapse, {\n      eventKey: \"7\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4899\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4900\n      },\n      __self: this\n    }, \"Add Diagnosis form:\", this.state.createVisitChecklist.diagnosis === true && React.createElement(Button, {\n      variant: \"warning\",\n      size: \"lg\",\n      className: \"formButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4903\n      },\n      __self: this\n    }, \"Diagnosis for this Visit has already been added!!\"), this.state.createVisitChecklist.diagnosis === false && React.createElement(UpdatePatientDiagnosisForm, {\n      authUserId: this.context.userId,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientDiagnosisHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      visit: true,\n      onCreateVisitChecklistUpdate: this.createVisitChecklistUpdate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4908\n      },\n      __self: this\n    })))), React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4922\n      },\n      __self: this\n    }, React.createElement(Card.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4923\n      },\n      __self: this\n    }, React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: \"8\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4924\n      },\n      __self: this\n    }, \"Treatment\")), React.createElement(Accordion.Collapse, {\n      eventKey: \"8\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4928\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4929\n      },\n      __self: this\n    }, \"Add Treatment form:\", this.state.createVisitChecklist.treatment === true && React.createElement(Button, {\n      variant: \"warning\",\n      size: \"lg\",\n      className: \"formButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4932\n      },\n      __self: this\n    }, \"Treatment for this Visit has already been added!!\"), this.state.createVisitChecklist.treatment === false && React.createElement(UpdatePatientTreatmentForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientTreatmentHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      visit: true,\n      onCreateVisitChecklistUpdate: this.createVisitChecklistUpdate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4937\n      },\n      __self: this\n    })))), React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4952\n      },\n      __self: this\n    }, React.createElement(Card.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4953\n      },\n      __self: this\n    }, React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: \"9\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4954\n      },\n      __self: this\n    }, \"Billing\")), React.createElement(Accordion.Collapse, {\n      eventKey: \"9\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4958\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4959\n      },\n      __self: this\n    }, \"Add Billing form:\", this.state.createVisitChecklist.billing === true && React.createElement(Button, {\n      variant: \"warning\",\n      size: \"lg\",\n      className: \"formButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4962\n      },\n      __self: this\n    }, \"Billing for this Visit has already been added!!\"), this.state.createVisitChecklist.billing === false && React.createElement(UpdatePatientBillingForm, {\n      authUserId: this.context.userId,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientBillingHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      visit: true,\n      onCreateVisitChecklistUpdate: this.createVisitChecklistUpdate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4967\n      },\n      __self: this\n    })))), React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4981\n      },\n      __self: this\n    }, React.createElement(Card.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4982\n      },\n      __self: this\n    }, React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: \"23\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4983\n      },\n      __self: this\n    }, \"Vigilance\")), React.createElement(Accordion.Collapse, {\n      eventKey: \"23\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4987\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4988\n      },\n      __self: this\n    }, \"Add Vigilance form:\", this.state.createVisitChecklist.vigilance === true && React.createElement(Button, {\n      variant: \"warning\",\n      size: \"lg\",\n      className: \"formButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4991\n      },\n      __self: this\n    }, \"Vigilance for this Visit has already been added!!\"), this.state.createVisitChecklist.vigilance === false && React.createElement(UpdatePatientVigilanceForm, {\n      authUserId: this.context.userId,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientVigilanceHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      visit: true,\n      onCreateVisitChecklistUpdate: this.createVisitChecklistUpdate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4996\n      },\n      __self: this\n    })))), React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5010\n      },\n      __self: this\n    }, React.createElement(Card.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5011\n      },\n      __self: this\n    }, React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: \"10\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5012\n      },\n      __self: this\n    }, \"Finished ?\")), React.createElement(Accordion.Collapse, {\n      eventKey: \"10\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5016\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5017\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"success\",\n      className: \"formButton\",\n      onClick: this.newVisitComplete,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5018\n      },\n      __self: this\n    }, \"Done creating Visit\")))))), React.createElement(Tab.Pane, {\n      eventKey: \"patientEditDemographics\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5028\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5030\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.startUpdatePatientHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5035\n      },\n      __self: this\n    }, \"Edit Demographics\"), this.state.updating && this.state.selectedPatient !== null && React.createElement(UpdatePatientForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmUpdateHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5039\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientEditField\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5051\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5053\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.startUpdatePatientHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5058\n      },\n      __self: this\n    }, \"Edit a Single Field\"), this.state.updating && this.state.selectedPatient !== null && React.createElement(UpdatePatientFieldForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmUpdateFieldHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5062\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientEditConsultant\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5074\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5076\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"consultant\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5081\n      },\n      __self: this\n    }, \"Add a Consultant\"), this.state.patientUpdateField === 'consultant' && this.state.selectedPatient !== null && this.context.selectedUser === null && React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5086\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5087\n      },\n      __self: this\n    }, \"Select someone from the Staff page\")), this.state.patientUpdateField === 'consultant' && this.state.selectedPatient !== null && React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5094\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5095\n      },\n      __self: this\n    }, \"Add Consultant: \", this.context.selectedUser.name, \"  ...\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5096\n      },\n      __self: this\n    }, \" To Paitient: \", this.state.selectedPatient.name, \" ??\")), this.state.patientUpdateField === 'consultant' && this.state.selectedPatient !== null && React.createElement(UpdatePatientConsultantForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientConsultantHandler,\n      confirmText: \"Confirm\",\n      consultant: this.context.selectedUser,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5101\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientEditInsurance\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5113\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5115\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"insurance\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5120\n      },\n      __self: this\n    }, \"Add Insurance\"), this.state.patientUpdateField === 'insurance' && this.state.selectedPatient !== null && React.createElement(UpdatePatientInsuranceForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientInsuranceHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5124\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientEditNextOfKin\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5136\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5138\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"nextOfKin\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5143\n      },\n      __self: this\n    }, \"Add NextOfKin\"), this.state.patientUpdateField === 'nextOfKin' && this.state.selectedPatient !== null && React.createElement(UpdatePatientNextOfKinForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientNextOfKinHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5148\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientEditComplaint\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5160\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5162\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"complaint\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5167\n      },\n      __self: this\n    }, \"Add History\"), this.state.patientUpdateField === 'complaint' && this.state.selectedPatient !== null && React.createElement(UpdatePatientComplaintForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientComplaintHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5171\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientEditSurvey\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5183\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5185\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"survey\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5190\n      },\n      __self: this\n    }, \"Add Survey\"), this.state.patientUpdateField === 'survey' && this.state.selectedPatient !== null && React.createElement(UpdatePatientSurveyForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientSurveyHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5194\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientEditSystematicInquiry\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5206\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5208\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"systematicInquiry\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5213\n      },\n      __self: this\n    }, \"Add Systematic Inquiry\"), this.state.patientUpdateField === 'systematicInquiry' && this.state.selectedPatient !== null && React.createElement(UpdatePatientSystematicInquiryForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientSystematicInquiryHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5218\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientEditVitals\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5230\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5232\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"vitals\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5237\n      },\n      __self: this\n    }, \"Add Vitals\"), this.state.patientUpdateField === 'vitals' && this.state.selectedPatient !== null && React.createElement(UpdatePatientVitalsForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientVitalsHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5241\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientEditExamination\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5253\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5255\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"examintion\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5260\n      },\n      __self: this\n    }, \"Add Examination\"), this.state.patientUpdateField === 'examintion' && this.state.selectedPatient !== null && React.createElement(UpdatePatientExaminationForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientExaminationHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5264\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientEditHistory\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5276\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5278\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"history\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5283\n      },\n      __self: this\n    }, \"Add Past History\"), this.state.patientUpdateField === 'history' && this.state.selectedPatient !== null && React.createElement(UpdatePatientHistoryForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientHistoryHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5288\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientEditAllergies\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5300\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5302\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"allergies\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5307\n      },\n      __self: this\n    }, \"Add Allergies\"), this.state.patientUpdateField === 'allergies' && this.state.selectedPatient !== null && React.createElement(UpdatePatientAllergiesForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientAllergiesHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5312\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientEditMedication\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5324\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5326\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"medication\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5331\n      },\n      __self: this\n    }, \"Add Medication\"), this.state.patientUpdateField === 'medication' && this.state.selectedPatient !== null && React.createElement(UpdatePatientMedicationForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientMedicationHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5336\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientEditInvestigation\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5348\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5350\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"investigation\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5355\n      },\n      __self: this\n    }, \"Add Investigation\"), this.state.patientUpdateField === 'investigation' && this.state.selectedPatient !== null && React.createElement(UpdatePatientInvestigationForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientInvestigationHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5360\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientEditDiagnosis\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5372\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5374\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"diagnosis\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5379\n      },\n      __self: this\n    }, \"Add Diagnosis\"), this.state.patientUpdateField === 'diagnosis' && this.state.selectedPatient !== null && React.createElement(UpdatePatientDiagnosisForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientDiagnosisHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5384\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientEditTreatment\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5396\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5398\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"treatment\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5403\n      },\n      __self: this\n    }, \"Add Treatment\"), this.state.patientUpdateField === 'treatment' && this.state.selectedPatient !== null && React.createElement(UpdatePatientTreatmentForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientTreatmentHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5408\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientEditBilling\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5420\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5422\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"billing\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5427\n      },\n      __self: this\n    }, \"Add Billing\"), this.state.patientUpdateField === 'billing' && this.state.selectedPatient !== null && React.createElement(UpdatePatientBillingForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientBillingHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5432\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientEditVigilance\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5444\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5446\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"vigilance\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5451\n      },\n      __self: this\n    }, \"Add Vigilance\"), this.state.patientUpdateField === 'vigilance' && this.state.selectedPatient !== null && React.createElement(UpdatePatientVigilanceForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientVigilanceHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5456\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientEditAttachment\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5468\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5470\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"attachment\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5475\n      },\n      __self: this\n    }, \"Add Attachment\"), this.state.patientUpdateField === 'attachment' && this.state.selectedPatient !== null && React.createElement(UpdatePatientAttachmentForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientAttachmentHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5480\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientEditNote\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5492\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5494\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"notes\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5499\n      },\n      __self: this\n    }, \"Add Note\"), this.state.patientUpdateField === 'notes' && this.state.selectedPatient !== null && React.createElement(UpdatePatientNoteForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientNoteHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5504\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientEditTag\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5516\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5518\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"tags\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5523\n      },\n      __self: this\n    }, \"Add Tag\"), this.state.patientUpdateField === 'tags' && this.state.selectedPatient !== null && React.createElement(UpdatePatientTagForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientTagHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5528\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"MasterList\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5540\n      },\n      __self: this\n    }, React.createElement(Container, {\n      className: \"containerUserMasterList\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5541\n      },\n      __self: this\n    }, React.createElement(Row, {\n      className: \"searchListRow\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5542\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"primary\",\n      size: \"sm\",\n      onClick: this.fetchPatientsAsc,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5543\n      },\n      __self: this\n    }, \"Sort Asc\"), React.createElement(Button, {\n      variant: \"info\",\n      size: \"sm\",\n      onClick: this.fetchPatientsDesc,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5546\n      },\n      __self: this\n    }, \"Sort Desc\"), this.state.isLoading ? React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5550\n      },\n      __self: this\n    }) : React.createElement(PatientList, {\n      patients: this.state.patients,\n      authUserId: this.context.userId,\n      onViewDetail: this.showDetailHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5552\n      },\n      __self: this\n    })))), React.createElement(Tab.Pane, {\n      eventKey: \"SearchInput\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5562\n      },\n      __self: this\n    }, React.createElement(Container, {\n      className: \"containerSearchUserInput\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5563\n      },\n      __self: this\n    }, this.context.token && React.createElement(Row, {\n      className: \"searchUserRowAdd\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5565\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"primary\",\n      onClick: this.startSearchPatientHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5566\n      },\n      __self: this\n    }, \"Search\")), React.createElement(Row, {\n      className: \"searchUserRowForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5570\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 10,\n      className: \"searchUserColForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5571\n      },\n      __self: this\n    }, React.createElement(Tabs, {\n      defaultActiveKey: \"Field\",\n      id: \"uncontrolled-tab-example\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5572\n      },\n      __self: this\n    }, React.createElement(Tab, {\n      eventKey: \"Search\",\n      title: \"Search:\",\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5573\n      },\n      __self: this\n    }), React.createElement(Tab, {\n      eventKey: \"Field\",\n      title: \"Search by Field:\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5575\n      },\n      __self: this\n    }, this.state.searching !== true && React.createElement(Button, {\n      variant: \"outline-warning\",\n      className: \"confirmEditButton\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5577\n      },\n      __self: this\n    }, \"Click the 'Search' Button start\"), this.state.searching === true && React.createElement(SearchPatientForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmSearchHandler,\n      confirmText: \"Search\",\n      patient: this.context.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5582\n      },\n      __self: this\n    })), React.createElement(Tab, {\n      eventKey: \"Id\",\n      title: \"Search by ID:\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5593\n      },\n      __self: this\n    }, this.state.searching !== true && React.createElement(Button, {\n      variant: \"outline-warning\",\n      className: \"confirmEditButton\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5595\n      },\n      __self: this\n    }, \"Click the 'Search' Button start\"), this.state.searching === true && React.createElement(SearchPatientIdForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmSearchIdHandler,\n      confirmText: \"Search\",\n      patient: this.context.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5600\n      },\n      __self: this\n    })), React.createElement(Tab, {\n      eventKey: \"Name\",\n      title: \"Search by Name:\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5612\n      },\n      __self: this\n    }, this.state.searching !== true && React.createElement(Button, {\n      variant: \"outline-warning\",\n      className: \"confirmEditButton\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5614\n      },\n      __self: this\n    }, \"Click the 'Search' Button start\"), this.state.searching === true && React.createElement(SearchPatientNameForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmSearchNameHandler,\n      confirmText: \"Search\",\n      patient: this.context.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5619\n      },\n      __self: this\n    }))))))), React.createElement(Tab.Pane, {\n      eventKey: \"SearchResult\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5636\n      },\n      __self: this\n    }, React.createElement(Container, {\n      className: \"containerSearchUserResults\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5637\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5638\n      },\n      __self: this\n    }, React.createElement(Card, {\n      className: \"searchCard\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5639\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      className: \"searchCardBody\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5640\n      },\n      __self: this\n    }, React.createElement(Card.Title, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5641\n      },\n      __self: this\n    }, \"Your Search\"), React.createElement(Card.Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5642\n      },\n      __self: this\n    }, \"Field: \", this.state.patientSearchField), React.createElement(Card.Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5645\n      },\n      __self: this\n    }, \"Query: \", this.state.patientSearchQuery)))), React.createElement(Row, {\n      className: \"searchListRow\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5651\n      },\n      __self: this\n    }, this.state.searchPatients !== [] && React.createElement(SearchPatientList, {\n      searchPatients: this.state.searchPatients,\n      authUserId: this.context.userId,\n      onCancel: this.modalCancelHandler,\n      onViewDetail: this.showDetailHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5654\n      },\n      __self: this\n    })))))))))))));\n  }\n\n}\n\nPatientsPage.contextType = AuthContext;\nexport default PatientsPage;","map":{"version":3,"sources":["/Users/pedrojacob/Downloads/AMR/websites/office_records/ENT_EMR/frontend/src/pages/Patients.js"],"names":["React","Component","S3","Container","Row","Col","Button","Accordion","Tabs","Tab","Nav","Card","PatientList","PatientDetail","Spinner","AuthContext","SearchPatientList","SearchPatientForm","SearchPatientIdForm","SearchPatientNameForm","AlertBox","AttachmentViewer","PdfCreator","LoadingOverlay","SidebarPage","SidebarControl","CreatePatientForm","UpdatePatientForm","UpdatePatientFieldForm","UpdatePatientConsultantForm","UpdatePatientInsuranceForm","UpdatePatientNextOfKinForm","UpdatePatientComplaintForm","UpdatePatientSurveyForm","UpdatePatientSystematicInquiryForm","UpdatePatientVitalsForm","UpdatePatientExaminationForm","UpdatePatientHistoryForm","UpdatePatientAllergiesForm","UpdatePatientMedicationForm","UpdatePatientInvestigationForm","UpdatePatientDiagnosisForm","UpdatePatientTreatmentForm","UpdatePatientBillingForm","UpdatePatientVigilanceForm","UpdatePatientAttachmentForm","UpdatePatientNoteForm","UpdatePatientTagForm","PatientsPage","state","creating","updating","searching","updatingArray","deleting","patients","searchPatients","isLoading","selectedPatient","selectedUser","patientUpdateField","patientSearchField","patientSearchQuery","canDelete","visit","visitList","selectedVisit","newVisit","createVisitChecklist","consultant","complaint","diagnosis","examination","investigation","survey","systematicInquiry","treatment","vitals","billing","vigilance","userAlert","overlay","overlayStatus","showAttachment","showThisAttachmentFile","showThisAttachmentType","creatingDocument","createPdf","pdfData","pdfType","sidebarShow","mCol1Size","mCol2Size","creds","isActive","startCreatePatientHandler","setState","startCreateVisitHandler","startUpdatePatientHandler","startSearchPatientHandler","modalConfirmHandler","event","userId","context","token","title","target","formGridTitle","value","name","formGridName","dob","formGridDob","age","formGridAge","gender","formGridGender","addressNumber","formGridAddressNumber","addressStreet","formGridAddressStreet","addressTown","formGridAddressTown","addressParish","formGridAddressParish","addressPostOffice","formGridAddressPostOffice","contactPhone","formGridContactPhone","contactEmail","formGridContactEmail","registrationDate","Date","patientCalendarRegistrationDate","toISOString","slice","formGridRegistrationDateTodayCheckbox","checked","referralDate","patientCalendarReferralDate","formGridReferralDateTodayCheckbox","expirationDate","formGridExpirationDate","attendingPhysicianName","formGridAttendingPhysicianName","attendingPhysicianEmail","formGridAttendingPhysicianEmail","attendingPhysicianPhone","formGridAttendingPhysicianPhone","referringDoctorName","formGridReferringDoctorName","referringDoctorEmail","formGridReferringDoctorEmail","referringDoctorPhone","formGridReferringDoctorPhone","occupationRole","formGridOccupationRole","occupationEmployer","formGridOccupationEmployer","occupationEmployerContactPhone","formGridOccupationEmployerContactPhone","occupationEmployerContactEmail","formGridOccupationEmployerContactEmail","trim","length","requestBody","query","fetch","method","body","JSON","stringify","headers","Authorization","then","res","status","Error","json","resData","responseAlert","data","newPatient","createPatient","prevState","updatedPatients","push","selecteAppointment","catch","err","modalCancelHandler","modalConfirmUpdateHandler","selectedPatientId","_id","patientCalendarExpirationDate","formGridExpirationDateTodayCheckbox","address","number","street","town","parish","postOffice","contact","phone","email","attendingPhysician","referringDoctor","occupation","role","employer","updatedPatientId","updatePatient","updatedPatient","find","e","updatedPatientPos","indexOf","slicedArray","splice","fetchPatients","modalConfirmUpdateFieldHandler","field","formGridQuery","formGridFieldSelect","formGridField","updatePatientField","updatePatientConsultantHandler","preventDefault","patientConsultantReference","undefined","consultantDate","patientConsultantCalendarDate","formGridConsultantDateTodayCheckbox","updatePatientConsultant","updatePatientInsuranceHandler","insuranceCompany","formGridInsuranceCompany","insuranceNumber","formGridInsuranceNumber","insuranceExpiry","patientCalendarInsuranceExpiryDate","insuranceDescription","formGridInsuranceDescription","insuranceSubscriberCompany","formGridInsuranceSubscriberCompany","insuranceSubscriberDescription","formGridInsuranceSubscriberDescription","updatePatientInsurance","updatePatientNextOfKinHandler","nextOfKinName","formGridNextOfKinName","nextOfKinPhone","formGridNextOfKinPhone","nextOfKinEmail","formGridNextOfKinEmail","updatePatientNextOfKin","updatePatientComplaintHandler","complaintTitle","formGridComplaintTitle","complaintDate","formGridComplaintDate","formGridComplaintDateTodayCheckbox","patientComplaintCalendarDate","console","log","complaintDescription","formGridComplaintDescription","complaintAnamnesis","formGridComplaintAnamnesis","complaintAttachmentFormat","formGridComplaintAttachmentFormat","complaintAttachmentPath","complaintAttachmentName","fileInput","file","_currentValue","config","bucketName","s3","dirName","region","accessKeyId","secretAccessKey","ReactS3Client","newFileName","uploadFile","error","updatePatientComplaint","updatePatientSurveyHandler","surveyDate","formGridSurveyDate","formGridSurveyDateTodayCheckbox","patientSurveyCalendarDate","surveyTitle","formGridSurveyTitle","surveyDescription","formGridSurveyDescription","surveyAttachmentFormat","formGridSurveyAttachmentFormat","surveyAttachmentPath","surveyAttachmentName","updatePatientSurvey","updatePatientSystematicInquiryHandler","systematicInquiryDate","formGridSystematicInquiryDate","formGridSystematicInquiryDateTodayCheckbox","patientSystematicInquiryCalendarDate","systematicInquiryTitle","formGridSystematicInquiryTitle","systematicInquiryDescription","formGridSystematicInquiryDescription","systematicInquiryAttachmentFormat","formGridSystematicInquiryAttachmentFormat","systematicInquiryAttachmentPath","systematicInquiryAttachmentName","updatePatientSystematicInquiry","updatePatientVitalsHandler","vitalsDate","formGridVitalsDate","formGridVitalsDateTodayCheckbox","patientVitalsCalendarDate","vitalsPr","formGridVitalsPr","vitalsBp1","formGridVitalsBp1","vitalsBp2","formGridVitalsBp2","vitalsRr","formGridVitalsRr","vitalsTemp","formGridVitalsTemp","vitalsPs02","formGridVitalsPs02","vitalsHeight","formGridVitalsHeight","vitalsWeight","formGridVitalsWeight","vitalsBmi","formGridVitalsBmi","vitalsUrineType","formGridVitalsUrineType","vitalsUrineValue","formGridVitalsUrineValue","updatePatientVitals","updatePatientExaminationHandler","examinationDate","formGridExaminationDate","formGridExaminationDateTodayCheckbox","patientExaminationCalendarDate","examinationGeneral","formGridExaminationGeneral","examinationArea","formGridExaminationAreaSelect","formGridExaminationArea","examinationType","formGridExaminationType","examinationMeasure","formGridExaminationMeasure","examinationValue","formGridExaminationValue","examinationDescription","formGridExaminationDescription","examinationFollowUp","formGridExaminationFollowUp","examinationAttachmentFormat","formGridExaminationAttachmentFormat","examinationAttachmentPath","examinationAttachmentName","updatePatientExamination","updatePatientHistoryHandler","historyType","formGridHistoryType","historyDate","formGridHistoryDate","formGridHistoryDateTodayCheckbox","patientHistoryCalendarDate","historyTitle","formGridHistoryTitle","historyDescription","formGridHistoryDescription","historyAttachmentFormat","formGridHistoryAttachmentFormat","historyAttachmentPath","historyAttachmentName","updatePatientHistory","updatePatientAllergiesHandler","allergiesTitle","formGridAllergiesTitle","allergiesType","formGridAllergiesTypeSelect","formGridAllergiesType","allergiesDescription","formGridAllergiesDescription","allergiesAttachmentFormat","formGridAllergiesAttachmentFormat","allergiesAttachmentPath","allergiesAttachmentName","updatePatientAllergies","updatePatientMedicationHandler","medicationTitle","formGridMedicationTitle","medicationType","formGridMedicationType","medicationDescription","formGridMedicationDescription","medicationAttachmentFormat","formGridMedicationAttachmentFormat","medicationAttachmentPath","medicationAttachmentName","updatePatientMedication","updatePatientInvestigationHandler","investigationDate","formGridInvestigationDate","formGridInvestigationDateTodayCheckbox","patientInvestigationCalendarDate","investigationTitle","formGridInvestigationTitle","investigationType","formGridInvestigationTypeSelect","formGridInvestigationType","investigationDescription","formGridInvestigationDescription","investigationAttachmentFormat","formGridInvestigationAttachmentFormat","investigationAttachmentPath","investigationAttachmentName","updatePatientInvestigation","updatePatientDiagnosisHandler","diagnosisDate","formGridDiagnosisDate","formGridDiagnosisDateTodayCheckbox","patientDiagnosisCalendarDate","diagnosisTitle","formGridDiagnosisTitle","diagnosisType","formGridDiagnosisType","diagnosisDescription","formGridDiagnosisDescription","diagnosisAttachmentFormat","formGridDiagnosisAttachmentFormat","diagnosisAttachmentPath","diagnosisAttachmentName","updatePatientDiagnosis","updatePatientTreatmentHandler","treatmentDate","formGridTreatmentDate","formGridTreatmentDateTodayCheckbox","patientTreatmentCalendarDate","treatmentTitle","formGridTreatmentTitle","treatmentDescription","formGridTreatmentDescription","treatmentDose","formGridTreatmentDose","treatmentFrequency","formGridTreatmentFrequency","treatmentType","formGridTreatmentType","formGridTreatmentTypeSelect","treatmentAttachmentFormat","formGridTreatmentAttachmentFormat","treatmentAttachmentPath","treatmentAttachmentName","updatePatientTreatment","updatePatientBillingHandler","billingDate","formGridBillingDate","formGridBillingDateTodayCheckbox","patientBillingCalendarDate","billingTitle","formGridBillingTitle","billingType","formGridBillingType","billingDescription","formGridBillingDescription","billingAmount","formGridBillingAmount","billingPaid","formGridBillingPaid","billingNotes","formGridBillingNotes","billingAttachmentFormat","formGridBillingAttachmentFormat","billingAttachmentPath","billingAttachmentName","updatePatientBilling","updatePatientVigilanceHandler","vigilanceDate","formGridVigilanceDate","formGridVigilanceDateTodayCheckbox","patientVigilanceCalendarDate","vigilanceChronicIllnessDiabetesMedication","formGridVigilanceChronicIllnessDiabetesMedication","vigilanceChronicIllnessDiabetesTesting","formGridVigilanceChronicIllnessDiabetesTesting","vigilanceChronicIllnessDiabetesComment","formGridVigilanceChronicIllnessDiabetesComment","vigilanceChronicIllnessHbpMedication","formGridVigilanceChronicIllnessHbpMedication","vigilanceChronicIllnessHbpTesting","formGridVigilanceChronicIllnessHbpTesting","vigilanceChronicIllnessHbpComment","formGridVigilanceChronicIllnessHbpComment","vigilanceChronicIllnessDyslipidemiaMedication","formGridVigilanceChronicIllnessDyslipidemiaMedication","vigilanceChronicIllnessDyslipidemiaTesting","formGridVigilanceChronicIllnessDyslipidemiaTesting","vigilanceChronicIllnessDyslipidemiaComment","formGridVigilanceChronicIllnessDyslipidemiaComment","vigilanceChronicIllnessCadMedication","formGridVigilanceChronicIllnessCadMedication","vigilanceChronicIllnessCadTesting","formGridVigilanceChronicIllnessCadTesting","vigilanceChronicIllnessCadComment","formGridVigilanceChronicIllnessCadComment","vigilanceLifestyleWeightMedication","formGridVigilanceLifestyleWeightMedication","vigilanceLifestyleWeightTesting","formGridVigilanceLifestyleWeightTesting","vigilanceLifestyleWeightComment","formGridVigilanceLifestyleWeightComment","vigilanceLifestyleDietMedication","formGridVigilanceLifestyleDietMedication","vigilanceLifestyleDietTesting","formGridVigilanceLifestyleDietTesting","vigilanceLifestyleDietComment","formGridVigilanceLifestyleDietComment","vigilanceLifestyleSmokingMedication","formGridVigilanceLifestyleSmokingMedication","vigilanceLifestyleSmokingTesting","formGridVigilanceLifestyleSmokingTesting","vigilanceLifestyleSmokingComment","formGridVigilanceLifestyleSmokingComment","vigilanceLifestyleSubstanceAbuseMedication","formGridVigilanceLifestyleSubstanceAbuseMedication","vigilanceLifestyleSubstanceAbuseTesting","formGridVigilanceLifestyleSubstanceAbuseTesting","vigilanceLifestyleSubstanceAbuseComment","formGridVigilanceLifestyleSubstanceAbuseComment","vigilanceLifestyleExerciseMedication","formGridVigilanceLifestyleExerciseMedication","vigilanceLifestyleExerciseTesting","formGridVigilanceLifestyleExerciseTesting","vigilanceLifestyleExerciseComment","formGridVigilanceLifestyleExerciseComment","vigilanceLifestyleAllergiesMedication","formGridVigilanceLifestyleAllergiesMedication","vigilanceLifestyleAllergiesTesting","formGridVigilanceLifestyleAllergiesTesting","vigilanceLifestyleAllergiesComment","formGridVigilanceLifestyleAllergiesComment","vigilanceLifestyleAsthmaMedication","formGridVigilanceLifestyleAsthmaMedication","vigilanceLifestyleAsthmaTesting","formGridVigilanceLifestyleAsthmaTesting","vigilanceLifestyleAsthmaComment","formGridVigilanceLifestyleAsthmaComment","vigilanceScreeningBreastMedication","formGridVigilanceScreeningBreastMedication","vigilanceScreeningBreastTesting","formGridVigilanceScreeningBreastTesting","vigilanceScreeningBreastComment","formGridVigilanceScreeningBreastComment","vigilanceScreeningProstateMedication","formGridVigilanceScreeningProstateMedication","vigilanceScreeningProstateTesting","formGridVigilanceScreeningProstateTesting","vigilanceScreeningProstateComment","formGridVigilanceScreeningProstateComment","vigilanceScreeningCervixMedication","formGridVigilanceScreeningCervixMedication","vigilanceScreeningCervixTesting","formGridVigilanceScreeningCervixTesting","vigilanceScreeningCervixComment","formGridVigilanceScreeningCervixComment","vigilanceScreeningColonMedication","formGridVigilanceScreeningColonMedication","vigilanceScreeningColonTesting","formGridVigilanceScreeningColonTesting","vigilanceScreeningColonComment","formGridVigilanceScreeningColonComment","vigilanceScreeningDentalMedication","formGridVigilanceScreeningDentalMedication","vigilanceScreeningDentalTesting","formGridVigilanceScreeningDentalTesting","vigilanceScreeningDentalComment","formGridVigilanceScreeningDentalComment","vigilanceVaccinesInfluenzaMedication","formGridVigilanceVaccinesInfluenzaMedication","vigilanceVaccinesInfluenzaTesting","formGridVigilanceVaccinesInfluenzaTesting","vigilanceVaccinesInfluenzaComment","formGridVigilanceVaccinesInfluenzaComment","vigilanceVaccinesVaricellaMedication","formGridVigilanceVaccinesVaricellaMedication","vigilanceVaccinesVaricellaTesting","formGridVigilanceVaccinesVaricellaTesting","vigilanceVaccinesVaricellaComment","formGridVigilanceVaccinesVaricellaComment","vigilanceVaccinesHpvMedication","formGridVigilanceVaccinesHpvMedication","vigilanceVaccinesHpvTesting","formGridVigilanceVaccinesHpvTesting","vigilanceVaccinesHpvComment","formGridVigilanceVaccinesHpvComment","vigilanceVaccinesMmrMedication","formGridVigilanceVaccinesMmrMedication","vigilanceVaccinesMmrTesting","formGridVigilanceVaccinesMmrTesting","vigilanceVaccinesMmrComment","formGridVigilanceVaccinesMmrComment","vigilanceVaccinesTetanusMedication","formGridVigilanceVaccinesTetanusMedication","vigilanceVaccinesTetanusTesting","formGridVigilanceVaccinesTetanusTesting","vigilanceVaccinesTetanusComment","formGridVigilanceVaccinesTetanusComment","vigilanceVaccinesPneumovaxMedication","formGridVigilanceVaccinesPneumovaxMedication","vigilanceVaccinesPneumovaxTesting","formGridVigilanceVaccinesPneumovaxTesting","vigilanceVaccinesPneumovaxComment","formGridVigilanceVaccinesPneumovaxComment","vigilanceVaccinesOtherName","formGridVigilanceVaccinesOtherName","vigilanceVaccinesOtherMedication","formGridVigilanceVaccinesOtherMedication","vigilanceVaccinesOtherTesting","formGridVigilanceVaccinesOtherTesting","vigilanceVaccinesOtherComment","formGridVigilanceVaccinesOtherComment","updatePatientVigilance","updatePatientAttachmentHandler","attachmentFormat","formGridPatientAttachmentFormat","attachmentPath","attachmentName","updatePatientAttachment","updatePatientNoteHandler","note","formGridNote","updatePatientNotes","updatePatientTagHandler","tag","formGridTag","updatePatientTags","modalConfirmSearchHandler","formBasicQuery","formBasicFieldSelect","formBasicField","getPatientField","modalConfirmSearchIdHandler","patientId","formBasicId","getPatientId","modalConfirmSearchNameHandler","regex","RegExp","formBasicName","result","filter","patient","match","getPatientVisit","visitDate","formBasicVisitDate","substring","visitSurveys","surveys","x","date","substr","visitConsultants","visitComplaints","complaints","visitSystematicInquiry","visitVitals","visitExaminations","visitHistory","history","visitInvestigations","visitDiagnosis","visitTreatments","visitBilling","visitVigilance","patientName","getVisitList","selectedPatientAppointmentDateArray","selectedPatientAppointmentVisitArray","selectedPatientAppointments","appointments","map","appointmentDate","thisGetVisit","argsDate","argsPatientName","getVisitListAsc","list","sort","a","b","getVisitListDesc","fetchPatientsAsc","patientsNameAsc","fetchPatientsDesc","patientsNameDesc","modalDeleteHandler","user","deletedPatient","deletePatient","deletedPatientId","deletedPatientPos","deletePatientInsuranceItem","props","company","deletePatientInsurance","deletePatientAppointmentItem","deletePatientAppointment","deletePatientConsultantItem","reference","id","deletePatientConsultant","deletePatientNextOfKinItem","deletePatientNextOfKin","deletePatientComplaintItem","deletePatientComplaint","deletePatientSurveyItem","deletePatientSurvey","deletePatientSystematicInquiryItem","deletePatientSystematicInquiry","deletePatientVitalsItem","deletePatientVitals","deletePatientExaminationItem","type","deletePatientExamination","deletePatientHistoryItem","deletePatientHistory","deletePatientAllergiesItem","deletePatientAllergies","deletePatientMedicationItem","deletePatientMedication","deletePatientInvestigationItem","deletePatientInvestigation","deletePatientDiagnosisItem","deletePatientDiagnosis","deletePatientTreatmentItem","deletePatientTreatment","deletePatientBillingItem","deletePatientBilling","deletePatientVigilanceItem","deletePatientVigilance","deletePatientAttachmentItem","deletePatientAttachment","deletePatientNoteItem","deletePatientNote","deletePatientTagItem","deletePatientTag","onViewAttachment","attachment","path","format","closeAttachmentView","createPdfTest","formGridDocGenUserInput","formGridDocGenVisitDate","test","insurance","nextOfKin","allergies","medication","attachments","notes","tags","createReferralInput","patientReferralCalendarVisitDate","formGridDocGenReferralFindings","formGridDocGenReferralRecommendation","visitTreatment","findings","recommendation","referral","letterheadImage","createOperationReminderInput","formGridDocGenOperationReminderName","patientOperationReminderCalendarOperationDate","formGridDocGenOperationReminderTime","formGridDocGenOperationReminderHospitalName","formGridDocGenOperationReminderHopsitalAddress","patientOperationReminderCalendarFastDate","formGridDocGenOperationReminderFastTime","formGridDocGenOperationReminderEstimateCost","fastDate","today","time","hospitalName","hospitalAddress","fastTime","estimateCost","createMiscNoteInput","formGridDocGenMiscNote1","formGridDocGenMiscNote2","note1","note2","createSickNoteInput","formGridDocGenSickNoteAddress","formGridDocGenSickNoteDuration","patientSickNoteCalendarStartDate","startDate","receiverAddress","duration","createDiagTestInput","patientDiagTestCalendarVisitDate","formGridDocGenDiagTestReceiver","formGridDocGenDiagTestRequired","receiver","requiredTests","createInsuranceNoteInput","formGridDocGenInsuranceNotePolicyNumber","formGridDocGenInsuranceNoteOperation","patientInsuranceNoteCalendarOperationDate","formGridDocGenInsuranceNoteSurgeonFee","formGridDocGenInsuranceNoteAssistantSurgeonFee","formGridDocGenInsuranceNoteAnesthetistFee","operationDate","policyNumber","patientInsurance","operation","surgeonFee","assistantSurgeonFee","anesthetistsFee","createPrescriptionInput","formGridDocGenPrescriptionPescription","formGridDocGenPrescriptionGeneric","formGridDocGenPrescriptionRepeat","generic","prescription","repeat","consultantName","createProcedureConsentInput","formGridDocGenProcedureConsentGiver","formGridDocGenProcedureConsentGiverRelation","formGridDocGenProcedureConsentProcedure","consentGiver","consentGiverRelation","consentProcedure","createFitToFlyInput","formGridDocGenUnfitToFlyClinicalFeatures","formGridDocGenUnfitToFlyProvisonalInvestigation","formGridDocGenUnfitToFlyConclusion","clinicalFeatures","provisionalInvestigation","conclusion","input","formGridDocGenProcedureConsent","createTreatmentInstructionInput","formGridDocGenTreatmentInstruction","treatmentInstruction","closePdfCreator","showDetailHandler","selectVisit","closeVisit","createVisitChecklistUpdate","newState","Object","assign","newVisitComplete","showSidebar","hideSidebar","componentDidMount","getCreds","updatePatientSpecial","componentWillUnmount","render","users","fetchUsers","bind","contextType"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport S3 from 'react-aws-s3';\n\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport Accordion from 'react-bootstrap/Accordion';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\nimport Nav from 'react-bootstrap/Nav';\nimport Card from 'react-bootstrap/Card';\n\nimport PatientList from '../components/Patients/PatientList/PatientList';\nimport PatientDetail from '../components/Patients/PatientDetail';\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\nimport SearchPatientList from '../components/Patients/PatientList/SearchPatientList';\nimport SearchPatientForm from '../components/Forms/SearchPatientForm';\nimport SearchPatientIdForm from '../components/Forms/SearchPatientIdForm';\nimport SearchPatientNameForm from '../components/Forms/SearchPatientNameForm';\n\nimport AlertBox from '../components/AlertBox';\nimport AttachmentViewer from '../components/AttachmentViewer';\nimport PdfCreator from '../components/PdfCreator';\nimport LoadingOverlay from '../components/LoadingOverlay';\nimport SidebarPage from './Sidebar';\nimport SidebarControl from '../components/SidebarControl';\n\nimport CreatePatientForm from '../components/Forms/CreatePatientForm';\nimport UpdatePatientForm from '../components/Forms/UpdatePatientForm';\nimport UpdatePatientFieldForm from '../components/Forms/UpdatePatientFieldForm';\nimport UpdatePatientConsultantForm from '../components/Forms/UpdatePatientConsultantForm';\nimport UpdatePatientInsuranceForm from '../components/Forms/UpdatePatientInsuranceForm';\nimport UpdatePatientNextOfKinForm from '../components/Forms/UpdatePatientNextOfKinForm';\nimport UpdatePatientComplaintForm from '../components/Forms/UpdatePatientComplaintForm';\nimport UpdatePatientSurveyForm from '../components/Forms/UpdatePatientSurveyForm';\nimport UpdatePatientSystematicInquiryForm from '../components/Forms/UpdatePatientSystematicInquiryForm';\nimport UpdatePatientVitalsForm from '../components/Forms/UpdatePatientVitalsForm';\nimport UpdatePatientExaminationForm from '../components/Forms/UpdatePatientExaminationForm';\nimport UpdatePatientHistoryForm from '../components/Forms/UpdatePatientHistoryForm';\nimport UpdatePatientAllergiesForm from '../components/Forms/UpdatePatientAllergiesForm';\nimport UpdatePatientMedicationForm from '../components/Forms/UpdatePatientMedicationForm';\nimport UpdatePatientInvestigationForm from '../components/Forms/UpdatePatientInvestigationForm';\nimport UpdatePatientDiagnosisForm from '../components/Forms/UpdatePatientDiagnosisForm';\nimport UpdatePatientTreatmentForm from '../components/Forms/UpdatePatientTreatmentForm';\nimport UpdatePatientBillingForm from '../components/Forms/UpdatePatientBillingForm';\nimport UpdatePatientVigilanceForm from '../components/Forms/UpdatePatientVigilanceForm';\nimport UpdatePatientAttachmentForm from '../components/Forms/UpdatePatientAttachmentForm';\nimport UpdatePatientNoteForm from '../components/Forms/UpdatePatientNoteForm';\nimport UpdatePatientTagForm from '../components/Forms/UpdatePatientTagForm';\n\nimport './Users.css';\n\nclass PatientsPage extends Component {\n  state = {\n    creating: false,\n    updating: false,\n    searching: false,\n    updatingArray: false,\n    deleting: false,\n    patients: [],\n    searchPatients: [],\n    isLoading: false,\n    selectedPatient: null,\n    selectedUser: null,\n    patientUpdateField: null,\n    patientSearchField: null,\n    patientSearchQuery: null,\n    canDelete: null,\n    visit: null,\n    visitList: [],\n    selectedVisit: null,\n    newVisit: false,\n    createVisitChecklist: {\n      consultant: false,\n      complaint: false,\n      diagnosis: false,\n      examination: false,\n      investigation: false,\n      survey: false,\n      systematicInquiry: false,\n      treatment: false,\n      vitals: false,\n      billing: false,\n      vigilance: false\n    },\n    newVisit: false,\n    userAlert: null,\n    overlay: false,\n    overlayStatus: \"test\",\n    showAttachment: false,\n    showThisAttachmentFile: null,\n    showThisAttachmentType: null,\n    creatingDocument: false,\n    createPdf: false,\n    pdfData: null,\n    pdfType: null,\n    sidebarShow: true,\n    mCol1Size: 3,\n    mCol2Size: 9,\n    creds: null\n  };\n  isActive = true;\n\n  static contextType = AuthContext;\n\n  componentDidMount() {\n    if (this.context.user.name === \"Lord-of-the-Manor\"){\n      this.setState({canDelete: true})\n    }\n\n    if (JSON.stringify(this.context.selectedPatient) !== \"{}\") {\n      this.setState({ selectedPatient: this.context.selectedPatient })\n    }\n    console.log(`this.context.selectedUser, ${JSON.stringify(this.context.selectedUser)}`);\n\n    this.fetchPatients();\n  }\n\n\n  startCreatePatientHandler = () => {\n    this.setState({ creating: true });\n  };\n  startCreateVisitHandler = () => {\n    this.setState({ newVisit: true });\n  };\n  startUpdatePatientHandler = () => {\n    this.setState({ updating: true, updatingArray: true });\n  };\n  startSearchPatientHandler = () => {\n    this.setState({ searching: true });\n  };\n\n  modalConfirmHandler = (event) => {\n\n    this.setState({ creating: false, userAlert: \"Creating New Patient ...\" });\n    const userId = this.context.userId;\n    const token = this.context.token;\n    let title = event.target.formGridTitle.value;\n    let name = event.target.formGridName.value;\n    let dob = event.target.formGridDob.value;\n    let age = event.target.formGridAge.value;\n    let gender = event.target.formGridGender.value;\n    let addressNumber = event.target.formGridAddressNumber.value;\n    let addressStreet = event.target.formGridAddressStreet.value;\n    let addressTown = event.target.formGridAddressTown.value;\n    let addressParish = event.target.formGridAddressParish.value;\n    let addressPostOffice = event.target.formGridAddressPostOffice.value;\n    let contactPhone = event.target.formGridContactPhone.value;\n    let contactEmail = event.target.formGridContactEmail.value;\n\n    let registrationDate = new Date(event.target.patientCalendarRegistrationDate.value).toISOString().slice(0,10);\n    if (event.target.formGridRegistrationDateTodayCheckbox.checked === true) {\n      registrationDate = new Date().toISOString().slice(0,10);\n    }\n\n\n    let referralDate = new Date(event.target.patientCalendarReferralDate.value).toISOString().slice(0,10);\n    if (event.target.formGridReferralDateTodayCheckbox.checked === true) {\n      referralDate = new Date().toISOString().slice(0,10);\n    }\n\n    let expirationDate = event.target.formGridExpirationDate.value;\n    let attendingPhysicianName = event.target.formGridAttendingPhysicianName.value;\n    let attendingPhysicianEmail = event.target.formGridAttendingPhysicianEmail.value;\n    let attendingPhysicianPhone = event.target.formGridAttendingPhysicianPhone.value;\n    let referringDoctorName = event.target.formGridReferringDoctorName.value;\n    let referringDoctorEmail = event.target.formGridReferringDoctorEmail.value;\n    let referringDoctorPhone = event.target.formGridReferringDoctorPhone.value;\n    let occupationRole = event.target.formGridOccupationRole.value;\n    let occupationEmployer = event.target.formGridOccupationEmployer.value;\n    let occupationEmployerContactPhone = event.target.formGridOccupationEmployerContactPhone.value;\n    let occupationEmployerContactEmail = event.target.formGridOccupationEmployerContactEmail.value;\n\n    if (\n      name.trim().length === 0 ||\n      age.trim().length === 0 ||\n      addressNumber.trim().length === 0 ||\n      addressStreet.trim().length === 0 ||\n      contactPhone.trim().length === 0 ||\n      registrationDate.trim().length === 0\n    ) {\n      this.setState({userAlert: \"patient must have at least: Name, Age, Contact Number, Street Name & Number and Registration Date!!!...Please try again...\"});\n      return;\n    }\n\n    const requestBody = {\n      query: `\n        mutation {createPatient(userId:\"${userId}\", patientInput:{title:\"${title}\",name:\"${name}\",dob:\"${dob}\",age:${age},gender:\"${gender}\",addressNumber:${addressNumber},addressStreet:\"${addressStreet}\",addressTown:\"${addressTown}\",addressParish:\"${addressParish}\",addressPostOffice:\"${addressPostOffice}\",contactPhone:\"${contactPhone}\",contactEmail:\"${contactEmail}\",registrationDate:\"${registrationDate}\",referralDate:\"${referralDate}\",expirationDate:\"${expirationDate}\",referringDoctorName:\"${referringDoctorName}\",referringDoctorEmail:\"${referringDoctorEmail}\",referringDoctorPhone:\"${referringDoctorPhone}\",attendingPhysicianName:\"${attendingPhysicianName}\",attendingPhysicianEmail:\"${attendingPhysicianEmail}\",attendingPhysicianPhone:\"${attendingPhysicianPhone}\",occupationRole:\"${occupationRole}\",occupationEmployer:\"${occupationEmployer}\",occupationEmployerContactPhone:\"${occupationEmployerContactPhone}\",occupationEmployerContactEmail:\"${occupationEmployerContactEmail}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n        `};\n\n    // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const responseAlert = JSON.stringify(resData.data).slice(2,15);\n        this.setState({userAlert: responseAlert});\n        const newPatient = resData.data.createPatient;\n        this.setState(prevState => {\n          const updatedPatients = [...prevState.patients];\n          updatedPatients.push(newPatient);\n          return { patients: updatedPatients };\n        });\n        this.setState({selecteAppointment: resData.data.createPatient})\n      })\n      .catch(err => {\n        this.setState({userAlert: err});\n      });\n  };\n\n  modalCancelHandler = () => {\n    this.setState({ creating: false, updating: false });\n  };\n\n\n  modalConfirmUpdateHandler = (event) => {\n\n    const userId = this.context.userId;\n    const selectedPatientId = this.context.selectedPatient._id;\n    const token = this.context.token;\n\n    this.setState({ updating: false , userAlert: \"Updating selected Patient...\"});\n\n    let title = event.target.formGridTitle.value;\n    let name = event.target.formGridName.value;\n    let dob = event.target.formGridDob.value;\n    let age = event.target.formGridAge.value;\n    let gender = event.target.formGridGender.value;\n    let addressNumber = event.target.formGridAddressNumber.value;\n    let addressStreet = event.target.formGridAddressStreet.value;\n    let addressTown = event.target.formGridAddressTown.value;\n    let addressParish = event.target.formGridAddressParish.value;\n    let addressPostOffice = event.target.formGridAddressPostOffice.value;\n    let contactPhone = event.target.formGridContactPhone.value;\n    let contactEmail = event.target.formGridContactEmail.value;\n\n    let registrationDate = new Date(event.target.patientCalendarRegistrationDate.value).toISOString().slice(0,10);\n    if (event.target.formGridRegistrationDateTodayCheckbox.checked === true) {\n      registrationDate = new Date().toISOString().slice(0,10);\n    }\n\n    let referralDate = new Date(event.target.patientCalendarReferralDate.value).toISOString().slice(0,10);\n    if (event.target.formGridReferralDateTodayCheckbox.checked === true) {\n      referralDate = new Date().toISOString().slice(0,10);\n    }\n\n    let expirationDate = new Date(event.target.patientCalendarExpirationDate.value).toISOString().slice(0,10);\n    if (event.target.formGridExpirationDateTodayCheckbox.checked === true) {\n      expirationDate = new Date().toISOString().slice(0,10);\n    }\n\n    let attendingPhysicianName = event.target.formGridAttendingPhysicianName.value;\n    let attendingPhysicianEmail = event.target.formGridAttendingPhysicianEmail.value;\n    let attendingPhysicianPhone = event.target.formGridAttendingPhysicianPhone.value;\n    let referringDoctorName = event.target.formGridReferringDoctorName.value;\n    let referringDoctorEmail = event.target.formGridReferringDoctorEmail.value;\n    let referringDoctorPhone = event.target.formGridReferringDoctorPhone.value;\n    let occupationRole = event.target.formGridOccupationRole.value;\n    let occupationEmployer = event.target.formGridOccupationEmployer.value;\n    let occupationEmployerContactPhone = event.target.formGridOccupationEmployerContactPhone.value;\n    let occupationEmployerContactEmail = event.target.formGridOccupationEmployerContactEmail.value;\n\n    if (title.trim().length === 0 ) {\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      title = this.context.selectedPatient.title;\n    }\n    if (name.trim().length === 0 ) {\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      name = this.context.selectedPatient.name;\n    }\n    if (dob.trim().length === 0 ) {\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      dob = this.context.selectedPatient.dob;\n    }\n    if (gender.trim().length === 0 ) {\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      gender = this.context.selectedPatient.gender;\n    }\n    if (age.trim().length === 0 ) {\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      age = this.context.selectedPatient.age;\n    }\n    if (addressNumber.trim().length === 0 ) {\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      addressNumber = this.context.selectedPatient.address.number;\n    }\n    if (addressStreet.trim().length === 0 ) {\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      addressStreet = this.context.selectedPatient.address.street;\n    }\n    if (addressTown.trim().length === 0 ) {\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      addressTown = this.context.selectedPatient.address.town;\n    }\n    if (addressParish.trim().length === 0 ) {\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      addressParish = this.context.selectedPatient.address.parish;\n    }\n    if (addressPostOffice.trim().length === 0 ) {\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      addressPostOffice = this.context.selectedPatient.address.postOffice;\n    }\n    if (contactPhone.trim().length === 0 ) {\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      contactPhone = this.context.selectedPatient.contact.phone;\n    }\n    if (contactEmail.trim().length === 0 ) {\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      contactEmail = this.context.selectedPatient.contact.email;\n    }\n    if (registrationDate.trim().length === 0 ) {\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      registrationDate = this.context.selectedPatient.registrationDate;\n    }\n    if (attendingPhysicianName.trim().length === 0 ) {\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      attendingPhysicianName = this.context.selectedPatient.attendingPhysician.name;\n    }\n    if (attendingPhysicianEmail.trim().length === 0 ) {\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      attendingPhysicianEmail = this.context.selectedPatient.attendingPhysician.email;\n    }\n    if (attendingPhysicianPhone.trim().length === 0 ) {\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      attendingPhysicianPhone = this.context.selectedPatient.attendingPhysician.phone;\n    }\n    if (referringDoctorName.trim().length === 0 ) {\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      referringDoctorName = this.context.selectedPatient.referringDoctor.name;\n    }\n    if (referringDoctorEmail.trim().length === 0 ) {\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      referringDoctorEmail = this.context.selectedPatient.referringDoctor.email;\n    }\n    if (referringDoctorPhone.trim().length === 0 ) {\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      referringDoctorPhone = this.context.selectedPatient.referringDoctor.phone;\n    }\n    if (occupationRole.trim().length === 0 ) {\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      occupationRole = this.context.selectedPatient.occupation.role;\n    }\n    if (occupationEmployer.trim().length === 0 ) {\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      occupationEmployer = this.context.selectedPatient.occupation.employer;\n    }\n    if (occupationEmployerContactEmail.trim().length === 0 ) {\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      occupationEmployerContactEmail = this.context.selectedPatient.occupation.contact.email;\n    }\n    if (occupationEmployerContactPhone.trim().length === 0 ) {\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      occupationEmployerContactPhone = this.context.selectedPatient.occupation.contact.phone;\n    }\n\n    const requestBody = {\n      query: `\n          mutation {updatePatient(userId:\"${userId}\",patientId:\"${selectedPatientId}\", patientInput:{title:\"${title}\",name:\"${name}\",dob:\"${dob}\",age:${age},gender:\"${gender}\",addressNumber:${addressNumber},addressStreet:\"${addressStreet}\",addressTown:\"${addressTown}\",addressParish:\"${addressParish}\",addressPostOffice:\"${addressPostOffice}\",contactPhone:\"${contactPhone}\",contactEmail:\"${contactEmail}\",registrationDate:\"${registrationDate}\",referralDate:\"${referralDate}\",expirationDate:\"${expirationDate}\",referringDoctorName:\"${referringDoctorName}\",referringDoctorEmail:\"${referringDoctorEmail}\",referringDoctorPhone:\"${referringDoctorPhone}\",attendingPhysicianName:\"${attendingPhysicianName}\",attendingPhysicianEmail:\"${attendingPhysicianEmail}\",attendingPhysicianPhone:\"${attendingPhysicianPhone}\",occupationRole:\"${occupationRole}\",occupationEmployer:\"${occupationEmployer}\",occupationEmployerContactPhone:\"${occupationEmployerContactPhone}\",occupationEmployerContactEmail:\"${occupationEmployerContactPhone}\"})\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n        `};\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const updatedPatientId = resData.data.updatePatient._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        this.state.patients.push(resData.data.updatePatient);\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n\n        this.fetchPatients();\n        this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatient })\n      })\n      .catch(err => {\n        this.setState({userAlert: err});\n      });\n  };\n\n\n  modalConfirmUpdateFieldHandler = (event) => {\n\n    const token = this.context.token;\n    const userId = this.context.userId;\n    let selectedPatientId = this.context.selectedPatient._id;\n    this.setState({ updating: false, userAlert: \"Updating selected Patient by Field...\" });\n\n    let field = null;\n    let query = event.target.formGridQuery.value;\n    if (event.target.formGridFieldSelect.value === \"select\") {\n      field = event.target.formGridField.value;\n    } else {\n      field = event.target.formGridFieldSelect.value;\n    }\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientField(userId:\"${userId}\",patientId:\"${selectedPatientId}\",field:\"${field}\",query:\"${query}\")\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `};\n\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const updatedPatientId = resData.data.updatePatientField._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        this.state.patients.push(resData.data.updatePatientField);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n\n        this.fetchPatients();\n        this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientField })\n      })\n      .catch(err => {\n        this.setState({userAlert: err});\n      });\n  }\n\n\nupdatePatientConsultantHandler = (event) => {\n\n  event.preventDefault();\n  let token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n  const patientConsultantReference = this.context.selectedUser._id;\n  if (patientConsultantReference === undefined) {\n      this.setState({userAlert: \"select a Staff member before adding a Patient Consultant!!...\"});\n      token = null;\n  }\n\n  this.setState({ updating: false , patientUpdateField: null, userAlert: \"Adding selected Patient Consultant...\" });\n\n  let consultantDate = new Date(event.target.patientConsultantCalendarDate.value).toISOString().slice(0,10);\n  if (event.target.formGridConsultantDateTodayCheckbox.checked === true) {\n    consultantDate = new Date().toISOString().slice(0,10);\n  }\n\n\n  const requestBody = {\n    query:`\n      mutation {updatePatientConsultant(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{consultantDate:\" ${consultantDate}\",consultantReference: \"${patientConsultantReference}\"})\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n  };\n\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n    .then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n      return res.json();\n    })\n    .then(resData => {\n      const updatedPatientId = resData.data.updatePatientConsultant._id;\n      const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n      const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n      const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n      this.state.patients.push(resData.data.updatePatientConsultant);\n      this.context.patients = this.state.patients;\n      const responseAlert = JSON.stringify(resData.data).slice(2,25);\n\n      this.fetchPatients();\n      this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientConsultant })\n    })\n    .catch(err => {\n      this.setState({userAlert: err});\n    });\n}\n\nupdatePatientInsuranceHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n  this.setState({ updating: false , patientUpdateField: null, userAlert: \"Adding selected Patient Insurance...\" });\n  let insuranceCompany = event.target.formGridInsuranceCompany.value;\n  let insuranceNumber = event.target.formGridInsuranceNumber.value;\n  let insuranceExpiry = event.target.patientCalendarInsuranceExpiryDate.value;\n  // if (event.target.patientCalendarInsuranceExpiryDate.value !== null &&\n  //   event.target.formGridInsuranceExpiry.value === null\n  //   ) {\n  //   console.log(`patientCalendarInsuranceExpiryDate: ${new Date(event.target.patientCalendarInsuranceExpiryDate.value).toISOString().slice(0,10)} `);\n  //   insuranceExpiry = new Date(event.target.patientCalendarInsuranceExpiryDate.value).toISOString().slice(0,10);\n  // }\n\n  let insuranceDescription = event.target.formGridInsuranceDescription.value;\n  let insuranceSubscriberCompany = event.target.formGridInsuranceSubscriberCompany.value;\n  let insuranceSubscriberDescription = event.target.formGridInsuranceSubscriberDescription.value;\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientInsurance(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{insuranceCompany:\"${insuranceCompany}\",insuranceNumber:\"${insuranceNumber}\",insuranceDescription:\"${insuranceDescription}\",insuranceExpiry:\"${insuranceExpiry}\",insuranceSubscriberCompany:\"${insuranceSubscriberCompany}\",insuranceSubscriberDescription:\"${insuranceSubscriberDescription}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `\n    };\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n    .then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n      return res.json();\n    })\n    .then(resData => {\n      const updatedPatientId = resData.data.updatePatientInsurance._id;\n      const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n      const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n      const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n      this.state.patients.push(resData.data.updatePatientInsurance);\n      this.context.patients = this.state.patients;\n      const responseAlert = JSON.stringify(resData.data).slice(2,25);\n\n      this.fetchPatients();\n      this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientInsurance })\n    })\n    .catch(err => {\n      this.setState({userAlert: err});\n    });\n}\n\nupdatePatientNextOfKinHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n  this.setState({ updating: false , patientUpdateField: null, userAlert: \"Adding selected Patient Next of Kin...\" });\n  let nextOfKinName = event.target.formGridNextOfKinName.value;\n  let nextOfKinPhone = event.target.formGridNextOfKinPhone.value;\n  let nextOfKinEmail = event.target.formGridNextOfKinEmail.value;\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientNextOfKin(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{nextOfKinName:\"${nextOfKinName}\",nextOfKinEmail:\"${nextOfKinEmail}\",nextOfKinPhone:\"${nextOfKinPhone}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `\n    };\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const updatedPatientId = resData.data.updatePatientNextOfKin._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        this.state.patients.push(resData.data.updatePatientNextOfKin);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n\n        this.fetchPatients();\n        this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientNextOfKin })\n      })\n      .catch(err => {\n        this.setState({userAlert: err});\n      });\n}\n\nupdatePatientComplaintHandler = (event) => {\n\n  event.preventDefault();\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n  this.setState({ updating: false , patientUpdateField: null, userAlert: \"Adding selected Patient Complaint...\" });\n\n  let complaintTitle = event.target.formGridComplaintTitle.value;\n\n  let complaintDate = null;\n  if (event.target.formGridComplaintDate) {\n    complaintDate = event.target.formGridComplaintDate.value;\n  }\n  if (event.target.formGridComplaintDateTodayCheckbox.checked === true) {\n    complaintDate = new Date().toISOString().slice(0,10);\n  }\n\n  if (\n    event.target.patientComplaintCalendarDate.value !== null &&\n    event.target.formGridComplaintDateTodayCheckbox.checked !== true\n  ) {\n    console.log(\"fancyDate2\", new Date(event.target.patientComplaintCalendarDate.value).toISOString().slice(0,10));\n    complaintDate = new Date(event.target.patientComplaintCalendarDate.value).toISOString().slice(0,10);\n  }\n\n  let complaintDescription = event.target.formGridComplaintDescription.value;\n  let complaintAnamnesis = event.target.formGridComplaintAnamnesis.value;\n  let complaintAttachmentFormat = event.target.formGridComplaintAttachmentFormat.value;\n  let complaintAttachmentPath = \"uploads/patients/\"+selectedPatientId+\"/complaints\";\n\n  let complaintAttachmentName = null;\n\n  if (\n      event.target.fileInput.value !== \"\"\n  ) {\n\n    const file = AuthContext._currentValue.file;\n    const config = {\n      bucketName: this.state.creds.s3.bucketName,\n      dirName: complaintAttachmentPath,\n      region: this.state.creds.s3.region,\n      accessKeyId: this.state.creds.s3.accessKeyId,\n      secretAccessKey: this.state.creds.s3.secretAccessKey,\n    }\n    const ReactS3Client = new S3(config);\n    const newFileName = file.name;\n    const complaintAttachmentName = newFileName;\n    this.setState({userAlert: \"uploading attachment ...\"});\n\n    ReactS3Client\n        .uploadFile(file, newFileName)\n        .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\" });})\n        .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err });})\n\n  }\n\n  const requestBody = {\n    query:`\n      mutation {updatePatientComplaint(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{complaintDate:\"${complaintDate}\",complaintTitle:\"${complaintTitle}\",complaintDescription:\"${complaintDescription}\",complaintAnamnesis:\"${complaintAnamnesis}\",complaintAttachmentName:\"${complaintAttachmentName}\",complaintAttachmentFormat:\"${complaintAttachmentFormat}\",complaintAttachmentPath:\"${complaintAttachmentPath}\"})\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n  }\n\n  fetch('http://localhost:10000/graphql', {\n    method: 'POST',\n    body: JSON.stringify(requestBody),\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + token\n    }\n  })\n    .then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n      return res.json();\n    })\n    .then(resData => {\n      const updatedPatientId = resData.data.updatePatientComplaint._id;\n      const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n      const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n      const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n      this.state.patients.push(resData.data.updatePatientComplaint);\n      this.context.patients = this.state.patients;\n      const responseAlert = JSON.stringify(resData.data).slice(2,25);\n\n      this.fetchPatients();\n      this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientComplaint })\n    })\n    .catch(err => {\n      this.setState({userAlert: err});\n    });\n}\n\nupdatePatientSurveyHandler = (event) => {\n\n  event.preventDefault();\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n  this.setState({ updating: false , patientUpdateField: null, userAlert: \"Adding selected Patient Survey...\" });\n\n  let surveyDate = null;\n  if (event.target.formGridSurveyDate) {\n    surveyDate = event.target.formGridSurveyDate.value;\n  }\n  if (event.target.formGridSurveyDateTodayCheckbox.checked === true) {\n    surveyDate = new Date().toISOString().slice(0,10);\n  }\n  if (\n    event.target.patientSurveyCalendarDate.value !== null &&\n    event.target.formGridSurveyDateTodayCheckbox.checked !== true\n  ) {\n    console.log(\"fancyDate2\", new Date(event.target.patientSurveyCalendarDate.value).toISOString().slice(0,10));\n    surveyDate = new Date(event.target.patientSurveyCalendarDate.value).toISOString().slice(0,10);\n  }\n\n  let surveyTitle = event.target.formGridSurveyTitle.value;\n  let surveyDescription = event.target.formGridSurveyDescription.value;\n  let surveyAttachmentFormat = event.target.formGridSurveyAttachmentFormat.value;\n  let surveyAttachmentPath = \"uploads/patients/\"+selectedPatientId+\"/surveys\";\n\n  let surveyAttachmentName = null;\n\n  if (\n      event.target.fileInput.value !== \"\"\n  ) {\n    const file = AuthContext._currentValue.file;\n    const config = {\n      bucketName: this.state.creds.s3.bucketName,\n      dirName: surveyAttachmentPath,\n      region: this.state.creds.s3.region,\n      accessKeyId: this.state.creds.s3.accessKeyId,\n      secretAccessKey: this.state.creds.s3.secretAccessKey,\n    }\n    const ReactS3Client = new S3(config);\n    const newFileName = file.name;\n    const surveyAttachmentName = newFileName;\n    this.setState({userAlert: \"uploading attachment ...\"});\n\n    ReactS3Client\n        .uploadFile(file, newFileName)\n        .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\" });})\n        .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err });})\n  }\n\n  const requestBody = {\n    query:`\n      mutation {updatePatientSurvey(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{surveyDate:\"${surveyDate}\",surveyTitle:\"${surveyTitle}\",surveyDescription:\"${surveyDescription}\",surveyAttachmentName:\"${surveyAttachmentName}\",surveyAttachmentFormat:\"${surveyAttachmentFormat}\",surveyAttachmentPath:\"${surveyAttachmentPath}\"})\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n  }\n\n  fetch('http://localhost:10000/graphql', {\n    method: 'POST',\n    body: JSON.stringify(requestBody),\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + token\n    }\n  })\n    .then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n      return res.json();\n    })\n    .then(resData => {\n      const updatedPatientId = resData.data.updatePatientSurvey._id;\n      const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n      const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n      const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n      this.state.patients.push(resData.data.updatePatientSurvey);\n      this.context.patients = this.state.patients;\n      const responseAlert = JSON.stringify(resData.data).slice(2,25);\n\n      this.fetchPatients();\n      this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientSurvey })\n    })\n    .catch(err => {\n      this.setState({userAlert: err});\n    });\n}\n\nupdatePatientSystematicInquiryHandler = (event) => {\n\n  event.preventDefault();\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n  this.setState({ updating: false , patientUpdateField: null, userAlert: \"Adding selected Patient Systematic Inquiry...\" });\n\n  let systematicInquiryDate = null;\n  if (event.target.formGridSystematicInquiryDate) {\n    systematicInquiryDate = event.target.formGridSystematicInquiryDate.value;\n  }\n  if (event.target.formGridSystematicInquiryDateTodayCheckbox.checked === true) {\n    systematicInquiryDate = new Date().toISOString().slice(0,10);\n  }\n  if (\n    event.target.patientSystematicInquiryCalendarDate.value !== null &&\n    event.target.formGridSystematicInquiryDateTodayCheckbox.checked !== true\n  ) {\n    console.log(\"fancyDate2\", new Date(event.target.patientSystematicInquiryCalendarDate.value).toISOString().slice(0,10));\n    systematicInquiryDate = new Date(event.target.patientSystematicInquiryCalendarDate.value).toISOString().slice(0,10);\n  }\n\n  let systematicInquiryTitle = event.target.formGridSystematicInquiryTitle.value;\n  let systematicInquiryDescription = event.target.formGridSystematicInquiryDescription.value;\n  let systematicInquiryAttachmentFormat = event.target.formGridSystematicInquiryAttachmentFormat.value;\n  let systematicInquiryAttachmentPath = \"uploads/patients/\"+selectedPatientId+\"/systematicInquirys\";\n\n  let systematicInquiryAttachmentName = null;\n\n  if (\n      event.target.fileInput.value !== \"\"\n  ) {\n\n    const file = AuthContext._currentValue.file;\n    const config = {\n      bucketName: this.state.creds.s3.bucketName,\n      dirName: systematicInquiryAttachmentPath,\n      region: this.state.creds.s3.region,\n      accessKeyId: this.state.creds.s3.accessKeyId,\n      secretAccessKey: this.state.creds.s3.secretAccessKey,\n    }\n    const ReactS3Client = new S3(config);\n    const newFileName = file.name;\n    const systematicInquiryAttachmentName = newFileName;\n    this.setState({userAlert: \"uploading attachment ...\"});\n\n    // ReactS3Client\n    //     .uploadFile(file, newFileName)\n    //     .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\" });})\n    //     .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err });})\n\n  }\n\n  const requestBody = {\n    query:`\n      mutation {updatePatientSystematicInquiry(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{systematicInquiryDate:\"${systematicInquiryDate}\",systematicInquiryTitle:\"${systematicInquiryTitle}\",systematicInquiryDescription:\"${systematicInquiryDescription}\",systematicInquiryAttachmentName:\"${systematicInquiryAttachmentName}\",systematicInquiryAttachmentFormat:\"${systematicInquiryAttachmentFormat}\",systematicInquiryAttachmentPath:\"${systematicInquiryAttachmentPath}\"})\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n  }\n\n  fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n    .then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n      return res.json();\n    })\n    .then(resData => {\n      const updatedPatientId = resData.data.updatePatientSystematicInquiry._id;\n      const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n      const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n      const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n      this.state.patients.push(resData.data.updatePatientSystematicInquiry);\n      this.context.patients = this.state.patients;\n      const responseAlert = JSON.stringify(resData.data).slice(2,25);\n\n      this.fetchPatients();\n      this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientSystematicInquiry })\n    })\n    .catch(err => {\n      this.setState({userAlert: err});\n    });\n}\n\nupdatePatientVitalsHandler = (event) => {\n\n  event.preventDefault();\n  const token = this.context.token;\n  const userId = this.context.userId;\n  const selectedPatientId = this.context.selectedPatient._id;\n  this.setState({ updating: false , patientUpdateField: null, userAlert: \"Adding selected Patient Vitals...\" });\n\n  let vitalsDate = null;\n  if (event.target.formGridVitalsDate) {\n    vitalsDate = event.target.formGridVitalsDate.value;\n  }\n  if (event.target.formGridVitalsDateTodayCheckbox.checked === true) {\n    vitalsDate = new Date().toISOString().slice(0,10);\n  }\n  if (\n    event.target.patientVitalsCalendarDate.value !== null &&\n    event.target.formGridVitalsDateTodayCheckbox.checked !== true\n  ) {\n    console.log(\"fancyDate2\", new Date(event.target.patientVitalsCalendarDate.value).toISOString().slice(0,10));\n    vitalsDate = new Date(event.target.patientVitalsCalendarDate.value).toISOString().slice(0,10);\n  }\n\n  const vitalsPr = event.target.formGridVitalsPr.value;\n  const vitalsBp1 = event.target.formGridVitalsBp1.value;\n  const vitalsBp2 = event.target.formGridVitalsBp2.value;\n  const vitalsRr = event.target.formGridVitalsRr.value;\n  const vitalsTemp = event.target.formGridVitalsTemp.value;\n  const vitalsPs02 = event.target.formGridVitalsPs02.value;\n  const vitalsHeight = event.target.formGridVitalsHeight.value;\n  const vitalsWeight = event.target.formGridVitalsWeight.value;\n  const vitalsBmi = event.target.formGridVitalsBmi.value;\n  const vitalsUrineType = event.target.formGridVitalsUrineType.value;\n  const vitalsUrineValue = event.target.formGridVitalsUrineValue.value;\n  const requestBody = {\n    query:`\n      mutation {updatePatientVitals(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{vitalsDate:\"${vitalsDate}\",vitalsPr:${vitalsPr},vitalsBp1:${vitalsBp1},vitalsBp2:${vitalsBp2},vitalsRr:${vitalsRr},vitalsTemp:${vitalsTemp},vitalsPs02:${vitalsPs02},vitalsHeight:${vitalsHeight},vitalsWeight:${vitalsWeight},vitalsBmi:${vitalsBmi},vitalsUrineType:\"${vitalsUrineType}\",vitalsUrineValue:\"${vitalsUrineValue}\"})\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n  }\n\n  fetch('http://localhost:10000/graphql', {\n    method: 'POST',\n    body: JSON.stringify(requestBody),\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + token\n    }\n  })\n    .then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n      return res.json();\n    })\n    .then(resData => {\n      const updatedPatientId = resData.data.updatePatientVitals._id;\n      const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n      const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n      const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n      this.state.patients.push(resData.data.updatePatientVitals);\n      this.context.patients = this.state.patients;\n      const responseAlert = JSON.stringify(resData.data).slice(2,25);\n\n      this.fetchPatients();\n      this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientVitals })\n    })\n    .catch(err => {\n      this.setState({userAlert: err});\n    });\n}\n\nupdatePatientExaminationHandler = (event) => {\n\n  event.preventDefault();\n  const token = this.context.token;\n  const userId = this.context.userId;\n  const selectedPatientId = this.context.selectedPatient._id;\n  this.setState({ updating: false , patientUpdateField: null, userAlert: \"Adding selected Patient Examination...\" });\n\n  let examinationDate = null;\n  if (event.target.formGridExaminationDate) {\n    examinationDate = event.target.formGridExaminationDate.value;\n  }\n  if (event.target.formGridExaminationDateTodayCheckbox.checked === true) {\n    examinationDate = new Date().toISOString().slice(0,10);\n  }\n  if (\n    event.target.patientExaminationCalendarDate.value !== null &&\n    event.target.formGridExaminationDateTodayCheckbox.checked !== true\n  ) {\n    console.log(\"fancyDate2\", new Date(event.target.patientExaminationCalendarDate.value).toISOString().slice(0,10));\n    examinationDate = new Date(event.target.patientExaminationCalendarDate.value).toISOString().slice(0,10);\n  }\n\n  const examinationGeneral = event.target.formGridExaminationGeneral.value;\n  let examinationArea = undefined;\n  if (event.target.formGridExaminationAreaSelect.value === \"select\") {\n    examinationArea = event.target.formGridExaminationArea.value;\n  } else {\n    examinationArea = event.target.formGridExaminationAreaSelect.value;\n  }\n  const examinationType = event.target.formGridExaminationType.value;\n  const examinationMeasure = event.target.formGridExaminationMeasure.value;\n  const examinationValue = event.target.formGridExaminationValue.value;\n  const examinationDescription = event.target.formGridExaminationDescription.value;\n  const examinationFollowUp = event.target.formGridExaminationFollowUp.value;\n  const examinationAttachmentFormat = event.target.formGridExaminationAttachmentFormat.value;\n  const examinationAttachmentPath = \"uploads/patients/\"+selectedPatientId+\"/examinations\";\n\n  let examinationAttachmentName = null;\n\n  if (\n      event.target.fileInput.value !== \"\"\n  ) {\n\n    const file = AuthContext._currentValue.file;\n    const config = {\n      bucketName: this.state.creds.s3.bucketName,\n      dirName: examinationAttachmentPath,\n      region: this.state.creds.s3.region,\n      accessKeyId: this.state.creds.s3.accessKeyId,\n      secretAccessKey: this.state.creds.s3.secretAccessKey,\n    }\n    const ReactS3Client = new S3(config);\n    const newFileName = file.name;\n    const examinationAttachmentName = newFileName;\n    this.setState({userAlert: \"uploading attachment ...\"});\n\n    ReactS3Client\n        .uploadFile(file, newFileName)\n        .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\" });})\n        .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err });})\n\n  }\n\n  const requestBody = {\n    query:`\n      mutation {updatePatientExamination(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{examinationDate:\"${examinationDate}\",examinationGeneral:\"${examinationGeneral}\",examinationArea:\"${examinationArea}\",examinationType:\"${examinationType}\",examinationMeasure:\"${examinationMeasure}\",examinationValue:\"${examinationValue}\",examinationDescription:\"${examinationDescription}\",examinationFollowUp:${examinationFollowUp},examinationAttachmentName:\"${examinationAttachmentName}\",examinationAttachmentFormat:\"${examinationAttachmentFormat}\",examinationAttachmentPath:\"${examinationAttachmentPath}\"})\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n  }\n\n  fetch('http://localhost:10000/graphql', {\n    method: 'POST',\n    body: JSON.stringify(requestBody),\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + token\n    }\n  })\n    .then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n      return res.json();\n    })\n    .then(resData => {\n      const updatedPatientId = resData.data.updatePatientExamination._id;\n      const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n      const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n      const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n      this.state.patients.push(resData.data.updatePatientExamination);\n      this.context.patients = this.state.patients;\n      const responseAlert = JSON.stringify(resData.data).slice(2,25);\n\n      this.fetchPatients();\n      this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientExamination })\n    })\n    .catch(err => {\n      this.setState({userAlert: err});\n    });\n}\n\n\nupdatePatientHistoryHandler = (event) => {\n\n  event.preventDefault();\n  const token = this.context.token;\n  const userId = this.context.userId;\n  const selectedPatientId = this.context.selectedPatient._id;\n  this.setState({ updating: false , patientUpdateField: null, userAlert: \"Adding selected Patient History...\" });\n\n  const historyType = event.target.formGridHistoryType.value;\n  let historyDate = event.target.formGridHistoryDate.value;\n  if (event.target.formGridHistoryDateTodayCheckbox.checked === true) {\n    historyDate = new Date().toISOString().slice(0,10);\n  }\n\n  if (\n    event.target.patientHistoryCalendarDate.value !== null &&\n    event.target.formGridHistoryDateTodayCheckbox.checked !== true\n  ) {\n    console.log(\"fancyDate2\", new Date(event.target.patientHistoryCalendarDate.value).toISOString().slice(0,10));\n    historyDate = new Date(event.target.patientHistoryCalendarDate.value).toISOString().slice(0,10);\n  }\n\n  const historyTitle = event.target.formGridHistoryTitle.value;\n  const historyDescription = event.target.formGridHistoryDescription.value;\n  const historyAttachmentFormat = event.target.formGridHistoryAttachmentFormat.value;\n  const historyAttachmentPath = \"uploads/patients/\"+selectedPatientId+\"/history\";\n\n  let historyAttachmentName = null;\n\n  if (\n      event.target.fileInput.value !== \"\"\n  ) {\n\n    const file = AuthContext._currentValue.file;\n    const config = {\n      bucketName: this.state.creds.s3.bucketName,\n      dirName: historyAttachmentPath,\n      region: this.state.creds.s3.region,\n      accessKeyId: this.state.creds.s3.accessKeyId,\n      secretAccessKey: this.state.creds.s3.secretAccessKey,\n    }\n    const ReactS3Client = new S3(config);\n    const newFileName = file.name;\n    const historyAttachmentName = newFileName;\n    this.setState({userAlert: \"uploading attachment ...\"});\n\n    ReactS3Client\n        .uploadFile(file, newFileName)\n        .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\" });})\n        .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err });})\n\n  }\n\n  const requestBody = {\n    query:`\n      mutation {updatePatientHistory(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{historyTitle:\"${historyTitle}\",historyType:\"${historyType}\",historyDate:\"${historyDate}\",historyDescription:\"${historyDescription}\",historyAttachmentName:\"${historyAttachmentName}\",historyAttachmentFormat:\"${historyAttachmentFormat}\",historyAttachmentPath:\"${historyAttachmentPath}\"})\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n  }\n\n  fetch('http://localhost:10000/graphql', {\n    method: 'POST',\n    body: JSON.stringify(requestBody),\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + token\n    }\n  })\n    .then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n      return res.json();\n    })\n    .then(resData => {\n      const updatedPatientId = resData.data.updatePatientHistory._id;\n      const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n      const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n      const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n      this.state.patients.push(resData.data.updatePatientHistory);\n      this.context.patients = this.state.patients;\n      const responseAlert = JSON.stringify(resData.data).slice(2,25);\n\n      this.fetchPatients();\n      this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientHistory })\n    })\n    .catch(err => {\n      this.setState({userAlert: err});\n    });\n}\n\n\nupdatePatientAllergiesHandler = (event) => {\n\n  event.preventDefault();\n  const token = this.context.token;\n  const userId = this.context.userId;\n  const selectedPatientId = this.context.selectedPatient._id;\n  this.setState({ updating: false , patientUpdateField: null, userAlert: \"Adding selected Patient Allergies...\" });\n\n  const allergiesTitle = event.target.formGridAllergiesTitle.value;\n  let allergiesType = undefined;\n  if (event.target.formGridAllergiesTypeSelect === \"select\") {\n    allergiesType = event.target.formGridAllergiesType.value;\n  } else {\n    allergiesType = event.target.formGridAllergiesTypeSelect.value;\n  }\n  const allergiesDescription = event.target.formGridAllergiesDescription.value;\n  const allergiesAttachmentFormat = event.target.formGridAllergiesAttachmentFormat.value;\n  const allergiesAttachmentPath = \"uploads/patients/\"+selectedPatientId+\"/allergies\";\n\n  let allergiesAttachmentName = null;\n\n  if (\n      event.target.fileInput.value !== \"\"\n  ) {\n\n    const file = AuthContext._currentValue.file;\n    const config = {\n      bucketName: this.state.creds.s3.bucketName,\n      dirName: allergiesAttachmentPath,\n      region: this.state.creds.s3.region,\n      accessKeyId: this.state.creds.s3.accessKeyId,\n      secretAccessKey: this.state.creds.s3.secretAccessKey,\n    }\n    const ReactS3Client = new S3(config);\n    const newFileName = file.name;\n    const allergiesAttachmentName = newFileName;\n    this.setState({userAlert: \"uploading attachment ...\"});\n\n    ReactS3Client\n        .uploadFile(file, newFileName)\n        .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n        .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n  }\n\n  const requestBody = {\n    query:`\n      mutation {updatePatientAllergies(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{allergiesTitle:\"${allergiesTitle}\",allergiesType:\"${allergiesType}\", allergiesDescription:\"${allergiesDescription}\",allergiesAttachmentName:\"${allergiesAttachmentName}\",allergiesAttachmentFormat:\"${allergiesAttachmentFormat}\",allergiesAttachmentPath:\"${allergiesAttachmentPath}\"})\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n  }\n\n  fetch('http://localhost:10000/graphql', {\n    method: 'POST',\n    body: JSON.stringify(requestBody),\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + token\n    }\n  })\n    .then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n      return res.json();\n    })\n    .then(resData => {\n      const updatedPatientId = resData.data.updatePatientAllergies._id;\n      const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n      const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n      const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n      this.state.patients.push(resData.data.updatePatientAllergies);\n      this.context.patients = this.state.patients;\n      const responseAlert = JSON.stringify(resData.data).slice(2,25);\n\n      this.fetchPatients();\n      this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientAllergies })\n    })\n    .catch(err => {\n      this.setState({userAlert: err});\n    });\n}\n\nupdatePatientMedicationHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  const selectedPatientId = this.context.selectedPatient._id;\n  this.setState({ updating: false , patientUpdateField: null, userAlert: \"Adding selected Patient Medication...\" });\n\n  const medicationTitle = event.target.formGridMedicationTitle.value;\n  const medicationType = event.target.formGridMedicationType.value;\n  const medicationDescription = event.target.formGridMedicationDescription.value;\n  const medicationAttachmentFormat = event.target.formGridMedicationAttachmentFormat.value;\n  const medicationAttachmentPath = \"uploads/patients/\"+selectedPatientId+\"/medication\";\n\n  let medicationAttachmentName = null;\n\n  if (\n      event.target.fileInput.value !== \"\"\n  ) {\n\n    const file = AuthContext._currentValue.file;\n    const config = {\n      bucketName: this.state.creds.s3.bucketName,\n      dirName: medicationAttachmentPath,\n      region: this.state.creds.s3.region,\n      accessKeyId: this.state.creds.s3.accessKeyId,\n      secretAccessKey: this.state.creds.s3.secretAccessKey,\n    }\n    const ReactS3Client = new S3(config);\n    const newFileName = file.name;\n    const medicationAttachmentName = newFileName;\n    this.setState({userAlert: \"uploading attachment ...\"});\n\n    ReactS3Client\n        .uploadFile(file, newFileName)\n        .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\" });})\n        .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err });})\n\n  }\n\n  const requestBody = {\n    query:`\n    mutation {updatePatientMedication(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{medicationTitle:\"${medicationTitle}\",medicationType:\"${medicationType}\" medicationDescription:\"${medicationDescription}\",medicationAttachmentName:\"${medicationAttachmentName}\",medicationAttachmentFormat:\"${medicationAttachmentFormat}\",medicationAttachmentPath:\"${medicationAttachmentPath}\"})\n    {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n  }\n\n  fetch('http://localhost:10000/graphql', {\n    method: 'POST',\n    body: JSON.stringify(requestBody),\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + token\n    }\n  })\n    .then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n      return res.json();\n    })\n    .then(resData => {\n      const updatedPatientId = resData.data.updatePatientMedication._id;\n      const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n      const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n      const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n      this.state.patients.push(resData.data.updatePatientMedication);\n      this.context.patients = this.state.patients;\n      const responseAlert = JSON.stringify(resData.data).slice(2,25);\n\n      this.fetchPatients();\n      this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientMedication })\n    })\n    .catch(err => {\n      this.setState({userAlert: err});\n    });\n\n}\n\n\nupdatePatientInvestigationHandler = (event) => {\n\n  event.preventDefault();\n  const token = this.context.token;\n  const userId = this.context.userId;\n  const selectedPatientId = this.context.selectedPatient._id;\n  this.setState({ updating: false , patientUpdateField: null, userAlert: \"Adding selected Patient Investigation...\" });\n\n  let investigationDate = null;\n  if (event.target.formGridInvestigationDate) {\n    investigationDate = event.target.formGridInvestigationDate.value;\n  }\n  if (event.target.formGridInvestigationDateTodayCheckbox.checked === true) {\n    investigationDate = new Date().toISOString().slice(0,10);\n  }\n  if (\n    event.target.patientInvestigationCalendarDate.value !== null &&\n    event.target.formGridInvestigationDateTodayCheckbox.checked !== true\n  ) {\n    console.log(\"fancyDate2\", new Date(event.target.patientInvestigationCalendarDate.value).toISOString().slice(0,10));\n    investigationDate = new Date(event.target.patientInvestigationCalendarDate.value).toISOString().slice(0,10);\n  }\n\n  const investigationTitle = event.target.formGridInvestigationTitle.value;\n  let investigationType = undefined;\n  if (event.target.formGridInvestigationTypeSelect === \"select\") {\n    investigationType = event.target.formGridInvestigationType.value;\n  } else {\n    investigationType = event.target.formGridInvestigationTypeSelect.value;\n  }\n  const investigationDescription = event.target.formGridInvestigationDescription.value;\n  const investigationAttachmentFormat = event.target.formGridInvestigationAttachmentFormat.value;\n  const investigationAttachmentPath = \"uploads/patients/\"+selectedPatientId+\"/investigation\";\n\n  let investigationAttachmentName = null;\n\n  if (\n      event.target.fileInput.value !== \"\"\n  ) {\n\n    const file = AuthContext._currentValue.file;\n    const config = {\n      bucketName: this.state.creds.s3.bucketName,\n      dirName: investigationAttachmentPath,\n      region: this.state.creds.s3.region,\n      accessKeyId: this.state.creds.s3.accessKeyId,\n      secretAccessKey: this.state.creds.s3.secretAccessKey,\n    }\n    const ReactS3Client = new S3(config);\n    const newFileName = file.name;\n    const investigationAttachmentName = newFileName;\n    this.setState({userAlert: \"uploading attachment ...\"});\n\n    ReactS3Client\n        .uploadFile(file, newFileName)\n        .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\" });})\n        .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err });})\n\n  }\n\n  const requestBody = {\n    query:`\n      mutation {updatePatientInvestigation(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{investigationDate:\"${investigationDate}\",investigationTitle:\"${investigationTitle}\",investigationType:\"${investigationType}\",investigationDescription:\"${investigationDescription}\",investigationAttachmentName:\"${investigationAttachmentName}\",investigationAttachmentFormat:\"${investigationAttachmentFormat}\",investigationAttachmentPath:\"${investigationAttachmentPath}\"})\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n  }\n\n  fetch('http://localhost:10000/graphql', {\n    method: 'POST',\n    body: JSON.stringify(requestBody),\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + token\n    }\n  })\n    .then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n      return res.json();\n    })\n    .then(resData => {\n      const updatedPatientId = resData.data.updatePatientInvestigation._id;\n      const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n      const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n      const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n      this.state.patients.push(resData.data.updatePatientInvestigation);\n      this.context.patients = this.state.patients;\n      const responseAlert = JSON.stringify(resData.data).slice(2,25);\n\n      this.fetchPatients();\n      this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientInvestigation })\n    })\n    .catch(err => {\n      this.setState({userAlert: err});\n    });\n}\n\nupdatePatientDiagnosisHandler = (event) => {\n\n  event.preventDefault();\n  const token = this.context.token;\n  const userId = this.context.userId;\n  const selectedPatientId = this.context.selectedPatient._id;\n  this.setState({ updating: false , patientUpdateField: null, userAlert: \"Adding selected Patient Diagnosis...\" });\n\n  let diagnosisDate = null;\n  if (event.target.formGridDiagnosisDate) {\n    diagnosisDate = event.target.formGridDiagnosisDate.value;\n  }\n  if (event.target.formGridDiagnosisDateTodayCheckbox.checked === true) {\n    diagnosisDate = new Date().toISOString().slice(0,10);\n  }\n  if (\n    event.target.patientDiagnosisCalendarDate.value !== null &&\n    event.target.formGridDiagnosisDateTodayCheckbox.checked !== true\n  ) {\n    console.log(\"fancyDate2\", new Date(event.target.patientDiagnosisCalendarDate.value).toISOString().slice(0,10));\n    diagnosisDate = new Date(event.target.patientDiagnosisCalendarDate.value).toISOString().slice(0,10);\n  }\n\n  const diagnosisTitle = event.target.formGridDiagnosisTitle.value;\n  const diagnosisType = event.target.formGridDiagnosisType.value;\n  const diagnosisDescription = event.target.formGridDiagnosisDescription.value;\n  const diagnosisAttachmentFormat = event.target.formGridDiagnosisAttachmentFormat.value;\n  const diagnosisAttachmentPath = \"uploads/patients/\"+selectedPatientId+\"/diagnosis\";\n\n  let diagnosisAttachmentName = null;\n\n  if (\n      event.target.fileInput.value !== \"\"\n  ) {\n\n    const file = AuthContext._currentValue.file;\n    const config = {\n      bucketName: this.state.creds.s3.bucketName,\n      dirName: diagnosisAttachmentPath,\n      region: this.state.creds.s3.region,\n      accessKeyId: this.state.creds.s3.accessKeyId,\n      secretAccessKey: this.state.creds.s3.secretAccessKey,\n    }\n    const ReactS3Client = new S3(config);\n    const newFileName = file.name;\n    const diagnosisAttachmentName = newFileName;\n    this.setState({userAlert: \"uploading attachment ...\"});\n\n    ReactS3Client\n        .uploadFile(file, newFileName)\n        .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\" });})\n        .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err });})\n\n  }\n\n  const requestBody = {\n    query:`\n      mutation {updatePatientDiagnosis(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{diagnosisDate:\"${diagnosisDate}\",diagnosisTitle:\"${diagnosisTitle}\",diagnosisType:\"${diagnosisType}\",diagnosisDescription:\"${diagnosisDescription}\",diagnosisAttachmentName:\"${diagnosisAttachmentName}\",diagnosisAttachmentFormat:\"${diagnosisAttachmentFormat}\",diagnosisAttachmentPath:\"${diagnosisAttachmentPath}\"})\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n  }\n\n  fetch('http://localhost:10000/graphql', {\n    method: 'POST',\n    body: JSON.stringify(requestBody),\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + token\n    }\n  })\n    .then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n      return res.json();\n    })\n    .then(resData => {\n      const updatedPatientId = resData.data.updatePatientDiagnosis._id;\n      const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n      const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n      const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n      this.state.patients.push(resData.data.updatePatientDiagnosis);\n      this.context.patients = this.state.patients;\n      const responseAlert = JSON.stringify(resData.data).slice(2,25);\n\n      this.fetchPatients();\n      this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientDiagnosis })\n    })\n    .catch(err => {\n      this.setState({userAlert: err});\n    });\n}\n\nupdatePatientTreatmentHandler = (event) => {\n\n  event.preventDefault();\n  const token = this.context.token;\n  const userId = this.context.userId;\n  const selectedPatientId = this.context.selectedPatient._id;\n  this.setState({ updating: false , patientUpdateField: null, userAlert: \"Adding selected Patient Treatment...\" });\n\n  let treatmentDate = null;\n  if (event.target.formGridTreatmentDate) {\n    treatmentDate = event.target.formGridTreatmentDate.value;\n  }\n  if (event.target.formGridTreatmentDateTodayCheckbox.checked === true) {\n    treatmentDate = new Date().toISOString().slice(0,10);\n  }\n  if (\n    event.target.patientTreatmentCalendarDate.value !== null &&\n    event.target.formGridTreatmentDateTodayCheckbox.checked !== true\n  ) {\n    console.log(\"fancyDate2\", new Date(event.target.patientTreatmentCalendarDate.value).toISOString().slice(0,10));\n    treatmentDate = new Date(event.target.patientTreatmentCalendarDate.value).toISOString().slice(0,10);\n  }\n\n  const treatmentTitle = event.target.formGridTreatmentTitle.value;\n  const treatmentDescription = event.target.formGridTreatmentDescription.value;\n  const treatmentDose = event.target.formGridTreatmentDose.value;\n  const treatmentFrequency = event.target.formGridTreatmentFrequency.value;\n  let treatmentType = undefined;\n  if (event.target.formGridInvestigationTypeSelect === \"select\") {\n    treatmentType = event.target.formGridTreatmentType.value;\n  } else {\n    treatmentType = event.target.formGridTreatmentTypeSelect.value;\n  }\n  const treatmentAttachmentFormat = event.target.formGridTreatmentAttachmentFormat.value;\n  const treatmentAttachmentPath = \"uploads/patients/\"+selectedPatientId+\"/treatment\";\n\n  let treatmentAttachmentName = null;\n\n  if (\n      event.target.fileInput.value !== \"\"\n  ) {\n\n    const file = AuthContext._currentValue.file;\n    const config = {\n      bucketName: this.state.creds.s3.bucketName,\n      dirName: treatmentAttachmentPath,\n      region: this.state.creds.s3.region,\n      accessKeyId: this.state.creds.s3.accessKeyId,\n      secretAccessKey: this.state.creds.s3.secretAccessKey,\n    }\n    const ReactS3Client = new S3(config);\n    const newFileName = file.name;\n    const treatmentAttachmentName = newFileName;\n    this.setState({userAlert: \"uploading attachment ...\"});\n\n    ReactS3Client\n        .uploadFile(file, newFileName)\n        .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\" });})\n        .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err });})\n\n  }\n\n\n  const requestBody = {\n    query:`\n      mutation {updatePatientTreatment(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{treatmentDate:\"${treatmentDate}\",treatmentTitle:\"${treatmentTitle}\",treatmentType:\"${treatmentType}\",treatmentDescription:\"${treatmentDescription}\",treatmentDose:\"${treatmentDose}\",treatmentFrequency:\"${treatmentFrequency}\",treatmentAttachmentName:\"${treatmentAttachmentName}\",treatmentAttachmentFormat:\"${treatmentAttachmentFormat}\",treatmentAttachmentPath:\"${treatmentAttachmentPath}\"})\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `}\n\n  fetch('http://localhost:10000/graphql', {\n    method: 'POST',\n    body: JSON.stringify(requestBody),\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + token\n    }\n  })\n    .then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n      return res.json();\n    })\n    .then(resData => {\n      const updatedPatientId = resData.data.updatePatientTreatment._id;\n      const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n      const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n      const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n      this.state.patients.push(resData.data.updatePatientTreatment);\n      this.context.patients = this.state.patients;\n      const responseAlert = JSON.stringify(resData.data).slice(2,25);\n\n      this.fetchPatients();\n      this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientTreatment })\n    })\n    .catch(err => {\n      this.setState({userAlert: err});\n    });\n}\n\nupdatePatientBillingHandler = (event) => {\n\n  event.preventDefault();\n  const token = this.context.token;\n  const userId = this.context.userId;\n  const selectedPatientId = this.context.selectedPatient._id;\n  this.setState({ updating: false , patientUpdateField: null, userAlert: \"Adding selected Patient Billing...\" });\n\n  let billingDate = null;\n  if (event.target.formGridBillingDate !== null ) {\n    billingDate = event.target.formGridBillingDate.value;\n  }\n  if (event.target.formGridBillingDateTodayCheckbox.checked === true) {\n    billingDate = new Date().toISOString().slice(0,10);\n  }\n\n  if (\n    event.target.patientBillingCalendarDate.value !== null &&\n    event.target.formGridBillingDateTodayCheckbox.checked !== true\n  ) {\n    console.log(\"fancyDate2\", new Date(event.target.patientBillingCalendarDate.value).toISOString().slice(0,10));\n    billingDate = new Date(event.target.patientBillingCalendarDate.value).toISOString().slice(0,10);\n  }\n\n  const billingTitle = event.target.formGridBillingTitle.value;\n  const billingType = event.target.formGridBillingType.value;\n  const billingDescription = event.target.formGridBillingDescription.value;\n  const billingAmount = event.target.formGridBillingAmount.value;\n  const billingPaid = event.target.formGridBillingPaid.value;\n  const billingNotes = event.target.formGridBillingNotes.value;\n  const billingAttachmentFormat = event.target.formGridBillingAttachmentFormat.value;\n  const billingAttachmentPath = \"uploads/patients/\"+selectedPatientId+\"/billing\";\n\n  let billingAttachmentName = null;\n\n  if (\n      event.target.fileInput.value !== \"\"\n  ) {\n\n    const file = AuthContext._currentValue.file;\n    const config = {\n      bucketName: this.state.creds.s3.bucketName,\n      dirName: billingAttachmentPath,\n      region: this.state.creds.s3.region,\n      accessKeyId: this.state.creds.s3.accessKeyId,\n      secretAccessKey: this.state.creds.s3.secretAccessKey,\n    }\n    const ReactS3Client = new S3(config);\n    const newFileName = file.name;\n    billingAttachmentName = newFileName;\n\n    this.setState({userAlert: \"uploading attachment ...\"});\n\n    ReactS3Client\n        .uploadFile(file, newFileName)\n        .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\" });})\n        .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err });})\n  }\n\n  const requestBody = {\n    query:`\n      mutation {updatePatientBilling(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{billingDate:\"${billingDate}\",billingTitle:\"${billingTitle}\",billingType:\"${billingType}\",billingDescription:\"${billingDescription}\",billingAmount:${billingAmount},billingPaid:${billingPaid},billingNotes:\"${billingNotes}\",billingAttachmentName:\"${billingAttachmentName}\",billingAttachmentFormat:\"${billingAttachmentFormat}\",billingAttachmentPath:\"${billingAttachmentPath}\"})\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n  }\n\n  fetch('http://localhost:10000/graphql', {\n    method: 'POST',\n    body: JSON.stringify(requestBody),\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + token\n    }\n  })\n    .then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n      return res.json();\n    })\n    .then(resData => {\n      const updatedPatientId = resData.data.updatePatientBilling._id;\n      const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n      const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n      const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n      this.state.patients.push(resData.data.updatePatientBilling);\n      this.context.patients = this.state.patients;\n      const responseAlert = JSON.stringify(resData.data).slice(2,25);\n\n      this.fetchPatients();\n      this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientBilling })\n    })\n    .catch(err => {\n      this.setState({userAlert: err});\n    });\n}\n\nupdatePatientVigilanceHandler = (event) => {\n\n  event.preventDefault();\n  const token = this.context.token;\n  const userId = this.context.userId;\n  const selectedPatientId = this.context.selectedPatient._id;\n  this.setState({ updating: false , patientUpdateField: null, userAlert: \"Adding selected Patient Vigilance...\" });\n\n  let vigilanceDate = null;\n  if (event.target.formGridVigilanceDate) {\n    vigilanceDate = event.target.formGridVigilanceDate.value;\n  }\n  if (event.target.formGridVigilanceDateTodayCheckbox.checked === true) {\n    vigilanceDate = new Date().toISOString().slice(0,10);\n  }\n\n  if (\n    event.target.patientVigilanceCalendarDate.value !== null &&\n    event.target.formGridVigilanceDateTodayCheckbox.checked !== true\n  ) {\n    console.log(\"fancyDate2\", new Date(event.target.patientVigilanceCalendarDate.value).toISOString().slice(0,10));\n    vigilanceDate = new Date(event.target.patientVigilanceCalendarDate.value).toISOString().slice(0,10);\n  }\n\n  const vigilanceChronicIllnessDiabetesMedication = event.target.formGridVigilanceChronicIllnessDiabetesMedication.checked;\n  const vigilanceChronicIllnessDiabetesTesting = event.target.formGridVigilanceChronicIllnessDiabetesTesting.checked;\n  const vigilanceChronicIllnessDiabetesComment = event.target.formGridVigilanceChronicIllnessDiabetesComment.value;\n  const vigilanceChronicIllnessHbpMedication = event.target.formGridVigilanceChronicIllnessHbpMedication.checked;\n  const vigilanceChronicIllnessHbpTesting = event.target.formGridVigilanceChronicIllnessHbpTesting.checked;\n  const vigilanceChronicIllnessHbpComment = event.target.formGridVigilanceChronicIllnessHbpComment.value;\n  const vigilanceChronicIllnessDyslipidemiaMedication = event.target.formGridVigilanceChronicIllnessDyslipidemiaMedication.checked;\n  const vigilanceChronicIllnessDyslipidemiaTesting = event.target.formGridVigilanceChronicIllnessDyslipidemiaTesting.checked;\n  const vigilanceChronicIllnessDyslipidemiaComment = event.target.formGridVigilanceChronicIllnessDyslipidemiaComment.value;\n  const vigilanceChronicIllnessCadMedication = event.target.formGridVigilanceChronicIllnessCadMedication.checked;\n  const vigilanceChronicIllnessCadTesting = event.target.formGridVigilanceChronicIllnessCadTesting.checked;\n  const vigilanceChronicIllnessCadComment = event.target.formGridVigilanceChronicIllnessCadComment.value;\n  const vigilanceLifestyleWeightMedication = event.target.formGridVigilanceLifestyleWeightMedication.checked;\n  const vigilanceLifestyleWeightTesting = event.target.formGridVigilanceLifestyleWeightTesting.checked;\n  const vigilanceLifestyleWeightComment = event.target.formGridVigilanceLifestyleWeightComment.value;\n  const vigilanceLifestyleDietMedication = event.target.formGridVigilanceLifestyleDietMedication.checked;\n  const vigilanceLifestyleDietTesting = event.target.formGridVigilanceLifestyleDietTesting.checked;\n  const vigilanceLifestyleDietComment = event.target.formGridVigilanceLifestyleDietComment.value;\n  const vigilanceLifestyleSmokingMedication = event.target.formGridVigilanceLifestyleSmokingMedication.checked;\n  const vigilanceLifestyleSmokingTesting = event.target.formGridVigilanceLifestyleSmokingTesting.checked;\n  const vigilanceLifestyleSmokingComment = event.target.formGridVigilanceLifestyleSmokingComment.value;\n  const vigilanceLifestyleSubstanceAbuseMedication = event.target.formGridVigilanceLifestyleSubstanceAbuseMedication.checked;\n  const vigilanceLifestyleSubstanceAbuseTesting = event.target.formGridVigilanceLifestyleSubstanceAbuseTesting.checked;\n  const vigilanceLifestyleSubstanceAbuseComment = event.target.formGridVigilanceLifestyleSubstanceAbuseComment.value;\n  const vigilanceLifestyleExerciseMedication = event.target.formGridVigilanceLifestyleExerciseMedication.checked;\n  const vigilanceLifestyleExerciseTesting = event.target.formGridVigilanceLifestyleExerciseTesting.checked;\n  const vigilanceLifestyleExerciseComment = event.target.formGridVigilanceLifestyleExerciseComment.value;\n  const vigilanceLifestyleAllergiesMedication = event.target.formGridVigilanceLifestyleAllergiesMedication.checked;\n  const vigilanceLifestyleAllergiesTesting = event.target.formGridVigilanceLifestyleAllergiesTesting.checked;\n  const vigilanceLifestyleAllergiesComment = event.target.formGridVigilanceLifestyleAllergiesComment.value;\n  const vigilanceLifestyleAsthmaMedication = event.target.formGridVigilanceLifestyleAsthmaMedication.checked;\n  const vigilanceLifestyleAsthmaTesting = event.target.formGridVigilanceLifestyleAsthmaTesting.checked;\n  const vigilanceLifestyleAsthmaComment = event.target.formGridVigilanceLifestyleAsthmaComment.value;\n  const vigilanceScreeningBreastMedication = event.target.formGridVigilanceScreeningBreastMedication.checked;\n  const vigilanceScreeningBreastTesting = event.target.formGridVigilanceScreeningBreastTesting.checked;\n  const vigilanceScreeningBreastComment = event.target.formGridVigilanceScreeningBreastComment.value;\n  const vigilanceScreeningProstateMedication = event.target.formGridVigilanceScreeningProstateMedication.checked;\n  const vigilanceScreeningProstateTesting = event.target.formGridVigilanceScreeningProstateTesting.checked;\n  const vigilanceScreeningProstateComment = event.target.formGridVigilanceScreeningProstateComment.value;\n  const vigilanceScreeningCervixMedication = event.target.formGridVigilanceScreeningCervixMedication.checked;\n  const vigilanceScreeningCervixTesting = event.target.formGridVigilanceScreeningCervixTesting.checked;\n  const vigilanceScreeningCervixComment = event.target.formGridVigilanceScreeningCervixComment.value;\n  const vigilanceScreeningColonMedication = event.target.formGridVigilanceScreeningColonMedication.checked;\n  const vigilanceScreeningColonTesting = event.target.formGridVigilanceScreeningColonTesting.checked;\n  const vigilanceScreeningColonComment = event.target.formGridVigilanceScreeningColonComment.value;\n  const vigilanceScreeningDentalMedication = event.target.formGridVigilanceScreeningDentalMedication.checked;\n  const vigilanceScreeningDentalTesting = event.target.formGridVigilanceScreeningDentalTesting.checked;\n  const vigilanceScreeningDentalComment = event.target.formGridVigilanceScreeningDentalComment.value;\n  const vigilanceVaccinesInfluenzaMedication = event.target.formGridVigilanceVaccinesInfluenzaMedication.checked;\n  const vigilanceVaccinesInfluenzaTesting = event.target.formGridVigilanceVaccinesInfluenzaTesting.checked;\n  const vigilanceVaccinesInfluenzaComment = event.target.formGridVigilanceVaccinesInfluenzaComment.value;\n  const vigilanceVaccinesVaricellaMedication = event.target.formGridVigilanceVaccinesVaricellaMedication.checked;\n  const vigilanceVaccinesVaricellaTesting = event.target.formGridVigilanceVaccinesVaricellaTesting.checked;\n  const vigilanceVaccinesVaricellaComment = event.target.formGridVigilanceVaccinesVaricellaComment.value;\n  const vigilanceVaccinesHpvMedication = event.target.formGridVigilanceVaccinesHpvMedication.checked;\n  const vigilanceVaccinesHpvTesting = event.target.formGridVigilanceVaccinesHpvTesting.checked;\n  const vigilanceVaccinesHpvComment = event.target.formGridVigilanceVaccinesHpvComment.value;\n  const vigilanceVaccinesMmrMedication = event.target.formGridVigilanceVaccinesMmrMedication.checked;\n  const vigilanceVaccinesMmrTesting = event.target.formGridVigilanceVaccinesMmrTesting.checked;\n  const vigilanceVaccinesMmrComment = event.target.formGridVigilanceVaccinesMmrComment.value;\n  const vigilanceVaccinesTetanusMedication = event.target.formGridVigilanceVaccinesTetanusMedication.checked;\n  const vigilanceVaccinesTetanusTesting = event.target.formGridVigilanceVaccinesTetanusTesting.checked;\n  const vigilanceVaccinesTetanusComment = event.target.formGridVigilanceVaccinesTetanusComment.value;\n  const vigilanceVaccinesPneumovaxMedication = event.target.formGridVigilanceVaccinesPneumovaxMedication.checked;\n  const vigilanceVaccinesPneumovaxTesting = event.target.formGridVigilanceVaccinesPneumovaxTesting.checked;\n  const vigilanceVaccinesPneumovaxComment = event.target.formGridVigilanceVaccinesPneumovaxComment.value;\n  const vigilanceVaccinesOtherName = event.target.formGridVigilanceVaccinesOtherName.value;\n  const vigilanceVaccinesOtherMedication = event.target.formGridVigilanceVaccinesOtherMedication.checked;\n  const vigilanceVaccinesOtherTesting = event.target.formGridVigilanceVaccinesOtherTesting.checked;\n  const vigilanceVaccinesOtherComment = event.target.formGridVigilanceVaccinesOtherComment.value;\n  const requestBody = {\n    query:`\n      mutation {updatePatientVigilance(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{\n        vigilanceDate:\"${vigilanceDate}\",\n        vigilanceChronicIllnessDiabetesMedication: ${vigilanceChronicIllnessDiabetesMedication},\n        vigilanceChronicIllnessDiabetesTesting: ${vigilanceChronicIllnessDiabetesTesting},\n        vigilanceChronicIllnessDiabetesComment: \"${vigilanceChronicIllnessDiabetesComment}\",\n        vigilanceChronicIllnessHbpMedication: ${vigilanceChronicIllnessHbpMedication},\n        vigilanceChronicIllnessHbpTesting: ${vigilanceChronicIllnessHbpTesting},\n        vigilanceChronicIllnessHbpComment: \"${vigilanceChronicIllnessHbpComment}\",\n        vigilanceChronicIllnessDyslipidemiaMedication: ${vigilanceChronicIllnessDyslipidemiaMedication},\n        vigilanceChronicIllnessDyslipidemiaTesting: ${vigilanceChronicIllnessDyslipidemiaTesting},\n        vigilanceChronicIllnessDyslipidemiaComment: \"${vigilanceChronicIllnessDyslipidemiaComment}\",\n        vigilanceChronicIllnessCadMedication: ${vigilanceChronicIllnessCadMedication},\n        vigilanceChronicIllnessCadTesting: ${vigilanceChronicIllnessCadTesting},\n        vigilanceChronicIllnessCadComment: \"${vigilanceChronicIllnessCadComment}\",\n        vigilanceLifestyleWeightMedication: ${vigilanceLifestyleWeightMedication},\n        vigilanceLifestyleWeightTesting: ${vigilanceLifestyleWeightTesting},\n        vigilanceLifestyleWeightComment: \"${vigilanceLifestyleWeightComment}\",\n        vigilanceLifestyleDietMedication: ${vigilanceLifestyleDietMedication},\n        vigilanceLifestyleDietTesting: ${vigilanceLifestyleDietTesting},\n        vigilanceLifestyleDietComment: \"${vigilanceLifestyleDietComment}\",\n        vigilanceLifestyleSmokingMedication: ${vigilanceLifestyleSmokingMedication},\n        vigilanceLifestyleSmokingTesting: ${vigilanceLifestyleSmokingTesting},\n        vigilanceLifestyleSmokingComment: \"${vigilanceLifestyleSmokingComment}\",\n        vigilanceLifestyleSubstanceAbuseMedication: ${vigilanceLifestyleSubstanceAbuseMedication},\n        vigilanceLifestyleSubstanceAbuseTesting: ${vigilanceLifestyleSubstanceAbuseTesting},\n        vigilanceLifestyleSubstanceAbuseComment: \"${vigilanceLifestyleSubstanceAbuseComment}\",\n        vigilanceLifestyleExerciseMedication: ${vigilanceLifestyleExerciseMedication},\n        vigilanceLifestyleExerciseTesting: ${vigilanceLifestyleExerciseTesting},\n        vigilanceLifestyleExerciseComment: \"${vigilanceLifestyleExerciseComment}\",\n        vigilanceLifestyleAllergiesMedication: ${vigilanceLifestyleAllergiesMedication},\n        vigilanceLifestyleAllergiesTesting: ${vigilanceLifestyleAllergiesTesting},\n        vigilanceLifestyleAllergiesComment: \"${vigilanceLifestyleAllergiesComment}\",\n        vigilanceLifestyleAsthmaMedication: ${vigilanceLifestyleAsthmaMedication},\n        vigilanceLifestyleAsthmaTesting: ${vigilanceLifestyleAsthmaTesting},\n        vigilanceLifestyleAsthmaComment: \"${vigilanceLifestyleAsthmaComment}\",\n        vigilanceScreeningBreastMedication: ${vigilanceScreeningBreastMedication},\n        vigilanceScreeningBreastTesting: ${vigilanceScreeningBreastTesting},\n        vigilanceScreeningBreastComment: \"${vigilanceScreeningBreastComment}\",\n        vigilanceScreeningProstateMedication: ${vigilanceScreeningProstateMedication},\n        vigilanceScreeningProstateTesting: ${vigilanceScreeningProstateTesting},\n        vigilanceScreeningProstateComment: \"${vigilanceScreeningProstateComment}\",\n        vigilanceScreeningCervixMedication: ${vigilanceScreeningCervixMedication},\n        vigilanceScreeningCervixTesting: ${vigilanceScreeningCervixTesting},\n        vigilanceScreeningCervixComment: \"${vigilanceScreeningCervixComment}\",\n        vigilanceScreeningColonMedication: ${vigilanceScreeningColonMedication},\n        vigilanceScreeningColonTesting: ${vigilanceScreeningColonTesting},\n        vigilanceScreeningColonComment: \"${vigilanceScreeningColonComment}\",\n        vigilanceScreeningDentalMedication: ${vigilanceScreeningDentalMedication},\n        vigilanceScreeningDentalTesting: ${vigilanceScreeningDentalTesting},\n        vigilanceScreeningDentalComment: \"${vigilanceScreeningDentalComment}\",\n        vigilanceVaccinesInfluenzaMedication: ${vigilanceVaccinesInfluenzaMedication},\n        vigilanceVaccinesInfluenzaTesting: ${vigilanceVaccinesInfluenzaTesting},\n        vigilanceVaccinesInfluenzaComment: \"${vigilanceVaccinesInfluenzaComment}\",\n        vigilanceVaccinesVaricellaMedication: ${vigilanceVaccinesVaricellaMedication},\n        vigilanceVaccinesVaricellaTesting: ${vigilanceVaccinesVaricellaTesting},\n        vigilanceVaccinesVaricellaComment: \"${vigilanceVaccinesVaricellaComment}\",\n        vigilanceVaccinesHpvMedication: ${vigilanceVaccinesHpvMedication},\n        vigilanceVaccinesHpvTesting: ${vigilanceVaccinesHpvTesting},\n        vigilanceVaccinesHpvComment: \"${vigilanceVaccinesHpvComment}\",\n        vigilanceVaccinesMmrMedication: ${vigilanceVaccinesMmrMedication},\n        vigilanceVaccinesMmrTesting: ${vigilanceVaccinesMmrTesting},\n        vigilanceVaccinesMmrComment: \"${vigilanceVaccinesMmrComment}\",\n        vigilanceVaccinesTetanusMedication: ${vigilanceVaccinesTetanusMedication},\n        vigilanceVaccinesTetanusTesting: ${vigilanceVaccinesTetanusTesting},\n        vigilanceVaccinesTetanusComment: \"${vigilanceVaccinesTetanusComment}\",\n        vigilanceVaccinesPneumovaxMedication: ${vigilanceVaccinesPneumovaxMedication},\n        vigilanceVaccinesPneumovaxTesting: ${vigilanceVaccinesPneumovaxTesting},\n        vigilanceVaccinesPneumovaxComment: \"${vigilanceVaccinesPneumovaxComment}\",\n        vigilanceVaccinesOtherName: \"${vigilanceVaccinesOtherName}\",\n        vigilanceVaccinesOtherMedication: ${vigilanceVaccinesOtherMedication},\n        vigilanceVaccinesOtherTesting: ${vigilanceVaccinesOtherTesting},\n        vigilanceVaccinesOtherComment: \"${vigilanceVaccinesOtherComment}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n    }\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const updatedPatientId = resData.data.updatePatientVigilance._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        this.state.patients.push(resData.data.updatePatientVigilance);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n\n        this.fetchPatients();\n        this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientVigilance })\n      })\n      .catch(err => {\n        this.setState({userAlert: err});\n      });\n}\n\nupdatePatientAttachmentHandler = (event) => {\n    event.preventDefault();\n    if (event.target.fileInput.value === \"\") {\n      this.setState({ userAlert: \"no file chosen. Please try again\"})\n      return\n    }\n    const token = this.context.token;\n    const userId = this.context.userId;\n    const selectedPatientId = this.context.selectedPatient._id;\n    this.setState({ updating: false , patientUpdateField: null, userAlert: \"Adding selected Patient Attachment...\" });\n    const attachmentFormat = event.target.formGridPatientAttachmentFormat.value;\n    const attachmentPath = \"uploads/patients/\"+selectedPatientId+\"/attachments\"\n\n    let attachmentName = null;\n\n    if (\n        event.target.fileInput.value !== \"\"\n    ) {\n      let file = AuthContext._currentValue.file;\n\n      const config = {\n        bucketName: this.state.creds.s3.bucketName,\n        dirName: attachmentPath,\n        region: this.state.creds.s3.region,\n        accessKeyId: this.state.creds.s3.accessKeyId,\n        secretAccessKey: this.state.creds.s3.secretAccessKey,\n      }\n      const ReactS3Client = new S3(config);\n      const newFileName = file.name;\n      attachmentName = newFileName;\n      this.setState({userAlert: \"uploading attachment ...\"});\n\n      ReactS3Client\n          .uploadFile(file, newFileName)\n          .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n          .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n    }\n\n\n    if (\n      attachmentName.trim().length === 0 ||\n      attachmentFormat.trim().length === 0 ||\n      attachmentPath.trim().length === 0\n    ) {\n      this.setState({userAlert: \"blank fields detected!!!...Please try again...\"});\n      return;\n    }\n\n    const requestBody = {\n          query:`\n            mutation {updatePatientAttachment(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{attachmentName:\"${attachmentName}\",attachmentFormat:\"${attachmentFormat}\",attachmentPath:\"${attachmentPath}\"})\n            {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n          `}\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n    .then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n      return res.json();\n    })\n    .then(resData => {\n      const updatedPatientId = resData.data.updatePatientAttachment._id;\n      const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n      const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n      const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n      this.state.patients.push(resData.data.updatePatientAttachment);\n      this.context.patients = this.state.patients;\n      const responseAlert = JSON.stringify(resData.data).slice(2,25);\n\n      this.fetchPatients();\n      this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientAttachment })\n    })\n    .catch(err => {\n      this.setState({userAlert: err});\n    });\n}\n\nupdatePatientNoteHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  const selectedPatientId = this.context.selectedPatient._id;\n  this.setState({ updating: false , patientUpdateField: null, userAlert: \"Adding selected Patient Note ...\" });\n\n  const note = event.target.formGridNote.value;\n\n  if (\n    note.trim().length === 0\n  ) {\n    this.setState({userAlert: \"Can't Submit a blank form!!!...Please try again...\"});\n    return;\n  }\n\n  const requestBody = {\n        query:`\n          mutation {updatePatientNotes(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{notes:\"${note}\"})\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `}\n\n  fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const updatedPatientId = resData.data.updatePatientNotes._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        this.state.patients.push(resData.data.updatePatientNotes);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n\n        this.fetchPatients();\n        this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientNotes })\n      })\n      .catch(err => {\n        this.setState({userAlert: err});\n      });\n\n}\nupdatePatientTagHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  const selectedPatientId = this.context.selectedPatient._id;\n  this.setState({ updating: false , patientUpdateField: null, userAlert: \"Adding selected Patient Tag...\" });\n  const tag = event.target.formGridTag.value;\n\n  if (\n    tag.trim().length === 0\n  ) {\n    console.log(\"Can't Submit a blank form!!!...Please try again...\");\n    this.setState({userAlert: \"Can't Submit a blank form!!!...Please try again...\"});\n    return;\n  }\n\n  const requestBody = {\n        query:`\n          mutation {updatePatientTags(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{tag:\"${tag}\"})\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `}\n\n  fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n    .then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n      return res.json();\n    })\n    .then(resData => {\n      const updatedPatientId = resData.data.updatePatientTags._id;\n      const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n      const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n      const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n      this.state.patients.push(resData.data.updatePatientTags);\n      this.context.patients = this.state.patients;\n      const responseAlert = JSON.stringify(resData.data).slice(2,25);\n      this.fetchPatients();\n      this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientTags })\n    })\n    .catch(err => {\n      this.setState({userAlert: err});\n    });\n}\n\n\nmodalConfirmSearchHandler = (event) => {\n\n  const userId = this.context.userId;\n  const token = this.context.token;\n  this.setState({ searching: false, userAlert: \"Now Searching Patients...\" });\n  let field = null;\n  const query = event.target.formBasicQuery.value;\n  if (event.target.formBasicFieldSelect.value === \"select\") {\n    field = event.target.formBasicField.value;\n  } else {\n    field = event.target.formBasicFieldSelect.value;\n  }\n  this.setState({\n    patientSearchField: field,\n    patientSearchQuery: query,\n  })\n  if (\n    field.trim().length === 0 ||\n    query.trim().length === 0\n  ) {\n    this.setState({ userAlert: \"blank fields detected!!!...Please try again...\"});\n    return;\n  }\n\n  const requestBody = {\n    query: `\n      query {\n        getPatientField(userId: \"${userId}\", field: \"${field}\", query: \"${query}\" )\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n    }\n\n  fetch('http://localhost:10000/graphql', {\n    method: 'POST',\n    body: JSON.stringify(requestBody),\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + token\n    }\n  })\n    .then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n      return res.json();\n    })\n    .then(resData => {\n      const responseAlert = JSON.stringify(resData.data).slice(2,15);\n      const searchPatients = resData.data.getPatientField;\n      this.setState({ searchPatients: searchPatients, userAlert: responseAlert})\n      // this.fetchPatients();\n    })\n    .catch(err => {\n      this.setState({userAlert: err});\n    });\n}\n\nmodalConfirmSearchIdHandler = (event) => {\n\n  const userId = this.context.userId;\n  this.setState({ searching: false, userAlert: \"Searching Patients by Id...\" });\n  const patientId = event.target.formBasicId.value;\n\n  const requestBody = {\n    query: `\n      query {getPatientId(userId:\"${userId}\",patientId:\"${patientId}\")\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `}\n\n  const token = this.context.token;\n\n  fetch('http://localhost:10000/graphql', {\n    method: 'POST',\n    body: JSON.stringify(requestBody),\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + token\n    }\n  })\n    .then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n      return res.json();\n    })\n    .then(resData => {\n      const responseAlert = JSON.stringify(resData.data).slice(2,25);\n      const searchPatients = resData.data.getPatientId;\n      this.setState({ searchPatients: [searchPatients], userAlert: responseAlert})\n      console.log(\"state.searchPatients:  \", this.state.searchPatients);\n      // this.fetchUsers();\n    })\n    .catch(err => {\n      this.setState({userAlert: err});\n    });\n}\n\nmodalConfirmSearchNameHandler = (event) => {\n\n  this.setState({ searching: false, userAlert: \"Searching Patients by Name...\" });\n  const patients = this.state.patients;\n  const regex = new RegExp(event.target.formBasicName.value,\"i\");\n    let result = patients.filter(patient => patient.name.match(regex));\n    this.setState({ searchPatients: result})\n}\n\ngetPatientVisit = (event) => {\n\n    const selectedPatient = this.state.selectedPatient;\n    event.preventDefault();\n    let visitDate = new Date(event.target.formBasicVisitDate.value).toISOString().substring(0, 10);\n    let visitSurveys = selectedPatient.surveys.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    let visitConsultants = selectedPatient.consultant.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    let visitComplaints = selectedPatient.complaints.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    // let visitSurveys = selectedPatient.surveys.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString() === visitDate);\n    let visitSystematicInquiry = selectedPatient.systematicInquiry.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    let visitVitals = selectedPatient.vitals.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    let visitExaminations = selectedPatient.examination.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    let visitHistory = selectedPatient.history.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    let visitInvestigations = selectedPatient.investigation.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    let visitDiagnosis = selectedPatient.diagnosis.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    let visitTreatments = selectedPatient.treatment.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    let visitBilling = selectedPatient.billing.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    let visitVigilance = selectedPatient.vigilance.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n\n      const visit = {\n        date: visitDate,\n        patientName: this.context.selectedPatient.name,\n        consultant: visitConsultants,\n        complaint: visitComplaints,\n        examination: visitExaminations,\n        survey: visitSurveys,\n        systematicInquiry: visitSystematicInquiry,\n        vitals: visitVitals,\n        history: visitHistory,\n        investigation: visitInvestigations,\n        diagnosis: visitDiagnosis,\n        treatment: visitTreatments,\n        billing: visitBilling,\n        vigilance: visitVigilance,\n      };\n    this.setState({visit: visit});\n  }\n\n  getVisitList = () => {\n\n    const selectedPatient = this.state.selectedPatient;\n    const patientName = this.state.selectedPatient.name;\n    let selectedPatientAppointmentDateArray = [];\n    let selectedPatientAppointmentVisitArray = [];\n    let selectedPatientAppointments = this.state.selectedPatient.appointments.map(appointments => {\n      selectedPatientAppointmentDateArray.push(new Date(appointments.date.substr(0,10)*1000).toISOString().substring(0, 10))\n    })\n\n      selectedPatientAppointmentDateArray.map(appointmentDate => {\n          thisGetVisit(appointmentDate, patientName)\n      })\n      function thisGetVisit (argsDate, argsPatientName) {\n\n        const visitDate = argsDate\n        const visitSurveys = selectedPatient.surveys.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n        const visitConsultants = selectedPatient.consultant.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n        const visitComplaints = selectedPatient.complaints.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n        // let visitSurveys = selectedPatient.surveys.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString() === visitDate);\n        const visitVitals = selectedPatient.vitals.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n        const visitSystematicInquiry = selectedPatient.systematicInquiry.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n        const visitExaminations = selectedPatient.examination.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n        const visitHistory = selectedPatient.history.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n        const visitInvestigations = selectedPatient.investigation.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n        const visitDiagnosis = selectedPatient.diagnosis.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n        const visitTreatments = selectedPatient.treatment.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n        const visitBilling = selectedPatient.billing.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n        const visitVigilance = selectedPatient.vigilance.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n\n        const visit = {\n          date: visitDate,\n          patientName: argsPatientName,\n          consultant: visitConsultants,\n          complaint: visitComplaints,\n          examination: visitExaminations,\n          survey: visitSurveys,\n          systematicInquiry: visitSystematicInquiry,\n          vitals: visitVitals,\n          history: visitHistory,\n          investigation: visitInvestigations,\n          diagnosis: visitDiagnosis,\n          treatment: visitTreatments,\n          billing: visitBilling,\n          vigilance: visitVigilance,\n        };\n        selectedPatientAppointmentVisitArray.push(visit)\n      }\n    this.setState({ visitList: selectedPatientAppointmentVisitArray})\n}\n\n\ngetVisitListAsc = () => {\n    let list = this.state.visitList;\n    list.sort((a, b) => {\n      if (a.date < b.date) return -1\n      return a.date > b.date ? 1 : 0\n    })\n    this.setState({visitList: list})\n}\n\ngetVisitListDesc = () => {\n    let list = this.state.visitList;\n    list.sort((a, b) => {\n      if (a.date < b.date) return 1\n      return a.date > b.date ? -1 : 0\n    })\n    this.setState({visitList: list})\n}\n\n\n  modalCancelHandler = () => {\n    this.setState({ creating: false, updating: false, searching: false, selectedPatient: null });\n  };\n\n  getCreds() {\n    // this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n      query {getCreds\n        {atlas{user,pw,db},s3{bucketName,region,accessKeyId,secretAccessKey},jwt{encode},gdrive{clientId,developerKey}}}\n        `};\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }})\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const creds = resData.data.getCreds;\n          this.setState({ creds: creds });\n          // this.state.creds = creds;\n      })\n      .catch(err => {\n        this.setState({userAlert: err});\n      });\n  }\n\n  fetchPatients() {\n\n    const userId = this.context.userId;\n    const token = this.context.token;\n    this.setState({ isLoading: true, userAlert: \"Fetching Patient Master List...\" });\n    const requestBody = {\n      query: `\n          query {patients(userId:\"${userId}\")\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n        `\n      };\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const patients = resData.data.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({userAlert: responseAlert});\n        this.context.patients = this.state.patients;\n        if (this.isActive) {\n          this.setState({\n            patients: patients,\n            isLoading: false,\n          });\n        }\n      })\n      .catch(err => {\n        this.setState({userAlert: err});\n        if (this.isActive) {\n          this.setState({ isLoading: false });\n        }\n    });\n  }\n\n  fetchPatientsAsc = () => {\n    const userId = this.context.userId;\n    const token = this.context.token;\n\n    // this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n          query {patientsNameAsc(userId:\"${userId}\")\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n        `\n    };\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const patients = resData.data.patientsNameAsc;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({userAlert: responseAlert});\n        this.context.patients = patients;\n        this.setState({ patients: patients});\n        // if (this.isActive) {\n        //   this.setState({ patients: patients, isLoading: false });\n        // }\n      })\n      .catch(err => {\n        this.setState({userAlert: err});\n        // if (this.isActive) {\n        //   this.setState({ isLoading: false });\n        // }\n      });\n  }\n\n  fetchPatientsDesc = () => {\n    const userId = this.context.userId;\n    const token = this.context.token;\n    // this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n          query {patientsNameDesc(userId:\"${userId}\")\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n        `\n    };\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const patients = resData.data.patientsNameDesc;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({userAlert: responseAlert});\n        this.context.patients = patients\n        // if (this.isActive) {\n        //   this.setState({ patients: patients, isLoading: false });\n        // }\n        this.setState({ patients: patients});\n      })\n      .catch(err => {\n        this.setState({userAlert: err});\n        // if (this.isActive) {\n        //   this.setState({ isLoading: false });\n        // }\n      });\n  }\n\n\n  modalDeleteHandler = () => {\n\n    const selectedPatientId = this.context.selectedPatient._id;\n    const userId = this.context.selectedUser._id;\n    if(this.context.user.role !== 'admin') {\n      this.setState({ userAlert: \"Not the Admin! No edit permission!!\"});\n    }\n    this.setState({deleting: true, userAlert: \"Deleting selected Patient...\"});\n    const requestBody = {\n      query: `\n          mutation {deletePatient(userId:\"${userId}\",patientId:\"${selectedPatientId}\")\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n        `\n    };\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n    .then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n      return res.json();\n    })\n    .then(resData => {\n      let deletedPatient = resData.data.deletePatient;\n      const responseAlert = JSON.stringify(resData.data).slice(2,25);\n      this.setState({userAlert: responseAlert});\n      let deletedPatientId = deletedPatient._id;\n      deletedPatient = this.state.patients.find(e => e._id === deletedPatientId);\n      const deletedPatientPos = this.state.patients.indexOf(deletedPatient);\n      const slicedArray = this.state.patients.splice(deletedPatientPos, 1);\n      this.setState({ deleting: false });\n      this.fetchPatients();\n    })\n    .catch(err => {\n      this.setState({userAlert: err});\n      if (this.isActive) {\n        this.setState({ deleting: false });\n      }\n    });\n  }\n\n  deletePatientInsuranceItem = (props) => {\n\n    const token = this.context.token;\n    const userId = this.context.userId;\n    const patientId = this.state.selectedPatient._id;\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientInsurance (userId:\"${userId}\", patientId:\"${patientId}\",insuranceCompany:\"${props.company}\",insuranceNumber:\"${props.number}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `};\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n    .then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n      return res.json();\n    })\n    .then(resData => {\n      let deletedPatient = resData.data.deletePatientInsurance;\n      const updatedPatientId = resData.data.deletePatientInsurance._id;\n      const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n      const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n      const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n      this.state.patients.push(resData.data.deletePatientInsurance);\n      this.context.patients = this.state.patients;\n      const responseAlert = JSON.stringify(resData.data).slice(2,25);\n      this.setState({ userAlert: responseAlert})\n      this.fetchPatients();\n    })\n    .catch(err => {\n      this.setState({ userAlert: err});\n    });\n  }\n\n  deletePatientAppointmentItem = (props) => {\n\n    const token = this.context.token;\n    const userId = this.context.userId;\n    const patientId = this.state.selectedPatient._id;\n    const date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n    const requestBody = {\n        query: `\n         mutation {deletePatientAppointment (userId:\"${userId}\", patientId:\"${patientId}\",appointmentId:\"${props._id}\",appointmentDate:\"${date}\")\n         {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `};\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        let deletedPatient = resData.data.deletePatientAppointment;\n        const updatedPatientId = resData.data.deletePatientAppointment._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        this.state.patients.push(resData.data.deletePatientAppointment);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        this.setState({ userAlert: err});\n      });\n}\n\n  deletePatientConsultantItem = (props) => {\n\n    const token = this.context.token;\n    const userId = this.context.userId;\n    const patientId = this.state.selectedPatient._id;\n    const date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n      const requestBody = {\n        query: `\n         mutation {deletePatientConsultant (userId:\"${userId}\", patientId:\"${patientId}\",consultantId:\"${props.reference.id}\",consultantDate:\"${date}\")\n         {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `};\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const deletedPatient = resData.data.deletePatientConsultant;\n        const updatedPatientId = resData.data.deletePatientConsultant._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        this.state.patients.push(resData.data.deletePatientConsultant);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        this.setState({ userAlert: err});\n      });\n}\n\ndeletePatientNextOfKinItem = (props) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  const patientId = this.state.selectedPatient._id;\n  const requestBody = {\n      query: `\n       mutation {deletePatientNextOfKin (userId:\"${userId}\", patientId:\"${patientId}\",nextOfKinName:\"${props.name}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `};\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n    .then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n      return res.json();\n    })\n    .then(resData => {\n      let deletedPatient = resData.data.deletePatientNextOfKin;\n      const updatedPatientId = resData.data.deletePatientNextOfKin._id;\n      const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n      const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n      const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n      this.state.patients.push(resData.data.deletePatientNextOfKin);\n      this.context.patients = this.state.patients;\n      const responseAlert = JSON.stringify(resData.data).slice(2,25);\n      this.setState({ userAlert: responseAlert})\n      this.fetchPatients();\n    })\n    .catch(err => {\n      this.setState({userAlert: err})\n    });\n}\n\ndeletePatientComplaintItem = (props) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  const patientId = this.state.selectedPatient._id;\n  const date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n  const requestBody = {\n      query: `\n       mutation {deletePatientComplaint (userId:\"${userId}\", patientId:\"${patientId}\",complaintTitle:\"${props.title}\",complaintDate:\"${date}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `};\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n    .then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n      return res.json();\n    })\n    .then(resData => {\n      const deletedPatient = resData.data.deletePatientComplaint;\n      const updatedPatientId = resData.data.deletePatientComplaint._id;\n      const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n      const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n      const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n      this.state.patients.push(resData.data.deletePatientComplaint);\n      this.context.patients = this.state.patients;\n      const responseAlert = JSON.stringify(resData.data).slice(2,25);\n      this.setState({ userAlert: responseAlert})\n      this.fetchPatients();\n    })\n    .catch(err => {\n      this.setState({userAlert: err})\n    });\n}\n\ndeletePatientSurveyItem = (props) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  const patientId = this.state.selectedPatient._id;\n  const date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n  const requestBody = {\n      query: `\n       mutation {deletePatientSurvey (userId:\"${userId}\", patientId:\"${patientId}\",surveyTitle:\"${props.title}\",surveyDate:\"${date}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `};\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n    .then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n      return res.json();\n    })\n    .then(resData => {\n      let deletedPatient = resData.data.deletePatientSurvey;\n      const updatedPatientId = resData.data.deletePatientSurvey._id;\n      const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n      const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n      const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n      this.state.patients.push(resData.data.deletePatientSurvey);\n      this.context.patients = this.state.patients;\n      const responseAlert = JSON.stringify(resData.data).slice(2,25);\n      this.setState({ userAlert: responseAlert})\n      this.fetchPatients();\n    })\n    .catch(err => {\n      this.setState({userAlert: err})\n    });\n}\n\ndeletePatientSystematicInquiryItem = (props) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  const patientId = this.state.selectedPatient._id;\n  const date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n    const requestBody = {\n      query: `\n       mutation {deletePatientSystematicInquiry (userId:\"${userId}\", patientId:\"${patientId}\",systematicInquiryTitle:\"${props.title}\",systematicInquiryDate:\"${date}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `};\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n    .then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n      return res.json();\n    })\n    .then(resData => {\n      let deletedPatient = resData.data.deletePatientSystematicInquiry;\n      const updatedPatientId = resData.data.deletePatientSystematicInquiry._id;\n      const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n      const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n      const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n      this.state.patients.push(resData.data.deletePatientSystematicInquiry);\n      this.context.patients = this.state.patients;\n      const responseAlert = JSON.stringify(resData.data).slice(2,25);\n      this.setState({ userAlert: responseAlert})\n      this.fetchPatients();\n    })\n    .catch(err => {\n      this.setState({userAlert: err})\n    });\n}\n\ndeletePatientVitalsItem = (props) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  const patientId = this.state.selectedPatient._id;\n  const date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n    const requestBody = {\n      query: `\n       mutation {deletePatientVitals (userId:\"${userId}\", patientId:\"${patientId}\",vitalsDate:\"${date}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `};\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        let deletedPatient = resData.data.deletePatientVitals;\n        const updatedPatientId = resData.data.deletePatientVitals._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        this.state.patients.push(resData.data.deletePatientVitals);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        this.setState({userAlert: err})\n      });\n}\n\ndeletePatientExaminationItem = (props) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  const patientId = this.state.selectedPatient._id;\n  const date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n    const requestBody = {\n      query: `\n       mutation {deletePatientExamination (userId:\"${userId}\", patientId:\"${patientId}\",examinationType:\"${props.type}\",examinationDate:\"${date}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientExamination;\n            const updatedPatientId = resData.data.deletePatientExamination._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            this.state.patients.push(resData.data.deletePatientExamination);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            this.fetchPatients();\n          })\n          .catch(err => {\n            this.setState({userAlert: err})\n          });\n}\n\ndeletePatientHistoryItem = (props) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  const patientId = this.state.selectedPatient._id;\n  const date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n    const requestBody = {\n      query: `\n       mutation {deletePatientHistory (userId:\"${userId}\", patientId:\"${patientId}\",historyTitle:\"${props.title}\",historyDate:\"${date}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientHistory;\n            const updatedPatientId = resData.data.deletePatientHistory._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            this.state.patients.push(resData.data.deletePatientHistory);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            this.fetchPatients();\n          })\n          .catch(err => {\n            this.setState({userAlert: err})\n          });\n}\n\ndeletePatientAllergiesItem = (props) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  const patientId = this.state.selectedPatient._id;\n    const requestBody = {\n      query: `\n       mutation {deletePatientAllergies (userId:\"${userId}\", patientId:\"${patientId}\",allergiesTitle:\"${props.title}\",allergiesType:\"${props.type}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientAllergies;\n            const updatedPatientId = resData.data.deletePatientAllergies._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            this.state.patients.push(resData.data.deletePatientAllergies);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            this.fetchPatients();\n          })\n          .catch(err => {\n            this.setState({userAlert: err})\n          });\n}\n\ndeletePatientMedicationItem = (props) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  const patientId = this.state.selectedPatient._id;\n    const requestBody = {\n      query: `\n       mutation {deletePatientMedication (userId:\"${userId}\", patientId:\"${patientId}\",medicationTitle:\"${props.title}\",medicationType:\"${props.type}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientMedication;\n            const updatedPatientId = resData.data.deletePatientMedication._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            this.state.patients.push(resData.data.deletePatientMedication);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert});\n            this.fetchPatients();\n          })\n          .catch(err => {\n            this.setState({userAlert: err})\n          });\n}\n\ndeletePatientInvestigationItem = (props) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  const patientId = this.state.selectedPatient._id;\n  const date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n  const requestBody = {\n      query: `\n         mutation {deletePatientInvestigation (userId:\"${userId}\", patientId:\"${patientId}\",investigationDate:\"${date}\",investigationTitle:\"${props.title}\")\n         {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `};\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n    .then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n      return res.json();\n    })\n    .then(resData => {\n      const deletedPatient = resData.data.deletePatientInvestigation;\n      const updatedPatientId = resData.data.deletePatientInvestigation._id;\n      const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n      const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n      const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n      this.state.patients.push(resData.data.deletePatientInvestigation);\n      this.context.patients = this.state.patients;\n      const responseAlert = JSON.stringify(resData.data).slice(2,25);\n      this.setState({ userAlert: responseAlert})\n      this.fetchPatients();\n    })\n    .catch(err => {\n      this.setState({userAlert: err})\n    });\n}\n\ndeletePatientDiagnosisItem = (props) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  const patientId = this.state.selectedPatient._id;\n  const date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n  const requestBody = {\n    query: `\n       mutation {deletePatientDiagnosis (userId:\"${userId}\",patientId:\"${patientId}\",diagnosisDate:\"${date}\",diagnosisTitle:\"${props.title}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n       `};\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n    .then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n      return res.json();\n    })\n    .then(resData => {\n      const deletedPatient = resData.data.deletePatientDiagnosis;\n      const updatedPatientId = resData.data.deletePatientDiagnosis._id;\n      const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n      const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n      const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n      this.state.patients.push(resData.data.deletePatientDiagnosis);\n      this.context.patients = this.state.patients;\n      const responseAlert = JSON.stringify(resData.data).slice(2,25);\n      this.setState({ userAlert: responseAlert});\n      this.fetchPatients();\n    })\n    .catch(err => {\n      this.setState({userAlert: err})\n    });\n}\n\ndeletePatientTreatmentItem = (props) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  const patientId = this.state.selectedPatient._id;\n  const date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n  const requestBody = {\n  query: `\n     mutation {deletePatientTreatment (userId:\"${userId}\", patientId:\"${patientId}\",treatmentDate:\"${date}\",treatmentTitle:\"${props.title}\")\n     {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n  `};\n\n  fetch('http://localhost:10000/graphql', {\n    method: 'POST',\n    body: JSON.stringify(requestBody),\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + token\n    }\n  })\n    .then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n      return res.json();\n    })\n    .then(resData => {\n      const deletedPatient = resData.data.deletePatientTreatment;\n      const updatedPatientId = resData.data.deletePatientTreatment._id;\n      const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n      const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n      const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n      this.state.patients.push(resData.data.deletePatientTreatment);\n      this.context.patients = this.state.patients;\n      const responseAlert = JSON.stringify(resData.data).slice(2,25);\n      this.setState({ userAlert: responseAlert});\n      this.fetchPatients();\n    })\n    .catch(err => {\n      this.setState({userAlert: err});\n    });\n}\n\ndeletePatientBillingItem = (props) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  const patientId = this.state.selectedPatient._id;\n  const date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n  const requestBody = {\n      query:`\n       mutation {deletePatientBilling (userId:\"${userId}\", patientId:\"${patientId}\",billingDate:\"${date}\",billingTitle:\"${props.title}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `};\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n    .then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n      return res.json();\n    })\n    .then(resData => {\n      const deletedPatient = resData.data.deletePatientBilling;\n      const updatedPatientId = resData.data.deletePatientBilling._id;\n      const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n      const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n      const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n      this.state.patients.push(resData.data.deletePatientBilling);\n      this.context.patients = this.state.patients;\n      const responseAlert = JSON.stringify(resData.data).slice(2,25);\n      this.setState({ userAlert: responseAlert});\n      this.fetchPatients();\n    })\n    .catch(err => {\n      this.setState({userAlert: err})\n    });\n}\n\ndeletePatientVigilanceItem = (props) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  const patientId = this.state.selectedPatient._id;\n  const date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n  const requestBody = {\n    query:`\n       mutation {deletePatientVigilance (userId:\"${userId}\", patientId:\"${patientId}\",vigilanceDate:\"${date}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n     `};\n\n  fetch('http://localhost:10000/graphql', {\n    method: 'POST',\n    body: JSON.stringify(requestBody),\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + token\n    }\n  })\n    .then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n      return res.json();\n    })\n    .then(resData => {\n      const deletedPatient = resData.data.deletePatientVigilance;\n      const updatedPatientId = resData.data.deletePatientVigilance._id;\n      const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n      const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n      const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n      this.state.patients.push(resData.data.deletePatientVigilance);\n      this.context.patients = this.state.patients;\n      const responseAlert = JSON.stringify(resData.data).slice(2,25);\n      this.setState({ userAlert: responseAlert});\n      this.fetchPatients();\n    })\n    .catch(err => {\n      this.setState({userAlert: err})\n    });\n}\n\ndeletePatientAttachmentItem = (props) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  const patientId = this.state.selectedPatient._id;\n  //   const config = {\n  //     bucketName: this.state.creds.s3.bucketName,\n  //     dirName: props.path,\n  //     region: this.state.creds.s3.region,\n  //     accessKeyId: this.state.creds.s3.accessKeyId,\n  //     secretAccessKey: this.state.creds.s3.secretAccessKey,\n  //   }\n  // const ReactS3Client = new S3(config);\n  // const filename = props.name;\n  // // const attachmentName = newFileName;\n  // //\n  // S3FileUpload\n  // .deleteFile(filename, config)\n  // .then(response => console.log(response))\n  // .catch(err => console.error(err))\n\n    const requestBody = {\n      query:`\n       mutation {deletePatientAttachment (userId:\"${userId}\", patientId:\"${patientId}\",attachmentName:\"${props.name}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `};\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n    .then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n      return res.json();\n    })\n    .then(resData => {\n      const deletedPatient = resData.data.deletePatientAttachment;\n      const updatedPatientId = resData.data.deletePatientAttachment._id;\n      const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n      const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n      const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n      this.state.patients.push(resData.data.deletePatientAttachment);\n      this.context.patients = this.state.patients;\n      const responseAlert = JSON.stringify(resData.data).slice(2,25);\n      this.setState({ userAlert: responseAlert});\n      this.fetchPatients();\n    })\n    .catch(err => {\n      this.setState({userAlert: err})\n    });\n}\n\ndeletePatientNoteItem = (props) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  const patientId = this.state.selectedPatient._id;\n  const requestBody = {\n    query:`\n    mutation {deletePatientNote (userId:\"${userId}\", patientId:\"${patientId}\",note:\"${props}\")\n    {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n  `};\n\n  fetch('http://localhost:10000/graphql', {\n    method: 'POST',\n    body: JSON.stringify(requestBody),\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + token\n    }\n  })\n  .then(res => {\n    if (res.status !== 200 && res.status !== 201) {\n      throw new Error('Failed!');\n    }\n    return res.json();\n  })\n  .then(resData => {\n    let deletedPatient = resData.data.deletePatientNote;\n    const updatedPatientId = resData.data.deletePatientNote._id;\n    const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n    const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n    const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n    this.state.patients.push(resData.data.deletePatientNote);\n    this.context.patients = this.state.patients;\n    const responseAlert = JSON.stringify(resData.data).slice(2,25);\n    this.setState({ userAlert: responseAlert});\n    this.fetchPatients();\n  })\n  .catch(err => {\n    this.setState({userAlert: err})\n  });\n}\n\ndeletePatientTagItem = (props) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  const patientId = this.state.selectedPatient._id;\n  const requestBody = {\n    query:`\n    mutation {deletePatientTag (userId:\"${userId}\", patientId:\"${patientId}\",tag:\"${props}\")\n    {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n  `};\n\n  fetch('http://localhost:10000/graphql', {\n    method: 'POST',\n    body: JSON.stringify(requestBody),\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + token\n    }\n  })\n  .then(res => {\n    if (res.status !== 200 && res.status !== 201) {\n      throw new Error('Failed!');\n    }\n    return res.json();\n  })\n  .then(resData => {\n    let deletedPatient = resData.data.deletePatientTag;\n    const updatedPatientId = resData.data.deletePatientTag._id;\n    const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n    const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n    const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n    this.state.patients.push(resData.data.deletePatientTag);\n    this.context.patients = this.state.patients;\n    const responseAlert = JSON.stringify(resData.data).slice(2,25);\n    this.setState({ userAlert: responseAlert});\n    this.fetchPatients();\n  })\n  .catch(err => {\n    this.setState({ userAlert: err})\n  });\n}\n\n\nupdatePatientSpecial (event) {\n  const field = event.target.value;\n  this.setState({ patientUpdateField: field});\n}\n\nonViewAttachment = (attachment) => {\n    this.setState({showAttachment: true})\n    const file = \"https://ent-emr-bucket.s3-us-east-2.amazonaws.com/\"+attachment.path+\"/\"+attachment.name;\n    const type = attachment.format;\n    this.setState({showThisAttachmentFile: file, showThisAttachmentType: type})\n}\n\ncloseAttachmentView = () => {\n    this.setState({showAttachment: false})\n}\n\ncreatePdfTest = (event) => {\n  event.preventDefault();\n  console.log(`\n      create pdf user otf input here...\n      ${event.target.formGridDocGenUserInput.value}\n      ${event.target.formGridDocGenVisitDate.value}\n    `);\n\n    const patient = this.state.selectedPatient;\n    const pdfData = {\n    title: \"This pdf is supplied with Patient data...\",\n    date: new Date(),\n    test: event.target.formGridDocGenUserInput.value,\n    patient: {\n      _id: patient._id,\n      title: patient.title,\n      name: patient.name,\n      dob: patient.dob,\n      age: patient.age,\n      gender: patient.gender,\n      address:{\n        number: patient.number,\n        street: patient.street,\n        town: patient.town,\n        parish: patient.parish,\n        postOffice: patient.postOffice\n      },\n      registrationDate: patient.registrationDate,\n      referralDate: patient.referralDate,\n      expirationDate: patient.expirationDate,\n      attendingPhysician:{\n        name: patient.attendingPhysician.name,\n        email: patient.attendingPhysician.email,\n        phone: patient.attendingPhysician.phone\n      },\n      referringDoctor: {\n        name: patient.referringDoctor.name,\n        email: patient.referringDoctor.email,\n        phone: patient.referringDoctor.phone\n      },\n      contact: {\n        phone: patient.contact.phone,\n        email: patient.contact.email\n      },\n      occupation:{\n        role: patient.occupation.role,\n        employer: patient.occupation.employer,\n        contact:{\n          phone: patient.occupation.contact.phone,\n          email: patient.occupation.contact.email\n        }},\n        appointments: patient.appointments,\n        consultant: patient.consultant,\n        insurance: patient.insurance,\n        nextOfKin: patient.nextOfKin,\n        complaints: patient.complaints,\n        surveys: patient.surveys,\n        systematicInquiry: patient.systematicInquiry,\n        vitals: patient.vitals,\n        examination: patient.examination,\n        history: patient.history,\n        allergies: patient.allergies,\n        medication: patient.medication,\n        investigation: patient.investigation,\n        diagnosis: patient.diagnosis,\n        treatment: patient.treatment,\n        billing: patient.billing,\n        vigilance: patient.vigilance,\n        attachments: patient.attachments,\n        notes: patient.notes,\n        tags: patient.tags\n      }\n    }\n  this.setState({creatingDocument: true, pdfType: \"test\", pdfData: pdfData})\n}\n\n\ncreateReferralInput = (event) => {\n  event.preventDefault();\n\n  if (\n    event.target.patientReferralCalendarVisitDate.value.trim().length === 0 ||\n    event.target.formGridDocGenReferralFindings.value.trim().length === 0 ||\n    event.target.formGridDocGenReferralRecommendation.value.trim().length === 0\n  ) {\n    this.setState({userAlert: \"Blank fields detected... please check your info and try again\"});\n    return;\n  }\n\n    const visitDate = new Date(event.target.patientReferralCalendarVisitDate.value).toISOString().substring(0, 10);\n    const patient = this.state.selectedPatient;\n    const visitDiagnosis = patient.diagnosis.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    const visitTreatment = patient.treatment.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    console.log(`\n        create referral user otf input here...\n        ${visitDate}\n        ${event.target.patientReferralCalendarVisitDate.value},\n        ${event.target.formGridDocGenReferralRecommendation.value},\n        ${event.target.formGridDocGenReferralFindings.value},\n        visitDiagnosis: ${JSON.stringify(visitDiagnosis)},\n      `);\n\n    if (\n      JSON.stringify(visitTreatment) === \"[]\" ||\n      JSON.stringify(visitDiagnosis) === \"[]\"\n    ) {\n      this.setState({userAlert: `Incomplete or No Visit found for : ${visitDate}. Check your info and try again.`});\n      return;\n    }\n\n    const pdfData = {\n    title: \"Referral\",\n    visitDate: visitDate,\n    findings: event.target.formGridDocGenReferralFindings.value,\n    recommendation: event.target.formGridDocGenReferralRecommendation.value,\n    patient: {\n      _id: patient._id,\n      title: patient.title,\n      name: patient.name,\n      dob: patient.dob,\n      age: patient.age,\n      gender: patient.gender,\n      address:{\n        number: patient.number,\n        street: patient.street,\n        town: patient.town,\n        parish: patient.parish,\n        postOffice: patient.postOffice\n      },\n      registrationDate: patient.registrationDate,\n      referralDate: patient.referralDate,\n      expirationDate: patient.expirationDate,\n      attendingPhysician:{\n        name: patient.attendingPhysician.name,\n        email: patient.attendingPhysician.email,\n        phone: patient.attendingPhysician.phone\n      },\n      referringDoctor: {\n        name: patient.referringDoctor.name,\n        email: patient.referringDoctor.email,\n        phone: patient.referringDoctor.phone\n      },\n      contact: {\n        phone: patient.contact.phone,\n        email: patient.contact.email\n      },\n      occupation:{\n        role: patient.occupation.role,\n        employer: patient.occupation.employer,\n        contact:{\n          phone: patient.occupation.contact.phone,\n          email: patient.occupation.contact.email\n        }},\n        appointments: patient.appointments,\n        consultant: patient.consultant,\n        insurance: patient.insurance,\n        nextOfKin: patient.nextOfKin,\n        complaints: patient.complaints,\n        surveys: patient.surveys,\n        systematicInquiry: patient.systematicInquiry,\n        vitals: patient.vitals,\n        examination: patient.examination,\n        history: patient.history,\n        allergies: patient.allergies,\n        medication: patient.medication,\n        investigation: patient.investigation,\n        diagnosis: patient.diagnosis,\n        treatment: patient.treatment,\n        billing: patient.billing,\n        vigilance: patient.vigilance,\n        attachments: patient.attachments,\n        notes: patient.notes,\n        tags: patient.tags\n      },\n      date: new Date(),\n      referral: \"test referral... now w/ input\",\n      visitDiagnosis: visitDiagnosis,\n      visitTreatment: visitTreatment,\n      letterheadImage: \"https://photos.app.goo.gl/SrVuahmr14khGBoM9\"\n    };\n\n  this.setState({ creatingDocument: true, pdfData: pdfData, pdfType: \"patientReferral\" })\n}\n\n\ncreateOperationReminderInput = (event) => {\n\n  event.preventDefault();\n\n  if (\n    event.target.formGridDocGenOperationReminderName.value.trim().length === 0 ||\n    event.target.patientOperationReminderCalendarOperationDate.value.trim().length === 0 ||\n    event.target.formGridDocGenOperationReminderTime.value.trim().length === 0 ||\n    event.target.formGridDocGenOperationReminderHospitalName.value.trim().length === 0 ||\n    event.target.formGridDocGenOperationReminderHopsitalAddress.value.trim().length === 0 ||\n    event.target.patientOperationReminderCalendarFastDate.value.trim().length === 0 ||\n    event.target.formGridDocGenOperationReminderFastTime.value.trim().length === 0 ||\n    event.target.formGridDocGenOperationReminderEstimateCost.value.trim().length === 0\n  ) {\n    this.setState({userAlert: \"Blank fields detected... please check your info and try again\"});\n    return;\n  }\n\n  const date = new Date(event.target.patientOperationReminderCalendarOperationDate.value).toISOString().substring(0, 10);\n  const fastDate = new Date(event.target.patientOperationReminderCalendarFastDate.value).toISOString().substring(0, 10);\n  const patient = this.state.selectedPatient;\n    console.log(`\n        create operation reminder user otf input here...\n      `);\n\n    const pdfData = {\n    title: \"Operation Reminder\",\n    patient: {\n      _id: patient._id,\n      title: patient.title,\n      name: patient.name,\n      dob: patient.dob,\n      age: patient.age,\n      gender: patient.gender,\n      address:{\n        number: patient.address.number,\n        street: patient.address.street,\n        town: patient.address.town,\n        parish: patient.address.parish,\n        postOffice: patient.address.postOffice\n      },\n      registrationDate: patient.registrationDate,\n      referralDate: patient.referralDate,\n      expirationDate: patient.expirationDate,\n      attendingPhysician:{\n        name: patient.attendingPhysician.name,\n        email: patient.attendingPhysician.email,\n        phone: patient.attendingPhysician.phone\n      },\n      referringDoctor: {\n        name: patient.referringDoctor.name,\n        email: patient.referringDoctor.email,\n        phone: patient.referringDoctor.phone\n      },\n      contact: {\n        phone: patient.contact.phone,\n        email: patient.contact.email\n      },\n      occupation:{\n        role: patient.occupation.role,\n        employer: patient.occupation.employer,\n        contact:{\n          phone: patient.occupation.contact.phone,\n          email: patient.occupation.contact.email\n        }},\n        appointments: patient.appointments,\n        consultant: patient.consultant,\n        insurance: patient.insurance,\n        nextOfKin: patient.nextOfKin,\n        complaints: patient.complaints,\n        surveys: patient.surveys,\n        systematicInquiry: patient.systematicInquiry,\n        vitals: patient.vitals,\n        examination: patient.examination,\n        history: patient.history,\n        allergies: patient.allergies,\n        medication: patient.medication,\n        investigation: patient.investigation,\n        diagnosis: patient.diagnosis,\n        treatment: patient.treatment,\n        billing: patient.billing,\n        vigilance: patient.vigilance,\n        attachments: patient.attachments,\n        notes: patient.notes,\n        tags: patient.tags\n      },\n      today: new Date(),\n      date: date,\n      name: event.target.formGridDocGenOperationReminderName.value,\n      time: event.target.formGridDocGenOperationReminderTime.value,\n      hospitalName: event.target.formGridDocGenOperationReminderHospitalName.value,\n      hospitalAddress: event.target.formGridDocGenOperationReminderHopsitalAddress.value,\n      fastDate: fastDate,\n      fastTime: event.target.formGridDocGenOperationReminderFastTime.value,\n      estimateCost: event.target.formGridDocGenOperationReminderEstimateCost.value,\n      letterheadImage: \"https://photos.app.goo.gl/SrVuahmr14khGBoM9\"\n    };\n\n  this.setState({ creatingDocument: true, pdfData: pdfData, pdfType: \"operationReminder\" })\n}\n\n\ncreateMiscNoteInput = (event) => {\n\n  event.preventDefault();\n\n  if (\n    event.target.formGridDocGenMiscNote1.value.trim().length === 0 ||\n    event.target.formGridDocGenMiscNote2.value.trim().length === 0\n  ) {\n    this.setState({userAlert: \"Blank fields detected... please check your info and try again\"});\n    return;\n  }\n\n  const patient = this.state.selectedPatient;\n    console.log(`\n        create misc note user otf input here...\n      `);\n\n    const pdfData = {\n    title: \"Miscellaneous Note\",\n    patient: {\n      _id: patient._id,\n      title: patient.title,\n      name: patient.name,\n      dob: patient.dob,\n      age: patient.age,\n      gender: patient.gender,\n      address:{\n        number: patient.address.number,\n        street: patient.address.street,\n        town: patient.address.town,\n        parish: patient.address.parish,\n        postOffice: patient.address.postOffice\n      },\n      registrationDate: patient.registrationDate,\n      referralDate: patient.referralDate,\n      expirationDate: patient.expirationDate,\n      attendingPhysician:{\n        name: patient.attendingPhysician.name,\n        email: patient.attendingPhysician.email,\n        phone: patient.attendingPhysician.phone\n      },\n      referringDoctor: {\n        name: patient.referringDoctor.name,\n        email: patient.referringDoctor.email,\n        phone: patient.referringDoctor.phone\n      },\n      contact: {\n        phone: patient.contact.phone,\n        email: patient.contact.email\n      },\n      occupation:{\n        role: patient.occupation.role,\n        employer: patient.occupation.employer,\n        contact:{\n          phone: patient.occupation.contact.phone,\n          email: patient.occupation.contact.email\n        }},\n        appointments: patient.appointments,\n        consultant: patient.consultant,\n        insurance: patient.insurance,\n        nextOfKin: patient.nextOfKin,\n        complaints: patient.complaints,\n        surveys: patient.surveys,\n        systematicInquiry: patient.systematicInquiry,\n        vitals: patient.vitals,\n        examination: patient.examination,\n        history: patient.history,\n        allergies: patient.allergies,\n        medication: patient.medication,\n        investigation: patient.investigation,\n        diagnosis: patient.diagnosis,\n        treatment: patient.treatment,\n        billing: patient.billing,\n        vigilance: patient.vigilance,\n        attachments: patient.attachments,\n        notes: patient.notes,\n        tags: patient.tags\n      },\n      date: new Date(),\n      note1: event.target.formGridDocGenMiscNote1.value,\n      note2: event.target.formGridDocGenMiscNote2.value,\n      letterheadImage: \"https://photos.app.goo.gl/SrVuahmr14khGBoM9\"\n    };\n\n  this.setState({ creatingDocument: true, pdfData: pdfData, pdfType: \"miscNote\" })\n}\n\n\ncreateSickNoteInput = (event) => {\n\n    event.preventDefault();\n\n    if (\n      event.target.formGridDocGenSickNoteAddress.value.trim().length === 0 ||\n      event.target.formGridDocGenSickNoteDuration.value.trim().length === 0 ||\n      event.target.patientSickNoteCalendarStartDate.value.trim().length === 0\n    ) {\n      this.setState({userAlert: \"Blank fields detected... please check your info and try again\"});\n      return;\n    }\n\n    const date = new Date().toISOString().substring(0, 10);\n    const startDate = new Date(event.target.patientSickNoteCalendarStartDate.value).toISOString().substring(0, 10);\n    const patient = this.state.selectedPatient;\n    console.log(`\n        create Sick note user otf input here...\n      `);\n\n    const pdfData = {\n    title: \"Sick Note\",\n    patient: {\n      _id: patient._id,\n      title: patient.title,\n      name: patient.name,\n      dob: patient.dob,\n      age: patient.age,\n      gender: patient.gender,\n      address:{\n        number: patient.address.number,\n        street: patient.address.street,\n        town: patient.address.town,\n        parish: patient.address.parish,\n        postOffice: patient.address.postOffice\n      },\n      registrationDate: patient.registrationDate,\n      referralDate: patient.referralDate,\n      expirationDate: patient.expirationDate,\n      attendingPhysician:{\n        name: patient.attendingPhysician.name,\n        email: patient.attendingPhysician.email,\n        phone: patient.attendingPhysician.phone\n      },\n      referringDoctor: {\n        name: patient.referringDoctor.name,\n        email: patient.referringDoctor.email,\n        phone: patient.referringDoctor.phone\n      },\n      contact: {\n        phone: patient.contact.phone,\n        email: patient.contact.email\n      },\n      occupation:{\n        role: patient.occupation.role,\n        employer: patient.occupation.employer,\n        contact:{\n          phone: patient.occupation.contact.phone,\n          email: patient.occupation.contact.email\n        }},\n        appointments: patient.appointments,\n        consultant: patient.consultant,\n        insurance: patient.insurance,\n        nextOfKin: patient.nextOfKin,\n        complaints: patient.complaints,\n        surveys: patient.surveys,\n        systematicInquiry: patient.systematicInquiry,\n        vitals: patient.vitals,\n        examination: patient.examination,\n        history: patient.history,\n        allergies: patient.allergies,\n        medication: patient.medication,\n        investigation: patient.investigation,\n        diagnosis: patient.diagnosis,\n        treatment: patient.treatment,\n        billing: patient.billing,\n        vigilance: patient.vigilance,\n        attachments: patient.attachments,\n        notes: patient.notes,\n        tags: patient.tags\n      },\n      receiverAddress: event.target.formGridDocGenSickNoteAddress.value,\n      date: date,\n      duration: event.target.formGridDocGenSickNoteDuration.value,\n      startDate: startDate,\n      letterheadImage: \"https://photos.app.goo.gl/SrVuahmr14khGBoM9\"\n    };\n\n  this.setState({ creatingDocument: true, pdfData: pdfData, pdfType: \"sickNote\" })\n}\n\ncreateDiagTestInput = (event) => {\n\n    event.preventDefault();\n\n    if (\n      event.target.patientDiagTestCalendarVisitDate.value.trim().length === 0 ||\n      event.target.formGridDocGenDiagTestReceiver.value.trim().length === 0 ||\n      event.target.formGridDocGenDiagTestRequired.value.trim().length === 0\n    ) {\n      this.setState({userAlert: \"Blank fields detected... please check your info and try again\"});\n      return;\n    }\n\n    const patient = this.state.selectedPatient;\n    const date = new Date().toISOString().substring(0, 10);\n    const visitDate = new Date(event.target.patientDiagTestCalendarVisitDate.value).toISOString().substring(0, 10);\n    const visitDiagnosis = patient.diagnosis.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n\n    console.log(`\n        create tests & screening user otf input here...\n        ${visitDate}\n      `);\n\n    if (\n      JSON.stringify(visitDiagnosis) === \"[]\"\n    ) {\n      this.setState({userAlert: `Incomplete or No Visit found for : ${visitDate}. Check your info and try again.`});\n      return;\n    }\n\n    const pdfData = {\n    title: \"Tests & Screenings\",\n    patient: {\n      _id: patient._id,\n      title: patient.title,\n      name: patient.name,\n      dob: patient.dob,\n      age: patient.age,\n      gender: patient.gender,\n      address:{\n        number: patient.address.number,\n        street: patient.address.street,\n        town: patient.address.town,\n        parish: patient.address.parish,\n        postOffice: patient.address.postOffice\n      },\n      registrationDate: patient.registrationDate,\n      referralDate: patient.referralDate,\n      expirationDate: patient.expirationDate,\n      attendingPhysician:{\n        name: patient.attendingPhysician.name,\n        email: patient.attendingPhysician.email,\n        phone: patient.attendingPhysician.phone\n      },\n      referringDoctor: {\n        name: patient.referringDoctor.name,\n        email: patient.referringDoctor.email,\n        phone: patient.referringDoctor.phone\n      },\n      contact: {\n        phone: patient.contact.phone,\n        email: patient.contact.email\n      },\n      occupation:{\n        role: patient.occupation.role,\n        employer: patient.occupation.employer,\n        contact:{\n          phone: patient.occupation.contact.phone,\n          email: patient.occupation.contact.email\n        }},\n        appointments: patient.appointments,\n        consultant: patient.consultant,\n        insurance: patient.insurance,\n        nextOfKin: patient.nextOfKin,\n        complaints: patient.complaints,\n        surveys: patient.surveys,\n        systematicInquiry: patient.systematicInquiry,\n        vitals: patient.vitals,\n        examination: patient.examination,\n        history: patient.history,\n        allergies: patient.allergies,\n        medication: patient.medication,\n        investigation: patient.investigation,\n        diagnosis: patient.diagnosis,\n        treatment: patient.treatment,\n        billing: patient.billing,\n        vigilance: patient.vigilance,\n        attachments: patient.attachments,\n        notes: patient.notes,\n        tags: patient.tags\n      },\n      visitDate: visitDate,\n      visitDiagnosis: visitDiagnosis,\n      receiver: event.target.formGridDocGenDiagTestReceiver.value,\n      requiredTests: event.target.formGridDocGenDiagTestReceiver.value,\n      date: date,\n      letterheadImage: \"https://photos.app.goo.gl/SrVuahmr14khGBoM9\"\n    };\n\n  this.setState({ creatingDocument: true, pdfData: pdfData, pdfType: \"DiagTest\" })\n}\n\n\ncreateInsuranceNoteInput = (event) => {\n\n    event.preventDefault();\n\n    if (\n      event.target.formGridDocGenInsuranceNotePolicyNumber.value.trim().length === 0 ||\n      event.target.formGridDocGenInsuranceNoteOperation.value.trim().length === 0 ||\n      event.target.patientInsuranceNoteCalendarOperationDate.value.trim().length === 0 ||\n      event.target.formGridDocGenInsuranceNoteSurgeonFee.value.trim().length === 0 ||\n      event.target.formGridDocGenInsuranceNoteAssistantSurgeonFee.value.trim().length === 0 ||\n      event.target.formGridDocGenInsuranceNoteAnesthetistFee.value.trim().length === 0\n    ) {\n      this.setState({userAlert: \"Blank fields detected... please check your info and try again\"});\n      return;\n    }\n\n    const date = new Date().toISOString().substring(0, 10);\n    const operationDate = new Date(event.target.patientInsuranceNoteCalendarOperationDate.value).toISOString().substring(0, 10);\n    const patient = this.state.selectedPatient;\n    const policyNumber = event.target.formGridDocGenInsuranceNotePolicyNumber.value;\n    const patientInsurance = patient.insurance.filter(x=> x.number === policyNumber);\n    console.log(`\n        create Insurance note user otf input here...\n        ${JSON.stringify(patientInsurance)}\n      `);\n\n    const pdfData = {\n    title: \"Insurance Note\",\n    patient: {\n      _id: patient._id,\n      title: patient.title,\n      name: patient.name,\n      dob: patient.dob,\n      age: patient.age,\n      gender: patient.gender,\n      address:{\n        number: patient.address.number,\n        street: patient.address.street,\n        town: patient.address.town,\n        parish: patient.address.parish,\n        postOffice: patient.address.postOffice\n      },\n      registrationDate: patient.registrationDate,\n      referralDate: patient.referralDate,\n      expirationDate: patient.expirationDate,\n      attendingPhysician:{\n        name: patient.attendingPhysician.name,\n        email: patient.attendingPhysician.email,\n        phone: patient.attendingPhysician.phone\n      },\n      referringDoctor: {\n        name: patient.referringDoctor.name,\n        email: patient.referringDoctor.email,\n        phone: patient.referringDoctor.phone\n      },\n      contact: {\n        phone: patient.contact.phone,\n        email: patient.contact.email\n      },\n      occupation:{\n        role: patient.occupation.role,\n        employer: patient.occupation.employer,\n        contact:{\n          phone: patient.occupation.contact.phone,\n          email: patient.occupation.contact.email\n        }},\n        appointments: patient.appointments,\n        consultant: patient.consultant,\n        insurance: patient.insurance,\n        nextOfKin: patient.nextOfKin,\n        complaints: patient.complaints,\n        surveys: patient.surveys,\n        systematicInquiry: patient.systematicInquiry,\n        vitals: patient.vitals,\n        examination: patient.examination,\n        history: patient.history,\n        allergies: patient.allergies,\n        medication: patient.medication,\n        investigation: patient.investigation,\n        diagnosis: patient.diagnosis,\n        treatment: patient.treatment,\n        billing: patient.billing,\n        vigilance: patient.vigilance,\n        attachments: patient.attachments,\n        notes: patient.notes,\n        tags: patient.tags\n      },\n      date: date,\n      patientInsurance: JSON.stringify(patientInsurance),\n      operation: event.target.formGridDocGenInsuranceNoteOperation.value,\n      operationDate: operationDate,\n      surgeonFee: event.target.formGridDocGenInsuranceNoteSurgeonFee.value,\n      assistantSurgeonFee: event.target.formGridDocGenInsuranceNoteAssistantSurgeonFee.value,\n      anesthetistsFee: event.target.formGridDocGenInsuranceNoteAnesthetistFee.value,\n      letterheadImage: \"https://photos.app.goo.gl/SrVuahmr14khGBoM9\"\n    };\n\n  this.setState({ creatingDocument: true, pdfData: pdfData, pdfType: \"insuranceNote\" })\n}\n\n\ncreatePrescriptionInput = (event) => {\n\n  event.preventDefault();\n\n  if (\n    event.target.formGridDocGenPrescriptionPescription.value.trim().length === 0 ||\n    event.target.formGridDocGenPrescriptionGeneric.value.trim().length === 0 ||\n    event.target.formGridDocGenPrescriptionRepeat.value.trim().length === 0\n  ) {\n    this.setState({userAlert: \"Blank fields detected... please check your info and try again\"});\n    return;\n  }\n\n  let generic = null;\n  if (event.target.formGridDocGenPrescriptionGeneric.checked === true) {\n    generic = \"yes\"\n  }\n  if (event.target.formGridDocGenPrescriptionGeneric.checked !== true) {\n    generic = \"no\"\n  }\n\n  const date = new Date().toISOString().substring(0, 10);\n  const patient = this.state.selectedPatient;\n  const pdfData = {\n    title: \"Prescription\",\n    patient: {\n      _id: patient._id,\n      title: patient.title,\n      name: patient.name,\n      dob: patient.dob,\n      age: patient.age,\n      gender: patient.gender,\n      address:{\n        number: patient.number,\n        street: patient.street,\n        town: patient.town,\n        parish: patient.parish,\n        postOffice: patient.postOffice\n      },\n      registrationDate: patient.registrationDate,\n      referralDate: patient.referralDate,\n      expirationDate: patient.expirationDate,\n      attendingPhysician:{\n        name: patient.attendingPhysician.name,\n        email: patient.attendingPhysician.email,\n        phone: patient.attendingPhysician.phone\n      },\n      referringDoctor: {\n        name: patient.referringDoctor.name,\n        email: patient.referringDoctor.email,\n        phone: patient.referringDoctor.phone\n      },\n      contact: {\n        phone: patient.contact.phone,\n        email: patient.contact.email\n      }\n    },\n    date: date,\n    prescription: event.target.formGridDocGenPrescriptionPescription.value,\n    generic: generic,\n    repeat: event.target.formGridDocGenPrescriptionRepeat.value,\n    consultantName: this.context.selectedUser.name,\n    letterheadImage: \"https://photos.app.goo.gl/SrVuahmr14khGBoM9\"\n  }\n  this.setState({ creatingDocument: true, pdfData: pdfData, pdfType: \"prescription\" })\n}\n\n\ncreateProcedureConsentInput = (event) => {\n\n  event.preventDefault();\n\n  if (\n    event.target.formGridDocGenProcedureConsentGiver.value.trim().length === 0 ||\n    event.target.formGridDocGenProcedureConsentGiverRelation.value.trim().length === 0 ||\n    event.target.formGridDocGenProcedureConsentProcedure.value.trim().length === 0\n  ) {\n    this.setState({userAlert: \"Blank fields detected... please check your info and try again\"});\n    return;\n  }\n\n  const date = new Date().toISOString().substring(0, 10);\n  const patient = this.state.selectedPatient;\n  const pdfData = {\n    title: \"Consent for Medical/Surgical Treatment\",\n    patient: {\n      _id: patient._id,\n      title: patient.title,\n      name: patient.name,\n      dob: patient.dob,\n      age: patient.age,\n      gender: patient.gender,\n      address:{\n        number: patient.number,\n        street: patient.street,\n        town: patient.town,\n        parish: patient.parish,\n        postOffice: patient.postOffice\n      },\n      registrationDate: patient.registrationDate,\n      referralDate: patient.referralDate,\n      expirationDate: patient.expirationDate,\n      attendingPhysician:{\n        name: patient.attendingPhysician.name,\n        email: patient.attendingPhysician.email,\n        phone: patient.attendingPhysician.phone\n      },\n      referringDoctor: {\n        name: patient.referringDoctor.name,\n        email: patient.referringDoctor.email,\n        phone: patient.referringDoctor.phone\n      },\n      contact: {\n        phone: patient.contact.phone,\n        email: patient.contact.email\n      }\n    },\n    date: date,\n    consentGiver: event.target.formGridDocGenProcedureConsentGiver.value,\n    consentGiverRelation: event.target.formGridDocGenProcedureConsentGiverRelation.value,\n    consentProcedure: event.target.formGridDocGenProcedureConsentProcedure.value,\n    referral: \"test procedure consent...\",\n    letterheadImage: \"https://photos.app.goo.gl/SrVuahmr14khGBoM9\"\n  }\n  this.setState({ creatingDocument: true, pdfData: pdfData, pdfType: \"procedureConsent\" })\n}\n\n\ncreateFitToFlyInput = (event) => {\n\n  event.preventDefault();\n\n  if (\n    event.target.formGridDocGenUnfitToFlyClinicalFeatures.value.trim().length === 0 ||\n    event.target.formGridDocGenUnfitToFlyProvisonalInvestigation.value.trim().length === 0 ||\n    event.target.formGridDocGenUnfitToFlyConclusion.value.trim().length === 0\n  ) {\n    this.setState({userAlert: \"Blank fields detected... please check your info and try again\"});\n    return;\n  }\n\n  const date = new Date().toISOString().substring(0, 10);\n  const patient = this.state.selectedPatient;\n  const pdfData = {\n    title: \"Unfit-to-Fly Authorization\",\n    patient: {\n      _id: patient._id,\n      title: patient.title,\n      name: patient.name,\n      dob: patient.dob,\n      age: patient.age,\n      gender: patient.gender,\n      address:{\n        number: patient.number,\n        street: patient.street,\n        town: patient.town,\n        parish: patient.parish,\n        postOffice: patient.postOffice\n      },\n      registrationDate: patient.registrationDate,\n      referralDate: patient.referralDate,\n      expirationDate: patient.expirationDate,\n      attendingPhysician:{\n        name: patient.attendingPhysician.name,\n        email: patient.attendingPhysician.email,\n        phone: patient.attendingPhysician.phone\n      },\n      referringDoctor: {\n        name: patient.referringDoctor.name,\n        email: patient.referringDoctor.email,\n        phone: patient.referringDoctor.phone\n      },\n      contact: {\n        phone: patient.contact.phone,\n        email: patient.contact.email\n      }\n    },\n    date: date,\n    clinicalFeatures: event.target.formGridDocGenUnfitToFlyClinicalFeatures.value,\n    provisionalInvestigation: event.target.formGridDocGenUnfitToFlyProvisonalInvestigation.value,\n    conclusion: event.target.formGridDocGenUnfitToFlyConclusion.value,\n    input: event.target.formGridDocGenProcedureConsent.value,\n    referral: \"test fit-to-fly authorization...\",\n    letterheadImage: \"https://photos.app.goo.gl/SrVuahmr14khGBoM9\"\n  }\n  this.setState({ creatingDocument: true, pdfData: pdfData, pdfType: \"fitToFlyAuthorization\" })\n}\n\ncreateTreatmentInstructionInput = (event) => {\n\n  event.preventDefault();\n\n  if (\n    event.target.formGridDocGenTreatmentInstruction.value.trim().length === 0\n  ) {\n    this.setState({userAlert: \"Blank fields detected... please check your info and try again\"});\n    return;\n  }\n\n  const date = new Date().toISOString().substring(0, 10);\n  const patient = this.state.selectedPatient;\n  const pdfData = {\n    title: \"Treatment Instructions\",\n    patient: {\n      _id: patient._id,\n      title: patient.title,\n      name: patient.name,\n      dob: patient.dob,\n      age: patient.age,\n      gender: patient.gender,\n      address:{\n        number: patient.number,\n        street: patient.street,\n        town: patient.town,\n        parish: patient.parish,\n        postOffice: patient.postOffice\n      },\n      registrationDate: patient.registrationDate,\n      referralDate: patient.referralDate,\n      expirationDate: patient.expirationDate,\n      attendingPhysician:{\n        name: patient.attendingPhysician.name,\n        email: patient.attendingPhysician.email,\n        phone: patient.attendingPhysician.phone\n      },\n      referringDoctor: {\n        name: patient.referringDoctor.name,\n        email: patient.referringDoctor.email,\n        phone: patient.referringDoctor.phone\n      },\n      contact: {\n        phone: patient.contact.phone,\n        email: patient.contact.email\n      }\n    },\n    date: date,\n    treatmentInstruction: event.target.formGridDocGenTreatmentInstruction.value,\n    referral: \"test Treatment Instruction...\",\n    letterheadImage: \"https://photos.app.goo.gl/SrVuahmr14khGBoM9\"\n  }\n  this.setState({ creatingDocument: true, pdfData: pdfData, pdfType: \"treatmentInstruction\" })\n}\n\nclosePdfCreator = () => {\n  this.setState({creatingDocument: false, pdfData: null, pdfType: null } )\n}\n\nshowDetailHandler = patientId => {\n  this.setState({ visitList: [] })\n  this.setState(prevState => {\n    const selectedPatient = prevState.patients.find(e => e._id === patientId);\n    this.context.selectedPatient = selectedPatient;\n    this.context.selectedPatientId = selectedPatient._id;\n    return { selectedPatient: selectedPatient };\n  });\n};\n\nselectVisit = (props) => {\n  this.setState({ selectedVisit: props })\n}\n\ncloseVisit = () => {\n  this.setState({\n    visit: null,\n    selectedVisit: null,\n  })\n}\n\ncreateVisitChecklistUpdate = (props) => {\n  this.setState({ userAlert: `creating visit: ${props} addedd...`})\n  let newState = Object.assign({}, this.state);\n  newState.createVisitChecklist[props] = true;\n  this.setState(newState);\n}\n\nnewVisitComplete = () => {\n  this.setState({\n      userAlert: \"New Visit creation complete...\",\n      newVisit: false,\n      createVisitChecklist: {\n        consultant: true,\n        complaint: true,\n        diagnosis: true,\n        examination: true,\n        investigation: true,\n        survey: true,\n        systematicInquiry: true,\n        treatment: true,\n        vitals: true,\n        billing: true,\n        vigilance: true\n      }\n  })\n}\n\nshowSidebar = () => {\n  console.log(`\n    showing sidebar...\n    `);\n    this.setState({\n      sidebarShow: true,\n      mCol2Size: 9\n    })\n}\n\nhideSidebar = () => {\n  console.log(`\n    hiding sidebar...\n    `);\n    this.setState({\n      sidebarShow: false,\n      mCol2Size: 11\n    })\n}\n\ncomponentWillUnmount() {\n  this.isActive = false;\n}\n\nrender() {\n    return (\n    <React.Fragment>\n    {this.state.showAttachment === true && (\n      <AttachmentViewer\n        onCloseAttachmentView={this.closeAttachmentView}\n        attachmentFile={this.state.showThisAttachmentFile}\n        attachmentType={this.state.showThisAttachmentType}\n      />\n    )}\n    {this.state.creatingDocument === true && (\n    <PdfCreator\n      pdfType={this.state.pdfType}\n      pdfData={this.state.pdfData}\n      onClosePdfCreator={this.closePdfCreator}\n    />\n    )}\n    <AlertBox\n      authUserId={this.context.userId}\n      alert={this.state.userAlert}\n    />\n    <SidebarControl\n      onShowSidebar={this.showSidebar}\n      onHideSidebar={this.hideSidebar}\n    />\n\n    <Accordion>\n    <Row>\n\n    {this.state.sidebarShow === true && (\n      <Col md={3} className=\"MasterCol1\">\n      <SidebarPage/>\n      </Col>\n    )}\n\n    <Col md={this.state.mCol2Size} className=\"MasterCol2\">\n    <Container className=\"containerCombinedDetail\">\n      <Tab.Container id=\"left-tabs-example\" defaultActiveKey=\"patientDetail\">\n        <Row>\n          <Col md={2} className=\"vertMenu\">\n            <Nav variant=\"pills\" className=\"flex-column\">\n              <Nav.Item>\n                <Nav.Link eventKey=\"MasterList\">MASTER LIST</Nav.Link>\n              </Nav.Item>\n              <Nav.Item>\n                <Nav.Link eventKey=\"disabled\" disabled>Search:</Nav.Link>\n              </Nav.Item>\n              <Nav.Item>\n                <Nav.Link eventKey=\"SearchInput\">Input</Nav.Link>\n              </Nav.Item>\n              <Nav.Item>\n                <Nav.Link eventKey=\"SearchResult\">Results</Nav.Link>\n              </Nav.Item>\n              <Nav.Item>\n                <Nav.Link eventKey=\"patientDetail\">Selected</Nav.Link>\n              </Nav.Item>\n              <Nav.Item>\n                <Nav.Link eventKey=\"patientCreate\">Create New</Nav.Link>\n              </Nav.Item>\n              <Nav.Item>\n                <Nav.Link eventKey=\"disabled\" disabled>Edit:</Nav.Link>\n              </Nav.Item>\n              <Nav.Item>\n                <Nav.Link eventKey=\"patientEditDemographics\">Demographics</Nav.Link>\n              </Nav.Item>\n              <Nav.Item>\n                <Nav.Link eventKey=\"patientEditField\">Single Field</Nav.Link>\n              </Nav.Item>\n              <Nav.Item>\n                <Nav.Link eventKey=\"disabled\" disabled>Add:</Nav.Link>\n              </Nav.Item>\n              <Nav.Item>\n                <Nav.Link eventKey=\"patientAddVisit\">Visit</Nav.Link>\n              </Nav.Item>\n              <Nav.Item>\n                <Nav.Link eventKey=\"patientEditConsultant\">Consultant</Nav.Link>\n              </Nav.Item>\n              <Nav.Item>\n                <Nav.Link eventKey=\"patientEditInsurance\">Insurance</Nav.Link>\n              </Nav.Item>\n              <Nav.Item>\n                <Nav.Link eventKey=\"patientEditNextOfKin\">Next of Kin</Nav.Link>\n              </Nav.Item>\n              <Nav.Item>\n                <Nav.Link eventKey=\"patientEditComplaint\">History</Nav.Link>\n              </Nav.Item>\n              <Nav.Item>\n                <Nav.Link eventKey=\"patientEditSurvey\">Survey</Nav.Link>\n              </Nav.Item>\n              <Nav.Item>\n                <Nav.Link eventKey=\"patientEditSystematicInquiry\">Systematic Inquiry</Nav.Link>\n              </Nav.Item>\n              <Nav.Item>\n                <Nav.Link eventKey=\"patientEditVitals\">Vitals</Nav.Link>\n              </Nav.Item>\n              <Nav.Item>\n                <Nav.Link eventKey=\"patientEditExamination\">Examination</Nav.Link>\n              </Nav.Item>\n              <Nav.Item>\n                <Nav.Link eventKey=\"patientEditHistory\">Past History</Nav.Link>\n              </Nav.Item>\n              <Nav.Item>\n                <Nav.Link eventKey=\"patientEditAllergies\">Allergies</Nav.Link>\n              </Nav.Item>\n              <Nav.Item>\n                <Nav.Link eventKey=\"patientEditMedication\">Medication</Nav.Link>\n              </Nav.Item>\n              <Nav.Item>\n                <Nav.Link eventKey=\"patientEditInvestigation\">Investigation</Nav.Link>\n              </Nav.Item>\n              <Nav.Item>\n                <Nav.Link eventKey=\"patientEditDiagnosis\">Diagnosis</Nav.Link>\n              </Nav.Item>\n              <Nav.Item>\n                <Nav.Link eventKey=\"patientEditTreatment\">Treatment</Nav.Link>\n              </Nav.Item>\n              <Nav.Item>\n                <Nav.Link eventKey=\"patientEditBilling\">Billing</Nav.Link>\n              </Nav.Item>\n              <Nav.Item>\n                <Nav.Link eventKey=\"patientEditVigilance\">Vigilance</Nav.Link>\n              </Nav.Item>\n              <Nav.Item>\n                <Nav.Link eventKey=\"patientEditAttachment\">Attachment</Nav.Link>\n              </Nav.Item>\n              <Nav.Item>\n                <Nav.Link eventKey=\"patientEditNote\">Note</Nav.Link>\n              </Nav.Item>\n              <Nav.Item>\n                <Nav.Link eventKey=\"patientEditTag\">Tag</Nav.Link>\n              </Nav.Item>\n\n            </Nav>\n          </Col>\n\n          <Col md={10}>\n            <Tab.Content>\n              <Tab.Pane eventKey=\"patientDetail\">\n                {this.state.selectedPatient === null && (\n                  <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                    Select a Patient from the Master List\n                  </Button>\n                )}\n                {this.state.selectedPatient === null && (\n                  <Button variant=\"outline-danger\" size=\"lg\" className=\"confirmEditButton\">\n                      Don't forget to select someone from the Staff page before editing Patient Consultant information !!!\n                  </Button>\n                )}\n                {this.state.isLoading === false &&\n                  this.state.selectedPatient !== null && (\n                    <PatientDetail\n                    authUserId={this.context.userId}\n                    token={this.context.token}\n                    patient={this.state.selectedPatient}\n                    users={this.context.users}\n                    onEdit={this.startUpdatePatientHandler}\n                    canDelete={this.state.canDelete}\n                    onDelete={this.modalDeleteHandler}\n                    onGetVisit={this.getPatientVisit}\n                    visit={this.state.visit}\n                    selectedVisit={this.state.selectedVisit}\n                    fetchUsers={this.fetchUsers}\n                    appointmentDelete={this.deletePatientAppointmentItem}\n                    consultantDelete={this.deletePatientConsultantItem}\n                    insuranceDelete={this.deletePatientInsuranceItem}\n                    nextOfKinDelete={this.deletePatientNextOfKinItem}\n                    complaintDelete={this.deletePatientComplaintItem}\n                    surveyDelete={this.deletePatientSurveyItem}\n                    systematicInquiryDelete={this.deletePatientSystematicInquiryItem}\n                    vitalsDelete={this.deletePatientVitalsItem}\n                    examinationDelete={this.deletePatientExaminationItem}\n                    historyDelete={this.deletePatientHistoryItem}\n                    allergiesDelete={this.deletePatientAllergiesItem}\n                    medicationDelete={this.deletePatientMedicationItem}\n                    investigationDelete={this.deletePatientInvestigationItem}\n                    diagnosisDelete={this.deletePatientDiagnosisItem}\n                    treatmentDelete={this.deletePatientTreatmentItem}\n                    billingDelete={this.deletePatientBillingItem}\n                    vigilanceDelete={this.deletePatientVigilanceItem}\n                    attachmentDelete={this.deletePatientAttachmentItem}\n                    noteDelete={this.deletePatientNoteItem}\n                    tagDelete={this.deletePatientTagItem}\n                    onViewAttachment={this.onViewAttachment}\n                    onCreatePdfTest={this.createPdfTest}\n                    onCreateReferralInput={this.createReferralInput}\n                    onCreateOperationReminderInput={this.createOperationReminderInput}\n                    onCreateMiscNoteInput={this.createMiscNoteInput}\n                    onCreateSickNoteInput={this.createSickNoteInput}\n                    onCreateDiagTestInput={this.createDiagTestInput}\n                    onCreateInsuranceNoteInput={this.createInsuranceNoteInput}\n                    onCreatePrescriptionInput={this.createPrescriptionInput}\n                    onCreateProcedureConsentInput={this.createProcedureConsentInput}\n                    onCreateFitToFlyInput={this.createFitToFlyInput}\n                    onCreateTreatmentInstructionInput={this.createTreatmentInstructionInput}\n                    onGetVisitList={this.getVisitList}\n                    visitList={this.state.visitList}\n                    onSelectVisit={this.selectVisit}\n                    onCloseVisit={this.closeVisit}\n                    onSortVisitListAsc={this.getVisitListAsc}\n                    onSortVisitListDesc={this.getVisitListDesc}\n                  />\n                )}\n              </Tab.Pane>\n\n              <Tab.Pane eventKey=\"patientCreate\">\n                <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" onClick={this.startCreatePatientHandler} >Create NEW Patient Profile</Button>\n                {this.state.creating && (\n                  <CreatePatientForm\n                    canCancel\n                    canConfirm\n                    onCancel={this.modalCancelHandler}\n                    onConfirm={this.modalConfirmHandler}\n                    confirmText=\"Confirm\"\n                  />\n                )}\n              </Tab.Pane>\n\n              <Tab.Pane eventKey=\"patientAddVisit\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              { this.state.selectedPatient !== null &&\n                this.state.newVisit !== true &&\n              (<Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" onClick={this.startCreateVisitHandler} >Add NEW Visit</Button>\n              )}\n                {this.state.selectedPatient !== null &&\n                  this.state.newVisit === true && (\n                    <Accordion defaultActiveKey=\"0\">\n                      <Card>\n                        <Card.Header>\n                          <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"0\">\n                            Guide:\n                          </Accordion.Toggle>\n                        </Card.Header>\n                        <Accordion.Collapse eventKey=\"0\">\n                          <Card.Body>\n                          <Card.Text>\n                            To create a NEW Patient Visit, fill in the forms below.\n                          </Card.Text>\n                          <Card.Text>\n                            Everytime you submit a form with new info, a new item is added to the current Patient visit.\n                          </Card.Text>\n                          <Card.Text>\n                            When you are done with a section click the GREEN Done adding Complaints, Vitals etc and continue to the next form.\n                          </Card.Text>\n                          <Card.Text>\n                            Once you have submitted all the information required scroll to the bottom and click the green button.\n                          </Card.Text>\n                          </Card.Body>\n                        </Accordion.Collapse>\n                      </Card>\n                      <Card>\n                        <Card.Header>\n                          <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"1\">\n                            Consultant\n                          </Accordion.Toggle>\n                        </Card.Header>\n                        <Accordion.Collapse eventKey=\"1\">\n                          <Card.Body>\n                          Add Consultant form:\n                          {this.state.createVisitChecklist.consultant === true && (\n                            <Button variant=\"warning\" size=\"lg\" className=\"formButton\">\n                              Consultant for this Visit has already been added!!\n                            </Button>\n                          )}\n                          {this.state.createVisitChecklist.consultant === false &&\n                          JSON.stringify(this.context.selectedUser) === \"{}\" && (\n                            <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                              Select someone from the Staff page\n                            </Button>\n                          )}\n                          {this.state.createVisitChecklist.consultant === false &&\n                          this.context.selectedUser !== null && (\n                            <Row>\n                            <Card.Text>Add Consultant: {this.context.selectedUser.name}  ...</Card.Text>\n                            <Card.Text> To Paitient: {this.state.selectedPatient.name} ??</Card.Text>\n                            </Row>\n                          )}\n                          {this.state.createVisitChecklist.consultant === false &&\n                          this.context.selectedUser !== null && (\n                            <UpdatePatientConsultantForm\n                              authUserId={this.context.userId}\n                              canConfirm\n                              onCancel={this.modalCancelHandler}\n                              onConfirm={this.updatePatientConsultantHandler}\n                              confirmText=\"Confirm\"\n                              consultant={this.context.selectedUser}\n                              visit\n                              onCreateVisitChecklistUpdate={this.createVisitChecklistUpdate}\n                            />\n                          )}\n                          </Card.Body>\n                        </Accordion.Collapse>\n                      </Card>\n                      <Card>\n                        <Card.Header>\n                          <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"2\">\n                            Complaint\n                          </Accordion.Toggle>\n                        </Card.Header>\n                        <Accordion.Collapse eventKey=\"2\">\n                          <Card.Body>\n                          Add Complaint form:\n                          {this.state.createVisitChecklist.complaint === true && (\n                            <Button variant=\"warning\" size=\"lg\" className=\"formButton\">\n                              Complaint for this Visit has already been added!!\n                            </Button>\n                          )}\n                          {this.state.createVisitChecklist.complaint === false && (\n                            <UpdatePatientComplaintForm\n                              authUserId={this.context.userId}\n                              canConfirm\n                              onCancel={this.modalCancelHandler}\n                              onConfirm={this.updatePatientComplaintHandler}\n                              confirmText=\"Confirm\"\n                              patient={this.state.selectedPatient}\n                              visit\n                              onCreateVisitChecklistUpdate={this.createVisitChecklistUpdate}\n                            />\n                          )}\n                          </Card.Body>\n                        </Accordion.Collapse>\n                      </Card>\n                      <Card>\n                        <Card.Header>\n                          <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"3\">\n                            Vitals\n                          </Accordion.Toggle>\n                        </Card.Header>\n                        <Accordion.Collapse eventKey=\"3\">\n                          <Card.Body>\n                          Add Vitals form:\n                          {this.state.createVisitChecklist.vitals === true && (\n                            <Button variant=\"warning\" size=\"lg\" className=\"formButton\">\n                            Vitals for this Visit have already been added!!\n                            </Button>\n                          )}\n                          {this.state.createVisitChecklist.vitals === false && (\n                            <UpdatePatientVitalsForm\n                              authUserId={this.context.userId}\n                              canConfirm\n                              onCancel={this.modalCancelHandler}\n                              onConfirm={this.updatePatientVitalsHandler}\n                              confirmText=\"Confirm\"\n                              patient={this.state.selectedPatient}\n                              visit\n                              onCreateVisitChecklistUpdate={this.createVisitChecklistUpdate}\n                            />\n                          )}\n                          </Card.Body>\n                        </Accordion.Collapse>\n                      </Card>\n                      <Card>\n                        <Card.Header>\n                          <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"4\">\n                            Examination\n                          </Accordion.Toggle>\n                        </Card.Header>\n                        <Accordion.Collapse eventKey=\"4\">\n                          <Card.Body>\n                          Add Examination form:\n                          {this.state.createVisitChecklist.examination === true && (\n                            <Button variant=\"warning\" size=\"lg\" className=\"formButton\">\n                            Examination for this Visit has already been added!!\n                            </Button>\n                          )}\n                          {this.state.createVisitChecklist.examination === false && (\n                            <UpdatePatientExaminationForm\n                              authUserId={this.context.userId}\n                              canConfirm\n                              onCancel={this.modalCancelHandler}\n                              onConfirm={this.updatePatientExaminationHandler}\n                              confirmText=\"Confirm\"\n                              patient={this.state.selectedPatient}\n                              visit\n                              onCreateVisitChecklistUpdate={this.createVisitChecklistUpdate}\n                            />\n                          )}\n                          </Card.Body>\n                        </Accordion.Collapse>\n                      </Card>\n                      <Card>\n                        <Card.Header>\n                          <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"5\">\n                            Survey\n                          </Accordion.Toggle>\n                        </Card.Header>\n                        <Accordion.Collapse eventKey=\"5\">\n                          <Card.Body>\n                          Add Survey form:\n                          {this.state.createVisitChecklist.survey === true && (\n                            <Button variant=\"warning\" size=\"lg\" className=\"formButton\">\n                            Survey for this Visit has already been added!!\n                            </Button>\n                          )}\n                          {this.state.createVisitChecklist.survey === false && (\n                            <UpdatePatientSurveyForm\n                              authUserId={this.context.userId}\n                              canConfirm\n                              onCancel={this.modalCancelHandler}\n                              onConfirm={this.updatePatientSurveyHandler}\n                              confirmText=\"Confirm\"\n                              patient={this.state.selectedPatient}\n                              visit\n                              onCreateVisitChecklistUpdate={this.createVisitChecklistUpdate}\n                            />\n                          )}\n                          </Card.Body>\n                        </Accordion.Collapse>\n                      </Card>\n                      <Card>\n                        <Card.Header>\n                          <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"22\">\n                            SystematicInquiry\n                          </Accordion.Toggle>\n                        </Card.Header>\n                        <Accordion.Collapse eventKey=\"22\">\n                          <Card.Body>\n                          Add Systematic Inquiry form:\n                          {this.state.createVisitChecklist.systematicInquiry === true && (\n                            <Button variant=\"warning\" size=\"lg\" className=\"formButton\">\n                            Systematic Inquiry for this Visit has already been added!!\n                            </Button>\n                          )}\n                          {this.state.createVisitChecklist.systematicInquiry === false && (\n                            <UpdatePatientSystematicInquiryForm\n                              authUserId={this.context.userId}\n                              canConfirm\n                              onCancel={this.modalCancelHandler}\n                              onConfirm={this.updatePatientSystematicInquiryHandler}\n                              confirmText=\"Confirm\"\n                              patient={this.state.selectedPatient}\n                              visit\n                              onCreateVisitChecklistUpdate={this.createVisitChecklistUpdate}\n                            />\n                          )}\n                          </Card.Body>\n                        </Accordion.Collapse>\n                      </Card>\n                      <Card>\n                        <Card.Header>\n                          <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"6\">\n                            Investigation\n                          </Accordion.Toggle>\n                        </Card.Header>\n                        <Accordion.Collapse eventKey=\"6\">\n                          <Card.Body>\n                          Add Investigation form:\n                          {this.state.createVisitChecklist.investigation === true && (\n                            <Button variant=\"warning\" size=\"lg\" className=\"formButton\">\n                            Investigation for this Visit has already been added!!\n                            </Button>\n                          )}\n                          {this.state.createVisitChecklist.investigation === false && (\n                            <UpdatePatientInvestigationForm\n                              authUserId={this.context.userId}\n                              canConfirm\n                              onCancel={this.modalCancelHandler}\n                              onConfirm={this.updatePatientInvestigationHandler}\n                              confirmText=\"Confirm\"\n                              patient={this.state.selectedPatient}\n                              visit\n                              onCreateVisitChecklistUpdate={this.createVisitChecklistUpdate}\n                            />\n                          )}\n                          </Card.Body>\n                        </Accordion.Collapse>\n                      </Card>\n                      <Card>\n                        <Card.Header>\n                          <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"7\">\n                            Diagnosis\n                          </Accordion.Toggle>\n                        </Card.Header>\n                        <Accordion.Collapse eventKey=\"7\">\n                          <Card.Body>\n                          Add Diagnosis form:\n                          {this.state.createVisitChecklist.diagnosis === true && (\n                            <Button variant=\"warning\" size=\"lg\" className=\"formButton\">\n                              Diagnosis for this Visit has already been added!!\n                            </Button>\n                          )}\n                          {this.state.createVisitChecklist.diagnosis === false && (\n                            <UpdatePatientDiagnosisForm\n                              authUserId={this.context.userId}\n                              canConfirm\n                              onCancel={this.modalCancelHandler}\n                              onConfirm={this.updatePatientDiagnosisHandler}\n                              confirmText=\"Confirm\"\n                              patient={this.state.selectedPatient}\n                              visit\n                              onCreateVisitChecklistUpdate={this.createVisitChecklistUpdate}\n                            />\n                          )}\n                          </Card.Body>\n                        </Accordion.Collapse>\n                      </Card>\n                      <Card>\n                        <Card.Header>\n                          <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"8\">\n                            Treatment\n                          </Accordion.Toggle>\n                        </Card.Header>\n                        <Accordion.Collapse eventKey=\"8\">\n                          <Card.Body>\n                          Add Treatment form:\n                          {this.state.createVisitChecklist.treatment === true && (\n                            <Button variant=\"warning\" size=\"lg\" className=\"formButton\">\n                            Treatment for this Visit has already been added!!\n                            </Button>\n                          )}\n                          {this.state.createVisitChecklist.treatment === false && (\n                            <UpdatePatientTreatmentForm\n                              authUserId={this.context.userId}\n                              canCancel\n                              canConfirm\n                              onCancel={this.modalCancelHandler}\n                              onConfirm={this.updatePatientTreatmentHandler}\n                              confirmText=\"Confirm\"\n                              patient={this.state.selectedPatient}\n                              visit\n                              onCreateVisitChecklistUpdate={this.createVisitChecklistUpdate}\n                            />\n                          )}\n                          </Card.Body>\n                        </Accordion.Collapse>\n                      </Card>\n                      <Card>\n                        <Card.Header>\n                          <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"9\">\n                            Billing\n                          </Accordion.Toggle>\n                        </Card.Header>\n                        <Accordion.Collapse eventKey=\"9\">\n                          <Card.Body>\n                          Add Billing form:\n                          {this.state.createVisitChecklist.billing === true && (\n                            <Button variant=\"warning\" size=\"lg\" className=\"formButton\">\n                              Billing for this Visit has already been added!!\n                            </Button>\n                          )}\n                          {this.state.createVisitChecklist.billing === false && (\n                          <UpdatePatientBillingForm\n                              authUserId={this.context.userId}\n                              canConfirm\n                              onCancel={this.modalCancelHandler}\n                              onConfirm={this.updatePatientBillingHandler}\n                              confirmText=\"Confirm\"\n                              patient={this.state.selectedPatient}\n                              visit\n                              onCreateVisitChecklistUpdate={this.createVisitChecklistUpdate}\n                            />\n                          )}\n                          </Card.Body>\n                        </Accordion.Collapse>\n                      </Card>\n                      <Card>\n                        <Card.Header>\n                          <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"23\">\n                            Vigilance\n                          </Accordion.Toggle>\n                        </Card.Header>\n                        <Accordion.Collapse eventKey=\"23\">\n                          <Card.Body>\n                          Add Vigilance form:\n                          {this.state.createVisitChecklist.vigilance === true && (\n                            <Button variant=\"warning\" size=\"lg\" className=\"formButton\">\n                            Vigilance for this Visit has already been added!!\n                            </Button>\n                          )}\n                          {this.state.createVisitChecklist.vigilance === false && (\n                            <UpdatePatientVigilanceForm\n                              authUserId={this.context.userId}\n                              canConfirm\n                              onCancel={this.modalCancelHandler}\n                              onConfirm={this.updatePatientVigilanceHandler}\n                              confirmText=\"Confirm\"\n                              patient={this.state.selectedPatient}\n                              visit\n                              onCreateVisitChecklistUpdate={this.createVisitChecklistUpdate}\n                            />\n                          )}\n                          </Card.Body>\n                        </Accordion.Collapse>\n                      </Card>\n                      <Card>\n                        <Card.Header>\n                          <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"10\">\n                            Finished ?\n                          </Accordion.Toggle>\n                        </Card.Header>\n                        <Accordion.Collapse eventKey=\"10\">\n                          <Card.Body>\n                          <Button variant=\"success\" className=\"formButton\" onClick={this.newVisitComplete}>\n                          Done creating Visit\n                          </Button>\n                          </Card.Body>\n                        </Accordion.Collapse>\n                      </Card>\n                    </Accordion>\n                )}\n              </Tab.Pane>\n\n              <Tab.Pane eventKey=\"patientEditDemographics\">\n                {this.state.selectedPatient === null && (\n                  <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                    Select a Patient from the Master List\n                  </Button>\n                )}\n                {this.state.selectedPatient !== null && (\n                  <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" onClick={this.startUpdatePatientHandler}>Edit Demographics</Button>\n                )}\n                {this.state.updating &&\n                this.state.selectedPatient !== null && (\n                  <UpdatePatientForm\n                    authUserId={this.context.userId}\n                    canCancel\n                    canConfirm\n                    onCancel={this.modalCancelHandler}\n                    onConfirm={this.modalConfirmUpdateHandler}\n                    confirmText=\"Confirm\"\n                    patient={this.state.selectedPatient}\n                  />\n                )}\n              </Tab.Pane>\n\n              <Tab.Pane eventKey=\"patientEditField\">\n                {this.state.selectedPatient === null && (\n                  <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                    Select a Patient from the Master List\n                  </Button>\n                )}\n                {this.state.selectedPatient !== null && (\n                  <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" onClick={this.startUpdatePatientHandler}>Edit a Single Field</Button>\n                )}\n                {this.state.updating &&\n                this.state.selectedPatient !== null && (\n                  <UpdatePatientFieldForm\n                    authUserId={this.context.userId}\n                    canCancel\n                    canConfirm\n                    onCancel={this.modalCancelHandler}\n                    onConfirm={this.modalConfirmUpdateFieldHandler}\n                    confirmText=\"Confirm\"\n                    patient={this.state.selectedPatient}\n                  />\n                )}\n              </Tab.Pane>\n\n              <Tab.Pane eventKey=\"patientEditConsultant\">\n                {this.state.selectedPatient === null && (\n                  <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                    Select a Patient from the Master List\n                  </Button>\n                )}\n                {this.state.selectedPatient !== null && (\n                  <Button variant=\"outline-primary\" value='consultant' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add a Consultant</Button>\n                )}\n                {this.state.patientUpdateField === 'consultant' &&\n                this.state.selectedPatient !== null &&\n                this.context.selectedUser === null && (\n                  <Row>\n                  <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                    Select someone from the Staff page\n                  </Button>\n                  </Row>\n                )}\n                {this.state.patientUpdateField === 'consultant' &&\n                this.state.selectedPatient !== null && (\n                  <Row>\n                  <p>Add Consultant: {this.context.selectedUser.name}  ...</p>\n                  <p> To Paitient: {this.state.selectedPatient.name} ??</p>\n                  </Row>\n                )}\n                {this.state.patientUpdateField === 'consultant' &&\n                this.state.selectedPatient !== null && (\n                  <UpdatePatientConsultantForm\n                    authUserId={this.context.userId}\n                    canCancel\n                    canConfirm\n                    onCancel={this.modalCancelHandler}\n                    onConfirm={this.updatePatientConsultantHandler}\n                    confirmText=\"Confirm\"\n                    consultant={this.context.selectedUser}\n                  />\n                )}\n              </Tab.Pane>\n\n              <Tab.Pane eventKey=\"patientEditInsurance\">\n                {this.state.selectedPatient === null && (\n                  <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                    Select a Patient from the Master List\n                  </Button>\n                )}\n                {this.state.selectedPatient !== null && (\n                  <Button variant=\"outline-primary\" value='insurance' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Insurance</Button>\n                )}\n                {this.state.patientUpdateField === 'insurance' &&\n                this.state.selectedPatient !== null && (\n                  <UpdatePatientInsuranceForm\n                    authUserId={this.context.userId}\n                    canCancel\n                    canConfirm\n                    onCancel={this.modalCancelHandler}\n                    onConfirm={this.updatePatientInsuranceHandler}\n                    confirmText=\"Confirm\"\n                    patient={this.state.selectedPatient}\n                  />\n                )}\n              </Tab.Pane>\n\n              <Tab.Pane eventKey=\"patientEditNextOfKin\">\n                {this.state.selectedPatient === null && (\n                  <Button variant=\"outline-warning\" size=\"lg\">\n                    Select a Patient from the Master List\n                  </Button>\n                )}\n                {this.state.selectedPatient !== null && (\n                  <Button variant=\"outline-primary\" value='nextOfKin' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add NextOfKin</Button>\n                )}\n                {this.state.patientUpdateField === 'nextOfKin' &&\n                this.state.selectedPatient !== null\n                && (\n                  <UpdatePatientNextOfKinForm\n                    authUserId={this.context.userId}\n                    canCancel\n                    canConfirm\n                    onCancel={this.modalCancelHandler}\n                    onConfirm={this.updatePatientNextOfKinHandler}\n                    confirmText=\"Confirm\"\n                    patient={this.state.selectedPatient}\n                  />\n                )}\n              </Tab.Pane>\n\n              <Tab.Pane eventKey=\"patientEditComplaint\">\n                {this.state.selectedPatient === null && (\n                  <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                    Select a Patient from the Master List\n                  </Button>\n                )}\n                {this.state.selectedPatient !== null && (\n                  <Button variant=\"outline-primary\" value='complaint' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add History</Button>\n                )}\n                {this.state.patientUpdateField === 'complaint' &&\n                this.state.selectedPatient !== null && (\n                  <UpdatePatientComplaintForm\n                    authUserId={this.context.userId}\n                    canCancel\n                    canConfirm\n                    onCancel={this.modalCancelHandler}\n                    onConfirm={this.updatePatientComplaintHandler}\n                    confirmText=\"Confirm\"\n                    patient={this.state.selectedPatient}\n                  />\n                )}\n              </Tab.Pane>\n\n              <Tab.Pane eventKey=\"patientEditSurvey\">\n                {this.state.selectedPatient === null && (\n                  <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                    Select a Patient from the Master List\n                  </Button>\n                )}\n                {this.state.selectedPatient !== null && (\n                  <Button variant=\"outline-primary\" value='survey' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Survey</Button>\n                )}\n                {this.state.patientUpdateField === 'survey' &&\n                this.state.selectedPatient !== null && (\n                  <UpdatePatientSurveyForm\n                    authUserId={this.context.userId}\n                    canCancel\n                    canConfirm\n                    onCancel={this.modalCancelHandler}\n                    onConfirm={this.updatePatientSurveyHandler}\n                    confirmText=\"Confirm\"\n                    patient={this.state.selectedPatient}\n                  />\n                )}\n              </Tab.Pane>\n\n              <Tab.Pane eventKey=\"patientEditSystematicInquiry\">\n                {this.state.selectedPatient === null && (\n                  <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                    Select a Patient from the Master List\n                  </Button>\n                )}\n                {this.state.selectedPatient !== null && (\n                  <Button variant=\"outline-primary\" value='systematicInquiry' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Systematic Inquiry</Button>\n                )}\n                {this.state.patientUpdateField === 'systematicInquiry' &&\n                this.state.selectedPatient !== null\n                && (\n                  <UpdatePatientSystematicInquiryForm\n                    authUserId={this.context.userId}\n                    canCancel\n                    canConfirm\n                    onCancel={this.modalCancelHandler}\n                    onConfirm={this.updatePatientSystematicInquiryHandler}\n                    confirmText=\"Confirm\"\n                    patient={this.state.selectedPatient}\n                  />\n                )}\n              </Tab.Pane>\n\n              <Tab.Pane eventKey=\"patientEditVitals\">\n                {this.state.selectedPatient === null && (\n                  <Button variant=\"outline-warning\" size=\"lg\">\n                    Select a Patient from the Master List\n                  </Button>\n                )}\n                {this.state.selectedPatient !== null && (\n                  <Button variant=\"outline-primary\" value='vitals' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Vitals</Button>\n                )}\n                {this.state.patientUpdateField === 'vitals' &&\n                this.state.selectedPatient !== null && (\n                  <UpdatePatientVitalsForm\n                    authUserId={this.context.userId}\n                    canCancel\n                    canConfirm\n                    onCancel={this.modalCancelHandler}\n                    onConfirm={this.updatePatientVitalsHandler}\n                    confirmText=\"Confirm\"\n                    patient={this.state.selectedPatient}\n                  />\n                )}\n              </Tab.Pane>\n\n              <Tab.Pane eventKey=\"patientEditExamination\">\n                {this.state.selectedPatient === null && (\n                  <Button variant=\"outline-warning\" size=\"lg\">\n                    Select a Patient from the Master List\n                  </Button>\n                )}\n                {this.state.selectedPatient !== null && (\n                  <Button variant=\"outline-primary\" value='examintion' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Examination</Button>\n                )}\n                {this.state.patientUpdateField === 'examintion' &&\n                this.state.selectedPatient !== null && (\n                  <UpdatePatientExaminationForm\n                    authUserId={this.context.userId}\n                    canCancel\n                    canConfirm\n                    onCancel={this.modalCancelHandler}\n                    onConfirm={this.updatePatientExaminationHandler}\n                    confirmText=\"Confirm\"\n                    patient={this.state.selectedPatient}\n                  />\n                )}\n              </Tab.Pane>\n\n              <Tab.Pane eventKey=\"patientEditHistory\">\n                {this.state.selectedPatient === null && (\n                  <Button variant=\"outline-warning\" size=\"lg\">\n                    Select a Patient from the Master List\n                  </Button>\n                )}\n                {this.state.selectedPatient !== null && (\n                  <Button variant=\"outline-primary\" value='history' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Past History</Button>\n                )}\n                {this.state.patientUpdateField === 'history' &&\n                this.state.selectedPatient !== null\n                && (\n                  <UpdatePatientHistoryForm\n                  authUserId={this.context.userId}\n                  canCancel\n                    canConfirm\n                    onCancel={this.modalCancelHandler}\n                    onConfirm={this.updatePatientHistoryHandler}\n                    confirmText=\"Confirm\"\n                    patient={this.state.selectedPatient}\n                  />\n                )}\n              </Tab.Pane>\n\n              <Tab.Pane eventKey=\"patientEditAllergies\">\n                {this.state.selectedPatient === null && (\n                  <Button variant=\"outline-warning\" size=\"lg\">\n                    Select a Patient from the Master List\n                  </Button>\n                )}\n                {this.state.selectedPatient !== null && (\n                  <Button variant=\"outline-primary\" value='allergies' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Allergies</Button>\n                )}\n                {this.state.patientUpdateField === 'allergies' &&\n                this.state.selectedPatient !== null\n                && (\n                  <UpdatePatientAllergiesForm\n                    authUserId={this.context.userId}\n                    canCancel\n                    canConfirm\n                    onCancel={this.modalCancelHandler}\n                    onConfirm={this.updatePatientAllergiesHandler}\n                    confirmText=\"Confirm\"\n                    patient={this.state.selectedPatient}\n                  />\n                )}\n              </Tab.Pane>\n\n              <Tab.Pane eventKey=\"patientEditMedication\">\n                {this.state.selectedPatient === null && (\n                  <Button variant=\"outline-warning\" size=\"lg\">\n                    Select a Patient from the Master List\n                  </Button>\n                )}\n                {this.state.selectedPatient !== null && (\n                  <Button variant=\"outline-primary\" value='medication' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Medication</Button>\n                )}\n                {this.state.patientUpdateField === 'medication' &&\n                this.state.selectedPatient !== null\n                && (\n                  <UpdatePatientMedicationForm\n                  authUserId={this.context.userId}\n                  canCancel\n                    canConfirm\n                    onCancel={this.modalCancelHandler}\n                    onConfirm={this.updatePatientMedicationHandler}\n                    confirmText=\"Confirm\"\n                    patient={this.state.selectedPatient}\n                  />\n                )}\n              </Tab.Pane>\n\n              <Tab.Pane eventKey=\"patientEditInvestigation\">\n                {this.state.selectedPatient === null && (\n                  <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                    Select a Patient from the Master List\n                  </Button>\n                )}\n                {this.state.selectedPatient !== null && (\n                  <Button variant=\"outline-primary\" value='investigation' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Investigation</Button>\n                )}\n                {this.state.patientUpdateField === 'investigation' &&\n                this.state.selectedPatient !== null\n                && (\n                  <UpdatePatientInvestigationForm\n                        authUserId={this.context.userId}\n                        canCancel\n                          canConfirm\n                          onCancel={this.modalCancelHandler}\n                          onConfirm={this.updatePatientInvestigationHandler}\n                          confirmText=\"Confirm\"\n                          patient={this.state.selectedPatient}\n                        />\n                )}\n              </Tab.Pane>\n\n              <Tab.Pane eventKey=\"patientEditDiagnosis\">\n                {this.state.selectedPatient === null && (\n                  <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                    Select a Patient from the Master List\n                  </Button>\n                )}\n                {this.state.selectedPatient !== null && (\n                  <Button variant=\"outline-primary\" value='diagnosis' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Diagnosis</Button>\n                )}\n                {this.state.patientUpdateField === 'diagnosis' &&\n                this.state.selectedPatient !== null\n                && (\n                  <UpdatePatientDiagnosisForm\n                        authUserId={this.context.userId}\n                        canCancel\n                          canConfirm\n                          onCancel={this.modalCancelHandler}\n                          onConfirm={this.updatePatientDiagnosisHandler}\n                          confirmText=\"Confirm\"\n                          patient={this.state.selectedPatient}\n                        />\n                )}\n              </Tab.Pane>\n\n              <Tab.Pane eventKey=\"patientEditTreatment\">\n                {this.state.selectedPatient === null && (\n                  <Button variant=\"outline-warning\" size=\"lg\">\n                    Select a Patient from the Master List\n                  </Button>\n                )}\n                {this.state.selectedPatient !== null && (\n                  <Button variant=\"outline-primary\" value='treatment' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Treatment</Button>\n                )}\n                {this.state.patientUpdateField === 'treatment' &&\n                this.state.selectedPatient !== null\n                && (\n                  <UpdatePatientTreatmentForm\n                        authUserId={this.context.userId}\n                        canCancel\n                          canConfirm\n                          onCancel={this.modalCancelHandler}\n                          onConfirm={this.updatePatientTreatmentHandler}\n                          confirmText=\"Confirm\"\n                          patient={this.state.selectedPatient}\n                        />\n                )}\n              </Tab.Pane>\n\n              <Tab.Pane eventKey=\"patientEditBilling\">\n                {this.state.selectedPatient === null && (\n                  <Button variant=\"outline-warning\" size=\"lg\">\n                    Select a Patient from the Master List\n                  </Button>\n                )}\n                {this.state.selectedPatient !== null && (\n                  <Button variant=\"outline-primary\" value='billing' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Billing</Button>\n                )}\n                {this.state.patientUpdateField === 'billing' &&\n                this.state.selectedPatient !== null\n                && (\n                  <UpdatePatientBillingForm\n                        authUserId={this.context.userId}\n                        canCancel\n                          canConfirm\n                          onCancel={this.modalCancelHandler}\n                          onConfirm={this.updatePatientBillingHandler}\n                          confirmText=\"Confirm\"\n                          patient={this.state.selectedPatient}\n                        />\n                )}\n              </Tab.Pane>\n\n              <Tab.Pane eventKey=\"patientEditVigilance\">\n                {this.state.selectedPatient === null && (\n                  <Button variant=\"outline-warning\" size=\"lg\">\n                    Select a Patient from the Master List\n                  </Button>\n                )}\n                {this.state.selectedPatient !== null && (\n                  <Button variant=\"outline-primary\" value='vigilance' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Vigilance</Button>\n                )}\n                {this.state.patientUpdateField === 'vigilance' &&\n                this.state.selectedPatient !== null\n                && (\n                  <UpdatePatientVigilanceForm\n                        authUserId={this.context.userId}\n                        canCancel\n                          canConfirm\n                          onCancel={this.modalCancelHandler}\n                          onConfirm={this.updatePatientVigilanceHandler}\n                          confirmText=\"Confirm\"\n                          patient={this.state.selectedPatient}\n                        />\n                )}\n              </Tab.Pane>\n\n              <Tab.Pane eventKey=\"patientEditAttachment\">\n                {this.state.selectedPatient === null && (\n                  <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                    Select a Patient from the Master List\n                  </Button>\n                )}\n                {this.state.selectedPatient !== null && (\n                  <Button variant=\"outline-primary\" value='attachment' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Attachment</Button>\n                )}\n                {this.state.patientUpdateField === 'attachment' &&\n                this.state.selectedPatient !== null\n                && (\n                  <UpdatePatientAttachmentForm\n                        authUserId={this.context.userId}\n                        canCancel\n                          canConfirm\n                          onCancel={this.modalCancelHandler}\n                          onConfirm={this.updatePatientAttachmentHandler}\n                          confirmText=\"Confirm\"\n                          patient={this.state.selectedPatient}\n                        />\n                      )}\n              </Tab.Pane>\n\n              <Tab.Pane eventKey=\"patientEditNote\">\n                {this.state.selectedPatient === null && (\n                  <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                    Select a Patient from the Master List\n                  </Button>\n                )}\n                {this.state.selectedPatient !== null && (\n                  <Button variant=\"outline-primary\" value='notes' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Note</Button>\n                )}\n                {this.state.patientUpdateField === 'notes' &&\n                this.state.selectedPatient !== null\n                && (\n                  <UpdatePatientNoteForm\n                        authUserId={this.context.userId}\n                        canCancel\n                          canConfirm\n                          onCancel={this.modalCancelHandler}\n                          onConfirm={this.updatePatientNoteHandler}\n                          confirmText=\"Confirm\"\n                          patient={this.state.selectedPatient}\n                        />\n                      )}\n              </Tab.Pane>\n\n              <Tab.Pane eventKey=\"patientEditTag\">\n                {this.state.selectedPatient === null && (\n                  <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                    Select a Patient from the Master List\n                  </Button>\n                )}\n                {this.state.selectedPatient !== null && (\n                  <Button variant=\"outline-primary\" value='tags' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Tag</Button>\n                )}\n                {this.state.patientUpdateField === 'tags' &&\n                this.state.selectedPatient !== null\n                && (\n                  <UpdatePatientTagForm\n                        authUserId={this.context.userId}\n                        canCancel\n                          canConfirm\n                          onCancel={this.modalCancelHandler}\n                          onConfirm={this.updatePatientTagHandler}\n                          confirmText=\"Confirm\"\n                          patient={this.state.selectedPatient}\n                        />\n                      )}\n              </Tab.Pane>\n\n              <Tab.Pane eventKey=\"MasterList\">\n                <Container className=\"containerUserMasterList\">\n                <Row className=\"searchListRow\">\n                <Button variant=\"primary\" size=\"sm\" onClick={this.fetchPatientsAsc}>\n                   Sort Asc\n                 </Button>\n                <Button variant=\"info\" size=\"sm\" onClick={this.fetchPatientsDesc}>\n                   Sort Desc\n                 </Button>\n                {this.state.isLoading ? (\n                  <Spinner />\n                ) : (\n                  <PatientList\n                    patients={this.state.patients}\n                    authUserId={this.context.userId}\n                    onViewDetail={this.showDetailHandler}\n                  />\n                )}\n                </Row>\n                </Container>\n              </Tab.Pane>\n\n              <Tab.Pane eventKey=\"SearchInput\">\n                <Container className=\"containerSearchUserInput\">\n                  {this.context.token && (\n                  <Row className=\"searchUserRowAdd\">\n                  <Button variant=\"primary\" onClick={this.startSearchPatientHandler}>Search</Button>\n                  </Row>\n                )}\n\n                <Row className=\"searchUserRowForm\">\n                <Col md={10} className=\"searchUserColForm\">\n                <Tabs defaultActiveKey=\"Field\" id=\"uncontrolled-tab-example\">\n                <Tab eventKey=\"Search\" title=\"Search:\" disabled>\n                </Tab>\n                <Tab eventKey=\"Field\" title=\"Search by Field:\">\n                {this.state.searching !== true && (\n                  <Button variant=\"outline-warning\" className=\"confirmEditButton\" size=\"lg\">\n                    Click the 'Search' Button start\n                  </Button>\n                )}\n                {this.state.searching === true && (\n                  <SearchPatientForm\n                  authUserId={this.context.userId}\n                  canCancel\n                    canConfirm\n                    onCancel={this.modalCancelHandler}\n                    onConfirm={this.modalConfirmSearchHandler}\n                    confirmText=\"Search\"\n                    patient={this.context.selectedPatient}\n                  />\n                )}\n                </Tab>\n                <Tab eventKey=\"Id\" title=\"Search by ID:\">\n                {this.state.searching !== true && (\n                  <Button variant=\"outline-warning\" className=\"confirmEditButton\" size=\"lg\">\n                    Click the 'Search' Button start\n                  </Button>\n                )}\n                {this.state.searching === true && (\n                  <SearchPatientIdForm\n                  authUserId={this.context.userId}\n                  canCancel\n                    canConfirm\n                    onCancel={this.modalCancelHandler}\n                    onConfirm={this.modalConfirmSearchIdHandler}\n                    confirmText=\"Search\"\n                    patient={this.context.selectedPatient}\n                  />\n                )}\n                </Tab>\n\n                <Tab eventKey=\"Name\" title=\"Search by Name:\">\n                {this.state.searching !== true && (\n                  <Button variant=\"outline-warning\" className=\"confirmEditButton\" size=\"lg\">\n                    Click the 'Search' Button start\n                  </Button>\n                )}\n                {this.state.searching === true && (\n                  <SearchPatientNameForm\n                  authUserId={this.context.userId}\n                  canCancel\n                    canConfirm\n                    onCancel={this.modalCancelHandler}\n                    onConfirm={this.modalConfirmSearchNameHandler}\n                    confirmText=\"Search\"\n                    patient={this.context.selectedPatient}\n                  />\n                )}\n                </Tab>\n                </Tabs>\n                </Col>\n                </Row>\n                </Container>\n              </Tab.Pane>\n\n              <Tab.Pane eventKey=\"SearchResult\">\n                <Container className=\"containerSearchUserResults\">\n                <Row>\n                  <Card className=\"searchCard\">\n                    <Card.Body className=\"searchCardBody\">\n                      <Card.Title>Your Search</Card.Title>\n                      <Card.Text>\n                        Field: {this.state.patientSearchField}\n                      </Card.Text>\n                      <Card.Text>\n                        Query: {this.state.patientSearchQuery}\n                      </Card.Text>\n                    </Card.Body>\n                  </Card>\n                </Row>\n                <Row className=\"searchListRow\">\n                {\n                  this.state.searchPatients !== [] &&\n                  <SearchPatientList\n                    searchPatients={this.state.searchPatients}\n                    authUserId={this.context.userId}\n                    onCancel={this.modalCancelHandler}\n                      onViewDetail={this.showDetailHandler}\n                  />\n                }\n                </Row>\n                </Container>\n              </Tab.Pane>\n            </Tab.Content>\n          </Col>\n        </Row>\n      </Tab.Container>\n    </Container>\n    </Col>\n    </Row>\n\n</Accordion>\n\n      </React.Fragment>\n    );\n  }\n}\n\nexport default PatientsPage;\n"]},"metadata":{},"sourceType":"module"}