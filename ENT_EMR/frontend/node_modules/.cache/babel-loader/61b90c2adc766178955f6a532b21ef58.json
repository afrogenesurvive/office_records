{"ast":null,"code":"var _jsxFileName = \"/Users/pedrojacob/Downloads/AMR/websites/office_records/ENT_EMR/frontend/src/pages/Patients.js\";\nimport React, { Component } from 'react'; // import Form from 'react-bootstrap/Form';\n\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport Accordion from 'react-bootstrap/Accordion'; // import Modal from '../components/Modal/Modal';\n// import Backdrop from '../components/Backdrop/Backdrop';\n\nimport PatientList from '../components/Patients/PatientList/PatientList';\nimport PatientDetail from '../components/Patients/PatientDetail';\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\nimport SearchPatientList from '../components/Patients/PatientList/SearchPatientList';\nimport SearchPatientForm from '../components/Forms/SearchPatientForm';\nimport CreatePatientForm from '../components/Forms/CreatePatientForm';\nimport UpdatePatientForm from '../components/Forms/UpdatePatientForm';\nimport UpdatePatientConsultationForm from '../components/Forms/UpdatePatientConsultationForm';\nimport UpdatePatientInsuranceForm from '../components/Forms/UpdatePatientInsuranceForm';\nimport UpdatePatientNextOfKinForm from '../components/Forms/UpdatePatientNextOfKinForm';\nimport UpdatePatientComplaintForm from '../components/Forms/UpdatePatientComplaintForm';\nimport UpdatePatientExaminationForm from '../components/Forms/UpdatePatientExaminationForm';\nimport UpdatePatientHistoryForm from '../components/Forms/UpdatePatientHistoryForm';\nimport UpdatePatientAllergiesForm from '../components/Forms/UpdatePatientAllergiesForm';\nimport UpdatePatientMedicationForm from '../components/Forms/UpdatePatientMedicationForm';\nimport UpdatePatientInvestigationForm from '../components/Forms/UpdatePatientInvestigationForm';\nimport UpdatePatientDiagnosisForm from '../components/Forms/UpdatePatientDiagnosisForm';\nimport UpdatePatientTreatmentForm from '../components/Forms/UpdatePatientTreatmentForm';\nimport UpdatePatientBillingForm from '../components/Forms/UpdatePatientBillingForm'; // import UpdatePatientArrayForm from '../components/Forms/UpdatePatientArrayForm';\n\nimport './Users.css';\n\nclass PatientsPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      creating: false,\n      updating: false,\n      searching: false,\n      updatingArray: false,\n      deleting: false,\n      patients: [],\n      searchPatients: [],\n      isLoading: false,\n      selectedPatient: null,\n      patientUpdateField: null\n    };\n    this.isActive = true;\n\n    this.startCreatePatientHandler = () => {\n      this.setState({\n        creating: true\n      });\n      console.log(\"CreatePatientForm...\");\n    };\n\n    this.startUpdatePatientHandler = () => {\n      this.setState({\n        updating: true,\n        updatingArray: true\n      });\n      console.log(\"UpdatePatientForm...\");\n    };\n\n    this.startSearchPatientHandler = () => {\n      this.setState({\n        searching: true\n      });\n      console.log(\"SearchPatientForm...\");\n    };\n\n    this.modalConfirmHandler = event => {\n      console.log(\"CreatePatientFormData:  \", event.target.formGridName.value);\n      this.setState({\n        creating: false\n      });\n      const userId = this.context.userId;\n      let name = event.target.formGridName.value;\n      let dob = event.target.formGridDob.value;\n      let age = event.target.formGridAge.value;\n      let address = event.target.formGridAddress.value;\n      let contactPhone = event.target.formGridContactPhone.value;\n      let contactEmail = event.target.formGridContactEmail.value;\n      let registrationDate = event.target.formGridRegistrationDate.value;\n      let referralDate = event.target.formGridReferralDate.value;\n      let expirationDate = event.target.formGridExpirationDate.value;\n      let referringDoctorName = event.target.formGridReferringDoctorName.value;\n      let referringDoctorEmail = event.target.formGridReferringDoctorEmail.value;\n      let referringDoctorPhone = event.target.formGridReferringDoctorPhone.value;\n      let occupationRole = event.target.formGridOccupationRole.value;\n      let occupationEmployer = event.target.formGridOccupationEmployer.value;\n      let occupationEmployerContactPhone = event.target.formGridOccupationEmployerContactPhone.value;\n      let occupationEmployerContactEmail = event.target.formGridOccupationEmployerContactEmail.value;\n\n      if (name.trim().length === 0 || dob.trim().length === 0 || age.trim().length === 0 || address.trim().length === 0 || contactPhone.trim().length === 0 || contactEmail.trim().length === 0 || registrationDate.trim().length === 0 || referralDate.trim().length === 0 || expirationDate.trim().length === 0 || referringDoctorName.trim().length === 0 || referringDoctorEmail.trim().length === 0 || referringDoctorPhone.trim().length === 0 || occupationRole.trim().length === 0 || occupationEmployer.trim().length === 0 || occupationEmployerContactPhone.trim().length === 0 || occupationEmployerContactEmail.trim().length === 0) {\n        console.log(\"blank fields detected!!!...Please try again...\");\n        return;\n      }\n\n      const patient = {\n        name,\n        dob,\n        age,\n        address,\n        contactPhone,\n        contactEmail,\n        registrationDate,\n        referringDoctorName,\n        referringDoctorEmail,\n        referringDoctorPhone,\n        occupationRole,\n        occupationEmployer,\n        occupationEmployerContactPhone,\n        occupationEmployerContactEmail\n      };\n      console.log(\"creating patient.. \" + JSON.stringify(patient));\n      const requestBody = {\n        query: \"\\n          mutation {createPatient(userId:\\\"\".concat(userId, \"\\\",patientInput: {name:\\\"\").concat(name, \"\\\",dob:\\\"\").concat(dob, \"\\\",age:\\\"\").concat(age, \"\\\",address:\\\"\").concat(address, \"\\\",contactEmail:\\\"\").concat(contactEmail, \"\\\",contactPhone:\\\"\").concat(contactPhone, \"\\\",referringDoctorName:\\\"\").concat(referringDoctorName, \"\\\",referringDoctorEmail:\\\"\").concat(referringDoctorEmail, \"\\\",referringDoctorPhone:\\\"\").concat(referringDoctorPhone, \"\\\",occupationRole:\\\"\").concat(occupationRole, \"\\\",occupationEmployer:\\\"\").concat(occupationEmployer, \"\\\",occupationEmployerContactPhone:\\\"\").concat(occupationEmployerContactPhone, \"\\\",occupationEmployerContactEmail:\\\"\").concat(occupationEmployerContactEmail, \"\\\",registrationDate:\\\"\").concat(registrationDate, \"\\\",referralDate:\\\"\").concat(referralDate, \"\\\",expirationDate:\\\"\").concat(expirationDate, \"\\\"})\\n          {_id,name,address,contact{email,phone},registrationDate,referralDate,expirationDate,referringDoctor{name,email,phone},occupation{role,employer,contact{email,phone}}}}\\n        \")\n      };\n      const token = this.context.token;\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n        this.setState(prevState => {\n          const updatedPatients = [...prevState.patients];\n          updatedPatients.push({\n            _id: resData.data.createPatient._id,\n            name: resData.data.createPatient.name,\n            dob: resData.data.createPatient.dob,\n            age: resData.data.createPatient.age,\n            address: resData.data.createPatient.address,\n            contact: {\n              phone: resData.data.createPatient.contactPhone,\n              email: resData.data.createPatient.contactEmail\n            },\n            registrationDate: resData.data.createPatient.registrationDate,\n            referralDate: resData.data.createPatient.referralDate,\n            expirationDate: resData.data.createPatient.expirationDate,\n            referringDoctor: {\n              name: resData.data.createPatient.referringDoctorName,\n              email: resData.data.createPatient.referringDoctorEmail,\n              phone: resData.data.createPatient.referringDoctorPhone\n            },\n            occupation: {\n              role: resData.data.createPatient.occupationRole,\n              employer: resData.data.createPatient.occupationEmployer,\n              contact: {\n                phone: resData.data.createPatient.occupationEmployerContactPhone,\n                email: resData.data.createPatient.occupationEmployerContactEmail\n              }\n            }\n          });\n          return {\n            patients: updatedPatients\n          };\n        });\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.modalCancelHandler = () => {\n      this.setState({\n        creating: false,\n        updating: false,\n        selectedPatient: null\n      });\n    };\n\n    this.modalConfirmUpdateHandler = event => {\n      if (this.context.user.role !== 'admin') {\n        console.log(\"Not the Admin! No edit permission!!\");\n      }\n\n      const userId = this.context.userId;\n      const patientId = this.context.selectedPatient._id; // console.log(\"UpdateUserFormData:  \", event);\n\n      console.log(\"UpdatePatientFormData:  \", event.target.formGridName.value);\n      this.setState({\n        updating: false\n      });\n      let name = event.target.formGridName.value;\n      let dob = event.target.formGridDob.value;\n      let age = event.target.formGridAge.value;\n      let address = event.target.formGridAddress.value;\n      let contactPhone = event.target.formGridContactPhone.value;\n      let contactEmail = event.target.formGridContactEmail.value;\n      let registrationDate = event.target.formGridRegistrationDate.value;\n      let referringDoctorName = event.target.formGridReferringDoctorName.value;\n      let referringDoctorEmail = event.target.formGridReferringDoctorEmail.value;\n      let referringDoctorPhone = event.target.formGridReferringDoctorPhone.value;\n      let occupationRole = event.target.formGridOccupationRole.value;\n      let occupationEmployer = event.target.formGridOccupationEmployer.value;\n      let occupationEmployerContactPhone = event.target.formGridOccupationEmployerContactPhone.value;\n      let occupationEmployerContactEmail = event.target.formGridOccupationEmployerContactEmail.value;\n\n      if (name.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        name = this.context.selectedUser.name; // return;\n      }\n\n      if (dob.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        dob = this.context.selectedUser.dob;\n      }\n\n      if (age.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        age = this.context.selectedUser.age;\n      }\n\n      if (address.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        address = this.context.selectedUser.address;\n      }\n\n      if (contactPhone.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        contactPhone = this.context.selectedUser.contactPhone;\n      }\n\n      if (contactEmail.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        contactEmail = this.context.selectedUser.contactEmail;\n      }\n\n      if (registrationDate.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        registrationDate = this.context.selectedUser.registrationDate;\n      }\n\n      if (referringDoctorName.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        referringDoctorName = this.context.selectedUser.referringDoctorName;\n      }\n\n      if (referringDoctorEmail.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        referringDoctorEmail = this.context.selectedUser.referringDoctorEmail;\n      }\n\n      if (referringDoctorPhone.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        referringDoctorPhone = this.context.selectedUser.referringDoctorPhone;\n      }\n\n      if (occupationRole.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        occupationRole = this.context.selectedUser.occupationRole;\n      }\n\n      if (occupationEmployer.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        occupationEmployer = this.context.selectedUser.occupationEmployer;\n      }\n\n      if (occupationEmployerContactEmail.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        occupationEmployerContactEmail = this.context.selectedUser.occupationEmployerContactEmail;\n      }\n\n      if (occupationEmployerContactPhone.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        occupationEmployerContactPhone = this.context.selectedUser.occupationEmployerContactPhone;\n      }\n\n      const patient = {\n        name,\n        dob,\n        age,\n        address,\n        contactPhone,\n        contactEmail,\n        registrationDate,\n        referringDoctorName,\n        referringDoctorEmail,\n        referringDoctorPhone,\n        occupationRole,\n        occupationEmployer,\n        occupationEmployerContactPhone,\n        occupationEmployerContactEmail\n      };\n      console.log(\"\\n      updating patient...\\n      userId: \".concat(userId, \",\\n      patientId: \").concat(patientId, \",\\n      name: \").concat(name, \",\\n      dob: \").concat(dob, \",\\n      age: \").concat(age, \",\\n      address: \").concat(address, \",\\n      contactPhone: \").concat(contactPhone, \",\\n      contactEmail: \").concat(contactEmail, \",\\n      registrationDate: \").concat(registrationDate, \",\\n      referringDoctorName: \").concat(referringDoctorName, \",\\n      referringDoctorEmail: \").concat(referringDoctorEmail, \",\\n      referringDoctorPhone: \").concat(referringDoctorPhone, \",\\n      occupationRole: \").concat(occupationRole, \",\\n      occupationEmployer: \").concat(occupationEmployer, \",\\n      occupationEmployerContactPhone: \").concat(occupationEmployerContactPhone, \",\\n      occupationEmployerContactEmail: \").concat(occupationEmployerContactEmail, \",\\n      \"));\n      const requestBody = {\n        query: \"\\n          mutation {\\n            updatePatient(userId:\\\"\".concat(userId, \"\\\", patientId: \\\"\").concat(patientId, \"\\\", patientInput: { name: \\\"\").concat(name, \"\\\", dob: \\\"\").concat(dob, \"\\\",age: \").concat(age, \", address: \\\"\").concat(address, \"\\\", contactPhone: \\\"\").concat(contactPhone, \"\\\", contactEmail: \\\"\").concat(contactEmail, \"\\\", registrationDate: \\\"\").concat(registrationDate, \"\\\", referringDoctorName: \\\"\").concat(referringDoctorName, \"\\\", referringDoctorEmail: \\\"\").concat(referringDoctorEmail, \"\\\", referringDoctorPhone: \\\"\").concat(referringDoctorPhone, \"\\\", occupationRole: \\\"\").concat(occupationRole, \"\\\", occupationEmployer: \\\"\").concat(occupationEmployer, \"\\\", occupationEmployerContactPhone: \\\"\").concat(occupationEmployerContactPhone, \"\\\", occupationEmployerContactEmail: \\\"\").concat(occupationEmployerContactEmail, \"\\\" }){\\n              _id\\n              name\\n              dob\\n              age\\n              address\\n              contact{\\n                email\\n                phone\\n              }\\n              registrationDate\\n              referralDate\\n              expirationDate\\n              referringDoctor{\\n                name\\n                email\\n                phone\\n              }\\n                occupation{\\n                  role\\n                  employer\\n                  contact{\\n                    email\\n                    phone\\n                  }\\n                }\\n                insurance\\n                {\\n                  company\\n                  number\\n                  description\\n                  expiry\\n                  subscriber{\\n                    company\\n                    description\\n                  }\\n                }\\n                nextOfKin{\\n                  name\\n                  contact{\\n                    email\\n                    phone\\n                  }\\n                }\\n                complaints{\\n                  date\\n                  title\\n                  description\\n                  attachment{\\n                    name\\n                    format\\n                    path\\n                  }\\n                }\\n                examination{\\n                  area\\n                  type\\n                  measure\\n                  value\\n                  description\\n                  attachment{\\n                    name\\n                    format\\n                    path\\n                  }\\n                }\\n                history{\\n                  title\\n                  type\\n                  date\\n                  description\\n                  attachment{\\n                    name\\n                    format\\n                    path\\n                  }\\n                }\\n                allergies{\\n                  title\\n                  description\\n                  attachment{\\n                    name\\n                    format\\n                    path\\n                  }\\n                }\\n                medication{\\n                  title\\n                  description\\n                  attachment{\\n                    name\\n                    format\\n                    path\\n                  }\\n                }\\n                investigation{\\n                  date\\n                  title\\n                  description\\n                  attachment{\\n                    name\\n                    format\\n                    path\\n                  }\\n                }\\n                  diagnosis{\\n                    date\\n                    title\\n                    description\\n                    attachment{\\n                      name\\n                      format\\n                      path\\n                    }\\n                  }\\n                  treatment{\\n                    date\\n                    title\\n                    type\\n                    description\\n                    dose\\n                    frequency\\n                    attachment{\\n                      name\\n                      format\\n                      path\\n                    }\\n                  }\\n                  billing{\\n                    date\\n                    title\\n                    type\\n                    description\\n                    amount\\n                    paid\\n                    notes\\n                    attachment\\n                    {\\n                      name\\n                      format\\n                      path\\n                    }\\n                  }\\n            }\\n          }\\n        \")\n      };\n      const token = this.context.token;\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n        const updatedPatientId = resData.data.updatePatient._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push({\n          _id: resData.data.updatePatient._id,\n          name: resData.data.updatePatient.name,\n          dob: resData.data.updatePatient.dob,\n          age: resData.data.updatePatient.age,\n          address: resData.data.updatePatient.address,\n          contact: {\n            phone: resData.data.updatePatient.contactPhone,\n            email: resData.data.updatePatient.contactEmail\n          },\n          registrationDate: resData.data.updatePatient.registrationDate,\n          referringDoctor: {\n            name: resData.data.updatePatient.referringDoctorName,\n            email: resData.data.updatePatient.referringDoctorEmail,\n            phone: resData.data.updatePatient.referringDoctorPhone\n          },\n          occupation: {\n            role: resData.data.updatePatient.occupationRole,\n            employer: resData.data.updatePatient.occupationEmployer,\n            contact: {\n              phone: resData.data.updatePatient.occupationEmployerContactPhone,\n              email: resData.data.updatePatient.occupationEmployerContactEmail\n            }\n          }\n        }); // if (this.state.updatingArray === false && this.state.updating === false) {\n        //   console.log(\"update and updateArray complete...now fetching users\");\n        //\n        // }\n\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.updatePatientConsultantHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id;\n\n      if (this.context.user.role !== 'admin') {\n        console.log(\"No edit permission!!\");\n        return;\n      }\n\n      console.log(\"UpdatePatientInsuranceFormData:  \", event.target.formGridInsuranceCompany.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      const patientInsurance = {\n        insuranceCompany,\n        insuranceNumber,\n        insuranceExpiry,\n        insuranceDescription,\n        insuranceSubscriberCompany,\n        insuranceSubscriberDescription\n      };\n      console.log(\"\\n    adding patient insurance item...\\n    userId: \".concat(userId, \",\\n    selectedPatientId: \").concat(selectedPatientId, \",\\n    insuranceCompany: \").concat(insuranceCompany, \",\\n    insuranceNumber: \").concat(insuranceNumber, \",\\n    insuranceExpiry: \").concat(insuranceExpiry, \",\\n    insuranceDescription: \").concat(insuranceDescription, \",\\n    insuranceSubscriberCompany: \").concat(insuranceSubscriberCompany, \",\\n    insuranceSubscriberDescription: \").concat(insuranceSubscriberDescription, \",\\n    \"));\n      const requestBody = {\n        query: \"\\n        mutation {updatePatientInsurance(userId:\\\"\".concat(userId, \"\\\", patientId:\\\"\").concat(selectedPatientId, \"\\\",patientInput:{insuranceCompany:\\\"\").concat(insuranceCompany, \"\\\",insuranceNumber:\\\"\").concat(insuranceNumber, \"\\\",insuranceDescription:\\\"\").concat(insuranceDescription, \"\\\",insuranceExpiry:\\\"\").concat(insuranceExpiry, \"\\\",insuranceSubscriberCompany:\\\"\").concat(insuranceSubscriberCompany, \"\\\",insuranceSubscriberDescription:\\\"\").concat(insuranceSubscriberDescription, \"\\\"})\\n        {_id,name,address,contact{email,phone},registrationDate,referralDate,expirationDate,referringDoctor{name,email,phone},occupation{role,employer,contact{email,phone}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{email,phone}},complaints{date,title,description,attachment{name,format,path}},examination{area,type,measure,value,description,attachment{name,format,path}},history{title,type,date,description,attachment{name,format,path}},allergies{title,description,attachment{name,format,path}},medication{title,description,attachment{name,format,path}},investigation{date,title,description,attachment{name,format,path}},diagnosis{date,title,description,attachment{name,format,path}},treatment{date,title,type,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,notes,attachment{name,format,path}}}}\\n      \")\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientInsurance._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(updatedPatient);\n        this.context.patients = this.state.patients;\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.updatePatientInsuranceHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id;\n\n      if (this.context.user.role !== 'admin') {\n        console.log(\"No edit permission!!\");\n        return;\n      }\n\n      console.log(\"UpdatePatientInsuranceFormData:  \", event.target.formGridInsuranceCompany.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let insuranceCompany = event.target.formGridInsuranceCompany.value;\n      let insuranceNumber = event.target.formGridInsuranceNumber.value;\n      let insuranceExpiry = event.target.formGridInsuranceExpiry.value;\n      let insuranceDescription = event.target.formGridInsuranceDescription.value;\n      let insuranceSubscriberCompany = event.target.formGridInsuranceSubscriberCompany.value;\n      let insuranceSubscriberDescription = event.target.formGridInsuranceSubscriberDescription.value;\n      const patientInsurance = {\n        insuranceCompany,\n        insuranceNumber,\n        insuranceExpiry,\n        insuranceDescription,\n        insuranceSubscriberCompany,\n        insuranceSubscriberDescription\n      };\n      console.log(\"\\n    adding patient insurance item...\\n    userId: \".concat(userId, \",\\n    selectedPatientId: \").concat(selectedPatientId, \",\\n    insuranceCompany: \").concat(insuranceCompany, \",\\n    insuranceNumber: \").concat(insuranceNumber, \",\\n    insuranceExpiry: \").concat(insuranceExpiry, \",\\n    insuranceDescription: \").concat(insuranceDescription, \",\\n    insuranceSubscriberCompany: \").concat(insuranceSubscriberCompany, \",\\n    insuranceSubscriberDescription: \").concat(insuranceSubscriberDescription, \",\\n    \"));\n      const requestBody = {\n        query: \"\\n        mutation {updatePatientInsurance(userId:\\\"\".concat(userId, \"\\\", patientId:\\\"\").concat(selectedPatientId, \"\\\",patientInput:{insuranceCompany:\\\"\").concat(insuranceCompany, \"\\\",insuranceNumber:\\\"\").concat(insuranceNumber, \"\\\",insuranceDescription:\\\"\").concat(insuranceDescription, \"\\\",insuranceExpiry:\\\"\").concat(insuranceExpiry, \"\\\",insuranceSubscriberCompany:\\\"\").concat(insuranceSubscriberCompany, \"\\\",insuranceSubscriberDescription:\\\"\").concat(insuranceSubscriberDescription, \"\\\"})\\n        {_id,name,address,contact{email,phone},registrationDate,referralDate,expirationDate,referringDoctor{name,email,phone},occupation{role,employer,contact{email,phone}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{email,phone}},complaints{date,title,description,attachment{name,format,path}},examination{area,type,measure,value,description,attachment{name,format,path}},history{title,type,date,description,attachment{name,format,path}},allergies{title,description,attachment{name,format,path}},medication{title,description,attachment{name,format,path}},investigation{date,title,description,attachment{name,format,path}},diagnosis{date,title,description,attachment{name,format,path}},treatment{date,title,type,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,notes,attachment{name,format,path}}}}\\n      \")\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientInsurance._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(updatedPatient);\n        this.context.patients = this.state.patients;\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.updatePatientNextOfKinHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id;\n\n      if (this.context.user.role !== 'admin') {\n        console.log(\"No edit permission!!\");\n        return;\n      }\n\n      console.log(\"UpdatePatientNextOfKinFormData:  \", event.target.formGridNextOfKinName.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let nextOfKinName = event.target.formGridNextOfKinName.value;\n      let nextOfKinPhone = event.target.formGridNextOfKinPhone.value;\n      let nextOfKinEmail = event.target.formGridNextOfKinEmail.value;\n      const patientNextOfKin = {\n        nextOfKinName,\n        nextOfKinPhone,\n        nextOfKinEmail\n      };\n      console.log(\"\\n    adding patient nextOfKin item...\\n    userId: \".concat(userId, \",\\n    selectedPatientId: \").concat(selectedPatientId, \",\\n    nextOfKinName: \").concat(nextOfKinName, \",\\n    nextOfKinPhone: \").concat(nextOfKinPhone, \",\\n    nextOfKinEmail: \").concat(nextOfKinEmail, \",\\n    \"));\n      const requestBody = {\n        query: \"\\n        mutation {updatePatientNextOfKin(userId:\\\"\".concat(userId, \"\\\", patientId:\\\"\").concat(selectedPatientId, \"\\\",patientInput:{nextOfKinName:\\\"\").concat(nextOfKinName, \"\\\",nextOfKinEmail:\\\"granny@kin.mail\\\",nextOfKinPhone:\\\"1234566\\\"})\\n        {_id,name,address,contact{email,phone},registrationDate,referralDate,expirationDate,referringDoctor{name,email,phone},occupation{role,employer,contact{email,phone}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{email,phone}},complaints{date,title,description,attachment{name,format,path}},examination{area,type,measure,value,description,attachment{name,format,path}},history{title,type,date,description,attachment{name,format,path}},allergies{title,description,attachment{name,format,path}},medication{title,description,attachment{name,format,path}},investigation{date,title,description,attachment{name,format,path}},diagnosis{date,title,description,attachment{name,format,path}},treatment{date,title,type,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,notes,attachment{name,format,path}}}}\\n      \")\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientNextOfKin._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(updatedPatient);\n        this.context.patients = this.state.patients;\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.updatePatientComplaintHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id;\n\n      if (this.context.user.role !== 'admin') {\n        console.log(\"No edit permission!!\");\n        return;\n      }\n\n      console.log(\"UpdatePatientComplaintFormData:  \", event.target.formGridComplaintTitle.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let complaintTitle = event.target.formGridComplaintTitle.value;\n      let complaintDate = event.target.formGridComplaintDate.value;\n      let complaintDescription = event.target.formGridComplaintDescription.value;\n      let complaintAttachmentName = event.target.formGridComplaintAttachmentName.value;\n      let complaintAttachmentFormat = event.target.formGridComplaintAttachmentFormat.value;\n      let complaintAttachmentPath = event.target.formGridComplaintAttachmentPath.value;\n      const patientComplaint = {\n        complaintTitle,\n        complaintDate,\n        complaintDescription,\n        complaintAttachmentName,\n        complaintAttachmentFormat,\n        complaintAttachmentPath\n      };\n      console.log(\"\\n    adding patient complaint...\\n    userId: \".concat(userId, \",\\n    patientId: \").concat(selectedPatientId, \",\\n    complaintTitle: \").concat(complaintTitle, \",\\n    complaintDate: \").concat(complaintDate, \",\\n    complaintDescription: \").concat(complaintDescription, \",\\n    complaintAttachmentName: \").concat(complaintAttachmentName, \",\\n    complaintAttachmentFormat: \").concat(complaintAttachmentFormat, \",\\n    complaintAttachmentPath: \").concat(complaintAttachmentPath, \",\\n    \"));\n      const requestBody = {\n        query: \"\\n        mutation {updatePatientComplaint(userId:\\\"\".concat(userId, \"\\\", patientId:\\\"\").concat(selectedPatientId, \"\\\",patientInput:{complaintDate:\\\"\").concat(complaintDate, \"\\\",complaintTitle:\\\"\").concat(complaintTitle, \"\\\",complaintDescription:\\\"\").concat(complaintDescription, \"\\\",complaintAttachmentName:\\\"\").concat(complaintAttachmentName, \"\\\",complaintAttachmentFormat:\\\"\").concat(complaintAttachmentFormat, \"\\\",complaintAttachmentPath:\\\"\").concat(complaintAttachmentPath, \"\\\"})\\n        {_id,name,address,contact{email,phone},registrationDate,referralDate,expirationDate,referringDoctor{name,email,phone},occupation{role,employer,contact{email,phone}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{email,phone}},complaints{date,title,description,attachment{name,format,path}},examination{area,type,measure,value,description,attachment{name,format,path}},history{title,type,date,description,attachment{name,format,path}},allergies{title,description,attachment{name,format,path}},medication{title,description,attachment{name,format,path}},investigation{date,title,description,attachment{name,format,path}},diagnosis{date,title,description,attachment{name,format,path}},treatment{date,title,type,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,notes,attachment{name,format,path}}}}\\n      \")\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientComplaint._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(updatedPatient);\n        this.context.patients = this.state.patients;\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.updatePatientExaminationHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id;\n\n      if (this.context.user.role !== 'admin') {\n        console.log(\"No edit permission!!\");\n        return;\n      }\n\n      console.log(\"UpdatePatientExaminationFormData:  \", event.target.formGridExaminationArea.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let examinationArea = event.target.formGridExaminationArea.value;\n      let examinationType = event.target.formGridExaminationType.value;\n      let examinationMeasure = event.target.formGridExaminationMeasure.value;\n      let examinationValue = event.target.formGridExaminationValue.value;\n      let examinationDescription = event.target.formGridExaminationDescription.value;\n      let examinationAttachmentName = event.target.formGridExaminationAttachmentName.value;\n      let examinationAttachmentFormat = event.target.formGridExaminationAttachmentFormat.value;\n      let examinationAttachmentPath = event.target.formGridExaminationAttachmentPath.value;\n      const patientExamination = {\n        examinationArea,\n        examinationType,\n        examinationMeasure,\n        examinationValue,\n        examinationAttachmentName,\n        examinationAttachmentFormat,\n        examinationAttachmentPath\n      };\n      console.log(\"\\n    adding patient examination...\\n    userId: \".concat(userId, \",\\n    patientId: \").concat(selectedPatientId, \",\\n    examinationArea: \").concat(examinationArea, \",\\n    examinationType: \").concat(examinationType, \",\\n    examinationMeasure: \").concat(examinationMeasure, \",\\n    examinationValue: \").concat(examinationValue, \",\\n    examinationDescription: \").concat(examinationDescription, \",\\n    examinationAttachmentName: \").concat(examinationAttachmentName, \",\\n    examinationAttachmentFormat: \").concat(examinationAttachmentFormat, \",\\n    examinationAttachmentPath: \").concat(examinationAttachmentPath, \",\\n    \"));\n      const requestBody = {\n        query: \"\\n        mutation {updatePatientExamination(userId:\\\"\".concat(userId, \"\\\", patientId:\\\"\").concat(selectedPatientId, \"\\\",patientInput:{examinationArea:\\\"\").concat(examinationArea, \"\\\",examinationType:\\\"\").concat(examinationType, \"\\\",examinationMeasure:\\\"\").concat(examinationMeasure, \"\\\",examinationValue:\\\"\").concat(examinationValue, \"\\\",examinationDescription:\\\"\").concat(examinationDescription, \"\\\",examinationAttachmentName:\\\"\").concat(examinationAttachmentName, \"\\\",examinationAttachmentFormat:\\\"\").concat(examinationAttachmentFormat, \"\\\",examinationAttachmentPath:\\\"\").concat(examinationAttachmentPath, \"\\\"})\\n        {_id,name,address,contact{email,phone},registrationDate,referralDate,expirationDate,referringDoctor{name,email,phone},occupation{role,employer,contact{email,phone}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{email,phone}},complaints{date,title,description,attachment{name,format,path}},examination{area,type,measure,value,description,attachment{name,format,path}},history{title,type,date,description,attachment{name,format,path}},allergies{title,description,attachment{name,format,path}},medication{title,description,attachment{name,format,path}},investigation{date,title,description,attachment{name,format,path}},diagnosis{date,title,description,attachment{name,format,path}},treatment{date,title,type,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,notes,attachment{name,format,path}}}}\\n      \")\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientExamination._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(updatedPatient);\n        this.context.patients = this.state.patients;\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.updatePatientHistoryHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id;\n\n      if (this.context.user.role !== 'admin') {\n        console.log(\"No edit permission!!\");\n        return;\n      }\n\n      console.log(\"UpdatePatientHistoryFormData:  \", event.target.formGridHistoryTitle.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let historyType = event.target.formGridHistoryType.value;\n      let historyDate = event.target.formGridHistoryDate.value;\n      let historyTitle = event.target.formGridHistoryTitle.value;\n      let historyDescription = event.target.formGridHistoryDescription.value;\n      let historyAttachmentName = event.target.formGridHistoryAttachmentName.value;\n      let historyAttachmentFormat = event.target.formGridHistoryAttachmentFormat.value;\n      let historyAttachmentPath = event.target.formGridHistoryAttachmentPath.value;\n      const patientHistory = {\n        historyType,\n        historyDate,\n        historyTitle,\n        historyDescription,\n        historyAttachmentName,\n        historyAttachmentFormat,\n        historyAttachmentPath\n      };\n      console.log(\"\\n    adding patient history...\\n    userId: \".concat(userId, \",\\n    patientId: \").concat(selectedPatientId, \",\\n    historyType: \").concat(historyType, \",\\n    historyDate: \").concat(historyDate, \",\\n    historyTitle: \").concat(historyTitle, \",\\n    historyDescription: \").concat(historyDescription, \",\\n    historyAttachmentName: \").concat(historyAttachmentName, \",\\n    historyAttachmentFormat: \").concat(historyAttachmentFormat, \",\\n    historyAttachmentPath: \").concat(historyAttachmentPath, \",\\n    \"));\n      const requestBody = {\n        query: \"\\n        mutation {updatePatientHistory(userId:\\\"\".concat(userId, \"\\\", patientId:\\\"\").concat(selectedPatientId, \"\\\",patientInput:{historyTitle:\\\"\").concat(historyTitle, \"\\\",historyType:\\\"\").concat(historyType, \"\\\",historyDate:\\\"\").concat(historyDate, \"\\\",historyDescription:\\\"\").concat(historyDescription, \"\\\",historyAttachmentName:\\\"\").concat(historyAttachmentName, \"\\\",historyAttachmentFormat:\\\"\").concat(historyAttachmentFormat, \"\\\",historyAttachmentPath:\\\"\").concat(historyAttachmentPath, \"\\\"})\\n        {_id,name,address,contact{email,phone},registrationDate,referralDate,expirationDate,referringDoctor{name,email,phone},occupation{role,employer,contact{email,phone}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{email,phone}},complaints{date,title,description,attachment{name,format,path}},examination{area,type,measure,value,description,attachment{name,format,path}},history{title,type,date,description,attachment{name,format,path}},allergies{title,description,attachment{name,format,path}},medication{title,description,attachment{name,format,path}},investigation{date,title,description,attachment{name,format,path}},diagnosis{date,title,description,attachment{name,format,path}},treatment{date,title,type,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,notes,attachment{name,format,path}}}}\\n      \")\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientHistory._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(updatedPatient);\n        this.context.patients = this.state.patients;\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.updatePatientAllergiesHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id;\n\n      if (this.context.user.role !== 'admin') {\n        console.log(\"No edit permission!!\");\n        return;\n      }\n\n      console.log(\"UpdatePatientAllergiesFormData:  \", event.target.formGridAllergiesTitle.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let allergiesTitle = event.target.formGridAllergiesTitle.value;\n      let allergiesDescription = event.target.formGridAllergiesDescription.value;\n      let allergiesAttachmentName = event.target.formGridAllergiesAttachmentName.value;\n      let allergiesAttachmentFormat = event.target.formGridAllergiesAttachmentFormat.value;\n      let allergiesAttachmentPath = event.target.formGridAllergiesAttachmentPath.value;\n      const patientAllergies = {\n        allergiesTitle,\n        allergiesDescription,\n        allergiesAttachmentName,\n        allergiesAttachmentFormat,\n        allergiesAttachmentPath\n      };\n      console.log(\"\\n    adding patient allergies...\\n    userId: \".concat(userId, \",\\n    patientId: \").concat(selectedPatientId, \",\\n    allergiesTitle: \").concat(allergiesTitle, \",\\n    allergiesDescription: \").concat(allergiesDescription, \",\\n    allergiesAttachmentName: \").concat(allergiesAttachmentName, \",\\n    allergiesAttachmentFormat: \").concat(allergiesAttachmentFormat, \",\\n    allergiesAttachmentPath: \").concat(allergiesAttachmentPath, \",\\n    \"));\n      const requestBody = {\n        query: \"\\n        mutation {updatePatientAllergies(userId:\\\"\".concat(userId, \"\\\", patientId:\\\"\").concat(selectedPatientId, \"\\\",patientInput:{allergiesTitle:\\\"\").concat(allergiesTitle, \"\\\", allergiesDescription:\\\"\").concat(allergiesDescription, \"\\\",allergiesAttachmentName:\\\"\").concat(allergiesAttachmentName, \"\\\",allergiesAttachmentFormat:\\\"\").concat(allergiesAttachmentFormat, \"\\\",allergiesAttachmentPath:\\\"\").concat(allergiesAttachmentPath, \"\\\"})\\n        {_id,name,address,contact{email,phone},registrationDate,referralDate,expirationDate,referringDoctor{name,email,phone},occupation{role,employer,contact{email,phone}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{email,phone}},complaints{date,title,description,attachment{name,format,path}},examination{area,type,measure,value,description,attachment{name,format,path}},history{title,type,date,description,attachment{name,format,path}},allergies{title,description,attachment{name,format,path}},medication{title,description,attachment{name,format,path}},investigation{date,title,description,attachment{name,format,path}},diagnosis{date,title,description,attachment{name,format,path}},treatment{date,title,type,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,notes,attachment{name,format,path}}}}\\n      \")\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientAllergies._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(updatedPatient);\n        this.context.patients = this.state.patients;\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.updatePatientMedicationHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id;\n\n      if (this.context.user.role !== 'admin') {\n        console.log(\"No edit permission!!\");\n        return;\n      }\n\n      console.log(\"UpdatePatientMedicationFormData:  \", event.target.formGridMedicationTitle.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let medicationTitle = event.target.formGridMedicationTitle.value;\n      let medicationDescription = event.target.formGridMedicationDescription.value;\n      let medicationAttachmentName = event.target.formGridMedicationAttachmentName.value;\n      let medicationAttachmentFormat = event.target.formGridMedicationAttachmentFormat.value;\n      let medicationAttachmentPath = event.target.formGridMedicationAttachmentPath.value;\n      const patientMedication = {\n        medicationTitle,\n        medicationDescription,\n        medicationAttachmentName,\n        medicationAttachmentFormat,\n        medicationAttachmentPath\n      };\n      console.log(\"\\n    adding patient medication...\\n    userId: \".concat(userId, \",\\n    patientId: \").concat(selectedPatientId, \",\\n    medicationTitle: \").concat(medicationTitle, \",\\n    medicationDescription: \").concat(medicationDescription, \",\\n    medicationAttachmentName: \").concat(medicationAttachmentName, \",\\n    medicationAttachmentFormat: \").concat(medicationAttachmentFormat, \",\\n    medicationAttachmentPath: \").concat(medicationAttachmentPath, \",\\n    \"));\n      const requestBody = {\n        query: \"\\n      mutation {updatePatientMedication(userId:\\\"\".concat(userId, \"\\\", patientId:\\\"\").concat(selectedPatientId, \"\\\",patientInput:{medicationTitle:\\\"\").concat(medicationTitle, \"\\\", medicationDescription:\\\"\").concat(medicationDescription, \"\\\",medicationAttachmentName:\\\"\").concat(medicationAttachmentName, \"\\\",medicationAttachmentFormat:\\\"\").concat(medicationAttachmentFormat, \"\\\",medicationAttachmentPath:\\\"\").concat(medicationAttachmentPath, \"\\\"})\\n        {_id,name,address,contact{email,phone},registrationDate,referralDate,expirationDate,referringDoctor{name,email,phone},occupation{role,employer,contact{email,phone}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{email,phone}},complaints{date,title,description,attachment{name,format,path}},examination{area,type,measure,value,description,attachment{name,format,path}},history{title,type,date,description,attachment{name,format,path}},allergies{title,description,attachment{name,format,path}},medication{title,description,attachment{name,format,path}},investigation{date,title,description,attachment{name,format,path}},diagnosis{date,title,description,attachment{name,format,path}},treatment{date,title,type,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,notes,attachment{name,format,path}}}}\\n      \")\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientMedication._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(updatedPatient);\n        this.context.patients = this.state.patients;\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.updatePatientInvestigationHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id;\n\n      if (this.context.user.role !== 'admin') {\n        console.log(\"No edit permission!!\");\n        return;\n      }\n\n      console.log(\"UpdatePatientInvestigationFormData:  \", event.target.formGridInvestigationTitle.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let investigationDate = event.target.formGridInvestigationDate.value;\n      let investigationTitle = event.target.formGridInvestigationTitle.value;\n      let investigationDescription = event.target.formGridInvestigationDescription.value;\n      let investigationAttachmentName = event.target.formGridInvestigationAttachmentName.value;\n      let investigationAttachmentFormat = event.target.formGridInvestigationAttachmentFormat.value;\n      let investigationAttachmentPath = event.target.formGridInvestigationAttachmentPath.value;\n      const patientInvestigation = {\n        investigationDate,\n        investigationTitle,\n        investigationDescription,\n        investigationAttachmentName,\n        investigationAttachmentFormat,\n        investigationAttachmentPath\n      };\n      console.log(\"\\n    adding patient investigation...\\n    userId: \".concat(userId, \",\\n    patientId: \").concat(selectedPatientId, \",\\n    investigationDate: \").concat(investigationDate, \",\\n    investigationTitle: \").concat(investigationTitle, \",\\n    investigationDescription: \").concat(investigationDescription, \",\\n    investigationAttachmentName: \").concat(investigationAttachmentName, \",\\n    investigationAttachmentFormat: \").concat(investigationAttachmentFormat, \",\\n    investigationAttachmentPath: \").concat(investigationAttachmentPath, \",\\n    \"));\n      const requestBody = {\n        query: \"\\n        mutation {updatePatientInvestigation(userId:\\\"\".concat(userId, \"\\\", patientId:\\\"\").concat(selectedPatientId, \"\\\",patientInput:{investigationDate:\\\"\").concat(investigationDate, \"\\\",investigationTitle:\\\"\").concat(investigationTitle, \"\\\",investigationDescription:\\\"\").concat(investigationDescription, \"\\\",investigationAttachmentName:\\\"\").concat(investigationAttachmentName, \"\\\",investigationAttachmentFormat:\\\"\").concat(investigationAttachmentFormat, \"\\\",investigationAttachmentPath:\\\"\").concat(investigationAttachmentPath, \"\\\"})\\n        {_id,name,address,contact{email,phone},registrationDate,referralDate,expirationDate,referringDoctor{name,email,phone},occupation{role,employer,contact{email,phone}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{email,phone}},complaints{date,title,description,attachment{name,format,path}},examination{area,type,measure,value,description,attachment{name,format,path}},history{title,type,date,description,attachment{name,format,path}},allergies{title,description,attachment{name,format,path}},medication{title,description,attachment{name,format,path}},investigation{date,title,description,attachment{name,format,path}},diagnosis{date,title,description,attachment{name,format,path}},treatment{date,title,type,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,notes,attachment{name,format,path}}}}\\n      \")\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientInvestigation._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(updatedPatient);\n        this.context.patients = this.state.patients;\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.updatePatientDiagnosisHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id;\n\n      if (this.context.user.role !== 'admin') {\n        console.log(\"No edit permission!!\");\n        return;\n      }\n\n      console.log(\"UpdatePatientDiagnosisFormData:  \", event.target.formGridDiagnosisTitle.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let diagnosisDate = event.target.formGridDiagnosisDate.value;\n      let diagnosisTitle = event.target.formGridDiagnosisTitle.value;\n      let diagnosisDescription = event.target.formGridDiagnosisDescription.value;\n      let diagnosisAttachmentName = event.target.formGridDiagnosisAttachmentName.value;\n      let diagnosisAttachmentFormat = event.target.formGridDiagnosisAttachmentFormat.value;\n      let diagnosisAttachmentPath = event.target.formGridDiagnosisAttachmentPath.value;\n      const patientDiagnosis = {\n        diagnosisDate,\n        diagnosisTitle,\n        diagnosisDescription,\n        diagnosisAttachmentName,\n        diagnosisAttachmentFormat,\n        diagnosisAttachmentPath\n      };\n      console.log(\"\\n    adding patient diagnosis...\\n    userId: \".concat(userId, \",\\n    patientId: \").concat(selectedPatientId, \",\\n    diagnosisDate: \").concat(diagnosisDate, \",\\n    diagnosisTitle: \").concat(diagnosisTitle, \",\\n    diagnosisDescription: \").concat(diagnosisDescription, \",\\n    diagnosisAttachmentName: \").concat(diagnosisAttachmentName, \",\\n    diagnosisAttachmentFormat: \").concat(diagnosisAttachmentFormat, \",\\n    diagnosisAttachmentPath: \").concat(diagnosisAttachmentPath, \",\\n    \"));\n      const requestBody = {\n        query: \"\\n        mutation {updatePatientDiagnosis(userId:\\\"\".concat(userId, \"\\\", patientId:\\\"\").concat(selectedPatientId, \"\\\",patientInput:{diagnosisDate:\\\"\").concat(diagnosisDate, \"\\\",diagnosisTitle:\\\"\").concat(diagnosisTitle, \"\\\",diagnosisDescription:\\\"\").concat(diagnosisDescription, \"\\\",diagnosisAttachmentName:\\\"\").concat(diagnosisAttachmentName, \"\\\",diagnosisAttachmentFormat:\\\"\").concat(diagnosisAttachmentFormat, \"\\\",diagnosisAttachmentPath:\\\"\").concat(diagnosisAttachmentPath, \"\\\"})\\n        {_id,name,address,contact{email,phone},registrationDate,referralDate,expirationDate,referringDoctor{name,email,phone},occupation{role,employer,contact{email,phone}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{email,phone}},complaints{date,title,description,attachment{name,format,path}},examination{area,type,measure,value,description,attachment{name,format,path}},history{title,type,date,description,attachment{name,format,path}},allergies{title,description,attachment{name,format,path}},medication{title,description,attachment{name,format,path}},investigation{date,title,description,attachment{name,format,path}},diagnosis{date,title,description,attachment{name,format,path}},treatment{date,title,type,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,notes,attachment{name,format,path}}}}\\n      \")\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientDiagnosis._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(updatedPatient);\n        this.context.patients = this.state.patients;\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.updatePatientTreatmentHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id;\n\n      if (this.context.user.role !== 'admin') {\n        console.log(\"No edit permission!!\");\n        return;\n      }\n\n      console.log(\"UpdatePatientTreatmentFormData:  \", event.target.formGridTreatmentTitle.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let treatmentDate = event.target.formGridTreatmentDate.value;\n      let treatmentTitle = event.target.formGridTreatmentTitle.value;\n      let treatmentDescription = event.target.formGridTreatmentDescription.value;\n      let treatmentDose = event.target.formGridTreatmentDose.value;\n      let treatmentFrequency = event.target.formGridTreatmentFrequency.value;\n      let treatmentType = event.target.formGridTreatmentType.value;\n      let treatmentAttachmentName = event.target.formGridTreatmentAttachmentName.value;\n      let treatmentAttachmentFormat = event.target.formGridTreatmentAttachmentFormat.value;\n      let treatmentAttachmentPath = event.target.formGridTreatmentAttachmentPath.value;\n      const patientTreatment = {\n        treatmentDate,\n        treatmentTitle,\n        treatmentDescription,\n        treatmentDose,\n        treatmentFrequency,\n        treatmentType,\n        treatmentAttachmentName,\n        treatmentAttachmentFormat,\n        treatmentAttachmentPath\n      };\n      console.log(\"\\n    adding patient treatment...\\n    userId: \".concat(userId, \",\\n    patientId: \").concat(selectedPatientId, \",\\n    treatmentDate: \").concat(treatmentDate, \",\\n    treatmentTitle: \").concat(treatmentTitle, \",\\n    treatmentDescription: \").concat(treatmentDescription, \",\\n    treatmentDose: \").concat(treatmentDose, \",\\n    treatmentFrequency: \").concat(treatmentFrequency, \",\\n    treatmentType: \").concat(treatmentType, \",\\n    treatmentAttachmentName: \").concat(treatmentAttachmentName, \",\\n    treatmentAttachmentFormat: \").concat(treatmentAttachmentFormat, \",\\n    treatmentAttachmentPath: \").concat(treatmentAttachmentPath, \",\\n    \"));\n      const requestBody = {\n        query: \"\\n        mutation {updatePatientTreatment(userId:\\\"\".concat(userId, \"\\\", patientId:\\\"\").concat(selectedPatientId, \"\\\",patientInput:{treatmentDate:\\\"\").concat(treatmentDate, \"\\\",treatmentTitle:\\\"\").concat(treatmentTitle, \"\\\",treatmentType:\\\"\").concat(treatmentType, \"\\\",treatmentDescription:\\\"\").concat(treatmentDescription, \"\\\",treatmentDose:\\\"\").concat(treatmentDose, \"\\\",treatmentFrequency:\\\"\").concat(treatmentFrequency, \"\\\",treatmentAttachmentName:\\\"\").concat(treatmentAttachmentName, \"\\\",treatmentAttachmentFormat:\\\"\").concat(treatmentAttachmentFormat, \"\\\",treatmentAttachmentPath:\\\"\").concat(treatmentAttachmentPath, \"\\\"})\\n        {_id,name,address,contact{email,phone},registrationDate,referralDate,expirationDate,referringDoctor{name,email,phone},occupation{role,employer,contact{email,phone}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{email,phone}},complaints{date,title,description,attachment{name,format,path}},examination{area,type,measure,value,description,attachment{name,format,path}},history{title,type,date,description,attachment{name,format,path}},allergies{title,description,attachment{name,format,path}},medication{title,description,attachment{name,format,path}},investigation{date,title,description,attachment{name,format,path}},diagnosis{date,title,description,attachment{name,format,path}},treatment{date,title,type,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,notes,attachment{name,format,path}}}}\\n      \")\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientTreatment._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(updatedPatient);\n        this.context.patients = this.state.patients;\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.updatePatientBillingHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id;\n\n      if (this.context.user.role !== 'admin') {\n        console.log(\"No edit permission!!\");\n        return;\n      }\n\n      console.log(\"UpdatePatientBillingFormData:  \", event.target.formGridBillingTitle.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let billingDate = event.target.formGridBillingDate.value;\n      let billingTitle = event.target.formGridBillingTitle.value;\n      let billingType = event.target.formGridBillingType.value;\n      let billingDescription = event.target.formGridBillingDescription.value;\n      let billingAmount = event.target.formGridBillingAmount.value;\n      let billingPaid = event.target.formGridBillingPaid.value;\n      let billingNotes = event.target.formGridBillingNotes.value;\n      let billingAttachmentName = event.target.formGridBillingAttachmentName.value;\n      let billingAttachmentFormat = event.target.formGridBillingAttachmentFormat.value;\n      let billingAttachmentPath = event.target.formGridBillingAttachmentPath.value;\n      const patientBilling = {\n        billingDate,\n        billingTitle,\n        billingType,\n        billingDescription,\n        billingAmount,\n        billingPaid,\n        billingNotes,\n        billingAttachmentName,\n        billingAttachmentFormat,\n        billingAttachmentPath\n      };\n      console.log(\"\\n    adding patient treatment...\\n    userId: \".concat(userId, \",\\n    patientId: \").concat(selectedPatientId, \",\\n    billingDate: \").concat(billingDate, \",\\n    billingTitle: \").concat(billingTitle, \",\\n    billingType: \").concat(billingType, \",\\n    billingDescription: \").concat(billingDescription, \",\\n    billingAmount: \").concat(billingAmount, \",\\n    billingPaid: \").concat(billingPaid, \",\\n    billingNotes: \").concat(billingNotes, \",\\n    billingAttachmentName: \").concat(billingAttachmentName, \",\\n    billingAttachmentFormat: \").concat(billingAttachmentFormat, \",\\n    billingAttachmentPath: \").concat(billingAttachmentPath, \",\\n    \"));\n      const requestBody = {\n        query: \"\\n        mutation {updatePatientBilling(userId:\\\"\".concat(userId, \"\\\", patientId:\\\"\").concat(selectedPatientId, \"\\\",patientInput:{billingDate:\\\"\").concat(billingDate, \"\\\",billingTitle:\\\"\").concat(billingTitle, \"\\\",billingType:\\\"\").concat(billingType, \"\\\",billingDescription:\\\"\").concat(billingDescription, \"\\\",billingAmount:\").concat(billingAmount, \",billingPaid:\").concat(billingPaid, \",billingNotes:\\\"\").concat(billingNotes, \"\\\",billingAttachmentName:\\\"\").concat(billingAttachmentName, \"\\\",billingAttachmentFormat:\\\"\").concat(billingAttachmentFormat, \"\\\",billingAttachmentPath:\\\"\").concat(billingAttachmentPath, \"\\\"})\\n        {_id,name,address,contact{email,phone},registrationDate,referralDate,expirationDate,referringDoctor{name,email,phone},occupation{role,employer,contact{email,phone}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{email,phone}},complaints{date,title,description,attachment{name,format,path}},examination{area,type,measure,value,description,attachment{name,format,path}},history{title,type,date,description,attachment{name,format,path}},allergies{title,description,attachment{name,format,path}},medication{title,description,attachment{name,format,path}},investigation{date,title,description,attachment{name,format,path}},diagnosis{date,title,description,attachment{name,format,path}},treatment{date,title,type,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,notes,attachment{name,format,path}}}}\\n      \")\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientBilling._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(updatedPatient);\n        this.context.patients = this.state.patients;\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.modalConfirmSearchHandler = event => {\n      console.log(\"SearchPatientForm:  \");\n      let userId = this.context.userId;\n      console.log(\"SearchPatientFormData:  \", event.target.formBasicField.value);\n      this.setState({\n        searching: false\n      });\n      let field = event.target.formBasicField.value;\n      let query = event.target.formBasicQuery.value;\n\n      if (field.trim().length === 0 || query.trim().length === 0) {\n        console.log(\"blank fields detected!!!...Please try again...\");\n        return;\n      }\n\n      const search = {\n        field,\n        query\n      };\n      console.log(\"Searching for Patient:  \", JSON.stringify(search));\n      const requestBody = {\n        query: \"\\n        query GetPatientField($userId: ID!, $field: String!, $query: String!)\\n        {getPatientField(userId: $userId, field: $field, query: $query ){\\n          _id\\n          name\\n          dob\\n          age\\n          address\\n          contact{\\n            email\\n            phone\\n          }\\n          registrationDate\\n          referralDate\\n          expirationDate\\n          referringDoctor{\\n            name\\n            email\\n            phone\\n          }\\n            occupation{\\n              role\\n              employer\\n              contact{\\n                email\\n                phone\\n              }\\n            }\\n            insurance\\n            {\\n              company\\n              number\\n              description\\n              expiry\\n              subscriber{\\n                company\\n                description\\n              }\\n            }\\n            nextOfKin{\\n              name\\n              contact{\\n                email\\n                phone\\n              }\\n            }\\n            complaints{\\n              date\\n              title\\n              description\\n              attachment{\\n                name\\n                format\\n                path\\n              }\\n            }\\n            examination{\\n              area\\n              type\\n              measure\\n              value\\n              description\\n              attachment{\\n                name\\n                format\\n                path\\n              }\\n            }\\n            history{\\n              title\\n              type\\n              date\\n              description\\n              attachment{\\n                name\\n                format\\n                path\\n              }\\n            }\\n            allergies{\\n              title\\n              description\\n              attachment{\\n                name\\n                format\\n                path\\n              }\\n            }\\n            medication{\\n              title\\n              description\\n              attachment{\\n                name\\n                format\\n                path\\n              }\\n            }\\n            investigation{\\n              date\\n              title\\n              description\\n              attachment{\\n                name\\n                format\\n                path\\n              }\\n            }\\n              diagnosis{\\n                date\\n                title\\n                description\\n                attachment{\\n                  name\\n                  format\\n                  path\\n                }\\n              }\\n              treatment{\\n                date\\n                title\\n                type\\n                description\\n                dose\\n                frequency\\n                attachment{\\n                  name\\n                  format\\n                  path\\n                }\\n              }\\n              billing{\\n                date\\n                title\\n                type\\n                description\\n                amount\\n                paid\\n                notes\\n                attachment\\n                {\\n                  name\\n                  format\\n                  path\\n                }\\n              }\\n        }\\n      }\\n      \",\n        variables: {\n          userId: userId,\n          field: field,\n          query: query\n        }\n      };\n      const token = this.context.token;\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n        const searchPatients = resData.data.getPatientField;\n        this.setState({\n          searchPatients: searchPatients\n        });\n        console.log(\"state.searchPatients:  \", this.state.searchPatients); // this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.modalCancelHandler = () => {\n      this.setState({\n        creating: false,\n        updating: false,\n        searching: false,\n        selectedPatient: null\n      });\n    };\n\n    this.modalDeleteHandler = () => {\n      console.log(\"deleting patient...selectedPatient:  \", this.context.selectedPatient);\n      const selectedPatientId = this.context.selectedPatient._id;\n\n      if (this.context.user.role !== 'admin') {\n        console.log(\"Not the Admin! No edit permission!!\");\n      }\n\n      this.setState({\n        deleting: true\n      });\n      const requestBody = {\n        query: \"\\n          mutation DeletePatient($userId: ID!, $patientId: ID!) {\\n            deletePatient(userId: $userId, patientId: $patientId) {\\n              _id\\n              name\\n              address\\n              dob\\n              age\\n              contact{\\n                email\\n                phone\\n              }\\n              registrationDate\\n              referringDoctor\\n              {\\n                name\\n                email\\n                phone\\n              }\\n              occupation\\n              {\\n                role\\n                employer\\n                contact\\n                {\\n                  email\\n                  phone\\n                }\\n              }\\n            }\\n          }\\n        \",\n        variables: {\n          userId: this.context.userId,\n          patientId: selectedPatientId\n        }\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + this.context.token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatient;\n        console.log(deletedPatient);\n        let deletedPatientId = deletedPatient._id;\n        deletedPatient = this.state.patients.find(e => e._id === deletedPatientId);\n        const deletedPatientPos = this.state.patients.indexOf(deletedPatient);\n        const slicedArray = this.state.patients.splice(deletedPatientPos, 1);\n        console.log(\"deletedPatient:  \", JSON.stringify(deletedPatient), \"  deletedUserPos:  \", deletedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.setState({\n          deleting: false\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n\n        if (this.isActive) {\n          this.setState({\n            deleting: false\n          });\n        }\n      });\n    };\n\n    this.showDetailHandler = patientId => {\n      this.setState(prevState => {\n        const selectedPatient = prevState.patients.find(e => e._id === patientId);\n        this.context.selectedPatient = selectedPatient;\n        this.context.selectedPatientId = selectedPatient._id;\n        console.log(\"selectedPatient:  \", selectedPatient);\n        return {\n          selectedPatient: selectedPatient\n        };\n      });\n    };\n\n    this.nameElRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.fetchPatients();\n  }\n\n  fetchPatients() {\n    console.log(\"'fetch patients function' context object... \" + JSON.stringify(this.context));\n    const userId = this.context.userId;\n    this.setState({\n      isLoading: true\n    });\n    const requestBody = {\n      query: \"\\n          query patients($userId: ID!) {\\n            patients(userId: $userId) {\\n              _id\\n              name\\n              dob\\n              age\\n              address\\n              contact{\\n                email\\n                phone\\n              }\\n              registrationDate\\n              referralDate\\n              expirationDate\\n              appointments{\\n                title\\n                date\\n                type\\n                location\\n              }\\n              referringDoctor{\\n                name\\n                email\\n                phone\\n              }\\n                occupation{\\n                  role\\n                  employer\\n                  contact{\\n                    email\\n                    phone\\n                  }\\n                }\\n                insurance\\n                {\\n                  company\\n                  number\\n                  description\\n                  expiry\\n                  subscriber{\\n                    company\\n                    description\\n                  }\\n                }\\n                nextOfKin{\\n                  name\\n                  contact{\\n                    email\\n                    phone\\n                  }\\n                }\\n                complaints{\\n                  date\\n                  title\\n                  description\\n                  attachment{\\n                    name\\n                    format\\n                    path\\n                  }\\n                }\\n                examination{\\n                  area\\n                  type\\n                  measure\\n                  value\\n                  description\\n                  attachment{\\n                    name\\n                    format\\n                    path\\n                  }\\n                }\\n                history{\\n                  title\\n                  type\\n                  date\\n                  description\\n                  attachment{\\n                    name\\n                    format\\n                    path\\n                  }\\n                }\\n                allergies{\\n                  title\\n                  description\\n                  attachment{\\n                    name\\n                    format\\n                    path\\n                  }\\n                }\\n                medication{\\n                  title\\n                  description\\n                  attachment{\\n                    name\\n                    format\\n                    path\\n                  }\\n                }\\n                investigation{\\n                  date\\n                  title\\n                  description\\n                  attachment{\\n                    name\\n                    format\\n                    path\\n                  }\\n                }\\n                  diagnosis{\\n                    date\\n                    title\\n                    description\\n                    attachment{\\n                      name\\n                      format\\n                      path\\n                    }\\n                  }\\n                  treatment{\\n                    date\\n                    title\\n                    type\\n                    description\\n                    dose\\n                    frequency\\n                    attachment{\\n                      name\\n                      format\\n                      path\\n                    }\\n                  }\\n                  billing{\\n                    date\\n                    title\\n                    type\\n                    description\\n                    amount\\n                    paid\\n                    notes\\n                    attachment\\n                    {\\n                      name\\n                      format\\n                      path\\n                    }\\n                  }\\n            }\\n          }\\n        \",\n      variables: {\n        userId: userId\n      }\n    };\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    }).then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n\n      return res.json();\n    }).then(resData => {\n      const patients = resData.data.patients;\n      console.log(patients);\n      this.context.patients = this.state.patients;\n\n      if (this.isActive) {\n        this.setState({\n          patients: patients,\n          isLoading: false\n        });\n      }\n    }).catch(err => {\n      console.log(err);\n\n      if (this.isActive) {\n        this.setState({\n          isLoading: false\n        });\n      }\n    });\n  }\n\n  updatePatientSpecial(event) {\n    console.log(\"special field to update:  \", event.target.value);\n    const field = event.target.value;\n    this.setState({\n      patientUpdateField: field\n    });\n  }\n\n  componentWillUnmount() {\n    this.isActive = false;\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1992\n      },\n      __self: this\n    }, React.createElement(Accordion, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1993\n      },\n      __self: this\n    }, React.createElement(Container, {\n      className: \"containerUserDetail\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1995\n      },\n      __self: this\n    }, React.createElement(Row, {\n      className: \"createUserRowAdd\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1997\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 4,\n      className: \"createUserColAdd\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1998\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1999\n      },\n      __self: this\n    }, \"Patient Detail\")), React.createElement(Col, {\n      md: 6,\n      className: \"createUserColAdd\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2001\n      },\n      __self: this\n    }, React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: \"6\",\n      className: \"btn\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2002\n      },\n      __self: this\n    }, \"Details\"))), React.createElement(Accordion.Collapse, {\n      eventKey: \"6\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2008\n      },\n      __self: this\n    }, React.createElement(Row, {\n      className: \"createUserRowForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2009\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 11,\n      className: \"createUserColForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2010\n      },\n      __self: this\n    }, this.state.isLoading === false && this.state.selectedPatient !== null && React.createElement(PatientDetail, {\n      authUserId: this.context.userId,\n      patient: this.state.selectedPatient,\n      onEdit: this.startUpdatePatientHandler,\n      onDelete: this.modalDeleteHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2014\n      },\n      __self: this\n    }))))), React.createElement(Container, {\n      className: \"containerCreateuser\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2027\n      },\n      __self: this\n    }, React.createElement(Row, {\n      className: \"createUserRowAdd\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2028\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 4,\n      className: \"createUserColAdd\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2029\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2030\n      },\n      __self: this\n    }, \"Add Patient\")), React.createElement(Col, {\n      md: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2032\n      },\n      __self: this\n    }, this.context.token && React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: \"7\",\n      className: \"btn\",\n      onClick: this.startCreatePatientHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2034\n      },\n      __self: this\n    }, \"Add\"))), React.createElement(Accordion.Collapse, {\n      eventKey: \"7\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2041\n      },\n      __self: this\n    }, React.createElement(Row, {\n      className: \"createUserRowForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2042\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 12,\n      className: \"createUserColForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2043\n      },\n      __self: this\n    }, this.state.creating && React.createElement(CreatePatientForm, {\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmHandler,\n      confirmText: \"Confirm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2046\n      },\n      __self: this\n    })))), React.createElement(Row, {\n      className: \"updateUserRowAdd\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2059\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 2,\n      className: \"updateUserCol\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2060\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2061\n      },\n      __self: this\n    }, \"Edit Patient\")), React.createElement(Col, {\n      md: 4,\n      className: \"updateUserCol\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2063\n      },\n      __self: this\n    }, this.context.token && React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: \"8\",\n      className: \"btn\",\n      onClick: this.startUpdatePatientHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2065\n      },\n      __self: this\n    }, \"Basic Info & Demographics\")), React.createElement(Col, {\n      md: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2070\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2071\n      },\n      __self: this\n    }, \"Patient\")), React.createElement(Col, {\n      md: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2073\n      },\n      __self: this\n    }, this.context.selectedPatient && React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2075\n      },\n      __self: this\n    }, this.context.selectedPatient.name))), React.createElement(Row, {\n      className: \"createUserRowAdd\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2080\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 1,\n      className: \"updateUserCol2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2081\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2082\n      },\n      __self: this\n    }, \"Edit Patient\")), React.createElement(Col, {\n      md: 11,\n      className: \"updateUserCol2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2084\n      },\n      __self: this\n    }, this.context.token && React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: \"9\",\n      className: \"btn\",\n      value: \"consultant\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2086\n      },\n      __self: this\n    }, \"Consultant\"), this.context.token && React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: \"9\",\n      className: \"btn\",\n      value: \"insurance\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2091\n      },\n      __self: this\n    }, \"Insurance\"), this.context.token && React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: \"9\",\n      className: \"btn\",\n      value: \"nextOfKin\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2096\n      },\n      __self: this\n    }, \"Next Of Kin\"), this.context.token && React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: \"9\",\n      className: \"btn\",\n      value: \"complaint\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2101\n      },\n      __self: this\n    }, \"Complaint\"), this.context.token && React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: \"9\",\n      className: \"btn\",\n      value: \"examination\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2106\n      },\n      __self: this\n    }, \"Examination\"), this.context.token && React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: \"9\",\n      className: \"btn\",\n      value: \"history\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2111\n      },\n      __self: this\n    }, \"History\"), this.context.token && React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: \"9\",\n      className: \"btn\",\n      value: \"allergies\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2116\n      },\n      __self: this\n    }, \"Allergies\"), this.context.token && React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: \"9\",\n      className: \"btn\",\n      value: \"medication\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2121\n      },\n      __self: this\n    }, \"Medication\"), this.context.token && React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: \"9\",\n      className: \"btn\",\n      value: \"investigation\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2126\n      },\n      __self: this\n    }, \"Investigation\"), this.context.token && React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: \"9\",\n      className: \"btn\",\n      value: \"diagnosis\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2131\n      },\n      __self: this\n    }, \"Diagnosis\"), this.context.token && React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: \"9\",\n      className: \"btn\",\n      value: \"treatment\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2136\n      },\n      __self: this\n    }, \"Treatment\"), this.context.token && React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: \"9\",\n      className: \"btn\",\n      value: \"billing\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2141\n      },\n      __self: this\n    }, \"Billing\"))), React.createElement(Accordion.Collapse, {\n      eventKey: \"8\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2148\n      },\n      __self: this\n    }, React.createElement(Row, {\n      className: \"updateUserRowForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2149\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 10,\n      className: \"updateUserColForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2150\n      },\n      __self: this\n    }, this.state.updating && this.state.selectedPatient !== null && React.createElement(UpdatePatientForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmUpdateHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2154\n      },\n      __self: this\n    })))), React.createElement(Accordion.Collapse, {\n      eventKey: \"9\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2168\n      },\n      __self: this\n    }, React.createElement(Row, {\n      className: \"updateUserRowForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2169\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 10,\n      className: \"updateUserColForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2170\n      },\n      __self: this\n    }, this.state.patientUpdateField === 'consultant' && this.state.selectedPatient !== null && React.createElement(UpdateConsultantInsuranceForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientInConsultantHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2174\n      },\n      __self: this\n    }), this.state.patientUpdateField === 'insurance' && this.state.selectedPatient !== null && React.createElement(UpdatePatientInsuranceForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientInsuranceHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2187\n      },\n      __self: this\n    }), this.state.patientUpdateField === 'nextOfKin' && this.state.selectedPatient !== null && React.createElement(UpdatePatientNextOfKinForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientNextOfKinHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2200\n      },\n      __self: this\n    }), this.state.patientUpdateField === 'complaint' && this.state.selectedPatient !== null && React.createElement(UpdatePatientComplaintForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientComplaintHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2213\n      },\n      __self: this\n    }), this.state.patientUpdateField === 'examination' && this.state.selectedPatient !== null && React.createElement(UpdatePatientExaminationForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientExaminationHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2226\n      },\n      __self: this\n    }), this.state.patientUpdateField === 'history' && this.state.selectedPatient !== null && React.createElement(UpdatePatientHistoryForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientHistoryHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2239\n      },\n      __self: this\n    }), this.state.patientUpdateField === 'allergies' && this.state.selectedPatient !== null && React.createElement(UpdatePatientAllergiesForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientAllergiesHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2252\n      },\n      __self: this\n    }), this.state.patientUpdateField === 'medication' && this.state.selectedPatient !== null && React.createElement(UpdatePatientMedicationForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientMedicationHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2265\n      },\n      __self: this\n    }), this.state.patientUpdateField === 'investigation' && this.state.selectedPatient !== null && React.createElement(UpdatePatientInvestigationForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientInvestigationHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2278\n      },\n      __self: this\n    }), this.state.patientUpdateField === 'diagnosis' && this.state.selectedPatient !== null && React.createElement(UpdatePatientDiagnosisForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientDiagnosisHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2291\n      },\n      __self: this\n    }), this.state.patientUpdateField === 'treatment' && this.state.selectedPatient !== null && React.createElement(UpdatePatientTreatmentForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientTreatmentHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2304\n      },\n      __self: this\n    }), this.state.patientUpdateField === 'billing' && this.state.selectedPatient !== null && React.createElement(UpdatePatientBillingForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientBillingHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2317\n      },\n      __self: this\n    }))))), React.createElement(Container, {\n      className: \"containerSearchuser\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2335\n      },\n      __self: this\n    }, React.createElement(Row, {\n      className: \"createUserRowAdd\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2336\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 4,\n      className: \"createUserColAdd\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2337\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2338\n      },\n      __self: this\n    }, \"Search for a Patient\")), React.createElement(Col, {\n      md: 8,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2340\n      },\n      __self: this\n    }, this.context.token && React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: \"10\",\n      className: \"btn\",\n      onClick: this.startSearchPatientHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2342\n      },\n      __self: this\n    }, \"Search\"))), React.createElement(Accordion.Collapse, {\n      eventKey: \"10\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2350\n      },\n      __self: this\n    }, React.createElement(Row, {\n      className: \"createUserRowForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2351\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 10,\n      className: \"createUserColForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2352\n      },\n      __self: this\n    }, this.state.searching === true && React.createElement(SearchPatientForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmSearchHandler,\n      confirmText: \"Search\",\n      patient: this.context.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2355\n      },\n      __self: this\n    })), React.createElement(Col, {\n      md: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2366\n      },\n      __self: this\n    })))), React.createElement(Accordion.Collapse, {\n      eventKey: \"10\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2373\n      },\n      __self: this\n    }, React.createElement(Container, {\n      className: \"containerSearchuser\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2374\n      },\n      __self: this\n    }, React.createElement(Row, {\n      className: \"searchListRow\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2375\n      },\n      __self: this\n    }, this.state.searchPatients !== [] && React.createElement(SearchPatientList, {\n      searchPatients: this.state.searchPatients,\n      authUserId: this.context.userId,\n      onCancel: this.modalCancelHandler,\n      onViewDetail: this.showDetailHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2378\n      },\n      __self: this\n    })))), React.createElement(Container, {\n      className: \"containerSearchuser\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2390\n      },\n      __self: this\n    }, React.createElement(Row, {\n      className: \"searchListRow\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2391\n      },\n      __self: this\n    }, this.state.isLoading ? React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2394\n      },\n      __self: this\n    }) : React.createElement(PatientList, {\n      patients: this.state.patients,\n      authUserId: this.context.userId,\n      onViewDetail: this.showDetailHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2396\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nPatientsPage.contextType = AuthContext;\nexport default PatientsPage;","map":{"version":3,"sources":["/Users/pedrojacob/Downloads/AMR/websites/office_records/ENT_EMR/frontend/src/pages/Patients.js"],"names":["React","Component","Container","Row","Col","Button","Accordion","PatientList","PatientDetail","Spinner","AuthContext","SearchPatientList","SearchPatientForm","CreatePatientForm","UpdatePatientForm","UpdatePatientConsultationForm","UpdatePatientInsuranceForm","UpdatePatientNextOfKinForm","UpdatePatientComplaintForm","UpdatePatientExaminationForm","UpdatePatientHistoryForm","UpdatePatientAllergiesForm","UpdatePatientMedicationForm","UpdatePatientInvestigationForm","UpdatePatientDiagnosisForm","UpdatePatientTreatmentForm","UpdatePatientBillingForm","PatientsPage","constructor","props","state","creating","updating","searching","updatingArray","deleting","patients","searchPatients","isLoading","selectedPatient","patientUpdateField","isActive","startCreatePatientHandler","setState","console","log","startUpdatePatientHandler","startSearchPatientHandler","modalConfirmHandler","event","target","formGridName","value","userId","context","name","dob","formGridDob","age","formGridAge","address","formGridAddress","contactPhone","formGridContactPhone","contactEmail","formGridContactEmail","registrationDate","formGridRegistrationDate","referralDate","formGridReferralDate","expirationDate","formGridExpirationDate","referringDoctorName","formGridReferringDoctorName","referringDoctorEmail","formGridReferringDoctorEmail","referringDoctorPhone","formGridReferringDoctorPhone","occupationRole","formGridOccupationRole","occupationEmployer","formGridOccupationEmployer","occupationEmployerContactPhone","formGridOccupationEmployerContactPhone","occupationEmployerContactEmail","formGridOccupationEmployerContactEmail","trim","length","patient","JSON","stringify","requestBody","query","token","fetch","method","body","headers","Authorization","then","res","status","Error","json","resData","prevState","updatedPatients","push","_id","data","createPatient","contact","phone","email","referringDoctor","occupation","role","employer","catch","err","modalCancelHandler","modalConfirmUpdateHandler","user","patientId","selectedUser","updatedPatientId","updatePatient","updatedPatient","find","e","updatedPatientPos","indexOf","slicedArray","splice","fetchPatients","updatePatientConsultantHandler","selectedPatientId","formGridInsuranceCompany","patientInsurance","insuranceCompany","insuranceNumber","insuranceExpiry","insuranceDescription","insuranceSubscriberCompany","insuranceSubscriberDescription","updatePatientInsurance","updatePatientInsuranceHandler","formGridInsuranceNumber","formGridInsuranceExpiry","formGridInsuranceDescription","formGridInsuranceSubscriberCompany","formGridInsuranceSubscriberDescription","updatePatientNextOfKinHandler","formGridNextOfKinName","nextOfKinName","nextOfKinPhone","formGridNextOfKinPhone","nextOfKinEmail","formGridNextOfKinEmail","patientNextOfKin","updatePatientNextOfKin","updatePatientComplaintHandler","formGridComplaintTitle","complaintTitle","complaintDate","formGridComplaintDate","complaintDescription","formGridComplaintDescription","complaintAttachmentName","formGridComplaintAttachmentName","complaintAttachmentFormat","formGridComplaintAttachmentFormat","complaintAttachmentPath","formGridComplaintAttachmentPath","patientComplaint","updatePatientComplaint","updatePatientExaminationHandler","formGridExaminationArea","examinationArea","examinationType","formGridExaminationType","examinationMeasure","formGridExaminationMeasure","examinationValue","formGridExaminationValue","examinationDescription","formGridExaminationDescription","examinationAttachmentName","formGridExaminationAttachmentName","examinationAttachmentFormat","formGridExaminationAttachmentFormat","examinationAttachmentPath","formGridExaminationAttachmentPath","patientExamination","updatePatientExamination","updatePatientHistoryHandler","formGridHistoryTitle","historyType","formGridHistoryType","historyDate","formGridHistoryDate","historyTitle","historyDescription","formGridHistoryDescription","historyAttachmentName","formGridHistoryAttachmentName","historyAttachmentFormat","formGridHistoryAttachmentFormat","historyAttachmentPath","formGridHistoryAttachmentPath","patientHistory","updatePatientHistory","updatePatientAllergiesHandler","formGridAllergiesTitle","allergiesTitle","allergiesDescription","formGridAllergiesDescription","allergiesAttachmentName","formGridAllergiesAttachmentName","allergiesAttachmentFormat","formGridAllergiesAttachmentFormat","allergiesAttachmentPath","formGridAllergiesAttachmentPath","patientAllergies","updatePatientAllergies","updatePatientMedicationHandler","formGridMedicationTitle","medicationTitle","medicationDescription","formGridMedicationDescription","medicationAttachmentName","formGridMedicationAttachmentName","medicationAttachmentFormat","formGridMedicationAttachmentFormat","medicationAttachmentPath","formGridMedicationAttachmentPath","patientMedication","updatePatientMedication","updatePatientInvestigationHandler","formGridInvestigationTitle","investigationDate","formGridInvestigationDate","investigationTitle","investigationDescription","formGridInvestigationDescription","investigationAttachmentName","formGridInvestigationAttachmentName","investigationAttachmentFormat","formGridInvestigationAttachmentFormat","investigationAttachmentPath","formGridInvestigationAttachmentPath","patientInvestigation","updatePatientInvestigation","updatePatientDiagnosisHandler","formGridDiagnosisTitle","diagnosisDate","formGridDiagnosisDate","diagnosisTitle","diagnosisDescription","formGridDiagnosisDescription","diagnosisAttachmentName","formGridDiagnosisAttachmentName","diagnosisAttachmentFormat","formGridDiagnosisAttachmentFormat","diagnosisAttachmentPath","formGridDiagnosisAttachmentPath","patientDiagnosis","updatePatientDiagnosis","updatePatientTreatmentHandler","formGridTreatmentTitle","treatmentDate","formGridTreatmentDate","treatmentTitle","treatmentDescription","formGridTreatmentDescription","treatmentDose","formGridTreatmentDose","treatmentFrequency","formGridTreatmentFrequency","treatmentType","formGridTreatmentType","treatmentAttachmentName","formGridTreatmentAttachmentName","treatmentAttachmentFormat","formGridTreatmentAttachmentFormat","treatmentAttachmentPath","formGridTreatmentAttachmentPath","patientTreatment","updatePatientTreatment","updatePatientBillingHandler","formGridBillingTitle","billingDate","formGridBillingDate","billingTitle","billingType","formGridBillingType","billingDescription","formGridBillingDescription","billingAmount","formGridBillingAmount","billingPaid","formGridBillingPaid","billingNotes","formGridBillingNotes","billingAttachmentName","formGridBillingAttachmentName","billingAttachmentFormat","formGridBillingAttachmentFormat","billingAttachmentPath","formGridBillingAttachmentPath","patientBilling","updatePatientBilling","modalConfirmSearchHandler","formBasicField","field","formBasicQuery","search","variables","getPatientField","modalDeleteHandler","deletedPatient","deletePatient","deletedPatientId","deletedPatientPos","showDetailHandler","nameElRef","createRef","componentDidMount","updatePatientSpecial","componentWillUnmount","render","bind","updatePatientInConsultantHandler","contextType"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n// import Form from 'react-bootstrap/Form';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Button from 'react-bootstrap/Button';\nimport Accordion from 'react-bootstrap/Accordion';\n\n// import Modal from '../components/Modal/Modal';\n// import Backdrop from '../components/Backdrop/Backdrop';\nimport PatientList from '../components/Patients/PatientList/PatientList';\nimport PatientDetail from '../components/Patients/PatientDetail';\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\nimport SearchPatientList from '../components/Patients/PatientList/SearchPatientList';\nimport SearchPatientForm from '../components/Forms/SearchPatientForm';\n\nimport CreatePatientForm from '../components/Forms/CreatePatientForm';\nimport UpdatePatientForm from '../components/Forms/UpdatePatientForm';\nimport UpdatePatientConsultationForm from '../components/Forms/UpdatePatientConsultationForm';\nimport UpdatePatientInsuranceForm from '../components/Forms/UpdatePatientInsuranceForm';\nimport UpdatePatientNextOfKinForm from '../components/Forms/UpdatePatientNextOfKinForm';\nimport UpdatePatientComplaintForm from '../components/Forms/UpdatePatientComplaintForm';\nimport UpdatePatientExaminationForm from '../components/Forms/UpdatePatientExaminationForm';\nimport UpdatePatientHistoryForm from '../components/Forms/UpdatePatientHistoryForm';\nimport UpdatePatientAllergiesForm from '../components/Forms/UpdatePatientAllergiesForm';\nimport UpdatePatientMedicationForm from '../components/Forms/UpdatePatientMedicationForm';\nimport UpdatePatientInvestigationForm from '../components/Forms/UpdatePatientInvestigationForm';\nimport UpdatePatientDiagnosisForm from '../components/Forms/UpdatePatientDiagnosisForm';\nimport UpdatePatientTreatmentForm from '../components/Forms/UpdatePatientTreatmentForm';\nimport UpdatePatientBillingForm from '../components/Forms/UpdatePatientBillingForm';\n// import UpdatePatientArrayForm from '../components/Forms/UpdatePatientArrayForm';\nimport './Users.css';\n\nclass PatientsPage extends Component {\n  state = {\n    creating: false,\n    updating: false,\n    searching: false,\n    updatingArray: false,\n    deleting: false,\n    patients: [],\n    searchPatients: [],\n    isLoading: false,\n    selectedPatient: null,\n    patientUpdateField: null,\n  };\n  isActive = true;\n\n  static contextType = AuthContext;\n\n  constructor(props) {\n    super(props);\n    this.nameElRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.fetchPatients();\n  }\n\n\n  startCreatePatientHandler = () => {\n    this.setState({ creating: true });\n    console.log(\"CreatePatientForm...\");\n  };\n  startUpdatePatientHandler = () => {\n    this.setState({ updating: true, updatingArray: true });\n    console.log(\"UpdatePatientForm...\");\n  };\n  startSearchPatientHandler = () => {\n    this.setState({ searching: true });\n    console.log(\"SearchPatientForm...\");\n  };\n\n  modalConfirmHandler = (event) => {\n\n    console.log(\"CreatePatientFormData:  \", event.target.formGridName.value);\n\n    this.setState({ creating: false });\n    const userId = this.context.userId;\n\n    let name = event.target.formGridName.value;\n    let dob = event.target.formGridDob.value;\n    let age = event.target.formGridAge.value;\n    let address = event.target.formGridAddress.value;\n    let contactPhone = event.target.formGridContactPhone.value;\n    let contactEmail = event.target.formGridContactEmail.value;\n    let registrationDate = event.target.formGridRegistrationDate.value;\n    let referralDate = event.target.formGridReferralDate.value;\n    let expirationDate = event.target.formGridExpirationDate.value;\n    let referringDoctorName = event.target.formGridReferringDoctorName.value;\n    let referringDoctorEmail = event.target.formGridReferringDoctorEmail.value;\n    let referringDoctorPhone = event.target.formGridReferringDoctorPhone.value;\n    let occupationRole = event.target.formGridOccupationRole.value;\n    let occupationEmployer = event.target.formGridOccupationEmployer.value;\n    let occupationEmployerContactPhone = event.target.formGridOccupationEmployerContactPhone.value;\n    let occupationEmployerContactEmail = event.target.formGridOccupationEmployerContactEmail.value;\n\n    if (\n      name.trim().length === 0 ||\n      dob.trim().length === 0 ||\n      age.trim().length === 0 ||\n      address.trim().length === 0 ||\n      contactPhone.trim().length === 0 ||\n      contactEmail.trim().length === 0 ||\n      registrationDate.trim().length === 0 ||\n      referralDate.trim().length === 0 ||\n      expirationDate.trim().length === 0 ||\n      referringDoctorName.trim().length === 0 ||\n      referringDoctorEmail.trim().length === 0 ||\n      referringDoctorPhone.trim().length === 0 ||\n      occupationRole.trim().length === 0 ||\n      occupationEmployer.trim().length === 0 ||\n      occupationEmployerContactPhone.trim().length === 0 ||\n      occupationEmployerContactEmail.trim().length === 0\n\n    ) {\n      console.log(\"blank fields detected!!!...Please try again...\");\n      return;\n    }\n\n    const patient = { name, dob, age, address, contactPhone, contactEmail, registrationDate, referringDoctorName, referringDoctorEmail, referringDoctorPhone, occupationRole, occupationEmployer, occupationEmployerContactPhone, occupationEmployerContactEmail };\n    console.log(\"creating patient.. \" + JSON.stringify(patient));\n\n    const requestBody = {\n      query: `\n          mutation {createPatient(userId:\\\"${userId}\\\",patientInput: {name:\\\"${name}\\\",dob:\\\"${dob}\\\",age:\\\"${age}\\\",address:\\\"${address}\\\",contactEmail:\\\"${contactEmail}\\\",contactPhone:\\\"${contactPhone}\\\",referringDoctorName:\\\"${referringDoctorName}\\\",referringDoctorEmail:\\\"${referringDoctorEmail}\\\",referringDoctorPhone:\\\"${referringDoctorPhone}\\\",occupationRole:\\\"${occupationRole}\\\",occupationEmployer:\\\"${occupationEmployer}\\\",occupationEmployerContactPhone:\\\"${occupationEmployerContactPhone}\\\",occupationEmployerContactEmail:\\\"${occupationEmployerContactEmail}\\\",registrationDate:\\\"${registrationDate}\\\",referralDate:\\\"${referralDate}\\\",expirationDate:\\\"${expirationDate}\\\"})\n          {_id,name,address,contact{email,phone},registrationDate,referralDate,expirationDate,referringDoctor{name,email,phone},occupation{role,employer,contact{email,phone}}}}\n        `\n    };\n\n    const token = this.context.token;\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n\n        this.setState(prevState => {\n          const updatedPatients = [...prevState.patients];\n          updatedPatients.push(\n            {\n            _id: resData.data.createPatient._id,\n            name: resData.data.createPatient.name,\n            dob: resData.data.createPatient.dob,\n            age: resData.data.createPatient.age,\n            address: resData.data.createPatient.address,\n            contact:{\n              phone: resData.data.createPatient.contactPhone,\n              email: resData.data.createPatient.contactEmail\n            },\n            registrationDate: resData.data.createPatient.registrationDate,\n            referralDate: resData.data.createPatient.referralDate,\n            expirationDate: resData.data.createPatient.expirationDate,\n            referringDoctor: {\n              name: resData.data.createPatient.referringDoctorName,\n              email: resData.data.createPatient.referringDoctorEmail,\n              phone: resData.data.createPatient.referringDoctorPhone,\n            },\n            occupation: {\n              role: resData.data.createPatient.occupationRole,\n              employer: resData.data.createPatient.occupationEmployer,\n              contact: {\n                phone: resData.data.createPatient.occupationEmployerContactPhone,\n                email: resData.data.createPatient.occupationEmployerContactEmail\n              }\n            }\n          }\n        );\n\n          return { patients: updatedPatients };\n        });\n\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  modalCancelHandler = () => {\n    this.setState({ creating: false, updating: false, selectedPatient: null });\n  };\n\n\n  modalConfirmUpdateHandler = (event) => {\n\n    if(this.context.user.role !== 'admin') {\n      console.log(\"Not the Admin! No edit permission!!\");\n\n    }\n\n    const userId = this.context.userId;\n    const patientId = this.context.selectedPatient._id;\n\n    // console.log(\"UpdateUserFormData:  \", event);\n    console.log(\"UpdatePatientFormData:  \", event.target.formGridName.value);\n\n\n    this.setState({ updating: false });\n    let name = event.target.formGridName.value;\n    let dob = event.target.formGridDob.value;\n    let age = event.target.formGridAge.value;\n    let address = event.target.formGridAddress.value;\n    let contactPhone = event.target.formGridContactPhone.value;\n    let contactEmail = event.target.formGridContactEmail.value;\n    let registrationDate = event.target.formGridRegistrationDate.value;\n    let referringDoctorName = event.target.formGridReferringDoctorName.value;\n    let referringDoctorEmail = event.target.formGridReferringDoctorEmail.value;\n    let referringDoctorPhone = event.target.formGridReferringDoctorPhone.value;\n    let occupationRole = event.target.formGridOccupationRole.value;\n    let occupationEmployer = event.target.formGridOccupationEmployer.value;\n    let occupationEmployerContactPhone = event.target.formGridOccupationEmployerContactPhone.value;\n    let occupationEmployerContactEmail = event.target.formGridOccupationEmployerContactEmail.value;\n\n\n    if (name.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      name  = this.context.selectedUser.name;\n      // return;\n    }\n    if (dob.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      dob  = this.context.selectedUser.dob;\n    }\n    if (age.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      age  = this.context.selectedUser.age;\n    }\n    if (address.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      address  = this.context.selectedUser.address;\n    }\n    if (contactPhone.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      contactPhone  = this.context.selectedUser.contactPhone;\n    }\n    if (contactEmail.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      contactEmail  = this.context.selectedUser.contactEmail;\n    }\n    if (registrationDate.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      registrationDate  = this.context.selectedUser.registrationDate;\n    }\n    if (referringDoctorName.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      referringDoctorName  = this.context.selectedUser.referringDoctorName;\n    }\n    if (referringDoctorEmail.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      referringDoctorEmail  = this.context.selectedUser.referringDoctorEmail;\n    }\n    if (referringDoctorPhone.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      referringDoctorPhone  = this.context.selectedUser.referringDoctorPhone;\n    }\n    if (occupationRole.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      occupationRole  = this.context.selectedUser.occupationRole;\n    }\n    if (occupationEmployer.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      occupationEmployer  = this.context.selectedUser.occupationEmployer;\n    }\n    if (occupationEmployerContactEmail.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      occupationEmployerContactEmail  = this.context.selectedUser.occupationEmployerContactEmail;\n    }\n    if (occupationEmployerContactPhone.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      occupationEmployerContactPhone  = this.context.selectedUser.occupationEmployerContactPhone;\n    }\n\n\n    const patient = { name, dob, age, address, contactPhone, contactEmail, registrationDate, referringDoctorName, referringDoctorEmail, referringDoctorPhone, occupationRole, occupationEmployer, occupationEmployerContactPhone, occupationEmployerContactEmail};\n    console.log(`\n      updating patient...\n      userId: ${userId},\n      patientId: ${patientId},\n      name: ${name},\n      dob: ${dob},\n      age: ${age},\n      address: ${address},\n      contactPhone: ${contactPhone},\n      contactEmail: ${contactEmail},\n      registrationDate: ${registrationDate},\n      referringDoctorName: ${referringDoctorName},\n      referringDoctorEmail: ${referringDoctorEmail},\n      referringDoctorPhone: ${referringDoctorPhone},\n      occupationRole: ${occupationRole},\n      occupationEmployer: ${occupationEmployer},\n      occupationEmployerContactPhone: ${occupationEmployerContactPhone},\n      occupationEmployerContactEmail: ${occupationEmployerContactEmail},\n      `);\n\n    const requestBody = {\n      query: `\n          mutation {\n            updatePatient(userId:\\\"${userId}\\\", patientId: \"${patientId}\", patientInput: { name: \"${name}\", dob: \"${dob}\",age: ${age}, address: \"${address}\", contactPhone: \"${contactPhone}\", contactEmail: \"${contactEmail}\", registrationDate: \"${registrationDate}\", referringDoctorName: \"${referringDoctorName}\", referringDoctorEmail: \"${referringDoctorEmail}\", referringDoctorPhone: \"${referringDoctorPhone}\", occupationRole: \"${occupationRole}\", occupationEmployer: \"${occupationEmployer}\", occupationEmployerContactPhone: \"${occupationEmployerContactPhone}\", occupationEmployerContactEmail: \"${occupationEmployerContactEmail}\" }){\n              _id\n              name\n              dob\n              age\n              address\n              contact{\n                email\n                phone\n              }\n              registrationDate\n              referralDate\n              expirationDate\n              referringDoctor{\n                name\n                email\n                phone\n              }\n                occupation{\n                  role\n                  employer\n                  contact{\n                    email\n                    phone\n                  }\n                }\n                insurance\n                {\n                  company\n                  number\n                  description\n                  expiry\n                  subscriber{\n                    company\n                    description\n                  }\n                }\n                nextOfKin{\n                  name\n                  contact{\n                    email\n                    phone\n                  }\n                }\n                complaints{\n                  date\n                  title\n                  description\n                  attachment{\n                    name\n                    format\n                    path\n                  }\n                }\n                examination{\n                  area\n                  type\n                  measure\n                  value\n                  description\n                  attachment{\n                    name\n                    format\n                    path\n                  }\n                }\n                history{\n                  title\n                  type\n                  date\n                  description\n                  attachment{\n                    name\n                    format\n                    path\n                  }\n                }\n                allergies{\n                  title\n                  description\n                  attachment{\n                    name\n                    format\n                    path\n                  }\n                }\n                medication{\n                  title\n                  description\n                  attachment{\n                    name\n                    format\n                    path\n                  }\n                }\n                investigation{\n                  date\n                  title\n                  description\n                  attachment{\n                    name\n                    format\n                    path\n                  }\n                }\n                  diagnosis{\n                    date\n                    title\n                    description\n                    attachment{\n                      name\n                      format\n                      path\n                    }\n                  }\n                  treatment{\n                    date\n                    title\n                    type\n                    description\n                    dose\n                    frequency\n                    attachment{\n                      name\n                      format\n                      path\n                    }\n                  }\n                  billing{\n                    date\n                    title\n                    type\n                    description\n                    amount\n                    paid\n                    notes\n                    attachment\n                    {\n                      name\n                      format\n                      path\n                    }\n                  }\n            }\n          }\n        `\n    };\n\n    const token = this.context.token;\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n\n        const updatedPatientId = resData.data.updatePatient._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(\n          {\n          _id: resData.data.updatePatient._id,\n          name: resData.data.updatePatient.name,\n          dob: resData.data.updatePatient.dob,\n          age: resData.data.updatePatient.age,\n          address: resData.data.updatePatient.address,\n          contact:{\n            phone: resData.data.updatePatient.contactPhone,\n            email: resData.data.updatePatient.contactEmail\n          },\n          registrationDate: resData.data.updatePatient.registrationDate,\n          referringDoctor: {\n            name: resData.data.updatePatient.referringDoctorName,\n            email: resData.data.updatePatient.referringDoctorEmail,\n            phone: resData.data.updatePatient.referringDoctorPhone,\n          },\n          occupation: {\n            role: resData.data.updatePatient.occupationRole,\n            employer: resData.data.updatePatient.occupationEmployer,\n            contact: {\n              phone: resData.data.updatePatient.occupationEmployerContactPhone,\n              email: resData.data.updatePatient.occupationEmployerContactEmail\n            }\n          }\n        }\n        );\n\n        // if (this.state.updatingArray === false && this.state.updating === false) {\n        //   console.log(\"update and updateArray complete...now fetching users\");\n        //\n        // }\n        this.fetchPatients();\n\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\nupdatePatientConsultantHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n  if(\n    this.context.user.role !== 'admin'\n  ) {\n    console.log(\"No edit permission!!\");\n    return;\n  }\n\n  console.log(\"UpdatePatientInsuranceFormData:  \", event.target.formGridInsuranceCompany.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n\n\n  const patientInsurance = { insuranceCompany, insuranceNumber, insuranceExpiry, insuranceDescription, insuranceSubscriberCompany, insuranceSubscriberDescription };\n  console.log(`\n    adding patient insurance item...\n    userId: ${userId},\n    selectedPatientId: ${selectedPatientId},\n    insuranceCompany: ${insuranceCompany},\n    insuranceNumber: ${insuranceNumber},\n    insuranceExpiry: ${insuranceExpiry},\n    insuranceDescription: ${insuranceDescription},\n    insuranceSubscriberCompany: ${insuranceSubscriberCompany},\n    insuranceSubscriberDescription: ${insuranceSubscriberDescription},\n    `);\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientInsurance(userId:\\\"${userId}\\\", patientId:\\\"${selectedPatientId}\\\",patientInput:{insuranceCompany:\\\"${insuranceCompany}\\\",insuranceNumber:\\\"${insuranceNumber}\\\",insuranceDescription:\\\"${insuranceDescription}\\\",insuranceExpiry:\\\"${insuranceExpiry}\\\",insuranceSubscriberCompany:\\\"${insuranceSubscriberCompany}\\\",insuranceSubscriberDescription:\\\"${insuranceSubscriberDescription}\\\"})\n        {_id,name,address,contact{email,phone},registrationDate,referralDate,expirationDate,referringDoctor{name,email,phone},occupation{role,employer,contact{email,phone}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{email,phone}},complaints{date,title,description,attachment{name,format,path}},examination{area,type,measure,value,description,attachment{name,format,path}},history{title,type,date,description,attachment{name,format,path}},allergies{title,description,attachment{name,format,path}},medication{title,description,attachment{name,format,path}},investigation{date,title,description,attachment{name,format,path}},diagnosis{date,title,description,attachment{name,format,path}},treatment{date,title,type,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,notes,attachment{name,format,path}}}}\n      `\n    };\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData.data));\n\n          const updatedPatientId = resData.data.updatePatientInsurance._id;\n          const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n          const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n          const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n          console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n          this.state.patients.push(updatedPatient);\n          this.context.patients = this.state.patients;\n          this.fetchPatients();\n        })\n        .catch(err => {\n          console.log(err);\n        });\n\n}\nupdatePatientInsuranceHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n  if(\n    this.context.user.role !== 'admin'\n  ) {\n    console.log(\"No edit permission!!\");\n    return;\n  }\n\n  console.log(\"UpdatePatientInsuranceFormData:  \", event.target.formGridInsuranceCompany.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let insuranceCompany = event.target.formGridInsuranceCompany.value;\n  let insuranceNumber = event.target.formGridInsuranceNumber.value;\n  let insuranceExpiry = event.target.formGridInsuranceExpiry.value;\n  let insuranceDescription = event.target.formGridInsuranceDescription.value;\n  let insuranceSubscriberCompany = event.target.formGridInsuranceSubscriberCompany.value;\n  let insuranceSubscriberDescription = event.target.formGridInsuranceSubscriberDescription.value;\n\n  const patientInsurance = { insuranceCompany, insuranceNumber, insuranceExpiry, insuranceDescription, insuranceSubscriberCompany, insuranceSubscriberDescription };\n  console.log(`\n    adding patient insurance item...\n    userId: ${userId},\n    selectedPatientId: ${selectedPatientId},\n    insuranceCompany: ${insuranceCompany},\n    insuranceNumber: ${insuranceNumber},\n    insuranceExpiry: ${insuranceExpiry},\n    insuranceDescription: ${insuranceDescription},\n    insuranceSubscriberCompany: ${insuranceSubscriberCompany},\n    insuranceSubscriberDescription: ${insuranceSubscriberDescription},\n    `);\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientInsurance(userId:\\\"${userId}\\\", patientId:\\\"${selectedPatientId}\\\",patientInput:{insuranceCompany:\\\"${insuranceCompany}\\\",insuranceNumber:\\\"${insuranceNumber}\\\",insuranceDescription:\\\"${insuranceDescription}\\\",insuranceExpiry:\\\"${insuranceExpiry}\\\",insuranceSubscriberCompany:\\\"${insuranceSubscriberCompany}\\\",insuranceSubscriberDescription:\\\"${insuranceSubscriberDescription}\\\"})\n        {_id,name,address,contact{email,phone},registrationDate,referralDate,expirationDate,referringDoctor{name,email,phone},occupation{role,employer,contact{email,phone}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{email,phone}},complaints{date,title,description,attachment{name,format,path}},examination{area,type,measure,value,description,attachment{name,format,path}},history{title,type,date,description,attachment{name,format,path}},allergies{title,description,attachment{name,format,path}},medication{title,description,attachment{name,format,path}},investigation{date,title,description,attachment{name,format,path}},diagnosis{date,title,description,attachment{name,format,path}},treatment{date,title,type,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,notes,attachment{name,format,path}}}}\n      `\n    };\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData.data));\n\n          const updatedPatientId = resData.data.updatePatientInsurance._id;\n          const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n          const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n          const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n          console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n          this.state.patients.push(updatedPatient);\n          this.context.patients = this.state.patients;\n          this.fetchPatients();\n        })\n        .catch(err => {\n          console.log(err);\n        });\n\n}\n\nupdatePatientNextOfKinHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n  if(\n    this.context.user.role !== 'admin'\n  ) {\n    console.log(\"No edit permission!!\");\n    return;\n  }\n\n  console.log(\"UpdatePatientNextOfKinFormData:  \", event.target.formGridNextOfKinName.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let nextOfKinName = event.target.formGridNextOfKinName.value;\n  let nextOfKinPhone = event.target.formGridNextOfKinPhone.value;\n  let nextOfKinEmail = event.target.formGridNextOfKinEmail.value;\n\n  const patientNextOfKin = { nextOfKinName, nextOfKinPhone, nextOfKinEmail };\n  console.log(`\n    adding patient nextOfKin item...\n    userId: ${userId},\n    selectedPatientId: ${selectedPatientId},\n    nextOfKinName: ${nextOfKinName},\n    nextOfKinPhone: ${nextOfKinPhone},\n    nextOfKinEmail: ${nextOfKinEmail},\n    `);\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientNextOfKin(userId:\\\"${userId}\\\", patientId:\\\"${selectedPatientId}\\\",patientInput:{nextOfKinName:\\\"${nextOfKinName}\\\",nextOfKinEmail:\\\"granny@kin.mail\\\",nextOfKinPhone:\\\"1234566\\\"})\n        {_id,name,address,contact{email,phone},registrationDate,referralDate,expirationDate,referringDoctor{name,email,phone},occupation{role,employer,contact{email,phone}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{email,phone}},complaints{date,title,description,attachment{name,format,path}},examination{area,type,measure,value,description,attachment{name,format,path}},history{title,type,date,description,attachment{name,format,path}},allergies{title,description,attachment{name,format,path}},medication{title,description,attachment{name,format,path}},investigation{date,title,description,attachment{name,format,path}},diagnosis{date,title,description,attachment{name,format,path}},treatment{date,title,type,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,notes,attachment{name,format,path}}}}\n      `\n    };\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData.data));\n\n          const updatedPatientId = resData.data.updatePatientNextOfKin._id;\n          const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n          const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n          const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n          console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n          this.state.patients.push(updatedPatient);\n          this.context.patients = this.state.patients;\n          this.fetchPatients();\n        })\n        .catch(err => {\n          console.log(err);\n        });\n}\n\n\nupdatePatientComplaintHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n  if(\n    this.context.user.role !== 'admin'\n  ) {\n    console.log(\"No edit permission!!\");\n    return;\n  }\n\n  console.log(\"UpdatePatientComplaintFormData:  \", event.target.formGridComplaintTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let complaintTitle = event.target.formGridComplaintTitle.value;\n  let complaintDate = event.target.formGridComplaintDate.value;\n  let complaintDescription = event.target.formGridComplaintDescription.value;\n  let complaintAttachmentName = event.target.formGridComplaintAttachmentName.value;\n  let complaintAttachmentFormat = event.target.formGridComplaintAttachmentFormat.value;\n  let complaintAttachmentPath = event.target.formGridComplaintAttachmentPath.value;\n\n  const patientComplaint = { complaintTitle, complaintDate, complaintDescription, complaintAttachmentName, complaintAttachmentFormat, complaintAttachmentPath };\n  console.log(`\n    adding patient complaint...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    complaintTitle: ${complaintTitle},\n    complaintDate: ${complaintDate},\n    complaintDescription: ${complaintDescription},\n    complaintAttachmentName: ${complaintAttachmentName},\n    complaintAttachmentFormat: ${complaintAttachmentFormat},\n    complaintAttachmentPath: ${complaintAttachmentPath},\n    `);\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientComplaint(userId:\\\"${userId}\\\", patientId:\\\"${selectedPatientId}\\\",patientInput:{complaintDate:\\\"${complaintDate}\\\",complaintTitle:\\\"${complaintTitle}\\\",complaintDescription:\\\"${complaintDescription}\\\",complaintAttachmentName:\\\"${complaintAttachmentName}\\\",complaintAttachmentFormat:\\\"${complaintAttachmentFormat}\\\",complaintAttachmentPath:\\\"${complaintAttachmentPath}\\\"})\n        {_id,name,address,contact{email,phone},registrationDate,referralDate,expirationDate,referringDoctor{name,email,phone},occupation{role,employer,contact{email,phone}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{email,phone}},complaints{date,title,description,attachment{name,format,path}},examination{area,type,measure,value,description,attachment{name,format,path}},history{title,type,date,description,attachment{name,format,path}},allergies{title,description,attachment{name,format,path}},medication{title,description,attachment{name,format,path}},investigation{date,title,description,attachment{name,format,path}},diagnosis{date,title,description,attachment{name,format,path}},treatment{date,title,type,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,notes,attachment{name,format,path}}}}\n      `\n    }\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientComplaint._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(updatedPatient);\n        this.context.patients = this.state.patients;\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n      });\n\n}\n\n\nupdatePatientExaminationHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n  if(\n    this.context.user.role !== 'admin'\n  ) {\n    console.log(\"No edit permission!!\");\n    return;\n  }\n\n  console.log(\"UpdatePatientExaminationFormData:  \", event.target.formGridExaminationArea.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let examinationArea = event.target.formGridExaminationArea.value;\n  let examinationType = event.target.formGridExaminationType.value;\n  let examinationMeasure = event.target.formGridExaminationMeasure.value;\n  let examinationValue = event.target.formGridExaminationValue.value;\n  let examinationDescription = event.target.formGridExaminationDescription.value;\n  let examinationAttachmentName = event.target.formGridExaminationAttachmentName.value;\n  let examinationAttachmentFormat = event.target.formGridExaminationAttachmentFormat.value;\n  let examinationAttachmentPath = event.target.formGridExaminationAttachmentPath.value;\n\n  const patientExamination = { examinationArea, examinationType, examinationMeasure, examinationValue, examinationAttachmentName, examinationAttachmentFormat, examinationAttachmentPath };\n\n  console.log(`\n    adding patient examination...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    examinationArea: ${examinationArea},\n    examinationType: ${examinationType},\n    examinationMeasure: ${examinationMeasure},\n    examinationValue: ${examinationValue},\n    examinationDescription: ${examinationDescription},\n    examinationAttachmentName: ${examinationAttachmentName},\n    examinationAttachmentFormat: ${examinationAttachmentFormat},\n    examinationAttachmentPath: ${examinationAttachmentPath},\n    `);\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientExamination(userId:\\\"${userId}\\\", patientId:\\\"${selectedPatientId}\\\",patientInput:{examinationArea:\\\"${examinationArea}\\\",examinationType:\\\"${examinationType}\\\",examinationMeasure:\\\"${examinationMeasure}\\\",examinationValue:\\\"${examinationValue}\\\",examinationDescription:\\\"${examinationDescription}\\\",examinationAttachmentName:\\\"${examinationAttachmentName}\\\",examinationAttachmentFormat:\\\"${examinationAttachmentFormat}\\\",examinationAttachmentPath:\\\"${examinationAttachmentPath}\\\"})\n        {_id,name,address,contact{email,phone},registrationDate,referralDate,expirationDate,referringDoctor{name,email,phone},occupation{role,employer,contact{email,phone}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{email,phone}},complaints{date,title,description,attachment{name,format,path}},examination{area,type,measure,value,description,attachment{name,format,path}},history{title,type,date,description,attachment{name,format,path}},allergies{title,description,attachment{name,format,path}},medication{title,description,attachment{name,format,path}},investigation{date,title,description,attachment{name,format,path}},diagnosis{date,title,description,attachment{name,format,path}},treatment{date,title,type,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,notes,attachment{name,format,path}}}}\n      `\n    }\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientExamination._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(updatedPatient);\n        this.context.patients = this.state.patients;\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n      });\n\n}\n\n\nupdatePatientHistoryHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n  if(\n    this.context.user.role !== 'admin'\n  ) {\n    console.log(\"No edit permission!!\");\n    return;\n  }\n\n  console.log(\"UpdatePatientHistoryFormData:  \", event.target.formGridHistoryTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let historyType = event.target.formGridHistoryType.value;\n  let historyDate = event.target.formGridHistoryDate.value;\n  let historyTitle = event.target.formGridHistoryTitle.value;\n  let historyDescription = event.target.formGridHistoryDescription.value;\n  let historyAttachmentName = event.target.formGridHistoryAttachmentName.value;\n  let historyAttachmentFormat = event.target.formGridHistoryAttachmentFormat.value;\n  let historyAttachmentPath = event.target.formGridHistoryAttachmentPath.value;\n\n  const patientHistory = { historyType, historyDate, historyTitle, historyDescription, historyAttachmentName, historyAttachmentFormat, historyAttachmentPath };\n  console.log(`\n    adding patient history...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    historyType: ${historyType},\n    historyDate: ${historyDate},\n    historyTitle: ${historyTitle},\n    historyDescription: ${historyDescription},\n    historyAttachmentName: ${historyAttachmentName},\n    historyAttachmentFormat: ${historyAttachmentFormat},\n    historyAttachmentPath: ${historyAttachmentPath},\n    `);\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientHistory(userId:\\\"${userId}\\\", patientId:\\\"${selectedPatientId}\\\",patientInput:{historyTitle:\\\"${historyTitle}\\\",historyType:\\\"${historyType}\\\",historyDate:\\\"${historyDate}\\\",historyDescription:\\\"${historyDescription}\\\",historyAttachmentName:\\\"${historyAttachmentName}\\\",historyAttachmentFormat:\\\"${historyAttachmentFormat}\\\",historyAttachmentPath:\\\"${historyAttachmentPath}\\\"})\n        {_id,name,address,contact{email,phone},registrationDate,referralDate,expirationDate,referringDoctor{name,email,phone},occupation{role,employer,contact{email,phone}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{email,phone}},complaints{date,title,description,attachment{name,format,path}},examination{area,type,measure,value,description,attachment{name,format,path}},history{title,type,date,description,attachment{name,format,path}},allergies{title,description,attachment{name,format,path}},medication{title,description,attachment{name,format,path}},investigation{date,title,description,attachment{name,format,path}},diagnosis{date,title,description,attachment{name,format,path}},treatment{date,title,type,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,notes,attachment{name,format,path}}}}\n      `\n    }\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientHistory._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(updatedPatient);\n        this.context.patients = this.state.patients;\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n      });\n\n}\n\n\nupdatePatientAllergiesHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n  if(\n    this.context.user.role !== 'admin'\n  ) {\n    console.log(\"No edit permission!!\");\n    return;\n  }\n\n  console.log(\"UpdatePatientAllergiesFormData:  \", event.target.formGridAllergiesTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let allergiesTitle = event.target.formGridAllergiesTitle.value;\n  let allergiesDescription = event.target.formGridAllergiesDescription.value;\n  let allergiesAttachmentName = event.target.formGridAllergiesAttachmentName.value;\n  let allergiesAttachmentFormat = event.target.formGridAllergiesAttachmentFormat.value;\n  let allergiesAttachmentPath = event.target.formGridAllergiesAttachmentPath.value;\n\n  const patientAllergies = { allergiesTitle, allergiesDescription, allergiesAttachmentName, allergiesAttachmentFormat, allergiesAttachmentPath };\n\n  console.log(`\n    adding patient allergies...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    allergiesTitle: ${allergiesTitle},\n    allergiesDescription: ${allergiesDescription},\n    allergiesAttachmentName: ${allergiesAttachmentName},\n    allergiesAttachmentFormat: ${allergiesAttachmentFormat},\n    allergiesAttachmentPath: ${allergiesAttachmentPath},\n    `);\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientAllergies(userId:\\\"${userId}\\\", patientId:\\\"${selectedPatientId}\\\",patientInput:{allergiesTitle:\\\"${allergiesTitle}\\\", allergiesDescription:\\\"${allergiesDescription}\\\",allergiesAttachmentName:\\\"${allergiesAttachmentName}\\\",allergiesAttachmentFormat:\\\"${allergiesAttachmentFormat}\\\",allergiesAttachmentPath:\\\"${allergiesAttachmentPath}\\\"})\n        {_id,name,address,contact{email,phone},registrationDate,referralDate,expirationDate,referringDoctor{name,email,phone},occupation{role,employer,contact{email,phone}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{email,phone}},complaints{date,title,description,attachment{name,format,path}},examination{area,type,measure,value,description,attachment{name,format,path}},history{title,type,date,description,attachment{name,format,path}},allergies{title,description,attachment{name,format,path}},medication{title,description,attachment{name,format,path}},investigation{date,title,description,attachment{name,format,path}},diagnosis{date,title,description,attachment{name,format,path}},treatment{date,title,type,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,notes,attachment{name,format,path}}}}\n      `\n    }\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientAllergies._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(updatedPatient);\n        this.context.patients = this.state.patients;\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n      });\n\n\n}\n\n\nupdatePatientMedicationHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n  if(\n    this.context.user.role !== 'admin'\n  ) {\n    console.log(\"No edit permission!!\");\n    return;\n  }\n\n  console.log(\"UpdatePatientMedicationFormData:  \", event.target.formGridMedicationTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let medicationTitle = event.target.formGridMedicationTitle.value;\n  let medicationDescription = event.target.formGridMedicationDescription.value;\n  let medicationAttachmentName = event.target.formGridMedicationAttachmentName.value;\n  let medicationAttachmentFormat = event.target.formGridMedicationAttachmentFormat.value;\n  let medicationAttachmentPath = event.target.formGridMedicationAttachmentPath.value;\n\n  const patientMedication = { medicationTitle, medicationDescription, medicationAttachmentName, medicationAttachmentFormat, medicationAttachmentPath };\n\n  console.log(`\n    adding patient medication...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    medicationTitle: ${medicationTitle},\n    medicationDescription: ${medicationDescription},\n    medicationAttachmentName: ${medicationAttachmentName},\n    medicationAttachmentFormat: ${medicationAttachmentFormat},\n    medicationAttachmentPath: ${medicationAttachmentPath},\n    `);\n\n    const requestBody = {\n      query:`\n      mutation {updatePatientMedication(userId:\\\"${userId}\\\", patientId:\\\"${selectedPatientId}\\\",patientInput:{medicationTitle:\\\"${medicationTitle}\\\", medicationDescription:\\\"${medicationDescription}\\\",medicationAttachmentName:\\\"${medicationAttachmentName}\\\",medicationAttachmentFormat:\\\"${medicationAttachmentFormat}\\\",medicationAttachmentPath:\\\"${medicationAttachmentPath}\\\"})\n        {_id,name,address,contact{email,phone},registrationDate,referralDate,expirationDate,referringDoctor{name,email,phone},occupation{role,employer,contact{email,phone}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{email,phone}},complaints{date,title,description,attachment{name,format,path}},examination{area,type,measure,value,description,attachment{name,format,path}},history{title,type,date,description,attachment{name,format,path}},allergies{title,description,attachment{name,format,path}},medication{title,description,attachment{name,format,path}},investigation{date,title,description,attachment{name,format,path}},diagnosis{date,title,description,attachment{name,format,path}},treatment{date,title,type,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,notes,attachment{name,format,path}}}}\n      `\n    }\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientMedication._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(updatedPatient);\n        this.context.patients = this.state.patients;\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n      });\n\n}\n\n\nupdatePatientInvestigationHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n  if(\n    this.context.user.role !== 'admin'\n  ) {\n    console.log(\"No edit permission!!\");\n    return;\n  }\n\n  console.log(\"UpdatePatientInvestigationFormData:  \", event.target.formGridInvestigationTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let investigationDate = event.target.formGridInvestigationDate.value;\n  let investigationTitle = event.target.formGridInvestigationTitle.value;\n  let investigationDescription = event.target.formGridInvestigationDescription.value;\n  let investigationAttachmentName = event.target.formGridInvestigationAttachmentName.value;\n  let investigationAttachmentFormat = event.target.formGridInvestigationAttachmentFormat.value;\n  let investigationAttachmentPath = event.target.formGridInvestigationAttachmentPath.value;\n\n  const patientInvestigation = { investigationDate, investigationTitle, investigationDescription, investigationAttachmentName, investigationAttachmentFormat, investigationAttachmentPath };\n\n  console.log(`\n    adding patient investigation...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    investigationDate: ${investigationDate},\n    investigationTitle: ${investigationTitle},\n    investigationDescription: ${investigationDescription},\n    investigationAttachmentName: ${investigationAttachmentName},\n    investigationAttachmentFormat: ${investigationAttachmentFormat},\n    investigationAttachmentPath: ${investigationAttachmentPath},\n    `);\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientInvestigation(userId:\\\"${userId}\\\", patientId:\\\"${selectedPatientId}\\\",patientInput:{investigationDate:\\\"${investigationDate}\\\",investigationTitle:\\\"${investigationTitle}\\\",investigationDescription:\\\"${investigationDescription}\\\",investigationAttachmentName:\\\"${investigationAttachmentName}\\\",investigationAttachmentFormat:\\\"${investigationAttachmentFormat}\\\",investigationAttachmentPath:\\\"${investigationAttachmentPath}\\\"})\n        {_id,name,address,contact{email,phone},registrationDate,referralDate,expirationDate,referringDoctor{name,email,phone},occupation{role,employer,contact{email,phone}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{email,phone}},complaints{date,title,description,attachment{name,format,path}},examination{area,type,measure,value,description,attachment{name,format,path}},history{title,type,date,description,attachment{name,format,path}},allergies{title,description,attachment{name,format,path}},medication{title,description,attachment{name,format,path}},investigation{date,title,description,attachment{name,format,path}},diagnosis{date,title,description,attachment{name,format,path}},treatment{date,title,type,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,notes,attachment{name,format,path}}}}\n      `\n    }\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientInvestigation._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(updatedPatient);\n        this.context.patients = this.state.patients;\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n      });\n\n}\n\n\nupdatePatientDiagnosisHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n  if(\n    this.context.user.role !== 'admin'\n  ) {\n    console.log(\"No edit permission!!\");\n    return;\n  }\n\n  console.log(\"UpdatePatientDiagnosisFormData:  \", event.target.formGridDiagnosisTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let diagnosisDate = event.target.formGridDiagnosisDate.value;\n  let diagnosisTitle = event.target.formGridDiagnosisTitle.value;\n  let diagnosisDescription = event.target.formGridDiagnosisDescription.value;\n  let diagnosisAttachmentName = event.target.formGridDiagnosisAttachmentName.value;\n  let diagnosisAttachmentFormat = event.target.formGridDiagnosisAttachmentFormat.value;\n  let diagnosisAttachmentPath = event.target.formGridDiagnosisAttachmentPath.value;\n\n  const patientDiagnosis = { diagnosisDate, diagnosisTitle, diagnosisDescription, diagnosisAttachmentName, diagnosisAttachmentFormat, diagnosisAttachmentPath };\n\n  console.log(`\n    adding patient diagnosis...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    diagnosisDate: ${diagnosisDate},\n    diagnosisTitle: ${diagnosisTitle},\n    diagnosisDescription: ${diagnosisDescription},\n    diagnosisAttachmentName: ${diagnosisAttachmentName},\n    diagnosisAttachmentFormat: ${diagnosisAttachmentFormat},\n    diagnosisAttachmentPath: ${diagnosisAttachmentPath},\n    `);\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientDiagnosis(userId:\\\"${userId}\\\", patientId:\\\"${selectedPatientId}\\\",patientInput:{diagnosisDate:\\\"${diagnosisDate}\\\",diagnosisTitle:\\\"${diagnosisTitle}\\\",diagnosisDescription:\\\"${diagnosisDescription}\\\",diagnosisAttachmentName:\\\"${diagnosisAttachmentName}\\\",diagnosisAttachmentFormat:\\\"${diagnosisAttachmentFormat}\\\",diagnosisAttachmentPath:\\\"${diagnosisAttachmentPath}\\\"})\n        {_id,name,address,contact{email,phone},registrationDate,referralDate,expirationDate,referringDoctor{name,email,phone},occupation{role,employer,contact{email,phone}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{email,phone}},complaints{date,title,description,attachment{name,format,path}},examination{area,type,measure,value,description,attachment{name,format,path}},history{title,type,date,description,attachment{name,format,path}},allergies{title,description,attachment{name,format,path}},medication{title,description,attachment{name,format,path}},investigation{date,title,description,attachment{name,format,path}},diagnosis{date,title,description,attachment{name,format,path}},treatment{date,title,type,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,notes,attachment{name,format,path}}}}\n      `\n    }\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientDiagnosis._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(updatedPatient);\n        this.context.patients = this.state.patients;\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n      });\n\n}\n\n\nupdatePatientTreatmentHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n  if(\n    this.context.user.role !== 'admin'\n  ) {\n    console.log(\"No edit permission!!\");\n    return;\n  }\n\n  console.log(\"UpdatePatientTreatmentFormData:  \", event.target.formGridTreatmentTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let treatmentDate = event.target.formGridTreatmentDate.value;\n  let treatmentTitle = event.target.formGridTreatmentTitle.value;\n  let treatmentDescription = event.target.formGridTreatmentDescription.value;\n  let treatmentDose = event.target.formGridTreatmentDose.value;\n  let treatmentFrequency = event.target.formGridTreatmentFrequency.value;\n  let treatmentType = event.target.formGridTreatmentType.value;\n  let treatmentAttachmentName = event.target.formGridTreatmentAttachmentName.value;\n  let treatmentAttachmentFormat = event.target.formGridTreatmentAttachmentFormat.value;\n  let treatmentAttachmentPath = event.target.formGridTreatmentAttachmentPath.value;\n\n  const patientTreatment = { treatmentDate, treatmentTitle, treatmentDescription, treatmentDose, treatmentFrequency, treatmentType, treatmentAttachmentName, treatmentAttachmentFormat, treatmentAttachmentPath };\n\n  console.log(`\n    adding patient treatment...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    treatmentDate: ${treatmentDate},\n    treatmentTitle: ${treatmentTitle},\n    treatmentDescription: ${treatmentDescription},\n    treatmentDose: ${treatmentDose},\n    treatmentFrequency: ${treatmentFrequency},\n    treatmentType: ${treatmentType},\n    treatmentAttachmentName: ${treatmentAttachmentName},\n    treatmentAttachmentFormat: ${treatmentAttachmentFormat},\n    treatmentAttachmentPath: ${treatmentAttachmentPath},\n    `);\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientTreatment(userId:\\\"${userId}\\\", patientId:\\\"${selectedPatientId}\\\",patientInput:{treatmentDate:\\\"${treatmentDate}\\\",treatmentTitle:\\\"${treatmentTitle}\\\",treatmentType:\\\"${treatmentType}\\\",treatmentDescription:\\\"${treatmentDescription}\\\",treatmentDose:\\\"${treatmentDose}\\\",treatmentFrequency:\\\"${treatmentFrequency}\\\",treatmentAttachmentName:\\\"${treatmentAttachmentName}\\\",treatmentAttachmentFormat:\\\"${treatmentAttachmentFormat}\\\",treatmentAttachmentPath:\\\"${treatmentAttachmentPath}\\\"})\n        {_id,name,address,contact{email,phone},registrationDate,referralDate,expirationDate,referringDoctor{name,email,phone},occupation{role,employer,contact{email,phone}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{email,phone}},complaints{date,title,description,attachment{name,format,path}},examination{area,type,measure,value,description,attachment{name,format,path}},history{title,type,date,description,attachment{name,format,path}},allergies{title,description,attachment{name,format,path}},medication{title,description,attachment{name,format,path}},investigation{date,title,description,attachment{name,format,path}},diagnosis{date,title,description,attachment{name,format,path}},treatment{date,title,type,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,notes,attachment{name,format,path}}}}\n      `\n    }\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientTreatment._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(updatedPatient);\n        this.context.patients = this.state.patients;\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n      });\n\n}\n\n\n\nupdatePatientBillingHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n  if(\n    this.context.user.role !== 'admin'\n  ) {\n    console.log(\"No edit permission!!\");\n    return;\n  }\n\n  console.log(\"UpdatePatientBillingFormData:  \", event.target.formGridBillingTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let billingDate = event.target.formGridBillingDate.value;\n  let billingTitle = event.target.formGridBillingTitle.value;\n  let billingType = event.target.formGridBillingType.value;\n  let billingDescription = event.target.formGridBillingDescription.value;\n  let billingAmount = event.target.formGridBillingAmount.value;\n  let billingPaid = event.target.formGridBillingPaid.value;\n  let billingNotes = event.target.formGridBillingNotes.value;\n  let billingAttachmentName = event.target.formGridBillingAttachmentName.value;\n  let billingAttachmentFormat = event.target.formGridBillingAttachmentFormat.value;\n  let billingAttachmentPath = event.target.formGridBillingAttachmentPath.value;\n\n  const patientBilling = { billingDate, billingTitle, billingType, billingDescription, billingAmount, billingPaid, billingNotes, billingAttachmentName, billingAttachmentFormat, billingAttachmentPath };\n\n  console.log(`\n    adding patient treatment...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    billingDate: ${billingDate},\n    billingTitle: ${billingTitle},\n    billingType: ${billingType},\n    billingDescription: ${billingDescription},\n    billingAmount: ${billingAmount},\n    billingPaid: ${billingPaid},\n    billingNotes: ${billingNotes},\n    billingAttachmentName: ${billingAttachmentName},\n    billingAttachmentFormat: ${billingAttachmentFormat},\n    billingAttachmentPath: ${billingAttachmentPath},\n    `);\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientBilling(userId:\\\"${userId}\\\", patientId:\\\"${selectedPatientId}\\\",patientInput:{billingDate:\\\"${billingDate}\\\",billingTitle:\\\"${billingTitle}\\\",billingType:\\\"${billingType}\\\",billingDescription:\\\"${billingDescription}\\\",billingAmount:${billingAmount},billingPaid:${billingPaid},billingNotes:\\\"${billingNotes}\\\",billingAttachmentName:\\\"${billingAttachmentName}\\\",billingAttachmentFormat:\\\"${billingAttachmentFormat}\\\",billingAttachmentPath:\\\"${billingAttachmentPath}\\\"})\n        {_id,name,address,contact{email,phone},registrationDate,referralDate,expirationDate,referringDoctor{name,email,phone},occupation{role,employer,contact{email,phone}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{email,phone}},complaints{date,title,description,attachment{name,format,path}},examination{area,type,measure,value,description,attachment{name,format,path}},history{title,type,date,description,attachment{name,format,path}},allergies{title,description,attachment{name,format,path}},medication{title,description,attachment{name,format,path}},investigation{date,title,description,attachment{name,format,path}},diagnosis{date,title,description,attachment{name,format,path}},treatment{date,title,type,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,notes,attachment{name,format,path}}}}\n      `\n    }\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientBilling._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(updatedPatient);\n        this.context.patients = this.state.patients;\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n      });\n\n\n}\n\n\n\n\nmodalConfirmSearchHandler = (event) => {\n  console.log(\"SearchPatientForm:  \");\n\n\n  let userId = this.context.userId;\n\n    console.log(\"SearchPatientFormData:  \", event.target.formBasicField.value);\n    this.setState({ searching: false });\n\n    let field = event.target.formBasicField.value;\n    let query = event.target.formBasicQuery.value;\n\n    if (\n      field.trim().length === 0 ||\n      query.trim().length === 0\n    ) {\n      console.log(\"blank fields detected!!!...Please try again...\");\n      return;\n    }\n\n    const search = { field, query }\n    console.log(\"Searching for Patient:  \", JSON.stringify(search));\n\n    const requestBody = {\n      query: `\n        query GetPatientField($userId: ID!, $field: String!, $query: String!)\n        {getPatientField(userId: $userId, field: $field, query: $query ){\n          _id\n          name\n          dob\n          age\n          address\n          contact{\n            email\n            phone\n          }\n          registrationDate\n          referralDate\n          expirationDate\n          referringDoctor{\n            name\n            email\n            phone\n          }\n            occupation{\n              role\n              employer\n              contact{\n                email\n                phone\n              }\n            }\n            insurance\n            {\n              company\n              number\n              description\n              expiry\n              subscriber{\n                company\n                description\n              }\n            }\n            nextOfKin{\n              name\n              contact{\n                email\n                phone\n              }\n            }\n            complaints{\n              date\n              title\n              description\n              attachment{\n                name\n                format\n                path\n              }\n            }\n            examination{\n              area\n              type\n              measure\n              value\n              description\n              attachment{\n                name\n                format\n                path\n              }\n            }\n            history{\n              title\n              type\n              date\n              description\n              attachment{\n                name\n                format\n                path\n              }\n            }\n            allergies{\n              title\n              description\n              attachment{\n                name\n                format\n                path\n              }\n            }\n            medication{\n              title\n              description\n              attachment{\n                name\n                format\n                path\n              }\n            }\n            investigation{\n              date\n              title\n              description\n              attachment{\n                name\n                format\n                path\n              }\n            }\n              diagnosis{\n                date\n                title\n                description\n                attachment{\n                  name\n                  format\n                  path\n                }\n              }\n              treatment{\n                date\n                title\n                type\n                description\n                dose\n                frequency\n                attachment{\n                  name\n                  format\n                  path\n                }\n              }\n              billing{\n                date\n                title\n                type\n                description\n                amount\n                paid\n                notes\n                attachment\n                {\n                  name\n                  format\n                  path\n                }\n              }\n        }\n      }\n      `,\n      variables: {\n        userId: userId,\n        field: field,\n        query: query\n      }\n    }\n\n    const token = this.context.token;\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n\n        const searchPatients = resData.data.getPatientField;\n\n        this.setState({ searchPatients: searchPatients})\n        console.log(\"state.searchPatients:  \", this.state.searchPatients);\n        // this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n      });\n}\n\n\n\n  modalCancelHandler = () => {\n    this.setState({ creating: false, updating: false, searching: false, selectedPatient: null });\n  };\n\n\n  fetchPatients() {\n    console.log(\"'fetch patients function' context object... \" + JSON.stringify(this.context));\n    const userId = this.context.userId;\n\n    this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n          query patients($userId: ID!) {\n            patients(userId: $userId) {\n              _id\n              name\n              dob\n              age\n              address\n              contact{\n                email\n                phone\n              }\n              registrationDate\n              referralDate\n              expirationDate\n              appointments{\n                title\n                date\n                type\n                location\n              }\n              referringDoctor{\n                name\n                email\n                phone\n              }\n                occupation{\n                  role\n                  employer\n                  contact{\n                    email\n                    phone\n                  }\n                }\n                insurance\n                {\n                  company\n                  number\n                  description\n                  expiry\n                  subscriber{\n                    company\n                    description\n                  }\n                }\n                nextOfKin{\n                  name\n                  contact{\n                    email\n                    phone\n                  }\n                }\n                complaints{\n                  date\n                  title\n                  description\n                  attachment{\n                    name\n                    format\n                    path\n                  }\n                }\n                examination{\n                  area\n                  type\n                  measure\n                  value\n                  description\n                  attachment{\n                    name\n                    format\n                    path\n                  }\n                }\n                history{\n                  title\n                  type\n                  date\n                  description\n                  attachment{\n                    name\n                    format\n                    path\n                  }\n                }\n                allergies{\n                  title\n                  description\n                  attachment{\n                    name\n                    format\n                    path\n                  }\n                }\n                medication{\n                  title\n                  description\n                  attachment{\n                    name\n                    format\n                    path\n                  }\n                }\n                investigation{\n                  date\n                  title\n                  description\n                  attachment{\n                    name\n                    format\n                    path\n                  }\n                }\n                  diagnosis{\n                    date\n                    title\n                    description\n                    attachment{\n                      name\n                      format\n                      path\n                    }\n                  }\n                  treatment{\n                    date\n                    title\n                    type\n                    description\n                    dose\n                    frequency\n                    attachment{\n                      name\n                      format\n                      path\n                    }\n                  }\n                  billing{\n                    date\n                    title\n                    type\n                    description\n                    amount\n                    paid\n                    notes\n                    attachment\n                    {\n                      name\n                      format\n                      path\n                    }\n                  }\n            }\n          }\n        `,\n        variables: {\n          userId: userId\n        }\n    };\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const patients = resData.data.patients;\n        console.log(patients);\n\n        this.context.patients = this.state.patients;\n        if (this.isActive) {\n          this.setState({ patients: patients, isLoading: false });\n        }\n\n      })\n      .catch(err => {\n        console.log(err);\n        if (this.isActive) {\n          this.setState({ isLoading: false });\n        }\n      });\n  }\n\n\n  modalDeleteHandler = () => {\n    console.log(\"deleting patient...selectedPatient:  \", this.context.selectedPatient);\n\n    const selectedPatientId = this.context.selectedPatient._id;\n\n    if(this.context.user.role !== 'admin') {\n      console.log(\"Not the Admin! No edit permission!!\");\n    }\n\n    this.setState({deleting: true});\n\n\n    const requestBody = {\n      query: `\n          mutation DeletePatient($userId: ID!, $patientId: ID!) {\n            deletePatient(userId: $userId, patientId: $patientId) {\n              _id\n              name\n              address\n              dob\n              age\n              contact{\n                email\n                phone\n              }\n              registrationDate\n              referringDoctor\n              {\n                name\n                email\n                phone\n              }\n              occupation\n              {\n                role\n                employer\n                contact\n                {\n                  email\n                  phone\n                }\n              }\n            }\n          }\n        `,\n        variables: {\n          userId: this.context.userId,\n          patientId: selectedPatientId\n        }\n    };\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        let deletedPatient = resData.data.deletePatient;\n        console.log(deletedPatient);\n\n        let deletedPatientId = deletedPatient._id;\n        deletedPatient = this.state.patients.find(e => e._id === deletedPatientId);\n        const deletedPatientPos = this.state.patients.indexOf(deletedPatient);\n        const slicedArray = this.state.patients.splice(deletedPatientPos, 1);\n        console.log(\"deletedPatient:  \", JSON.stringify(deletedPatient),\"  deletedUserPos:  \", deletedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.setState({ deleting: false });\n\n        this.fetchPatients();\n\n      })\n      .catch(err => {\n        console.log(err);\n        if (this.isActive) {\n          this.setState({ deleting: false });\n        }\n      });\n  }\n\n\n  updatePatientSpecial (event) {\n\n    console.log(\"special field to update:  \", event.target.value);\n    const field = event.target.value;\n    this.setState({ patientUpdateField: field});\n\n  }\n\n\n  showDetailHandler = patientId => {\n\n    this.setState(prevState => {\n      const selectedPatient = prevState.patients.find(e => e._id === patientId);\n      this.context.selectedPatient = selectedPatient;\n      this.context.selectedPatientId = selectedPatient._id;\n      console.log(\"selectedPatient:  \", selectedPatient);\n      return { selectedPatient: selectedPatient };\n    });\n  };\n\n\n  componentWillUnmount() {\n    this.isActive = false;\n  }\n\n  render() {\n    return (\n\n    <React.Fragment>\n    <Accordion>\n\n    <Container className=\"containerUserDetail\">\n\n    <Row className=\"createUserRowAdd\">\n    <Col md={4} className=\"createUserColAdd\">\n    <p>Patient Detail</p>\n    </Col>\n    <Col md={6} className=\"createUserColAdd\">\n    <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"6\" className=\"btn\">\n    Details\n    </Accordion.Toggle>\n    </Col>\n    </Row>\n\n    <Accordion.Collapse eventKey=\"6\">\n    <Row className=\"createUserRowForm\">\n    <Col md={11} className=\"createUserColForm\">\n    {this.state.isLoading === false &&\n      this.state.selectedPatient !== null\n      &&\n      (<PatientDetail\n        authUserId={this.context.userId}\n        patient={this.state.selectedPatient}\n        onEdit={this.startUpdatePatientHandler}\n        onDelete={this.modalDeleteHandler}\n    />)\n  }\n    </Col>\n    </Row>\n    </Accordion.Collapse>\n\n    </Container>\n\n    <Container className=\"containerCreateuser\">\n    <Row className=\"createUserRowAdd\">\n    <Col md={4} className=\"createUserColAdd\">\n      <p>Add Patient</p>\n    </Col>\n    <Col md={4}>\n      {this.context.token && (\n        <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"7\" className=\"btn\" onClick={this.startCreatePatientHandler}>\n        Add\n        </Accordion.Toggle>\n      )}\n    </Col>\n    </Row>\n\n    <Accordion.Collapse eventKey=\"7\">\n    <Row className=\"createUserRowForm\">\n    <Col md={12} className=\"createUserColForm\">\n    {\n      this.state.creating && (\n        <CreatePatientForm\n        canCancel\n          canConfirm\n          onCancel={this.modalCancelHandler}\n          onConfirm={this.modalConfirmHandler}\n          confirmText=\"Confirm\"\n        />\n    )}\n    </Col>\n    </Row>\n    </Accordion.Collapse>\n\n\n    <Row className=\"updateUserRowAdd\">\n    <Col md={2} className=\"updateUserCol\">\n    <p>Edit Patient</p>\n    </Col>\n    <Col md={4} className=\"updateUserCol\">\n    {this.context.token && (\n      <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"8\" className=\"btn\" onClick={this.startUpdatePatientHandler}>\n      Basic Info & Demographics\n      </Accordion.Toggle>\n    )}\n    </Col>\n    <Col md={2}>\n      <p>Patient</p>\n    </Col>\n    <Col md={4}>\n      {this.context.selectedPatient && (\n        <p>{this.context.selectedPatient.name}</p>\n      )}\n    </Col>\n    </Row>\n\n    <Row className=\"createUserRowAdd\">\n    <Col md={1} className=\"updateUserCol2\">\n    <p>Edit Patient</p>\n    </Col>\n    <Col md={11} className=\"updateUserCol2\">\n    {this.context.token && (\n      <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"9\" className=\"btn\" value='consultant' onClick={this.updatePatientSpecial.bind(this)}>\n      Consultant\n      </Accordion.Toggle>\n    )}\n    {this.context.token && (\n      <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"9\" className=\"btn\" value='insurance' onClick={this.updatePatientSpecial.bind(this)}>\n      Insurance\n      </Accordion.Toggle>\n    )}\n    {this.context.token && (\n      <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"9\" className=\"btn\" value='nextOfKin' onClick={this.updatePatientSpecial.bind(this)}>\n      Next Of Kin\n      </Accordion.Toggle>\n    )}\n    {this.context.token && (\n      <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"9\" className=\"btn\" value='complaint' onClick={this.updatePatientSpecial.bind(this)}>\n      Complaint\n      </Accordion.Toggle>\n    )}\n    {this.context.token && (\n      <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"9\" className=\"btn\" value='examination' onClick={this.updatePatientSpecial.bind(this)}>\n      Examination\n      </Accordion.Toggle>\n    )}\n    {this.context.token && (\n      <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"9\" className=\"btn\" value='history' onClick={this.updatePatientSpecial.bind(this)}>\n      History\n      </Accordion.Toggle>\n    )}\n    {this.context.token && (\n      <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"9\" className=\"btn\" value='allergies' onClick={this.updatePatientSpecial.bind(this)}>\n      Allergies\n      </Accordion.Toggle>\n    )}\n    {this.context.token && (\n      <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"9\" className=\"btn\" value='medication' onClick={this.updatePatientSpecial.bind(this)}>\n      Medication\n      </Accordion.Toggle>\n    )}\n    {this.context.token && (\n      <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"9\" className=\"btn\" value='investigation' onClick={this.updatePatientSpecial.bind(this)}>\n      Investigation\n      </Accordion.Toggle>\n    )}\n    {this.context.token && (\n      <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"9\" className=\"btn\" value='diagnosis' onClick={this.updatePatientSpecial.bind(this)}>\n      Diagnosis\n      </Accordion.Toggle>\n    )}\n    {this.context.token && (\n      <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"9\" className=\"btn\" value='treatment' onClick={this.updatePatientSpecial.bind(this)}>\n      Treatment\n      </Accordion.Toggle>\n    )}\n    {this.context.token && (\n      <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"9\" className=\"btn\" value='billing' onClick={this.updatePatientSpecial.bind(this)}>\n      Billing\n      </Accordion.Toggle>\n    )}\n    </Col>\n    </Row>\n\n    <Accordion.Collapse eventKey=\"8\">\n    <Row className=\"updateUserRowForm\">\n    <Col md={10} className=\"updateUserColForm\">\n    {this.state.updating &&\n      this.state.selectedPatient !== null\n      && (\n      <UpdatePatientForm\n      authUserId={this.context.userId}\n      canCancel\n        canConfirm\n        onCancel={this.modalCancelHandler}\n        onConfirm={this.modalConfirmUpdateHandler}\n        confirmText=\"Confirm\"\n        patient={this.state.selectedPatient}\n      />\n    )}\n    </Col>\n    </Row>\n    </Accordion.Collapse>\n\n    <Accordion.Collapse eventKey=\"9\">\n    <Row className=\"updateUserRowForm\">\n    <Col md={10} className=\"updateUserColForm\">\n    {this.state.patientUpdateField === 'consultant' &&\n    this.state.selectedPatient !== null\n    && (\n      <UpdateConsultantInsuranceForm\n      authUserId={this.context.userId}\n      canCancel\n        canConfirm\n        onCancel={this.modalCancelHandler}\n        onConfirm={this.updatePatientInConsultantHandler}\n        confirmText=\"Confirm\"\n        patient={this.state.selectedPatient}\n      />\n    )}\n    {this.state.patientUpdateField === 'insurance' &&\n    this.state.selectedPatient !== null\n    && (\n      <UpdatePatientInsuranceForm\n      authUserId={this.context.userId}\n      canCancel\n        canConfirm\n        onCancel={this.modalCancelHandler}\n        onConfirm={this.updatePatientInsuranceHandler}\n        confirmText=\"Confirm\"\n        patient={this.state.selectedPatient}\n      />\n    )}\n    {this.state.patientUpdateField === 'nextOfKin' &&\n    this.state.selectedPatient !== null\n    && (\n      <UpdatePatientNextOfKinForm\n      authUserId={this.context.userId}\n      canCancel\n        canConfirm\n        onCancel={this.modalCancelHandler}\n        onConfirm={this.updatePatientNextOfKinHandler}\n        confirmText=\"Confirm\"\n        patient={this.state.selectedPatient}\n      />\n    )}\n    {this.state.patientUpdateField === 'complaint' &&\n    this.state.selectedPatient !== null\n    && (\n      <UpdatePatientComplaintForm\n      authUserId={this.context.userId}\n      canCancel\n        canConfirm\n        onCancel={this.modalCancelHandler}\n        onConfirm={this.updatePatientComplaintHandler}\n        confirmText=\"Confirm\"\n        patient={this.state.selectedPatient}\n      />\n    )}\n    {this.state.patientUpdateField === 'examination' &&\n    this.state.selectedPatient !== null\n    && (\n      <UpdatePatientExaminationForm\n      authUserId={this.context.userId}\n      canCancel\n        canConfirm\n        onCancel={this.modalCancelHandler}\n        onConfirm={this.updatePatientExaminationHandler}\n        confirmText=\"Confirm\"\n        patient={this.state.selectedPatient}\n      />\n    )}\n    {this.state.patientUpdateField === 'history' &&\n    this.state.selectedPatient !== null\n    && (\n      <UpdatePatientHistoryForm\n      authUserId={this.context.userId}\n      canCancel\n        canConfirm\n        onCancel={this.modalCancelHandler}\n        onConfirm={this.updatePatientHistoryHandler}\n        confirmText=\"Confirm\"\n        patient={this.state.selectedPatient}\n      />\n    )}\n    {this.state.patientUpdateField === 'allergies' &&\n    this.state.selectedPatient !== null\n    && (\n      <UpdatePatientAllergiesForm\n      authUserId={this.context.userId}\n      canCancel\n        canConfirm\n        onCancel={this.modalCancelHandler}\n        onConfirm={this.updatePatientAllergiesHandler}\n        confirmText=\"Confirm\"\n        patient={this.state.selectedPatient}\n      />\n    )}\n    {this.state.patientUpdateField === 'medication' &&\n    this.state.selectedPatient !== null\n    && (\n      <UpdatePatientMedicationForm\n      authUserId={this.context.userId}\n      canCancel\n        canConfirm\n        onCancel={this.modalCancelHandler}\n        onConfirm={this.updatePatientMedicationHandler}\n        confirmText=\"Confirm\"\n        patient={this.state.selectedPatient}\n      />\n    )}\n    {this.state.patientUpdateField === 'investigation' &&\n    this.state.selectedPatient !== null\n    && (\n      <UpdatePatientInvestigationForm\n      authUserId={this.context.userId}\n      canCancel\n        canConfirm\n        onCancel={this.modalCancelHandler}\n        onConfirm={this.updatePatientInvestigationHandler}\n        confirmText=\"Confirm\"\n        patient={this.state.selectedPatient}\n      />\n    )}\n    {this.state.patientUpdateField === 'diagnosis' &&\n    this.state.selectedPatient !== null\n    && (\n      <UpdatePatientDiagnosisForm\n      authUserId={this.context.userId}\n      canCancel\n        canConfirm\n        onCancel={this.modalCancelHandler}\n        onConfirm={this.updatePatientDiagnosisHandler}\n        confirmText=\"Confirm\"\n        patient={this.state.selectedPatient}\n      />\n    )}\n    {this.state.patientUpdateField === 'treatment' &&\n    this.state.selectedPatient !== null\n    && (\n      <UpdatePatientTreatmentForm\n      authUserId={this.context.userId}\n      canCancel\n        canConfirm\n        onCancel={this.modalCancelHandler}\n        onConfirm={this.updatePatientTreatmentHandler}\n        confirmText=\"Confirm\"\n        patient={this.state.selectedPatient}\n      />\n    )}\n    {this.state.patientUpdateField === 'billing' &&\n    this.state.selectedPatient !== null\n    && (\n      <UpdatePatientBillingForm\n      authUserId={this.context.userId}\n      canCancel\n        canConfirm\n        onCancel={this.modalCancelHandler}\n        onConfirm={this.updatePatientBillingHandler}\n        confirmText=\"Confirm\"\n        patient={this.state.selectedPatient}\n      />\n    )}\n    </Col>\n    </Row>\n    </Accordion.Collapse>\n\n    </Container>\n\n\n\n    <Container className=\"containerSearchuser\">\n  <Row className=\"createUserRowAdd\">\n  <Col md={4} className=\"createUserColAdd\">\n    <p>Search for a Patient</p>\n  </Col>\n  <Col md={8}>\n    {this.context.token && (\n      <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"10\" className=\"btn\" onClick={this.startSearchPatientHandler}>\n      Search\n      </Accordion.Toggle>\n    )}\n\n  </Col>\n  </Row>\n\n  <Accordion.Collapse eventKey=\"10\">\n  <Row className=\"createUserRowForm\">\n  <Col md={10} className=\"createUserColForm\">\n  {\n    this.state.searching === true &&\n    <SearchPatientForm\n    authUserId={this.context.userId}\n    canCancel\n      canConfirm\n      onCancel={this.modalCancelHandler}\n      onConfirm={this.modalConfirmSearchHandler}\n      confirmText=\"Search\"\n      patient={this.context.selectedPatient}\n    />\n  }\n  </Col>\n  <Col md={10}>\n\n  </Col>\n  </Row>\n  </Accordion.Collapse>\n  </Container>\n\n<Accordion.Collapse eventKey=\"10\">\n  <Container className=\"containerSearchuser\">\n  <Row className=\"searchListRow\">\n  {\n    this.state.searchPatients !== [] &&\n    <SearchPatientList\n      searchPatients={this.state.searchPatients}\n      authUserId={this.context.userId}\n      onCancel={this.modalCancelHandler}\n        onViewDetail={this.showDetailHandler}\n    />\n  }\n  </Row>\n  </Container>\n  </Accordion.Collapse>\n\n\n  <Container className=\"containerSearchuser\">\n<Row className=\"searchListRow\">\n\n{this.state.isLoading ? (\n  <Spinner />\n) : (\n  <PatientList\n    patients={this.state.patients}\n    authUserId={this.context.userId}\n    onViewDetail={this.showDetailHandler}\n  />\n)}\n\n</Row>\n</Container>\n</Accordion>\n\n      </React.Fragment>\n    );\n  }\n}\n\nexport default PatientsPage;\n"]},"metadata":{},"sourceType":"module"}