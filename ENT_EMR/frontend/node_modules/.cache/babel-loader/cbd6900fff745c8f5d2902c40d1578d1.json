{"ast":null,"code":"const inflate = require('tiny-inflate'); // Shift size for getting the index-1 table offset.\n\n\nconst SHIFT_1 = 6 + 5; // Shift size for getting the index-2 table offset.\n\nconst SHIFT_2 = 5; // Difference between the two shift sizes,\n// for getting an index-1 offset from an index-2 offset. 6=11-5\n\nconst SHIFT_1_2 = SHIFT_1 - SHIFT_2; // Number of index-1 entries for the BMP. 32=0x20\n// This part of the index-1 table is omitted from the serialized form.\n\nconst OMITTED_BMP_INDEX_1_LENGTH = 0x10000 >> SHIFT_1; // Number of entries in an index-2 block. 64=0x40\n\nconst INDEX_2_BLOCK_LENGTH = 1 << SHIFT_1_2; // Mask for getting the lower bits for the in-index-2-block offset. */\n\nconst INDEX_2_MASK = INDEX_2_BLOCK_LENGTH - 1; // Shift size for shifting left the index array values.\n// Increases possible data size with 16-bit index values at the cost\n// of compactability.\n// This requires data blocks to be aligned by DATA_GRANULARITY.\n\nconst INDEX_SHIFT = 2; // Number of entries in a data block. 32=0x20\n\nconst DATA_BLOCK_LENGTH = 1 << SHIFT_2; // Mask for getting the lower bits for the in-data-block offset.\n\nconst DATA_MASK = DATA_BLOCK_LENGTH - 1; // The part of the index-2 table for U+D800..U+DBFF stores values for\n// lead surrogate code _units_ not code _points_.\n// Values for lead surrogate code _points_ are indexed with this portion of the table.\n// Length=32=0x20=0x400>>SHIFT_2. (There are 1024=0x400 lead surrogates.)\n\nconst LSCP_INDEX_2_OFFSET = 0x10000 >> SHIFT_2;\nconst LSCP_INDEX_2_LENGTH = 0x400 >> SHIFT_2; // Count the lengths of both BMP pieces. 2080=0x820\n\nconst INDEX_2_BMP_LENGTH = LSCP_INDEX_2_OFFSET + LSCP_INDEX_2_LENGTH; // The 2-byte UTF-8 version of the index-2 table follows at offset 2080=0x820.\n// Length 32=0x20 for lead bytes C0..DF, regardless of SHIFT_2.\n\nconst UTF8_2B_INDEX_2_OFFSET = INDEX_2_BMP_LENGTH;\nconst UTF8_2B_INDEX_2_LENGTH = 0x800 >> 6; // U+0800 is the first code point after 2-byte UTF-8\n// The index-1 table, only used for supplementary code points, at offset 2112=0x840.\n// Variable length, for code points up to highStart, where the last single-value range starts.\n// Maximum length 512=0x200=0x100000>>SHIFT_1.\n// (For 0x100000 supplementary code points U+10000..U+10ffff.)\n//\n// The part of the index-2 table for supplementary code points starts\n// after this index-1 table.\n//\n// Both the index-1 table and the following part of the index-2 table\n// are omitted completely if there is only BMP data.\n\nconst INDEX_1_OFFSET = UTF8_2B_INDEX_2_OFFSET + UTF8_2B_INDEX_2_LENGTH; // The alignment size of a data block. Also the granularity for compaction.\n\nconst DATA_GRANULARITY = 1 << INDEX_SHIFT;\n\nclass UnicodeTrie {\n  constructor(data) {\n    const isBuffer = typeof data.readUInt32BE === 'function' && typeof data.slice === 'function';\n\n    if (isBuffer || data instanceof Uint8Array) {\n      // read binary format\n      let uncompressedLength;\n\n      if (isBuffer) {\n        this.highStart = data.readUInt32BE(0);\n        this.errorValue = data.readUInt32BE(4);\n        uncompressedLength = data.readUInt32BE(8);\n        data = data.slice(12);\n      } else {\n        const view = new DataView(data.buffer);\n        this.highStart = view.getUint32(0);\n        this.errorValue = view.getUint32(4);\n        uncompressedLength = view.getUint32(8);\n        data = data.subarray(12);\n      } // double inflate the actual trie data\n\n\n      data = inflate(data, new Uint8Array(uncompressedLength));\n      data = inflate(data, new Uint8Array(uncompressedLength));\n      this.data = new Uint32Array(data.buffer);\n    } else {\n      // pre-parsed data\n      var _data = data;\n      this.data = _data.data;\n      this.highStart = _data.highStart;\n      this.errorValue = _data.errorValue;\n    }\n  }\n\n  get(codePoint) {\n    let index;\n\n    if (codePoint < 0 || codePoint > 0x10ffff) {\n      return this.errorValue;\n    }\n\n    if (codePoint < 0xd800 || codePoint > 0xdbff && codePoint <= 0xffff) {\n      // Ordinary BMP code point, excluding leading surrogates.\n      // BMP uses a single level lookup.  BMP index starts at offset 0 in the index.\n      // data is stored in the index array itself.\n      index = (this.data[codePoint >> SHIFT_2] << INDEX_SHIFT) + (codePoint & DATA_MASK);\n      return this.data[index];\n    }\n\n    if (codePoint <= 0xffff) {\n      // Lead Surrogate Code Point.  A Separate index section is stored for\n      // lead surrogate code units and code points.\n      //   The main index has the code unit data.\n      //   For this function, we need the code point data.\n      index = (this.data[LSCP_INDEX_2_OFFSET + (codePoint - 0xd800 >> SHIFT_2)] << INDEX_SHIFT) + (codePoint & DATA_MASK);\n      return this.data[index];\n    }\n\n    if (codePoint < this.highStart) {\n      // Supplemental code point, use two-level lookup.\n      index = this.data[INDEX_1_OFFSET - OMITTED_BMP_INDEX_1_LENGTH + (codePoint >> SHIFT_1)];\n      index = this.data[index + (codePoint >> SHIFT_2 & INDEX_2_MASK)];\n      index = (index << INDEX_SHIFT) + (codePoint & DATA_MASK);\n      return this.data[index];\n    }\n\n    return this.data[this.data.length - DATA_GRANULARITY];\n  }\n\n}\n\nmodule.exports = UnicodeTrie;","map":{"version":3,"sources":["/Users/pedrojacob/Downloads/AMR/websites/office_records/ENT_EMR/frontend/node_modules/linebreak/node_modules/unicode-trie/index.js"],"names":["inflate","require","SHIFT_1","SHIFT_2","SHIFT_1_2","OMITTED_BMP_INDEX_1_LENGTH","INDEX_2_BLOCK_LENGTH","INDEX_2_MASK","INDEX_SHIFT","DATA_BLOCK_LENGTH","DATA_MASK","LSCP_INDEX_2_OFFSET","LSCP_INDEX_2_LENGTH","INDEX_2_BMP_LENGTH","UTF8_2B_INDEX_2_OFFSET","UTF8_2B_INDEX_2_LENGTH","INDEX_1_OFFSET","DATA_GRANULARITY","UnicodeTrie","constructor","data","isBuffer","readUInt32BE","slice","Uint8Array","uncompressedLength","highStart","errorValue","view","DataView","buffer","getUint32","subarray","Uint32Array","get","codePoint","index","length","module","exports"],"mappings":"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","sourcesContent":["const inflate = require('tiny-inflate');\n\n// Shift size for getting the index-1 table offset.\nconst SHIFT_1 = 6 + 5;\n\n// Shift size for getting the index-2 table offset.\nconst SHIFT_2 = 5;\n\n// Difference between the two shift sizes,\n// for getting an index-1 offset from an index-2 offset. 6=11-5\nconst SHIFT_1_2 = SHIFT_1 - SHIFT_2;\n\n// Number of index-1 entries for the BMP. 32=0x20\n// This part of the index-1 table is omitted from the serialized form.\nconst OMITTED_BMP_INDEX_1_LENGTH = 0x10000 >> SHIFT_1;\n\n// Number of entries in an index-2 block. 64=0x40\nconst INDEX_2_BLOCK_LENGTH = 1 << SHIFT_1_2;\n\n// Mask for getting the lower bits for the in-index-2-block offset. */\nconst INDEX_2_MASK = INDEX_2_BLOCK_LENGTH - 1;\n\n// Shift size for shifting left the index array values.\n// Increases possible data size with 16-bit index values at the cost\n// of compactability.\n// This requires data blocks to be aligned by DATA_GRANULARITY.\nconst INDEX_SHIFT = 2;\n\n// Number of entries in a data block. 32=0x20\nconst DATA_BLOCK_LENGTH = 1 << SHIFT_2;\n\n// Mask for getting the lower bits for the in-data-block offset.\nconst DATA_MASK = DATA_BLOCK_LENGTH - 1;\n\n// The part of the index-2 table for U+D800..U+DBFF stores values for\n// lead surrogate code _units_ not code _points_.\n// Values for lead surrogate code _points_ are indexed with this portion of the table.\n// Length=32=0x20=0x400>>SHIFT_2. (There are 1024=0x400 lead surrogates.)\nconst LSCP_INDEX_2_OFFSET = 0x10000 >> SHIFT_2;\nconst LSCP_INDEX_2_LENGTH = 0x400 >> SHIFT_2;\n\n// Count the lengths of both BMP pieces. 2080=0x820\nconst INDEX_2_BMP_LENGTH = LSCP_INDEX_2_OFFSET + LSCP_INDEX_2_LENGTH;\n\n// The 2-byte UTF-8 version of the index-2 table follows at offset 2080=0x820.\n// Length 32=0x20 for lead bytes C0..DF, regardless of SHIFT_2.\nconst UTF8_2B_INDEX_2_OFFSET = INDEX_2_BMP_LENGTH;\nconst UTF8_2B_INDEX_2_LENGTH = 0x800 >> 6;  // U+0800 is the first code point after 2-byte UTF-8\n\n// The index-1 table, only used for supplementary code points, at offset 2112=0x840.\n// Variable length, for code points up to highStart, where the last single-value range starts.\n// Maximum length 512=0x200=0x100000>>SHIFT_1.\n// (For 0x100000 supplementary code points U+10000..U+10ffff.)\n//\n// The part of the index-2 table for supplementary code points starts\n// after this index-1 table.\n//\n// Both the index-1 table and the following part of the index-2 table\n// are omitted completely if there is only BMP data.\nconst INDEX_1_OFFSET = UTF8_2B_INDEX_2_OFFSET + UTF8_2B_INDEX_2_LENGTH;\n\n// The alignment size of a data block. Also the granularity for compaction.\nconst DATA_GRANULARITY = 1 << INDEX_SHIFT;\n\nclass UnicodeTrie {\n  constructor(data) {\n    const isBuffer = (typeof data.readUInt32BE === 'function') && (typeof data.slice === 'function');\n\n    if (isBuffer || data instanceof Uint8Array) {\n      // read binary format\n      let uncompressedLength;\n      if (isBuffer) {\n        this.highStart = data.readUInt32BE(0);\n        this.errorValue = data.readUInt32BE(4);\n        uncompressedLength = data.readUInt32BE(8);\n        data = data.slice(12);\n      } else {\n        const view = new DataView(data.buffer);\n        this.highStart = view.getUint32(0);\n        this.errorValue = view.getUint32(4);\n        uncompressedLength = view.getUint32(8);\n        data = data.subarray(12);\n      }\n\n      // double inflate the actual trie data\n      data = inflate(data, new Uint8Array(uncompressedLength));\n      data = inflate(data, new Uint8Array(uncompressedLength));\n      this.data = new Uint32Array(data.buffer);\n\n    } else {\n      // pre-parsed data\n      ({ data: this.data, highStart: this.highStart, errorValue: this.errorValue } = data);\n    }\n  }\n\n  get(codePoint) {\n    let index;\n    if ((codePoint < 0) || (codePoint > 0x10ffff)) {\n      return this.errorValue;\n    }\n\n    if ((codePoint < 0xd800) || ((codePoint > 0xdbff) && (codePoint <= 0xffff))) {\n      // Ordinary BMP code point, excluding leading surrogates.\n      // BMP uses a single level lookup.  BMP index starts at offset 0 in the index.\n      // data is stored in the index array itself.\n      index = (this.data[codePoint >> SHIFT_2] << INDEX_SHIFT) + (codePoint & DATA_MASK);\n      return this.data[index];\n    }\n\n    if (codePoint <= 0xffff) {\n      // Lead Surrogate Code Point.  A Separate index section is stored for\n      // lead surrogate code units and code points.\n      //   The main index has the code unit data.\n      //   For this function, we need the code point data.\n      index = (this.data[LSCP_INDEX_2_OFFSET + ((codePoint - 0xd800) >> SHIFT_2)] << INDEX_SHIFT) + (codePoint & DATA_MASK);\n      return this.data[index];\n    }\n\n    if (codePoint < this.highStart) {\n      // Supplemental code point, use two-level lookup.\n      index = this.data[(INDEX_1_OFFSET - OMITTED_BMP_INDEX_1_LENGTH) + (codePoint >> SHIFT_1)];\n      index = this.data[index + ((codePoint >> SHIFT_2) & INDEX_2_MASK)];\n      index = (index << INDEX_SHIFT) + (codePoint & DATA_MASK);\n      return this.data[index];\n    }\n\n    return this.data[this.data.length - DATA_GRANULARITY];\n  }\n}\n\nmodule.exports = UnicodeTrie;"]},"metadata":{},"sourceType":"script"}