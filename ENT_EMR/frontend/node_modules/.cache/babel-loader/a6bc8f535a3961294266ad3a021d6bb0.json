{"ast":null,"code":"var _jsxFileName = \"/Users/pedrojacob/Downloads/AMR/websites/office_records/ENT_EMR/frontend/src/pages/thisUser.js\";\nimport React, { Component } from 'react';\nimport UpdateUserForm from '../components/Forms/UpdateUserForm';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Accordion from 'react-bootstrap/Accordion';\nimport Button from 'react-bootstrap/Button';\nimport SidebarPage from './Sidebar';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\nimport AlertBox from '../components/AlertBox';\nimport UpdateUserFieldForm from '../components/Forms/UpdateUserFieldForm';\nimport UpdateUserAttendanceForm from '../components/Forms/UpdateUserAttendanceForm';\nimport UpdateUserAttachmentForm from '../components/Forms/UpdateUserAttachmentForm';\nimport UpdateUserLeaveForm from '../components/Forms/UpdateUserLeaveForm';\nimport ThisUserProfile from '../components/Users/thisUserProfile';\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\nimport './Users.css';\n\nclass ThisUserPage extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      user: null,\n      users: [],\n      updating: false,\n      isLoading: false,\n      userUpdateField: null,\n      userAlert: null,\n      canDelete: null\n    };\n    this.isActive = true;\n\n    this.startUpdateUserHandler = () => {\n      this.setState({\n        updating: true\n      });\n      console.log(\"UpdateUserForm...\");\n    };\n\n    this.modalConfirmUpdateHandler = event => {\n      const token = this.context.token;\n      let userId = this.context.userId;\n      let selectedUserId = this.context.selectedUser._id;\n\n      if (userId !== selectedUserId && this.context.user.role !== 'admin') {\n        console.log(\"Not the creator or Admin! No edit permission!!\");\n        this.setState({\n          userAlert: \"Not the creator or Admin! No edit permission!!\"\n        });\n        selectedUserId = null;\n      }\n\n      console.log(\"UpdateUserFormData:  \", event.target.formGridEmail.value);\n      this.setState({\n        updating: false\n      });\n      let email = event.target.formGridEmail.value;\n      let password = event.target.formGridPassword.value;\n      let name = event.target.formGridName.value;\n      let role = this.context.user.role;\n      let dob = event.target.formGridDob.value;\n      let phone = event.target.formGridPhone.value;\n      let addressNumber = event.target.formGridAddressNumber.value;\n      let addressStreet = event.target.formGridAddressStreet.value;\n      let addressTown = event.target.formGridAddressTown.value;\n      let addressParish = event.target.formGridAddressParish.value;\n      let addressPostOffice = event.target.formGridAddressPostOffice.value;\n      let employmentDate = event.target.formGridEmploymentDate.value;\n      let terminationDate = event.target.formGridTerminationDate.value;\n\n      if (email.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        email = this.context.user.email;\n      }\n\n      if (password.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        password = this.context.user.password;\n      }\n\n      if (name.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        name = this.context.user.name;\n      } // if (role.trim().length === 0) {\n      //   console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      //   role = this.state.user.role;\n      // }\n\n\n      if (dob.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        dob = this.context.user.dob;\n      }\n\n      if (phone.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        phone = this.context.user.phone;\n      }\n\n      if (addressNumber.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        addressNumber = this.context.user.address.number;\n      }\n\n      if (addressStreet.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        addressStreet = this.context.user.address.street;\n      }\n\n      if (addressTown.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        addressTown = this.context.user.address.town;\n      }\n\n      if (addressParish.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        addressParish = this.context.user.address.parish;\n      }\n\n      if (addressPostOffice.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        addressPostOffice = this.context.user.address.postOffice;\n      }\n\n      if (employmentDate.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        employmentDate = this.context.user.employmentDate;\n      }\n\n      if (terminationDate.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        terminationDate = this.context.user.terminationDate;\n      }\n\n      const user = {\n        email,\n        password,\n        name,\n        role,\n        dob,\n        phone,\n        addressNumber,\n        addressStreet,\n        addressTown,\n        addressParish,\n        addressPostOffice,\n        employmentDate,\n        terminationDate\n      };\n      console.log(`\n      updating user profile...\n      userId: ${userId}\n      email: ${email},\n      password: ${password},\n      name: ${name},\n      role: ${role},\n      dob: ${dob},\n      phone: ${phone},\n      addressNumber: ${addressNumber},\n      addressStreet: ${addressStreet},\n      addressTown: ${addressTown},\n      addressParish: ${addressParish},\n      addressPostOffice: ${addressPostOffice},\n      employmentDate: ${employmentDate},\n      terminationDate: ${terminationDate},\n      `);\n      const requestBody = {\n        query: `\n        mutation {updateUser(userId:\\\"${userId}\\\",selectedUserId:\\\"${userId}\\\",userInput: {email:\\\"${email}\\\",password:\\\"${password}\\\",name:\\\"${name}\\\",dob:\\\"${dob}\\\",addressNumber:${addressNumber},addressStreet:\\\"${addressStreet}\\\",addressTown:\\\"${addressTown}\\\",addressParish:\\\"${addressParish}\\\", addressPostOffice:\\\"${addressPostOffice}\\\",phone:\\\"${phone}\\\",role:\\\"${role}\\\",employmentDate:\\\"${employmentDate}\\\",terminationDate:\\\"${terminationDate}\\\"})\n        {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n        `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n        const updatedUser = resData.data.updateUser;\n        console.log(\"updatedUser:  \", JSON.stringify(updatedUser));\n        this.state.users.push(updatedUser);\n        this.context.users = this.state.users;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert,\n          user: updatedUser\n        });\n        this.fetchUsers();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.modalConfirmUpdateFieldHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedUserId = this.context.selectedUser._id;\n\n      if (userId !== selectedUserId && this.context.user.role !== 'admin') {\n        console.log(\"Not the creator or Admin! No edit permission!!\");\n        this.setState({\n          userAlert: \"Not the creator or Admin! No edit permission!!\"\n        });\n        selectedUserId = null;\n      }\n\n      console.log(\"UpdateUserFieldFormData:  \", event.target.formGridField.value);\n      this.setState({\n        updating: false\n      });\n      let field = event.target.formGridField.value;\n      let query = event.target.formGridQuery.value;\n      const requestBody = {\n        query: `\n            mutation{updateUserField(userId:\\\"${userId}\\\",selectedUserId:\\\"${userId}\\\",field:\\\"${field}\\\",query:\\\"${query}\\\")\n            {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n          `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data.updateUserField));\n        const updatedUserId = resData.data.updateUserField._id;\n        const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n        const updatedUserPos = this.state.users.indexOf(updatedUser);\n        const slicedArray = this.state.users.splice(updatedUserPos, 1);\n        console.log(\"updatedUser:  \", JSON.stringify(updatedUser), \"  updatedUserPos:  \", updatedUserPos, \"  slicedArray:  \", slicedArray);\n        this.state.users.push(resData.data.updateUserField);\n        this.context.users = this.state.users;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchUsers();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updateUserAttendanceHandler = event => {\n      const token = this.context.token;\n      const userId = this.state.user._id; // let selectedUserId = this.context.selectedUser._id;\n      // if(userId !== selectedUserId && this.context.user.role !== 'admin') {\n      //   console.log(\"Not the creator or Admin! No edit permission!!\");\n      //   selectedUserId = null;\n      // }\n\n      console.log(\"UpdateUserAttendanceFormData:  \", event.target.formGridAttendanceDate.value);\n      this.setState({\n        updating: false,\n        userUpdateField: null\n      });\n      let attendanceDate = event.target.formGridAttendanceDate.value;\n      let attendanceStatus = event.target.formGridAttendanceStatus.value;\n      let attendanceDescription = event.target.formGridAttendanceDescription.value;\n\n      if (attendanceDate.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        attendanceDate = this.context.selectedUser.attendanceDate;\n      }\n\n      if (attendanceStatus.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        attendanceStatus = this.context.selectedUser.attendanceStatus;\n      }\n\n      if (attendanceDescription.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        attendanceDescription = this.context.selectedUser.attendanceDescription;\n      }\n\n      const userAttendance = {\n        attendanceDate,\n        attendanceStatus,\n        attendanceDescription\n      };\n      console.log(`\n      adding user attendance item...\n      userId: ${userId},\n      attendanceDate: ${attendanceDate},\n      attendanceStatus: ${attendanceStatus},\n      attendanceDescription: ${attendanceDescription}\n      `);\n      const requestBody = {\n        query: `\n          mutation {updateUserAttendance(userId:\"${userId}\", selectedUserId:\"${userId}\",userInput:{attendanceDate:\"${attendanceDate}\",attendanceStatus:\"${attendanceStatus}\",attendanceDescription:\"${attendanceDescription}\"})\n          {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n        `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data.updateUserAttendance));\n        const updatedUserId = resData.data.updateUserAttendance._id;\n        const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n        const updatedUserPos = this.state.users.indexOf(updatedUser);\n        const slicedArray = this.state.users.splice(updatedUserPos, 1);\n        console.log(\"updatedUser:  \", JSON.stringify(updatedUser), \"  updatedUserPos:  \", updatedUserPos, \"  slicedArray:  \", slicedArray);\n        this.state.users.push(resData.data.updateUserAttendance);\n        this.context.users = this.state.users;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchUsers();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updateUserLeaveHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedUserId = this.context.selectedUser._id;\n\n      if (userId !== selectedUserId && this.context.user.role !== 'admin') {\n        console.log(\"Not the creator or Admin! No edit permission!!\");\n        this.setState({\n          userAlert: \"Not the creator or Admin! No edit permission!!\"\n        });\n        selectedUserId = null;\n      }\n\n      console.log(\"UpdateUserLeaveFormData:  \", event.target.formGridLeaveType.value);\n      this.setState({\n        updating: false,\n        userUpdateField: null\n      });\n      let leaveType = event.target.formGridLeaveType.value;\n      let leaveTitle = event.target.formGridLeaveTitle.value;\n      let leaveStartDate = event.target.formGridLeaveStartDate.value;\n      let leaveEndDate = event.target.formGridLeaveEndDate.value;\n\n      if (leaveType.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        leaveType = this.context.selectedUser.leaveType;\n      }\n\n      if (leaveTitle.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        leaveTitle = this.context.selectedUser.leaveTitle;\n      }\n\n      if (leaveStartDate.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        leaveStartDate = this.context.selectedUser.leaveStartDate;\n      }\n\n      if (leaveEndDate.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        leaveEndDate = this.context.selectedUser.leaveEndDate;\n      }\n\n      const userLeave = {\n        leaveType,\n        leaveTitle,\n        leaveStartDate,\n        leaveEndDate\n      };\n      console.log(`\n      adding user attendance item...\n      userId: ${userId},\n      selectedUserId: ${selectedUserId}\n      leave: {\n        type: ${leaveType},\n        title: ${leaveTitle},\n        startDate: ${leaveStartDate},\n        endDate: ${leaveEndDate}\n      }\n      `);\n      const requestBody = {\n        query: `\n          mutation {updateUserLeave(userId:\"${userId}\", selectedUserId:\"${userId}\",userInput:{leaveType:\"${leaveType}\",leaveTitle:\"${leaveTitle}\",leaveStartDate:\"${leaveStartDate}\",leaveEndDate:\"${leaveEndDate}\"})\n          {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n        `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedUserId = resData.data.updateUserLeave._id;\n        const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n        const updatedUserPos = this.state.users.indexOf(updatedUser);\n        const slicedArray = this.state.users.splice(updatedUserPos, 1);\n        console.log(\"updatedUser:  \", JSON.stringify(updatedUser), \"  updatedUserPos:  \", updatedUserPos, \"  slicedArray:  \", slicedArray);\n        this.state.users.push(resData.data.updateUserLeave);\n        this.context.users = this.state.users;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchUsers();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updateUserAttachmentHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedUserId = this.context.selectedUser._id; // if(userId !== selectedUserId && this.context.user.role !== 'admin') {\n      //   console.log(\"Not the creator or Admin! No edit permission!!\");\n      //   selectedUserId = null;\n      // }\n\n      if (userId !== selectedUserId && this.context.user.role !== \"admin\") {\n        console.log(\"Not the creator or Admin! No edit permission!!\");\n        this.setState({\n          userAlert: \"Not the creator or Admin! No edit permission!!\"\n        });\n        selectedUserId = null;\n      }\n\n      console.log(\"UpdateUserAttachmentFormData:  \", event.target.formGridAttachmentName.value);\n      this.setState({\n        updating: false,\n        userUpdateField: null\n      });\n      let attachmentName = event.target.formGridAttachmentName.value;\n      let attachmentFormat = event.target.formGridAttachmentFormat.value;\n      let attachmentPath = event.target.formGridAttachmentPath.value;\n\n      if (attachmentName.trim().length === 0 || attachmentFormat.trim().length === 0 || attachmentPath.trim().length === 0) {\n        console.log(\"blank fields detected!!! try again\");\n        return;\n      }\n\n      const userAttachment = {\n        attachmentName,\n        attachmentFormat,\n        attachmentPath\n      };\n      console.log(`\n    adding user attendance item...\n    userId: ${userId},\n    selectedUserId: ${selectedUserId}\n    attachmentName: ${attachmentName},\n    attachmentFormat: ${attachmentFormat},\n    attachmentPath: ${attachmentPath}\n    `);\n      this.setState({\n        userAlert: \"adding user attendance item...\"\n      });\n      const requestBody = {\n        query: `\n        mutation{updateUserAttachment(userId:\\\"${userId}\\\",selectedUserId:\\\"${userId}\\\",userInput:{attachmentName:\\\"${attachmentName}\\\",attachmentFormat:\\\"${attachmentFormat}\\\",attachmentPath:\\\"${attachmentPath}\\\"})\n        {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n      `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data.updateUserAttachment));\n        const updatedUserId = resData.data.updateUserAttachment._id;\n        const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n        const updatedUserPos = this.state.users.indexOf(updatedUser);\n        const slicedArray = this.state.users.splice(updatedUserPos, 1);\n        console.log(\"updatedUser:  \", JSON.stringify(updatedUser), \"  updatedUserPos:  \", updatedUserPos, \"  slicedArray:  \", slicedArray);\n        this.state.users.push(resData.data.updateUserAttachment);\n        this.context.users = this.state.users;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchUsers();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.modalCancelHandler = () => {\n      this.setState({\n        updating: false\n      });\n    };\n\n    this.deleteUserAttendanceItem = props => {\n      let token = this.context.token;\n      let userId = this.context.userId;\n      let selectedUserId = this.state.selectedUser._id;\n      console.log(`\n      delete user Attendance item:\n      props: ${JSON.stringify(props)},\n      token: ${token},\n      userId: ${userId},\n      selectedUserId: ${selectedUserId},\n      `);\n    };\n\n    this.deleteUserLeaveItem = props => {\n      let token = this.context.token;\n      let userId = this.context.userId;\n      let selectedUserId = this.state.selectedUser._id;\n      console.log(`\n      delete user Leave item:\n      props: ${JSON.stringify(props)},\n      token: ${token},\n      userId: ${userId},\n      selectedUserId: ${selectedUserId},\n      `);\n    };\n\n    this.deleteUserAttachmentItem = props => {\n      let token = this.context.token;\n      let userId = this.context.userId;\n      let selectedUserId = this.state.selectedUser._id;\n      console.log(`\n      delete user Attachment item:\n      props: ${JSON.stringify(props)},\n      token: ${token},\n      userId: ${userId},\n      selectedUserId: ${selectedUserId},\n      `);\n    };\n  }\n\n  // constructor(props) {\n  //   super(props);\n  // }\n  componentDidMount() {\n    this.getThisUser();\n\n    if (this.context.user.name === 'admin579') {\n      this.setState({\n        canDelete: true\n      });\n    }\n  }\n\n  getThisUser() {\n    this.setState({\n      isLoading: true\n    });\n    const requestBody = {\n      query: `\n      query {getThisUser\n        {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n        `\n    };\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    }).then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n\n      return res.json();\n    }).then(resData => {\n      console.log(\"resdata...\" + JSON.stringify(resData));\n      const thisUser = resData.data.getThisUser;\n\n      if (this.isActive) {\n        this.setState({\n          user: thisUser,\n          isLoading: false\n        });\n        this.context.user = thisUser;\n        console.log(\"this.context.user:  \" + this.context.user.name);\n        sessionStorage.setItem('thisUser', JSON.stringify(thisUser));\n      }\n    }).catch(err => {\n      console.log(err);\n      this.setState({\n        userAlert: err\n      });\n\n      if (this.isActive) {\n        this.setState({\n          isLoading: false\n        });\n      }\n    });\n  }\n\n  updateUserSpecialProfile(event) {\n    console.log(\"special field to update:  \", event.target.value);\n    const field = event.target.value;\n    this.setState({\n      userUpdateField: field\n    });\n  }\n\n  componentWillUnmount() {\n    this.isActive = false;\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 609\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 610\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 3,\n      className: \"MasterCol1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 611\n      },\n      __self: this\n    }, React.createElement(AlertBox, {\n      authUserId: this.context.userId,\n      alert: this.state.userAlert,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 612\n      },\n      __self: this\n    }), React.createElement(SidebarPage, {\n      you: this.state.user,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 616\n      },\n      __self: this\n    })), React.createElement(Col, {\n      md: 9,\n      className: \"MasterCol2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 621\n      },\n      __self: this\n    }, React.createElement(Container, {\n      className: \"containerProfile\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 622\n      },\n      __self: this\n    }, React.createElement(Tabs, {\n      defaultActiveKey: \"Detail\",\n      id: \"uncontrolled-tab-example2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 623\n      },\n      __self: this\n    }, React.createElement(Tab, {\n      eventKey: \"\",\n      title: \"Edit:\",\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 624\n      },\n      __self: this\n    }), React.createElement(Tab, {\n      eventKey: \"Detail\",\n      title: \"Detail\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 626\n      },\n      __self: this\n    }, this.state.user !== null && React.createElement(ThisUserProfile, {\n      user: this.state.user,\n      authUserId: this.context.userId,\n      canDelete: this.state.canDelete,\n      attendanceDelete: this.deleteUserAttendanceItem,\n      leaveDelete: this.deleteUserLeaveItem,\n      attachmentDelete: this.deleteUserAttachmentItem,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 628\n      },\n      __self: this\n    })), React.createElement(Tab, {\n      eventKey: \"Demographics\",\n      title: \"Demographics\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 639\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"outline-primary\",\n      onClick: this.startUpdateUserHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 640\n      },\n      __self: this\n    }, \"Demographics\"), this.state.updating === true && React.createElement(UpdateUserForm, {\n      canCancelProfile: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmUpdateHandler,\n      confirmText: \"Confirm\",\n      user: this.state.user,\n      authUserId: this.context.userId,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 642\n      },\n      __self: this\n    })), React.createElement(Tab, {\n      eventKey: \"userEditField\",\n      title: \"Single Field\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 654\n      },\n      __self: this\n    }, this.state.selectedUser === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 656\n      },\n      __self: this\n    }, \"Select a Staff member from the Master List below\"), this.state.selectedUser !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      onClick: this.startUpdateUserHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 661\n      },\n      __self: this\n    }, \"Edit Field\"), this.state.updating && this.state.selectedUser !== null && React.createElement(UpdateUserFieldForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmUpdateFieldHandler,\n      confirmText: \"Confirm\",\n      user: this.state.selectedUser,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 666\n      },\n      __self: this\n    })), React.createElement(Tab, {\n      eventKey: \"Atttendance\",\n      title: \"Atttendance\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 678\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"attendance\",\n      onClick: this.updateUserSpecialProfile.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 679\n      },\n      __self: this\n    }, \"Attendance\"), this.state.userUpdateField === 'attendance' && React.createElement(UpdateUserAttendanceForm, {\n      authUserId: this.context.userId,\n      canCancelProfile: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updateUserAttendanceHandler,\n      confirmText: \"Confirm\",\n      user: this.state.selectedUser,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 681\n      },\n      __self: this\n    })), React.createElement(Tab, {\n      eventKey: \"Leave\",\n      title: \"Leave\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 693\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"leave\",\n      onClick: this.updateUserSpecialProfile.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 694\n      },\n      __self: this\n    }, \"Leave\"), this.state.userUpdateField === 'leave' && React.createElement(UpdateUserLeaveForm, {\n      authUserId: this.context.userId,\n      canCancelProfile: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updateUserLeaveHandler,\n      confirmText: \"Confirm\",\n      user: this.state.selectedUser,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 696\n      },\n      __self: this\n    })), React.createElement(Tab, {\n      eventKey: \"Attachment\",\n      title: \"Attachment\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 708\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"attachments\",\n      onClick: this.updateUserSpecialProfile.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 709\n      },\n      __self: this\n    }, \"Attachment\"), this.state.userUpdateField === 'attachments' && React.createElement(UpdateUserAttachmentForm, {\n      authUserId: this.context.userId,\n      canCancelProfile: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updateUserAttachmentHandler,\n      confirmText: \"Confirm\",\n      user: this.state.selectedUser,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 711\n      },\n      __self: this\n    })))))));\n  }\n\n}\n\nThisUserPage.contextType = AuthContext;\nexport default ThisUserPage;","map":{"version":3,"sources":["/Users/pedrojacob/Downloads/AMR/websites/office_records/ENT_EMR/frontend/src/pages/thisUser.js"],"names":["React","Component","UpdateUserForm","Container","Row","Col","Accordion","Button","SidebarPage","Tabs","Tab","AlertBox","UpdateUserFieldForm","UpdateUserAttendanceForm","UpdateUserAttachmentForm","UpdateUserLeaveForm","ThisUserProfile","Spinner","AuthContext","ThisUserPage","state","user","users","updating","isLoading","userUpdateField","userAlert","canDelete","isActive","startUpdateUserHandler","setState","console","log","modalConfirmUpdateHandler","event","token","context","userId","selectedUserId","selectedUser","_id","role","target","formGridEmail","value","email","password","formGridPassword","name","formGridName","dob","formGridDob","phone","formGridPhone","addressNumber","formGridAddressNumber","addressStreet","formGridAddressStreet","addressTown","formGridAddressTown","addressParish","formGridAddressParish","addressPostOffice","formGridAddressPostOffice","employmentDate","formGridEmploymentDate","terminationDate","formGridTerminationDate","trim","length","address","number","street","town","parish","postOffice","requestBody","query","fetch","method","body","JSON","stringify","headers","Authorization","then","res","status","Error","json","resData","updatedUser","data","updateUser","push","responseAlert","slice","fetchUsers","catch","err","modalConfirmUpdateFieldHandler","formGridField","field","formGridQuery","updateUserField","updatedUserId","find","e","updatedUserPos","indexOf","slicedArray","splice","updateUserAttendanceHandler","formGridAttendanceDate","attendanceDate","attendanceStatus","formGridAttendanceStatus","attendanceDescription","formGridAttendanceDescription","userAttendance","updateUserAttendance","updateUserLeaveHandler","formGridLeaveType","leaveType","leaveTitle","formGridLeaveTitle","leaveStartDate","formGridLeaveStartDate","leaveEndDate","formGridLeaveEndDate","userLeave","updateUserLeave","updateUserAttachmentHandler","formGridAttachmentName","attachmentName","attachmentFormat","formGridAttachmentFormat","attachmentPath","formGridAttachmentPath","userAttachment","updateUserAttachment","modalCancelHandler","deleteUserAttendanceItem","props","deleteUserLeaveItem","deleteUserAttachmentItem","componentDidMount","getThisUser","thisUser","sessionStorage","setItem","updateUserSpecialProfile","componentWillUnmount","render","bind","contextType"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport UpdateUserForm from '../components/Forms/UpdateUserForm';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Accordion from 'react-bootstrap/Accordion';\nimport Button from 'react-bootstrap/Button';\nimport SidebarPage from './Sidebar';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\n\nimport AlertBox from '../components/AlertBox';\nimport UpdateUserFieldForm from '../components/Forms/UpdateUserFieldForm';\nimport UpdateUserAttendanceForm from '../components/Forms/UpdateUserAttendanceForm';\nimport UpdateUserAttachmentForm from '../components/Forms/UpdateUserAttachmentForm';\nimport UpdateUserLeaveForm from '../components/Forms/UpdateUserLeaveForm';\n\nimport ThisUserProfile from '../components/Users/thisUserProfile';\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\nimport './Users.css';\n\nclass ThisUserPage extends Component {\n  state = {\n    user: null,\n    users: [],\n    updating: false,\n    isLoading: false,\n    userUpdateField: null,\n    userAlert: null,\n    canDelete: null,\n  };\n  isActive = true;\n\n  static contextType = AuthContext;\n\n  // constructor(props) {\n  //   super(props);\n  // }\n\n  componentDidMount() {\n    this.getThisUser();\n    if (this.context.user.name === 'admin579'){\n      this.setState({canDelete: true})\n    }\n  }\n\n  startUpdateUserHandler = () => {\n    this.setState({ updating: true });\n    console.log(\"UpdateUserForm...\");\n  };\n\n\n  modalConfirmUpdateHandler = (event) => {\n    const token = this.context.token;\n    let userId = this.context.userId;\n    let selectedUserId = this.context.selectedUser._id;\n    if(userId !== selectedUserId && this.context.user.role !== 'admin') {\n      console.log(\"Not the creator or Admin! No edit permission!!\");\n      this.setState({userAlert: \"Not the creator or Admin! No edit permission!!\"});\n      selectedUserId = null;\n    }\n    console.log(\"UpdateUserFormData:  \", event.target.formGridEmail.value);\n    this.setState({ updating: false });\n    let email = event.target.formGridEmail.value;\n    let password = event.target.formGridPassword.value;\n    let name = event.target.formGridName.value;\n    let role = this.context.user.role;\n    let dob = event.target.formGridDob.value;\n    let phone = event.target.formGridPhone.value;\n    let addressNumber = event.target.formGridAddressNumber.value;\n    let addressStreet = event.target.formGridAddressStreet.value;\n    let addressTown = event.target.formGridAddressTown.value;\n    let addressParish = event.target.formGridAddressParish.value;\n    let addressPostOffice = event.target.formGridAddressPostOffice.value;\n    let employmentDate = event.target.formGridEmploymentDate.value;\n    let terminationDate = event.target.formGridTerminationDate.value;\n\n    if (email.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      email = this.context.user.email;\n    }\n    if (password.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      password = this.context.user.password;\n    }\n    if (name.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      name = this.context.user.name;\n    }\n    // if (role.trim().length === 0) {\n    //   console.log(\"blank fields detected!!!...filling w/ previous data...\");\n    //   role = this.state.user.role;\n    // }\n    if (dob.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      dob = this.context.user.dob;\n    }\n    if (phone.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      phone = this.context.user.phone;\n    }\n    if (addressNumber.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      addressNumber = this.context.user.address.number;\n    }\n    if (addressStreet.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      addressStreet = this.context.user.address.street;\n    }\n    if (addressTown.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      addressTown = this.context.user.address.town;\n    }\n    if (addressParish.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      addressParish = this.context.user.address.parish;\n    }\n    if (addressPostOffice.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      addressPostOffice = this.context.user.address.postOffice;\n    }\n    if (employmentDate.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      employmentDate = this.context.user.employmentDate;\n    }\n    if (terminationDate.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      terminationDate = this.context.user.terminationDate;\n    }\n\n\n    const user = { email, password, name, role, dob, phone, addressNumber, addressStreet, addressTown, addressParish, addressPostOffice, employmentDate, terminationDate };\n    console.log(`\n      updating user profile...\n      userId: ${userId}\n      email: ${email},\n      password: ${password},\n      name: ${name},\n      role: ${role},\n      dob: ${dob},\n      phone: ${phone},\n      addressNumber: ${addressNumber},\n      addressStreet: ${addressStreet},\n      addressTown: ${addressTown},\n      addressParish: ${addressParish},\n      addressPostOffice: ${addressPostOffice},\n      employmentDate: ${employmentDate},\n      terminationDate: ${terminationDate},\n      `);\n\n    const requestBody = {\n      query: `\n        mutation {updateUser(userId:\\\"${userId}\\\",selectedUserId:\\\"${userId}\\\",userInput: {email:\\\"${email}\\\",password:\\\"${password}\\\",name:\\\"${name}\\\",dob:\\\"${dob}\\\",addressNumber:${addressNumber},addressStreet:\\\"${addressStreet}\\\",addressTown:\\\"${addressTown}\\\",addressParish:\\\"${addressParish}\\\", addressPostOffice:\\\"${addressPostOffice}\\\",phone:\\\"${phone}\\\",role:\\\"${role}\\\",employmentDate:\\\"${employmentDate}\\\",terminationDate:\\\"${terminationDate}\\\"})\n        {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n        `};\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }})\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n\n        const updatedUser = resData.data.updateUser;\n        console.log(\"updatedUser:  \", JSON.stringify(updatedUser));\n        this.state.users.push(updatedUser);\n        this.context.users = this.state.users;\n\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert, user: updatedUser})\n        this.fetchUsers();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n    };\n\n    modalConfirmUpdateFieldHandler = (event) => {\n\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedUserId = this.context.selectedUser._id;\n      if(userId !== selectedUserId && this.context.user.role !== 'admin') {\n        console.log(\"Not the creator or Admin! No edit permission!!\");\n        this.setState({userAlert: \"Not the creator or Admin! No edit permission!!\"});\n        selectedUserId = null;\n      }\n\n        console.log(\"UpdateUserFieldFormData:  \", event.target.formGridField.value);\n        this.setState({ updating: false });\n\n        let field = event.target.formGridField.value;\n        let query = event.target.formGridQuery.value;\n\n        const requestBody = {\n          query:`\n            mutation{updateUserField(userId:\\\"${userId}\\\",selectedUserId:\\\"${userId}\\\",field:\\\"${field}\\\",query:\\\"${query}\\\")\n            {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n          `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            console.log(\"response data... \" + JSON.stringify(resData.data.updateUserField));\n\n            const updatedUserId = resData.data.updateUserField._id;\n            const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n            const updatedUserPos = this.state.users.indexOf(updatedUser);\n            const slicedArray = this.state.users.splice(updatedUserPos, 1);\n            console.log(\"updatedUser:  \", JSON.stringify(updatedUser),\"  updatedUserPos:  \", updatedUserPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.users.push(resData.data.updateUserField);\n            this.context.users = this.state.users;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            this.fetchUsers();\n          })\n          .catch(err => {\n            console.log(err);\n            this.setState({userAlert: err});\n          });\n\n    }\n\n  updateUserAttendanceHandler = (event) => {\n    const token = this.context.token;\n    const userId = this.state.user._id;\n    // let selectedUserId = this.context.selectedUser._id;\n    // if(userId !== selectedUserId && this.context.user.role !== 'admin') {\n    //   console.log(\"Not the creator or Admin! No edit permission!!\");\n    //   selectedUserId = null;\n    // }\n    console.log(\"UpdateUserAttendanceFormData:  \", event.target.formGridAttendanceDate.value);\n\n    this.setState({ updating: false , userUpdateField: null });\n\n    let attendanceDate = event.target.formGridAttendanceDate.value;\n    let attendanceStatus = event.target.formGridAttendanceStatus.value;\n    let attendanceDescription = event.target.formGridAttendanceDescription.value;\n\n    if (attendanceDate.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      attendanceDate = this.context.selectedUser.attendanceDate;\n    }\n    if (attendanceStatus.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      attendanceStatus = this.context.selectedUser.attendanceStatus;\n    }\n    if (attendanceDescription.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      attendanceDescription = this.context.selectedUser.attendanceDescription;\n    }\n\n    const userAttendance = { attendanceDate, attendanceStatus, attendanceDescription }\n    console.log(`\n      adding user attendance item...\n      userId: ${userId},\n      attendanceDate: ${attendanceDate},\n      attendanceStatus: ${attendanceStatus},\n      attendanceDescription: ${attendanceDescription}\n      `);\n\n      const requestBody = {\n        query:`\n          mutation {updateUserAttendance(userId:\"${userId}\", selectedUserId:\"${userId}\",userInput:{attendanceDate:\"${attendanceDate}\",attendanceStatus:\"${attendanceStatus}\",attendanceDescription:\"${attendanceDescription}\"})\n          {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n        `};\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }})\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData.data.updateUserAttendance));\n\n          const updatedUserId = resData.data.updateUserAttendance._id;\n          const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n          const updatedUserPos = this.state.users.indexOf(updatedUser);\n          const slicedArray = this.state.users.splice(updatedUserPos, 1);\n          console.log(\"updatedUser:  \", JSON.stringify(updatedUser),\"  updatedUserPos:  \", updatedUserPos, \"  slicedArray:  \", slicedArray);\n          this.state.users.push(resData.data.updateUserAttendance);\n          this.context.users = this.state.users;\n          const responseAlert = JSON.stringify(resData.data).slice(2,25);\n          this.setState({ userAlert: responseAlert})\n          this.fetchUsers();\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({userAlert: err});\n        });\n  };\n\n\n  updateUserLeaveHandler = (event) => {\n    const token = this.context.token;\n    const userId = this.context.userId;\n    let selectedUserId = this.context.selectedUser._id;\n    if(userId !== selectedUserId && this.context.user.role !== 'admin') {\n      console.log(\"Not the creator or Admin! No edit permission!!\");\n      this.setState({userAlert: \"Not the creator or Admin! No edit permission!!\"});\n      selectedUserId = null;\n    }\n\n    console.log(\"UpdateUserLeaveFormData:  \", event.target.formGridLeaveType.value);\n\n    this.setState({ updating: false , userUpdateField: null });\n\n    let leaveType = event.target.formGridLeaveType.value;\n    let leaveTitle = event.target.formGridLeaveTitle.value;\n    let leaveStartDate = event.target.formGridLeaveStartDate.value;\n    let leaveEndDate = event.target.formGridLeaveEndDate.value;\n\n    if (leaveType.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      leaveType = this.context.selectedUser.leaveType;\n    }\n    if (leaveTitle.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      leaveTitle = this.context.selectedUser.leaveTitle;\n    }\n    if (leaveStartDate.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      leaveStartDate = this.context.selectedUser.leaveStartDate;\n    }\n    if (leaveEndDate.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      leaveEndDate = this.context.selectedUser.leaveEndDate;\n    }\n\n    const userLeave = { leaveType, leaveTitle, leaveStartDate, leaveEndDate }\n    console.log(`\n      adding user attendance item...\n      userId: ${userId},\n      selectedUserId: ${selectedUserId}\n      leave: {\n        type: ${leaveType},\n        title: ${leaveTitle},\n        startDate: ${leaveStartDate},\n        endDate: ${leaveEndDate}\n      }\n      `);\n\n      const requestBody = {\n        query:`\n          mutation {updateUserLeave(userId:\"${userId}\", selectedUserId:\"${userId}\",userInput:{leaveType:\"${leaveType}\",leaveTitle:\"${leaveTitle}\",leaveStartDate:\"${leaveStartDate}\",leaveEndDate:\"${leaveEndDate}\"})\n          {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n        `};\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }})\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData.data));\n\n          const updatedUserId = resData.data.updateUserLeave._id;\n          const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n          const updatedUserPos = this.state.users.indexOf(updatedUser);\n          const slicedArray = this.state.users.splice(updatedUserPos, 1);\n          console.log(\"updatedUser:  \", JSON.stringify(updatedUser),\"  updatedUserPos:  \", updatedUserPos, \"  slicedArray:  \", slicedArray);\n\n          this.state.users.push(resData.data.updateUserLeave);\n          this.context.users = this.state.users;\n          const responseAlert = JSON.stringify(resData.data).slice(2,25);\n          this.setState({ userAlert: responseAlert})\n          this.fetchUsers();\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({userAlert: err});\n        });\n  };\n\n\n  updateUserAttachmentHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedUserId = this.context.selectedUser._id;\n  // if(userId !== selectedUserId && this.context.user.role !== 'admin') {\n  //   console.log(\"Not the creator or Admin! No edit permission!!\");\n  //   selectedUserId = null;\n  // }\n  if (userId !== selectedUserId && this.context.user.role !== \"admin\" ) {\n    console.log(\"Not the creator or Admin! No edit permission!!\");\n    this.setState({userAlert: \"Not the creator or Admin! No edit permission!!\"})\n      selectedUserId = null;\n  }\n\n  console.log(\"UpdateUserAttachmentFormData:  \", event.target.formGridAttachmentName.value);\n\n  this.setState({ updating: false , userUpdateField: null });\n\n  let attachmentName = event.target.formGridAttachmentName.value;\n  let attachmentFormat = event.target.formGridAttachmentFormat.value;\n  let attachmentPath = event.target.formGridAttachmentPath.value;\n\n\n  if (\n    attachmentName.trim().length === 0 ||\n    attachmentFormat.trim().length === 0 ||\n    attachmentPath.trim().length === 0\n) {\n    console.log(\"blank fields detected!!! try again\");\n    return\n  }\n\n  const userAttachment = { attachmentName, attachmentFormat, attachmentPath }\n  console.log(`\n    adding user attendance item...\n    userId: ${userId},\n    selectedUserId: ${selectedUserId}\n    attachmentName: ${attachmentName},\n    attachmentFormat: ${attachmentFormat},\n    attachmentPath: ${attachmentPath}\n    `);\n    this.setState({userAlert: \"adding user attendance item...\"})\n\n    const requestBody = {\n      query:`\n        mutation{updateUserAttachment(userId:\\\"${userId}\\\",selectedUserId:\\\"${userId}\\\",userInput:{attachmentName:\\\"${attachmentName}\\\",attachmentFormat:\\\"${attachmentFormat}\\\",attachmentPath:\\\"${attachmentPath}\\\"})\n        {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n      `};\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data.updateUserAttachment));\n\n        const updatedUserId = resData.data.updateUserAttachment._id;\n        const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n        const updatedUserPos = this.state.users.indexOf(updatedUser);\n        const slicedArray = this.state.users.splice(updatedUserPos, 1);\n        console.log(\"updatedUser:  \", JSON.stringify(updatedUser),\"  updatedUserPos:  \", updatedUserPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.users.push(resData.data.updateUserAttachment);\n        this.context.users = this.state.users;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert})\n        this.fetchUsers();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n\n}\n\n\n  getThisUser() {\n    this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n      query {getThisUser\n        {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n        `};\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }})\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"resdata...\" + JSON.stringify(resData));\n        const thisUser = resData.data.getThisUser;\n        if (this.isActive) {\n\n          this.setState({ user: thisUser, isLoading: false });\n\n          this.context.user = thisUser;\n          console.log(\"this.context.user:  \" + this.context.user.name);\n\n          sessionStorage.setItem('thisUser', JSON.stringify(thisUser));\n        }\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n        if (this.isActive) {\n          this.setState({ isLoading: false });\n        }\n      });\n  }\n\n\n  modalCancelHandler = () => {\n    this.setState({ updating: false  });\n  };\n\n  deleteUserAttendanceItem = (props) => {\n\n    let token = this.context.token;\n    let userId = this.context.userId;\n    let selectedUserId = this.state.selectedUser._id;\n\n    console.log(`\n      delete user Attendance item:\n      props: ${JSON.stringify(props)},\n      token: ${token},\n      userId: ${userId},\n      selectedUserId: ${selectedUserId},\n      `);\n  }\n  deleteUserLeaveItem = (props) => {\n\n    let token = this.context.token;\n    let userId = this.context.userId;\n    let selectedUserId = this.state.selectedUser._id;\n\n    console.log(`\n      delete user Leave item:\n      props: ${JSON.stringify(props)},\n      token: ${token},\n      userId: ${userId},\n      selectedUserId: ${selectedUserId},\n      `);\n  }\n  deleteUserAttachmentItem = (props) => {\n\n    let token = this.context.token;\n    let userId = this.context.userId;\n    let selectedUserId = this.state.selectedUser._id;\n\n    console.log(`\n      delete user Attachment item:\n      props: ${JSON.stringify(props)},\n      token: ${token},\n      userId: ${userId},\n      selectedUserId: ${selectedUserId},\n      `);\n  }\n  \n\n  updateUserSpecialProfile (event) {\n    console.log(\"special field to update:  \", event.target.value);\n    const field = event.target.value;\n    this.setState({ userUpdateField: field});\n  }\n\n\n  componentWillUnmount() {\n    this.isActive = false;\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n      <Row>\n      <Col md={3} className=\"MasterCol1\">\n      <AlertBox\n        authUserId={this.context.userId}\n        alert={this.state.userAlert}\n      />\n      <SidebarPage\n        you={this.state.user}\n      />\n      </Col>\n\n      <Col md={9} className=\"MasterCol2\">\n        <Container className=\"containerProfile\">\n        <Tabs defaultActiveKey=\"Detail\" id=\"uncontrolled-tab-example2\">\n          <Tab eventKey=\"\" title=\"Edit:\" disabled>\n          </Tab>\n          <Tab eventKey=\"Detail\" title=\"Detail\">\n          {this.state.user !== null && (\n              <ThisUserProfile\n                user={this.state.user}\n                authUserId={this.context.userId}\n                canDelete={this.state.canDelete}\n                attendanceDelete={this.deleteUserAttendanceItem}\n                leaveDelete={this.deleteUserLeaveItem}\n                attachmentDelete={this.deleteUserAttachmentItem}\n              />\n            )}\n          </Tab>\n\n          <Tab eventKey=\"Demographics\" title=\"Demographics\">\n          <Button variant=\"outline-primary\" onClick={this.startUpdateUserHandler}>Demographics</Button>\n          {this.state.updating === true && (\n            <UpdateUserForm\n            canCancelProfile\n              canConfirm\n              onCancel={this.modalCancelHandler}\n              onConfirm={this.modalConfirmUpdateHandler}\n              confirmText=\"Confirm\"\n              user={this.state.user}\n              authUserId={this.context.userId}\n            />\n          )}\n          </Tab>\n\n          <Tab eventKey=\"userEditField\" title=\"Single Field\">\n          {this.state.selectedUser === null && (\n            <Button variant=\"outline-warning\" size=\"lg\">\n              Select a Staff member from the Master List below\n            </Button>\n          )}\n          {this.state.selectedUser !== null && (\n            <Button variant=\"outline-primary\" onClick={this.startUpdateUserHandler}>Edit Field</Button>\n          )}\n          {this.state.updating &&\n            this.state.selectedUser !== null\n            && (\n              <UpdateUserFieldForm\n                authUserId={this.context.userId}\n                canCancel\n                canConfirm\n                onCancel={this.modalCancelHandler}\n                onConfirm={this.modalConfirmUpdateFieldHandler}\n                confirmText=\"Confirm\"\n                user={this.state.selectedUser}\n              />\n          )}\n          </Tab>\n\n          <Tab eventKey=\"Atttendance\" title=\"Atttendance\">\n            <Button variant=\"outline-primary\" value='attendance' onClick={this.updateUserSpecialProfile.bind(this)}>Attendance</Button>\n            {this.state.userUpdateField === 'attendance' && (\n              <UpdateUserAttendanceForm\n              authUserId={this.context.userId}\n              canCancelProfile\n                canConfirm\n                onCancel={this.modalCancelHandler}\n                onConfirm={this.updateUserAttendanceHandler}\n                confirmText=\"Confirm\"\n                user={this.state.selectedUser}\n              />\n            )}\n          </Tab>\n\n          <Tab eventKey=\"Leave\" title=\"Leave\">\n            <Button variant=\"outline-primary\" value='leave' onClick={this.updateUserSpecialProfile.bind(this)}>Leave</Button>\n            {this.state.userUpdateField === 'leave' && (\n              <UpdateUserLeaveForm\n              authUserId={this.context.userId}\n              canCancelProfile\n                canConfirm\n                onCancel={this.modalCancelHandler}\n                onConfirm={this.updateUserLeaveHandler}\n                confirmText=\"Confirm\"\n                user={this.state.selectedUser}\n              />\n            )}\n          </Tab>\n\n          <Tab eventKey=\"Attachment\" title=\"Attachment\">\n          <Button variant=\"outline-primary\" value='attachments' onClick={this.updateUserSpecialProfile.bind(this)}>Attachment</Button>\n          {this.state.userUpdateField === 'attachments' && (\n            <UpdateUserAttachmentForm\n            authUserId={this.context.userId}\n            canCancelProfile\n              canConfirm\n              onCancel={this.modalCancelHandler}\n              onConfirm={this.updateUserAttachmentHandler}\n              confirmText=\"Confirm\"\n              user={this.state.selectedUser}\n            />\n          )}\n          </Tab>\n        </Tabs>\n        </Container>\n      </Col>\n      </Row>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default ThisUserPage;\n"]},"metadata":{},"sourceType":"module"}