{"ast":null,"code":"var _jsxFileName = \"/Users/pedrojacob/Downloads/AMR/websites/office_records/ENT_EMR/frontend/src/pages/Patients.js\";\nimport React, { Component } from 'react'; // import Form from 'react-bootstrap/Form';\n// import Button from 'react-bootstrap/Button';\n// import Modal from '../components/Modal/Modal';\n// import Backdrop from '../components/Backdrop/Backdrop';\n\nimport PatientList from '../components/Patients/PatientList/PatientList';\nimport PatientDetail from '../components/Patients/PatientDetail';\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\nimport CreatePatientForm from '../components/Forms/CreatePatientForm';\nimport UpdatePatientForm from '../components/Forms/UpdatePatientForm';\nimport './Users.css';\n\nclass PatientsPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      creating: false,\n      updating: false,\n      patients: [],\n      isLoading: false,\n      selectedPatient: null\n    };\n    this.isActive = true;\n\n    this.startCreatePatientHandler = () => {\n      this.setState({\n        creating: true\n      });\n      console.log(\"CreatePatientForm...\");\n    };\n\n    this.startUpdatePatientHandler = () => {\n      this.setState({\n        updating: true\n      });\n      console.log(\"UpdatePatientForm...\");\n    };\n\n    this.modalConfirmHandler = event => {\n      console.log(\"CreatePatientFormData:  \", event.target.formGridName.value);\n      this.setState({\n        creating: false\n      });\n      const userId = this.context.userId;\n      let name = event.target.formGridName.value;\n      let dob = event.target.formGridDob.value;\n      let address = event.target.formGridAddress.value;\n      let contactPhone = event.target.formGridContactPhone.value;\n      let contactEmail = event.target.formGridContactEmail.value;\n      let registrationDate = event.target.formGridRegistrationDate.value;\n      let referringDoctorName = event.target.formGridReferringDoctorName.value;\n      let referringDoctorEmail = event.target.formGridReferringDoctorEmail.value;\n      let referringDoctorPhone = event.target.formGridReferringDoctorPhone.value;\n      let occupationRole = event.target.formGridOccupationRole.value;\n      let occupationEmployer = event.target.formGridOccupationEmployer.value;\n      let occupationEmployerContactPhone = event.target.formGridOccupationEmployerContactPhone.value;\n      let occupationEmployerContactEmail = event.target.formGridOccupationEmployerContactEmail.value;\n      let nextOfKinName = event.target.formGridNextOfKinName.value;\n      let nextOfKinPhone = event.target.formGridNextOfKinPhone.value;\n      let nextOfKinEmail = event.target.formGridNextOfKinEmail.value;\n      let insuranceCompany = event.target.formGridInsuranceCompany.value;\n      let insuranceNumber = event.target.formGridInsuranceNumber.value;\n      let insuranceDescription = event.target.formGridInsuranceDescription.value;\n      let insuranceExpiry = event.target.formGridInsuranceExpiry.value;\n      let insuranceSubscriberCompany = event.target.formGridInsuranceSubscriberCompany.value;\n      let insuranceSubscriberDescription = event.target.formGridInsuranceSubscriberDescription.value;\n      let complaintDate = event.target.formGridComplaintDate.value;\n      let complaintTitle = event.target.formGridComplaintTitle.value;\n      let complaintDescription = event.target.formGridComplaintDescription.value;\n\n      if (name.trim().length === 0 || dob.trim().length === 0 || address.trim().length === 0 || contactPhone.trim().length === 0 || contactEmail.trim().length === 0 || registrationDate.trim().length === 0 || referringDoctorName.trim().length === 0 || referringDoctorEmail.trim().length === 0 || referringDoctorPhone.trim().length === 0 || occupationRole.trim().length === 0 || occupationEmployer.trim().length === 0 || occupationEmployerContactPhone.trim().length === 0 || occupationEmployerContactEmail.trim().length === 0 || nextOfKinName.trim().length === 0 || nextOfKinPhone.trim().length === 0 || nextOfKinEmail.trim().length === 0 || insuranceCompany.trim().length === 0 || insuranceNumber.trim().length === 0 || insuranceDescription.trim().length === 0 || insuranceExpiry.trim().length === 0 || insuranceSubscriberCompany.trim().length === 0 || insuranceSubscriberDescription.trim().length === 0 || complaintDate.trim().length === 0 || complaintTitle.trim().length === 0 || complaintDescription.trim().length === 0) {\n        console.log(\"blank fields detected!!!...Please try again...\");\n        return;\n      }\n\n      const patient = {\n        name,\n        dob,\n        address,\n        contactPhone,\n        contactEmail,\n        registrationDate,\n        referringDoctorName,\n        referringDoctorEmail,\n        referringDoctorPhone,\n        occupationRole,\n        occupationEmployer,\n        occupationEmployerContactPhone,\n        occupationEmployerContactEmail,\n        nextOfKinName,\n        nextOfKinPhone,\n        nextOfKinEmail,\n        insuranceCompany,\n        insuranceNumber,\n        insuranceDescription,\n        insuranceExpiry,\n        insuranceSubscriberCompany,\n        insuranceSubscriberDescription,\n        complaintDate,\n        complaintTitle,\n        complaintDescription\n      };\n      console.log(\"creating patient.. \" + JSON.stringify(patient));\n      const requestBody = {\n        query: \"\\n          mutation CreatePatient($userId: ID!, $name: String!, $dob: String!, $address: String!, $contactPhone: String!, $contactEmail: String!, $registrationDate: String!, $referringDoctorName: String!, $referringDoctorEmail: String!, $referringDoctorPhone: String!, $occupationRole: String!, $occupationEmployer: String!, $occupationEmployerContactPhone: String!, $occupationEmployerContactEmail: String!, $nextOfKinName: String!, $nextOfKinPhone: String!, $nextOfKinEmail: String!, $insuranceCompany: String!, $insuranceNumber: String!, $insuranceDescription: String!, $insuranceExpiry: String!, $insuranceSubscriberCompany: String!, $insuranceSubscriberDescription: String!, $complaintDate: String!, $complaintTitle: String!, $complaintDescription: String!) {\\n            createPatient(userId: $userId, patientInput: { name: $name, dob: $dob, address: $address, contactPhone: $contactPhone, contactEmail: $contactEmail, registrationDate: $registrationDate, referringDoctorName: $referringDoctorName, referringDoctorEmail: $referringDoctorEmail, referringDoctorPhone: $referringDoctorPhone, occupationRole: $occupationRole, occupationEmployer: $occupationEmployer, occupationEmployerContactPhone: $occupationEmployerContactPhone, occupationEmployerContactEmail: $occupationEmployerContactEmail, nextOfKinName: $nextOfKinName, nextOfKinPhone: $nextOfKinPhone, nextOfKinEmail: $nextOfKinEmail, insuranceCompany: $insuranceCompany, insuranceNumber: $insuranceNumber, insuranceDescription: $insuranceDescription, insuranceExpiry: $insuranceExpiry, insuranceSubscriberCompany: $insuranceSubscriberCompany, insuranceSubscriberDescription: $insuranceSubscriberDescription, complaintDate: $complaintDate, complaintTitle: $complaintTitle, complaintDescription: $complaintDescription}) {\\n              _id\\n              name\\n              address\\n              contact{\\n                email\\n                phone\\n              }\\n              registrationDate\\n              referringDoctor\\n              {\\n                name\\n                email\\n                phone\\n              }\\n              occupation\\n              {\\n                role\\n                employer\\n                contact\\n                {\\n                  email\\n                  phone\\n                }\\n              }\\n              nextOfKin\\n              {\\n                name\\n                phone\\n                email\\n              }\\n              insurance\\n              {\\n                company\\n                number\\n                description\\n                expiry\\n                subscriber\\n                {\\n                    company\\n                    description\\n                }\\n              }\\n              complaint\\n              {\\n                date\\n                title\\n                description\\n              }\\n            }\\n          }\\n        \",\n        variables: {\n          userId: userId,\n          name: name,\n          dob: dob,\n          address: address,\n          contactPhone: contactPhone,\n          contactEmail: contactEmail,\n          registrationDate: registrationDate,\n          referringDoctorName: referringDoctorName,\n          referringDoctorEmail: referringDoctorEmail,\n          referringDoctorPhone: referringDoctorPhone,\n          occupationRole: occupationRole,\n          occupationEmployer: occupationEmployer,\n          occupationEmployerContactPhone: occupationEmployerContactPhone,\n          occupationEmployerContactEmail: occupationEmployerContactEmail,\n          nextOfKinName: nextOfKinName,\n          nextOfKinPhone: nextOfKinPhone,\n          nextOfKinEmail: nextOfKinEmail,\n          insuranceCompany: insuranceCompany,\n          insuranceNumber: insuranceNumber,\n          insuranceDescription: insuranceDescription,\n          insuranceExpiry: insuranceExpiry,\n          insuranceSubscriberCompany: insuranceSubscriberCompany,\n          insuranceSubscriberDescription: insuranceSubscriberDescription,\n          complaintDate: complaintDate,\n          complaintTitle: complaintTitle,\n          complaintDescription: complaintDescription\n        }\n      };\n      const token = this.context.token;\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n        this.setState(prevState => {\n          const updatedPatients = [...prevState.patients];\n          updatedPatients.push({\n            _id: resData.data.createPatient._id,\n            name: resData.data.createPatient.name,\n            dob: resData.data.createPatient.dob,\n            address: resData.data.createPatient.address,\n            contact: {\n              phone: resData.data.createPatient.contactPhone,\n              email: resData.data.createPatient.contactEmail\n            },\n            registrationDate: resData.data.createPatient.registrationDate,\n            referringDoctor: {\n              name: resData.data.createPatient.referringDoctorName,\n              email: resData.data.createPatient.referringDoctorEmail,\n              phone: resData.data.createPatient.referringDoctorPhone\n            },\n            occupation: {\n              role: resData.data.createPatient.occupationRole,\n              employer: resData.data.createPatient.occupationEmployer,\n              contact: {\n                phone: resData.data.createPatient.occupationEmployerContactPhone,\n                email: resData.data.createPatient.occupationEmployerContactEmail\n              }\n            },\n            nextOfKin: {\n              name: resData.data.createPatient.nextOfKinName,\n              phone: resData.data.createPatient.nextOfKinPhone,\n              email: resData.data.createPatient.nextOfKinEmail\n            },\n            insurance: {\n              company: resData.data.createPatient.insuranceCompany,\n              number: resData.data.createPatient.insuranceNumber,\n              description: resData.data.createPatient.insuranceDescription,\n              expiry: resData.data.createPatient.insuranceExpiry,\n              subscriber: {\n                company: resData.data.createPatient.insuranceSubscriberCompany,\n                description: resData.data.createPatient.insuranceSubscriberDescription\n              }\n            },\n            complaint: {\n              date: resData.data.createPatient.complaintDate,\n              title: resData.data.createPatient.complaintTitle,\n              description: resData.data.createPatient.complaintDescription\n            }\n          });\n          return {\n            patients: updatedPatients\n          };\n        });\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.modalCancelHandler = () => {\n      this.setState({\n        creating: false,\n        updating: false,\n        selectedPatient: null\n      });\n    };\n\n    this.modalConfirmUpdateHandler = event => {\n      if (this.context.user.role !== 'admin') {\n        console.log(\"Not the Admin! No edit permission!!\");\n      }\n\n      const userId = this.context.userId;\n      const patientId = this.state.selectedPatient._id; // console.log(\"UpdateUserFormData:  \", event);\n\n      console.log(\"UpdatePatientFormData:  \", event.target.formGridName.value);\n      this.setState({\n        updating: false\n      });\n      let name = event.target.formGridName.value;\n      let dob = event.target.formGridDob.value;\n      let address = event.target.formGridAddress.value;\n      let contactPhone = event.target.formGridContactPhone.value;\n      let contactEmail = event.target.formGridContactEmail.value;\n      let registrationDate = event.target.formGridRegistrationDate.value;\n      let referringDoctorName = event.target.formGridReferringDoctorName.value;\n      let referringDoctorEmail = event.target.formGridReferringDoctorEmail.value;\n      let referringDoctorPhone = event.target.formGridReferringDoctorPhone.value;\n      let occupationRole = event.target.formGridOccupationRole.value;\n      let occupationEmployer = event.target.formGridOccupationEmployer.value;\n      let occupationEmployerContactPhone = event.target.formGridOccupationEmployerContactPhone.value;\n      let occupationEmployerContactEmail = event.target.formGridOccupationEmployerContactEmail.value;\n      let nextOfKinName = event.target.formGridNextOfKinName.value;\n      let nextOfKinPhone = event.target.formGridNextOfKinPhone.value;\n      let nextOfKinEmail = event.target.formGridNextOfKinEmail.value;\n      let insuranceCompany = event.target.formGridInsuranceCompany.value;\n      let insuranceNumber = event.target.formGridInsuranceNumber.value;\n      let insuranceDescription = event.target.formGridInsuranceDescription.value;\n      let insuranceExpiry = event.target.formGridInsuranceExpiry.value;\n      let insuranceSubscriberCompany = event.target.formGridInsuranceSubscriberCompany.value;\n      let insuranceSubscriberDescription = event.target.formGridInsuranceSubscriberDescription.value;\n      let complaintDate = event.target.formGridComplaintDate.value;\n      let complaintTitle = event.target.formGridComplaintTitle.value;\n      let complaintDescription = event.target.formGridComplaintDescription.value;\n\n      if (name.trim().length === 0 || dob.trim().length === 0 || address.trim().length === 0 || contactPhone.trim().length === 0 || contactEmail.trim().length === 0 || registrationDate.trim().length === 0 || referringDoctorName.trim().length === 0 || referringDoctorEmail.trim().length === 0 || referringDoctorPhone.trim().length === 0 || occupationRole.trim().length === 0 || occupationEmployer.trim().length === 0 || occupationEmployerContactPhone.trim().length === 0 || occupationEmployerContactEmail.trim().length === 0 || nextOfKinName.trim().length === 0 || nextOfKinPhone.trim().length === 0 || nextOfKinEmail.trim().length === 0 || insuranceCompany.trim().length === 0 || insuranceNumber.trim().length === 0 || insuranceDescription.trim().length === 0 || insuranceExpiry.trim().length === 0 || insuranceSubscriberCompany.trim().length === 0 || insuranceSubscriberDescription.trim().length === 0 || complaintDate.trim().length === 0 || complaintTitle.trim().length === 0 || complaintDescription.trim().length === 0) {\n        //   console.log(`\n        //     blank data fields detected!!...\n        //     name: ${name}\n        //     dob: ${dob}\n        //     address: ${address}\n        //     contactPhone: ${contactPhone}\n        //     contactEmail: ${contactEmail}\n        //     registrationDate: ${registrationDate}\n        //     referringDoctorName: ${referringDoctorName}\n        //     referringDoctorEmail: ${referringDoctorEmail}\n        //     referringDoctorPhone: ${referringDoctorPhone}\n        //     occupationRole: ${occupationRole}\n        //     occupationEmployer: ${occupationEmployer}\n        //     occupationEmployerContactPhone: ${occupationEmployerContactPhone}\n        //     occupationEmployerContactEmail: ${occupationEmployerContactEmail}\n        //     `);\n        // name = this.state.selectedPatient.name;\n        // dob = this.state.selectedPatient.dob;\n        // address = this.state.selectedPatient.address;\n        // contactPhone = this.state.selectedPatient.contactPhone;\n        // contactEmail = this.state.selectedPatient.contactEmail;\n        // registrationDate = this.state.selectedPatient.registrationDate;\n        // referringDoctorName = this.state.selectedPatient.referringDoctorName;\n        // referringDoctorEmail = this.state.selectedPatient.referringDoctorEmail;\n        // referringDoctorPhone = this.state.selectedPatient.referringDoctorPhone;\n        // occupationRole = this.state.selectedPatient.occupationRole;\n        // occupationEmployer = this.state.selectedPatient.occupationEmployer;\n        // occupationEmployerContactPhone = this.state.selectedPatient.occupationEmployerContactPhone;\n        // occupationEmployerContactEmail = this.state.selectedPatient.occupationEmployerContactEmail;\n        // name = this.state.selectedPatient.name;\n        // dob = this.state.selectedPatient.dob;\n        // address = this.state.selectedPatient.address;\n        // contactPhone = this.state.selectedPatient.contact.phone;\n        // contactEmail = this.state.selectedPatient.contact.email;\n        // registrationDate = this.state.selectedPatient.registrationDate;\n        // referringDoctorName = this.state.selectedPatient.referringDoctor.name;\n        // referringDoctorEmail = this.state.selectedPatient.referringDoctor.email;\n        // referringDoctorPhone = this.state.selectedPatient.referringDoctor.phone;\n        // occupationRole = this.state.selectedPatient.occupation.role;\n        // occupationEmployer = this.state.selectedPatient.occupation.employer;\n        // occupationEmployerContactPhone = this.state.selectedPatient.occupation.contact.phone;\n        // occupationEmployerContactEmail = this.state.selectedPatient.occupation.contact.email;\n        //\n        // console.log(`\n        //   inputting previous data...\n        //   name: ${name}\n        //   dob: ${dob}\n        //   address: ${address}\n        //   contactPhone: ${contactPhone}\n        //   contactEmail: ${contactEmail}\n        //   registrationDate: ${registrationDate}\n        //   referringDoctorName: ${referringDoctorName}\n        //   referringDoctorEmail: ${referringDoctorEmail}\n        //   referringDoctorPhone: ${referringDoctorPhone}\n        //   occupationRole: ${occupationRole}\n        //   occupationEmployer: ${occupationEmployer}\n        //   occupationEmployerContactPhone: ${occupationEmployerContactPhone}\n        //   occupationEmployerContactEmail: ${occupationEmployerContactEmail}\n        //   `);\n        //\n        console.log(\"blank fields detected!!!...Please try again...\");\n        return;\n      }\n\n      const patient = {\n        name,\n        dob,\n        address,\n        contactPhone,\n        contactEmail,\n        registrationDate,\n        referringDoctorName,\n        referringDoctorEmail,\n        referringDoctorPhone,\n        occupationRole,\n        occupationEmployer,\n        occupationEmployerContactPhone,\n        occupationEmployerContactEmail\n      };\n      console.log(\"updating patient.. \" + JSON.stringify(patient));\n      const requestBody = {\n        query: \"\\n          mutation UpdatePatient($userId: ID!, $patientId: ID!, $name: String!, $dob: String!, $address: String!, $contactPhone: String!, $contactEmail: String!, $registrationDate: String!, $referringDoctorName: String!, $referringDoctorEmail: String!, $referringDoctorPhone: String!, $occupationRole: String!, $occupationEmployer: String!, $occupationEmployerContactPhone: String!, $occupationEmployerContactEmail: String!, $nextOfKinName: String!, $nextOfKinPhone: String!, $nextOfKinEmail: String!, $insuranceCompany: String!, $insuranceNumber: String!, $insuranceDescription: String!, $insuranceExpiry: String!, $insuranceSubscriberCompany: String!, $insuranceSubscriberDescription: String!, $complaintDate: String!, $complaintTitle: String!, $complaintDescription: String!) {\\n            updatePatient(userId: $userId, patientId: $patientId, patientInput: { name: $name, dob: $dob, address: $address, contactPhone: $contactPhone, contactEmail: $contactEmail, registrationDate: $registrationDate, referringDoctorName: $referringDoctorName, referringDoctorEmail: $referringDoctorEmail, referringDoctorPhone: $referringDoctorPhone, occupationRole: $occupationRole, occupationEmployer: $occupationEmployer, occupationEmployerContactPhone: $occupationEmployerContactPhone, occupationEmployerContactEmail: $occupationEmployerContactEmail, nextOfKinName: $nextOfKinName, nextOfKinPhone: $nextOfKinPhone, nextOfKinEmail: $nextOfKinEmail, insuranceCompany: $insuranceCompany, insuranceNumber: $insuranceNumber, insuranceDescription: $insuranceDescription, insuranceExpiry: $insuranceExpiry, insuranceSubscriberCompany: $insuranceSubscriberCompany, insuranceSubscriberDescription: $insuranceSubscriberDescription, complaintDate: $complaintDate, complaintTitle: $complaintTitle, complaintDescription: $complaintDescription }){\\n              _id\\n              name\\n              address\\n              contact{\\n                email\\n                phone\\n              }\\n              registrationDate\\n              referringDoctor\\n              {\\n                name\\n                email\\n                phone\\n              }\\n              occupation\\n              {\\n                role\\n                employer\\n                contact\\n                {\\n                  email\\n                  phone\\n                }\\n              }\\n              nextOfKin\\n              {\\n                name\\n                phone\\n                email\\n              }\\n              insurance\\n              {\\n                company\\n                number\\n                description\\n                expiry\\n                subscriber\\n                {\\n                    company\\n                    description\\n                }\\n              }\\n              complaint\\n              {\\n                date\\n                title\\n                description\\n              }\\n            }\\n          }\\n        \",\n        variables: {\n          userId: userId,\n          patientId: patientId,\n          name: name,\n          dob: dob,\n          address: address,\n          contactPhone: contactPhone,\n          contactEmail: contactEmail,\n          registrationDate: registrationDate,\n          referringDoctorName: referringDoctorName,\n          referringDoctorEmail: referringDoctorEmail,\n          referringDoctorPhone: referringDoctorPhone,\n          occupationRole: occupationRole,\n          occupationEmployer: occupationEmployer,\n          occupationEmployerContactPhone: occupationEmployerContactPhone,\n          occupationEmployerContactEmail: occupationEmployerContactEmail,\n          nextOfKinName: nextOfKinName,\n          nextOfKinPhone: nextOfKinPhone,\n          nextOfKinEmail: nextOfKinEmail,\n          insuranceCompany: insuranceCompany,\n          insuranceNumber: insuranceNumber,\n          insuranceDescription: insuranceDescription,\n          insuranceExpiry: insuranceExpiry,\n          insuranceSubscriberCompany: insuranceSubscriberCompany,\n          insuranceSubscriberDescription: insuranceSubscriberDescription,\n          complaintDate: complaintDate,\n          complaintTitle: complaintTitle,\n          complaintDescription: complaintDescription\n        }\n      };\n      const token = this.context.token;\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n        const updatedPatientId = resData.data.updatePatient._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push({\n          _id: resData.data.updatePatient._id,\n          name: resData.data.updatePatient.name,\n          dob: resData.data.updatePatient.dob,\n          address: resData.data.updatePatient.address,\n          contact: {\n            phone: resData.data.updatePatient.contactPhone,\n            email: resData.data.updatePatient.contactEmail\n          },\n          registrationDate: resData.data.updatePatient.registrationDate,\n          referringDoctor: {\n            name: resData.data.updatePatient.referringDoctorName,\n            email: resData.data.updatePatient.referringDoctorEmail,\n            phone: resData.data.updatePatient.referringDoctorPhone\n          },\n          occupation: {\n            role: resData.data.updatePatient.occupationRole,\n            employer: resData.data.updatePatient.occupationEmployer,\n            contact: {\n              phone: resData.data.updatePatient.occupationEmployerContactPhone,\n              email: resData.data.updatePatient.occupationEmployerContactEmail\n            }\n          },\n          nextOfKin: {\n            name: resData.data.updatePatient.nextOfKinName,\n            phone: resData.data.updatePatient.nextOfKinPhone,\n            email: resData.data.updatePatient.nextOfKinEmail\n          },\n          insurance: {\n            company: resData.data.updatePatient.insuranceCompany,\n            number: resData.data.updatePatient.insuranceNumber,\n            description: resData.data.updatePatient.insuranceDescription,\n            expiry: resData.data.updatePatient.insuranceExpiry,\n            subscriber: {\n              company: resData.data.updatePatient.insuranceSubscriberCompany,\n              description: resData.data.updatePatient.insuranceSubscriberDescription\n            }\n          },\n          complaint: {\n            date: resData.data.updatePatient.complaintDate,\n            title: resData.data.updatePatient.complaintTitle,\n            description: resData.data.updatePatient.complaintDescription\n          }\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.modalCancelHandler = () => {\n      this.setState({\n        creating: false,\n        updating: false,\n        selectedPatient: null\n      });\n    };\n\n    this.showDetailHandler = patientId => {\n      this.setState(prevState => {\n        const selectedPatient = prevState.patients.find(e => e._id === patientId);\n        this.context.selectedPatient = selectedPatient;\n        this.context.selectedPatientId = selectedPatient._id;\n        console.log(\"selectedPatient:  \", selectedPatient);\n        return {\n          selectedPatient: selectedPatient\n        };\n      });\n    };\n\n    this.nameElRef = React.createRef();\n    this.dobElRef = React.createRef();\n    this.addressElRef = React.createRef();\n    this.contactPhoneElRef = React.createRef();\n    this.contactEmailElRef = React.createRef();\n    this.registrationDateElRef = React.createRef();\n    this.referringDoctorNameElRef = React.createRef();\n    this.referringDoctorEmailElRef = React.createRef();\n    this.referringDoctorPhoneElRef = React.createRef();\n    this.occupationRoleElRef = React.createRef();\n    this.occupationEmployerElRef = React.createRef();\n    this.occupationEmployerContactPhoneElRef = React.createRef();\n    this.occupationEmployerContactEmailElRef = React.createRef();\n    this.nextOfKinNameELRef = React.createRef();\n    this.nextOfKinPhoneELRef = React.createRef();\n    this.nextOfKinEmailELRef = React.createRef();\n    this.insuranceCompanyELRef = React.createRef();\n    this.insuranceNumberELRef = React.createRef();\n    this.insuranceDescriptionELRef = React.createRef();\n    this.insuranceExpiryELRef = React.createRef();\n    this.insuranceSubscriberCompanyELRef = React.createRef();\n    this.insuranceSubscriberDescriptionELRef = React.createRef();\n    this.complaintDateELRef = React.createRef();\n    this.complaintTitleELRef = React.createRef();\n    this.complaintDescriptionELRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.fetchPatients();\n  }\n\n  fetchPatients() {\n    console.log(\"'fetch patients function' context object... \" + JSON.stringify(this.context));\n    const userId = this.context.userId;\n    this.setState({\n      isLoading: true\n    });\n    const requestBody = {\n      query: \"\\n          query patients($userId: ID!) {\\n            patients(userId: $userId) {\\n              _id\\n              name\\n              address\\n              contact{\\n                email\\n                phone\\n              }\\n              registrationDate\\n              referringDoctor\\n              {\\n                name\\n                email\\n                phone\\n              }\\n              occupation\\n              {\\n                role\\n                employer\\n                contact\\n                {\\n                  email\\n                  phone\\n                }\\n              }\\n              nextOfKin\\n              {\\n                name\\n                phone\\n                email\\n              }\\n              insurance\\n              {\\n                company\\n                number\\n                description\\n                expiry\\n                subscriber\\n                {\\n                    company\\n                    description\\n                }\\n              }\\n              complaint\\n              {\\n                date\\n                title\\n                description\\n              }\\n            }\\n          }\\n        \",\n      variables: {\n        userId: userId\n      }\n    };\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    }).then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n\n      return res.json();\n    }).then(resData => {\n      const patients = resData.data.patients;\n      console.log(patients);\n\n      if (this.isActive) {\n        this.setState({\n          patients: patients,\n          isLoading: false\n        });\n      }\n    }).catch(err => {\n      console.log(err);\n\n      if (this.isActive) {\n        this.setState({\n          isLoading: false\n        });\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    this.isActive = false;\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 730\n      },\n      __self: this\n    }, this.state.creating && React.createElement(CreatePatientForm, {\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmHandler,\n      onSubmit: this.modalConfirmHandler,\n      confirmText: \"Confirm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 733\n      },\n      __self: this\n    }), this.state.updating && React.createElement(UpdatePatientForm, {\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmUpdateHandler,\n      confirmText: \"Confirm\",\n      patient: this.context.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 744\n      },\n      __self: this\n    }), this.state.isLoading === false && React.createElement(PatientDetail, {\n      canEdit: true,\n      authUserId: this.context.userId,\n      patient: this.state.selectedPatient,\n      onEdit: this.startUpdatePatientHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 754\n      },\n      __self: this\n    }), this.context.token && React.createElement(\"div\", {\n      className: \"users-control\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 762\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 763\n      },\n      __self: this\n    }, \"Add New Patient\"), React.createElement(\"button\", {\n      className: \"btn\",\n      onClick: this.startCreatePatientHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 764\n      },\n      __self: this\n    }, \"+\")), this.state.isLoading ? React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 770\n      },\n      __self: this\n    }) : React.createElement(PatientList, {\n      patients: this.state.patients,\n      authUserId: this.context.userId,\n      onViewDetail: this.showDetailHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 772\n      },\n      __self: this\n    }));\n  }\n\n}\n\nPatientsPage.contextType = AuthContext;\nexport default PatientsPage;","map":{"version":3,"sources":["/Users/pedrojacob/Downloads/AMR/websites/office_records/ENT_EMR/frontend/src/pages/Patients.js"],"names":["React","Component","PatientList","PatientDetail","Spinner","AuthContext","CreatePatientForm","UpdatePatientForm","PatientsPage","constructor","props","state","creating","updating","patients","isLoading","selectedPatient","isActive","startCreatePatientHandler","setState","console","log","startUpdatePatientHandler","modalConfirmHandler","event","target","formGridName","value","userId","context","name","dob","formGridDob","address","formGridAddress","contactPhone","formGridContactPhone","contactEmail","formGridContactEmail","registrationDate","formGridRegistrationDate","referringDoctorName","formGridReferringDoctorName","referringDoctorEmail","formGridReferringDoctorEmail","referringDoctorPhone","formGridReferringDoctorPhone","occupationRole","formGridOccupationRole","occupationEmployer","formGridOccupationEmployer","occupationEmployerContactPhone","formGridOccupationEmployerContactPhone","occupationEmployerContactEmail","formGridOccupationEmployerContactEmail","nextOfKinName","formGridNextOfKinName","nextOfKinPhone","formGridNextOfKinPhone","nextOfKinEmail","formGridNextOfKinEmail","insuranceCompany","formGridInsuranceCompany","insuranceNumber","formGridInsuranceNumber","insuranceDescription","formGridInsuranceDescription","insuranceExpiry","formGridInsuranceExpiry","insuranceSubscriberCompany","formGridInsuranceSubscriberCompany","insuranceSubscriberDescription","formGridInsuranceSubscriberDescription","complaintDate","formGridComplaintDate","complaintTitle","formGridComplaintTitle","complaintDescription","formGridComplaintDescription","trim","length","patient","JSON","stringify","requestBody","query","variables","token","fetch","method","body","headers","Authorization","then","res","status","Error","json","resData","prevState","updatedPatients","push","_id","data","createPatient","contact","phone","email","referringDoctor","occupation","role","employer","nextOfKin","insurance","company","number","description","expiry","subscriber","complaint","date","title","catch","err","modalCancelHandler","modalConfirmUpdateHandler","user","patientId","updatedPatientId","updatePatient","updatedPatient","find","e","updatedPatientPos","indexOf","slicedArray","splice","fetchPatients","showDetailHandler","selectedPatientId","nameElRef","createRef","dobElRef","addressElRef","contactPhoneElRef","contactEmailElRef","registrationDateElRef","referringDoctorNameElRef","referringDoctorEmailElRef","referringDoctorPhoneElRef","occupationRoleElRef","occupationEmployerElRef","occupationEmployerContactPhoneElRef","occupationEmployerContactEmailElRef","nextOfKinNameELRef","nextOfKinPhoneELRef","nextOfKinEmailELRef","insuranceCompanyELRef","insuranceNumberELRef","insuranceDescriptionELRef","insuranceExpiryELRef","insuranceSubscriberCompanyELRef","insuranceSubscriberDescriptionELRef","complaintDateELRef","complaintTitleELRef","complaintDescriptionELRef","componentDidMount","componentWillUnmount","render","contextType"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n// import Form from 'react-bootstrap/Form';\n// import Button from 'react-bootstrap/Button';\n\n// import Modal from '../components/Modal/Modal';\n// import Backdrop from '../components/Backdrop/Backdrop';\nimport PatientList from '../components/Patients/PatientList/PatientList';\nimport PatientDetail from '../components/Patients/PatientDetail';\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\n\nimport CreatePatientForm from '../components/Forms/CreatePatientForm';\nimport UpdatePatientForm from '../components/Forms/UpdatePatientForm';\nimport './Users.css';\n\nclass PatientsPage extends Component {\n  state = {\n    creating: false,\n    updating: false,\n    patients: [],\n    isLoading: false,\n    selectedPatient: null\n  };\n  isActive = true;\n\n  static contextType = AuthContext;\n\n  constructor(props) {\n    super(props);\n    this.nameElRef = React.createRef();\n    this.dobElRef = React.createRef();\n    this.addressElRef = React.createRef();\n    this.contactPhoneElRef = React.createRef();\n    this.contactEmailElRef = React.createRef();\n    this.registrationDateElRef = React.createRef();\n    this.referringDoctorNameElRef = React.createRef();\n    this.referringDoctorEmailElRef = React.createRef();\n    this.referringDoctorPhoneElRef = React.createRef();\n    this.occupationRoleElRef = React.createRef();\n    this.occupationEmployerElRef = React.createRef();\n    this.occupationEmployerContactPhoneElRef = React.createRef();\n    this.occupationEmployerContactEmailElRef = React.createRef();\n    this.nextOfKinNameELRef = React.createRef();\n    this.nextOfKinPhoneELRef = React.createRef();\n    this.nextOfKinEmailELRef = React.createRef();\n    this.insuranceCompanyELRef = React.createRef();\n    this.insuranceNumberELRef = React.createRef();\n    this.insuranceDescriptionELRef = React.createRef();\n    this.insuranceExpiryELRef = React.createRef();\n    this.insuranceSubscriberCompanyELRef = React.createRef();\n    this.insuranceSubscriberDescriptionELRef = React.createRef();\n    this.complaintDateELRef = React.createRef();\n    this.complaintTitleELRef = React.createRef();\n    this.complaintDescriptionELRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.fetchPatients();\n  }\n\n\n  startCreatePatientHandler = () => {\n    this.setState({ creating: true });\n    console.log(\"CreatePatientForm...\");\n  };\n  startUpdatePatientHandler = () => {\n    this.setState({ updating: true });\n    console.log(\"UpdatePatientForm...\");\n  };\n\n  modalConfirmHandler = (event) => {\n\n    console.log(\"CreatePatientFormData:  \", event.target.formGridName.value);\n\n    this.setState({ creating: false });\n    const userId = this.context.userId;\n\n    let name = event.target.formGridName.value;\n    let dob = event.target.formGridDob.value;\n    let address = event.target.formGridAddress.value;\n    let contactPhone = event.target.formGridContactPhone.value;\n    let contactEmail = event.target.formGridContactEmail.value;\n    let registrationDate = event.target.formGridRegistrationDate.value;\n    let referringDoctorName = event.target.formGridReferringDoctorName.value;\n    let referringDoctorEmail = event.target.formGridReferringDoctorEmail.value;\n    let referringDoctorPhone = event.target.formGridReferringDoctorPhone.value;\n    let occupationRole = event.target.formGridOccupationRole.value;\n    let occupationEmployer = event.target.formGridOccupationEmployer.value;\n    let occupationEmployerContactPhone = event.target.formGridOccupationEmployerContactPhone.value;\n    let occupationEmployerContactEmail = event.target.formGridOccupationEmployerContactEmail.value;\n    let nextOfKinName = event.target.formGridNextOfKinName.value;\n    let nextOfKinPhone = event.target.formGridNextOfKinPhone.value;\n    let nextOfKinEmail = event.target.formGridNextOfKinEmail.value;\n    let insuranceCompany = event.target.formGridInsuranceCompany.value;\n    let insuranceNumber = event.target.formGridInsuranceNumber.value;\n    let insuranceDescription = event.target.formGridInsuranceDescription.value;\n    let insuranceExpiry = event.target.formGridInsuranceExpiry.value;\n    let insuranceSubscriberCompany = event.target.formGridInsuranceSubscriberCompany.value;\n    let insuranceSubscriberDescription = event.target.formGridInsuranceSubscriberDescription.value;\n    let complaintDate = event.target.formGridComplaintDate.value;\n    let complaintTitle = event.target.formGridComplaintTitle.value;\n    let complaintDescription = event.target.formGridComplaintDescription.value;\n\n    if (\n      name.trim().length === 0 ||\n      dob.trim().length === 0 ||\n      address.trim().length === 0 ||\n      contactPhone.trim().length === 0 ||\n      contactEmail.trim().length === 0 ||\n      registrationDate.trim().length === 0 ||\n      referringDoctorName.trim().length === 0 ||\n      referringDoctorEmail.trim().length === 0 ||\n      referringDoctorPhone.trim().length === 0 ||\n      occupationRole.trim().length === 0 ||\n      occupationEmployer.trim().length === 0 ||\n      occupationEmployerContactPhone.trim().length === 0 ||\n      occupationEmployerContactEmail.trim().length === 0 ||\n      nextOfKinName.trim().length === 0 ||\n      nextOfKinPhone.trim().length === 0 ||\n      nextOfKinEmail.trim().length === 0 ||\n      insuranceCompany.trim().length === 0 ||\n      insuranceNumber.trim().length === 0 ||\n      insuranceDescription.trim().length === 0 ||\n      insuranceExpiry.trim().length === 0 ||\n      insuranceSubscriberCompany.trim().length === 0 ||\n      insuranceSubscriberDescription.trim().length === 0 ||\n      complaintDate.trim().length === 0 ||\n      complaintTitle.trim().length === 0 ||\n      complaintDescription.trim().length === 0\n\n    ) {\n      console.log(\"blank fields detected!!!...Please try again...\");\n      return;\n    }\n\n    const patient = { name, dob, address, contactPhone, contactEmail, registrationDate, referringDoctorName, referringDoctorEmail, referringDoctorPhone, occupationRole, occupationEmployer, occupationEmployerContactPhone, occupationEmployerContactEmail, nextOfKinName, nextOfKinPhone, nextOfKinEmail, insuranceCompany, insuranceNumber, insuranceDescription, insuranceExpiry, insuranceSubscriberCompany, insuranceSubscriberDescription, complaintDate, complaintTitle, complaintDescription };\n    console.log(\"creating patient.. \" + JSON.stringify(patient));\n\n    const requestBody = {\n      query: `\n          mutation CreatePatient($userId: ID!, $name: String!, $dob: String!, $address: String!, $contactPhone: String!, $contactEmail: String!, $registrationDate: String!, $referringDoctorName: String!, $referringDoctorEmail: String!, $referringDoctorPhone: String!, $occupationRole: String!, $occupationEmployer: String!, $occupationEmployerContactPhone: String!, $occupationEmployerContactEmail: String!, $nextOfKinName: String!, $nextOfKinPhone: String!, $nextOfKinEmail: String!, $insuranceCompany: String!, $insuranceNumber: String!, $insuranceDescription: String!, $insuranceExpiry: String!, $insuranceSubscriberCompany: String!, $insuranceSubscriberDescription: String!, $complaintDate: String!, $complaintTitle: String!, $complaintDescription: String!) {\n            createPatient(userId: $userId, patientInput: { name: $name, dob: $dob, address: $address, contactPhone: $contactPhone, contactEmail: $contactEmail, registrationDate: $registrationDate, referringDoctorName: $referringDoctorName, referringDoctorEmail: $referringDoctorEmail, referringDoctorPhone: $referringDoctorPhone, occupationRole: $occupationRole, occupationEmployer: $occupationEmployer, occupationEmployerContactPhone: $occupationEmployerContactPhone, occupationEmployerContactEmail: $occupationEmployerContactEmail, nextOfKinName: $nextOfKinName, nextOfKinPhone: $nextOfKinPhone, nextOfKinEmail: $nextOfKinEmail, insuranceCompany: $insuranceCompany, insuranceNumber: $insuranceNumber, insuranceDescription: $insuranceDescription, insuranceExpiry: $insuranceExpiry, insuranceSubscriberCompany: $insuranceSubscriberCompany, insuranceSubscriberDescription: $insuranceSubscriberDescription, complaintDate: $complaintDate, complaintTitle: $complaintTitle, complaintDescription: $complaintDescription}) {\n              _id\n              name\n              address\n              contact{\n                email\n                phone\n              }\n              registrationDate\n              referringDoctor\n              {\n                name\n                email\n                phone\n              }\n              occupation\n              {\n                role\n                employer\n                contact\n                {\n                  email\n                  phone\n                }\n              }\n              nextOfKin\n              {\n                name\n                phone\n                email\n              }\n              insurance\n              {\n                company\n                number\n                description\n                expiry\n                subscriber\n                {\n                    company\n                    description\n                }\n              }\n              complaint\n              {\n                date\n                title\n                description\n              }\n            }\n          }\n        `,\n        variables: {\n          userId: userId,\n          name: name,\n          dob: dob,\n          address: address,\n          contactPhone: contactPhone,\n          contactEmail: contactEmail,\n          registrationDate: registrationDate,\n          referringDoctorName: referringDoctorName,\n          referringDoctorEmail: referringDoctorEmail,\n          referringDoctorPhone: referringDoctorPhone,\n          occupationRole: occupationRole,\n          occupationEmployer: occupationEmployer,\n          occupationEmployerContactPhone: occupationEmployerContactPhone,\n          occupationEmployerContactEmail: occupationEmployerContactEmail,\n          nextOfKinName: nextOfKinName,\n          nextOfKinPhone: nextOfKinPhone,\n          nextOfKinEmail: nextOfKinEmail,\n          insuranceCompany: insuranceCompany,\n          insuranceNumber: insuranceNumber,\n          insuranceDescription: insuranceDescription,\n          insuranceExpiry: insuranceExpiry,\n          insuranceSubscriberCompany: insuranceSubscriberCompany,\n          insuranceSubscriberDescription: insuranceSubscriberDescription,\n          complaintDate: complaintDate,\n          complaintTitle: complaintTitle,\n          complaintDescription: complaintDescription\n        }\n    };\n\n    const token = this.context.token;\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n\n        this.setState(prevState => {\n          const updatedPatients = [...prevState.patients];\n          updatedPatients.push(\n            {\n            _id: resData.data.createPatient._id,\n            name: resData.data.createPatient.name,\n            dob: resData.data.createPatient.dob,\n            address: resData.data.createPatient.address,\n            contact:{\n              phone: resData.data.createPatient.contactPhone,\n              email: resData.data.createPatient.contactEmail\n            },\n            registrationDate: resData.data.createPatient.registrationDate,\n            referringDoctor: {\n              name: resData.data.createPatient.referringDoctorName,\n              email: resData.data.createPatient.referringDoctorEmail,\n              phone: resData.data.createPatient.referringDoctorPhone,\n            },\n            occupation: {\n              role: resData.data.createPatient.occupationRole,\n              employer: resData.data.createPatient.occupationEmployer,\n              contact: {\n                phone: resData.data.createPatient.occupationEmployerContactPhone,\n                email: resData.data.createPatient.occupationEmployerContactEmail\n              }\n            },\n            nextOfKin: {\n              name: resData.data.createPatient.nextOfKinName,\n              phone: resData.data.createPatient.nextOfKinPhone,\n              email: resData.data.createPatient.nextOfKinEmail\n            },\n            insurance: {\n              company: resData.data.createPatient.insuranceCompany,\n              number: resData.data.createPatient.insuranceNumber,\n              description: resData.data.createPatient.insuranceDescription,\n              expiry:  resData.data.createPatient.insuranceExpiry,\n              subscriber: {\n                company: resData.data.createPatient.insuranceSubscriberCompany,\n                description: resData.data.createPatient.insuranceSubscriberDescription\n              }\n            },\n            complaint: {\n              date: resData.data.createPatient.complaintDate,\n              title: resData.data.createPatient.complaintTitle,\n              description: resData.data.createPatient.complaintDescription\n            }\n          }\n        );\n\n          return { patients: updatedPatients };\n        });\n\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  modalCancelHandler = () => {\n    this.setState({ creating: false, updating: false, selectedPatient: null });\n  };\n\n\n  modalConfirmUpdateHandler = (event) => {\n\n    if(this.context.user.role !== 'admin') {\n      console.log(\"Not the Admin! No edit permission!!\");\n\n    }\n\n    const userId = this.context.userId;\n    const patientId = this.state.selectedPatient._id;\n\n    // console.log(\"UpdateUserFormData:  \", event);\n    console.log(\"UpdatePatientFormData:  \", event.target.formGridName.value);\n\n\n    this.setState({ updating: false });\n    let name = event.target.formGridName.value;\n    let dob = event.target.formGridDob.value;\n    let address = event.target.formGridAddress.value;\n    let contactPhone = event.target.formGridContactPhone.value;\n    let contactEmail = event.target.formGridContactEmail.value;\n    let registrationDate = event.target.formGridRegistrationDate.value;\n    let referringDoctorName = event.target.formGridReferringDoctorName.value;\n    let referringDoctorEmail = event.target.formGridReferringDoctorEmail.value;\n    let referringDoctorPhone = event.target.formGridReferringDoctorPhone.value;\n    let occupationRole = event.target.formGridOccupationRole.value;\n    let occupationEmployer = event.target.formGridOccupationEmployer.value;\n    let occupationEmployerContactPhone = event.target.formGridOccupationEmployerContactPhone.value;\n    let occupationEmployerContactEmail = event.target.formGridOccupationEmployerContactEmail.value;\n    let nextOfKinName = event.target.formGridNextOfKinName.value;\n    let nextOfKinPhone = event.target.formGridNextOfKinPhone.value;\n    let nextOfKinEmail = event.target.formGridNextOfKinEmail.value;\n    let insuranceCompany = event.target.formGridInsuranceCompany.value;\n    let insuranceNumber = event.target.formGridInsuranceNumber.value;\n    let insuranceDescription = event.target.formGridInsuranceDescription.value;\n    let insuranceExpiry = event.target.formGridInsuranceExpiry.value;\n    let insuranceSubscriberCompany = event.target.formGridInsuranceSubscriberCompany.value;\n    let insuranceSubscriberDescription = event.target.formGridInsuranceSubscriberDescription.value;\n    let complaintDate = event.target.formGridComplaintDate.value;\n    let complaintTitle = event.target.formGridComplaintTitle.value;\n    let complaintDescription = event.target.formGridComplaintDescription.value;\n\n\n    if (\n      name.trim().length === 0 ||\n      dob.trim().length === 0 ||\n      address.trim().length === 0 ||\n      contactPhone.trim().length === 0 ||\n      contactEmail.trim().length === 0 ||\n      registrationDate.trim().length === 0 ||\n      referringDoctorName.trim().length === 0 ||\n      referringDoctorEmail.trim().length === 0 ||\n      referringDoctorPhone.trim().length === 0 ||\n      occupationRole.trim().length === 0 ||\n      occupationEmployer.trim().length === 0 ||\n      occupationEmployerContactPhone.trim().length === 0 ||\n      occupationEmployerContactEmail.trim().length === 0 ||\n      nextOfKinName.trim().length === 0 ||\n      nextOfKinPhone.trim().length === 0 ||\n      nextOfKinEmail.trim().length === 0 ||\n      insuranceCompany.trim().length === 0 ||\n      insuranceNumber.trim().length === 0 ||\n      insuranceDescription.trim().length === 0 ||\n      insuranceExpiry.trim().length === 0 ||\n      insuranceSubscriberCompany.trim().length === 0 ||\n      insuranceSubscriberDescription.trim().length === 0 ||\n      complaintDate.trim().length === 0 ||\n      complaintTitle.trim().length === 0 ||\n      complaintDescription.trim().length === 0\n    ) {\n    //   console.log(`\n    //     blank data fields detected!!...\n    //     name: ${name}\n    //     dob: ${dob}\n    //     address: ${address}\n    //     contactPhone: ${contactPhone}\n    //     contactEmail: ${contactEmail}\n    //     registrationDate: ${registrationDate}\n    //     referringDoctorName: ${referringDoctorName}\n    //     referringDoctorEmail: ${referringDoctorEmail}\n    //     referringDoctorPhone: ${referringDoctorPhone}\n    //     occupationRole: ${occupationRole}\n    //     occupationEmployer: ${occupationEmployer}\n    //     occupationEmployerContactPhone: ${occupationEmployerContactPhone}\n    //     occupationEmployerContactEmail: ${occupationEmployerContactEmail}\n    //     `);\n\n      // name = this.state.selectedPatient.name;\n      // dob = this.state.selectedPatient.dob;\n      // address = this.state.selectedPatient.address;\n      // contactPhone = this.state.selectedPatient.contactPhone;\n      // contactEmail = this.state.selectedPatient.contactEmail;\n      // registrationDate = this.state.selectedPatient.registrationDate;\n      // referringDoctorName = this.state.selectedPatient.referringDoctorName;\n      // referringDoctorEmail = this.state.selectedPatient.referringDoctorEmail;\n      // referringDoctorPhone = this.state.selectedPatient.referringDoctorPhone;\n      // occupationRole = this.state.selectedPatient.occupationRole;\n      // occupationEmployer = this.state.selectedPatient.occupationEmployer;\n      // occupationEmployerContactPhone = this.state.selectedPatient.occupationEmployerContactPhone;\n      // occupationEmployerContactEmail = this.state.selectedPatient.occupationEmployerContactEmail;\n\n      // name = this.state.selectedPatient.name;\n      // dob = this.state.selectedPatient.dob;\n      // address = this.state.selectedPatient.address;\n      // contactPhone = this.state.selectedPatient.contact.phone;\n      // contactEmail = this.state.selectedPatient.contact.email;\n      // registrationDate = this.state.selectedPatient.registrationDate;\n      // referringDoctorName = this.state.selectedPatient.referringDoctor.name;\n      // referringDoctorEmail = this.state.selectedPatient.referringDoctor.email;\n      // referringDoctorPhone = this.state.selectedPatient.referringDoctor.phone;\n      // occupationRole = this.state.selectedPatient.occupation.role;\n      // occupationEmployer = this.state.selectedPatient.occupation.employer;\n      // occupationEmployerContactPhone = this.state.selectedPatient.occupation.contact.phone;\n      // occupationEmployerContactEmail = this.state.selectedPatient.occupation.contact.email;\n      //\n      // console.log(`\n      //   inputting previous data...\n      //   name: ${name}\n      //   dob: ${dob}\n      //   address: ${address}\n      //   contactPhone: ${contactPhone}\n      //   contactEmail: ${contactEmail}\n      //   registrationDate: ${registrationDate}\n      //   referringDoctorName: ${referringDoctorName}\n      //   referringDoctorEmail: ${referringDoctorEmail}\n      //   referringDoctorPhone: ${referringDoctorPhone}\n      //   occupationRole: ${occupationRole}\n      //   occupationEmployer: ${occupationEmployer}\n      //   occupationEmployerContactPhone: ${occupationEmployerContactPhone}\n      //   occupationEmployerContactEmail: ${occupationEmployerContactEmail}\n      //   `);\n    //\n    console.log(\"blank fields detected!!!...Please try again...\");\n      return;\n    }\n\n\n\n    const patient = { name, dob, address, contactPhone, contactEmail, registrationDate, referringDoctorName, referringDoctorEmail, referringDoctorPhone, occupationRole, occupationEmployer, occupationEmployerContactPhone, occupationEmployerContactEmail };\n    console.log(\"updating patient.. \" + JSON.stringify(patient));\n\n    const requestBody = {\n      query: `\n          mutation UpdatePatient($userId: ID!, $patientId: ID!, $name: String!, $dob: String!, $address: String!, $contactPhone: String!, $contactEmail: String!, $registrationDate: String!, $referringDoctorName: String!, $referringDoctorEmail: String!, $referringDoctorPhone: String!, $occupationRole: String!, $occupationEmployer: String!, $occupationEmployerContactPhone: String!, $occupationEmployerContactEmail: String!, $nextOfKinName: String!, $nextOfKinPhone: String!, $nextOfKinEmail: String!, $insuranceCompany: String!, $insuranceNumber: String!, $insuranceDescription: String!, $insuranceExpiry: String!, $insuranceSubscriberCompany: String!, $insuranceSubscriberDescription: String!, $complaintDate: String!, $complaintTitle: String!, $complaintDescription: String!) {\n            updatePatient(userId: $userId, patientId: $patientId, patientInput: { name: $name, dob: $dob, address: $address, contactPhone: $contactPhone, contactEmail: $contactEmail, registrationDate: $registrationDate, referringDoctorName: $referringDoctorName, referringDoctorEmail: $referringDoctorEmail, referringDoctorPhone: $referringDoctorPhone, occupationRole: $occupationRole, occupationEmployer: $occupationEmployer, occupationEmployerContactPhone: $occupationEmployerContactPhone, occupationEmployerContactEmail: $occupationEmployerContactEmail, nextOfKinName: $nextOfKinName, nextOfKinPhone: $nextOfKinPhone, nextOfKinEmail: $nextOfKinEmail, insuranceCompany: $insuranceCompany, insuranceNumber: $insuranceNumber, insuranceDescription: $insuranceDescription, insuranceExpiry: $insuranceExpiry, insuranceSubscriberCompany: $insuranceSubscriberCompany, insuranceSubscriberDescription: $insuranceSubscriberDescription, complaintDate: $complaintDate, complaintTitle: $complaintTitle, complaintDescription: $complaintDescription }){\n              _id\n              name\n              address\n              contact{\n                email\n                phone\n              }\n              registrationDate\n              referringDoctor\n              {\n                name\n                email\n                phone\n              }\n              occupation\n              {\n                role\n                employer\n                contact\n                {\n                  email\n                  phone\n                }\n              }\n              nextOfKin\n              {\n                name\n                phone\n                email\n              }\n              insurance\n              {\n                company\n                number\n                description\n                expiry\n                subscriber\n                {\n                    company\n                    description\n                }\n              }\n              complaint\n              {\n                date\n                title\n                description\n              }\n            }\n          }\n        `,\n        variables: {\n          userId: userId,\n          patientId: patientId,\n          name: name,\n          dob: dob,\n          address: address,\n          contactPhone: contactPhone,\n          contactEmail: contactEmail,\n          registrationDate: registrationDate,\n          referringDoctorName: referringDoctorName,\n          referringDoctorEmail: referringDoctorEmail,\n          referringDoctorPhone: referringDoctorPhone,\n          occupationRole: occupationRole,\n          occupationEmployer: occupationEmployer,\n          occupationEmployerContactPhone: occupationEmployerContactPhone,\n          occupationEmployerContactEmail: occupationEmployerContactEmail,\n          nextOfKinName: nextOfKinName,\n          nextOfKinPhone: nextOfKinPhone,\n          nextOfKinEmail: nextOfKinEmail,\n          insuranceCompany: insuranceCompany,\n          insuranceNumber: insuranceNumber,\n          insuranceDescription: insuranceDescription,\n          insuranceExpiry: insuranceExpiry,\n          insuranceSubscriberCompany: insuranceSubscriberCompany,\n          insuranceSubscriberDescription: insuranceSubscriberDescription,\n          complaintDate: complaintDate,\n          complaintTitle: complaintTitle,\n          complaintDescription: complaintDescription\n        }\n    };\n\n    const token = this.context.token;\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n\n        const updatedPatientId = resData.data.updatePatient._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(\n          {\n          _id: resData.data.updatePatient._id,\n          name: resData.data.updatePatient.name,\n          dob: resData.data.updatePatient.dob,\n          address: resData.data.updatePatient.address,\n          contact:{\n            phone: resData.data.updatePatient.contactPhone,\n            email: resData.data.updatePatient.contactEmail\n          },\n          registrationDate: resData.data.updatePatient.registrationDate,\n          referringDoctor: {\n            name: resData.data.updatePatient.referringDoctorName,\n            email: resData.data.updatePatient.referringDoctorEmail,\n            phone: resData.data.updatePatient.referringDoctorPhone,\n          },\n          occupation: {\n            role: resData.data.updatePatient.occupationRole,\n            employer: resData.data.updatePatient.occupationEmployer,\n            contact: {\n              phone: resData.data.updatePatient.occupationEmployerContactPhone,\n              email: resData.data.updatePatient.occupationEmployerContactEmail\n            }\n          },\n          nextOfKin: {\n            name: resData.data.updatePatient.nextOfKinName,\n            phone: resData.data.updatePatient.nextOfKinPhone,\n            email: resData.data.updatePatient.nextOfKinEmail\n          },\n          insurance: {\n            company: resData.data.updatePatient.insuranceCompany,\n            number: resData.data.updatePatient.insuranceNumber,\n            description: resData.data.updatePatient.insuranceDescription,\n            expiry:  resData.data.updatePatient.insuranceExpiry,\n            subscriber: {\n              company: resData.data.updatePatient.insuranceSubscriberCompany,\n              description: resData.data.updatePatient.insuranceSubscriberDescription\n            }\n          },\n          complaint: {\n            date: resData.data.updatePatient.complaintDate,\n            title: resData.data.updatePatient.complaintTitle,\n            description: resData.data.updatePatient.complaintDescription\n          }\n        }\n        );\n        this.fetchPatients();\n\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  modalCancelHandler = () => {\n    this.setState({ creating: false, updating: false, selectedPatient: null });\n  };\n\n\n  fetchPatients() {\n    console.log(\"'fetch patients function' context object... \" + JSON.stringify(this.context));\n    const userId = this.context.userId;\n\n    this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n          query patients($userId: ID!) {\n            patients(userId: $userId) {\n              _id\n              name\n              address\n              contact{\n                email\n                phone\n              }\n              registrationDate\n              referringDoctor\n              {\n                name\n                email\n                phone\n              }\n              occupation\n              {\n                role\n                employer\n                contact\n                {\n                  email\n                  phone\n                }\n              }\n              nextOfKin\n              {\n                name\n                phone\n                email\n              }\n              insurance\n              {\n                company\n                number\n                description\n                expiry\n                subscriber\n                {\n                    company\n                    description\n                }\n              }\n              complaint\n              {\n                date\n                title\n                description\n              }\n            }\n          }\n        `,\n        variables: {\n          userId: userId\n        }\n    };\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const patients = resData.data.patients;\n        console.log(patients);\n\n        if (this.isActive) {\n          this.setState({ patients: patients, isLoading: false });\n        }\n      })\n      .catch(err => {\n        console.log(err);\n        if (this.isActive) {\n          this.setState({ isLoading: false });\n        }\n      });\n  }\n\n\n  showDetailHandler = patientId => {\n\n    this.setState(prevState => {\n      const selectedPatient = prevState.patients.find(e => e._id === patientId);\n      this.context.selectedPatient = selectedPatient;\n      this.context.selectedPatientId = selectedPatient._id;\n      console.log(\"selectedPatient:  \", selectedPatient);\n      return { selectedPatient: selectedPatient };\n    });\n  };\n\n\n  componentWillUnmount() {\n    this.isActive = false;\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        {\n          this.state.creating && (\n          <CreatePatientForm\n          canCancel\n            canConfirm\n            onCancel={this.modalCancelHandler}\n            onConfirm={this.modalConfirmHandler}\n            onSubmit={this.modalConfirmHandler}\n            confirmText=\"Confirm\"\n          />\n        )\n      }\n        {this.state.updating && (\n          <UpdatePatientForm\n          canCancel\n            canConfirm\n            onCancel={this.modalCancelHandler}\n            onConfirm={this.modalConfirmUpdateHandler}\n            confirmText=\"Confirm\"\n            patient={this.context.selectedPatient}\n          />\n        )}\n        {this.state.isLoading === false &&\n          (<PatientDetail\n            canEdit\n            authUserId={this.context.userId}\n            patient={this.state.selectedPatient}\n            onEdit={this.startUpdatePatientHandler}\n        />)}\n\n        {this.context.token &&\n          (<div className=\"users-control\">\n            <p>Add New Patient</p>\n            <button className=\"btn\" onClick={this.startCreatePatientHandler}>\n              +\n            </button>\n          </div>\n        )}\n        {this.state.isLoading ? (\n          <Spinner />\n        ) : (\n          <PatientList\n            patients={this.state.patients}\n            authUserId={this.context.userId}\n            onViewDetail={this.showDetailHandler}\n          />\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default PatientsPage;\n"]},"metadata":{},"sourceType":"module"}