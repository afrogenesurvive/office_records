{"ast":null,"code":"import _toConsumableArray from\"/Users/pedrojacob/Downloads/AMR/websites/office_records/ENT_EMR/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _classCallCheck from\"/Users/pedrojacob/Downloads/AMR/websites/office_records/ENT_EMR/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/pedrojacob/Downloads/AMR/websites/office_records/ENT_EMR/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/Users/pedrojacob/Downloads/AMR/websites/office_records/ENT_EMR/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/Users/pedrojacob/Downloads/AMR/websites/office_records/ENT_EMR/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/Users/pedrojacob/Downloads/AMR/websites/office_records/ENT_EMR/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import S3 from'react-aws-s3';import S3FileUpload from'react-s3';import Container from'react-bootstrap/Container';import Row from'react-bootstrap/Row';import Col from'react-bootstrap/Col';import Button from'react-bootstrap/Button';import Accordion from'react-bootstrap/Accordion';import SidebarPage from'./Sidebar';import Tabs from'react-bootstrap/Tabs';import Tab from'react-bootstrap/Tab';import Card from'react-bootstrap/Card';import PatientList from'../components/Patients/PatientList/PatientList';import PatientDetail from'../components/Patients/PatientDetail';import Spinner from'../components/Spinner/Spinner';import AuthContext from'../context/auth-context';import SearchPatientList from'../components/Patients/PatientList/SearchPatientList';import SearchPatientForm from'../components/Forms/SearchPatientForm';import SearchPatientIdForm from'../components/Forms/SearchPatientIdForm';import SearchPatientNameForm from'../components/Forms/SearchPatientNameForm';import SearchPatientVisitForm from'../components/Forms/SearchPatientVisitForm';import AlertBox from'../components/AlertBox';import AttachmentViewer from'../components/AttachmentViewer';import PdfCreator from'../components/PdfCreator';import CreatePatientForm from'../components/Forms/CreatePatientForm';import UpdatePatientForm from'../components/Forms/UpdatePatientForm';import UpdatePatientFieldForm from'../components/Forms/UpdatePatientFieldForm';import UpdatePatientConsultantForm from'../components/Forms/UpdatePatientConsultantForm';import UpdatePatientInsuranceForm from'../components/Forms/UpdatePatientInsuranceForm';import UpdatePatientNextOfKinForm from'../components/Forms/UpdatePatientNextOfKinForm';import UpdatePatientComplaintForm from'../components/Forms/UpdatePatientComplaintForm';import UpdatePatientSurveyForm from'../components/Forms/UpdatePatientSurveyForm';import UpdatePatientVitalsForm from'../components/Forms/UpdatePatientVitalsForm';import UpdatePatientExaminationForm from'../components/Forms/UpdatePatientExaminationForm';import UpdatePatientHistoryForm from'../components/Forms/UpdatePatientHistoryForm';import UpdatePatientAllergiesForm from'../components/Forms/UpdatePatientAllergiesForm';import UpdatePatientMedicationForm from'../components/Forms/UpdatePatientMedicationForm';import UpdatePatientInvestigationForm from'../components/Forms/UpdatePatientInvestigationForm';import UpdatePatientDiagnosisForm from'../components/Forms/UpdatePatientDiagnosisForm';import UpdatePatientTreatmentForm from'../components/Forms/UpdatePatientTreatmentForm';import UpdatePatientBillingForm from'../components/Forms/UpdatePatientBillingForm';import UpdatePatientAttachmentForm from'../components/Forms/UpdatePatientAttachmentForm';import UpdatePatientNoteForm from'../components/Forms/UpdatePatientNoteForm';import UpdatePatientTagForm from'../components/Forms/UpdatePatientTagForm';import'./Users.css';var PatientsPage=/*#__PURE__*/function(_Component){_inherits(PatientsPage,_Component);function PatientsPage(_props){var _this;_classCallCheck(this,PatientsPage);_this=_possibleConstructorReturn(this,_getPrototypeOf(PatientsPage).call(this,_props));_this.state={creating:false,updating:false,searching:false,updatingArray:false,deleting:false,patients:[],searchPatients:[],isLoading:false,selectedPatient:null,patientUpdateField:null,patientSearchField:null,patientSearchQuery:null,canDelete:null,visit:null,userAlert:null,showAttachment:false,showThisAttachmentFile:null,showThisAttachmentType:null,createPdf:false,pdfData:null};_this.isActive=true;_this.startCreatePatientHandler=function(){_this.setState({creating:true});console.log(\"CreatePatientForm...\");};_this.startUpdatePatientHandler=function(){_this.setState({updating:true,updatingArray:true});console.log(\"UpdatePatientForm...\");};_this.startSearchPatientHandler=function(){_this.setState({searching:true});console.log(\"SearchPatientForm...\");};_this.modalConfirmHandler=function(event){console.log(\"CreatePatientFormData:  \",event.target.formGridName.value);_this.setState({creating:false});var userId=_this.context.userId;var title=event.target.formGridTitle.value;var name=event.target.formGridName.value;var dob=event.target.formGridDob.value;var age=event.target.formGridAge.value;var gender=event.target.formGridGender.value;var addressNumber=event.target.formGridAddressNumber.value;var addressStreet=event.target.formGridAddressStreet.value;var addressTown=event.target.formGridAddressTown.value;var addressParish=event.target.formGridAddressParish.value;var addressPostOffice=event.target.formGridAddressPostOffice.value;var contactPhone=event.target.formGridContactPhone.value;var contactEmail=event.target.formGridContactEmail.value;var registrationDate=event.target.formGridRegistrationDate.value;var referralDate=event.target.formGridReferralDate.value;var expirationDate=event.target.formGridExpirationDate.value;var attendingPhysicianName=event.target.formGridAttendingPhysicianName.value;var attendingPhysicianEmail=event.target.formGridAttendingPhysicianEmail.value;var attendingPhysicianPhone=event.target.formGridAttendingPhysicianPhone.value;var referringDoctorName=event.target.formGridReferringDoctorName.value;var referringDoctorEmail=event.target.formGridReferringDoctorEmail.value;var referringDoctorPhone=event.target.formGridReferringDoctorPhone.value;var occupationRole=event.target.formGridOccupationRole.value;var occupationEmployer=event.target.formGridOccupationEmployer.value;var occupationEmployerContactPhone=event.target.formGridOccupationEmployerContactPhone.value;var occupationEmployerContactEmail=event.target.formGridOccupationEmployerContactEmail.value;if(name.trim().length===0||// title.trim().length === 0 ||\n// name.trim().length === 0 ||\n// dob.trim().length === 0 ||\n// age.trim().length === 0 ||\n// gender.trim().length === 0 ||\n// addressNumber.trim().length === 0 ||\n// addressStreet.trim().length === 0 ||\n// addressTown.trim().length === 0 ||\n// addressParish.trim().length === 0 ||\n// addressPostOffice.trim().length === 0 ||\ncontactPhone.trim().length===0// contactEmail.trim().length === 0 ||\n// registrationDate.trim().length === 0 ||\n// referralDate.trim().length === 0 ||\n// expirationDate.trim().length === 0 ||\n// attendingPhysicianName.trim().length === 0 ||\n// attendingPhysicianEmail.trim().length === 0 ||\n// attendingPhysicianPhone.trim().length === 0 ||\n// referringDoctorName.trim().length === 0 ||\n// referringDoctorEmail.trim().length === 0 ||\n// referringDoctorPhone.trim().length === 0 ||\n// occupationRole.trim().length === 0 ||\n// occupationEmployer.trim().length === 0 ||\n// occupationEmployerContactPhone.trim().length === 0 ||\n// occupationEmployerContactEmail.trim().length === 0\n){console.log(\"patient must have at least a Name and Contact Number!!!...Please try again...\");_this.setState({userAlert:\"patient requires Name and Contact Number!!!... Try again...\"});return;}var patient={title:title,name:name,dob:dob,age:age,gender:gender,addressNumber:addressNumber,addressStreet:addressStreet,addressTown:addressTown,addressParish:addressParish,addressPostOffice:addressPostOffice,contactPhone:contactPhone,contactEmail:contactEmail,registrationDate:registrationDate,referralDate:referralDate,expirationDate:expirationDate,attendingPhysicianName:attendingPhysicianName,attendingPhysicianEmail:attendingPhysicianEmail,attendingPhysicianPhone:attendingPhysicianPhone,referringDoctorName:referringDoctorName,referringDoctorEmail:referringDoctorEmail,referringDoctorPhone:referringDoctorPhone,occupationRole:occupationRole,occupationEmployer:occupationEmployer,occupationEmployerContactPhone:occupationEmployerContactPhone,occupationEmployerContactEmail:occupationEmployerContactEmail};console.log(\"\\n      creating patient...\\n      title: \".concat(title,\",\\n      name: \").concat(name,\",\\n      dob: \").concat(dob,\",\\n      age: \").concat(age,\",\\n      gender: \").concat(gender,\",\\n      addressNumber: \").concat(addressNumber,\",\\n      addressStreet: \").concat(addressStreet,\",\\n      addressTown: \").concat(addressTown,\",\\n      addressParish: \").concat(addressParish,\",\\n      addressPostOffice: \").concat(addressPostOffice,\",\\n      contactPhone: \").concat(contactPhone,\",\\n      contactEmail: \").concat(contactEmail,\",\\n      registrationDate: \").concat(registrationDate,\",\\n      referralDate: \").concat(referralDate,\",\\n      expirationDate: \").concat(expirationDate,\",\\n      attendingPhysicianName: \").concat(attendingPhysicianName,\",\\n      attendingPhysicianEmail: \").concat(attendingPhysicianEmail,\",\\n      attendingPhysicianPhone: \").concat(attendingPhysicianPhone,\",\\n      referringDoctorName: \").concat(referringDoctorName,\",\\n      referringDoctorEmail: \").concat(referringDoctorEmail,\",\\n      referringDoctorPhone: \").concat(referringDoctorPhone,\",\\n      occupationRole: \").concat(occupationRole,\",\\n      occupationEmployer: \").concat(occupationEmployer,\",\\n      occupationEmployerContactPhone: \").concat(occupationEmployerContactPhone,\",\\n      occupationEmployerContactEmail: \").concat(occupationEmployerContactEmail,\",\\n      \"));var requestBody={query:\"\\n          mutation {createPatient(userId:\\\"\".concat(userId,\"\\\", patientInput:{title:\\\"\").concat(title,\"\\\",name:\\\"\").concat(name,\"\\\",dob:\\\"\").concat(dob,\"\\\",age:\").concat(age,\",gender:\\\"\").concat(gender,\"\\\",addressNumber:\").concat(addressNumber,\",addressStreet:\\\"\").concat(addressStreet,\"\\\",addressTown:\\\"\").concat(addressTown,\"\\\",addressParish:\\\"\").concat(addressParish,\"\\\",addressPostOffice:\\\"\").concat(addressPostOffice,\"\\\",contactPhone:\\\"\").concat(contactPhone,\"\\\",contactEmail:\\\"\").concat(contactEmail,\"\\\",registrationDate:\\\"\").concat(registrationDate,\"\\\",referralDate:\\\"\").concat(referralDate,\"\\\",expirationDate:\\\"\").concat(expirationDate,\"\\\",referringDoctorName:\\\"\").concat(referringDoctorName,\"\\\",referringDoctorEmail:\\\"\").concat(referringDoctorEmail,\"\\\",referringDoctorPhone:\\\"\").concat(referringDoctorPhone,\"\\\",attendingPhysicianName:\\\"\").concat(attendingPhysicianName,\"\\\",attendingPhysicianEmail:\\\"\").concat(attendingPhysicianEmail,\"\\\",attendingPhysicianPhone:\\\"\").concat(attendingPhysicianPhone,\"\\\",occupationRole:\\\"\").concat(occupationRole,\"\\\",occupationEmployer:\\\"\").concat(occupationEmployer,\"\\\",occupationEmployerContactPhone:\\\"\").concat(occupationEmployerContactPhone,\"\\\",occupationEmployerContactEmail:\\\"\").concat(occupationEmployerContactEmail,\"\\\"})\\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n        \")};var token=_this.context.token;// fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\nfetch('http://localhost:10000/graphql',{method:'POST',body:JSON.stringify(requestBody),headers:{'Content-Type':'application/json',Authorization:'Bearer '+token}}).then(function(res){if(res.status!==200&&res.status!==201){throw new Error('Failed!');}return res.json();}).then(function(resData){console.log(\"\\n          response data:\\n          \".concat(JSON.stringify(resData.data.createPatient),\"\\n          \"));var responseAlert=JSON.stringify(resData.data).slice(2,15);_this.setState({userAlert:responseAlert});var newPatient=resData.data.createPatient;_this.setState(function(prevState){var updatedPatients=_toConsumableArray(prevState.patients);updatedPatients.push(newPatient);return{patients:updatedPatients};});}).catch(function(err){console.log(err);_this.setState({userAlert:err});});};_this.modalCancelHandler=function(){_this.setState({creating:false,updating:false,selectedPatient:null});};_this.modalConfirmUpdateHandler=function(event){// if(this.context.user.role !== 'admin') {\n//   console.log(\"Not the Admin! No edit permission!!\");\n// }\nvar userId=_this.context.userId;var selectedPatientId=_this.context.selectedPatient._id;console.log(\"UpdatePatientFormData:  \",event.target.formGridName.value);_this.setState({updating:false});var title=event.target.formGridTitle.value;var name=event.target.formGridName.value;var dob=event.target.formGridDob.value;var age=event.target.formGridAge.value;var gender=event.target.formGridGender.value;var addressNumber=event.target.formGridAddressNumber.value;var addressStreet=event.target.formGridAddressStreet.value;var addressTown=event.target.formGridAddressTown.value;var addressParish=event.target.formGridAddressParish.value;var addressPostOffice=event.target.formGridAddressPostOffice.value;var contactPhone=event.target.formGridContactPhone.value;var contactEmail=event.target.formGridContactEmail.value;var registrationDate=event.target.formGridRegistrationDate.value;var referralDate=event.target.formGridReferralDate.value;var expirationDate=event.target.formGridExpirationDate.value;var attendingPhysicianName=event.target.formGridAttendingPhysicianName.value;var attendingPhysicianEmail=event.target.formGridAttendingPhysicianEmail.value;var attendingPhysicianPhone=event.target.formGridAttendingPhysicianPhone.value;var referringDoctorName=event.target.formGridReferringDoctorName.value;var referringDoctorEmail=event.target.formGridReferringDoctorEmail.value;var referringDoctorPhone=event.target.formGridReferringDoctorPhone.value;var occupationRole=event.target.formGridOccupationRole.value;var occupationEmployer=event.target.formGridOccupationEmployer.value;var occupationEmployerContactPhone=event.target.formGridOccupationEmployerContactPhone.value;var occupationEmployerContactEmail=event.target.formGridOccupationEmployerContactEmail.value;if(title.trim().length===0){console.log(\"blank fields detected!!!...filling w/ previous data...\");title=_this.context.selectedPatient.title;}if(name.trim().length===0){console.log(\"blank fields detected!!!...filling w/ previous data...\");name=_this.context.selectedPatient.name;}if(dob.trim().length===0){console.log(\"blank fields detected!!!...filling w/ previous data...\");dob=_this.context.selectedPatient.dob;}if(gender.trim().length===0){console.log(\"blank fields detected!!!...filling w/ previous data...\");gender=_this.context.selectedPatient.gender;}if(age.trim().length===0){console.log(\"blank fields detected!!!...filling w/ previous data...\");age=_this.context.selectedPatient.age;}if(addressNumber.trim().length===0){console.log(\"blank fields detected!!!...filling w/ previous data...\");addressNumber=_this.context.selectedPatient.address.number;}if(addressStreet.trim().length===0){console.log(\"blank fields detected!!!...filling w/ previous data...\");addressStreet=_this.context.selectedPatient.address.street;}if(addressTown.trim().length===0){console.log(\"blank fields detected!!!...filling w/ previous data...\");addressTown=_this.context.selectedPatient.address.town;}if(addressParish.trim().length===0){console.log(\"blank fields detected!!!...filling w/ previous data...\");addressParish=_this.context.selectedPatient.address.parish;}if(addressPostOffice.trim().length===0){console.log(\"blank fields detected!!!...filling w/ previous data...\");addressPostOffice=_this.context.selectedPatient.address.postOffice;}if(contactPhone.trim().length===0){console.log(\"blank fields detected!!!...filling w/ previous data...\");contactPhone=_this.context.selectedPatient.contact.phone;}if(contactEmail.trim().length===0){console.log(\"blank fields detected!!!...filling w/ previous data...\");contactEmail=_this.context.selectedPatient.contact.email;}if(registrationDate.trim().length===0){console.log(\"blank fields detected!!!...filling w/ previous data...\");registrationDate=_this.context.selectedPatient.registrationDate;}if(attendingPhysicianName.trim().length===0){console.log(\"blank fields detected!!!...filling w/ previous data...\");attendingPhysicianName=_this.context.selectedPatient.attendingPhysician.name;}if(attendingPhysicianEmail.trim().length===0){console.log(\"blank fields detected!!!...filling w/ previous data...\");attendingPhysicianEmail=_this.context.selectedPatient.attendingPhysician.email;}if(attendingPhysicianPhone.trim().length===0){console.log(\"blank fields detected!!!...filling w/ previous data...\");attendingPhysicianPhone=_this.context.selectedPatient.attendingPhysician.phone;}if(referringDoctorName.trim().length===0){console.log(\"blank fields detected!!!...filling w/ previous data...\");referringDoctorName=_this.context.selectedPatient.referringDoctor.name;}if(referringDoctorEmail.trim().length===0){console.log(\"blank fields detected!!!...filling w/ previous data...\");referringDoctorEmail=_this.context.selectedPatient.referringDoctor.email;}if(referringDoctorPhone.trim().length===0){console.log(\"blank fields detected!!!...filling w/ previous data...\");referringDoctorPhone=_this.context.selectedPatient.referringDoctor.phone;}if(occupationRole.trim().length===0){console.log(\"blank fields detected!!!...filling w/ previous data...\");occupationRole=_this.context.selectedPatient.occupation.role;}if(occupationEmployer.trim().length===0){console.log(\"blank fields detected!!!...filling w/ previous data...\");occupationEmployer=_this.context.selectedPatient.occupation.employer;}if(occupationEmployerContactEmail.trim().length===0){console.log(\"blank fields detected!!!...filling w/ previous data...\");occupationEmployerContactEmail=_this.context.selectedPatient.occupation.contact.email;}if(occupationEmployerContactPhone.trim().length===0){console.log(\"blank fields detected!!!...filling w/ previous data...\");occupationEmployerContactPhone=_this.context.selectedPatient.occupation.contact.phone;}var patient={title:title,name:name,dob:dob,age:age,gender:gender,addressNumber:addressNumber,addressStreet:addressStreet,addressTown:addressTown,addressParish:addressParish,addressPostOffice:addressPostOffice,contactPhone:contactPhone,contactEmail:contactEmail,registrationDate:registrationDate,referralDate:referralDate,expirationDate:expirationDate,attendingPhysicianName:attendingPhysicianName,attendingPhysicianEmail:attendingPhysicianEmail,attendingPhysicianPhone:attendingPhysicianPhone,referringDoctorName:referringDoctorName,referringDoctorEmail:referringDoctorEmail,referringDoctorPhone:referringDoctorPhone,occupationRole:occupationRole,occupationEmployer:occupationEmployer,occupationEmployerContactPhone:occupationEmployerContactPhone,occupationEmployerContactEmail:occupationEmployerContactEmail};console.log(\"\\n      updating patient...\\n      title: \".concat(title,\",\\n      name: \").concat(name,\",\\n      dob: \").concat(dob,\",\\n      age: \").concat(age,\",\\n      gender: \").concat(gender,\",\\n      addressNumber: \").concat(addressNumber,\",\\n      addressStreet: \").concat(addressStreet,\",\\n      addressTown: \").concat(addressTown,\",\\n      addressParish: \").concat(addressParish,\",\\n      addressPostOffice: \").concat(addressPostOffice,\",\\n      contactPhone: \").concat(contactPhone,\",\\n      contactEmail: \").concat(contactEmail,\",\\n      registrationDate: \").concat(registrationDate,\",\\n      referralDate: \").concat(referralDate,\",\\n      expirationDate: \").concat(expirationDate,\",\\n      attendingPhysicianName: \").concat(attendingPhysicianName,\",\\n      attendingPhysicianEmail: \").concat(attendingPhysicianEmail,\",\\n      attendingPhysicianPhone: \").concat(attendingPhysicianPhone,\",\\n      referringDoctorName: \").concat(referringDoctorName,\",\\n      referringDoctorEmail: \").concat(referringDoctorEmail,\",\\n      referringDoctorPhone: \").concat(referringDoctorPhone,\",\\n      occupationRole: \").concat(occupationRole,\",\\n      occupationEmployer: \").concat(occupationEmployer,\",\\n      occupationEmployerContactPhone: \").concat(occupationEmployerContactPhone,\",\\n      occupationEmployerContactEmail: \").concat(occupationEmployerContactEmail,\",\\n      \"));_this.setState({userAlert:\"updating patient...\"});var requestBody={query:\"\\n          mutation {updatePatient(userId:\\\"\".concat(userId,\"\\\",patientId:\\\"\").concat(selectedPatientId,\"\\\", patientInput:{title:\\\"\").concat(title,\"\\\",name:\\\"\").concat(name,\"\\\",dob:\\\"\").concat(dob,\"\\\",age:\").concat(age,\",gender:\\\"\").concat(gender,\"\\\",addressNumber:\").concat(addressNumber,\",addressStreet:\\\"\").concat(addressStreet,\"\\\",addressTown:\\\"\").concat(addressTown,\"\\\",addressParish:\\\"\").concat(addressParish,\"\\\",addressPostOffice:\\\"\").concat(addressPostOffice,\"\\\",contactPhone:\\\"\").concat(contactPhone,\"\\\",contactEmail:\\\"\").concat(contactEmail,\"\\\",registrationDate:\\\"\").concat(registrationDate,\"\\\",referralDate:\\\"\").concat(referralDate,\"\\\",expirationDate:\\\"\").concat(expirationDate,\"\\\",referringDoctorName:\\\"\").concat(referringDoctorName,\"\\\",referringDoctorEmail:\\\"\").concat(referringDoctorEmail,\"\\\",referringDoctorPhone:\\\"\").concat(referringDoctorPhone,\"\\\",attendingPhysicianName:\\\"\").concat(attendingPhysicianName,\"\\\",attendingPhysicianEmail:\\\"\").concat(attendingPhysicianEmail,\"\\\",attendingPhysicianPhone:\\\"\").concat(attendingPhysicianPhone,\"\\\",occupationRole:\\\"\").concat(occupationRole,\"\\\",occupationEmployer:\\\"\").concat(occupationEmployer,\"\\\",occupationEmployerContactPhone:\\\"\").concat(occupationEmployerContactPhone,\"\\\",occupationEmployerContactEmail:\\\"\").concat(occupationEmployerContactPhone,\"\\\"})\\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n        \")};var token=_this.context.token;fetch('http://localhost:10000/graphql',{method:'POST',body:JSON.stringify(requestBody),headers:{'Content-Type':'application/json',Authorization:'Bearer '+token}}).then(function(res){if(res.status!==200&&res.status!==201){throw new Error('Failed!');}return res.json();}).then(function(resData){console.log(\"response data... \"+JSON.stringify(resData));var updatedPatientId=resData.data.updatePatient._id;var updatedPatient=_this.state.patients.find(function(e){return e._id===updatedPatientId;});var updatedPatientPos=_this.state.patients.indexOf(updatedPatient);var slicedArray=_this.state.patients.splice(updatedPatientPos,1);console.log(\"updatedPatient:  \",JSON.stringify(updatedPatient),\"  updatedPatientPos:  \",updatedPatientPos,\"  slicedArray:  \",slicedArray);_this.state.patients.push(resData.data.updatePatient);var responseAlert=JSON.stringify(resData.data).slice(2,25);_this.setState({userAlert:responseAlert,selectedPatient:resData.data.updatePatient});_this.fetchPatients();}).catch(function(err){console.log(err);_this.setState({userAlert:err});});};_this.modalConfirmUpdateFieldHandler=function(event){var token=_this.context.token;var userId=_this.context.userId;var selectedPatientId=_this.context.selectedPatient._id;// if( this.context.user.role !== 'admin') {\n//   console.log(\"Not the creator or Admin! No edit permission!!\");\n//   selectedPatientId = null;\n// }\nconsole.log(\"UpdatePatientFieldFormData:  \",event.target.formGridField.value);_this.setState({updating:false});var field=null;var query=event.target.formGridQuery.value;if(event.target.formGridFieldSelect.value===\"select\"){field=event.target.formGridField.value;}else{field=event.target.formGridFieldSelect.value;}var requestBody={query:\"\\n          mutation {updatePatientField(userId:\\\"\".concat(userId,\"\\\",patientId:\\\"\").concat(selectedPatientId,\"\\\",field:\\\"\").concat(field,\"\\\",query:\\\"\").concat(query,\"\\\")\\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n        \")};fetch('http://localhost:10000/graphql',{method:'POST',body:JSON.stringify(requestBody),headers:{'Content-Type':'application/json',Authorization:'Bearer '+token}}).then(function(res){if(res.status!==200&&res.status!==201){throw new Error('Failed!');}return res.json();}).then(function(resData){console.log(\"response data... \"+JSON.stringify(resData.data.updatePatientField));var updatedPatientId=resData.data.updatePatientField._id;var updatedPatient=_this.state.patients.find(function(e){return e._id===updatedPatientId;});var updatedPatientPos=_this.state.patients.indexOf(updatedPatient);var slicedArray=_this.state.patients.splice(updatedPatientPos,1);console.log(\"updatedPatient:  \",JSON.stringify(updatedPatient),\"  updatedPatientPos:  \",updatedPatientPos,\"  slicedArray:  \",slicedArray);_this.state.patients.push(resData.data.updatePatientField);_this.context.patients=_this.state.patients;var responseAlert=JSON.stringify(resData.data).slice(2,25);_this.setState({userAlert:responseAlert,selectedPatient:resData.data.updatePatientField});_this.fetchPatients();}).catch(function(err){console.log(err);_this.setState({userAlert:err});});};_this.updatePatientConsultantHandler=function(event){var token=_this.context.token;var userId=_this.context.userId;var selectedPatientId=_this.context.selectedPatient._id;var patientConsultantReference=_this.context.selectedUser._id;// if(this.context.user.role !== 'admin') {\n//   console.log(\"No edit permission!!\");\n//   return;\n// }\nif(patientConsultantReference===undefined){console.log(\"\\n      select a Staff member before adding a Patient Consultant!!\\n      \");_this.setState({userAlert:\"select a Staff member before adding a Patient Consultant!!...\"});token=null;}console.log(\"UpdatePatientConsultantFormData:  \",event.target.formGridConsultantDate.value);_this.setState({updating:false,patientUpdateField:null});var consultantDate=event.target.formGridConsultantDate.value;var patientConsultant={consultantDate:consultantDate,patientConsultantReference:patientConsultantReference};console.log(\"\\n    adding patient consultant item...\\n    userId: \".concat(userId,\",\\n    selectedPatientId: \").concat(selectedPatientId,\",\\n    consultantDate: \").concat(consultantDate,\",\\n    consultantReference: \").concat(patientConsultantReference,\",\\n    \"));var requestBody={query:\"\\n        mutation {updatePatientConsultant(userId:\\\"\".concat(userId,\"\\\", patientId:\\\"\").concat(selectedPatientId,\"\\\",patientInput:{consultantDate:\\\" \").concat(consultantDate,\"\\\",consultantReference: \\\"\").concat(patientConsultantReference,\"\\\"})\\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n      \")};fetch('http://localhost:10000/graphql',{method:'POST',body:JSON.stringify(requestBody),headers:{'Content-Type':'application/json',Authorization:'Bearer '+token}}).then(function(res){if(res.status!==200&&res.status!==201){throw new Error('Failed!');}return res.json();}).then(function(resData){console.log(\"response data... \"+JSON.stringify(resData.data));var updatedPatientId=resData.data.updatePatientConsultant._id;var updatedPatient=_this.state.patients.find(function(e){return e._id===updatedPatientId;});var updatedPatientPos=_this.state.patients.indexOf(updatedPatient);var slicedArray=_this.state.patients.splice(updatedPatientPos,1);console.log(\"updatedPatient:  \",JSON.stringify(updatedPatient),\"  updatedPatientPos:  \",updatedPatientPos,\"  slicedArray:  \",slicedArray);_this.state.patients.push(resData.data.updatePatientConsultant);_this.context.patients=_this.state.patients;var responseAlert=JSON.stringify(resData.data).slice(2,25);_this.setState({userAlert:responseAlert,selectedPatient:resData.data.updatePatientConsultant});_this.fetchPatients();}).catch(function(err){console.log(err);_this.setState({userAlert:err});});};_this.updatePatientInsuranceHandler=function(event){var token=_this.context.token;var userId=_this.context.userId;var selectedPatientId=_this.context.selectedPatient._id;// if(this.context.user.role !== 'admin') {\n//   console.log(\"No edit permission!!\");\n//   return;\n// }\nconsole.log(\"UpdatePatientInsuranceFormData:  \",event.target.formGridInsuranceCompany.value);_this.setState({updating:false,patientUpdateField:null});var insuranceCompany=event.target.formGridInsuranceCompany.value;var insuranceNumber=event.target.formGridInsuranceNumber.value;var insuranceExpiry=event.target.formGridInsuranceExpiry.value;var insuranceDescription=event.target.formGridInsuranceDescription.value;var insuranceSubscriberCompany=event.target.formGridInsuranceSubscriberCompany.value;var insuranceSubscriberDescription=event.target.formGridInsuranceSubscriberDescription.value;var patientInsurance={insuranceCompany:insuranceCompany,insuranceNumber:insuranceNumber,insuranceExpiry:insuranceExpiry,insuranceDescription:insuranceDescription,insuranceSubscriberCompany:insuranceSubscriberCompany,insuranceSubscriberDescription:insuranceSubscriberDescription};console.log(\"\\n    adding patient insurance item...\\n    userId: \".concat(userId,\",\\n    selectedPatientId: \").concat(selectedPatientId,\",\\n    insuranceCompany: \").concat(insuranceCompany,\",\\n    insuranceNumber: \").concat(insuranceNumber,\",\\n    insuranceExpiry: \").concat(insuranceExpiry,\",\\n    insuranceDescription: \").concat(insuranceDescription,\",\\n    insuranceSubscriberCompany: \").concat(insuranceSubscriberCompany,\",\\n    insuranceSubscriberDescription: \").concat(insuranceSubscriberDescription,\",\\n    \"));_this.setState({userAlert:\"adding patient insurance item...\"});var requestBody={query:\"\\n        mutation {updatePatientInsurance(userId:\\\"\".concat(userId,\"\\\", patientId:\\\"\").concat(selectedPatientId,\"\\\",patientInput:{insuranceCompany:\\\"\").concat(insuranceCompany,\"\\\",insuranceNumber:\\\"\").concat(insuranceNumber,\"\\\",insuranceDescription:\\\"\").concat(insuranceDescription,\"\\\",insuranceExpiry:\\\"\").concat(insuranceExpiry,\"\\\",insuranceSubscriberCompany:\\\"\").concat(insuranceSubscriberCompany,\"\\\",insuranceSubscriberDescription:\\\"\").concat(insuranceSubscriberDescription,\"\\\"})\\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n      \")};fetch('http://localhost:10000/graphql',{method:'POST',body:JSON.stringify(requestBody),headers:{'Content-Type':'application/json',Authorization:'Bearer '+token}}).then(function(res){if(res.status!==200&&res.status!==201){throw new Error('Failed!');}return res.json();}).then(function(resData){console.log(\"response data... \"+JSON.stringify(resData.data));var updatedPatientId=resData.data.updatePatientInsurance._id;var updatedPatient=_this.state.patients.find(function(e){return e._id===updatedPatientId;});var updatedPatientPos=_this.state.patients.indexOf(updatedPatient);var slicedArray=_this.state.patients.splice(updatedPatientPos,1);console.log(\"updatedPatient:  \",JSON.stringify(updatedPatient),\"  updatedPatientPos:  \",updatedPatientPos,\"  slicedArray:  \",slicedArray);_this.state.patients.push(resData.data.updatePatientInsurance);_this.context.patients=_this.state.patients;var responseAlert=JSON.stringify(resData.data).slice(2,25);_this.setState({userAlert:responseAlert,selectedPatient:resData.data.updatePatientInsurance});_this.fetchPatients();}).catch(function(err){console.log(err);_this.setState({userAlert:err});});};_this.updatePatientNextOfKinHandler=function(event){var token=_this.context.token;var userId=_this.context.userId;var selectedPatientId=_this.context.selectedPatient._id;// if(this.context.user.role !== 'admin') {\n//   console.log(\"No edit permission!!\");\n//   return;\n// }\nconsole.log(\"UpdatePatientNextOfKinFormData:  \",event.target.formGridNextOfKinName.value);_this.setState({updating:false,patientUpdateField:null});var nextOfKinName=event.target.formGridNextOfKinName.value;var nextOfKinPhone=event.target.formGridNextOfKinPhone.value;var nextOfKinEmail=event.target.formGridNextOfKinEmail.value;var patientNextOfKin={nextOfKinName:nextOfKinName,nextOfKinPhone:nextOfKinPhone,nextOfKinEmail:nextOfKinEmail};console.log(\"\\n    adding patient nextOfKin item...\\n    userId: \".concat(userId,\",\\n    selectedPatientId: \").concat(selectedPatientId,\",\\n    nextOfKinName: \").concat(nextOfKinName,\",\\n    nextOfKinPhone: \").concat(nextOfKinPhone,\",\\n    nextOfKinEmail: \").concat(nextOfKinEmail,\",\\n    \"));_this.setState({userAlert:\"adding patient nextOfKin item...\"});var requestBody={query:\"\\n        mutation {updatePatientNextOfKin(userId:\\\"\".concat(userId,\"\\\", patientId:\\\"\").concat(selectedPatientId,\"\\\",patientInput:{nextOfKinName:\\\"\").concat(nextOfKinName,\"\\\",nextOfKinEmail:\\\"\").concat(nextOfKinEmail,\"\\\",nextOfKinPhone:\\\"\").concat(nextOfKinPhone,\"\\\"})\\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n      \")};fetch('http://localhost:10000/graphql',{method:'POST',body:JSON.stringify(requestBody),headers:{'Content-Type':'application/json',Authorization:'Bearer '+token}}).then(function(res){if(res.status!==200&&res.status!==201){throw new Error('Failed!');}return res.json();}).then(function(resData){console.log(\"response data... \"+JSON.stringify(resData.data));var updatedPatientId=resData.data.updatePatientNextOfKin._id;var updatedPatient=_this.state.patients.find(function(e){return e._id===updatedPatientId;});var updatedPatientPos=_this.state.patients.indexOf(updatedPatient);var slicedArray=_this.state.patients.splice(updatedPatientPos,1);console.log(\"updatedPatient:  \",JSON.stringify(updatedPatient),\"  updatedPatientPos:  \",updatedPatientPos,\"  slicedArray:  \",slicedArray);_this.state.patients.push(resData.data.updatePatientNextOfKin);_this.context.patients=_this.state.patients;var responseAlert=JSON.stringify(resData.data).slice(2,25);_this.setState({userAlert:responseAlert,selectedPatient:resData.data.updatePatientNextOfKin});_this.fetchPatients();}).catch(function(err){console.log(err);_this.setState({userAlert:err});});};_this.updatePatientComplaintHandler=function(event){var token=_this.context.token;var userId=_this.context.userId;var selectedPatientId=_this.context.selectedPatient._id;// if(this.context.user.role !== 'admin') {\n//   console.log(\"No edit permission!!\");\n//   return;\n// }\nconsole.log(\"UpdatePatientComplaintFormData:  \",event.target.formGridComplaintTitle.value);_this.setState({updating:false,patientUpdateField:null});var complaintTitle=event.target.formGridComplaintTitle.value;var complaintDate=event.target.formGridComplaintDate.value;var complaintDescription=event.target.formGridComplaintDescription.value;var complaintAnamnesis=event.target.formGridComplaintAnamnesis.value;// let complaintAttachmentName = event.target.formGridComplaintAttachmentName.value;\nvar complaintAttachmentFormat=event.target.formGridComplaintAttachmentFormat.value;var complaintAttachmentPath=event.target.formGridComplaintAttachmentPath.value;var file=AuthContext._currentValue.file;console.log(\"\\n    uploading to s3...\\n    file.name: \".concat(file.name,\",\\n    AuthContext._currentValue.file: \").concat(AuthContext._currentValue.file,\",\\n    \"));var config={bucketName:'ent-emr-bucket',dirName:complaintAttachmentPath,region:'us-east-2',accessKeyId:\"AKIARFTS6Q6DALQKT4QR\",secretAccessKey:\"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\"};var ReactS3Client=new S3(config);var newFileName=file.name;var complaintAttachmentName=newFileName;ReactS3Client.uploadFile(file,newFileName).then(function(data){console.log(data);_this.setState({userAlert:\"attachment upload success!\"});}).catch(function(err){console.error(err);_this.setState({userAlert:\"upload error:  \"+err});});var patientComplaint={complaintTitle:complaintTitle,complaintDate:complaintDate,complaintDescription:complaintDescription,complaintAnamnesis:complaintAnamnesis,complaintAttachmentName:complaintAttachmentName,complaintAttachmentFormat:complaintAttachmentFormat,complaintAttachmentPath:complaintAttachmentPath};console.log(\"\\n    adding patient complaint...\\n    userId: \".concat(userId,\",\\n    patientId: \").concat(selectedPatientId,\",\\n    complaintTitle: \").concat(complaintTitle,\",\\n    complaintDate: \").concat(complaintDate,\",\\n    complaintDescription: \").concat(complaintDescription,\",\\n    complaintAnamnesis: \").concat(complaintAnamnesis,\",\\n    complaintAttachmentName: \").concat(complaintAttachmentName,\",\\n    complaintAttachmentFormat: \").concat(complaintAttachmentFormat,\",\\n    complaintAttachmentPath: \").concat(complaintAttachmentPath,\",\\n    \"));_this.setState({userAlert:\"adding patient complaint...\"});var requestBody={query:\"\\n        mutation {updatePatientComplaint(userId:\\\"\".concat(userId,\"\\\", patientId:\\\"\").concat(selectedPatientId,\"\\\",patientInput:{complaintDate:\\\"\").concat(complaintDate,\"\\\",complaintTitle:\\\"\").concat(complaintTitle,\"\\\",complaintDescription:\\\"\").concat(complaintDescription,\"\\\",complaintAnamnesis:\\\"\").concat(complaintAnamnesis,\"\\\",complaintAttachmentName:\\\"\").concat(complaintAttachmentName,\"\\\",complaintAttachmentFormat:\\\"\").concat(complaintAttachmentFormat,\"\\\",complaintAttachmentPath:\\\"\").concat(complaintAttachmentPath,\"\\\"})\\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n      \")};fetch('http://localhost:10000/graphql',{method:'POST',body:JSON.stringify(requestBody),headers:{'Content-Type':'application/json',Authorization:'Bearer '+token}}).then(function(res){if(res.status!==200&&res.status!==201){throw new Error('Failed!');}return res.json();}).then(function(resData){console.log(\"response data... \"+JSON.stringify(resData.data));var updatedPatientId=resData.data.updatePatientComplaint._id;var updatedPatient=_this.state.patients.find(function(e){return e._id===updatedPatientId;});var updatedPatientPos=_this.state.patients.indexOf(updatedPatient);var slicedArray=_this.state.patients.splice(updatedPatientPos,1);console.log(\"updatedPatient:  \",JSON.stringify(updatedPatient),\"  updatedPatientPos:  \",updatedPatientPos,\"  slicedArray:  \",slicedArray);_this.state.patients.push(resData.data.updatePatientComplaint);_this.context.patients=_this.state.patients;var responseAlert=JSON.stringify(resData.data).slice(2,25);_this.setState({userAlert:responseAlert,selectedPatient:resData.data.updatePatientComplaint});_this.fetchPatients();}).catch(function(err){console.log(err);_this.setState({userAlert:err});});};_this.updatePatientSurveyHandler=function(event){var token=_this.context.token;var userId=_this.context.userId;var selectedPatientId=_this.context.selectedPatient._id;// if(this.context.user.role !== 'admin') {\n//   console.log(\"No edit permission!!\");\n//   return;\n// }\nconsole.log(\"UpdatePatientSurveyFormData:  \",event.target.formGridSurveyTitle.value);_this.setState({updating:false,patientUpdateField:null});var surveyDate=event.target.formGridSurveyDate.value;var surveyTitle=event.target.formGridSurveyTitle.value;var surveyDescription=event.target.formGridSurveyDescription.value;// let surveyAttachmentName = event.target.formGridSurveyAttachmentName.value;\nvar surveyAttachmentFormat=event.target.formGridSurveyAttachmentFormat.value;var surveyAttachmentPath=event.target.formGridSurveyAttachmentPath.value;var file=AuthContext._currentValue.file;console.log(\"\\n    uploading to s3...\\n    file.name: \".concat(file.name,\",\\n    AuthContext._currentValue.file: \").concat(AuthContext._currentValue.file,\",\\n    \"));var config={bucketName:'ent-emr-bucket',dirName:surveyAttachmentPath,region:'us-east-2',accessKeyId:\"AKIARFTS6Q6DALQKT4QR\",secretAccessKey:\"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\"};var ReactS3Client=new S3(config);var newFileName=file.name;var surveyAttachmentName=newFileName;ReactS3Client.uploadFile(file,newFileName).then(function(data){console.log(data);_this.setState({userAlert:\"attachment upload success!\"});}).catch(function(err){console.error(err);_this.setState({userAlert:\"upload error:  \"+err});});var patientSurvey={surveyDate:surveyDate,surveyTitle:surveyTitle,surveyDescription:surveyDescription,surveyAttachmentName:surveyAttachmentName,surveyAttachmentFormat:surveyAttachmentFormat,surveyAttachmentPath:surveyAttachmentPath};console.log(\"\\n    adding patient survey...\\n    userId: \".concat(userId,\",\\n    patientId: \").concat(selectedPatientId,\",\\n    surveyDate: \").concat(surveyDate,\",\\n    surveyTitle: \").concat(surveyTitle,\",\\n    surveyDescription: \").concat(surveyDescription,\",\\n    surveyAttachmentName: \").concat(surveyAttachmentName,\",\\n    surveyAttachmentFormat: \").concat(surveyAttachmentFormat,\",\\n    surveyAttachmentPath: \").concat(surveyAttachmentPath,\",\\n    \"));_this.setState({userAlert:\"adding patient survey...\"});var requestBody={query:\"\\n        mutation {updatePatientSurvey(userId:\\\"\".concat(userId,\"\\\",patientId:\\\"\").concat(selectedPatientId,\"\\\",patientInput:{surveyDate:\\\"\").concat(surveyDate,\"\\\",surveyTitle:\\\"\").concat(surveyTitle,\"\\\",surveyDescription:\\\"\").concat(surveyDescription,\"\\\",surveyAttachmentName:\\\"\").concat(surveyAttachmentName,\"\\\",surveyAttachmentFormat:\\\"\").concat(surveyAttachmentFormat,\"\\\",surveyAttachmentPath:\\\"\").concat(surveyAttachmentPath,\"\\\"})\\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n      \")};fetch('http://localhost:10000/graphql',{method:'POST',body:JSON.stringify(requestBody),headers:{'Content-Type':'application/json',Authorization:'Bearer '+token}}).then(function(res){if(res.status!==200&&res.status!==201){throw new Error('Failed!');}return res.json();}).then(function(resData){console.log(\"response data... \"+JSON.stringify(resData.data));var updatedPatientId=resData.data.updatePatientSurvey._id;var updatedPatient=_this.state.patients.find(function(e){return e._id===updatedPatientId;});var updatedPatientPos=_this.state.patients.indexOf(updatedPatient);var slicedArray=_this.state.patients.splice(updatedPatientPos,1);console.log(\"updatedPatient:  \",JSON.stringify(updatedPatient),\"  updatedPatientPos:  \",updatedPatientPos,\"  slicedArray:  \",slicedArray);_this.state.patients.push(resData.data.updatePatientSurvey);_this.context.patients=_this.state.patients;var responseAlert=JSON.stringify(resData.data).slice(2,25);_this.setState({userAlert:responseAlert,selectedPatient:resData.data.updatePatientSurvey});_this.fetchPatients();}).catch(function(err){console.log(err);_this.setState({userAlert:err});});};_this.updatePatientVitalsHandler=function(event){var token=_this.context.token;var userId=_this.context.userId;var selectedPatientId=_this.context.selectedPatient._id;// if(this.context.user.role !== 'admin') {\n//   console.log(\"No edit permission!!\");\n//   return;\n// }\nconsole.log(\"UpdatePatientVitalsFormData:  \",event.target.formGridVitalsDate.value);_this.setState({updating:false,patientUpdateField:null});var vitalsDate=event.target.formGridVitalsDate.value;var vitalsPr=event.target.formGridVitalsPr.value;var vitalsBp1=event.target.formGridVitalsBp1.value;var vitalsBp2=event.target.formGridVitalsBp2.value;var vitalsRr=event.target.formGridVitalsRr.value;var vitalsTemp=event.target.formGridVitalsTemp.value;var vitalsPs02=event.target.formGridVitalsPs02.value;var vitalsHeight=event.target.formGridVitalsHeight.value;var vitalsWeight=event.target.formGridVitalsWeight.value;var vitalsBmi=event.target.formGridVitalsBmi.value;var vitalsUrineType=event.target.formGridVitalsUrineType.value;var vitalsUrineValue=event.target.formGridVitalsUrineValue.value;var patientVitals={};console.log(\"\\n    adding patient vitals...\\n    userId: \".concat(userId,\",\\n    patientId: \").concat(selectedPatientId,\",\\n    \"));_this.setState({userAlert:\"adding patient vitals...\"});var requestBody={query:\"\\n        mutation {updatePatientVitals(userId:\\\"\".concat(userId,\"\\\",patientId:\\\"\").concat(selectedPatientId,\"\\\",patientInput:{vitalsDate:\\\"\").concat(vitalsDate,\"\\\",vitalsPr:\").concat(vitalsPr,\",vitalsBp1:\").concat(vitalsBp1,\",vitalsBp2:\").concat(vitalsBp2,\",vitalsRr:\").concat(vitalsRr,\",vitalsTemp:\").concat(vitalsTemp,\",vitalsPs02:\").concat(vitalsPs02,\",vitalsHeight:\").concat(vitalsHeight,\",vitalsWeight:\").concat(vitalsWeight,\",vitalsBmi:\").concat(vitalsBmi,\",vitalsUrineType:\\\"\").concat(vitalsUrineType,\"\\\",vitalsUrineValue:\\\"\").concat(vitalsUrineValue,\"\\\"})\\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n      \")};fetch('http://localhost:10000/graphql',{method:'POST',body:JSON.stringify(requestBody),headers:{'Content-Type':'application/json',Authorization:'Bearer '+token}}).then(function(res){if(res.status!==200&&res.status!==201){throw new Error('Failed!');}return res.json();}).then(function(resData){console.log(\"response data... \"+JSON.stringify(resData.data));var updatedPatientId=resData.data.updatePatientVitals._id;var updatedPatient=_this.state.patients.find(function(e){return e._id===updatedPatientId;});var updatedPatientPos=_this.state.patients.indexOf(updatedPatient);var slicedArray=_this.state.patients.splice(updatedPatientPos,1);console.log(\"updatedPatient:  \",JSON.stringify(updatedPatient),\"  updatedPatientPos:  \",updatedPatientPos,\"  slicedArray:  \",slicedArray);_this.state.patients.push(resData.data.updatePatientVitals);_this.context.patients=_this.state.patients;var responseAlert=JSON.stringify(resData.data).slice(2,25);_this.setState({userAlert:responseAlert,selectedPatient:resData.data.updatePatientVitals});_this.fetchPatients();}).catch(function(err){console.log(err);_this.setState({userAlert:err});});};_this.updatePatientExaminationHandler=function(event){var token=_this.context.token;var userId=_this.context.userId;var selectedPatientId=_this.context.selectedPatient._id;// if(this.context.user.role !== 'admin') {\n//   console.log(\"No edit permission!!\");\n//   return;\n// }\nconsole.log(\"UpdatePatientExaminationFormData:  \",event.target.formGridExaminationArea.value);_this.setState({updating:false,patientUpdateField:null});var examinationDate=event.target.formGridExaminationDate.value;var examinationGeneral=event.target.formGridExaminationGeneral.value;var examinationArea=undefined;if(event.target.formGridExaminationAreaSelect===\"select\"){examinationArea=event.target.formGridExaminationArea.value;}else{examinationArea=event.target.formGridExaminationAreaSelect.value;}var examinationType=event.target.formGridExaminationType.value;var examinationMeasure=event.target.formGridExaminationMeasure.value;var examinationValue=event.target.formGridExaminationValue.value;var examinationDescription=event.target.formGridExaminationDescription.value;var examinationFollowUp=event.target.formGridExaminationFollowUp.value;// let examinationAttachmentName = event.target.formGridExaminationAttachmentName.value;\nvar examinationAttachmentFormat=event.target.formGridExaminationAttachmentFormat.value;var examinationAttachmentPath=event.target.formGridExaminationAttachmentPath.value;var file=AuthContext._currentValue.file;console.log(\"\\n    uploading to s3...\\n    file.name: \".concat(file.name,\",\\n    AuthContext._currentValue.file: \").concat(AuthContext._currentValue.file,\",\\n    \"));var config={bucketName:'ent-emr-bucket',dirName:examinationAttachmentPath,region:'us-east-2',accessKeyId:\"AKIARFTS6Q6DALQKT4QR\",secretAccessKey:\"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\"};var ReactS3Client=new S3(config);var newFileName=file.name;var examinationAttachmentName=newFileName;ReactS3Client.uploadFile(file,newFileName).then(function(data){console.log(data);_this.setState({userAlert:\"attachment upload success!\"});}).catch(function(err){console.error(err);_this.setState({userAlert:\"upload error:  \"+err});});var patientExamination={examinationArea:examinationArea,examinationGeneral:examinationGeneral,examinationType:examinationType,examinationMeasure:examinationMeasure,examinationValue:examinationValue,examinationAttachmentName:examinationAttachmentName,examinationAttachmentFormat:examinationAttachmentFormat,examinationAttachmentPath:examinationAttachmentPath};console.log(\"\\n    adding patient examination...\\n    userId: \".concat(userId,\",\\n    patientId: \").concat(selectedPatientId,\",\\n    examinationDate: \").concat(examinationDate,\",\\n    examinationGeneral: \").concat(examinationGeneral,\",\\n    examinationArea: \").concat(examinationArea,\",\\n    examinationType: \").concat(examinationType,\",\\n    examinationMeasure: \").concat(examinationMeasure,\",\\n    examinationValue: \").concat(examinationValue,\",\\n    examinationDescription: \").concat(examinationDescription,\",\\n    examinationFollowUp: \").concat(examinationFollowUp,\",\\n    examinationAttachmentName: \").concat(examinationAttachmentName,\",\\n    examinationAttachmentFormat: \").concat(examinationAttachmentFormat,\",\\n    examinationAttachmentPath: \").concat(examinationAttachmentPath,\",\\n    \"));_this.setState({userAlert:\"adding patient examination...\"});var requestBody={query:\"\\n        mutation {updatePatientExamination(userId:\\\"\".concat(userId,\"\\\",patientId:\\\"\").concat(selectedPatientId,\"\\\",patientInput:{examinationDate:\\\"\").concat(examinationDate,\"\\\",examinationGeneral:\\\"\").concat(examinationGeneral,\"\\\",examinationArea:\\\"\").concat(examinationArea,\"\\\",examinationType:\\\"\").concat(examinationType,\"\\\",examinationMeasure:\\\"\").concat(examinationMeasure,\"\\\",examinationValue:\\\"\").concat(examinationValue,\"\\\",examinationDescription:\\\"\").concat(examinationDescription,\"\\\",examinationFollowUp:\").concat(examinationFollowUp,\",examinationAttachmentName:\\\"\").concat(examinationAttachmentName,\"\\\",examinationAttachmentFormat:\\\"\").concat(examinationAttachmentFormat,\"\\\",examinationAttachmentPath:\\\"\").concat(examinationAttachmentPath,\"\\\"})\\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n      \")};fetch('http://localhost:10000/graphql',{method:'POST',body:JSON.stringify(requestBody),headers:{'Content-Type':'application/json',Authorization:'Bearer '+token}}).then(function(res){if(res.status!==200&&res.status!==201){throw new Error('Failed!');}return res.json();}).then(function(resData){console.log(\"response data... \"+JSON.stringify(resData.data));var updatedPatientId=resData.data.updatePatientExamination._id;var updatedPatient=_this.state.patients.find(function(e){return e._id===updatedPatientId;});var updatedPatientPos=_this.state.patients.indexOf(updatedPatient);var slicedArray=_this.state.patients.splice(updatedPatientPos,1);console.log(\"updatedPatient:  \",JSON.stringify(updatedPatient),\"  updatedPatientPos:  \",updatedPatientPos,\"  slicedArray:  \",slicedArray);_this.state.patients.push(resData.data.updatePatientExamination);_this.context.patients=_this.state.patients;var responseAlert=JSON.stringify(resData.data).slice(2,25);_this.setState({userAlert:responseAlert,selectedPatient:resData.data.updatePatientExamination});_this.fetchPatients();}).catch(function(err){console.log(err);_this.setState({userAlert:err});});};_this.updatePatientHistoryHandler=function(event){var token=_this.context.token;var userId=_this.context.userId;var selectedPatientId=_this.context.selectedPatient._id;// if(this.context.user.role !== 'admin') {\n//   console.log(\"No edit permission!!\");\n//   return;\n// }\nconsole.log(\"UpdatePatientHistoryFormData:  \",event.target.formGridHistoryTitle.value);_this.setState({updating:false,patientUpdateField:null});var historyType=event.target.formGridHistoryType.value;var historyDate=event.target.formGridHistoryDate.value;var historyTitle=event.target.formGridHistoryTitle.value;var historyDescription=event.target.formGridHistoryDescription.value;// let historyAttachmentName = event.target.formGridHistoryAttachmentName.value;\nvar historyAttachmentFormat=event.target.formGridHistoryAttachmentFormat.value;var historyAttachmentPath=event.target.formGridHistoryAttachmentPath.value;var file=AuthContext._currentValue.file;console.log(\"\\n    uploading to s3...\\n    file.name: \".concat(file.name,\",\\n    AuthContext._currentValue.file: \").concat(AuthContext._currentValue.file,\",\\n    \"));var config={bucketName:'ent-emr-bucket',dirName:historyAttachmentPath,region:'us-east-2',accessKeyId:\"AKIARFTS6Q6DALQKT4QR\",secretAccessKey:\"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\"};var ReactS3Client=new S3(config);var newFileName=file.name;var historyAttachmentName=newFileName;ReactS3Client.uploadFile(file,newFileName).then(function(data){console.log(data);_this.setState({userAlert:\"attachment upload success!\"});}).catch(function(err){console.error(err);_this.setState({userAlert:\"upload error:  \"+err});});var patientHistory={historyType:historyType,historyDate:historyDate,historyTitle:historyTitle,historyDescription:historyDescription,historyAttachmentName:historyAttachmentName,historyAttachmentFormat:historyAttachmentFormat,historyAttachmentPath:historyAttachmentPath};console.log(\"\\n    adding patient history...\\n    userId: \".concat(userId,\",\\n    patientId: \").concat(selectedPatientId,\",\\n    historyType: \").concat(historyType,\",\\n    historyDate: \").concat(historyDate,\",\\n    historyTitle: \").concat(historyTitle,\",\\n    historyDescription: \").concat(historyDescription,\",\\n    historyAttachmentName: \").concat(historyAttachmentName,\",\\n    historyAttachmentFormat: \").concat(historyAttachmentFormat,\",\\n    historyAttachmentPath: \").concat(historyAttachmentPath,\",\\n    \"));_this.setState({userAlert:\"adding patient history...\"});var requestBody={query:\"\\n        mutation {updatePatientHistory(userId:\\\"\".concat(userId,\"\\\", patientId:\\\"\").concat(selectedPatientId,\"\\\",patientInput:{historyTitle:\\\"\").concat(historyTitle,\"\\\",historyType:\\\"\").concat(historyType,\"\\\",historyDate:\\\"\").concat(historyDate,\"\\\",historyDescription:\\\"\").concat(historyDescription,\"\\\",historyAttachmentName:\\\"\").concat(historyAttachmentName,\"\\\",historyAttachmentFormat:\\\"\").concat(historyAttachmentFormat,\"\\\",historyAttachmentPath:\\\"\").concat(historyAttachmentPath,\"\\\"})\\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n      \")};fetch('http://localhost:10000/graphql',{method:'POST',body:JSON.stringify(requestBody),headers:{'Content-Type':'application/json',Authorization:'Bearer '+token}}).then(function(res){if(res.status!==200&&res.status!==201){throw new Error('Failed!');}return res.json();}).then(function(resData){console.log(\"response data... \"+JSON.stringify(resData.data));var updatedPatientId=resData.data.updatePatientHistory._id;var updatedPatient=_this.state.patients.find(function(e){return e._id===updatedPatientId;});var updatedPatientPos=_this.state.patients.indexOf(updatedPatient);var slicedArray=_this.state.patients.splice(updatedPatientPos,1);console.log(\"updatedPatient:  \",JSON.stringify(updatedPatient),\"  updatedPatientPos:  \",updatedPatientPos,\"  slicedArray:  \",slicedArray);_this.state.patients.push(resData.data.updatePatientHistory);_this.context.patients=_this.state.patients;var responseAlert=JSON.stringify(resData.data).slice(2,25);_this.setState({userAlert:responseAlert,selectedPatient:resData.data.updatePatientHistory});_this.fetchPatients();}).catch(function(err){console.log(err);_this.setState({userAlert:err});});};_this.updatePatientAllergiesHandler=function(event){var token=_this.context.token;var userId=_this.context.userId;var selectedPatientId=_this.context.selectedPatient._id;// if(this.context.user.role !== 'admin') {\n//   console.log(\"No edit permission!!\");\n//   return;\n// }\nconsole.log(\"UpdatePatientAllergiesFormData:  \",event.target.formGridAllergiesTitle.value);_this.setState({updating:false,patientUpdateField:null});var allergiesTitle=event.target.formGridAllergiesTitle.value;var allergiesType=undefined;if(event.target.formGridAllergiesTypeSelect===\"select\"){allergiesType=event.target.formGridAllergiesType.value;}else{allergiesType=event.target.formGridAllergiesTypeSelect.value;}var allergiesDescription=event.target.formGridAllergiesDescription.value;// let allergiesAttachmentName = event.target.formGridAllergiesAttachmentName.value;\nvar allergiesAttachmentFormat=event.target.formGridAllergiesAttachmentFormat.value;var allergiesAttachmentPath=event.target.formGridAllergiesAttachmentPath.value;var file=AuthContext._currentValue.file;console.log(\"\\n    uploading to s3...\\n    file.name: \".concat(file.name,\",\\n    AuthContext._currentValue.file: \").concat(AuthContext._currentValue.file,\",\\n    \"));var config={bucketName:'ent-emr-bucket',dirName:allergiesAttachmentPath,region:'us-east-2',accessKeyId:\"AKIARFTS6Q6DALQKT4QR\",secretAccessKey:\"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\"};var ReactS3Client=new S3(config);var newFileName=file.name;var allergiesAttachmentName=newFileName;ReactS3Client.uploadFile(file,newFileName).then(function(data){console.log(data);_this.setState({userAlert:\"attachment upload success!\"});}).catch(function(err){console.error(err);_this.setState({userAlert:\"upload error:  \"+err});});var patientAllergies={allergiesTitle:allergiesTitle,allergiesType:allergiesType,allergiesDescription:allergiesDescription,allergiesAttachmentName:allergiesAttachmentName,allergiesAttachmentFormat:allergiesAttachmentFormat,allergiesAttachmentPath:allergiesAttachmentPath};console.log(\"\\n    adding patient allergies...\\n    userId: \".concat(userId,\",\\n    patientId: \").concat(selectedPatientId,\",\\n    allergiesTitle: \").concat(allergiesTitle,\",\\n    allergiesType: \").concat(allergiesType,\",\\n    allergiesDescription: \").concat(allergiesDescription,\",\\n    allergiesAttachmentName: \").concat(allergiesAttachmentName,\",\\n    allergiesAttachmentFormat: \").concat(allergiesAttachmentFormat,\",\\n    allergiesAttachmentPath: \").concat(allergiesAttachmentPath,\",\\n    \"));_this.setState({userAlert:\"adding patient allergies...\"});var requestBody={query:\"\\n        mutation {updatePatientAllergies(userId:\\\"\".concat(userId,\"\\\", patientId:\\\"\").concat(selectedPatientId,\"\\\",patientInput:{allergiesTitle:\\\"\").concat(allergiesTitle,\"\\\",allergiesType:\\\"\").concat(allergiesType,\"\\\", allergiesDescription:\\\"\").concat(allergiesDescription,\"\\\",allergiesAttachmentName:\\\"\").concat(allergiesAttachmentName,\"\\\",allergiesAttachmentFormat:\\\"\").concat(allergiesAttachmentFormat,\"\\\",allergiesAttachmentPath:\\\"\").concat(allergiesAttachmentPath,\"\\\"})\\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n      \")};fetch('http://localhost:10000/graphql',{method:'POST',body:JSON.stringify(requestBody),headers:{'Content-Type':'application/json',Authorization:'Bearer '+token}}).then(function(res){if(res.status!==200&&res.status!==201){throw new Error('Failed!');}return res.json();}).then(function(resData){console.log(\"response data... \"+JSON.stringify(resData.data));var updatedPatientId=resData.data.updatePatientAllergies._id;var updatedPatient=_this.state.patients.find(function(e){return e._id===updatedPatientId;});var updatedPatientPos=_this.state.patients.indexOf(updatedPatient);var slicedArray=_this.state.patients.splice(updatedPatientPos,1);console.log(\"updatedPatient:  \",JSON.stringify(updatedPatient),\"  updatedPatientPos:  \",updatedPatientPos,\"  slicedArray:  \",slicedArray);_this.state.patients.push(resData.data.updatePatientAllergies);_this.context.patients=_this.state.patients;var responseAlert=JSON.stringify(resData.data).slice(2,25);_this.setState({userAlert:responseAlert,selectedPatient:resData.data.updatePatientAllergies});_this.fetchPatients();}).catch(function(err){console.log(err);_this.setState({userAlert:err});});};_this.updatePatientMedicationHandler=function(event){var token=_this.context.token;var userId=_this.context.userId;var selectedPatientId=_this.context.selectedPatient._id;// if(this.context.user.role !== 'admin') {\n//   console.log(\"No edit permission!!\");\n//   return;\n// }\nconsole.log(\"UpdatePatientMedicationFormData:  \",event.target.formGridMedicationTitle.value);_this.setState({updating:false,patientUpdateField:null});var medicationTitle=event.target.formGridMedicationTitle.value;var medicationType=event.target.formGridMedicationType.value;var medicationDescription=event.target.formGridMedicationDescription.value;// let medicationAttachmentName = event.target.formGridMedicationAttachmentName.value;\nvar medicationAttachmentFormat=event.target.formGridMedicationAttachmentFormat.value;var medicationAttachmentPath=event.target.formGridMedicationAttachmentPath.value;var file=AuthContext._currentValue.file;console.log(\"\\n    uploading to s3...\\n    file.name: \".concat(file.name,\",\\n    AuthContext._currentValue.file: \").concat(AuthContext._currentValue.file,\",\\n    \"));var config={bucketName:'ent-emr-bucket',dirName:medicationAttachmentPath,region:'us-east-2',accessKeyId:\"AKIARFTS6Q6DALQKT4QR\",secretAccessKey:\"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\"};var ReactS3Client=new S3(config);var newFileName=file.name;var medicationAttachmentName=newFileName;ReactS3Client.uploadFile(file,newFileName).then(function(data){console.log(data);_this.setState({userAlert:\"attachment upload success!\"});}).catch(function(err){console.error(err);_this.setState({userAlert:\"upload error:  \"+err});});var patientMedication={medicationTitle:medicationTitle,medicationType:medicationType,medicationDescription:medicationDescription,medicationAttachmentName:medicationAttachmentName,medicationAttachmentFormat:medicationAttachmentFormat,medicationAttachmentPath:medicationAttachmentPath};console.log(\"\\n    adding patient medication...\\n    userId: \".concat(userId,\",\\n    patientId: \").concat(selectedPatientId,\",\\n    medicationTitle: \").concat(medicationTitle,\",\\n    medicationType: \").concat(medicationType,\",\\n    medicationDescription: \").concat(medicationDescription,\",\\n    medicationAttachmentName: \").concat(medicationAttachmentName,\",\\n    medicationAttachmentFormat: \").concat(medicationAttachmentFormat,\",\\n    medicationAttachmentPath: \").concat(medicationAttachmentPath,\",\\n    \"));_this.setState({userAlert:\"adding patient medication...\"});var requestBody={query:\"\\n      mutation {updatePatientMedication(userId:\\\"\".concat(userId,\"\\\", patientId:\\\"\").concat(selectedPatientId,\"\\\",patientInput:{medicationTitle:\\\"\").concat(medicationTitle,\"\\\",medicationType:\\\"\").concat(medicationType,\"\\\" medicationDescription:\\\"\").concat(medicationDescription,\"\\\",medicationAttachmentName:\\\"\").concat(medicationAttachmentName,\"\\\",medicationAttachmentFormat:\\\"\").concat(medicationAttachmentFormat,\"\\\",medicationAttachmentPath:\\\"\").concat(medicationAttachmentPath,\"\\\"})\\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n      \")};fetch('http://localhost:10000/graphql',{method:'POST',body:JSON.stringify(requestBody),headers:{'Content-Type':'application/json',Authorization:'Bearer '+token}}).then(function(res){if(res.status!==200&&res.status!==201){throw new Error('Failed!');}return res.json();}).then(function(resData){console.log(\"response data... \"+JSON.stringify(resData.data));var updatedPatientId=resData.data.updatePatientMedication._id;var updatedPatient=_this.state.patients.find(function(e){return e._id===updatedPatientId;});var updatedPatientPos=_this.state.patients.indexOf(updatedPatient);var slicedArray=_this.state.patients.splice(updatedPatientPos,1);console.log(\"updatedPatient:  \",JSON.stringify(updatedPatient),\"  updatedPatientPos:  \",updatedPatientPos,\"  slicedArray:  \",slicedArray);_this.state.patients.push(resData.data.updatePatientMedication);_this.context.patients=_this.state.patients;var responseAlert=JSON.stringify(resData.data).slice(2,25);_this.setState({userAlert:responseAlert,selectedPatient:resData.data.updatePatientMedication});_this.fetchPatients();}).catch(function(err){console.log(err);_this.setState({userAlert:err});});};_this.updatePatientInvestigationHandler=function(event){var token=_this.context.token;var userId=_this.context.userId;var selectedPatientId=_this.context.selectedPatient._id;// if(this.context.user.role !== 'admin') {\n//   console.log(\"No edit permission!!\");\n//   return;\n// }\nconsole.log(\"UpdatePatientInvestigationFormData:  \",event.target.formGridInvestigationTitle.value);_this.setState({updating:false,patientUpdateField:null});var investigationDate=event.target.formGridInvestigationDate.value;var investigationTitle=event.target.formGridInvestigationTitle.value;var investigationType=undefined;if(event.target.formGridInvestigationTypeSelect===\"select\"){investigationType=event.target.formGridInvestigationType.value;}else{investigationType=event.target.formGridInvestigationTypeSelect.value;}var investigationDescription=event.target.formGridInvestigationDescription.value;// let investigationAttachmentName = event.target.formGridInvestigationAttachmentName.value;\nvar investigationAttachmentFormat=event.target.formGridInvestigationAttachmentFormat.value;var investigationAttachmentPath=event.target.formGridInvestigationAttachmentPath.value;var file=AuthContext._currentValue.file;console.log(\"\\n    uploading to s3...\\n    file.name: \".concat(file.name,\",\\n    AuthContext._currentValue.file: \").concat(AuthContext._currentValue.file,\",\\n    \"));var config={bucketName:'ent-emr-bucket',dirName:investigationAttachmentPath,region:'us-east-2',accessKeyId:\"AKIARFTS6Q6DALQKT4QR\",secretAccessKey:\"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\"};var ReactS3Client=new S3(config);var newFileName=file.name;var investigationAttachmentName=newFileName;ReactS3Client.uploadFile(file,newFileName).then(function(data){console.log(data);_this.setState({userAlert:\"attachment upload success!\"});}).catch(function(err){console.error(err);_this.setState({userAlert:\"upload error:  \"+err});});var patientInvestigation={investigationDate:investigationDate,investigationTitle:investigationTitle,investigationType:investigationType,investigationDescription:investigationDescription,investigationAttachmentName:investigationAttachmentName,investigationAttachmentFormat:investigationAttachmentFormat,investigationAttachmentPath:investigationAttachmentPath};console.log(\"\\n    adding patient investigation...\\n    userId: \".concat(userId,\",\\n    patientId: \").concat(selectedPatientId,\",\\n    investigationDate: \").concat(investigationDate,\",\\n    investigationTitle: \").concat(investigationTitle,\",\\n    investigationType: \").concat(investigationType,\",\\n    investigationDescription: \").concat(investigationDescription,\",\\n    investigationAttachmentName: \").concat(investigationAttachmentName,\",\\n    investigationAttachmentFormat: \").concat(investigationAttachmentFormat,\",\\n    investigationAttachmentPath: \").concat(investigationAttachmentPath,\",\\n    \"));_this.setState({userAlert:\"adding patient investigation...\"});var requestBody={query:\"\\n        mutation {updatePatientInvestigation(userId:\\\"\".concat(userId,\"\\\", patientId:\\\"\").concat(selectedPatientId,\"\\\",patientInput:{investigationDate:\\\"\").concat(investigationDate,\"\\\",investigationTitle:\\\"\").concat(investigationTitle,\"\\\",investigationType:\\\"\").concat(investigationType,\"\\\",investigationDescription:\\\"\").concat(investigationDescription,\"\\\",investigationAttachmentName:\\\"\").concat(investigationAttachmentName,\"\\\",investigationAttachmentFormat:\\\"\").concat(investigationAttachmentFormat,\"\\\",investigationAttachmentPath:\\\"\").concat(investigationAttachmentPath,\"\\\"})\\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n      \")};fetch('http://localhost:10000/graphql',{method:'POST',body:JSON.stringify(requestBody),headers:{'Content-Type':'application/json',Authorization:'Bearer '+token}}).then(function(res){if(res.status!==200&&res.status!==201){throw new Error('Failed!');}return res.json();}).then(function(resData){console.log(\"response data... \"+JSON.stringify(resData.data));var updatedPatientId=resData.data.updatePatientInvestigation._id;var updatedPatient=_this.state.patients.find(function(e){return e._id===updatedPatientId;});var updatedPatientPos=_this.state.patients.indexOf(updatedPatient);var slicedArray=_this.state.patients.splice(updatedPatientPos,1);console.log(\"updatedPatient:  \",JSON.stringify(updatedPatient),\"  updatedPatientPos:  \",updatedPatientPos,\"  slicedArray:  \",slicedArray);_this.state.patients.push(resData.data.updatePatientInvestigation);_this.context.patients=_this.state.patients;var responseAlert=JSON.stringify(resData.data).slice(2,25);_this.setState({userAlert:responseAlert,selectedPatient:resData.data.updatePatientInvestigation});_this.fetchPatients();}).catch(function(err){console.log(err);_this.setState({userAlert:err});});};_this.updatePatientDiagnosisHandler=function(event){var token=_this.context.token;var userId=_this.context.userId;var selectedPatientId=_this.context.selectedPatient._id;// if(this.context.user.role !== 'admin') {\n//   console.log(\"No edit permission!!\");\n//   return;\n// }\nconsole.log(\"UpdatePatientDiagnosisFormData:  \",event.target.formGridDiagnosisTitle.value);_this.setState({updating:false,patientUpdateField:null});var diagnosisDate=event.target.formGridDiagnosisDate.value;var diagnosisTitle=event.target.formGridDiagnosisTitle.value;var diagnosisType=event.target.formGridDiagnosisType.value;var diagnosisDescription=event.target.formGridDiagnosisDescription.value;// let diagnosisAttachmentName = event.target.formGridDiagnosisAttachmentName.value;\nvar diagnosisAttachmentFormat=event.target.formGridDiagnosisAttachmentFormat.value;var diagnosisAttachmentPath=event.target.formGridDiagnosisAttachmentPath.value;var file=AuthContext._currentValue.file;console.log(\"\\n    uploading to s3...\\n    file.name: \".concat(file.name,\",\\n    AuthContext._currentValue.file: \").concat(AuthContext._currentValue.file,\",\\n    \"));var config={bucketName:'ent-emr-bucket',dirName:diagnosisAttachmentPath,region:'us-east-2',accessKeyId:\"AKIARFTS6Q6DALQKT4QR\",secretAccessKey:\"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\"};var ReactS3Client=new S3(config);var newFileName=file.name;var diagnosisAttachmentName=newFileName;ReactS3Client.uploadFile(file,newFileName).then(function(data){console.log(data);_this.setState({userAlert:\"attachment upload success!\"});}).catch(function(err){console.error(err);_this.setState({userAlert:\"upload error:  \"+err});});var patientDiagnosis={diagnosisDate:diagnosisDate,diagnosisTitle:diagnosisTitle,diagnosisType:diagnosisType,diagnosisDescription:diagnosisDescription,diagnosisAttachmentName:diagnosisAttachmentName,diagnosisAttachmentFormat:diagnosisAttachmentFormat,diagnosisAttachmentPath:diagnosisAttachmentPath};console.log(\"\\n    adding patient diagnosis...\\n    userId: \".concat(userId,\",\\n    patientId: \").concat(selectedPatientId,\",\\n    diagnosisDate: \").concat(diagnosisDate,\",\\n    diagnosisTitle: \").concat(diagnosisTitle,\",\\n    diagnosisType: \").concat(diagnosisType,\",\\n    diagnosisDescription: \").concat(diagnosisDescription,\",\\n    diagnosisAttachmentName: \").concat(diagnosisAttachmentName,\",\\n    diagnosisAttachmentFormat: \").concat(diagnosisAttachmentFormat,\",\\n    diagnosisAttachmentPath: \").concat(diagnosisAttachmentPath,\",\\n    \"));_this.setState({userAlert:\"adding patient diagnosis...\"});var requestBody={query:\"\\n        mutation {updatePatientDiagnosis(userId:\\\"\".concat(userId,\"\\\", patientId:\\\"\").concat(selectedPatientId,\"\\\",patientInput:{diagnosisDate:\\\"\").concat(diagnosisDate,\"\\\",diagnosisTitle:\\\"\").concat(diagnosisTitle,\"\\\",diagnosisType:\\\"\").concat(diagnosisType,\"\\\",diagnosisDescription:\\\"\").concat(diagnosisDescription,\"\\\",diagnosisAttachmentName:\\\"\").concat(diagnosisAttachmentName,\"\\\",diagnosisAttachmentFormat:\\\"\").concat(diagnosisAttachmentFormat,\"\\\",diagnosisAttachmentPath:\\\"\").concat(diagnosisAttachmentPath,\"\\\"})\\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n      \")};fetch('http://localhost:10000/graphql',{method:'POST',body:JSON.stringify(requestBody),headers:{'Content-Type':'application/json',Authorization:'Bearer '+token}}).then(function(res){if(res.status!==200&&res.status!==201){throw new Error('Failed!');}return res.json();}).then(function(resData){console.log(\"response data... \"+JSON.stringify(resData.data));var updatedPatientId=resData.data.updatePatientDiagnosis._id;var updatedPatient=_this.state.patients.find(function(e){return e._id===updatedPatientId;});var updatedPatientPos=_this.state.patients.indexOf(updatedPatient);var slicedArray=_this.state.patients.splice(updatedPatientPos,1);console.log(\"updatedPatient:  \",JSON.stringify(updatedPatient),\"  updatedPatientPos:  \",updatedPatientPos,\"  slicedArray:  \",slicedArray);_this.state.patients.push(resData.data.updatePatientDiagnosis);_this.context.patients=_this.state.patients;var responseAlert=JSON.stringify(resData.data).slice(2,25);_this.setState({userAlert:responseAlert,selectedPatient:resData.data.updatePatientDiagnosis});_this.fetchPatients();}).catch(function(err){console.log(err);_this.setState({userAlert:err});});};_this.updatePatientTreatmentHandler=function(event){var token=_this.context.token;var userId=_this.context.userId;var selectedPatientId=_this.context.selectedPatient._id;// if(this.context.user.role !== 'admin') {\n//   console.log(\"No edit permission!!\");\n//   return;\n// }\nconsole.log(\"UpdatePatientTreatmentFormData:  \",event.target.formGridTreatmentTitle.value);_this.setState({updating:false,patientUpdateField:null});var treatmentDate=event.target.formGridTreatmentDate.value;var treatmentTitle=event.target.formGridTreatmentTitle.value;var treatmentDescription=event.target.formGridTreatmentDescription.value;var treatmentDose=event.target.formGridTreatmentDose.value;var treatmentFrequency=event.target.formGridTreatmentFrequency.value;var treatmentType=undefined;if(event.target.formGridInvestigationTypeSelect===\"select\"){treatmentType=event.target.formGridTreatmentType.value;}else{treatmentType=event.target.formGridTreatmentTypeSelect.value;}// let treatmentAttachmentName = event.target.formGridTreatmentAttachmentName.value;\nvar treatmentAttachmentFormat=event.target.formGridTreatmentAttachmentFormat.value;var treatmentAttachmentPath=event.target.formGridTreatmentAttachmentPath.value;var file=AuthContext._currentValue.file;console.log(\"\\n    uploading to s3...\\n    file.name: \".concat(file.name,\",\\n    AuthContext._currentValue.file: \").concat(AuthContext._currentValue.file,\",\\n    \"));var config={bucketName:'ent-emr-bucket',dirName:treatmentAttachmentPath,region:'us-east-2',accessKeyId:\"AKIARFTS6Q6DALQKT4QR\",secretAccessKey:\"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\"};var ReactS3Client=new S3(config);var newFileName=file.name;var treatmentAttachmentName=newFileName;ReactS3Client.uploadFile(file,newFileName).then(function(data){console.log(data);_this.setState({userAlert:\"attachment upload success!\"});}).catch(function(err){console.error(err);_this.setState({userAlert:\"upload error:  \"+err});});var patientTreatment={treatmentDate:treatmentDate,treatmentTitle:treatmentTitle,treatmentDescription:treatmentDescription,treatmentDose:treatmentDose,treatmentFrequency:treatmentFrequency,treatmentType:treatmentType,treatmentAttachmentName:treatmentAttachmentName,treatmentAttachmentFormat:treatmentAttachmentFormat,treatmentAttachmentPath:treatmentAttachmentPath};console.log(\"\\n    adding patient treatment...\\n    userId: \".concat(userId,\",\\n    patientId: \").concat(selectedPatientId,\",\\n    treatmentDate: \").concat(treatmentDate,\",\\n    treatmentTitle: \").concat(treatmentTitle,\",\\n    treatmentDescription: \").concat(treatmentDescription,\",\\n    treatmentDose: \").concat(treatmentDose,\",\\n    treatmentFrequency: \").concat(treatmentFrequency,\",\\n    treatmentType: \").concat(treatmentType,\",\\n    treatmentAttachmentName: \").concat(treatmentAttachmentName,\",\\n    treatmentAttachmentFormat: \").concat(treatmentAttachmentFormat,\",\\n    treatmentAttachmentPath: \").concat(treatmentAttachmentPath,\",\\n    \"));_this.setState({userAlert:\"adding patient treatment...\"});var requestBody={query:\"\\n        mutation {updatePatientTreatment(userId:\\\"\".concat(userId,\"\\\",patientId:\\\"\").concat(selectedPatientId,\"\\\",patientInput:{treatmentDate:\\\"\").concat(treatmentDate,\"\\\",treatmentTitle:\\\"\").concat(treatmentTitle,\"\\\",treatmentType:\\\"\").concat(treatmentType,\"\\\",treatmentDescription:\\\"\").concat(treatmentDescription,\"\\\",treatmentDose:\\\"\").concat(treatmentDose,\"\\\",treatmentFrequency:\\\"\").concat(treatmentFrequency,\"\\\",treatmentAttachmentName:\\\"\").concat(treatmentAttachmentName,\"\\\",treatmentAttachmentFormat:\\\"\").concat(treatmentAttachmentFormat,\"\\\",treatmentAttachmentPath:\\\"\").concat(treatmentAttachmentPath,\"\\\"})\\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n      \")};fetch('http://localhost:10000/graphql',{method:'POST',body:JSON.stringify(requestBody),headers:{'Content-Type':'application/json',Authorization:'Bearer '+token}}).then(function(res){if(res.status!==200&&res.status!==201){throw new Error('Failed!');}return res.json();}).then(function(resData){console.log(\"response data... \"+JSON.stringify(resData.data));var updatedPatientId=resData.data.updatePatientTreatment._id;var updatedPatient=_this.state.patients.find(function(e){return e._id===updatedPatientId;});var updatedPatientPos=_this.state.patients.indexOf(updatedPatient);var slicedArray=_this.state.patients.splice(updatedPatientPos,1);console.log(\"updatedPatient:  \",JSON.stringify(updatedPatient),\"  updatedPatientPos:  \",updatedPatientPos,\"  slicedArray:  \",slicedArray);_this.state.patients.push(resData.data.updatePatientTreatment);_this.context.patients=_this.state.patients;var responseAlert=JSON.stringify(resData.data).slice(2,25);_this.setState({userAlert:responseAlert,selectedPatient:resData.data.updatePatientTreatment});_this.fetchPatients();}).catch(function(err){console.log(err);_this.setState({userAlert:err});});};_this.updatePatientBillingHandler=function(event){var token=_this.context.token;var userId=_this.context.userId;var selectedPatientId=_this.context.selectedPatient._id;// if(this.context.user.role !== 'admin') {\n//   console.log(\"No edit permission!!\");\n//   return;\n// }\nconsole.log(\"UpdatePatientBillingFormData:  \",event.target.formGridBillingTitle.value);_this.setState({updating:false,patientUpdateField:null});var billingDate=event.target.formGridBillingDate.value;var billingTitle=event.target.formGridBillingTitle.value;var billingType=event.target.formGridBillingType.value;var billingDescription=event.target.formGridBillingDescription.value;var billingAmount=event.target.formGridBillingAmount.value;var billingPaid=event.target.formGridBillingPaid.value;var billingNotes=event.target.formGridBillingNotes.value;// let billingAttachmentName = event.target.formGridBillingAttachmentName.value;\nvar billingAttachmentFormat=event.target.formGridBillingAttachmentFormat.value;var billingAttachmentPath=event.target.formGridBillingAttachmentPath.value;var file=AuthContext._currentValue.file;console.log(\"\\n    uploading to s3...\\n    file.name: \".concat(file.name,\",\\n    AuthContext._currentValue.file: \").concat(AuthContext._currentValue.file,\",\\n    \"));var config={bucketName:'ent-emr-bucket',dirName:billingAttachmentPath,region:'us-east-2',accessKeyId:\"AKIARFTS6Q6DALQKT4QR\",secretAccessKey:\"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\"};var ReactS3Client=new S3(config);var newFileName=file.name;var billingAttachmentName=newFileName;ReactS3Client.uploadFile(file,newFileName).then(function(data){console.log(data);_this.setState({userAlert:\"attachment upload success!\"});}).catch(function(err){console.error(err);_this.setState({userAlert:\"upload error:  \"+err});});var patientBilling={billingDate:billingDate,billingTitle:billingTitle,billingType:billingType,billingDescription:billingDescription,billingAmount:billingAmount,billingPaid:billingPaid,billingNotes:billingNotes,billingAttachmentName:billingAttachmentName,billingAttachmentFormat:billingAttachmentFormat,billingAttachmentPath:billingAttachmentPath};console.log(\"\\n    adding patient billing...\\n    userId: \".concat(userId,\",\\n    patientId: \").concat(selectedPatientId,\",\\n    billingDate: \").concat(billingDate,\",\\n    billingTitle: \").concat(billingTitle,\",\\n    billingType: \").concat(billingType,\",\\n    billingDescription: \").concat(billingDescription,\",\\n    billingAmount: \").concat(billingAmount,\",\\n    billingPaid: \").concat(billingPaid,\",\\n    billingNotes: \").concat(billingNotes,\",\\n    billingAttachmentName: \").concat(billingAttachmentName,\",\\n    billingAttachmentFormat: \").concat(billingAttachmentFormat,\",\\n    billingAttachmentPath: \").concat(billingAttachmentPath,\",\\n    \"));_this.setState({userAlert:\"adding patient billing...\"});var requestBody={query:\"\\n        mutation {updatePatientBilling(userId:\\\"\".concat(userId,\"\\\", patientId:\\\"\").concat(selectedPatientId,\"\\\",patientInput:{billingDate:\\\"\").concat(billingDate,\"\\\",billingTitle:\\\"\").concat(billingTitle,\"\\\",billingType:\\\"\").concat(billingType,\"\\\",billingDescription:\\\"\").concat(billingDescription,\"\\\",billingAmount:\").concat(billingAmount,\",billingPaid:\").concat(billingPaid,\",billingNotes:\\\"\").concat(billingNotes,\"\\\",billingAttachmentName:\\\"\").concat(billingAttachmentName,\"\\\",billingAttachmentFormat:\\\"\").concat(billingAttachmentFormat,\"\\\",billingAttachmentPath:\\\"\").concat(billingAttachmentPath,\"\\\"})\\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n      \")};fetch('http://localhost:10000/graphql',{method:'POST',body:JSON.stringify(requestBody),headers:{'Content-Type':'application/json',Authorization:'Bearer '+token}}).then(function(res){if(res.status!==200&&res.status!==201){throw new Error('Failed!');}return res.json();}).then(function(resData){console.log(\"response data... \"+JSON.stringify(resData.data));var updatedPatientId=resData.data.updatePatientBilling._id;var updatedPatient=_this.state.patients.find(function(e){return e._id===updatedPatientId;});var updatedPatientPos=_this.state.patients.indexOf(updatedPatient);var slicedArray=_this.state.patients.splice(updatedPatientPos,1);console.log(\"updatedPatient:  \",JSON.stringify(updatedPatient),\"  updatedPatientPos:  \",updatedPatientPos,\"  slicedArray:  \",slicedArray);_this.state.patients.push(resData.data.updatePatientBilling);_this.context.patients=_this.state.patients;var responseAlert=JSON.stringify(resData.data).slice(2,25);_this.setState({userAlert:responseAlert,selectedPatient:resData.data.updatePatientBilling});_this.fetchPatients();}).catch(function(err){console.log(err);_this.setState({userAlert:err});});};_this.updatePatientAttachmentHandler=function(event){var token=_this.context.token;var userId=_this.context.userId;var selectedPatientId=_this.context.selectedPatient._id;// if(this.context.user.role !== 'admin') {\n//   console.log(\"No edit permission!!\");\n//   return;\n// }\nconsole.log(\"\\n        UpdatePatientAttachmentFormData:\\n      \");_this.setState({updating:false,patientUpdateField:null});// let attachmentName = event.target.formGridPatientAttachmentName.value;\nvar attachmentFormat=event.target.formGridPatientAttachmentFormat.value;var attachmentPath=event.target.formGridPatientAttachmentPath.value;var file=AuthContext._currentValue.file;console.log(\"\\n      uploading to s3...\\n      file.name: \".concat(file.name,\",\\n      AuthContext._currentValue.file: \").concat(AuthContext._currentValue.file,\",\\n      \"));var config={bucketName:'ent-emr-bucket',dirName:attachmentPath,region:'us-east-2',accessKeyId:\"AKIARFTS6Q6DALQKT4QR\",secretAccessKey:\"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\"};var ReactS3Client=new S3(config);var newFileName=file.name;var attachmentName=newFileName;ReactS3Client.uploadFile(file,newFileName).then(function(data){console.log(data);_this.setState({userAlert:\"attachment upload success!\"});}).catch(function(err){console.error(err);_this.setState({userAlert:\"upload error:  \"+err});});if(attachmentName.trim().length===0||attachmentFormat.trim().length===0||attachmentPath.trim().length===0){console.log(\"blank fields detected!!!...Please try again...\");_this.setState({userAlert:\"blank fields detected!!!...Please try again...\"});return;}_this.setState({userAlert:\"adding patient attachment\"});var requestBody={query:\"\\n                    mutation {updatePatientAttachment(userId:\\\"\".concat(userId,\"\\\",patientId:\\\"\").concat(selectedPatientId,\"\\\",patientInput:{attachmentName:\\\"\").concat(attachmentName,\"\\\",attachmentFormat:\\\"\").concat(attachmentFormat,\"\\\",attachmentPath:\\\"\").concat(attachmentFormat,\"\\\"})\\n                    {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n            \")};fetch('http://localhost:10000/graphql',{method:'POST',body:JSON.stringify(requestBody),headers:{'Content-Type':'application/json',Authorization:'Bearer '+token}}).then(function(res){if(res.status!==200&&res.status!==201){throw new Error('Failed!');}return res.json();}).then(function(resData){console.log(\"response data... \"+JSON.stringify(resData.data));var updatedPatientId=resData.data.updatePatientAttachment._id;var updatedPatient=_this.state.patients.find(function(e){return e._id===updatedPatientId;});var updatedPatientPos=_this.state.patients.indexOf(updatedPatient);var slicedArray=_this.state.patients.splice(updatedPatientPos,1);console.log(\"updatedPatient:  \",JSON.stringify(updatedPatient),\"  updatedPatientPos:  \",updatedPatientPos,\"  slicedArray:  \",slicedArray);_this.state.patients.push(resData.data.updatePatientAttachment);_this.context.patients=_this.state.patients;var responseAlert=JSON.stringify(resData.data).slice(2,25);_this.setState({userAlert:responseAlert,selectedPatient:resData.data.updatePatientAttachment});_this.fetchPatients();}).catch(function(err){console.log(err);_this.setState({userAlert:err});});};_this.updatePatientNoteHandler=function(event){var token=_this.context.token;var userId=_this.context.userId;var selectedPatientId=_this.context.selectedPatient._id;// if(this.context.user.role !== 'admin') {\n//   console.log(\"No edit permission!!\");\n//   return;\n// }\nconsole.log(\"\\n      UpdatePatientNoteFormData:\\n      \".concat(event.target.formGridNote.value,\"\\n    \"));_this.setState({updating:false,patientUpdateField:null});var note=event.target.formGridNote.value;if(note.trim().length===0){console.log(\"Can't Submit a blank form!!!...Please try again...\");_this.setState({userAlert:\"Can't Submit a blank form!!!...Please try again...\"});return;}_this.setState({userAlert:\"adding patient note\"});var requestBody={query:\"\\n              mutation {updatePatientNotes(userId:\\\"\".concat(userId,\"\\\",patientId:\\\"\").concat(selectedPatientId,\"\\\",patientInput:{notes:\\\"\").concat(note,\"\\\"})\\n              {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n            \")};fetch('http://localhost:10000/graphql',{method:'POST',body:JSON.stringify(requestBody),headers:{'Content-Type':'application/json',Authorization:'Bearer '+token}}).then(function(res){if(res.status!==200&&res.status!==201){throw new Error('Failed!');}return res.json();}).then(function(resData){console.log(\"response data... \"+JSON.stringify(resData.data));var updatedPatientId=resData.data.updatePatientNotes._id;var updatedPatient=_this.state.patients.find(function(e){return e._id===updatedPatientId;});var updatedPatientPos=_this.state.patients.indexOf(updatedPatient);var slicedArray=_this.state.patients.splice(updatedPatientPos,1);console.log(\"updatedPatient:  \",JSON.stringify(updatedPatient),\"  updatedPatientPos:  \",updatedPatientPos,\"  slicedArray:  \",slicedArray);_this.state.patients.push(resData.data.updatePatientNotes);_this.context.patients=_this.state.patients;var responseAlert=JSON.stringify(resData.data).slice(2,25);_this.setState({userAlert:responseAlert,selectedPatient:resData.data.updatePatientNotes});_this.fetchPatients();}).catch(function(err){console.log(err);_this.setState({userAlert:err});});};_this.updatePatientTagHandler=function(event){var token=_this.context.token;var userId=_this.context.userId;var selectedPatientId=_this.context.selectedPatient._id;// if(this.context.user.role !== 'admin') {\n//   console.log(\"No edit permission!!\");\n//   return;\n// }\nconsole.log(\"\\n      UpdatePatientTagFormData:\\n      \".concat(event.target.formGridTag.value,\"\\n    \"));_this.setState({updating:false,patientUpdateField:null});var tag=event.target.formGridTag.value;if(tag.trim().length===0){console.log(\"Can't Submit a blank form!!!...Please try again...\");_this.setState({userAlert:\"Can't Submit a blank form!!!...Please try again...\"});return;}var requestBody={query:\"\\n                    mutation {updatePatientTags(userId:\\\"\".concat(userId,\"\\\",patientId:\\\"\").concat(selectedPatientId,\"\\\",patientInput:{tag:\\\"\").concat(tag,\"\\\"})\\n                    {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n            \")};_this.setState({userAlert:\"adding patient tag\"});fetch('http://localhost:10000/graphql',{method:'POST',body:JSON.stringify(requestBody),headers:{'Content-Type':'application/json',Authorization:'Bearer '+token}}).then(function(res){if(res.status!==200&&res.status!==201){throw new Error('Failed!');}return res.json();}).then(function(resData){console.log(\"response data... \"+JSON.stringify(resData.data));var updatedPatientId=resData.data.updatePatientTags._id;var updatedPatient=_this.state.patients.find(function(e){return e._id===updatedPatientId;});var updatedPatientPos=_this.state.patients.indexOf(updatedPatient);var slicedArray=_this.state.patients.splice(updatedPatientPos,1);console.log(\"updatedPatient:  \",JSON.stringify(updatedPatient),\"  updatedPatientPos:  \",updatedPatientPos,\"  slicedArray:  \",slicedArray);_this.state.patients.push(resData.data.updatePatientTags);_this.context.patients=_this.state.patients;var responseAlert=JSON.stringify(resData.data).slice(2,25);_this.setState({userAlert:responseAlert,selectedPatient:resData.data.updatePatientTags});_this.fetchPatients();}).catch(function(err){console.log(err);_this.setState({userAlert:err});});};_this.modalConfirmSearchHandler=function(event){console.log(\"SearchPatientForm:  \");var userId=_this.context.userId;console.log(\"SearchPatientFormData:  \",event.target.formBasicField.value);_this.setState({searching:false});var field=null;var query=event.target.formBasicQuery.value;if(event.target.formBasicFieldSelect.value===\"select\"){field=event.target.formBasicField.value;}else{field=event.target.formBasicFieldSelect.value;}_this.setState({patientSearchField:field,patientSearchQuery:query});if(field.trim().length===0||query.trim().length===0){console.log(\"blank fields detected!!!...Please try again...\");return;}var search={field:field,query:query};console.log(\"Searching for Patient:  \",JSON.stringify(search));_this.setState({userAlert:\"Searching for Patient:  \"});var requestBody={query:\"\\n        query {\\n          getPatientField(userId: \\\"\".concat(userId,\"\\\", field: \\\"\").concat(field,\"\\\", query: \\\"\").concat(query,\"\\\" )\\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n      \")};var token=_this.context.token;fetch('http://localhost:10000/graphql',{method:'POST',body:JSON.stringify(requestBody),headers:{'Content-Type':'application/json',Authorization:'Bearer '+token}}).then(function(res){if(res.status!==200&&res.status!==201){throw new Error('Failed!');}return res.json();}).then(function(resData){console.log(\"response data... \"+JSON.stringify(resData));var responseAlert=JSON.stringify(resData.data).slice(2,15);_this.setState({userAlert:responseAlert});var searchPatients=resData.data.getPatientField;_this.setState({searchPatients:searchPatients});console.log(\"state.searchPatients:  \",_this.state.searchPatients);// this.fetchPatients();\n}).catch(function(err){console.log(err);_this.setState({userAlert:err});});};_this.modalConfirmSearchIdHandler=function(event){console.log(\"SearchPatientIdFormData\");var userId=_this.context.userId;_this.setState({searching:false});var patientId=event.target.formBasicId.value;var requestBody={query:\"\\n      query {getPatientId(userId:\\\"\".concat(userId,\"\\\",patientId:\\\"\").concat(patientId,\"\\\")\\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{_id,title,time,location},consultant{date,reference{_id,name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n    \")};var token=_this.context.token;fetch('http://localhost:10000/graphql',{method:'POST',body:JSON.stringify(requestBody),headers:{'Content-Type':'application/json',Authorization:'Bearer '+token}}).then(function(res){if(res.status!==200&&res.status!==201){throw new Error('Failed!');}return res.json();}).then(function(resData){console.log(\"response data... \"+JSON.stringify(resData));var responseAlert=JSON.stringify(resData.data).slice(2,25);_this.setState({userAlert:responseAlert});var searchPatients=resData.data.getPatientId;_this.setState({searchPatients:[searchPatients]});console.log(\"state.searchPatients:  \",_this.state.searchPatients);// this.fetchUsers();\n}).catch(function(err){console.log(err);_this.setState({userAlert:err});});};_this.modalConfirmSearchVisitHandler=function(event){console.log(\"SearchPatientVisitFormData\");var userId=_this.context.userId;_this.setState({searching:false});var requestBody={query:\"\\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{_id,title,time,location,date},consultant{date,reference{_id,name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n    \"};var token=_this.context.token;fetch('http://localhost:10000/graphql',{method:'POST',body:JSON.stringify(requestBody),headers:{'Content-Type':'application/json',Authorization:'Bearer '+token}}).then(function(res){if(res.status!==200&&res.status!==201){throw new Error('Failed!');}return res.json();}).then(function(resData){console.log(\"response data... \"+JSON.stringify(resData));var searchPatients=resData.data.getPatientId;_this.setState({searchPatients:searchPatients});console.log(\"state.searchPatients:  \",_this.state.searchPatients);// this.fetchUsers();\n}).catch(function(err){console.log(err);_this.setState({userAlert:err});});};_this.modalConfirmSearchNameHandler=function(event){console.log(\"SearchPatientNameFormData:\",event.target.formBasicName.value);var userId=_this.context.userId;_this.setState({searching:false});var patients=_this.state.patients;var regex=new RegExp(event.target.formBasicName.value,\"i\");console.log(\"\\n    regex: \".concat(regex,\",\\n    \"));var result=patients.filter(function(patient){return patient.name.match(regex);});console.log(\"\\n      result: \".concat(JSON.stringify(result),\"\\n      \"));_this.setState({searchPatients:result});};_this.getPatientVisit=function(event){var selectedPatient=_this.state.selectedPatient;event.preventDefault();console.log(\"\\n        getUserVisit function:\\n        selectedPatient.consultant: \".concat(JSON.stringify(selectedPatient.consultant),\",\\n        selectedPatient.complaints: \").concat(JSON.stringify(selectedPatient.complaints),\",\\n        visitDate: \").concat(new Date(event.target.formBasicVisitDate.value),\",\\n        complaintDate: \").concat(new Date(1580515200*1000),\",\\n      \"));var visitDate=new Date(event.target.formBasicVisitDate.value).toISOString().substring(0,10);var visitSurveys=selectedPatient.surveys.filter(function(x){return new Date(x.date.substr(0,10)*1000).toISOString().substring(0,10)===visitDate;});var visitConsultants=selectedPatient.consultant.filter(function(x){return new Date(x.date.substr(0,10)*1000).toISOString().substring(0,10)===visitDate;});var visitComplaints=selectedPatient.complaints.filter(function(x){return new Date(x.date.substr(0,10)*1000).toISOString().substring(0,10)===visitDate;});// let visitSurveys = selectedPatient.surveys.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString() === visitDate);\nvar visitVitals=selectedPatient.vitals.filter(function(x){return new Date(x.date.substr(0,10)*1000).toISOString().substring(0,10)===visitDate;});var visitExaminations=selectedPatient.examination.filter(function(x){return new Date(x.date.substr(0,10)*1000).toISOString().substring(0,10)===visitDate;});var visitHistory=selectedPatient.history.filter(function(x){return new Date(x.date.substr(0,10)*1000).toISOString().substring(0,10)===visitDate;});var visitInvestigations=selectedPatient.investigation.filter(function(x){return new Date(x.date.substr(0,10)*1000).toISOString().substring(0,10)===visitDate;});var visitDiagnosis=selectedPatient.diagnosis.filter(function(x){return new Date(x.date.substr(0,10)*1000).toISOString().substring(0,10)===visitDate;});var visitTreatments=selectedPatient.treatment.filter(function(x){return new Date(x.date.substr(0,10)*1000).toISOString().substring(0,10)===visitDate;});var visitBilling=selectedPatient.billing.filter(function(x){return new Date(x.date.substr(0,10)*1000).toISOString().substring(0,10)===visitDate;});var visit={date:visitDate,patientName:_this.context.selectedPatient.name,consultant:visitConsultants,complaint:visitComplaints,examination:visitExaminations,survey:visitSurveys,vitals:visitVitals,history:visitHistory,investigation:visitInvestigations,diagnosis:visitDiagnosis,treatment:visitTreatments,billing:visitBilling};console.log(\"\\n        visit: \".concat(JSON.stringify(visit),\",\\n        \"));_this.context.visit=visit;_this.setState({visit:visit});};_this.modalCancelHandler=function(){_this.setState({creating:false,updating:false,searching:false,selectedPatient:null});};_this.fetchPatientsAsc=function(){console.log(\"fetch patients function:  \");var userId=_this.context.userId;var token=_this.context.token;// this.setState({ isLoading: true });\nvar requestBody={query:\"\\n          query {patientsNameAsc(userId:\\\"\".concat(userId,\"\\\")\\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{_id,title,time,location,date},consultant{date,reference{_id,name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n        \")};fetch('http://localhost:10000/graphql',{method:'POST',body:JSON.stringify(requestBody),headers:{'Content-Type':'application/json',Authorization:'Bearer '+token}}).then(function(res){if(res.status!==200&&res.status!==201){throw new Error('Failed!');}return res.json();}).then(function(resData){console.log(\"resData\",resData);var patients=resData.data.patientsNameAsc;console.log(patients);var responseAlert=JSON.stringify(resData.data).slice(2,25);_this.setState({userAlert:responseAlert});_this.context.patients=patients;_this.setState({patients:patients});// if (this.isActive) {\n//   this.setState({ patients: patients, isLoading: false });\n// }\n}).catch(function(err){console.log(err);_this.setState({userAlert:err});// if (this.isActive) {\n//   this.setState({ isLoading: false });\n// }\n});};_this.fetchPatientsDesc=function(){console.log(\"fetch patients function:  \");var userId=_this.context.userId;var token=_this.context.token;// this.setState({ isLoading: true });\nvar requestBody={query:\"\\n          query {patientsNameDesc(userId:\\\"\".concat(userId,\"\\\")\\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{_id,title,time,location,date},consultant{date,reference{_id,name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n        \")};fetch('http://localhost:10000/graphql',{method:'POST',body:JSON.stringify(requestBody),headers:{'Content-Type':'application/json',Authorization:'Bearer '+token}}).then(function(res){if(res.status!==200&&res.status!==201){throw new Error('Failed!');}return res.json();}).then(function(resData){console.log(\"resData\",resData);var patients=resData.data.patientsNameDesc;console.log(patients);var responseAlert=JSON.stringify(resData.data).slice(2,25);_this.setState({userAlert:responseAlert});_this.context.patients=patients;// if (this.isActive) {\n//   this.setState({ patients: patients, isLoading: false });\n// }\n_this.setState({patients:patients});}).catch(function(err){console.log(err);_this.setState({userAlert:err});// if (this.isActive) {\n//   this.setState({ isLoading: false });\n// }\n});};_this.modalDeleteHandler=function(){console.log(\"deleting patient...selectedPatient:  \",_this.context.selectedPatient);var selectedPatientId=_this.context.selectedPatient._id;var userId=_this.context.selectedUser._id;if(_this.context.user.role!=='admin'){console.log(\"Not the Admin! No edit permission!!\");}_this.setState({deleting:true});var requestBody={query:\"\\n          mutation {deletePatient(userId:\\\"\".concat(userId,\"\\\",patientId:\\\"\").concat(selectedPatientId,\"\\\")\\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n        \")};fetch('http://localhost:10000/graphql',{method:'POST',body:JSON.stringify(requestBody),headers:{'Content-Type':'application/json',Authorization:'Bearer '+_this.context.token}}).then(function(res){if(res.status!==200&&res.status!==201){throw new Error('Failed!');}return res.json();}).then(function(resData){var deletedPatient=resData.data.deletePatient;console.log(deletedPatient);var responseAlert=JSON.stringify(resData.data).slice(2,25);_this.setState({userAlert:responseAlert});var deletedPatientId=deletedPatient._id;deletedPatient=_this.state.patients.find(function(e){return e._id===deletedPatientId;});var deletedPatientPos=_this.state.patients.indexOf(deletedPatient);var slicedArray=_this.state.patients.splice(deletedPatientPos,1);console.log(\"deletedPatient:  \",JSON.stringify(deletedPatient),\"  deletedUserPos:  \",deletedPatientPos,\"  slicedArray:  \",slicedArray);_this.setState({deleting:false});_this.fetchPatients();}).catch(function(err){console.log(err);_this.setState({userAlert:err});if(_this.isActive){_this.setState({deleting:false});}});};_this.deletePatientInsuranceItem=function(props){var token=_this.context.token;var userId=_this.context.userId;var patientId=_this.state.selectedPatient._id;console.log(\"\\n      delete patient insurance item:\\n      props: \".concat(JSON.stringify(props),\",\\n      token: \").concat(token,\",\\n      userId: \").concat(userId,\",\\n      patientId: \").concat(patientId,\",\\n      \"));var requestBody={query:\"\\n         mutation {deletePatientInsurance (userId:\\\"\".concat(userId,\"\\\", patientId:\\\"\").concat(patientId,\"\\\",insuranceCompany:\\\"\").concat(props.company,\"\\\",insuranceNumber:\\\"\").concat(props.number,\"\\\")\\n         {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n      \")};fetch('http://localhost:10000/graphql',{method:'POST',body:JSON.stringify(requestBody),headers:{'Content-Type':'application/json',Authorization:'Bearer '+token}}).then(function(res){if(res.status!==200&&res.status!==201){throw new Error('Failed!');}return res.json();}).then(function(resData){var deletedPatient=resData.data.deletePatientInsurance;console.log(deletedPatient);var updatedPatientId=resData.data.deletePatientInsurance._id;var updatedPatient=_this.state.patients.find(function(e){return e._id===updatedPatientId;});var updatedPatientPos=_this.state.patients.indexOf(updatedPatient);var slicedArray=_this.state.patients.splice(updatedPatientPos,1);console.log(\"updatedPatient:  \",JSON.stringify(updatedPatient),\"  updatedPatientPos:  \",updatedPatientPos,\"  slicedArray:  \",slicedArray);_this.state.patients.push(resData.data.deletePatientInsurance);_this.context.patients=_this.state.patients;var responseAlert=JSON.stringify(resData.data).slice(2,25);_this.setState({userAlert:responseAlert});// this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientInsurance})\n_this.fetchPatients();}).catch(function(err){console.log(err);});};_this.deletePatientConsultantItem=function(props){var token=_this.context.token;var userId=_this.context.userId;var patientId=_this.state.selectedPatient._id;var date=new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);console.log(\"\\n      delete patient consultant item:\\n      props: \".concat(JSON.stringify(props),\",\\n      token: \").concat(token,\",\\n      userId: \").concat(userId,\",\\n      patientId: \").concat(patientId,\",\\n      consultant date: \").concat(date,\",\\n      \"));var requestBody={query:\"\\n         mutation {deletePatientConsultant (userId:\\\"\".concat(userId,\"\\\", patientId:\\\"\").concat(patientId,\"\\\",consultantId:\\\"\").concat(props.reference.id,\"\\\",consultantDate:\\\"\").concat(date,\"\\\")\\n         {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n      \")};fetch('http://localhost:10000/graphql',{method:'POST',body:JSON.stringify(requestBody),headers:{'Content-Type':'application/json',Authorization:'Bearer '+token}}).then(function(res){if(res.status!==200&&res.status!==201){throw new Error('Failed!');}return res.json();}).then(function(resData){var deletedPatient=resData.data.deletePatientConsultant;console.log(deletedPatient);var updatedPatientId=resData.data.deletePatientConsultant._id;var updatedPatient=_this.state.patients.find(function(e){return e._id===updatedPatientId;});var updatedPatientPos=_this.state.patients.indexOf(updatedPatient);var slicedArray=_this.state.patients.splice(updatedPatientPos,1);console.log(\"updatedPatient:  \",JSON.stringify(updatedPatient),\"  updatedPatientPos:  \",updatedPatientPos,\"  slicedArray:  \",slicedArray);_this.state.patients.push(resData.data.deletePatientConsultant);_this.context.patients=_this.state.patients;var responseAlert=JSON.stringify(resData.data).slice(2,25);_this.setState({userAlert:responseAlert});// this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientConsultant})\n_this.fetchPatients();}).catch(function(err){console.log(err);});};_this.deletePatientNextOfKinItem=function(props){var token=_this.context.token;var userId=_this.context.userId;var patientId=_this.state.selectedPatient._id;console.log(\"\\n    delete patient nextOfKin item:\\n    props: \".concat(JSON.stringify(props),\",\\n    token: \").concat(token,\",\\n    userId: \").concat(userId,\",\\n    patientId: \").concat(patientId,\",\\n    \"));var requestBody={query:\"\\n       mutation {deletePatientNextOfKin (userId:\\\"\".concat(userId,\"\\\", patientId:\\\"\").concat(patientId,\"\\\",nextOfKinName:\\\"\").concat(props.name,\"\\\")\\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n    \")};fetch('http://localhost:10000/graphql',{method:'POST',body:JSON.stringify(requestBody),headers:{'Content-Type':'application/json',Authorization:'Bearer '+token}}).then(function(res){if(res.status!==200&&res.status!==201){throw new Error('Failed!');}return res.json();}).then(function(resData){var deletedPatient=resData.data.deletePatientNextOfKin;console.log(deletedPatient);var updatedPatientId=resData.data.deletePatientNextOfKin._id;var updatedPatient=_this.state.patients.find(function(e){return e._id===updatedPatientId;});var updatedPatientPos=_this.state.patients.indexOf(updatedPatient);var slicedArray=_this.state.patients.splice(updatedPatientPos,1);console.log(\"updatedPatient:  \",JSON.stringify(updatedPatient),\"  updatedPatientPos:  \",updatedPatientPos,\"  slicedArray:  \",slicedArray);_this.state.patients.push(resData.data.deletePatientNextOfKin);_this.context.patients=_this.state.patients;var responseAlert=JSON.stringify(resData.data).slice(2,25);_this.setState({userAlert:responseAlert});// this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientNextOfKin})\n_this.fetchPatients();}).catch(function(err){console.log(err);});};_this.deletePatientComplaintItem=function(props){var token=_this.context.token;var userId=_this.context.userId;var patientId=_this.state.selectedPatient._id;var date=new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);console.log(\"\\n    delete patient Complaint item:\\n    props: \".concat(JSON.stringify(props),\",\\n    token: \").concat(token,\",\\n    userId: \").concat(userId,\",\\n    patientId: \").concat(patientId,\",\\n    complaint date: \").concat(date,\",\\n    \"));var requestBody={query:\"\\n       mutation {deletePatientComplaint (userId:\\\"\".concat(userId,\"\\\", patientId:\\\"\").concat(patientId,\"\\\",complaintTitle:\\\"\").concat(props.title,\"\\\",complaintDate:\\\"\").concat(date,\"\\\")\\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n    \")};fetch('http://localhost:10000/graphql',{method:'POST',body:JSON.stringify(requestBody),headers:{'Content-Type':'application/json',Authorization:'Bearer '+token}}).then(function(res){if(res.status!==200&&res.status!==201){throw new Error('Failed!');}return res.json();}).then(function(resData){var deletedPatient=resData.data.deletePatientComplaint;console.log(deletedPatient);var updatedPatientId=resData.data.deletePatientComplaint._id;var updatedPatient=_this.state.patients.find(function(e){return e._id===updatedPatientId;});var updatedPatientPos=_this.state.patients.indexOf(updatedPatient);var slicedArray=_this.state.patients.splice(updatedPatientPos,1);console.log(\"updatedPatient:  \",JSON.stringify(updatedPatient),\"  updatedPatientPos:  \",updatedPatientPos,\"  slicedArray:  \",slicedArray);_this.state.patients.push(resData.data.deletePatientComplaint);_this.context.patients=_this.state.patients;var responseAlert=JSON.stringify(resData.data).slice(2,25);_this.setState({userAlert:responseAlert});// this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientComplaint})\n_this.fetchPatients();}).catch(function(err){console.log(err);});};_this.deletePatientSurveyItem=function(props){var token=_this.context.token;var userId=_this.context.userId;var patientId=_this.state.selectedPatient._id;var date=new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);console.log(\"\\n    delete patient Survey item:\\n    props: \".concat(JSON.stringify(props),\",\\n    token: \").concat(token,\",\\n    userId: \").concat(userId,\",\\n    patientId: \").concat(patientId,\",\\n    survey date: \").concat(date,\"\\n    \"));var requestBody={query:\"\\n       mutation {deletePatientSurvey (userId:\\\"\".concat(userId,\"\\\", patientId:\\\"\").concat(patientId,\"\\\",surveyTitle:\\\"\").concat(props.title,\"\\\",surveyDate:\\\"\").concat(date,\"\\\")\\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n    \")};fetch('http://localhost:10000/graphql',{method:'POST',body:JSON.stringify(requestBody),headers:{'Content-Type':'application/json',Authorization:'Bearer '+token}}).then(function(res){if(res.status!==200&&res.status!==201){throw new Error('Failed!');}return res.json();}).then(function(resData){var deletedPatient=resData.data.deletePatientSurvey;console.log(deletedPatient);var updatedPatientId=resData.data.deletePatientSurvey._id;var updatedPatient=_this.state.patients.find(function(e){return e._id===updatedPatientId;});var updatedPatientPos=_this.state.patients.indexOf(updatedPatient);var slicedArray=_this.state.patients.splice(updatedPatientPos,1);console.log(\"updatedPatient:  \",JSON.stringify(updatedPatient),\"  updatedPatientPos:  \",updatedPatientPos,\"  slicedArray:  \",slicedArray);_this.state.patients.push(resData.data.deletePatientSurvey);_this.context.patients=_this.state.patients;var responseAlert=JSON.stringify(resData.data).slice(2,25);_this.setState({userAlert:responseAlert});// this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientSurvey})\n_this.fetchPatients();}).catch(function(err){console.log(err);});};_this.deletePatientVitalsItem=function(props){var token=_this.context.token;var userId=_this.context.userId;var patientId=_this.state.selectedPatient._id;var date=new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);console.log(\"\\n    delete patient Vitals item:\\n    props: \".concat(JSON.stringify(props),\",\\n    token: \").concat(token,\",\\n    userId: \").concat(userId,\",\\n    patientId: \").concat(patientId,\",\\n    vitals date: \").concat(date,\",\\n    \"));var requestBody={query:\"\\n       mutation {deletePatientVitals (userId:\\\"\".concat(userId,\"\\\", patientId:\\\"\").concat(patientId,\"\\\",vitalsDate:\\\"\").concat(date,\"\\\")\\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n    \")};fetch('http://localhost:10000/graphql',{method:'POST',body:JSON.stringify(requestBody),headers:{'Content-Type':'application/json',Authorization:'Bearer '+token}}).then(function(res){if(res.status!==200&&res.status!==201){throw new Error('Failed!');}return res.json();}).then(function(resData){var deletedPatient=resData.data.deletePatientVitals;console.log(deletedPatient);var updatedPatientId=resData.data.deletePatientVitals._id;var updatedPatient=_this.state.patients.find(function(e){return e._id===updatedPatientId;});var updatedPatientPos=_this.state.patients.indexOf(updatedPatient);var slicedArray=_this.state.patients.splice(updatedPatientPos,1);console.log(\"updatedPatient:  \",JSON.stringify(updatedPatient),\"  updatedPatientPos:  \",updatedPatientPos,\"  slicedArray:  \",slicedArray);_this.state.patients.push(resData.data.deletePatientVitals);_this.context.patients=_this.state.patients;var responseAlert=JSON.stringify(resData.data).slice(2,25);_this.setState({userAlert:responseAlert});// this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientVitals})\n_this.fetchPatients();}).catch(function(err){console.log(err);});};_this.deletePatientExaminationItem=function(props){var token=_this.context.token;var userId=_this.context.userId;var patientId=_this.state.selectedPatient._id;var date=new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);console.log(\"\\n    delete patient Examination item:\\n    props: \".concat(JSON.stringify(props),\",\\n    token: \").concat(token,\",\\n    userId: \").concat(userId,\",\\n    patientId: \").concat(patientId,\",\\n    examination date: \").concat(date,\",\\n    \"));var requestBody={query:\"\\n       mutation {deletePatientExamination (userId:\\\"\".concat(userId,\"\\\", patientId:\\\"\").concat(patientId,\"\\\",examinationType:\\\"\").concat(props.type,\"\\\",examinationDate:\\\"\").concat(date,\"\\\")\\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n    \")};fetch('http://localhost:10000/graphql',{method:'POST',body:JSON.stringify(requestBody),headers:{'Content-Type':'application/json',Authorization:'Bearer '+token}}).then(function(res){if(res.status!==200&&res.status!==201){throw new Error('Failed!');}return res.json();}).then(function(resData){var deletedPatient=resData.data.deletePatientExamination;console.log(deletedPatient);var updatedPatientId=resData.data.deletePatientExamination._id;var updatedPatient=_this.state.patients.find(function(e){return e._id===updatedPatientId;});var updatedPatientPos=_this.state.patients.indexOf(updatedPatient);var slicedArray=_this.state.patients.splice(updatedPatientPos,1);console.log(\"updatedPatient:  \",JSON.stringify(updatedPatient),\"  updatedPatientPos:  \",updatedPatientPos,\"  slicedArray:  \",slicedArray);_this.state.patients.push(resData.data.deletePatientExamination);_this.context.patients=_this.state.patients;var responseAlert=JSON.stringify(resData.data).slice(2,25);_this.setState({userAlert:responseAlert});// this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientExamination})\n_this.fetchPatients();}).catch(function(err){console.log(err);});};_this.deletePatientHistoryItem=function(props){var token=_this.context.token;var userId=_this.context.userId;var patientId=_this.state.selectedPatient._id;var date=new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);console.log(\"\\n    delete patient History item:\\n    props: \".concat(JSON.stringify(props),\",\\n    token: \").concat(token,\",\\n    userId: \").concat(userId,\",\\n    patientId: \").concat(patientId,\",\\n    history date: \").concat(date,\",\\n    \"));var requestBody={query:\"\\n       mutation {deletePatientHistory (userId:\\\"\".concat(userId,\"\\\", patientId:\\\"\").concat(patientId,\"\\\",historyTitle:\\\"\").concat(props.title,\"\\\",historyDate:\\\"\").concat(date,\"\\\")\\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n    \")};fetch('http://localhost:10000/graphql',{method:'POST',body:JSON.stringify(requestBody),headers:{'Content-Type':'application/json',Authorization:'Bearer '+token}}).then(function(res){if(res.status!==200&&res.status!==201){throw new Error('Failed!');}return res.json();}).then(function(resData){var deletedPatient=resData.data.deletePatientHistory;console.log(deletedPatient);var updatedPatientId=resData.data.deletePatientHistory._id;var updatedPatient=_this.state.patients.find(function(e){return e._id===updatedPatientId;});var updatedPatientPos=_this.state.patients.indexOf(updatedPatient);var slicedArray=_this.state.patients.splice(updatedPatientPos,1);console.log(\"updatedPatient:  \",JSON.stringify(updatedPatient),\"  updatedPatientPos:  \",updatedPatientPos,\"  slicedArray:  \",slicedArray);_this.state.patients.push(resData.data.deletePatientHistory);_this.context.patients=_this.state.patients;var responseAlert=JSON.stringify(resData.data).slice(2,25);_this.setState({userAlert:responseAlert});// this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientHistory})\n_this.fetchPatients();}).catch(function(err){console.log(err);});};_this.deletePatientAllergiesItem=function(props){var token=_this.context.token;var userId=_this.context.userId;var patientId=_this.state.selectedPatient._id;console.log(\"\\n    delete patient Allergies item:\\n    props: \".concat(JSON.stringify(props),\",\\n    token: \").concat(token,\",\\n    userId: \").concat(userId,\",\\n    patientId: \").concat(patientId,\",\\n    \"));var requestBody={query:\"\\n       mutation {deletePatientAllergies (userId:\\\"\".concat(userId,\"\\\", patientId:\\\"\").concat(patientId,\"\\\",allergiesTitle:\\\"\").concat(props.title,\"\\\",allergiesType:\\\"\").concat(props.type,\"\\\")\\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n    \")};fetch('http://localhost:10000/graphql',{method:'POST',body:JSON.stringify(requestBody),headers:{'Content-Type':'application/json',Authorization:'Bearer '+token}}).then(function(res){if(res.status!==200&&res.status!==201){throw new Error('Failed!');}return res.json();}).then(function(resData){var deletedPatient=resData.data.deletePatientAllergies;console.log(deletedPatient);var updatedPatientId=resData.data.deletePatientAllergies._id;var updatedPatient=_this.state.patients.find(function(e){return e._id===updatedPatientId;});var updatedPatientPos=_this.state.patients.indexOf(updatedPatient);var slicedArray=_this.state.patients.splice(updatedPatientPos,1);console.log(\"updatedPatient:  \",JSON.stringify(updatedPatient),\"  updatedPatientPos:  \",updatedPatientPos,\"  slicedArray:  \",slicedArray);_this.state.patients.push(resData.data.deletePatientAllergies);_this.context.patients=_this.state.patients;var responseAlert=JSON.stringify(resData.data).slice(2,25);_this.setState({userAlert:responseAlert});// this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientAllergies})\n_this.fetchPatients();}).catch(function(err){console.log(err);});};_this.deletePatientMedicationItem=function(props){var token=_this.context.token;var userId=_this.context.userId;var patientId=_this.state.selectedPatient._id;console.log(\"\\n    delete patient Medication item:\\n    props: \".concat(JSON.stringify(props),\",\\n    token: \").concat(token,\",\\n    userId: \").concat(userId,\",\\n    patientId: \").concat(patientId,\",\\n    \"));var requestBody={query:\"\\n       mutation {deletePatientMedication (userId:\\\"\".concat(userId,\"\\\", patientId:\\\"\").concat(patientId,\"\\\",medicationTitle:\\\"\").concat(props.title,\"\\\",medicationType:\\\"\").concat(props.type,\"\\\")\\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n    \")};fetch('http://localhost:10000/graphql',{method:'POST',body:JSON.stringify(requestBody),headers:{'Content-Type':'application/json',Authorization:'Bearer '+token}}).then(function(res){if(res.status!==200&&res.status!==201){throw new Error('Failed!');}return res.json();}).then(function(resData){var deletedPatient=resData.data.deletePatientMedication;console.log(deletedPatient);var updatedPatientId=resData.data.deletePatientMedication._id;var updatedPatient=_this.state.patients.find(function(e){return e._id===updatedPatientId;});var updatedPatientPos=_this.state.patients.indexOf(updatedPatient);var slicedArray=_this.state.patients.splice(updatedPatientPos,1);console.log(\"updatedPatient:  \",JSON.stringify(updatedPatient),\"  updatedPatientPos:  \",updatedPatientPos,\"  slicedArray:  \",slicedArray);_this.state.patients.push(resData.data.deletePatientMedication);_this.context.patients=_this.state.patients;var responseAlert=JSON.stringify(resData.data).slice(2,25);_this.setState({userAlert:responseAlert});// this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientMedication})\n_this.fetchPatients();}).catch(function(err){console.log(err);});};_this.deletePatientInvestigationItem=function(props){var token=_this.context.token;var userId=_this.context.userId;var patientId=_this.state.selectedPatient._id;var date=new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);console.log(\"\\n    delete patient Investigation item:\\n    props: \".concat(JSON.stringify(props),\",\\n    token: \").concat(token,\",\\n    userId: \").concat(userId,\",\\n    patientId: \").concat(patientId,\",\\n    investigation date: \").concat(date,\",\\n    \"));var requestBody={query:\"\\n       mutation {deletePatientInvestigation (userId:\\\"\".concat(userId,\"\\\", patientId:\\\"\").concat(patientId,\"\\\",investigationDate:\\\"\").concat(date,\"\\\",investigationTitle:\\\"\").concat(props.title,\"\\\")\\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n    \")};fetch('http://localhost:10000/graphql',{method:'POST',body:JSON.stringify(requestBody),headers:{'Content-Type':'application/json',Authorization:'Bearer '+token}}).then(function(res){if(res.status!==200&&res.status!==201){throw new Error('Failed!');}return res.json();}).then(function(resData){var deletedPatient=resData.data.deletePatientInvestigation;console.log(deletedPatient);var updatedPatientId=resData.data.deletePatientInvestigation._id;var updatedPatient=_this.state.patients.find(function(e){return e._id===updatedPatientId;});var updatedPatientPos=_this.state.patients.indexOf(updatedPatient);var slicedArray=_this.state.patients.splice(updatedPatientPos,1);console.log(\"updatedPatient:  \",JSON.stringify(updatedPatient),\"  updatedPatientPos:  \",updatedPatientPos,\"  slicedArray:  \",slicedArray);_this.state.patients.push(resData.data.deletePatientInvestigation);_this.context.patients=_this.state.patients;var responseAlert=JSON.stringify(resData.data).slice(2,25);_this.setState({userAlert:responseAlert});// this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientInvestigation})\n_this.fetchPatients();}).catch(function(err){console.log(err);});};_this.deletePatientDiagnosisItem=function(props){var token=_this.context.token;var userId=_this.context.userId;var patientId=_this.state.selectedPatient._id;var date=new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);console.log(\"\\n    delete patient Diagnosis item:\\n    props: \".concat(JSON.stringify(props),\",\\n    token: \").concat(token,\",\\n    userId: \").concat(userId,\",\\n    patientId: \").concat(patientId,\",\\n    diagnosis date: \").concat(date,\"\\n    \"));var requestBody={query:\"\\n       mutation {deletePatientDiagnosis (userId:\\\"\".concat(userId,\"\\\",patientId:\\\"\").concat(patientId,\"\\\",diagnosisDate:\\\"\").concat(date,\"\\\",diagnosisTitle:\\\"\").concat(props.title,\"\\\")\\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n    \")};fetch('http://localhost:10000/graphql',{method:'POST',body:JSON.stringify(requestBody),headers:{'Content-Type':'application/json',Authorization:'Bearer '+token}}).then(function(res){if(res.status!==200&&res.status!==201){throw new Error('Failed!');}return res.json();}).then(function(resData){var deletedPatient=resData.data.deletePatientDiagnosis;console.log(deletedPatient);var updatedPatientId=resData.data.deletePatientDiagnosis._id;var updatedPatient=_this.state.patients.find(function(e){return e._id===updatedPatientId;});var updatedPatientPos=_this.state.patients.indexOf(updatedPatient);var slicedArray=_this.state.patients.splice(updatedPatientPos,1);console.log(\"updatedPatient:  \",JSON.stringify(updatedPatient),\"  updatedPatientPos:  \",updatedPatientPos,\"  slicedArray:  \",slicedArray);_this.state.patients.push(resData.data.deletePatientDiagnosis);_this.context.patients=_this.state.patients;var responseAlert=JSON.stringify(resData.data).slice(2,25);_this.setState({userAlert:responseAlert});// this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientDiagnosis})\n_this.fetchPatients();}).catch(function(err){console.log(err);});};_this.deletePatientTreatmentItem=function(props){var token=_this.context.token;var userId=_this.context.userId;var patientId=_this.state.selectedPatient._id;var date=new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);console.log(\"\\n    delete patient Treatment item:\\n    props: \".concat(JSON.stringify(props),\",\\n    token: \").concat(token,\",\\n    userId: \").concat(userId,\",\\n    patientId: \").concat(patientId,\",\\n    treatment date: \").concat(date,\",\\n    \"));var requestBody={query:\"\\n       mutation {deletePatientTreatment (userId:\\\"\".concat(userId,\"\\\", patientId:\\\"\").concat(patientId,\"\\\",treatmentDate:\\\"\").concat(date,\"\\\",treatmentTitle:\\\"\").concat(props.title,\"\\\")\\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n    \")};fetch('http://localhost:10000/graphql',{method:'POST',body:JSON.stringify(requestBody),headers:{'Content-Type':'application/json',Authorization:'Bearer '+token}}).then(function(res){if(res.status!==200&&res.status!==201){throw new Error('Failed!');}return res.json();}).then(function(resData){var deletedPatient=resData.data.deletePatientTreatment;console.log(deletedPatient);var updatedPatientId=resData.data.deletePatientTreatment._id;var updatedPatient=_this.state.patients.find(function(e){return e._id===updatedPatientId;});var updatedPatientPos=_this.state.patients.indexOf(updatedPatient);var slicedArray=_this.state.patients.splice(updatedPatientPos,1);console.log(\"updatedPatient:  \",JSON.stringify(updatedPatient),\"  updatedPatientPos:  \",updatedPatientPos,\"  slicedArray:  \",slicedArray);_this.state.patients.push(resData.data.deletePatientTreatment);_this.context.patients=_this.state.patients;var responseAlert=JSON.stringify(resData.data).slice(2,25);_this.setState({userAlert:responseAlert});// this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientTreatment})\n_this.fetchPatients();}).catch(function(err){console.log(err);});};_this.deletePatientBillingItem=function(props){var token=_this.context.token;var userId=_this.context.userId;var patientId=_this.state.selectedPatient._id;var date=new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);console.log(\"\\n    delete patient Billing item:\\n    props: \".concat(JSON.stringify(props),\",\\n    token: \").concat(token,\",\\n    userId: \").concat(userId,\",\\n    patientId: \").concat(patientId,\",\\n    billing date: \").concat(date,\",\\n    \"));var requestBody={query:\"\\n       mutation {deletePatientBilling (userId:\\\"\".concat(userId,\"\\\", patientId:\\\"\").concat(patientId,\"\\\",billingDate:\\\"\").concat(date,\"\\\",billingTitle:\\\"\").concat(props.title,\"\\\")\\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n    \")};fetch('http://localhost:10000/graphql',{method:'POST',body:JSON.stringify(requestBody),headers:{'Content-Type':'application/json',Authorization:'Bearer '+token}}).then(function(res){if(res.status!==200&&res.status!==201){throw new Error('Failed!');}return res.json();}).then(function(resData){var deletedPatient=resData.data.deletePatientBilling;console.log(deletedPatient);var updatedPatientId=resData.data.deletePatientBilling._id;var updatedPatient=_this.state.patients.find(function(e){return e._id===updatedPatientId;});var updatedPatientPos=_this.state.patients.indexOf(updatedPatient);var slicedArray=_this.state.patients.splice(updatedPatientPos,1);console.log(\"updatedPatient:  \",JSON.stringify(updatedPatient),\"  updatedPatientPos:  \",updatedPatientPos,\"  slicedArray:  \",slicedArray);_this.state.patients.push(resData.data.deletePatientBilling);_this.context.patients=_this.state.patients;var responseAlert=JSON.stringify(resData.data).slice(2,25);_this.setState({userAlert:responseAlert});// this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientBilling})\n_this.fetchPatients();}).catch(function(err){console.log(err);});};_this.deletePatientAttachmentItem=function(props){var token=_this.context.token;var userId=_this.context.userId;var patientId=_this.state.selectedPatient._id;console.log(\"\\n    deleting from s3...\\n    file.name: \".concat(props.name,\",\\n    \"));var config={bucketName:'ent-emr-bucket',dirName:props.path,region:'us-east-2',accessKeyId:\"AKIARFTS6Q6DALQKT4QR\",secretAccessKey:\"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\"};var ReactS3Client=new S3(config);var filename=props.name;// const attachmentName = newFileName;\n//\nS3FileUpload.deleteFile(filename,config).then(function(response){return console.log(response);}).catch(function(err){return console.error(err);});console.log(\"\\n    delete patient Attachment item:\\n    props: \".concat(JSON.stringify(props),\",\\n    token: \").concat(token,\",\\n    userId: \").concat(userId,\",\\n    patientId: \").concat(patientId,\",\\n    \"));var requestBody={query:\"\\n       mutation {deletePatientAttachment (userId:\\\"\".concat(userId,\"\\\", patientId:\\\"\").concat(patientId,\"\\\",attachmentName:\\\"\").concat(props.name,\"\\\")\\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n    \")};fetch('http://localhost:10000/graphql',{method:'POST',body:JSON.stringify(requestBody),headers:{'Content-Type':'application/json',Authorization:'Bearer '+token}}).then(function(res){if(res.status!==200&&res.status!==201){throw new Error('Failed!');}return res.json();}).then(function(resData){var deletedPatient=resData.data.deletePatientAttachment;console.log(deletedPatient);var updatedPatientId=resData.data.deletePatientAttachment._id;var updatedPatient=_this.state.patients.find(function(e){return e._id===updatedPatientId;});var updatedPatientPos=_this.state.patients.indexOf(updatedPatient);var slicedArray=_this.state.patients.splice(updatedPatientPos,1);console.log(\"updatedPatient:  \",JSON.stringify(updatedPatient),\"  updatedPatientPos:  \",updatedPatientPos,\"  slicedArray:  \",slicedArray);_this.state.patients.push(resData.data.deletePatientAttachment);_this.context.patients=_this.state.patients;var responseAlert=JSON.stringify(resData.data).slice(2,25);_this.setState({userAlert:responseAlert});// this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientAttachment})\n_this.fetchPatients();}).catch(function(err){console.log(err);});};_this.deletePatientNoteItem=function(props){var token=_this.context.token;var userId=_this.context.userId;var patientId=_this.state.selectedPatient._id;console.log(\"\\n    delete patient Note item:\\n    props: \".concat(JSON.stringify(props),\",\\n    token: \").concat(token,\",\\n    userId: \").concat(userId,\",\\n    patientId: \").concat(patientId,\",\\n    \"));var requestBody={query:\"\\n\\n    \"};fetch('http://localhost:10000/graphql',{method:'POST',body:JSON.stringify(requestBody),headers:{'Content-Type':'application/json',Authorization:'Bearer '+token}}).then(function(res){if(res.status!==200&&res.status!==201){throw new Error('Failed!');}return res.json();}).then(function(resData){var deletedPatient=resData.data.deletePatientNextOfKin;console.log(deletedPatient);var updatedPatientId=resData.data.deletePatientNextOfKin._id;var updatedPatient=_this.state.patients.find(function(e){return e._id===updatedPatientId;});var updatedPatientPos=_this.state.patients.indexOf(updatedPatient);var slicedArray=_this.state.patients.splice(updatedPatientPos,1);console.log(\"updatedPatient:  \",JSON.stringify(updatedPatient),\"  updatedPatientPos:  \",updatedPatientPos,\"  slicedArray:  \",slicedArray);_this.state.patients.push(resData.data.deletePatientNextOfKin);_this.context.patients=_this.state.patients;var responseAlert=JSON.stringify(resData.data).slice(2,25);_this.setState({userAlert:responseAlert});// this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientNextOfKin})\n_this.fetchPatients();}).catch(function(err){console.log(err);});};_this.deletePatientTagItem=function(props){var token=_this.context.token;var userId=_this.context.userId;var patientId=_this.state.selectedPatient._id;console.log(\"\\n    delete patient Tag item:\\n    props: \".concat(JSON.stringify(props),\",\\n    token: \").concat(token,\",\\n    userId: \").concat(userId,\",\\n    patientId: \").concat(patientId,\",\\n    \"));var requestBody={query:\"\\n\\n    \"};fetch('http://localhost:10000/graphql',{method:'POST',body:JSON.stringify(requestBody),headers:{'Content-Type':'application/json',Authorization:'Bearer '+token}}).then(function(res){if(res.status!==200&&res.status!==201){throw new Error('Failed!');}return res.json();}).then(function(resData){var deletedPatient=resData.data.deletePatientNextOfKin;console.log(deletedPatient);var updatedPatientId=resData.data.deletePatientNextOfKin._id;var updatedPatient=_this.state.patients.find(function(e){return e._id===updatedPatientId;});var updatedPatientPos=_this.state.patients.indexOf(updatedPatient);var slicedArray=_this.state.patients.splice(updatedPatientPos,1);console.log(\"updatedPatient:  \",JSON.stringify(updatedPatient),\"  updatedPatientPos:  \",updatedPatientPos,\"  slicedArray:  \",slicedArray);_this.state.patients.push(resData.data.deletePatientNextOfKin);_this.context.patients=_this.state.patients;var responseAlert=JSON.stringify(resData.data).slice(2,25);_this.setState({userAlert:responseAlert});// this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientNextOfKin})\n_this.fetchPatients();}).catch(function(err){console.log(err);});};_this.onViewAttachment=function(attachment){console.log(\"\\n      setting up attachment viewer...\\n      attachment: \".concat(JSON.stringify(attachment),\"\\n      \"));_this.setState({showAttachment:true});var file=\"https://ent-emr-bucket.s3-us-east-2.amazonaws.com/\"+attachment.path+\"/\"+attachment.name;var type=attachment.format;_this.setState({showThisAttachmentFile:file,showThisAttachmentType:type});};_this.closeAttachmentView=function(){console.log(\"\\n      closing attachment viewer...\\n      \");_this.setState({showAttachment:false});};_this.createPdf=function(patient){console.log(\"\\n        creating pdf...\\n        user: \".concat(JSON.stringify(patient),\"\\n      \"));var pdfData={title:patient.name,body:patient.dob};_this.setState({createPdf:true,pdfData:pdfData});};_this.closePdfCreator=function(){console.log(\"\\n      closing pdf creator...\\n      \");_this.setState({createPdf:false,pdfData:null});};_this.showDetailHandler=function(patientId){_this.setState(function(prevState){var selectedPatient=prevState.patients.find(function(e){return e._id===patientId;});_this.context.selectedPatient=selectedPatient;_this.context.selectedPatientId=selectedPatient._id;console.log(\"selectedPatient:  \",selectedPatient);return{selectedPatient:selectedPatient};});};_this.nameElRef=React.createRef();return _this;}_createClass(PatientsPage,[{key:\"componentDidMount\",value:function componentDidMount(){this.fetchPatients();if(this.context.user.name==='admin579'){this.setState({canDelete:true});}}},{key:\"fetchPatients\",value:function fetchPatients(){var _this2=this;console.log(\"fetch patients function:  \");var userId=this.context.userId;var token=this.context.token;this.setState({isLoading:true});var requestBody={query:\"\\n          query {patients(userId:\\\"\".concat(userId,\"\\\")\\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{_id,title,time,location,date},consultant{date,reference{_id,name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n        \")};fetch('http://localhost:10000/graphql',{method:'POST',body:JSON.stringify(requestBody),headers:{'Content-Type':'application/json',Authorization:'Bearer '+token}}).then(function(res){if(res.status!==200&&res.status!==201){throw new Error('Failed!');}return res.json();}).then(function(resData){console.log(\"resData\",resData);var patients=resData.data.patients;console.log(patients);var responseAlert=JSON.stringify(resData.data).slice(2,25);_this2.setState({userAlert:responseAlert});_this2.context.patients=_this2.state.patients;if(_this2.isActive){_this2.setState({patients:patients,isLoading:false});}}).catch(function(err){console.log(err);_this2.setState({userAlert:err});if(_this2.isActive){_this2.setState({isLoading:false});}});}},{key:\"updatePatientSpecial\",value:function updatePatientSpecial(event){console.log(\"special field to update:  \",event.target.value);var field=event.target.value;this.setState({patientUpdateField:field});}},{key:\"componentWillUnmount\",value:function componentWillUnmount(){this.isActive=false;}},{key:\"render\",value:function render(){return React.createElement(React.Fragment,null,this.state.showAttachment===true&&React.createElement(AttachmentViewer,{onCloseAttachmentView:this.closeAttachmentView,attachmentFile:this.state.showThisAttachmentFile,attachmentType:this.state.showThisAttachmentType}),this.state.createPdf===true&&React.createElement(PdfCreator,{pdfData:this.state.pdfData,onClosePdfCreator:this.closePdfCreator}),React.createElement(Accordion,null,React.createElement(Row,null,React.createElement(Col,{md:3,className:\"MasterCol1\"},React.createElement(AlertBox,{authUserId:this.context.userId,alert:this.state.userAlert}),React.createElement(SidebarPage,null)),React.createElement(Col,{md:9,className:\"MasterCol2\"},React.createElement(Container,{className:\"containerCombinedDetail\"},React.createElement(Tabs,{defaultActiveKey:\"patientDetail\",id:\"uncontrolled-tab-example\"},React.createElement(Tab,{eventKey:\"patientDetail\",title:\"Selected Patient Data:\"},this.state.selectedPatient===null&&React.createElement(Button,{variant:\"outline-warning\",size:\"lg\",className:\"confirmEditButton\"},\"Select a Patient from the Master List\"),this.state.isLoading===false&&this.state.selectedPatient!==null&&React.createElement(PatientDetail,{authUserId:this.context.userId,token:this.context.token,patient:this.state.selectedPatient,onEdit:this.startUpdatePatientHandler,canDelete:this.state.canDelete,onDelete:this.modalDeleteHandler,onGetVisit:this.getPatientVisit,visit:this.context.visit,fetchUsers:this.fetchUsers,consultantDelete:this.deletePatientConsultantItem,insuranceDelete:this.deletePatientInsuranceItem,nextOfKinDelete:this.deletePatientNextOfKinItem,complaintDelete:this.deletePatientComplaintItem,surveyDelete:this.deletePatientSurveyItem,vitalsDelete:this.deletePatientVitalsItem,examinationDelete:this.deletePatientExaminationItem,historyDelete:this.deletePatientHistoryItem,allergiesDelete:this.deletePatientAllergiesItem,medicationDelete:this.deletePatientMedicationItem,investigationDelete:this.deletePatientInvestigationItem,diagnosisDelete:this.deletePatientDiagnosisItem,treatmentDelete:this.deletePatientTreatmentItem,billingDelete:this.deletePatientBillingItem,attachmentDelete:this.deletePatientAttachmentItem,noteDelete:this.deletePatientNoteItem,tagDelete:this.deletePatientTagItem,onViewAttachment:this.onViewAttachment,onCreatePdf:this.createPdf})),React.createElement(Tab,{eventKey:\"patientCreate\",title:\"Create New\"},React.createElement(Button,{variant:\"outline-primary\",size:\"lg\",className:\"confirmEditButton\",onClick:this.startCreatePatientHandler},\"Create NEW Patient Profile\"),this.state.creating&&React.createElement(CreatePatientForm,{canCancel:true,canConfirm:true,onCancel:this.modalCancelHandler,onConfirm:this.modalConfirmHandler,confirmText:\"Confirm\"})),React.createElement(Tab,{eventKey:\"patientEditDemographics\",title:\"Edit Demographics\"},this.state.selectedPatient===null&&React.createElement(Button,{variant:\"outline-warning\",size:\"lg\",className:\"confirmEditButton\"},\"Select a Patient from the Master List\"),this.state.selectedPatient!==null&&React.createElement(Button,{variant:\"outline-primary\",size:\"lg\",className:\"confirmEditButton\",onClick:this.startUpdatePatientHandler},\"Edit Demographics\"),this.state.updating&&this.state.selectedPatient!==null&&React.createElement(UpdatePatientForm,{authUserId:this.context.userId,canCancel:true,canConfirm:true,onCancel:this.modalCancelHandler,onConfirm:this.modalConfirmUpdateHandler,confirmText:\"Confirm\",patient:this.state.selectedPatient})),React.createElement(Tab,{eventKey:\"patientEditField\",title:\"Edit a Single Field\"},this.state.selectedPatient===null&&React.createElement(Button,{variant:\"outline-warning\",size:\"lg\",className:\"confirmEditButton\"},\"Select a Patient from the Master List\"),this.state.selectedPatient!==null&&React.createElement(Button,{variant:\"outline-primary\",size:\"lg\",className:\"confirmEditButton\",onClick:this.startUpdatePatientHandler},\"Edit a Single Field\"),this.state.updating&&this.state.selectedPatient!==null&&React.createElement(UpdatePatientFieldForm,{authUserId:this.context.userId,canCancel:true,canConfirm:true,onCancel:this.modalCancelHandler,onConfirm:this.modalConfirmUpdateFieldHandler,confirmText:\"Confirm\",patient:this.state.selectedPatient})),React.createElement(Tab,{eventKey:\"patientEditConsultant\",title:\"Add Consultant\"},this.state.selectedPatient===null&&React.createElement(Button,{variant:\"outline-warning\",size:\"lg\"},\"Select a Patient from the Master List below\"),this.state.selectedPatient!==null&&React.createElement(Button,{variant:\"outline-primary\",value:\"consultant\",size:\"lg\",className:\"confirmEditButton\",onClick:this.updatePatientSpecial.bind(this)},\"Add a Consultant\"),this.state.patientUpdateField==='consultant'&&this.state.selectedPatient!==null&&React.createElement(UpdatePatientConsultantForm,{authUserId:this.context.userId,canCancel:true,canConfirm:true,onCancel:this.modalCancelHandler,onConfirm:this.updatePatientConsultantHandler,confirmText:\"Confirm\",consultant:this.context.selectedUser}),this.state.patientUpdateField==='consultant'&&this.state.selectedPatient!==null&&React.createElement(Row,null,React.createElement(\"p\",null,\"Add Consultant: \",this.context.selectedUser.name),React.createElement(\"p\",null,\" To Paitient: \",this.state.selectedPatient.name,\" ??\"),React.createElement(\"hr\",null)),this.state.patientUpdateField==='consultant'&&this.state.selectedPatient!==null&&React.createElement(Row,null,React.createElement(Button,{variant:\"outline-warning\",size:\"lg\",className:\"confirmEditButton\"},\"Select someone from the Staff page\"))),React.createElement(Tab,{eventKey:\"patientEditInsurance\",title:\"Add Insurance\"},this.state.selectedPatient===null&&React.createElement(Button,{variant:\"outline-warning\",size:\"lg\",className:\"confirmEditButton\"},\"Select a Patient from the Master List\"),this.state.selectedPatient!==null&&React.createElement(Button,{variant:\"outline-primary\",value:\"insurance\",size:\"lg\",className:\"confirmEditButton\",onClick:this.updatePatientSpecial.bind(this)},\"Add Insurance\"),this.state.patientUpdateField==='insurance'&&this.state.selectedPatient!==null&&React.createElement(UpdatePatientInsuranceForm,{authUserId:this.context.userId,canCancel:true,canConfirm:true,onCancel:this.modalCancelHandler,onConfirm:this.updatePatientInsuranceHandler,confirmText:\"Confirm\",patient:this.state.selectedPatient})),React.createElement(Tab,{eventKey:\"patientEditNextOfKin\",title:\"Add NextOfKin\"},this.state.selectedPatient===null&&React.createElement(Button,{variant:\"outline-warning\",size:\"lg\"},\"Select a Patient from the Master List\"),this.state.selectedPatient!==null&&React.createElement(Button,{variant:\"outline-primary\",value:\"nextOfKin\",size:\"lg\",className:\"confirmEditButton\",onClick:this.updatePatientSpecial.bind(this)},\"Add NextOfKin\"),this.state.patientUpdateField==='nextOfKin'&&this.state.selectedPatient!==null&&React.createElement(UpdatePatientNextOfKinForm,{authUserId:this.context.userId,canCancel:true,canConfirm:true,onCancel:this.modalCancelHandler,onConfirm:this.updatePatientNextOfKinHandler,confirmText:\"Confirm\",patient:this.state.selectedPatient})),React.createElement(Tab,{eventKey:\"patientEditComplaint\",title:\"Add Complaint\"},this.state.selectedPatient===null&&React.createElement(Button,{variant:\"outline-warning\",size:\"lg\",className:\"confirmEditButton\"},\"Select a Patient from the Master List\"),this.state.selectedPatient!==null&&React.createElement(Button,{variant:\"outline-primary\",value:\"complaint\",size:\"lg\",className:\"confirmEditButton\",onClick:this.updatePatientSpecial.bind(this)},\"Add Complaint\"),this.state.patientUpdateField==='complaint'&&this.state.selectedPatient!==null&&React.createElement(UpdatePatientComplaintForm,{authUserId:this.context.userId,canCancel:true,canConfirm:true,onCancel:this.modalCancelHandler,onConfirm:this.updatePatientComplaintHandler,confirmText:\"Confirm\",patient:this.state.selectedPatient})),React.createElement(Tab,{eventKey:\"patientEditSurvey\",title:\"Add Survey\"},this.state.selectedPatient===null&&React.createElement(Button,{variant:\"outline-warning\",size:\"lg\",className:\"confirmEditButton\"},\"Select a Patient from the Master List\"),this.state.selectedPatient!==null&&React.createElement(Button,{variant:\"outline-primary\",value:\"survey\",size:\"lg\",className:\"confirmEditButton\",onClick:this.updatePatientSpecial.bind(this)},\"Add Survey\"),this.state.patientUpdateField==='survey'&&this.state.selectedPatient!==null&&React.createElement(UpdatePatientSurveyForm,{authUserId:this.context.userId,canCancel:true,canConfirm:true,onCancel:this.modalCancelHandler,onConfirm:this.updatePatientSurveyHandler,confirmText:\"Confirm\",patient:this.state.selectedPatient})),React.createElement(Tab,{eventKey:\"patientEditVitals\",title:\"Add Vitals\"},this.state.selectedPatient===null&&React.createElement(Button,{variant:\"outline-warning\",size:\"lg\"},\"Select a Patient from the Master List\"),this.state.selectedPatient!==null&&React.createElement(Button,{variant:\"outline-primary\",value:\"vitals\",size:\"lg\",className:\"confirmEditButton\",onClick:this.updatePatientSpecial.bind(this)},\"Add Vitals\"),this.state.patientUpdateField==='vitals'&&this.state.selectedPatient!==null&&React.createElement(UpdatePatientVitalsForm,{authUserId:this.context.userId,canCancel:true,canConfirm:true,onCancel:this.modalCancelHandler,onConfirm:this.updatePatientVitalsHandler,confirmText:\"Confirm\",patient:this.state.selectedPatient})),React.createElement(Tab,{eventKey:\"patientEditExamination\",title:\"Add Examination\"},this.state.selectedPatient===null&&React.createElement(Button,{variant:\"outline-warning\",size:\"lg\"},\"Select a Patient from the Master List\"),this.state.selectedPatient!==null&&React.createElement(Button,{variant:\"outline-primary\",value:\"examintion\",size:\"lg\",className:\"confirmEditButton\",onClick:this.updatePatientSpecial.bind(this)},\"Add Examination\"),this.state.patientUpdateField==='examintion'&&this.state.selectedPatient!==null&&React.createElement(UpdatePatientExaminationForm,{authUserId:this.context.userId,canCancel:true,canConfirm:true,onCancel:this.modalCancelHandler,onConfirm:this.updatePatientExaminationHandler,confirmText:\"Confirm\",patient:this.state.selectedPatient})),React.createElement(Tab,{eventKey:\"patientEditHistory\",title:\"Add History\"},this.state.selectedPatient===null&&React.createElement(Button,{variant:\"outline-warning\",size:\"lg\"},\"Select a Patient from the Master List\"),this.state.selectedPatient!==null&&React.createElement(Button,{variant:\"outline-primary\",value:\"history\",size:\"lg\",className:\"confirmEditButton\",onClick:this.updatePatientSpecial.bind(this)},\"Add History\"),this.state.patientUpdateField==='history'&&this.state.selectedPatient!==null&&React.createElement(UpdatePatientHistoryForm,{authUserId:this.context.userId,canCancel:true,canConfirm:true,onCancel:this.modalCancelHandler,onConfirm:this.updatePatientHistoryHandler,confirmText:\"Confirm\",patient:this.state.selectedPatient})),React.createElement(Tab,{eventKey:\"patientEditAllergies\",title:\"Add Allergies\"},this.state.selectedPatient===null&&React.createElement(Button,{variant:\"outline-warning\",size:\"lg\"},\"Select a Patient from the Master List\"),this.state.selectedPatient!==null&&React.createElement(Button,{variant:\"outline-primary\",value:\"allergies\",size:\"lg\",className:\"confirmEditButton\",onClick:this.updatePatientSpecial.bind(this)},\"Add Allergies\"),this.state.patientUpdateField==='allergies'&&this.state.selectedPatient!==null&&React.createElement(UpdatePatientAllergiesForm,{authUserId:this.context.userId,canCancel:true,canConfirm:true,onCancel:this.modalCancelHandler,onConfirm:this.updatePatientAllergiesHandler,confirmText:\"Confirm\",patient:this.state.selectedPatient})),React.createElement(Tab,{eventKey:\"patientEditMedication\",title:\"Add Medication\"},this.state.selectedPatient===null&&React.createElement(Button,{variant:\"outline-warning\",size:\"lg\"},\"Select a Patient from the Master List\"),this.state.selectedPatient!==null&&React.createElement(Button,{variant:\"outline-primary\",value:\"medication\",size:\"lg\",className:\"confirmEditButton\",onClick:this.updatePatientSpecial.bind(this)},\"Add Medication\"),this.state.patientUpdateField==='medication'&&this.state.selectedPatient!==null&&React.createElement(UpdatePatientMedicationForm,{authUserId:this.context.userId,canCancel:true,canConfirm:true,onCancel:this.modalCancelHandler,onConfirm:this.updatePatientMedicationHandler,confirmText:\"Confirm\",patient:this.state.selectedPatient})),React.createElement(Tab,{eventKey:\"patientEditInvestigation\",title:\"Add Investigation\"},this.state.selectedPatient===null&&React.createElement(Button,{variant:\"outline-warning\",size:\"lg\",className:\"confirmEditButton\"},\"Select a Patient from the Master List\"),this.state.selectedPatient!==null&&React.createElement(Button,{variant:\"outline-primary\",value:\"investigation\",size:\"lg\",className:\"confirmEditButton\",onClick:this.updatePatientSpecial.bind(this)},\"Add Investigation\"),this.state.patientUpdateField==='investigation'&&this.state.selectedPatient!==null&&React.createElement(UpdatePatientInvestigationForm,{authUserId:this.context.userId,canCancel:true,canConfirm:true,onCancel:this.modalCancelHandler,onConfirm:this.updatePatientInvestigationHandler,confirmText:\"Confirm\",patient:this.state.selectedPatient})),React.createElement(Tab,{eventKey:\"patientEditDiagnosis\",title:\"Add Diagnosis\"},this.state.selectedPatient===null&&React.createElement(Button,{variant:\"outline-warning\",size:\"lg\",className:\"confirmEditButton\"},\"Select a Patient from the Master List\"),this.state.selectedPatient!==null&&React.createElement(Button,{variant:\"outline-primary\",value:\"diagnosis\",size:\"lg\",className:\"confirmEditButton\",onClick:this.updatePatientSpecial.bind(this)},\"Add Diagnosis\"),this.state.patientUpdateField==='diagnosis'&&this.state.selectedPatient!==null&&React.createElement(UpdatePatientDiagnosisForm,{authUserId:this.context.userId,canCancel:true,canConfirm:true,onCancel:this.modalCancelHandler,onConfirm:this.updatePatientDiagnosisHandler,confirmText:\"Confirm\",patient:this.state.selectedPatient})),React.createElement(Tab,{eventKey:\"patientEditTreatment\",title:\"Add Treatment\"},this.state.selectedPatient===null&&React.createElement(Button,{variant:\"outline-warning\",size:\"lg\"},\"Select a Patient from the Master List\"),this.state.selectedPatient!==null&&React.createElement(Button,{variant:\"outline-primary\",value:\"treatment\",size:\"lg\",className:\"confirmEditButton\",onClick:this.updatePatientSpecial.bind(this)},\"Add Treatment\"),this.state.patientUpdateField==='treatment'&&this.state.selectedPatient!==null&&React.createElement(UpdatePatientTreatmentForm,{authUserId:this.context.userId,canCancel:true,canConfirm:true,onCancel:this.modalCancelHandler,onConfirm:this.updatePatientTreatmentHandler,confirmText:\"Confirm\",patient:this.state.selectedPatient})),React.createElement(Tab,{eventKey:\"patientEditBilling\",title:\"Add Billing\"},this.state.selectedPatient===null&&React.createElement(Button,{variant:\"outline-warning\",size:\"lg\"},\"Select a Patient from the Master List\"),this.state.selectedPatient!==null&&React.createElement(Button,{variant:\"outline-primary\",value:\"billing\",size:\"lg\",className:\"confirmEditButton\",onClick:this.updatePatientSpecial.bind(this)},\"Add Billing\"),this.state.patientUpdateField==='billing'&&this.state.selectedPatient!==null&&React.createElement(UpdatePatientBillingForm,{authUserId:this.context.userId,canCancel:true,canConfirm:true,onCancel:this.modalCancelHandler,onConfirm:this.updatePatientBillingHandler,confirmText:\"Confirm\",patient:this.state.selectedPatient})),React.createElement(Tab,{eventKey:\"patientEditAttachment\",title:\"Add Attachment\"},this.state.selectedPatient===null&&React.createElement(Button,{variant:\"outline-warning\",size:\"lg\",className:\"confirmEditButton\"},\"Select a Patient from the Master List\"),this.state.selectedPatient!==null&&React.createElement(Button,{variant:\"outline-primary\",value:\"attachment\",size:\"lg\",className:\"confirmEditButton\",onClick:this.updatePatientSpecial.bind(this)},\"Add Attachment\"),this.state.patientUpdateField==='attachment'&&this.state.selectedPatient!==null&&React.createElement(UpdatePatientAttachmentForm,{authUserId:this.context.userId,canCancel:true,canConfirm:true,onCancel:this.modalCancelHandler,onConfirm:this.updatePatientAttachmentHandler,confirmText:\"Confirm\",patient:this.state.selectedPatient})),React.createElement(Tab,{eventKey:\"patientEditNote\",title:\"Add Note\"},this.state.selectedPatient===null&&React.createElement(Button,{variant:\"outline-warning\",size:\"lg\",className:\"confirmEditButton\"},\"Select a Patient from the Master List\"),this.state.selectedPatient!==null&&React.createElement(Button,{variant:\"outline-primary\",value:\"notes\",size:\"lg\",className:\"confirmEditButton\",onClick:this.updatePatientSpecial.bind(this)},\"Add Note\"),this.state.patientUpdateField==='notes'&&this.state.selectedPatient!==null&&React.createElement(UpdatePatientNoteForm,{authUserId:this.context.userId,canCancel:true,canConfirm:true,onCancel:this.modalCancelHandler,onConfirm:this.updatePatientNoteHandler,confirmText:\"Confirm\",patient:this.state.selectedPatient})),React.createElement(Tab,{eventKey:\"patientEditTag\",title:\"Add Tag\"},this.state.selectedPatient===null&&React.createElement(Button,{variant:\"outline-warning\",size:\"lg\",className:\"confirmEditButton\"},\"Select a Patient from the Master List\"),this.state.selectedPatient!==null&&React.createElement(Button,{variant:\"outline-primary\",value:\"tags\",size:\"lg\",className:\"confirmEditButton\",onClick:this.updatePatientSpecial.bind(this)},\"Add Tag\"),this.state.patientUpdateField==='tags'&&this.state.selectedPatient!==null&&React.createElement(UpdatePatientTagForm,{authUserId:this.context.userId,canCancel:true,canConfirm:true,onCancel:this.modalCancelHandler,onConfirm:this.updatePatientTagHandler,confirmText:\"Confirm\",patient:this.state.selectedPatient})),React.createElement(Tab,{eventKey:\"MasterList\",title:\"MASTER LIST\"},React.createElement(Container,{className:\"containerUserMasterList\"},React.createElement(Row,{className:\"searchListRow\"},React.createElement(Button,{variant:\"primary\",size:\"sm\",onClick:this.fetchPatientsAsc},\"Sort Asc\"),React.createElement(Button,{variant:\"info\",size:\"sm\",onClick:this.fetchPatientsDesc},\"Sort Desc\"),this.state.isLoading?React.createElement(Spinner,null):React.createElement(PatientList,{patients:this.state.patients,authUserId:this.context.userId,onViewDetail:this.showDetailHandler})))),React.createElement(Tab,{eventKey:\"SearchInput\",title:\"Search\"},React.createElement(Container,{className:\"containerSearchUserInput\"},this.context.token&&React.createElement(Row,{className:\"searchUserRowAdd\"},React.createElement(Button,{variant:\"primary\",onClick:this.startSearchPatientHandler},\"Search\")),React.createElement(Row,{className:\"searchUserRowForm\"},React.createElement(Col,{md:10,className:\"searchUserColForm\"},React.createElement(Tabs,{defaultActiveKey:\"Field\",id:\"uncontrolled-tab-example\"},React.createElement(Tab,{eventKey:\"Search\",title:\"Search:\",disabled:true}),React.createElement(Tab,{eventKey:\"Field\",title:\"Search by Field:\"},this.state.searching!==true&&React.createElement(Button,{variant:\"outline-warning\",className:\"confirmEditButton\",size:\"lg\"},\"Click the 'Search' Button start\"),this.state.searching===true&&React.createElement(SearchPatientForm,{authUserId:this.context.userId,canCancel:true,canConfirm:true,onCancel:this.modalCancelHandler,onConfirm:this.modalConfirmSearchHandler,confirmText:\"Search\",patient:this.context.selectedPatient})),React.createElement(Tab,{eventKey:\"Id\",title:\"Search by Id:\"},this.state.searching!==true&&React.createElement(Button,{variant:\"outline-warning\",className:\"confirmEditButton\",size:\"lg\"},\"Click the 'Search' Button start\"),this.state.searching===true&&React.createElement(SearchPatientIdForm,{authUserId:this.context.userId,canCancel:true,canConfirm:true,onCancel:this.modalCancelHandler,onConfirm:this.modalConfirmSearchIdHandler,confirmText:\"Search\",patient:this.context.selectedPatient})),React.createElement(Tab,{eventKey:\"Name\",title:\"Search by Name:\"},this.state.searching!==true&&React.createElement(Button,{variant:\"outline-warning\",className:\"confirmEditButton\",size:\"lg\"},\"Click the 'Search' Button start\"),this.state.searching===true&&React.createElement(SearchPatientNameForm,{authUserId:this.context.userId,canCancel:true,canConfirm:true,onCancel:this.modalCancelHandler,onConfirm:this.modalConfirmSearchNameHandler,confirmText:\"Search\",patient:this.context.selectedPatient}))))))),React.createElement(Tab,{eventKey:\"SearchResult\",title:\"Search Results\"},React.createElement(Container,{className:\"containerSearchUserResults\"},React.createElement(Row,null,React.createElement(Card,{className:\"searchCard\"},React.createElement(Card.Body,{className:\"searchCardBody\"},React.createElement(Card.Title,null,\"Your Search\"),React.createElement(Card.Text,null,\"Field: \",this.state.patientSearchField),React.createElement(Card.Text,null,\"Query: \",this.state.patientSearchQuery)))),React.createElement(Row,{className:\"searchListRow\"},this.state.searchPatients!==[]&&React.createElement(SearchPatientList,{searchPatients:this.state.searchPatients,authUserId:this.context.userId,onCancel:this.modalCancelHandler,onViewDetail:this.showDetailHandler}))))))),React.createElement(Col,{md:3,className:\"MasterCol3\"}))));}}]);return PatientsPage;}(Component);PatientsPage.contextType=AuthContext;export default PatientsPage;","map":{"version":3,"sources":["/Users/pedrojacob/Downloads/AMR/websites/office_records/ENT_EMR/frontend/src/pages/Patients.js"],"names":["React","Component","S3","S3FileUpload","Container","Row","Col","Button","Accordion","SidebarPage","Tabs","Tab","Card","PatientList","PatientDetail","Spinner","AuthContext","SearchPatientList","SearchPatientForm","SearchPatientIdForm","SearchPatientNameForm","SearchPatientVisitForm","AlertBox","AttachmentViewer","PdfCreator","CreatePatientForm","UpdatePatientForm","UpdatePatientFieldForm","UpdatePatientConsultantForm","UpdatePatientInsuranceForm","UpdatePatientNextOfKinForm","UpdatePatientComplaintForm","UpdatePatientSurveyForm","UpdatePatientVitalsForm","UpdatePatientExaminationForm","UpdatePatientHistoryForm","UpdatePatientAllergiesForm","UpdatePatientMedicationForm","UpdatePatientInvestigationForm","UpdatePatientDiagnosisForm","UpdatePatientTreatmentForm","UpdatePatientBillingForm","UpdatePatientAttachmentForm","UpdatePatientNoteForm","UpdatePatientTagForm","PatientsPage","props","state","creating","updating","searching","updatingArray","deleting","patients","searchPatients","isLoading","selectedPatient","patientUpdateField","patientSearchField","patientSearchQuery","canDelete","visit","userAlert","showAttachment","showThisAttachmentFile","showThisAttachmentType","createPdf","pdfData","isActive","startCreatePatientHandler","setState","console","log","startUpdatePatientHandler","startSearchPatientHandler","modalConfirmHandler","event","target","formGridName","value","userId","context","title","formGridTitle","name","dob","formGridDob","age","formGridAge","gender","formGridGender","addressNumber","formGridAddressNumber","addressStreet","formGridAddressStreet","addressTown","formGridAddressTown","addressParish","formGridAddressParish","addressPostOffice","formGridAddressPostOffice","contactPhone","formGridContactPhone","contactEmail","formGridContactEmail","registrationDate","formGridRegistrationDate","referralDate","formGridReferralDate","expirationDate","formGridExpirationDate","attendingPhysicianName","formGridAttendingPhysicianName","attendingPhysicianEmail","formGridAttendingPhysicianEmail","attendingPhysicianPhone","formGridAttendingPhysicianPhone","referringDoctorName","formGridReferringDoctorName","referringDoctorEmail","formGridReferringDoctorEmail","referringDoctorPhone","formGridReferringDoctorPhone","occupationRole","formGridOccupationRole","occupationEmployer","formGridOccupationEmployer","occupationEmployerContactPhone","formGridOccupationEmployerContactPhone","occupationEmployerContactEmail","formGridOccupationEmployerContactEmail","trim","length","patient","requestBody","query","token","fetch","method","body","JSON","stringify","headers","Authorization","then","res","status","Error","json","resData","data","createPatient","responseAlert","slice","newPatient","prevState","updatedPatients","push","catch","err","modalCancelHandler","modalConfirmUpdateHandler","selectedPatientId","_id","address","number","street","town","parish","postOffice","contact","phone","email","attendingPhysician","referringDoctor","occupation","role","employer","updatedPatientId","updatePatient","updatedPatient","find","e","updatedPatientPos","indexOf","slicedArray","splice","fetchPatients","modalConfirmUpdateFieldHandler","formGridField","field","formGridQuery","formGridFieldSelect","updatePatientField","updatePatientConsultantHandler","patientConsultantReference","selectedUser","undefined","formGridConsultantDate","consultantDate","patientConsultant","updatePatientConsultant","updatePatientInsuranceHandler","formGridInsuranceCompany","insuranceCompany","insuranceNumber","formGridInsuranceNumber","insuranceExpiry","formGridInsuranceExpiry","insuranceDescription","formGridInsuranceDescription","insuranceSubscriberCompany","formGridInsuranceSubscriberCompany","insuranceSubscriberDescription","formGridInsuranceSubscriberDescription","patientInsurance","updatePatientInsurance","updatePatientNextOfKinHandler","formGridNextOfKinName","nextOfKinName","nextOfKinPhone","formGridNextOfKinPhone","nextOfKinEmail","formGridNextOfKinEmail","patientNextOfKin","updatePatientNextOfKin","updatePatientComplaintHandler","formGridComplaintTitle","complaintTitle","complaintDate","formGridComplaintDate","complaintDescription","formGridComplaintDescription","complaintAnamnesis","formGridComplaintAnamnesis","complaintAttachmentFormat","formGridComplaintAttachmentFormat","complaintAttachmentPath","formGridComplaintAttachmentPath","file","_currentValue","config","bucketName","dirName","region","accessKeyId","secretAccessKey","ReactS3Client","newFileName","complaintAttachmentName","uploadFile","error","patientComplaint","updatePatientComplaint","updatePatientSurveyHandler","formGridSurveyTitle","surveyDate","formGridSurveyDate","surveyTitle","surveyDescription","formGridSurveyDescription","surveyAttachmentFormat","formGridSurveyAttachmentFormat","surveyAttachmentPath","formGridSurveyAttachmentPath","surveyAttachmentName","patientSurvey","updatePatientSurvey","updatePatientVitalsHandler","formGridVitalsDate","vitalsDate","vitalsPr","formGridVitalsPr","vitalsBp1","formGridVitalsBp1","vitalsBp2","formGridVitalsBp2","vitalsRr","formGridVitalsRr","vitalsTemp","formGridVitalsTemp","vitalsPs02","formGridVitalsPs02","vitalsHeight","formGridVitalsHeight","vitalsWeight","formGridVitalsWeight","vitalsBmi","formGridVitalsBmi","vitalsUrineType","formGridVitalsUrineType","vitalsUrineValue","formGridVitalsUrineValue","patientVitals","updatePatientVitals","updatePatientExaminationHandler","formGridExaminationArea","examinationDate","formGridExaminationDate","examinationGeneral","formGridExaminationGeneral","examinationArea","formGridExaminationAreaSelect","examinationType","formGridExaminationType","examinationMeasure","formGridExaminationMeasure","examinationValue","formGridExaminationValue","examinationDescription","formGridExaminationDescription","examinationFollowUp","formGridExaminationFollowUp","examinationAttachmentFormat","formGridExaminationAttachmentFormat","examinationAttachmentPath","formGridExaminationAttachmentPath","examinationAttachmentName","patientExamination","updatePatientExamination","updatePatientHistoryHandler","formGridHistoryTitle","historyType","formGridHistoryType","historyDate","formGridHistoryDate","historyTitle","historyDescription","formGridHistoryDescription","historyAttachmentFormat","formGridHistoryAttachmentFormat","historyAttachmentPath","formGridHistoryAttachmentPath","historyAttachmentName","patientHistory","updatePatientHistory","updatePatientAllergiesHandler","formGridAllergiesTitle","allergiesTitle","allergiesType","formGridAllergiesTypeSelect","formGridAllergiesType","allergiesDescription","formGridAllergiesDescription","allergiesAttachmentFormat","formGridAllergiesAttachmentFormat","allergiesAttachmentPath","formGridAllergiesAttachmentPath","allergiesAttachmentName","patientAllergies","updatePatientAllergies","updatePatientMedicationHandler","formGridMedicationTitle","medicationTitle","medicationType","formGridMedicationType","medicationDescription","formGridMedicationDescription","medicationAttachmentFormat","formGridMedicationAttachmentFormat","medicationAttachmentPath","formGridMedicationAttachmentPath","medicationAttachmentName","patientMedication","updatePatientMedication","updatePatientInvestigationHandler","formGridInvestigationTitle","investigationDate","formGridInvestigationDate","investigationTitle","investigationType","formGridInvestigationTypeSelect","formGridInvestigationType","investigationDescription","formGridInvestigationDescription","investigationAttachmentFormat","formGridInvestigationAttachmentFormat","investigationAttachmentPath","formGridInvestigationAttachmentPath","investigationAttachmentName","patientInvestigation","updatePatientInvestigation","updatePatientDiagnosisHandler","formGridDiagnosisTitle","diagnosisDate","formGridDiagnosisDate","diagnosisTitle","diagnosisType","formGridDiagnosisType","diagnosisDescription","formGridDiagnosisDescription","diagnosisAttachmentFormat","formGridDiagnosisAttachmentFormat","diagnosisAttachmentPath","formGridDiagnosisAttachmentPath","diagnosisAttachmentName","patientDiagnosis","updatePatientDiagnosis","updatePatientTreatmentHandler","formGridTreatmentTitle","treatmentDate","formGridTreatmentDate","treatmentTitle","treatmentDescription","formGridTreatmentDescription","treatmentDose","formGridTreatmentDose","treatmentFrequency","formGridTreatmentFrequency","treatmentType","formGridTreatmentType","formGridTreatmentTypeSelect","treatmentAttachmentFormat","formGridTreatmentAttachmentFormat","treatmentAttachmentPath","formGridTreatmentAttachmentPath","treatmentAttachmentName","patientTreatment","updatePatientTreatment","updatePatientBillingHandler","formGridBillingTitle","billingDate","formGridBillingDate","billingTitle","billingType","formGridBillingType","billingDescription","formGridBillingDescription","billingAmount","formGridBillingAmount","billingPaid","formGridBillingPaid","billingNotes","formGridBillingNotes","billingAttachmentFormat","formGridBillingAttachmentFormat","billingAttachmentPath","formGridBillingAttachmentPath","billingAttachmentName","patientBilling","updatePatientBilling","updatePatientAttachmentHandler","attachmentFormat","formGridPatientAttachmentFormat","attachmentPath","formGridPatientAttachmentPath","attachmentName","updatePatientAttachment","updatePatientNoteHandler","formGridNote","note","updatePatientNotes","updatePatientTagHandler","formGridTag","tag","updatePatientTags","modalConfirmSearchHandler","formBasicField","formBasicQuery","formBasicFieldSelect","search","getPatientField","modalConfirmSearchIdHandler","patientId","formBasicId","getPatientId","modalConfirmSearchVisitHandler","modalConfirmSearchNameHandler","formBasicName","regex","RegExp","result","filter","match","getPatientVisit","preventDefault","consultant","complaints","Date","formBasicVisitDate","visitDate","toISOString","substring","visitSurveys","surveys","x","date","substr","visitConsultants","visitComplaints","visitVitals","vitals","visitExaminations","examination","visitHistory","history","visitInvestigations","investigation","visitDiagnosis","diagnosis","visitTreatments","treatment","visitBilling","billing","patientName","complaint","survey","fetchPatientsAsc","patientsNameAsc","fetchPatientsDesc","patientsNameDesc","modalDeleteHandler","user","deletedPatient","deletePatient","deletedPatientId","deletedPatientPos","deletePatientInsuranceItem","company","deletePatientInsurance","deletePatientConsultantItem","reference","id","deletePatientConsultant","deletePatientNextOfKinItem","deletePatientNextOfKin","deletePatientComplaintItem","deletePatientComplaint","deletePatientSurveyItem","deletePatientSurvey","deletePatientVitalsItem","deletePatientVitals","deletePatientExaminationItem","type","deletePatientExamination","deletePatientHistoryItem","deletePatientHistory","deletePatientAllergiesItem","deletePatientAllergies","deletePatientMedicationItem","deletePatientMedication","deletePatientInvestigationItem","deletePatientInvestigation","deletePatientDiagnosisItem","deletePatientDiagnosis","deletePatientTreatmentItem","deletePatientTreatment","deletePatientBillingItem","deletePatientBilling","deletePatientAttachmentItem","path","filename","deleteFile","response","deletePatientAttachment","deletePatientNoteItem","deletePatientTagItem","onViewAttachment","attachment","format","closeAttachmentView","closePdfCreator","showDetailHandler","nameElRef","createRef","fetchUsers","updatePatientSpecial","bind","contextType"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport S3 from 'react-aws-s3';\nimport S3FileUpload from 'react-s3';\n\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Button from 'react-bootstrap/Button';\nimport Accordion from 'react-bootstrap/Accordion';\nimport SidebarPage from './Sidebar';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\nimport Card from 'react-bootstrap/Card';\n\nimport PatientList from '../components/Patients/PatientList/PatientList';\nimport PatientDetail from '../components/Patients/PatientDetail';\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\nimport SearchPatientList from '../components/Patients/PatientList/SearchPatientList';\nimport SearchPatientForm from '../components/Forms/SearchPatientForm';\nimport SearchPatientIdForm from '../components/Forms/SearchPatientIdForm';\nimport SearchPatientNameForm from '../components/Forms/SearchPatientNameForm';\nimport SearchPatientVisitForm from '../components/Forms/SearchPatientVisitForm';\n\nimport AlertBox from '../components/AlertBox';\nimport AttachmentViewer from '../components/AttachmentViewer';\nimport PdfCreator from '../components/PdfCreator';\n\nimport CreatePatientForm from '../components/Forms/CreatePatientForm';\nimport UpdatePatientForm from '../components/Forms/UpdatePatientForm';\nimport UpdatePatientFieldForm from '../components/Forms/UpdatePatientFieldForm';\nimport UpdatePatientConsultantForm from '../components/Forms/UpdatePatientConsultantForm';\nimport UpdatePatientInsuranceForm from '../components/Forms/UpdatePatientInsuranceForm';\nimport UpdatePatientNextOfKinForm from '../components/Forms/UpdatePatientNextOfKinForm';\nimport UpdatePatientComplaintForm from '../components/Forms/UpdatePatientComplaintForm';\nimport UpdatePatientSurveyForm from '../components/Forms/UpdatePatientSurveyForm';\nimport UpdatePatientVitalsForm from '../components/Forms/UpdatePatientVitalsForm';\nimport UpdatePatientExaminationForm from '../components/Forms/UpdatePatientExaminationForm';\nimport UpdatePatientHistoryForm from '../components/Forms/UpdatePatientHistoryForm';\nimport UpdatePatientAllergiesForm from '../components/Forms/UpdatePatientAllergiesForm';\nimport UpdatePatientMedicationForm from '../components/Forms/UpdatePatientMedicationForm';\nimport UpdatePatientInvestigationForm from '../components/Forms/UpdatePatientInvestigationForm';\nimport UpdatePatientDiagnosisForm from '../components/Forms/UpdatePatientDiagnosisForm';\nimport UpdatePatientTreatmentForm from '../components/Forms/UpdatePatientTreatmentForm';\nimport UpdatePatientBillingForm from '../components/Forms/UpdatePatientBillingForm';\nimport UpdatePatientAttachmentForm from '../components/Forms/UpdatePatientAttachmentForm';\nimport UpdatePatientNoteForm from '../components/Forms/UpdatePatientNoteForm';\nimport UpdatePatientTagForm from '../components/Forms/UpdatePatientTagForm';\n\nimport './Users.css';\n\nclass PatientsPage extends Component {\n  state = {\n    creating: false,\n    updating: false,\n    searching: false,\n    updatingArray: false,\n    deleting: false,\n    patients: [],\n    searchPatients: [],\n    isLoading: false,\n    selectedPatient: null,\n    patientUpdateField: null,\n    patientSearchField: null,\n    patientSearchQuery: null,\n    canDelete: null,\n    visit: null,\n    userAlert: null,\n    showAttachment: false,\n    showThisAttachmentFile: null,\n    showThisAttachmentType: null,\n    createPdf: false,\n    pdfData: null,\n  };\n  isActive = true;\n\n  static contextType = AuthContext;\n\n  constructor(props) {\n    super(props);\n    this.nameElRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.fetchPatients();\n    if (this.context.user.name === 'admin579'){\n      this.setState({canDelete: true})\n    }\n  }\n\n\n  startCreatePatientHandler = () => {\n    this.setState({ creating: true });\n    console.log(\"CreatePatientForm...\");\n  };\n  startUpdatePatientHandler = () => {\n    this.setState({ updating: true, updatingArray: true });\n    console.log(\"UpdatePatientForm...\");\n  };\n  startSearchPatientHandler = () => {\n    this.setState({ searching: true });\n    console.log(\"SearchPatientForm...\");\n  };\n\n  modalConfirmHandler = (event) => {\n\n    console.log(\"CreatePatientFormData:  \", event.target.formGridName.value);\n\n    this.setState({ creating: false });\n    const userId = this.context.userId;\n\n    let title = event.target.formGridTitle.value;\n    let name = event.target.formGridName.value;\n    let dob = event.target.formGridDob.value;\n    let age = event.target.formGridAge.value;\n    let gender = event.target.formGridGender.value;\n    let addressNumber = event.target.formGridAddressNumber.value;\n    let addressStreet = event.target.formGridAddressStreet.value;\n    let addressTown = event.target.formGridAddressTown.value;\n    let addressParish = event.target.formGridAddressParish.value;\n    let addressPostOffice = event.target.formGridAddressPostOffice.value;\n    let contactPhone = event.target.formGridContactPhone.value;\n    let contactEmail = event.target.formGridContactEmail.value;\n    let registrationDate = event.target.formGridRegistrationDate.value;\n    let referralDate = event.target.formGridReferralDate.value;\n    let expirationDate = event.target.formGridExpirationDate.value;\n    let attendingPhysicianName = event.target.formGridAttendingPhysicianName.value;\n    let attendingPhysicianEmail = event.target.formGridAttendingPhysicianEmail.value;\n    let attendingPhysicianPhone = event.target.formGridAttendingPhysicianPhone.value;\n    let referringDoctorName = event.target.formGridReferringDoctorName.value;\n    let referringDoctorEmail = event.target.formGridReferringDoctorEmail.value;\n    let referringDoctorPhone = event.target.formGridReferringDoctorPhone.value;\n    let occupationRole = event.target.formGridOccupationRole.value;\n    let occupationEmployer = event.target.formGridOccupationEmployer.value;\n    let occupationEmployerContactPhone = event.target.formGridOccupationEmployerContactPhone.value;\n    let occupationEmployerContactEmail = event.target.formGridOccupationEmployerContactEmail.value;\n\n\n    if (\n      name.trim().length === 0 ||\n      // title.trim().length === 0 ||\n      // name.trim().length === 0 ||\n      // dob.trim().length === 0 ||\n      // age.trim().length === 0 ||\n      // gender.trim().length === 0 ||\n      // addressNumber.trim().length === 0 ||\n      // addressStreet.trim().length === 0 ||\n      // addressTown.trim().length === 0 ||\n      // addressParish.trim().length === 0 ||\n      // addressPostOffice.trim().length === 0 ||\n      contactPhone.trim().length === 0\n      // contactEmail.trim().length === 0 ||\n      // registrationDate.trim().length === 0 ||\n      // referralDate.trim().length === 0 ||\n      // expirationDate.trim().length === 0 ||\n      // attendingPhysicianName.trim().length === 0 ||\n      // attendingPhysicianEmail.trim().length === 0 ||\n      // attendingPhysicianPhone.trim().length === 0 ||\n      // referringDoctorName.trim().length === 0 ||\n      // referringDoctorEmail.trim().length === 0 ||\n      // referringDoctorPhone.trim().length === 0 ||\n      // occupationRole.trim().length === 0 ||\n      // occupationEmployer.trim().length === 0 ||\n      // occupationEmployerContactPhone.trim().length === 0 ||\n      // occupationEmployerContactEmail.trim().length === 0\n\n    ) {\n      console.log(\"patient must have at least a Name and Contact Number!!!...Please try again...\");\n      this.setState({userAlert: \"patient requires Name and Contact Number!!!... Try again...\"});\n      return;\n    }\n\n    const patient = { title, name, dob, age, gender, addressNumber, addressStreet, addressTown, addressParish, addressPostOffice, contactPhone, contactEmail, registrationDate, referralDate, expirationDate, attendingPhysicianName, attendingPhysicianEmail, attendingPhysicianPhone, referringDoctorName, referringDoctorEmail, referringDoctorPhone, occupationRole, occupationEmployer, occupationEmployerContactPhone, occupationEmployerContactEmail };\n    console.log(`\n      creating patient...\n      title: ${title},\n      name: ${name},\n      dob: ${dob},\n      age: ${age},\n      gender: ${gender},\n      addressNumber: ${addressNumber},\n      addressStreet: ${addressStreet},\n      addressTown: ${addressTown},\n      addressParish: ${addressParish},\n      addressPostOffice: ${addressPostOffice},\n      contactPhone: ${contactPhone},\n      contactEmail: ${contactEmail},\n      registrationDate: ${registrationDate},\n      referralDate: ${referralDate},\n      expirationDate: ${expirationDate},\n      attendingPhysicianName: ${attendingPhysicianName},\n      attendingPhysicianEmail: ${attendingPhysicianEmail},\n      attendingPhysicianPhone: ${attendingPhysicianPhone},\n      referringDoctorName: ${referringDoctorName},\n      referringDoctorEmail: ${referringDoctorEmail},\n      referringDoctorPhone: ${referringDoctorPhone},\n      occupationRole: ${occupationRole},\n      occupationEmployer: ${occupationEmployer},\n      occupationEmployerContactPhone: ${occupationEmployerContactPhone},\n      occupationEmployerContactEmail: ${occupationEmployerContactEmail},\n      `);\n\n    const requestBody = {\n      query: `\n          mutation {createPatient(userId:\\\"${userId}\\\", patientInput:{title:\\\"${title}\\\",name:\\\"${name}\\\",dob:\\\"${dob}\\\",age:${age},gender:\\\"${gender}\\\",addressNumber:${addressNumber},addressStreet:\\\"${addressStreet}\\\",addressTown:\\\"${addressTown}\\\",addressParish:\\\"${addressParish}\\\",addressPostOffice:\\\"${addressPostOffice}\\\",contactPhone:\\\"${contactPhone}\\\",contactEmail:\\\"${contactEmail}\\\",registrationDate:\\\"${registrationDate}\\\",referralDate:\\\"${referralDate}\\\",expirationDate:\\\"${expirationDate}\\\",referringDoctorName:\\\"${referringDoctorName}\\\",referringDoctorEmail:\\\"${referringDoctorEmail}\\\",referringDoctorPhone:\\\"${referringDoctorPhone}\\\",attendingPhysicianName:\\\"${attendingPhysicianName}\\\",attendingPhysicianEmail:\\\"${attendingPhysicianEmail}\\\",attendingPhysicianPhone:\\\"${attendingPhysicianPhone}\\\",occupationRole:\\\"${occupationRole}\\\",occupationEmployer:\\\"${occupationEmployer}\\\",occupationEmployerContactPhone:\\\"${occupationEmployerContactPhone}\\\",occupationEmployerContactEmail:\\\"${occupationEmployerContactEmail}\\\"})\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n        `};\n\n    const token = this.context.token;\n\n    // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(`\n          response data:\n          ${JSON.stringify(resData.data.createPatient)}\n          `);\n          const responseAlert = JSON.stringify(resData.data).slice(2,15);\n          this.setState({userAlert: responseAlert});\n\n        const newPatient = resData.data.createPatient;\n        this.setState(prevState => {\n          const updatedPatients = [...prevState.patients];\n          updatedPatients.push(newPatient);\n\n          return { patients: updatedPatients };\n        });\n\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n  };\n\n  modalCancelHandler = () => {\n    this.setState({ creating: false, updating: false, selectedPatient: null });\n  };\n\n\n  modalConfirmUpdateHandler = (event) => {\n\n    // if(this.context.user.role !== 'admin') {\n    //   console.log(\"Not the Admin! No edit permission!!\");\n    // }\n\n    const userId = this.context.userId;\n    const selectedPatientId = this.context.selectedPatient._id;\n\n    console.log(\"UpdatePatientFormData:  \", event.target.formGridName.value);\n\n\n    this.setState({ updating: false });\n\n    let title = event.target.formGridTitle.value;\n    let name = event.target.formGridName.value;\n    let dob = event.target.formGridDob.value;\n    let age = event.target.formGridAge.value;\n    let gender = event.target.formGridGender.value;\n    let addressNumber = event.target.formGridAddressNumber.value;\n    let addressStreet = event.target.formGridAddressStreet.value;\n    let addressTown = event.target.formGridAddressTown.value;\n    let addressParish = event.target.formGridAddressParish.value;\n    let addressPostOffice = event.target.formGridAddressPostOffice.value;\n    let contactPhone = event.target.formGridContactPhone.value;\n    let contactEmail = event.target.formGridContactEmail.value;\n    let registrationDate = event.target.formGridRegistrationDate.value;\n    let referralDate = event.target.formGridReferralDate.value;\n    let expirationDate = event.target.formGridExpirationDate.value;\n    let attendingPhysicianName = event.target.formGridAttendingPhysicianName.value;\n    let attendingPhysicianEmail = event.target.formGridAttendingPhysicianEmail.value;\n    let attendingPhysicianPhone = event.target.formGridAttendingPhysicianPhone.value;\n    let referringDoctorName = event.target.formGridReferringDoctorName.value;\n    let referringDoctorEmail = event.target.formGridReferringDoctorEmail.value;\n    let referringDoctorPhone = event.target.formGridReferringDoctorPhone.value;\n    let occupationRole = event.target.formGridOccupationRole.value;\n    let occupationEmployer = event.target.formGridOccupationEmployer.value;\n    let occupationEmployerContactPhone = event.target.formGridOccupationEmployerContactPhone.value;\n    let occupationEmployerContactEmail = event.target.formGridOccupationEmployerContactEmail.value;\n\n    if (title.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      title = this.context.selectedPatient.title;\n    }\n    if (name.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      name = this.context.selectedPatient.name;\n    }\n    if (dob.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      dob = this.context.selectedPatient.dob;\n    }\n    if (gender.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      gender = this.context.selectedPatient.gender;\n    }\n    if (age.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      age = this.context.selectedPatient.age;\n    }\n    if (addressNumber.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      addressNumber = this.context.selectedPatient.address.number;\n    }\n    if (addressStreet.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      addressStreet = this.context.selectedPatient.address.street;\n    }\n    if (addressTown.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      addressTown = this.context.selectedPatient.address.town;\n    }\n    if (addressParish.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      addressParish = this.context.selectedPatient.address.parish;\n    }\n    if (addressPostOffice.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      addressPostOffice = this.context.selectedPatient.address.postOffice;\n    }\n    if (contactPhone.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      contactPhone = this.context.selectedPatient.contact.phone;\n    }\n    if (contactEmail.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      contactEmail = this.context.selectedPatient.contact.email;\n    }\n    if (registrationDate.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      registrationDate = this.context.selectedPatient.registrationDate;\n    }\n    if (attendingPhysicianName.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      attendingPhysicianName = this.context.selectedPatient.attendingPhysician.name;\n    }\n    if (attendingPhysicianEmail.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      attendingPhysicianEmail = this.context.selectedPatient.attendingPhysician.email;\n    }\n    if (attendingPhysicianPhone.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      attendingPhysicianPhone = this.context.selectedPatient.attendingPhysician.phone;\n    }\n    if (referringDoctorName.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      referringDoctorName = this.context.selectedPatient.referringDoctor.name;\n    }\n    if (referringDoctorEmail.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      referringDoctorEmail = this.context.selectedPatient.referringDoctor.email;\n    }\n    if (referringDoctorPhone.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      referringDoctorPhone = this.context.selectedPatient.referringDoctor.phone;\n    }\n    if (occupationRole.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      occupationRole = this.context.selectedPatient.occupation.role;\n    }\n    if (occupationEmployer.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      occupationEmployer = this.context.selectedPatient.occupation.employer;\n    }\n    if (occupationEmployerContactEmail.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      occupationEmployerContactEmail = this.context.selectedPatient.occupation.contact.email;\n    }\n    if (occupationEmployerContactPhone.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      occupationEmployerContactPhone = this.context.selectedPatient.occupation.contact.phone;\n    }\n\n    const patient = { title, name, dob, age, gender, addressNumber, addressStreet, addressTown, addressParish, addressPostOffice, contactPhone, contactEmail, registrationDate, referralDate, expirationDate, attendingPhysicianName, attendingPhysicianEmail, attendingPhysicianPhone, referringDoctorName, referringDoctorEmail, referringDoctorPhone, occupationRole, occupationEmployer, occupationEmployerContactPhone, occupationEmployerContactEmail };\n    console.log(`\n      updating patient...\n      title: ${title},\n      name: ${name},\n      dob: ${dob},\n      age: ${age},\n      gender: ${gender},\n      addressNumber: ${addressNumber},\n      addressStreet: ${addressStreet},\n      addressTown: ${addressTown},\n      addressParish: ${addressParish},\n      addressPostOffice: ${addressPostOffice},\n      contactPhone: ${contactPhone},\n      contactEmail: ${contactEmail},\n      registrationDate: ${registrationDate},\n      referralDate: ${referralDate},\n      expirationDate: ${expirationDate},\n      attendingPhysicianName: ${attendingPhysicianName},\n      attendingPhysicianEmail: ${attendingPhysicianEmail},\n      attendingPhysicianPhone: ${attendingPhysicianPhone},\n      referringDoctorName: ${referringDoctorName},\n      referringDoctorEmail: ${referringDoctorEmail},\n      referringDoctorPhone: ${referringDoctorPhone},\n      occupationRole: ${occupationRole},\n      occupationEmployer: ${occupationEmployer},\n      occupationEmployerContactPhone: ${occupationEmployerContactPhone},\n      occupationEmployerContactEmail: ${occupationEmployerContactEmail},\n      `);\n      this.setState({userAlert: \"updating patient...\"});\n\n    const requestBody = {\n      query: `\n          mutation {updatePatient(userId:\"${userId}\",patientId:\"${selectedPatientId}\", patientInput:{title:\"${title}\",name:\"${name}\",dob:\"${dob}\",age:${age},gender:\"${gender}\",addressNumber:${addressNumber},addressStreet:\"${addressStreet}\",addressTown:\"${addressTown}\",addressParish:\"${addressParish}\",addressPostOffice:\"${addressPostOffice}\",contactPhone:\"${contactPhone}\",contactEmail:\"${contactEmail}\",registrationDate:\"${registrationDate}\",referralDate:\"${referralDate}\",expirationDate:\"${expirationDate}\",referringDoctorName:\"${referringDoctorName}\",referringDoctorEmail:\"${referringDoctorEmail}\",referringDoctorPhone:\"${referringDoctorPhone}\",attendingPhysicianName:\"${attendingPhysicianName}\",attendingPhysicianEmail:\"${attendingPhysicianEmail}\",attendingPhysicianPhone:\"${attendingPhysicianPhone}\",occupationRole:\"${occupationRole}\",occupationEmployer:\"${occupationEmployer}\",occupationEmployerContactPhone:\"${occupationEmployerContactPhone}\",occupationEmployerContactEmail:\"${occupationEmployerContactPhone}\"})\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n        `};\n\n    const token = this.context.token;\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n\n        const updatedPatientId = resData.data.updatePatient._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatient);\n\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatient})\n        this.fetchPatients();\n\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n  };\n\n\n  modalConfirmUpdateFieldHandler = (event) => {\n\n    const token = this.context.token;\n    const userId = this.context.userId;\n    let selectedPatientId = this.context.selectedPatient._id;\n\n    // if( this.context.user.role !== 'admin') {\n    //   console.log(\"Not the creator or Admin! No edit permission!!\");\n    //   selectedPatientId = null;\n    // }\n\n      console.log(\"UpdatePatientFieldFormData:  \", event.target.formGridField.value);\n      this.setState({ updating: false });\n\n      let field = null;\n      let query = event.target.formGridQuery.value;\n      if (event.target.formGridFieldSelect.value === \"select\") {\n        field = event.target.formGridField.value;\n      } else {\n        field = event.target.formGridFieldSelect.value;\n      }\n\n      const requestBody = {\n        query:`\n          mutation {updatePatientField(userId:\\\"${userId}\\\",patientId:\\\"${selectedPatientId}\\\",field:\\\"${field}\\\",query:\\\"${query}\\\")\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n        `};\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData.data.updatePatientField));\n\n          const updatedPatientId = resData.data.updatePatientField._id;\n          const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n          const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n          const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n          console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n          this.state.patients.push(resData.data.updatePatientField);\n          this.context.patients = this.state.patients;\n          const responseAlert = JSON.stringify(resData.data).slice(2,25);\n          this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientField})\n          this.fetchPatients();\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({userAlert: err});\n        });\n\n  }\n\n\nupdatePatientConsultantHandler = (event) => {\n\n  let token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n  const patientConsultantReference = this.context.selectedUser._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n  if (patientConsultantReference === undefined) {\n    console.log(`\n      select a Staff member before adding a Patient Consultant!!\n      `);\n      this.setState({userAlert: \"select a Staff member before adding a Patient Consultant!!...\"});\n      token = null;\n  }\n\n  console.log(\"UpdatePatientConsultantFormData:  \", event.target.formGridConsultantDate.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let consultantDate = event.target.formGridConsultantDate.value;\n\n  const patientConsultant = { consultantDate, patientConsultantReference };\n  console.log(`\n    adding patient consultant item...\n    userId: ${userId},\n    selectedPatientId: ${selectedPatientId},\n    consultantDate: ${consultantDate},\n    consultantReference: ${patientConsultantReference},\n    `);\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientConsultant(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{consultantDate:\" ${consultantDate}\",consultantReference: \"${patientConsultantReference}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    };\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData.data));\n\n          const updatedPatientId = resData.data.updatePatientConsultant._id;\n          const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n          const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n          const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n          console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n          this.state.patients.push(resData.data.updatePatientConsultant);\n          this.context.patients = this.state.patients;\n          const responseAlert = JSON.stringify(resData.data).slice(2,25);\n          this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientConsultant})\n          this.fetchPatients();\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({userAlert: err});\n        });\n\n}\nupdatePatientInsuranceHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientInsuranceFormData:  \", event.target.formGridInsuranceCompany.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let insuranceCompany = event.target.formGridInsuranceCompany.value;\n  let insuranceNumber = event.target.formGridInsuranceNumber.value;\n  let insuranceExpiry = event.target.formGridInsuranceExpiry.value;\n  let insuranceDescription = event.target.formGridInsuranceDescription.value;\n  let insuranceSubscriberCompany = event.target.formGridInsuranceSubscriberCompany.value;\n  let insuranceSubscriberDescription = event.target.formGridInsuranceSubscriberDescription.value;\n\n  const patientInsurance = { insuranceCompany, insuranceNumber, insuranceExpiry, insuranceDescription, insuranceSubscriberCompany, insuranceSubscriberDescription };\n  console.log(`\n    adding patient insurance item...\n    userId: ${userId},\n    selectedPatientId: ${selectedPatientId},\n    insuranceCompany: ${insuranceCompany},\n    insuranceNumber: ${insuranceNumber},\n    insuranceExpiry: ${insuranceExpiry},\n    insuranceDescription: ${insuranceDescription},\n    insuranceSubscriberCompany: ${insuranceSubscriberCompany},\n    insuranceSubscriberDescription: ${insuranceSubscriberDescription},\n    `);\n    this.setState({userAlert: \"adding patient insurance item...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientInsurance(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{insuranceCompany:\"${insuranceCompany}\",insuranceNumber:\"${insuranceNumber}\",insuranceDescription:\"${insuranceDescription}\",insuranceExpiry:\"${insuranceExpiry}\",insuranceSubscriberCompany:\"${insuranceSubscriberCompany}\",insuranceSubscriberDescription:\"${insuranceSubscriberDescription}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    };\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData.data));\n\n          const updatedPatientId = resData.data.updatePatientInsurance._id;\n          const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n          const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n          const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n          console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n          this.state.patients.push(resData.data.updatePatientInsurance);\n          this.context.patients = this.state.patients;\n          const responseAlert = JSON.stringify(resData.data).slice(2,25);\n          this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientInsurance})\n          this.fetchPatients();\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({userAlert: err});\n        });\n\n}\n\nupdatePatientNextOfKinHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientNextOfKinFormData:  \", event.target.formGridNextOfKinName.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let nextOfKinName = event.target.formGridNextOfKinName.value;\n  let nextOfKinPhone = event.target.formGridNextOfKinPhone.value;\n  let nextOfKinEmail = event.target.formGridNextOfKinEmail.value;\n\n  const patientNextOfKin = { nextOfKinName, nextOfKinPhone, nextOfKinEmail };\n  console.log(`\n    adding patient nextOfKin item...\n    userId: ${userId},\n    selectedPatientId: ${selectedPatientId},\n    nextOfKinName: ${nextOfKinName},\n    nextOfKinPhone: ${nextOfKinPhone},\n    nextOfKinEmail: ${nextOfKinEmail},\n    `);\n    this.setState({userAlert: \"adding patient nextOfKin item...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientNextOfKin(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{nextOfKinName:\"${nextOfKinName}\",nextOfKinEmail:\"${nextOfKinEmail}\",nextOfKinPhone:\"${nextOfKinPhone}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    };\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData.data));\n\n          const updatedPatientId = resData.data.updatePatientNextOfKin._id;\n          const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n          const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n          const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n          console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n          this.state.patients.push(resData.data.updatePatientNextOfKin);\n          this.context.patients = this.state.patients;\n          const responseAlert = JSON.stringify(resData.data).slice(2,25);\n          this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientNextOfKin})\n          this.fetchPatients();\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({userAlert: err});\n        });\n}\n\n\nupdatePatientComplaintHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientComplaintFormData:  \", event.target.formGridComplaintTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let complaintTitle = event.target.formGridComplaintTitle.value;\n  let complaintDate = event.target.formGridComplaintDate.value;\n  let complaintDescription = event.target.formGridComplaintDescription.value;\n  let complaintAnamnesis = event.target.formGridComplaintAnamnesis.value;\n  // let complaintAttachmentName = event.target.formGridComplaintAttachmentName.value;\n  let complaintAttachmentFormat = event.target.formGridComplaintAttachmentFormat.value;\n  let complaintAttachmentPath = event.target.formGridComplaintAttachmentPath.value;\n  let file = AuthContext._currentValue.file;\n\n  console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n  const config = {\n    bucketName: 'ent-emr-bucket',\n    dirName: complaintAttachmentPath,\n    region: 'us-east-2',\n    accessKeyId: \"AKIARFTS6Q6DALQKT4QR\",\n    secretAccessKey: \"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\",\n  }\n  const ReactS3Client = new S3(config);\n  const newFileName = file.name;\n  const complaintAttachmentName = newFileName;\n\n  ReactS3Client\n      .uploadFile(file, newFileName)\n      .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n      .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n  const patientComplaint = { complaintTitle, complaintDate, complaintDescription, complaintAnamnesis, complaintAttachmentName, complaintAttachmentFormat, complaintAttachmentPath };\n  console.log(`\n    adding patient complaint...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    complaintTitle: ${complaintTitle},\n    complaintDate: ${complaintDate},\n    complaintDescription: ${complaintDescription},\n    complaintAnamnesis: ${complaintAnamnesis},\n    complaintAttachmentName: ${complaintAttachmentName},\n    complaintAttachmentFormat: ${complaintAttachmentFormat},\n    complaintAttachmentPath: ${complaintAttachmentPath},\n    `);\n    this.setState({userAlert: \"adding patient complaint...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientComplaint(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{complaintDate:\"${complaintDate}\",complaintTitle:\"${complaintTitle}\",complaintDescription:\"${complaintDescription}\",complaintAnamnesis:\"${complaintAnamnesis}\",complaintAttachmentName:\"${complaintAttachmentName}\",complaintAttachmentFormat:\"${complaintAttachmentFormat}\",complaintAttachmentPath:\"${complaintAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientComplaint._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientComplaint);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientComplaint})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n}\n\nupdatePatientSurveyHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientSurveyFormData:  \", event.target.formGridSurveyTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let surveyDate = event.target.formGridSurveyDate.value;\n  let surveyTitle = event.target.formGridSurveyTitle.value;\n  let surveyDescription = event.target.formGridSurveyDescription.value;\n  // let surveyAttachmentName = event.target.formGridSurveyAttachmentName.value;\n  let surveyAttachmentFormat = event.target.formGridSurveyAttachmentFormat.value;\n  let surveyAttachmentPath = event.target.formGridSurveyAttachmentPath.value;\n  let file = AuthContext._currentValue.file;\n\n  console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n  const config = {\n    bucketName: 'ent-emr-bucket',\n    dirName: surveyAttachmentPath,\n    region: 'us-east-2',\n    accessKeyId: \"AKIARFTS6Q6DALQKT4QR\",\n    secretAccessKey: \"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\",\n  }\n  const ReactS3Client = new S3(config);\n  const newFileName = file.name;\n  const surveyAttachmentName = newFileName;\n\n  ReactS3Client\n      .uploadFile(file, newFileName)\n      .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n      .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n  const patientSurvey = { surveyDate, surveyTitle, surveyDescription, surveyAttachmentName, surveyAttachmentFormat, surveyAttachmentPath };\n  console.log(`\n    adding patient survey...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    surveyDate: ${surveyDate},\n    surveyTitle: ${surveyTitle},\n    surveyDescription: ${surveyDescription},\n    surveyAttachmentName: ${surveyAttachmentName},\n    surveyAttachmentFormat: ${surveyAttachmentFormat},\n    surveyAttachmentPath: ${surveyAttachmentPath},\n    `);\n    this.setState({userAlert: \"adding patient survey...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientSurvey(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{surveyDate:\"${surveyDate}\",surveyTitle:\"${surveyTitle}\",surveyDescription:\"${surveyDescription}\",surveyAttachmentName:\"${surveyAttachmentName}\",surveyAttachmentFormat:\"${surveyAttachmentFormat}\",surveyAttachmentPath:\"${surveyAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientSurvey._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientSurvey);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientSurvey})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n}\n\nupdatePatientVitalsHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientVitalsFormData:  \", event.target.formGridVitalsDate.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let vitalsDate = event.target.formGridVitalsDate.value;\n  let vitalsPr = event.target.formGridVitalsPr.value;\n  let vitalsBp1 = event.target.formGridVitalsBp1.value;\n  let vitalsBp2 = event.target.formGridVitalsBp2.value;\n  let vitalsRr = event.target.formGridVitalsRr.value;\n  let vitalsTemp = event.target.formGridVitalsTemp.value;\n  let vitalsPs02 = event.target.formGridVitalsPs02.value;\n  let vitalsHeight = event.target.formGridVitalsHeight.value;\n  let vitalsWeight = event.target.formGridVitalsWeight.value;\n  let vitalsBmi = event.target.formGridVitalsBmi.value;\n  let vitalsUrineType = event.target.formGridVitalsUrineType.value;\n  let vitalsUrineValue = event.target.formGridVitalsUrineValue.value;\n\n  const patientVitals = {  };\n  console.log(`\n    adding patient vitals...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    `);\n    this.setState({userAlert: \"adding patient vitals...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientVitals(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{vitalsDate:\"${vitalsDate}\",vitalsPr:${vitalsPr},vitalsBp1:${vitalsBp1},vitalsBp2:${vitalsBp2},vitalsRr:${vitalsRr},vitalsTemp:${vitalsTemp},vitalsPs02:${vitalsPs02},vitalsHeight:${vitalsHeight},vitalsWeight:${vitalsWeight},vitalsBmi:${vitalsBmi},vitalsUrineType:\"${vitalsUrineType}\",vitalsUrineValue:\"${vitalsUrineValue}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientVitals._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientVitals);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientVitals})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n}\n\n\nupdatePatientExaminationHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientExaminationFormData:  \", event.target.formGridExaminationArea.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let examinationDate = event.target.formGridExaminationDate.value;\n  let examinationGeneral = event.target.formGridExaminationGeneral.value;\n  let examinationArea = undefined;\n  if (event.target.formGridExaminationAreaSelect === \"select\") {\n    examinationArea = event.target.formGridExaminationArea.value;\n  } else {\n    examinationArea = event.target.formGridExaminationAreaSelect.value;\n  }\n  let examinationType = event.target.formGridExaminationType.value;\n  let examinationMeasure = event.target.formGridExaminationMeasure.value;\n  let examinationValue = event.target.formGridExaminationValue.value;\n  let examinationDescription = event.target.formGridExaminationDescription.value;\n  let examinationFollowUp = event.target.formGridExaminationFollowUp.value;\n  // let examinationAttachmentName = event.target.formGridExaminationAttachmentName.value;\n  let examinationAttachmentFormat = event.target.formGridExaminationAttachmentFormat.value;\n  let examinationAttachmentPath = event.target.formGridExaminationAttachmentPath.value;\n  let file = AuthContext._currentValue.file;\n\n  console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n  const config = {\n    bucketName: 'ent-emr-bucket',\n    dirName: examinationAttachmentPath,\n    region: 'us-east-2',\n    accessKeyId: \"AKIARFTS6Q6DALQKT4QR\",\n    secretAccessKey: \"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\",\n  }\n  const ReactS3Client = new S3(config);\n  const newFileName = file.name;\n  const examinationAttachmentName = newFileName;\n\n  ReactS3Client\n      .uploadFile(file, newFileName)\n      .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n      .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n  const patientExamination = { examinationArea, examinationGeneral, examinationType, examinationMeasure, examinationValue, examinationAttachmentName, examinationAttachmentFormat, examinationAttachmentPath };\n\n  console.log(`\n    adding patient examination...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    examinationDate: ${examinationDate},\n    examinationGeneral: ${examinationGeneral},\n    examinationArea: ${examinationArea},\n    examinationType: ${examinationType},\n    examinationMeasure: ${examinationMeasure},\n    examinationValue: ${examinationValue},\n    examinationDescription: ${examinationDescription},\n    examinationFollowUp: ${examinationFollowUp},\n    examinationAttachmentName: ${examinationAttachmentName},\n    examinationAttachmentFormat: ${examinationAttachmentFormat},\n    examinationAttachmentPath: ${examinationAttachmentPath},\n    `);\n    this.setState({userAlert: \"adding patient examination...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientExamination(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{examinationDate:\"${examinationDate}\",examinationGeneral:\"${examinationGeneral}\",examinationArea:\"${examinationArea}\",examinationType:\"${examinationType}\",examinationMeasure:\"${examinationMeasure}\",examinationValue:\"${examinationValue}\",examinationDescription:\"${examinationDescription}\",examinationFollowUp:${examinationFollowUp},examinationAttachmentName:\"${examinationAttachmentName}\",examinationAttachmentFormat:\"${examinationAttachmentFormat}\",examinationAttachmentPath:\"${examinationAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientExamination._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientExamination);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientExamination})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n}\n\n\nupdatePatientHistoryHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientHistoryFormData:  \", event.target.formGridHistoryTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let historyType = event.target.formGridHistoryType.value;\n  let historyDate = event.target.formGridHistoryDate.value;\n  let historyTitle = event.target.formGridHistoryTitle.value;\n  let historyDescription = event.target.formGridHistoryDescription.value;\n  // let historyAttachmentName = event.target.formGridHistoryAttachmentName.value;\n  let historyAttachmentFormat = event.target.formGridHistoryAttachmentFormat.value;\n  let historyAttachmentPath = event.target.formGridHistoryAttachmentPath.value;\n  let file = AuthContext._currentValue.file;\n\n  console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n  const config = {\n    bucketName: 'ent-emr-bucket',\n    dirName: historyAttachmentPath,\n    region: 'us-east-2',\n    accessKeyId: \"AKIARFTS6Q6DALQKT4QR\",\n    secretAccessKey: \"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\",\n  }\n  const ReactS3Client = new S3(config);\n  const newFileName = file.name;\n  const historyAttachmentName = newFileName;\n\n  ReactS3Client\n      .uploadFile(file, newFileName)\n      .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n      .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n  const patientHistory = { historyType, historyDate, historyTitle, historyDescription, historyAttachmentName, historyAttachmentFormat, historyAttachmentPath };\n  console.log(`\n    adding patient history...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    historyType: ${historyType},\n    historyDate: ${historyDate},\n    historyTitle: ${historyTitle},\n    historyDescription: ${historyDescription},\n    historyAttachmentName: ${historyAttachmentName},\n    historyAttachmentFormat: ${historyAttachmentFormat},\n    historyAttachmentPath: ${historyAttachmentPath},\n    `);\n    this.setState({userAlert: \"adding patient history...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientHistory(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{historyTitle:\"${historyTitle}\",historyType:\"${historyType}\",historyDate:\"${historyDate}\",historyDescription:\"${historyDescription}\",historyAttachmentName:\"${historyAttachmentName}\",historyAttachmentFormat:\"${historyAttachmentFormat}\",historyAttachmentPath:\"${historyAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientHistory._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientHistory);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientHistory})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n}\n\n\nupdatePatientAllergiesHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientAllergiesFormData:  \", event.target.formGridAllergiesTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let allergiesTitle = event.target.formGridAllergiesTitle.value;\n  let allergiesType = undefined;\n  if (event.target.formGridAllergiesTypeSelect === \"select\") {\n    allergiesType = event.target.formGridAllergiesType.value;\n  } else {\n    allergiesType = event.target.formGridAllergiesTypeSelect.value;\n  }\n  let allergiesDescription = event.target.formGridAllergiesDescription.value;\n  // let allergiesAttachmentName = event.target.formGridAllergiesAttachmentName.value;\n  let allergiesAttachmentFormat = event.target.formGridAllergiesAttachmentFormat.value;\n  let allergiesAttachmentPath = event.target.formGridAllergiesAttachmentPath.value;\n  let file = AuthContext._currentValue.file;\n\n  console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n  const config = {\n    bucketName: 'ent-emr-bucket',\n    dirName: allergiesAttachmentPath,\n    region: 'us-east-2',\n    accessKeyId: \"AKIARFTS6Q6DALQKT4QR\",\n    secretAccessKey: \"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\",\n  }\n  const ReactS3Client = new S3(config);\n  const newFileName = file.name;\n  const allergiesAttachmentName = newFileName;\n\n  ReactS3Client\n      .uploadFile(file, newFileName)\n      .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n      .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n  const patientAllergies = { allergiesTitle, allergiesType, allergiesDescription, allergiesAttachmentName, allergiesAttachmentFormat, allergiesAttachmentPath };\n\n  console.log(`\n    adding patient allergies...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    allergiesTitle: ${allergiesTitle},\n    allergiesType: ${allergiesType},\n    allergiesDescription: ${allergiesDescription},\n    allergiesAttachmentName: ${allergiesAttachmentName},\n    allergiesAttachmentFormat: ${allergiesAttachmentFormat},\n    allergiesAttachmentPath: ${allergiesAttachmentPath},\n    `);\n    this.setState({userAlert: \"adding patient allergies...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientAllergies(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{allergiesTitle:\"${allergiesTitle}\",allergiesType:\"${allergiesType}\", allergiesDescription:\"${allergiesDescription}\",allergiesAttachmentName:\"${allergiesAttachmentName}\",allergiesAttachmentFormat:\"${allergiesAttachmentFormat}\",allergiesAttachmentPath:\"${allergiesAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientAllergies._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientAllergies);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientAllergies})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n\n}\n\n\nupdatePatientMedicationHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientMedicationFormData:  \", event.target.formGridMedicationTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let medicationTitle = event.target.formGridMedicationTitle.value;\n  let medicationType = event.target.formGridMedicationType.value;\n  let medicationDescription = event.target.formGridMedicationDescription.value;\n  // let medicationAttachmentName = event.target.formGridMedicationAttachmentName.value;\n  let medicationAttachmentFormat = event.target.formGridMedicationAttachmentFormat.value;\n  let medicationAttachmentPath = event.target.formGridMedicationAttachmentPath.value;\n  let file = AuthContext._currentValue.file;\n\n  console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n  const config = {\n    bucketName: 'ent-emr-bucket',\n    dirName: medicationAttachmentPath,\n    region: 'us-east-2',\n    accessKeyId: \"AKIARFTS6Q6DALQKT4QR\",\n    secretAccessKey: \"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\",\n  }\n  const ReactS3Client = new S3(config);\n  const newFileName = file.name;\n  const medicationAttachmentName = newFileName;\n\n  ReactS3Client\n      .uploadFile(file, newFileName)\n      .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n      .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n  const patientMedication = { medicationTitle, medicationType, medicationDescription, medicationAttachmentName, medicationAttachmentFormat, medicationAttachmentPath };\n\n  console.log(`\n    adding patient medication...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    medicationTitle: ${medicationTitle},\n    medicationType: ${medicationType},\n    medicationDescription: ${medicationDescription},\n    medicationAttachmentName: ${medicationAttachmentName},\n    medicationAttachmentFormat: ${medicationAttachmentFormat},\n    medicationAttachmentPath: ${medicationAttachmentPath},\n    `);\n    this.setState({userAlert: \"adding patient medication...\"});\n\n    const requestBody = {\n      query:`\n      mutation {updatePatientMedication(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{medicationTitle:\"${medicationTitle}\",medicationType:\"${medicationType}\" medicationDescription:\"${medicationDescription}\",medicationAttachmentName:\"${medicationAttachmentName}\",medicationAttachmentFormat:\"${medicationAttachmentFormat}\",medicationAttachmentPath:\"${medicationAttachmentPath}\"})\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientMedication._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientMedication);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientMedication})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n}\n\n\nupdatePatientInvestigationHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientInvestigationFormData:  \", event.target.formGridInvestigationTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let investigationDate = event.target.formGridInvestigationDate.value;\n  let investigationTitle = event.target.formGridInvestigationTitle.value;\n  let investigationType = undefined;\n  if (event.target.formGridInvestigationTypeSelect === \"select\") {\n    investigationType = event.target.formGridInvestigationType.value;\n  } else {\n    investigationType = event.target.formGridInvestigationTypeSelect.value;\n  }\n  let investigationDescription = event.target.formGridInvestigationDescription.value;\n  // let investigationAttachmentName = event.target.formGridInvestigationAttachmentName.value;\n  let investigationAttachmentFormat = event.target.formGridInvestigationAttachmentFormat.value;\n  let investigationAttachmentPath = event.target.formGridInvestigationAttachmentPath.value;\n  let file = AuthContext._currentValue.file;\n\n  console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n  const config = {\n    bucketName: 'ent-emr-bucket',\n    dirName: investigationAttachmentPath,\n    region: 'us-east-2',\n    accessKeyId: \"AKIARFTS6Q6DALQKT4QR\",\n    secretAccessKey: \"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\",\n  }\n  const ReactS3Client = new S3(config);\n  const newFileName = file.name;\n  const investigationAttachmentName = newFileName;\n\n  ReactS3Client\n      .uploadFile(file, newFileName)\n      .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n      .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n  const patientInvestigation = { investigationDate, investigationTitle, investigationType, investigationDescription, investigationAttachmentName, investigationAttachmentFormat, investigationAttachmentPath };\n\n  console.log(`\n    adding patient investigation...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    investigationDate: ${investigationDate},\n    investigationTitle: ${investigationTitle},\n    investigationType: ${investigationType},\n    investigationDescription: ${investigationDescription},\n    investigationAttachmentName: ${investigationAttachmentName},\n    investigationAttachmentFormat: ${investigationAttachmentFormat},\n    investigationAttachmentPath: ${investigationAttachmentPath},\n    `);\n    this.setState({userAlert: \"adding patient investigation...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientInvestigation(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{investigationDate:\"${investigationDate}\",investigationTitle:\"${investigationTitle}\",investigationType:\"${investigationType}\",investigationDescription:\"${investigationDescription}\",investigationAttachmentName:\"${investigationAttachmentName}\",investigationAttachmentFormat:\"${investigationAttachmentFormat}\",investigationAttachmentPath:\"${investigationAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientInvestigation._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientInvestigation);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientInvestigation})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n}\n\n\nupdatePatientDiagnosisHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientDiagnosisFormData:  \", event.target.formGridDiagnosisTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let diagnosisDate = event.target.formGridDiagnosisDate.value;\n  let diagnosisTitle = event.target.formGridDiagnosisTitle.value;\n  let diagnosisType = event.target.formGridDiagnosisType.value;\n  let diagnosisDescription = event.target.formGridDiagnosisDescription.value;\n  // let diagnosisAttachmentName = event.target.formGridDiagnosisAttachmentName.value;\n  let diagnosisAttachmentFormat = event.target.formGridDiagnosisAttachmentFormat.value;\n  let diagnosisAttachmentPath = event.target.formGridDiagnosisAttachmentPath.value;\n  let file = AuthContext._currentValue.file;\n\n  console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n  const config = {\n    bucketName: 'ent-emr-bucket',\n    dirName: diagnosisAttachmentPath,\n    region: 'us-east-2',\n    accessKeyId: \"AKIARFTS6Q6DALQKT4QR\",\n    secretAccessKey: \"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\",\n  }\n  const ReactS3Client = new S3(config);\n  const newFileName = file.name;\n  const diagnosisAttachmentName = newFileName;\n\n  ReactS3Client\n      .uploadFile(file, newFileName)\n      .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n      .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n  const patientDiagnosis = { diagnosisDate, diagnosisTitle, diagnosisType, diagnosisDescription, diagnosisAttachmentName, diagnosisAttachmentFormat, diagnosisAttachmentPath };\n\n  console.log(`\n    adding patient diagnosis...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    diagnosisDate: ${diagnosisDate},\n    diagnosisTitle: ${diagnosisTitle},\n    diagnosisType: ${diagnosisType},\n    diagnosisDescription: ${diagnosisDescription},\n    diagnosisAttachmentName: ${diagnosisAttachmentName},\n    diagnosisAttachmentFormat: ${diagnosisAttachmentFormat},\n    diagnosisAttachmentPath: ${diagnosisAttachmentPath},\n    `);\n    this.setState({userAlert: \"adding patient diagnosis...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientDiagnosis(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{diagnosisDate:\"${diagnosisDate}\",diagnosisTitle:\"${diagnosisTitle}\",diagnosisType:\"${diagnosisType}\",diagnosisDescription:\"${diagnosisDescription}\",diagnosisAttachmentName:\"${diagnosisAttachmentName}\",diagnosisAttachmentFormat:\"${diagnosisAttachmentFormat}\",diagnosisAttachmentPath:\"${diagnosisAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientDiagnosis._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientDiagnosis);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientDiagnosis})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n}\n\n\nupdatePatientTreatmentHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientTreatmentFormData:  \", event.target.formGridTreatmentTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let treatmentDate = event.target.formGridTreatmentDate.value;\n  let treatmentTitle = event.target.formGridTreatmentTitle.value;\n  let treatmentDescription = event.target.formGridTreatmentDescription.value;\n  let treatmentDose = event.target.formGridTreatmentDose.value;\n  let treatmentFrequency = event.target.formGridTreatmentFrequency.value;\n  let treatmentType = undefined;\n  if (event.target.formGridInvestigationTypeSelect === \"select\") {\n    treatmentType = event.target.formGridTreatmentType.value;\n  } else {\n    treatmentType = event.target.formGridTreatmentTypeSelect.value;\n  }\n  // let treatmentAttachmentName = event.target.formGridTreatmentAttachmentName.value;\n  let treatmentAttachmentFormat = event.target.formGridTreatmentAttachmentFormat.value;\n  let treatmentAttachmentPath = event.target.formGridTreatmentAttachmentPath.value;\n  let file = AuthContext._currentValue.file;\n\n  console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n  const config = {\n    bucketName: 'ent-emr-bucket',\n    dirName: treatmentAttachmentPath,\n    region: 'us-east-2',\n    accessKeyId: \"AKIARFTS6Q6DALQKT4QR\",\n    secretAccessKey: \"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\",\n  }\n  const ReactS3Client = new S3(config);\n  const newFileName = file.name;\n  const treatmentAttachmentName = newFileName;\n\n  ReactS3Client\n      .uploadFile(file, newFileName)\n      .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n      .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n\n  const patientTreatment = { treatmentDate, treatmentTitle, treatmentDescription, treatmentDose, treatmentFrequency, treatmentType, treatmentAttachmentName, treatmentAttachmentFormat, treatmentAttachmentPath };\n\n  console.log(`\n    adding patient treatment...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    treatmentDate: ${treatmentDate},\n    treatmentTitle: ${treatmentTitle},\n    treatmentDescription: ${treatmentDescription},\n    treatmentDose: ${treatmentDose},\n    treatmentFrequency: ${treatmentFrequency},\n    treatmentType: ${treatmentType},\n    treatmentAttachmentName: ${treatmentAttachmentName},\n    treatmentAttachmentFormat: ${treatmentAttachmentFormat},\n    treatmentAttachmentPath: ${treatmentAttachmentPath},\n    `);\n    this.setState({userAlert: \"adding patient treatment...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientTreatment(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{treatmentDate:\"${treatmentDate}\",treatmentTitle:\"${treatmentTitle}\",treatmentType:\"${treatmentType}\",treatmentDescription:\"${treatmentDescription}\",treatmentDose:\"${treatmentDose}\",treatmentFrequency:\"${treatmentFrequency}\",treatmentAttachmentName:\"${treatmentAttachmentName}\",treatmentAttachmentFormat:\"${treatmentAttachmentFormat}\",treatmentAttachmentPath:\"${treatmentAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `}\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientTreatment._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientTreatment);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientTreatment})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n}\n\n\n\nupdatePatientBillingHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientBillingFormData:  \", event.target.formGridBillingTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let billingDate = event.target.formGridBillingDate.value;\n  let billingTitle = event.target.formGridBillingTitle.value;\n  let billingType = event.target.formGridBillingType.value;\n  let billingDescription = event.target.formGridBillingDescription.value;\n  let billingAmount = event.target.formGridBillingAmount.value;\n  let billingPaid = event.target.formGridBillingPaid.value;\n  let billingNotes = event.target.formGridBillingNotes.value;\n  // let billingAttachmentName = event.target.formGridBillingAttachmentName.value;\n  let billingAttachmentFormat = event.target.formGridBillingAttachmentFormat.value;\n  let billingAttachmentPath = event.target.formGridBillingAttachmentPath.value;\n  let file = AuthContext._currentValue.file;\n\n  console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n  const config = {\n    bucketName: 'ent-emr-bucket',\n    dirName: billingAttachmentPath,\n    region: 'us-east-2',\n    accessKeyId: \"AKIARFTS6Q6DALQKT4QR\",\n    secretAccessKey: \"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\",\n  }\n  const ReactS3Client = new S3(config);\n  const newFileName = file.name;\n  const billingAttachmentName = newFileName;\n\n  ReactS3Client\n      .uploadFile(file, newFileName)\n      .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n      .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n  const patientBilling = { billingDate, billingTitle, billingType, billingDescription, billingAmount, billingPaid, billingNotes, billingAttachmentName, billingAttachmentFormat, billingAttachmentPath };\n\n  console.log(`\n    adding patient billing...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    billingDate: ${billingDate},\n    billingTitle: ${billingTitle},\n    billingType: ${billingType},\n    billingDescription: ${billingDescription},\n    billingAmount: ${billingAmount},\n    billingPaid: ${billingPaid},\n    billingNotes: ${billingNotes},\n    billingAttachmentName: ${billingAttachmentName},\n    billingAttachmentFormat: ${billingAttachmentFormat},\n    billingAttachmentPath: ${billingAttachmentPath},\n    `);\n    this.setState({userAlert: \"adding patient billing...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientBilling(userId:\\\"${userId}\\\", patientId:\\\"${selectedPatientId}\\\",patientInput:{billingDate:\\\"${billingDate}\\\",billingTitle:\\\"${billingTitle}\\\",billingType:\\\"${billingType}\\\",billingDescription:\\\"${billingDescription}\\\",billingAmount:${billingAmount},billingPaid:${billingPaid},billingNotes:\\\"${billingNotes}\\\",billingAttachmentName:\\\"${billingAttachmentName}\\\",billingAttachmentFormat:\\\"${billingAttachmentFormat}\\\",billingAttachmentPath:\\\"${billingAttachmentPath}\\\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientBilling._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientBilling);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientBilling})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n\n}\n\nupdatePatientAttachmentHandler = (event) => {\n\n    const token = this.context.token;\n    const userId = this.context.userId;\n    let selectedPatientId = this.context.selectedPatient._id;\n\n    // if(this.context.user.role !== 'admin') {\n    //   console.log(\"No edit permission!!\");\n    //   return;\n    // }\n\n    console.log(`\n        UpdatePatientAttachmentFormData:\n      `);\n\n    this.setState({ updating: false , patientUpdateField: null });\n\n    // let attachmentName = event.target.formGridPatientAttachmentName.value;\n    let attachmentFormat = event.target.formGridPatientAttachmentFormat.value;\n    let attachmentPath = event.target.formGridPatientAttachmentPath.value;\n    let file = AuthContext._currentValue.file;\n\n    console.log(`\n      uploading to s3...\n      file.name: ${file.name},\n      AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n      `);\n    const config = {\n      bucketName: 'ent-emr-bucket',\n      dirName: attachmentPath,\n      region: 'us-east-2',\n      accessKeyId: \"AKIARFTS6Q6DALQKT4QR\",\n      secretAccessKey: \"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\",\n    }\n    const ReactS3Client = new S3(config);\n    const newFileName = file.name;\n    const attachmentName = newFileName;\n\n    ReactS3Client\n        .uploadFile(file, newFileName)\n        .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n        .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n    if (\n      attachmentName.trim().length === 0 ||\n      attachmentFormat.trim().length === 0 ||\n      attachmentPath.trim().length === 0\n    ) {\n      console.log(\"blank fields detected!!!...Please try again...\");\n      this.setState({userAlert: \"blank fields detected!!!...Please try again...\"});\n      return;\n    }\n\n    this.setState({userAlert: \"adding patient attachment\"});\n\n    const requestBody = {\n                    query:`\n                    mutation {updatePatientAttachment(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{attachmentName:\"${attachmentName}\",attachmentFormat:\"${attachmentFormat}\",attachmentPath:\"${attachmentFormat}\"})\n                    {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n            `}\n\n    fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            console.log(\"response data... \" + JSON.stringify(resData.data));\n\n            const updatedPatientId = resData.data.updatePatientAttachment._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.updatePatientAttachment);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientAttachment})\n            this.fetchPatients();\n          })\n          .catch(err => {\n            console.log(err);\n            this.setState({userAlert: err});\n          });\n\n}\n\nupdatePatientNoteHandler = (event) => {\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(`\n      UpdatePatientNoteFormData:\n      ${event.target.formGridNote.value}\n    `);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n    let note = event.target.formGridNote.value;\n\n    if (\n      note.trim().length === 0\n    ) {\n      console.log(\"Can't Submit a blank form!!!...Please try again...\");\n      this.setState({userAlert: \"Can't Submit a blank form!!!...Please try again...\"});\n      return;\n    }\n\n    this.setState({userAlert: \"adding patient note\"});\n\n    const requestBody = {\n              query:`\n              mutation {updatePatientNotes(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{notes:\"${note}\"})\n              {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n            `}\n\n    fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            console.log(\"response data... \" + JSON.stringify(resData.data));\n\n            const updatedPatientId = resData.data.updatePatientNotes._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.updatePatientNotes);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientNotes})\n            this.fetchPatients();\n          })\n          .catch(err => {\n            console.log(err);\n            this.setState({userAlert: err});\n          });\n\n}\nupdatePatientTagHandler = (event) => {\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(`\n      UpdatePatientTagFormData:\n      ${event.target.formGridTag.value}\n    `);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n    let tag = event.target.formGridTag.value;\n\n    if (\n      tag.trim().length === 0\n    ) {\n      console.log(\"Can't Submit a blank form!!!...Please try again...\");\n      this.setState({userAlert: \"Can't Submit a blank form!!!...Please try again...\"});\n      return;\n    }\n\n    const requestBody = {\n                    query:`\n                    mutation {updatePatientTags(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{tag:\"${tag}\"})\n                    {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n            `}\n    this.setState({userAlert: \"adding patient tag\"});\n\n\n    fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            console.log(\"response data... \" + JSON.stringify(resData.data));\n\n            const updatedPatientId = resData.data.updatePatientTags._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.updatePatientTags);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientTags})\n            this.fetchPatients();\n          })\n          .catch(err => {\n            console.log(err);\n            this.setState({userAlert: err});\n          });\n\n\n}\n\n\nmodalConfirmSearchHandler = (event) => {\n  console.log(\"SearchPatientForm:  \");\n\n\n  let userId = this.context.userId;\n\n    console.log(\"SearchPatientFormData:  \", event.target.formBasicField.value);\n    this.setState({ searching: false });\n\n    let field = null;\n    let query = event.target.formBasicQuery.value;\n    if (event.target.formBasicFieldSelect.value === \"select\") {\n      field = event.target.formBasicField.value;\n    } else {\n      field = event.target.formBasicFieldSelect.value;\n    }\n\n    this.setState({\n      patientSearchField: field,\n      patientSearchQuery: query,\n    })\n\n    if (\n      field.trim().length === 0 ||\n      query.trim().length === 0\n    ) {\n      console.log(\"blank fields detected!!!...Please try again...\");\n      return;\n    }\n\n\n\n    const search = { field, query }\n    console.log(\"Searching for Patient:  \", JSON.stringify(search));\n    this.setState({userAlert: \"Searching for Patient:  \"});\n\n    const requestBody = {\n      query: `\n        query {\n          getPatientField(userId: \"${userId}\", field: \"${field}\", query: \"${query}\" )\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n    const token = this.context.token;\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n        const responseAlert = JSON.stringify(resData.data).slice(2,15);\n        this.setState({userAlert: responseAlert});\n\n        const searchPatients = resData.data.getPatientField;\n\n        this.setState({ searchPatients: searchPatients})\n        console.log(\"state.searchPatients:  \", this.state.searchPatients);\n        // this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n}\n\nmodalConfirmSearchIdHandler = (event) => {\n  console.log(\"SearchPatientIdFormData\");\n\n  let userId = this.context.userId;\n  this.setState({ searching: false });\n\n  const patientId = event.target.formBasicId.value;\n\n  const requestBody = {\n    query: `\n      query {getPatientId(userId:\\\"${userId}\\\",patientId:\\\"${patientId}\\\")\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{_id,title,time,location},consultant{date,reference{_id,name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `}\n\n  const token = this.context.token;\n\n  fetch('http://localhost:10000/graphql', {\n    method: 'POST',\n    body: JSON.stringify(requestBody),\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + token\n    }\n  })\n    .then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n      return res.json();\n    })\n    .then(resData => {\n      console.log(\"response data... \" + JSON.stringify(resData));\n      const responseAlert = JSON.stringify(resData.data).slice(2,25);\n      this.setState({userAlert: responseAlert});\n\n      const searchPatients = resData.data.getPatientId;\n\n      this.setState({ searchPatients: [searchPatients]})\n      console.log(\"state.searchPatients:  \", this.state.searchPatients);\n      // this.fetchUsers();\n    })\n    .catch(err => {\n      console.log(err);\n      this.setState({userAlert: err});\n    });\n}\n\nmodalConfirmSearchVisitHandler = (event) => {\n  console.log(\"SearchPatientVisitFormData\");\n\n  let userId = this.context.userId;\n  this.setState({ searching: false });\n\n  const requestBody = {\n    query: `\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{_id,title,time,location,date},consultant{date,reference{_id,name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `}\n\n  const token = this.context.token;\n\n  fetch('http://localhost:10000/graphql', {\n    method: 'POST',\n    body: JSON.stringify(requestBody),\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + token\n    }\n  })\n    .then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n      return res.json();\n    })\n    .then(resData => {\n      console.log(\"response data... \" + JSON.stringify(resData));\n\n      const searchPatients = resData.data.getPatientId;\n\n      this.setState({ searchPatients: searchPatients})\n      console.log(\"state.searchPatients:  \", this.state.searchPatients);\n      // this.fetchUsers();\n    })\n    .catch(err => {\n      console.log(err);\n      this.setState({userAlert: err});\n    });\n\n}\n\nmodalConfirmSearchNameHandler = (event) => {\n  console.log(\"SearchPatientNameFormData:\", event.target.formBasicName.value);\n\n  let userId = this.context.userId;\n  this.setState({ searching: false });\n\n  let patients = this.state.patients;\n  const regex = new RegExp(event.target.formBasicName.value,\"i\");\n  console.log(`\n    regex: ${regex},\n    `);\n    let result = patients.filter(patient => patient.name.match(regex))\n    console.log(`\n      result: ${JSON.stringify(result)}\n      `);\n\n      this.setState({ searchPatients: result})\n\n}\n\n  getPatientVisit = (event) => {\n\n    const selectedPatient = this.state.selectedPatient;\n    event.preventDefault();\n    console.log(`\n        getUserVisit function:\n        selectedPatient.consultant: ${JSON.stringify(selectedPatient.consultant)},\n        selectedPatient.complaints: ${JSON.stringify(selectedPatient.complaints)},\n        visitDate: ${new Date(event.target.formBasicVisitDate.value)},\n        complaintDate: ${new Date(1580515200*1000)},\n      `);\n\n    let visitDate = new Date(event.target.formBasicVisitDate.value).toISOString().substring(0, 10);\n    let visitSurveys = selectedPatient.surveys.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    let visitConsultants = selectedPatient.consultant.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    let visitComplaints = selectedPatient.complaints.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    // let visitSurveys = selectedPatient.surveys.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString() === visitDate);\n    let visitVitals = selectedPatient.vitals.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    let visitExaminations = selectedPatient.examination.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    let visitHistory = selectedPatient.history.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    let visitInvestigations = selectedPatient.investigation.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    let visitDiagnosis = selectedPatient.diagnosis.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    let visitTreatments = selectedPatient.treatment.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    let visitBilling = selectedPatient.billing.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n\n      const visit = {\n        date: visitDate,\n        patientName: this.context.selectedPatient.name,\n        consultant: visitConsultants,\n        complaint: visitComplaints,\n        examination: visitExaminations,\n        survey: visitSurveys,\n        vitals: visitVitals,\n        history: visitHistory,\n        investigation: visitInvestigations,\n        diagnosis: visitDiagnosis,\n        treatment: visitTreatments,\n        billing: visitBilling,\n      };\n\n      console.log(`\n        visit: ${JSON.stringify(visit)},\n        `);\n        this.context.visit = visit;\n        this.setState({visit: visit});\n\n  }\n\n\n  modalCancelHandler = () => {\n    this.setState({ creating: false, updating: false, searching: false, selectedPatient: null });\n  };\n\n\n  fetchPatients() {\n    console.log(\"fetch patients function:  \");\n    const userId = this.context.userId;\n    const token = this.context.token;\n\n    this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n          query {patients(userId:\"${userId}\")\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{_id,title,time,location,date},consultant{date,reference{_id,name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n        `\n    };\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"resData\", resData);\n        const patients = resData.data.patients;\n        console.log(patients);\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({userAlert: responseAlert});\n\n        this.context.patients = this.state.patients;\n        if (this.isActive) {\n          this.setState({ patients: patients, isLoading: false });\n        }\n\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n        if (this.isActive) {\n          this.setState({ isLoading: false });\n        }\n      });\n  }\n\n  fetchPatientsAsc = () => {\n    console.log(\"fetch patients function:  \");\n    const userId = this.context.userId;\n    const token = this.context.token;\n\n    // this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n          query {patientsNameAsc(userId:\"${userId}\")\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{_id,title,time,location,date},consultant{date,reference{_id,name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n        `\n    };\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"resData\", resData);\n        const patients = resData.data.patientsNameAsc;\n        console.log(patients);\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({userAlert: responseAlert});\n\n        this.context.patients = patients;\n        this.setState({ patients: patients});\n        // if (this.isActive) {\n        //   this.setState({ patients: patients, isLoading: false });\n        // }\n\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n        // if (this.isActive) {\n        //   this.setState({ isLoading: false });\n        // }\n      });\n  }\n\n  fetchPatientsDesc = () => {\n    console.log(\"fetch patients function:  \");\n    const userId = this.context.userId;\n    const token = this.context.token;\n\n    // this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n          query {patientsNameDesc(userId:\"${userId}\")\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{_id,title,time,location,date},consultant{date,reference{_id,name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n        `\n    };\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"resData\", resData);\n        const patients = resData.data.patientsNameDesc;\n        console.log(patients);\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({userAlert: responseAlert});\n\n        this.context.patients = patients\n        // if (this.isActive) {\n        //   this.setState({ patients: patients, isLoading: false });\n        // }\n        this.setState({ patients: patients});\n\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n        // if (this.isActive) {\n        //   this.setState({ isLoading: false });\n        // }\n      });\n  }\n\n\n  modalDeleteHandler = () => {\n    console.log(\"deleting patient...selectedPatient:  \", this.context.selectedPatient);\n\n    const selectedPatientId = this.context.selectedPatient._id;\n    const userId = this.context.selectedUser._id;\n\n    if(this.context.user.role !== 'admin') {\n      console.log(\"Not the Admin! No edit permission!!\");\n    }\n\n    this.setState({deleting: true});\n\n\n    const requestBody = {\n      query: `\n          mutation {deletePatient(userId:\"${userId}\",patientId:\"${selectedPatientId}\")\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n        `\n    };\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        let deletedPatient = resData.data.deletePatient;\n        console.log(deletedPatient);\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({userAlert: responseAlert});\n\n        let deletedPatientId = deletedPatient._id;\n        deletedPatient = this.state.patients.find(e => e._id === deletedPatientId);\n        const deletedPatientPos = this.state.patients.indexOf(deletedPatient);\n        const slicedArray = this.state.patients.splice(deletedPatientPos, 1);\n        console.log(\"deletedPatient:  \", JSON.stringify(deletedPatient),\"  deletedUserPos:  \", deletedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.setState({ deleting: false });\n\n        this.fetchPatients();\n\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n        if (this.isActive) {\n          this.setState({ deleting: false });\n        }\n      });\n  }\n\n\n  deletePatientInsuranceItem = (props) => {\n\n    let token = this.context.token;\n    let userId = this.context.userId;\n    let patientId = this.state.selectedPatient._id;\n\n    console.log(`\n      delete patient insurance item:\n      props: ${JSON.stringify(props)},\n      token: ${token},\n      userId: ${userId},\n      patientId: ${patientId},\n      `);\n\n      const requestBody = {\n        query: `\n         mutation {deletePatientInsurance (userId:\\\"${userId}\\\", patientId:\\\"${patientId}\\\",insuranceCompany:\\\"${props.company}\\\",insuranceNumber:\"${props.number}\")\n         {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `};\n\n          fetch('http://localhost:10000/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n              'Content-Type': 'application/json',\n              Authorization: 'Bearer ' + token\n            }\n          })\n            .then(res => {\n              if (res.status !== 200 && res.status !== 201) {\n                throw new Error('Failed!');\n              }\n              return res.json();\n            })\n            .then(resData => {\n              let deletedPatient = resData.data.deletePatientInsurance;\n              console.log(deletedPatient);\n\n              const updatedPatientId = resData.data.deletePatientInsurance._id;\n              const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n              const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n              const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n              console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n              this.state.patients.push(resData.data.deletePatientInsurance);\n              this.context.patients = this.state.patients;\n              const responseAlert = JSON.stringify(resData.data).slice(2,25);\n              this.setState({ userAlert: responseAlert})\n              // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientInsurance})\n              this.fetchPatients();\n\n            })\n            .catch(err => {\n              console.log(err);\n            });\n\n  }\n\n  deletePatientConsultantItem = (props) => {\n\n    let token = this.context.token;\n    let userId = this.context.userId;\n    let patientId = this.state.selectedPatient._id;\n    let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n    console.log(`\n      delete patient consultant item:\n      props: ${JSON.stringify(props)},\n      token: ${token},\n      userId: ${userId},\n      patientId: ${patientId},\n      consultant date: ${date},\n      `);\n\n      const requestBody = {\n        query: `\n         mutation {deletePatientConsultant (userId:\\\"${userId}\\\", patientId:\\\"${patientId}\\\",consultantId:\\\"${props.reference.id}\\\",consultantDate:\\\"${date}\\\")\n         {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `};\n\n          fetch('http://localhost:10000/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n              'Content-Type': 'application/json',\n              Authorization: 'Bearer ' + token\n            }\n          })\n            .then(res => {\n              if (res.status !== 200 && res.status !== 201) {\n                throw new Error('Failed!');\n              }\n              return res.json();\n            })\n            .then(resData => {\n              let deletedPatient = resData.data.deletePatientConsultant;\n              console.log(deletedPatient);\n\n              const updatedPatientId = resData.data.deletePatientConsultant._id;\n              const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n              const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n              const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n              console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n              this.state.patients.push(resData.data.deletePatientConsultant);\n              this.context.patients = this.state.patients;\n              const responseAlert = JSON.stringify(resData.data).slice(2,25);\n              this.setState({ userAlert: responseAlert})\n              // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientConsultant})\n              this.fetchPatients();\n\n            })\n            .catch(err => {\n              console.log(err);\n            });\n}\n\ndeletePatientNextOfKinItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n\n  console.log(`\n    delete patient nextOfKin item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientNextOfKin (userId:\\\"${userId}\\\", patientId:\\\"${patientId}\\\",nextOfKinName:\\\"${props.name}\\\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientNextOfKin;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientNextOfKin._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientNextOfKin);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientNextOfKin})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientComplaintItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n  let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n  console.log(`\n    delete patient Complaint item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    complaint date: ${date},\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientComplaint (userId:\\\"${userId}\\\", patientId:\\\"${patientId}\\\",complaintTitle:\\\"${props.title}\\\",complaintDate:\\\"${date}\\\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientComplaint;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientComplaint._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientComplaint);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientComplaint})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientSurveyItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n  let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n  console.log(`\n    delete patient Survey item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    survey date: ${date}\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientSurvey (userId:\\\"${userId}\\\", patientId:\\\"${patientId}\\\",surveyTitle:\\\"${props.title}\\\",surveyDate:\\\"${date}\\\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientSurvey;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientSurvey._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientSurvey);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientSurvey})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientVitalsItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n  let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n  console.log(`\n    delete patient Vitals item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    vitals date: ${date},\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientVitals (userId:\\\"${userId}\\\", patientId:\\\"${patientId}\\\",vitalsDate:\\\"${date}\\\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientVitals;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientVitals._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientVitals);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientVitals})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientExaminationItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n  let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n  console.log(`\n    delete patient Examination item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    examination date: ${date},\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientExamination (userId:\\\"${userId}\\\", patientId:\\\"${patientId}\\\",examinationType:\\\"${props.type}\\\",examinationDate:\\\"${date}\\\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientExamination;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientExamination._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientExamination);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientExamination})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientHistoryItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n  let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n  console.log(`\n    delete patient History item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    history date: ${date},\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientHistory (userId:\\\"${userId}\\\", patientId:\\\"${patientId}\\\",historyTitle:\\\"${props.title}\\\",historyDate:\\\"${date}\\\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientHistory;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientHistory._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientHistory);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientHistory})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientAllergiesItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n\n  console.log(`\n    delete patient Allergies item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientAllergies (userId:\\\"${userId}\\\", patientId:\\\"${patientId}\\\",allergiesTitle:\\\"${props.title}\\\",allergiesType:\\\"${props.type}\\\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientAllergies;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientAllergies._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientAllergies);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientAllergies})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientMedicationItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n\n  console.log(`\n    delete patient Medication item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientMedication (userId:\\\"${userId}\\\", patientId:\\\"${patientId}\\\",medicationTitle:\\\"${props.title}\\\",medicationType:\\\"${props.type}\\\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientMedication;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientMedication._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientMedication);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientMedication})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientInvestigationItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n  let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n  console.log(`\n    delete patient Investigation item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    investigation date: ${date},\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientInvestigation (userId:\\\"${userId}\\\", patientId:\\\"${patientId}\\\",investigationDate:\\\"${date}\\\",investigationTitle:\\\"${props.title}\\\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientInvestigation;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientInvestigation._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientInvestigation);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientInvestigation})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientDiagnosisItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n  let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n  console.log(`\n    delete patient Diagnosis item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    diagnosis date: ${date}\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientDiagnosis (userId:\\\"${userId}\\\",patientId:\\\"${patientId}\\\",diagnosisDate:\\\"${date}\\\",diagnosisTitle:\\\"${props.title}\\\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientDiagnosis;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientDiagnosis._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientDiagnosis);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientDiagnosis})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientTreatmentItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n  let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n  console.log(`\n    delete patient Treatment item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    treatment date: ${date},\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientTreatment (userId:\\\"${userId}\\\", patientId:\\\"${patientId}\\\",treatmentDate:\\\"${date}\\\",treatmentTitle:\\\"${props.title}\\\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientTreatment;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientTreatment._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientTreatment);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientTreatment})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientBillingItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n  let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n  console.log(`\n    delete patient Billing item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    billing date: ${date},\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientBilling (userId:\\\"${userId}\\\", patientId:\\\"${patientId}\\\",billingDate:\\\"${date}\\\",billingTitle:\\\"${props.title}\\\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientBilling;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientBilling._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientBilling);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientBilling})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientAttachmentItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n\n  console.log(`\n    deleting from s3...\n    file.name: ${props.name},\n    `);\n\n  const config = {\n    bucketName: 'ent-emr-bucket',\n    dirName: props.path,\n    region: 'us-east-2',\n    accessKeyId: \"AKIARFTS6Q6DALQKT4QR\",\n    secretAccessKey: \"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\",\n  }\n  const ReactS3Client = new S3(config);\n  const filename = props.name;\n  // const attachmentName = newFileName;\n  //\n  S3FileUpload\n  .deleteFile(filename, config)\n  .then(response => console.log(response))\n  .catch(err => console.error(err))\n\n  console.log(`\n    delete patient Attachment item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientAttachment (userId:\\\"${userId}\\\", patientId:\\\"${patientId}\\\",attachmentName:\\\"${props.name}\\\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientAttachment;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientAttachment._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientAttachment);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientAttachment})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientNoteItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n\n  console.log(`\n    delete patient Note item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    `);\n\n    const requestBody = {\n      query: `\n\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientNextOfKin;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientNextOfKin._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientNextOfKin);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientNextOfKin})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientTagItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n\n  console.log(`\n    delete patient Tag item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    `);\n\n    const requestBody = {\n      query: `\n\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientNextOfKin;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientNextOfKin._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientNextOfKin);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientNextOfKin})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\n\n  updatePatientSpecial (event) {\n\n    console.log(\"special field to update:  \", event.target.value);\n    const field = event.target.value;\n    this.setState({ patientUpdateField: field});\n\n  }\n\n  onViewAttachment = (attachment) => {\n    console.log(`\n      setting up attachment viewer...\n      attachment: ${JSON.stringify(attachment)}\n      `);\n      this.setState({showAttachment: true})\n\n      const file = \"https://ent-emr-bucket.s3-us-east-2.amazonaws.com/\"+attachment.path+\"/\"+attachment.name;\n      const type = attachment.format;\n\n      this.setState({showThisAttachmentFile: file, showThisAttachmentType: type})\n  }\n\n  closeAttachmentView = () => {\n    console.log(`\n      closing attachment viewer...\n      `);\n      this.setState({showAttachment: false})\n  }\n\n  createPdf = (patient) => {\n    console.log(`\n        creating pdf...\n        user: ${JSON.stringify(patient)}\n      `);\n\n      const pdfData = {\n        title: patient.name,\n        body: patient.dob,\n      };\n\n    this.setState({createPdf: true, pdfData: pdfData})\n  }\n\n  closePdfCreator = () => {\n    console.log(`\n      closing pdf creator...\n      `);\n      this.setState({createPdf: false, pdfData: null} )\n  }\n\n\n  showDetailHandler = patientId => {\n\n    this.setState(prevState => {\n      const selectedPatient = prevState.patients.find(e => e._id === patientId);\n      this.context.selectedPatient = selectedPatient;\n      this.context.selectedPatientId = selectedPatient._id;\n      console.log(\"selectedPatient:  \", selectedPatient);\n      return { selectedPatient: selectedPatient };\n    });\n  };\n\n\n  componentWillUnmount() {\n    this.isActive = false;\n  }\n\n  render() {\n    return (\n\n    <React.Fragment>\n    {this.state.showAttachment === true && (\n      <AttachmentViewer\n        onCloseAttachmentView={this.closeAttachmentView}\n        attachmentFile={this.state.showThisAttachmentFile}\n        attachmentType={this.state.showThisAttachmentType}\n      />\n    )}\n\n    {this.state.createPdf === true && (\n        <PdfCreator\n          pdfData={this.state.pdfData}\n          onClosePdfCreator={this.closePdfCreator}\n        />\n    )}\n\n    <Accordion>\n\n    <Row>\n    <Col md={3} className=\"MasterCol1\">\n\n    <AlertBox\n          authUserId={this.context.userId}\n          alert={this.state.userAlert}\n        />\n      <SidebarPage/>\n    </Col>\n\n    <Col md={9} className=\"MasterCol2\">\n    <Container className=\"containerCombinedDetail\">\n    <Tabs defaultActiveKey=\"patientDetail\" id=\"uncontrolled-tab-example\">\n\n    <Tab eventKey=\"patientDetail\" title=\"Selected Patient Data:\">\n    {this.state.selectedPatient === null && (\n      <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n        Select a Patient from the Master List\n      </Button>\n    )}\n    {this.state.isLoading === false &&\n      this.state.selectedPatient !== null\n      &&\n      (<PatientDetail\n        authUserId={this.context.userId}\n        token={this.context.token}\n        patient={this.state.selectedPatient}\n        onEdit={this.startUpdatePatientHandler}\n        canDelete={this.state.canDelete}\n        onDelete={this.modalDeleteHandler}\n        onGetVisit={this.getPatientVisit}\n        visit={this.context.visit}\n        fetchUsers={this.fetchUsers}\n        consultantDelete={this.deletePatientConsultantItem}\n        insuranceDelete={this.deletePatientInsuranceItem}\n        nextOfKinDelete={this.deletePatientNextOfKinItem}\n        complaintDelete={this.deletePatientComplaintItem}\n        surveyDelete={this.deletePatientSurveyItem}\n        vitalsDelete={this.deletePatientVitalsItem}\n        examinationDelete={this.deletePatientExaminationItem}\n        historyDelete={this.deletePatientHistoryItem}\n        allergiesDelete={this.deletePatientAllergiesItem}\n        medicationDelete={this.deletePatientMedicationItem}\n        investigationDelete={this.deletePatientInvestigationItem}\n        diagnosisDelete={this.deletePatientDiagnosisItem}\n        treatmentDelete={this.deletePatientTreatmentItem}\n        billingDelete={this.deletePatientBillingItem}\n        attachmentDelete={this.deletePatientAttachmentItem}\n        noteDelete={this.deletePatientNoteItem}\n        tagDelete={this.deletePatientTagItem}\n        onViewAttachment={this.onViewAttachment}\n        onCreatePdf={this.createPdf}\n        />\n    )}\n    </Tab>\n\n    <Tab eventKey=\"patientCreate\" title=\"Create New\">\n    <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" onClick={this.startCreatePatientHandler} >Create NEW Patient Profile</Button>\n    {\n      this.state.creating && (\n        <CreatePatientForm\n        canCancel\n          canConfirm\n          onCancel={this.modalCancelHandler}\n          onConfirm={this.modalConfirmHandler}\n          confirmText=\"Confirm\"\n        />\n    )}\n    </Tab>\n\n    <Tab eventKey=\"patientEditDemographics\" title=\"Edit Demographics\">\n    {this.state.selectedPatient === null && (\n      <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n        Select a Patient from the Master List\n      </Button>\n    )}\n    {this.state.selectedPatient !== null && (\n      <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" onClick={this.startUpdatePatientHandler}>Edit Demographics</Button>\n    )}\n    {this.state.updating &&\n      this.state.selectedPatient !== null\n      && (\n      <UpdatePatientForm\n      authUserId={this.context.userId}\n      canCancel\n        canConfirm\n        onCancel={this.modalCancelHandler}\n        onConfirm={this.modalConfirmUpdateHandler}\n        confirmText=\"Confirm\"\n        patient={this.state.selectedPatient}\n      />\n    )}\n    </Tab>\n\n    <Tab eventKey=\"patientEditField\" title=\"Edit a Single Field\">\n    {this.state.selectedPatient === null && (\n      <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n        Select a Patient from the Master List\n      </Button>\n    )}\n    {this.state.selectedPatient !== null && (\n      <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" onClick={this.startUpdatePatientHandler}>Edit a Single Field</Button>\n    )}\n    {this.state.updating &&\n      this.state.selectedPatient !== null\n      && (\n        <UpdatePatientFieldForm\n          authUserId={this.context.userId}\n          canCancel\n          canConfirm\n          onCancel={this.modalCancelHandler}\n          onConfirm={this.modalConfirmUpdateFieldHandler}\n          confirmText=\"Confirm\"\n          patient={this.state.selectedPatient}\n        />\n    )}\n    </Tab>\n\n    <Tab eventKey=\"patientEditConsultant\" title=\"Add Consultant\">\n    {this.state.selectedPatient === null && (\n      <Button variant=\"outline-warning\" size=\"lg\">\n        Select a Patient from the Master List below\n      </Button>\n    )}\n    {this.state.selectedPatient !== null && (\n      <Button variant=\"outline-primary\" value='consultant' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add a Consultant</Button>\n    )}\n    {this.state.patientUpdateField === 'consultant' &&\n    this.state.selectedPatient !== null\n    && (\n      <UpdatePatientConsultantForm\n      authUserId={this.context.userId}\n      canCancel\n        canConfirm\n        onCancel={this.modalCancelHandler}\n        onConfirm={this.updatePatientConsultantHandler}\n        confirmText=\"Confirm\"\n        consultant={this.context.selectedUser}\n      />\n    )}\n    {this.state.patientUpdateField === 'consultant' &&\n    this.state.selectedPatient !== null &&\n    (\n      <Row>\n      <p>Add Consultant: {this.context.selectedUser.name}</p>\n      <p> To Paitient: {this.state.selectedPatient.name} ??</p>\n      <hr/>\n      </Row>\n    )}\n    {this.state.patientUpdateField === 'consultant' &&\n    this.state.selectedPatient !== null &&\n    (\n      <Row>\n      <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n        Select someone from the Staff page\n      </Button>\n      </Row>\n    )}\n    </Tab>\n    <Tab eventKey=\"patientEditInsurance\" title=\"Add Insurance\">\n    {this.state.selectedPatient === null && (\n      <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n        Select a Patient from the Master List\n      </Button>\n    )}\n    {this.state.selectedPatient !== null && (\n      <Button variant=\"outline-primary\" value='insurance' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Insurance</Button>\n    )}\n    {this.state.patientUpdateField === 'insurance' &&\n    this.state.selectedPatient !== null\n    && (\n      <UpdatePatientInsuranceForm\n      authUserId={this.context.userId}\n      canCancel\n        canConfirm\n        onCancel={this.modalCancelHandler}\n        onConfirm={this.updatePatientInsuranceHandler}\n        confirmText=\"Confirm\"\n        patient={this.state.selectedPatient}\n      />\n    )}\n    </Tab>\n    <Tab eventKey=\"patientEditNextOfKin\" title=\"Add NextOfKin\">\n    {this.state.selectedPatient === null && (\n      <Button variant=\"outline-warning\" size=\"lg\">\n        Select a Patient from the Master List\n      </Button>\n    )}\n    {this.state.selectedPatient !== null && (\n      <Button variant=\"outline-primary\" value='nextOfKin' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add NextOfKin</Button>\n    )}\n    {this.state.patientUpdateField === 'nextOfKin' &&\n    this.state.selectedPatient !== null\n    && (\n      <UpdatePatientNextOfKinForm\n            authUserId={this.context.userId}\n            canCancel\n              canConfirm\n              onCancel={this.modalCancelHandler}\n              onConfirm={this.updatePatientNextOfKinHandler}\n              confirmText=\"Confirm\"\n              patient={this.state.selectedPatient}\n            />\n    )}\n    </Tab>\n    <Tab eventKey=\"patientEditComplaint\" title=\"Add Complaint\">\n    {this.state.selectedPatient === null && (\n      <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n        Select a Patient from the Master List\n      </Button>\n    )}\n    {this.state.selectedPatient !== null && (\n      <Button variant=\"outline-primary\" value='complaint' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Complaint</Button>\n    )}\n    {this.state.patientUpdateField === 'complaint' &&\n    this.state.selectedPatient !== null\n    && (\n      <UpdatePatientComplaintForm\n            authUserId={this.context.userId}\n            canCancel\n              canConfirm\n              onCancel={this.modalCancelHandler}\n              onConfirm={this.updatePatientComplaintHandler}\n              confirmText=\"Confirm\"\n              patient={this.state.selectedPatient}\n            />\n    )}\n    </Tab>\n    <Tab eventKey=\"patientEditSurvey\" title=\"Add Survey\">\n    {this.state.selectedPatient === null && (\n      <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n        Select a Patient from the Master List\n      </Button>\n    )}\n    {this.state.selectedPatient !== null && (\n      <Button variant=\"outline-primary\" value='survey' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Survey</Button>\n    )}\n    {this.state.patientUpdateField === 'survey' &&\n    this.state.selectedPatient !== null\n    && (\n      <UpdatePatientSurveyForm\n            authUserId={this.context.userId}\n            canCancel\n              canConfirm\n              onCancel={this.modalCancelHandler}\n              onConfirm={this.updatePatientSurveyHandler}\n              confirmText=\"Confirm\"\n              patient={this.state.selectedPatient}\n            />\n    )}\n    </Tab>\n    <Tab eventKey=\"patientEditVitals\" title=\"Add Vitals\">\n    {this.state.selectedPatient === null && (\n      <Button variant=\"outline-warning\" size=\"lg\">\n        Select a Patient from the Master List\n      </Button>\n    )}\n    {this.state.selectedPatient !== null && (\n      <Button variant=\"outline-primary\" value='vitals' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Vitals</Button>\n    )}\n    {this.state.patientUpdateField === 'vitals' &&\n    this.state.selectedPatient !== null\n    && (\n      <UpdatePatientVitalsForm\n            authUserId={this.context.userId}\n            canCancel\n              canConfirm\n              onCancel={this.modalCancelHandler}\n              onConfirm={this.updatePatientVitalsHandler}\n              confirmText=\"Confirm\"\n              patient={this.state.selectedPatient}\n            />\n    )}\n    </Tab>\n    <Tab eventKey=\"patientEditExamination\" title=\"Add Examination\">\n    {this.state.selectedPatient === null && (\n      <Button variant=\"outline-warning\" size=\"lg\">\n        Select a Patient from the Master List\n      </Button>\n    )}\n    {this.state.selectedPatient !== null && (\n      <Button variant=\"outline-primary\" value='examintion' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Examination</Button>\n    )}\n    {this.state.patientUpdateField === 'examintion' &&\n    this.state.selectedPatient !== null\n    && (\n      <UpdatePatientExaminationForm\n            authUserId={this.context.userId}\n            canCancel\n              canConfirm\n              onCancel={this.modalCancelHandler}\n              onConfirm={this.updatePatientExaminationHandler}\n              confirmText=\"Confirm\"\n              patient={this.state.selectedPatient}\n            />\n    )}\n    </Tab>\n    <Tab eventKey=\"patientEditHistory\" title=\"Add History\">\n    {this.state.selectedPatient === null && (\n      <Button variant=\"outline-warning\" size=\"lg\">\n        Select a Patient from the Master List\n      </Button>\n    )}\n    {this.state.selectedPatient !== null && (\n      <Button variant=\"outline-primary\" value='history' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add History</Button>\n    )}\n    {this.state.patientUpdateField === 'history' &&\n    this.state.selectedPatient !== null\n    && (\n      <UpdatePatientHistoryForm\n      authUserId={this.context.userId}\n      canCancel\n        canConfirm\n        onCancel={this.modalCancelHandler}\n        onConfirm={this.updatePatientHistoryHandler}\n        confirmText=\"Confirm\"\n        patient={this.state.selectedPatient}\n      />\n    )}\n    </Tab>\n    <Tab eventKey=\"patientEditAllergies\" title=\"Add Allergies\">\n    {this.state.selectedPatient === null && (\n      <Button variant=\"outline-warning\" size=\"lg\">\n        Select a Patient from the Master List\n      </Button>\n    )}\n    {this.state.selectedPatient !== null && (\n      <Button variant=\"outline-primary\" value='allergies' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Allergies</Button>\n    )}\n    {this.state.patientUpdateField === 'allergies' &&\n    this.state.selectedPatient !== null\n    && (\n      <UpdatePatientAllergiesForm\n            authUserId={this.context.userId}\n            canCancel\n              canConfirm\n              onCancel={this.modalCancelHandler}\n              onConfirm={this.updatePatientAllergiesHandler}\n              confirmText=\"Confirm\"\n              patient={this.state.selectedPatient}\n            />\n    )}\n    </Tab>\n    <Tab eventKey=\"patientEditMedication\" title=\"Add Medication\">\n    {this.state.selectedPatient === null && (\n      <Button variant=\"outline-warning\" size=\"lg\">\n        Select a Patient from the Master List\n      </Button>\n    )}\n    {this.state.selectedPatient !== null && (\n      <Button variant=\"outline-primary\" value='medication' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Medication</Button>\n    )}\n    {this.state.patientUpdateField === 'medication' &&\n    this.state.selectedPatient !== null\n    && (\n      <UpdatePatientMedicationForm\n      authUserId={this.context.userId}\n      canCancel\n        canConfirm\n        onCancel={this.modalCancelHandler}\n        onConfirm={this.updatePatientMedicationHandler}\n        confirmText=\"Confirm\"\n        patient={this.state.selectedPatient}\n      />\n    )}\n    </Tab>\n    <Tab eventKey=\"patientEditInvestigation\" title=\"Add Investigation\">\n    {this.state.selectedPatient === null && (\n      <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n        Select a Patient from the Master List\n      </Button>\n    )}\n    {this.state.selectedPatient !== null && (\n      <Button variant=\"outline-primary\" value='investigation' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Investigation</Button>\n    )}\n    {this.state.patientUpdateField === 'investigation' &&\n    this.state.selectedPatient !== null\n    && (\n      <UpdatePatientInvestigationForm\n            authUserId={this.context.userId}\n            canCancel\n              canConfirm\n              onCancel={this.modalCancelHandler}\n              onConfirm={this.updatePatientInvestigationHandler}\n              confirmText=\"Confirm\"\n              patient={this.state.selectedPatient}\n            />\n    )}\n    </Tab>\n    <Tab eventKey=\"patientEditDiagnosis\" title=\"Add Diagnosis\">\n    {this.state.selectedPatient === null && (\n      <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n        Select a Patient from the Master List\n      </Button>\n    )}\n    {this.state.selectedPatient !== null && (\n      <Button variant=\"outline-primary\" value='diagnosis' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Diagnosis</Button>\n    )}\n    {this.state.patientUpdateField === 'diagnosis' &&\n    this.state.selectedPatient !== null\n    && (\n      <UpdatePatientDiagnosisForm\n            authUserId={this.context.userId}\n            canCancel\n              canConfirm\n              onCancel={this.modalCancelHandler}\n              onConfirm={this.updatePatientDiagnosisHandler}\n              confirmText=\"Confirm\"\n              patient={this.state.selectedPatient}\n            />\n    )}\n    </Tab>\n    <Tab eventKey=\"patientEditTreatment\" title=\"Add Treatment\">\n    {this.state.selectedPatient === null && (\n      <Button variant=\"outline-warning\" size=\"lg\">\n        Select a Patient from the Master List\n      </Button>\n    )}\n    {this.state.selectedPatient !== null && (\n      <Button variant=\"outline-primary\" value='treatment' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Treatment</Button>\n    )}\n    {this.state.patientUpdateField === 'treatment' &&\n    this.state.selectedPatient !== null\n    && (\n      <UpdatePatientTreatmentForm\n            authUserId={this.context.userId}\n            canCancel\n              canConfirm\n              onCancel={this.modalCancelHandler}\n              onConfirm={this.updatePatientTreatmentHandler}\n              confirmText=\"Confirm\"\n              patient={this.state.selectedPatient}\n            />\n    )}\n    </Tab>\n    <Tab eventKey=\"patientEditBilling\" title=\"Add Billing\">\n    {this.state.selectedPatient === null && (\n      <Button variant=\"outline-warning\" size=\"lg\">\n        Select a Patient from the Master List\n      </Button>\n    )}\n    {this.state.selectedPatient !== null && (\n      <Button variant=\"outline-primary\" value='billing' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Billing</Button>\n    )}\n    {this.state.patientUpdateField === 'billing' &&\n    this.state.selectedPatient !== null\n    && (\n      <UpdatePatientBillingForm\n            authUserId={this.context.userId}\n            canCancel\n              canConfirm\n              onCancel={this.modalCancelHandler}\n              onConfirm={this.updatePatientBillingHandler}\n              confirmText=\"Confirm\"\n              patient={this.state.selectedPatient}\n            />\n    )}\n    </Tab>\n\n    <Tab eventKey=\"patientEditAttachment\" title=\"Add Attachment\">\n    {this.state.selectedPatient === null && (\n      <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n        Select a Patient from the Master List\n      </Button>\n    )}\n    {this.state.selectedPatient !== null && (\n      <Button variant=\"outline-primary\" value='attachment' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Attachment</Button>\n    )}\n    {this.state.patientUpdateField === 'attachment' &&\n    this.state.selectedPatient !== null\n    && (\n      <UpdatePatientAttachmentForm\n            authUserId={this.context.userId}\n            canCancel\n              canConfirm\n              onCancel={this.modalCancelHandler}\n              onConfirm={this.updatePatientAttachmentHandler}\n              confirmText=\"Confirm\"\n              patient={this.state.selectedPatient}\n            />\n          )}\n    </Tab>\n    <Tab eventKey=\"patientEditNote\" title=\"Add Note\">\n    {this.state.selectedPatient === null && (\n      <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n        Select a Patient from the Master List\n      </Button>\n    )}\n    {this.state.selectedPatient !== null && (\n      <Button variant=\"outline-primary\" value='notes' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Note</Button>\n    )}\n    {this.state.patientUpdateField === 'notes' &&\n    this.state.selectedPatient !== null\n    && (\n      <UpdatePatientNoteForm\n            authUserId={this.context.userId}\n            canCancel\n              canConfirm\n              onCancel={this.modalCancelHandler}\n              onConfirm={this.updatePatientNoteHandler}\n              confirmText=\"Confirm\"\n              patient={this.state.selectedPatient}\n            />\n          )}\n    </Tab>\n    <Tab eventKey=\"patientEditTag\" title=\"Add Tag\">\n    {this.state.selectedPatient === null && (\n      <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n        Select a Patient from the Master List\n      </Button>\n    )}\n    {this.state.selectedPatient !== null && (\n      <Button variant=\"outline-primary\" value='tags' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Tag</Button>\n    )}\n    {this.state.patientUpdateField === 'tags' &&\n    this.state.selectedPatient !== null\n    && (\n      <UpdatePatientTagForm\n            authUserId={this.context.userId}\n            canCancel\n              canConfirm\n              onCancel={this.modalCancelHandler}\n              onConfirm={this.updatePatientTagHandler}\n              confirmText=\"Confirm\"\n              patient={this.state.selectedPatient}\n            />\n          )}\n    </Tab>\n\n    <Tab eventKey=\"MasterList\" title=\"MASTER LIST\">\n    <Container className=\"containerUserMasterList\">\n    <Row className=\"searchListRow\">\n    <Button variant=\"primary\" size=\"sm\" onClick={this.fetchPatientsAsc}>\n       Sort Asc\n     </Button>\n    <Button variant=\"info\" size=\"sm\" onClick={this.fetchPatientsDesc}>\n       Sort Desc\n     </Button>\n    {this.state.isLoading ? (\n      <Spinner />\n    ) : (\n      <PatientList\n        patients={this.state.patients}\n        authUserId={this.context.userId}\n        onViewDetail={this.showDetailHandler}\n      />\n    )}\n    </Row>\n    </Container>\n    </Tab>\n\n    <Tab eventKey=\"SearchInput\" title=\"Search\">\n    <Container className=\"containerSearchUserInput\">\n      {this.context.token && (\n      <Row className=\"searchUserRowAdd\">\n      <Button variant=\"primary\" onClick={this.startSearchPatientHandler}>Search</Button>\n      </Row>\n    )}\n\n    <Row className=\"searchUserRowForm\">\n    <Col md={10} className=\"searchUserColForm\">\n    <Tabs defaultActiveKey=\"Field\" id=\"uncontrolled-tab-example\">\n    <Tab eventKey=\"Search\" title=\"Search:\" disabled>\n    </Tab>\n    <Tab eventKey=\"Field\" title=\"Search by Field:\">\n    {this.state.searching !== true && (\n      <Button variant=\"outline-warning\" className=\"confirmEditButton\" size=\"lg\">\n        Click the 'Search' Button start\n      </Button>\n    )}\n    {this.state.searching === true && (\n      <SearchPatientForm\n      authUserId={this.context.userId}\n      canCancel\n        canConfirm\n        onCancel={this.modalCancelHandler}\n        onConfirm={this.modalConfirmSearchHandler}\n        confirmText=\"Search\"\n        patient={this.context.selectedPatient}\n      />\n    )}\n    </Tab>\n    <Tab eventKey=\"Id\" title=\"Search by Id:\">\n    {this.state.searching !== true && (\n      <Button variant=\"outline-warning\" className=\"confirmEditButton\" size=\"lg\">\n        Click the 'Search' Button start\n      </Button>\n    )}\n    {this.state.searching === true && (\n      <SearchPatientIdForm\n      authUserId={this.context.userId}\n      canCancel\n        canConfirm\n        onCancel={this.modalCancelHandler}\n        onConfirm={this.modalConfirmSearchIdHandler}\n        confirmText=\"Search\"\n        patient={this.context.selectedPatient}\n      />\n    )}\n    </Tab>\n    {\n    //   <Tab eventKey=\"Visit\" title=\"Visit:\">\n    // {this.state.searching === true && (\n    //   <SearchPatientVisitForm\n    //   authUserId={this.context.userId}\n    //   canCancel\n    //     canConfirm\n    //     onCancel={this.modalCancelHandler}\n    //     onConfirm={this.modalConfirmSearchVisitHandler}\n    //     confirmText=\"Search\"\n    //     patient={this.context.selectedPatient}\n    //   />\n    // )}\n    // </Tab>\n  }\n    <Tab eventKey=\"Name\" title=\"Search by Name:\">\n    {this.state.searching !== true && (\n      <Button variant=\"outline-warning\" className=\"confirmEditButton\" size=\"lg\">\n        Click the 'Search' Button start\n      </Button>\n    )}\n    {this.state.searching === true && (\n      <SearchPatientNameForm\n      authUserId={this.context.userId}\n      canCancel\n        canConfirm\n        onCancel={this.modalCancelHandler}\n        onConfirm={this.modalConfirmSearchNameHandler}\n        confirmText=\"Search\"\n        patient={this.context.selectedPatient}\n      />\n    )}\n    </Tab>\n    </Tabs>\n    </Col>\n    </Row>\n    </Container>\n    </Tab>\n\n    <Tab eventKey=\"SearchResult\" title=\"Search Results\">\n    <Container className=\"containerSearchUserResults\">\n    <Row>\n      <Card className=\"searchCard\">\n        <Card.Body className=\"searchCardBody\">\n          <Card.Title>Your Search</Card.Title>\n          <Card.Text>\n            Field: {this.state.patientSearchField}\n          </Card.Text>\n          <Card.Text>\n            Query: {this.state.patientSearchQuery}\n          </Card.Text>\n        </Card.Body>\n      </Card>\n    </Row>\n    <Row className=\"searchListRow\">\n    {\n      this.state.searchPatients !== [] &&\n      <SearchPatientList\n        searchPatients={this.state.searchPatients}\n        authUserId={this.context.userId}\n        onCancel={this.modalCancelHandler}\n          onViewDetail={this.showDetailHandler}\n      />\n    }\n    </Row>\n    </Container>\n    </Tab>\n\n    </Tabs>\n    </Container>\n\n\n\n\n\n    </Col>\n\n    <Col md={3} className=\"MasterCol3\">\n\n\n    </Col>\n    </Row>\n\n</Accordion>\n\n      </React.Fragment>\n    );\n  }\n}\n\nexport default PatientsPage;\n"]},"metadata":{},"sourceType":"module"}