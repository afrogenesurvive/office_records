{"ast":null,"code":"import _extends from\"/Users/pedrojacob/Downloads/AMR/websites/office_records/ENT_EMR/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/extends\";import _objectSpread from\"/Users/pedrojacob/Downloads/AMR/websites/office_records/ENT_EMR/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import React from'react';import Form from'react-bootstrap/Form';import Button from'react-bootstrap/Button';import Col from'react-bootstrap/Col';import Accordion from'react-bootstrap/Accordion';// import FormCheck from 'react-bootstrap/FormCheck'\n// import AuthContext from '../../context/auth-context';\nimport'./CreateUserForm.css';var UpdatePatientExaminationForm=function UpdatePatientExaminationForm(props){console.log(\"UpdatePatientExaminationForm.props:  \",_objectSpread({},props));var patient=_extends({},props.patient);console.log(\"UpdatePatientExaminationForm.props.patient:  \",_objectSpread({},patient));return React.createElement(\"div\",{className:\"UpdateFormContainer\"},React.createElement(Form,{onSubmit:props.onConfirm},React.createElement(Form.Row,null,React.createElement(Form.Group,{as:Col,controlId:\"formGridExaminationDate\"},React.createElement(Form.Label,null,\"ExaminationDate\"),React.createElement(Form.Control,{type:\"date\",placeholder:\"ExaminationDate\"})),React.createElement(Form.Group,{as:Col,controlId:\"formGridExaminationAreaSelect\"},React.createElement(Form.Label,null,\"ExaminationArea Options\"),React.createElement(Form.Control,{as:\"select\"},React.createElement(\"option\",null,\"select\"),React.createElement(\"option\",null,\"nose\"),React.createElement(\"option\",null,\"fauces\"),React.createElement(\"option\",null,\"ears\"),React.createElement(\"option\",null,\"larynx\"),React.createElement(\"option\",null,\"neck\"),React.createElement(\"option\",null,\"chest\"),React.createElement(\"option\",null,\"cvs\"),React.createElement(\"option\",null,\"abdomen\"))),React.createElement(Form.Group,{as:Col,controlId:\"formGridExaminationArea\"},React.createElement(Form.Label,null,\"ExaminationArea\"),React.createElement(Form.Control,{type:\"text\",placeholder:\"ExaminationArea\"})),React.createElement(Form.Group,{as:Col,controlId:\"formGridExaminationGeneral\"},React.createElement(Form.Label,null,\"ExaminationGeneral\"),React.createElement(Form.Control,{type:\"text\",placeholder:\"ExaminationGeneral\"}))),React.createElement(Form.Row,null,React.createElement(Form.Group,{as:Col,controlId:\"formGridExaminationType\"},React.createElement(Form.Label,null,\"ExaminationType\"),React.createElement(Form.Control,{type:\"text\",placeholder:\"ExaminationType\"})),React.createElement(Form.Group,{as:Col,controlId:\"formGridExaminationMeasure\"},React.createElement(Form.Label,null,\"ExaminationMeasure\"),React.createElement(Form.Control,{type:\"text\",placeholder:\"ExaminationMeasure\"})),React.createElement(Form.Group,{as:Col,controlId:\"formGridExaminationValue\"},React.createElement(Form.Label,null,\"ExaminationValue\"),React.createElement(Form.Control,{type:\"text\",placeholder:\"ExaminationValue\"}))),React.createElement(Form.Row,null,React.createElement(Form.Group,{as:Col,controlId:\"formGridExaminationDescription\"},React.createElement(Form.Label,null,\"ExaminationDescription\"),React.createElement(Form.Control,{as:\"textarea\",rows:\"3\",placeholder:\"ExaminationDescription\"})),React.createElement(Form.Group,{as:Col,controlId:\"formGridExaminationFollowUp\"},React.createElement(Form.Label,null,\"ExaminationFollowUp\"),React.createElement(Form.Control,{as:\"select\"},React.createElement(\"option\",null,\"true\"),React.createElement(\"option\",null,\"false\")))),React.createElement(Form.Row,null,React.createElement(Form.Group,{as:Col,controlId:\"formGridExaminationAttachmentName\"},React.createElement(Form.Label,null,\"ExaminationAttachmentName\"),React.createElement(Form.Control,{type:\"text\",placeholder:\"ExaminationAttachmentName\"})),React.createElement(Form.Group,{as:Col,controlId:\"formGridExaminationAttachmentFormat\"},React.createElement(Form.Label,null,\"ExaminationAttachmentFormat\"),React.createElement(Form.Control,{type:\"text\",placeholder:\"ExaminationAttachmentFormat\"})),React.createElement(Form.Group,{as:Col,controlId:\"formGridExaminationAttachmentPath\"},React.createElement(Form.Label,null,\"ExaminationAttachmentPath\"),React.createElement(Form.Control,{type:\"text\",placeholder:\"ExaminationAttachmentPath\"}))),props.canCancel&&React.createElement(Accordion.Toggle,{as:Button,variant:\"danger\",eventKey:\"9\",className:\"btn\",onClick:props.onCancel},\"Cancel\"),props.canConfirm&&React.createElement(Accordion.Toggle,{as:Button,variant:\"success\",eventKey:\"9\",className:\"btn\",type:\"submit\"},\"Submit\")));};export default UpdatePatientExaminationForm;","map":{"version":3,"sources":["/Users/pedrojacob/Downloads/AMR/websites/office_records/ENT_EMR/frontend/src/components/Forms/UpdatePatientExaminationForm.js"],"names":["React","Form","Button","Col","Accordion","UpdatePatientExaminationForm","props","console","log","patient","onConfirm","canCancel","onCancel","canConfirm"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Accordion from 'react-bootstrap/Accordion'\n// import FormCheck from 'react-bootstrap/FormCheck'\n// import AuthContext from '../../context/auth-context';\nimport './CreateUserForm.css';\n\nconst UpdatePatientExaminationForm = (props) => {\n\nconsole.log(\"UpdatePatientExaminationForm.props:  \", {...props});\nconst {...patient} = props.patient;\nconsole.log(\"UpdatePatientExaminationForm.props.patient:  \", {...patient});\n\n\nreturn (\n<div className=\"UpdateFormContainer\">\n<Form onSubmit={props.onConfirm}>\n<Form.Row>\n  <Form.Group as={Col} controlId=\"formGridExaminationDate\">\n    <Form.Label>ExaminationDate</Form.Label>\n    <Form.Control type=\"date\" placeholder=\"ExaminationDate\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridExaminationAreaSelect\">\n    <Form.Label>ExaminationArea Options</Form.Label>\n    <Form.Control as=\"select\">\n    <option>select</option>\n    <option>nose</option>\n    <option>fauces</option>\n    <option>ears</option>\n    <option>larynx</option>\n    <option>neck</option>\n    <option>chest</option>\n    <option>cvs</option>\n    <option>abdomen</option>\n    </Form.Control>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridExaminationArea\">\n    <Form.Label>ExaminationArea</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"ExaminationArea\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridExaminationGeneral\">\n    <Form.Label>ExaminationGeneral</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"ExaminationGeneral\"/>\n  </Form.Group>\n  </Form.Row>\n\n  <Form.Row>\n  <Form.Group as={Col} controlId=\"formGridExaminationType\">\n    <Form.Label>ExaminationType</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"ExaminationType\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridExaminationMeasure\">\n    <Form.Label>ExaminationMeasure</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"ExaminationMeasure\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridExaminationValue\">\n    <Form.Label>ExaminationValue</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"ExaminationValue\"/>\n  </Form.Group>\n  </Form.Row>\n\n  <Form.Row>\n  <Form.Group as={Col} controlId=\"formGridExaminationDescription\">\n    <Form.Label>ExaminationDescription</Form.Label>\n    <Form.Control as=\"textarea\" rows=\"3\" placeholder=\"ExaminationDescription\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridExaminationFollowUp\">\n    <Form.Label>ExaminationFollowUp</Form.Label>\n    <Form.Control as=\"select\">\n      <option>true</option>\n      <option>false</option>\n    </Form.Control>\n  </Form.Group>\n  </Form.Row>\n\n  <Form.Row>\n  <Form.Group as={Col} controlId=\"formGridExaminationAttachmentName\">\n    <Form.Label>ExaminationAttachmentName</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"ExaminationAttachmentName\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridExaminationAttachmentFormat\">\n    <Form.Label>ExaminationAttachmentFormat</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"ExaminationAttachmentFormat\"/>\n  </Form.Group>\n  <Form.Group as={Col} controlId=\"formGridExaminationAttachmentPath\">\n    <Form.Label>ExaminationAttachmentPath</Form.Label>\n    <Form.Control type=\"text\" placeholder=\"ExaminationAttachmentPath\"/>\n  </Form.Group>\n  </Form.Row>\n\n\n{props.canCancel && (\n  <Accordion.Toggle as={Button} variant=\"danger\" eventKey=\"9\" className=\"btn\" onClick={props.onCancel}>\n  Cancel\n  </Accordion.Toggle>\n)}\n\n{props.canConfirm && (\n  <Accordion.Toggle as={Button} variant=\"success\" eventKey=\"9\" className=\"btn\" type=\"submit\">\n  Submit\n  </Accordion.Toggle>\n)}\n\n</Form>\n{\n  // <AuthContext.Consumer>\n// </AuthContext.Consumer>\n}\n</div>\n\n)};\n\nexport default UpdatePatientExaminationForm;\n"]},"metadata":{},"sourceType":"module"}