{"ast":null,"code":"var _jsxFileName = \"/Users/pedrojacob/Downloads/AMR/websites/office_records/ENT_EMR/frontend/src/pages/Patients.js\";\nimport React, { Component } from 'react'; // import Form from 'react-bootstrap/Form';\n\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport Accordion from 'react-bootstrap/Accordion'; // import Modal from '../components/Modal/Modal';\n// import Backdrop from '../components/Backdrop/Backdrop';\n\nimport PatientList from '../components/Patients/PatientList/PatientList';\nimport PatientDetail from '../components/Patients/PatientDetail';\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\nimport SearchPatientList from '../components/Patients/PatientList/SearchPatientList';\nimport SearchPatientForm from '../components/Forms/SearchPatientForm';\nimport CreatePatientForm from '../components/Forms/CreatePatientForm';\nimport UpdatePatientForm from '../components/Forms/UpdatePatientForm';\nimport UpdatePatientInsuranceForm from '../components/Forms/UpdatePatientInsuranceForm'; // import UpdatePatientArrayForm from '../components/Forms/UpdatePatientArrayForm';\n\nimport './Users.css';\n\nclass PatientsPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      creating: false,\n      updating: false,\n      searching: false,\n      updatingArray: false,\n      deleting: false,\n      patients: [],\n      searchPatients: [],\n      isLoading: false,\n      selectedPatient: null,\n      patientUpdateField: null\n    };\n    this.isActive = true;\n\n    this.startCreatePatientHandler = () => {\n      this.setState({\n        creating: true\n      });\n      console.log(\"CreatePatientForm...\");\n    };\n\n    this.startUpdatePatientHandler = () => {\n      this.setState({\n        updating: true,\n        updatingArray: true\n      });\n      console.log(\"UpdatePatientForm...\");\n    };\n\n    this.startSearchPatientHandler = () => {\n      this.setState({\n        searching: true\n      });\n      console.log(\"SearchPatientForm...\");\n    };\n\n    this.modalConfirmHandler = event => {\n      console.log(\"CreatePatientFormData:  \", event.target.formGridName.value);\n      this.setState({\n        creating: false\n      });\n      const userId = this.context.userId;\n      let name = event.target.formGridName.value;\n      let dob = event.target.formGridDob.value;\n      let address = event.target.formGridAddress.value;\n      let contactPhone = event.target.formGridContactPhone.value;\n      let contactEmail = event.target.formGridContactEmail.value;\n      let registrationDate = event.target.formGridRegistrationDate.value;\n      let referringDoctorName = event.target.formGridReferringDoctorName.value;\n      let referringDoctorEmail = event.target.formGridReferringDoctorEmail.value;\n      let referringDoctorPhone = event.target.formGridReferringDoctorPhone.value;\n      let occupationRole = event.target.formGridOccupationRole.value;\n      let occupationEmployer = event.target.formGridOccupationEmployer.value;\n      let occupationEmployerContactPhone = event.target.formGridOccupationEmployerContactPhone.value;\n      let occupationEmployerContactEmail = event.target.formGridOccupationEmployerContactEmail.value;\n\n      if (name.trim().length === 0 || dob.trim().length === 0 || address.trim().length === 0 || contactPhone.trim().length === 0 || contactEmail.trim().length === 0 || registrationDate.trim().length === 0 || referringDoctorName.trim().length === 0 || referringDoctorEmail.trim().length === 0 || referringDoctorPhone.trim().length === 0 || occupationRole.trim().length === 0 || occupationEmployer.trim().length === 0 || occupationEmployerContactPhone.trim().length === 0 || occupationEmployerContactEmail.trim().length === 0) {\n        console.log(\"blank fields detected!!!...Please try again...\");\n        return;\n      }\n\n      const patient = {\n        name,\n        dob,\n        address,\n        contactPhone,\n        contactEmail,\n        registrationDate,\n        referringDoctorName,\n        referringDoctorEmail,\n        referringDoctorPhone,\n        occupationRole,\n        occupationEmployer,\n        occupationEmployerContactPhone,\n        occupationEmployerContactEmail\n      };\n      console.log(\"creating patient.. \" + JSON.stringify(patient));\n      const requestBody = {\n        query: \"\\n          mutation CreatePatient($userId: ID!, $name: String!, $dob: String!, $address: String!, $contactPhone: String!, $contactEmail: String!, $registrationDate: String!, $referringDoctorName: String!, $referringDoctorEmail: String!, $referringDoctorPhone: String!, $occupationRole: String!, $occupationEmployer: String!, $occupationEmployerContactPhone: String!, $occupationEmployerContactEmail: String!) {\\n            createPatient(userId: $userId, patientInput: { name: $name, dob: $dob, address: $address, contactPhone: $contactPhone, contactEmail: $contactEmail, registrationDate: $registrationDate, referringDoctorName: $referringDoctorName, referringDoctorEmail: $referringDoctorEmail, referringDoctorPhone: $referringDoctorPhone, occupationRole: $occupationRole, occupationEmployer: $occupationEmployer, occupationEmployerContactPhone: $occupationEmployerContactPhone, occupationEmployerContactEmail: $occupationEmployerContactEmail }) {\\n              _id\\n              name\\n              address\\n              contact{\\n                email\\n                phone\\n              }\\n              registrationDate\\n              referringDoctor\\n              {\\n                name\\n                email\\n                phone\\n              }\\n              occupation\\n              {\\n                role\\n                employer\\n                contact\\n                {\\n                  email\\n                  phone\\n                }\\n              }\\n            }\\n          }\\n        \",\n        variables: {\n          userId: userId,\n          name: name,\n          dob: dob,\n          address: address,\n          contactPhone: contactPhone,\n          contactEmail: contactEmail,\n          registrationDate: registrationDate,\n          referringDoctorName: referringDoctorName,\n          referringDoctorEmail: referringDoctorEmail,\n          referringDoctorPhone: referringDoctorPhone,\n          occupationRole: occupationRole,\n          occupationEmployer: occupationEmployer,\n          occupationEmployerContactPhone: occupationEmployerContactPhone,\n          occupationEmployerContactEmail: occupationEmployerContactEmail\n        }\n      };\n      const token = this.context.token;\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n        this.setState(prevState => {\n          const updatedPatients = [...prevState.patients];\n          updatedPatients.push({\n            _id: resData.data.createPatient._id,\n            name: resData.data.createPatient.name,\n            dob: resData.data.createPatient.dob,\n            address: resData.data.createPatient.address,\n            contact: {\n              phone: resData.data.createPatient.contactPhone,\n              email: resData.data.createPatient.contactEmail\n            },\n            registrationDate: resData.data.createPatient.registrationDate,\n            referringDoctor: {\n              name: resData.data.createPatient.referringDoctorName,\n              email: resData.data.createPatient.referringDoctorEmail,\n              phone: resData.data.createPatient.referringDoctorPhone\n            },\n            occupation: {\n              role: resData.data.createPatient.occupationRole,\n              employer: resData.data.createPatient.occupationEmployer,\n              contact: {\n                phone: resData.data.createPatient.occupationEmployerContactPhone,\n                email: resData.data.createPatient.occupationEmployerContactEmail\n              }\n            }\n          });\n          return {\n            patients: updatedPatients\n          };\n        });\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.modalCancelHandler = () => {\n      this.setState({\n        creating: false,\n        updating: false,\n        selectedPatient: null\n      });\n    };\n\n    this.modalConfirmUpdateHandler = event => {\n      if (this.context.user.role !== 'admin') {\n        console.log(\"Not the Admin! No edit permission!!\");\n      }\n\n      const userId = this.context.userId;\n      const patientId = this.context.selectedPatient._id; // console.log(\"UpdateUserFormData:  \", event);\n\n      console.log(\"UpdatePatientFormData:  \", event.target.formGridName.value);\n      this.setState({\n        updating: false\n      });\n      let name = event.target.formGridName.value;\n      let dob = event.target.formGridDob.value;\n      let address = event.target.formGridAddress.value;\n      let contactPhone = event.target.formGridContactPhone.value;\n      let contactEmail = event.target.formGridContactEmail.value;\n      let registrationDate = event.target.formGridRegistrationDate.value;\n      let referringDoctorName = event.target.formGridReferringDoctorName.value;\n      let referringDoctorEmail = event.target.formGridReferringDoctorEmail.value;\n      let referringDoctorPhone = event.target.formGridReferringDoctorPhone.value;\n      let occupationRole = event.target.formGridOccupationRole.value;\n      let occupationEmployer = event.target.formGridOccupationEmployer.value;\n      let occupationEmployerContactPhone = event.target.formGridOccupationEmployerContactPhone.value;\n      let occupationEmployerContactEmail = event.target.formGridOccupationEmployerContactEmail.value;\n\n      if (name.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        name = this.context.selectedUser.name; // return;\n      }\n\n      if (dob.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        dob = this.context.selectedUser.dob;\n      }\n\n      if (address.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        address = this.context.selectedUser.address;\n      }\n\n      if (contactPhone.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        contactPhone = this.context.selectedUser.contactPhone;\n      }\n\n      if (contactEmail.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        contactEmail = this.context.selectedUser.contactEmail;\n      }\n\n      if (registrationDate.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        registrationDate = this.context.selectedUser.registrationDate;\n      }\n\n      if (referringDoctorName.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        referringDoctorName = this.context.selectedUser.referringDoctorName;\n      }\n\n      if (referringDoctorEmail.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        referringDoctorEmail = this.context.selectedUser.referringDoctorEmail;\n      }\n\n      if (referringDoctorPhone.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        referringDoctorPhone = this.context.selectedUser.referringDoctorPhone;\n      }\n\n      if (occupationRole.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        occupationRole = this.context.selectedUser.occupationRole;\n      }\n\n      if (occupationEmployer.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        occupationEmployer = this.context.selectedUser.occupationEmployer;\n      }\n\n      if (occupationEmployerContactEmail.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        occupationEmployerContactEmail = this.context.selectedUser.occupationEmployerContactEmail;\n      }\n\n      if (occupationEmployerContactPhone.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        occupationEmployerContactPhone = this.context.selectedUser.occupationEmployerContactPhone;\n      }\n\n      const patient = {\n        name,\n        dob,\n        address,\n        contactPhone,\n        contactEmail,\n        registrationDate,\n        referringDoctorName,\n        referringDoctorEmail,\n        referringDoctorPhone,\n        occupationRole,\n        occupationEmployer,\n        occupationEmployerContactPhone,\n        occupationEmployerContactEmail\n      };\n      console.log(\"updating patient.. \" + JSON.stringify(patient));\n      const requestBody = {\n        query: \"\\n          mutation UpdatePatient($userId: ID!, $patientId: ID!, $name: String!, $dob: String!, $address: String!, $contactPhone: String!, $contactEmail: String!, $registrationDate: String!, $referringDoctorName: String!, $referringDoctorEmail: String!, $referringDoctorPhone: String!, $occupationRole: String!, $occupationEmployer: String!, $occupationEmployerContactPhone: String!, $occupationEmployerContactEmail: String!) {\\n            updatePatient(userId: $userId, patientId: $patientId, patientInput: { name: $name, dob: $dob, address: $address, contactPhone: $contactPhone, contactEmail: $contactEmail, registrationDate: $registrationDate, referringDoctorName: $referringDoctorName, referringDoctorEmail: $referringDoctorEmail, referringDoctorPhone: $referringDoctorPhone, occupationRole: $occupationRole, occupationEmployer: $occupationEmployer, occupationEmployerContactPhone: $occupationEmployerContactPhone, occupationEmployerContactEmail: $occupationEmployerContactEmail }){\\n              _id\\n              name\\n              address\\n              contact{\\n                email\\n                phone\\n              }\\n              registrationDate\\n              referringDoctor\\n              {\\n                name\\n                email\\n                phone\\n              }\\n              occupation\\n              {\\n                role\\n                employer\\n                contact\\n                {\\n                  email\\n                  phone\\n                }\\n              }\\n            }\\n          }\\n        \",\n        variables: {\n          userId: userId,\n          patientId: patientId,\n          name: name,\n          dob: dob,\n          address: address,\n          contactPhone: contactPhone,\n          contactEmail: contactEmail,\n          registrationDate: registrationDate,\n          referringDoctorName: referringDoctorName,\n          referringDoctorEmail: referringDoctorEmail,\n          referringDoctorPhone: referringDoctorPhone,\n          occupationRole: occupationRole,\n          occupationEmployer: occupationEmployer,\n          occupationEmployerContactPhone: occupationEmployerContactPhone,\n          occupationEmployerContactEmail: occupationEmployerContactEmail\n        }\n      };\n      const token = this.context.token;\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n        const updatedPatientId = resData.data.updatePatient._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push({\n          _id: resData.data.updatePatient._id,\n          name: resData.data.updatePatient.name,\n          dob: resData.data.updatePatient.dob,\n          address: resData.data.updatePatient.address,\n          contact: {\n            phone: resData.data.updatePatient.contactPhone,\n            email: resData.data.updatePatient.contactEmail\n          },\n          registrationDate: resData.data.updatePatient.registrationDate,\n          referringDoctor: {\n            name: resData.data.updatePatient.referringDoctorName,\n            email: resData.data.updatePatient.referringDoctorEmail,\n            phone: resData.data.updatePatient.referringDoctorPhone\n          },\n          occupation: {\n            role: resData.data.updatePatient.occupationRole,\n            employer: resData.data.updatePatient.occupationEmployer,\n            contact: {\n              phone: resData.data.updatePatient.occupationEmployerContactPhone,\n              email: resData.data.updatePatient.occupationEmployerContactEmail\n            }\n          }\n        });\n\n        if (this.state.updatingArray === false && this.state.updating === false) {\n          console.log(\"update and updateArray complete...now fetching users\");\n        } // this.fetchPatients();\n\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.updatePatientInsuranceHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id;\n\n      if (this.context.user.role !== 'admin') {\n        console.log(\"No edit permission!!\");\n        return;\n      }\n\n      console.log(\"UpdatePatientInsuranceFormData:  \", event.target.formGridInsuranceCompany.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let insuranceCompany = event.target.formGridInsuranceCompany.value;\n      let insuranceNumber = event.target.formGridInsuranceNumber.value;\n      let insuranceExpiry = event.target.formGridInsuranceExpiry.value;\n      let insuranceDescription = event.target.formGridInsuranceDescription.value;\n      let insuranceSubscriberCompany = event.target.formGridInsuranceSubscriberCompany.value;\n      let insuranceSubscriberDescription = event.target.formGridInsuranceSubscriberDescription.value;\n      const patientInsurance = {\n        insuranceCompany,\n        insuranceNumber,\n        insuranceExpiry,\n        insuranceDescription,\n        insuranceSubscriberCompany,\n        insuranceSubscriberDescription\n      };\n      console.log(\"\\n    adding patient insurance item...\\n    userId: \".concat(userId, \",\\n    selectedPatientId: \").concat(selectedPatientId, \",\\n    insuranceCompany: \").concat(insuranceCompany, \",\\n    insuranceNumber: \").concat(insuranceNumber, \",\\n    insuranceExpiry: \").concat(insuranceExpiry, \",\\n    insuranceDescription: \").concat(insuranceDescription, \",\\n    insuranceSubscriberCompany: \").concat(insuranceSubscriberCompany, \",\\n    insuranceSubscriberDescription: \").concat(insuranceSubscriberDescription, \",\\n    \"));\n      const requestBody = {\n        query: \"\\n        mutation {updatePatientInsurance(userId:\\\"5ddc733b96732f0818da4430\\\", patientId:\\\"5ddec3873daae9202d39199e\\\",patientInput:{insuranceCompany:\\\"unsurance\\\",insuranceNumber:\\\"777555333999\\\",insuranceDescription:\\\"we are an insecure insurance company\\\",insuranceExpiry:\\\"2021-01-05\\\",insuranceSubscriberCompany:\\\"Real-surance\\\",insuranceSubscriberDescription:\\\"for when you've tried unsurance\\\"})\\n        {_id,name,address,contact{email,phone},registrationDate,referralDate,expirationDate,referringDoctor{name,email,phone},occupation{role,employer,contact{email,phone}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{email,phone}},complaints{date,title,description,attachment{name,format,path}},examination{area,type,measure,value,description,attachment{name,format,path}},history{title,type,date,description,attachment{name,format,path}},allergies{title,description,attachment{name,format,path}},medication{title,description,attachment{name,format,path}},investigation{date,title,description,attachment{name,format,path}},diagnosis{date,title,description,attachment{name,format,path}},treatment{date,title,type,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,notes,attachment{name,format,path}}}}g\\n      \"\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientInsurance._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(updatedPatient);\n        this.context.patients = this.state.patients; // this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.modalConfirmSearchHandler = event => {\n      console.log(\"SearchPatientForm:  \");\n      let userId = this.context.userId;\n      console.log(\"SearchPatientFormData:  \", event.target.formBasicField.value);\n      this.setState({\n        searching: false\n      });\n      let field = event.target.formBasicField.value;\n      let query = event.target.formBasicQuery.value;\n\n      if (field.trim().length === 0 || query.trim().length === 0) {\n        console.log(\"blank fields detected!!!...Please try again...\");\n        return;\n      }\n\n      const search = {\n        field,\n        query\n      };\n      console.log(\"Searching for Patient:  \", JSON.stringify(search));\n      const requestBody = {\n        query: \"\\n        query GetPatientField($userId: ID!, $field: String!, $query: String!)\\n        {getPatientField(userId: $userId, field: $field, query: $query ){\\n          _id\\n          name\\n          address\\n          contact{\\n            email\\n            phone\\n          }\\n          registrationDate\\n          referralDate\\n          expirationDate\\n          referringDoctor{\\n            name\\n            email\\n            phone\\n          }\\n            occupation{\\n              role\\n              employer\\n              contact{\\n                email\\n                phone\\n              }\\n            }\\n            insurance\\n            {\\n              company\\n              number\\n              description\\n              expiry\\n              subscriber{\\n                company\\n                description\\n              }\\n            }\\n            nextOfKin{\\n              name\\n              contact{\\n                email\\n                phone\\n              }\\n            }\\n            complaints{\\n              date\\n              title\\n              description\\n              attachment{\\n                name\\n                format\\n                path\\n              }\\n            }\\n            examination{\\n              area\\n              type\\n              measure\\n              value\\n              description\\n              attachment{\\n                name\\n                format\\n                path\\n              }\\n            }\\n            history{\\n              title\\n              type\\n              date\\n              description\\n              attachment{\\n                name\\n                format\\n                path\\n              }\\n            }\\n            allergies{\\n              title\\n              description\\n              attachment{\\n                name\\n                format\\n                path\\n              }\\n            }\\n            medication{\\n              title\\n              description\\n              attachment{\\n                name\\n                format\\n                path\\n              }\\n            }\\n            investigation{\\n              date\\n              title\\n              description\\n              attachment{\\n                name\\n                format\\n                path\\n              }\\n            }\\n              diagnosis{\\n                date\\n                title\\n                description\\n                attachment{\\n                  name\\n                  format\\n                  path\\n                }\\n              }\\n              treatment{\\n                date\\n                title\\n                type\\n                description\\n                dose\\n                frequency\\n                attachment{\\n                  name\\n                  format\\n                  path\\n                }\\n              }\\n              billing{\\n                date\\n                title\\n                type\\n                description\\n                amount\\n                paid\\n                notes\\n                attachment\\n                {\\n                  name\\n                  format\\n                  path\\n                }\\n              }\\n        }\\n      }\\n      \",\n        variables: {\n          userId: userId,\n          field: field,\n          query: query\n        }\n      };\n      const token = this.context.token;\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n        const searchPatients = resData.data.getPatientField;\n        this.setState({\n          searchPatients: searchPatients\n        });\n        console.log(\"state.searchPatients:  \", this.state.searchPatients); // this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.modalCancelHandler = () => {\n      this.setState({\n        creating: false,\n        updating: false,\n        searching: false,\n        selectedPatient: null\n      });\n    };\n\n    this.modalDeleteHandler = () => {\n      console.log(\"deleting patient...selectedPatient:  \", this.context.selectedPatient);\n      const selectedPatientId = this.context.selectedPatient._id;\n\n      if (this.context.user.role !== 'admin') {\n        console.log(\"Not the Admin! No edit permission!!\");\n      }\n\n      this.setState({\n        deleting: true\n      });\n      const requestBody = {\n        query: \"\\n          mutation DeletePatient($userId: ID!, $patientId: ID!) {\\n            deletePatient(userId: $userId, patientId: $patientId) {\\n              _id\\n              name\\n              address\\n              contact{\\n                email\\n                phone\\n              }\\n              registrationDate\\n              referringDoctor\\n              {\\n                name\\n                email\\n                phone\\n              }\\n              occupation\\n              {\\n                role\\n                employer\\n                contact\\n                {\\n                  email\\n                  phone\\n                }\\n              }\\n            }\\n          }\\n        \",\n        variables: {\n          userId: this.context.userId,\n          patientId: selectedPatientId\n        }\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + this.context.token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatient;\n        console.log(deletedPatient);\n        let deletedPatientId = deletedPatient._id;\n        deletedPatient = this.state.patients.find(e => e._id === deletedPatientId);\n        const deletedPatientPos = this.state.patients.indexOf(deletedPatient);\n        const slicedArray = this.state.patients.splice(deletedPatientPos, 1);\n        console.log(\"deletedPatient:  \", JSON.stringify(deletedPatient), \"  deletedUserPos:  \", deletedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.setState({\n          deleting: false\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n\n        if (this.isActive) {\n          this.setState({\n            deleting: false\n          });\n        }\n      });\n    };\n\n    this.showDetailHandler = patientId => {\n      this.setState(prevState => {\n        const selectedPatient = prevState.patients.find(e => e._id === patientId);\n        this.context.selectedPatient = selectedPatient;\n        this.context.selectedPatientId = selectedPatient._id;\n        console.log(\"selectedPatient:  \", selectedPatient);\n        return {\n          selectedPatient: selectedPatient\n        };\n      });\n    };\n\n    this.nameElRef = React.createRef();\n    this.dobElRef = React.createRef();\n    this.addressElRef = React.createRef();\n    this.contactPhoneElRef = React.createRef();\n    this.contactEmailElRef = React.createRef();\n    this.registrationDateElRef = React.createRef();\n    this.referringDoctorNameElRef = React.createRef();\n    this.referringDoctorEmailElRef = React.createRef();\n    this.referringDoctorPhoneElRef = React.createRef();\n    this.occupationRoleElRef = React.createRef();\n    this.occupationEmployerElRef = React.createRef();\n    this.occupationEmployerContactPhoneElRef = React.createRef();\n    this.occupationEmployerContactEmailElRef = React.createRef();\n    this.nextOfKinNameELRef = React.createRef();\n    this.nextOfKinPhoneELRef = React.createRef();\n    this.nextOfKinEmailELRef = React.createRef();\n    this.insuranceCompanyELRef = React.createRef();\n    this.insuranceNumberELRef = React.createRef();\n    this.insuranceDescriptionELRef = React.createRef();\n    this.insuranceExpiryELRef = React.createRef();\n    this.insuranceSubscriberCompanyELRef = React.createRef();\n    this.insuranceSubscriberDescriptionELRef = React.createRef();\n    this.complaintDateELRef = React.createRef();\n    this.complaintTitleELRef = React.createRef();\n    this.complaintDescriptionELRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.fetchPatients();\n  }\n\n  fetchPatients() {\n    console.log(\"'fetch patients function' context object... \" + JSON.stringify(this.context));\n    const userId = this.context.userId;\n    this.setState({\n      isLoading: true\n    });\n    const requestBody = {\n      query: \"\\n          query patients($userId: ID!) {\\n            patients(userId: $userId) {\\n              _id\\n              name\\n              address\\n              contact{\\n                email\\n                phone\\n              }\\n              registrationDate\\n              referralDate\\n              expirationDate\\n              referringDoctor{\\n                name\\n                email\\n                phone\\n              }\\n                occupation{\\n                  role\\n                  employer\\n                  contact{\\n                    email\\n                    phone\\n                  }\\n                }\\n                insurance\\n                {\\n                  company\\n                  number\\n                  description\\n                  expiry\\n                  subscriber{\\n                    company\\n                    description\\n                  }\\n                }\\n                nextOfKin{\\n                  name\\n                  contact{\\n                    email\\n                    phone\\n                  }\\n                }\\n                complaints{\\n                  date\\n                  title\\n                  description\\n                  attachment{\\n                    name\\n                    format\\n                    path\\n                  }\\n                }\\n                examination{\\n                  area\\n                  type\\n                  measure\\n                  value\\n                  description\\n                  attachment{\\n                    name\\n                    format\\n                    path\\n                  }\\n                }\\n                history{\\n                  title\\n                  type\\n                  date\\n                  description\\n                  attachment{\\n                    name\\n                    format\\n                    path\\n                  }\\n                }\\n                allergies{\\n                  title\\n                  description\\n                  attachment{\\n                    name\\n                    format\\n                    path\\n                  }\\n                }\\n                medication{\\n                  title\\n                  description\\n                  attachment{\\n                    name\\n                    format\\n                    path\\n                  }\\n                }\\n                investigation{\\n                  date\\n                  title\\n                  description\\n                  attachment{\\n                    name\\n                    format\\n                    path\\n                  }\\n                }\\n                  diagnosis{\\n                    date\\n                    title\\n                    description\\n                    attachment{\\n                      name\\n                      format\\n                      path\\n                    }\\n                  }\\n                  treatment{\\n                    date\\n                    title\\n                    type\\n                    description\\n                    dose\\n                    frequency\\n                    attachment{\\n                      name\\n                      format\\n                      path\\n                    }\\n                  }\\n                  billing{\\n                    date\\n                    title\\n                    type\\n                    description\\n                    amount\\n                    paid\\n                    notes\\n                    attachment\\n                    {\\n                      name\\n                      format\\n                      path\\n                    }\\n                  }\\n            }\\n          }\\n        \",\n      variables: {\n        userId: userId\n      }\n    };\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    }).then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n\n      return res.json();\n    }).then(resData => {\n      const patients = resData.data.patients;\n      console.log(patients);\n      this.context.patients = this.state.patients;\n\n      if (this.isActive) {\n        this.setState({\n          patients: patients,\n          isLoading: false\n        });\n      }\n    }).catch(err => {\n      console.log(err);\n\n      if (this.isActive) {\n        this.setState({\n          isLoading: false\n        });\n      }\n    });\n  }\n\n  updatePatientSpecial(event) {\n    console.log(\"special field to update:  \", event.target.value);\n    const field = event.target.value;\n    this.setState({\n      patientUpdateField: field\n    });\n  }\n\n  componentWillUnmount() {\n    this.isActive = false;\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1041\n      },\n      __self: this\n    }, React.createElement(Accordion, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1042\n      },\n      __self: this\n    }, React.createElement(Container, {\n      className: \"containerUserDetail\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1044\n      },\n      __self: this\n    }, React.createElement(Row, {\n      className: \"createUserRowAdd\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1046\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 4,\n      className: \"createUserColAdd\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1047\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1048\n      },\n      __self: this\n    }, \"Patient Detail\")), React.createElement(Col, {\n      md: 6,\n      className: \"createUserColAdd\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1050\n      },\n      __self: this\n    }, React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: \"6\",\n      className: \"btn\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1051\n      },\n      __self: this\n    }, \"Details\"))), React.createElement(Accordion.Collapse, {\n      eventKey: \"6\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1057\n      },\n      __self: this\n    }, React.createElement(Row, {\n      className: \"createUserRowForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1058\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 11,\n      className: \"createUserColForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1059\n      },\n      __self: this\n    }, this.state.isLoading === false && this.state.selectedPatient !== null && React.createElement(PatientDetail, {\n      authUserId: this.context.userId,\n      patient: this.state.selectedPatient,\n      onEdit: this.startUpdatePatientHandler,\n      onDelete: this.modalDeleteHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1063\n      },\n      __self: this\n    }))))), React.createElement(Container, {\n      className: \"containerCreateuser\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1076\n      },\n      __self: this\n    }, React.createElement(Row, {\n      className: \"createUserRowAdd\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1077\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 4,\n      className: \"createUserColAdd\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1078\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1079\n      },\n      __self: this\n    }, \"Add New Patient\")), React.createElement(Col, {\n      md: 8,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1081\n      },\n      __self: this\n    }, this.context.token && React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: \"7\",\n      className: \"btn\",\n      onClick: this.startCreatePatientHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1083\n      },\n      __self: this\n    }, \"Add\"))), React.createElement(Accordion.Collapse, {\n      eventKey: \"7\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1090\n      },\n      __self: this\n    }, React.createElement(Row, {\n      className: \"createUserRowForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1091\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 12,\n      className: \"createUserColForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1092\n      },\n      __self: this\n    }, this.state.creating && React.createElement(CreatePatientForm, {\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmHandler,\n      onSubmit: this.modalConfirmHandler,\n      confirmText: \"Confirm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1095\n      },\n      __self: this\n    })))), React.createElement(Row, {\n      className: \"updateUserRowAdd\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1109\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 4,\n      className: \"updateUserCol\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1110\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1111\n      },\n      __self: this\n    }, \"Edit Selected Patient\")), React.createElement(Col, {\n      md: 4,\n      className: \"updateUserCol\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1113\n      },\n      __self: this\n    }, this.context.token && React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: \"8\",\n      className: \"btn\",\n      onClick: this.startUpdatePatientHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1115\n      },\n      __self: this\n    }, \"Basic Info & Demographics\"))), React.createElement(Row, {\n      className: \"createUserRowAdd\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1122\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 3,\n      className: \"updateUserCol2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1123\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1124\n      },\n      __self: this\n    }, \"Edit Selected Patient\")), React.createElement(Col, {\n      md: 9,\n      className: \"updateUserCol2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1126\n      },\n      __self: this\n    }, this.context.token && React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: \"9\",\n      className: \"btn\",\n      value: \"insurance\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1128\n      },\n      __self: this\n    }, \"Insurance\"), this.context.token && React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: \"9\",\n      className: \"btn\",\n      value: \"nextOfKin\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1133\n      },\n      __self: this\n    }, \"Next Of Kin\"))), React.createElement(Accordion.Collapse, {\n      eventKey: \"8\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1140\n      },\n      __self: this\n    }, React.createElement(Row, {\n      className: \"updateUserRowForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1141\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 10,\n      className: \"updateUserColForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1142\n      },\n      __self: this\n    }, this.state.updating && this.state.selectedPatient !== null && React.createElement(UpdatePatientForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmUpdateHandler,\n      confirmText: \"Confirm\",\n      patient: this.context.selectePatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1146\n      },\n      __self: this\n    })))), React.createElement(Accordion.Collapse, {\n      eventKey: \"9\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1160\n      },\n      __self: this\n    }, React.createElement(Row, {\n      className: \"updateUserRowForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1161\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 10,\n      className: \"updateUserColForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1162\n      },\n      __self: this\n    }, this.state.patientUpdateField === 'insurance' && this.state.selectedPatient !== null && React.createElement(UpdatePatientInsuranceForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientInsuranceHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1166\n      },\n      __self: this\n    }), this.state.patientUpdateField === 'nextOfKin' && this.state.selectedPatient !== null && React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1179\n      },\n      __self: this\n    }, \"nextOfKin\"))))), React.createElement(Container, {\n      className: \"containerSearchuser\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1189\n      },\n      __self: this\n    }, React.createElement(Row, {\n      className: \"createUserRowAdd\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1190\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 4,\n      className: \"createUserColAdd\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1191\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1192\n      },\n      __self: this\n    }, \"Search for a Patient\")), React.createElement(Col, {\n      md: 8,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1194\n      },\n      __self: this\n    }, this.context.token && React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: \"10\",\n      className: \"btn\",\n      onClick: this.startSearchPatientHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1196\n      },\n      __self: this\n    }, \"Search\"))), React.createElement(Accordion.Collapse, {\n      eventKey: \"10\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1204\n      },\n      __self: this\n    }, React.createElement(Row, {\n      className: \"createUserRowForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1205\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 10,\n      className: \"createUserColForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1206\n      },\n      __self: this\n    }, this.state.searching === true && React.createElement(SearchPatientForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmSearchHandler,\n      confirmText: \"Search\",\n      patient: this.context.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1209\n      },\n      __self: this\n    })), React.createElement(Col, {\n      md: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1220\n      },\n      __self: this\n    })))), React.createElement(Accordion.Collapse, {\n      eventKey: \"10\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1227\n      },\n      __self: this\n    }, React.createElement(Container, {\n      className: \"containerSearchuser\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1228\n      },\n      __self: this\n    }, React.createElement(Row, {\n      className: \"searchListRow\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1229\n      },\n      __self: this\n    }, this.state.searchPatients !== [] && React.createElement(SearchPatientList, {\n      searchPatients: this.state.searchPatients,\n      authUserId: this.context.userId,\n      onCancel: this.modalCancelHandler,\n      onViewDetail: this.showDetailHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1232\n      },\n      __self: this\n    })))), React.createElement(Container, {\n      className: \"containerSearchuser\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1244\n      },\n      __self: this\n    }, React.createElement(Row, {\n      className: \"searchListRow\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1245\n      },\n      __self: this\n    }, this.state.isLoading ? React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1248\n      },\n      __self: this\n    }) : React.createElement(PatientList, {\n      patients: this.state.patients,\n      authUserId: this.context.userId,\n      onViewDetail: this.showDetailHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1250\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nPatientsPage.contextType = AuthContext;\nexport default PatientsPage;","map":{"version":3,"sources":["/Users/pedrojacob/Downloads/AMR/websites/office_records/ENT_EMR/frontend/src/pages/Patients.js"],"names":["React","Component","Container","Row","Col","Button","Accordion","PatientList","PatientDetail","Spinner","AuthContext","SearchPatientList","SearchPatientForm","CreatePatientForm","UpdatePatientForm","UpdatePatientInsuranceForm","PatientsPage","constructor","props","state","creating","updating","searching","updatingArray","deleting","patients","searchPatients","isLoading","selectedPatient","patientUpdateField","isActive","startCreatePatientHandler","setState","console","log","startUpdatePatientHandler","startSearchPatientHandler","modalConfirmHandler","event","target","formGridName","value","userId","context","name","dob","formGridDob","address","formGridAddress","contactPhone","formGridContactPhone","contactEmail","formGridContactEmail","registrationDate","formGridRegistrationDate","referringDoctorName","formGridReferringDoctorName","referringDoctorEmail","formGridReferringDoctorEmail","referringDoctorPhone","formGridReferringDoctorPhone","occupationRole","formGridOccupationRole","occupationEmployer","formGridOccupationEmployer","occupationEmployerContactPhone","formGridOccupationEmployerContactPhone","occupationEmployerContactEmail","formGridOccupationEmployerContactEmail","trim","length","patient","JSON","stringify","requestBody","query","variables","token","fetch","method","body","headers","Authorization","then","res","status","Error","json","resData","prevState","updatedPatients","push","_id","data","createPatient","contact","phone","email","referringDoctor","occupation","role","employer","catch","err","modalCancelHandler","modalConfirmUpdateHandler","user","patientId","selectedUser","updatedPatientId","updatePatient","updatedPatient","find","e","updatedPatientPos","indexOf","slicedArray","splice","updatePatientInsuranceHandler","selectedPatientId","formGridInsuranceCompany","insuranceCompany","insuranceNumber","formGridInsuranceNumber","insuranceExpiry","formGridInsuranceExpiry","insuranceDescription","formGridInsuranceDescription","insuranceSubscriberCompany","formGridInsuranceSubscriberCompany","insuranceSubscriberDescription","formGridInsuranceSubscriberDescription","patientInsurance","updatePatientInsurance","modalConfirmSearchHandler","formBasicField","field","formBasicQuery","search","getPatientField","modalDeleteHandler","deletedPatient","deletePatient","deletedPatientId","deletedPatientPos","fetchPatients","showDetailHandler","nameElRef","createRef","dobElRef","addressElRef","contactPhoneElRef","contactEmailElRef","registrationDateElRef","referringDoctorNameElRef","referringDoctorEmailElRef","referringDoctorPhoneElRef","occupationRoleElRef","occupationEmployerElRef","occupationEmployerContactPhoneElRef","occupationEmployerContactEmailElRef","nextOfKinNameELRef","nextOfKinPhoneELRef","nextOfKinEmailELRef","insuranceCompanyELRef","insuranceNumberELRef","insuranceDescriptionELRef","insuranceExpiryELRef","insuranceSubscriberCompanyELRef","insuranceSubscriberDescriptionELRef","complaintDateELRef","complaintTitleELRef","complaintDescriptionELRef","componentDidMount","updatePatientSpecial","componentWillUnmount","render","bind","selectePatient","contextType"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n// import Form from 'react-bootstrap/Form';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Button from 'react-bootstrap/Button';\nimport Accordion from 'react-bootstrap/Accordion';\n\n// import Modal from '../components/Modal/Modal';\n// import Backdrop from '../components/Backdrop/Backdrop';\nimport PatientList from '../components/Patients/PatientList/PatientList';\nimport PatientDetail from '../components/Patients/PatientDetail';\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\nimport SearchPatientList from '../components/Patients/PatientList/SearchPatientList';\nimport SearchPatientForm from '../components/Forms/SearchPatientForm';\n\nimport CreatePatientForm from '../components/Forms/CreatePatientForm';\nimport UpdatePatientForm from '../components/Forms/UpdatePatientForm';\nimport UpdatePatientInsuranceForm from '../components/Forms/UpdatePatientInsuranceForm';\n// import UpdatePatientArrayForm from '../components/Forms/UpdatePatientArrayForm';\nimport './Users.css';\n\nclass PatientsPage extends Component {\n  state = {\n    creating: false,\n    updating: false,\n    searching: false,\n    updatingArray: false,\n    deleting: false,\n    patients: [],\n    searchPatients: [],\n    isLoading: false,\n    selectedPatient: null,\n    patientUpdateField: null,\n  };\n  isActive = true;\n\n  static contextType = AuthContext;\n\n  constructor(props) {\n    super(props);\n    this.nameElRef = React.createRef();\n    this.dobElRef = React.createRef();\n    this.addressElRef = React.createRef();\n    this.contactPhoneElRef = React.createRef();\n    this.contactEmailElRef = React.createRef();\n    this.registrationDateElRef = React.createRef();\n    this.referringDoctorNameElRef = React.createRef();\n    this.referringDoctorEmailElRef = React.createRef();\n    this.referringDoctorPhoneElRef = React.createRef();\n    this.occupationRoleElRef = React.createRef();\n    this.occupationEmployerElRef = React.createRef();\n    this.occupationEmployerContactPhoneElRef = React.createRef();\n    this.occupationEmployerContactEmailElRef = React.createRef();\n    this.nextOfKinNameELRef = React.createRef();\n    this.nextOfKinPhoneELRef = React.createRef();\n    this.nextOfKinEmailELRef = React.createRef();\n    this.insuranceCompanyELRef = React.createRef();\n    this.insuranceNumberELRef = React.createRef();\n    this.insuranceDescriptionELRef = React.createRef();\n    this.insuranceExpiryELRef = React.createRef();\n    this.insuranceSubscriberCompanyELRef = React.createRef();\n    this.insuranceSubscriberDescriptionELRef = React.createRef();\n    this.complaintDateELRef = React.createRef();\n    this.complaintTitleELRef = React.createRef();\n    this.complaintDescriptionELRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.fetchPatients();\n  }\n\n\n  startCreatePatientHandler = () => {\n    this.setState({ creating: true });\n    console.log(\"CreatePatientForm...\");\n  };\n  startUpdatePatientHandler = () => {\n    this.setState({ updating: true, updatingArray: true });\n    console.log(\"UpdatePatientForm...\");\n  };\n  startSearchPatientHandler = () => {\n    this.setState({ searching: true });\n    console.log(\"SearchPatientForm...\");\n  };\n\n  modalConfirmHandler = (event) => {\n\n    console.log(\"CreatePatientFormData:  \", event.target.formGridName.value);\n\n    this.setState({ creating: false });\n    const userId = this.context.userId;\n\n    let name = event.target.formGridName.value;\n    let dob = event.target.formGridDob.value;\n    let address = event.target.formGridAddress.value;\n    let contactPhone = event.target.formGridContactPhone.value;\n    let contactEmail = event.target.formGridContactEmail.value;\n    let registrationDate = event.target.formGridRegistrationDate.value;\n    let referringDoctorName = event.target.formGridReferringDoctorName.value;\n    let referringDoctorEmail = event.target.formGridReferringDoctorEmail.value;\n    let referringDoctorPhone = event.target.formGridReferringDoctorPhone.value;\n    let occupationRole = event.target.formGridOccupationRole.value;\n    let occupationEmployer = event.target.formGridOccupationEmployer.value;\n    let occupationEmployerContactPhone = event.target.formGridOccupationEmployerContactPhone.value;\n    let occupationEmployerContactEmail = event.target.formGridOccupationEmployerContactEmail.value;\n\n    if (\n      name.trim().length === 0 ||\n      dob.trim().length === 0 ||\n      address.trim().length === 0 ||\n      contactPhone.trim().length === 0 ||\n      contactEmail.trim().length === 0 ||\n      registrationDate.trim().length === 0 ||\n      referringDoctorName.trim().length === 0 ||\n      referringDoctorEmail.trim().length === 0 ||\n      referringDoctorPhone.trim().length === 0 ||\n      occupationRole.trim().length === 0 ||\n      occupationEmployer.trim().length === 0 ||\n      occupationEmployerContactPhone.trim().length === 0 ||\n      occupationEmployerContactEmail.trim().length === 0\n\n    ) {\n      console.log(\"blank fields detected!!!...Please try again...\");\n      return;\n    }\n\n    const patient = { name, dob, address, contactPhone, contactEmail, registrationDate, referringDoctorName, referringDoctorEmail, referringDoctorPhone, occupationRole, occupationEmployer, occupationEmployerContactPhone, occupationEmployerContactEmail };\n    console.log(\"creating patient.. \" + JSON.stringify(patient));\n\n    const requestBody = {\n      query: `\n          mutation CreatePatient($userId: ID!, $name: String!, $dob: String!, $address: String!, $contactPhone: String!, $contactEmail: String!, $registrationDate: String!, $referringDoctorName: String!, $referringDoctorEmail: String!, $referringDoctorPhone: String!, $occupationRole: String!, $occupationEmployer: String!, $occupationEmployerContactPhone: String!, $occupationEmployerContactEmail: String!) {\n            createPatient(userId: $userId, patientInput: { name: $name, dob: $dob, address: $address, contactPhone: $contactPhone, contactEmail: $contactEmail, registrationDate: $registrationDate, referringDoctorName: $referringDoctorName, referringDoctorEmail: $referringDoctorEmail, referringDoctorPhone: $referringDoctorPhone, occupationRole: $occupationRole, occupationEmployer: $occupationEmployer, occupationEmployerContactPhone: $occupationEmployerContactPhone, occupationEmployerContactEmail: $occupationEmployerContactEmail }) {\n              _id\n              name\n              address\n              contact{\n                email\n                phone\n              }\n              registrationDate\n              referringDoctor\n              {\n                name\n                email\n                phone\n              }\n              occupation\n              {\n                role\n                employer\n                contact\n                {\n                  email\n                  phone\n                }\n              }\n            }\n          }\n        `,\n        variables: {\n          userId: userId,\n          name: name,\n          dob: dob,\n          address: address,\n          contactPhone: contactPhone,\n          contactEmail: contactEmail,\n          registrationDate: registrationDate,\n          referringDoctorName: referringDoctorName,\n          referringDoctorEmail: referringDoctorEmail,\n          referringDoctorPhone: referringDoctorPhone,\n          occupationRole: occupationRole,\n          occupationEmployer: occupationEmployer,\n          occupationEmployerContactPhone: occupationEmployerContactPhone,\n          occupationEmployerContactEmail: occupationEmployerContactEmail\n        }\n    };\n\n    const token = this.context.token;\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n\n        this.setState(prevState => {\n          const updatedPatients = [...prevState.patients];\n          updatedPatients.push(\n            {\n            _id: resData.data.createPatient._id,\n            name: resData.data.createPatient.name,\n            dob: resData.data.createPatient.dob,\n            address: resData.data.createPatient.address,\n            contact:{\n              phone: resData.data.createPatient.contactPhone,\n              email: resData.data.createPatient.contactEmail\n            },\n            registrationDate: resData.data.createPatient.registrationDate,\n            referringDoctor: {\n              name: resData.data.createPatient.referringDoctorName,\n              email: resData.data.createPatient.referringDoctorEmail,\n              phone: resData.data.createPatient.referringDoctorPhone,\n            },\n            occupation: {\n              role: resData.data.createPatient.occupationRole,\n              employer: resData.data.createPatient.occupationEmployer,\n              contact: {\n                phone: resData.data.createPatient.occupationEmployerContactPhone,\n                email: resData.data.createPatient.occupationEmployerContactEmail\n              }\n            }\n          }\n        );\n\n          return { patients: updatedPatients };\n        });\n\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  modalCancelHandler = () => {\n    this.setState({ creating: false, updating: false, selectedPatient: null });\n  };\n\n\n  modalConfirmUpdateHandler = (event) => {\n\n    if(this.context.user.role !== 'admin') {\n      console.log(\"Not the Admin! No edit permission!!\");\n\n    }\n\n    const userId = this.context.userId;\n    const patientId = this.context.selectedPatient._id;\n\n    // console.log(\"UpdateUserFormData:  \", event);\n    console.log(\"UpdatePatientFormData:  \", event.target.formGridName.value);\n\n\n    this.setState({ updating: false });\n    let name = event.target.formGridName.value;\n    let dob = event.target.formGridDob.value;\n    let address = event.target.formGridAddress.value;\n    let contactPhone = event.target.formGridContactPhone.value;\n    let contactEmail = event.target.formGridContactEmail.value;\n    let registrationDate = event.target.formGridRegistrationDate.value;\n    let referringDoctorName = event.target.formGridReferringDoctorName.value;\n    let referringDoctorEmail = event.target.formGridReferringDoctorEmail.value;\n    let referringDoctorPhone = event.target.formGridReferringDoctorPhone.value;\n    let occupationRole = event.target.formGridOccupationRole.value;\n    let occupationEmployer = event.target.formGridOccupationEmployer.value;\n    let occupationEmployerContactPhone = event.target.formGridOccupationEmployerContactPhone.value;\n    let occupationEmployerContactEmail = event.target.formGridOccupationEmployerContactEmail.value;\n\n\n    if (name.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      name  = this.context.selectedUser.name;\n      // return;\n    }\n    if (dob.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      dob  = this.context.selectedUser.dob;\n    }\n    if (address.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      address  = this.context.selectedUser.address;\n    }\n    if (contactPhone.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      contactPhone  = this.context.selectedUser.contactPhone;\n    }\n    if (contactEmail.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      contactEmail  = this.context.selectedUser.contactEmail;\n    }\n    if (registrationDate.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      registrationDate  = this.context.selectedUser.registrationDate;\n    }\n    if (referringDoctorName.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      referringDoctorName  = this.context.selectedUser.referringDoctorName;\n    }\n    if (referringDoctorEmail.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      referringDoctorEmail  = this.context.selectedUser.referringDoctorEmail;\n    }\n    if (referringDoctorPhone.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      referringDoctorPhone  = this.context.selectedUser.referringDoctorPhone;\n    }\n    if (occupationRole.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      occupationRole  = this.context.selectedUser.occupationRole;\n    }\n    if (occupationEmployer.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      occupationEmployer  = this.context.selectedUser.occupationEmployer;\n    }\n    if (occupationEmployerContactEmail.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      occupationEmployerContactEmail  = this.context.selectedUser.occupationEmployerContactEmail;\n    }\n    if (occupationEmployerContactPhone.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      occupationEmployerContactPhone  = this.context.selectedUser.occupationEmployerContactPhone;\n    }\n\n\n    const patient = { name, dob, address, contactPhone, contactEmail, registrationDate, referringDoctorName, referringDoctorEmail, referringDoctorPhone, occupationRole, occupationEmployer, occupationEmployerContactPhone, occupationEmployerContactEmail};\n    console.log(\"updating patient.. \" + JSON.stringify(patient));\n\n    const requestBody = {\n      query: `\n          mutation UpdatePatient($userId: ID!, $patientId: ID!, $name: String!, $dob: String!, $address: String!, $contactPhone: String!, $contactEmail: String!, $registrationDate: String!, $referringDoctorName: String!, $referringDoctorEmail: String!, $referringDoctorPhone: String!, $occupationRole: String!, $occupationEmployer: String!, $occupationEmployerContactPhone: String!, $occupationEmployerContactEmail: String!) {\n            updatePatient(userId: $userId, patientId: $patientId, patientInput: { name: $name, dob: $dob, address: $address, contactPhone: $contactPhone, contactEmail: $contactEmail, registrationDate: $registrationDate, referringDoctorName: $referringDoctorName, referringDoctorEmail: $referringDoctorEmail, referringDoctorPhone: $referringDoctorPhone, occupationRole: $occupationRole, occupationEmployer: $occupationEmployer, occupationEmployerContactPhone: $occupationEmployerContactPhone, occupationEmployerContactEmail: $occupationEmployerContactEmail }){\n              _id\n              name\n              address\n              contact{\n                email\n                phone\n              }\n              registrationDate\n              referringDoctor\n              {\n                name\n                email\n                phone\n              }\n              occupation\n              {\n                role\n                employer\n                contact\n                {\n                  email\n                  phone\n                }\n              }\n            }\n          }\n        `,\n        variables: {\n          userId: userId,\n          patientId: patientId,\n          name: name,\n          dob: dob,\n          address: address,\n          contactPhone: contactPhone,\n          contactEmail: contactEmail,\n          registrationDate: registrationDate,\n          referringDoctorName: referringDoctorName,\n          referringDoctorEmail: referringDoctorEmail,\n          referringDoctorPhone: referringDoctorPhone,\n          occupationRole: occupationRole,\n          occupationEmployer: occupationEmployer,\n          occupationEmployerContactPhone: occupationEmployerContactPhone,\n          occupationEmployerContactEmail: occupationEmployerContactEmail\n        }\n    };\n\n    const token = this.context.token;\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n\n        const updatedPatientId = resData.data.updatePatient._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(\n          {\n          _id: resData.data.updatePatient._id,\n          name: resData.data.updatePatient.name,\n          dob: resData.data.updatePatient.dob,\n          address: resData.data.updatePatient.address,\n          contact:{\n            phone: resData.data.updatePatient.contactPhone,\n            email: resData.data.updatePatient.contactEmail\n          },\n          registrationDate: resData.data.updatePatient.registrationDate,\n          referringDoctor: {\n            name: resData.data.updatePatient.referringDoctorName,\n            email: resData.data.updatePatient.referringDoctorEmail,\n            phone: resData.data.updatePatient.referringDoctorPhone,\n          },\n          occupation: {\n            role: resData.data.updatePatient.occupationRole,\n            employer: resData.data.updatePatient.occupationEmployer,\n            contact: {\n              phone: resData.data.updatePatient.occupationEmployerContactPhone,\n              email: resData.data.updatePatient.occupationEmployerContactEmail\n            }\n          }\n        }\n        );\n\n        if (this.state.updatingArray === false && this.state.updating === false) {\n          console.log(\"update and updateArray complete...now fetching users\");\n\n        }\n        // this.fetchPatients();\n\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\nupdatePatientInsuranceHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n  if(\n    this.context.user.role !== 'admin'\n  ) {\n    console.log(\"No edit permission!!\");\n    return;\n  }\n\n  console.log(\"UpdatePatientInsuranceFormData:  \", event.target.formGridInsuranceCompany.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let insuranceCompany = event.target.formGridInsuranceCompany.value;\n  let insuranceNumber = event.target.formGridInsuranceNumber.value;\n  let insuranceExpiry = event.target.formGridInsuranceExpiry.value;\n  let insuranceDescription = event.target.formGridInsuranceDescription.value;\n  let insuranceSubscriberCompany = event.target.formGridInsuranceSubscriberCompany.value;\n  let insuranceSubscriberDescription = event.target.formGridInsuranceSubscriberDescription.value;\n\n  const patientInsurance = { insuranceCompany, insuranceNumber, insuranceExpiry, insuranceDescription, insuranceSubscriberCompany, insuranceSubscriberDescription };\n  console.log(`\n    adding patient insurance item...\n    userId: ${userId},\n    selectedPatientId: ${selectedPatientId},\n    insuranceCompany: ${insuranceCompany},\n    insuranceNumber: ${insuranceNumber},\n    insuranceExpiry: ${insuranceExpiry},\n    insuranceDescription: ${insuranceDescription},\n    insuranceSubscriberCompany: ${insuranceSubscriberCompany},\n    insuranceSubscriberDescription: ${insuranceSubscriberDescription},\n    `);\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientInsurance(userId:\\\"5ddc733b96732f0818da4430\\\", patientId:\\\"5ddec3873daae9202d39199e\\\",patientInput:{insuranceCompany:\\\"unsurance\\\",insuranceNumber:\\\"777555333999\\\",insuranceDescription:\\\"we are an insecure insurance company\\\",insuranceExpiry:\\\"2021-01-05\\\",insuranceSubscriberCompany:\\\"Real-surance\\\",insuranceSubscriberDescription:\\\"for when you've tried unsurance\\\"})\n        {_id,name,address,contact{email,phone},registrationDate,referralDate,expirationDate,referringDoctor{name,email,phone},occupation{role,employer,contact{email,phone}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{email,phone}},complaints{date,title,description,attachment{name,format,path}},examination{area,type,measure,value,description,attachment{name,format,path}},history{title,type,date,description,attachment{name,format,path}},allergies{title,description,attachment{name,format,path}},medication{title,description,attachment{name,format,path}},investigation{date,title,description,attachment{name,format,path}},diagnosis{date,title,description,attachment{name,format,path}},treatment{date,title,type,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,notes,attachment{name,format,path}}}}g\n      `\n    };\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData.data));\n\n          const updatedPatientId = resData.data.updatePatientInsurance._id;\n          const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n          const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n          const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n          console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n          this.state.patients.push(updatedPatient);\n          this.context.patients = this.state.patients;\n          // this.fetchPatients();\n        })\n        .catch(err => {\n          console.log(err);\n        });\n\n}\n\n\nmodalConfirmSearchHandler = (event) => {\n  console.log(\"SearchPatientForm:  \");\n\n\n  let userId = this.context.userId;\n\n    console.log(\"SearchPatientFormData:  \", event.target.formBasicField.value);\n    this.setState({ searching: false });\n\n    let field = event.target.formBasicField.value;\n    let query = event.target.formBasicQuery.value;\n\n    if (\n      field.trim().length === 0 ||\n      query.trim().length === 0\n    ) {\n      console.log(\"blank fields detected!!!...Please try again...\");\n      return;\n    }\n\n    const search = { field, query }\n    console.log(\"Searching for Patient:  \", JSON.stringify(search));\n\n    const requestBody = {\n      query: `\n        query GetPatientField($userId: ID!, $field: String!, $query: String!)\n        {getPatientField(userId: $userId, field: $field, query: $query ){\n          _id\n          name\n          address\n          contact{\n            email\n            phone\n          }\n          registrationDate\n          referralDate\n          expirationDate\n          referringDoctor{\n            name\n            email\n            phone\n          }\n            occupation{\n              role\n              employer\n              contact{\n                email\n                phone\n              }\n            }\n            insurance\n            {\n              company\n              number\n              description\n              expiry\n              subscriber{\n                company\n                description\n              }\n            }\n            nextOfKin{\n              name\n              contact{\n                email\n                phone\n              }\n            }\n            complaints{\n              date\n              title\n              description\n              attachment{\n                name\n                format\n                path\n              }\n            }\n            examination{\n              area\n              type\n              measure\n              value\n              description\n              attachment{\n                name\n                format\n                path\n              }\n            }\n            history{\n              title\n              type\n              date\n              description\n              attachment{\n                name\n                format\n                path\n              }\n            }\n            allergies{\n              title\n              description\n              attachment{\n                name\n                format\n                path\n              }\n            }\n            medication{\n              title\n              description\n              attachment{\n                name\n                format\n                path\n              }\n            }\n            investigation{\n              date\n              title\n              description\n              attachment{\n                name\n                format\n                path\n              }\n            }\n              diagnosis{\n                date\n                title\n                description\n                attachment{\n                  name\n                  format\n                  path\n                }\n              }\n              treatment{\n                date\n                title\n                type\n                description\n                dose\n                frequency\n                attachment{\n                  name\n                  format\n                  path\n                }\n              }\n              billing{\n                date\n                title\n                type\n                description\n                amount\n                paid\n                notes\n                attachment\n                {\n                  name\n                  format\n                  path\n                }\n              }\n        }\n      }\n      `,\n      variables: {\n        userId: userId,\n        field: field,\n        query: query\n      }\n    }\n\n    const token = this.context.token;\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n\n        const searchPatients = resData.data.getPatientField;\n\n        this.setState({ searchPatients: searchPatients})\n        console.log(\"state.searchPatients:  \", this.state.searchPatients);\n        // this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n      });\n}\n\n\n\n  modalCancelHandler = () => {\n    this.setState({ creating: false, updating: false, searching: false, selectedPatient: null });\n  };\n\n\n  fetchPatients() {\n    console.log(\"'fetch patients function' context object... \" + JSON.stringify(this.context));\n    const userId = this.context.userId;\n\n    this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n          query patients($userId: ID!) {\n            patients(userId: $userId) {\n              _id\n              name\n              address\n              contact{\n                email\n                phone\n              }\n              registrationDate\n              referralDate\n              expirationDate\n              referringDoctor{\n                name\n                email\n                phone\n              }\n                occupation{\n                  role\n                  employer\n                  contact{\n                    email\n                    phone\n                  }\n                }\n                insurance\n                {\n                  company\n                  number\n                  description\n                  expiry\n                  subscriber{\n                    company\n                    description\n                  }\n                }\n                nextOfKin{\n                  name\n                  contact{\n                    email\n                    phone\n                  }\n                }\n                complaints{\n                  date\n                  title\n                  description\n                  attachment{\n                    name\n                    format\n                    path\n                  }\n                }\n                examination{\n                  area\n                  type\n                  measure\n                  value\n                  description\n                  attachment{\n                    name\n                    format\n                    path\n                  }\n                }\n                history{\n                  title\n                  type\n                  date\n                  description\n                  attachment{\n                    name\n                    format\n                    path\n                  }\n                }\n                allergies{\n                  title\n                  description\n                  attachment{\n                    name\n                    format\n                    path\n                  }\n                }\n                medication{\n                  title\n                  description\n                  attachment{\n                    name\n                    format\n                    path\n                  }\n                }\n                investigation{\n                  date\n                  title\n                  description\n                  attachment{\n                    name\n                    format\n                    path\n                  }\n                }\n                  diagnosis{\n                    date\n                    title\n                    description\n                    attachment{\n                      name\n                      format\n                      path\n                    }\n                  }\n                  treatment{\n                    date\n                    title\n                    type\n                    description\n                    dose\n                    frequency\n                    attachment{\n                      name\n                      format\n                      path\n                    }\n                  }\n                  billing{\n                    date\n                    title\n                    type\n                    description\n                    amount\n                    paid\n                    notes\n                    attachment\n                    {\n                      name\n                      format\n                      path\n                    }\n                  }\n            }\n          }\n        `,\n        variables: {\n          userId: userId\n        }\n    };\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const patients = resData.data.patients;\n        console.log(patients);\n\n        this.context.patients = this.state.patients;\n        if (this.isActive) {\n          this.setState({ patients: patients, isLoading: false });\n        }\n\n      })\n      .catch(err => {\n        console.log(err);\n        if (this.isActive) {\n          this.setState({ isLoading: false });\n        }\n      });\n  }\n\n\n  modalDeleteHandler = () => {\n    console.log(\"deleting patient...selectedPatient:  \", this.context.selectedPatient);\n\n    const selectedPatientId = this.context.selectedPatient._id;\n\n    if(this.context.user.role !== 'admin') {\n      console.log(\"Not the Admin! No edit permission!!\");\n    }\n\n    this.setState({deleting: true});\n\n\n    const requestBody = {\n      query: `\n          mutation DeletePatient($userId: ID!, $patientId: ID!) {\n            deletePatient(userId: $userId, patientId: $patientId) {\n              _id\n              name\n              address\n              contact{\n                email\n                phone\n              }\n              registrationDate\n              referringDoctor\n              {\n                name\n                email\n                phone\n              }\n              occupation\n              {\n                role\n                employer\n                contact\n                {\n                  email\n                  phone\n                }\n              }\n            }\n          }\n        `,\n        variables: {\n          userId: this.context.userId,\n          patientId: selectedPatientId\n        }\n    };\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        let deletedPatient = resData.data.deletePatient;\n        console.log(deletedPatient);\n\n        let deletedPatientId = deletedPatient._id;\n        deletedPatient = this.state.patients.find(e => e._id === deletedPatientId);\n        const deletedPatientPos = this.state.patients.indexOf(deletedPatient);\n        const slicedArray = this.state.patients.splice(deletedPatientPos, 1);\n        console.log(\"deletedPatient:  \", JSON.stringify(deletedPatient),\"  deletedUserPos:  \", deletedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.setState({ deleting: false });\n\n        this.fetchPatients();\n\n      })\n      .catch(err => {\n        console.log(err);\n        if (this.isActive) {\n          this.setState({ deleting: false });\n        }\n      });\n  }\n\n\n  updatePatientSpecial (event) {\n\n    console.log(\"special field to update:  \", event.target.value);\n    const field = event.target.value;\n    this.setState({ patientUpdateField: field});\n\n  }\n\n\n  showDetailHandler = patientId => {\n\n    this.setState(prevState => {\n      const selectedPatient = prevState.patients.find(e => e._id === patientId);\n      this.context.selectedPatient = selectedPatient;\n      this.context.selectedPatientId = selectedPatient._id;\n      console.log(\"selectedPatient:  \", selectedPatient);\n      return { selectedPatient: selectedPatient };\n    });\n  };\n\n\n  componentWillUnmount() {\n    this.isActive = false;\n  }\n\n  render() {\n    return (\n\n    <React.Fragment>\n    <Accordion>\n\n    <Container className=\"containerUserDetail\">\n\n    <Row className=\"createUserRowAdd\">\n    <Col md={4} className=\"createUserColAdd\">\n    <p>Patient Detail</p>\n    </Col>\n    <Col md={6} className=\"createUserColAdd\">\n    <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"6\" className=\"btn\">\n    Details\n    </Accordion.Toggle>\n    </Col>\n    </Row>\n\n    <Accordion.Collapse eventKey=\"6\">\n    <Row className=\"createUserRowForm\">\n    <Col md={11} className=\"createUserColForm\">\n    {this.state.isLoading === false &&\n      this.state.selectedPatient !== null\n      &&\n      (<PatientDetail\n        authUserId={this.context.userId}\n        patient={this.state.selectedPatient}\n        onEdit={this.startUpdatePatientHandler}\n        onDelete={this.modalDeleteHandler}\n    />)\n  }\n    </Col>\n    </Row>\n    </Accordion.Collapse>\n\n    </Container>\n\n    <Container className=\"containerCreateuser\">\n    <Row className=\"createUserRowAdd\">\n    <Col md={4} className=\"createUserColAdd\">\n      <p>Add New Patient</p>\n    </Col>\n    <Col md={8}>\n      {this.context.token && (\n        <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"7\" className=\"btn\" onClick={this.startCreatePatientHandler}>\n        Add\n        </Accordion.Toggle>\n      )}\n    </Col>\n    </Row>\n\n    <Accordion.Collapse eventKey=\"7\">\n    <Row className=\"createUserRowForm\">\n    <Col md={12} className=\"createUserColForm\">\n    {\n      this.state.creating && (\n        <CreatePatientForm\n        canCancel\n          canConfirm\n          onCancel={this.modalCancelHandler}\n          onConfirm={this.modalConfirmHandler}\n          onSubmit={this.modalConfirmHandler}\n          confirmText=\"Confirm\"\n        />\n    )}\n    </Col>\n    </Row>\n    </Accordion.Collapse>\n\n\n    <Row className=\"updateUserRowAdd\">\n    <Col md={4} className=\"updateUserCol\">\n    <p>Edit Selected Patient</p>\n    </Col>\n    <Col md={4} className=\"updateUserCol\">\n    {this.context.token && (\n      <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"8\" className=\"btn\" onClick={this.startUpdatePatientHandler}>\n      Basic Info & Demographics\n      </Accordion.Toggle>\n    )}\n    </Col>\n    </Row>\n\n    <Row className=\"createUserRowAdd\">\n    <Col md={3} className=\"updateUserCol2\">\n    <p>Edit Selected Patient</p>\n    </Col>\n    <Col md={9} className=\"updateUserCol2\">\n    {this.context.token && (\n      <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"9\" className=\"btn\" value='insurance' onClick={this.updatePatientSpecial.bind(this)}>\n      Insurance\n      </Accordion.Toggle>\n    )}\n    {this.context.token && (\n      <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"9\" className=\"btn\" value='nextOfKin' onClick={this.updatePatientSpecial.bind(this)}>\n      Next Of Kin\n      </Accordion.Toggle>\n    )}\n    </Col>\n    </Row>\n\n    <Accordion.Collapse eventKey=\"8\">\n    <Row className=\"updateUserRowForm\">\n    <Col md={10} className=\"updateUserColForm\">\n    {this.state.updating &&\n      this.state.selectedPatient !== null\n      && (\n      <UpdatePatientForm\n      authUserId={this.context.userId}\n      canCancel\n        canConfirm\n        onCancel={this.modalCancelHandler}\n        onConfirm={this.modalConfirmUpdateHandler}\n        confirmText=\"Confirm\"\n        patient={this.context.selectePatient}\n      />\n    )}\n    </Col>\n    </Row>\n    </Accordion.Collapse>\n\n    <Accordion.Collapse eventKey=\"9\">\n    <Row className=\"updateUserRowForm\">\n    <Col md={10} className=\"updateUserColForm\">\n    {this.state.patientUpdateField === 'insurance' &&\n    this.state.selectedPatient !== null\n    && (\n      <UpdatePatientInsuranceForm\n      authUserId={this.context.userId}\n      canCancel\n        canConfirm\n        onCancel={this.modalCancelHandler}\n        onConfirm={this.updatePatientInsuranceHandler}\n        confirmText=\"Confirm\"\n        patient={this.state.selectedPatient}\n      />\n    )}\n    {this.state.patientUpdateField === 'nextOfKin' &&\n    this.state.selectedPatient !== null\n    && (\n      <p>nextOfKin</p>\n    )}\n    </Col>\n    </Row>\n    </Accordion.Collapse>\n\n    </Container>\n\n\n\n    <Container className=\"containerSearchuser\">\n  <Row className=\"createUserRowAdd\">\n  <Col md={4} className=\"createUserColAdd\">\n    <p>Search for a Patient</p>\n  </Col>\n  <Col md={8}>\n    {this.context.token && (\n      <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"10\" className=\"btn\" onClick={this.startSearchPatientHandler}>\n      Search\n      </Accordion.Toggle>\n    )}\n\n  </Col>\n  </Row>\n\n  <Accordion.Collapse eventKey=\"10\">\n  <Row className=\"createUserRowForm\">\n  <Col md={10} className=\"createUserColForm\">\n  {\n    this.state.searching === true &&\n    <SearchPatientForm\n    authUserId={this.context.userId}\n    canCancel\n      canConfirm\n      onCancel={this.modalCancelHandler}\n      onConfirm={this.modalConfirmSearchHandler}\n      confirmText=\"Search\"\n      patient={this.context.selectedPatient}\n    />\n  }\n  </Col>\n  <Col md={10}>\n\n  </Col>\n  </Row>\n  </Accordion.Collapse>\n  </Container>\n\n<Accordion.Collapse eventKey=\"10\">\n  <Container className=\"containerSearchuser\">\n  <Row className=\"searchListRow\">\n  {\n    this.state.searchPatients !== [] &&\n    <SearchPatientList\n      searchPatients={this.state.searchPatients}\n      authUserId={this.context.userId}\n      onCancel={this.modalCancelHandler}\n        onViewDetail={this.showDetailHandler}\n    />\n  }\n  </Row>\n  </Container>\n  </Accordion.Collapse>\n\n\n  <Container className=\"containerSearchuser\">\n<Row className=\"searchListRow\">\n\n{this.state.isLoading ? (\n  <Spinner />\n) : (\n  <PatientList\n    patients={this.state.patients}\n    authUserId={this.context.userId}\n    onViewDetail={this.showDetailHandler}\n  />\n)}\n\n</Row>\n</Container>\n</Accordion>\n\n      </React.Fragment>\n    );\n  }\n}\n\nexport default PatientsPage;\n"]},"metadata":{},"sourceType":"module"}