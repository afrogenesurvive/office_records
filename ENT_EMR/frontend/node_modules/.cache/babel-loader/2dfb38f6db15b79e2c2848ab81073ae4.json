{"ast":null,"code":"import _toConsumableArray from\"/Users/pedrojacob/Downloads/AMR/websites/office_records/ENT_EMR/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _classCallCheck from\"/Users/pedrojacob/Downloads/AMR/websites/office_records/ENT_EMR/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/pedrojacob/Downloads/AMR/websites/office_records/ENT_EMR/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/Users/pedrojacob/Downloads/AMR/websites/office_records/ENT_EMR/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/Users/pedrojacob/Downloads/AMR/websites/office_records/ENT_EMR/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/Users/pedrojacob/Downloads/AMR/websites/office_records/ENT_EMR/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import S3 from'react-aws-s3';// import S3FileUpload from 'react-s3';\nimport Container from'react-bootstrap/Container';import Row from'react-bootstrap/Row';import Col from'react-bootstrap/Col';import Button from'react-bootstrap/Button';import Accordion from'react-bootstrap/Accordion';import SidebarPage from'./Sidebar';import Tabs from'react-bootstrap/Tabs';import Tab from'react-bootstrap/Tab';// import TabContainer from 'react-bootstrap/TabContainer';\n// import TabContent from 'react-bootstrap/TabContent';\n// import TabPane from 'react-bootstrap/TabPane';\nimport Nav from'react-bootstrap/Nav';import Card from'react-bootstrap/Card';import PatientList from'../components/Patients/PatientList/PatientList';import PatientDetail from'../components/Patients/PatientDetail';import Spinner from'../components/Spinner/Spinner';import AuthContext from'../context/auth-context';import SearchPatientList from'../components/Patients/PatientList/SearchPatientList';import SearchPatientForm from'../components/Forms/SearchPatientForm';import SearchPatientIdForm from'../components/Forms/SearchPatientIdForm';import SearchPatientNameForm from'../components/Forms/SearchPatientNameForm';// import SearchPatientVisitForm from '../components/Forms/SearchPatientVisitForm';\nimport AlertBox from'../components/AlertBox';import AttachmentViewer from'../components/AttachmentViewer';import PdfCreator from'../components/PdfCreator';import CreatePatientForm from'../components/Forms/CreatePatientForm';import UpdatePatientForm from'../components/Forms/UpdatePatientForm';import UpdatePatientFieldForm from'../components/Forms/UpdatePatientFieldForm';import UpdatePatientConsultantForm from'../components/Forms/UpdatePatientConsultantForm';import UpdatePatientInsuranceForm from'../components/Forms/UpdatePatientInsuranceForm';import UpdatePatientNextOfKinForm from'../components/Forms/UpdatePatientNextOfKinForm';import UpdatePatientComplaintForm from'../components/Forms/UpdatePatientComplaintForm';import UpdatePatientSurveyForm from'../components/Forms/UpdatePatientSurveyForm';import UpdatePatientVitalsForm from'../components/Forms/UpdatePatientVitalsForm';import UpdatePatientExaminationForm from'../components/Forms/UpdatePatientExaminationForm';import UpdatePatientHistoryForm from'../components/Forms/UpdatePatientHistoryForm';import UpdatePatientAllergiesForm from'../components/Forms/UpdatePatientAllergiesForm';import UpdatePatientMedicationForm from'../components/Forms/UpdatePatientMedicationForm';import UpdatePatientInvestigationForm from'../components/Forms/UpdatePatientInvestigationForm';import UpdatePatientDiagnosisForm from'../components/Forms/UpdatePatientDiagnosisForm';import UpdatePatientTreatmentForm from'../components/Forms/UpdatePatientTreatmentForm';import UpdatePatientBillingForm from'../components/Forms/UpdatePatientBillingForm';import UpdatePatientAttachmentForm from'../components/Forms/UpdatePatientAttachmentForm';import UpdatePatientNoteForm from'../components/Forms/UpdatePatientNoteForm';import UpdatePatientTagForm from'../components/Forms/UpdatePatientTagForm';import'./Users.css';var PatientsPage=/*#__PURE__*/function(_Component){_inherits(PatientsPage,_Component);function PatientsPage(_props){var _this;_classCallCheck(this,PatientsPage);_this=_possibleConstructorReturn(this,_getPrototypeOf(PatientsPage).call(this,_props));_this.state={creating:false,updating:false,searching:false,updatingArray:false,deleting:false,patients:[],searchPatients:[],isLoading:false,selectedPatient:null,patientUpdateField:null,patientSearchField:null,patientSearchQuery:null,canDelete:null,visit:null,userAlert:null,showAttachment:false,showThisAttachmentFile:null,showThisAttachmentType:null,createPdf:false,pdfData:null};_this.isActive=true;_this.startCreatePatientHandler=function(){_this.setState({creating:true});console.log(\"CreatePatientForm...\");};_this.startUpdatePatientHandler=function(){_this.setState({updating:true,updatingArray:true});console.log(\"UpdatePatientForm...\");};_this.startSearchPatientHandler=function(){_this.setState({searching:true});console.log(\"SearchPatientForm...\");};_this.modalConfirmHandler=function(event){console.log(\"CreatePatientFormData:  \",event.target.formGridName.value);_this.setState({creating:false});var userId=_this.context.userId;var title=event.target.formGridTitle.value;var name=event.target.formGridName.value;var dob=event.target.formGridDob.value;var age=event.target.formGridAge.value;var gender=event.target.formGridGender.value;var addressNumber=event.target.formGridAddressNumber.value;var addressStreet=event.target.formGridAddressStreet.value;var addressTown=event.target.formGridAddressTown.value;var addressParish=event.target.formGridAddressParish.value;var addressPostOffice=event.target.formGridAddressPostOffice.value;var contactPhone=event.target.formGridContactPhone.value;var contactEmail=event.target.formGridContactEmail.value;var registrationDate=event.target.formGridRegistrationDate.value;if(event.target.formGridRegistrationDateTodayCheckbox.checked===true){registrationDate=new Date().toISOString().slice(0,10);}var referralDate=event.target.formGridReferralDate.value;if(event.target.formGridReferralDateTodayCheckbox.checked===true){referralDate=new Date().toISOString().slice(0,10);}var expirationDate=event.target.formGridExpirationDate.value;var attendingPhysicianName=event.target.formGridAttendingPhysicianName.value;var attendingPhysicianEmail=event.target.formGridAttendingPhysicianEmail.value;var attendingPhysicianPhone=event.target.formGridAttendingPhysicianPhone.value;var referringDoctorName=event.target.formGridReferringDoctorName.value;var referringDoctorEmail=event.target.formGridReferringDoctorEmail.value;var referringDoctorPhone=event.target.formGridReferringDoctorPhone.value;var occupationRole=event.target.formGridOccupationRole.value;var occupationEmployer=event.target.formGridOccupationEmployer.value;var occupationEmployerContactPhone=event.target.formGridOccupationEmployerContactPhone.value;var occupationEmployerContactEmail=event.target.formGridOccupationEmployerContactEmail.value;if(name.trim().length===0||// title.trim().length === 0 ||\n// name.trim().length === 0 ||\n// dob.trim().length === 0 ||\nage.trim().length===0||// gender.trim().length === 0 ||\naddressNumber.trim().length===0||addressStreet.trim().length===0||// addressTown.trim().length === 0 ||\n// addressParish.trim().length === 0 ||\n// addressPostOffice.trim().length === 0 ||\ncontactPhone.trim().length===0||// contactEmail.trim().length === 0 ||\nregistrationDate.trim().length===0// referralDate.trim().length === 0 ||\n// expirationDate.trim().length === 0 ||\n// attendingPhysicianName.trim().length === 0 ||\n// attendingPhysicianEmail.trim().length === 0 ||\n// attendingPhysicianPhone.trim().length === 0 ||\n// referringDoctorName.trim().length === 0 ||\n// referringDoctorEmail.trim().length === 0 ||\n// referringDoctorPhone.trim().length === 0 ||\n// occupationRole.trim().length === 0 ||\n// occupationEmployer.trim().length === 0 ||\n// occupationEmployerContactPhone.trim().length === 0 ||\n// occupationEmployerContactEmail.trim().length === 0\n){console.log(\"patient must have at least: Name, Age, Contact Number, Street Name & Number and Registration Date!!!...Please try again...\");_this.setState({userAlert:\"patient must have at least: Name, Age, Contact Number, Street Name & Number and Registration Date!!!...Please try again...\"});return;}console.log(\"\\n      creating patient...\\n      title: \".concat(title,\",\\n      name: \").concat(name,\",\\n      dob: \").concat(dob,\",\\n      age: \").concat(age,\",\\n      gender: \").concat(gender,\",\\n      addressNumber: \").concat(addressNumber,\",\\n      addressStreet: \").concat(addressStreet,\",\\n      addressTown: \").concat(addressTown,\",\\n      addressParish: \").concat(addressParish,\",\\n      addressPostOffice: \").concat(addressPostOffice,\",\\n      contactPhone: \").concat(contactPhone,\",\\n      contactEmail: \").concat(contactEmail,\",\\n      registrationDate: \").concat(registrationDate,\",\\n      referralDate: \").concat(referralDate,\",\\n      expirationDate: \").concat(expirationDate,\",\\n      attendingPhysicianName: \").concat(attendingPhysicianName,\",\\n      attendingPhysicianEmail: \").concat(attendingPhysicianEmail,\",\\n      attendingPhysicianPhone: \").concat(attendingPhysicianPhone,\",\\n      referringDoctorName: \").concat(referringDoctorName,\",\\n      referringDoctorEmail: \").concat(referringDoctorEmail,\",\\n      referringDoctorPhone: \").concat(referringDoctorPhone,\",\\n      occupationRole: \").concat(occupationRole,\",\\n      occupationEmployer: \").concat(occupationEmployer,\",\\n      occupationEmployerContactPhone: \").concat(occupationEmployerContactPhone,\",\\n      occupationEmployerContactEmail: \").concat(occupationEmployerContactEmail,\",\\n      \"));var requestBody={query:\"\\n        mutation {createPatient(userId:\\\"\".concat(userId,\"\\\", patientInput:{title:\\\"\").concat(title,\"\\\",name:\\\"\").concat(name,\"\\\",dob:\\\"\").concat(dob,\"\\\",age:\").concat(age,\",gender:\\\"\").concat(gender,\"\\\",addressNumber:\").concat(addressNumber,\",addressStreet:\\\"\").concat(addressStreet,\"\\\",addressTown:\\\"\").concat(addressTown,\"\\\",addressParish:\\\"\").concat(addressParish,\"\\\",addressPostOffice:\\\"\").concat(addressPostOffice,\"\\\",contactPhone:\\\"\").concat(contactPhone,\"\\\",contactEmail:\\\"\").concat(contactEmail,\"\\\",registrationDate:\\\"\").concat(registrationDate,\"\\\",referralDate:\\\"\").concat(referralDate,\"\\\",expirationDate:\\\"\").concat(expirationDate,\"\\\",referringDoctorName:\\\"\").concat(referringDoctorName,\"\\\",referringDoctorEmail:\\\"\").concat(referringDoctorEmail,\"\\\",referringDoctorPhone:\\\"\").concat(referringDoctorPhone,\"\\\",attendingPhysicianName:\\\"\").concat(attendingPhysicianName,\"\\\",attendingPhysicianEmail:\\\"\").concat(attendingPhysicianEmail,\"\\\",attendingPhysicianPhone:\\\"\").concat(attendingPhysicianPhone,\"\\\",occupationRole:\\\"\").concat(occupationRole,\"\\\",occupationEmployer:\\\"\").concat(occupationEmployer,\"\\\",occupationEmployerContactPhone:\\\"\").concat(occupationEmployerContactPhone,\"\\\",occupationEmployerContactEmail:\\\"\").concat(occupationEmployerContactEmail,\"\\\"})\\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n        \")};var token=_this.context.token;// fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\nfetch('http://localhost:10000/graphql',{method:'POST',body:JSON.stringify(requestBody),headers:{'Content-Type':'application/json',Authorization:'Bearer '+token}}).then(function(res){if(res.status!==200&&res.status!==201){throw new Error('Failed!');}return res.json();}).then(function(resData){console.log(\"\\n          response data:\\n          \".concat(JSON.stringify(resData.data.createPatient),\"\\n          \"));var responseAlert=JSON.stringify(resData.data).slice(2,15);_this.setState({userAlert:responseAlert});var newPatient=resData.data.createPatient;_this.setState(function(prevState){var updatedPatients=_toConsumableArray(prevState.patients);updatedPatients.push(newPatient);return{patients:updatedPatients};});}).catch(function(err){console.log(err);_this.setState({userAlert:err});});};_this.modalCancelHandler=function(){_this.setState({creating:false,updating:false,selectedPatient:null});};_this.modalConfirmUpdateHandler=function(event){// if(this.context.user.role !== 'admin') {\n//   console.log(\"Not the Admin! No edit permission!!\");\n// }\nvar userId=_this.context.userId;var selectedPatientId=_this.context.selectedPatient._id;console.log(\"UpdatePatientFormData:  \",event.target.formGridName.value);_this.setState({updating:false});var title=event.target.formGridTitle.value;var name=event.target.formGridName.value;var dob=event.target.formGridDob.value;var age=event.target.formGridAge.value;var gender=event.target.formGridGender.value;var addressNumber=event.target.formGridAddressNumber.value;var addressStreet=event.target.formGridAddressStreet.value;var addressTown=event.target.formGridAddressTown.value;var addressParish=event.target.formGridAddressParish.value;var addressPostOffice=event.target.formGridAddressPostOffice.value;var contactPhone=event.target.formGridContactPhone.value;var contactEmail=event.target.formGridContactEmail.value;var registrationDate=event.target.formGridRegistrationDate.value;if(event.target.formGridRegistrationDateTodayCheckbox.checked===true){registrationDate=new Date().toISOString().slice(0,10);}var referralDate=event.target.formGridReferralDate.value;if(event.target.formGridReferralDateTodayCheckbox.checked===true){referralDate=new Date().toISOString().slice(0,10);}var expirationDate=event.target.formGridExpirationDate.value;if(event.target.formGridExpirationDateTodayCheckbox.checked===true){expirationDate=new Date().toISOString().slice(0,10);}var attendingPhysicianName=event.target.formGridAttendingPhysicianName.value;var attendingPhysicianEmail=event.target.formGridAttendingPhysicianEmail.value;var attendingPhysicianPhone=event.target.formGridAttendingPhysicianPhone.value;var referringDoctorName=event.target.formGridReferringDoctorName.value;var referringDoctorEmail=event.target.formGridReferringDoctorEmail.value;var referringDoctorPhone=event.target.formGridReferringDoctorPhone.value;var occupationRole=event.target.formGridOccupationRole.value;var occupationEmployer=event.target.formGridOccupationEmployer.value;var occupationEmployerContactPhone=event.target.formGridOccupationEmployerContactPhone.value;var occupationEmployerContactEmail=event.target.formGridOccupationEmployerContactEmail.value;if(title.trim().length===0){console.log(\"blank fields detected!!!...filling w/ previous data...\");title=_this.context.selectedPatient.title;}if(name.trim().length===0){console.log(\"blank fields detected!!!...filling w/ previous data...\");name=_this.context.selectedPatient.name;}if(dob.trim().length===0){console.log(\"blank fields detected!!!...filling w/ previous data...\");dob=_this.context.selectedPatient.dob;}if(gender.trim().length===0){console.log(\"blank fields detected!!!...filling w/ previous data...\");gender=_this.context.selectedPatient.gender;}if(age.trim().length===0){console.log(\"blank fields detected!!!...filling w/ previous data...\");age=_this.context.selectedPatient.age;}if(addressNumber.trim().length===0){console.log(\"blank fields detected!!!...filling w/ previous data...\");addressNumber=_this.context.selectedPatient.address.number;}if(addressStreet.trim().length===0){console.log(\"blank fields detected!!!...filling w/ previous data...\");addressStreet=_this.context.selectedPatient.address.street;}if(addressTown.trim().length===0){console.log(\"blank fields detected!!!...filling w/ previous data...\");addressTown=_this.context.selectedPatient.address.town;}if(addressParish.trim().length===0){console.log(\"blank fields detected!!!...filling w/ previous data...\");addressParish=_this.context.selectedPatient.address.parish;}if(addressPostOffice.trim().length===0){console.log(\"blank fields detected!!!...filling w/ previous data...\");addressPostOffice=_this.context.selectedPatient.address.postOffice;}if(contactPhone.trim().length===0){console.log(\"blank fields detected!!!...filling w/ previous data...\");contactPhone=_this.context.selectedPatient.contact.phone;}if(contactEmail.trim().length===0){console.log(\"blank fields detected!!!...filling w/ previous data...\");contactEmail=_this.context.selectedPatient.contact.email;}if(registrationDate.trim().length===0){console.log(\"blank fields detected!!!...filling w/ previous data...\");registrationDate=_this.context.selectedPatient.registrationDate;}if(attendingPhysicianName.trim().length===0){console.log(\"blank fields detected!!!...filling w/ previous data...\");attendingPhysicianName=_this.context.selectedPatient.attendingPhysician.name;}if(attendingPhysicianEmail.trim().length===0){console.log(\"blank fields detected!!!...filling w/ previous data...\");attendingPhysicianEmail=_this.context.selectedPatient.attendingPhysician.email;}if(attendingPhysicianPhone.trim().length===0){console.log(\"blank fields detected!!!...filling w/ previous data...\");attendingPhysicianPhone=_this.context.selectedPatient.attendingPhysician.phone;}if(referringDoctorName.trim().length===0){console.log(\"blank fields detected!!!...filling w/ previous data...\");referringDoctorName=_this.context.selectedPatient.referringDoctor.name;}if(referringDoctorEmail.trim().length===0){console.log(\"blank fields detected!!!...filling w/ previous data...\");referringDoctorEmail=_this.context.selectedPatient.referringDoctor.email;}if(referringDoctorPhone.trim().length===0){console.log(\"blank fields detected!!!...filling w/ previous data...\");referringDoctorPhone=_this.context.selectedPatient.referringDoctor.phone;}if(occupationRole.trim().length===0){console.log(\"blank fields detected!!!...filling w/ previous data...\");occupationRole=_this.context.selectedPatient.occupation.role;}if(occupationEmployer.trim().length===0){console.log(\"blank fields detected!!!...filling w/ previous data...\");occupationEmployer=_this.context.selectedPatient.occupation.employer;}if(occupationEmployerContactEmail.trim().length===0){console.log(\"blank fields detected!!!...filling w/ previous data...\");occupationEmployerContactEmail=_this.context.selectedPatient.occupation.contact.email;}if(occupationEmployerContactPhone.trim().length===0){console.log(\"blank fields detected!!!...filling w/ previous data...\");occupationEmployerContactPhone=_this.context.selectedPatient.occupation.contact.phone;}console.log(\"\\n      updating patient...\\n      title: \".concat(title,\",\\n      name: \").concat(name,\",\\n      dob: \").concat(dob,\",\\n      age: \").concat(age,\",\\n      gender: \").concat(gender,\",\\n      addressNumber: \").concat(addressNumber,\",\\n      addressStreet: \").concat(addressStreet,\",\\n      addressTown: \").concat(addressTown,\",\\n      addressParish: \").concat(addressParish,\",\\n      addressPostOffice: \").concat(addressPostOffice,\",\\n      contactPhone: \").concat(contactPhone,\",\\n      contactEmail: \").concat(contactEmail,\",\\n      registrationDate: \").concat(registrationDate,\",\\n      referralDate: \").concat(referralDate,\",\\n      expirationDate: \").concat(expirationDate,\",\\n      attendingPhysicianName: \").concat(attendingPhysicianName,\",\\n      attendingPhysicianEmail: \").concat(attendingPhysicianEmail,\",\\n      attendingPhysicianPhone: \").concat(attendingPhysicianPhone,\",\\n      referringDoctorName: \").concat(referringDoctorName,\",\\n      referringDoctorEmail: \").concat(referringDoctorEmail,\",\\n      referringDoctorPhone: \").concat(referringDoctorPhone,\",\\n      occupationRole: \").concat(occupationRole,\",\\n      occupationEmployer: \").concat(occupationEmployer,\",\\n      occupationEmployerContactPhone: \").concat(occupationEmployerContactPhone,\",\\n      occupationEmployerContactEmail: \").concat(occupationEmployerContactEmail,\",\\n      \"));_this.setState({userAlert:\"updating patient...\"});var requestBody={query:\"\\n          mutation {updatePatient(userId:\\\"\".concat(userId,\"\\\",patientId:\\\"\").concat(selectedPatientId,\"\\\", patientInput:{title:\\\"\").concat(title,\"\\\",name:\\\"\").concat(name,\"\\\",dob:\\\"\").concat(dob,\"\\\",age:\").concat(age,\",gender:\\\"\").concat(gender,\"\\\",addressNumber:\").concat(addressNumber,\",addressStreet:\\\"\").concat(addressStreet,\"\\\",addressTown:\\\"\").concat(addressTown,\"\\\",addressParish:\\\"\").concat(addressParish,\"\\\",addressPostOffice:\\\"\").concat(addressPostOffice,\"\\\",contactPhone:\\\"\").concat(contactPhone,\"\\\",contactEmail:\\\"\").concat(contactEmail,\"\\\",registrationDate:\\\"\").concat(registrationDate,\"\\\",referralDate:\\\"\").concat(referralDate,\"\\\",expirationDate:\\\"\").concat(expirationDate,\"\\\",referringDoctorName:\\\"\").concat(referringDoctorName,\"\\\",referringDoctorEmail:\\\"\").concat(referringDoctorEmail,\"\\\",referringDoctorPhone:\\\"\").concat(referringDoctorPhone,\"\\\",attendingPhysicianName:\\\"\").concat(attendingPhysicianName,\"\\\",attendingPhysicianEmail:\\\"\").concat(attendingPhysicianEmail,\"\\\",attendingPhysicianPhone:\\\"\").concat(attendingPhysicianPhone,\"\\\",occupationRole:\\\"\").concat(occupationRole,\"\\\",occupationEmployer:\\\"\").concat(occupationEmployer,\"\\\",occupationEmployerContactPhone:\\\"\").concat(occupationEmployerContactPhone,\"\\\",occupationEmployerContactEmail:\\\"\").concat(occupationEmployerContactPhone,\"\\\"})\\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n        \")};var token=_this.context.token;fetch('http://localhost:10000/graphql',{method:'POST',body:JSON.stringify(requestBody),headers:{'Content-Type':'application/json',Authorization:'Bearer '+token}}).then(function(res){if(res.status!==200&&res.status!==201){throw new Error('Failed!');}return res.json();}).then(function(resData){console.log(\"response data... \"+JSON.stringify(resData));var updatedPatientId=resData.data.updatePatient._id;var updatedPatient=_this.state.patients.find(function(e){return e._id===updatedPatientId;});var updatedPatientPos=_this.state.patients.indexOf(updatedPatient);var slicedArray=_this.state.patients.splice(updatedPatientPos,1);console.log(\"updatedPatient:  \",JSON.stringify(updatedPatient),\"  updatedPatientPos:  \",updatedPatientPos,\"  slicedArray:  \",slicedArray);_this.state.patients.push(resData.data.updatePatient);var responseAlert=JSON.stringify(resData.data).slice(2,25);_this.setState({userAlert:responseAlert});_this.fetchPatients();}).catch(function(err){console.log(err);_this.setState({userAlert:err});});};_this.modalConfirmUpdateFieldHandler=function(event){var token=_this.context.token;var userId=_this.context.userId;var selectedPatientId=_this.context.selectedPatient._id;// if( this.context.user.role !== 'admin') {\n//   console.log(\"Not the creator or Admin! No edit permission!!\");\n//   selectedPatientId = null;\n// }\nconsole.log(\"UpdatePatientFieldFormData:  \",event.target.formGridField.value);_this.setState({updating:false});var field=null;var query=event.target.formGridQuery.value;if(event.target.formGridFieldSelect.value===\"select\"){field=event.target.formGridField.value;}else{field=event.target.formGridFieldSelect.value;}var requestBody={query:\"\\n          mutation {updatePatientField(userId:\\\"\".concat(userId,\"\\\",patientId:\\\"\").concat(selectedPatientId,\"\\\",field:\\\"\").concat(field,\"\\\",query:\\\"\").concat(query,\"\\\")\\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n        \")};fetch('http://localhost:10000/graphql',{method:'POST',body:JSON.stringify(requestBody),headers:{'Content-Type':'application/json',Authorization:'Bearer '+token}}).then(function(res){if(res.status!==200&&res.status!==201){throw new Error('Failed!');}return res.json();}).then(function(resData){console.log(\"response data... \"+JSON.stringify(resData.data.updatePatientField));var updatedPatientId=resData.data.updatePatientField._id;var updatedPatient=_this.state.patients.find(function(e){return e._id===updatedPatientId;});var updatedPatientPos=_this.state.patients.indexOf(updatedPatient);var slicedArray=_this.state.patients.splice(updatedPatientPos,1);console.log(\"updatedPatient:  \",JSON.stringify(updatedPatient),\"  updatedPatientPos:  \",updatedPatientPos,\"  slicedArray:  \",slicedArray);_this.state.patients.push(resData.data.updatePatientField);_this.context.patients=_this.state.patients;var responseAlert=JSON.stringify(resData.data).slice(2,25);_this.setState({userAlert:responseAlert});_this.fetchPatients();}).catch(function(err){console.log(err);_this.setState({userAlert:err});});};_this.updatePatientConsultantHandler=function(event){var token=_this.context.token;var userId=_this.context.userId;var selectedPatientId=_this.context.selectedPatient._id;var patientConsultantReference=_this.context.selectedUser._id;// if(this.context.user.role !== 'admin') {\n//   console.log(\"No edit permission!!\");\n//   return;\n// }\nif(patientConsultantReference===undefined){console.log(\"\\n      select a Staff member before adding a Patient Consultant!!\\n      \");_this.setState({userAlert:\"select a Staff member before adding a Patient Consultant!!...\"});token=null;}console.log(\"UpdatePatientConsultantFormData:  \",event.target.formGridConsultantDate.value);_this.setState({updating:false,patientUpdateField:null});var consultantDate=event.target.formGridConsultantDate.value;if(event.target.formGridConsultantDateTodayCheckbox.checked===true){consultantDate=new Date().toISOString().slice(0,10);}console.log(\"\\n    adding patient consultant item...\\n    userId: \".concat(userId,\",\\n    selectedPatientId: \").concat(selectedPatientId,\",\\n    consultantDate: \").concat(consultantDate,\",\\n    consultantReference: \").concat(patientConsultantReference,\",\\n    \"));var requestBody={query:\"\\n        mutation {updatePatientConsultant(userId:\\\"\".concat(userId,\"\\\", patientId:\\\"\").concat(selectedPatientId,\"\\\",patientInput:{consultantDate:\\\" \").concat(consultantDate,\"\\\",consultantReference: \\\"\").concat(patientConsultantReference,\"\\\"})\\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n      \")};fetch('http://localhost:10000/graphql',{method:'POST',body:JSON.stringify(requestBody),headers:{'Content-Type':'application/json',Authorization:'Bearer '+token}}).then(function(res){if(res.status!==200&&res.status!==201){throw new Error('Failed!');}return res.json();}).then(function(resData){console.log(\"response data... \"+JSON.stringify(resData.data));var updatedPatientId=resData.data.updatePatientConsultant._id;var updatedPatient=_this.state.patients.find(function(e){return e._id===updatedPatientId;});var updatedPatientPos=_this.state.patients.indexOf(updatedPatient);var slicedArray=_this.state.patients.splice(updatedPatientPos,1);console.log(\"updatedPatient:  \",JSON.stringify(updatedPatient),\"  updatedPatientPos:  \",updatedPatientPos,\"  slicedArray:  \",slicedArray);_this.state.patients.push(resData.data.updatePatientConsultant);_this.context.patients=_this.state.patients;var responseAlert=JSON.stringify(resData.data).slice(2,25);_this.setState({userAlert:responseAlert});_this.fetchPatients();}).catch(function(err){console.log(err);_this.setState({userAlert:err});});};_this.updatePatientInsuranceHandler=function(event){var token=_this.context.token;var userId=_this.context.userId;var selectedPatientId=_this.context.selectedPatient._id;// if(this.context.user.role !== 'admin') {\n//   console.log(\"No edit permission!!\");\n//   return;\n// }\nconsole.log(\"UpdatePatientInsuranceFormData:  \",event.target.formGridInsuranceCompany.value);_this.setState({updating:false,patientUpdateField:null});var insuranceCompany=event.target.formGridInsuranceCompany.value;var insuranceNumber=event.target.formGridInsuranceNumber.value;var insuranceExpiry=event.target.formGridInsuranceExpiry.value;var insuranceDescription=event.target.formGridInsuranceDescription.value;var insuranceSubscriberCompany=event.target.formGridInsuranceSubscriberCompany.value;var insuranceSubscriberDescription=event.target.formGridInsuranceSubscriberDescription.value;console.log(\"\\n    adding patient insurance item...\\n    userId: \".concat(userId,\",\\n    selectedPatientId: \").concat(selectedPatientId,\",\\n    insuranceCompany: \").concat(insuranceCompany,\",\\n    insuranceNumber: \").concat(insuranceNumber,\",\\n    insuranceExpiry: \").concat(insuranceExpiry,\",\\n    insuranceDescription: \").concat(insuranceDescription,\",\\n    insuranceSubscriberCompany: \").concat(insuranceSubscriberCompany,\",\\n    insuranceSubscriberDescription: \").concat(insuranceSubscriberDescription,\",\\n    \"));_this.setState({userAlert:\"adding patient insurance item...\"});var requestBody={query:\"\\n        mutation {updatePatientInsurance(userId:\\\"\".concat(userId,\"\\\", patientId:\\\"\").concat(selectedPatientId,\"\\\",patientInput:{insuranceCompany:\\\"\").concat(insuranceCompany,\"\\\",insuranceNumber:\\\"\").concat(insuranceNumber,\"\\\",insuranceDescription:\\\"\").concat(insuranceDescription,\"\\\",insuranceExpiry:\\\"\").concat(insuranceExpiry,\"\\\",insuranceSubscriberCompany:\\\"\").concat(insuranceSubscriberCompany,\"\\\",insuranceSubscriberDescription:\\\"\").concat(insuranceSubscriberDescription,\"\\\"})\\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n      \")};fetch('http://localhost:10000/graphql',{method:'POST',body:JSON.stringify(requestBody),headers:{'Content-Type':'application/json',Authorization:'Bearer '+token}}).then(function(res){if(res.status!==200&&res.status!==201){throw new Error('Failed!');}return res.json();}).then(function(resData){console.log(\"response data... \"+JSON.stringify(resData.data));var updatedPatientId=resData.data.updatePatientInsurance._id;var updatedPatient=_this.state.patients.find(function(e){return e._id===updatedPatientId;});var updatedPatientPos=_this.state.patients.indexOf(updatedPatient);var slicedArray=_this.state.patients.splice(updatedPatientPos,1);console.log(\"updatedPatient:  \",JSON.stringify(updatedPatient),\"  updatedPatientPos:  \",updatedPatientPos,\"  slicedArray:  \",slicedArray);_this.state.patients.push(resData.data.updatePatientInsurance);_this.context.patients=_this.state.patients;var responseAlert=JSON.stringify(resData.data).slice(2,25);_this.setState({userAlert:responseAlert});_this.fetchPatients();}).catch(function(err){console.log(err);_this.setState({userAlert:err});});};_this.updatePatientNextOfKinHandler=function(event){var token=_this.context.token;var userId=_this.context.userId;var selectedPatientId=_this.context.selectedPatient._id;// if(this.context.user.role !== 'admin') {\n//   console.log(\"No edit permission!!\");\n//   return;\n// }\nconsole.log(\"UpdatePatientNextOfKinFormData:  \",event.target.formGridNextOfKinName.value);_this.setState({updating:false,patientUpdateField:null});var nextOfKinName=event.target.formGridNextOfKinName.value;var nextOfKinPhone=event.target.formGridNextOfKinPhone.value;var nextOfKinEmail=event.target.formGridNextOfKinEmail.value;console.log(\"\\n    adding patient nextOfKin item...\\n    userId: \".concat(userId,\",\\n    selectedPatientId: \").concat(selectedPatientId,\",\\n    nextOfKinName: \").concat(nextOfKinName,\",\\n    nextOfKinPhone: \").concat(nextOfKinPhone,\",\\n    nextOfKinEmail: \").concat(nextOfKinEmail,\",\\n    \"));_this.setState({userAlert:\"adding patient nextOfKin item...\"});var requestBody={query:\"\\n        mutation {updatePatientNextOfKin(userId:\\\"\".concat(userId,\"\\\", patientId:\\\"\").concat(selectedPatientId,\"\\\",patientInput:{nextOfKinName:\\\"\").concat(nextOfKinName,\"\\\",nextOfKinEmail:\\\"\").concat(nextOfKinEmail,\"\\\",nextOfKinPhone:\\\"\").concat(nextOfKinPhone,\"\\\"})\\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n      \")};fetch('http://localhost:10000/graphql',{method:'POST',body:JSON.stringify(requestBody),headers:{'Content-Type':'application/json',Authorization:'Bearer '+token}}).then(function(res){if(res.status!==200&&res.status!==201){throw new Error('Failed!');}return res.json();}).then(function(resData){console.log(\"response data... \"+JSON.stringify(resData.data));var updatedPatientId=resData.data.updatePatientNextOfKin._id;var updatedPatient=_this.state.patients.find(function(e){return e._id===updatedPatientId;});var updatedPatientPos=_this.state.patients.indexOf(updatedPatient);var slicedArray=_this.state.patients.splice(updatedPatientPos,1);console.log(\"updatedPatient:  \",JSON.stringify(updatedPatient),\"  updatedPatientPos:  \",updatedPatientPos,\"  slicedArray:  \",slicedArray);_this.state.patients.push(resData.data.updatePatientNextOfKin);_this.context.patients=_this.state.patients;var responseAlert=JSON.stringify(resData.data).slice(2,25);_this.setState({userAlert:responseAlert});_this.fetchPatients();}).catch(function(err){console.log(err);_this.setState({userAlert:err});});};_this.updatePatientComplaintHandler=function(event){var token=_this.context.token;var userId=_this.context.userId;var selectedPatientId=_this.context.selectedPatient._id;// if(this.context.user.role !== 'admin') {\n//   console.log(\"No edit permission!!\");\n//   return;\n// }\nconsole.log(\"UpdatePatientComplaintFormData:  \",event.target.formGridComplaintTitle.value);_this.setState({updating:false,patientUpdateField:null});var complaintTitle=event.target.formGridComplaintTitle.value;var complaintDate=event.target.formGridComplaintDate.value;if(event.target.formGridComplaintDateTodayCheckbox.checked===true){complaintDate=new Date().toISOString().slice(0,10);}var complaintDescription=event.target.formGridComplaintDescription.value;var complaintAnamnesis=event.target.formGridComplaintAnamnesis.value;// let complaintAttachmentName = event.target.formGridComplaintAttachmentName.value;\nvar complaintAttachmentFormat=event.target.formGridComplaintAttachmentFormat.value;// let complaintAttachmentPath = event.target.formGridComplaintAttachmentPath.value;\nvar complaintAttachmentPath=\"uploads/patients/\"+selectedPatientId+\"/complaints\";var file=AuthContext._currentValue.file;console.log(\"\\n    uploading to s3...\\n    file.name: \".concat(file.name,\",\\n    AuthContext._currentValue.file: \").concat(AuthContext._currentValue.file,\",\\n    \"));var config={bucketName:_this.context.creds.s3.bucketName,dirName:complaintAttachmentPath,region:_this.context.creds.s3.region,accessKeyId:_this.context.creds.s3.accessKeyId,secretAccessKey:_this.context.creds.s3.secretAccessKey};var ReactS3Client=new S3(config);var newFileName=file.name;var complaintAttachmentName=newFileName;ReactS3Client.uploadFile(file,newFileName).then(function(data){console.log(data);_this.setState({userAlert:\"attachment upload success!\"});}).catch(function(err){console.error(err);_this.setState({userAlert:\"upload error:  \"+err});});console.log(\"\\n    adding patient complaint...\\n    userId: \".concat(userId,\",\\n    patientId: \").concat(selectedPatientId,\",\\n    complaintTitle: \").concat(complaintTitle,\",\\n    complaintDate: \").concat(complaintDate,\",\\n    complaintDescription: \").concat(complaintDescription,\",\\n    complaintAnamnesis: \").concat(complaintAnamnesis,\",\\n    complaintAttachmentName: \").concat(complaintAttachmentName,\",\\n    complaintAttachmentFormat: \").concat(complaintAttachmentFormat,\",\\n    complaintAttachmentPath: \").concat(complaintAttachmentPath,\",\\n    \"));_this.setState({userAlert:\"adding patient complaint...\"});var requestBody={query:\"\\n        mutation {updatePatientComplaint(userId:\\\"\".concat(userId,\"\\\", patientId:\\\"\").concat(selectedPatientId,\"\\\",patientInput:{complaintDate:\\\"\").concat(complaintDate,\"\\\",complaintTitle:\\\"\").concat(complaintTitle,\"\\\",complaintDescription:\\\"\").concat(complaintDescription,\"\\\",complaintAnamnesis:\\\"\").concat(complaintAnamnesis,\"\\\",complaintAttachmentName:\\\"\").concat(complaintAttachmentName,\"\\\",complaintAttachmentFormat:\\\"\").concat(complaintAttachmentFormat,\"\\\",complaintAttachmentPath:\\\"\").concat(complaintAttachmentPath,\"\\\"})\\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n      \")};fetch('http://localhost:10000/graphql',{method:'POST',body:JSON.stringify(requestBody),headers:{'Content-Type':'application/json',Authorization:'Bearer '+token}}).then(function(res){if(res.status!==200&&res.status!==201){throw new Error('Failed!');}return res.json();}).then(function(resData){console.log(\"response data... \"+JSON.stringify(resData.data));var updatedPatientId=resData.data.updatePatientComplaint._id;var updatedPatient=_this.state.patients.find(function(e){return e._id===updatedPatientId;});var updatedPatientPos=_this.state.patients.indexOf(updatedPatient);var slicedArray=_this.state.patients.splice(updatedPatientPos,1);console.log(\"updatedPatient:  \",JSON.stringify(updatedPatient),\"  updatedPatientPos:  \",updatedPatientPos,\"  slicedArray:  \",slicedArray);_this.state.patients.push(resData.data.updatePatientComplaint);_this.context.patients=_this.state.patients;var responseAlert=JSON.stringify(resData.data).slice(2,25);_this.setState({userAlert:responseAlert});_this.fetchPatients();}).catch(function(err){console.log(err);_this.setState({userAlert:err});});};_this.updatePatientSurveyHandler=function(event){var token=_this.context.token;var userId=_this.context.userId;var selectedPatientId=_this.context.selectedPatient._id;// if(this.context.user.role !== 'admin') {\n//   console.log(\"No edit permission!!\");\n//   return;\n// }\nconsole.log(\"UpdatePatientSurveyFormData:  \",event.target.formGridSurveyTitle.value);_this.setState({updating:false,patientUpdateField:null});var surveyDate=event.target.formGridSurveyDate.value;if(event.target.formGridSurveyDateTodayCheckbox.checked===true){surveyDate=new Date().toISOString().slice(0,10);}var surveyTitle=event.target.formGridSurveyTitle.value;var surveyDescription=event.target.formGridSurveyDescription.value;// let surveyAttachmentName = event.target.formGridSurveyAttachmentName.value;\nvar surveyAttachmentFormat=event.target.formGridSurveyAttachmentFormat.value;var surveyAttachmentPath=\"uploads/patients/\"+selectedPatientId+\"/surveys\";// let surveyAttachmentPath = event.target.formGridSurveyAttachmentPath.value;\nvar file=AuthContext._currentValue.file;console.log(\"\\n    uploading to s3...\\n    file.name: \".concat(file.name,\",\\n    AuthContext._currentValue.file: \").concat(AuthContext._currentValue.file,\",\\n    \"));var config={bucketName:_this.context.creds.s3.bucketName,dirName:surveyAttachmentPath,region:_this.context.creds.s3.region,accessKeyId:_this.context.creds.s3.accessKeyId,secretAccessKey:_this.context.creds.s3.secretAccessKey};var ReactS3Client=new S3(config);var newFileName=file.name;var surveyAttachmentName=newFileName;ReactS3Client.uploadFile(file,newFileName).then(function(data){console.log(data);_this.setState({userAlert:\"attachment upload success!\"});}).catch(function(err){console.error(err);_this.setState({userAlert:\"upload error:  \"+err});});console.log(\"\\n    adding patient survey...\\n    userId: \".concat(userId,\",\\n    patientId: \").concat(selectedPatientId,\",\\n    surveyDate: \").concat(surveyDate,\",\\n    surveyTitle: \").concat(surveyTitle,\",\\n    surveyDescription: \").concat(surveyDescription,\",\\n    surveyAttachmentName: \").concat(surveyAttachmentName,\",\\n    surveyAttachmentFormat: \").concat(surveyAttachmentFormat,\",\\n    surveyAttachmentPath: \").concat(surveyAttachmentPath,\",\\n    \"));_this.setState({userAlert:\"adding patient survey...\"});var requestBody={query:\"\\n        mutation {updatePatientSurvey(userId:\\\"\".concat(userId,\"\\\",patientId:\\\"\").concat(selectedPatientId,\"\\\",patientInput:{surveyDate:\\\"\").concat(surveyDate,\"\\\",surveyTitle:\\\"\").concat(surveyTitle,\"\\\",surveyDescription:\\\"\").concat(surveyDescription,\"\\\",surveyAttachmentName:\\\"\").concat(surveyAttachmentName,\"\\\",surveyAttachmentFormat:\\\"\").concat(surveyAttachmentFormat,\"\\\",surveyAttachmentPath:\\\"\").concat(surveyAttachmentPath,\"\\\"})\\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n      \")};fetch('http://localhost:10000/graphql',{method:'POST',body:JSON.stringify(requestBody),headers:{'Content-Type':'application/json',Authorization:'Bearer '+token}}).then(function(res){if(res.status!==200&&res.status!==201){throw new Error('Failed!');}return res.json();}).then(function(resData){console.log(\"response data... \"+JSON.stringify(resData.data));var updatedPatientId=resData.data.updatePatientSurvey._id;var updatedPatient=_this.state.patients.find(function(e){return e._id===updatedPatientId;});var updatedPatientPos=_this.state.patients.indexOf(updatedPatient);var slicedArray=_this.state.patients.splice(updatedPatientPos,1);console.log(\"updatedPatient:  \",JSON.stringify(updatedPatient),\"  updatedPatientPos:  \",updatedPatientPos,\"  slicedArray:  \",slicedArray);_this.state.patients.push(resData.data.updatePatientSurvey);_this.context.patients=_this.state.patients;var responseAlert=JSON.stringify(resData.data).slice(2,25);_this.setState({userAlert:responseAlert});_this.fetchPatients();}).catch(function(err){console.log(err);_this.setState({userAlert:err});});};_this.updatePatientVitalsHandler=function(event){var token=_this.context.token;var userId=_this.context.userId;var selectedPatientId=_this.context.selectedPatient._id;// if(this.context.user.role !== 'admin') {\n//   console.log(\"No edit permission!!\");\n//   return;\n// }\nconsole.log(\"UpdatePatientVitalsFormData:  \",event.target.formGridVitalsDate.value);_this.setState({updating:false,patientUpdateField:null});var vitalsDate=event.target.formGridVitalsDate.value;if(event.target.formGridVitalsDateTodayCheckbox.checked===true){vitalsDate=new Date().toISOString().slice(0,10);}var vitalsPr=event.target.formGridVitalsPr.value;var vitalsBp1=event.target.formGridVitalsBp1.value;var vitalsBp2=event.target.formGridVitalsBp2.value;var vitalsRr=event.target.formGridVitalsRr.value;var vitalsTemp=event.target.formGridVitalsTemp.value;var vitalsPs02=event.target.formGridVitalsPs02.value;var vitalsHeight=event.target.formGridVitalsHeight.value;var vitalsWeight=event.target.formGridVitalsWeight.value;var vitalsBmi=event.target.formGridVitalsBmi.value;var vitalsUrineType=event.target.formGridVitalsUrineType.value;var vitalsUrineValue=event.target.formGridVitalsUrineValue.value;console.log(\"\\n    adding patient vitals...\\n    userId: \".concat(userId,\",\\n    patientId: \").concat(selectedPatientId,\",\\n    \"));_this.setState({userAlert:\"adding patient vitals...\"});var requestBody={query:\"\\n        mutation {updatePatientVitals(userId:\\\"\".concat(userId,\"\\\",patientId:\\\"\").concat(selectedPatientId,\"\\\",patientInput:{vitalsDate:\\\"\").concat(vitalsDate,\"\\\",vitalsPr:\").concat(vitalsPr,\",vitalsBp1:\").concat(vitalsBp1,\",vitalsBp2:\").concat(vitalsBp2,\",vitalsRr:\").concat(vitalsRr,\",vitalsTemp:\").concat(vitalsTemp,\",vitalsPs02:\").concat(vitalsPs02,\",vitalsHeight:\").concat(vitalsHeight,\",vitalsWeight:\").concat(vitalsWeight,\",vitalsBmi:\").concat(vitalsBmi,\",vitalsUrineType:\\\"\").concat(vitalsUrineType,\"\\\",vitalsUrineValue:\\\"\").concat(vitalsUrineValue,\"\\\"})\\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n      \")};fetch('http://localhost:10000/graphql',{method:'POST',body:JSON.stringify(requestBody),headers:{'Content-Type':'application/json',Authorization:'Bearer '+token}}).then(function(res){if(res.status!==200&&res.status!==201){throw new Error('Failed!');}return res.json();}).then(function(resData){console.log(\"response data... \"+JSON.stringify(resData.data));var updatedPatientId=resData.data.updatePatientVitals._id;var updatedPatient=_this.state.patients.find(function(e){return e._id===updatedPatientId;});var updatedPatientPos=_this.state.patients.indexOf(updatedPatient);var slicedArray=_this.state.patients.splice(updatedPatientPos,1);console.log(\"updatedPatient:  \",JSON.stringify(updatedPatient),\"  updatedPatientPos:  \",updatedPatientPos,\"  slicedArray:  \",slicedArray);_this.state.patients.push(resData.data.updatePatientVitals);_this.context.patients=_this.state.patients;var responseAlert=JSON.stringify(resData.data).slice(2,25);_this.setState({userAlert:responseAlert});_this.fetchPatients();}).catch(function(err){console.log(err);_this.setState({userAlert:err});});};_this.updatePatientExaminationHandler=function(event){var token=_this.context.token;var userId=_this.context.userId;var selectedPatientId=_this.context.selectedPatient._id;// if(this.context.user.role !== 'admin') {\n//   console.log(\"No edit permission!!\");\n//   return;\n// }\nconsole.log(\"UpdatePatientExaminationFormData:  \",event.target.formGridExaminationArea.value);_this.setState({updating:false,patientUpdateField:null});var examinationDate=event.target.formGridExaminationDate.value;if(event.target.formGridExaminationDateTodayCheckbox.checked===true){examinationDate=new Date().toISOString().slice(0,10);}var examinationGeneral=event.target.formGridExaminationGeneral.value;var examinationArea=undefined;if(event.target.formGridExaminationAreaSelect===\"select\"){examinationArea=event.target.formGridExaminationArea.value;}else{examinationArea=event.target.formGridExaminationAreaSelect.value;}var examinationType=event.target.formGridExaminationType.value;var examinationMeasure=event.target.formGridExaminationMeasure.value;var examinationValue=event.target.formGridExaminationValue.value;var examinationDescription=event.target.formGridExaminationDescription.value;var examinationFollowUp=event.target.formGridExaminationFollowUp.value;// let examinationAttachmentName = event.target.formGridExaminationAttachmentName.value;\nvar examinationAttachmentFormat=event.target.formGridExaminationAttachmentFormat.value;var examinationAttachmentPath=\"uploads/patients/\"+selectedPatientId+\"/examinations\";// let examinationAttachmentPath = event.target.formGridExaminationAttachmentPath.value;\nvar file=AuthContext._currentValue.file;console.log(\"\\n    uploading to s3...\\n    file.name: \".concat(file.name,\",\\n    AuthContext._currentValue.file: \").concat(AuthContext._currentValue.file,\",\\n    \"));var config={bucketName:_this.context.creds.s3.bucketName,dirName:examinationAttachmentPath,region:_this.context.creds.s3.region,accessKeyId:_this.context.creds.s3.accessKeyId,secretAccessKey:_this.context.creds.s3.secretAccessKey};var ReactS3Client=new S3(config);var newFileName=file.name;var examinationAttachmentName=newFileName;ReactS3Client.uploadFile(file,newFileName).then(function(data){console.log(data);_this.setState({userAlert:\"attachment upload success!\"});}).catch(function(err){console.error(err);_this.setState({userAlert:\"upload error:  \"+err});});console.log(\"\\n    adding patient examination...\\n    userId: \".concat(userId,\",\\n    patientId: \").concat(selectedPatientId,\",\\n    examinationDate: \").concat(examinationDate,\",\\n    examinationGeneral: \").concat(examinationGeneral,\",\\n    examinationArea: \").concat(examinationArea,\",\\n    examinationType: \").concat(examinationType,\",\\n    examinationMeasure: \").concat(examinationMeasure,\",\\n    examinationValue: \").concat(examinationValue,\",\\n    examinationDescription: \").concat(examinationDescription,\",\\n    examinationFollowUp: \").concat(examinationFollowUp,\",\\n    examinationAttachmentName: \").concat(examinationAttachmentName,\",\\n    examinationAttachmentFormat: \").concat(examinationAttachmentFormat,\",\\n    examinationAttachmentPath: \").concat(examinationAttachmentPath,\",\\n    \"));_this.setState({userAlert:\"adding patient examination...\"});var requestBody={query:\"\\n        mutation {updatePatientExamination(userId:\\\"\".concat(userId,\"\\\",patientId:\\\"\").concat(selectedPatientId,\"\\\",patientInput:{examinationDate:\\\"\").concat(examinationDate,\"\\\",examinationGeneral:\\\"\").concat(examinationGeneral,\"\\\",examinationArea:\\\"\").concat(examinationArea,\"\\\",examinationType:\\\"\").concat(examinationType,\"\\\",examinationMeasure:\\\"\").concat(examinationMeasure,\"\\\",examinationValue:\\\"\").concat(examinationValue,\"\\\",examinationDescription:\\\"\").concat(examinationDescription,\"\\\",examinationFollowUp:\").concat(examinationFollowUp,\",examinationAttachmentName:\\\"\").concat(examinationAttachmentName,\"\\\",examinationAttachmentFormat:\\\"\").concat(examinationAttachmentFormat,\"\\\",examinationAttachmentPath:\\\"\").concat(examinationAttachmentPath,\"\\\"})\\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n      \")};fetch('http://localhost:10000/graphql',{method:'POST',body:JSON.stringify(requestBody),headers:{'Content-Type':'application/json',Authorization:'Bearer '+token}}).then(function(res){if(res.status!==200&&res.status!==201){throw new Error('Failed!');}return res.json();}).then(function(resData){console.log(\"response data... \"+JSON.stringify(resData.data));var updatedPatientId=resData.data.updatePatientExamination._id;var updatedPatient=_this.state.patients.find(function(e){return e._id===updatedPatientId;});var updatedPatientPos=_this.state.patients.indexOf(updatedPatient);var slicedArray=_this.state.patients.splice(updatedPatientPos,1);console.log(\"updatedPatient:  \",JSON.stringify(updatedPatient),\"  updatedPatientPos:  \",updatedPatientPos,\"  slicedArray:  \",slicedArray);_this.state.patients.push(resData.data.updatePatientExamination);_this.context.patients=_this.state.patients;var responseAlert=JSON.stringify(resData.data).slice(2,25);_this.setState({userAlert:responseAlert});_this.fetchPatients();}).catch(function(err){console.log(err);_this.setState({userAlert:err});});};_this.updatePatientHistoryHandler=function(event){var token=_this.context.token;var userId=_this.context.userId;var selectedPatientId=_this.context.selectedPatient._id;// if(this.context.user.role !== 'admin') {\n//   console.log(\"No edit permission!!\");\n//   return;\n// }\nconsole.log(\"UpdatePatientHistoryFormData:  \",event.target.formGridHistoryTitle.value);_this.setState({updating:false,patientUpdateField:null});var historyType=event.target.formGridHistoryType.value;var historyDate=event.target.formGridHistoryDate.value;if(event.target.formGridHistoryDateTodayCheckbox.checked===true){historyDate=new Date().toISOString().slice(0,10);}var historyTitle=event.target.formGridHistoryTitle.value;var historyDescription=event.target.formGridHistoryDescription.value;// let historyAttachmentName = event.target.formGridHistoryAttachmentName.value;\nvar historyAttachmentFormat=event.target.formGridHistoryAttachmentFormat.value;var historyAttachmentPath=\"uploads/patients/\"+selectedPatientId+\"/history\";// let historyAttachmentPath = event.target.formGridHistoryAttachmentPath.value;\nvar file=AuthContext._currentValue.file;console.log(\"\\n    uploading to s3...\\n    file.name: \".concat(file.name,\",\\n    AuthContext._currentValue.file: \").concat(AuthContext._currentValue.file,\",\\n    \"));var config={bucketName:_this.context.creds.s3.bucketName,dirName:historyAttachmentPath,region:_this.context.creds.s3.region,accessKeyId:_this.context.creds.s3.accessKeyId,secretAccessKey:_this.context.creds.s3.secretAccessKey};var ReactS3Client=new S3(config);var newFileName=file.name;var historyAttachmentName=newFileName;ReactS3Client.uploadFile(file,newFileName).then(function(data){console.log(data);_this.setState({userAlert:\"attachment upload success!\"});}).catch(function(err){console.error(err);_this.setState({userAlert:\"upload error:  \"+err});});console.log(\"\\n    adding patient history...\\n    userId: \".concat(userId,\",\\n    patientId: \").concat(selectedPatientId,\",\\n    historyType: \").concat(historyType,\",\\n    historyDate: \").concat(historyDate,\",\\n    historyTitle: \").concat(historyTitle,\",\\n    historyDescription: \").concat(historyDescription,\",\\n    historyAttachmentName: \").concat(historyAttachmentName,\",\\n    historyAttachmentFormat: \").concat(historyAttachmentFormat,\",\\n    historyAttachmentPath: \").concat(historyAttachmentPath,\",\\n    \"));_this.setState({userAlert:\"adding patient history...\"});var requestBody={query:\"\\n        mutation {updatePatientHistory(userId:\\\"\".concat(userId,\"\\\", patientId:\\\"\").concat(selectedPatientId,\"\\\",patientInput:{historyTitle:\\\"\").concat(historyTitle,\"\\\",historyType:\\\"\").concat(historyType,\"\\\",historyDate:\\\"\").concat(historyDate,\"\\\",historyDescription:\\\"\").concat(historyDescription,\"\\\",historyAttachmentName:\\\"\").concat(historyAttachmentName,\"\\\",historyAttachmentFormat:\\\"\").concat(historyAttachmentFormat,\"\\\",historyAttachmentPath:\\\"\").concat(historyAttachmentPath,\"\\\"})\\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n      \")};fetch('http://localhost:10000/graphql',{method:'POST',body:JSON.stringify(requestBody),headers:{'Content-Type':'application/json',Authorization:'Bearer '+token}}).then(function(res){if(res.status!==200&&res.status!==201){throw new Error('Failed!');}return res.json();}).then(function(resData){console.log(\"response data... \"+JSON.stringify(resData.data));var updatedPatientId=resData.data.updatePatientHistory._id;var updatedPatient=_this.state.patients.find(function(e){return e._id===updatedPatientId;});var updatedPatientPos=_this.state.patients.indexOf(updatedPatient);var slicedArray=_this.state.patients.splice(updatedPatientPos,1);console.log(\"updatedPatient:  \",JSON.stringify(updatedPatient),\"  updatedPatientPos:  \",updatedPatientPos,\"  slicedArray:  \",slicedArray);_this.state.patients.push(resData.data.updatePatientHistory);_this.context.patients=_this.state.patients;var responseAlert=JSON.stringify(resData.data).slice(2,25);_this.setState({userAlert:responseAlert});_this.fetchPatients();}).catch(function(err){console.log(err);_this.setState({userAlert:err});});};_this.updatePatientAllergiesHandler=function(event){var token=_this.context.token;var userId=_this.context.userId;var selectedPatientId=_this.context.selectedPatient._id;// if(this.context.user.role !== 'admin') {\n//   console.log(\"No edit permission!!\");\n//   return;\n// }\nconsole.log(\"UpdatePatientAllergiesFormData:  \",event.target.formGridAllergiesTitle.value);_this.setState({updating:false,patientUpdateField:null});var allergiesTitle=event.target.formGridAllergiesTitle.value;var allergiesType=undefined;if(event.target.formGridAllergiesTypeSelect===\"select\"){allergiesType=event.target.formGridAllergiesType.value;}else{allergiesType=event.target.formGridAllergiesTypeSelect.value;}var allergiesDescription=event.target.formGridAllergiesDescription.value;// let allergiesAttachmentName = event.target.formGridAllergiesAttachmentName.value;\nvar allergiesAttachmentFormat=event.target.formGridAllergiesAttachmentFormat.value;var allergiesAttachmentPath=\"uploads/patients/\"+selectedPatientId+\"/allergies\";// let allergiesAttachmentPath = event.target.formGridAllergiesAttachmentPath.value;\nvar file=AuthContext._currentValue.file;console.log(\"\\n    uploading to s3...\\n    file.name: \".concat(file.name,\",\\n    AuthContext._currentValue.file: \").concat(AuthContext._currentValue.file,\",\\n    \"));var config={bucketName:_this.context.creds.s3.bucketName,dirName:allergiesAttachmentPath,region:_this.context.creds.s3.region,accessKeyId:_this.context.creds.s3.accessKeyId,secretAccessKey:_this.context.creds.s3.secretAccessKey};var ReactS3Client=new S3(config);var newFileName=file.name;var allergiesAttachmentName=newFileName;ReactS3Client.uploadFile(file,newFileName).then(function(data){console.log(data);_this.setState({userAlert:\"attachment upload success!\"});}).catch(function(err){console.error(err);_this.setState({userAlert:\"upload error:  \"+err});});console.log(\"\\n    adding patient allergies...\\n    userId: \".concat(userId,\",\\n    patientId: \").concat(selectedPatientId,\",\\n    allergiesTitle: \").concat(allergiesTitle,\",\\n    allergiesType: \").concat(allergiesType,\",\\n    allergiesDescription: \").concat(allergiesDescription,\",\\n    allergiesAttachmentName: \").concat(allergiesAttachmentName,\",\\n    allergiesAttachmentFormat: \").concat(allergiesAttachmentFormat,\",\\n    allergiesAttachmentPath: \").concat(allergiesAttachmentPath,\",\\n    \"));_this.setState({userAlert:\"adding patient allergies...\"});var requestBody={query:\"\\n        mutation {updatePatientAllergies(userId:\\\"\".concat(userId,\"\\\", patientId:\\\"\").concat(selectedPatientId,\"\\\",patientInput:{allergiesTitle:\\\"\").concat(allergiesTitle,\"\\\",allergiesType:\\\"\").concat(allergiesType,\"\\\", allergiesDescription:\\\"\").concat(allergiesDescription,\"\\\",allergiesAttachmentName:\\\"\").concat(allergiesAttachmentName,\"\\\",allergiesAttachmentFormat:\\\"\").concat(allergiesAttachmentFormat,\"\\\",allergiesAttachmentPath:\\\"\").concat(allergiesAttachmentPath,\"\\\"})\\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n      \")};fetch('http://localhost:10000/graphql',{method:'POST',body:JSON.stringify(requestBody),headers:{'Content-Type':'application/json',Authorization:'Bearer '+token}}).then(function(res){if(res.status!==200&&res.status!==201){throw new Error('Failed!');}return res.json();}).then(function(resData){console.log(\"response data... \"+JSON.stringify(resData.data));var updatedPatientId=resData.data.updatePatientAllergies._id;var updatedPatient=_this.state.patients.find(function(e){return e._id===updatedPatientId;});var updatedPatientPos=_this.state.patients.indexOf(updatedPatient);var slicedArray=_this.state.patients.splice(updatedPatientPos,1);console.log(\"updatedPatient:  \",JSON.stringify(updatedPatient),\"  updatedPatientPos:  \",updatedPatientPos,\"  slicedArray:  \",slicedArray);_this.state.patients.push(resData.data.updatePatientAllergies);_this.context.patients=_this.state.patients;var responseAlert=JSON.stringify(resData.data).slice(2,25);_this.setState({userAlert:responseAlert});_this.fetchPatients();}).catch(function(err){console.log(err);_this.setState({userAlert:err});});};_this.updatePatientMedicationHandler=function(event){var token=_this.context.token;var userId=_this.context.userId;var selectedPatientId=_this.context.selectedPatient._id;// if(this.context.user.role !== 'admin') {\n//   console.log(\"No edit permission!!\");\n//   return;\n// }\nconsole.log(\"UpdatePatientMedicationFormData:  \",event.target.formGridMedicationTitle.value);_this.setState({updating:false,patientUpdateField:null});var medicationTitle=event.target.formGridMedicationTitle.value;var medicationType=event.target.formGridMedicationType.value;var medicationDescription=event.target.formGridMedicationDescription.value;// let medicationAttachmentName = event.target.formGridMedicationAttachmentName.value;\nvar medicationAttachmentFormat=event.target.formGridMedicationAttachmentFormat.value;var medicationAttachmentPath=\"uploads/patients/\"+selectedPatientId+\"/medication\";// let medicationAttachmentPath = event.target.formGridMedicationAttachmentPath.value;\nvar file=AuthContext._currentValue.file;console.log(\"\\n    uploading to s3...\\n    file.name: \".concat(file.name,\",\\n    AuthContext._currentValue.file: \").concat(AuthContext._currentValue.file,\",\\n    \"));var config={bucketName:_this.context.creds.s3.bucketName,dirName:medicationAttachmentPath,region:_this.context.creds.s3.region,accessKeyId:_this.context.creds.s3.accessKeyId,secretAccessKey:_this.context.creds.s3.secretAccessKey};var ReactS3Client=new S3(config);var newFileName=file.name;var medicationAttachmentName=newFileName;ReactS3Client.uploadFile(file,newFileName).then(function(data){console.log(data);_this.setState({userAlert:\"attachment upload success!\"});}).catch(function(err){console.error(err);_this.setState({userAlert:\"upload error:  \"+err});});console.log(\"\\n    adding patient medication...\\n    userId: \".concat(userId,\",\\n    patientId: \").concat(selectedPatientId,\",\\n    medicationTitle: \").concat(medicationTitle,\",\\n    medicationType: \").concat(medicationType,\",\\n    medicationDescription: \").concat(medicationDescription,\",\\n    medicationAttachmentName: \").concat(medicationAttachmentName,\",\\n    medicationAttachmentFormat: \").concat(medicationAttachmentFormat,\",\\n    medicationAttachmentPath: \").concat(medicationAttachmentPath,\",\\n    \"));_this.setState({userAlert:\"adding patient medication...\"});var requestBody={query:\"\\n      mutation {updatePatientMedication(userId:\\\"\".concat(userId,\"\\\", patientId:\\\"\").concat(selectedPatientId,\"\\\",patientInput:{medicationTitle:\\\"\").concat(medicationTitle,\"\\\",medicationType:\\\"\").concat(medicationType,\"\\\" medicationDescription:\\\"\").concat(medicationDescription,\"\\\",medicationAttachmentName:\\\"\").concat(medicationAttachmentName,\"\\\",medicationAttachmentFormat:\\\"\").concat(medicationAttachmentFormat,\"\\\",medicationAttachmentPath:\\\"\").concat(medicationAttachmentPath,\"\\\"})\\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n      \")};fetch('http://localhost:10000/graphql',{method:'POST',body:JSON.stringify(requestBody),headers:{'Content-Type':'application/json',Authorization:'Bearer '+token}}).then(function(res){if(res.status!==200&&res.status!==201){throw new Error('Failed!');}return res.json();}).then(function(resData){console.log(\"response data... \"+JSON.stringify(resData.data));var updatedPatientId=resData.data.updatePatientMedication._id;var updatedPatient=_this.state.patients.find(function(e){return e._id===updatedPatientId;});var updatedPatientPos=_this.state.patients.indexOf(updatedPatient);var slicedArray=_this.state.patients.splice(updatedPatientPos,1);console.log(\"updatedPatient:  \",JSON.stringify(updatedPatient),\"  updatedPatientPos:  \",updatedPatientPos,\"  slicedArray:  \",slicedArray);_this.state.patients.push(resData.data.updatePatientMedication);_this.context.patients=_this.state.patients;var responseAlert=JSON.stringify(resData.data).slice(2,25);_this.setState({userAlert:responseAlert});_this.fetchPatients();}).catch(function(err){console.log(err);_this.setState({userAlert:err});});};_this.updatePatientInvestigationHandler=function(event){var token=_this.context.token;var userId=_this.context.userId;var selectedPatientId=_this.context.selectedPatient._id;// if(this.context.user.role !== 'admin') {\n//   console.log(\"No edit permission!!\");\n//   return;\n// }\nconsole.log(\"UpdatePatientInvestigationFormData:  \",event.target.formGridInvestigationTitle.value);_this.setState({updating:false,patientUpdateField:null});var investigationDate=event.target.formGridInvestigationDate.value;if(event.target.formGridInvestigationDateTodayCheckbox.checked===true){investigationDate=new Date().toISOString().slice(0,10);}var investigationTitle=event.target.formGridInvestigationTitle.value;var investigationType=undefined;if(event.target.formGridInvestigationTypeSelect===\"select\"){investigationType=event.target.formGridInvestigationType.value;}else{investigationType=event.target.formGridInvestigationTypeSelect.value;}var investigationDescription=event.target.formGridInvestigationDescription.value;// let investigationAttachmentName = event.target.formGridInvestigationAttachmentName.value;\nvar investigationAttachmentFormat=event.target.formGridInvestigationAttachmentFormat.value;var investigationAttachmentPath=\"uploads/patients/\"+selectedPatientId+\"/investigation\";// let investigationAttachmentPath = event.target.formGridInvestigationAttachmentPath.value;\nvar file=AuthContext._currentValue.file;console.log(\"\\n    uploading to s3...\\n    file.name: \".concat(file.name,\",\\n    AuthContext._currentValue.file: \").concat(AuthContext._currentValue.file,\",\\n    \"));var config={bucketName:_this.context.creds.s3.bucketName,dirName:investigationAttachmentPath,region:_this.context.creds.s3.region,accessKeyId:_this.context.creds.s3.accessKeyId,secretAccessKey:_this.context.creds.s3.secretAccessKey};var ReactS3Client=new S3(config);var newFileName=file.name;var investigationAttachmentName=newFileName;ReactS3Client.uploadFile(file,newFileName).then(function(data){console.log(data);_this.setState({userAlert:\"attachment upload success!\"});}).catch(function(err){console.error(err);_this.setState({userAlert:\"upload error:  \"+err});});console.log(\"\\n    adding patient investigation...\\n    userId: \".concat(userId,\",\\n    patientId: \").concat(selectedPatientId,\",\\n    investigationDate: \").concat(investigationDate,\",\\n    investigationTitle: \").concat(investigationTitle,\",\\n    investigationType: \").concat(investigationType,\",\\n    investigationDescription: \").concat(investigationDescription,\",\\n    investigationAttachmentName: \").concat(investigationAttachmentName,\",\\n    investigationAttachmentFormat: \").concat(investigationAttachmentFormat,\",\\n    investigationAttachmentPath: \").concat(investigationAttachmentPath,\",\\n    \"));_this.setState({userAlert:\"adding patient investigation...\"});var requestBody={query:\"\\n        mutation {updatePatientInvestigation(userId:\\\"\".concat(userId,\"\\\", patientId:\\\"\").concat(selectedPatientId,\"\\\",patientInput:{investigationDate:\\\"\").concat(investigationDate,\"\\\",investigationTitle:\\\"\").concat(investigationTitle,\"\\\",investigationType:\\\"\").concat(investigationType,\"\\\",investigationDescription:\\\"\").concat(investigationDescription,\"\\\",investigationAttachmentName:\\\"\").concat(investigationAttachmentName,\"\\\",investigationAttachmentFormat:\\\"\").concat(investigationAttachmentFormat,\"\\\",investigationAttachmentPath:\\\"\").concat(investigationAttachmentPath,\"\\\"})\\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n      \")};fetch('http://localhost:10000/graphql',{method:'POST',body:JSON.stringify(requestBody),headers:{'Content-Type':'application/json',Authorization:'Bearer '+token}}).then(function(res){if(res.status!==200&&res.status!==201){throw new Error('Failed!');}return res.json();}).then(function(resData){console.log(\"response data... \"+JSON.stringify(resData.data));var updatedPatientId=resData.data.updatePatientInvestigation._id;var updatedPatient=_this.state.patients.find(function(e){return e._id===updatedPatientId;});var updatedPatientPos=_this.state.patients.indexOf(updatedPatient);var slicedArray=_this.state.patients.splice(updatedPatientPos,1);console.log(\"updatedPatient:  \",JSON.stringify(updatedPatient),\"  updatedPatientPos:  \",updatedPatientPos,\"  slicedArray:  \",slicedArray);_this.state.patients.push(resData.data.updatePatientInvestigation);_this.context.patients=_this.state.patients;var responseAlert=JSON.stringify(resData.data).slice(2,25);_this.setState({userAlert:responseAlert});_this.fetchPatients();}).catch(function(err){console.log(err);_this.setState({userAlert:err});});};_this.updatePatientDiagnosisHandler=function(event){var token=_this.context.token;var userId=_this.context.userId;var selectedPatientId=_this.context.selectedPatient._id;// if(this.context.user.role !== 'admin') {\n//   console.log(\"No edit permission!!\");\n//   return;\n// }\nconsole.log(\"UpdatePatientDiagnosisFormData:  \",event.target.formGridDiagnosisTitle.value);_this.setState({updating:false,patientUpdateField:null});var diagnosisDate=event.target.formGridDiagnosisDate.value;if(event.target.formGridDiagnosisDateTodayCheckbox.checked===true){diagnosisDate=new Date().toISOString().slice(0,10);}var diagnosisTitle=event.target.formGridDiagnosisTitle.value;var diagnosisType=event.target.formGridDiagnosisType.value;var diagnosisDescription=event.target.formGridDiagnosisDescription.value;// let diagnosisAttachmentName = event.target.formGridDiagnosisAttachmentName.value;\nvar diagnosisAttachmentFormat=event.target.formGridDiagnosisAttachmentFormat.value;var diagnosisAttachmentPath=\"uploads/patients/\"+selectedPatientId+\"/diagnosis\";// let diagnosisAttachmentPath = event.target.formGridDiagnosisAttachmentPath.value;\nvar file=AuthContext._currentValue.file;console.log(\"\\n    uploading to s3...\\n    file.name: \".concat(file.name,\",\\n    AuthContext._currentValue.file: \").concat(AuthContext._currentValue.file,\",\\n    \"));var config={bucketName:_this.context.creds.s3.bucketName,dirName:diagnosisAttachmentPath,region:_this.context.creds.s3.region,accessKeyId:_this.context.creds.s3.accessKeyId,secretAccessKey:_this.context.creds.s3.secretAccessKey};var ReactS3Client=new S3(config);var newFileName=file.name;var diagnosisAttachmentName=newFileName;ReactS3Client.uploadFile(file,newFileName).then(function(data){console.log(data);_this.setState({userAlert:\"attachment upload success!\"});}).catch(function(err){console.error(err);_this.setState({userAlert:\"upload error:  \"+err});});console.log(\"\\n    adding patient diagnosis...\\n    userId: \".concat(userId,\",\\n    patientId: \").concat(selectedPatientId,\",\\n    diagnosisDate: \").concat(diagnosisDate,\",\\n    diagnosisTitle: \").concat(diagnosisTitle,\",\\n    diagnosisType: \").concat(diagnosisType,\",\\n    diagnosisDescription: \").concat(diagnosisDescription,\",\\n    diagnosisAttachmentName: \").concat(diagnosisAttachmentName,\",\\n    diagnosisAttachmentFormat: \").concat(diagnosisAttachmentFormat,\",\\n    diagnosisAttachmentPath: \").concat(diagnosisAttachmentPath,\",\\n    \"));_this.setState({userAlert:\"adding patient diagnosis...\"});var requestBody={query:\"\\n        mutation {updatePatientDiagnosis(userId:\\\"\".concat(userId,\"\\\", patientId:\\\"\").concat(selectedPatientId,\"\\\",patientInput:{diagnosisDate:\\\"\").concat(diagnosisDate,\"\\\",diagnosisTitle:\\\"\").concat(diagnosisTitle,\"\\\",diagnosisType:\\\"\").concat(diagnosisType,\"\\\",diagnosisDescription:\\\"\").concat(diagnosisDescription,\"\\\",diagnosisAttachmentName:\\\"\").concat(diagnosisAttachmentName,\"\\\",diagnosisAttachmentFormat:\\\"\").concat(diagnosisAttachmentFormat,\"\\\",diagnosisAttachmentPath:\\\"\").concat(diagnosisAttachmentPath,\"\\\"})\\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n      \")};fetch('http://localhost:10000/graphql',{method:'POST',body:JSON.stringify(requestBody),headers:{'Content-Type':'application/json',Authorization:'Bearer '+token}}).then(function(res){if(res.status!==200&&res.status!==201){throw new Error('Failed!');}return res.json();}).then(function(resData){console.log(\"response data... \"+JSON.stringify(resData.data));var updatedPatientId=resData.data.updatePatientDiagnosis._id;var updatedPatient=_this.state.patients.find(function(e){return e._id===updatedPatientId;});var updatedPatientPos=_this.state.patients.indexOf(updatedPatient);var slicedArray=_this.state.patients.splice(updatedPatientPos,1);console.log(\"updatedPatient:  \",JSON.stringify(updatedPatient),\"  updatedPatientPos:  \",updatedPatientPos,\"  slicedArray:  \",slicedArray);_this.state.patients.push(resData.data.updatePatientDiagnosis);_this.context.patients=_this.state.patients;var responseAlert=JSON.stringify(resData.data).slice(2,25);_this.setState({userAlert:responseAlert});_this.fetchPatients();}).catch(function(err){console.log(err);_this.setState({userAlert:err});});};_this.updatePatientTreatmentHandler=function(event){var token=_this.context.token;var userId=_this.context.userId;var selectedPatientId=_this.context.selectedPatient._id;// if(this.context.user.role !== 'admin') {\n//   console.log(\"No edit permission!!\");\n//   return;\n// }\nconsole.log(\"UpdatePatientTreatmentFormData:  \",event.target.formGridTreatmentTitle.value);_this.setState({updating:false,patientUpdateField:null});var treatmentDate=event.target.formGridTreatmentDate.value;if(event.target.formGridTreatmentDateTodayCheckbox.checked===true){treatmentDate=new Date().toISOString().slice(0,10);}var treatmentTitle=event.target.formGridTreatmentTitle.value;var treatmentDescription=event.target.formGridTreatmentDescription.value;var treatmentDose=event.target.formGridTreatmentDose.value;var treatmentFrequency=event.target.formGridTreatmentFrequency.value;var treatmentType=undefined;if(event.target.formGridInvestigationTypeSelect===\"select\"){treatmentType=event.target.formGridTreatmentType.value;}else{treatmentType=event.target.formGridTreatmentTypeSelect.value;}// let treatmentAttachmentName = event.target.formGridTreatmentAttachmentName.value;\nvar treatmentAttachmentFormat=event.target.formGridTreatmentAttachmentFormat.value;var treatmentAttachmentPath=\"uploads/patients/\"+selectedPatientId+\"/treatment\";// let treatmentAttachmentPath = event.target.formGridTreatmentAttachmentPath.value;\nvar file=AuthContext._currentValue.file;console.log(\"\\n    uploading to s3...\\n    file.name: \".concat(file.name,\",\\n    AuthContext._currentValue.file: \").concat(AuthContext._currentValue.file,\",\\n    \"));var config={bucketName:_this.context.creds.s3.bucketName,dirName:treatmentAttachmentPath,region:_this.context.creds.s3.region,accessKeyId:_this.context.creds.s3.accessKeyId,secretAccessKey:_this.context.creds.s3.secretAccessKey};var ReactS3Client=new S3(config);var newFileName=file.name;var treatmentAttachmentName=newFileName;ReactS3Client.uploadFile(file,newFileName).then(function(data){console.log(data);_this.setState({userAlert:\"attachment upload success!\"});}).catch(function(err){console.error(err);_this.setState({userAlert:\"upload error:  \"+err});});console.log(\"\\n    adding patient treatment...\\n    userId: \".concat(userId,\",\\n    patientId: \").concat(selectedPatientId,\",\\n    treatmentDate: \").concat(treatmentDate,\",\\n    treatmentTitle: \").concat(treatmentTitle,\",\\n    treatmentDescription: \").concat(treatmentDescription,\",\\n    treatmentDose: \").concat(treatmentDose,\",\\n    treatmentFrequency: \").concat(treatmentFrequency,\",\\n    treatmentType: \").concat(treatmentType,\",\\n    treatmentAttachmentName: \").concat(treatmentAttachmentName,\",\\n    treatmentAttachmentFormat: \").concat(treatmentAttachmentFormat,\",\\n    treatmentAttachmentPath: \").concat(treatmentAttachmentPath,\",\\n    \"));_this.setState({userAlert:\"adding patient treatment...\"});var requestBody={query:\"\\n        mutation {updatePatientTreatment(userId:\\\"\".concat(userId,\"\\\",patientId:\\\"\").concat(selectedPatientId,\"\\\",patientInput:{treatmentDate:\\\"\").concat(treatmentDate,\"\\\",treatmentTitle:\\\"\").concat(treatmentTitle,\"\\\",treatmentType:\\\"\").concat(treatmentType,\"\\\",treatmentDescription:\\\"\").concat(treatmentDescription,\"\\\",treatmentDose:\\\"\").concat(treatmentDose,\"\\\",treatmentFrequency:\\\"\").concat(treatmentFrequency,\"\\\",treatmentAttachmentName:\\\"\").concat(treatmentAttachmentName,\"\\\",treatmentAttachmentFormat:\\\"\").concat(treatmentAttachmentFormat,\"\\\",treatmentAttachmentPath:\\\"\").concat(treatmentAttachmentPath,\"\\\"})\\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n      \")};fetch('http://localhost:10000/graphql',{method:'POST',body:JSON.stringify(requestBody),headers:{'Content-Type':'application/json',Authorization:'Bearer '+token}}).then(function(res){if(res.status!==200&&res.status!==201){throw new Error('Failed!');}return res.json();}).then(function(resData){console.log(\"response data... \"+JSON.stringify(resData.data));var updatedPatientId=resData.data.updatePatientTreatment._id;var updatedPatient=_this.state.patients.find(function(e){return e._id===updatedPatientId;});var updatedPatientPos=_this.state.patients.indexOf(updatedPatient);var slicedArray=_this.state.patients.splice(updatedPatientPos,1);console.log(\"updatedPatient:  \",JSON.stringify(updatedPatient),\"  updatedPatientPos:  \",updatedPatientPos,\"  slicedArray:  \",slicedArray);_this.state.patients.push(resData.data.updatePatientTreatment);_this.context.patients=_this.state.patients;var responseAlert=JSON.stringify(resData.data).slice(2,25);_this.setState({userAlert:responseAlert});_this.fetchPatients();}).catch(function(err){console.log(err);_this.setState({userAlert:err});});};_this.updatePatientBillingHandler=function(event){var token=_this.context.token;var userId=_this.context.userId;var selectedPatientId=_this.context.selectedPatient._id;// if(this.context.user.role !== 'admin') {\n//   console.log(\"No edit permission!!\");\n//   return;\n// }\nconsole.log(\"UpdatePatientBillingFormData:  \",event.target.formGridBillingTitle.value);_this.setState({updating:false,patientUpdateField:null});var billingDate=event.target.formGridBillingDate.value;if(event.target.formGridBillingDateTodayCheckbox.checked===true){billingDate=new Date().toISOString().slice(0,10);}var billingTitle=event.target.formGridBillingTitle.value;var billingType=event.target.formGridBillingType.value;var billingDescription=event.target.formGridBillingDescription.value;var billingAmount=event.target.formGridBillingAmount.value;var billingPaid=event.target.formGridBillingPaid.value;var billingNotes=event.target.formGridBillingNotes.value;// let billingAttachmentName = event.target.formGridBillingAttachmentName.value;\nvar billingAttachmentFormat=event.target.formGridBillingAttachmentFormat.value;var billingAttachmentPath=\"uploads/patients/\"+selectedPatientId+\"/billing\";// let billingAttachmentPath = event.target.formGridBillingAttachmentPath.value;\nvar file=AuthContext._currentValue.file;console.log(\"\\n    uploading to s3...\\n    file.name: \".concat(file.name,\",\\n    AuthContext._currentValue.file: \").concat(AuthContext._currentValue.file,\",\\n    \"));var config={bucketName:_this.context.creds.s3.bucketName,dirName:billingAttachmentPath,region:_this.context.creds.s3.region,accessKeyId:_this.context.creds.s3.accessKeyId,secretAccessKey:_this.context.creds.s3.secretAccessKey};var ReactS3Client=new S3(config);var newFileName=file.name;var billingAttachmentName=newFileName;ReactS3Client.uploadFile(file,newFileName).then(function(data){console.log(data);_this.setState({userAlert:\"attachment upload success!\"});}).catch(function(err){console.error(err);_this.setState({userAlert:\"upload error:  \"+err});});console.log(\"\\n    adding patient billing...\\n    userId: \".concat(userId,\",\\n    patientId: \").concat(selectedPatientId,\",\\n    billingDate: \").concat(billingDate,\",\\n    billingTitle: \").concat(billingTitle,\",\\n    billingType: \").concat(billingType,\",\\n    billingDescription: \").concat(billingDescription,\",\\n    billingAmount: \").concat(billingAmount,\",\\n    billingPaid: \").concat(billingPaid,\",\\n    billingNotes: \").concat(billingNotes,\",\\n    billingAttachmentName: \").concat(billingAttachmentName,\",\\n    billingAttachmentFormat: \").concat(billingAttachmentFormat,\",\\n    billingAttachmentPath: \").concat(billingAttachmentPath,\",\\n    \"));_this.setState({userAlert:\"adding patient billing...\"});var requestBody={query:\"\\n        mutation {updatePatientBilling(userId:\\\"\".concat(userId,\"\\\", patientId:\\\"\").concat(selectedPatientId,\"\\\",patientInput:{billingDate:\\\"\").concat(billingDate,\"\\\",billingTitle:\\\"\").concat(billingTitle,\"\\\",billingType:\\\"\").concat(billingType,\"\\\",billingDescription:\\\"\").concat(billingDescription,\"\\\",billingAmount:\").concat(billingAmount,\",billingPaid:\").concat(billingPaid,\",billingNotes:\\\"\").concat(billingNotes,\"\\\",billingAttachmentName:\\\"\").concat(billingAttachmentName,\"\\\",billingAttachmentFormat:\\\"\").concat(billingAttachmentFormat,\"\\\",billingAttachmentPath:\\\"\").concat(billingAttachmentPath,\"\\\"})\\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n      \")};fetch('http://localhost:10000/graphql',{method:'POST',body:JSON.stringify(requestBody),headers:{'Content-Type':'application/json',Authorization:'Bearer '+token}}).then(function(res){if(res.status!==200&&res.status!==201){throw new Error('Failed!');}return res.json();}).then(function(resData){console.log(\"response data... \"+JSON.stringify(resData.data));var updatedPatientId=resData.data.updatePatientBilling._id;var updatedPatient=_this.state.patients.find(function(e){return e._id===updatedPatientId;});var updatedPatientPos=_this.state.patients.indexOf(updatedPatient);var slicedArray=_this.state.patients.splice(updatedPatientPos,1);console.log(\"updatedPatient:  \",JSON.stringify(updatedPatient),\"  updatedPatientPos:  \",updatedPatientPos,\"  slicedArray:  \",slicedArray);_this.state.patients.push(resData.data.updatePatientBilling);_this.context.patients=_this.state.patients;var responseAlert=JSON.stringify(resData.data).slice(2,25);_this.setState({userAlert:responseAlert});_this.fetchPatients();}).catch(function(err){console.log(err);_this.setState({userAlert:err});});};_this.updatePatientAttachmentHandler=function(event){var token=_this.context.token;var userId=_this.context.userId;var selectedPatientId=_this.context.selectedPatient._id;// if(this.context.user.role !== 'admin') {\n//   console.log(\"No edit permission!!\");\n//   return;\n// }\nconsole.log(\"\\n        UpdatePatientAttachmentFormData:\\n      \");_this.setState({updating:false,patientUpdateField:null});// let attachmentName = event.target.formGridPatientAttachmentName.value;\nvar attachmentFormat=event.target.formGridPatientAttachmentFormat.value;var attachmentPath=\"uploads/patients/\"+selectedPatientId+\"/attachments\";// let attachmentPath = event.target.formGridPatientAttachmentPath.value;\nvar file=AuthContext._currentValue.file;console.log(\"\\n      uploading to s3...\\n      file.name: \".concat(file.name,\",\\n      AuthContext._currentValue.file: \").concat(AuthContext._currentValue.file,\",\\n      \"));var config={bucketName:_this.context.creds.s3.bucketName,dirName:attachmentPath,region:_this.context.creds.s3.region,accessKeyId:_this.context.creds.s3.accessKeyId,secretAccessKey:_this.context.creds.s3.secretAccessKey};var ReactS3Client=new S3(config);var newFileName=file.name;var attachmentName=newFileName;ReactS3Client.uploadFile(file,newFileName).then(function(data){console.log(data);_this.setState({userAlert:\"attachment upload success!\"});}).catch(function(err){console.error(err);_this.setState({userAlert:\"upload error:  \"+err});});if(attachmentName.trim().length===0||attachmentFormat.trim().length===0||attachmentPath.trim().length===0){console.log(\"blank fields detected!!!...Please try again...\");_this.setState({userAlert:\"blank fields detected!!!...Please try again...\"});return;}_this.setState({userAlert:\"adding patient attachment\"});var requestBody={query:\"\\n                    mutation {updatePatientAttachment(userId:\\\"\".concat(userId,\"\\\",patientId:\\\"\").concat(selectedPatientId,\"\\\",patientInput:{attachmentName:\\\"\").concat(attachmentName,\"\\\",attachmentFormat:\\\"\").concat(attachmentFormat,\"\\\",attachmentPath:\\\"\").concat(attachmentPath,\"\\\"})\\n                    {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n            \")};fetch('http://localhost:10000/graphql',{method:'POST',body:JSON.stringify(requestBody),headers:{'Content-Type':'application/json',Authorization:'Bearer '+token}}).then(function(res){if(res.status!==200&&res.status!==201){throw new Error('Failed!');}return res.json();}).then(function(resData){console.log(\"response data... \"+JSON.stringify(resData.data));var updatedPatientId=resData.data.updatePatientAttachment._id;var updatedPatient=_this.state.patients.find(function(e){return e._id===updatedPatientId;});var updatedPatientPos=_this.state.patients.indexOf(updatedPatient);var slicedArray=_this.state.patients.splice(updatedPatientPos,1);console.log(\"updatedPatient:  \",JSON.stringify(updatedPatient),\"  updatedPatientPos:  \",updatedPatientPos,\"  slicedArray:  \",slicedArray);_this.state.patients.push(resData.data.updatePatientAttachment);_this.context.patients=_this.state.patients;var responseAlert=JSON.stringify(resData.data).slice(2,25);_this.setState({userAlert:responseAlert});// this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientAttachment})\n_this.fetchPatients();}).catch(function(err){console.log(err);_this.setState({userAlert:err});});};_this.updatePatientNoteHandler=function(event){var token=_this.context.token;var userId=_this.context.userId;var selectedPatientId=_this.context.selectedPatient._id;// if(this.context.user.role !== 'admin') {\n//   console.log(\"No edit permission!!\");\n//   return;\n// }\nconsole.log(\"\\n      UpdatePatientNoteFormData:\\n      \".concat(event.target.formGridNote.value,\"\\n    \"));_this.setState({updating:false,patientUpdateField:null});var note=event.target.formGridNote.value;if(note.trim().length===0){console.log(\"Can't Submit a blank form!!!...Please try again...\");_this.setState({userAlert:\"Can't Submit a blank form!!!...Please try again...\"});return;}_this.setState({userAlert:\"adding patient note\"});var requestBody={query:\"\\n              mutation {updatePatientNotes(userId:\\\"\".concat(userId,\"\\\",patientId:\\\"\").concat(selectedPatientId,\"\\\",patientInput:{notes:\\\"\").concat(note,\"\\\"})\\n              {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n            \")};fetch('http://localhost:10000/graphql',{method:'POST',body:JSON.stringify(requestBody),headers:{'Content-Type':'application/json',Authorization:'Bearer '+token}}).then(function(res){if(res.status!==200&&res.status!==201){throw new Error('Failed!');}return res.json();}).then(function(resData){console.log(\"response data... \"+JSON.stringify(resData.data));var updatedPatientId=resData.data.updatePatientNotes._id;var updatedPatient=_this.state.patients.find(function(e){return e._id===updatedPatientId;});var updatedPatientPos=_this.state.patients.indexOf(updatedPatient);var slicedArray=_this.state.patients.splice(updatedPatientPos,1);console.log(\"updatedPatient:  \",JSON.stringify(updatedPatient),\"  updatedPatientPos:  \",updatedPatientPos,\"  slicedArray:  \",slicedArray);_this.state.patients.push(resData.data.updatePatientNotes);_this.context.patients=_this.state.patients;var responseAlert=JSON.stringify(resData.data).slice(2,25);_this.setState({userAlert:responseAlert});// this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientNotes})\n_this.fetchPatients();}).catch(function(err){console.log(err);_this.setState({userAlert:err});});};_this.updatePatientTagHandler=function(event){var token=_this.context.token;var userId=_this.context.userId;var selectedPatientId=_this.context.selectedPatient._id;// if(this.context.user.role !== 'admin') {\n//   console.log(\"No edit permission!!\");\n//   return;\n// }\nconsole.log(\"\\n      UpdatePatientTagFormData:\\n      \".concat(event.target.formGridTag.value,\"\\n    \"));_this.setState({updating:false,patientUpdateField:null});var tag=event.target.formGridTag.value;if(tag.trim().length===0){console.log(\"Can't Submit a blank form!!!...Please try again...\");_this.setState({userAlert:\"Can't Submit a blank form!!!...Please try again...\"});return;}var requestBody={query:\"\\n                    mutation {updatePatientTags(userId:\\\"\".concat(userId,\"\\\",patientId:\\\"\").concat(selectedPatientId,\"\\\",patientInput:{tag:\\\"\").concat(tag,\"\\\"})\\n                    {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n            \")};_this.setState({userAlert:\"adding patient tag\"});fetch('http://localhost:10000/graphql',{method:'POST',body:JSON.stringify(requestBody),headers:{'Content-Type':'application/json',Authorization:'Bearer '+token}}).then(function(res){if(res.status!==200&&res.status!==201){throw new Error('Failed!');}return res.json();}).then(function(resData){console.log(\"response data... \"+JSON.stringify(resData.data));var updatedPatientId=resData.data.updatePatientTags._id;var updatedPatient=_this.state.patients.find(function(e){return e._id===updatedPatientId;});var updatedPatientPos=_this.state.patients.indexOf(updatedPatient);var slicedArray=_this.state.patients.splice(updatedPatientPos,1);console.log(\"updatedPatient:  \",JSON.stringify(updatedPatient),\"  updatedPatientPos:  \",updatedPatientPos,\"  slicedArray:  \",slicedArray);_this.state.patients.push(resData.data.updatePatientTags);_this.context.patients=_this.state.patients;var responseAlert=JSON.stringify(resData.data).slice(2,25);_this.setState({userAlert:responseAlert});_this.fetchPatients();}).catch(function(err){console.log(err);_this.setState({userAlert:err});});};_this.modalConfirmSearchHandler=function(event){console.log(\"SearchPatientForm:  \");var userId=_this.context.userId;console.log(\"SearchPatientFormData:  \",event.target.formBasicField.value);_this.setState({searching:false});var field=null;var query=event.target.formBasicQuery.value;if(event.target.formBasicFieldSelect.value===\"select\"){field=event.target.formBasicField.value;}else{field=event.target.formBasicFieldSelect.value;}_this.setState({patientSearchField:field,patientSearchQuery:query});if(field.trim().length===0||query.trim().length===0){console.log(\"blank fields detected!!!...Please try again...\");return;}_this.setState({userAlert:\"Searching for Patient:  \"});var requestBody={query:\"\\n        query {\\n          getPatientField(userId: \\\"\".concat(userId,\"\\\", field: \\\"\").concat(field,\"\\\", query: \\\"\").concat(query,\"\\\" )\\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n      \")};var token=_this.context.token;fetch('http://localhost:10000/graphql',{method:'POST',body:JSON.stringify(requestBody),headers:{'Content-Type':'application/json',Authorization:'Bearer '+token}}).then(function(res){if(res.status!==200&&res.status!==201){throw new Error('Failed!');}return res.json();}).then(function(resData){console.log(\"response data... \"+JSON.stringify(resData));var responseAlert=JSON.stringify(resData.data).slice(2,15);_this.setState({userAlert:responseAlert});var searchPatients=resData.data.getPatientField;_this.setState({searchPatients:searchPatients});console.log(\"state.searchPatients:  \",_this.state.searchPatients);// this.fetchPatients();\n}).catch(function(err){console.log(err);_this.setState({userAlert:err});});};_this.modalConfirmSearchIdHandler=function(event){console.log(\"SearchPatientIdFormData\");var userId=_this.context.userId;_this.setState({searching:false});var patientId=event.target.formBasicId.value;var requestBody={query:\"\\n      query {getPatientId(userId:\\\"\".concat(userId,\"\\\",patientId:\\\"\").concat(patientId,\"\\\")\\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{_id,title,time,location},consultant{date,reference{_id,name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n    \")};var token=_this.context.token;fetch('http://localhost:10000/graphql',{method:'POST',body:JSON.stringify(requestBody),headers:{'Content-Type':'application/json',Authorization:'Bearer '+token}}).then(function(res){if(res.status!==200&&res.status!==201){throw new Error('Failed!');}return res.json();}).then(function(resData){console.log(\"response data... \"+JSON.stringify(resData));var responseAlert=JSON.stringify(resData.data).slice(2,25);_this.setState({userAlert:responseAlert});var searchPatients=resData.data.getPatientId;_this.setState({searchPatients:[searchPatients]});console.log(\"state.searchPatients:  \",_this.state.searchPatients);// this.fetchUsers();\n}).catch(function(err){console.log(err);_this.setState({userAlert:err});});};_this.modalConfirmSearchNameHandler=function(event){console.log(\"SearchPatientNameFormData:\",event.target.formBasicName.value);// let userId = this.context.userId;\n_this.setState({searching:false});var patients=_this.state.patients;var regex=new RegExp(event.target.formBasicName.value,\"i\");console.log(\"\\n    regex: \".concat(regex,\",\\n    \"));var result=patients.filter(function(patient){return patient.name.match(regex);});console.log(\"\\n      result: \".concat(JSON.stringify(result),\"\\n      \"));_this.setState({searchPatients:result});};_this.getPatientVisit=function(event){var selectedPatient=_this.state.selectedPatient;event.preventDefault();console.log(\"\\n        getUserVisit function:\\n        selectedPatient.consultant: \".concat(JSON.stringify(selectedPatient.consultant),\",\\n        selectedPatient.complaints: \").concat(JSON.stringify(selectedPatient.complaints),\",\\n        visitDate: \").concat(new Date(event.target.formBasicVisitDate.value),\",\\n        complaintDate: \").concat(new Date(1580515200*1000),\",\\n      \"));var visitDate=new Date(event.target.formBasicVisitDate.value).toISOString().substring(0,10);var visitSurveys=selectedPatient.surveys.filter(function(x){return new Date(x.date.substr(0,10)*1000).toISOString().substring(0,10)===visitDate;});var visitConsultants=selectedPatient.consultant.filter(function(x){return new Date(x.date.substr(0,10)*1000).toISOString().substring(0,10)===visitDate;});var visitComplaints=selectedPatient.complaints.filter(function(x){return new Date(x.date.substr(0,10)*1000).toISOString().substring(0,10)===visitDate;});// let visitSurveys = selectedPatient.surveys.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString() === visitDate);\nvar visitVitals=selectedPatient.vitals.filter(function(x){return new Date(x.date.substr(0,10)*1000).toISOString().substring(0,10)===visitDate;});var visitExaminations=selectedPatient.examination.filter(function(x){return new Date(x.date.substr(0,10)*1000).toISOString().substring(0,10)===visitDate;});var visitHistory=selectedPatient.history.filter(function(x){return new Date(x.date.substr(0,10)*1000).toISOString().substring(0,10)===visitDate;});var visitInvestigations=selectedPatient.investigation.filter(function(x){return new Date(x.date.substr(0,10)*1000).toISOString().substring(0,10)===visitDate;});var visitDiagnosis=selectedPatient.diagnosis.filter(function(x){return new Date(x.date.substr(0,10)*1000).toISOString().substring(0,10)===visitDate;});var visitTreatments=selectedPatient.treatment.filter(function(x){return new Date(x.date.substr(0,10)*1000).toISOString().substring(0,10)===visitDate;});var visitBilling=selectedPatient.billing.filter(function(x){return new Date(x.date.substr(0,10)*1000).toISOString().substring(0,10)===visitDate;});var visit={date:visitDate,patientName:_this.context.selectedPatient.name,consultant:visitConsultants,complaint:visitComplaints,examination:visitExaminations,survey:visitSurveys,vitals:visitVitals,history:visitHistory,investigation:visitInvestigations,diagnosis:visitDiagnosis,treatment:visitTreatments,billing:visitBilling};console.log(\"\\n        visit: \".concat(JSON.stringify(visit),\",\\n        \"));_this.context.visit=visit;_this.setState({visit:visit});};_this.modalCancelHandler=function(){_this.setState({creating:false,updating:false,searching:false,selectedPatient:null});};_this.fetchPatientsAsc=function(){console.log(\"fetch patients function:  \");var userId=_this.context.userId;var token=_this.context.token;// this.setState({ isLoading: true });\nvar requestBody={query:\"\\n          query {patientsNameAsc(userId:\\\"\".concat(userId,\"\\\")\\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{_id,title,time,location,date},consultant{date,reference{_id,name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n        \")};fetch('http://localhost:10000/graphql',{method:'POST',body:JSON.stringify(requestBody),headers:{'Content-Type':'application/json',Authorization:'Bearer '+token}}).then(function(res){if(res.status!==200&&res.status!==201){throw new Error('Failed!');}return res.json();}).then(function(resData){console.log(\"resData\",resData);var patients=resData.data.patientsNameAsc;console.log(patients);var responseAlert=JSON.stringify(resData.data).slice(2,25);_this.setState({userAlert:responseAlert});_this.context.patients=patients;_this.setState({patients:patients});// if (this.isActive) {\n//   this.setState({ patients: patients, isLoading: false });\n// }\n}).catch(function(err){console.log(err);_this.setState({userAlert:err});// if (this.isActive) {\n//   this.setState({ isLoading: false });\n// }\n});};_this.fetchPatientsDesc=function(){console.log(\"fetch patients function:  \");var userId=_this.context.userId;var token=_this.context.token;// this.setState({ isLoading: true });\nvar requestBody={query:\"\\n          query {patientsNameDesc(userId:\\\"\".concat(userId,\"\\\")\\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{_id,title,time,location,date},consultant{date,reference{_id,name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n        \")};fetch('http://localhost:10000/graphql',{method:'POST',body:JSON.stringify(requestBody),headers:{'Content-Type':'application/json',Authorization:'Bearer '+token}}).then(function(res){if(res.status!==200&&res.status!==201){throw new Error('Failed!');}return res.json();}).then(function(resData){console.log(\"resData\",resData);var patients=resData.data.patientsNameDesc;console.log(patients);var responseAlert=JSON.stringify(resData.data).slice(2,25);_this.setState({userAlert:responseAlert});_this.context.patients=patients;// if (this.isActive) {\n//   this.setState({ patients: patients, isLoading: false });\n// }\n_this.setState({patients:patients});}).catch(function(err){console.log(err);_this.setState({userAlert:err});// if (this.isActive) {\n//   this.setState({ isLoading: false });\n// }\n});};_this.modalDeleteHandler=function(){console.log(\"deleting patient...selectedPatient:  \",_this.context.selectedPatient);var selectedPatientId=_this.context.selectedPatient._id;var userId=_this.context.selectedUser._id;if(_this.context.user.role!=='admin'){console.log(\"Not the Admin! No edit permission!!\");}_this.setState({deleting:true});var requestBody={query:\"\\n          mutation {deletePatient(userId:\\\"\".concat(userId,\"\\\",patientId:\\\"\").concat(selectedPatientId,\"\\\")\\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n        \")};fetch('http://localhost:10000/graphql',{method:'POST',body:JSON.stringify(requestBody),headers:{'Content-Type':'application/json',Authorization:'Bearer '+_this.context.token}}).then(function(res){if(res.status!==200&&res.status!==201){throw new Error('Failed!');}return res.json();}).then(function(resData){var deletedPatient=resData.data.deletePatient;console.log(deletedPatient);var responseAlert=JSON.stringify(resData.data).slice(2,25);_this.setState({userAlert:responseAlert});var deletedPatientId=deletedPatient._id;deletedPatient=_this.state.patients.find(function(e){return e._id===deletedPatientId;});var deletedPatientPos=_this.state.patients.indexOf(deletedPatient);var slicedArray=_this.state.patients.splice(deletedPatientPos,1);console.log(\"deletedPatient:  \",JSON.stringify(deletedPatient),\"  deletedUserPos:  \",deletedPatientPos,\"  slicedArray:  \",slicedArray);_this.setState({deleting:false});_this.fetchPatients();}).catch(function(err){console.log(err);_this.setState({userAlert:err});if(_this.isActive){_this.setState({deleting:false});}});};_this.deletePatientInsuranceItem=function(props){var token=_this.context.token;var userId=_this.context.userId;var patientId=_this.state.selectedPatient._id;console.log(\"\\n      delete patient insurance item:\\n      props: \".concat(JSON.stringify(props),\",\\n      token: \").concat(token,\",\\n      userId: \").concat(userId,\",\\n      patientId: \").concat(patientId,\",\\n      \"));var requestBody={query:\"\\n         mutation {deletePatientInsurance (userId:\\\"\".concat(userId,\"\\\", patientId:\\\"\").concat(patientId,\"\\\",insuranceCompany:\\\"\").concat(props.company,\"\\\",insuranceNumber:\\\"\").concat(props.number,\"\\\")\\n         {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n      \")};fetch('http://localhost:10000/graphql',{method:'POST',body:JSON.stringify(requestBody),headers:{'Content-Type':'application/json',Authorization:'Bearer '+token}}).then(function(res){if(res.status!==200&&res.status!==201){throw new Error('Failed!');}return res.json();}).then(function(resData){var deletedPatient=resData.data.deletePatientInsurance;console.log(deletedPatient);var updatedPatientId=resData.data.deletePatientInsurance._id;var updatedPatient=_this.state.patients.find(function(e){return e._id===updatedPatientId;});var updatedPatientPos=_this.state.patients.indexOf(updatedPatient);var slicedArray=_this.state.patients.splice(updatedPatientPos,1);console.log(\"updatedPatient:  \",JSON.stringify(updatedPatient),\"  updatedPatientPos:  \",updatedPatientPos,\"  slicedArray:  \",slicedArray);_this.state.patients.push(resData.data.deletePatientInsurance);_this.context.patients=_this.state.patients;var responseAlert=JSON.stringify(resData.data).slice(2,25);_this.setState({userAlert:responseAlert});// this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientInsurance})\n_this.fetchPatients();}).catch(function(err){console.log(err);});};_this.deletePatientAppointmentItem=function(props){var token=_this.context.token;var userId=_this.context.userId;var patientId=_this.state.selectedPatient._id;var date=new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);console.log(\"\\n      delete patient appointment item:\\n      props: \".concat(JSON.stringify(props),\",\\n      token: \").concat(token,\",\\n      userId: \").concat(userId,\",\\n      patientId: \").concat(patientId,\",\\n      appointment date: \").concat(date,\",\\n      \"));var requestBody={query:\"\\n         mutation {deletePatientAppointment (userId:\\\"\".concat(userId,\"\\\", patientId:\\\"\").concat(patientId,\"\\\",appointmentId:\\\"\").concat(props._id,\"\\\",appointmentDate:\\\"\").concat(date,\"\\\")\\n         {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n      \")};fetch('http://localhost:10000/graphql',{method:'POST',body:JSON.stringify(requestBody),headers:{'Content-Type':'application/json',Authorization:'Bearer '+token}}).then(function(res){if(res.status!==200&&res.status!==201){throw new Error('Failed!');}return res.json();}).then(function(resData){var deletedPatient=resData.data.deletePatientAppointment;console.log(deletedPatient);var updatedPatientId=resData.data.deletePatientAppointment._id;var updatedPatient=_this.state.patients.find(function(e){return e._id===updatedPatientId;});var updatedPatientPos=_this.state.patients.indexOf(updatedPatient);var slicedArray=_this.state.patients.splice(updatedPatientPos,1);console.log(\"updatedPatient:  \",JSON.stringify(updatedPatient),\"  updatedPatientPos:  \",updatedPatientPos,\"  slicedArray:  \",slicedArray);_this.state.patients.push(resData.data.deletePatientAppointment);_this.context.patients=_this.state.patients;var responseAlert=JSON.stringify(resData.data).slice(2,25);_this.setState({userAlert:responseAlert});_this.fetchPatients();}).catch(function(err){console.log(err);});};_this.deletePatientConsultantItem=function(props){var token=_this.context.token;var userId=_this.context.userId;var patientId=_this.state.selectedPatient._id;var date=new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);console.log(\"\\n      delete patient consultant item:\\n      props: \".concat(JSON.stringify(props),\",\\n      token: \").concat(token,\",\\n      userId: \").concat(userId,\",\\n      patientId: \").concat(patientId,\",\\n      consultant date: \").concat(date,\",\\n      \"));var requestBody={query:\"\\n         mutation {deletePatientConsultant (userId:\\\"\".concat(userId,\"\\\", patientId:\\\"\").concat(patientId,\"\\\",consultantId:\\\"\").concat(props.reference.id,\"\\\",consultantDate:\\\"\").concat(date,\"\\\")\\n         {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n      \")};fetch('http://localhost:10000/graphql',{method:'POST',body:JSON.stringify(requestBody),headers:{'Content-Type':'application/json',Authorization:'Bearer '+token}}).then(function(res){if(res.status!==200&&res.status!==201){throw new Error('Failed!');}return res.json();}).then(function(resData){var deletedPatient=resData.data.deletePatientConsultant;console.log(deletedPatient);var updatedPatientId=resData.data.deletePatientConsultant._id;var updatedPatient=_this.state.patients.find(function(e){return e._id===updatedPatientId;});var updatedPatientPos=_this.state.patients.indexOf(updatedPatient);var slicedArray=_this.state.patients.splice(updatedPatientPos,1);console.log(\"updatedPatient:  \",JSON.stringify(updatedPatient),\"  updatedPatientPos:  \",updatedPatientPos,\"  slicedArray:  \",slicedArray);_this.state.patients.push(resData.data.deletePatientConsultant);_this.context.patients=_this.state.patients;var responseAlert=JSON.stringify(resData.data).slice(2,25);_this.setState({userAlert:responseAlert});_this.fetchPatients();}).catch(function(err){console.log(err);});};_this.deletePatientNextOfKinItem=function(props){var token=_this.context.token;var userId=_this.context.userId;var patientId=_this.state.selectedPatient._id;console.log(\"\\n    delete patient nextOfKin item:\\n    props: \".concat(JSON.stringify(props),\",\\n    token: \").concat(token,\",\\n    userId: \").concat(userId,\",\\n    patientId: \").concat(patientId,\",\\n    \"));var requestBody={query:\"\\n       mutation {deletePatientNextOfKin (userId:\\\"\".concat(userId,\"\\\", patientId:\\\"\").concat(patientId,\"\\\",nextOfKinName:\\\"\").concat(props.name,\"\\\")\\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n    \")};fetch('http://localhost:10000/graphql',{method:'POST',body:JSON.stringify(requestBody),headers:{'Content-Type':'application/json',Authorization:'Bearer '+token}}).then(function(res){if(res.status!==200&&res.status!==201){throw new Error('Failed!');}return res.json();}).then(function(resData){var deletedPatient=resData.data.deletePatientNextOfKin;console.log(deletedPatient);var updatedPatientId=resData.data.deletePatientNextOfKin._id;var updatedPatient=_this.state.patients.find(function(e){return e._id===updatedPatientId;});var updatedPatientPos=_this.state.patients.indexOf(updatedPatient);var slicedArray=_this.state.patients.splice(updatedPatientPos,1);console.log(\"updatedPatient:  \",JSON.stringify(updatedPatient),\"  updatedPatientPos:  \",updatedPatientPos,\"  slicedArray:  \",slicedArray);_this.state.patients.push(resData.data.deletePatientNextOfKin);_this.context.patients=_this.state.patients;var responseAlert=JSON.stringify(resData.data).slice(2,25);_this.setState({userAlert:responseAlert});_this.fetchPatients();}).catch(function(err){console.log(err);});};_this.deletePatientComplaintItem=function(props){var token=_this.context.token;var userId=_this.context.userId;var patientId=_this.state.selectedPatient._id;var date=new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);console.log(\"\\n    delete patient Complaint item:\\n    props: \".concat(JSON.stringify(props),\",\\n    token: \").concat(token,\",\\n    userId: \").concat(userId,\",\\n    patientId: \").concat(patientId,\",\\n    complaint date: \").concat(date,\",\\n    \"));var requestBody={query:\"\\n       mutation {deletePatientComplaint (userId:\\\"\".concat(userId,\"\\\", patientId:\\\"\").concat(patientId,\"\\\",complaintTitle:\\\"\").concat(props.title,\"\\\",complaintDate:\\\"\").concat(date,\"\\\")\\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n    \")};fetch('http://localhost:10000/graphql',{method:'POST',body:JSON.stringify(requestBody),headers:{'Content-Type':'application/json',Authorization:'Bearer '+token}}).then(function(res){if(res.status!==200&&res.status!==201){throw new Error('Failed!');}return res.json();}).then(function(resData){var deletedPatient=resData.data.deletePatientComplaint;console.log(deletedPatient);var updatedPatientId=resData.data.deletePatientComplaint._id;var updatedPatient=_this.state.patients.find(function(e){return e._id===updatedPatientId;});var updatedPatientPos=_this.state.patients.indexOf(updatedPatient);var slicedArray=_this.state.patients.splice(updatedPatientPos,1);console.log(\"updatedPatient:  \",JSON.stringify(updatedPatient),\"  updatedPatientPos:  \",updatedPatientPos,\"  slicedArray:  \",slicedArray);_this.state.patients.push(resData.data.deletePatientComplaint);_this.context.patients=_this.state.patients;var responseAlert=JSON.stringify(resData.data).slice(2,25);_this.setState({userAlert:responseAlert});_this.fetchPatients();}).catch(function(err){console.log(err);});};_this.deletePatientSurveyItem=function(props){var token=_this.context.token;var userId=_this.context.userId;var patientId=_this.state.selectedPatient._id;var date=new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);console.log(\"\\n    delete patient Survey item:\\n    props: \".concat(JSON.stringify(props),\",\\n    token: \").concat(token,\",\\n    userId: \").concat(userId,\",\\n    patientId: \").concat(patientId,\",\\n    survey date: \").concat(date,\"\\n    \"));var requestBody={query:\"\\n       mutation {deletePatientSurvey (userId:\\\"\".concat(userId,\"\\\", patientId:\\\"\").concat(patientId,\"\\\",surveyTitle:\\\"\").concat(props.title,\"\\\",surveyDate:\\\"\").concat(date,\"\\\")\\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n    \")};fetch('http://localhost:10000/graphql',{method:'POST',body:JSON.stringify(requestBody),headers:{'Content-Type':'application/json',Authorization:'Bearer '+token}}).then(function(res){if(res.status!==200&&res.status!==201){throw new Error('Failed!');}return res.json();}).then(function(resData){var deletedPatient=resData.data.deletePatientSurvey;console.log(deletedPatient);var updatedPatientId=resData.data.deletePatientSurvey._id;var updatedPatient=_this.state.patients.find(function(e){return e._id===updatedPatientId;});var updatedPatientPos=_this.state.patients.indexOf(updatedPatient);var slicedArray=_this.state.patients.splice(updatedPatientPos,1);console.log(\"updatedPatient:  \",JSON.stringify(updatedPatient),\"  updatedPatientPos:  \",updatedPatientPos,\"  slicedArray:  \",slicedArray);_this.state.patients.push(resData.data.deletePatientSurvey);_this.context.patients=_this.state.patients;var responseAlert=JSON.stringify(resData.data).slice(2,25);_this.setState({userAlert:responseAlert});_this.fetchPatients();}).catch(function(err){console.log(err);});};_this.deletePatientVitalsItem=function(props){var token=_this.context.token;var userId=_this.context.userId;var patientId=_this.state.selectedPatient._id;var date=new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);console.log(\"\\n    delete patient Vitals item:\\n    props: \".concat(JSON.stringify(props),\",\\n    token: \").concat(token,\",\\n    userId: \").concat(userId,\",\\n    patientId: \").concat(patientId,\",\\n    vitals date: \").concat(date,\",\\n    \"));var requestBody={query:\"\\n       mutation {deletePatientVitals (userId:\\\"\".concat(userId,\"\\\", patientId:\\\"\").concat(patientId,\"\\\",vitalsDate:\\\"\").concat(date,\"\\\")\\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n    \")};fetch('http://localhost:10000/graphql',{method:'POST',body:JSON.stringify(requestBody),headers:{'Content-Type':'application/json',Authorization:'Bearer '+token}}).then(function(res){if(res.status!==200&&res.status!==201){throw new Error('Failed!');}return res.json();}).then(function(resData){var deletedPatient=resData.data.deletePatientVitals;console.log(deletedPatient);var updatedPatientId=resData.data.deletePatientVitals._id;var updatedPatient=_this.state.patients.find(function(e){return e._id===updatedPatientId;});var updatedPatientPos=_this.state.patients.indexOf(updatedPatient);var slicedArray=_this.state.patients.splice(updatedPatientPos,1);console.log(\"updatedPatient:  \",JSON.stringify(updatedPatient),\"  updatedPatientPos:  \",updatedPatientPos,\"  slicedArray:  \",slicedArray);_this.state.patients.push(resData.data.deletePatientVitals);_this.context.patients=_this.state.patients;var responseAlert=JSON.stringify(resData.data).slice(2,25);_this.setState({userAlert:responseAlert});_this.fetchPatients();}).catch(function(err){console.log(err);});};_this.deletePatientExaminationItem=function(props){var token=_this.context.token;var userId=_this.context.userId;var patientId=_this.state.selectedPatient._id;var date=new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);console.log(\"\\n    delete patient Examination item:\\n    props: \".concat(JSON.stringify(props),\",\\n    token: \").concat(token,\",\\n    userId: \").concat(userId,\",\\n    patientId: \").concat(patientId,\",\\n    examination date: \").concat(date,\",\\n    \"));var requestBody={query:\"\\n       mutation {deletePatientExamination (userId:\\\"\".concat(userId,\"\\\", patientId:\\\"\").concat(patientId,\"\\\",examinationType:\\\"\").concat(props.type,\"\\\",examinationDate:\\\"\").concat(date,\"\\\")\\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n    \")};fetch('http://localhost:10000/graphql',{method:'POST',body:JSON.stringify(requestBody),headers:{'Content-Type':'application/json',Authorization:'Bearer '+token}}).then(function(res){if(res.status!==200&&res.status!==201){throw new Error('Failed!');}return res.json();}).then(function(resData){var deletedPatient=resData.data.deletePatientExamination;console.log(deletedPatient);var updatedPatientId=resData.data.deletePatientExamination._id;var updatedPatient=_this.state.patients.find(function(e){return e._id===updatedPatientId;});var updatedPatientPos=_this.state.patients.indexOf(updatedPatient);var slicedArray=_this.state.patients.splice(updatedPatientPos,1);console.log(\"updatedPatient:  \",JSON.stringify(updatedPatient),\"  updatedPatientPos:  \",updatedPatientPos,\"  slicedArray:  \",slicedArray);_this.state.patients.push(resData.data.deletePatientExamination);_this.context.patients=_this.state.patients;var responseAlert=JSON.stringify(resData.data).slice(2,25);_this.setState({userAlert:responseAlert});_this.fetchPatients();}).catch(function(err){console.log(err);});};_this.deletePatientHistoryItem=function(props){var token=_this.context.token;var userId=_this.context.userId;var patientId=_this.state.selectedPatient._id;var date=new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);console.log(\"\\n    delete patient History item:\\n    props: \".concat(JSON.stringify(props),\",\\n    token: \").concat(token,\",\\n    userId: \").concat(userId,\",\\n    patientId: \").concat(patientId,\",\\n    history date: \").concat(date,\",\\n    \"));var requestBody={query:\"\\n       mutation {deletePatientHistory (userId:\\\"\".concat(userId,\"\\\", patientId:\\\"\").concat(patientId,\"\\\",historyTitle:\\\"\").concat(props.title,\"\\\",historyDate:\\\"\").concat(date,\"\\\")\\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n    \")};fetch('http://localhost:10000/graphql',{method:'POST',body:JSON.stringify(requestBody),headers:{'Content-Type':'application/json',Authorization:'Bearer '+token}}).then(function(res){if(res.status!==200&&res.status!==201){throw new Error('Failed!');}return res.json();}).then(function(resData){var deletedPatient=resData.data.deletePatientHistory;console.log(deletedPatient);var updatedPatientId=resData.data.deletePatientHistory._id;var updatedPatient=_this.state.patients.find(function(e){return e._id===updatedPatientId;});var updatedPatientPos=_this.state.patients.indexOf(updatedPatient);var slicedArray=_this.state.patients.splice(updatedPatientPos,1);console.log(\"updatedPatient:  \",JSON.stringify(updatedPatient),\"  updatedPatientPos:  \",updatedPatientPos,\"  slicedArray:  \",slicedArray);_this.state.patients.push(resData.data.deletePatientHistory);_this.context.patients=_this.state.patients;var responseAlert=JSON.stringify(resData.data).slice(2,25);_this.setState({userAlert:responseAlert});_this.fetchPatients();}).catch(function(err){console.log(err);});};_this.deletePatientAllergiesItem=function(props){var token=_this.context.token;var userId=_this.context.userId;var patientId=_this.state.selectedPatient._id;console.log(\"\\n    delete patient Allergies item:\\n    props: \".concat(JSON.stringify(props),\",\\n    token: \").concat(token,\",\\n    userId: \").concat(userId,\",\\n    patientId: \").concat(patientId,\",\\n    \"));var requestBody={query:\"\\n       mutation {deletePatientAllergies (userId:\\\"\".concat(userId,\"\\\", patientId:\\\"\").concat(patientId,\"\\\",allergiesTitle:\\\"\").concat(props.title,\"\\\",allergiesType:\\\"\").concat(props.type,\"\\\")\\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n    \")};fetch('http://localhost:10000/graphql',{method:'POST',body:JSON.stringify(requestBody),headers:{'Content-Type':'application/json',Authorization:'Bearer '+token}}).then(function(res){if(res.status!==200&&res.status!==201){throw new Error('Failed!');}return res.json();}).then(function(resData){var deletedPatient=resData.data.deletePatientAllergies;console.log(deletedPatient);var updatedPatientId=resData.data.deletePatientAllergies._id;var updatedPatient=_this.state.patients.find(function(e){return e._id===updatedPatientId;});var updatedPatientPos=_this.state.patients.indexOf(updatedPatient);var slicedArray=_this.state.patients.splice(updatedPatientPos,1);console.log(\"updatedPatient:  \",JSON.stringify(updatedPatient),\"  updatedPatientPos:  \",updatedPatientPos,\"  slicedArray:  \",slicedArray);_this.state.patients.push(resData.data.deletePatientAllergies);_this.context.patients=_this.state.patients;var responseAlert=JSON.stringify(resData.data).slice(2,25);_this.setState({userAlert:responseAlert});_this.fetchPatients();}).catch(function(err){console.log(err);});};_this.deletePatientMedicationItem=function(props){var token=_this.context.token;var userId=_this.context.userId;var patientId=_this.state.selectedPatient._id;console.log(\"\\n    delete patient Medication item:\\n    props: \".concat(JSON.stringify(props),\",\\n    token: \").concat(token,\",\\n    userId: \").concat(userId,\",\\n    patientId: \").concat(patientId,\",\\n    \"));var requestBody={query:\"\\n       mutation {deletePatientMedication (userId:\\\"\".concat(userId,\"\\\", patientId:\\\"\").concat(patientId,\"\\\",medicationTitle:\\\"\").concat(props.title,\"\\\",medicationType:\\\"\").concat(props.type,\"\\\")\\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n    \")};fetch('http://localhost:10000/graphql',{method:'POST',body:JSON.stringify(requestBody),headers:{'Content-Type':'application/json',Authorization:'Bearer '+token}}).then(function(res){if(res.status!==200&&res.status!==201){throw new Error('Failed!');}return res.json();}).then(function(resData){var deletedPatient=resData.data.deletePatientMedication;console.log(deletedPatient);var updatedPatientId=resData.data.deletePatientMedication._id;var updatedPatient=_this.state.patients.find(function(e){return e._id===updatedPatientId;});var updatedPatientPos=_this.state.patients.indexOf(updatedPatient);var slicedArray=_this.state.patients.splice(updatedPatientPos,1);console.log(\"updatedPatient:  \",JSON.stringify(updatedPatient),\"  updatedPatientPos:  \",updatedPatientPos,\"  slicedArray:  \",slicedArray);_this.state.patients.push(resData.data.deletePatientMedication);_this.context.patients=_this.state.patients;var responseAlert=JSON.stringify(resData.data).slice(2,25);_this.setState({userAlert:responseAlert});_this.fetchPatients();}).catch(function(err){console.log(err);});};_this.deletePatientInvestigationItem=function(props){var token=_this.context.token;var userId=_this.context.userId;var patientId=_this.state.selectedPatient._id;var date=new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);console.log(\"\\n    delete patient Investigation item:\\n    props: \".concat(JSON.stringify(props),\",\\n    token: \").concat(token,\",\\n    userId: \").concat(userId,\",\\n    patientId: \").concat(patientId,\",\\n    investigation date: \").concat(date,\",\\n    \"));var requestBody={query:\"\\n       mutation {deletePatientInvestigation (userId:\\\"\".concat(userId,\"\\\", patientId:\\\"\").concat(patientId,\"\\\",investigationDate:\\\"\").concat(date,\"\\\",investigationTitle:\\\"\").concat(props.title,\"\\\")\\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n    \")};fetch('http://localhost:10000/graphql',{method:'POST',body:JSON.stringify(requestBody),headers:{'Content-Type':'application/json',Authorization:'Bearer '+token}}).then(function(res){if(res.status!==200&&res.status!==201){throw new Error('Failed!');}return res.json();}).then(function(resData){var deletedPatient=resData.data.deletePatientInvestigation;console.log(deletedPatient);var updatedPatientId=resData.data.deletePatientInvestigation._id;var updatedPatient=_this.state.patients.find(function(e){return e._id===updatedPatientId;});var updatedPatientPos=_this.state.patients.indexOf(updatedPatient);var slicedArray=_this.state.patients.splice(updatedPatientPos,1);console.log(\"updatedPatient:  \",JSON.stringify(updatedPatient),\"  updatedPatientPos:  \",updatedPatientPos,\"  slicedArray:  \",slicedArray);_this.state.patients.push(resData.data.deletePatientInvestigation);_this.context.patients=_this.state.patients;var responseAlert=JSON.stringify(resData.data).slice(2,25);_this.setState({userAlert:responseAlert});_this.fetchPatients();}).catch(function(err){console.log(err);});};_this.deletePatientDiagnosisItem=function(props){var token=_this.context.token;var userId=_this.context.userId;var patientId=_this.state.selectedPatient._id;var date=new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);console.log(\"\\n    delete patient Diagnosis item:\\n    props: \".concat(JSON.stringify(props),\",\\n    token: \").concat(token,\",\\n    userId: \").concat(userId,\",\\n    patientId: \").concat(patientId,\",\\n    diagnosis date: \").concat(date,\"\\n    \"));var requestBody={query:\"\\n       mutation {deletePatientDiagnosis (userId:\\\"\".concat(userId,\"\\\",patientId:\\\"\").concat(patientId,\"\\\",diagnosisDate:\\\"\").concat(date,\"\\\",diagnosisTitle:\\\"\").concat(props.title,\"\\\")\\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n    \")};fetch('http://localhost:10000/graphql',{method:'POST',body:JSON.stringify(requestBody),headers:{'Content-Type':'application/json',Authorization:'Bearer '+token}}).then(function(res){if(res.status!==200&&res.status!==201){throw new Error('Failed!');}return res.json();}).then(function(resData){var deletedPatient=resData.data.deletePatientDiagnosis;console.log(deletedPatient);var updatedPatientId=resData.data.deletePatientDiagnosis._id;var updatedPatient=_this.state.patients.find(function(e){return e._id===updatedPatientId;});var updatedPatientPos=_this.state.patients.indexOf(updatedPatient);var slicedArray=_this.state.patients.splice(updatedPatientPos,1);console.log(\"updatedPatient:  \",JSON.stringify(updatedPatient),\"  updatedPatientPos:  \",updatedPatientPos,\"  slicedArray:  \",slicedArray);_this.state.patients.push(resData.data.deletePatientDiagnosis);_this.context.patients=_this.state.patients;var responseAlert=JSON.stringify(resData.data).slice(2,25);_this.setState({userAlert:responseAlert});_this.fetchPatients();}).catch(function(err){console.log(err);});};_this.deletePatientTreatmentItem=function(props){var token=_this.context.token;var userId=_this.context.userId;var patientId=_this.state.selectedPatient._id;var date=new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);console.log(\"\\n    delete patient Treatment item:\\n    props: \".concat(JSON.stringify(props),\",\\n    token: \").concat(token,\",\\n    userId: \").concat(userId,\",\\n    patientId: \").concat(patientId,\",\\n    treatment date: \").concat(date,\",\\n    \"));var requestBody={query:\"\\n       mutation {deletePatientTreatment (userId:\\\"\".concat(userId,\"\\\", patientId:\\\"\").concat(patientId,\"\\\",treatmentDate:\\\"\").concat(date,\"\\\",treatmentTitle:\\\"\").concat(props.title,\"\\\")\\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n    \")};fetch('http://localhost:10000/graphql',{method:'POST',body:JSON.stringify(requestBody),headers:{'Content-Type':'application/json',Authorization:'Bearer '+token}}).then(function(res){if(res.status!==200&&res.status!==201){throw new Error('Failed!');}return res.json();}).then(function(resData){var deletedPatient=resData.data.deletePatientTreatment;console.log(deletedPatient);var updatedPatientId=resData.data.deletePatientTreatment._id;var updatedPatient=_this.state.patients.find(function(e){return e._id===updatedPatientId;});var updatedPatientPos=_this.state.patients.indexOf(updatedPatient);var slicedArray=_this.state.patients.splice(updatedPatientPos,1);console.log(\"updatedPatient:  \",JSON.stringify(updatedPatient),\"  updatedPatientPos:  \",updatedPatientPos,\"  slicedArray:  \",slicedArray);_this.state.patients.push(resData.data.deletePatientTreatment);_this.context.patients=_this.state.patients;var responseAlert=JSON.stringify(resData.data).slice(2,25);_this.setState({userAlert:responseAlert});_this.fetchPatients();}).catch(function(err){console.log(err);});};_this.deletePatientBillingItem=function(props){var token=_this.context.token;var userId=_this.context.userId;var patientId=_this.state.selectedPatient._id;var date=new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);console.log(\"\\n    delete patient Billing item:\\n    props: \".concat(JSON.stringify(props),\",\\n    token: \").concat(token,\",\\n    userId: \").concat(userId,\",\\n    patientId: \").concat(patientId,\",\\n    billing date: \").concat(date,\",\\n    \"));var requestBody={query:\"\\n       mutation {deletePatientBilling (userId:\\\"\".concat(userId,\"\\\", patientId:\\\"\").concat(patientId,\"\\\",billingDate:\\\"\").concat(date,\"\\\",billingTitle:\\\"\").concat(props.title,\"\\\")\\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n    \")};fetch('http://localhost:10000/graphql',{method:'POST',body:JSON.stringify(requestBody),headers:{'Content-Type':'application/json',Authorization:'Bearer '+token}}).then(function(res){if(res.status!==200&&res.status!==201){throw new Error('Failed!');}return res.json();}).then(function(resData){var deletedPatient=resData.data.deletePatientBilling;console.log(deletedPatient);var updatedPatientId=resData.data.deletePatientBilling._id;var updatedPatient=_this.state.patients.find(function(e){return e._id===updatedPatientId;});var updatedPatientPos=_this.state.patients.indexOf(updatedPatient);var slicedArray=_this.state.patients.splice(updatedPatientPos,1);console.log(\"updatedPatient:  \",JSON.stringify(updatedPatient),\"  updatedPatientPos:  \",updatedPatientPos,\"  slicedArray:  \",slicedArray);_this.state.patients.push(resData.data.deletePatientBilling);_this.context.patients=_this.state.patients;var responseAlert=JSON.stringify(resData.data).slice(2,25);_this.setState({userAlert:responseAlert});_this.fetchPatients();}).catch(function(err){console.log(err);});};_this.deletePatientAttachmentItem=function(props){var token=_this.context.token;var userId=_this.context.userId;var patientId=_this.state.selectedPatient._id;// console.log(`\n//   deleting from s3...\n//   file.name: ${props.name},\n//   `);\n//\n//   const config = {\n//     bucketName: this.context.creds.s3.bucketName,\n//     dirName: props.path,\n//     region: this.context.creds.s3.region,\n//     accessKeyId: this.context.creds.s3.accessKeyId,\n//     secretAccessKey: this.context.creds.s3.secretAccessKey,\n//   }\n// const ReactS3Client = new S3(config);\n// const filename = props.name;\n// // const attachmentName = newFileName;\n// //\n// S3FileUpload\n// .deleteFile(filename, config)\n// .then(response => console.log(response))\n// .catch(err => console.error(err))\nconsole.log(\"\\n    delete patient Attachment item:\\n    props: \".concat(JSON.stringify(props),\",\\n    token: \").concat(token,\",\\n    userId: \").concat(userId,\",\\n    patientId: \").concat(patientId,\",\\n    \"));var requestBody={query:\"\\n       mutation {deletePatientAttachment (userId:\\\"\".concat(userId,\"\\\", patientId:\\\"\").concat(patientId,\"\\\",attachmentName:\\\"\").concat(props.name,\"\\\")\\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n    \")};fetch('http://localhost:10000/graphql',{method:'POST',body:JSON.stringify(requestBody),headers:{'Content-Type':'application/json',Authorization:'Bearer '+token}}).then(function(res){if(res.status!==200&&res.status!==201){throw new Error('Failed!');}return res.json();}).then(function(resData){var deletedPatient=resData.data.deletePatientAttachment;console.log(deletedPatient);var updatedPatientId=resData.data.deletePatientAttachment._id;var updatedPatient=_this.state.patients.find(function(e){return e._id===updatedPatientId;});var updatedPatientPos=_this.state.patients.indexOf(updatedPatient);var slicedArray=_this.state.patients.splice(updatedPatientPos,1);console.log(\"updatedPatient:  \",JSON.stringify(updatedPatient),\"  updatedPatientPos:  \",updatedPatientPos,\"  slicedArray:  \",slicedArray);_this.state.patients.push(resData.data.deletePatientAttachment);_this.context.patients=_this.state.patients;var responseAlert=JSON.stringify(resData.data).slice(2,25);_this.setState({userAlert:responseAlert});_this.fetchPatients();}).catch(function(err){console.log(err);});};_this.deletePatientNoteItem=function(props){var token=_this.context.token;var userId=_this.context.userId;var patientId=_this.state.selectedPatient._id;console.log(\"\\n    delete patient Note item:\\n    props: \".concat(JSON.stringify(props),\",\\n    token: \").concat(token,\",\\n    userId: \").concat(userId,\",\\n    patientId: \").concat(patientId,\",\\n    \"));var requestBody={query:\"\\n      mutation {deletePatientNote (userId:\\\"\".concat(userId,\"\\\", patientId:\\\"\").concat(patientId,\"\\\",note:\\\"\").concat(props,\"\\\")\\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n    \")};fetch('http://localhost:10000/graphql',{method:'POST',body:JSON.stringify(requestBody),headers:{'Content-Type':'application/json',Authorization:'Bearer '+token}}).then(function(res){if(res.status!==200&&res.status!==201){throw new Error('Failed!');}return res.json();}).then(function(resData){var deletedPatient=resData.data.deletePatientNote;console.log(deletedPatient);var updatedPatientId=resData.data.deletePatientNote._id;var updatedPatient=_this.state.patients.find(function(e){return e._id===updatedPatientId;});var updatedPatientPos=_this.state.patients.indexOf(updatedPatient);var slicedArray=_this.state.patients.splice(updatedPatientPos,1);console.log(\"updatedPatient:  \",JSON.stringify(updatedPatient),\"  updatedPatientPos:  \",updatedPatientPos,\"  slicedArray:  \",slicedArray);_this.state.patients.push(resData.data.deletePatientNote);_this.context.patients=_this.state.patients;var responseAlert=JSON.stringify(resData.data).slice(2,25);_this.setState({userAlert:responseAlert});_this.fetchPatients();}).catch(function(err){console.log(err);});};_this.deletePatientTagItem=function(props){var token=_this.context.token;var userId=_this.context.userId;var patientId=_this.state.selectedPatient._id;console.log(\"\\n    delete patient Tag item:\\n    props: \".concat(JSON.stringify(props),\",\\n    token: \").concat(token,\",\\n    userId: \").concat(userId,\",\\n    patientId: \").concat(patientId,\",\\n    \"));var requestBody={query:\"\\n      mutation {deletePatientTag (userId:\\\"\".concat(userId,\"\\\", patientId:\\\"\").concat(patientId,\"\\\",tag:\\\"\").concat(props,\"\\\")\\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n    \")};fetch('http://localhost:10000/graphql',{method:'POST',body:JSON.stringify(requestBody),headers:{'Content-Type':'application/json',Authorization:'Bearer '+token}}).then(function(res){if(res.status!==200&&res.status!==201){throw new Error('Failed!');}return res.json();}).then(function(resData){var deletedPatient=resData.data.deletePatientTag;console.log(deletedPatient);var updatedPatientId=resData.data.deletePatientTag._id;var updatedPatient=_this.state.patients.find(function(e){return e._id===updatedPatientId;});var updatedPatientPos=_this.state.patients.indexOf(updatedPatient);var slicedArray=_this.state.patients.splice(updatedPatientPos,1);console.log(\"updatedPatient:  \",JSON.stringify(updatedPatient),\"  updatedPatientPos:  \",updatedPatientPos,\"  slicedArray:  \",slicedArray);_this.state.patients.push(resData.data.deletePatientTag);_this.context.patients=_this.state.patients;var responseAlert=JSON.stringify(resData.data).slice(2,25);_this.setState({userAlert:responseAlert});_this.fetchPatients();}).catch(function(err){console.log(err);_this.setState({userAlert:err});});};_this.onViewAttachment=function(attachment){console.log(\"\\n      setting up attachment viewer...\\n      attachment: \".concat(JSON.stringify(attachment),\"\\n      \"));_this.setState({showAttachment:true});var file=\"https://ent-emr-bucket.s3-us-east-2.amazonaws.com/\"+attachment.path+\"/\"+attachment.name;var type=attachment.format;_this.setState({showThisAttachmentFile:file,showThisAttachmentType:type});};_this.closeAttachmentView=function(){console.log(\"\\n      closing attachment viewer...\\n      \");_this.setState({showAttachment:false});};_this.createPdf=function(patient){console.log(\"\\n        creating pdf...\\n        user: \".concat(JSON.stringify(patient),\"\\n      \"));var pdfData={title:\"This pdf is supplied with Patient data...\",patient:{_id:patient._id,title:patient.title,name:patient.name,dob:patient.dob,age:patient.age,gender:patient.gender,address:{number:patient.number,street:patient.street,town:patient.town,parish:patient.parish,postOffice:patient.postOffice},registrationDate:patient.registrationDate,referralDate:patient.referralDate,expirationDate:patient.expirationDate,attendingPhysician:{name:patient.attendingPhysician.name,email:patient.attendingPhysician.email,phone:patient.attendingPhysician.phone},referringDoctor:{name:patient.referringDoctor.name,email:patient.referringDoctor.email,phone:patient.referringDoctor.phone},contact:{phone:patient.contact.phone,email:patient.contact.email},occupation:{role:patient.occupation.role,employer:patient.occupation.employer,contact:{phone:patient.occupation.contact.phone,email:patient.occupation.contact.email}},appointments:patient.appointments,consultant:patient.consultant,insurance:patient.insurance,nextOfKin:patient.nextOfKin,complaints:patient.complaints,surveys:patient.surveys,vitals:patient.vitals,examination:patient.examination,history:patient.history,allergies:patient.allergies,medication:patient.medication,investigation:patient.investigation,diagnosis:patient.diagnosis,treatment:patient.treatment,billing:patient.billing,attachments:patient.attachments,notes:patient.notes,tags:patient.tags}};_this.setState({createPdf:true,pdfData:pdfData});};_this.closePdfCreator=function(){console.log(\"\\n      closing pdf creator...\\n      \");_this.setState({createPdf:false,pdfData:null});};_this.showDetailHandler=function(patientId){_this.setState(function(prevState){var selectedPatient=prevState.patients.find(function(e){return e._id===patientId;});_this.context.selectedPatient=selectedPatient;_this.context.selectedPatientId=selectedPatient._id;console.log(\"selectedPatient:  \",selectedPatient);return{selectedPatient:selectedPatient};});};_this.nameElRef=React.createRef();return _this;}_createClass(PatientsPage,[{key:\"componentDidMount\",value:function componentDidMount(){this.fetchPatients();if(this.context.user.name===\"Lord-of-the-Manor\"){this.setState({canDelete:true});}// if (this.context.user.name === 'admin579'){\n//   this.setState({canDelete: true})\n// }\n}},{key:\"fetchPatients\",value:function fetchPatients(){var _this2=this;console.log(\"fetch patients function:  \");var userId=this.context.userId;var token=this.context.token;this.setState({isLoading:true});var requestBody={query:\"\\n          query {patients(userId:\\\"\".concat(userId,\"\\\")\\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{_id,title,time,location,date},consultant{date,reference{_id,name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n        \")};fetch('http://localhost:10000/graphql',{method:'POST',body:JSON.stringify(requestBody),headers:{'Content-Type':'application/json',Authorization:'Bearer '+token}}).then(function(res){if(res.status!==200&&res.status!==201){throw new Error('Failed!');}return res.json();}).then(function(resData){console.log(\"resData\",resData);var patients=resData.data.patients;console.log(patients);var responseAlert=JSON.stringify(resData.data).slice(2,25);_this2.setState({userAlert:responseAlert});_this2.context.patients=_this2.state.patients;if(_this2.isActive){_this2.setState({patients:patients,isLoading:false});}}).catch(function(err){console.log(err);_this2.setState({userAlert:err});if(_this2.isActive){_this2.setState({isLoading:false});}});}},{key:\"updatePatientSpecial\",value:function updatePatientSpecial(event){console.log(\"special field to update:  \",event.target.value);var field=event.target.value;this.setState({patientUpdateField:field});}},{key:\"componentWillUnmount\",value:function componentWillUnmount(){this.isActive=false;}},{key:\"render\",value:function render(){return React.createElement(React.Fragment,null,this.state.showAttachment===true&&React.createElement(AttachmentViewer,{onCloseAttachmentView:this.closeAttachmentView,attachmentFile:this.state.showThisAttachmentFile,attachmentType:this.state.showThisAttachmentType}),this.state.createPdf===true&&React.createElement(PdfCreator,{pdfData:this.state.pdfData,onClosePdfCreator:this.closePdfCreator}),React.createElement(Accordion,null,React.createElement(Row,null,React.createElement(Col,{md:3,className:\"MasterCol1\"},React.createElement(AlertBox,{authUserId:this.context.userId,alert:this.state.userAlert}),React.createElement(SidebarPage,null)),React.createElement(Col,{md:9,className:\"MasterCol2\"},React.createElement(Container,{className:\"containerCombinedDetail\"},React.createElement(Tab.Container,{id:\"left-tabs-example\",defaultActiveKey:\"patientDetail\"},React.createElement(Row,null,React.createElement(Col,{sm:2},React.createElement(Nav,{variant:\"pills\",className:\"flex-column\"},React.createElement(Nav.Item,null,React.createElement(Nav.Link,{eventKey:\"MasterList\"},\"MASTER LIST\")),React.createElement(Nav.Item,null,React.createElement(Nav.Link,{eventKey:\"patientDetail\"},\"Selected\")),React.createElement(Nav.Item,null,React.createElement(Nav.Link,{eventKey:\"patientCreate\"},\"Create New\")),React.createElement(Nav.Item,null,React.createElement(Nav.Link,{eventKey:\"disabled\",disabled:true},\"Edit:\")),React.createElement(Nav.Item,null,React.createElement(Nav.Link,{eventKey:\"patientEditDemographics\"},\"Demographics\")),React.createElement(Nav.Item,null,React.createElement(Nav.Link,{eventKey:\"patientEditField\"},\"Single Field\")),React.createElement(Nav.Item,null,React.createElement(Nav.Link,{eventKey:\"disabled\",disabled:true},\"Add:\")),React.createElement(Nav.Item,null,React.createElement(Nav.Link,{eventKey:\"patientEditConsultant\"},\"Consultant\")),React.createElement(Nav.Item,null,React.createElement(Nav.Link,{eventKey:\"patientEditInsurance\"},\"Insurance\")),React.createElement(Nav.Item,null,React.createElement(Nav.Link,{eventKey:\"patientEditNextOfKin\"},\"Next of Kin\")),React.createElement(Nav.Item,null,React.createElement(Nav.Link,{eventKey:\"patientEditComplaint\"},\"Complaint\")),React.createElement(Nav.Item,null,React.createElement(Nav.Link,{eventKey:\"patientEditSurvey\"},\"Survey\")),React.createElement(Nav.Item,null,React.createElement(Nav.Link,{eventKey:\"patientEditVitals\"},\"Vitals\")),React.createElement(Nav.Item,null,React.createElement(Nav.Link,{eventKey:\"patientEditExamination\"},\"Examination\")),React.createElement(Nav.Item,null,React.createElement(Nav.Link,{eventKey:\"patientEditHistory\"},\"History\")),React.createElement(Nav.Item,null,React.createElement(Nav.Link,{eventKey:\"patientEditAllergies\"},\"Allergies\")),React.createElement(Nav.Item,null,React.createElement(Nav.Link,{eventKey:\"patientEditMedication\"},\"Medication\")),React.createElement(Nav.Item,null,React.createElement(Nav.Link,{eventKey:\"patientEditInvestigation\"},\"Investigation\")),React.createElement(Nav.Item,null,React.createElement(Nav.Link,{eventKey:\"patientEditDiagnosis\"},\"Diagnosis\")),React.createElement(Nav.Item,null,React.createElement(Nav.Link,{eventKey:\"patientEditTreatment\"},\"Treatment\")),React.createElement(Nav.Item,null,React.createElement(Nav.Link,{eventKey:\"patientEditBilling\"},\"Billing\")),React.createElement(Nav.Item,null,React.createElement(Nav.Link,{eventKey:\"patientEditAttachment\"},\"Attachment\")),React.createElement(Nav.Item,null,React.createElement(Nav.Link,{eventKey:\"patientEditNote\"},\"Note\")),React.createElement(Nav.Item,null,React.createElement(Nav.Link,{eventKey:\"patientEditTag\"},\"Tag\")),React.createElement(Nav.Item,null,React.createElement(Nav.Link,{eventKey:\"disabled\",disabled:true},\"Search:\")),React.createElement(Nav.Item,null,React.createElement(Nav.Link,{eventKey:\"SearchInput\"},\"Input\")),React.createElement(Nav.Item,null,React.createElement(Nav.Link,{eventKey:\"SearchResult\"},\"Search\")))),React.createElement(Col,{sm:10},React.createElement(Tab.Content,null,React.createElement(Tab.Pane,{eventKey:\"patientDetail\"},this.state.selectedPatient===null&&React.createElement(Button,{variant:\"outline-warning\",size:\"lg\",className:\"confirmEditButton\"},\"Select a Patient from the Master List\"),this.state.isLoading===false&&this.state.selectedPatient!==null&&React.createElement(PatientDetail,{authUserId:this.context.userId,token:this.context.token,patient:this.state.selectedPatient,onEdit:this.startUpdatePatientHandler,canDelete:this.state.canDelete,onDelete:this.modalDeleteHandler,onGetVisit:this.getPatientVisit,visit:this.context.visit,fetchUsers:this.fetchUsers,appointmentDelete:this.deletePatientAppointmentItem,consultantDelete:this.deletePatientConsultantItem,insuranceDelete:this.deletePatientInsuranceItem,nextOfKinDelete:this.deletePatientNextOfKinItem,complaintDelete:this.deletePatientComplaintItem,surveyDelete:this.deletePatientSurveyItem,vitalsDelete:this.deletePatientVitalsItem,examinationDelete:this.deletePatientExaminationItem,historyDelete:this.deletePatientHistoryItem,allergiesDelete:this.deletePatientAllergiesItem,medicationDelete:this.deletePatientMedicationItem,investigationDelete:this.deletePatientInvestigationItem,diagnosisDelete:this.deletePatientDiagnosisItem,treatmentDelete:this.deletePatientTreatmentItem,billingDelete:this.deletePatientBillingItem,attachmentDelete:this.deletePatientAttachmentItem,noteDelete:this.deletePatientNoteItem,tagDelete:this.deletePatientTagItem,onViewAttachment:this.onViewAttachment,onCreatePdf:this.createPdf})),React.createElement(Tab.Pane,{eventKey:\"patientCreate\"},React.createElement(Button,{variant:\"outline-primary\",size:\"lg\",className:\"confirmEditButton\",onClick:this.startCreatePatientHandler},\"Create NEW Patient Profile\"),this.state.creating&&React.createElement(CreatePatientForm,{canCancel:true,canConfirm:true,onCancel:this.modalCancelHandler,onConfirm:this.modalConfirmHandler,confirmText:\"Confirm\"})),React.createElement(Tab.Pane,{eventKey:\"patientEditDemographics\"},this.state.selectedPatient===null&&React.createElement(Button,{variant:\"outline-warning\",size:\"lg\",className:\"confirmEditButton\"},\"Select a Patient from the Master List\"),this.state.selectedPatient!==null&&React.createElement(Button,{variant:\"outline-primary\",size:\"lg\",className:\"confirmEditButton\",onClick:this.startUpdatePatientHandler},\"Edit Demographics\"),this.state.updating&&this.state.selectedPatient!==null&&React.createElement(UpdatePatientForm,{authUserId:this.context.userId,canCancel:true,canConfirm:true,onCancel:this.modalCancelHandler,onConfirm:this.modalConfirmUpdateHandler,confirmText:\"Confirm\",patient:this.state.selectedPatient})),React.createElement(Tab.Pane,{eventKey:\"patientEditField\"},this.state.selectedPatient===null&&React.createElement(Button,{variant:\"outline-warning\",size:\"lg\",className:\"confirmEditButton\"},\"Select a Patient from the Master List\"),this.state.selectedPatient!==null&&React.createElement(Button,{variant:\"outline-primary\",size:\"lg\",className:\"confirmEditButton\",onClick:this.startUpdatePatientHandler},\"Edit a Single Field\"),this.state.updating&&this.state.selectedPatient!==null&&React.createElement(UpdatePatientFieldForm,{authUserId:this.context.userId,canCancel:true,canConfirm:true,onCancel:this.modalCancelHandler,onConfirm:this.modalConfirmUpdateFieldHandler,confirmText:\"Confirm\",patient:this.state.selectedPatient})),React.createElement(Tab.Pane,{eventKey:\"patientEditConsultant\"},this.state.selectedPatient===null&&React.createElement(Button,{variant:\"outline-warning\",size:\"lg\",className:\"confirmEditButton\"},\"Select a Patient from the Master List\"),this.state.selectedPatient!==null&&React.createElement(Button,{variant:\"outline-primary\",value:\"consultant\",size:\"lg\",className:\"confirmEditButton\",onClick:this.updatePatientSpecial.bind(this)},\"Add a Consultant\"),this.state.patientUpdateField==='consultant'&&this.state.selectedPatient!==null&&React.createElement(UpdatePatientConsultantForm,{authUserId:this.context.userId,canCancel:true,canConfirm:true,onCancel:this.modalCancelHandler,onConfirm:this.updatePatientConsultantHandler,confirmText:\"Confirm\",consultant:this.context.selectedUser}),this.state.patientUpdateField==='consultant'&&this.state.selectedPatient!==null&&React.createElement(Row,null,React.createElement(\"p\",null,\"Add Consultant: \",this.context.selectedUser.name),React.createElement(\"p\",null,\" To Paitient: \",this.state.selectedPatient.name,\" ??\"),React.createElement(\"hr\",null)),this.state.patientUpdateField==='consultant'&&this.state.selectedPatient!==null&&React.createElement(Row,null,React.createElement(Button,{variant:\"outline-warning\",size:\"lg\",className:\"confirmEditButton\"},\"Select someone from the Staff page\"))),React.createElement(Tab.Pane,{eventKey:\"patientEditInsurance\"},this.state.selectedPatient===null&&React.createElement(Button,{variant:\"outline-warning\",size:\"lg\",className:\"confirmEditButton\"},\"Select a Patient from the Master List\"),this.state.selectedPatient!==null&&React.createElement(Button,{variant:\"outline-primary\",value:\"insurance\",size:\"lg\",className:\"confirmEditButton\",onClick:this.updatePatientSpecial.bind(this)},\"Add Insurance\"),this.state.patientUpdateField==='insurance'&&this.state.selectedPatient!==null&&React.createElement(UpdatePatientInsuranceForm,{authUserId:this.context.userId,canCancel:true,canConfirm:true,onCancel:this.modalCancelHandler,onConfirm:this.updatePatientInsuranceHandler,confirmText:\"Confirm\",patient:this.state.selectedPatient})),React.createElement(Tab.Pane,{eventKey:\"patientEditNextOfKin\"},this.state.selectedPatient===null&&React.createElement(Button,{variant:\"outline-warning\",size:\"lg\"},\"Select a Patient from the Master List\"),this.state.selectedPatient!==null&&React.createElement(Button,{variant:\"outline-primary\",value:\"nextOfKin\",size:\"lg\",className:\"confirmEditButton\",onClick:this.updatePatientSpecial.bind(this)},\"Add NextOfKin\"),this.state.patientUpdateField==='nextOfKin'&&this.state.selectedPatient!==null&&React.createElement(UpdatePatientNextOfKinForm,{authUserId:this.context.userId,canCancel:true,canConfirm:true,onCancel:this.modalCancelHandler,onConfirm:this.updatePatientNextOfKinHandler,confirmText:\"Confirm\",patient:this.state.selectedPatient})),React.createElement(Tab.Pane,{eventKey:\"patientEditComplaint\"},this.state.selectedPatient===null&&React.createElement(Button,{variant:\"outline-warning\",size:\"lg\",className:\"confirmEditButton\"},\"Select a Patient from the Master List\"),this.state.selectedPatient!==null&&React.createElement(Button,{variant:\"outline-primary\",value:\"complaint\",size:\"lg\",className:\"confirmEditButton\",onClick:this.updatePatientSpecial.bind(this)},\"Add Complaint\"),this.state.patientUpdateField==='complaint'&&this.state.selectedPatient!==null&&React.createElement(UpdatePatientComplaintForm,{authUserId:this.context.userId,canCancel:true,canConfirm:true,onCancel:this.modalCancelHandler,onConfirm:this.updatePatientComplaintHandler,confirmText:\"Confirm\",patient:this.state.selectedPatient})),React.createElement(Tab.Pane,{eventKey:\"patientEditSurvey\"},this.state.selectedPatient===null&&React.createElement(Button,{variant:\"outline-warning\",size:\"lg\",className:\"confirmEditButton\"},\"Select a Patient from the Master List\"),this.state.selectedPatient!==null&&React.createElement(Button,{variant:\"outline-primary\",value:\"survey\",size:\"lg\",className:\"confirmEditButton\",onClick:this.updatePatientSpecial.bind(this)},\"Add Survey\"),this.state.patientUpdateField==='survey'&&this.state.selectedPatient!==null&&React.createElement(UpdatePatientSurveyForm,{authUserId:this.context.userId,canCancel:true,canConfirm:true,onCancel:this.modalCancelHandler,onConfirm:this.updatePatientSurveyHandler,confirmText:\"Confirm\",patient:this.state.selectedPatient})),React.createElement(Tab.Pane,{eventKey:\"patientEditVitals\"},this.state.selectedPatient===null&&React.createElement(Button,{variant:\"outline-warning\",size:\"lg\"},\"Select a Patient from the Master List\"),this.state.selectedPatient!==null&&React.createElement(Button,{variant:\"outline-primary\",value:\"vitals\",size:\"lg\",className:\"confirmEditButton\",onClick:this.updatePatientSpecial.bind(this)},\"Add Vitals\"),this.state.patientUpdateField==='vitals'&&this.state.selectedPatient!==null&&React.createElement(UpdatePatientVitalsForm,{authUserId:this.context.userId,canCancel:true,canConfirm:true,onCancel:this.modalCancelHandler,onConfirm:this.updatePatientVitalsHandler,confirmText:\"Confirm\",patient:this.state.selectedPatient})),React.createElement(Tab.Pane,{eventKey:\"patientEditExamination\"},this.state.selectedPatient===null&&React.createElement(Button,{variant:\"outline-warning\",size:\"lg\"},\"Select a Patient from the Master List\"),this.state.selectedPatient!==null&&React.createElement(Button,{variant:\"outline-primary\",value:\"examintion\",size:\"lg\",className:\"confirmEditButton\",onClick:this.updatePatientSpecial.bind(this)},\"Add Examination\"),this.state.patientUpdateField==='examintion'&&this.state.selectedPatient!==null&&React.createElement(UpdatePatientExaminationForm,{authUserId:this.context.userId,canCancel:true,canConfirm:true,onCancel:this.modalCancelHandler,onConfirm:this.updatePatientExaminationHandler,confirmText:\"Confirm\",patient:this.state.selectedPatient})),React.createElement(Tab.Pane,{eventKey:\"patientEditHistory\"},this.state.selectedPatient===null&&React.createElement(Button,{variant:\"outline-warning\",size:\"lg\"},\"Select a Patient from the Master List\"),this.state.selectedPatient!==null&&React.createElement(Button,{variant:\"outline-primary\",value:\"history\",size:\"lg\",className:\"confirmEditButton\",onClick:this.updatePatientSpecial.bind(this)},\"Add History\"),this.state.patientUpdateField==='history'&&this.state.selectedPatient!==null&&React.createElement(UpdatePatientHistoryForm,{authUserId:this.context.userId,canCancel:true,canConfirm:true,onCancel:this.modalCancelHandler,onConfirm:this.updatePatientHistoryHandler,confirmText:\"Confirm\",patient:this.state.selectedPatient})),React.createElement(Tab.Pane,{eventKey:\"patientEditAllergies\"},this.state.selectedPatient===null&&React.createElement(Button,{variant:\"outline-warning\",size:\"lg\"},\"Select a Patient from the Master List\"),this.state.selectedPatient!==null&&React.createElement(Button,{variant:\"outline-primary\",value:\"allergies\",size:\"lg\",className:\"confirmEditButton\",onClick:this.updatePatientSpecial.bind(this)},\"Add Allergies\"),this.state.patientUpdateField==='allergies'&&this.state.selectedPatient!==null&&React.createElement(UpdatePatientAllergiesForm,{authUserId:this.context.userId,canCancel:true,canConfirm:true,onCancel:this.modalCancelHandler,onConfirm:this.updatePatientAllergiesHandler,confirmText:\"Confirm\",patient:this.state.selectedPatient})),React.createElement(Tab.Pane,{eventKey:\"patientEditMedication\"},this.state.selectedPatient===null&&React.createElement(Button,{variant:\"outline-warning\",size:\"lg\"},\"Select a Patient from the Master List\"),this.state.selectedPatient!==null&&React.createElement(Button,{variant:\"outline-primary\",value:\"medication\",size:\"lg\",className:\"confirmEditButton\",onClick:this.updatePatientSpecial.bind(this)},\"Add Medication\"),this.state.patientUpdateField==='medication'&&this.state.selectedPatient!==null&&React.createElement(UpdatePatientMedicationForm,{authUserId:this.context.userId,canCancel:true,canConfirm:true,onCancel:this.modalCancelHandler,onConfirm:this.updatePatientMedicationHandler,confirmText:\"Confirm\",patient:this.state.selectedPatient})),React.createElement(Tab.Pane,{eventKey:\"patientEditInvestigation\"},this.state.selectedPatient===null&&React.createElement(Button,{variant:\"outline-warning\",size:\"lg\",className:\"confirmEditButton\"},\"Select a Patient from the Master List\"),this.state.selectedPatient!==null&&React.createElement(Button,{variant:\"outline-primary\",value:\"investigation\",size:\"lg\",className:\"confirmEditButton\",onClick:this.updatePatientSpecial.bind(this)},\"Add Investigation\"),this.state.patientUpdateField==='investigation'&&this.state.selectedPatient!==null&&React.createElement(UpdatePatientInvestigationForm,{authUserId:this.context.userId,canCancel:true,canConfirm:true,onCancel:this.modalCancelHandler,onConfirm:this.updatePatientInvestigationHandler,confirmText:\"Confirm\",patient:this.state.selectedPatient})),React.createElement(Tab.Pane,{eventKey:\"patientEditDiagnosis\"},this.state.selectedPatient===null&&React.createElement(Button,{variant:\"outline-warning\",size:\"lg\",className:\"confirmEditButton\"},\"Select a Patient from the Master List\"),this.state.selectedPatient!==null&&React.createElement(Button,{variant:\"outline-primary\",value:\"diagnosis\",size:\"lg\",className:\"confirmEditButton\",onClick:this.updatePatientSpecial.bind(this)},\"Add Diagnosis\"),this.state.patientUpdateField==='diagnosis'&&this.state.selectedPatient!==null&&React.createElement(UpdatePatientDiagnosisForm,{authUserId:this.context.userId,canCancel:true,canConfirm:true,onCancel:this.modalCancelHandler,onConfirm:this.updatePatientDiagnosisHandler,confirmText:\"Confirm\",patient:this.state.selectedPatient})),React.createElement(Tab.Pane,{eventKey:\"patientEditTreatment\"},this.state.selectedPatient===null&&React.createElement(Button,{variant:\"outline-warning\",size:\"lg\"},\"Select a Patient from the Master List\"),this.state.selectedPatient!==null&&React.createElement(Button,{variant:\"outline-primary\",value:\"treatment\",size:\"lg\",className:\"confirmEditButton\",onClick:this.updatePatientSpecial.bind(this)},\"Add Treatment\"),this.state.patientUpdateField==='treatment'&&this.state.selectedPatient!==null&&React.createElement(UpdatePatientTreatmentForm,{authUserId:this.context.userId,canCancel:true,canConfirm:true,onCancel:this.modalCancelHandler,onConfirm:this.updatePatientTreatmentHandler,confirmText:\"Confirm\",patient:this.state.selectedPatient})),React.createElement(Tab.Pane,{eventKey:\"patientEditBilling\"},this.state.selectedPatient===null&&React.createElement(Button,{variant:\"outline-warning\",size:\"lg\"},\"Select a Patient from the Master List\"),this.state.selectedPatient!==null&&React.createElement(Button,{variant:\"outline-primary\",value:\"billing\",size:\"lg\",className:\"confirmEditButton\",onClick:this.updatePatientSpecial.bind(this)},\"Add Billing\"),this.state.patientUpdateField==='billing'&&this.state.selectedPatient!==null&&React.createElement(UpdatePatientBillingForm,{authUserId:this.context.userId,canCancel:true,canConfirm:true,onCancel:this.modalCancelHandler,onConfirm:this.updatePatientBillingHandler,confirmText:\"Confirm\",patient:this.state.selectedPatient})),React.createElement(Tab.Pane,{eventKey:\"patientEditAttachment\"},this.state.selectedPatient===null&&React.createElement(Button,{variant:\"outline-warning\",size:\"lg\",className:\"confirmEditButton\"},\"Select a Patient from the Master List\"),this.state.selectedPatient!==null&&React.createElement(Button,{variant:\"outline-primary\",value:\"attachment\",size:\"lg\",className:\"confirmEditButton\",onClick:this.updatePatientSpecial.bind(this)},\"Add Attachment\"),this.state.patientUpdateField==='attachment'&&this.state.selectedPatient!==null&&React.createElement(UpdatePatientAttachmentForm,{authUserId:this.context.userId,canCancel:true,canConfirm:true,onCancel:this.modalCancelHandler,onConfirm:this.updatePatientAttachmentHandler,confirmText:\"Confirm\",patient:this.state.selectedPatient})),React.createElement(Tab.Pane,{eventKey:\"patientEditNote\"},this.state.selectedPatient===null&&React.createElement(Button,{variant:\"outline-warning\",size:\"lg\",className:\"confirmEditButton\"},\"Select a Patient from the Master List\"),this.state.selectedPatient!==null&&React.createElement(Button,{variant:\"outline-primary\",value:\"notes\",size:\"lg\",className:\"confirmEditButton\",onClick:this.updatePatientSpecial.bind(this)},\"Add Note\"),this.state.patientUpdateField==='notes'&&this.state.selectedPatient!==null&&React.createElement(UpdatePatientNoteForm,{authUserId:this.context.userId,canCancel:true,canConfirm:true,onCancel:this.modalCancelHandler,onConfirm:this.updatePatientNoteHandler,confirmText:\"Confirm\",patient:this.state.selectedPatient})),React.createElement(Tab.Pane,{eventKey:\"patientEditTag\"},this.state.selectedPatient===null&&React.createElement(Button,{variant:\"outline-warning\",size:\"lg\",className:\"confirmEditButton\"},\"Select a Patient from the Master List\"),this.state.selectedPatient!==null&&React.createElement(Button,{variant:\"outline-primary\",value:\"tags\",size:\"lg\",className:\"confirmEditButton\",onClick:this.updatePatientSpecial.bind(this)},\"Add Tag\"),this.state.patientUpdateField==='tags'&&this.state.selectedPatient!==null&&React.createElement(UpdatePatientTagForm,{authUserId:this.context.userId,canCancel:true,canConfirm:true,onCancel:this.modalCancelHandler,onConfirm:this.updatePatientTagHandler,confirmText:\"Confirm\",patient:this.state.selectedPatient})),React.createElement(Tab.Pane,{eventKey:\"MasterList\"},React.createElement(Container,{className:\"containerUserMasterList\"},React.createElement(Row,{className:\"searchListRow\"},React.createElement(Button,{variant:\"primary\",size:\"sm\",onClick:this.fetchPatientsAsc},\"Sort Asc\"),React.createElement(Button,{variant:\"info\",size:\"sm\",onClick:this.fetchPatientsDesc},\"Sort Desc\"),this.state.isLoading?React.createElement(Spinner,null):React.createElement(PatientList,{patients:this.state.patients,authUserId:this.context.userId,onViewDetail:this.showDetailHandler})))),React.createElement(Tab.Pane,{eventKey:\"SearchInput\"},React.createElement(Container,{className:\"containerSearchUserInput\"},this.context.token&&React.createElement(Row,{className:\"searchUserRowAdd\"},React.createElement(Button,{variant:\"primary\",onClick:this.startSearchPatientHandler},\"Search\")),React.createElement(Row,{className:\"searchUserRowForm\"},React.createElement(Col,{md:10,className:\"searchUserColForm\"},React.createElement(Tabs,{defaultActiveKey:\"Field\",id:\"uncontrolled-tab-example\"},React.createElement(Tab,{eventKey:\"Search\",title:\"Search:\",disabled:true}),React.createElement(Tab,{eventKey:\"Field\",title:\"Search by Field:\"},this.state.searching!==true&&React.createElement(Button,{variant:\"outline-warning\",className:\"confirmEditButton\",size:\"lg\"},\"Click the 'Search' Button start\"),this.state.searching===true&&React.createElement(SearchPatientForm,{authUserId:this.context.userId,canCancel:true,canConfirm:true,onCancel:this.modalCancelHandler,onConfirm:this.modalConfirmSearchHandler,confirmText:\"Search\",patient:this.context.selectedPatient})),React.createElement(Tab,{eventKey:\"Id\",title:\"Search by ID:\"},this.state.searching!==true&&React.createElement(Button,{variant:\"outline-warning\",className:\"confirmEditButton\",size:\"lg\"},\"Click the 'Search' Button start\"),this.state.searching===true&&React.createElement(SearchPatientIdForm,{authUserId:this.context.userId,canCancel:true,canConfirm:true,onCancel:this.modalCancelHandler,onConfirm:this.modalConfirmSearchIdHandler,confirmText:\"Search\",patient:this.context.selectedPatient})),React.createElement(Tab,{eventKey:\"Name\",title:\"Search by Name:\"},this.state.searching!==true&&React.createElement(Button,{variant:\"outline-warning\",className:\"confirmEditButton\",size:\"lg\"},\"Click the 'Search' Button start\"),this.state.searching===true&&React.createElement(SearchPatientNameForm,{authUserId:this.context.userId,canCancel:true,canConfirm:true,onCancel:this.modalCancelHandler,onConfirm:this.modalConfirmSearchNameHandler,confirmText:\"Search\",patient:this.context.selectedPatient}))))))),React.createElement(Tab.Pane,{eventKey:\"SearchResult\"},React.createElement(Container,{className:\"containerSearchUserResults\"},React.createElement(Row,null,React.createElement(Card,{className:\"searchCard\"},React.createElement(Card.Body,{className:\"searchCardBody\"},React.createElement(Card.Title,null,\"Your Search\"),React.createElement(Card.Text,null,\"Field: \",this.state.patientSearchField),React.createElement(Card.Text,null,\"Query: \",this.state.patientSearchQuery)))),React.createElement(Row,{className:\"searchListRow\"},this.state.searchPatients!==[]&&React.createElement(SearchPatientList,{searchPatients:this.state.searchPatients,authUserId:this.context.userId,onCancel:this.modalCancelHandler,onViewDetail:this.showDetailHandler})))))))))),React.createElement(Col,{md:3,className:\"MasterCol3\"}))));}}]);return PatientsPage;}(Component);PatientsPage.contextType=AuthContext;export default PatientsPage;","map":{"version":3,"sources":["/Users/pedrojacob/Downloads/AMR/websites/office_records/ENT_EMR/frontend/src/pages/Patients.js"],"names":["React","Component","S3","Container","Row","Col","Button","Accordion","SidebarPage","Tabs","Tab","Nav","Card","PatientList","PatientDetail","Spinner","AuthContext","SearchPatientList","SearchPatientForm","SearchPatientIdForm","SearchPatientNameForm","AlertBox","AttachmentViewer","PdfCreator","CreatePatientForm","UpdatePatientForm","UpdatePatientFieldForm","UpdatePatientConsultantForm","UpdatePatientInsuranceForm","UpdatePatientNextOfKinForm","UpdatePatientComplaintForm","UpdatePatientSurveyForm","UpdatePatientVitalsForm","UpdatePatientExaminationForm","UpdatePatientHistoryForm","UpdatePatientAllergiesForm","UpdatePatientMedicationForm","UpdatePatientInvestigationForm","UpdatePatientDiagnosisForm","UpdatePatientTreatmentForm","UpdatePatientBillingForm","UpdatePatientAttachmentForm","UpdatePatientNoteForm","UpdatePatientTagForm","PatientsPage","props","state","creating","updating","searching","updatingArray","deleting","patients","searchPatients","isLoading","selectedPatient","patientUpdateField","patientSearchField","patientSearchQuery","canDelete","visit","userAlert","showAttachment","showThisAttachmentFile","showThisAttachmentType","createPdf","pdfData","isActive","startCreatePatientHandler","setState","console","log","startUpdatePatientHandler","startSearchPatientHandler","modalConfirmHandler","event","target","formGridName","value","userId","context","title","formGridTitle","name","dob","formGridDob","age","formGridAge","gender","formGridGender","addressNumber","formGridAddressNumber","addressStreet","formGridAddressStreet","addressTown","formGridAddressTown","addressParish","formGridAddressParish","addressPostOffice","formGridAddressPostOffice","contactPhone","formGridContactPhone","contactEmail","formGridContactEmail","registrationDate","formGridRegistrationDate","formGridRegistrationDateTodayCheckbox","checked","Date","toISOString","slice","referralDate","formGridReferralDate","formGridReferralDateTodayCheckbox","expirationDate","formGridExpirationDate","attendingPhysicianName","formGridAttendingPhysicianName","attendingPhysicianEmail","formGridAttendingPhysicianEmail","attendingPhysicianPhone","formGridAttendingPhysicianPhone","referringDoctorName","formGridReferringDoctorName","referringDoctorEmail","formGridReferringDoctorEmail","referringDoctorPhone","formGridReferringDoctorPhone","occupationRole","formGridOccupationRole","occupationEmployer","formGridOccupationEmployer","occupationEmployerContactPhone","formGridOccupationEmployerContactPhone","occupationEmployerContactEmail","formGridOccupationEmployerContactEmail","trim","length","requestBody","query","token","fetch","method","body","JSON","stringify","headers","Authorization","then","res","status","Error","json","resData","data","createPatient","responseAlert","newPatient","prevState","updatedPatients","push","catch","err","modalCancelHandler","modalConfirmUpdateHandler","selectedPatientId","_id","formGridExpirationDateTodayCheckbox","address","number","street","town","parish","postOffice","contact","phone","email","attendingPhysician","referringDoctor","occupation","role","employer","updatedPatientId","updatePatient","updatedPatient","find","e","updatedPatientPos","indexOf","slicedArray","splice","fetchPatients","modalConfirmUpdateFieldHandler","formGridField","field","formGridQuery","formGridFieldSelect","updatePatientField","updatePatientConsultantHandler","patientConsultantReference","selectedUser","undefined","formGridConsultantDate","consultantDate","formGridConsultantDateTodayCheckbox","updatePatientConsultant","updatePatientInsuranceHandler","formGridInsuranceCompany","insuranceCompany","insuranceNumber","formGridInsuranceNumber","insuranceExpiry","formGridInsuranceExpiry","insuranceDescription","formGridInsuranceDescription","insuranceSubscriberCompany","formGridInsuranceSubscriberCompany","insuranceSubscriberDescription","formGridInsuranceSubscriberDescription","updatePatientInsurance","updatePatientNextOfKinHandler","formGridNextOfKinName","nextOfKinName","nextOfKinPhone","formGridNextOfKinPhone","nextOfKinEmail","formGridNextOfKinEmail","updatePatientNextOfKin","updatePatientComplaintHandler","formGridComplaintTitle","complaintTitle","complaintDate","formGridComplaintDate","formGridComplaintDateTodayCheckbox","complaintDescription","formGridComplaintDescription","complaintAnamnesis","formGridComplaintAnamnesis","complaintAttachmentFormat","formGridComplaintAttachmentFormat","complaintAttachmentPath","file","_currentValue","config","bucketName","creds","s3","dirName","region","accessKeyId","secretAccessKey","ReactS3Client","newFileName","complaintAttachmentName","uploadFile","error","updatePatientComplaint","updatePatientSurveyHandler","formGridSurveyTitle","surveyDate","formGridSurveyDate","formGridSurveyDateTodayCheckbox","surveyTitle","surveyDescription","formGridSurveyDescription","surveyAttachmentFormat","formGridSurveyAttachmentFormat","surveyAttachmentPath","surveyAttachmentName","updatePatientSurvey","updatePatientVitalsHandler","formGridVitalsDate","vitalsDate","formGridVitalsDateTodayCheckbox","vitalsPr","formGridVitalsPr","vitalsBp1","formGridVitalsBp1","vitalsBp2","formGridVitalsBp2","vitalsRr","formGridVitalsRr","vitalsTemp","formGridVitalsTemp","vitalsPs02","formGridVitalsPs02","vitalsHeight","formGridVitalsHeight","vitalsWeight","formGridVitalsWeight","vitalsBmi","formGridVitalsBmi","vitalsUrineType","formGridVitalsUrineType","vitalsUrineValue","formGridVitalsUrineValue","updatePatientVitals","updatePatientExaminationHandler","formGridExaminationArea","examinationDate","formGridExaminationDate","formGridExaminationDateTodayCheckbox","examinationGeneral","formGridExaminationGeneral","examinationArea","formGridExaminationAreaSelect","examinationType","formGridExaminationType","examinationMeasure","formGridExaminationMeasure","examinationValue","formGridExaminationValue","examinationDescription","formGridExaminationDescription","examinationFollowUp","formGridExaminationFollowUp","examinationAttachmentFormat","formGridExaminationAttachmentFormat","examinationAttachmentPath","examinationAttachmentName","updatePatientExamination","updatePatientHistoryHandler","formGridHistoryTitle","historyType","formGridHistoryType","historyDate","formGridHistoryDate","formGridHistoryDateTodayCheckbox","historyTitle","historyDescription","formGridHistoryDescription","historyAttachmentFormat","formGridHistoryAttachmentFormat","historyAttachmentPath","historyAttachmentName","updatePatientHistory","updatePatientAllergiesHandler","formGridAllergiesTitle","allergiesTitle","allergiesType","formGridAllergiesTypeSelect","formGridAllergiesType","allergiesDescription","formGridAllergiesDescription","allergiesAttachmentFormat","formGridAllergiesAttachmentFormat","allergiesAttachmentPath","allergiesAttachmentName","updatePatientAllergies","updatePatientMedicationHandler","formGridMedicationTitle","medicationTitle","medicationType","formGridMedicationType","medicationDescription","formGridMedicationDescription","medicationAttachmentFormat","formGridMedicationAttachmentFormat","medicationAttachmentPath","medicationAttachmentName","updatePatientMedication","updatePatientInvestigationHandler","formGridInvestigationTitle","investigationDate","formGridInvestigationDate","formGridInvestigationDateTodayCheckbox","investigationTitle","investigationType","formGridInvestigationTypeSelect","formGridInvestigationType","investigationDescription","formGridInvestigationDescription","investigationAttachmentFormat","formGridInvestigationAttachmentFormat","investigationAttachmentPath","investigationAttachmentName","updatePatientInvestigation","updatePatientDiagnosisHandler","formGridDiagnosisTitle","diagnosisDate","formGridDiagnosisDate","formGridDiagnosisDateTodayCheckbox","diagnosisTitle","diagnosisType","formGridDiagnosisType","diagnosisDescription","formGridDiagnosisDescription","diagnosisAttachmentFormat","formGridDiagnosisAttachmentFormat","diagnosisAttachmentPath","diagnosisAttachmentName","updatePatientDiagnosis","updatePatientTreatmentHandler","formGridTreatmentTitle","treatmentDate","formGridTreatmentDate","formGridTreatmentDateTodayCheckbox","treatmentTitle","treatmentDescription","formGridTreatmentDescription","treatmentDose","formGridTreatmentDose","treatmentFrequency","formGridTreatmentFrequency","treatmentType","formGridTreatmentType","formGridTreatmentTypeSelect","treatmentAttachmentFormat","formGridTreatmentAttachmentFormat","treatmentAttachmentPath","treatmentAttachmentName","updatePatientTreatment","updatePatientBillingHandler","formGridBillingTitle","billingDate","formGridBillingDate","formGridBillingDateTodayCheckbox","billingTitle","billingType","formGridBillingType","billingDescription","formGridBillingDescription","billingAmount","formGridBillingAmount","billingPaid","formGridBillingPaid","billingNotes","formGridBillingNotes","billingAttachmentFormat","formGridBillingAttachmentFormat","billingAttachmentPath","billingAttachmentName","updatePatientBilling","updatePatientAttachmentHandler","attachmentFormat","formGridPatientAttachmentFormat","attachmentPath","attachmentName","updatePatientAttachment","updatePatientNoteHandler","formGridNote","note","updatePatientNotes","updatePatientTagHandler","formGridTag","tag","updatePatientTags","modalConfirmSearchHandler","formBasicField","formBasicQuery","formBasicFieldSelect","getPatientField","modalConfirmSearchIdHandler","patientId","formBasicId","getPatientId","modalConfirmSearchNameHandler","formBasicName","regex","RegExp","result","filter","patient","match","getPatientVisit","preventDefault","consultant","complaints","formBasicVisitDate","visitDate","substring","visitSurveys","surveys","x","date","substr","visitConsultants","visitComplaints","visitVitals","vitals","visitExaminations","examination","visitHistory","history","visitInvestigations","investigation","visitDiagnosis","diagnosis","visitTreatments","treatment","visitBilling","billing","patientName","complaint","survey","fetchPatientsAsc","patientsNameAsc","fetchPatientsDesc","patientsNameDesc","modalDeleteHandler","user","deletedPatient","deletePatient","deletedPatientId","deletedPatientPos","deletePatientInsuranceItem","company","deletePatientInsurance","deletePatientAppointmentItem","deletePatientAppointment","deletePatientConsultantItem","reference","id","deletePatientConsultant","deletePatientNextOfKinItem","deletePatientNextOfKin","deletePatientComplaintItem","deletePatientComplaint","deletePatientSurveyItem","deletePatientSurvey","deletePatientVitalsItem","deletePatientVitals","deletePatientExaminationItem","type","deletePatientExamination","deletePatientHistoryItem","deletePatientHistory","deletePatientAllergiesItem","deletePatientAllergies","deletePatientMedicationItem","deletePatientMedication","deletePatientInvestigationItem","deletePatientInvestigation","deletePatientDiagnosisItem","deletePatientDiagnosis","deletePatientTreatmentItem","deletePatientTreatment","deletePatientBillingItem","deletePatientBilling","deletePatientAttachmentItem","deletePatientAttachment","deletePatientNoteItem","deletePatientNote","deletePatientTagItem","deletePatientTag","onViewAttachment","attachment","path","format","closeAttachmentView","appointments","insurance","nextOfKin","allergies","medication","attachments","notes","tags","closePdfCreator","showDetailHandler","nameElRef","createRef","fetchUsers","updatePatientSpecial","bind","contextType"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport S3 from 'react-aws-s3';\n// import S3FileUpload from 'react-s3';\n\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Button from 'react-bootstrap/Button';\nimport Accordion from 'react-bootstrap/Accordion';\nimport SidebarPage from './Sidebar';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\n// import TabContainer from 'react-bootstrap/TabContainer';\n// import TabContent from 'react-bootstrap/TabContent';\n// import TabPane from 'react-bootstrap/TabPane';\nimport Nav from 'react-bootstrap/Nav';\nimport Card from 'react-bootstrap/Card';\n\nimport PatientList from '../components/Patients/PatientList/PatientList';\nimport PatientDetail from '../components/Patients/PatientDetail';\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\nimport SearchPatientList from '../components/Patients/PatientList/SearchPatientList';\nimport SearchPatientForm from '../components/Forms/SearchPatientForm';\nimport SearchPatientIdForm from '../components/Forms/SearchPatientIdForm';\nimport SearchPatientNameForm from '../components/Forms/SearchPatientNameForm';\n// import SearchPatientVisitForm from '../components/Forms/SearchPatientVisitForm';\n\nimport AlertBox from '../components/AlertBox';\nimport AttachmentViewer from '../components/AttachmentViewer';\nimport PdfCreator from '../components/PdfCreator';\n\nimport CreatePatientForm from '../components/Forms/CreatePatientForm';\nimport UpdatePatientForm from '../components/Forms/UpdatePatientForm';\nimport UpdatePatientFieldForm from '../components/Forms/UpdatePatientFieldForm';\nimport UpdatePatientConsultantForm from '../components/Forms/UpdatePatientConsultantForm';\nimport UpdatePatientInsuranceForm from '../components/Forms/UpdatePatientInsuranceForm';\nimport UpdatePatientNextOfKinForm from '../components/Forms/UpdatePatientNextOfKinForm';\nimport UpdatePatientComplaintForm from '../components/Forms/UpdatePatientComplaintForm';\nimport UpdatePatientSurveyForm from '../components/Forms/UpdatePatientSurveyForm';\nimport UpdatePatientVitalsForm from '../components/Forms/UpdatePatientVitalsForm';\nimport UpdatePatientExaminationForm from '../components/Forms/UpdatePatientExaminationForm';\nimport UpdatePatientHistoryForm from '../components/Forms/UpdatePatientHistoryForm';\nimport UpdatePatientAllergiesForm from '../components/Forms/UpdatePatientAllergiesForm';\nimport UpdatePatientMedicationForm from '../components/Forms/UpdatePatientMedicationForm';\nimport UpdatePatientInvestigationForm from '../components/Forms/UpdatePatientInvestigationForm';\nimport UpdatePatientDiagnosisForm from '../components/Forms/UpdatePatientDiagnosisForm';\nimport UpdatePatientTreatmentForm from '../components/Forms/UpdatePatientTreatmentForm';\nimport UpdatePatientBillingForm from '../components/Forms/UpdatePatientBillingForm';\nimport UpdatePatientAttachmentForm from '../components/Forms/UpdatePatientAttachmentForm';\nimport UpdatePatientNoteForm from '../components/Forms/UpdatePatientNoteForm';\nimport UpdatePatientTagForm from '../components/Forms/UpdatePatientTagForm';\n\nimport './Users.css';\n\nclass PatientsPage extends Component {\n  state = {\n    creating: false,\n    updating: false,\n    searching: false,\n    updatingArray: false,\n    deleting: false,\n    patients: [],\n    searchPatients: [],\n    isLoading: false,\n    selectedPatient: null,\n    patientUpdateField: null,\n    patientSearchField: null,\n    patientSearchQuery: null,\n    canDelete: null,\n    visit: null,\n    userAlert: null,\n    showAttachment: false,\n    showThisAttachmentFile: null,\n    showThisAttachmentType: null,\n    createPdf: false,\n    pdfData: null,\n  };\n  isActive = true;\n\n  static contextType = AuthContext;\n\n  constructor(props) {\n    super(props);\n    this.nameElRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.fetchPatients();\n    if (this.context.user.name === \"Lord-of-the-Manor\"){\n      this.setState({canDelete: true})\n    }\n    // if (this.context.user.name === 'admin579'){\n    //   this.setState({canDelete: true})\n    // }\n  }\n\n\n  startCreatePatientHandler = () => {\n    this.setState({ creating: true });\n    console.log(\"CreatePatientForm...\");\n  };\n  startUpdatePatientHandler = () => {\n    this.setState({ updating: true, updatingArray: true });\n    console.log(\"UpdatePatientForm...\");\n  };\n  startSearchPatientHandler = () => {\n    this.setState({ searching: true });\n    console.log(\"SearchPatientForm...\");\n  };\n\n  modalConfirmHandler = (event) => {\n\n    console.log(\"CreatePatientFormData:  \", event.target.formGridName.value);\n\n    this.setState({ creating: false });\n    const userId = this.context.userId;\n\n    let title = event.target.formGridTitle.value;\n    let name = event.target.formGridName.value;\n    let dob = event.target.formGridDob.value;\n    let age = event.target.formGridAge.value;\n    let gender = event.target.formGridGender.value;\n    let addressNumber = event.target.formGridAddressNumber.value;\n    let addressStreet = event.target.formGridAddressStreet.value;\n    let addressTown = event.target.formGridAddressTown.value;\n    let addressParish = event.target.formGridAddressParish.value;\n    let addressPostOffice = event.target.formGridAddressPostOffice.value;\n    let contactPhone = event.target.formGridContactPhone.value;\n    let contactEmail = event.target.formGridContactEmail.value;\n\n    let registrationDate = event.target.formGridRegistrationDate.value;\n    if (event.target.formGridRegistrationDateTodayCheckbox.checked === true) {\n      registrationDate = new Date().toISOString().slice(0,10);\n    }\n    let referralDate = event.target.formGridReferralDate.value;\n    if (event.target.formGridReferralDateTodayCheckbox.checked === true) {\n      referralDate = new Date().toISOString().slice(0,10);\n    }\n\n    let expirationDate = event.target.formGridExpirationDate.value;\n    let attendingPhysicianName = event.target.formGridAttendingPhysicianName.value;\n    let attendingPhysicianEmail = event.target.formGridAttendingPhysicianEmail.value;\n    let attendingPhysicianPhone = event.target.formGridAttendingPhysicianPhone.value;\n    let referringDoctorName = event.target.formGridReferringDoctorName.value;\n    let referringDoctorEmail = event.target.formGridReferringDoctorEmail.value;\n    let referringDoctorPhone = event.target.formGridReferringDoctorPhone.value;\n    let occupationRole = event.target.formGridOccupationRole.value;\n    let occupationEmployer = event.target.formGridOccupationEmployer.value;\n    let occupationEmployerContactPhone = event.target.formGridOccupationEmployerContactPhone.value;\n    let occupationEmployerContactEmail = event.target.formGridOccupationEmployerContactEmail.value;\n\n\n    if (\n      name.trim().length === 0 ||\n      // title.trim().length === 0 ||\n      // name.trim().length === 0 ||\n      // dob.trim().length === 0 ||\n      age.trim().length === 0 ||\n      // gender.trim().length === 0 ||\n      addressNumber.trim().length === 0 ||\n      addressStreet.trim().length === 0 ||\n      // addressTown.trim().length === 0 ||\n      // addressParish.trim().length === 0 ||\n      // addressPostOffice.trim().length === 0 ||\n      contactPhone.trim().length === 0 ||\n      // contactEmail.trim().length === 0 ||\n      registrationDate.trim().length === 0\n      // referralDate.trim().length === 0 ||\n      // expirationDate.trim().length === 0 ||\n      // attendingPhysicianName.trim().length === 0 ||\n      // attendingPhysicianEmail.trim().length === 0 ||\n      // attendingPhysicianPhone.trim().length === 0 ||\n      // referringDoctorName.trim().length === 0 ||\n      // referringDoctorEmail.trim().length === 0 ||\n      // referringDoctorPhone.trim().length === 0 ||\n      // occupationRole.trim().length === 0 ||\n      // occupationEmployer.trim().length === 0 ||\n      // occupationEmployerContactPhone.trim().length === 0 ||\n      // occupationEmployerContactEmail.trim().length === 0\n\n    ) {\n      console.log(\"patient must have at least: Name, Age, Contact Number, Street Name & Number and Registration Date!!!...Please try again...\");\n      this.setState({userAlert: \"patient must have at least: Name, Age, Contact Number, Street Name & Number and Registration Date!!!...Please try again...\"});\n      return;\n    }\n\n    console.log(`\n      creating patient...\n      title: ${title},\n      name: ${name},\n      dob: ${dob},\n      age: ${age},\n      gender: ${gender},\n      addressNumber: ${addressNumber},\n      addressStreet: ${addressStreet},\n      addressTown: ${addressTown},\n      addressParish: ${addressParish},\n      addressPostOffice: ${addressPostOffice},\n      contactPhone: ${contactPhone},\n      contactEmail: ${contactEmail},\n      registrationDate: ${registrationDate},\n      referralDate: ${referralDate},\n      expirationDate: ${expirationDate},\n      attendingPhysicianName: ${attendingPhysicianName},\n      attendingPhysicianEmail: ${attendingPhysicianEmail},\n      attendingPhysicianPhone: ${attendingPhysicianPhone},\n      referringDoctorName: ${referringDoctorName},\n      referringDoctorEmail: ${referringDoctorEmail},\n      referringDoctorPhone: ${referringDoctorPhone},\n      occupationRole: ${occupationRole},\n      occupationEmployer: ${occupationEmployer},\n      occupationEmployerContactPhone: ${occupationEmployerContactPhone},\n      occupationEmployerContactEmail: ${occupationEmployerContactEmail},\n      `);\n\n    const requestBody = {\n      query: `\n        mutation {createPatient(userId:\"${userId}\", patientInput:{title:\"${title}\",name:\"${name}\",dob:\"${dob}\",age:${age},gender:\"${gender}\",addressNumber:${addressNumber},addressStreet:\"${addressStreet}\",addressTown:\"${addressTown}\",addressParish:\"${addressParish}\",addressPostOffice:\"${addressPostOffice}\",contactPhone:\"${contactPhone}\",contactEmail:\"${contactEmail}\",registrationDate:\"${registrationDate}\",referralDate:\"${referralDate}\",expirationDate:\"${expirationDate}\",referringDoctorName:\"${referringDoctorName}\",referringDoctorEmail:\"${referringDoctorEmail}\",referringDoctorPhone:\"${referringDoctorPhone}\",attendingPhysicianName:\"${attendingPhysicianName}\",attendingPhysicianEmail:\"${attendingPhysicianEmail}\",attendingPhysicianPhone:\"${attendingPhysicianPhone}\",occupationRole:\"${occupationRole}\",occupationEmployer:\"${occupationEmployer}\",occupationEmployerContactPhone:\"${occupationEmployerContactPhone}\",occupationEmployerContactEmail:\"${occupationEmployerContactEmail}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n        `};\n\n    const token = this.context.token;\n\n    // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(`\n          response data:\n          ${JSON.stringify(resData.data.createPatient)}\n          `);\n          const responseAlert = JSON.stringify(resData.data).slice(2,15);\n          this.setState({userAlert: responseAlert});\n\n        const newPatient = resData.data.createPatient;\n        this.setState(prevState => {\n          const updatedPatients = [...prevState.patients];\n          updatedPatients.push(newPatient);\n\n          return { patients: updatedPatients };\n        });\n\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n  };\n\n  modalCancelHandler = () => {\n    this.setState({ creating: false, updating: false, selectedPatient: null });\n  };\n\n\n  modalConfirmUpdateHandler = (event) => {\n\n    // if(this.context.user.role !== 'admin') {\n    //   console.log(\"Not the Admin! No edit permission!!\");\n    // }\n\n    const userId = this.context.userId;\n    const selectedPatientId = this.context.selectedPatient._id;\n\n    console.log(\"UpdatePatientFormData:  \", event.target.formGridName.value);\n\n\n    this.setState({ updating: false });\n\n    let title = event.target.formGridTitle.value;\n    let name = event.target.formGridName.value;\n    let dob = event.target.formGridDob.value;\n    let age = event.target.formGridAge.value;\n    let gender = event.target.formGridGender.value;\n    let addressNumber = event.target.formGridAddressNumber.value;\n    let addressStreet = event.target.formGridAddressStreet.value;\n    let addressTown = event.target.formGridAddressTown.value;\n    let addressParish = event.target.formGridAddressParish.value;\n    let addressPostOffice = event.target.formGridAddressPostOffice.value;\n    let contactPhone = event.target.formGridContactPhone.value;\n    let contactEmail = event.target.formGridContactEmail.value;\n\n    let registrationDate = event.target.formGridRegistrationDate.value;\n    if (event.target.formGridRegistrationDateTodayCheckbox.checked === true) {\n      registrationDate = new Date().toISOString().slice(0,10);\n    }\n\n    let referralDate = event.target.formGridReferralDate.value;\n    if (event.target.formGridReferralDateTodayCheckbox.checked === true) {\n      referralDate = new Date().toISOString().slice(0,10);\n    }\n\n    let expirationDate = event.target.formGridExpirationDate.value;\n    if (event.target.formGridExpirationDateTodayCheckbox.checked === true) {\n      expirationDate = new Date().toISOString().slice(0,10);\n    }\n\n    let attendingPhysicianName = event.target.formGridAttendingPhysicianName.value;\n    let attendingPhysicianEmail = event.target.formGridAttendingPhysicianEmail.value;\n    let attendingPhysicianPhone = event.target.formGridAttendingPhysicianPhone.value;\n    let referringDoctorName = event.target.formGridReferringDoctorName.value;\n    let referringDoctorEmail = event.target.formGridReferringDoctorEmail.value;\n    let referringDoctorPhone = event.target.formGridReferringDoctorPhone.value;\n    let occupationRole = event.target.formGridOccupationRole.value;\n    let occupationEmployer = event.target.formGridOccupationEmployer.value;\n    let occupationEmployerContactPhone = event.target.formGridOccupationEmployerContactPhone.value;\n    let occupationEmployerContactEmail = event.target.formGridOccupationEmployerContactEmail.value;\n\n    if (title.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      title = this.context.selectedPatient.title;\n    }\n    if (name.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      name = this.context.selectedPatient.name;\n    }\n    if (dob.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      dob = this.context.selectedPatient.dob;\n    }\n    if (gender.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      gender = this.context.selectedPatient.gender;\n    }\n    if (age.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      age = this.context.selectedPatient.age;\n    }\n    if (addressNumber.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      addressNumber = this.context.selectedPatient.address.number;\n    }\n    if (addressStreet.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      addressStreet = this.context.selectedPatient.address.street;\n    }\n    if (addressTown.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      addressTown = this.context.selectedPatient.address.town;\n    }\n    if (addressParish.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      addressParish = this.context.selectedPatient.address.parish;\n    }\n    if (addressPostOffice.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      addressPostOffice = this.context.selectedPatient.address.postOffice;\n    }\n    if (contactPhone.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      contactPhone = this.context.selectedPatient.contact.phone;\n    }\n    if (contactEmail.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      contactEmail = this.context.selectedPatient.contact.email;\n    }\n    if (registrationDate.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      registrationDate = this.context.selectedPatient.registrationDate;\n    }\n    if (attendingPhysicianName.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      attendingPhysicianName = this.context.selectedPatient.attendingPhysician.name;\n    }\n    if (attendingPhysicianEmail.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      attendingPhysicianEmail = this.context.selectedPatient.attendingPhysician.email;\n    }\n    if (attendingPhysicianPhone.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      attendingPhysicianPhone = this.context.selectedPatient.attendingPhysician.phone;\n    }\n    if (referringDoctorName.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      referringDoctorName = this.context.selectedPatient.referringDoctor.name;\n    }\n    if (referringDoctorEmail.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      referringDoctorEmail = this.context.selectedPatient.referringDoctor.email;\n    }\n    if (referringDoctorPhone.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      referringDoctorPhone = this.context.selectedPatient.referringDoctor.phone;\n    }\n    if (occupationRole.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      occupationRole = this.context.selectedPatient.occupation.role;\n    }\n    if (occupationEmployer.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      occupationEmployer = this.context.selectedPatient.occupation.employer;\n    }\n    if (occupationEmployerContactEmail.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      occupationEmployerContactEmail = this.context.selectedPatient.occupation.contact.email;\n    }\n    if (occupationEmployerContactPhone.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      occupationEmployerContactPhone = this.context.selectedPatient.occupation.contact.phone;\n    }\n\n\n    console.log(`\n      updating patient...\n      title: ${title},\n      name: ${name},\n      dob: ${dob},\n      age: ${age},\n      gender: ${gender},\n      addressNumber: ${addressNumber},\n      addressStreet: ${addressStreet},\n      addressTown: ${addressTown},\n      addressParish: ${addressParish},\n      addressPostOffice: ${addressPostOffice},\n      contactPhone: ${contactPhone},\n      contactEmail: ${contactEmail},\n      registrationDate: ${registrationDate},\n      referralDate: ${referralDate},\n      expirationDate: ${expirationDate},\n      attendingPhysicianName: ${attendingPhysicianName},\n      attendingPhysicianEmail: ${attendingPhysicianEmail},\n      attendingPhysicianPhone: ${attendingPhysicianPhone},\n      referringDoctorName: ${referringDoctorName},\n      referringDoctorEmail: ${referringDoctorEmail},\n      referringDoctorPhone: ${referringDoctorPhone},\n      occupationRole: ${occupationRole},\n      occupationEmployer: ${occupationEmployer},\n      occupationEmployerContactPhone: ${occupationEmployerContactPhone},\n      occupationEmployerContactEmail: ${occupationEmployerContactEmail},\n      `);\n      this.setState({userAlert: \"updating patient...\"});\n\n    const requestBody = {\n      query: `\n          mutation {updatePatient(userId:\"${userId}\",patientId:\"${selectedPatientId}\", patientInput:{title:\"${title}\",name:\"${name}\",dob:\"${dob}\",age:${age},gender:\"${gender}\",addressNumber:${addressNumber},addressStreet:\"${addressStreet}\",addressTown:\"${addressTown}\",addressParish:\"${addressParish}\",addressPostOffice:\"${addressPostOffice}\",contactPhone:\"${contactPhone}\",contactEmail:\"${contactEmail}\",registrationDate:\"${registrationDate}\",referralDate:\"${referralDate}\",expirationDate:\"${expirationDate}\",referringDoctorName:\"${referringDoctorName}\",referringDoctorEmail:\"${referringDoctorEmail}\",referringDoctorPhone:\"${referringDoctorPhone}\",attendingPhysicianName:\"${attendingPhysicianName}\",attendingPhysicianEmail:\"${attendingPhysicianEmail}\",attendingPhysicianPhone:\"${attendingPhysicianPhone}\",occupationRole:\"${occupationRole}\",occupationEmployer:\"${occupationEmployer}\",occupationEmployerContactPhone:\"${occupationEmployerContactPhone}\",occupationEmployerContactEmail:\"${occupationEmployerContactPhone}\"})\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n        `};\n\n    const token = this.context.token;\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n\n        const updatedPatientId = resData.data.updatePatient._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatient);\n\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert})\n        this.fetchPatients();\n\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n  };\n\n\n  modalConfirmUpdateFieldHandler = (event) => {\n\n    const token = this.context.token;\n    const userId = this.context.userId;\n    let selectedPatientId = this.context.selectedPatient._id;\n\n    // if( this.context.user.role !== 'admin') {\n    //   console.log(\"Not the creator or Admin! No edit permission!!\");\n    //   selectedPatientId = null;\n    // }\n\n      console.log(\"UpdatePatientFieldFormData:  \", event.target.formGridField.value);\n      this.setState({ updating: false });\n\n      let field = null;\n      let query = event.target.formGridQuery.value;\n      if (event.target.formGridFieldSelect.value === \"select\") {\n        field = event.target.formGridField.value;\n      } else {\n        field = event.target.formGridFieldSelect.value;\n      }\n\n      const requestBody = {\n        query:`\n          mutation {updatePatientField(userId:\"${userId}\",patientId:\"${selectedPatientId}\",field:\"${field}\",query:\"${query}\")\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n        `};\n\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData.data.updatePatientField));\n\n          const updatedPatientId = resData.data.updatePatientField._id;\n          const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n          const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n          const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n          console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n          this.state.patients.push(resData.data.updatePatientField);\n          this.context.patients = this.state.patients;\n          const responseAlert = JSON.stringify(resData.data).slice(2,25);\n          this.setState({ userAlert: responseAlert})\n          this.fetchPatients();\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({userAlert: err});\n        });\n\n  }\n\n\nupdatePatientConsultantHandler = (event) => {\n\n  let token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n  const patientConsultantReference = this.context.selectedUser._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n  if (patientConsultantReference === undefined) {\n    console.log(`\n      select a Staff member before adding a Patient Consultant!!\n      `);\n      this.setState({userAlert: \"select a Staff member before adding a Patient Consultant!!...\"});\n      token = null;\n  }\n\n  console.log(\"UpdatePatientConsultantFormData:  \", event.target.formGridConsultantDate.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let consultantDate = event.target.formGridConsultantDate.value;\n  if (event.target.formGridConsultantDateTodayCheckbox.checked === true) {\n    consultantDate = new Date().toISOString().slice(0,10);\n  }\n\n  console.log(`\n    adding patient consultant item...\n    userId: ${userId},\n    selectedPatientId: ${selectedPatientId},\n    consultantDate: ${consultantDate},\n    consultantReference: ${patientConsultantReference},\n    `);\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientConsultant(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{consultantDate:\" ${consultantDate}\",consultantReference: \"${patientConsultantReference}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    };\n\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData.data));\n\n          const updatedPatientId = resData.data.updatePatientConsultant._id;\n          const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n          const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n          const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n          console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n          this.state.patients.push(resData.data.updatePatientConsultant);\n          this.context.patients = this.state.patients;\n          const responseAlert = JSON.stringify(resData.data).slice(2,25);\n          this.setState({ userAlert: responseAlert})\n          this.fetchPatients();\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({userAlert: err});\n        });\n\n}\nupdatePatientInsuranceHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientInsuranceFormData:  \", event.target.formGridInsuranceCompany.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let insuranceCompany = event.target.formGridInsuranceCompany.value;\n  let insuranceNumber = event.target.formGridInsuranceNumber.value;\n\n  let insuranceExpiry = event.target.formGridInsuranceExpiry.value;\n\n  let insuranceDescription = event.target.formGridInsuranceDescription.value;\n  let insuranceSubscriberCompany = event.target.formGridInsuranceSubscriberCompany.value;\n  let insuranceSubscriberDescription = event.target.formGridInsuranceSubscriberDescription.value;\n\n\n  console.log(`\n    adding patient insurance item...\n    userId: ${userId},\n    selectedPatientId: ${selectedPatientId},\n    insuranceCompany: ${insuranceCompany},\n    insuranceNumber: ${insuranceNumber},\n    insuranceExpiry: ${insuranceExpiry},\n    insuranceDescription: ${insuranceDescription},\n    insuranceSubscriberCompany: ${insuranceSubscriberCompany},\n    insuranceSubscriberDescription: ${insuranceSubscriberDescription},\n    `);\n    this.setState({userAlert: \"adding patient insurance item...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientInsurance(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{insuranceCompany:\"${insuranceCompany}\",insuranceNumber:\"${insuranceNumber}\",insuranceDescription:\"${insuranceDescription}\",insuranceExpiry:\"${insuranceExpiry}\",insuranceSubscriberCompany:\"${insuranceSubscriberCompany}\",insuranceSubscriberDescription:\"${insuranceSubscriberDescription}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    };\n\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData.data));\n\n          const updatedPatientId = resData.data.updatePatientInsurance._id;\n          const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n          const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n          const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n          console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n          this.state.patients.push(resData.data.updatePatientInsurance);\n          this.context.patients = this.state.patients;\n          const responseAlert = JSON.stringify(resData.data).slice(2,25);\n          this.setState({ userAlert: responseAlert})\n          this.fetchPatients();\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({userAlert: err});\n        });\n\n}\n\nupdatePatientNextOfKinHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientNextOfKinFormData:  \", event.target.formGridNextOfKinName.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let nextOfKinName = event.target.formGridNextOfKinName.value;\n  let nextOfKinPhone = event.target.formGridNextOfKinPhone.value;\n  let nextOfKinEmail = event.target.formGridNextOfKinEmail.value;\n\n\n  console.log(`\n    adding patient nextOfKin item...\n    userId: ${userId},\n    selectedPatientId: ${selectedPatientId},\n    nextOfKinName: ${nextOfKinName},\n    nextOfKinPhone: ${nextOfKinPhone},\n    nextOfKinEmail: ${nextOfKinEmail},\n    `);\n    this.setState({userAlert: \"adding patient nextOfKin item...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientNextOfKin(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{nextOfKinName:\"${nextOfKinName}\",nextOfKinEmail:\"${nextOfKinEmail}\",nextOfKinPhone:\"${nextOfKinPhone}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    };\n\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData.data));\n\n          const updatedPatientId = resData.data.updatePatientNextOfKin._id;\n          const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n          const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n          const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n          console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n          this.state.patients.push(resData.data.updatePatientNextOfKin);\n          this.context.patients = this.state.patients;\n          const responseAlert = JSON.stringify(resData.data).slice(2,25);\n          this.setState({ userAlert: responseAlert})\n          this.fetchPatients();\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({userAlert: err});\n        });\n}\n\n\nupdatePatientComplaintHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientComplaintFormData:  \", event.target.formGridComplaintTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let complaintTitle = event.target.formGridComplaintTitle.value;\n\n  let complaintDate = event.target.formGridComplaintDate.value;\n  if (event.target.formGridComplaintDateTodayCheckbox.checked === true) {\n    complaintDate = new Date().toISOString().slice(0,10);\n  }\n\n  let complaintDescription = event.target.formGridComplaintDescription.value;\n  let complaintAnamnesis = event.target.formGridComplaintAnamnesis.value;\n  // let complaintAttachmentName = event.target.formGridComplaintAttachmentName.value;\n  let complaintAttachmentFormat = event.target.formGridComplaintAttachmentFormat.value;\n  // let complaintAttachmentPath = event.target.formGridComplaintAttachmentPath.value;\n  let complaintAttachmentPath = \"uploads/patients/\"+selectedPatientId+\"/complaints\";\n  let file = AuthContext._currentValue.file;\n\n  console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n    const config = {\n      bucketName: this.context.creds.s3.bucketName,\n      dirName: complaintAttachmentPath,\n      region: this.context.creds.s3.region,\n      accessKeyId: this.context.creds.s3.accessKeyId,\n      secretAccessKey: this.context.creds.s3.secretAccessKey,\n    }\n\n  const ReactS3Client = new S3(config);\n  const newFileName = file.name;\n  const complaintAttachmentName = newFileName;\n\n  ReactS3Client\n      .uploadFile(file, newFileName)\n      .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n      .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n\n  console.log(`\n    adding patient complaint...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    complaintTitle: ${complaintTitle},\n    complaintDate: ${complaintDate},\n    complaintDescription: ${complaintDescription},\n    complaintAnamnesis: ${complaintAnamnesis},\n    complaintAttachmentName: ${complaintAttachmentName},\n    complaintAttachmentFormat: ${complaintAttachmentFormat},\n    complaintAttachmentPath: ${complaintAttachmentPath},\n    `);\n    this.setState({userAlert: \"adding patient complaint...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientComplaint(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{complaintDate:\"${complaintDate}\",complaintTitle:\"${complaintTitle}\",complaintDescription:\"${complaintDescription}\",complaintAnamnesis:\"${complaintAnamnesis}\",complaintAttachmentName:\"${complaintAttachmentName}\",complaintAttachmentFormat:\"${complaintAttachmentFormat}\",complaintAttachmentPath:\"${complaintAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientComplaint._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientComplaint);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n}\n\nupdatePatientSurveyHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientSurveyFormData:  \", event.target.formGridSurveyTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let surveyDate = event.target.formGridSurveyDate.value;\n  if (event.target.formGridSurveyDateTodayCheckbox.checked === true) {\n    surveyDate = new Date().toISOString().slice(0,10);\n  }\n\n  let surveyTitle = event.target.formGridSurveyTitle.value;\n  let surveyDescription = event.target.formGridSurveyDescription.value;\n  // let surveyAttachmentName = event.target.formGridSurveyAttachmentName.value;\n  let surveyAttachmentFormat = event.target.formGridSurveyAttachmentFormat.value;\n  let surveyAttachmentPath = \"uploads/patients/\"+selectedPatientId+\"/surveys\";\n  // let surveyAttachmentPath = event.target.formGridSurveyAttachmentPath.value;\n  let file = AuthContext._currentValue.file;\n\n  console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n\n    const config = {\n      bucketName: this.context.creds.s3.bucketName,\n      dirName: surveyAttachmentPath,\n      region: this.context.creds.s3.region,\n      accessKeyId: this.context.creds.s3.accessKeyId,\n      secretAccessKey: this.context.creds.s3.secretAccessKey,\n    }\n\n  const ReactS3Client = new S3(config);\n  const newFileName = file.name;\n  const surveyAttachmentName = newFileName;\n\n  ReactS3Client\n      .uploadFile(file, newFileName)\n      .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n      .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n\n  console.log(`\n    adding patient survey...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    surveyDate: ${surveyDate},\n    surveyTitle: ${surveyTitle},\n    surveyDescription: ${surveyDescription},\n    surveyAttachmentName: ${surveyAttachmentName},\n    surveyAttachmentFormat: ${surveyAttachmentFormat},\n    surveyAttachmentPath: ${surveyAttachmentPath},\n    `);\n    this.setState({userAlert: \"adding patient survey...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientSurvey(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{surveyDate:\"${surveyDate}\",surveyTitle:\"${surveyTitle}\",surveyDescription:\"${surveyDescription}\",surveyAttachmentName:\"${surveyAttachmentName}\",surveyAttachmentFormat:\"${surveyAttachmentFormat}\",surveyAttachmentPath:\"${surveyAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientSurvey._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientSurvey);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n}\n\nupdatePatientVitalsHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientVitalsFormData:  \", event.target.formGridVitalsDate.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let vitalsDate = event.target.formGridVitalsDate.value;\n  if (event.target.formGridVitalsDateTodayCheckbox.checked === true) {\n    vitalsDate = new Date().toISOString().slice(0,10);\n  }\n\n  let vitalsPr = event.target.formGridVitalsPr.value;\n  let vitalsBp1 = event.target.formGridVitalsBp1.value;\n  let vitalsBp2 = event.target.formGridVitalsBp2.value;\n  let vitalsRr = event.target.formGridVitalsRr.value;\n  let vitalsTemp = event.target.formGridVitalsTemp.value;\n  let vitalsPs02 = event.target.formGridVitalsPs02.value;\n  let vitalsHeight = event.target.formGridVitalsHeight.value;\n  let vitalsWeight = event.target.formGridVitalsWeight.value;\n  let vitalsBmi = event.target.formGridVitalsBmi.value;\n  let vitalsUrineType = event.target.formGridVitalsUrineType.value;\n  let vitalsUrineValue = event.target.formGridVitalsUrineValue.value;\n\n  console.log(`\n    adding patient vitals...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    `);\n    this.setState({userAlert: \"adding patient vitals...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientVitals(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{vitalsDate:\"${vitalsDate}\",vitalsPr:${vitalsPr},vitalsBp1:${vitalsBp1},vitalsBp2:${vitalsBp2},vitalsRr:${vitalsRr},vitalsTemp:${vitalsTemp},vitalsPs02:${vitalsPs02},vitalsHeight:${vitalsHeight},vitalsWeight:${vitalsWeight},vitalsBmi:${vitalsBmi},vitalsUrineType:\"${vitalsUrineType}\",vitalsUrineValue:\"${vitalsUrineValue}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientVitals._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientVitals);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n}\n\n\nupdatePatientExaminationHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientExaminationFormData:  \", event.target.formGridExaminationArea.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let examinationDate = event.target.formGridExaminationDate.value;\n  if (event.target.formGridExaminationDateTodayCheckbox.checked === true) {\n    examinationDate = new Date().toISOString().slice(0,10);\n  }\n\n  let examinationGeneral = event.target.formGridExaminationGeneral.value;\n  let examinationArea = undefined;\n  if (event.target.formGridExaminationAreaSelect === \"select\") {\n    examinationArea = event.target.formGridExaminationArea.value;\n  } else {\n    examinationArea = event.target.formGridExaminationAreaSelect.value;\n  }\n  let examinationType = event.target.formGridExaminationType.value;\n  let examinationMeasure = event.target.formGridExaminationMeasure.value;\n  let examinationValue = event.target.formGridExaminationValue.value;\n  let examinationDescription = event.target.formGridExaminationDescription.value;\n  let examinationFollowUp = event.target.formGridExaminationFollowUp.value;\n  // let examinationAttachmentName = event.target.formGridExaminationAttachmentName.value;\n  let examinationAttachmentFormat = event.target.formGridExaminationAttachmentFormat.value;\n  let examinationAttachmentPath = \"uploads/patients/\"+selectedPatientId+\"/examinations\";\n  // let examinationAttachmentPath = event.target.formGridExaminationAttachmentPath.value;\n  let file = AuthContext._currentValue.file;\n\n  console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n    const config = {\n      bucketName: this.context.creds.s3.bucketName,\n      dirName: examinationAttachmentPath,\n      region: this.context.creds.s3.region,\n      accessKeyId: this.context.creds.s3.accessKeyId,\n      secretAccessKey: this.context.creds.s3.secretAccessKey,\n    }\n  const ReactS3Client = new S3(config);\n  const newFileName = file.name;\n  const examinationAttachmentName = newFileName;\n\n  ReactS3Client\n      .uploadFile(file, newFileName)\n      .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n      .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n\n  console.log(`\n    adding patient examination...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    examinationDate: ${examinationDate},\n    examinationGeneral: ${examinationGeneral},\n    examinationArea: ${examinationArea},\n    examinationType: ${examinationType},\n    examinationMeasure: ${examinationMeasure},\n    examinationValue: ${examinationValue},\n    examinationDescription: ${examinationDescription},\n    examinationFollowUp: ${examinationFollowUp},\n    examinationAttachmentName: ${examinationAttachmentName},\n    examinationAttachmentFormat: ${examinationAttachmentFormat},\n    examinationAttachmentPath: ${examinationAttachmentPath},\n    `);\n    this.setState({userAlert: \"adding patient examination...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientExamination(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{examinationDate:\"${examinationDate}\",examinationGeneral:\"${examinationGeneral}\",examinationArea:\"${examinationArea}\",examinationType:\"${examinationType}\",examinationMeasure:\"${examinationMeasure}\",examinationValue:\"${examinationValue}\",examinationDescription:\"${examinationDescription}\",examinationFollowUp:${examinationFollowUp},examinationAttachmentName:\"${examinationAttachmentName}\",examinationAttachmentFormat:\"${examinationAttachmentFormat}\",examinationAttachmentPath:\"${examinationAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientExamination._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientExamination);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n}\n\n\nupdatePatientHistoryHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientHistoryFormData:  \", event.target.formGridHistoryTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let historyType = event.target.formGridHistoryType.value;\n\n  let historyDate = event.target.formGridHistoryDate.value;\n  if (event.target.formGridHistoryDateTodayCheckbox.checked === true) {\n    historyDate = new Date().toISOString().slice(0,10);\n  }\n\n  let historyTitle = event.target.formGridHistoryTitle.value;\n  let historyDescription = event.target.formGridHistoryDescription.value;\n  // let historyAttachmentName = event.target.formGridHistoryAttachmentName.value;\n  let historyAttachmentFormat = event.target.formGridHistoryAttachmentFormat.value;\n  let historyAttachmentPath = \"uploads/patients/\"+selectedPatientId+\"/history\";\n  // let historyAttachmentPath = event.target.formGridHistoryAttachmentPath.value;\n  let file = AuthContext._currentValue.file;\n\n  console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n    const config = {\n      bucketName: this.context.creds.s3.bucketName,\n      dirName: historyAttachmentPath,\n      region: this.context.creds.s3.region,\n      accessKeyId: this.context.creds.s3.accessKeyId,\n      secretAccessKey: this.context.creds.s3.secretAccessKey,\n    }\n  const ReactS3Client = new S3(config);\n  const newFileName = file.name;\n  const historyAttachmentName = newFileName;\n\n  ReactS3Client\n      .uploadFile(file, newFileName)\n      .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n      .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n\n  console.log(`\n    adding patient history...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    historyType: ${historyType},\n    historyDate: ${historyDate},\n    historyTitle: ${historyTitle},\n    historyDescription: ${historyDescription},\n    historyAttachmentName: ${historyAttachmentName},\n    historyAttachmentFormat: ${historyAttachmentFormat},\n    historyAttachmentPath: ${historyAttachmentPath},\n    `);\n    this.setState({userAlert: \"adding patient history...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientHistory(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{historyTitle:\"${historyTitle}\",historyType:\"${historyType}\",historyDate:\"${historyDate}\",historyDescription:\"${historyDescription}\",historyAttachmentName:\"${historyAttachmentName}\",historyAttachmentFormat:\"${historyAttachmentFormat}\",historyAttachmentPath:\"${historyAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientHistory._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientHistory);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n}\n\n\nupdatePatientAllergiesHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientAllergiesFormData:  \", event.target.formGridAllergiesTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let allergiesTitle = event.target.formGridAllergiesTitle.value;\n  let allergiesType = undefined;\n  if (event.target.formGridAllergiesTypeSelect === \"select\") {\n    allergiesType = event.target.formGridAllergiesType.value;\n  } else {\n    allergiesType = event.target.formGridAllergiesTypeSelect.value;\n  }\n  let allergiesDescription = event.target.formGridAllergiesDescription.value;\n  // let allergiesAttachmentName = event.target.formGridAllergiesAttachmentName.value;\n  let allergiesAttachmentFormat = event.target.formGridAllergiesAttachmentFormat.value;\n  let allergiesAttachmentPath = \"uploads/patients/\"+selectedPatientId+\"/allergies\";\n  // let allergiesAttachmentPath = event.target.formGridAllergiesAttachmentPath.value;\n  let file = AuthContext._currentValue.file;\n\n  console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n    const config = {\n      bucketName: this.context.creds.s3.bucketName,\n      dirName: allergiesAttachmentPath,\n      region: this.context.creds.s3.region,\n      accessKeyId: this.context.creds.s3.accessKeyId,\n      secretAccessKey: this.context.creds.s3.secretAccessKey,\n    }\n  const ReactS3Client = new S3(config);\n  const newFileName = file.name;\n  const allergiesAttachmentName = newFileName;\n\n  ReactS3Client\n      .uploadFile(file, newFileName)\n      .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n      .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n\n  console.log(`\n    adding patient allergies...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    allergiesTitle: ${allergiesTitle},\n    allergiesType: ${allergiesType},\n    allergiesDescription: ${allergiesDescription},\n    allergiesAttachmentName: ${allergiesAttachmentName},\n    allergiesAttachmentFormat: ${allergiesAttachmentFormat},\n    allergiesAttachmentPath: ${allergiesAttachmentPath},\n    `);\n    this.setState({userAlert: \"adding patient allergies...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientAllergies(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{allergiesTitle:\"${allergiesTitle}\",allergiesType:\"${allergiesType}\", allergiesDescription:\"${allergiesDescription}\",allergiesAttachmentName:\"${allergiesAttachmentName}\",allergiesAttachmentFormat:\"${allergiesAttachmentFormat}\",allergiesAttachmentPath:\"${allergiesAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientAllergies._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientAllergies);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n\n}\n\n\nupdatePatientMedicationHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientMedicationFormData:  \", event.target.formGridMedicationTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let medicationTitle = event.target.formGridMedicationTitle.value;\n  let medicationType = event.target.formGridMedicationType.value;\n  let medicationDescription = event.target.formGridMedicationDescription.value;\n  // let medicationAttachmentName = event.target.formGridMedicationAttachmentName.value;\n  let medicationAttachmentFormat = event.target.formGridMedicationAttachmentFormat.value;\n  let medicationAttachmentPath = \"uploads/patients/\"+selectedPatientId+\"/medication\";\n  // let medicationAttachmentPath = event.target.formGridMedicationAttachmentPath.value;\n  let file = AuthContext._currentValue.file;\n\n  console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n    const config = {\n      bucketName: this.context.creds.s3.bucketName,\n      dirName: medicationAttachmentPath,\n      region: this.context.creds.s3.region,\n      accessKeyId: this.context.creds.s3.accessKeyId,\n      secretAccessKey: this.context.creds.s3.secretAccessKey,\n    }\n  const ReactS3Client = new S3(config);\n  const newFileName = file.name;\n  const medicationAttachmentName = newFileName;\n\n  ReactS3Client\n      .uploadFile(file, newFileName)\n      .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n      .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n\n  console.log(`\n    adding patient medication...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    medicationTitle: ${medicationTitle},\n    medicationType: ${medicationType},\n    medicationDescription: ${medicationDescription},\n    medicationAttachmentName: ${medicationAttachmentName},\n    medicationAttachmentFormat: ${medicationAttachmentFormat},\n    medicationAttachmentPath: ${medicationAttachmentPath},\n    `);\n    this.setState({userAlert: \"adding patient medication...\"});\n\n    const requestBody = {\n      query:`\n      mutation {updatePatientMedication(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{medicationTitle:\"${medicationTitle}\",medicationType:\"${medicationType}\" medicationDescription:\"${medicationDescription}\",medicationAttachmentName:\"${medicationAttachmentName}\",medicationAttachmentFormat:\"${medicationAttachmentFormat}\",medicationAttachmentPath:\"${medicationAttachmentPath}\"})\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientMedication._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientMedication);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n}\n\n\nupdatePatientInvestigationHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientInvestigationFormData:  \", event.target.formGridInvestigationTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let investigationDate = event.target.formGridInvestigationDate.value;\n  if (event.target.formGridInvestigationDateTodayCheckbox.checked === true) {\n    investigationDate = new Date().toISOString().slice(0,10);\n  }\n\n  let investigationTitle = event.target.formGridInvestigationTitle.value;\n  let investigationType = undefined;\n  if (event.target.formGridInvestigationTypeSelect === \"select\") {\n    investigationType = event.target.formGridInvestigationType.value;\n  } else {\n    investigationType = event.target.formGridInvestigationTypeSelect.value;\n  }\n  let investigationDescription = event.target.formGridInvestigationDescription.value;\n  // let investigationAttachmentName = event.target.formGridInvestigationAttachmentName.value;\n  let investigationAttachmentFormat = event.target.formGridInvestigationAttachmentFormat.value;\n  let investigationAttachmentPath = \"uploads/patients/\"+selectedPatientId+\"/investigation\";\n  // let investigationAttachmentPath = event.target.formGridInvestigationAttachmentPath.value;\n  let file = AuthContext._currentValue.file;\n\n  console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n    const config = {\n      bucketName: this.context.creds.s3.bucketName,\n      dirName: investigationAttachmentPath,\n      region: this.context.creds.s3.region,\n      accessKeyId: this.context.creds.s3.accessKeyId,\n      secretAccessKey: this.context.creds.s3.secretAccessKey,\n    }\n  const ReactS3Client = new S3(config);\n  const newFileName = file.name;\n  const investigationAttachmentName = newFileName;\n\n  ReactS3Client\n      .uploadFile(file, newFileName)\n      .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n      .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n\n  console.log(`\n    adding patient investigation...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    investigationDate: ${investigationDate},\n    investigationTitle: ${investigationTitle},\n    investigationType: ${investigationType},\n    investigationDescription: ${investigationDescription},\n    investigationAttachmentName: ${investigationAttachmentName},\n    investigationAttachmentFormat: ${investigationAttachmentFormat},\n    investigationAttachmentPath: ${investigationAttachmentPath},\n    `);\n    this.setState({userAlert: \"adding patient investigation...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientInvestigation(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{investigationDate:\"${investigationDate}\",investigationTitle:\"${investigationTitle}\",investigationType:\"${investigationType}\",investigationDescription:\"${investigationDescription}\",investigationAttachmentName:\"${investigationAttachmentName}\",investigationAttachmentFormat:\"${investigationAttachmentFormat}\",investigationAttachmentPath:\"${investigationAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientInvestigation._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientInvestigation);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n}\n\n\nupdatePatientDiagnosisHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientDiagnosisFormData:  \", event.target.formGridDiagnosisTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let diagnosisDate = event.target.formGridDiagnosisDate.value;\n  if (event.target.formGridDiagnosisDateTodayCheckbox.checked === true) {\n    diagnosisDate = new Date().toISOString().slice(0,10);\n  }\n\n  let diagnosisTitle = event.target.formGridDiagnosisTitle.value;\n  let diagnosisType = event.target.formGridDiagnosisType.value;\n  let diagnosisDescription = event.target.formGridDiagnosisDescription.value;\n  // let diagnosisAttachmentName = event.target.formGridDiagnosisAttachmentName.value;\n  let diagnosisAttachmentFormat = event.target.formGridDiagnosisAttachmentFormat.value;\n  let diagnosisAttachmentPath = \"uploads/patients/\"+selectedPatientId+\"/diagnosis\";\n  // let diagnosisAttachmentPath = event.target.formGridDiagnosisAttachmentPath.value;\n  let file = AuthContext._currentValue.file;\n\n  console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n    const config = {\n      bucketName: this.context.creds.s3.bucketName,\n      dirName: diagnosisAttachmentPath,\n      region: this.context.creds.s3.region,\n      accessKeyId: this.context.creds.s3.accessKeyId,\n      secretAccessKey: this.context.creds.s3.secretAccessKey,\n    }\n  const ReactS3Client = new S3(config);\n  const newFileName = file.name;\n  const diagnosisAttachmentName = newFileName;\n\n  ReactS3Client\n      .uploadFile(file, newFileName)\n      .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n      .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n\n  console.log(`\n    adding patient diagnosis...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    diagnosisDate: ${diagnosisDate},\n    diagnosisTitle: ${diagnosisTitle},\n    diagnosisType: ${diagnosisType},\n    diagnosisDescription: ${diagnosisDescription},\n    diagnosisAttachmentName: ${diagnosisAttachmentName},\n    diagnosisAttachmentFormat: ${diagnosisAttachmentFormat},\n    diagnosisAttachmentPath: ${diagnosisAttachmentPath},\n    `);\n    this.setState({userAlert: \"adding patient diagnosis...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientDiagnosis(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{diagnosisDate:\"${diagnosisDate}\",diagnosisTitle:\"${diagnosisTitle}\",diagnosisType:\"${diagnosisType}\",diagnosisDescription:\"${diagnosisDescription}\",diagnosisAttachmentName:\"${diagnosisAttachmentName}\",diagnosisAttachmentFormat:\"${diagnosisAttachmentFormat}\",diagnosisAttachmentPath:\"${diagnosisAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientDiagnosis._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientDiagnosis);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n}\n\n\nupdatePatientTreatmentHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientTreatmentFormData:  \", event.target.formGridTreatmentTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let treatmentDate = event.target.formGridTreatmentDate.value;\n  if (event.target.formGridTreatmentDateTodayCheckbox.checked === true) {\n    treatmentDate = new Date().toISOString().slice(0,10);\n  }\n\n  let treatmentTitle = event.target.formGridTreatmentTitle.value;\n  let treatmentDescription = event.target.formGridTreatmentDescription.value;\n  let treatmentDose = event.target.formGridTreatmentDose.value;\n  let treatmentFrequency = event.target.formGridTreatmentFrequency.value;\n  let treatmentType = undefined;\n  if (event.target.formGridInvestigationTypeSelect === \"select\") {\n    treatmentType = event.target.formGridTreatmentType.value;\n  } else {\n    treatmentType = event.target.formGridTreatmentTypeSelect.value;\n  }\n  // let treatmentAttachmentName = event.target.formGridTreatmentAttachmentName.value;\n  let treatmentAttachmentFormat = event.target.formGridTreatmentAttachmentFormat.value;\n  let treatmentAttachmentPath = \"uploads/patients/\"+selectedPatientId+\"/treatment\";\n  // let treatmentAttachmentPath = event.target.formGridTreatmentAttachmentPath.value;\n  let file = AuthContext._currentValue.file;\n\n  console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n    const config = {\n      bucketName: this.context.creds.s3.bucketName,\n      dirName: treatmentAttachmentPath,\n      region: this.context.creds.s3.region,\n      accessKeyId: this.context.creds.s3.accessKeyId,\n      secretAccessKey: this.context.creds.s3.secretAccessKey,\n    }\n  const ReactS3Client = new S3(config);\n  const newFileName = file.name;\n  const treatmentAttachmentName = newFileName;\n\n  ReactS3Client\n      .uploadFile(file, newFileName)\n      .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n      .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n\n  console.log(`\n    adding patient treatment...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    treatmentDate: ${treatmentDate},\n    treatmentTitle: ${treatmentTitle},\n    treatmentDescription: ${treatmentDescription},\n    treatmentDose: ${treatmentDose},\n    treatmentFrequency: ${treatmentFrequency},\n    treatmentType: ${treatmentType},\n    treatmentAttachmentName: ${treatmentAttachmentName},\n    treatmentAttachmentFormat: ${treatmentAttachmentFormat},\n    treatmentAttachmentPath: ${treatmentAttachmentPath},\n    `);\n    this.setState({userAlert: \"adding patient treatment...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientTreatment(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{treatmentDate:\"${treatmentDate}\",treatmentTitle:\"${treatmentTitle}\",treatmentType:\"${treatmentType}\",treatmentDescription:\"${treatmentDescription}\",treatmentDose:\"${treatmentDose}\",treatmentFrequency:\"${treatmentFrequency}\",treatmentAttachmentName:\"${treatmentAttachmentName}\",treatmentAttachmentFormat:\"${treatmentAttachmentFormat}\",treatmentAttachmentPath:\"${treatmentAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `}\n\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientTreatment._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientTreatment);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n}\n\n\n\nupdatePatientBillingHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientBillingFormData:  \", event.target.formGridBillingTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let billingDate = event.target.formGridBillingDate.value;\n  if (event.target.formGridBillingDateTodayCheckbox.checked === true) {\n    billingDate = new Date().toISOString().slice(0,10);\n  }\n\n  let billingTitle = event.target.formGridBillingTitle.value;\n  let billingType = event.target.formGridBillingType.value;\n  let billingDescription = event.target.formGridBillingDescription.value;\n  let billingAmount = event.target.formGridBillingAmount.value;\n  let billingPaid = event.target.formGridBillingPaid.value;\n  let billingNotes = event.target.formGridBillingNotes.value;\n  // let billingAttachmentName = event.target.formGridBillingAttachmentName.value;\n  let billingAttachmentFormat = event.target.formGridBillingAttachmentFormat.value;\n  let billingAttachmentPath = \"uploads/patients/\"+selectedPatientId+\"/billing\";\n  // let billingAttachmentPath = event.target.formGridBillingAttachmentPath.value;\n  let file = AuthContext._currentValue.file;\n\n  console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n    const config = {\n      bucketName: this.context.creds.s3.bucketName,\n      dirName: billingAttachmentPath,\n      region: this.context.creds.s3.region,\n      accessKeyId: this.context.creds.s3.accessKeyId,\n      secretAccessKey: this.context.creds.s3.secretAccessKey,\n    }\n  const ReactS3Client = new S3(config);\n  const newFileName = file.name;\n  const billingAttachmentName = newFileName;\n\n  ReactS3Client\n      .uploadFile(file, newFileName)\n      .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n      .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n\n  console.log(`\n    adding patient billing...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    billingDate: ${billingDate},\n    billingTitle: ${billingTitle},\n    billingType: ${billingType},\n    billingDescription: ${billingDescription},\n    billingAmount: ${billingAmount},\n    billingPaid: ${billingPaid},\n    billingNotes: ${billingNotes},\n    billingAttachmentName: ${billingAttachmentName},\n    billingAttachmentFormat: ${billingAttachmentFormat},\n    billingAttachmentPath: ${billingAttachmentPath},\n    `);\n    this.setState({userAlert: \"adding patient billing...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientBilling(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{billingDate:\"${billingDate}\",billingTitle:\"${billingTitle}\",billingType:\"${billingType}\",billingDescription:\"${billingDescription}\",billingAmount:${billingAmount},billingPaid:${billingPaid},billingNotes:\"${billingNotes}\",billingAttachmentName:\"${billingAttachmentName}\",billingAttachmentFormat:\"${billingAttachmentFormat}\",billingAttachmentPath:\"${billingAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientBilling._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientBilling);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n\n}\n\nupdatePatientAttachmentHandler = (event) => {\n\n    const token = this.context.token;\n    const userId = this.context.userId;\n    let selectedPatientId = this.context.selectedPatient._id;\n\n    // if(this.context.user.role !== 'admin') {\n    //   console.log(\"No edit permission!!\");\n    //   return;\n    // }\n\n    console.log(`\n        UpdatePatientAttachmentFormData:\n      `);\n\n    this.setState({ updating: false , patientUpdateField: null });\n\n    // let attachmentName = event.target.formGridPatientAttachmentName.value;\n    let attachmentFormat = event.target.formGridPatientAttachmentFormat.value;\n    let attachmentPath = \"uploads/patients/\"+selectedPatientId+\"/attachments\";\n    // let attachmentPath = event.target.formGridPatientAttachmentPath.value;\n    let file = AuthContext._currentValue.file;\n\n    console.log(`\n      uploading to s3...\n      file.name: ${file.name},\n      AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n      `);\n      const config = {\n        bucketName: this.context.creds.s3.bucketName,\n        dirName: attachmentPath,\n        region: this.context.creds.s3.region,\n        accessKeyId: this.context.creds.s3.accessKeyId,\n        secretAccessKey: this.context.creds.s3.secretAccessKey,\n      }\n    const ReactS3Client = new S3(config);\n    const newFileName = file.name;\n    const attachmentName = newFileName;\n\n    ReactS3Client\n        .uploadFile(file, newFileName)\n        .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n        .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n    if (\n      attachmentName.trim().length === 0 ||\n      attachmentFormat.trim().length === 0 ||\n      attachmentPath.trim().length === 0\n    ) {\n      console.log(\"blank fields detected!!!...Please try again...\");\n      this.setState({userAlert: \"blank fields detected!!!...Please try again...\"});\n      return;\n    }\n\n    this.setState({userAlert: \"adding patient attachment\"});\n\n    const requestBody = {\n                    query:`\n                    mutation {updatePatientAttachment(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{attachmentName:\"${attachmentName}\",attachmentFormat:\"${attachmentFormat}\",attachmentPath:\"${attachmentPath}\"})\n                    {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n            `}\n\n\n    fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            console.log(\"response data... \" + JSON.stringify(resData.data));\n\n            const updatedPatientId = resData.data.updatePatientAttachment._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.updatePatientAttachment);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientAttachment})\n            this.fetchPatients();\n          })\n          .catch(err => {\n            console.log(err);\n            this.setState({userAlert: err});\n          });\n\n}\n\nupdatePatientNoteHandler = (event) => {\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(`\n      UpdatePatientNoteFormData:\n      ${event.target.formGridNote.value}\n    `);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n    let note = event.target.formGridNote.value;\n\n    if (\n      note.trim().length === 0\n    ) {\n      console.log(\"Can't Submit a blank form!!!...Please try again...\");\n      this.setState({userAlert: \"Can't Submit a blank form!!!...Please try again...\"});\n      return;\n    }\n\n    this.setState({userAlert: \"adding patient note\"});\n\n    const requestBody = {\n              query:`\n              mutation {updatePatientNotes(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{notes:\"${note}\"})\n              {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n            `}\n\n\n    fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            console.log(\"response data... \" + JSON.stringify(resData.data));\n\n            const updatedPatientId = resData.data.updatePatientNotes._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.updatePatientNotes);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientNotes})\n            this.fetchPatients();\n          })\n          .catch(err => {\n            console.log(err);\n            this.setState({userAlert: err});\n          });\n\n}\nupdatePatientTagHandler = (event) => {\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(`\n      UpdatePatientTagFormData:\n      ${event.target.formGridTag.value}\n    `);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n    let tag = event.target.formGridTag.value;\n\n    if (\n      tag.trim().length === 0\n    ) {\n      console.log(\"Can't Submit a blank form!!!...Please try again...\");\n      this.setState({userAlert: \"Can't Submit a blank form!!!...Please try again...\"});\n      return;\n    }\n\n    const requestBody = {\n                    query:`\n                    mutation {updatePatientTags(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{tag:\"${tag}\"})\n                    {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n            `}\n    this.setState({userAlert: \"adding patient tag\"});\n\n\n    fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            console.log(\"response data... \" + JSON.stringify(resData.data));\n\n            const updatedPatientId = resData.data.updatePatientTags._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.updatePatientTags);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            this.fetchPatients();\n          })\n          .catch(err => {\n            console.log(err);\n            this.setState({userAlert: err});\n          });\n\n\n}\n\n\nmodalConfirmSearchHandler = (event) => {\n  console.log(\"SearchPatientForm:  \");\n\n\n  let userId = this.context.userId;\n\n    console.log(\"SearchPatientFormData:  \", event.target.formBasicField.value);\n    this.setState({ searching: false });\n\n    let field = null;\n    let query = event.target.formBasicQuery.value;\n    if (event.target.formBasicFieldSelect.value === \"select\") {\n      field = event.target.formBasicField.value;\n    } else {\n      field = event.target.formBasicFieldSelect.value;\n    }\n\n    this.setState({\n      patientSearchField: field,\n      patientSearchQuery: query,\n    })\n\n    if (\n      field.trim().length === 0 ||\n      query.trim().length === 0\n    ) {\n      console.log(\"blank fields detected!!!...Please try again...\");\n      return;\n    }\n\n\n    this.setState({userAlert: \"Searching for Patient:  \"});\n\n    const requestBody = {\n      query: `\n        query {\n          getPatientField(userId: \"${userId}\", field: \"${field}\", query: \"${query}\" )\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n    const token = this.context.token;\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n        const responseAlert = JSON.stringify(resData.data).slice(2,15);\n        this.setState({userAlert: responseAlert});\n\n        const searchPatients = resData.data.getPatientField;\n\n        this.setState({ searchPatients: searchPatients})\n        console.log(\"state.searchPatients:  \", this.state.searchPatients);\n        // this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n}\n\nmodalConfirmSearchIdHandler = (event) => {\n  console.log(\"SearchPatientIdFormData\");\n\n  let userId = this.context.userId;\n  this.setState({ searching: false });\n\n  const patientId = event.target.formBasicId.value;\n\n  const requestBody = {\n    query: `\n      query {getPatientId(userId:\"${userId}\",patientId:\"${patientId}\")\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{_id,title,time,location},consultant{date,reference{_id,name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `}\n\n  const token = this.context.token;\n\n  fetch('http://localhost:10000/graphql', {\n    method: 'POST',\n    body: JSON.stringify(requestBody),\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + token\n    }\n  })\n    .then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n      return res.json();\n    })\n    .then(resData => {\n      console.log(\"response data... \" + JSON.stringify(resData));\n      const responseAlert = JSON.stringify(resData.data).slice(2,25);\n      this.setState({userAlert: responseAlert});\n\n      const searchPatients = resData.data.getPatientId;\n\n      this.setState({ searchPatients: [searchPatients]})\n      console.log(\"state.searchPatients:  \", this.state.searchPatients);\n      // this.fetchUsers();\n    })\n    .catch(err => {\n      console.log(err);\n      this.setState({userAlert: err});\n    });\n}\n\n\nmodalConfirmSearchNameHandler = (event) => {\n  console.log(\"SearchPatientNameFormData:\", event.target.formBasicName.value);\n\n  // let userId = this.context.userId;\n  this.setState({ searching: false });\n\n  let patients = this.state.patients;\n  const regex = new RegExp(event.target.formBasicName.value,\"i\");\n  console.log(`\n    regex: ${regex},\n    `);\n    let result = patients.filter(patient => patient.name.match(regex))\n    console.log(`\n      result: ${JSON.stringify(result)}\n      `);\n\n      this.setState({ searchPatients: result})\n\n}\n\n  getPatientVisit = (event) => {\n\n    const selectedPatient = this.state.selectedPatient;\n    event.preventDefault();\n    console.log(`\n        getUserVisit function:\n        selectedPatient.consultant: ${JSON.stringify(selectedPatient.consultant)},\n        selectedPatient.complaints: ${JSON.stringify(selectedPatient.complaints)},\n        visitDate: ${new Date(event.target.formBasicVisitDate.value)},\n        complaintDate: ${new Date(1580515200*1000)},\n      `);\n\n    let visitDate = new Date(event.target.formBasicVisitDate.value).toISOString().substring(0, 10);\n    let visitSurveys = selectedPatient.surveys.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    let visitConsultants = selectedPatient.consultant.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    let visitComplaints = selectedPatient.complaints.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    // let visitSurveys = selectedPatient.surveys.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString() === visitDate);\n    let visitVitals = selectedPatient.vitals.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    let visitExaminations = selectedPatient.examination.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    let visitHistory = selectedPatient.history.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    let visitInvestigations = selectedPatient.investigation.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    let visitDiagnosis = selectedPatient.diagnosis.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    let visitTreatments = selectedPatient.treatment.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    let visitBilling = selectedPatient.billing.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n\n      const visit = {\n        date: visitDate,\n        patientName: this.context.selectedPatient.name,\n        consultant: visitConsultants,\n        complaint: visitComplaints,\n        examination: visitExaminations,\n        survey: visitSurveys,\n        vitals: visitVitals,\n        history: visitHistory,\n        investigation: visitInvestigations,\n        diagnosis: visitDiagnosis,\n        treatment: visitTreatments,\n        billing: visitBilling,\n      };\n\n      console.log(`\n        visit: ${JSON.stringify(visit)},\n        `);\n        this.context.visit = visit;\n        this.setState({visit: visit});\n\n  }\n\n\n  modalCancelHandler = () => {\n    this.setState({ creating: false, updating: false, searching: false, selectedPatient: null });\n  };\n\n\n  fetchPatients() {\n    console.log(\"fetch patients function:  \");\n    const userId = this.context.userId;\n    const token = this.context.token;\n\n    this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n          query {patients(userId:\"${userId}\")\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{_id,title,time,location,date},consultant{date,reference{_id,name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n        `\n    };\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"resData\", resData);\n        const patients = resData.data.patients;\n        console.log(patients);\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({userAlert: responseAlert});\n\n        this.context.patients = this.state.patients;\n        if (this.isActive) {\n          this.setState({ patients: patients, isLoading: false });\n        }\n\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n        if (this.isActive) {\n          this.setState({ isLoading: false });\n        }\n      });\n  }\n\n  fetchPatientsAsc = () => {\n    console.log(\"fetch patients function:  \");\n    const userId = this.context.userId;\n    const token = this.context.token;\n\n    // this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n          query {patientsNameAsc(userId:\"${userId}\")\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{_id,title,time,location,date},consultant{date,reference{_id,name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n        `\n    };\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"resData\", resData);\n        const patients = resData.data.patientsNameAsc;\n        console.log(patients);\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({userAlert: responseAlert});\n\n        this.context.patients = patients;\n        this.setState({ patients: patients});\n        // if (this.isActive) {\n        //   this.setState({ patients: patients, isLoading: false });\n        // }\n\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n        // if (this.isActive) {\n        //   this.setState({ isLoading: false });\n        // }\n      });\n  }\n\n  fetchPatientsDesc = () => {\n    console.log(\"fetch patients function:  \");\n    const userId = this.context.userId;\n    const token = this.context.token;\n\n    // this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n          query {patientsNameDesc(userId:\"${userId}\")\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{_id,title,time,location,date},consultant{date,reference{_id,name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n        `\n    };\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"resData\", resData);\n        const patients = resData.data.patientsNameDesc;\n        console.log(patients);\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({userAlert: responseAlert});\n\n        this.context.patients = patients\n        // if (this.isActive) {\n        //   this.setState({ patients: patients, isLoading: false });\n        // }\n        this.setState({ patients: patients});\n\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n        // if (this.isActive) {\n        //   this.setState({ isLoading: false });\n        // }\n      });\n  }\n\n\n  modalDeleteHandler = () => {\n    console.log(\"deleting patient...selectedPatient:  \", this.context.selectedPatient);\n\n    const selectedPatientId = this.context.selectedPatient._id;\n    const userId = this.context.selectedUser._id;\n\n    if(this.context.user.role !== 'admin') {\n      console.log(\"Not the Admin! No edit permission!!\");\n    }\n\n    this.setState({deleting: true});\n\n\n    const requestBody = {\n      query: `\n          mutation {deletePatient(userId:\"${userId}\",patientId:\"${selectedPatientId}\")\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n        `\n    };\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        let deletedPatient = resData.data.deletePatient;\n        console.log(deletedPatient);\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({userAlert: responseAlert});\n\n        let deletedPatientId = deletedPatient._id;\n        deletedPatient = this.state.patients.find(e => e._id === deletedPatientId);\n        const deletedPatientPos = this.state.patients.indexOf(deletedPatient);\n        const slicedArray = this.state.patients.splice(deletedPatientPos, 1);\n        console.log(\"deletedPatient:  \", JSON.stringify(deletedPatient),\"  deletedUserPos:  \", deletedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.setState({ deleting: false });\n\n        this.fetchPatients();\n\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n        if (this.isActive) {\n          this.setState({ deleting: false });\n        }\n      });\n  }\n\n\n  deletePatientInsuranceItem = (props) => {\n\n    let token = this.context.token;\n    let userId = this.context.userId;\n    let patientId = this.state.selectedPatient._id;\n\n    console.log(`\n      delete patient insurance item:\n      props: ${JSON.stringify(props)},\n      token: ${token},\n      userId: ${userId},\n      patientId: ${patientId},\n      `);\n\n      const requestBody = {\n        query: `\n         mutation {deletePatientInsurance (userId:\"${userId}\", patientId:\"${patientId}\",insuranceCompany:\"${props.company}\",insuranceNumber:\"${props.number}\")\n         {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `};\n\n          fetch('http://localhost:10000/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n              'Content-Type': 'application/json',\n              Authorization: 'Bearer ' + token\n            }\n          })\n            .then(res => {\n              if (res.status !== 200 && res.status !== 201) {\n                throw new Error('Failed!');\n              }\n              return res.json();\n            })\n            .then(resData => {\n              let deletedPatient = resData.data.deletePatientInsurance;\n              console.log(deletedPatient);\n\n              const updatedPatientId = resData.data.deletePatientInsurance._id;\n              const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n              const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n              const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n              console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n              this.state.patients.push(resData.data.deletePatientInsurance);\n              this.context.patients = this.state.patients;\n              const responseAlert = JSON.stringify(resData.data).slice(2,25);\n              this.setState({ userAlert: responseAlert})\n              // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientInsurance})\n              this.fetchPatients();\n\n            })\n            .catch(err => {\n              console.log(err);\n            });\n\n  }\n\n  deletePatientAppointmentItem = (props) => {\n\n    let token = this.context.token;\n    let userId = this.context.userId;\n    let patientId = this.state.selectedPatient._id;\n    let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n    console.log(`\n      delete patient appointment item:\n      props: ${JSON.stringify(props)},\n      token: ${token},\n      userId: ${userId},\n      patientId: ${patientId},\n      appointment date: ${date},\n      `);\n\n      const requestBody = {\n        query: `\n         mutation {deletePatientAppointment (userId:\"${userId}\", patientId:\"${patientId}\",appointmentId:\"${props._id}\",appointmentDate:\"${date}\")\n         {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `};\n\n          fetch('http://localhost:10000/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n              'Content-Type': 'application/json',\n              Authorization: 'Bearer ' + token\n            }\n          })\n            .then(res => {\n              if (res.status !== 200 && res.status !== 201) {\n                throw new Error('Failed!');\n              }\n              return res.json();\n            })\n            .then(resData => {\n              let deletedPatient = resData.data.deletePatientAppointment;\n              console.log(deletedPatient);\n\n              const updatedPatientId = resData.data.deletePatientAppointment._id;\n              const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n              const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n              const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n              console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n              this.state.patients.push(resData.data.deletePatientAppointment);\n              this.context.patients = this.state.patients;\n              const responseAlert = JSON.stringify(resData.data).slice(2,25);\n              this.setState({ userAlert: responseAlert})\n              this.fetchPatients();\n\n            })\n            .catch(err => {\n              console.log(err);\n            });\n}\n\n  deletePatientConsultantItem = (props) => {\n\n    let token = this.context.token;\n    let userId = this.context.userId;\n    let patientId = this.state.selectedPatient._id;\n    let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n    console.log(`\n      delete patient consultant item:\n      props: ${JSON.stringify(props)},\n      token: ${token},\n      userId: ${userId},\n      patientId: ${patientId},\n      consultant date: ${date},\n      `);\n\n      const requestBody = {\n        query: `\n         mutation {deletePatientConsultant (userId:\"${userId}\", patientId:\"${patientId}\",consultantId:\"${props.reference.id}\",consultantDate:\"${date}\")\n         {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `};\n\n          fetch('http://localhost:10000/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n              'Content-Type': 'application/json',\n              Authorization: 'Bearer ' + token\n            }\n          })\n            .then(res => {\n              if (res.status !== 200 && res.status !== 201) {\n                throw new Error('Failed!');\n              }\n              return res.json();\n            })\n            .then(resData => {\n              let deletedPatient = resData.data.deletePatientConsultant;\n              console.log(deletedPatient);\n\n              const updatedPatientId = resData.data.deletePatientConsultant._id;\n              const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n              const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n              const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n              console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n              this.state.patients.push(resData.data.deletePatientConsultant);\n              this.context.patients = this.state.patients;\n              const responseAlert = JSON.stringify(resData.data).slice(2,25);\n              this.setState({ userAlert: responseAlert})\n              this.fetchPatients();\n\n            })\n            .catch(err => {\n              console.log(err);\n            });\n}\n\ndeletePatientNextOfKinItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n\n  console.log(`\n    delete patient nextOfKin item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientNextOfKin (userId:\"${userId}\", patientId:\"${patientId}\",nextOfKinName:\"${props.name}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientNextOfKin;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientNextOfKin._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientNextOfKin);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientComplaintItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n  let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n  console.log(`\n    delete patient Complaint item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    complaint date: ${date},\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientComplaint (userId:\"${userId}\", patientId:\"${patientId}\",complaintTitle:\"${props.title}\",complaintDate:\"${date}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientComplaint;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientComplaint._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientComplaint);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientSurveyItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n  let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n  console.log(`\n    delete patient Survey item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    survey date: ${date}\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientSurvey (userId:\"${userId}\", patientId:\"${patientId}\",surveyTitle:\"${props.title}\",surveyDate:\"${date}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientSurvey;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientSurvey._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientSurvey);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientVitalsItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n  let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n  console.log(`\n    delete patient Vitals item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    vitals date: ${date},\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientVitals (userId:\"${userId}\", patientId:\"${patientId}\",vitalsDate:\"${date}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientVitals;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientVitals._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientVitals);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientExaminationItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n  let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n  console.log(`\n    delete patient Examination item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    examination date: ${date},\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientExamination (userId:\"${userId}\", patientId:\"${patientId}\",examinationType:\"${props.type}\",examinationDate:\"${date}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientExamination;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientExamination._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientExamination);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientHistoryItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n  let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n  console.log(`\n    delete patient History item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    history date: ${date},\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientHistory (userId:\"${userId}\", patientId:\"${patientId}\",historyTitle:\"${props.title}\",historyDate:\"${date}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientHistory;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientHistory._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientHistory);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientAllergiesItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n\n  console.log(`\n    delete patient Allergies item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientAllergies (userId:\"${userId}\", patientId:\"${patientId}\",allergiesTitle:\"${props.title}\",allergiesType:\"${props.type}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientAllergies;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientAllergies._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientAllergies);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientMedicationItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n\n  console.log(`\n    delete patient Medication item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientMedication (userId:\"${userId}\", patientId:\"${patientId}\",medicationTitle:\"${props.title}\",medicationType:\"${props.type}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientMedication;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientMedication._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientMedication);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert});\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientInvestigationItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n  let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n  console.log(`\n    delete patient Investigation item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    investigation date: ${date},\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientInvestigation (userId:\"${userId}\", patientId:\"${patientId}\",investigationDate:\"${date}\",investigationTitle:\"${props.title}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientInvestigation;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientInvestigation._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientInvestigation);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientDiagnosisItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n  let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n  console.log(`\n    delete patient Diagnosis item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    diagnosis date: ${date}\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientDiagnosis (userId:\"${userId}\",patientId:\"${patientId}\",diagnosisDate:\"${date}\",diagnosisTitle:\"${props.title}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientDiagnosis;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientDiagnosis._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientDiagnosis);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert});\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientTreatmentItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n  let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n  console.log(`\n    delete patient Treatment item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    treatment date: ${date},\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientTreatment (userId:\"${userId}\", patientId:\"${patientId}\",treatmentDate:\"${date}\",treatmentTitle:\"${props.title}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientTreatment;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientTreatment._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientTreatment);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert});\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientBillingItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n  let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n  console.log(`\n    delete patient Billing item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    billing date: ${date},\n    `);\n\n    const requestBody = {\n      query:`\n       mutation {deletePatientBilling (userId:\"${userId}\", patientId:\"${patientId}\",billingDate:\"${date}\",billingTitle:\"${props.title}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientBilling;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientBilling._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientBilling);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert});\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientAttachmentItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n\n  // console.log(`\n  //   deleting from s3...\n  //   file.name: ${props.name},\n  //   `);\n  //\n  //   const config = {\n  //     bucketName: this.context.creds.s3.bucketName,\n  //     dirName: props.path,\n  //     region: this.context.creds.s3.region,\n  //     accessKeyId: this.context.creds.s3.accessKeyId,\n  //     secretAccessKey: this.context.creds.s3.secretAccessKey,\n  //   }\n  // const ReactS3Client = new S3(config);\n  // const filename = props.name;\n  // // const attachmentName = newFileName;\n  // //\n  // S3FileUpload\n  // .deleteFile(filename, config)\n  // .then(response => console.log(response))\n  // .catch(err => console.error(err))\n\n  console.log(`\n    delete patient Attachment item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    `);\n\n    const requestBody = {\n      query:`\n       mutation {deletePatientAttachment (userId:\"${userId}\", patientId:\"${patientId}\",attachmentName:\"${props.name}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientAttachment;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientAttachment._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientAttachment);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert});\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientNoteItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n\n  console.log(`\n    delete patient Note item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    `);\n\n    const requestBody = {\n      query:`\n      mutation {deletePatientNote (userId:\"${userId}\", patientId:\"${patientId}\",note:\"${props}\")\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientNote;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientNote._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientNote);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert});\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientTagItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n\n  console.log(`\n    delete patient Tag item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    `);\n\n    const requestBody = {\n      query:`\n      mutation {deletePatientTag (userId:\"${userId}\", patientId:\"${patientId}\",tag:\"${props}\")\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientTag;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientTag._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientTag);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert});\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n            this.setState({ userAlert: err})\n          });\n}\n\n\n  updatePatientSpecial (event) {\n\n    console.log(\"special field to update:  \", event.target.value);\n    const field = event.target.value;\n    this.setState({ patientUpdateField: field});\n\n  }\n\n  onViewAttachment = (attachment) => {\n    console.log(`\n      setting up attachment viewer...\n      attachment: ${JSON.stringify(attachment)}\n      `);\n      this.setState({showAttachment: true})\n\n      const file = \"https://ent-emr-bucket.s3-us-east-2.amazonaws.com/\"+attachment.path+\"/\"+attachment.name;\n      const type = attachment.format;\n\n      this.setState({showThisAttachmentFile: file, showThisAttachmentType: type})\n  }\n\n  closeAttachmentView = () => {\n    console.log(`\n      closing attachment viewer...\n      `);\n      this.setState({showAttachment: false})\n  }\n\n  createPdf = (patient) => {\n    console.log(`\n        creating pdf...\n        user: ${JSON.stringify(patient)}\n      `);\n\n      const pdfData = {\n        title: \"This pdf is supplied with Patient data...\",\n        patient: {\n          _id: patient._id,\n          title: patient.title,\n          name: patient.name,\n          dob: patient.dob,\n          age: patient.age,\n          gender: patient.gender,\n          address:{\n            number: patient.number,\n            street: patient.street,\n            town: patient.town,\n            parish: patient.parish,\n            postOffice: patient.postOffice\n          },\n          registrationDate: patient.registrationDate,\n          referralDate: patient.referralDate,\n          expirationDate: patient.expirationDate,\n          attendingPhysician:{\n            name: patient.attendingPhysician.name,\n            email: patient.attendingPhysician.email,\n            phone: patient.attendingPhysician.phone\n          },\n          referringDoctor: {\n            name: patient.referringDoctor.name,\n            email: patient.referringDoctor.email,\n            phone: patient.referringDoctor.phone\n          },\n          contact: {\n            phone: patient.contact.phone,\n            email: patient.contact.email\n          },\n          occupation:{\n            role: patient.occupation.role,\n            employer: patient.occupation.employer,\n            contact:{\n              phone: patient.occupation.contact.phone,\n              email: patient.occupation.contact.email\n            }},\n            appointments: patient.appointments,\n            consultant: patient.consultant,\n            insurance: patient.insurance,\n            nextOfKin: patient.nextOfKin,\n            complaints: patient.complaints,\n            surveys: patient.surveys,\n            vitals: patient.vitals,\n            examination: patient.examination,\n            history: patient.history,\n            allergies: patient.allergies,\n            medication: patient.medication,\n            investigation: patient.investigation,\n            diagnosis: patient.diagnosis,\n            treatment: patient.treatment,\n            billing: patient.billing,\n            attachments: patient.attachments,\n            notes: patient.notes,\n            tags: patient.tags\n          }\n        }\n\n    this.setState({createPdf: true, pdfData: pdfData})\n  }\n\n  closePdfCreator = () => {\n    console.log(`\n      closing pdf creator...\n      `);\n      this.setState({createPdf: false, pdfData: null} )\n  }\n\n\n  showDetailHandler = patientId => {\n\n    this.setState(prevState => {\n      const selectedPatient = prevState.patients.find(e => e._id === patientId);\n      this.context.selectedPatient = selectedPatient;\n      this.context.selectedPatientId = selectedPatient._id;\n      console.log(\"selectedPatient:  \", selectedPatient);\n      return { selectedPatient: selectedPatient };\n    });\n  };\n\n\n  componentWillUnmount() {\n    this.isActive = false;\n  }\n\n  render() {\n    return (\n\n    <React.Fragment>\n    {this.state.showAttachment === true && (\n      <AttachmentViewer\n        onCloseAttachmentView={this.closeAttachmentView}\n        attachmentFile={this.state.showThisAttachmentFile}\n        attachmentType={this.state.showThisAttachmentType}\n      />\n    )}\n\n    {this.state.createPdf === true && (\n        <PdfCreator\n          pdfData={this.state.pdfData}\n          onClosePdfCreator={this.closePdfCreator}\n        />\n    )}\n\n    <Accordion>\n\n    <Row>\n    <Col md={3} className=\"MasterCol1\">\n\n    <AlertBox\n          authUserId={this.context.userId}\n          alert={this.state.userAlert}\n        />\n      <SidebarPage/>\n    </Col>\n\n    <Col md={9} className=\"MasterCol2\">\n    <Container className=\"containerCombinedDetail\">\n\n    <Tab.Container id=\"left-tabs-example\" defaultActiveKey=\"patientDetail\">\n      <Row>\n        <Col sm={2}>\n          <Nav variant=\"pills\" className=\"flex-column\">\n            <Nav.Item>\n              <Nav.Link eventKey=\"MasterList\">MASTER LIST</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientDetail\">Selected</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientCreate\">Create New</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"disabled\" disabled>Edit:</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditDemographics\">Demographics</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditField\">Single Field</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"disabled\" disabled>Add:</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditConsultant\">Consultant</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditInsurance\">Insurance</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditNextOfKin\">Next of Kin</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditComplaint\">Complaint</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditSurvey\">Survey</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditVitals\">Vitals</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditExamination\">Examination</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditHistory\">History</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditAllergies\">Allergies</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditMedication\">Medication</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditInvestigation\">Investigation</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditDiagnosis\">Diagnosis</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditTreatment\">Treatment</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditBilling\">Billing</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditAttachment\">Attachment</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditNote\">Note</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditTag\">Tag</Nav.Link>\n            </Nav.Item>\n\n            <Nav.Item>\n              <Nav.Link eventKey=\"disabled\" disabled>Search:</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"SearchInput\">Input</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"SearchResult\">Search</Nav.Link>\n            </Nav.Item>\n          </Nav>\n        </Col>\n        <Col sm={10}>\n          <Tab.Content>\n            <Tab.Pane eventKey=\"patientDetail\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.isLoading === false &&\n                this.state.selectedPatient !== null\n                &&\n                (<PatientDetail\n                  authUserId={this.context.userId}\n                  token={this.context.token}\n                  patient={this.state.selectedPatient}\n                  onEdit={this.startUpdatePatientHandler}\n                  canDelete={this.state.canDelete}\n                  onDelete={this.modalDeleteHandler}\n                  onGetVisit={this.getPatientVisit}\n                  visit={this.context.visit}\n                  fetchUsers={this.fetchUsers}\n                  appointmentDelete={this.deletePatientAppointmentItem}\n                  consultantDelete={this.deletePatientConsultantItem}\n                  insuranceDelete={this.deletePatientInsuranceItem}\n                  nextOfKinDelete={this.deletePatientNextOfKinItem}\n                  complaintDelete={this.deletePatientComplaintItem}\n                  surveyDelete={this.deletePatientSurveyItem}\n                  vitalsDelete={this.deletePatientVitalsItem}\n                  examinationDelete={this.deletePatientExaminationItem}\n                  historyDelete={this.deletePatientHistoryItem}\n                  allergiesDelete={this.deletePatientAllergiesItem}\n                  medicationDelete={this.deletePatientMedicationItem}\n                  investigationDelete={this.deletePatientInvestigationItem}\n                  diagnosisDelete={this.deletePatientDiagnosisItem}\n                  treatmentDelete={this.deletePatientTreatmentItem}\n                  billingDelete={this.deletePatientBillingItem}\n                  attachmentDelete={this.deletePatientAttachmentItem}\n                  noteDelete={this.deletePatientNoteItem}\n                  tagDelete={this.deletePatientTagItem}\n                  onViewAttachment={this.onViewAttachment}\n                  onCreatePdf={this.createPdf}\n                  />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientCreate\">\n              <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" onClick={this.startCreatePatientHandler} >Create NEW Patient Profile</Button>\n              {\n                this.state.creating && (\n                  <CreatePatientForm\n                  canCancel\n                    canConfirm\n                    onCancel={this.modalCancelHandler}\n                    onConfirm={this.modalConfirmHandler}\n                    confirmText=\"Confirm\"\n                  />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditDemographics\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" onClick={this.startUpdatePatientHandler}>Edit Demographics</Button>\n              )}\n              {this.state.updating &&\n                this.state.selectedPatient !== null\n                && (\n                <UpdatePatientForm\n                authUserId={this.context.userId}\n                canCancel\n                  canConfirm\n                  onCancel={this.modalCancelHandler}\n                  onConfirm={this.modalConfirmUpdateHandler}\n                  confirmText=\"Confirm\"\n                  patient={this.state.selectedPatient}\n                />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditField\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" onClick={this.startUpdatePatientHandler}>Edit a Single Field</Button>\n              )}\n              {this.state.updating &&\n                this.state.selectedPatient !== null\n                && (\n                  <UpdatePatientFieldForm\n                    authUserId={this.context.userId}\n                    canCancel\n                    canConfirm\n                    onCancel={this.modalCancelHandler}\n                    onConfirm={this.modalConfirmUpdateFieldHandler}\n                    confirmText=\"Confirm\"\n                    patient={this.state.selectedPatient}\n                  />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditConsultant\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='consultant' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add a Consultant</Button>\n              )}\n              {this.state.patientUpdateField === 'consultant' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientConsultantForm\n                authUserId={this.context.userId}\n                canCancel\n                  canConfirm\n                  onCancel={this.modalCancelHandler}\n                  onConfirm={this.updatePatientConsultantHandler}\n                  confirmText=\"Confirm\"\n                  consultant={this.context.selectedUser}\n                />\n              )}\n              {this.state.patientUpdateField === 'consultant' &&\n              this.state.selectedPatient !== null &&\n              (\n                <Row>\n                <p>Add Consultant: {this.context.selectedUser.name}</p>\n                <p> To Paitient: {this.state.selectedPatient.name} ??</p>\n                <hr/>\n                </Row>\n              )}\n              {this.state.patientUpdateField === 'consultant' &&\n              this.state.selectedPatient !== null &&\n              (\n                <Row>\n                <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                  Select someone from the Staff page\n                </Button>\n                </Row>\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditInsurance\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='insurance' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Insurance</Button>\n              )}\n              {this.state.patientUpdateField === 'insurance' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientInsuranceForm\n                authUserId={this.context.userId}\n                canCancel\n                  canConfirm\n                  onCancel={this.modalCancelHandler}\n                  onConfirm={this.updatePatientInsuranceHandler}\n                  confirmText=\"Confirm\"\n                  patient={this.state.selectedPatient}\n                />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditNextOfKin\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='nextOfKin' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add NextOfKin</Button>\n              )}\n              {this.state.patientUpdateField === 'nextOfKin' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientNextOfKinForm\n                      authUserId={this.context.userId}\n                      canCancel\n                        canConfirm\n                        onCancel={this.modalCancelHandler}\n                        onConfirm={this.updatePatientNextOfKinHandler}\n                        confirmText=\"Confirm\"\n                        patient={this.state.selectedPatient}\n                      />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditComplaint\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='complaint' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Complaint</Button>\n              )}\n              {this.state.patientUpdateField === 'complaint' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientComplaintForm\n                      authUserId={this.context.userId}\n                      canCancel\n                        canConfirm\n                        onCancel={this.modalCancelHandler}\n                        onConfirm={this.updatePatientComplaintHandler}\n                        confirmText=\"Confirm\"\n                        patient={this.state.selectedPatient}\n                      />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditSurvey\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='survey' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Survey</Button>\n              )}\n              {this.state.patientUpdateField === 'survey' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientSurveyForm\n                      authUserId={this.context.userId}\n                      canCancel\n                        canConfirm\n                        onCancel={this.modalCancelHandler}\n                        onConfirm={this.updatePatientSurveyHandler}\n                        confirmText=\"Confirm\"\n                        patient={this.state.selectedPatient}\n                      />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditVitals\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='vitals' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Vitals</Button>\n              )}\n              {this.state.patientUpdateField === 'vitals' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientVitalsForm\n                      authUserId={this.context.userId}\n                      canCancel\n                        canConfirm\n                        onCancel={this.modalCancelHandler}\n                        onConfirm={this.updatePatientVitalsHandler}\n                        confirmText=\"Confirm\"\n                        patient={this.state.selectedPatient}\n                      />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditExamination\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='examintion' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Examination</Button>\n              )}\n              {this.state.patientUpdateField === 'examintion' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientExaminationForm\n                      authUserId={this.context.userId}\n                      canCancel\n                        canConfirm\n                        onCancel={this.modalCancelHandler}\n                        onConfirm={this.updatePatientExaminationHandler}\n                        confirmText=\"Confirm\"\n                        patient={this.state.selectedPatient}\n                      />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditHistory\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='history' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add History</Button>\n              )}\n              {this.state.patientUpdateField === 'history' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientHistoryForm\n                authUserId={this.context.userId}\n                canCancel\n                  canConfirm\n                  onCancel={this.modalCancelHandler}\n                  onConfirm={this.updatePatientHistoryHandler}\n                  confirmText=\"Confirm\"\n                  patient={this.state.selectedPatient}\n                />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditAllergies\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='allergies' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Allergies</Button>\n              )}\n              {this.state.patientUpdateField === 'allergies' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientAllergiesForm\n                      authUserId={this.context.userId}\n                      canCancel\n                        canConfirm\n                        onCancel={this.modalCancelHandler}\n                        onConfirm={this.updatePatientAllergiesHandler}\n                        confirmText=\"Confirm\"\n                        patient={this.state.selectedPatient}\n                      />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditMedication\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='medication' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Medication</Button>\n              )}\n              {this.state.patientUpdateField === 'medication' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientMedicationForm\n                authUserId={this.context.userId}\n                canCancel\n                  canConfirm\n                  onCancel={this.modalCancelHandler}\n                  onConfirm={this.updatePatientMedicationHandler}\n                  confirmText=\"Confirm\"\n                  patient={this.state.selectedPatient}\n                />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditInvestigation\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='investigation' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Investigation</Button>\n              )}\n              {this.state.patientUpdateField === 'investigation' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientInvestigationForm\n                      authUserId={this.context.userId}\n                      canCancel\n                        canConfirm\n                        onCancel={this.modalCancelHandler}\n                        onConfirm={this.updatePatientInvestigationHandler}\n                        confirmText=\"Confirm\"\n                        patient={this.state.selectedPatient}\n                      />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditDiagnosis\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='diagnosis' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Diagnosis</Button>\n              )}\n              {this.state.patientUpdateField === 'diagnosis' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientDiagnosisForm\n                      authUserId={this.context.userId}\n                      canCancel\n                        canConfirm\n                        onCancel={this.modalCancelHandler}\n                        onConfirm={this.updatePatientDiagnosisHandler}\n                        confirmText=\"Confirm\"\n                        patient={this.state.selectedPatient}\n                      />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditTreatment\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='treatment' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Treatment</Button>\n              )}\n              {this.state.patientUpdateField === 'treatment' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientTreatmentForm\n                      authUserId={this.context.userId}\n                      canCancel\n                        canConfirm\n                        onCancel={this.modalCancelHandler}\n                        onConfirm={this.updatePatientTreatmentHandler}\n                        confirmText=\"Confirm\"\n                        patient={this.state.selectedPatient}\n                      />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditBilling\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='billing' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Billing</Button>\n              )}\n              {this.state.patientUpdateField === 'billing' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientBillingForm\n                      authUserId={this.context.userId}\n                      canCancel\n                        canConfirm\n                        onCancel={this.modalCancelHandler}\n                        onConfirm={this.updatePatientBillingHandler}\n                        confirmText=\"Confirm\"\n                        patient={this.state.selectedPatient}\n                      />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditAttachment\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='attachment' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Attachment</Button>\n              )}\n              {this.state.patientUpdateField === 'attachment' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientAttachmentForm\n                      authUserId={this.context.userId}\n                      canCancel\n                        canConfirm\n                        onCancel={this.modalCancelHandler}\n                        onConfirm={this.updatePatientAttachmentHandler}\n                        confirmText=\"Confirm\"\n                        patient={this.state.selectedPatient}\n                      />\n                    )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditNote\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='notes' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Note</Button>\n              )}\n              {this.state.patientUpdateField === 'notes' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientNoteForm\n                      authUserId={this.context.userId}\n                      canCancel\n                        canConfirm\n                        onCancel={this.modalCancelHandler}\n                        onConfirm={this.updatePatientNoteHandler}\n                        confirmText=\"Confirm\"\n                        patient={this.state.selectedPatient}\n                      />\n                    )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditTag\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='tags' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Tag</Button>\n              )}\n              {this.state.patientUpdateField === 'tags' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientTagForm\n                      authUserId={this.context.userId}\n                      canCancel\n                        canConfirm\n                        onCancel={this.modalCancelHandler}\n                        onConfirm={this.updatePatientTagHandler}\n                        confirmText=\"Confirm\"\n                        patient={this.state.selectedPatient}\n                      />\n                    )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"MasterList\">\n              <Container className=\"containerUserMasterList\">\n              <Row className=\"searchListRow\">\n              <Button variant=\"primary\" size=\"sm\" onClick={this.fetchPatientsAsc}>\n                 Sort Asc\n               </Button>\n              <Button variant=\"info\" size=\"sm\" onClick={this.fetchPatientsDesc}>\n                 Sort Desc\n               </Button>\n              {this.state.isLoading ? (\n                <Spinner />\n              ) : (\n                <PatientList\n                  patients={this.state.patients}\n                  authUserId={this.context.userId}\n                  onViewDetail={this.showDetailHandler}\n                />\n              )}\n              </Row>\n              </Container>\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"SearchInput\">\n              <Container className=\"containerSearchUserInput\">\n                {this.context.token && (\n                <Row className=\"searchUserRowAdd\">\n                <Button variant=\"primary\" onClick={this.startSearchPatientHandler}>Search</Button>\n                </Row>\n              )}\n\n              <Row className=\"searchUserRowForm\">\n              <Col md={10} className=\"searchUserColForm\">\n              <Tabs defaultActiveKey=\"Field\" id=\"uncontrolled-tab-example\">\n              <Tab eventKey=\"Search\" title=\"Search:\" disabled>\n              </Tab>\n              <Tab eventKey=\"Field\" title=\"Search by Field:\">\n              {this.state.searching !== true && (\n                <Button variant=\"outline-warning\" className=\"confirmEditButton\" size=\"lg\">\n                  Click the 'Search' Button start\n                </Button>\n              )}\n              {this.state.searching === true && (\n                <SearchPatientForm\n                authUserId={this.context.userId}\n                canCancel\n                  canConfirm\n                  onCancel={this.modalCancelHandler}\n                  onConfirm={this.modalConfirmSearchHandler}\n                  confirmText=\"Search\"\n                  patient={this.context.selectedPatient}\n                />\n              )}\n              </Tab>\n              <Tab eventKey=\"Id\" title=\"Search by ID:\">\n              {this.state.searching !== true && (\n                <Button variant=\"outline-warning\" className=\"confirmEditButton\" size=\"lg\">\n                  Click the 'Search' Button start\n                </Button>\n              )}\n              {this.state.searching === true && (\n                <SearchPatientIdForm\n                authUserId={this.context.userId}\n                canCancel\n                  canConfirm\n                  onCancel={this.modalCancelHandler}\n                  onConfirm={this.modalConfirmSearchIdHandler}\n                  confirmText=\"Search\"\n                  patient={this.context.selectedPatient}\n                />\n              )}\n              </Tab>\n\n              <Tab eventKey=\"Name\" title=\"Search by Name:\">\n              {this.state.searching !== true && (\n                <Button variant=\"outline-warning\" className=\"confirmEditButton\" size=\"lg\">\n                  Click the 'Search' Button start\n                </Button>\n              )}\n              {this.state.searching === true && (\n                <SearchPatientNameForm\n                authUserId={this.context.userId}\n                canCancel\n                  canConfirm\n                  onCancel={this.modalCancelHandler}\n                  onConfirm={this.modalConfirmSearchNameHandler}\n                  confirmText=\"Search\"\n                  patient={this.context.selectedPatient}\n                />\n              )}\n              </Tab>\n              </Tabs>\n              </Col>\n              </Row>\n              </Container>\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"SearchResult\">\n              <Container className=\"containerSearchUserResults\">\n              <Row>\n                <Card className=\"searchCard\">\n                  <Card.Body className=\"searchCardBody\">\n                    <Card.Title>Your Search</Card.Title>\n                    <Card.Text>\n                      Field: {this.state.patientSearchField}\n                    </Card.Text>\n                    <Card.Text>\n                      Query: {this.state.patientSearchQuery}\n                    </Card.Text>\n                  </Card.Body>\n                </Card>\n              </Row>\n              <Row className=\"searchListRow\">\n              {\n                this.state.searchPatients !== [] &&\n                <SearchPatientList\n                  searchPatients={this.state.searchPatients}\n                  authUserId={this.context.userId}\n                  onCancel={this.modalCancelHandler}\n                    onViewDetail={this.showDetailHandler}\n                />\n              }\n              </Row>\n              </Container>\n            </Tab.Pane>\n          </Tab.Content>\n        </Col>\n      </Row>\n    </Tab.Container>\n\n\n\n    </Container>\n\n\n\n\n\n    </Col>\n\n    <Col md={3} className=\"MasterCol3\">\n\n\n    </Col>\n    </Row>\n\n</Accordion>\n\n      </React.Fragment>\n    );\n  }\n}\n\nexport default PatientsPage;\n"]},"metadata":{},"sourceType":"module"}