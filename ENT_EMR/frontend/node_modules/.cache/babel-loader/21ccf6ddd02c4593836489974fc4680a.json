{"ast":null,"code":"var _jsxFileName = \"/Users/pedrojacob/Downloads/AMR/websites/office_records/ENT_EMR/frontend/src/pages/Patients.js\";\nimport React, { Component } from 'react';\nimport S3 from 'react-aws-s3'; // import S3FileUpload from 'react-s3';\n\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport Accordion from 'react-bootstrap/Accordion';\nimport SidebarPage from './Sidebar';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab'; // import TabContainer from 'react-bootstrap/TabContainer';\n// import TabContent from 'react-bootstrap/TabContent';\n// import TabPane from 'react-bootstrap/TabPane';\n\nimport Nav from 'react-bootstrap/Nav';\nimport Card from 'react-bootstrap/Card';\nimport PatientList from '../components/Patients/PatientList/PatientList';\nimport PatientDetail from '../components/Patients/PatientDetail';\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\nimport SearchPatientList from '../components/Patients/PatientList/SearchPatientList';\nimport SearchPatientForm from '../components/Forms/SearchPatientForm';\nimport SearchPatientIdForm from '../components/Forms/SearchPatientIdForm';\nimport SearchPatientNameForm from '../components/Forms/SearchPatientNameForm'; // import SearchPatientVisitForm from '../components/Forms/SearchPatientVisitForm';\n\nimport AlertBox from '../components/AlertBox';\nimport AttachmentViewer from '../components/AttachmentViewer';\nimport PdfCreator from '../components/PdfCreator';\nimport CreatePatientForm from '../components/Forms/CreatePatientForm';\nimport UpdatePatientForm from '../components/Forms/UpdatePatientForm';\nimport UpdatePatientFieldForm from '../components/Forms/UpdatePatientFieldForm';\nimport UpdatePatientConsultantForm from '../components/Forms/UpdatePatientConsultantForm';\nimport UpdatePatientInsuranceForm from '../components/Forms/UpdatePatientInsuranceForm';\nimport UpdatePatientNextOfKinForm from '../components/Forms/UpdatePatientNextOfKinForm';\nimport UpdatePatientComplaintForm from '../components/Forms/UpdatePatientComplaintForm';\nimport UpdatePatientSurveyForm from '../components/Forms/UpdatePatientSurveyForm';\nimport UpdatePatientSystematicInquiryForm from '../components/Forms/UpdatePatientSystematicInquiryForm';\nimport UpdatePatientVitalsForm from '../components/Forms/UpdatePatientVitalsForm';\nimport UpdatePatientExaminationForm from '../components/Forms/UpdatePatientExaminationForm';\nimport UpdatePatientHistoryForm from '../components/Forms/UpdatePatientHistoryForm';\nimport UpdatePatientAllergiesForm from '../components/Forms/UpdatePatientAllergiesForm';\nimport UpdatePatientMedicationForm from '../components/Forms/UpdatePatientMedicationForm';\nimport UpdatePatientInvestigationForm from '../components/Forms/UpdatePatientInvestigationForm';\nimport UpdatePatientDiagnosisForm from '../components/Forms/UpdatePatientDiagnosisForm';\nimport UpdatePatientTreatmentForm from '../components/Forms/UpdatePatientTreatmentForm';\nimport UpdatePatientBillingForm from '../components/Forms/UpdatePatientBillingForm';\nimport UpdatePatientVigilanceForm from '../components/Forms/UpdatePatientVigilanceForm';\nimport UpdatePatientAttachmentForm from '../components/Forms/UpdatePatientAttachmentForm';\nimport UpdatePatientNoteForm from '../components/Forms/UpdatePatientNoteForm';\nimport UpdatePatientTagForm from '../components/Forms/UpdatePatientTagForm';\nimport './Users.css';\n\nclass PatientsPage extends Component {\n  constructor(_props) {\n    super(_props);\n    this.state = {\n      creating: false,\n      updating: false,\n      searching: false,\n      updatingArray: false,\n      deleting: false,\n      patients: [],\n      searchPatients: [],\n      isLoading: false,\n      selectedPatient: null,\n      patientUpdateField: null,\n      patientSearchField: null,\n      patientSearchQuery: null,\n      canDelete: null,\n      visit: null,\n      visitList: [],\n      selectedVisit: null,\n      newVisit: false,\n      createVisitChecklist: {\n        consultant: false,\n        complaint: false,\n        diagnosis: false,\n        examination: false,\n        investigation: false,\n        survey: false,\n        systematicInquiry: false,\n        treatment: false,\n        vitals: false,\n        billing: false,\n        vigilance: false\n      },\n      newVisit: false,\n      userAlert: null,\n      showAttachment: false,\n      showThisAttachmentFile: null,\n      showThisAttachmentType: null,\n      createPdf: false,\n      pdfData: null\n    };\n    this.isActive = true;\n\n    this.startCreatePatientHandler = () => {\n      this.setState({\n        creating: true\n      });\n      console.log(\"CreatePatientForm...\");\n    };\n\n    this.startCreateVisitHandler = () => {\n      this.setState({\n        newVisit: true\n      });\n      console.log(\"CreateVisitForm...\");\n    };\n\n    this.startUpdatePatientHandler = () => {\n      this.setState({\n        updating: true,\n        updatingArray: true\n      });\n      console.log(\"UpdatePatientForm...\");\n    };\n\n    this.startSearchPatientHandler = () => {\n      this.setState({\n        searching: true\n      });\n      console.log(\"SearchPatientForm...\");\n    };\n\n    this.modalConfirmHandler = event => {\n      console.log(\"CreatePatientFormData:  \", event.target.formGridName.value);\n      this.setState({\n        creating: false\n      });\n      const userId = this.context.userId;\n      let title = event.target.formGridTitle.value;\n      let name = event.target.formGridName.value;\n      let dob = event.target.formGridDob.value;\n      let age = event.target.formGridAge.value;\n      let gender = event.target.formGridGender.value;\n      let addressNumber = event.target.formGridAddressNumber.value;\n      let addressStreet = event.target.formGridAddressStreet.value;\n      let addressTown = event.target.formGridAddressTown.value;\n      let addressParish = event.target.formGridAddressParish.value;\n      let addressPostOffice = event.target.formGridAddressPostOffice.value;\n      let contactPhone = event.target.formGridContactPhone.value;\n      let contactEmail = event.target.formGridContactEmail.value;\n      let registrationDate = event.target.formGridRegistrationDate.value;\n\n      if (event.target.formGridRegistrationDateTodayCheckbox.checked === true) {\n        registrationDate = new Date().toISOString().slice(0, 10);\n      }\n\n      let referralDate = event.target.formGridReferralDate.value;\n\n      if (event.target.formGridReferralDateTodayCheckbox.checked === true) {\n        referralDate = new Date().toISOString().slice(0, 10);\n      }\n\n      let expirationDate = event.target.formGridExpirationDate.value;\n      let attendingPhysicianName = event.target.formGridAttendingPhysicianName.value;\n      let attendingPhysicianEmail = event.target.formGridAttendingPhysicianEmail.value;\n      let attendingPhysicianPhone = event.target.formGridAttendingPhysicianPhone.value;\n      let referringDoctorName = event.target.formGridReferringDoctorName.value;\n      let referringDoctorEmail = event.target.formGridReferringDoctorEmail.value;\n      let referringDoctorPhone = event.target.formGridReferringDoctorPhone.value;\n      let occupationRole = event.target.formGridOccupationRole.value;\n      let occupationEmployer = event.target.formGridOccupationEmployer.value;\n      let occupationEmployerContactPhone = event.target.formGridOccupationEmployerContactPhone.value;\n      let occupationEmployerContactEmail = event.target.formGridOccupationEmployerContactEmail.value;\n\n      if (name.trim().length === 0 || // title.trim().length === 0 ||\n      // name.trim().length === 0 ||\n      // dob.trim().length === 0 ||\n      age.trim().length === 0 || // gender.trim().length === 0 ||\n      addressNumber.trim().length === 0 || addressStreet.trim().length === 0 || // addressTown.trim().length === 0 ||\n      // addressParish.trim().length === 0 ||\n      // addressPostOffice.trim().length === 0 ||\n      contactPhone.trim().length === 0 || // contactEmail.trim().length === 0 ||\n      registrationDate.trim().length === 0 // referralDate.trim().length === 0 ||\n      // expirationDate.trim().length === 0 ||\n      // attendingPhysicianName.trim().length === 0 ||\n      // attendingPhysicianEmail.trim().length === 0 ||\n      // attendingPhysicianPhone.trim().length === 0 ||\n      // referringDoctorName.trim().length === 0 ||\n      // referringDoctorEmail.trim().length === 0 ||\n      // referringDoctorPhone.trim().length === 0 ||\n      // occupationRole.trim().length === 0 ||\n      // occupationEmployer.trim().length === 0 ||\n      // occupationEmployerContactPhone.trim().length === 0 ||\n      // occupationEmployerContactEmail.trim().length === 0\n      ) {\n          console.log(\"patient must have at least: Name, Age, Contact Number, Street Name & Number and Registration Date!!!...Please try again...\");\n          this.setState({\n            userAlert: \"patient must have at least: Name, Age, Contact Number, Street Name & Number and Registration Date!!!...Please try again...\"\n          });\n          return;\n        }\n\n      console.log(`\n      creating patient...\n      title: ${title},\n      name: ${name},\n      dob: ${dob},\n      age: ${age},\n      gender: ${gender},\n      addressNumber: ${addressNumber},\n      addressStreet: ${addressStreet},\n      addressTown: ${addressTown},\n      addressParish: ${addressParish},\n      addressPostOffice: ${addressPostOffice},\n      contactPhone: ${contactPhone},\n      contactEmail: ${contactEmail},\n      registrationDate: ${registrationDate},\n      referralDate: ${referralDate},\n      expirationDate: ${expirationDate},\n      attendingPhysicianName: ${attendingPhysicianName},\n      attendingPhysicianEmail: ${attendingPhysicianEmail},\n      attendingPhysicianPhone: ${attendingPhysicianPhone},\n      referringDoctorName: ${referringDoctorName},\n      referringDoctorEmail: ${referringDoctorEmail},\n      referringDoctorPhone: ${referringDoctorPhone},\n      occupationRole: ${occupationRole},\n      occupationEmployer: ${occupationEmployer},\n      occupationEmployerContactPhone: ${occupationEmployerContactPhone},\n      occupationEmployerContactEmail: ${occupationEmployerContactEmail},\n      `);\n      const requestBody = {\n        query: `\n        mutation {createPatient(userId:\"${userId}\", patientInput:{title:\"${title}\",name:\"${name}\",dob:\"${dob}\",age:${age},gender:\"${gender}\",addressNumber:${addressNumber},addressStreet:\"${addressStreet}\",addressTown:\"${addressTown}\",addressParish:\"${addressParish}\",addressPostOffice:\"${addressPostOffice}\",contactPhone:\"${contactPhone}\",contactEmail:\"${contactEmail}\",registrationDate:\"${registrationDate}\",referralDate:\"${referralDate}\",expirationDate:\"${expirationDate}\",referringDoctorName:\"${referringDoctorName}\",referringDoctorEmail:\"${referringDoctorEmail}\",referringDoctorPhone:\"${referringDoctorPhone}\",attendingPhysicianName:\"${attendingPhysicianName}\",attendingPhysicianEmail:\"${attendingPhysicianEmail}\",attendingPhysicianPhone:\"${attendingPhysicianPhone}\",occupationRole:\"${occupationRole}\",occupationEmployer:\"${occupationEmployer}\",occupationEmployerContactPhone:\"${occupationEmployerContactPhone}\",occupationEmployerContactEmail:\"${occupationEmployerContactEmail}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n        `\n      };\n      const token = this.context.token; // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(`\n          response data:\n          ${JSON.stringify(resData.data.createPatient)}\n          `);\n        const responseAlert = JSON.stringify(resData.data).slice(2, 15);\n        this.setState({\n          userAlert: responseAlert\n        });\n        const newPatient = resData.data.createPatient;\n        this.setState(prevState => {\n          const updatedPatients = [...prevState.patients];\n          updatedPatients.push(newPatient);\n          return {\n            patients: updatedPatients\n          };\n        });\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.modalCancelHandler = () => {\n      this.setState({\n        creating: false,\n        updating: false\n      });\n    };\n\n    this.modalConfirmUpdateHandler = event => {\n      // if(this.context.user.role !== 'admin') {\n      //   console.log(\"Not the Admin! No edit permission!!\");\n      // }\n      const userId = this.context.userId;\n      const selectedPatientId = this.context.selectedPatient._id;\n      console.log(\"UpdatePatientFormData:  \", event.target.formGridName.value);\n      this.setState({\n        updating: false\n      });\n      let title = event.target.formGridTitle.value;\n      let name = event.target.formGridName.value;\n      let dob = event.target.formGridDob.value;\n      let age = event.target.formGridAge.value;\n      let gender = event.target.formGridGender.value;\n      let addressNumber = event.target.formGridAddressNumber.value;\n      let addressStreet = event.target.formGridAddressStreet.value;\n      let addressTown = event.target.formGridAddressTown.value;\n      let addressParish = event.target.formGridAddressParish.value;\n      let addressPostOffice = event.target.formGridAddressPostOffice.value;\n      let contactPhone = event.target.formGridContactPhone.value;\n      let contactEmail = event.target.formGridContactEmail.value;\n      let registrationDate = event.target.formGridRegistrationDate.value;\n\n      if (event.target.formGridRegistrationDateTodayCheckbox.checked === true) {\n        registrationDate = new Date().toISOString().slice(0, 10);\n      }\n\n      let referralDate = event.target.formGridReferralDate.value;\n\n      if (event.target.formGridReferralDateTodayCheckbox.checked === true) {\n        referralDate = new Date().toISOString().slice(0, 10);\n      }\n\n      let expirationDate = event.target.formGridExpirationDate.value;\n\n      if (event.target.formGridExpirationDateTodayCheckbox.checked === true) {\n        expirationDate = new Date().toISOString().slice(0, 10);\n      }\n\n      let attendingPhysicianName = event.target.formGridAttendingPhysicianName.value;\n      let attendingPhysicianEmail = event.target.formGridAttendingPhysicianEmail.value;\n      let attendingPhysicianPhone = event.target.formGridAttendingPhysicianPhone.value;\n      let referringDoctorName = event.target.formGridReferringDoctorName.value;\n      let referringDoctorEmail = event.target.formGridReferringDoctorEmail.value;\n      let referringDoctorPhone = event.target.formGridReferringDoctorPhone.value;\n      let occupationRole = event.target.formGridOccupationRole.value;\n      let occupationEmployer = event.target.formGridOccupationEmployer.value;\n      let occupationEmployerContactPhone = event.target.formGridOccupationEmployerContactPhone.value;\n      let occupationEmployerContactEmail = event.target.formGridOccupationEmployerContactEmail.value;\n\n      if (title.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        title = this.context.selectedPatient.title;\n      }\n\n      if (name.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        name = this.context.selectedPatient.name;\n      }\n\n      if (dob.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        dob = this.context.selectedPatient.dob;\n      }\n\n      if (gender.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        gender = this.context.selectedPatient.gender;\n      }\n\n      if (age.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        age = this.context.selectedPatient.age;\n      }\n\n      if (addressNumber.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        addressNumber = this.context.selectedPatient.address.number;\n      }\n\n      if (addressStreet.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        addressStreet = this.context.selectedPatient.address.street;\n      }\n\n      if (addressTown.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        addressTown = this.context.selectedPatient.address.town;\n      }\n\n      if (addressParish.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        addressParish = this.context.selectedPatient.address.parish;\n      }\n\n      if (addressPostOffice.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        addressPostOffice = this.context.selectedPatient.address.postOffice;\n      }\n\n      if (contactPhone.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        contactPhone = this.context.selectedPatient.contact.phone;\n      }\n\n      if (contactEmail.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        contactEmail = this.context.selectedPatient.contact.email;\n      }\n\n      if (registrationDate.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        registrationDate = this.context.selectedPatient.registrationDate;\n      }\n\n      if (attendingPhysicianName.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        attendingPhysicianName = this.context.selectedPatient.attendingPhysician.name;\n      }\n\n      if (attendingPhysicianEmail.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        attendingPhysicianEmail = this.context.selectedPatient.attendingPhysician.email;\n      }\n\n      if (attendingPhysicianPhone.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        attendingPhysicianPhone = this.context.selectedPatient.attendingPhysician.phone;\n      }\n\n      if (referringDoctorName.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        referringDoctorName = this.context.selectedPatient.referringDoctor.name;\n      }\n\n      if (referringDoctorEmail.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        referringDoctorEmail = this.context.selectedPatient.referringDoctor.email;\n      }\n\n      if (referringDoctorPhone.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        referringDoctorPhone = this.context.selectedPatient.referringDoctor.phone;\n      }\n\n      if (occupationRole.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        occupationRole = this.context.selectedPatient.occupation.role;\n      }\n\n      if (occupationEmployer.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        occupationEmployer = this.context.selectedPatient.occupation.employer;\n      }\n\n      if (occupationEmployerContactEmail.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        occupationEmployerContactEmail = this.context.selectedPatient.occupation.contact.email;\n      }\n\n      if (occupationEmployerContactPhone.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        occupationEmployerContactPhone = this.context.selectedPatient.occupation.contact.phone;\n      }\n\n      console.log(`\n      updating patient...\n      title: ${title},\n      name: ${name},\n      dob: ${dob},\n      age: ${age},\n      gender: ${gender},\n      addressNumber: ${addressNumber},\n      addressStreet: ${addressStreet},\n      addressTown: ${addressTown},\n      addressParish: ${addressParish},\n      addressPostOffice: ${addressPostOffice},\n      contactPhone: ${contactPhone},\n      contactEmail: ${contactEmail},\n      registrationDate: ${registrationDate},\n      referralDate: ${referralDate},\n      expirationDate: ${expirationDate},\n      attendingPhysicianName: ${attendingPhysicianName},\n      attendingPhysicianEmail: ${attendingPhysicianEmail},\n      attendingPhysicianPhone: ${attendingPhysicianPhone},\n      referringDoctorName: ${referringDoctorName},\n      referringDoctorEmail: ${referringDoctorEmail},\n      referringDoctorPhone: ${referringDoctorPhone},\n      occupationRole: ${occupationRole},\n      occupationEmployer: ${occupationEmployer},\n      occupationEmployerContactPhone: ${occupationEmployerContactPhone},\n      occupationEmployerContactEmail: ${occupationEmployerContactEmail},\n      `);\n      this.setState({\n        userAlert: \"updating patient...\"\n      });\n      const requestBody = {\n        query: `\n          mutation {updatePatient(userId:\"${userId}\",patientId:\"${selectedPatientId}\", patientInput:{title:\"${title}\",name:\"${name}\",dob:\"${dob}\",age:${age},gender:\"${gender}\",addressNumber:${addressNumber},addressStreet:\"${addressStreet}\",addressTown:\"${addressTown}\",addressParish:\"${addressParish}\",addressPostOffice:\"${addressPostOffice}\",contactPhone:\"${contactPhone}\",contactEmail:\"${contactEmail}\",registrationDate:\"${registrationDate}\",referralDate:\"${referralDate}\",expirationDate:\"${expirationDate}\",referringDoctorName:\"${referringDoctorName}\",referringDoctorEmail:\"${referringDoctorEmail}\",referringDoctorPhone:\"${referringDoctorPhone}\",attendingPhysicianName:\"${attendingPhysicianName}\",attendingPhysicianEmail:\"${attendingPhysicianEmail}\",attendingPhysicianPhone:\"${attendingPhysicianPhone}\",occupationRole:\"${occupationRole}\",occupationEmployer:\"${occupationEmployer}\",occupationEmployerContactPhone:\"${occupationEmployerContactPhone}\",occupationEmployerContactEmail:\"${occupationEmployerContactPhone}\"})\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n        `\n      };\n      const token = this.context.token;\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n        const updatedPatientId = resData.data.updatePatient._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.updatePatient);\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.modalConfirmUpdateFieldHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id; // if( this.context.user.role !== 'admin') {\n      //   console.log(\"Not the creator or Admin! No edit permission!!\");\n      //   selectedPatientId = null;\n      // }\n\n      console.log(\"UpdatePatientFieldFormData:  \", event.target.formGridField.value);\n      this.setState({\n        updating: false\n      });\n      let field = null;\n      let query = event.target.formGridQuery.value;\n\n      if (event.target.formGridFieldSelect.value === \"select\") {\n        field = event.target.formGridField.value;\n      } else {\n        field = event.target.formGridFieldSelect.value;\n      }\n\n      const requestBody = {\n        query: `\n          mutation {updatePatientField(userId:\"${userId}\",patientId:\"${selectedPatientId}\",field:\"${field}\",query:\"${query}\")\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n        `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data.updatePatientField));\n        const updatedPatientId = resData.data.updatePatientField._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.updatePatientField);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientConsultantHandler = event => {\n      event.preventDefault();\n      let token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id;\n      const patientConsultantReference = this.context.selectedUser._id; // if(this.context.user.role !== 'admin') {\n      //   console.log(\"No edit permission!!\");\n      //   return;\n      // }\n\n      if (patientConsultantReference === undefined) {\n        console.log(`\n      select a Staff member before adding a Patient Consultant!!\n      `);\n        this.setState({\n          userAlert: \"select a Staff member before adding a Patient Consultant!!...\"\n        });\n        token = null;\n      } // console.log(\"UpdatePatientConsultantFormData:  \", event.target.formGridConsultantDate.value);\n\n\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let consultantDate = null;\n\n      if (event.target.formGridConsultantDate) {\n        consultantDate = event.target.formGridConsultantDate.value;\n      }\n\n      if (event.target.formGridConsultantDateTodayCheckbox.checked === true) {\n        consultantDate = new Date().toISOString().slice(0, 10);\n      }\n\n      console.log(`\n    adding patient consultant item...\n    userId: ${userId},\n    selectedPatientId: ${selectedPatientId},\n    consultantDate: ${consultantDate},\n    consultantReference: ${patientConsultantReference},\n    `);\n      const requestBody = {\n        query: `\n        mutation {updatePatientConsultant(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{consultantDate:\" ${consultantDate}\",consultantReference: \"${patientConsultantReference}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientConsultant._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.updatePatientConsultant);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientInsuranceHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id; // if(this.context.user.role !== 'admin') {\n      //   console.log(\"No edit permission!!\");\n      //   return;\n      // }\n\n      console.log(\"UpdatePatientInsuranceFormData:  \", event.target.formGridInsuranceCompany.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let insuranceCompany = event.target.formGridInsuranceCompany.value;\n      let insuranceNumber = event.target.formGridInsuranceNumber.value;\n      let insuranceExpiry = event.target.formGridInsuranceExpiry.value;\n      let insuranceDescription = event.target.formGridInsuranceDescription.value;\n      let insuranceSubscriberCompany = event.target.formGridInsuranceSubscriberCompany.value;\n      let insuranceSubscriberDescription = event.target.formGridInsuranceSubscriberDescription.value;\n      console.log(`\n    adding patient insurance item...\n    userId: ${userId},\n    selectedPatientId: ${selectedPatientId},\n    insuranceCompany: ${insuranceCompany},\n    insuranceNumber: ${insuranceNumber},\n    insuranceExpiry: ${insuranceExpiry},\n    insuranceDescription: ${insuranceDescription},\n    insuranceSubscriberCompany: ${insuranceSubscriberCompany},\n    insuranceSubscriberDescription: ${insuranceSubscriberDescription},\n    `);\n      this.setState({\n        userAlert: \"adding patient insurance item...\"\n      });\n      const requestBody = {\n        query: `\n        mutation {updatePatientInsurance(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{insuranceCompany:\"${insuranceCompany}\",insuranceNumber:\"${insuranceNumber}\",insuranceDescription:\"${insuranceDescription}\",insuranceExpiry:\"${insuranceExpiry}\",insuranceSubscriberCompany:\"${insuranceSubscriberCompany}\",insuranceSubscriberDescription:\"${insuranceSubscriberDescription}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientInsurance._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.updatePatientInsurance);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientNextOfKinHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id; // if(this.context.user.role !== 'admin') {\n      //   console.log(\"No edit permission!!\");\n      //   return;\n      // }\n\n      console.log(\"UpdatePatientNextOfKinFormData:  \", event.target.formGridNextOfKinName.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let nextOfKinName = event.target.formGridNextOfKinName.value;\n      let nextOfKinPhone = event.target.formGridNextOfKinPhone.value;\n      let nextOfKinEmail = event.target.formGridNextOfKinEmail.value;\n      console.log(`\n    adding patient nextOfKin item...\n    userId: ${userId},\n    selectedPatientId: ${selectedPatientId},\n    nextOfKinName: ${nextOfKinName},\n    nextOfKinPhone: ${nextOfKinPhone},\n    nextOfKinEmail: ${nextOfKinEmail},\n    `);\n      this.setState({\n        userAlert: \"adding patient nextOfKin item...\"\n      });\n      const requestBody = {\n        query: `\n        mutation {updatePatientNextOfKin(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{nextOfKinName:\"${nextOfKinName}\",nextOfKinEmail:\"${nextOfKinEmail}\",nextOfKinPhone:\"${nextOfKinPhone}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientNextOfKin._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.updatePatientNextOfKin);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientComplaintHandler = event => {\n      event.preventDefault();\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id; // if(this.context.user.role !== 'admin') {\n      //   console.log(\"No edit permission!!\");\n      //   return;\n      // }\n\n      console.log(\"UpdatePatientComplaintFormData:  \", event.target.formGridComplaintTitle.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let complaintTitle = event.target.formGridComplaintTitle.value;\n      let complaintDate = null;\n\n      if (event.target.formGridComplaintDate) {\n        complaintDate = event.target.formGridComplaintDate.value;\n      }\n\n      if (event.target.formGridComplaintDateTodayCheckbox.checked === true) {\n        complaintDate = new Date().toISOString().slice(0, 10);\n      }\n\n      let complaintDescription = event.target.formGridComplaintDescription.value;\n      let complaintAnamnesis = event.target.formGridComplaintAnamnesis.value; // let complaintAttachmentName = event.target.formGridComplaintAttachmentName.value;\n\n      let complaintAttachmentFormat = event.target.formGridComplaintAttachmentFormat.value; // let complaintAttachmentPath = event.target.formGridComplaintAttachmentPath.value;\n\n      let complaintAttachmentPath = \"uploads/patients/\" + selectedPatientId + \"/complaints\";\n      let file = AuthContext._currentValue.file;\n      console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n      const config = {\n        bucketName: this.context.creds.s3.bucketName,\n        dirName: complaintAttachmentPath,\n        region: this.context.creds.s3.region,\n        accessKeyId: this.context.creds.s3.accessKeyId,\n        secretAccessKey: this.context.creds.s3.secretAccessKey\n      };\n      const ReactS3Client = new S3(config);\n      const newFileName = file.name;\n      const complaintAttachmentName = newFileName;\n      ReactS3Client.uploadFile(file, newFileName).then(data => {\n        console.log(data);\n        this.setState({\n          userAlert: \"attachment upload success!\"\n        });\n      }).catch(err => {\n        console.error(err);\n        this.setState({\n          userAlert: \"upload error:  \" + err\n        });\n      });\n      console.log(`\n    adding patient complaint...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    complaintTitle: ${complaintTitle},\n    complaintDate: ${complaintDate},\n    complaintDescription: ${complaintDescription},\n    complaintAnamnesis: ${complaintAnamnesis},\n    complaintAttachmentName: ${complaintAttachmentName},\n    complaintAttachmentFormat: ${complaintAttachmentFormat},\n    complaintAttachmentPath: ${complaintAttachmentPath},\n    `);\n      this.setState({\n        userAlert: \"adding patient complaint...\"\n      });\n      const requestBody = {\n        query: `\n        mutation {updatePatientComplaint(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{complaintDate:\"${complaintDate}\",complaintTitle:\"${complaintTitle}\",complaintDescription:\"${complaintDescription}\",complaintAnamnesis:\"${complaintAnamnesis}\",complaintAttachmentName:\"${complaintAttachmentName}\",complaintAttachmentFormat:\"${complaintAttachmentFormat}\",complaintAttachmentPath:\"${complaintAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientComplaint._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.updatePatientComplaint);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        }); // this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientSurveyHandler = event => {\n      event.preventDefault();\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id; // if(this.context.user.role !== 'admin') {\n      //   console.log(\"No edit permission!!\");\n      //   return;\n      // }\n\n      console.log(\"UpdatePatientSurveyFormData:  \", event.target.formGridSurveyTitle.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let surveyDate = null;\n\n      if (event.target.formGridSurveyDate) {\n        surveyDate = event.target.formGridSurveyDate.value;\n      }\n\n      if (event.target.formGridSurveyDateTodayCheckbox.checked === true) {\n        surveyDate = new Date().toISOString().slice(0, 10);\n      }\n\n      let surveyTitle = event.target.formGridSurveyTitle.value;\n      let surveyDescription = event.target.formGridSurveyDescription.value; // let surveyAttachmentName = event.target.formGridSurveyAttachmentName.value;\n\n      let surveyAttachmentFormat = event.target.formGridSurveyAttachmentFormat.value;\n      let surveyAttachmentPath = \"uploads/patients/\" + selectedPatientId + \"/surveys\"; // let surveyAttachmentPath = event.target.formGridSurveyAttachmentPath.value;\n\n      let file = AuthContext._currentValue.file;\n      console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n      const config = {\n        bucketName: this.context.creds.s3.bucketName,\n        dirName: surveyAttachmentPath,\n        region: this.context.creds.s3.region,\n        accessKeyId: this.context.creds.s3.accessKeyId,\n        secretAccessKey: this.context.creds.s3.secretAccessKey\n      };\n      const ReactS3Client = new S3(config);\n      const newFileName = file.name;\n      const surveyAttachmentName = newFileName;\n      ReactS3Client.uploadFile(file, newFileName).then(data => {\n        console.log(data);\n        this.setState({\n          userAlert: \"attachment upload success!\"\n        });\n      }).catch(err => {\n        console.error(err);\n        this.setState({\n          userAlert: \"upload error:  \" + err\n        });\n      });\n      console.log(`\n    adding patient survey...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    surveyDate: ${surveyDate},\n    surveyTitle: ${surveyTitle},\n    surveyDescription: ${surveyDescription},\n    surveyAttachmentName: ${surveyAttachmentName},\n    surveyAttachmentFormat: ${surveyAttachmentFormat},\n    surveyAttachmentPath: ${surveyAttachmentPath},\n    `);\n      this.setState({\n        userAlert: \"adding patient survey...\"\n      });\n      const requestBody = {\n        query: `\n        mutation {updatePatientSurvey(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{surveyDate:\"${surveyDate}\",surveyTitle:\"${surveyTitle}\",surveyDescription:\"${surveyDescription}\",surveyAttachmentName:\"${surveyAttachmentName}\",surveyAttachmentFormat:\"${surveyAttachmentFormat}\",surveyAttachmentPath:\"${surveyAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientSurvey._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.updatePatientSurvey);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientSystematicInquiryHandler = event => {\n      event.preventDefault();\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id; // if(this.context.user.role !== 'admin') {\n      //   console.log(\"No edit permission!!\");\n      //   return;\n      // }\n\n      console.log(\"UpdatePatientSystematicInquiryFormData:  \", event.target.formGridSystematicInquiryTitle.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let systematicInquiryDate = null;\n\n      if (event.target.formGridSystematicInquiryDate) {\n        systematicInquiryDate = event.target.formGridSystematicInquiryDate.value;\n      }\n\n      if (event.target.formGridSystematicInquiryDateTodayCheckbox.checked === true) {\n        systematicInquiryDate = new Date().toISOString().slice(0, 10);\n      }\n\n      let systematicInquiryTitle = event.target.formGridSystematicInquiryTitle.value;\n      let systematicInquiryDescription = event.target.formGridSystematicInquiryDescription.value; // let systematicInquiryAttachmentName = event.target.formGridSystematicInquiryAttachmentName.value;\n\n      let systematicInquiryAttachmentFormat = event.target.formGridSystematicInquiryAttachmentFormat.value;\n      let systematicInquiryAttachmentPath = \"uploads/patients/\" + selectedPatientId + \"/systematicInquirys\"; // let systematicInquiryAttachmentPath = event.target.formGridSystematicInquiryAttachmentPath.value;\n\n      let file = AuthContext._currentValue.file;\n      console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n      const config = {\n        bucketName: this.context.creds.s3.bucketName,\n        dirName: systematicInquiryAttachmentPath,\n        region: this.context.creds.s3.region,\n        accessKeyId: this.context.creds.s3.accessKeyId,\n        secretAccessKey: this.context.creds.s3.secretAccessKey\n      };\n      const ReactS3Client = new S3(config);\n      const newFileName = file.name;\n      const systematicInquiryAttachmentName = newFileName;\n      ReactS3Client.uploadFile(file, newFileName).then(data => {\n        console.log(data);\n        this.setState({\n          userAlert: \"attachment upload success!\"\n        });\n      }).catch(err => {\n        console.error(err);\n        this.setState({\n          userAlert: \"upload error:  \" + err\n        });\n      });\n      console.log(`\n    adding patient systematicInquiry...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    systematicInquiryDate: ${systematicInquiryDate},\n    systematicInquiryTitle: ${systematicInquiryTitle},\n    systematicInquiryDescription: ${systematicInquiryDescription},\n    systematicInquiryAttachmentName: ${systematicInquiryAttachmentName},\n    systematicInquiryAttachmentFormat: ${systematicInquiryAttachmentFormat},\n    systematicInquiryAttachmentPath: ${systematicInquiryAttachmentPath},\n    `);\n      this.setState({\n        userAlert: \"adding patient systematicInquiry...\"\n      });\n      const requestBody = {\n        query: `\n        mutation {updatePatientSurvey(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{surveyDate:\"${surveyDate}\",surveyTitle:\"${surveyTitle}\",surveyDescription:\"${surveyDescription}\",surveyAttachmentName:\"${surveyAttachmentName}\",surveyAttachmentFormat:\"${surveyAttachmentFormat}\",surveyAttachmentPath:\"${surveyAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientSurvey._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.updatePatientSurvey);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientVitalsHandler = event => {\n      event.preventDefault();\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id; // if(this.context.user.role !== 'admin') {\n      //   console.log(\"No edit permission!!\");\n      //   return;\n      // }\n\n      console.log(\"UpdatePatientVitalsFormData:  \", event.target.formGridVitalsDate.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let vitalsDate = null;\n\n      if (event.target.formGridVitalsDate) {\n        vitalsDate = event.target.formGridVitalsDate.value;\n      }\n\n      if (event.target.formGridVitalsDateTodayCheckbox.checked === true) {\n        vitalsDate = new Date().toISOString().slice(0, 10);\n      }\n\n      let vitalsPr = event.target.formGridVitalsPr.value;\n      let vitalsBp1 = event.target.formGridVitalsBp1.value;\n      let vitalsBp2 = event.target.formGridVitalsBp2.value;\n      let vitalsRr = event.target.formGridVitalsRr.value;\n      let vitalsTemp = event.target.formGridVitalsTemp.value;\n      let vitalsPs02 = event.target.formGridVitalsPs02.value;\n      let vitalsHeight = event.target.formGridVitalsHeight.value;\n      let vitalsWeight = event.target.formGridVitalsWeight.value;\n      let vitalsBmi = event.target.formGridVitalsBmi.value;\n      let vitalsUrineType = event.target.formGridVitalsUrineType.value;\n      let vitalsUrineValue = event.target.formGridVitalsUrineValue.value;\n      console.log(`\n    adding patient vitals...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    `);\n      this.setState({\n        userAlert: \"adding patient vitals...\"\n      });\n      const requestBody = {\n        query: `\n        mutation {updatePatientVitals(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{vitalsDate:\"${vitalsDate}\",vitalsPr:${vitalsPr},vitalsBp1:${vitalsBp1},vitalsBp2:${vitalsBp2},vitalsRr:${vitalsRr},vitalsTemp:${vitalsTemp},vitalsPs02:${vitalsPs02},vitalsHeight:${vitalsHeight},vitalsWeight:${vitalsWeight},vitalsBmi:${vitalsBmi},vitalsUrineType:\"${vitalsUrineType}\",vitalsUrineValue:\"${vitalsUrineValue}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientVitals._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.updatePatientVitals);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientExaminationHandler = event => {\n      event.preventDefault();\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id; // if(this.context.user.role !== 'admin') {\n      //   console.log(\"No edit permission!!\");\n      //   return;\n      // }\n\n      console.log(\"UpdatePatientExaminationFormData:  \", event.target.formGridExaminationArea.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let examinationDate = null;\n\n      if (event.target.formGridExaminationDate) {\n        examinationDate = event.target.formGridExaminationDate.value;\n      }\n\n      if (event.target.formGridExaminationDateTodayCheckbox.checked === true) {\n        examinationDate = new Date().toISOString().slice(0, 10);\n      }\n\n      let examinationGeneral = event.target.formGridExaminationGeneral.value;\n      let examinationArea = undefined;\n\n      if (event.target.formGridExaminationAreaSelect === \"select\") {\n        examinationArea = event.target.formGridExaminationArea.value;\n      } else {\n        examinationArea = event.target.formGridExaminationAreaSelect.value;\n      }\n\n      let examinationType = event.target.formGridExaminationType.value;\n      let examinationMeasure = event.target.formGridExaminationMeasure.value;\n      let examinationValue = event.target.formGridExaminationValue.value;\n      let examinationDescription = event.target.formGridExaminationDescription.value;\n      let examinationFollowUp = event.target.formGridExaminationFollowUp.value; // let examinationAttachmentName = event.target.formGridExaminationAttachmentName.value;\n\n      let examinationAttachmentFormat = event.target.formGridExaminationAttachmentFormat.value;\n      let examinationAttachmentPath = \"uploads/patients/\" + selectedPatientId + \"/examinations\"; // let examinationAttachmentPath = event.target.formGridExaminationAttachmentPath.value;\n\n      let file = AuthContext._currentValue.file;\n      console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n      const config = {\n        bucketName: this.context.creds.s3.bucketName,\n        dirName: examinationAttachmentPath,\n        region: this.context.creds.s3.region,\n        accessKeyId: this.context.creds.s3.accessKeyId,\n        secretAccessKey: this.context.creds.s3.secretAccessKey\n      };\n      const ReactS3Client = new S3(config);\n      const newFileName = file.name;\n      const examinationAttachmentName = newFileName;\n      ReactS3Client.uploadFile(file, newFileName).then(data => {\n        console.log(data);\n        this.setState({\n          userAlert: \"attachment upload success!\"\n        });\n      }).catch(err => {\n        console.error(err);\n        this.setState({\n          userAlert: \"upload error:  \" + err\n        });\n      });\n      console.log(`\n    adding patient examination...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    examinationDate: ${examinationDate},\n    examinationGeneral: ${examinationGeneral},\n    examinationArea: ${examinationArea},\n    examinationType: ${examinationType},\n    examinationMeasure: ${examinationMeasure},\n    examinationValue: ${examinationValue},\n    examinationDescription: ${examinationDescription},\n    examinationFollowUp: ${examinationFollowUp},\n    examinationAttachmentName: ${examinationAttachmentName},\n    examinationAttachmentFormat: ${examinationAttachmentFormat},\n    examinationAttachmentPath: ${examinationAttachmentPath},\n    `);\n      this.setState({\n        userAlert: \"adding patient examination...\"\n      });\n      const requestBody = {\n        query: `\n        mutation {updatePatientExamination(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{examinationDate:\"${examinationDate}\",examinationGeneral:\"${examinationGeneral}\",examinationArea:\"${examinationArea}\",examinationType:\"${examinationType}\",examinationMeasure:\"${examinationMeasure}\",examinationValue:\"${examinationValue}\",examinationDescription:\"${examinationDescription}\",examinationFollowUp:${examinationFollowUp},examinationAttachmentName:\"${examinationAttachmentName}\",examinationAttachmentFormat:\"${examinationAttachmentFormat}\",examinationAttachmentPath:\"${examinationAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientExamination._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.updatePatientExamination);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientHistoryHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id; // if(this.context.user.role !== 'admin') {\n      //   console.log(\"No edit permission!!\");\n      //   return;\n      // }\n\n      console.log(\"UpdatePatientHistoryFormData:  \", event.target.formGridHistoryTitle.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let historyType = event.target.formGridHistoryType.value; // let historyDate = null;\n      // if (event.target.formGridHistoryDate) {\n      //   historyDate = event.target.formGridHistoryDate.value;\n      // }\n\n      let historyDate = event.target.formGridHistoryDate.value;\n\n      if (event.target.formGridHistoryDateTodayCheckbox.checked === true) {\n        historyDate = new Date().toISOString().slice(0, 10);\n      }\n\n      let historyTitle = event.target.formGridHistoryTitle.value;\n      let historyDescription = event.target.formGridHistoryDescription.value; // let historyAttachmentName = event.target.formGridHistoryAttachmentName.value;\n\n      let historyAttachmentFormat = event.target.formGridHistoryAttachmentFormat.value;\n      let historyAttachmentPath = \"uploads/patients/\" + selectedPatientId + \"/history\"; // let historyAttachmentPath = event.target.formGridHistoryAttachmentPath.value;\n\n      let file = AuthContext._currentValue.file;\n      console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n      const config = {\n        bucketName: this.context.creds.s3.bucketName,\n        dirName: historyAttachmentPath,\n        region: this.context.creds.s3.region,\n        accessKeyId: this.context.creds.s3.accessKeyId,\n        secretAccessKey: this.context.creds.s3.secretAccessKey\n      };\n      const ReactS3Client = new S3(config);\n      const newFileName = file.name;\n      const historyAttachmentName = newFileName;\n      ReactS3Client.uploadFile(file, newFileName).then(data => {\n        console.log(data);\n        this.setState({\n          userAlert: \"attachment upload success!\"\n        });\n      }).catch(err => {\n        console.error(err);\n        this.setState({\n          userAlert: \"upload error:  \" + err\n        });\n      });\n      console.log(`\n    adding patient history...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    historyType: ${historyType},\n    historyDate: ${historyDate},\n    historyTitle: ${historyTitle},\n    historyDescription: ${historyDescription},\n    historyAttachmentName: ${historyAttachmentName},\n    historyAttachmentFormat: ${historyAttachmentFormat},\n    historyAttachmentPath: ${historyAttachmentPath},\n    `);\n      this.setState({\n        userAlert: \"adding patient history...\"\n      });\n      const requestBody = {\n        query: `\n        mutation {updatePatientHistory(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{historyTitle:\"${historyTitle}\",historyType:\"${historyType}\",historyDate:\"${historyDate}\",historyDescription:\"${historyDescription}\",historyAttachmentName:\"${historyAttachmentName}\",historyAttachmentFormat:\"${historyAttachmentFormat}\",historyAttachmentPath:\"${historyAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientHistory._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.updatePatientHistory);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientAllergiesHandler = event => {\n      event.preventDefault();\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id; // if(this.context.user.role !== 'admin') {\n      //   console.log(\"No edit permission!!\");\n      //   return;\n      // }\n\n      console.log(\"UpdatePatientAllergiesFormData:  \", event.target.formGridAllergiesTitle.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let allergiesTitle = event.target.formGridAllergiesTitle.value;\n      let allergiesType = undefined;\n\n      if (event.target.formGridAllergiesTypeSelect === \"select\") {\n        allergiesType = event.target.formGridAllergiesType.value;\n      } else {\n        allergiesType = event.target.formGridAllergiesTypeSelect.value;\n      }\n\n      let allergiesDescription = event.target.formGridAllergiesDescription.value; // let allergiesAttachmentName = event.target.formGridAllergiesAttachmentName.value;\n\n      let allergiesAttachmentFormat = event.target.formGridAllergiesAttachmentFormat.value;\n      let allergiesAttachmentPath = \"uploads/patients/\" + selectedPatientId + \"/allergies\"; // let allergiesAttachmentPath = event.target.formGridAllergiesAttachmentPath.value;\n\n      let file = AuthContext._currentValue.file;\n      console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n      const config = {\n        bucketName: this.context.creds.s3.bucketName,\n        dirName: allergiesAttachmentPath,\n        region: this.context.creds.s3.region,\n        accessKeyId: this.context.creds.s3.accessKeyId,\n        secretAccessKey: this.context.creds.s3.secretAccessKey\n      };\n      const ReactS3Client = new S3(config);\n      const newFileName = file.name;\n      const allergiesAttachmentName = newFileName;\n      ReactS3Client.uploadFile(file, newFileName).then(data => {\n        console.log(data);\n        this.setState({\n          userAlert: \"attachment upload success!\"\n        });\n      }).catch(err => {\n        console.error(err);\n        this.setState({\n          userAlert: \"upload error:  \" + err\n        });\n      });\n      console.log(`\n    adding patient allergies...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    allergiesTitle: ${allergiesTitle},\n    allergiesType: ${allergiesType},\n    allergiesDescription: ${allergiesDescription},\n    allergiesAttachmentName: ${allergiesAttachmentName},\n    allergiesAttachmentFormat: ${allergiesAttachmentFormat},\n    allergiesAttachmentPath: ${allergiesAttachmentPath},\n    `);\n      this.setState({\n        userAlert: \"adding patient allergies...\"\n      });\n      const requestBody = {\n        query: `\n        mutation {updatePatientAllergies(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{allergiesTitle:\"${allergiesTitle}\",allergiesType:\"${allergiesType}\", allergiesDescription:\"${allergiesDescription}\",allergiesAttachmentName:\"${allergiesAttachmentName}\",allergiesAttachmentFormat:\"${allergiesAttachmentFormat}\",allergiesAttachmentPath:\"${allergiesAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientAllergies._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.updatePatientAllergies);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientMedicationHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id; // if(this.context.user.role !== 'admin') {\n      //   console.log(\"No edit permission!!\");\n      //   return;\n      // }\n\n      console.log(\"UpdatePatientMedicationFormData:  \", event.target.formGridMedicationTitle.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let medicationTitle = event.target.formGridMedicationTitle.value;\n      let medicationType = event.target.formGridMedicationType.value;\n      let medicationDescription = event.target.formGridMedicationDescription.value; // let medicationAttachmentName = event.target.formGridMedicationAttachmentName.value;\n\n      let medicationAttachmentFormat = event.target.formGridMedicationAttachmentFormat.value;\n      let medicationAttachmentPath = \"uploads/patients/\" + selectedPatientId + \"/medication\"; // let medicationAttachmentPath = event.target.formGridMedicationAttachmentPath.value;\n\n      let file = AuthContext._currentValue.file;\n      console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n      const config = {\n        bucketName: this.context.creds.s3.bucketName,\n        dirName: medicationAttachmentPath,\n        region: this.context.creds.s3.region,\n        accessKeyId: this.context.creds.s3.accessKeyId,\n        secretAccessKey: this.context.creds.s3.secretAccessKey\n      };\n      const ReactS3Client = new S3(config);\n      const newFileName = file.name;\n      const medicationAttachmentName = newFileName;\n      ReactS3Client.uploadFile(file, newFileName).then(data => {\n        console.log(data);\n        this.setState({\n          userAlert: \"attachment upload success!\"\n        });\n      }).catch(err => {\n        console.error(err);\n        this.setState({\n          userAlert: \"upload error:  \" + err\n        });\n      });\n      console.log(`\n    adding patient medication...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    medicationTitle: ${medicationTitle},\n    medicationType: ${medicationType},\n    medicationDescription: ${medicationDescription},\n    medicationAttachmentName: ${medicationAttachmentName},\n    medicationAttachmentFormat: ${medicationAttachmentFormat},\n    medicationAttachmentPath: ${medicationAttachmentPath},\n    `);\n      this.setState({\n        userAlert: \"adding patient medication...\"\n      });\n      const requestBody = {\n        query: `\n      mutation {updatePatientMedication(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{medicationTitle:\"${medicationTitle}\",medicationType:\"${medicationType}\" medicationDescription:\"${medicationDescription}\",medicationAttachmentName:\"${medicationAttachmentName}\",medicationAttachmentFormat:\"${medicationAttachmentFormat}\",medicationAttachmentPath:\"${medicationAttachmentPath}\"})\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientMedication._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.updatePatientMedication);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientInvestigationHandler = event => {\n      event.preventDefault();\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id; // if(this.context.user.role !== 'admin') {\n      //   console.log(\"No edit permission!!\");\n      //   return;\n      // }\n\n      console.log(\"UpdatePatientInvestigationFormData:  \", event.target.formGridInvestigationTitle.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let investigationDate = null;\n\n      if (event.target.formGridInvestigationDate) {\n        investigationDate = event.target.formGridInvestigationDate.value;\n      }\n\n      if (event.target.formGridInvestigationDateTodayCheckbox.checked === true) {\n        investigationDate = new Date().toISOString().slice(0, 10);\n      }\n\n      let investigationTitle = event.target.formGridInvestigationTitle.value;\n      let investigationType = undefined;\n\n      if (event.target.formGridInvestigationTypeSelect === \"select\") {\n        investigationType = event.target.formGridInvestigationType.value;\n      } else {\n        investigationType = event.target.formGridInvestigationTypeSelect.value;\n      }\n\n      let investigationDescription = event.target.formGridInvestigationDescription.value; // let investigationAttachmentName = event.target.formGridInvestigationAttachmentName.value;\n\n      let investigationAttachmentFormat = event.target.formGridInvestigationAttachmentFormat.value;\n      let investigationAttachmentPath = \"uploads/patients/\" + selectedPatientId + \"/investigation\"; // let investigationAttachmentPath = event.target.formGridInvestigationAttachmentPath.value;\n\n      let file = AuthContext._currentValue.file;\n      console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n      const config = {\n        bucketName: this.context.creds.s3.bucketName,\n        dirName: investigationAttachmentPath,\n        region: this.context.creds.s3.region,\n        accessKeyId: this.context.creds.s3.accessKeyId,\n        secretAccessKey: this.context.creds.s3.secretAccessKey\n      };\n      const ReactS3Client = new S3(config);\n      const newFileName = file.name;\n      const investigationAttachmentName = newFileName;\n      ReactS3Client.uploadFile(file, newFileName).then(data => {\n        console.log(data);\n        this.setState({\n          userAlert: \"attachment upload success!\"\n        });\n      }).catch(err => {\n        console.error(err);\n        this.setState({\n          userAlert: \"upload error:  \" + err\n        });\n      });\n      console.log(`\n    adding patient investigation...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    investigationDate: ${investigationDate},\n    investigationTitle: ${investigationTitle},\n    investigationType: ${investigationType},\n    investigationDescription: ${investigationDescription},\n    investigationAttachmentName: ${investigationAttachmentName},\n    investigationAttachmentFormat: ${investigationAttachmentFormat},\n    investigationAttachmentPath: ${investigationAttachmentPath},\n    `);\n      this.setState({\n        userAlert: \"adding patient investigation...\"\n      });\n      const requestBody = {\n        query: `\n        mutation {updatePatientInvestigation(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{investigationDate:\"${investigationDate}\",investigationTitle:\"${investigationTitle}\",investigationType:\"${investigationType}\",investigationDescription:\"${investigationDescription}\",investigationAttachmentName:\"${investigationAttachmentName}\",investigationAttachmentFormat:\"${investigationAttachmentFormat}\",investigationAttachmentPath:\"${investigationAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientInvestigation._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.updatePatientInvestigation);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientDiagnosisHandler = event => {\n      event.preventDefault();\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id; // if(this.context.user.role !== 'admin') {\n      //   console.log(\"No edit permission!!\");\n      //   return;\n      // }\n\n      console.log(\"UpdatePatientDiagnosisFormData:  \", event.target.formGridDiagnosisTitle.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let diagnosisDate = null;\n\n      if (event.target.formGridDiagnosisDate) {\n        diagnosisDate = event.target.formGridDiagnosisDate.value;\n      }\n\n      if (event.target.formGridDiagnosisDateTodayCheckbox.checked === true) {\n        diagnosisDate = new Date().toISOString().slice(0, 10);\n      }\n\n      let diagnosisTitle = event.target.formGridDiagnosisTitle.value;\n      let diagnosisType = event.target.formGridDiagnosisType.value;\n      let diagnosisDescription = event.target.formGridDiagnosisDescription.value; // let diagnosisAttachmentName = event.target.formGridDiagnosisAttachmentName.value;\n\n      let diagnosisAttachmentFormat = event.target.formGridDiagnosisAttachmentFormat.value;\n      let diagnosisAttachmentPath = \"uploads/patients/\" + selectedPatientId + \"/diagnosis\"; // let diagnosisAttachmentPath = event.target.formGridDiagnosisAttachmentPath.value;\n\n      let file = AuthContext._currentValue.file;\n      console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n      const config = {\n        bucketName: this.context.creds.s3.bucketName,\n        dirName: diagnosisAttachmentPath,\n        region: this.context.creds.s3.region,\n        accessKeyId: this.context.creds.s3.accessKeyId,\n        secretAccessKey: this.context.creds.s3.secretAccessKey\n      };\n      const ReactS3Client = new S3(config);\n      const newFileName = file.name;\n      const diagnosisAttachmentName = newFileName;\n      ReactS3Client.uploadFile(file, newFileName).then(data => {\n        console.log(data);\n        this.setState({\n          userAlert: \"attachment upload success!\"\n        });\n      }).catch(err => {\n        console.error(err);\n        this.setState({\n          userAlert: \"upload error:  \" + err\n        });\n      });\n      console.log(`\n    adding patient diagnosis...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    diagnosisDate: ${diagnosisDate},\n    diagnosisTitle: ${diagnosisTitle},\n    diagnosisType: ${diagnosisType},\n    diagnosisDescription: ${diagnosisDescription},\n    diagnosisAttachmentName: ${diagnosisAttachmentName},\n    diagnosisAttachmentFormat: ${diagnosisAttachmentFormat},\n    diagnosisAttachmentPath: ${diagnosisAttachmentPath},\n    `);\n      this.setState({\n        userAlert: \"adding patient diagnosis...\"\n      });\n      const requestBody = {\n        query: `\n        mutation {updatePatientDiagnosis(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{diagnosisDate:\"${diagnosisDate}\",diagnosisTitle:\"${diagnosisTitle}\",diagnosisType:\"${diagnosisType}\",diagnosisDescription:\"${diagnosisDescription}\",diagnosisAttachmentName:\"${diagnosisAttachmentName}\",diagnosisAttachmentFormat:\"${diagnosisAttachmentFormat}\",diagnosisAttachmentPath:\"${diagnosisAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientDiagnosis._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.updatePatientDiagnosis);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientTreatmentHandler = event => {\n      event.preventDefault();\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id; // if(this.context.user.role !== 'admin') {\n      //   console.log(\"No edit permission!!\");\n      //   return;\n      // }\n\n      console.log(\"UpdatePatientTreatmentFormData:  \", event.target.formGridTreatmentTitle.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let treatmentDate = null;\n\n      if (event.target.formGridTreatmentDate) {\n        treatmentDate = event.target.formGridTreatmentDate.value;\n      }\n\n      if (event.target.formGridTreatmentDateTodayCheckbox.checked === true) {\n        treatmentDate = new Date().toISOString().slice(0, 10);\n      }\n\n      let treatmentTitle = event.target.formGridTreatmentTitle.value;\n      let treatmentDescription = event.target.formGridTreatmentDescription.value;\n      let treatmentDose = event.target.formGridTreatmentDose.value;\n      let treatmentFrequency = event.target.formGridTreatmentFrequency.value;\n      let treatmentType = undefined;\n\n      if (event.target.formGridInvestigationTypeSelect === \"select\") {\n        treatmentType = event.target.formGridTreatmentType.value;\n      } else {\n        treatmentType = event.target.formGridTreatmentTypeSelect.value;\n      } // let treatmentAttachmentName = event.target.formGridTreatmentAttachmentName.value;\n\n\n      let treatmentAttachmentFormat = event.target.formGridTreatmentAttachmentFormat.value;\n      let treatmentAttachmentPath = \"uploads/patients/\" + selectedPatientId + \"/treatment\"; // let treatmentAttachmentPath = event.target.formGridTreatmentAttachmentPath.value;\n\n      let file = AuthContext._currentValue.file;\n      console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n      const config = {\n        bucketName: this.context.creds.s3.bucketName,\n        dirName: treatmentAttachmentPath,\n        region: this.context.creds.s3.region,\n        accessKeyId: this.context.creds.s3.accessKeyId,\n        secretAccessKey: this.context.creds.s3.secretAccessKey\n      };\n      const ReactS3Client = new S3(config);\n      const newFileName = file.name;\n      const treatmentAttachmentName = newFileName;\n      ReactS3Client.uploadFile(file, newFileName).then(data => {\n        console.log(data);\n        this.setState({\n          userAlert: \"attachment upload success!\"\n        });\n      }).catch(err => {\n        console.error(err);\n        this.setState({\n          userAlert: \"upload error:  \" + err\n        });\n      });\n      console.log(`\n    adding patient treatment...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    treatmentDate: ${treatmentDate},\n    treatmentTitle: ${treatmentTitle},\n    treatmentDescription: ${treatmentDescription},\n    treatmentDose: ${treatmentDose},\n    treatmentFrequency: ${treatmentFrequency},\n    treatmentType: ${treatmentType},\n    treatmentAttachmentName: ${treatmentAttachmentName},\n    treatmentAttachmentFormat: ${treatmentAttachmentFormat},\n    treatmentAttachmentPath: ${treatmentAttachmentPath},\n    `);\n      this.setState({\n        userAlert: \"adding patient treatment...\"\n      });\n      const requestBody = {\n        query: `\n        mutation {updatePatientTreatment(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{treatmentDate:\"${treatmentDate}\",treatmentTitle:\"${treatmentTitle}\",treatmentType:\"${treatmentType}\",treatmentDescription:\"${treatmentDescription}\",treatmentDose:\"${treatmentDose}\",treatmentFrequency:\"${treatmentFrequency}\",treatmentAttachmentName:\"${treatmentAttachmentName}\",treatmentAttachmentFormat:\"${treatmentAttachmentFormat}\",treatmentAttachmentPath:\"${treatmentAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientTreatment._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.updatePatientTreatment);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientBillingHandler = event => {\n      event.preventDefault();\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id; // if(this.context.user.role !== 'admin') {\n      //   console.log(\"No edit permission!!\");\n      //   return;\n      // }\n\n      console.log(\"UpdatePatientBillingFormData:  \", event.target.formGridBillingTitle.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let billingDate = null;\n\n      if (event.target.formGridBillingDate) {\n        billingDate = event.target.formGridBillingDate.value;\n      }\n\n      if (event.target.formGridBillingDateTodayCheckbox.checked === true) {\n        billingDate = new Date().toISOString().slice(0, 10);\n      }\n\n      let billingTitle = event.target.formGridBillingTitle.value;\n      let billingType = event.target.formGridBillingType.value;\n      let billingDescription = event.target.formGridBillingDescription.value;\n      let billingAmount = event.target.formGridBillingAmount.value;\n      let billingPaid = event.target.formGridBillingPaid.value;\n      let billingNotes = event.target.formGridBillingNotes.value; // let billingAttachmentName = event.target.formGridBillingAttachmentName.value;\n\n      let billingAttachmentFormat = event.target.formGridBillingAttachmentFormat.value;\n      let billingAttachmentPath = \"uploads/patients/\" + selectedPatientId + \"/billing\"; // let billingAttachmentPath = event.target.formGridBillingAttachmentPath.value;\n\n      let file = AuthContext._currentValue.file;\n      console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n      const config = {\n        bucketName: this.context.creds.s3.bucketName,\n        dirName: billingAttachmentPath,\n        region: this.context.creds.s3.region,\n        accessKeyId: this.context.creds.s3.accessKeyId,\n        secretAccessKey: this.context.creds.s3.secretAccessKey\n      };\n      const ReactS3Client = new S3(config);\n      const newFileName = file.name;\n      const billingAttachmentName = newFileName;\n      ReactS3Client.uploadFile(file, newFileName).then(data => {\n        console.log(data);\n        this.setState({\n          userAlert: \"attachment upload success!\"\n        });\n      }).catch(err => {\n        console.error(err);\n        this.setState({\n          userAlert: \"upload error:  \" + err\n        });\n      });\n      console.log(`\n    adding patient billing...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    billingDate: ${billingDate},\n    billingTitle: ${billingTitle},\n    billingType: ${billingType},\n    billingDescription: ${billingDescription},\n    billingAmount: ${billingAmount},\n    billingPaid: ${billingPaid},\n    billingNotes: ${billingNotes},\n    billingAttachmentName: ${billingAttachmentName},\n    billingAttachmentFormat: ${billingAttachmentFormat},\n    billingAttachmentPath: ${billingAttachmentPath},\n    `);\n      this.setState({\n        userAlert: \"adding patient billing...\"\n      });\n      const requestBody = {\n        query: `\n        mutation {updatePatientBilling(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{billingDate:\"${billingDate}\",billingTitle:\"${billingTitle}\",billingType:\"${billingType}\",billingDescription:\"${billingDescription}\",billingAmount:${billingAmount},billingPaid:${billingPaid},billingNotes:\"${billingNotes}\",billingAttachmentName:\"${billingAttachmentName}\",billingAttachmentFormat:\"${billingAttachmentFormat}\",billingAttachmentPath:\"${billingAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientBilling._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.updatePatientBilling);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientAttachmentHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id; // if(this.context.user.role !== 'admin') {\n      //   console.log(\"No edit permission!!\");\n      //   return;\n      // }\n\n      console.log(`\n        UpdatePatientAttachmentFormData:\n      `);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      }); // let attachmentName = event.target.formGridPatientAttachmentName.value;\n\n      let attachmentFormat = event.target.formGridPatientAttachmentFormat.value;\n      let attachmentPath = \"uploads/patients/\" + selectedPatientId + \"/attachments\"; // let attachmentPath = event.target.formGridPatientAttachmentPath.value;\n\n      let file = AuthContext._currentValue.file;\n      console.log(`\n      uploading to s3...\n      file.name: ${file.name},\n      AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n      `);\n      const config = {\n        bucketName: this.context.creds.s3.bucketName,\n        dirName: attachmentPath,\n        region: this.context.creds.s3.region,\n        accessKeyId: this.context.creds.s3.accessKeyId,\n        secretAccessKey: this.context.creds.s3.secretAccessKey\n      };\n      const ReactS3Client = new S3(config);\n      const newFileName = file.name;\n      const attachmentName = newFileName;\n      ReactS3Client.uploadFile(file, newFileName).then(data => {\n        console.log(data);\n        this.setState({\n          userAlert: \"attachment upload success!\"\n        });\n      }).catch(err => {\n        console.error(err);\n        this.setState({\n          userAlert: \"upload error:  \" + err\n        });\n      });\n\n      if (attachmentName.trim().length === 0 || attachmentFormat.trim().length === 0 || attachmentPath.trim().length === 0) {\n        console.log(\"blank fields detected!!!...Please try again...\");\n        this.setState({\n          userAlert: \"blank fields detected!!!...Please try again...\"\n        });\n        return;\n      }\n\n      this.setState({\n        userAlert: \"adding patient attachment\"\n      });\n      const requestBody = {\n        query: `\n                    mutation {updatePatientAttachment(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{attachmentName:\"${attachmentName}\",attachmentFormat:\"${attachmentFormat}\",attachmentPath:\"${attachmentPath}\"})\n                    {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n            `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientAttachment._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.updatePatientAttachment);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        }); // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientAttachment})\n\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientNoteHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id; // if(this.context.user.role !== 'admin') {\n      //   console.log(\"No edit permission!!\");\n      //   return;\n      // }\n\n      console.log(`\n      UpdatePatientNoteFormData:\n      ${event.target.formGridNote.value}\n    `);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let note = event.target.formGridNote.value;\n\n      if (note.trim().length === 0) {\n        console.log(\"Can't Submit a blank form!!!...Please try again...\");\n        this.setState({\n          userAlert: \"Can't Submit a blank form!!!...Please try again...\"\n        });\n        return;\n      }\n\n      this.setState({\n        userAlert: \"adding patient note\"\n      });\n      const requestBody = {\n        query: `\n              mutation {updatePatientNotes(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{notes:\"${note}\"})\n              {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n            `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientNotes._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.updatePatientNotes);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        }); // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientNotes})\n\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientTagHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id; // if(this.context.user.role !== 'admin') {\n      //   console.log(\"No edit permission!!\");\n      //   return;\n      // }\n\n      console.log(`\n      UpdatePatientTagFormData:\n      ${event.target.formGridTag.value}\n    `);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let tag = event.target.formGridTag.value;\n\n      if (tag.trim().length === 0) {\n        console.log(\"Can't Submit a blank form!!!...Please try again...\");\n        this.setState({\n          userAlert: \"Can't Submit a blank form!!!...Please try again...\"\n        });\n        return;\n      }\n\n      const requestBody = {\n        query: `\n                    mutation {updatePatientTags(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{tag:\"${tag}\"})\n                    {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n            `\n      };\n      this.setState({\n        userAlert: \"adding patient tag\"\n      });\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientTags._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.updatePatientTags);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.modalConfirmSearchHandler = event => {\n      console.log(\"SearchPatientForm:  \");\n      let userId = this.context.userId;\n      console.log(\"SearchPatientFormData:  \", event.target.formBasicField.value);\n      this.setState({\n        searching: false\n      });\n      let field = null;\n      let query = event.target.formBasicQuery.value;\n\n      if (event.target.formBasicFieldSelect.value === \"select\") {\n        field = event.target.formBasicField.value;\n      } else {\n        field = event.target.formBasicFieldSelect.value;\n      }\n\n      this.setState({\n        patientSearchField: field,\n        patientSearchQuery: query\n      });\n\n      if (field.trim().length === 0 || query.trim().length === 0) {\n        console.log(\"blank fields detected!!!...Please try again...\");\n        return;\n      }\n\n      this.setState({\n        userAlert: \"Searching for Patient:  \"\n      });\n      const requestBody = {\n        query: `\n        query {\n          getPatientField(userId: \"${userId}\", field: \"${field}\", query: \"${query}\" )\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `\n      };\n      const token = this.context.token;\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n        const responseAlert = JSON.stringify(resData.data).slice(2, 15);\n        this.setState({\n          userAlert: responseAlert\n        });\n        const searchPatients = resData.data.getPatientField;\n        this.setState({\n          searchPatients: searchPatients\n        });\n        console.log(\"state.searchPatients:  \", this.state.searchPatients); // this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.modalConfirmSearchIdHandler = event => {\n      console.log(\"SearchPatientIdFormData\");\n      let userId = this.context.userId;\n      this.setState({\n        searching: false\n      });\n      const patientId = event.target.formBasicId.value;\n      const requestBody = {\n        query: `\n      query {getPatientId(userId:\"${userId}\",patientId:\"${patientId}\")\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{_id,title,time,location},consultant{date,reference{_id,name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `\n      };\n      const token = this.context.token;\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        const searchPatients = resData.data.getPatientId;\n        this.setState({\n          searchPatients: [searchPatients]\n        });\n        console.log(\"state.searchPatients:  \", this.state.searchPatients); // this.fetchUsers();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.modalConfirmSearchNameHandler = event => {\n      console.log(\"SearchPatientNameFormData:\", event.target.formBasicName.value); // let userId = this.context.userId;\n\n      this.setState({\n        searching: false\n      });\n      let patients = this.state.patients;\n      const regex = new RegExp(event.target.formBasicName.value, \"i\");\n      console.log(`\n    regex: ${regex},\n    `);\n      let result = patients.filter(patient => patient.name.match(regex));\n      console.log(`\n      result: ${JSON.stringify(result)}\n      `);\n      this.setState({\n        searchPatients: result\n      });\n    };\n\n    this.getPatientVisit = event => {\n      const selectedPatient = this.state.selectedPatient;\n      event.preventDefault();\n      console.log(`\n        getUserVisit function:\n        selectedPatient.consultant: ${JSON.stringify(selectedPatient.consultant)},\n        selectedPatient.complaints: ${JSON.stringify(selectedPatient.complaints)},\n        visitDate: ${new Date(event.target.formBasicVisitDate.value)},\n      `);\n      let visitDate = new Date(event.target.formBasicVisitDate.value).toISOString().substring(0, 10);\n      let visitSurveys = selectedPatient.surveys.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n      let visitConsultants = selectedPatient.consultant.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n      let visitComplaints = selectedPatient.complaints.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate); // let visitSurveys = selectedPatient.surveys.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString() === visitDate);\n\n      let visitVitals = selectedPatient.vitals.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n      let visitExaminations = selectedPatient.examination.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n      let visitHistory = selectedPatient.history.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n      let visitInvestigations = selectedPatient.investigation.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n      let visitDiagnosis = selectedPatient.diagnosis.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n      let visitTreatments = selectedPatient.treatment.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n      let visitBilling = selectedPatient.billing.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n      const visit = {\n        date: visitDate,\n        patientName: this.context.selectedPatient.name,\n        consultant: visitConsultants,\n        complaint: visitComplaints,\n        examination: visitExaminations,\n        survey: visitSurveys,\n        vitals: visitVitals,\n        history: visitHistory,\n        investigation: visitInvestigations,\n        diagnosis: visitDiagnosis,\n        treatment: visitTreatments,\n        billing: visitBilling\n      };\n      console.log(`\n        visit: ${JSON.stringify(visit)},\n        `); // this.context.visit = visit;\n\n      this.setState({\n        visit: visit\n      });\n    };\n\n    this.getVisitList = () => {\n      const selectedPatient = this.state.selectedPatient;\n      const patientName = this.state.selectedPatient.name;\n      let selectedPatientAppointmentDateArray = [];\n      let selectedPatientAppointmentVisitArray = [];\n      let selectedPatientAppointments = this.state.selectedPatient.appointments.map(appointments => {\n        console.log(\"appointments.date\", appointments.date);\n        selectedPatientAppointmentDateArray.push(new Date(appointments.date.substr(0, 10) * 1000).toISOString().substring(0, 10));\n      });\n      console.log(`\n        getVisitList function:\n        selectedPatientAppointments: ${selectedPatientAppointmentDateArray}\n      `);\n      selectedPatientAppointmentDateArray.map(appointmentDate => {\n        console.log(`\n          retriveing visit for ${appointmentDate} ...selectedPatientAppointmentVisitArray: ${JSON.stringify(selectedPatientAppointmentVisitArray)},\n          `);\n        thisGetVisit(appointmentDate, patientName);\n      });\n\n      function thisGetVisit(argsDate, argsPatientName) {\n        console.log(\"thisGetVisit function...\");\n        let visitDate = argsDate;\n        let visitSurveys = selectedPatient.surveys.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n        let visitConsultants = selectedPatient.consultant.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n        let visitComplaints = selectedPatient.complaints.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate); // let visitSurveys = selectedPatient.surveys.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString() === visitDate);\n\n        let visitVitals = selectedPatient.vitals.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n        let visitExaminations = selectedPatient.examination.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n        let visitHistory = selectedPatient.history.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n        let visitInvestigations = selectedPatient.investigation.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n        let visitDiagnosis = selectedPatient.diagnosis.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n        let visitTreatments = selectedPatient.treatment.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n        let visitBilling = selectedPatient.billing.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n        const visit = {\n          date: visitDate,\n          patientName: argsPatientName,\n          consultant: visitConsultants,\n          complaint: visitComplaints,\n          examination: visitExaminations,\n          survey: visitSurveys,\n          vitals: visitVitals,\n          history: visitHistory,\n          investigation: visitInvestigations,\n          diagnosis: visitDiagnosis,\n          treatment: visitTreatments,\n          billing: visitBilling\n        };\n        selectedPatientAppointmentVisitArray.push(visit);\n      } // console.log(`\n      //     ...final selectedPatientAppointmentVisitArray: ${JSON.stringify(selectedPatientAppointmentVisitArray)}\n      //   `);\n\n\n      this.setState({\n        visitList: selectedPatientAppointmentVisitArray\n      });\n    };\n\n    this.getVisitListAsc = () => {\n      console.log(`\n      sorting visit list in ascending order...\n      `);\n      let list = this.state.visitList;\n      list.sort((a, b) => {\n        if (a.date < b.date) return -1;\n        return a.date > b.date ? 1 : 0;\n      });\n      console.log(`\n        list: ${list}\n        `);\n      this.setState({\n        visitList: list\n      });\n    };\n\n    this.getVisitListDesc = () => {\n      console.log(`\n      sorting visit list in descending order...\n      `);\n      let list = this.state.visitList;\n      list.sort((a, b) => {\n        if (a.date < b.date) return 1;\n        return a.date > b.date ? -1 : 0;\n      });\n      console.log(`\n        list: ${list}\n        `);\n      this.setState({\n        visitList: list\n      });\n    };\n\n    this.modalCancelHandler = () => {\n      this.setState({\n        creating: false,\n        updating: false,\n        searching: false,\n        selectedPatient: null\n      });\n    };\n\n    this.fetchPatientsAsc = () => {\n      console.log(\"fetch patients function:  \");\n      const userId = this.context.userId;\n      const token = this.context.token; // this.setState({ isLoading: true });\n\n      const requestBody = {\n        query: `\n          query {patientsNameAsc(userId:\"${userId}\")\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{_id,title,time,location,date},consultant{date,reference{_id,name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n        `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"resData\", resData);\n        const patients = resData.data.patientsNameAsc;\n        console.log(patients);\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.context.patients = patients;\n        this.setState({\n          patients: patients\n        }); // if (this.isActive) {\n        //   this.setState({ patients: patients, isLoading: false });\n        // }\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        }); // if (this.isActive) {\n        //   this.setState({ isLoading: false });\n        // }\n      });\n    };\n\n    this.fetchPatientsDesc = () => {\n      console.log(\"fetch patients function:  \");\n      const userId = this.context.userId;\n      const token = this.context.token; // this.setState({ isLoading: true });\n\n      const requestBody = {\n        query: `\n          query {patientsNameDesc(userId:\"${userId}\")\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{_id,title,time,location,date},consultant{date,reference{_id,name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n        `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"resData\", resData);\n        const patients = resData.data.patientsNameDesc;\n        console.log(patients);\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.context.patients = patients; // if (this.isActive) {\n        //   this.setState({ patients: patients, isLoading: false });\n        // }\n\n        this.setState({\n          patients: patients\n        });\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        }); // if (this.isActive) {\n        //   this.setState({ isLoading: false });\n        // }\n      });\n    };\n\n    this.modalDeleteHandler = () => {\n      console.log(\"deleting patient...selectedPatient:  \", this.context.selectedPatient);\n      const selectedPatientId = this.context.selectedPatient._id;\n      const userId = this.context.selectedUser._id;\n\n      if (this.context.user.role !== 'admin') {\n        console.log(\"Not the Admin! No edit permission!!\");\n      }\n\n      this.setState({\n        deleting: true\n      });\n      const requestBody = {\n        query: `\n          mutation {deletePatient(userId:\"${userId}\",patientId:\"${selectedPatientId}\")\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n        `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + this.context.token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatient;\n        console.log(deletedPatient);\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        let deletedPatientId = deletedPatient._id;\n        deletedPatient = this.state.patients.find(e => e._id === deletedPatientId);\n        const deletedPatientPos = this.state.patients.indexOf(deletedPatient);\n        const slicedArray = this.state.patients.splice(deletedPatientPos, 1);\n        console.log(\"deletedPatient:  \", JSON.stringify(deletedPatient), \"  deletedUserPos:  \", deletedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.setState({\n          deleting: false\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n\n        if (this.isActive) {\n          this.setState({\n            deleting: false\n          });\n        }\n      });\n    };\n\n    this.deletePatientInsuranceItem = props => {\n      let token = this.context.token;\n      let userId = this.context.userId;\n      let patientId = this.state.selectedPatient._id;\n      console.log(`\n      delete patient insurance item:\n      props: ${JSON.stringify(props)},\n      token: ${token},\n      userId: ${userId},\n      patientId: ${patientId},\n      `);\n      const requestBody = {\n        query: `\n         mutation {deletePatientInsurance (userId:\"${userId}\", patientId:\"${patientId}\",insuranceCompany:\"${props.company}\",insuranceNumber:\"${props.number}\")\n         {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatientInsurance;\n        console.log(deletedPatient);\n        const updatedPatientId = resData.data.deletePatientInsurance._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.deletePatientInsurance);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        }); // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientInsurance})\n\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.deletePatientAppointmentItem = props => {\n      let token = this.context.token;\n      let userId = this.context.userId;\n      let patientId = this.state.selectedPatient._id;\n      let date = new Date(props.date.substr(0, 10) * 1000).toISOString().slice(0, 10);\n      console.log(`\n      delete patient appointment item:\n      props: ${JSON.stringify(props)},\n      token: ${token},\n      userId: ${userId},\n      patientId: ${patientId},\n      appointment date: ${date},\n      `);\n      const requestBody = {\n        query: `\n         mutation {deletePatientAppointment (userId:\"${userId}\", patientId:\"${patientId}\",appointmentId:\"${props._id}\",appointmentDate:\"${date}\")\n         {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatientAppointment;\n        console.log(deletedPatient);\n        const updatedPatientId = resData.data.deletePatientAppointment._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.deletePatientAppointment);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.deletePatientConsultantItem = props => {\n      let token = this.context.token;\n      let userId = this.context.userId;\n      let patientId = this.state.selectedPatient._id;\n      let date = new Date(props.date.substr(0, 10) * 1000).toISOString().slice(0, 10);\n      console.log(`\n      delete patient consultant item:\n      props: ${JSON.stringify(props)},\n      token: ${token},\n      userId: ${userId},\n      patientId: ${patientId},\n      consultant date: ${date},\n      `);\n      const requestBody = {\n        query: `\n         mutation {deletePatientConsultant (userId:\"${userId}\", patientId:\"${patientId}\",consultantId:\"${props.reference.id}\",consultantDate:\"${date}\")\n         {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatientConsultant;\n        console.log(deletedPatient);\n        const updatedPatientId = resData.data.deletePatientConsultant._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.deletePatientConsultant);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.deletePatientNextOfKinItem = props => {\n      let token = this.context.token;\n      let userId = this.context.userId;\n      let patientId = this.state.selectedPatient._id;\n      console.log(`\n    delete patient nextOfKin item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    `);\n      const requestBody = {\n        query: `\n       mutation {deletePatientNextOfKin (userId:\"${userId}\", patientId:\"${patientId}\",nextOfKinName:\"${props.name}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatientNextOfKin;\n        console.log(deletedPatient);\n        const updatedPatientId = resData.data.deletePatientNextOfKin._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.deletePatientNextOfKin);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.deletePatientComplaintItem = props => {\n      let token = this.context.token;\n      let userId = this.context.userId;\n      let patientId = this.state.selectedPatient._id;\n      let date = new Date(props.date.substr(0, 10) * 1000).toISOString().slice(0, 10);\n      console.log(`\n    delete patient Complaint item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    complaint date: ${date},\n    `);\n      const requestBody = {\n        query: `\n       mutation {deletePatientComplaint (userId:\"${userId}\", patientId:\"${patientId}\",complaintTitle:\"${props.title}\",complaintDate:\"${date}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatientComplaint;\n        console.log(deletedPatient);\n        const updatedPatientId = resData.data.deletePatientComplaint._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.deletePatientComplaint);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.deletePatientSurveyItem = props => {\n      let token = this.context.token;\n      let userId = this.context.userId;\n      let patientId = this.state.selectedPatient._id;\n      let date = new Date(props.date.substr(0, 10) * 1000).toISOString().slice(0, 10);\n      console.log(`\n    delete patient Survey item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    survey date: ${date}\n    `);\n      const requestBody = {\n        query: `\n       mutation {deletePatientSurvey (userId:\"${userId}\", patientId:\"${patientId}\",surveyTitle:\"${props.title}\",surveyDate:\"${date}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatientSurvey;\n        console.log(deletedPatient);\n        const updatedPatientId = resData.data.deletePatientSurvey._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.deletePatientSurvey);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.deletePatientSystematicInquiryItem = props => {\n      let token = this.context.token;\n      let userId = this.context.userId;\n      let patientId = this.state.selectedPatient._id;\n      let date = new Date(props.date.substr(0, 10) * 1000).toISOString().slice(0, 10);\n      console.log(`\n    delete patient SystematicInquiry item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    systematicInquiry date: ${date}\n    `);\n      const requestBody = {\n        query: `\n       mutation {deletePatientSystematicInquiry (userId:\"${userId}\", patientId:\"${patientId}\",systematicInquiryTitle:\"${props.title}\",systematicInquiryDate:\"${date}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatientSystematicInquiry;\n        console.log(deletedPatient);\n        const updatedPatientId = resData.data.deletePatientSystematicInquiry._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.deletePatientSystematicInquiry);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.deletePatientVitalsItem = props => {\n      let token = this.context.token;\n      let userId = this.context.userId;\n      let patientId = this.state.selectedPatient._id;\n      let date = new Date(props.date.substr(0, 10) * 1000).toISOString().slice(0, 10);\n      console.log(`\n    delete patient Vitals item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    vitals date: ${date},\n    `);\n      const requestBody = {\n        query: `\n       mutation {deletePatientVitals (userId:\"${userId}\", patientId:\"${patientId}\",vitalsDate:\"${date}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatientVitals;\n        console.log(deletedPatient);\n        const updatedPatientId = resData.data.deletePatientVitals._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.deletePatientVitals);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.deletePatientExaminationItem = props => {\n      let token = this.context.token;\n      let userId = this.context.userId;\n      let patientId = this.state.selectedPatient._id;\n      let date = new Date(props.date.substr(0, 10) * 1000).toISOString().slice(0, 10);\n      console.log(`\n    delete patient Examination item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    examination date: ${date},\n    `);\n      const requestBody = {\n        query: `\n       mutation {deletePatientExamination (userId:\"${userId}\", patientId:\"${patientId}\",examinationType:\"${props.type}\",examinationDate:\"${date}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatientExamination;\n        console.log(deletedPatient);\n        const updatedPatientId = resData.data.deletePatientExamination._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.deletePatientExamination);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.deletePatientHistoryItem = props => {\n      let token = this.context.token;\n      let userId = this.context.userId;\n      let patientId = this.state.selectedPatient._id;\n      let date = new Date(props.date.substr(0, 10) * 1000).toISOString().slice(0, 10);\n      console.log(`\n    delete patient History item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    history date: ${date},\n    `);\n      const requestBody = {\n        query: `\n       mutation {deletePatientHistory (userId:\"${userId}\", patientId:\"${patientId}\",historyTitle:\"${props.title}\",historyDate:\"${date}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatientHistory;\n        console.log(deletedPatient);\n        const updatedPatientId = resData.data.deletePatientHistory._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.deletePatientHistory);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.deletePatientAllergiesItem = props => {\n      let token = this.context.token;\n      let userId = this.context.userId;\n      let patientId = this.state.selectedPatient._id;\n      console.log(`\n    delete patient Allergies item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    `);\n      const requestBody = {\n        query: `\n       mutation {deletePatientAllergies (userId:\"${userId}\", patientId:\"${patientId}\",allergiesTitle:\"${props.title}\",allergiesType:\"${props.type}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatientAllergies;\n        console.log(deletedPatient);\n        const updatedPatientId = resData.data.deletePatientAllergies._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.deletePatientAllergies);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.deletePatientMedicationItem = props => {\n      let token = this.context.token;\n      let userId = this.context.userId;\n      let patientId = this.state.selectedPatient._id;\n      console.log(`\n    delete patient Medication item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    `);\n      const requestBody = {\n        query: `\n       mutation {deletePatientMedication (userId:\"${userId}\", patientId:\"${patientId}\",medicationTitle:\"${props.title}\",medicationType:\"${props.type}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatientMedication;\n        console.log(deletedPatient);\n        const updatedPatientId = resData.data.deletePatientMedication._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.deletePatientMedication);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.deletePatientInvestigationItem = props => {\n      let token = this.context.token;\n      let userId = this.context.userId;\n      let patientId = this.state.selectedPatient._id;\n      let date = new Date(props.date.substr(0, 10) * 1000).toISOString().slice(0, 10);\n      console.log(`\n    delete patient Investigation item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    investigation date: ${date},\n    `);\n      const requestBody = {\n        query: `\n       mutation {deletePatientInvestigation (userId:\"${userId}\", patientId:\"${patientId}\",investigationDate:\"${date}\",investigationTitle:\"${props.title}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatientInvestigation;\n        console.log(deletedPatient);\n        const updatedPatientId = resData.data.deletePatientInvestigation._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.deletePatientInvestigation);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.deletePatientDiagnosisItem = props => {\n      let token = this.context.token;\n      let userId = this.context.userId;\n      let patientId = this.state.selectedPatient._id;\n      let date = new Date(props.date.substr(0, 10) * 1000).toISOString().slice(0, 10);\n      console.log(`\n    delete patient Diagnosis item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    diagnosis date: ${date}\n    `);\n      const requestBody = {\n        query: `\n       mutation {deletePatientDiagnosis (userId:\"${userId}\",patientId:\"${patientId}\",diagnosisDate:\"${date}\",diagnosisTitle:\"${props.title}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatientDiagnosis;\n        console.log(deletedPatient);\n        const updatedPatientId = resData.data.deletePatientDiagnosis._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.deletePatientDiagnosis);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.deletePatientTreatmentItem = props => {\n      let token = this.context.token;\n      let userId = this.context.userId;\n      let patientId = this.state.selectedPatient._id;\n      let date = new Date(props.date.substr(0, 10) * 1000).toISOString().slice(0, 10);\n      console.log(`\n    delete patient Treatment item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    treatment date: ${date},\n    `);\n      const requestBody = {\n        query: `\n       mutation {deletePatientTreatment (userId:\"${userId}\", patientId:\"${patientId}\",treatmentDate:\"${date}\",treatmentTitle:\"${props.title}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatientTreatment;\n        console.log(deletedPatient);\n        const updatedPatientId = resData.data.deletePatientTreatment._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.deletePatientTreatment);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.deletePatientBillingItem = props => {\n      let token = this.context.token;\n      let userId = this.context.userId;\n      let patientId = this.state.selectedPatient._id;\n      let date = new Date(props.date.substr(0, 10) * 1000).toISOString().slice(0, 10);\n      console.log(`\n    delete patient Billing item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    billing date: ${date},\n    `);\n      const requestBody = {\n        query: `\n       mutation {deletePatientBilling (userId:\"${userId}\", patientId:\"${patientId}\",billingDate:\"${date}\",billingTitle:\"${props.title}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatientBilling;\n        console.log(deletedPatient);\n        const updatedPatientId = resData.data.deletePatientBilling._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.deletePatientBilling);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.deletePatientVigilanceItem = props => {\n      let token = this.context.token;\n      let userId = this.context.userId;\n      let patientId = this.state.selectedPatient._id;\n      let date = new Date(props.date.substr(0, 10) * 1000).toISOString().slice(0, 10);\n      console.log(`\n    delete patient Vigilance item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    vigilance date: ${date},\n    `);\n      const requestBody = {\n        query: `\n       mutation {deletePatientVigilance (userId:\"${userId}\", patientId:\"${patientId}\",vigilanceDate:\"${date}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatientVigilance;\n        console.log(deletedPatient);\n        const updatedPatientId = resData.data.deletePatientVigilance._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.deletePatientVigilance);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.deletePatientAttachmentItem = props => {\n      let token = this.context.token;\n      let userId = this.context.userId;\n      let patientId = this.state.selectedPatient._id; // console.log(`\n      //   deleting from s3...\n      //   file.name: ${props.name},\n      //   `);\n      //\n      //   const config = {\n      //     bucketName: this.context.creds.s3.bucketName,\n      //     dirName: props.path,\n      //     region: this.context.creds.s3.region,\n      //     accessKeyId: this.context.creds.s3.accessKeyId,\n      //     secretAccessKey: this.context.creds.s3.secretAccessKey,\n      //   }\n      // const ReactS3Client = new S3(config);\n      // const filename = props.name;\n      // // const attachmentName = newFileName;\n      // //\n      // S3FileUpload\n      // .deleteFile(filename, config)\n      // .then(response => console.log(response))\n      // .catch(err => console.error(err))\n\n      console.log(`\n    delete patient Attachment item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    `);\n      const requestBody = {\n        query: `\n       mutation {deletePatientAttachment (userId:\"${userId}\", patientId:\"${patientId}\",attachmentName:\"${props.name}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatientAttachment;\n        console.log(deletedPatient);\n        const updatedPatientId = resData.data.deletePatientAttachment._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.deletePatientAttachment);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.deletePatientNoteItem = props => {\n      let token = this.context.token;\n      let userId = this.context.userId;\n      let patientId = this.state.selectedPatient._id;\n      console.log(`\n    delete patient Note item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    `);\n      const requestBody = {\n        query: `\n      mutation {deletePatientNote (userId:\"${userId}\", patientId:\"${patientId}\",note:\"${props}\")\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatientNote;\n        console.log(deletedPatient);\n        const updatedPatientId = resData.data.deletePatientNote._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.deletePatientNote);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.deletePatientTagItem = props => {\n      let token = this.context.token;\n      let userId = this.context.userId;\n      let patientId = this.state.selectedPatient._id;\n      console.log(`\n    delete patient Tag item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    `);\n      const requestBody = {\n        query: `\n      mutation {deletePatientTag (userId:\"${userId}\", patientId:\"${patientId}\",tag:\"${props}\")\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatientTag;\n        console.log(deletedPatient);\n        const updatedPatientId = resData.data.deletePatientTag._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.deletePatientTag);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.onViewAttachment = attachment => {\n      console.log(`\n      setting up attachment viewer...\n      attachment: ${JSON.stringify(attachment)}\n      `);\n      this.setState({\n        showAttachment: true\n      });\n      const file = \"https://ent-emr-bucket.s3-us-east-2.amazonaws.com/\" + attachment.path + \"/\" + attachment.name;\n      const type = attachment.format;\n      this.setState({\n        showThisAttachmentFile: file,\n        showThisAttachmentType: type\n      });\n    };\n\n    this.closeAttachmentView = () => {\n      console.log(`\n      closing attachment viewer...\n      `);\n      this.setState({\n        showAttachment: false\n      });\n    };\n\n    this.createPdf = patient => {\n      console.log(`\n        creating pdf...\n        user: ${JSON.stringify(patient)}\n      `);\n      const pdfData = {\n        title: \"This pdf is supplied with Patient data...\",\n        patient: {\n          _id: patient._id,\n          title: patient.title,\n          name: patient.name,\n          dob: patient.dob,\n          age: patient.age,\n          gender: patient.gender,\n          address: {\n            number: patient.number,\n            street: patient.street,\n            town: patient.town,\n            parish: patient.parish,\n            postOffice: patient.postOffice\n          },\n          registrationDate: patient.registrationDate,\n          referralDate: patient.referralDate,\n          expirationDate: patient.expirationDate,\n          attendingPhysician: {\n            name: patient.attendingPhysician.name,\n            email: patient.attendingPhysician.email,\n            phone: patient.attendingPhysician.phone\n          },\n          referringDoctor: {\n            name: patient.referringDoctor.name,\n            email: patient.referringDoctor.email,\n            phone: patient.referringDoctor.phone\n          },\n          contact: {\n            phone: patient.contact.phone,\n            email: patient.contact.email\n          },\n          occupation: {\n            role: patient.occupation.role,\n            employer: patient.occupation.employer,\n            contact: {\n              phone: patient.occupation.contact.phone,\n              email: patient.occupation.contact.email\n            }\n          },\n          appointments: patient.appointments,\n          consultant: patient.consultant,\n          insurance: patient.insurance,\n          nextOfKin: patient.nextOfKin,\n          complaints: patient.complaints,\n          surveys: patient.surveys,\n          systematicInquiry: patient.systematicInquiry,\n          vitals: patient.vitals,\n          examination: patient.examination,\n          history: patient.history,\n          allergies: patient.allergies,\n          medication: patient.medication,\n          investigation: patient.investigation,\n          diagnosis: patient.diagnosis,\n          treatment: patient.treatment,\n          billing: patient.billing,\n          vigilance: patient.vigilance,\n          attachments: patient.attachments,\n          notes: patient.notes,\n          tags: patient.tags\n        }\n      };\n      this.setState({\n        createPdf: true,\n        pdfData: pdfData\n      });\n    };\n\n    this.closePdfCreator = () => {\n      console.log(`\n      closing pdf creator...\n      `);\n      this.setState({\n        createPdf: false,\n        pdfData: null\n      });\n    };\n\n    this.showDetailHandler = patientId => {\n      this.setState({\n        visitList: []\n      });\n      this.setState(prevState => {\n        const selectedPatient = prevState.patients.find(e => e._id === patientId);\n        this.context.selectedPatient = selectedPatient;\n        this.context.selectedPatientId = selectedPatient._id;\n        console.log(\"selectedPatient:  \", selectedPatient);\n        return {\n          selectedPatient: selectedPatient\n        };\n      });\n    };\n\n    this.selectVisit = props => {\n      console.log(`\n      changing selected visit ...\n      event: ${JSON.stringify(props)},\n      `);\n      this.setState({\n        selectedVisit: props\n      });\n    };\n\n    this.closeVisit = () => {\n      console.log(`\n      clearing selected visits...\n      `);\n      this.setState({\n        visit: null,\n        selectedVisit: null\n      });\n    };\n\n    this.createVisitChecklistUpdate = props => {\n      console.log(`\n      updating create-visit checklist...\n      props: ${props},\n      `);\n      this.setState({\n        userAlert: `creating visit: ${props} addedd...`\n      });\n      let newState = Object.assign({}, this.state);\n      newState.createVisitChecklist[props] = true;\n      this.setState(newState);\n    };\n\n    this.newVisitComplete = () => {\n      console.log(`\n      finished adding new visit...\n      `);\n      this.setState({\n        newVisit: false,\n        createVisitChecklist: {\n          consultant: true,\n          complaint: true,\n          diagnosis: true,\n          examination: true,\n          investigation: true,\n          survey: true,\n          treatment: true,\n          vitals: true,\n          billing: true\n        }\n      });\n    };\n\n    this.nameElRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.fetchPatients();\n\n    if (this.context.user.name === \"Lord-of-the-Manor\") {\n      this.setState({\n        canDelete: true\n      });\n    } // if (this.context.user.name === 'admin579'){\n    //   this.setState({canDelete: true})\n    // }\n\n  }\n\n  fetchPatients() {\n    console.log(\"fetch patients function:  \");\n    const userId = this.context.userId;\n    const token = this.context.token;\n    this.setState({\n      isLoading: true\n    });\n    const requestBody = {\n      query: `\n          query {patients(userId:\"${userId}\")\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{_id,title,time,location,date},consultant{date,reference{_id,name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n        `\n    };\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    }).then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n\n      return res.json();\n    }).then(resData => {\n      console.log(\"resData\", resData);\n      const patients = resData.data.patients;\n      console.log(patients);\n      const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n      this.setState({\n        userAlert: responseAlert\n      });\n      this.context.patients = this.state.patients;\n\n      if (this.isActive) {\n        this.setState({\n          patients: patients,\n          isLoading: false\n        });\n      }\n    }).catch(err => {\n      console.log(err);\n      this.setState({\n        userAlert: err\n      });\n\n      if (this.isActive) {\n        this.setState({\n          isLoading: false\n        });\n      }\n    });\n  }\n\n  updatePatientSpecial(event) {\n    console.log(\"special field to update:  \", event.target.value);\n    const field = event.target.value;\n    this.setState({\n      patientUpdateField: field\n    });\n  }\n\n  componentWillUnmount() {\n    this.isActive = false;\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4293\n      },\n      __self: this\n    }, this.state.showAttachment === true && React.createElement(AttachmentViewer, {\n      onCloseAttachmentView: this.closeAttachmentView,\n      attachmentFile: this.state.showThisAttachmentFile,\n      attachmentType: this.state.showThisAttachmentType,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4295\n      },\n      __self: this\n    }), this.state.createPdf === true && React.createElement(PdfCreator, {\n      pdfData: this.state.pdfData,\n      onClosePdfCreator: this.closePdfCreator,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4303\n      },\n      __self: this\n    }), React.createElement(Accordion, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4309\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4311\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 3,\n      className: \"MasterCol1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4312\n      },\n      __self: this\n    }, React.createElement(AlertBox, {\n      authUserId: this.context.userId,\n      alert: this.state.userAlert,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4314\n      },\n      __self: this\n    }), React.createElement(SidebarPage, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4318\n      },\n      __self: this\n    })), React.createElement(Col, {\n      md: 9,\n      className: \"MasterCol2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4321\n      },\n      __self: this\n    }, React.createElement(Container, {\n      className: \"containerCombinedDetail\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4322\n      },\n      __self: this\n    }, React.createElement(Tab.Container, {\n      id: \"left-tabs-example\",\n      defaultActiveKey: \"patientDetail\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4324\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4325\n      },\n      __self: this\n    }, React.createElement(Col, {\n      sm: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4326\n      },\n      __self: this\n    }, React.createElement(Nav, {\n      variant: \"pills\",\n      className: \"flex-column\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4327\n      },\n      __self: this\n    }, React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4328\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"MasterList\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4329\n      },\n      __self: this\n    }, \"MASTER LIST\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4331\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientDetail\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4332\n      },\n      __self: this\n    }, \"Selected\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4334\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientCreate\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4335\n      },\n      __self: this\n    }, \"Create New\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4337\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"disabled\",\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4338\n      },\n      __self: this\n    }, \"Edit:\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4340\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientEditDemographics\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4341\n      },\n      __self: this\n    }, \"Demographics\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4343\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientEditField\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4344\n      },\n      __self: this\n    }, \"Single Field\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4346\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"disabled\",\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4347\n      },\n      __self: this\n    }, \"Add:\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4349\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientAddVisit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4350\n      },\n      __self: this\n    }, \"Visit\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4352\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientEditConsultant\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4353\n      },\n      __self: this\n    }, \"Consultant\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4355\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientEditInsurance\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4356\n      },\n      __self: this\n    }, \"Insurance\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4358\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientEditNextOfKin\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4359\n      },\n      __self: this\n    }, \"Next of Kin\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4361\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientEditComplaint\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4362\n      },\n      __self: this\n    }, \"History\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4364\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientEditSurvey\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4365\n      },\n      __self: this\n    }, \"Survey\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4367\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientEditSystematicInquiry\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4368\n      },\n      __self: this\n    }, \"Systematic Inquiry\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4370\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientEditVitals\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4371\n      },\n      __self: this\n    }, \"Vitals\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4373\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientEditExamination\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4374\n      },\n      __self: this\n    }, \"Examination\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4376\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientEditHistory\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4377\n      },\n      __self: this\n    }, \"Past History\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4379\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientEditAllergies\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4380\n      },\n      __self: this\n    }, \"Allergies\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4382\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientEditMedication\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4383\n      },\n      __self: this\n    }, \"Medication\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4385\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientEditInvestigation\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4386\n      },\n      __self: this\n    }, \"Investigation\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4388\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientEditDiagnosis\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4389\n      },\n      __self: this\n    }, \"Diagnosis\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4391\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientEditTreatment\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4392\n      },\n      __self: this\n    }, \"Treatment\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4394\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientEditBilling\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4395\n      },\n      __self: this\n    }, \"Billing\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4397\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientEditVigilance\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4398\n      },\n      __self: this\n    }, \"Vigilance\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4400\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientEditAttachment\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4401\n      },\n      __self: this\n    }, \"Attachment\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4403\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientEditNote\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4404\n      },\n      __self: this\n    }, \"Note\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4406\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientEditTag\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4407\n      },\n      __self: this\n    }, \"Tag\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4410\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"disabled\",\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4411\n      },\n      __self: this\n    }, \"Search:\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4413\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"SearchInput\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4414\n      },\n      __self: this\n    }, \"Input\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4416\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"SearchResult\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4417\n      },\n      __self: this\n    }, \"Search\")))), React.createElement(Col, {\n      sm: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4421\n      },\n      __self: this\n    }, React.createElement(Tab.Content, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4422\n      },\n      __self: this\n    }, React.createElement(Tab.Pane, {\n      eventKey: \"patientDetail\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4423\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4426\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-danger\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4432\n      },\n      __self: this\n    }, \"Don't forget to select someone from the Staff page before editing Patient Consultant information !!!\"), this.state.isLoading === false && this.state.selectedPatient !== null && React.createElement(PatientDetail, {\n      authUserId: this.context.userId,\n      token: this.context.token,\n      patient: this.state.selectedPatient,\n      onEdit: this.startUpdatePatientHandler,\n      canDelete: this.state.canDelete,\n      onDelete: this.modalDeleteHandler,\n      onGetVisit: this.getPatientVisit,\n      visit: this.state.visit,\n      selectedVisit: this.state.selectedVisit,\n      fetchUsers: this.fetchUsers,\n      appointmentDelete: this.deletePatientAppointmentItem,\n      consultantDelete: this.deletePatientConsultantItem,\n      insuranceDelete: this.deletePatientInsuranceItem,\n      nextOfKinDelete: this.deletePatientNextOfKinItem,\n      complaintDelete: this.deletePatientComplaintItem,\n      surveyDelete: this.deletePatientSurveyItem,\n      systematicInquiryDelete: this.deletePatientSystematicInquiryItem,\n      vitalsDelete: this.deletePatientVitalsItem,\n      examinationDelete: this.deletePatientExaminationItem,\n      historyDelete: this.deletePatientHistoryItem,\n      allergiesDelete: this.deletePatientAllergiesItem,\n      medicationDelete: this.deletePatientMedicationItem,\n      investigationDelete: this.deletePatientInvestigationItem,\n      diagnosisDelete: this.deletePatientDiagnosisItem,\n      treatmentDelete: this.deletePatientTreatmentItem,\n      billingDelete: this.deletePatientBillingItem,\n      vigilanceDelete: this.deletePatientVigilanceItem,\n      attachmentDelete: this.deletePatientAttachmentItem,\n      noteDelete: this.deletePatientNoteItem,\n      tagDelete: this.deletePatientTagItem,\n      onViewAttachment: this.onViewAttachment,\n      onCreatePdf: this.createPdf,\n      onGetVisitList: this.getVisitList,\n      visitList: this.state.visitList,\n      onSelectVisit: this.selectVisit,\n      onCloseVisit: this.closeVisit,\n      onSortVisitListAsc: this.getVisitListAsc,\n      onSortVisitListDesc: this.getVisitListDesc,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4438\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientCreate\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4481\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"outline-primary\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.startCreatePatientHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4482\n      },\n      __self: this\n    }, \"Create NEW Patient Profile\"), this.state.creating && React.createElement(CreatePatientForm, {\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmHandler,\n      confirmText: \"Confirm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4485\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientAddVisit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4495\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4497\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && this.state.newVisit !== true && React.createElement(Button, {\n      variant: \"outline-primary\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.startCreateVisitHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4503\n      },\n      __self: this\n    }, \"Add NEW Visit\"), this.state.selectedPatient !== null && this.state.newVisit === true && React.createElement(Accordion, {\n      defaultActiveKey: \"0\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4508\n      },\n      __self: this\n    }, React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4509\n      },\n      __self: this\n    }, React.createElement(Card.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4510\n      },\n      __self: this\n    }, React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: \"0\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4511\n      },\n      __self: this\n    }, \"Guide:\")), React.createElement(Accordion.Collapse, {\n      eventKey: \"0\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4515\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4516\n      },\n      __self: this\n    }, React.createElement(Card.Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4517\n      },\n      __self: this\n    }, \"To create a NEW Patient Visit, fill in the forms below.\"), React.createElement(Card.Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4521\n      },\n      __self: this\n    }, \"Everytime you submit a form with new info, a new item is added to the current Patient visit.\"), React.createElement(Card.Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4525\n      },\n      __self: this\n    }, \"When you are done with a section click the GREEN Done adding Complaints, Vitals etc and continue to the next form.\"), React.createElement(Card.Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4529\n      },\n      __self: this\n    }, \"Once you have submitted all the information required scroll to the bottom and click the green button.\")))), React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4535\n      },\n      __self: this\n    }, React.createElement(Card.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4536\n      },\n      __self: this\n    }, React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: \"1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4537\n      },\n      __self: this\n    }, \"Consultant\")), React.createElement(Accordion.Collapse, {\n      eventKey: \"1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4541\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4542\n      },\n      __self: this\n    }, \"Add Consultant form:\", this.state.createVisitChecklist.consultant === true && React.createElement(Button, {\n      variant: \"warning\",\n      size: \"lg\",\n      className: \"formButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4546\n      },\n      __self: this\n    }, \"Consultant for this Visit has already been added!!\"), this.state.createVisitChecklist.consultant === false && this.context.selectedUser === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4553\n      },\n      __self: this\n    }, \"Select someone from the Staff page\"), this.state.createVisitChecklist.consultant === false && this.context.selectedUser !== null && React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4559\n      },\n      __self: this\n    }, React.createElement(Card.Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4560\n      },\n      __self: this\n    }, \"Add Consultant: \", this.context.selectedUser.name, \"  ...\"), React.createElement(Card.Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4561\n      },\n      __self: this\n    }, \" To Paitient: \", this.state.selectedPatient.name, \" ??\")), this.state.createVisitChecklist.consultant === false && this.context.selectedUser !== null && React.createElement(UpdatePatientConsultantForm, {\n      authUserId: this.context.userId,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientConsultantHandler,\n      confirmText: \"Confirm\",\n      consultant: this.context.selectedUser,\n      visit: true,\n      onCreateVisitChecklistUpdate: this.createVisitChecklistUpdate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4567\n      },\n      __self: this\n    })))), React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4581\n      },\n      __self: this\n    }, React.createElement(Card.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4582\n      },\n      __self: this\n    }, React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: \"2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4583\n      },\n      __self: this\n    }, \"Complaint\")), React.createElement(Accordion.Collapse, {\n      eventKey: \"2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4587\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4588\n      },\n      __self: this\n    }, \"Add Complaint form:\", this.state.createVisitChecklist.complaint === true && React.createElement(Button, {\n      variant: \"warning\",\n      size: \"lg\",\n      className: \"formButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4592\n      },\n      __self: this\n    }, \"Complaint for this Visit has already been added!!\"), this.state.createVisitChecklist.complaint === false && React.createElement(UpdatePatientComplaintForm, {\n      authUserId: this.context.userId,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientComplaintHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      visit: true,\n      onCreateVisitChecklistUpdate: this.createVisitChecklistUpdate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4597\n      },\n      __self: this\n    })))), React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4611\n      },\n      __self: this\n    }, React.createElement(Card.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4612\n      },\n      __self: this\n    }, React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: \"3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4613\n      },\n      __self: this\n    }, \"Vitals\")), React.createElement(Accordion.Collapse, {\n      eventKey: \"3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4617\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4618\n      },\n      __self: this\n    }, \"Add Vitals form:\", this.state.createVisitChecklist.vitals === true && React.createElement(Button, {\n      variant: \"warning\",\n      size: \"lg\",\n      className: \"formButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4622\n      },\n      __self: this\n    }, \"Vitals for this Visit have already been added!!\"), this.state.createVisitChecklist.vitals === false && React.createElement(UpdatePatientVitalsForm, {\n      authUserId: this.context.userId,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientVitalsHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      visit: true,\n      onCreateVisitChecklistUpdate: this.createVisitChecklistUpdate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4627\n      },\n      __self: this\n    })))), React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4641\n      },\n      __self: this\n    }, React.createElement(Card.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4642\n      },\n      __self: this\n    }, React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: \"4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4643\n      },\n      __self: this\n    }, \"Examination\")), React.createElement(Accordion.Collapse, {\n      eventKey: \"4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4647\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4648\n      },\n      __self: this\n    }, \"Add Examination form:\", this.state.createVisitChecklist.examination === true && React.createElement(Button, {\n      variant: \"warning\",\n      size: \"lg\",\n      className: \"formButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4652\n      },\n      __self: this\n    }, \"Examination for this Visit has already been added!!\"), this.state.createVisitChecklist.examination === false && React.createElement(UpdatePatientExaminationForm, {\n      authUserId: this.context.userId,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientExaminationHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      visit: true,\n      onCreateVisitChecklistUpdate: this.createVisitChecklistUpdate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4657\n      },\n      __self: this\n    })))), React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4671\n      },\n      __self: this\n    }, React.createElement(Card.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4672\n      },\n      __self: this\n    }, React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: \"5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4673\n      },\n      __self: this\n    }, \"Survey\")), React.createElement(Accordion.Collapse, {\n      eventKey: \"5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4677\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4678\n      },\n      __self: this\n    }, \"Add Survey form:\", this.state.createVisitChecklist.survey === true && React.createElement(Button, {\n      variant: \"warning\",\n      size: \"lg\",\n      className: \"formButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4681\n      },\n      __self: this\n    }, \"Survey for this Visit has already been added!!\"), this.state.createVisitChecklist.survey === false && React.createElement(UpdatePatientSurveyForm, {\n      authUserId: this.context.userId,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientSurveyHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      visit: true,\n      onCreateVisitChecklistUpdate: this.createVisitChecklistUpdate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4686\n      },\n      __self: this\n    })))), React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4700\n      },\n      __self: this\n    }, React.createElement(Card.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4701\n      },\n      __self: this\n    }, React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: \"22\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4702\n      },\n      __self: this\n    }, \"SystematicInquiry\")), React.createElement(Accordion.Collapse, {\n      eventKey: \"22\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4706\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4707\n      },\n      __self: this\n    }, \"Add Systematic Inquiry form:\", this.state.createVisitChecklist.systematicInquiry === true && React.createElement(Button, {\n      variant: \"warning\",\n      size: \"lg\",\n      className: \"formButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4710\n      },\n      __self: this\n    }, \"Systematic Inquiry for this Visit has already been added!!\"), this.state.createVisitChecklist.systematicInquiry === false && React.createElement(UpdatePatientSystematicInquiryForm, {\n      authUserId: this.context.userId,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientSystematicInquiryHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      visit: true,\n      onCreateVisitChecklistUpdate: this.createVisitChecklistUpdate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4715\n      },\n      __self: this\n    })))), React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4729\n      },\n      __self: this\n    }, React.createElement(Card.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4730\n      },\n      __self: this\n    }, React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: \"6\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4731\n      },\n      __self: this\n    }, \"Investigation\")), React.createElement(Accordion.Collapse, {\n      eventKey: \"6\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4735\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4736\n      },\n      __self: this\n    }, \"Add Investigation form:\", this.state.createVisitChecklist.investigation === true && React.createElement(Button, {\n      variant: \"warning\",\n      size: \"lg\",\n      className: \"formButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4739\n      },\n      __self: this\n    }, \"Investigation for this Visit has already been added!!\"), this.state.createVisitChecklist.investigation === false && React.createElement(UpdatePatientInvestigationForm, {\n      authUserId: this.context.userId,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientInvestigationHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      visit: true,\n      onCreateVisitChecklistUpdate: this.createVisitChecklistUpdate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4744\n      },\n      __self: this\n    })))), React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4758\n      },\n      __self: this\n    }, React.createElement(Card.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4759\n      },\n      __self: this\n    }, React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: \"7\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4760\n      },\n      __self: this\n    }, \"Diagnosis\")), React.createElement(Accordion.Collapse, {\n      eventKey: \"7\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4764\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4765\n      },\n      __self: this\n    }, \"Add Diagnosis form:\", this.state.createVisitChecklist.diagnosis === true && React.createElement(Button, {\n      variant: \"warning\",\n      size: \"lg\",\n      className: \"formButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4768\n      },\n      __self: this\n    }, \"Diagnosis for this Visit has already been added!!\"), this.state.createVisitChecklist.diagnosis === false && React.createElement(UpdatePatientDiagnosisForm, {\n      authUserId: this.context.userId,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientDiagnosisHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      visit: true,\n      onCreateVisitChecklistUpdate: this.createVisitChecklistUpdate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4773\n      },\n      __self: this\n    })))), React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4787\n      },\n      __self: this\n    }, React.createElement(Card.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4788\n      },\n      __self: this\n    }, React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: \"8\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4789\n      },\n      __self: this\n    }, \"Treatment\")), React.createElement(Accordion.Collapse, {\n      eventKey: \"8\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4793\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4794\n      },\n      __self: this\n    }, \"Add Treatment form:\", this.state.createVisitChecklist.treatment === true && React.createElement(Button, {\n      variant: \"warning\",\n      size: \"lg\",\n      className: \"formButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4797\n      },\n      __self: this\n    }, \"Treatment for this Visit has already been added!!\"), this.state.createVisitChecklist.treatment === false && React.createElement(UpdatePatientTreatmentForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientTreatmentHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      visit: true,\n      onCreateVisitChecklistUpdate: this.createVisitChecklistUpdate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4802\n      },\n      __self: this\n    })))), React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4817\n      },\n      __self: this\n    }, React.createElement(Card.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4818\n      },\n      __self: this\n    }, React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: \"9\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4819\n      },\n      __self: this\n    }, \"Billing\")), React.createElement(Accordion.Collapse, {\n      eventKey: \"9\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4823\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4824\n      },\n      __self: this\n    }, \"Add Billing form:\", this.state.createVisitChecklist.billing === true && React.createElement(Button, {\n      variant: \"warning\",\n      size: \"lg\",\n      className: \"formButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4828\n      },\n      __self: this\n    }, \"Billing for this Visit has already been added!!\"), this.state.createVisitChecklist.billing === false && React.createElement(UpdatePatientBillingForm, {\n      authUserId: this.context.userId,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientBillingHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      visit: true,\n      onCreateVisitChecklistUpdate: this.createVisitChecklistUpdate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4833\n      },\n      __self: this\n    })))), React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4847\n      },\n      __self: this\n    }, React.createElement(Card.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4848\n      },\n      __self: this\n    }, React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: \"23\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4849\n      },\n      __self: this\n    }, \"Vigilance\")), React.createElement(Accordion.Collapse, {\n      eventKey: \"23\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4853\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4854\n      },\n      __self: this\n    }, \"Add Vigilance form:\", this.state.createVisitChecklist.vigilance === true && React.createElement(Button, {\n      variant: \"warning\",\n      size: \"lg\",\n      className: \"formButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4858\n      },\n      __self: this\n    }, \"Vigilance for this Visit has already been added!!\"), this.state.createVisitChecklist.vigilance === false && React.createElement(UpdatePatientVigilanceForm, {\n      authUserId: this.context.userId,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientVigilanceHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      visit: true,\n      onCreateVisitChecklistUpdate: this.createVisitChecklistUpdate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4863\n      },\n      __self: this\n    })))), React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4877\n      },\n      __self: this\n    }, React.createElement(Card.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4878\n      },\n      __self: this\n    }, React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: \"10\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4879\n      },\n      __self: this\n    }, \"Finished ?\")), React.createElement(Accordion.Collapse, {\n      eventKey: \"10\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4883\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4884\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"success\",\n      className: \"formButton\",\n      onClick: this.newVisitComplete,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4885\n      },\n      __self: this\n    }, \"Done creating Visit\")))))), React.createElement(Tab.Pane, {\n      eventKey: \"patientEditDemographics\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4895\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4897\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.startUpdatePatientHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4902\n      },\n      __self: this\n    }, \"Edit Demographics\"), this.state.updating && this.state.selectedPatient !== null && React.createElement(UpdatePatientForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmUpdateHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4907\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientEditField\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4919\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4921\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.startUpdatePatientHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4926\n      },\n      __self: this\n    }, \"Edit a Single Field\"), this.state.updating && this.state.selectedPatient !== null && React.createElement(UpdatePatientFieldForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmUpdateFieldHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4931\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientEditConsultant\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4943\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4945\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"consultant\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4950\n      },\n      __self: this\n    }, \"Add a Consultant\"), this.state.patientUpdateField === 'consultant' && this.state.selectedPatient !== null && this.context.selectedUser === null && React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4956\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4957\n      },\n      __self: this\n    }, \"Select someone from the Staff page\")), this.state.patientUpdateField === 'consultant' && this.state.selectedPatient !== null && React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4965\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4966\n      },\n      __self: this\n    }, \"Add Consultant: \", this.context.selectedUser.name, \"  ...\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4967\n      },\n      __self: this\n    }, \" To Paitient: \", this.state.selectedPatient.name, \" ??\")), this.state.patientUpdateField === 'consultant' && this.state.selectedPatient !== null && React.createElement(UpdatePatientConsultantForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientConsultantHandler,\n      confirmText: \"Confirm\",\n      consultant: this.context.selectedUser,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4974\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientEditInsurance\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4986\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4988\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"insurance\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4993\n      },\n      __self: this\n    }, \"Add Insurance\"), this.state.patientUpdateField === 'insurance' && this.state.selectedPatient !== null && React.createElement(UpdatePatientInsuranceForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientInsuranceHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4998\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientEditNextOfKin\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5010\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5012\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"nextOfKin\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5017\n      },\n      __self: this\n    }, \"Add NextOfKin\"), this.state.patientUpdateField === 'nextOfKin' && this.state.selectedPatient !== null && React.createElement(UpdatePatientNextOfKinForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientNextOfKinHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5022\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientEditComplaint\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5034\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5036\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"complaint\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5041\n      },\n      __self: this\n    }, \"Add History\"), this.state.patientUpdateField === 'complaint' && this.state.selectedPatient !== null && React.createElement(UpdatePatientComplaintForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientComplaintHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5046\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientEditSurvey\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5058\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5060\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"survey\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5065\n      },\n      __self: this\n    }, \"Add Survey\"), this.state.patientUpdateField === 'survey' && this.state.selectedPatient !== null && React.createElement(UpdatePatientSurveyForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientSurveyHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5070\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientEditSystematicInquiry\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5082\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5084\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"systematicInquiry\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5089\n      },\n      __self: this\n    }, \"Add Systematic Inquiry\"), this.state.patientUpdateField === 'systematicInquiry' && this.state.selectedPatient !== null && React.createElement(UpdatePatientSystematicInquiryForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientSystematicInquiryHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5094\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientEditVitals\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5106\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5108\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"vitals\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5113\n      },\n      __self: this\n    }, \"Add Vitals\"), this.state.patientUpdateField === 'vitals' && this.state.selectedPatient !== null && React.createElement(UpdatePatientVitalsForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientVitalsHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5118\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientEditExamination\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5130\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5132\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"examintion\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5137\n      },\n      __self: this\n    }, \"Add Examination\"), this.state.patientUpdateField === 'examintion' && this.state.selectedPatient !== null && React.createElement(UpdatePatientExaminationForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientExaminationHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5142\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientEditHistory\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5154\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5156\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"history\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5161\n      },\n      __self: this\n    }, \"Add Past History\"), this.state.patientUpdateField === 'history' && this.state.selectedPatient !== null && React.createElement(UpdatePatientHistoryForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientHistoryHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5166\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientEditAllergies\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5178\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5180\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"allergies\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5185\n      },\n      __self: this\n    }, \"Add Allergies\"), this.state.patientUpdateField === 'allergies' && this.state.selectedPatient !== null && React.createElement(UpdatePatientAllergiesForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientAllergiesHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5190\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientEditMedication\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5202\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5204\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"medication\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5209\n      },\n      __self: this\n    }, \"Add Medication\"), this.state.patientUpdateField === 'medication' && this.state.selectedPatient !== null && React.createElement(UpdatePatientMedicationForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientMedicationHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5214\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientEditInvestigation\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5226\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5228\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"investigation\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5233\n      },\n      __self: this\n    }, \"Add Investigation\"), this.state.patientUpdateField === 'investigation' && this.state.selectedPatient !== null && React.createElement(UpdatePatientInvestigationForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientInvestigationHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5238\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientEditDiagnosis\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5250\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5252\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"diagnosis\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5257\n      },\n      __self: this\n    }, \"Add Diagnosis\"), this.state.patientUpdateField === 'diagnosis' && this.state.selectedPatient !== null && React.createElement(UpdatePatientDiagnosisForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientDiagnosisHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5262\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientEditTreatment\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5274\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5276\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"treatment\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5281\n      },\n      __self: this\n    }, \"Add Treatment\"), this.state.patientUpdateField === 'treatment' && this.state.selectedPatient !== null && React.createElement(UpdatePatientTreatmentForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientTreatmentHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5286\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientEditBilling\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5298\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5300\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"billing\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5305\n      },\n      __self: this\n    }, \"Add Billing\"), this.state.patientUpdateField === 'billing' && this.state.selectedPatient !== null && React.createElement(UpdatePatientBillingForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientBillingHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5310\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientEditVigilance\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5322\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5324\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"vigilance\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5329\n      },\n      __self: this\n    }, \"Add Vigilance\"), this.state.patientUpdateField === 'vigilance' && this.state.selectedPatient !== null && React.createElement(UpdatePatientVigilanceForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientVigilanceHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5334\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientEditAttachment\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5346\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5348\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"attachment\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5353\n      },\n      __self: this\n    }, \"Add Attachment\"), this.state.patientUpdateField === 'attachment' && this.state.selectedPatient !== null && React.createElement(UpdatePatientAttachmentForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientAttachmentHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5358\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientEditNote\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5370\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5372\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"notes\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5377\n      },\n      __self: this\n    }, \"Add Note\"), this.state.patientUpdateField === 'notes' && this.state.selectedPatient !== null && React.createElement(UpdatePatientNoteForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientNoteHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5382\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientEditTag\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5394\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5396\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"tags\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5401\n      },\n      __self: this\n    }, \"Add Tag\"), this.state.patientUpdateField === 'tags' && this.state.selectedPatient !== null && React.createElement(UpdatePatientTagForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientTagHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5406\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"MasterList\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5418\n      },\n      __self: this\n    }, React.createElement(Container, {\n      className: \"containerUserMasterList\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5419\n      },\n      __self: this\n    }, React.createElement(Row, {\n      className: \"searchListRow\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5420\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"primary\",\n      size: \"sm\",\n      onClick: this.fetchPatientsAsc,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5421\n      },\n      __self: this\n    }, \"Sort Asc\"), React.createElement(Button, {\n      variant: \"info\",\n      size: \"sm\",\n      onClick: this.fetchPatientsDesc,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5424\n      },\n      __self: this\n    }, \"Sort Desc\"), this.state.isLoading ? React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5428\n      },\n      __self: this\n    }) : React.createElement(PatientList, {\n      patients: this.state.patients,\n      authUserId: this.context.userId,\n      onViewDetail: this.showDetailHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5430\n      },\n      __self: this\n    })))), React.createElement(Tab.Pane, {\n      eventKey: \"SearchInput\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5440\n      },\n      __self: this\n    }, React.createElement(Container, {\n      className: \"containerSearchUserInput\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5441\n      },\n      __self: this\n    }, this.context.token && React.createElement(Row, {\n      className: \"searchUserRowAdd\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5443\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"primary\",\n      onClick: this.startSearchPatientHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5444\n      },\n      __self: this\n    }, \"Search\")), React.createElement(Row, {\n      className: \"searchUserRowForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5448\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 10,\n      className: \"searchUserColForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5449\n      },\n      __self: this\n    }, React.createElement(Tabs, {\n      defaultActiveKey: \"Field\",\n      id: \"uncontrolled-tab-example\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5450\n      },\n      __self: this\n    }, React.createElement(Tab, {\n      eventKey: \"Search\",\n      title: \"Search:\",\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5451\n      },\n      __self: this\n    }), React.createElement(Tab, {\n      eventKey: \"Field\",\n      title: \"Search by Field:\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5453\n      },\n      __self: this\n    }, this.state.searching !== true && React.createElement(Button, {\n      variant: \"outline-warning\",\n      className: \"confirmEditButton\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5455\n      },\n      __self: this\n    }, \"Click the 'Search' Button start\"), this.state.searching === true && React.createElement(SearchPatientForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmSearchHandler,\n      confirmText: \"Search\",\n      patient: this.context.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5460\n      },\n      __self: this\n    })), React.createElement(Tab, {\n      eventKey: \"Id\",\n      title: \"Search by ID:\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5471\n      },\n      __self: this\n    }, this.state.searching !== true && React.createElement(Button, {\n      variant: \"outline-warning\",\n      className: \"confirmEditButton\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5473\n      },\n      __self: this\n    }, \"Click the 'Search' Button start\"), this.state.searching === true && React.createElement(SearchPatientIdForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmSearchIdHandler,\n      confirmText: \"Search\",\n      patient: this.context.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5478\n      },\n      __self: this\n    })), React.createElement(Tab, {\n      eventKey: \"Name\",\n      title: \"Search by Name:\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5490\n      },\n      __self: this\n    }, this.state.searching !== true && React.createElement(Button, {\n      variant: \"outline-warning\",\n      className: \"confirmEditButton\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5492\n      },\n      __self: this\n    }, \"Click the 'Search' Button start\"), this.state.searching === true && React.createElement(SearchPatientNameForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmSearchNameHandler,\n      confirmText: \"Search\",\n      patient: this.context.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5497\n      },\n      __self: this\n    }))))))), React.createElement(Tab.Pane, {\n      eventKey: \"SearchResult\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5514\n      },\n      __self: this\n    }, React.createElement(Container, {\n      className: \"containerSearchUserResults\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5515\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5516\n      },\n      __self: this\n    }, React.createElement(Card, {\n      className: \"searchCard\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5517\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      className: \"searchCardBody\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5518\n      },\n      __self: this\n    }, React.createElement(Card.Title, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5519\n      },\n      __self: this\n    }, \"Your Search\"), React.createElement(Card.Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5520\n      },\n      __self: this\n    }, \"Field: \", this.state.patientSearchField), React.createElement(Card.Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5523\n      },\n      __self: this\n    }, \"Query: \", this.state.patientSearchQuery)))), React.createElement(Row, {\n      className: \"searchListRow\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5529\n      },\n      __self: this\n    }, this.state.searchPatients !== [] && React.createElement(SearchPatientList, {\n      searchPatients: this.state.searchPatients,\n      authUserId: this.context.userId,\n      onCancel: this.modalCancelHandler,\n      onViewDetail: this.showDetailHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5532\n      },\n      __self: this\n    })))))))))), React.createElement(Col, {\n      md: 3,\n      className: \"MasterCol3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5557\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nPatientsPage.contextType = AuthContext;\nexport default PatientsPage;","map":{"version":3,"sources":["/Users/pedrojacob/Downloads/AMR/websites/office_records/ENT_EMR/frontend/src/pages/Patients.js"],"names":["React","Component","S3","Container","Row","Col","Button","Accordion","SidebarPage","Tabs","Tab","Nav","Card","PatientList","PatientDetail","Spinner","AuthContext","SearchPatientList","SearchPatientForm","SearchPatientIdForm","SearchPatientNameForm","AlertBox","AttachmentViewer","PdfCreator","CreatePatientForm","UpdatePatientForm","UpdatePatientFieldForm","UpdatePatientConsultantForm","UpdatePatientInsuranceForm","UpdatePatientNextOfKinForm","UpdatePatientComplaintForm","UpdatePatientSurveyForm","UpdatePatientSystematicInquiryForm","UpdatePatientVitalsForm","UpdatePatientExaminationForm","UpdatePatientHistoryForm","UpdatePatientAllergiesForm","UpdatePatientMedicationForm","UpdatePatientInvestigationForm","UpdatePatientDiagnosisForm","UpdatePatientTreatmentForm","UpdatePatientBillingForm","UpdatePatientVigilanceForm","UpdatePatientAttachmentForm","UpdatePatientNoteForm","UpdatePatientTagForm","PatientsPage","constructor","props","state","creating","updating","searching","updatingArray","deleting","patients","searchPatients","isLoading","selectedPatient","patientUpdateField","patientSearchField","patientSearchQuery","canDelete","visit","visitList","selectedVisit","newVisit","createVisitChecklist","consultant","complaint","diagnosis","examination","investigation","survey","systematicInquiry","treatment","vitals","billing","vigilance","userAlert","showAttachment","showThisAttachmentFile","showThisAttachmentType","createPdf","pdfData","isActive","startCreatePatientHandler","setState","console","log","startCreateVisitHandler","startUpdatePatientHandler","startSearchPatientHandler","modalConfirmHandler","event","target","formGridName","value","userId","context","title","formGridTitle","name","dob","formGridDob","age","formGridAge","gender","formGridGender","addressNumber","formGridAddressNumber","addressStreet","formGridAddressStreet","addressTown","formGridAddressTown","addressParish","formGridAddressParish","addressPostOffice","formGridAddressPostOffice","contactPhone","formGridContactPhone","contactEmail","formGridContactEmail","registrationDate","formGridRegistrationDate","formGridRegistrationDateTodayCheckbox","checked","Date","toISOString","slice","referralDate","formGridReferralDate","formGridReferralDateTodayCheckbox","expirationDate","formGridExpirationDate","attendingPhysicianName","formGridAttendingPhysicianName","attendingPhysicianEmail","formGridAttendingPhysicianEmail","attendingPhysicianPhone","formGridAttendingPhysicianPhone","referringDoctorName","formGridReferringDoctorName","referringDoctorEmail","formGridReferringDoctorEmail","referringDoctorPhone","formGridReferringDoctorPhone","occupationRole","formGridOccupationRole","occupationEmployer","formGridOccupationEmployer","occupationEmployerContactPhone","formGridOccupationEmployerContactPhone","occupationEmployerContactEmail","formGridOccupationEmployerContactEmail","trim","length","requestBody","query","token","fetch","method","body","JSON","stringify","headers","Authorization","then","res","status","Error","json","resData","data","createPatient","responseAlert","newPatient","prevState","updatedPatients","push","catch","err","modalCancelHandler","modalConfirmUpdateHandler","selectedPatientId","_id","formGridExpirationDateTodayCheckbox","address","number","street","town","parish","postOffice","contact","phone","email","attendingPhysician","referringDoctor","occupation","role","employer","updatedPatientId","updatePatient","updatedPatient","find","e","updatedPatientPos","indexOf","slicedArray","splice","fetchPatients","modalConfirmUpdateFieldHandler","formGridField","field","formGridQuery","formGridFieldSelect","updatePatientField","updatePatientConsultantHandler","preventDefault","patientConsultantReference","selectedUser","undefined","consultantDate","formGridConsultantDate","formGridConsultantDateTodayCheckbox","updatePatientConsultant","updatePatientInsuranceHandler","formGridInsuranceCompany","insuranceCompany","insuranceNumber","formGridInsuranceNumber","insuranceExpiry","formGridInsuranceExpiry","insuranceDescription","formGridInsuranceDescription","insuranceSubscriberCompany","formGridInsuranceSubscriberCompany","insuranceSubscriberDescription","formGridInsuranceSubscriberDescription","updatePatientInsurance","updatePatientNextOfKinHandler","formGridNextOfKinName","nextOfKinName","nextOfKinPhone","formGridNextOfKinPhone","nextOfKinEmail","formGridNextOfKinEmail","updatePatientNextOfKin","updatePatientComplaintHandler","formGridComplaintTitle","complaintTitle","complaintDate","formGridComplaintDate","formGridComplaintDateTodayCheckbox","complaintDescription","formGridComplaintDescription","complaintAnamnesis","formGridComplaintAnamnesis","complaintAttachmentFormat","formGridComplaintAttachmentFormat","complaintAttachmentPath","file","_currentValue","config","bucketName","creds","s3","dirName","region","accessKeyId","secretAccessKey","ReactS3Client","newFileName","complaintAttachmentName","uploadFile","error","updatePatientComplaint","updatePatientSurveyHandler","formGridSurveyTitle","surveyDate","formGridSurveyDate","formGridSurveyDateTodayCheckbox","surveyTitle","surveyDescription","formGridSurveyDescription","surveyAttachmentFormat","formGridSurveyAttachmentFormat","surveyAttachmentPath","surveyAttachmentName","updatePatientSurvey","updatePatientSystematicInquiryHandler","formGridSystematicInquiryTitle","systematicInquiryDate","formGridSystematicInquiryDate","formGridSystematicInquiryDateTodayCheckbox","systematicInquiryTitle","systematicInquiryDescription","formGridSystematicInquiryDescription","systematicInquiryAttachmentFormat","formGridSystematicInquiryAttachmentFormat","systematicInquiryAttachmentPath","systematicInquiryAttachmentName","updatePatientVitalsHandler","formGridVitalsDate","vitalsDate","formGridVitalsDateTodayCheckbox","vitalsPr","formGridVitalsPr","vitalsBp1","formGridVitalsBp1","vitalsBp2","formGridVitalsBp2","vitalsRr","formGridVitalsRr","vitalsTemp","formGridVitalsTemp","vitalsPs02","formGridVitalsPs02","vitalsHeight","formGridVitalsHeight","vitalsWeight","formGridVitalsWeight","vitalsBmi","formGridVitalsBmi","vitalsUrineType","formGridVitalsUrineType","vitalsUrineValue","formGridVitalsUrineValue","updatePatientVitals","updatePatientExaminationHandler","formGridExaminationArea","examinationDate","formGridExaminationDate","formGridExaminationDateTodayCheckbox","examinationGeneral","formGridExaminationGeneral","examinationArea","formGridExaminationAreaSelect","examinationType","formGridExaminationType","examinationMeasure","formGridExaminationMeasure","examinationValue","formGridExaminationValue","examinationDescription","formGridExaminationDescription","examinationFollowUp","formGridExaminationFollowUp","examinationAttachmentFormat","formGridExaminationAttachmentFormat","examinationAttachmentPath","examinationAttachmentName","updatePatientExamination","updatePatientHistoryHandler","formGridHistoryTitle","historyType","formGridHistoryType","historyDate","formGridHistoryDate","formGridHistoryDateTodayCheckbox","historyTitle","historyDescription","formGridHistoryDescription","historyAttachmentFormat","formGridHistoryAttachmentFormat","historyAttachmentPath","historyAttachmentName","updatePatientHistory","updatePatientAllergiesHandler","formGridAllergiesTitle","allergiesTitle","allergiesType","formGridAllergiesTypeSelect","formGridAllergiesType","allergiesDescription","formGridAllergiesDescription","allergiesAttachmentFormat","formGridAllergiesAttachmentFormat","allergiesAttachmentPath","allergiesAttachmentName","updatePatientAllergies","updatePatientMedicationHandler","formGridMedicationTitle","medicationTitle","medicationType","formGridMedicationType","medicationDescription","formGridMedicationDescription","medicationAttachmentFormat","formGridMedicationAttachmentFormat","medicationAttachmentPath","medicationAttachmentName","updatePatientMedication","updatePatientInvestigationHandler","formGridInvestigationTitle","investigationDate","formGridInvestigationDate","formGridInvestigationDateTodayCheckbox","investigationTitle","investigationType","formGridInvestigationTypeSelect","formGridInvestigationType","investigationDescription","formGridInvestigationDescription","investigationAttachmentFormat","formGridInvestigationAttachmentFormat","investigationAttachmentPath","investigationAttachmentName","updatePatientInvestigation","updatePatientDiagnosisHandler","formGridDiagnosisTitle","diagnosisDate","formGridDiagnosisDate","formGridDiagnosisDateTodayCheckbox","diagnosisTitle","diagnosisType","formGridDiagnosisType","diagnosisDescription","formGridDiagnosisDescription","diagnosisAttachmentFormat","formGridDiagnosisAttachmentFormat","diagnosisAttachmentPath","diagnosisAttachmentName","updatePatientDiagnosis","updatePatientTreatmentHandler","formGridTreatmentTitle","treatmentDate","formGridTreatmentDate","formGridTreatmentDateTodayCheckbox","treatmentTitle","treatmentDescription","formGridTreatmentDescription","treatmentDose","formGridTreatmentDose","treatmentFrequency","formGridTreatmentFrequency","treatmentType","formGridTreatmentType","formGridTreatmentTypeSelect","treatmentAttachmentFormat","formGridTreatmentAttachmentFormat","treatmentAttachmentPath","treatmentAttachmentName","updatePatientTreatment","updatePatientBillingHandler","formGridBillingTitle","billingDate","formGridBillingDate","formGridBillingDateTodayCheckbox","billingTitle","billingType","formGridBillingType","billingDescription","formGridBillingDescription","billingAmount","formGridBillingAmount","billingPaid","formGridBillingPaid","billingNotes","formGridBillingNotes","billingAttachmentFormat","formGridBillingAttachmentFormat","billingAttachmentPath","billingAttachmentName","updatePatientBilling","updatePatientAttachmentHandler","attachmentFormat","formGridPatientAttachmentFormat","attachmentPath","attachmentName","updatePatientAttachment","updatePatientNoteHandler","formGridNote","note","updatePatientNotes","updatePatientTagHandler","formGridTag","tag","updatePatientTags","modalConfirmSearchHandler","formBasicField","formBasicQuery","formBasicFieldSelect","getPatientField","modalConfirmSearchIdHandler","patientId","formBasicId","getPatientId","modalConfirmSearchNameHandler","formBasicName","regex","RegExp","result","filter","patient","match","getPatientVisit","complaints","formBasicVisitDate","visitDate","substring","visitSurveys","surveys","x","date","substr","visitConsultants","visitComplaints","visitVitals","visitExaminations","visitHistory","history","visitInvestigations","visitDiagnosis","visitTreatments","visitBilling","patientName","getVisitList","selectedPatientAppointmentDateArray","selectedPatientAppointmentVisitArray","selectedPatientAppointments","appointments","map","appointmentDate","thisGetVisit","argsDate","argsPatientName","getVisitListAsc","list","sort","a","b","getVisitListDesc","fetchPatientsAsc","patientsNameAsc","fetchPatientsDesc","patientsNameDesc","modalDeleteHandler","user","deletedPatient","deletePatient","deletedPatientId","deletedPatientPos","deletePatientInsuranceItem","company","deletePatientInsurance","deletePatientAppointmentItem","deletePatientAppointment","deletePatientConsultantItem","reference","id","deletePatientConsultant","deletePatientNextOfKinItem","deletePatientNextOfKin","deletePatientComplaintItem","deletePatientComplaint","deletePatientSurveyItem","deletePatientSurvey","deletePatientSystematicInquiryItem","deletePatientSystematicInquiry","deletePatientVitalsItem","deletePatientVitals","deletePatientExaminationItem","type","deletePatientExamination","deletePatientHistoryItem","deletePatientHistory","deletePatientAllergiesItem","deletePatientAllergies","deletePatientMedicationItem","deletePatientMedication","deletePatientInvestigationItem","deletePatientInvestigation","deletePatientDiagnosisItem","deletePatientDiagnosis","deletePatientTreatmentItem","deletePatientTreatment","deletePatientBillingItem","deletePatientBilling","deletePatientVigilanceItem","deletePatientVigilance","deletePatientAttachmentItem","deletePatientAttachment","deletePatientNoteItem","deletePatientNote","deletePatientTagItem","deletePatientTag","onViewAttachment","attachment","path","format","closeAttachmentView","insurance","nextOfKin","allergies","medication","attachments","notes","tags","closePdfCreator","showDetailHandler","selectVisit","closeVisit","createVisitChecklistUpdate","newState","Object","assign","newVisitComplete","nameElRef","createRef","componentDidMount","updatePatientSpecial","componentWillUnmount","render","fetchUsers","updatePatientVigilanceHandler","bind","contextType"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport S3 from 'react-aws-s3';\n// import S3FileUpload from 'react-s3';\n\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Button from 'react-bootstrap/Button';\nimport Accordion from 'react-bootstrap/Accordion';\nimport SidebarPage from './Sidebar';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\n// import TabContainer from 'react-bootstrap/TabContainer';\n// import TabContent from 'react-bootstrap/TabContent';\n// import TabPane from 'react-bootstrap/TabPane';\nimport Nav from 'react-bootstrap/Nav';\nimport Card from 'react-bootstrap/Card';\n\nimport PatientList from '../components/Patients/PatientList/PatientList';\nimport PatientDetail from '../components/Patients/PatientDetail';\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\nimport SearchPatientList from '../components/Patients/PatientList/SearchPatientList';\nimport SearchPatientForm from '../components/Forms/SearchPatientForm';\nimport SearchPatientIdForm from '../components/Forms/SearchPatientIdForm';\nimport SearchPatientNameForm from '../components/Forms/SearchPatientNameForm';\n// import SearchPatientVisitForm from '../components/Forms/SearchPatientVisitForm';\n\nimport AlertBox from '../components/AlertBox';\nimport AttachmentViewer from '../components/AttachmentViewer';\nimport PdfCreator from '../components/PdfCreator';\n\nimport CreatePatientForm from '../components/Forms/CreatePatientForm';\nimport UpdatePatientForm from '../components/Forms/UpdatePatientForm';\nimport UpdatePatientFieldForm from '../components/Forms/UpdatePatientFieldForm';\nimport UpdatePatientConsultantForm from '../components/Forms/UpdatePatientConsultantForm';\nimport UpdatePatientInsuranceForm from '../components/Forms/UpdatePatientInsuranceForm';\nimport UpdatePatientNextOfKinForm from '../components/Forms/UpdatePatientNextOfKinForm';\nimport UpdatePatientComplaintForm from '../components/Forms/UpdatePatientComplaintForm';\nimport UpdatePatientSurveyForm from '../components/Forms/UpdatePatientSurveyForm';\nimport UpdatePatientSystematicInquiryForm from '../components/Forms/UpdatePatientSystematicInquiryForm';\nimport UpdatePatientVitalsForm from '../components/Forms/UpdatePatientVitalsForm';\nimport UpdatePatientExaminationForm from '../components/Forms/UpdatePatientExaminationForm';\nimport UpdatePatientHistoryForm from '../components/Forms/UpdatePatientHistoryForm';\nimport UpdatePatientAllergiesForm from '../components/Forms/UpdatePatientAllergiesForm';\nimport UpdatePatientMedicationForm from '../components/Forms/UpdatePatientMedicationForm';\nimport UpdatePatientInvestigationForm from '../components/Forms/UpdatePatientInvestigationForm';\nimport UpdatePatientDiagnosisForm from '../components/Forms/UpdatePatientDiagnosisForm';\nimport UpdatePatientTreatmentForm from '../components/Forms/UpdatePatientTreatmentForm';\nimport UpdatePatientBillingForm from '../components/Forms/UpdatePatientBillingForm';\nimport UpdatePatientVigilanceForm from '../components/Forms/UpdatePatientVigilanceForm';\nimport UpdatePatientAttachmentForm from '../components/Forms/UpdatePatientAttachmentForm';\nimport UpdatePatientNoteForm from '../components/Forms/UpdatePatientNoteForm';\nimport UpdatePatientTagForm from '../components/Forms/UpdatePatientTagForm';\n\nimport './Users.css';\n\nclass PatientsPage extends Component {\n  state = {\n    creating: false,\n    updating: false,\n    searching: false,\n    updatingArray: false,\n    deleting: false,\n    patients: [],\n    searchPatients: [],\n    isLoading: false,\n    selectedPatient: null,\n    patientUpdateField: null,\n    patientSearchField: null,\n    patientSearchQuery: null,\n    canDelete: null,\n    visit: null,\n    visitList: [],\n    selectedVisit: null,\n    newVisit: false,\n    createVisitChecklist: {\n      consultant: false,\n      complaint: false,\n      diagnosis: false,\n      examination: false,\n      investigation: false,\n      survey: false,\n      systematicInquiry: false,\n      treatment: false,\n      vitals: false,\n      billing: false,\n      vigilance: false\n    },\n    newVisit: false,\n    userAlert: null,\n    showAttachment: false,\n    showThisAttachmentFile: null,\n    showThisAttachmentType: null,\n    createPdf: false,\n    pdfData: null,\n  };\n  isActive = true;\n\n  static contextType = AuthContext;\n\n  constructor(props) {\n    super(props);\n    this.nameElRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.fetchPatients();\n    if (this.context.user.name === \"Lord-of-the-Manor\"){\n      this.setState({canDelete: true})\n    }\n    // if (this.context.user.name === 'admin579'){\n    //   this.setState({canDelete: true})\n    // }\n  }\n\n\n  startCreatePatientHandler = () => {\n    this.setState({ creating: true });\n    console.log(\"CreatePatientForm...\");\n  };\n  startCreateVisitHandler = () => {\n    this.setState({ newVisit: true });\n    console.log(\"CreateVisitForm...\");\n  };\n  startUpdatePatientHandler = () => {\n    this.setState({ updating: true, updatingArray: true });\n    console.log(\"UpdatePatientForm...\");\n  };\n  startSearchPatientHandler = () => {\n    this.setState({ searching: true });\n    console.log(\"SearchPatientForm...\");\n  };\n\n  modalConfirmHandler = (event) => {\n\n    console.log(\"CreatePatientFormData:  \", event.target.formGridName.value);\n\n    this.setState({ creating: false });\n    const userId = this.context.userId;\n\n    let title = event.target.formGridTitle.value;\n    let name = event.target.formGridName.value;\n    let dob = event.target.formGridDob.value;\n    let age = event.target.formGridAge.value;\n    let gender = event.target.formGridGender.value;\n    let addressNumber = event.target.formGridAddressNumber.value;\n    let addressStreet = event.target.formGridAddressStreet.value;\n    let addressTown = event.target.formGridAddressTown.value;\n    let addressParish = event.target.formGridAddressParish.value;\n    let addressPostOffice = event.target.formGridAddressPostOffice.value;\n    let contactPhone = event.target.formGridContactPhone.value;\n    let contactEmail = event.target.formGridContactEmail.value;\n\n    let registrationDate = event.target.formGridRegistrationDate.value;\n    if (event.target.formGridRegistrationDateTodayCheckbox.checked === true) {\n      registrationDate = new Date().toISOString().slice(0,10);\n    }\n    let referralDate = event.target.formGridReferralDate.value;\n    if (event.target.formGridReferralDateTodayCheckbox.checked === true) {\n      referralDate = new Date().toISOString().slice(0,10);\n    }\n\n    let expirationDate = event.target.formGridExpirationDate.value;\n    let attendingPhysicianName = event.target.formGridAttendingPhysicianName.value;\n    let attendingPhysicianEmail = event.target.formGridAttendingPhysicianEmail.value;\n    let attendingPhysicianPhone = event.target.formGridAttendingPhysicianPhone.value;\n    let referringDoctorName = event.target.formGridReferringDoctorName.value;\n    let referringDoctorEmail = event.target.formGridReferringDoctorEmail.value;\n    let referringDoctorPhone = event.target.formGridReferringDoctorPhone.value;\n    let occupationRole = event.target.formGridOccupationRole.value;\n    let occupationEmployer = event.target.formGridOccupationEmployer.value;\n    let occupationEmployerContactPhone = event.target.formGridOccupationEmployerContactPhone.value;\n    let occupationEmployerContactEmail = event.target.formGridOccupationEmployerContactEmail.value;\n\n\n    if (\n      name.trim().length === 0 ||\n      // title.trim().length === 0 ||\n      // name.trim().length === 0 ||\n      // dob.trim().length === 0 ||\n      age.trim().length === 0 ||\n      // gender.trim().length === 0 ||\n      addressNumber.trim().length === 0 ||\n      addressStreet.trim().length === 0 ||\n      // addressTown.trim().length === 0 ||\n      // addressParish.trim().length === 0 ||\n      // addressPostOffice.trim().length === 0 ||\n      contactPhone.trim().length === 0 ||\n      // contactEmail.trim().length === 0 ||\n      registrationDate.trim().length === 0\n      // referralDate.trim().length === 0 ||\n      // expirationDate.trim().length === 0 ||\n      // attendingPhysicianName.trim().length === 0 ||\n      // attendingPhysicianEmail.trim().length === 0 ||\n      // attendingPhysicianPhone.trim().length === 0 ||\n      // referringDoctorName.trim().length === 0 ||\n      // referringDoctorEmail.trim().length === 0 ||\n      // referringDoctorPhone.trim().length === 0 ||\n      // occupationRole.trim().length === 0 ||\n      // occupationEmployer.trim().length === 0 ||\n      // occupationEmployerContactPhone.trim().length === 0 ||\n      // occupationEmployerContactEmail.trim().length === 0\n\n    ) {\n      console.log(\"patient must have at least: Name, Age, Contact Number, Street Name & Number and Registration Date!!!...Please try again...\");\n      this.setState({userAlert: \"patient must have at least: Name, Age, Contact Number, Street Name & Number and Registration Date!!!...Please try again...\"});\n      return;\n    }\n\n    console.log(`\n      creating patient...\n      title: ${title},\n      name: ${name},\n      dob: ${dob},\n      age: ${age},\n      gender: ${gender},\n      addressNumber: ${addressNumber},\n      addressStreet: ${addressStreet},\n      addressTown: ${addressTown},\n      addressParish: ${addressParish},\n      addressPostOffice: ${addressPostOffice},\n      contactPhone: ${contactPhone},\n      contactEmail: ${contactEmail},\n      registrationDate: ${registrationDate},\n      referralDate: ${referralDate},\n      expirationDate: ${expirationDate},\n      attendingPhysicianName: ${attendingPhysicianName},\n      attendingPhysicianEmail: ${attendingPhysicianEmail},\n      attendingPhysicianPhone: ${attendingPhysicianPhone},\n      referringDoctorName: ${referringDoctorName},\n      referringDoctorEmail: ${referringDoctorEmail},\n      referringDoctorPhone: ${referringDoctorPhone},\n      occupationRole: ${occupationRole},\n      occupationEmployer: ${occupationEmployer},\n      occupationEmployerContactPhone: ${occupationEmployerContactPhone},\n      occupationEmployerContactEmail: ${occupationEmployerContactEmail},\n      `);\n\n    const requestBody = {\n      query: `\n        mutation {createPatient(userId:\"${userId}\", patientInput:{title:\"${title}\",name:\"${name}\",dob:\"${dob}\",age:${age},gender:\"${gender}\",addressNumber:${addressNumber},addressStreet:\"${addressStreet}\",addressTown:\"${addressTown}\",addressParish:\"${addressParish}\",addressPostOffice:\"${addressPostOffice}\",contactPhone:\"${contactPhone}\",contactEmail:\"${contactEmail}\",registrationDate:\"${registrationDate}\",referralDate:\"${referralDate}\",expirationDate:\"${expirationDate}\",referringDoctorName:\"${referringDoctorName}\",referringDoctorEmail:\"${referringDoctorEmail}\",referringDoctorPhone:\"${referringDoctorPhone}\",attendingPhysicianName:\"${attendingPhysicianName}\",attendingPhysicianEmail:\"${attendingPhysicianEmail}\",attendingPhysicianPhone:\"${attendingPhysicianPhone}\",occupationRole:\"${occupationRole}\",occupationEmployer:\"${occupationEmployer}\",occupationEmployerContactPhone:\"${occupationEmployerContactPhone}\",occupationEmployerContactEmail:\"${occupationEmployerContactEmail}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n        `};\n\n    const token = this.context.token;\n\n    // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(`\n          response data:\n          ${JSON.stringify(resData.data.createPatient)}\n          `);\n          const responseAlert = JSON.stringify(resData.data).slice(2,15);\n          this.setState({userAlert: responseAlert});\n\n        const newPatient = resData.data.createPatient;\n        this.setState(prevState => {\n          const updatedPatients = [...prevState.patients];\n          updatedPatients.push(newPatient);\n\n          return { patients: updatedPatients };\n        });\n\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n  };\n\n  modalCancelHandler = () => {\n    this.setState({ creating: false, updating: false });\n  };\n\n\n  modalConfirmUpdateHandler = (event) => {\n\n    // if(this.context.user.role !== 'admin') {\n    //   console.log(\"Not the Admin! No edit permission!!\");\n    // }\n\n    const userId = this.context.userId;\n    const selectedPatientId = this.context.selectedPatient._id;\n\n    console.log(\"UpdatePatientFormData:  \", event.target.formGridName.value);\n\n\n    this.setState({ updating: false });\n\n    let title = event.target.formGridTitle.value;\n    let name = event.target.formGridName.value;\n    let dob = event.target.formGridDob.value;\n    let age = event.target.formGridAge.value;\n    let gender = event.target.formGridGender.value;\n    let addressNumber = event.target.formGridAddressNumber.value;\n    let addressStreet = event.target.formGridAddressStreet.value;\n    let addressTown = event.target.formGridAddressTown.value;\n    let addressParish = event.target.formGridAddressParish.value;\n    let addressPostOffice = event.target.formGridAddressPostOffice.value;\n    let contactPhone = event.target.formGridContactPhone.value;\n    let contactEmail = event.target.formGridContactEmail.value;\n\n    let registrationDate = event.target.formGridRegistrationDate.value;\n    if (event.target.formGridRegistrationDateTodayCheckbox.checked === true) {\n      registrationDate = new Date().toISOString().slice(0,10);\n    }\n\n    let referralDate = event.target.formGridReferralDate.value;\n    if (event.target.formGridReferralDateTodayCheckbox.checked === true) {\n      referralDate = new Date().toISOString().slice(0,10);\n    }\n\n    let expirationDate = event.target.formGridExpirationDate.value;\n    if (event.target.formGridExpirationDateTodayCheckbox.checked === true) {\n      expirationDate = new Date().toISOString().slice(0,10);\n    }\n\n    let attendingPhysicianName = event.target.formGridAttendingPhysicianName.value;\n    let attendingPhysicianEmail = event.target.formGridAttendingPhysicianEmail.value;\n    let attendingPhysicianPhone = event.target.formGridAttendingPhysicianPhone.value;\n    let referringDoctorName = event.target.formGridReferringDoctorName.value;\n    let referringDoctorEmail = event.target.formGridReferringDoctorEmail.value;\n    let referringDoctorPhone = event.target.formGridReferringDoctorPhone.value;\n    let occupationRole = event.target.formGridOccupationRole.value;\n    let occupationEmployer = event.target.formGridOccupationEmployer.value;\n    let occupationEmployerContactPhone = event.target.formGridOccupationEmployerContactPhone.value;\n    let occupationEmployerContactEmail = event.target.formGridOccupationEmployerContactEmail.value;\n\n    if (title.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      title = this.context.selectedPatient.title;\n    }\n    if (name.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      name = this.context.selectedPatient.name;\n    }\n    if (dob.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      dob = this.context.selectedPatient.dob;\n    }\n    if (gender.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      gender = this.context.selectedPatient.gender;\n    }\n    if (age.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      age = this.context.selectedPatient.age;\n    }\n    if (addressNumber.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      addressNumber = this.context.selectedPatient.address.number;\n    }\n    if (addressStreet.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      addressStreet = this.context.selectedPatient.address.street;\n    }\n    if (addressTown.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      addressTown = this.context.selectedPatient.address.town;\n    }\n    if (addressParish.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      addressParish = this.context.selectedPatient.address.parish;\n    }\n    if (addressPostOffice.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      addressPostOffice = this.context.selectedPatient.address.postOffice;\n    }\n    if (contactPhone.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      contactPhone = this.context.selectedPatient.contact.phone;\n    }\n    if (contactEmail.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      contactEmail = this.context.selectedPatient.contact.email;\n    }\n    if (registrationDate.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      registrationDate = this.context.selectedPatient.registrationDate;\n    }\n    if (attendingPhysicianName.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      attendingPhysicianName = this.context.selectedPatient.attendingPhysician.name;\n    }\n    if (attendingPhysicianEmail.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      attendingPhysicianEmail = this.context.selectedPatient.attendingPhysician.email;\n    }\n    if (attendingPhysicianPhone.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      attendingPhysicianPhone = this.context.selectedPatient.attendingPhysician.phone;\n    }\n    if (referringDoctorName.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      referringDoctorName = this.context.selectedPatient.referringDoctor.name;\n    }\n    if (referringDoctorEmail.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      referringDoctorEmail = this.context.selectedPatient.referringDoctor.email;\n    }\n    if (referringDoctorPhone.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      referringDoctorPhone = this.context.selectedPatient.referringDoctor.phone;\n    }\n    if (occupationRole.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      occupationRole = this.context.selectedPatient.occupation.role;\n    }\n    if (occupationEmployer.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      occupationEmployer = this.context.selectedPatient.occupation.employer;\n    }\n    if (occupationEmployerContactEmail.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      occupationEmployerContactEmail = this.context.selectedPatient.occupation.contact.email;\n    }\n    if (occupationEmployerContactPhone.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      occupationEmployerContactPhone = this.context.selectedPatient.occupation.contact.phone;\n    }\n\n\n    console.log(`\n      updating patient...\n      title: ${title},\n      name: ${name},\n      dob: ${dob},\n      age: ${age},\n      gender: ${gender},\n      addressNumber: ${addressNumber},\n      addressStreet: ${addressStreet},\n      addressTown: ${addressTown},\n      addressParish: ${addressParish},\n      addressPostOffice: ${addressPostOffice},\n      contactPhone: ${contactPhone},\n      contactEmail: ${contactEmail},\n      registrationDate: ${registrationDate},\n      referralDate: ${referralDate},\n      expirationDate: ${expirationDate},\n      attendingPhysicianName: ${attendingPhysicianName},\n      attendingPhysicianEmail: ${attendingPhysicianEmail},\n      attendingPhysicianPhone: ${attendingPhysicianPhone},\n      referringDoctorName: ${referringDoctorName},\n      referringDoctorEmail: ${referringDoctorEmail},\n      referringDoctorPhone: ${referringDoctorPhone},\n      occupationRole: ${occupationRole},\n      occupationEmployer: ${occupationEmployer},\n      occupationEmployerContactPhone: ${occupationEmployerContactPhone},\n      occupationEmployerContactEmail: ${occupationEmployerContactEmail},\n      `);\n      this.setState({userAlert: \"updating patient...\"});\n\n    const requestBody = {\n      query: `\n          mutation {updatePatient(userId:\"${userId}\",patientId:\"${selectedPatientId}\", patientInput:{title:\"${title}\",name:\"${name}\",dob:\"${dob}\",age:${age},gender:\"${gender}\",addressNumber:${addressNumber},addressStreet:\"${addressStreet}\",addressTown:\"${addressTown}\",addressParish:\"${addressParish}\",addressPostOffice:\"${addressPostOffice}\",contactPhone:\"${contactPhone}\",contactEmail:\"${contactEmail}\",registrationDate:\"${registrationDate}\",referralDate:\"${referralDate}\",expirationDate:\"${expirationDate}\",referringDoctorName:\"${referringDoctorName}\",referringDoctorEmail:\"${referringDoctorEmail}\",referringDoctorPhone:\"${referringDoctorPhone}\",attendingPhysicianName:\"${attendingPhysicianName}\",attendingPhysicianEmail:\"${attendingPhysicianEmail}\",attendingPhysicianPhone:\"${attendingPhysicianPhone}\",occupationRole:\"${occupationRole}\",occupationEmployer:\"${occupationEmployer}\",occupationEmployerContactPhone:\"${occupationEmployerContactPhone}\",occupationEmployerContactEmail:\"${occupationEmployerContactPhone}\"})\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n        `};\n\n    const token = this.context.token;\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n\n        const updatedPatientId = resData.data.updatePatient._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatient);\n\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert})\n        this.fetchPatients();\n\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n  };\n\n\n  modalConfirmUpdateFieldHandler = (event) => {\n\n    const token = this.context.token;\n    const userId = this.context.userId;\n    let selectedPatientId = this.context.selectedPatient._id;\n\n    // if( this.context.user.role !== 'admin') {\n    //   console.log(\"Not the creator or Admin! No edit permission!!\");\n    //   selectedPatientId = null;\n    // }\n\n      console.log(\"UpdatePatientFieldFormData:  \", event.target.formGridField.value);\n      this.setState({ updating: false });\n\n      let field = null;\n      let query = event.target.formGridQuery.value;\n      if (event.target.formGridFieldSelect.value === \"select\") {\n        field = event.target.formGridField.value;\n      } else {\n        field = event.target.formGridFieldSelect.value;\n      }\n\n      const requestBody = {\n        query:`\n          mutation {updatePatientField(userId:\"${userId}\",patientId:\"${selectedPatientId}\",field:\"${field}\",query:\"${query}\")\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n        `};\n\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData.data.updatePatientField));\n\n          const updatedPatientId = resData.data.updatePatientField._id;\n          const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n          const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n          const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n          console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n          this.state.patients.push(resData.data.updatePatientField);\n          this.context.patients = this.state.patients;\n          const responseAlert = JSON.stringify(resData.data).slice(2,25);\n          this.setState({ userAlert: responseAlert})\n          this.fetchPatients();\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({userAlert: err});\n        });\n\n  }\n\n\nupdatePatientConsultantHandler = (event) => {\n  event.preventDefault();\n\n  let token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n  const patientConsultantReference = this.context.selectedUser._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n  if (patientConsultantReference === undefined) {\n    console.log(`\n      select a Staff member before adding a Patient Consultant!!\n      `);\n      this.setState({userAlert: \"select a Staff member before adding a Patient Consultant!!...\"});\n      token = null;\n  }\n\n  // console.log(\"UpdatePatientConsultantFormData:  \", event.target.formGridConsultantDate.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let consultantDate = null;\n  if (event.target.formGridConsultantDate) {\n    consultantDate = event.target.formGridConsultantDate.value;\n  }\n  if (event.target.formGridConsultantDateTodayCheckbox.checked === true) {\n    consultantDate = new Date().toISOString().slice(0,10);\n  }\n\n  console.log(`\n    adding patient consultant item...\n    userId: ${userId},\n    selectedPatientId: ${selectedPatientId},\n    consultantDate: ${consultantDate},\n    consultantReference: ${patientConsultantReference},\n    `);\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientConsultant(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{consultantDate:\" ${consultantDate}\",consultantReference: \"${patientConsultantReference}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `\n    };\n\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData.data));\n\n          const updatedPatientId = resData.data.updatePatientConsultant._id;\n          const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n          const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n          const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n          console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n          this.state.patients.push(resData.data.updatePatientConsultant);\n          this.context.patients = this.state.patients;\n          const responseAlert = JSON.stringify(resData.data).slice(2,25);\n          this.setState({ userAlert: responseAlert})\n          this.fetchPatients();\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({userAlert: err});\n        });\n\n}\nupdatePatientInsuranceHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientInsuranceFormData:  \", event.target.formGridInsuranceCompany.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let insuranceCompany = event.target.formGridInsuranceCompany.value;\n  let insuranceNumber = event.target.formGridInsuranceNumber.value;\n\n  let insuranceExpiry = event.target.formGridInsuranceExpiry.value;\n\n  let insuranceDescription = event.target.formGridInsuranceDescription.value;\n  let insuranceSubscriberCompany = event.target.formGridInsuranceSubscriberCompany.value;\n  let insuranceSubscriberDescription = event.target.formGridInsuranceSubscriberDescription.value;\n\n\n  console.log(`\n    adding patient insurance item...\n    userId: ${userId},\n    selectedPatientId: ${selectedPatientId},\n    insuranceCompany: ${insuranceCompany},\n    insuranceNumber: ${insuranceNumber},\n    insuranceExpiry: ${insuranceExpiry},\n    insuranceDescription: ${insuranceDescription},\n    insuranceSubscriberCompany: ${insuranceSubscriberCompany},\n    insuranceSubscriberDescription: ${insuranceSubscriberDescription},\n    `);\n    this.setState({userAlert: \"adding patient insurance item...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientInsurance(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{insuranceCompany:\"${insuranceCompany}\",insuranceNumber:\"${insuranceNumber}\",insuranceDescription:\"${insuranceDescription}\",insuranceExpiry:\"${insuranceExpiry}\",insuranceSubscriberCompany:\"${insuranceSubscriberCompany}\",insuranceSubscriberDescription:\"${insuranceSubscriberDescription}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `\n    };\n\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData.data));\n\n          const updatedPatientId = resData.data.updatePatientInsurance._id;\n          const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n          const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n          const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n          console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n          this.state.patients.push(resData.data.updatePatientInsurance);\n          this.context.patients = this.state.patients;\n          const responseAlert = JSON.stringify(resData.data).slice(2,25);\n          this.setState({ userAlert: responseAlert})\n          this.fetchPatients();\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({userAlert: err});\n        });\n\n}\n\nupdatePatientNextOfKinHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientNextOfKinFormData:  \", event.target.formGridNextOfKinName.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let nextOfKinName = event.target.formGridNextOfKinName.value;\n  let nextOfKinPhone = event.target.formGridNextOfKinPhone.value;\n  let nextOfKinEmail = event.target.formGridNextOfKinEmail.value;\n\n\n  console.log(`\n    adding patient nextOfKin item...\n    userId: ${userId},\n    selectedPatientId: ${selectedPatientId},\n    nextOfKinName: ${nextOfKinName},\n    nextOfKinPhone: ${nextOfKinPhone},\n    nextOfKinEmail: ${nextOfKinEmail},\n    `);\n    this.setState({userAlert: \"adding patient nextOfKin item...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientNextOfKin(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{nextOfKinName:\"${nextOfKinName}\",nextOfKinEmail:\"${nextOfKinEmail}\",nextOfKinPhone:\"${nextOfKinPhone}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `\n    };\n\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData.data));\n\n          const updatedPatientId = resData.data.updatePatientNextOfKin._id;\n          const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n          const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n          const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n          console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n          this.state.patients.push(resData.data.updatePatientNextOfKin);\n          this.context.patients = this.state.patients;\n          const responseAlert = JSON.stringify(resData.data).slice(2,25);\n          this.setState({ userAlert: responseAlert})\n          this.fetchPatients();\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({userAlert: err});\n        });\n}\n\n\nupdatePatientComplaintHandler = (event) => {\n  event.preventDefault();\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientComplaintFormData:  \", event.target.formGridComplaintTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let complaintTitle = event.target.formGridComplaintTitle.value;\n\n  let complaintDate = null;\n  if (event.target.formGridComplaintDate) {\n    complaintDate = event.target.formGridComplaintDate.value;\n  }\n  if (event.target.formGridComplaintDateTodayCheckbox.checked === true) {\n    complaintDate = new Date().toISOString().slice(0,10);\n  }\n\n  let complaintDescription = event.target.formGridComplaintDescription.value;\n  let complaintAnamnesis = event.target.formGridComplaintAnamnesis.value;\n  // let complaintAttachmentName = event.target.formGridComplaintAttachmentName.value;\n  let complaintAttachmentFormat = event.target.formGridComplaintAttachmentFormat.value;\n  // let complaintAttachmentPath = event.target.formGridComplaintAttachmentPath.value;\n  let complaintAttachmentPath = \"uploads/patients/\"+selectedPatientId+\"/complaints\";\n  let file = AuthContext._currentValue.file;\n\n  console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n    const config = {\n      bucketName: this.context.creds.s3.bucketName,\n      dirName: complaintAttachmentPath,\n      region: this.context.creds.s3.region,\n      accessKeyId: this.context.creds.s3.accessKeyId,\n      secretAccessKey: this.context.creds.s3.secretAccessKey,\n    }\n\n  const ReactS3Client = new S3(config);\n  const newFileName = file.name;\n  const complaintAttachmentName = newFileName;\n\n  ReactS3Client\n      .uploadFile(file, newFileName)\n      .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n      .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n\n  console.log(`\n    adding patient complaint...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    complaintTitle: ${complaintTitle},\n    complaintDate: ${complaintDate},\n    complaintDescription: ${complaintDescription},\n    complaintAnamnesis: ${complaintAnamnesis},\n    complaintAttachmentName: ${complaintAttachmentName},\n    complaintAttachmentFormat: ${complaintAttachmentFormat},\n    complaintAttachmentPath: ${complaintAttachmentPath},\n    `);\n    this.setState({userAlert: \"adding patient complaint...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientComplaint(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{complaintDate:\"${complaintDate}\",complaintTitle:\"${complaintTitle}\",complaintDescription:\"${complaintDescription}\",complaintAnamnesis:\"${complaintAnamnesis}\",complaintAttachmentName:\"${complaintAttachmentName}\",complaintAttachmentFormat:\"${complaintAttachmentFormat}\",complaintAttachmentPath:\"${complaintAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientComplaint._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientComplaint);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert})\n        // this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n}\n\nupdatePatientSurveyHandler = (event) => {\n  event.preventDefault();\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientSurveyFormData:  \", event.target.formGridSurveyTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let surveyDate = null;\n  if (event.target.formGridSurveyDate) {\n    surveyDate = event.target.formGridSurveyDate.value;\n  }\n  if (event.target.formGridSurveyDateTodayCheckbox.checked === true) {\n    surveyDate = new Date().toISOString().slice(0,10);\n  }\n\n  let surveyTitle = event.target.formGridSurveyTitle.value;\n  let surveyDescription = event.target.formGridSurveyDescription.value;\n  // let surveyAttachmentName = event.target.formGridSurveyAttachmentName.value;\n  let surveyAttachmentFormat = event.target.formGridSurveyAttachmentFormat.value;\n  let surveyAttachmentPath = \"uploads/patients/\"+selectedPatientId+\"/surveys\";\n  // let surveyAttachmentPath = event.target.formGridSurveyAttachmentPath.value;\n  let file = AuthContext._currentValue.file;\n\n  console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n\n    const config = {\n      bucketName: this.context.creds.s3.bucketName,\n      dirName: surveyAttachmentPath,\n      region: this.context.creds.s3.region,\n      accessKeyId: this.context.creds.s3.accessKeyId,\n      secretAccessKey: this.context.creds.s3.secretAccessKey,\n    }\n\n  const ReactS3Client = new S3(config);\n  const newFileName = file.name;\n  const surveyAttachmentName = newFileName;\n\n  ReactS3Client\n      .uploadFile(file, newFileName)\n      .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n      .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n\n  console.log(`\n    adding patient survey...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    surveyDate: ${surveyDate},\n    surveyTitle: ${surveyTitle},\n    surveyDescription: ${surveyDescription},\n    surveyAttachmentName: ${surveyAttachmentName},\n    surveyAttachmentFormat: ${surveyAttachmentFormat},\n    surveyAttachmentPath: ${surveyAttachmentPath},\n    `);\n    this.setState({userAlert: \"adding patient survey...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientSurvey(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{surveyDate:\"${surveyDate}\",surveyTitle:\"${surveyTitle}\",surveyDescription:\"${surveyDescription}\",surveyAttachmentName:\"${surveyAttachmentName}\",surveyAttachmentFormat:\"${surveyAttachmentFormat}\",surveyAttachmentPath:\"${surveyAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientSurvey._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientSurvey);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n}\n\nupdatePatientSystematicInquiryHandler = (event) => {\n  event.preventDefault();\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientSystematicInquiryFormData:  \", event.target.formGridSystematicInquiryTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let systematicInquiryDate = null;\n  if (event.target.formGridSystematicInquiryDate) {\n    systematicInquiryDate = event.target.formGridSystematicInquiryDate.value;\n  }\n  if (event.target.formGridSystematicInquiryDateTodayCheckbox.checked === true) {\n    systematicInquiryDate = new Date().toISOString().slice(0,10);\n  }\n\n  let systematicInquiryTitle = event.target.formGridSystematicInquiryTitle.value;\n  let systematicInquiryDescription = event.target.formGridSystematicInquiryDescription.value;\n  // let systematicInquiryAttachmentName = event.target.formGridSystematicInquiryAttachmentName.value;\n  let systematicInquiryAttachmentFormat = event.target.formGridSystematicInquiryAttachmentFormat.value;\n  let systematicInquiryAttachmentPath = \"uploads/patients/\"+selectedPatientId+\"/systematicInquirys\";\n  // let systematicInquiryAttachmentPath = event.target.formGridSystematicInquiryAttachmentPath.value;\n  let file = AuthContext._currentValue.file;\n\n  console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n\n    const config = {\n      bucketName: this.context.creds.s3.bucketName,\n      dirName: systematicInquiryAttachmentPath,\n      region: this.context.creds.s3.region,\n      accessKeyId: this.context.creds.s3.accessKeyId,\n      secretAccessKey: this.context.creds.s3.secretAccessKey,\n    }\n\n  const ReactS3Client = new S3(config);\n  const newFileName = file.name;\n  const systematicInquiryAttachmentName = newFileName;\n\n  ReactS3Client\n      .uploadFile(file, newFileName)\n      .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n      .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n\n  console.log(`\n    adding patient systematicInquiry...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    systematicInquiryDate: ${systematicInquiryDate},\n    systematicInquiryTitle: ${systematicInquiryTitle},\n    systematicInquiryDescription: ${systematicInquiryDescription},\n    systematicInquiryAttachmentName: ${systematicInquiryAttachmentName},\n    systematicInquiryAttachmentFormat: ${systematicInquiryAttachmentFormat},\n    systematicInquiryAttachmentPath: ${systematicInquiryAttachmentPath},\n    `);\n    this.setState({userAlert: \"adding patient systematicInquiry...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientSurvey(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{surveyDate:\"${surveyDate}\",surveyTitle:\"${surveyTitle}\",surveyDescription:\"${surveyDescription}\",surveyAttachmentName:\"${surveyAttachmentName}\",surveyAttachmentFormat:\"${surveyAttachmentFormat}\",surveyAttachmentPath:\"${surveyAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientSurvey._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientSurvey);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n}\n\nupdatePatientVitalsHandler = (event) => {\n  event.preventDefault();\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientVitalsFormData:  \", event.target.formGridVitalsDate.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let vitalsDate = null;\n  if (event.target.formGridVitalsDate) {\n    vitalsDate = event.target.formGridVitalsDate.value;\n  }\n  if (event.target.formGridVitalsDateTodayCheckbox.checked === true) {\n    vitalsDate = new Date().toISOString().slice(0,10);\n  }\n\n  let vitalsPr = event.target.formGridVitalsPr.value;\n  let vitalsBp1 = event.target.formGridVitalsBp1.value;\n  let vitalsBp2 = event.target.formGridVitalsBp2.value;\n  let vitalsRr = event.target.formGridVitalsRr.value;\n  let vitalsTemp = event.target.formGridVitalsTemp.value;\n  let vitalsPs02 = event.target.formGridVitalsPs02.value;\n  let vitalsHeight = event.target.formGridVitalsHeight.value;\n  let vitalsWeight = event.target.formGridVitalsWeight.value;\n  let vitalsBmi = event.target.formGridVitalsBmi.value;\n  let vitalsUrineType = event.target.formGridVitalsUrineType.value;\n  let vitalsUrineValue = event.target.formGridVitalsUrineValue.value;\n\n  console.log(`\n    adding patient vitals...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    `);\n    this.setState({userAlert: \"adding patient vitals...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientVitals(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{vitalsDate:\"${vitalsDate}\",vitalsPr:${vitalsPr},vitalsBp1:${vitalsBp1},vitalsBp2:${vitalsBp2},vitalsRr:${vitalsRr},vitalsTemp:${vitalsTemp},vitalsPs02:${vitalsPs02},vitalsHeight:${vitalsHeight},vitalsWeight:${vitalsWeight},vitalsBmi:${vitalsBmi},vitalsUrineType:\"${vitalsUrineType}\",vitalsUrineValue:\"${vitalsUrineValue}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientVitals._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientVitals);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n}\n\n\nupdatePatientExaminationHandler = (event) => {\n  event.preventDefault();\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientExaminationFormData:  \", event.target.formGridExaminationArea.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let examinationDate = null;\n  if (event.target.formGridExaminationDate) {\n    examinationDate = event.target.formGridExaminationDate.value;\n  }\n  if (event.target.formGridExaminationDateTodayCheckbox.checked === true) {\n    examinationDate = new Date().toISOString().slice(0,10);\n  }\n\n  let examinationGeneral = event.target.formGridExaminationGeneral.value;\n  let examinationArea = undefined;\n  if (event.target.formGridExaminationAreaSelect === \"select\") {\n    examinationArea = event.target.formGridExaminationArea.value;\n  } else {\n    examinationArea = event.target.formGridExaminationAreaSelect.value;\n  }\n  let examinationType = event.target.formGridExaminationType.value;\n  let examinationMeasure = event.target.formGridExaminationMeasure.value;\n  let examinationValue = event.target.formGridExaminationValue.value;\n  let examinationDescription = event.target.formGridExaminationDescription.value;\n  let examinationFollowUp = event.target.formGridExaminationFollowUp.value;\n  // let examinationAttachmentName = event.target.formGridExaminationAttachmentName.value;\n  let examinationAttachmentFormat = event.target.formGridExaminationAttachmentFormat.value;\n  let examinationAttachmentPath = \"uploads/patients/\"+selectedPatientId+\"/examinations\";\n  // let examinationAttachmentPath = event.target.formGridExaminationAttachmentPath.value;\n  let file = AuthContext._currentValue.file;\n\n  console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n    const config = {\n      bucketName: this.context.creds.s3.bucketName,\n      dirName: examinationAttachmentPath,\n      region: this.context.creds.s3.region,\n      accessKeyId: this.context.creds.s3.accessKeyId,\n      secretAccessKey: this.context.creds.s3.secretAccessKey,\n    }\n  const ReactS3Client = new S3(config);\n  const newFileName = file.name;\n  const examinationAttachmentName = newFileName;\n\n  ReactS3Client\n      .uploadFile(file, newFileName)\n      .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n      .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n\n  console.log(`\n    adding patient examination...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    examinationDate: ${examinationDate},\n    examinationGeneral: ${examinationGeneral},\n    examinationArea: ${examinationArea},\n    examinationType: ${examinationType},\n    examinationMeasure: ${examinationMeasure},\n    examinationValue: ${examinationValue},\n    examinationDescription: ${examinationDescription},\n    examinationFollowUp: ${examinationFollowUp},\n    examinationAttachmentName: ${examinationAttachmentName},\n    examinationAttachmentFormat: ${examinationAttachmentFormat},\n    examinationAttachmentPath: ${examinationAttachmentPath},\n    `);\n    this.setState({userAlert: \"adding patient examination...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientExamination(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{examinationDate:\"${examinationDate}\",examinationGeneral:\"${examinationGeneral}\",examinationArea:\"${examinationArea}\",examinationType:\"${examinationType}\",examinationMeasure:\"${examinationMeasure}\",examinationValue:\"${examinationValue}\",examinationDescription:\"${examinationDescription}\",examinationFollowUp:${examinationFollowUp},examinationAttachmentName:\"${examinationAttachmentName}\",examinationAttachmentFormat:\"${examinationAttachmentFormat}\",examinationAttachmentPath:\"${examinationAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientExamination._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientExamination);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n}\n\n\nupdatePatientHistoryHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientHistoryFormData:  \", event.target.formGridHistoryTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let historyType = event.target.formGridHistoryType.value;\n\n  // let historyDate = null;\n  // if (event.target.formGridHistoryDate) {\n  //   historyDate = event.target.formGridHistoryDate.value;\n  // }\n  let historyDate = event.target.formGridHistoryDate.value;\n  if (event.target.formGridHistoryDateTodayCheckbox.checked === true) {\n    historyDate = new Date().toISOString().slice(0,10);\n  }\n\n  let historyTitle = event.target.formGridHistoryTitle.value;\n  let historyDescription = event.target.formGridHistoryDescription.value;\n  // let historyAttachmentName = event.target.formGridHistoryAttachmentName.value;\n  let historyAttachmentFormat = event.target.formGridHistoryAttachmentFormat.value;\n  let historyAttachmentPath = \"uploads/patients/\"+selectedPatientId+\"/history\";\n  // let historyAttachmentPath = event.target.formGridHistoryAttachmentPath.value;\n  let file = AuthContext._currentValue.file;\n\n  console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n    const config = {\n      bucketName: this.context.creds.s3.bucketName,\n      dirName: historyAttachmentPath,\n      region: this.context.creds.s3.region,\n      accessKeyId: this.context.creds.s3.accessKeyId,\n      secretAccessKey: this.context.creds.s3.secretAccessKey,\n    }\n  const ReactS3Client = new S3(config);\n  const newFileName = file.name;\n  const historyAttachmentName = newFileName;\n\n  ReactS3Client\n      .uploadFile(file, newFileName)\n      .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n      .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n\n  console.log(`\n    adding patient history...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    historyType: ${historyType},\n    historyDate: ${historyDate},\n    historyTitle: ${historyTitle},\n    historyDescription: ${historyDescription},\n    historyAttachmentName: ${historyAttachmentName},\n    historyAttachmentFormat: ${historyAttachmentFormat},\n    historyAttachmentPath: ${historyAttachmentPath},\n    `);\n    this.setState({userAlert: \"adding patient history...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientHistory(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{historyTitle:\"${historyTitle}\",historyType:\"${historyType}\",historyDate:\"${historyDate}\",historyDescription:\"${historyDescription}\",historyAttachmentName:\"${historyAttachmentName}\",historyAttachmentFormat:\"${historyAttachmentFormat}\",historyAttachmentPath:\"${historyAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientHistory._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientHistory);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n}\n\n\nupdatePatientAllergiesHandler = (event) => {\n  event.preventDefault();\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientAllergiesFormData:  \", event.target.formGridAllergiesTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let allergiesTitle = event.target.formGridAllergiesTitle.value;\n  let allergiesType = undefined;\n  if (event.target.formGridAllergiesTypeSelect === \"select\") {\n    allergiesType = event.target.formGridAllergiesType.value;\n  } else {\n    allergiesType = event.target.formGridAllergiesTypeSelect.value;\n  }\n  let allergiesDescription = event.target.formGridAllergiesDescription.value;\n  // let allergiesAttachmentName = event.target.formGridAllergiesAttachmentName.value;\n  let allergiesAttachmentFormat = event.target.formGridAllergiesAttachmentFormat.value;\n  let allergiesAttachmentPath = \"uploads/patients/\"+selectedPatientId+\"/allergies\";\n  // let allergiesAttachmentPath = event.target.formGridAllergiesAttachmentPath.value;\n  let file = AuthContext._currentValue.file;\n\n  console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n    const config = {\n      bucketName: this.context.creds.s3.bucketName,\n      dirName: allergiesAttachmentPath,\n      region: this.context.creds.s3.region,\n      accessKeyId: this.context.creds.s3.accessKeyId,\n      secretAccessKey: this.context.creds.s3.secretAccessKey,\n    }\n  const ReactS3Client = new S3(config);\n  const newFileName = file.name;\n  const allergiesAttachmentName = newFileName;\n\n  ReactS3Client\n      .uploadFile(file, newFileName)\n      .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n      .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n\n  console.log(`\n    adding patient allergies...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    allergiesTitle: ${allergiesTitle},\n    allergiesType: ${allergiesType},\n    allergiesDescription: ${allergiesDescription},\n    allergiesAttachmentName: ${allergiesAttachmentName},\n    allergiesAttachmentFormat: ${allergiesAttachmentFormat},\n    allergiesAttachmentPath: ${allergiesAttachmentPath},\n    `);\n    this.setState({userAlert: \"adding patient allergies...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientAllergies(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{allergiesTitle:\"${allergiesTitle}\",allergiesType:\"${allergiesType}\", allergiesDescription:\"${allergiesDescription}\",allergiesAttachmentName:\"${allergiesAttachmentName}\",allergiesAttachmentFormat:\"${allergiesAttachmentFormat}\",allergiesAttachmentPath:\"${allergiesAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientAllergies._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientAllergies);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n\n}\n\n\nupdatePatientMedicationHandler = (event) => {\n\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientMedicationFormData:  \", event.target.formGridMedicationTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let medicationTitle = event.target.formGridMedicationTitle.value;\n  let medicationType = event.target.formGridMedicationType.value;\n  let medicationDescription = event.target.formGridMedicationDescription.value;\n  // let medicationAttachmentName = event.target.formGridMedicationAttachmentName.value;\n  let medicationAttachmentFormat = event.target.formGridMedicationAttachmentFormat.value;\n  let medicationAttachmentPath = \"uploads/patients/\"+selectedPatientId+\"/medication\";\n  // let medicationAttachmentPath = event.target.formGridMedicationAttachmentPath.value;\n  let file = AuthContext._currentValue.file;\n\n  console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n    const config = {\n      bucketName: this.context.creds.s3.bucketName,\n      dirName: medicationAttachmentPath,\n      region: this.context.creds.s3.region,\n      accessKeyId: this.context.creds.s3.accessKeyId,\n      secretAccessKey: this.context.creds.s3.secretAccessKey,\n    }\n  const ReactS3Client = new S3(config);\n  const newFileName = file.name;\n  const medicationAttachmentName = newFileName;\n\n  ReactS3Client\n      .uploadFile(file, newFileName)\n      .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n      .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n\n  console.log(`\n    adding patient medication...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    medicationTitle: ${medicationTitle},\n    medicationType: ${medicationType},\n    medicationDescription: ${medicationDescription},\n    medicationAttachmentName: ${medicationAttachmentName},\n    medicationAttachmentFormat: ${medicationAttachmentFormat},\n    medicationAttachmentPath: ${medicationAttachmentPath},\n    `);\n    this.setState({userAlert: \"adding patient medication...\"});\n\n    const requestBody = {\n      query:`\n      mutation {updatePatientMedication(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{medicationTitle:\"${medicationTitle}\",medicationType:\"${medicationType}\" medicationDescription:\"${medicationDescription}\",medicationAttachmentName:\"${medicationAttachmentName}\",medicationAttachmentFormat:\"${medicationAttachmentFormat}\",medicationAttachmentPath:\"${medicationAttachmentPath}\"})\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientMedication._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientMedication);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n}\n\n\nupdatePatientInvestigationHandler = (event) => {\n  event.preventDefault();\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientInvestigationFormData:  \", event.target.formGridInvestigationTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let investigationDate = null;\n  if (event.target.formGridInvestigationDate) {\n    investigationDate = event.target.formGridInvestigationDate.value;\n  }\n  if (event.target.formGridInvestigationDateTodayCheckbox.checked === true) {\n    investigationDate = new Date().toISOString().slice(0,10);\n  }\n\n  let investigationTitle = event.target.formGridInvestigationTitle.value;\n  let investigationType = undefined;\n  if (event.target.formGridInvestigationTypeSelect === \"select\") {\n    investigationType = event.target.formGridInvestigationType.value;\n  } else {\n    investigationType = event.target.formGridInvestigationTypeSelect.value;\n  }\n  let investigationDescription = event.target.formGridInvestigationDescription.value;\n  // let investigationAttachmentName = event.target.formGridInvestigationAttachmentName.value;\n  let investigationAttachmentFormat = event.target.formGridInvestigationAttachmentFormat.value;\n  let investigationAttachmentPath = \"uploads/patients/\"+selectedPatientId+\"/investigation\";\n  // let investigationAttachmentPath = event.target.formGridInvestigationAttachmentPath.value;\n  let file = AuthContext._currentValue.file;\n\n  console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n    const config = {\n      bucketName: this.context.creds.s3.bucketName,\n      dirName: investigationAttachmentPath,\n      region: this.context.creds.s3.region,\n      accessKeyId: this.context.creds.s3.accessKeyId,\n      secretAccessKey: this.context.creds.s3.secretAccessKey,\n    }\n  const ReactS3Client = new S3(config);\n  const newFileName = file.name;\n  const investigationAttachmentName = newFileName;\n\n  ReactS3Client\n      .uploadFile(file, newFileName)\n      .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n      .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n\n  console.log(`\n    adding patient investigation...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    investigationDate: ${investigationDate},\n    investigationTitle: ${investigationTitle},\n    investigationType: ${investigationType},\n    investigationDescription: ${investigationDescription},\n    investigationAttachmentName: ${investigationAttachmentName},\n    investigationAttachmentFormat: ${investigationAttachmentFormat},\n    investigationAttachmentPath: ${investigationAttachmentPath},\n    `);\n    this.setState({userAlert: \"adding patient investigation...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientInvestigation(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{investigationDate:\"${investigationDate}\",investigationTitle:\"${investigationTitle}\",investigationType:\"${investigationType}\",investigationDescription:\"${investigationDescription}\",investigationAttachmentName:\"${investigationAttachmentName}\",investigationAttachmentFormat:\"${investigationAttachmentFormat}\",investigationAttachmentPath:\"${investigationAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientInvestigation._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientInvestigation);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n}\n\n\nupdatePatientDiagnosisHandler = (event) => {\n  event.preventDefault();\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientDiagnosisFormData:  \", event.target.formGridDiagnosisTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let diagnosisDate = null;\n  if (event.target.formGridDiagnosisDate) {\n    diagnosisDate = event.target.formGridDiagnosisDate.value;\n  }\n  if (event.target.formGridDiagnosisDateTodayCheckbox.checked === true) {\n    diagnosisDate = new Date().toISOString().slice(0,10);\n  }\n\n  let diagnosisTitle = event.target.formGridDiagnosisTitle.value;\n  let diagnosisType = event.target.formGridDiagnosisType.value;\n  let diagnosisDescription = event.target.formGridDiagnosisDescription.value;\n  // let diagnosisAttachmentName = event.target.formGridDiagnosisAttachmentName.value;\n  let diagnosisAttachmentFormat = event.target.formGridDiagnosisAttachmentFormat.value;\n  let diagnosisAttachmentPath = \"uploads/patients/\"+selectedPatientId+\"/diagnosis\";\n  // let diagnosisAttachmentPath = event.target.formGridDiagnosisAttachmentPath.value;\n  let file = AuthContext._currentValue.file;\n\n  console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n    const config = {\n      bucketName: this.context.creds.s3.bucketName,\n      dirName: diagnosisAttachmentPath,\n      region: this.context.creds.s3.region,\n      accessKeyId: this.context.creds.s3.accessKeyId,\n      secretAccessKey: this.context.creds.s3.secretAccessKey,\n    }\n  const ReactS3Client = new S3(config);\n  const newFileName = file.name;\n  const diagnosisAttachmentName = newFileName;\n\n  ReactS3Client\n      .uploadFile(file, newFileName)\n      .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n      .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n\n  console.log(`\n    adding patient diagnosis...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    diagnosisDate: ${diagnosisDate},\n    diagnosisTitle: ${diagnosisTitle},\n    diagnosisType: ${diagnosisType},\n    diagnosisDescription: ${diagnosisDescription},\n    diagnosisAttachmentName: ${diagnosisAttachmentName},\n    diagnosisAttachmentFormat: ${diagnosisAttachmentFormat},\n    diagnosisAttachmentPath: ${diagnosisAttachmentPath},\n    `);\n    this.setState({userAlert: \"adding patient diagnosis...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientDiagnosis(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{diagnosisDate:\"${diagnosisDate}\",diagnosisTitle:\"${diagnosisTitle}\",diagnosisType:\"${diagnosisType}\",diagnosisDescription:\"${diagnosisDescription}\",diagnosisAttachmentName:\"${diagnosisAttachmentName}\",diagnosisAttachmentFormat:\"${diagnosisAttachmentFormat}\",diagnosisAttachmentPath:\"${diagnosisAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientDiagnosis._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientDiagnosis);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n}\n\n\nupdatePatientTreatmentHandler = (event) => {\n  event.preventDefault();\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientTreatmentFormData:  \", event.target.formGridTreatmentTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let treatmentDate = null;\n  if (event.target.formGridTreatmentDate) {\n    treatmentDate = event.target.formGridTreatmentDate.value;\n  }\n  if (event.target.formGridTreatmentDateTodayCheckbox.checked === true) {\n    treatmentDate = new Date().toISOString().slice(0,10);\n  }\n\n  let treatmentTitle = event.target.formGridTreatmentTitle.value;\n  let treatmentDescription = event.target.formGridTreatmentDescription.value;\n  let treatmentDose = event.target.formGridTreatmentDose.value;\n  let treatmentFrequency = event.target.formGridTreatmentFrequency.value;\n  let treatmentType = undefined;\n  if (event.target.formGridInvestigationTypeSelect === \"select\") {\n    treatmentType = event.target.formGridTreatmentType.value;\n  } else {\n    treatmentType = event.target.formGridTreatmentTypeSelect.value;\n  }\n  // let treatmentAttachmentName = event.target.formGridTreatmentAttachmentName.value;\n  let treatmentAttachmentFormat = event.target.formGridTreatmentAttachmentFormat.value;\n  let treatmentAttachmentPath = \"uploads/patients/\"+selectedPatientId+\"/treatment\";\n  // let treatmentAttachmentPath = event.target.formGridTreatmentAttachmentPath.value;\n  let file = AuthContext._currentValue.file;\n\n  console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n    const config = {\n      bucketName: this.context.creds.s3.bucketName,\n      dirName: treatmentAttachmentPath,\n      region: this.context.creds.s3.region,\n      accessKeyId: this.context.creds.s3.accessKeyId,\n      secretAccessKey: this.context.creds.s3.secretAccessKey,\n    }\n  const ReactS3Client = new S3(config);\n  const newFileName = file.name;\n  const treatmentAttachmentName = newFileName;\n\n  ReactS3Client\n      .uploadFile(file, newFileName)\n      .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n      .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n\n  console.log(`\n    adding patient treatment...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    treatmentDate: ${treatmentDate},\n    treatmentTitle: ${treatmentTitle},\n    treatmentDescription: ${treatmentDescription},\n    treatmentDose: ${treatmentDose},\n    treatmentFrequency: ${treatmentFrequency},\n    treatmentType: ${treatmentType},\n    treatmentAttachmentName: ${treatmentAttachmentName},\n    treatmentAttachmentFormat: ${treatmentAttachmentFormat},\n    treatmentAttachmentPath: ${treatmentAttachmentPath},\n    `);\n    this.setState({userAlert: \"adding patient treatment...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientTreatment(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{treatmentDate:\"${treatmentDate}\",treatmentTitle:\"${treatmentTitle}\",treatmentType:\"${treatmentType}\",treatmentDescription:\"${treatmentDescription}\",treatmentDose:\"${treatmentDose}\",treatmentFrequency:\"${treatmentFrequency}\",treatmentAttachmentName:\"${treatmentAttachmentName}\",treatmentAttachmentFormat:\"${treatmentAttachmentFormat}\",treatmentAttachmentPath:\"${treatmentAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `}\n\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientTreatment._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientTreatment);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n}\n\n\n\nupdatePatientBillingHandler = (event) => {\n  event.preventDefault();\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientBillingFormData:  \", event.target.formGridBillingTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let billingDate = null;\n  if (event.target.formGridBillingDate) {\n    billingDate = event.target.formGridBillingDate.value;\n  }\n  if (event.target.formGridBillingDateTodayCheckbox.checked === true) {\n    billingDate = new Date().toISOString().slice(0,10);\n  }\n\n  let billingTitle = event.target.formGridBillingTitle.value;\n  let billingType = event.target.formGridBillingType.value;\n  let billingDescription = event.target.formGridBillingDescription.value;\n  let billingAmount = event.target.formGridBillingAmount.value;\n  let billingPaid = event.target.formGridBillingPaid.value;\n  let billingNotes = event.target.formGridBillingNotes.value;\n  // let billingAttachmentName = event.target.formGridBillingAttachmentName.value;\n  let billingAttachmentFormat = event.target.formGridBillingAttachmentFormat.value;\n  let billingAttachmentPath = \"uploads/patients/\"+selectedPatientId+\"/billing\";\n  // let billingAttachmentPath = event.target.formGridBillingAttachmentPath.value;\n  let file = AuthContext._currentValue.file;\n\n  console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n    const config = {\n      bucketName: this.context.creds.s3.bucketName,\n      dirName: billingAttachmentPath,\n      region: this.context.creds.s3.region,\n      accessKeyId: this.context.creds.s3.accessKeyId,\n      secretAccessKey: this.context.creds.s3.secretAccessKey,\n    }\n  const ReactS3Client = new S3(config);\n  const newFileName = file.name;\n  const billingAttachmentName = newFileName;\n\n  ReactS3Client\n      .uploadFile(file, newFileName)\n      .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n      .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n\n  console.log(`\n    adding patient billing...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    billingDate: ${billingDate},\n    billingTitle: ${billingTitle},\n    billingType: ${billingType},\n    billingDescription: ${billingDescription},\n    billingAmount: ${billingAmount},\n    billingPaid: ${billingPaid},\n    billingNotes: ${billingNotes},\n    billingAttachmentName: ${billingAttachmentName},\n    billingAttachmentFormat: ${billingAttachmentFormat},\n    billingAttachmentPath: ${billingAttachmentPath},\n    `);\n    this.setState({userAlert: \"adding patient billing...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientBilling(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{billingDate:\"${billingDate}\",billingTitle:\"${billingTitle}\",billingType:\"${billingType}\",billingDescription:\"${billingDescription}\",billingAmount:${billingAmount},billingPaid:${billingPaid},billingNotes:\"${billingNotes}\",billingAttachmentName:\"${billingAttachmentName}\",billingAttachmentFormat:\"${billingAttachmentFormat}\",billingAttachmentPath:\"${billingAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientBilling._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientBilling);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n\n}\n\nupdatePatientAttachmentHandler = (event) => {\n\n    const token = this.context.token;\n    const userId = this.context.userId;\n    let selectedPatientId = this.context.selectedPatient._id;\n\n    // if(this.context.user.role !== 'admin') {\n    //   console.log(\"No edit permission!!\");\n    //   return;\n    // }\n\n    console.log(`\n        UpdatePatientAttachmentFormData:\n      `);\n\n    this.setState({ updating: false , patientUpdateField: null });\n\n    // let attachmentName = event.target.formGridPatientAttachmentName.value;\n    let attachmentFormat = event.target.formGridPatientAttachmentFormat.value;\n    let attachmentPath = \"uploads/patients/\"+selectedPatientId+\"/attachments\";\n    // let attachmentPath = event.target.formGridPatientAttachmentPath.value;\n    let file = AuthContext._currentValue.file;\n\n    console.log(`\n      uploading to s3...\n      file.name: ${file.name},\n      AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n      `);\n      const config = {\n        bucketName: this.context.creds.s3.bucketName,\n        dirName: attachmentPath,\n        region: this.context.creds.s3.region,\n        accessKeyId: this.context.creds.s3.accessKeyId,\n        secretAccessKey: this.context.creds.s3.secretAccessKey,\n      }\n    const ReactS3Client = new S3(config);\n    const newFileName = file.name;\n    const attachmentName = newFileName;\n\n    ReactS3Client\n        .uploadFile(file, newFileName)\n        .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n        .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n    if (\n      attachmentName.trim().length === 0 ||\n      attachmentFormat.trim().length === 0 ||\n      attachmentPath.trim().length === 0\n    ) {\n      console.log(\"blank fields detected!!!...Please try again...\");\n      this.setState({userAlert: \"blank fields detected!!!...Please try again...\"});\n      return;\n    }\n\n    this.setState({userAlert: \"adding patient attachment\"});\n\n    const requestBody = {\n                    query:`\n                    mutation {updatePatientAttachment(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{attachmentName:\"${attachmentName}\",attachmentFormat:\"${attachmentFormat}\",attachmentPath:\"${attachmentPath}\"})\n                    {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n            `}\n\n\n    fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            console.log(\"response data... \" + JSON.stringify(resData.data));\n\n            const updatedPatientId = resData.data.updatePatientAttachment._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.updatePatientAttachment);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientAttachment})\n            this.fetchPatients();\n          })\n          .catch(err => {\n            console.log(err);\n            this.setState({userAlert: err});\n          });\n\n}\n\nupdatePatientNoteHandler = (event) => {\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(`\n      UpdatePatientNoteFormData:\n      ${event.target.formGridNote.value}\n    `);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n    let note = event.target.formGridNote.value;\n\n    if (\n      note.trim().length === 0\n    ) {\n      console.log(\"Can't Submit a blank form!!!...Please try again...\");\n      this.setState({userAlert: \"Can't Submit a blank form!!!...Please try again...\"});\n      return;\n    }\n\n    this.setState({userAlert: \"adding patient note\"});\n\n    const requestBody = {\n              query:`\n              mutation {updatePatientNotes(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{notes:\"${note}\"})\n              {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n            `}\n\n\n    fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            console.log(\"response data... \" + JSON.stringify(resData.data));\n\n            const updatedPatientId = resData.data.updatePatientNotes._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.updatePatientNotes);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientNotes})\n            this.fetchPatients();\n          })\n          .catch(err => {\n            console.log(err);\n            this.setState({userAlert: err});\n          });\n\n}\nupdatePatientTagHandler = (event) => {\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(`\n      UpdatePatientTagFormData:\n      ${event.target.formGridTag.value}\n    `);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n    let tag = event.target.formGridTag.value;\n\n    if (\n      tag.trim().length === 0\n    ) {\n      console.log(\"Can't Submit a blank form!!!...Please try again...\");\n      this.setState({userAlert: \"Can't Submit a blank form!!!...Please try again...\"});\n      return;\n    }\n\n    const requestBody = {\n                    query:`\n                    mutation {updatePatientTags(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{tag:\"${tag}\"})\n                    {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n            `}\n    this.setState({userAlert: \"adding patient tag\"});\n\n\n    fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            console.log(\"response data... \" + JSON.stringify(resData.data));\n\n            const updatedPatientId = resData.data.updatePatientTags._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.updatePatientTags);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            this.fetchPatients();\n          })\n          .catch(err => {\n            console.log(err);\n            this.setState({userAlert: err});\n          });\n\n\n}\n\n\nmodalConfirmSearchHandler = (event) => {\n  console.log(\"SearchPatientForm:  \");\n\n\n  let userId = this.context.userId;\n\n    console.log(\"SearchPatientFormData:  \", event.target.formBasicField.value);\n    this.setState({ searching: false });\n\n    let field = null;\n    let query = event.target.formBasicQuery.value;\n    if (event.target.formBasicFieldSelect.value === \"select\") {\n      field = event.target.formBasicField.value;\n    } else {\n      field = event.target.formBasicFieldSelect.value;\n    }\n\n    this.setState({\n      patientSearchField: field,\n      patientSearchQuery: query,\n    })\n\n    if (\n      field.trim().length === 0 ||\n      query.trim().length === 0\n    ) {\n      console.log(\"blank fields detected!!!...Please try again...\");\n      return;\n    }\n\n\n    this.setState({userAlert: \"Searching for Patient:  \"});\n\n    const requestBody = {\n      query: `\n        query {\n          getPatientField(userId: \"${userId}\", field: \"${field}\", query: \"${query}\" )\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n    const token = this.context.token;\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n        const responseAlert = JSON.stringify(resData.data).slice(2,15);\n        this.setState({userAlert: responseAlert});\n\n        const searchPatients = resData.data.getPatientField;\n\n        this.setState({ searchPatients: searchPatients})\n        console.log(\"state.searchPatients:  \", this.state.searchPatients);\n        // this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n}\n\nmodalConfirmSearchIdHandler = (event) => {\n  console.log(\"SearchPatientIdFormData\");\n\n  let userId = this.context.userId;\n  this.setState({ searching: false });\n\n  const patientId = event.target.formBasicId.value;\n\n  const requestBody = {\n    query: `\n      query {getPatientId(userId:\"${userId}\",patientId:\"${patientId}\")\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{_id,title,time,location},consultant{date,reference{_id,name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `}\n\n  const token = this.context.token;\n\n  fetch('http://localhost:10000/graphql', {\n    method: 'POST',\n    body: JSON.stringify(requestBody),\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + token\n    }\n  })\n    .then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n      return res.json();\n    })\n    .then(resData => {\n      console.log(\"response data... \" + JSON.stringify(resData));\n      const responseAlert = JSON.stringify(resData.data).slice(2,25);\n      this.setState({userAlert: responseAlert});\n\n      const searchPatients = resData.data.getPatientId;\n\n      this.setState({ searchPatients: [searchPatients]})\n      console.log(\"state.searchPatients:  \", this.state.searchPatients);\n      // this.fetchUsers();\n    })\n    .catch(err => {\n      console.log(err);\n      this.setState({userAlert: err});\n    });\n}\n\n\nmodalConfirmSearchNameHandler = (event) => {\n  console.log(\"SearchPatientNameFormData:\", event.target.formBasicName.value);\n\n  // let userId = this.context.userId;\n  this.setState({ searching: false });\n\n  let patients = this.state.patients;\n  const regex = new RegExp(event.target.formBasicName.value,\"i\");\n  console.log(`\n    regex: ${regex},\n    `);\n    let result = patients.filter(patient => patient.name.match(regex))\n    console.log(`\n      result: ${JSON.stringify(result)}\n      `);\n\n      this.setState({ searchPatients: result})\n\n}\n\n  getPatientVisit = (event) => {\n\n    const selectedPatient = this.state.selectedPatient;\n    event.preventDefault();\n    console.log(`\n        getUserVisit function:\n        selectedPatient.consultant: ${JSON.stringify(selectedPatient.consultant)},\n        selectedPatient.complaints: ${JSON.stringify(selectedPatient.complaints)},\n        visitDate: ${new Date(event.target.formBasicVisitDate.value)},\n      `);\n\n    let visitDate = new Date(event.target.formBasicVisitDate.value).toISOString().substring(0, 10);\n    let visitSurveys = selectedPatient.surveys.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    let visitConsultants = selectedPatient.consultant.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    let visitComplaints = selectedPatient.complaints.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    // let visitSurveys = selectedPatient.surveys.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString() === visitDate);\n    let visitVitals = selectedPatient.vitals.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    let visitExaminations = selectedPatient.examination.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    let visitHistory = selectedPatient.history.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    let visitInvestigations = selectedPatient.investigation.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    let visitDiagnosis = selectedPatient.diagnosis.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    let visitTreatments = selectedPatient.treatment.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    let visitBilling = selectedPatient.billing.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n\n      const visit = {\n        date: visitDate,\n        patientName: this.context.selectedPatient.name,\n        consultant: visitConsultants,\n        complaint: visitComplaints,\n        examination: visitExaminations,\n        survey: visitSurveys,\n        vitals: visitVitals,\n        history: visitHistory,\n        investigation: visitInvestigations,\n        diagnosis: visitDiagnosis,\n        treatment: visitTreatments,\n        billing: visitBilling,\n      };\n\n      console.log(`\n        visit: ${JSON.stringify(visit)},\n        `);\n        // this.context.visit = visit;\n        this.setState({visit: visit});\n\n  }\n\n  getVisitList = () => {\n\n    const selectedPatient = this.state.selectedPatient;\n    const patientName = this.state.selectedPatient.name;\n    let selectedPatientAppointmentDateArray = [];\n    let selectedPatientAppointmentVisitArray = [];\n    let selectedPatientAppointments = this.state.selectedPatient.appointments.map(appointments => {\n      console.log(\"appointments.date\", appointments.date);\n      selectedPatientAppointmentDateArray.push(new Date(appointments.date.substr(0,10)*1000).toISOString().substring(0, 10))\n    })\n    console.log(`\n        getVisitList function:\n        selectedPatientAppointments: ${selectedPatientAppointmentDateArray}\n      `);\n\n      selectedPatientAppointmentDateArray.map(appointmentDate => {\n        console.log(`\n          retriveing visit for ${appointmentDate} ...selectedPatientAppointmentVisitArray: ${JSON.stringify(selectedPatientAppointmentVisitArray)},\n          `);\n          thisGetVisit(appointmentDate, patientName)\n      })\n\n      function thisGetVisit (argsDate, argsPatientName) {\n        console.log(\"thisGetVisit function...\");\n\n        let visitDate = argsDate\n\n\n        let visitSurveys = selectedPatient.surveys.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n        let visitConsultants = selectedPatient.consultant.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n        let visitComplaints = selectedPatient.complaints.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n        // let visitSurveys = selectedPatient.surveys.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString() === visitDate);\n        let visitVitals = selectedPatient.vitals.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n        let visitExaminations = selectedPatient.examination.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n        let visitHistory = selectedPatient.history.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n        let visitInvestigations = selectedPatient.investigation.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n        let visitDiagnosis = selectedPatient.diagnosis.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n        let visitTreatments = selectedPatient.treatment.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n        let visitBilling = selectedPatient.billing.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n\n        const visit = {\n          date: visitDate,\n          patientName: argsPatientName,\n          consultant: visitConsultants,\n          complaint: visitComplaints,\n          examination: visitExaminations,\n          survey: visitSurveys,\n          vitals: visitVitals,\n          history: visitHistory,\n          investigation: visitInvestigations,\n          diagnosis: visitDiagnosis,\n          treatment: visitTreatments,\n          billing: visitBilling,\n        };\n\n        selectedPatientAppointmentVisitArray.push(visit)\n      }\n      // console.log(`\n      //     ...final selectedPatientAppointmentVisitArray: ${JSON.stringify(selectedPatientAppointmentVisitArray)}\n      //   `);\n\n      this.setState({ visitList: selectedPatientAppointmentVisitArray})\n\n  }\n\n\n  getVisitListAsc = () => {\n    console.log(`\n      sorting visit list in ascending order...\n      `);\n\n      let list = this.state.visitList;\n\n      list.sort((a, b) => {\n        if (a.date < b.date) return -1\n        return a.date > b.date ? 1 : 0\n      })\n\n      console.log(`\n        list: ${list}\n        `);\n\n      this.setState({visitList: list})\n  }\n  getVisitListDesc = () => {\n    console.log(`\n      sorting visit list in descending order...\n      `);\n\n      let list = this.state.visitList;\n\n      list.sort((a, b) => {\n        if (a.date < b.date) return 1\n        return a.date > b.date ? -1 : 0\n      })\n\n      console.log(`\n        list: ${list}\n        `);\n\n      this.setState({visitList: list})\n  }\n\n\n\n  modalCancelHandler = () => {\n    this.setState({ creating: false, updating: false, searching: false, selectedPatient: null });\n  };\n\n\n  fetchPatients() {\n    console.log(\"fetch patients function:  \");\n    const userId = this.context.userId;\n    const token = this.context.token;\n\n    this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n          query {patients(userId:\"${userId}\")\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{_id,title,time,location,date},consultant{date,reference{_id,name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n        `\n    };\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"resData\", resData);\n        const patients = resData.data.patients;\n        console.log(patients);\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({userAlert: responseAlert});\n\n        this.context.patients = this.state.patients;\n        if (this.isActive) {\n          this.setState({\n            patients: patients,\n            isLoading: false,\n\n          });\n        }\n\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n        if (this.isActive) {\n          this.setState({ isLoading: false });\n        }\n      });\n  }\n\n  fetchPatientsAsc = () => {\n    console.log(\"fetch patients function:  \");\n    const userId = this.context.userId;\n    const token = this.context.token;\n\n    // this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n          query {patientsNameAsc(userId:\"${userId}\")\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{_id,title,time,location,date},consultant{date,reference{_id,name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n        `\n    };\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"resData\", resData);\n        const patients = resData.data.patientsNameAsc;\n        console.log(patients);\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({userAlert: responseAlert});\n\n        this.context.patients = patients;\n        this.setState({ patients: patients});\n        // if (this.isActive) {\n        //   this.setState({ patients: patients, isLoading: false });\n        // }\n\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n        // if (this.isActive) {\n        //   this.setState({ isLoading: false });\n        // }\n      });\n  }\n\n  fetchPatientsDesc = () => {\n    console.log(\"fetch patients function:  \");\n    const userId = this.context.userId;\n    const token = this.context.token;\n\n    // this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n          query {patientsNameDesc(userId:\"${userId}\")\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{_id,title,time,location,date},consultant{date,reference{_id,name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n        `\n    };\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"resData\", resData);\n        const patients = resData.data.patientsNameDesc;\n        console.log(patients);\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({userAlert: responseAlert});\n\n        this.context.patients = patients\n        // if (this.isActive) {\n        //   this.setState({ patients: patients, isLoading: false });\n        // }\n        this.setState({ patients: patients});\n\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n        // if (this.isActive) {\n        //   this.setState({ isLoading: false });\n        // }\n      });\n  }\n\n\n  modalDeleteHandler = () => {\n    console.log(\"deleting patient...selectedPatient:  \", this.context.selectedPatient);\n\n    const selectedPatientId = this.context.selectedPatient._id;\n    const userId = this.context.selectedUser._id;\n\n    if(this.context.user.role !== 'admin') {\n      console.log(\"Not the Admin! No edit permission!!\");\n    }\n\n    this.setState({deleting: true});\n\n\n    const requestBody = {\n      query: `\n          mutation {deletePatient(userId:\"${userId}\",patientId:\"${selectedPatientId}\")\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n        `\n    };\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        let deletedPatient = resData.data.deletePatient;\n        console.log(deletedPatient);\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({userAlert: responseAlert});\n\n        let deletedPatientId = deletedPatient._id;\n        deletedPatient = this.state.patients.find(e => e._id === deletedPatientId);\n        const deletedPatientPos = this.state.patients.indexOf(deletedPatient);\n        const slicedArray = this.state.patients.splice(deletedPatientPos, 1);\n        console.log(\"deletedPatient:  \", JSON.stringify(deletedPatient),\"  deletedUserPos:  \", deletedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.setState({ deleting: false });\n\n        this.fetchPatients();\n\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n        if (this.isActive) {\n          this.setState({ deleting: false });\n        }\n      });\n  }\n\n\n  deletePatientInsuranceItem = (props) => {\n\n    let token = this.context.token;\n    let userId = this.context.userId;\n    let patientId = this.state.selectedPatient._id;\n\n    console.log(`\n      delete patient insurance item:\n      props: ${JSON.stringify(props)},\n      token: ${token},\n      userId: ${userId},\n      patientId: ${patientId},\n      `);\n\n      const requestBody = {\n        query: `\n         mutation {deletePatientInsurance (userId:\"${userId}\", patientId:\"${patientId}\",insuranceCompany:\"${props.company}\",insuranceNumber:\"${props.number}\")\n         {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `};\n\n          fetch('http://localhost:10000/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n              'Content-Type': 'application/json',\n              Authorization: 'Bearer ' + token\n            }\n          })\n            .then(res => {\n              if (res.status !== 200 && res.status !== 201) {\n                throw new Error('Failed!');\n              }\n              return res.json();\n            })\n            .then(resData => {\n              let deletedPatient = resData.data.deletePatientInsurance;\n              console.log(deletedPatient);\n\n              const updatedPatientId = resData.data.deletePatientInsurance._id;\n              const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n              const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n              const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n              console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n              this.state.patients.push(resData.data.deletePatientInsurance);\n              this.context.patients = this.state.patients;\n              const responseAlert = JSON.stringify(resData.data).slice(2,25);\n              this.setState({ userAlert: responseAlert})\n              // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientInsurance})\n              this.fetchPatients();\n\n            })\n            .catch(err => {\n              console.log(err);\n            });\n\n  }\n\n  deletePatientAppointmentItem = (props) => {\n\n    let token = this.context.token;\n    let userId = this.context.userId;\n    let patientId = this.state.selectedPatient._id;\n    let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n    console.log(`\n      delete patient appointment item:\n      props: ${JSON.stringify(props)},\n      token: ${token},\n      userId: ${userId},\n      patientId: ${patientId},\n      appointment date: ${date},\n      `);\n\n      const requestBody = {\n        query: `\n         mutation {deletePatientAppointment (userId:\"${userId}\", patientId:\"${patientId}\",appointmentId:\"${props._id}\",appointmentDate:\"${date}\")\n         {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `};\n\n          fetch('http://localhost:10000/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n              'Content-Type': 'application/json',\n              Authorization: 'Bearer ' + token\n            }\n          })\n            .then(res => {\n              if (res.status !== 200 && res.status !== 201) {\n                throw new Error('Failed!');\n              }\n              return res.json();\n            })\n            .then(resData => {\n              let deletedPatient = resData.data.deletePatientAppointment;\n              console.log(deletedPatient);\n\n              const updatedPatientId = resData.data.deletePatientAppointment._id;\n              const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n              const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n              const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n              console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n              this.state.patients.push(resData.data.deletePatientAppointment);\n              this.context.patients = this.state.patients;\n              const responseAlert = JSON.stringify(resData.data).slice(2,25);\n              this.setState({ userAlert: responseAlert})\n              this.fetchPatients();\n\n            })\n            .catch(err => {\n              console.log(err);\n            });\n}\n\n  deletePatientConsultantItem = (props) => {\n\n    let token = this.context.token;\n    let userId = this.context.userId;\n    let patientId = this.state.selectedPatient._id;\n    let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n    console.log(`\n      delete patient consultant item:\n      props: ${JSON.stringify(props)},\n      token: ${token},\n      userId: ${userId},\n      patientId: ${patientId},\n      consultant date: ${date},\n      `);\n\n      const requestBody = {\n        query: `\n         mutation {deletePatientConsultant (userId:\"${userId}\", patientId:\"${patientId}\",consultantId:\"${props.reference.id}\",consultantDate:\"${date}\")\n         {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `};\n\n          fetch('http://localhost:10000/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n              'Content-Type': 'application/json',\n              Authorization: 'Bearer ' + token\n            }\n          })\n            .then(res => {\n              if (res.status !== 200 && res.status !== 201) {\n                throw new Error('Failed!');\n              }\n              return res.json();\n            })\n            .then(resData => {\n              let deletedPatient = resData.data.deletePatientConsultant;\n              console.log(deletedPatient);\n\n              const updatedPatientId = resData.data.deletePatientConsultant._id;\n              const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n              const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n              const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n              console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n              this.state.patients.push(resData.data.deletePatientConsultant);\n              this.context.patients = this.state.patients;\n              const responseAlert = JSON.stringify(resData.data).slice(2,25);\n              this.setState({ userAlert: responseAlert})\n              this.fetchPatients();\n\n            })\n            .catch(err => {\n              console.log(err);\n            });\n}\n\ndeletePatientNextOfKinItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n\n  console.log(`\n    delete patient nextOfKin item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientNextOfKin (userId:\"${userId}\", patientId:\"${patientId}\",nextOfKinName:\"${props.name}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientNextOfKin;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientNextOfKin._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientNextOfKin);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientComplaintItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n  let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n  console.log(`\n    delete patient Complaint item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    complaint date: ${date},\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientComplaint (userId:\"${userId}\", patientId:\"${patientId}\",complaintTitle:\"${props.title}\",complaintDate:\"${date}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientComplaint;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientComplaint._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientComplaint);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientSurveyItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n  let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n  console.log(`\n    delete patient Survey item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    survey date: ${date}\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientSurvey (userId:\"${userId}\", patientId:\"${patientId}\",surveyTitle:\"${props.title}\",surveyDate:\"${date}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientSurvey;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientSurvey._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientSurvey);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientSystematicInquiryItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n  let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n  console.log(`\n    delete patient SystematicInquiry item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    systematicInquiry date: ${date}\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientSystematicInquiry (userId:\"${userId}\", patientId:\"${patientId}\",systematicInquiryTitle:\"${props.title}\",systematicInquiryDate:\"${date}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientSystematicInquiry;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientSystematicInquiry._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientSystematicInquiry);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientVitalsItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n  let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n  console.log(`\n    delete patient Vitals item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    vitals date: ${date},\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientVitals (userId:\"${userId}\", patientId:\"${patientId}\",vitalsDate:\"${date}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientVitals;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientVitals._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientVitals);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientExaminationItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n  let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n  console.log(`\n    delete patient Examination item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    examination date: ${date},\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientExamination (userId:\"${userId}\", patientId:\"${patientId}\",examinationType:\"${props.type}\",examinationDate:\"${date}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientExamination;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientExamination._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientExamination);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientHistoryItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n  let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n  console.log(`\n    delete patient History item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    history date: ${date},\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientHistory (userId:\"${userId}\", patientId:\"${patientId}\",historyTitle:\"${props.title}\",historyDate:\"${date}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientHistory;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientHistory._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientHistory);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientAllergiesItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n\n  console.log(`\n    delete patient Allergies item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientAllergies (userId:\"${userId}\", patientId:\"${patientId}\",allergiesTitle:\"${props.title}\",allergiesType:\"${props.type}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientAllergies;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientAllergies._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientAllergies);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientMedicationItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n\n  console.log(`\n    delete patient Medication item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientMedication (userId:\"${userId}\", patientId:\"${patientId}\",medicationTitle:\"${props.title}\",medicationType:\"${props.type}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientMedication;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientMedication._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientMedication);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert});\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientInvestigationItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n  let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n  console.log(`\n    delete patient Investigation item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    investigation date: ${date},\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientInvestigation (userId:\"${userId}\", patientId:\"${patientId}\",investigationDate:\"${date}\",investigationTitle:\"${props.title}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientInvestigation;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientInvestigation._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientInvestigation);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientDiagnosisItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n  let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n  console.log(`\n    delete patient Diagnosis item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    diagnosis date: ${date}\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientDiagnosis (userId:\"${userId}\",patientId:\"${patientId}\",diagnosisDate:\"${date}\",diagnosisTitle:\"${props.title}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientDiagnosis;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientDiagnosis._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientDiagnosis);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert});\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientTreatmentItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n  let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n  console.log(`\n    delete patient Treatment item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    treatment date: ${date},\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientTreatment (userId:\"${userId}\", patientId:\"${patientId}\",treatmentDate:\"${date}\",treatmentTitle:\"${props.title}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientTreatment;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientTreatment._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientTreatment);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert});\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientBillingItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n  let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n  console.log(`\n    delete patient Billing item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    billing date: ${date},\n    `);\n\n    const requestBody = {\n      query:`\n       mutation {deletePatientBilling (userId:\"${userId}\", patientId:\"${patientId}\",billingDate:\"${date}\",billingTitle:\"${props.title}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientBilling;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientBilling._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientBilling);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert});\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientVigilanceItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n  let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n  console.log(`\n    delete patient Vigilance item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    vigilance date: ${date},\n    `);\n\n    const requestBody = {\n      query:`\n       mutation {deletePatientVigilance (userId:\"${userId}\", patientId:\"${patientId}\",vigilanceDate:\"${date}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientVigilance;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientVigilance._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientVigilance);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert});\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientAttachmentItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n\n  // console.log(`\n  //   deleting from s3...\n  //   file.name: ${props.name},\n  //   `);\n  //\n  //   const config = {\n  //     bucketName: this.context.creds.s3.bucketName,\n  //     dirName: props.path,\n  //     region: this.context.creds.s3.region,\n  //     accessKeyId: this.context.creds.s3.accessKeyId,\n  //     secretAccessKey: this.context.creds.s3.secretAccessKey,\n  //   }\n  // const ReactS3Client = new S3(config);\n  // const filename = props.name;\n  // // const attachmentName = newFileName;\n  // //\n  // S3FileUpload\n  // .deleteFile(filename, config)\n  // .then(response => console.log(response))\n  // .catch(err => console.error(err))\n\n  console.log(`\n    delete patient Attachment item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    `);\n\n    const requestBody = {\n      query:`\n       mutation {deletePatientAttachment (userId:\"${userId}\", patientId:\"${patientId}\",attachmentName:\"${props.name}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientAttachment;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientAttachment._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientAttachment);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert});\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientNoteItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n\n  console.log(`\n    delete patient Note item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    `);\n\n    const requestBody = {\n      query:`\n      mutation {deletePatientNote (userId:\"${userId}\", patientId:\"${patientId}\",note:\"${props}\")\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientNote;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientNote._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientNote);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert});\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientTagItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n\n  console.log(`\n    delete patient Tag item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    `);\n\n    const requestBody = {\n      query:`\n      mutation {deletePatientTag (userId:\"${userId}\", patientId:\"${patientId}\",tag:\"${props}\")\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientTag;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientTag._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientTag);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert});\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n            this.setState({ userAlert: err})\n          });\n}\n\n\n  updatePatientSpecial (event) {\n\n    console.log(\"special field to update:  \", event.target.value);\n    const field = event.target.value;\n    this.setState({ patientUpdateField: field});\n\n  }\n\n  onViewAttachment = (attachment) => {\n    console.log(`\n      setting up attachment viewer...\n      attachment: ${JSON.stringify(attachment)}\n      `);\n      this.setState({showAttachment: true})\n\n      const file = \"https://ent-emr-bucket.s3-us-east-2.amazonaws.com/\"+attachment.path+\"/\"+attachment.name;\n      const type = attachment.format;\n\n      this.setState({showThisAttachmentFile: file, showThisAttachmentType: type})\n  }\n\n  closeAttachmentView = () => {\n    console.log(`\n      closing attachment viewer...\n      `);\n      this.setState({showAttachment: false})\n  }\n\n  createPdf = (patient) => {\n    console.log(`\n        creating pdf...\n        user: ${JSON.stringify(patient)}\n      `);\n\n      const pdfData = {\n        title: \"This pdf is supplied with Patient data...\",\n        patient: {\n          _id: patient._id,\n          title: patient.title,\n          name: patient.name,\n          dob: patient.dob,\n          age: patient.age,\n          gender: patient.gender,\n          address:{\n            number: patient.number,\n            street: patient.street,\n            town: patient.town,\n            parish: patient.parish,\n            postOffice: patient.postOffice\n          },\n          registrationDate: patient.registrationDate,\n          referralDate: patient.referralDate,\n          expirationDate: patient.expirationDate,\n          attendingPhysician:{\n            name: patient.attendingPhysician.name,\n            email: patient.attendingPhysician.email,\n            phone: patient.attendingPhysician.phone\n          },\n          referringDoctor: {\n            name: patient.referringDoctor.name,\n            email: patient.referringDoctor.email,\n            phone: patient.referringDoctor.phone\n          },\n          contact: {\n            phone: patient.contact.phone,\n            email: patient.contact.email\n          },\n          occupation:{\n            role: patient.occupation.role,\n            employer: patient.occupation.employer,\n            contact:{\n              phone: patient.occupation.contact.phone,\n              email: patient.occupation.contact.email\n            }},\n            appointments: patient.appointments,\n            consultant: patient.consultant,\n            insurance: patient.insurance,\n            nextOfKin: patient.nextOfKin,\n            complaints: patient.complaints,\n            surveys: patient.surveys,\n            systematicInquiry: patient.systematicInquiry,\n            vitals: patient.vitals,\n            examination: patient.examination,\n            history: patient.history,\n            allergies: patient.allergies,\n            medication: patient.medication,\n            investigation: patient.investigation,\n            diagnosis: patient.diagnosis,\n            treatment: patient.treatment,\n            billing: patient.billing,\n            vigilance: patient.vigilance,\n            attachments: patient.attachments,\n            notes: patient.notes,\n            tags: patient.tags\n          }\n        }\n\n    this.setState({createPdf: true, pdfData: pdfData})\n  }\n\n  closePdfCreator = () => {\n    console.log(`\n      closing pdf creator...\n      `);\n      this.setState({createPdf: false, pdfData: null} )\n  }\n\n\n  showDetailHandler = patientId => {\n\n    this.setState({ visitList: [] })\n\n    this.setState(prevState => {\n      const selectedPatient = prevState.patients.find(e => e._id === patientId);\n      this.context.selectedPatient = selectedPatient;\n      this.context.selectedPatientId = selectedPatient._id;\n      console.log(\"selectedPatient:  \", selectedPatient);\n      return { selectedPatient: selectedPatient };\n    });\n  };\n\n  selectVisit = (props) => {\n    console.log(`\n      changing selected visit ...\n      event: ${JSON.stringify(props)},\n      `);\n      this.setState({ selectedVisit: props })\n\n  }\n\n  closeVisit = () => {\n    console.log(`\n      clearing selected visits...\n      `);\n\n    this.setState({\n      visit: null,\n      selectedVisit: null,\n    })\n  }\n\n  createVisitChecklistUpdate = (props) => {\n    console.log(`\n      updating create-visit checklist...\n      props: ${props},\n      `);\n      this.setState({ userAlert: `creating visit: ${props} addedd...`})\n\n      let newState = Object.assign({}, this.state);\n      newState.createVisitChecklist[props] = true;\n      this.setState(newState);\n\n  }\n\n  newVisitComplete = () => {\n    console.log(`\n      finished adding new visit...\n      `);\n      this.setState({\n          newVisit: false,\n          createVisitChecklist: {\n            consultant: true,\n            complaint: true,\n            diagnosis: true,\n            examination: true,\n            investigation: true,\n            survey: true,\n            treatment: true,\n            vitals: true,\n            billing: true,\n          }\n      })\n  }\n\n\n  componentWillUnmount() {\n    this.isActive = false;\n  }\n\n  render() {\n    return (\n\n    <React.Fragment>\n    {this.state.showAttachment === true && (\n      <AttachmentViewer\n        onCloseAttachmentView={this.closeAttachmentView}\n        attachmentFile={this.state.showThisAttachmentFile}\n        attachmentType={this.state.showThisAttachmentType}\n      />\n    )}\n\n    {this.state.createPdf === true && (\n        <PdfCreator\n          pdfData={this.state.pdfData}\n          onClosePdfCreator={this.closePdfCreator}\n        />\n    )}\n\n    <Accordion>\n\n    <Row>\n    <Col md={3} className=\"MasterCol1\">\n\n    <AlertBox\n          authUserId={this.context.userId}\n          alert={this.state.userAlert}\n        />\n      <SidebarPage/>\n    </Col>\n\n    <Col md={9} className=\"MasterCol2\">\n    <Container className=\"containerCombinedDetail\">\n\n    <Tab.Container id=\"left-tabs-example\" defaultActiveKey=\"patientDetail\">\n      <Row>\n        <Col sm={2}>\n          <Nav variant=\"pills\" className=\"flex-column\">\n            <Nav.Item>\n              <Nav.Link eventKey=\"MasterList\">MASTER LIST</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientDetail\">Selected</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientCreate\">Create New</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"disabled\" disabled>Edit:</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditDemographics\">Demographics</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditField\">Single Field</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"disabled\" disabled>Add:</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientAddVisit\">Visit</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditConsultant\">Consultant</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditInsurance\">Insurance</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditNextOfKin\">Next of Kin</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditComplaint\">History</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditSurvey\">Survey</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditSystematicInquiry\">Systematic Inquiry</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditVitals\">Vitals</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditExamination\">Examination</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditHistory\">Past History</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditAllergies\">Allergies</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditMedication\">Medication</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditInvestigation\">Investigation</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditDiagnosis\">Diagnosis</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditTreatment\">Treatment</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditBilling\">Billing</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditVigilance\">Vigilance</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditAttachment\">Attachment</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditNote\">Note</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditTag\">Tag</Nav.Link>\n            </Nav.Item>\n\n            <Nav.Item>\n              <Nav.Link eventKey=\"disabled\" disabled>Search:</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"SearchInput\">Input</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"SearchResult\">Search</Nav.Link>\n            </Nav.Item>\n          </Nav>\n        </Col>\n        <Col sm={10}>\n          <Tab.Content>\n            <Tab.Pane eventKey=\"patientDetail\">\n              {this.state.selectedPatient === null &&\n                 (\n                <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient === null &&\n                 (\n                <Button variant=\"outline-danger\" size=\"lg\" className=\"confirmEditButton\">\n                  Don't forget to select someone from the Staff page before editing Patient Consultant information !!!\n                </Button>\n              )}\n              {this.state.isLoading === false &&\n                this.state.selectedPatient !== null &&\n                (<PatientDetail\n                  authUserId={this.context.userId}\n                  token={this.context.token}\n                  patient={this.state.selectedPatient}\n                  onEdit={this.startUpdatePatientHandler}\n                  canDelete={this.state.canDelete}\n                  onDelete={this.modalDeleteHandler}\n                  onGetVisit={this.getPatientVisit}\n                  visit={this.state.visit}\n                  selectedVisit={this.state.selectedVisit}\n                  fetchUsers={this.fetchUsers}\n                  appointmentDelete={this.deletePatientAppointmentItem}\n                  consultantDelete={this.deletePatientConsultantItem}\n                  insuranceDelete={this.deletePatientInsuranceItem}\n                  nextOfKinDelete={this.deletePatientNextOfKinItem}\n                  complaintDelete={this.deletePatientComplaintItem}\n                  surveyDelete={this.deletePatientSurveyItem}\n                  systematicInquiryDelete={this.deletePatientSystematicInquiryItem}\n                  vitalsDelete={this.deletePatientVitalsItem}\n                  examinationDelete={this.deletePatientExaminationItem}\n                  historyDelete={this.deletePatientHistoryItem}\n                  allergiesDelete={this.deletePatientAllergiesItem}\n                  medicationDelete={this.deletePatientMedicationItem}\n                  investigationDelete={this.deletePatientInvestigationItem}\n                  diagnosisDelete={this.deletePatientDiagnosisItem}\n                  treatmentDelete={this.deletePatientTreatmentItem}\n                  billingDelete={this.deletePatientBillingItem}\n                  vigilanceDelete={this.deletePatientVigilanceItem}\n                  attachmentDelete={this.deletePatientAttachmentItem}\n                  noteDelete={this.deletePatientNoteItem}\n                  tagDelete={this.deletePatientTagItem}\n                  onViewAttachment={this.onViewAttachment}\n                  onCreatePdf={this.createPdf}\n                  onGetVisitList={this.getVisitList}\n                  visitList={this.state.visitList}\n                  onSelectVisit={this.selectVisit}\n                  onCloseVisit={this.closeVisit}\n                  onSortVisitListAsc={this.getVisitListAsc}\n                  onSortVisitListDesc={this.getVisitListDesc}\n                  />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientCreate\">\n              <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" onClick={this.startCreatePatientHandler} >Create NEW Patient Profile</Button>\n              {\n                this.state.creating && (\n                  <CreatePatientForm\n                  canCancel\n                    canConfirm\n                    onCancel={this.modalCancelHandler}\n                    onConfirm={this.modalConfirmHandler}\n                    confirmText=\"Confirm\"\n                  />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientAddVisit\">\n            {this.state.selectedPatient === null && (\n              <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                Select a Patient from the Master List\n              </Button>\n            )}\n              { this.state.selectedPatient !== null &&\n                this.state.newVisit !== true &&\n              (<Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" onClick={this.startCreateVisitHandler} >Add NEW Visit</Button>\n              )}\n              {this.state.selectedPatient !== null &&\n                this.state.newVisit === true && (\n\n                  <Accordion defaultActiveKey=\"0\">\n                    <Card>\n                      <Card.Header>\n                        <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"0\">\n                          Guide:\n                        </Accordion.Toggle>\n                      </Card.Header>\n                      <Accordion.Collapse eventKey=\"0\">\n                        <Card.Body>\n                        <Card.Text>\n                          To create a NEW Patient Visit, fill in the forms below.\n                        </Card.Text>\n\n                        <Card.Text>\n                          Everytime you submit a form with new info, a new item is added to the current Patient visit.\n                        </Card.Text>\n\n                        <Card.Text>\n                          When you are done with a section click the GREEN Done adding Complaints, Vitals etc and continue to the next form.\n                        </Card.Text>\n\n                        <Card.Text>\n                          Once you have submitted all the information required scroll to the bottom and click the green button.\n                        </Card.Text>\n                        </Card.Body>\n                      </Accordion.Collapse>\n                    </Card>\n                    <Card>\n                      <Card.Header>\n                        <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"1\">\n                          Consultant\n                        </Accordion.Toggle>\n                      </Card.Header>\n                      <Accordion.Collapse eventKey=\"1\">\n                        <Card.Body>\n                        Add Consultant form:\n                        {this.state.createVisitChecklist.consultant === true &&\n                        (\n                          <Button variant=\"warning\" size=\"lg\" className=\"formButton\">\n                          Consultant for this Visit has already been added!!\n                          </Button>\n                        )}\n\n                        {this.state.createVisitChecklist.consultant === false &&\n                        this.context.selectedUser === null && (\n                          <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                            Select someone from the Staff page\n                          </Button>\n                        )}\n                        {this.state.createVisitChecklist.consultant === false &&\n                        this.context.selectedUser !== null && (\n                          <Row>\n                          <Card.Text>Add Consultant: {this.context.selectedUser.name}  ...</Card.Text>\n                          <Card.Text> To Paitient: {this.state.selectedPatient.name} ??</Card.Text>\n\n                          </Row>\n                        )}\n                        {this.state.createVisitChecklist.consultant === false &&\n                        this.context.selectedUser !== null && (\n                          <UpdatePatientConsultantForm\n                          authUserId={this.context.userId}\n                            canConfirm\n                            onCancel={this.modalCancelHandler}\n                            onConfirm={this.updatePatientConsultantHandler}\n                            confirmText=\"Confirm\"\n                            consultant={this.context.selectedUser}\n                            visit\n                            onCreateVisitChecklistUpdate={this.createVisitChecklistUpdate}\n                          />\n                        )}\n                        </Card.Body>\n                      </Accordion.Collapse>\n                    </Card>\n                    <Card>\n                      <Card.Header>\n                        <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"2\">\n                          Complaint\n                        </Accordion.Toggle>\n                      </Card.Header>\n                      <Accordion.Collapse eventKey=\"2\">\n                        <Card.Body>\n                        Add Complaint form:\n                        {this.state.createVisitChecklist.complaint === true &&\n                        (\n                          <Button variant=\"warning\" size=\"lg\" className=\"formButton\">\n                          Complaint for this Visit has already been added!!\n                          </Button>\n                        )}\n                        {this.state.createVisitChecklist.complaint === false &&\n                        (<UpdatePatientComplaintForm\n                              authUserId={this.context.userId}\n                                canConfirm\n                                onCancel={this.modalCancelHandler}\n                                onConfirm={this.updatePatientComplaintHandler}\n                                confirmText=\"Confirm\"\n                                patient={this.state.selectedPatient}\n                                visit\n                                onCreateVisitChecklistUpdate={this.createVisitChecklistUpdate}\n                              />\n                            )}\n                        </Card.Body>\n                      </Accordion.Collapse>\n                    </Card>\n                    <Card>\n                      <Card.Header>\n                        <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"3\">\n                          Vitals\n                        </Accordion.Toggle>\n                      </Card.Header>\n                      <Accordion.Collapse eventKey=\"3\">\n                        <Card.Body>\n                        Add Vitals form:\n                        {this.state.createVisitChecklist.vitals === true &&\n                        (\n                          <Button variant=\"warning\" size=\"lg\" className=\"formButton\">\n                          Vitals for this Visit have already been added!!\n                          </Button>\n                        )}\n                        {this.state.createVisitChecklist.vitals === false && (\n                          <UpdatePatientVitalsForm\n                                authUserId={this.context.userId}\n                                  canConfirm\n                                  onCancel={this.modalCancelHandler}\n                                  onConfirm={this.updatePatientVitalsHandler}\n                                  confirmText=\"Confirm\"\n                                  patient={this.state.selectedPatient}\n                                  visit\n                                  onCreateVisitChecklistUpdate={this.createVisitChecklistUpdate}\n                                />\n                        )}\n                        </Card.Body>\n                      </Accordion.Collapse>\n                    </Card>\n                    <Card>\n                      <Card.Header>\n                        <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"4\">\n                          Examination\n                        </Accordion.Toggle>\n                      </Card.Header>\n                      <Accordion.Collapse eventKey=\"4\">\n                        <Card.Body>\n                        Add Examination form:\n                        {this.state.createVisitChecklist.examination === true &&\n                        (\n                          <Button variant=\"warning\" size=\"lg\" className=\"formButton\">\n                          Examination for this Visit has already been added!!\n                          </Button>\n                        )}\n                        {this.state.createVisitChecklist.examination === false && (\n                          <UpdatePatientExaminationForm\n                                authUserId={this.context.userId}\n                                  canConfirm\n                                  onCancel={this.modalCancelHandler}\n                                  onConfirm={this.updatePatientExaminationHandler}\n                                  confirmText=\"Confirm\"\n                                  patient={this.state.selectedPatient}\n                                  visit\n                                  onCreateVisitChecklistUpdate={this.createVisitChecklistUpdate}\n                                />\n                        )}\n                        </Card.Body>\n                      </Accordion.Collapse>\n                    </Card>\n                    <Card>\n                      <Card.Header>\n                        <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"5\">\n                          Survey\n                        </Accordion.Toggle>\n                      </Card.Header>\n                      <Accordion.Collapse eventKey=\"5\">\n                        <Card.Body>\n                        Add Survey form:\n                        {this.state.createVisitChecklist.survey === true && (\n                          <Button variant=\"warning\" size=\"lg\" className=\"formButton\">\n                          Survey for this Visit has already been added!!\n                          </Button>\n                        )}\n                        {this.state.createVisitChecklist.survey === false && (\n                          <UpdatePatientSurveyForm\n                            authUserId={this.context.userId}\n                            canConfirm\n                            onCancel={this.modalCancelHandler}\n                            onConfirm={this.updatePatientSurveyHandler}\n                            confirmText=\"Confirm\"\n                            patient={this.state.selectedPatient}\n                            visit\n                            onCreateVisitChecklistUpdate={this.createVisitChecklistUpdate}\n                          />\n                        )}\n                        </Card.Body>\n                      </Accordion.Collapse>\n                    </Card>\n                    <Card>\n                      <Card.Header>\n                        <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"22\">\n                          SystematicInquiry\n                        </Accordion.Toggle>\n                      </Card.Header>\n                      <Accordion.Collapse eventKey=\"22\">\n                        <Card.Body>\n                        Add Systematic Inquiry form:\n                        {this.state.createVisitChecklist.systematicInquiry === true && (\n                          <Button variant=\"warning\" size=\"lg\" className=\"formButton\">\n                          Systematic Inquiry for this Visit has already been added!!\n                          </Button>\n                        )}\n                        {this.state.createVisitChecklist.systematicInquiry === false && (\n                          <UpdatePatientSystematicInquiryForm\n                            authUserId={this.context.userId}\n                            canConfirm\n                            onCancel={this.modalCancelHandler}\n                            onConfirm={this.updatePatientSystematicInquiryHandler}\n                            confirmText=\"Confirm\"\n                            patient={this.state.selectedPatient}\n                            visit\n                            onCreateVisitChecklistUpdate={this.createVisitChecklistUpdate}\n                          />\n                        )}\n                        </Card.Body>\n                      </Accordion.Collapse>\n                    </Card>\n                    <Card>\n                      <Card.Header>\n                        <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"6\">\n                          Investigation\n                        </Accordion.Toggle>\n                      </Card.Header>\n                      <Accordion.Collapse eventKey=\"6\">\n                        <Card.Body>\n                        Add Investigation form:\n                        {this.state.createVisitChecklist.investigation === true && (\n                          <Button variant=\"warning\" size=\"lg\" className=\"formButton\">\n                          Investigation for this Visit has already been added!!\n                          </Button>\n                        )}\n                        {this.state.createVisitChecklist.investigation === false && (\n                          <UpdatePatientInvestigationForm\n                                authUserId={this.context.userId}\n                                  canConfirm\n                                  onCancel={this.modalCancelHandler}\n                                  onConfirm={this.updatePatientInvestigationHandler}\n                                  confirmText=\"Confirm\"\n                                  patient={this.state.selectedPatient}\n                                  visit\n                                  onCreateVisitChecklistUpdate={this.createVisitChecklistUpdate}\n                                />\n                        )}\n                        </Card.Body>\n                      </Accordion.Collapse>\n                    </Card>\n                    <Card>\n                      <Card.Header>\n                        <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"7\">\n                          Diagnosis\n                        </Accordion.Toggle>\n                      </Card.Header>\n                      <Accordion.Collapse eventKey=\"7\">\n                        <Card.Body>\n                        Add Diagnosis form:\n                        {this.state.createVisitChecklist.diagnosis === true && (\n                          <Button variant=\"warning\" size=\"lg\" className=\"formButton\">\n                          Diagnosis for this Visit has already been added!!\n                          </Button>\n                        )}\n                        {this.state.createVisitChecklist.diagnosis === false && (\n                          <UpdatePatientDiagnosisForm\n                              authUserId={this.context.userId}\n                              canConfirm\n                              onCancel={this.modalCancelHandler}\n                              onConfirm={this.updatePatientDiagnosisHandler}\n                              confirmText=\"Confirm\"\n                              patient={this.state.selectedPatient}\n                              visit\n                              onCreateVisitChecklistUpdate={this.createVisitChecklistUpdate}\n                            />\n                        )}\n                        </Card.Body>\n                      </Accordion.Collapse>\n                    </Card>\n                    <Card>\n                      <Card.Header>\n                        <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"8\">\n                          Treatment\n                        </Accordion.Toggle>\n                      </Card.Header>\n                      <Accordion.Collapse eventKey=\"8\">\n                        <Card.Body>\n                        Add Treatment form:\n                        {this.state.createVisitChecklist.treatment === true && (\n                          <Button variant=\"warning\" size=\"lg\" className=\"formButton\">\n                          Treatment for this Visit has already been added!!\n                          </Button>\n                        )}\n                        {this.state.createVisitChecklist.treatment === false && (\n                          <UpdatePatientTreatmentForm\n                              authUserId={this.context.userId}\n                              canCancel\n                              canConfirm\n                              onCancel={this.modalCancelHandler}\n                              onConfirm={this.updatePatientTreatmentHandler}\n                              confirmText=\"Confirm\"\n                              patient={this.state.selectedPatient}\n                              visit\n                              onCreateVisitChecklistUpdate={this.createVisitChecklistUpdate}\n                            />\n                        )}\n                        </Card.Body>\n                      </Accordion.Collapse>\n                    </Card>\n                    <Card>\n                      <Card.Header>\n                        <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"9\">\n                          Billing\n                        </Accordion.Toggle>\n                      </Card.Header>\n                      <Accordion.Collapse eventKey=\"9\">\n                        <Card.Body>\n                        Add Billing form:\n                        {this.state.createVisitChecklist.billing === true &&\n                        (\n                          <Button variant=\"warning\" size=\"lg\" className=\"formButton\">\n                          Billing for this Visit has already been added!!\n                          </Button>\n                        )}\n                        {this.state.createVisitChecklist.billing === false && (\n                          <UpdatePatientBillingForm\n                              authUserId={this.context.userId}\n                              canConfirm\n                              onCancel={this.modalCancelHandler}\n                              onConfirm={this.updatePatientBillingHandler}\n                              confirmText=\"Confirm\"\n                              patient={this.state.selectedPatient}\n                              visit\n                              onCreateVisitChecklistUpdate={this.createVisitChecklistUpdate}\n                            />\n                        )}\n                        </Card.Body>\n                      </Accordion.Collapse>\n                    </Card>\n                    <Card>\n                      <Card.Header>\n                        <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"23\">\n                          Vigilance\n                        </Accordion.Toggle>\n                      </Card.Header>\n                      <Accordion.Collapse eventKey=\"23\">\n                        <Card.Body>\n                        Add Vigilance form:\n                        {this.state.createVisitChecklist.vigilance === true &&\n                        (\n                          <Button variant=\"warning\" size=\"lg\" className=\"formButton\">\n                          Vigilance for this Visit has already been added!!\n                          </Button>\n                        )}\n                        {this.state.createVisitChecklist.vigilance === false && (\n                          <UpdatePatientVigilanceForm\n                              authUserId={this.context.userId}\n                              canConfirm\n                              onCancel={this.modalCancelHandler}\n                              onConfirm={this.updatePatientVigilanceHandler}\n                              confirmText=\"Confirm\"\n                              patient={this.state.selectedPatient}\n                              visit\n                              onCreateVisitChecklistUpdate={this.createVisitChecklistUpdate}\n                            />\n                        )}\n                        </Card.Body>\n                      </Accordion.Collapse>\n                    </Card>\n                    <Card>\n                      <Card.Header>\n                        <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"10\">\n                          Finished ?\n                        </Accordion.Toggle>\n                      </Card.Header>\n                      <Accordion.Collapse eventKey=\"10\">\n                        <Card.Body>\n                        <Button variant=\"success\" className=\"formButton\" onClick={this.newVisitComplete}>\n                        Done creating Visit\n                        </Button>\n                        </Card.Body>\n                      </Accordion.Collapse>\n                    </Card>\n                  </Accordion>\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditDemographics\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" onClick={this.startUpdatePatientHandler}>Edit Demographics</Button>\n              )}\n              {this.state.updating &&\n                this.state.selectedPatient !== null\n                && (\n                <UpdatePatientForm\n                authUserId={this.context.userId}\n                canCancel\n                  canConfirm\n                  onCancel={this.modalCancelHandler}\n                  onConfirm={this.modalConfirmUpdateHandler}\n                  confirmText=\"Confirm\"\n                  patient={this.state.selectedPatient}\n                />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditField\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" onClick={this.startUpdatePatientHandler}>Edit a Single Field</Button>\n              )}\n              {this.state.updating &&\n                this.state.selectedPatient !== null\n                && (\n                  <UpdatePatientFieldForm\n                    authUserId={this.context.userId}\n                    canCancel\n                    canConfirm\n                    onCancel={this.modalCancelHandler}\n                    onConfirm={this.modalConfirmUpdateFieldHandler}\n                    confirmText=\"Confirm\"\n                    patient={this.state.selectedPatient}\n                  />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditConsultant\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='consultant' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add a Consultant</Button>\n              )}\n              {this.state.patientUpdateField === 'consultant' &&\n              this.state.selectedPatient !== null &&\n              this.context.selectedUser === null &&\n              (\n                <Row>\n                <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                  Select someone from the Staff page\n                </Button>\n                </Row>\n              )}\n              {this.state.patientUpdateField === 'consultant' &&\n              this.state.selectedPatient !== null &&\n              (\n                <Row>\n                <p>Add Consultant: {this.context.selectedUser.name}  ...</p>\n                <p> To Paitient: {this.state.selectedPatient.name} ??</p>\n\n                </Row>\n              )}\n              {this.state.patientUpdateField === 'consultant' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientConsultantForm\n                authUserId={this.context.userId}\n                canCancel\n                  canConfirm\n                  onCancel={this.modalCancelHandler}\n                  onConfirm={this.updatePatientConsultantHandler}\n                  confirmText=\"Confirm\"\n                  consultant={this.context.selectedUser}\n                />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditInsurance\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='insurance' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Insurance</Button>\n              )}\n              {this.state.patientUpdateField === 'insurance' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientInsuranceForm\n                authUserId={this.context.userId}\n                canCancel\n                  canConfirm\n                  onCancel={this.modalCancelHandler}\n                  onConfirm={this.updatePatientInsuranceHandler}\n                  confirmText=\"Confirm\"\n                  patient={this.state.selectedPatient}\n                />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditNextOfKin\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='nextOfKin' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add NextOfKin</Button>\n              )}\n              {this.state.patientUpdateField === 'nextOfKin' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientNextOfKinForm\n                      authUserId={this.context.userId}\n                      canCancel\n                        canConfirm\n                        onCancel={this.modalCancelHandler}\n                        onConfirm={this.updatePatientNextOfKinHandler}\n                        confirmText=\"Confirm\"\n                        patient={this.state.selectedPatient}\n                      />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditComplaint\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='complaint' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add History</Button>\n              )}\n              {this.state.patientUpdateField === 'complaint' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientComplaintForm\n                      authUserId={this.context.userId}\n                      canCancel\n                        canConfirm\n                        onCancel={this.modalCancelHandler}\n                        onConfirm={this.updatePatientComplaintHandler}\n                        confirmText=\"Confirm\"\n                        patient={this.state.selectedPatient}\n                      />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditSurvey\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='survey' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Survey</Button>\n              )}\n              {this.state.patientUpdateField === 'survey' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientSurveyForm\n                      authUserId={this.context.userId}\n                      canCancel\n                        canConfirm\n                        onCancel={this.modalCancelHandler}\n                        onConfirm={this.updatePatientSurveyHandler}\n                        confirmText=\"Confirm\"\n                        patient={this.state.selectedPatient}\n                      />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditSystematicInquiry\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='systematicInquiry' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Systematic Inquiry</Button>\n              )}\n              {this.state.patientUpdateField === 'systematicInquiry' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientSystematicInquiryForm\n                      authUserId={this.context.userId}\n                      canCancel\n                        canConfirm\n                        onCancel={this.modalCancelHandler}\n                        onConfirm={this.updatePatientSystematicInquiryHandler}\n                        confirmText=\"Confirm\"\n                        patient={this.state.selectedPatient}\n                      />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditVitals\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='vitals' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Vitals</Button>\n              )}\n              {this.state.patientUpdateField === 'vitals' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientVitalsForm\n                      authUserId={this.context.userId}\n                      canCancel\n                        canConfirm\n                        onCancel={this.modalCancelHandler}\n                        onConfirm={this.updatePatientVitalsHandler}\n                        confirmText=\"Confirm\"\n                        patient={this.state.selectedPatient}\n                      />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditExamination\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='examintion' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Examination</Button>\n              )}\n              {this.state.patientUpdateField === 'examintion' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientExaminationForm\n                      authUserId={this.context.userId}\n                      canCancel\n                        canConfirm\n                        onCancel={this.modalCancelHandler}\n                        onConfirm={this.updatePatientExaminationHandler}\n                        confirmText=\"Confirm\"\n                        patient={this.state.selectedPatient}\n                      />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditHistory\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='history' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Past History</Button>\n              )}\n              {this.state.patientUpdateField === 'history' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientHistoryForm\n                authUserId={this.context.userId}\n                canCancel\n                  canConfirm\n                  onCancel={this.modalCancelHandler}\n                  onConfirm={this.updatePatientHistoryHandler}\n                  confirmText=\"Confirm\"\n                  patient={this.state.selectedPatient}\n                />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditAllergies\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='allergies' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Allergies</Button>\n              )}\n              {this.state.patientUpdateField === 'allergies' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientAllergiesForm\n                      authUserId={this.context.userId}\n                      canCancel\n                        canConfirm\n                        onCancel={this.modalCancelHandler}\n                        onConfirm={this.updatePatientAllergiesHandler}\n                        confirmText=\"Confirm\"\n                        patient={this.state.selectedPatient}\n                      />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditMedication\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='medication' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Medication</Button>\n              )}\n              {this.state.patientUpdateField === 'medication' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientMedicationForm\n                authUserId={this.context.userId}\n                canCancel\n                  canConfirm\n                  onCancel={this.modalCancelHandler}\n                  onConfirm={this.updatePatientMedicationHandler}\n                  confirmText=\"Confirm\"\n                  patient={this.state.selectedPatient}\n                />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditInvestigation\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='investigation' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Investigation</Button>\n              )}\n              {this.state.patientUpdateField === 'investigation' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientInvestigationForm\n                      authUserId={this.context.userId}\n                      canCancel\n                        canConfirm\n                        onCancel={this.modalCancelHandler}\n                        onConfirm={this.updatePatientInvestigationHandler}\n                        confirmText=\"Confirm\"\n                        patient={this.state.selectedPatient}\n                      />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditDiagnosis\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='diagnosis' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Diagnosis</Button>\n              )}\n              {this.state.patientUpdateField === 'diagnosis' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientDiagnosisForm\n                      authUserId={this.context.userId}\n                      canCancel\n                        canConfirm\n                        onCancel={this.modalCancelHandler}\n                        onConfirm={this.updatePatientDiagnosisHandler}\n                        confirmText=\"Confirm\"\n                        patient={this.state.selectedPatient}\n                      />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditTreatment\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='treatment' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Treatment</Button>\n              )}\n              {this.state.patientUpdateField === 'treatment' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientTreatmentForm\n                      authUserId={this.context.userId}\n                      canCancel\n                        canConfirm\n                        onCancel={this.modalCancelHandler}\n                        onConfirm={this.updatePatientTreatmentHandler}\n                        confirmText=\"Confirm\"\n                        patient={this.state.selectedPatient}\n                      />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditBilling\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='billing' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Billing</Button>\n              )}\n              {this.state.patientUpdateField === 'billing' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientBillingForm\n                      authUserId={this.context.userId}\n                      canCancel\n                        canConfirm\n                        onCancel={this.modalCancelHandler}\n                        onConfirm={this.updatePatientBillingHandler}\n                        confirmText=\"Confirm\"\n                        patient={this.state.selectedPatient}\n                      />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditVigilance\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='vigilance' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Vigilance</Button>\n              )}\n              {this.state.patientUpdateField === 'vigilance' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientVigilanceForm\n                      authUserId={this.context.userId}\n                      canCancel\n                        canConfirm\n                        onCancel={this.modalCancelHandler}\n                        onConfirm={this.updatePatientVigilanceHandler}\n                        confirmText=\"Confirm\"\n                        patient={this.state.selectedPatient}\n                      />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditAttachment\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='attachment' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Attachment</Button>\n              )}\n              {this.state.patientUpdateField === 'attachment' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientAttachmentForm\n                      authUserId={this.context.userId}\n                      canCancel\n                        canConfirm\n                        onCancel={this.modalCancelHandler}\n                        onConfirm={this.updatePatientAttachmentHandler}\n                        confirmText=\"Confirm\"\n                        patient={this.state.selectedPatient}\n                      />\n                    )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditNote\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='notes' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Note</Button>\n              )}\n              {this.state.patientUpdateField === 'notes' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientNoteForm\n                      authUserId={this.context.userId}\n                      canCancel\n                        canConfirm\n                        onCancel={this.modalCancelHandler}\n                        onConfirm={this.updatePatientNoteHandler}\n                        confirmText=\"Confirm\"\n                        patient={this.state.selectedPatient}\n                      />\n                    )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditTag\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='tags' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Tag</Button>\n              )}\n              {this.state.patientUpdateField === 'tags' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientTagForm\n                      authUserId={this.context.userId}\n                      canCancel\n                        canConfirm\n                        onCancel={this.modalCancelHandler}\n                        onConfirm={this.updatePatientTagHandler}\n                        confirmText=\"Confirm\"\n                        patient={this.state.selectedPatient}\n                      />\n                    )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"MasterList\">\n              <Container className=\"containerUserMasterList\">\n              <Row className=\"searchListRow\">\n              <Button variant=\"primary\" size=\"sm\" onClick={this.fetchPatientsAsc}>\n                 Sort Asc\n               </Button>\n              <Button variant=\"info\" size=\"sm\" onClick={this.fetchPatientsDesc}>\n                 Sort Desc\n               </Button>\n              {this.state.isLoading ? (\n                <Spinner />\n              ) : (\n                <PatientList\n                  patients={this.state.patients}\n                  authUserId={this.context.userId}\n                  onViewDetail={this.showDetailHandler}\n                />\n              )}\n              </Row>\n              </Container>\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"SearchInput\">\n              <Container className=\"containerSearchUserInput\">\n                {this.context.token && (\n                <Row className=\"searchUserRowAdd\">\n                <Button variant=\"primary\" onClick={this.startSearchPatientHandler}>Search</Button>\n                </Row>\n              )}\n\n              <Row className=\"searchUserRowForm\">\n              <Col md={10} className=\"searchUserColForm\">\n              <Tabs defaultActiveKey=\"Field\" id=\"uncontrolled-tab-example\">\n              <Tab eventKey=\"Search\" title=\"Search:\" disabled>\n              </Tab>\n              <Tab eventKey=\"Field\" title=\"Search by Field:\">\n              {this.state.searching !== true && (\n                <Button variant=\"outline-warning\" className=\"confirmEditButton\" size=\"lg\">\n                  Click the 'Search' Button start\n                </Button>\n              )}\n              {this.state.searching === true && (\n                <SearchPatientForm\n                authUserId={this.context.userId}\n                canCancel\n                  canConfirm\n                  onCancel={this.modalCancelHandler}\n                  onConfirm={this.modalConfirmSearchHandler}\n                  confirmText=\"Search\"\n                  patient={this.context.selectedPatient}\n                />\n              )}\n              </Tab>\n              <Tab eventKey=\"Id\" title=\"Search by ID:\">\n              {this.state.searching !== true && (\n                <Button variant=\"outline-warning\" className=\"confirmEditButton\" size=\"lg\">\n                  Click the 'Search' Button start\n                </Button>\n              )}\n              {this.state.searching === true && (\n                <SearchPatientIdForm\n                authUserId={this.context.userId}\n                canCancel\n                  canConfirm\n                  onCancel={this.modalCancelHandler}\n                  onConfirm={this.modalConfirmSearchIdHandler}\n                  confirmText=\"Search\"\n                  patient={this.context.selectedPatient}\n                />\n              )}\n              </Tab>\n\n              <Tab eventKey=\"Name\" title=\"Search by Name:\">\n              {this.state.searching !== true && (\n                <Button variant=\"outline-warning\" className=\"confirmEditButton\" size=\"lg\">\n                  Click the 'Search' Button start\n                </Button>\n              )}\n              {this.state.searching === true && (\n                <SearchPatientNameForm\n                authUserId={this.context.userId}\n                canCancel\n                  canConfirm\n                  onCancel={this.modalCancelHandler}\n                  onConfirm={this.modalConfirmSearchNameHandler}\n                  confirmText=\"Search\"\n                  patient={this.context.selectedPatient}\n                />\n              )}\n              </Tab>\n              </Tabs>\n              </Col>\n              </Row>\n              </Container>\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"SearchResult\">\n              <Container className=\"containerSearchUserResults\">\n              <Row>\n                <Card className=\"searchCard\">\n                  <Card.Body className=\"searchCardBody\">\n                    <Card.Title>Your Search</Card.Title>\n                    <Card.Text>\n                      Field: {this.state.patientSearchField}\n                    </Card.Text>\n                    <Card.Text>\n                      Query: {this.state.patientSearchQuery}\n                    </Card.Text>\n                  </Card.Body>\n                </Card>\n              </Row>\n              <Row className=\"searchListRow\">\n              {\n                this.state.searchPatients !== [] &&\n                <SearchPatientList\n                  searchPatients={this.state.searchPatients}\n                  authUserId={this.context.userId}\n                  onCancel={this.modalCancelHandler}\n                    onViewDetail={this.showDetailHandler}\n                />\n              }\n              </Row>\n              </Container>\n            </Tab.Pane>\n          </Tab.Content>\n        </Col>\n      </Row>\n    </Tab.Container>\n\n\n\n    </Container>\n\n\n\n\n\n    </Col>\n\n    <Col md={3} className=\"MasterCol3\">\n\n\n    </Col>\n    </Row>\n\n</Accordion>\n\n      </React.Fragment>\n    );\n  }\n}\n\nexport default PatientsPage;\n"]},"metadata":{},"sourceType":"module"}