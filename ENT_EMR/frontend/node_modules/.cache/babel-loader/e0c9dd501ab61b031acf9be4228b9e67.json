{"ast":null,"code":"var _jsxFileName = \"/Users/pedrojacob/Downloads/AMR/websites/office_records/ENT_EMR/frontend/src/pages/Signup.js\";\nimport React, { Component } from 'react'; // import Form from 'react-bootstrap/Form';\n// import Button from 'react-bootstrap/Button';\n// import Modal from '../components/Modal/Modal';\n// import Backdrop from '../components/Backdrop/Backdrop';\n// import UserList from '../components/Users/UserList/UserList';\n// import UserDetail from '../components/Users/UserDetail';\n// import Spinner from '../components/Spinner/Spinner';\n// import AuthContext from '../context/auth-context';\n\nimport CreateUserForm from '../components/Forms/CreateUserForm'; // import UpdateUserForm from '../components/Forms/UpdateUserForm';\n\nimport './Users.css';\n\nclass SignupPage extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.modalConfirmHandler = event => {\n      event.preventDefault();\n      console.log(\"signing up...\"); // console.log(\"CreateUserFormData:  \", event.target.formGridEmail.value);\n\n      this.setState({\n        creating: false\n      });\n      const email = event.target.formGridEmail.value;\n      const password = event.target.formGridPassword.value;\n      const name = event.target.formGridName.value;\n      const role = event.target.formGridRole.value;\n\n      if (email.trim().length === 0 || password.trim().length === 0 || name.trim().length === 0 || role.trim().length === 0) {\n        return;\n      }\n\n      const user = {\n        email,\n        password,\n        name,\n        role\n      };\n      console.log(\"creating user.. \" + JSON.stringify(user));\n      const requestBody = {\n        query: \"\\n          mutation CreateUser($email: String!, $password: String!, $name: String!, $role: String!) {\\n            createUser(userInput: {email: $email, password: $password, name: $name, role: $role}) {\\n              _id\\n              email\\n              password\\n              name\\n              role\\n            }\\n          }\\n        \",\n        variables: {\n          email: email,\n          password: password,\n          name: name,\n          role: role\n        }\n      };\n      const token = this.context.token;\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n        this.setState(prevState => {\n          const updatedUsers = [...prevState.users];\n          updatedUsers.push({\n            _id: resData.data.createUser._id,\n            email: resData.data.createUser.email,\n            name: resData.data.createUser.name,\n            role: resData.data.createUser.role\n          });\n          return {\n            users: updatedUsers\n          };\n        });\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.modalCancelHandler = () => {\n      this.setState({\n        creating: false,\n        updating: false,\n        selectedUser: null\n      });\n    };\n  }\n\n  // componentWillUnmount() {\n  //   this.isActive = false;\n  // }\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, React.createElement(CreateUserForm, {\n      canConfirm: true,\n      onConfirm: this.modalConfirmHandler,\n      onSubmit: this.modalConfirmHandler,\n      confirmText: \"Confirm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default SignupPage;","map":{"version":3,"sources":["/Users/pedrojacob/Downloads/AMR/websites/office_records/ENT_EMR/frontend/src/pages/Signup.js"],"names":["React","Component","CreateUserForm","SignupPage","modalConfirmHandler","event","preventDefault","console","log","setState","creating","email","target","formGridEmail","value","password","formGridPassword","name","formGridName","role","formGridRole","trim","length","user","JSON","stringify","requestBody","query","variables","token","context","fetch","method","body","headers","then","res","status","Error","json","resData","prevState","updatedUsers","users","push","_id","data","createUser","catch","err","modalCancelHandler","updating","selectedUser","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n// import Form from 'react-bootstrap/Form';\n// import Button from 'react-bootstrap/Button';\n\n// import Modal from '../components/Modal/Modal';\n// import Backdrop from '../components/Backdrop/Backdrop';\n// import UserList from '../components/Users/UserList/UserList';\n// import UserDetail from '../components/Users/UserDetail';\n// import Spinner from '../components/Spinner/Spinner';\n// import AuthContext from '../context/auth-context';\n\nimport CreateUserForm from '../components/Forms/CreateUserForm';\n// import UpdateUserForm from '../components/Forms/UpdateUserForm';\nimport './Users.css';\n\nclass SignupPage extends Component {\n  // state = {\n  //   creating: false,\n  //   updating: false,\n  //   users: [],\n  //   isLoading: false,\n  //   selectedUser: null\n  // };\n  // isActive = true;\n\n  // static contextType = AuthContext;\n\n  // constructor(props) {\n  //   super(props);\n  //   this.emailElRef = React.createRef();\n  //   this.passwordElRef = React.createRef();\n  //   this.nameElRef = React.createRef();\n  //   this.roleElRef = React.createRef();\n  // }\n  //\n  // componentDidMount() {\n  //   this.fetchUsers();\n  // }\n\n\n  // startCreateUserHandler = () => {\n  //   this.setState({ creating: true });\n  //   console.log(\"CreateUserForm...\");\n  // };\n  // startUpdateUserHandler = () => {\n  //   this.setState({ updating: true });\n  //   console.log(\"UpdateUserForm...\");\n  // };\n\n  modalConfirmHandler = (event) => {\n\n    event.preventDefault();\n    console.log(\"signing up...\");\n\n    // console.log(\"CreateUserFormData:  \", event.target.formGridEmail.value);\n\n    this.setState({ creating: false });\n    const email = event.target.formGridEmail.value;\n    const password = event.target.formGridPassword.value;\n    const name = event.target.formGridName.value;\n    const role = event.target.formGridRole.value;\n\n    if (\n      email.trim().length === 0 ||\n      password.trim().length === 0 ||\n      name.trim().length === 0 ||\n      role.trim().length === 0\n    ) {\n      return;\n    }\n\n    const user = { email, password, name, role };\n    console.log(\"creating user.. \" + JSON.stringify(user));\n\n    const requestBody = {\n      query: `\n          mutation CreateUser($email: String!, $password: String!, $name: String!, $role: String!) {\n            createUser(userInput: {email: $email, password: $password, name: $name, role: $role}) {\n              _id\n              email\n              password\n              name\n              role\n            }\n          }\n        `,\n        variables: {\n          email: email,\n          password: password,\n          name: name,\n          role: role\n        }\n    };\n\n    const token = this.context.token;\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n        this.setState(prevState => {\n          const updatedUsers = [...prevState.users];\n          updatedUsers.push({\n            _id: resData.data.createUser._id,\n            email: resData.data.createUser.email,\n            name: resData.data.createUser.name,\n            role: resData.data.createUser.role\n          });\n\n          return { users: updatedUsers };\n        });\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  modalCancelHandler = () => {\n    this.setState({ creating: false, updating: false, selectedUser: null });\n  };\n\n\n  // componentWillUnmount() {\n  //   this.isActive = false;\n  // }\n\n  render() {\n    return (\n      <React.Fragment>\n        { (\n          <CreateUserForm\n            canConfirm\n            onConfirm={this.modalConfirmHandler}\n            onSubmit={this.modalConfirmHandler}\n            confirmText=\"Confirm\"\n          />\n        )\n      }\n      </React.Fragment>\n    );\n  }\n}\n\nexport default SignupPage;\n"]},"metadata":{},"sourceType":"module"}