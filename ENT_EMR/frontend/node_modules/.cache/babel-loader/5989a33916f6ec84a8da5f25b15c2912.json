{"ast":null,"code":"var _jsxFileName = \"/Users/pedrojacob/Downloads/AMR/websites/office_records/ENT_EMR/frontend/src/pages/Patients.js\";\nimport React, { Component } from 'react';\nimport S3 from 'react-aws-s3';\nimport S3FileUpload from 'react-s3';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport Accordion from 'react-bootstrap/Accordion';\nimport SidebarPage from './Sidebar';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\nimport Card from 'react-bootstrap/Card';\nimport PatientList from '../components/Patients/PatientList/PatientList';\nimport PatientDetail from '../components/Patients/PatientDetail';\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\nimport SearchPatientList from '../components/Patients/PatientList/SearchPatientList';\nimport SearchPatientForm from '../components/Forms/SearchPatientForm';\nimport SearchPatientIdForm from '../components/Forms/SearchPatientIdForm';\nimport SearchPatientNameForm from '../components/Forms/SearchPatientNameForm';\nimport SearchPatientVisitForm from '../components/Forms/SearchPatientVisitForm';\nimport AlertBox from '../components/AlertBox';\nimport CreatePatientForm from '../components/Forms/CreatePatientForm';\nimport UpdatePatientForm from '../components/Forms/UpdatePatientForm';\nimport UpdatePatientFieldForm from '../components/Forms/UpdatePatientFieldForm';\nimport UpdatePatientConsultantForm from '../components/Forms/UpdatePatientConsultantForm';\nimport UpdatePatientInsuranceForm from '../components/Forms/UpdatePatientInsuranceForm';\nimport UpdatePatientNextOfKinForm from '../components/Forms/UpdatePatientNextOfKinForm';\nimport UpdatePatientComplaintForm from '../components/Forms/UpdatePatientComplaintForm';\nimport UpdatePatientSurveyForm from '../components/Forms/UpdatePatientSurveyForm';\nimport UpdatePatientVitalsForm from '../components/Forms/UpdatePatientVitalsForm';\nimport UpdatePatientExaminationForm from '../components/Forms/UpdatePatientExaminationForm';\nimport UpdatePatientHistoryForm from '../components/Forms/UpdatePatientHistoryForm';\nimport UpdatePatientAllergiesForm from '../components/Forms/UpdatePatientAllergiesForm';\nimport UpdatePatientMedicationForm from '../components/Forms/UpdatePatientMedicationForm';\nimport UpdatePatientInvestigationForm from '../components/Forms/UpdatePatientInvestigationForm';\nimport UpdatePatientDiagnosisForm from '../components/Forms/UpdatePatientDiagnosisForm';\nimport UpdatePatientTreatmentForm from '../components/Forms/UpdatePatientTreatmentForm';\nimport UpdatePatientBillingForm from '../components/Forms/UpdatePatientBillingForm';\nimport UpdatePatientAttachmentForm from '../components/Forms/UpdatePatientAttachmentForm';\nimport UpdatePatientNoteForm from '../components/Forms/UpdatePatientNoteForm';\nimport UpdatePatientTagForm from '../components/Forms/UpdatePatientTagForm';\nimport './Users.css';\n\nclass PatientsPage extends Component {\n  constructor(_props) {\n    super(_props);\n    this.state = {\n      creating: false,\n      updating: false,\n      searching: false,\n      updatingArray: false,\n      deleting: false,\n      patients: [],\n      searchPatients: [],\n      isLoading: false,\n      selectedPatient: null,\n      patientUpdateField: null,\n      patientSearchField: null,\n      patientSearchQuery: null,\n      canDelete: null,\n      visit: null,\n      userAlert: null\n    };\n    this.isActive = true;\n\n    this.startCreatePatientHandler = () => {\n      this.setState({\n        creating: true\n      });\n      console.log(\"CreatePatientForm...\");\n    };\n\n    this.startUpdatePatientHandler = () => {\n      this.setState({\n        updating: true,\n        updatingArray: true\n      });\n      console.log(\"UpdatePatientForm...\");\n    };\n\n    this.startSearchPatientHandler = () => {\n      this.setState({\n        searching: true\n      });\n      console.log(\"SearchPatientForm...\");\n    };\n\n    this.modalConfirmHandler = event => {\n      console.log(\"CreatePatientFormData:  \", event.target.formGridName.value);\n      this.setState({\n        creating: false\n      });\n      const userId = this.context.userId;\n      let title = event.target.formGridTitle.value;\n      let name = event.target.formGridName.value;\n      let dob = event.target.formGridDob.value;\n      let age = event.target.formGridAge.value;\n      let gender = event.target.formGridGender.value;\n      let addressNumber = event.target.formGridAddressNumber.value;\n      let addressStreet = event.target.formGridAddressStreet.value;\n      let addressTown = event.target.formGridAddressTown.value;\n      let addressParish = event.target.formGridAddressParish.value;\n      let addressPostOffice = event.target.formGridAddressPostOffice.value;\n      let contactPhone = event.target.formGridContactPhone.value;\n      let contactEmail = event.target.formGridContactEmail.value;\n      let registrationDate = event.target.formGridRegistrationDate.value;\n      let referralDate = event.target.formGridReferralDate.value;\n      let expirationDate = event.target.formGridExpirationDate.value;\n      let attendingPhysicianName = event.target.formGridAttendingPhysicianName.value;\n      let attendingPhysicianEmail = event.target.formGridAttendingPhysicianEmail.value;\n      let attendingPhysicianPhone = event.target.formGridAttendingPhysicianPhone.value;\n      let referringDoctorName = event.target.formGridReferringDoctorName.value;\n      let referringDoctorEmail = event.target.formGridReferringDoctorEmail.value;\n      let referringDoctorPhone = event.target.formGridReferringDoctorPhone.value;\n      let occupationRole = event.target.formGridOccupationRole.value;\n      let occupationEmployer = event.target.formGridOccupationEmployer.value;\n      let occupationEmployerContactPhone = event.target.formGridOccupationEmployerContactPhone.value;\n      let occupationEmployerContactEmail = event.target.formGridOccupationEmployerContactEmail.value;\n\n      if (name.trim().length === 0 || // title.trim().length === 0 ||\n      // name.trim().length === 0 ||\n      // dob.trim().length === 0 ||\n      // age.trim().length === 0 ||\n      // gender.trim().length === 0 ||\n      // addressNumber.trim().length === 0 ||\n      // addressStreet.trim().length === 0 ||\n      // addressTown.trim().length === 0 ||\n      // addressParish.trim().length === 0 ||\n      // addressPostOffice.trim().length === 0 ||\n      contactPhone.trim().length === 0 // contactEmail.trim().length === 0 ||\n      // registrationDate.trim().length === 0 ||\n      // referralDate.trim().length === 0 ||\n      // expirationDate.trim().length === 0 ||\n      // attendingPhysicianName.trim().length === 0 ||\n      // attendingPhysicianEmail.trim().length === 0 ||\n      // attendingPhysicianPhone.trim().length === 0 ||\n      // referringDoctorName.trim().length === 0 ||\n      // referringDoctorEmail.trim().length === 0 ||\n      // referringDoctorPhone.trim().length === 0 ||\n      // occupationRole.trim().length === 0 ||\n      // occupationEmployer.trim().length === 0 ||\n      // occupationEmployerContactPhone.trim().length === 0 ||\n      // occupationEmployerContactEmail.trim().length === 0\n      ) {\n          console.log(\"patient must have at least a Name and Contact Number!!!...Please try again...\");\n          this.setState({\n            userAlert: \"patient requires Name and Contact Number!!!... Try again...\"\n          });\n          return;\n        }\n\n      const patient = {\n        title,\n        name,\n        dob,\n        age,\n        gender,\n        addressNumber,\n        addressStreet,\n        addressTown,\n        addressParish,\n        addressPostOffice,\n        contactPhone,\n        contactEmail,\n        registrationDate,\n        referralDate,\n        expirationDate,\n        attendingPhysicianName,\n        attendingPhysicianEmail,\n        attendingPhysicianPhone,\n        referringDoctorName,\n        referringDoctorEmail,\n        referringDoctorPhone,\n        occupationRole,\n        occupationEmployer,\n        occupationEmployerContactPhone,\n        occupationEmployerContactEmail\n      };\n      console.log(`\n      creating patient...\n      title: ${title},\n      name: ${name},\n      dob: ${dob},\n      age: ${age},\n      gender: ${gender},\n      addressNumber: ${addressNumber},\n      addressStreet: ${addressStreet},\n      addressTown: ${addressTown},\n      addressParish: ${addressParish},\n      addressPostOffice: ${addressPostOffice},\n      contactPhone: ${contactPhone},\n      contactEmail: ${contactEmail},\n      registrationDate: ${registrationDate},\n      referralDate: ${referralDate},\n      expirationDate: ${expirationDate},\n      attendingPhysicianName: ${attendingPhysicianName},\n      attendingPhysicianEmail: ${attendingPhysicianEmail},\n      attendingPhysicianPhone: ${attendingPhysicianPhone},\n      referringDoctorName: ${referringDoctorName},\n      referringDoctorEmail: ${referringDoctorEmail},\n      referringDoctorPhone: ${referringDoctorPhone},\n      occupationRole: ${occupationRole},\n      occupationEmployer: ${occupationEmployer},\n      occupationEmployerContactPhone: ${occupationEmployerContactPhone},\n      occupationEmployerContactEmail: ${occupationEmployerContactEmail},\n      `);\n      const requestBody = {\n        query: `\n          mutation {createPatient(userId:\\\"${userId}\\\", patientInput:{title:\\\"${title}\\\",name:\\\"${name}\\\",dob:\\\"${dob}\\\",age:${age},gender:\\\"${gender}\\\",addressNumber:${addressNumber},addressStreet:\\\"${addressStreet}\\\",addressTown:\\\"${addressTown}\\\",addressParish:\\\"${addressParish}\\\",addressPostOffice:\\\"${addressPostOffice}\\\",contactPhone:\\\"${contactPhone}\\\",contactEmail:\\\"${contactEmail}\\\",registrationDate:\\\"${registrationDate}\\\",referralDate:\\\"${referralDate}\\\",expirationDate:\\\"${expirationDate}\\\",referringDoctorName:\\\"${referringDoctorName}\\\",referringDoctorEmail:\\\"${referringDoctorEmail}\\\",referringDoctorPhone:\\\"${referringDoctorPhone}\\\",attendingPhysicianName:\\\"${attendingPhysicianName}\\\",attendingPhysicianEmail:\\\"${attendingPhysicianEmail}\\\",attendingPhysicianPhone:\\\"${attendingPhysicianPhone}\\\",occupationRole:\\\"${occupationRole}\\\",occupationEmployer:\\\"${occupationEmployer}\\\",occupationEmployerContactPhone:\\\"${occupationEmployerContactPhone}\\\",occupationEmployerContactEmail:\\\"${occupationEmployerContactEmail}\\\"})\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n        `\n      };\n      const token = this.context.token; // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(`\n          response data:\n          ${JSON.stringify(resData.data.createPatient)}\n          `);\n        const responseAlert = JSON.stringify(resData.data).slice(2, 15);\n        this.setState({\n          userAlert: responseAlert\n        });\n        const newPatient = resData.data.createPatient;\n        this.setState(prevState => {\n          const updatedPatients = [...prevState.patients];\n          updatedPatients.push(newPatient);\n          return {\n            patients: updatedPatients\n          };\n        });\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.modalCancelHandler = () => {\n      this.setState({\n        creating: false,\n        updating: false,\n        selectedPatient: null\n      });\n    };\n\n    this.modalConfirmUpdateHandler = event => {\n      // if(this.context.user.role !== 'admin') {\n      //   console.log(\"Not the Admin! No edit permission!!\");\n      // }\n      const userId = this.context.userId;\n      const selectedPatientId = this.context.selectedPatient._id;\n      console.log(\"UpdatePatientFormData:  \", event.target.formGridName.value);\n      this.setState({\n        updating: false\n      });\n      let title = event.target.formGridTitle.value;\n      let name = event.target.formGridName.value;\n      let dob = event.target.formGridDob.value;\n      let age = event.target.formGridAge.value;\n      let gender = event.target.formGridGender.value;\n      let addressNumber = event.target.formGridAddressNumber.value;\n      let addressStreet = event.target.formGridAddressStreet.value;\n      let addressTown = event.target.formGridAddressTown.value;\n      let addressParish = event.target.formGridAddressParish.value;\n      let addressPostOffice = event.target.formGridAddressPostOffice.value;\n      let contactPhone = event.target.formGridContactPhone.value;\n      let contactEmail = event.target.formGridContactEmail.value;\n      let registrationDate = event.target.formGridRegistrationDate.value;\n      let referralDate = event.target.formGridReferralDate.value;\n      let expirationDate = event.target.formGridExpirationDate.value;\n      let attendingPhysicianName = event.target.formGridAttendingPhysicianName.value;\n      let attendingPhysicianEmail = event.target.formGridAttendingPhysicianEmail.value;\n      let attendingPhysicianPhone = event.target.formGridAttendingPhysicianPhone.value;\n      let referringDoctorName = event.target.formGridReferringDoctorName.value;\n      let referringDoctorEmail = event.target.formGridReferringDoctorEmail.value;\n      let referringDoctorPhone = event.target.formGridReferringDoctorPhone.value;\n      let occupationRole = event.target.formGridOccupationRole.value;\n      let occupationEmployer = event.target.formGridOccupationEmployer.value;\n      let occupationEmployerContactPhone = event.target.formGridOccupationEmployerContactPhone.value;\n      let occupationEmployerContactEmail = event.target.formGridOccupationEmployerContactEmail.value;\n\n      if (title.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        title = this.context.selectedPatient.title;\n      }\n\n      if (name.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        name = this.context.selectedPatient.name;\n      }\n\n      if (dob.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        dob = this.context.selectedPatient.dob;\n      }\n\n      if (gender.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        gender = this.context.selectedPatient.gender;\n      }\n\n      if (age.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        age = this.context.selectedPatient.age;\n      }\n\n      if (addressNumber.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        addressNumber = this.context.selectedPatient.address.number;\n      }\n\n      if (addressStreet.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        addressStreet = this.context.selectedPatient.address.street;\n      }\n\n      if (addressTown.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        addressTown = this.context.selectedPatient.address.town;\n      }\n\n      if (addressParish.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        addressParish = this.context.selectedPatient.address.parish;\n      }\n\n      if (addressPostOffice.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        addressPostOffice = this.context.selectedPatient.address.postOffice;\n      }\n\n      if (contactPhone.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        contactPhone = this.context.selectedPatient.contact.phone;\n      }\n\n      if (contactEmail.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        contactEmail = this.context.selectedPatient.contact.email;\n      }\n\n      if (registrationDate.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        registrationDate = this.context.selectedPatient.registrationDate;\n      }\n\n      if (attendingPhysicianName.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        attendingPhysicianName = this.context.selectedPatient.attendingPhysician.name;\n      }\n\n      if (attendingPhysicianEmail.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        attendingPhysicianEmail = this.context.selectedPatient.attendingPhysician.email;\n      }\n\n      if (attendingPhysicianPhone.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        attendingPhysicianPhone = this.context.selectedPatient.attendingPhysician.phone;\n      }\n\n      if (referringDoctorName.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        referringDoctorName = this.context.selectedPatient.referringDoctor.name;\n      }\n\n      if (referringDoctorEmail.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        referringDoctorEmail = this.context.selectedPatient.referringDoctor.email;\n      }\n\n      if (referringDoctorPhone.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        referringDoctorPhone = this.context.selectedPatient.referringDoctor.phone;\n      }\n\n      if (occupationRole.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        occupationRole = this.context.selectedPatient.occupation.role;\n      }\n\n      if (occupationEmployer.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        occupationEmployer = this.context.selectedPatient.occupation.employer;\n      }\n\n      if (occupationEmployerContactEmail.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        occupationEmployerContactEmail = this.context.selectedPatient.occupation.contact.email;\n      }\n\n      if (occupationEmployerContactPhone.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        occupationEmployerContactPhone = this.context.selectedPatient.occupation.contact.phone;\n      }\n\n      const patient = {\n        title,\n        name,\n        dob,\n        age,\n        gender,\n        addressNumber,\n        addressStreet,\n        addressTown,\n        addressParish,\n        addressPostOffice,\n        contactPhone,\n        contactEmail,\n        registrationDate,\n        referralDate,\n        expirationDate,\n        attendingPhysicianName,\n        attendingPhysicianEmail,\n        attendingPhysicianPhone,\n        referringDoctorName,\n        referringDoctorEmail,\n        referringDoctorPhone,\n        occupationRole,\n        occupationEmployer,\n        occupationEmployerContactPhone,\n        occupationEmployerContactEmail\n      };\n      console.log(`\n      updating patient...\n      title: ${title},\n      name: ${name},\n      dob: ${dob},\n      age: ${age},\n      gender: ${gender},\n      addressNumber: ${addressNumber},\n      addressStreet: ${addressStreet},\n      addressTown: ${addressTown},\n      addressParish: ${addressParish},\n      addressPostOffice: ${addressPostOffice},\n      contactPhone: ${contactPhone},\n      contactEmail: ${contactEmail},\n      registrationDate: ${registrationDate},\n      referralDate: ${referralDate},\n      expirationDate: ${expirationDate},\n      attendingPhysicianName: ${attendingPhysicianName},\n      attendingPhysicianEmail: ${attendingPhysicianEmail},\n      attendingPhysicianPhone: ${attendingPhysicianPhone},\n      referringDoctorName: ${referringDoctorName},\n      referringDoctorEmail: ${referringDoctorEmail},\n      referringDoctorPhone: ${referringDoctorPhone},\n      occupationRole: ${occupationRole},\n      occupationEmployer: ${occupationEmployer},\n      occupationEmployerContactPhone: ${occupationEmployerContactPhone},\n      occupationEmployerContactEmail: ${occupationEmployerContactEmail},\n      `);\n      this.setState({\n        userAlert: \"updating patient...\"\n      });\n      const requestBody = {\n        query: `\n          mutation {updatePatient(userId:\"${userId}\",patientId:\"${selectedPatientId}\", patientInput:{title:\"${title}\",name:\"${name}\",dob:\"${dob}\",age:${age},gender:\"${gender}\",addressNumber:${addressNumber},addressStreet:\"${addressStreet}\",addressTown:\"${addressTown}\",addressParish:\"${addressParish}\",addressPostOffice:\"${addressPostOffice}\",contactPhone:\"${contactPhone}\",contactEmail:\"${contactEmail}\",registrationDate:\"${registrationDate}\",referralDate:\"${referralDate}\",expirationDate:\"${expirationDate}\",referringDoctorName:\"${referringDoctorName}\",referringDoctorEmail:\"${referringDoctorEmail}\",referringDoctorPhone:\"${referringDoctorPhone}\",attendingPhysicianName:\"${attendingPhysicianName}\",attendingPhysicianEmail:\"${attendingPhysicianEmail}\",attendingPhysicianPhone:\"${attendingPhysicianPhone}\",occupationRole:\"${occupationRole}\",occupationEmployer:\"${occupationEmployer}\",occupationEmployerContactPhone:\"${occupationEmployerContactPhone}\",occupationEmployerContactEmail:\"${occupationEmployerContactPhone}\"})\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n        `\n      };\n      const token = this.context.token;\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n        const updatedPatientId = resData.data.updatePatient._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.updatePatient);\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert,\n          selectedPatient: resData.data.updatePatient\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.modalConfirmUpdateFieldHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id; // if( this.context.user.role !== 'admin') {\n      //   console.log(\"Not the creator or Admin! No edit permission!!\");\n      //   selectedPatientId = null;\n      // }\n\n      console.log(\"UpdatePatientFieldFormData:  \", event.target.formGridField.value);\n      this.setState({\n        updating: false\n      });\n      let field = null;\n      let query = event.target.formGridQuery.value;\n\n      if (event.target.formGridFieldSelect.value === \"select\") {\n        field = event.target.formGridField.value;\n      } else {\n        field = event.target.formGridFieldSelect.value;\n      }\n\n      const requestBody = {\n        query: `\n          mutation {updatePatientField(userId:\\\"${userId}\\\",patientId:\\\"${selectedPatientId}\\\",field:\\\"${field}\\\",query:\\\"${query}\\\")\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n        `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data.updatePatientField));\n        const updatedPatientId = resData.data.updatePatientField._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.updatePatientField);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert,\n          selectedPatient: resData.data.updatePatientField\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientConsultantHandler = event => {\n      let token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id;\n      const patientConsultantReference = this.context.selectedUser._id; // if(this.context.user.role !== 'admin') {\n      //   console.log(\"No edit permission!!\");\n      //   return;\n      // }\n\n      if (patientConsultantReference === undefined) {\n        console.log(`\n      select a Staff member before adding a Patient Consultant!!\n      `);\n        this.setState({\n          userAlert: \"select a Staff member before adding a Patient Consultant!!...\"\n        });\n        token = null;\n      }\n\n      console.log(\"UpdatePatientConsultantFormData:  \", event.target.formGridConsultantDate.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let consultantDate = event.target.formGridConsultantDate.value;\n      const patientConsultant = {\n        consultantDate,\n        patientConsultantReference\n      };\n      console.log(`\n    adding patient consultant item...\n    userId: ${userId},\n    selectedPatientId: ${selectedPatientId},\n    consultantDate: ${consultantDate},\n    consultantReference: ${patientConsultantReference},\n    `);\n      const requestBody = {\n        query: `\n        mutation {updatePatientConsultant(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{consultantDate:\" ${consultantDate}\",consultantReference: \"${patientConsultantReference}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientConsultant._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.updatePatientConsultant);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert,\n          selectedPatient: resData.data.updatePatientConsultant\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientInsuranceHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id; // if(this.context.user.role !== 'admin') {\n      //   console.log(\"No edit permission!!\");\n      //   return;\n      // }\n\n      console.log(\"UpdatePatientInsuranceFormData:  \", event.target.formGridInsuranceCompany.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let insuranceCompany = event.target.formGridInsuranceCompany.value;\n      let insuranceNumber = event.target.formGridInsuranceNumber.value;\n      let insuranceExpiry = event.target.formGridInsuranceExpiry.value;\n      let insuranceDescription = event.target.formGridInsuranceDescription.value;\n      let insuranceSubscriberCompany = event.target.formGridInsuranceSubscriberCompany.value;\n      let insuranceSubscriberDescription = event.target.formGridInsuranceSubscriberDescription.value;\n      const patientInsurance = {\n        insuranceCompany,\n        insuranceNumber,\n        insuranceExpiry,\n        insuranceDescription,\n        insuranceSubscriberCompany,\n        insuranceSubscriberDescription\n      };\n      console.log(`\n    adding patient insurance item...\n    userId: ${userId},\n    selectedPatientId: ${selectedPatientId},\n    insuranceCompany: ${insuranceCompany},\n    insuranceNumber: ${insuranceNumber},\n    insuranceExpiry: ${insuranceExpiry},\n    insuranceDescription: ${insuranceDescription},\n    insuranceSubscriberCompany: ${insuranceSubscriberCompany},\n    insuranceSubscriberDescription: ${insuranceSubscriberDescription},\n    `);\n      this.setState({\n        userAlert: \"adding patient insurance item...\"\n      });\n      const requestBody = {\n        query: `\n        mutation {updatePatientInsurance(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{insuranceCompany:\"${insuranceCompany}\",insuranceNumber:\"${insuranceNumber}\",insuranceDescription:\"${insuranceDescription}\",insuranceExpiry:\"${insuranceExpiry}\",insuranceSubscriberCompany:\"${insuranceSubscriberCompany}\",insuranceSubscriberDescription:\"${insuranceSubscriberDescription}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientInsurance._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.updatePatientInsurance);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert,\n          selectedPatient: resData.data.updatePatientInsurance\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientNextOfKinHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id; // if(this.context.user.role !== 'admin') {\n      //   console.log(\"No edit permission!!\");\n      //   return;\n      // }\n\n      console.log(\"UpdatePatientNextOfKinFormData:  \", event.target.formGridNextOfKinName.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let nextOfKinName = event.target.formGridNextOfKinName.value;\n      let nextOfKinPhone = event.target.formGridNextOfKinPhone.value;\n      let nextOfKinEmail = event.target.formGridNextOfKinEmail.value;\n      const patientNextOfKin = {\n        nextOfKinName,\n        nextOfKinPhone,\n        nextOfKinEmail\n      };\n      console.log(`\n    adding patient nextOfKin item...\n    userId: ${userId},\n    selectedPatientId: ${selectedPatientId},\n    nextOfKinName: ${nextOfKinName},\n    nextOfKinPhone: ${nextOfKinPhone},\n    nextOfKinEmail: ${nextOfKinEmail},\n    `);\n      this.setState({\n        userAlert: \"adding patient nextOfKin item...\"\n      });\n      const requestBody = {\n        query: `\n        mutation {updatePatientNextOfKin(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{nextOfKinName:\"${nextOfKinName}\",nextOfKinEmail:\"${nextOfKinEmail}\",nextOfKinPhone:\"${nextOfKinPhone}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientNextOfKin._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.updatePatientNextOfKin);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert,\n          selectedPatient: resData.data.updatePatientNextOfKin\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientComplaintHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id; // if(this.context.user.role !== 'admin') {\n      //   console.log(\"No edit permission!!\");\n      //   return;\n      // }\n\n      console.log(\"UpdatePatientComplaintFormData:  \", event.target.formGridComplaintTitle.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let complaintTitle = event.target.formGridComplaintTitle.value;\n      let complaintDate = event.target.formGridComplaintDate.value;\n      let complaintDescription = event.target.formGridComplaintDescription.value;\n      let complaintAnamnesis = event.target.formGridComplaintAnamnesis.value;\n      let complaintAttachmentName = event.target.formGridComplaintAttachmentName.value;\n      let complaintAttachmentFormat = event.target.formGridComplaintAttachmentFormat.value;\n      let complaintAttachmentPath = event.target.formGridComplaintAttachmentPath.value;\n      let file = AuthContext._currentValue.file;\n      console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n      const config = {\n        bucketName: 'ent-emr-bucket',\n        dirName: complaintAttachmentPath,\n        region: 'us-east-2',\n        accessKeyId: \"AKIARFTS6Q6DALQKT4QR\",\n        secretAccessKey: \"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\"\n      };\n      const ReactS3Client = new S3(config);\n      const newFileName = file.name;\n      ReactS3Client.uploadFile(file, newFileName).then(data => {\n        console.log(data);\n        this.setState({\n          userAlert: \"attachment upload success!\"\n        });\n      }).catch(err => {\n        console.error(err);\n        this.setState({\n          userAlert: \"upload error:  \" + err\n        });\n      });\n      const patientComplaint = {\n        complaintTitle,\n        complaintDate,\n        complaintDescription,\n        complaintAnamnesis,\n        complaintAttachmentName,\n        complaintAttachmentFormat,\n        complaintAttachmentPath\n      };\n      console.log(`\n    adding patient complaint...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    complaintTitle: ${complaintTitle},\n    complaintDate: ${complaintDate},\n    complaintDescription: ${complaintDescription},\n    complaintAnamnesis: ${complaintAnamnesis},\n    complaintAttachmentName: ${complaintAttachmentName},\n    complaintAttachmentFormat: ${complaintAttachmentFormat},\n    complaintAttachmentPath: ${complaintAttachmentPath},\n    `);\n      this.setState({\n        userAlert: \"adding patient complaint...\"\n      });\n      const requestBody = {\n        query: `\n        mutation {updatePatientComplaint(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{complaintDate:\"${complaintDate}\",complaintTitle:\"${complaintTitle}\",complaintDescription:\"${complaintDescription}\",complaintAnamnesis:\"${complaintAnamnesis}\",complaintAttachmentName:\"${complaintAttachmentName}\",complaintAttachmentFormat:\"${complaintAttachmentFormat}\",complaintAttachmentPath:\"${complaintAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientComplaint._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.updatePatientComplaint);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert,\n          selectedPatient: resData.data.updatePatientComplaint\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientSurveyHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id; // if(this.context.user.role !== 'admin') {\n      //   console.log(\"No edit permission!!\");\n      //   return;\n      // }\n\n      console.log(\"UpdatePatientSurveyFormData:  \", event.target.formGridSurveyTitle.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let surveyDate = event.target.formGridSurveyDate.value;\n      let surveyTitle = event.target.formGridSurveyTitle.value;\n      let surveyDescription = event.target.formGridSurveyDescription.value; // let surveyAttachmentName = event.target.formGridSurveyAttachmentName.value;\n\n      let surveyAttachmentFormat = event.target.formGridSurveyAttachmentFormat.value;\n      let surveyAttachmentPath = event.target.formGridSurveyAttachmentPath.value;\n      let file = AuthContext._currentValue.file;\n      console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n      const config = {\n        bucketName: 'ent-emr-bucket',\n        dirName: surveyAttachmentPath,\n        region: 'us-east-2',\n        accessKeyId: \"AKIARFTS6Q6DALQKT4QR\",\n        secretAccessKey: \"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\"\n      };\n      const ReactS3Client = new S3(config);\n      const newFileName = file.name;\n      const surveyAttachmentName = newFileName;\n      ReactS3Client.uploadFile(file, newFileName).then(data => {\n        console.log(data);\n        this.setState({\n          userAlert: \"attachment upload success!\"\n        });\n      }).catch(err => {\n        console.error(err);\n        this.setState({\n          userAlert: \"upload error:  \" + err\n        });\n      });\n      const patientSurvey = {\n        surveyDate,\n        surveyTitle,\n        surveyDescription,\n        surveyAttachmentName,\n        surveyAttachmentFormat,\n        surveyAttachmentPath\n      };\n      console.log(`\n    adding patient survey...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    surveyDate: ${surveyDate},\n    surveyTitle: ${surveyTitle},\n    surveyDescription: ${surveyDescription},\n    surveyAttachmentName: ${surveyAttachmentName},\n    surveyAttachmentFormat: ${surveyAttachmentFormat},\n    surveyAttachmentPath: ${surveyAttachmentPath},\n    `);\n      this.setState({\n        userAlert: \"adding patient survey...\"\n      });\n      const requestBody = {\n        query: `\n        mutation {updatePatientSurvey(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{surveyDate:\"${surveyDate}\",surveyTitle:\"${surveyTitle}\",surveyDescription:\"${surveyDescription}\",surveyAttachmentName:\"${surveyAttachmentName}\",surveyAttachmentFormat:\"${surveyAttachmentFormat}\",surveyAttachmentPath:\"${surveyAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientSurvey._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.updatePatientSurvey);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert,\n          selectedPatient: resData.data.updatePatientSurvey\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientVitalsHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id; // if(this.context.user.role !== 'admin') {\n      //   console.log(\"No edit permission!!\");\n      //   return;\n      // }\n\n      console.log(\"UpdatePatientVitalsFormData:  \", event.target.formGridVitalsDate.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let vitalsDate = event.target.formGridVitalsDate.value;\n      let vitalsPr = event.target.formGridVitalsPr.value;\n      let vitalsBp1 = event.target.formGridVitalsBp1.value;\n      let vitalsBp2 = event.target.formGridVitalsBp2.value;\n      let vitalsRr = event.target.formGridVitalsRr.value;\n      let vitalsTemp = event.target.formGridVitalsTemp.value;\n      let vitalsPs02 = event.target.formGridVitalsPs02.value;\n      let vitalsHeight = event.target.formGridVitalsHeight.value;\n      let vitalsWeight = event.target.formGridVitalsWeight.value;\n      let vitalsBmi = event.target.formGridVitalsBmi.value;\n      let vitalsUrineType = event.target.formGridVitalsUrineType.value;\n      let vitalsUrineValue = event.target.formGridVitalsUrineValue.value;\n      const patientVitals = {};\n      console.log(`\n    adding patient vitals...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    `);\n      this.setState({\n        userAlert: \"adding patient vitals...\"\n      });\n      const requestBody = {\n        query: `\n        mutation {updatePatientVitals(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{vitalsDate:\"${vitalsDate}\",vitalsPr:${vitalsPr},vitalsBp1:${vitalsBp1},vitalsBp2:${vitalsBp2},vitalsRr:${vitalsRr},vitalsTemp:${vitalsTemp},vitalsPs02:${vitalsPs02},vitalsHeight:${vitalsHeight},vitalsWeight:${vitalsWeight},vitalsBmi:${vitalsBmi},vitalsUrineType:\"${vitalsUrineType}\",vitalsUrineValue:\"${vitalsUrineValue}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientVitals._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.updatePatientVitals);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert,\n          selectedPatient: resData.data.updatePatientVitals\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientExaminationHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id; // if(this.context.user.role !== 'admin') {\n      //   console.log(\"No edit permission!!\");\n      //   return;\n      // }\n\n      console.log(\"UpdatePatientExaminationFormData:  \", event.target.formGridExaminationArea.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let examinationDate = event.target.formGridExaminationDate.value;\n      let examinationGeneral = event.target.formGridExaminationGeneral.value;\n      let examinationArea = undefined;\n\n      if (event.target.formGridExaminationAreaSelect === \"select\") {\n        examinationArea = event.target.formGridExaminationArea.value;\n      } else {\n        examinationArea = event.target.formGridExaminationAreaSelect.value;\n      }\n\n      let examinationType = event.target.formGridExaminationType.value;\n      let examinationMeasure = event.target.formGridExaminationMeasure.value;\n      let examinationValue = event.target.formGridExaminationValue.value;\n      let examinationDescription = event.target.formGridExaminationDescription.value;\n      let examinationFollowUp = event.target.formGridExaminationFollowUp.value; // let examinationAttachmentName = event.target.formGridExaminationAttachmentName.value;\n\n      let examinationAttachmentFormat = event.target.formGridExaminationAttachmentFormat.value;\n      let examinationAttachmentPath = event.target.formGridExaminationAttachmentPath.value;\n      let file = AuthContext._currentValue.file;\n      console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n      const config = {\n        bucketName: 'ent-emr-bucket',\n        dirName: examinationAttachmentPath,\n        region: 'us-east-2',\n        accessKeyId: \"AKIARFTS6Q6DALQKT4QR\",\n        secretAccessKey: \"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\"\n      };\n      const ReactS3Client = new S3(config);\n      const newFileName = file.name;\n      const examinationAttachmentName = newFileName;\n      ReactS3Client.uploadFile(file, newFileName).then(data => {\n        console.log(data);\n        this.setState({\n          userAlert: \"attachment upload success!\"\n        });\n      }).catch(err => {\n        console.error(err);\n        this.setState({\n          userAlert: \"upload error:  \" + err\n        });\n      });\n      const patientExamination = {\n        examinationArea,\n        examinationGeneral,\n        examinationType,\n        examinationMeasure,\n        examinationValue,\n        examinationAttachmentName,\n        examinationAttachmentFormat,\n        examinationAttachmentPath\n      };\n      console.log(`\n    adding patient examination...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    examinationDate: ${examinationDate},\n    examinationGeneral: ${examinationGeneral},\n    examinationArea: ${examinationArea},\n    examinationType: ${examinationType},\n    examinationMeasure: ${examinationMeasure},\n    examinationValue: ${examinationValue},\n    examinationDescription: ${examinationDescription},\n    examinationFollowUp: ${examinationFollowUp},\n    examinationAttachmentName: ${examinationAttachmentName},\n    examinationAttachmentFormat: ${examinationAttachmentFormat},\n    examinationAttachmentPath: ${examinationAttachmentPath},\n    `);\n      this.setState({\n        userAlert: \"adding patient examination...\"\n      });\n      const requestBody = {\n        query: `\n        mutation {updatePatientExamination(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{examinationDate:\"${examinationDate}\",examinationGeneral:\"${examinationGeneral}\",examinationArea:\"${examinationArea}\",examinationType:\"${examinationType}\",examinationMeasure:\"${examinationMeasure}\",examinationValue:\"${examinationValue}\",examinationDescription:\"${examinationDescription}\",examinationFollowUp:${examinationFollowUp},examinationAttachmentName:\"${examinationAttachmentName}\",examinationAttachmentFormat:\"${examinationAttachmentFormat}\",examinationAttachmentPath:\"${examinationAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientExamination._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.updatePatientExamination);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert,\n          selectedPatient: resData.data.updatePatientExamination\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientHistoryHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id; // if(this.context.user.role !== 'admin') {\n      //   console.log(\"No edit permission!!\");\n      //   return;\n      // }\n\n      console.log(\"UpdatePatientHistoryFormData:  \", event.target.formGridHistoryTitle.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let historyType = event.target.formGridHistoryType.value;\n      let historyDate = event.target.formGridHistoryDate.value;\n      let historyTitle = event.target.formGridHistoryTitle.value;\n      let historyDescription = event.target.formGridHistoryDescription.value; // let historyAttachmentName = event.target.formGridHistoryAttachmentName.value;\n\n      let historyAttachmentFormat = event.target.formGridHistoryAttachmentFormat.value;\n      let historyAttachmentPath = event.target.formGridHistoryAttachmentPath.value;\n      let file = AuthContext._currentValue.file;\n      console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n      const config = {\n        bucketName: 'ent-emr-bucket',\n        dirName: historyAttachmentPath,\n        region: 'us-east-2',\n        accessKeyId: \"AKIARFTS6Q6DALQKT4QR\",\n        secretAccessKey: \"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\"\n      };\n      const ReactS3Client = new S3(config);\n      const newFileName = file.name;\n      const historyAttachmentName = newFileName;\n      ReactS3Client.uploadFile(file, newFileName).then(data => {\n        console.log(data);\n        this.setState({\n          userAlert: \"attachment upload success!\"\n        });\n      }).catch(err => {\n        console.error(err);\n        this.setState({\n          userAlert: \"upload error:  \" + err\n        });\n      });\n      const patientHistory = {\n        historyType,\n        historyDate,\n        historyTitle,\n        historyDescription,\n        historyAttachmentName,\n        historyAttachmentFormat,\n        historyAttachmentPath\n      };\n      console.log(`\n    adding patient history...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    historyType: ${historyType},\n    historyDate: ${historyDate},\n    historyTitle: ${historyTitle},\n    historyDescription: ${historyDescription},\n    historyAttachmentName: ${historyAttachmentName},\n    historyAttachmentFormat: ${historyAttachmentFormat},\n    historyAttachmentPath: ${historyAttachmentPath},\n    `);\n      this.setState({\n        userAlert: \"adding patient history...\"\n      });\n      const requestBody = {\n        query: `\n        mutation {updatePatientHistory(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{historyTitle:\"${historyTitle}\",historyType:\"${historyType}\",historyDate:\"${historyDate}\",historyDescription:\"${historyDescription}\",historyAttachmentName:\"${historyAttachmentName}\",historyAttachmentFormat:\"${historyAttachmentFormat}\",historyAttachmentPath:\"${historyAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientHistory._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.updatePatientHistory);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert,\n          selectedPatient: resData.data.updatePatientHistory\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientAllergiesHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id; // if(this.context.user.role !== 'admin') {\n      //   console.log(\"No edit permission!!\");\n      //   return;\n      // }\n\n      console.log(\"UpdatePatientAllergiesFormData:  \", event.target.formGridAllergiesTitle.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let allergiesTitle = event.target.formGridAllergiesTitle.value;\n      let allergiesType = undefined;\n\n      if (event.target.formGridAllergiesTypeSelect === \"select\") {\n        allergiesType = event.target.formGridAllergiesType.value;\n      } else {\n        allergiesType = event.target.formGridAllergiesTypeSelect.value;\n      }\n\n      let allergiesDescription = event.target.formGridAllergiesDescription.value; // let allergiesAttachmentName = event.target.formGridAllergiesAttachmentName.value;\n\n      let allergiesAttachmentFormat = event.target.formGridAllergiesAttachmentFormat.value;\n      let allergiesAttachmentPath = event.target.formGridAllergiesAttachmentPath.value;\n      let file = AuthContext._currentValue.file;\n      console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n      const config = {\n        bucketName: 'ent-emr-bucket',\n        dirName: allergiesAttachmentPath,\n        region: 'us-east-2',\n        accessKeyId: \"AKIARFTS6Q6DALQKT4QR\",\n        secretAccessKey: \"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\"\n      };\n      const ReactS3Client = new S3(config);\n      const newFileName = file.name;\n      const allergiesAttachmentName = newFileName;\n      ReactS3Client.uploadFile(file, newFileName).then(data => {\n        console.log(data);\n        this.setState({\n          userAlert: \"attachment upload success!\"\n        });\n      }).catch(err => {\n        console.error(err);\n        this.setState({\n          userAlert: \"upload error:  \" + err\n        });\n      });\n      const patientAllergies = {\n        allergiesTitle,\n        allergiesType,\n        allergiesDescription,\n        allergiesAttachmentName,\n        allergiesAttachmentFormat,\n        allergiesAttachmentPath\n      };\n      console.log(`\n    adding patient allergies...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    allergiesTitle: ${allergiesTitle},\n    allergiesType: ${allergiesType},\n    allergiesDescription: ${allergiesDescription},\n    allergiesAttachmentName: ${allergiesAttachmentName},\n    allergiesAttachmentFormat: ${allergiesAttachmentFormat},\n    allergiesAttachmentPath: ${allergiesAttachmentPath},\n    `);\n      this.setState({\n        userAlert: \"adding patient allergies...\"\n      });\n      const requestBody = {\n        query: `\n        mutation {updatePatientAllergies(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{allergiesTitle:\"${allergiesTitle}\",allergiesType:\"${allergiesType}\", allergiesDescription:\"${allergiesDescription}\",allergiesAttachmentName:\"${allergiesAttachmentName}\",allergiesAttachmentFormat:\"${allergiesAttachmentFormat}\",allergiesAttachmentPath:\"${allergiesAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientAllergies._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.updatePatientAllergies);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert,\n          selectedPatient: resData.data.updatePatientAllergies\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientMedicationHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id; // if(this.context.user.role !== 'admin') {\n      //   console.log(\"No edit permission!!\");\n      //   return;\n      // }\n\n      console.log(\"UpdatePatientMedicationFormData:  \", event.target.formGridMedicationTitle.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let medicationTitle = event.target.formGridMedicationTitle.value;\n      let medicationType = event.target.formGridMedicationType.value;\n      let medicationDescription = event.target.formGridMedicationDescription.value; // let medicationAttachmentName = event.target.formGridMedicationAttachmentName.value;\n\n      let medicationAttachmentFormat = event.target.formGridMedicationAttachmentFormat.value;\n      let medicationAttachmentPath = event.target.formGridMedicationAttachmentPath.value;\n      let file = AuthContext._currentValue.file;\n      console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n      const config = {\n        bucketName: 'ent-emr-bucket',\n        dirName: medicationAttachmentPath,\n        region: 'us-east-2',\n        accessKeyId: \"AKIARFTS6Q6DALQKT4QR\",\n        secretAccessKey: \"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\"\n      };\n      const ReactS3Client = new S3(config);\n      const newFileName = file.name;\n      const medicationAttachmentName = newFileName;\n      ReactS3Client.uploadFile(file, newFileName).then(data => {\n        console.log(data);\n        this.setState({\n          userAlert: \"attachment upload success!\"\n        });\n      }).catch(err => {\n        console.error(err);\n        this.setState({\n          userAlert: \"upload error:  \" + err\n        });\n      });\n      const patientMedication = {\n        medicationTitle,\n        medicationType,\n        medicationDescription,\n        medicationAttachmentName,\n        medicationAttachmentFormat,\n        medicationAttachmentPath\n      };\n      console.log(`\n    adding patient medication...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    medicationTitle: ${medicationTitle},\n    medicationType: ${medicationType},\n    medicationDescription: ${medicationDescription},\n    medicationAttachmentName: ${medicationAttachmentName},\n    medicationAttachmentFormat: ${medicationAttachmentFormat},\n    medicationAttachmentPath: ${medicationAttachmentPath},\n    `);\n      this.setState({\n        userAlert: \"adding patient medication...\"\n      });\n      const requestBody = {\n        query: `\n      mutation {updatePatientMedication(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{medicationTitle:\"${medicationTitle}\",medicationType:\"${medicationType}\" medicationDescription:\"${medicationDescription}\",medicationAttachmentName:\"${medicationAttachmentName}\",medicationAttachmentFormat:\"${medicationAttachmentFormat}\",medicationAttachmentPath:\"${medicationAttachmentPath}\"})\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientMedication._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.updatePatientMedication);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert,\n          selectedPatient: resData.data.updatePatientMedication\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientInvestigationHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id; // if(this.context.user.role !== 'admin') {\n      //   console.log(\"No edit permission!!\");\n      //   return;\n      // }\n\n      console.log(\"UpdatePatientInvestigationFormData:  \", event.target.formGridInvestigationTitle.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let investigationDate = event.target.formGridInvestigationDate.value;\n      let investigationTitle = event.target.formGridInvestigationTitle.value;\n      let investigationType = undefined;\n\n      if (event.target.formGridInvestigationTypeSelect === \"select\") {\n        investigationType = event.target.formGridInvestigationType.value;\n      } else {\n        investigationType = event.target.formGridInvestigationTypeSelect.value;\n      }\n\n      let investigationDescription = event.target.formGridInvestigationDescription.value; // let investigationAttachmentName = event.target.formGridInvestigationAttachmentName.value;\n\n      let investigationAttachmentFormat = event.target.formGridInvestigationAttachmentFormat.value;\n      let investigationAttachmentPath = event.target.formGridInvestigationAttachmentPath.value;\n      let file = AuthContext._currentValue.file;\n      console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n      const config = {\n        bucketName: 'ent-emr-bucket',\n        dirName: investigationAttachmentPath,\n        region: 'us-east-2',\n        accessKeyId: \"AKIARFTS6Q6DALQKT4QR\",\n        secretAccessKey: \"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\"\n      };\n      const ReactS3Client = new S3(config);\n      const newFileName = file.name;\n      const investigationAttachmentName = newFileName;\n      ReactS3Client.uploadFile(file, newFileName).then(data => {\n        console.log(data);\n        this.setState({\n          userAlert: \"attachment upload success!\"\n        });\n      }).catch(err => {\n        console.error(err);\n        this.setState({\n          userAlert: \"upload error:  \" + err\n        });\n      });\n      const patientInvestigation = {\n        investigationDate,\n        investigationTitle,\n        investigationType,\n        investigationDescription,\n        investigationAttachmentName,\n        investigationAttachmentFormat,\n        investigationAttachmentPath\n      };\n      console.log(`\n    adding patient investigation...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    investigationDate: ${investigationDate},\n    investigationTitle: ${investigationTitle},\n    investigationType: ${investigationType},\n    investigationDescription: ${investigationDescription},\n    investigationAttachmentName: ${investigationAttachmentName},\n    investigationAttachmentFormat: ${investigationAttachmentFormat},\n    investigationAttachmentPath: ${investigationAttachmentPath},\n    `);\n      this.setState({\n        userAlert: \"adding patient investigation...\"\n      });\n      const requestBody = {\n        query: `\n        mutation {updatePatientInvestigation(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{investigationDate:\"${investigationDate}\",investigationTitle:\"${investigationTitle}\",investigationType:\"${investigationType}\",investigationDescription:\"${investigationDescription}\",investigationAttachmentName:\"${investigationAttachmentName}\",investigationAttachmentFormat:\"${investigationAttachmentFormat}\",investigationAttachmentPath:\"${investigationAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientInvestigation._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.updatePatientInvestigation);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert,\n          selectedPatient: resData.data.updatePatientInvestigation\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientDiagnosisHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id; // if(this.context.user.role !== 'admin') {\n      //   console.log(\"No edit permission!!\");\n      //   return;\n      // }\n\n      console.log(\"UpdatePatientDiagnosisFormData:  \", event.target.formGridDiagnosisTitle.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let diagnosisDate = event.target.formGridDiagnosisDate.value;\n      let diagnosisTitle = event.target.formGridDiagnosisTitle.value;\n      let diagnosisType = event.target.formGridDiagnosisType.value;\n      let diagnosisDescription = event.target.formGridDiagnosisDescription.value; // let diagnosisAttachmentName = event.target.formGridDiagnosisAttachmentName.value;\n\n      let diagnosisAttachmentFormat = event.target.formGridDiagnosisAttachmentFormat.value;\n      let diagnosisAttachmentPath = event.target.formGridDiagnosisAttachmentPath.value;\n      let file = AuthContext._currentValue.file;\n      console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n      const config = {\n        bucketName: 'ent-emr-bucket',\n        dirName: diagnosisAttachmentPath,\n        region: 'us-east-2',\n        accessKeyId: \"AKIARFTS6Q6DALQKT4QR\",\n        secretAccessKey: \"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\"\n      };\n      const ReactS3Client = new S3(config);\n      const newFileName = file.name;\n      const diagnosisAttachmentName = newFileName;\n      ReactS3Client.uploadFile(file, newFileName).then(data => {\n        console.log(data);\n        this.setState({\n          userAlert: \"attachment upload success!\"\n        });\n      }).catch(err => {\n        console.error(err);\n        this.setState({\n          userAlert: \"upload error:  \" + err\n        });\n      });\n      const patientDiagnosis = {\n        diagnosisDate,\n        diagnosisTitle,\n        diagnosisType,\n        diagnosisDescription,\n        diagnosisAttachmentName,\n        diagnosisAttachmentFormat,\n        diagnosisAttachmentPath\n      };\n      console.log(`\n    adding patient diagnosis...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    diagnosisDate: ${diagnosisDate},\n    diagnosisTitle: ${diagnosisTitle},\n    diagnosisType: ${diagnosisType},\n    diagnosisDescription: ${diagnosisDescription},\n    diagnosisAttachmentName: ${diagnosisAttachmentName},\n    diagnosisAttachmentFormat: ${diagnosisAttachmentFormat},\n    diagnosisAttachmentPath: ${diagnosisAttachmentPath},\n    `);\n      this.setState({\n        userAlert: \"adding patient diagnosis...\"\n      });\n      const requestBody = {\n        query: `\n        mutation {updatePatientDiagnosis(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{diagnosisDate:\"${diagnosisDate}\",diagnosisTitle:\"${diagnosisTitle}\",diagnosisType:\"${diagnosisType}\",diagnosisDescription:\"${diagnosisDescription}\",diagnosisAttachmentName:\"${diagnosisAttachmentName}\",diagnosisAttachmentFormat:\"${diagnosisAttachmentFormat}\",diagnosisAttachmentPath:\"${diagnosisAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientDiagnosis._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.updatePatientDiagnosis);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert,\n          selectedPatient: resData.data.updatePatientDiagnosis\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientTreatmentHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id; // if(this.context.user.role !== 'admin') {\n      //   console.log(\"No edit permission!!\");\n      //   return;\n      // }\n\n      console.log(\"UpdatePatientTreatmentFormData:  \", event.target.formGridTreatmentTitle.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let treatmentDate = event.target.formGridTreatmentDate.value;\n      let treatmentTitle = event.target.formGridTreatmentTitle.value;\n      let treatmentDescription = event.target.formGridTreatmentDescription.value;\n      let treatmentDose = event.target.formGridTreatmentDose.value;\n      let treatmentFrequency = event.target.formGridTreatmentFrequency.value;\n      let treatmentType = undefined;\n\n      if (event.target.formGridInvestigationTypeSelect === \"select\") {\n        treatmentType = event.target.formGridTreatmentType.value;\n      } else {\n        treatmentType = event.target.formGridTreatmentTypeSelect.value;\n      } // let treatmentAttachmentName = event.target.formGridTreatmentAttachmentName.value;\n\n\n      let treatmentAttachmentFormat = event.target.formGridTreatmentAttachmentFormat.value;\n      let treatmentAttachmentPath = event.target.formGridTreatmentAttachmentPath.value;\n      let file = AuthContext._currentValue.file;\n      console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n      const config = {\n        bucketName: 'ent-emr-bucket',\n        dirName: treatmentAttachmentPath,\n        region: 'us-east-2',\n        accessKeyId: \"AKIARFTS6Q6DALQKT4QR\",\n        secretAccessKey: \"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\"\n      };\n      const ReactS3Client = new S3(config);\n      const newFileName = file.name;\n      const treatmentAttachmentName = newFileName;\n      ReactS3Client.uploadFile(file, newFileName).then(data => {\n        console.log(data);\n        this.setState({\n          userAlert: \"attachment upload success!\"\n        });\n      }).catch(err => {\n        console.error(err);\n        this.setState({\n          userAlert: \"upload error:  \" + err\n        });\n      });\n      const patientTreatment = {\n        treatmentDate,\n        treatmentTitle,\n        treatmentDescription,\n        treatmentDose,\n        treatmentFrequency,\n        treatmentType,\n        treatmentAttachmentName,\n        treatmentAttachmentFormat,\n        treatmentAttachmentPath\n      };\n      console.log(`\n    adding patient treatment...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    treatmentDate: ${treatmentDate},\n    treatmentTitle: ${treatmentTitle},\n    treatmentDescription: ${treatmentDescription},\n    treatmentDose: ${treatmentDose},\n    treatmentFrequency: ${treatmentFrequency},\n    treatmentType: ${treatmentType},\n    treatmentAttachmentName: ${treatmentAttachmentName},\n    treatmentAttachmentFormat: ${treatmentAttachmentFormat},\n    treatmentAttachmentPath: ${treatmentAttachmentPath},\n    `);\n      this.setState({\n        userAlert: \"adding patient treatment...\"\n      });\n      const requestBody = {\n        query: `\n        mutation {updatePatientTreatment(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{treatmentDate:\"${treatmentDate}\",treatmentTitle:\"${treatmentTitle}\",treatmentType:\"${treatmentType}\",treatmentDescription:\"${treatmentDescription}\",treatmentDose:\"${treatmentDose}\",treatmentFrequency:\"${treatmentFrequency}\",treatmentAttachmentName:\"${treatmentAttachmentName}\",treatmentAttachmentFormat:\"${treatmentAttachmentFormat}\",treatmentAttachmentPath:\"${treatmentAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientTreatment._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.updatePatientTreatment);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert,\n          selectedPatient: resData.data.updatePatientTreatment\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientBillingHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id; // if(this.context.user.role !== 'admin') {\n      //   console.log(\"No edit permission!!\");\n      //   return;\n      // }\n\n      console.log(\"UpdatePatientBillingFormData:  \", event.target.formGridBillingTitle.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let billingDate = event.target.formGridBillingDate.value;\n      let billingTitle = event.target.formGridBillingTitle.value;\n      let billingType = event.target.formGridBillingType.value;\n      let billingDescription = event.target.formGridBillingDescription.value;\n      let billingAmount = event.target.formGridBillingAmount.value;\n      let billingPaid = event.target.formGridBillingPaid.value;\n      let billingNotes = event.target.formGridBillingNotes.value; // let billingAttachmentName = event.target.formGridBillingAttachmentName.value;\n\n      let billingAttachmentFormat = event.target.formGridBillingAttachmentFormat.value;\n      let billingAttachmentPath = event.target.formGridBillingAttachmentPath.value;\n      let file = AuthContext._currentValue.file;\n      console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n      const config = {\n        bucketName: 'ent-emr-bucket',\n        dirName: billingAttachmentPath,\n        region: 'us-east-2',\n        accessKeyId: \"AKIARFTS6Q6DALQKT4QR\",\n        secretAccessKey: \"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\"\n      };\n      const ReactS3Client = new S3(config);\n      const newFileName = file.name;\n      const billingAttachmentName = newFileName;\n      ReactS3Client.uploadFile(file, newFileName).then(data => {\n        console.log(data);\n        this.setState({\n          userAlert: \"attachment upload success!\"\n        });\n      }).catch(err => {\n        console.error(err);\n        this.setState({\n          userAlert: \"upload error:  \" + err\n        });\n      });\n      const patientBilling = {\n        billingDate,\n        billingTitle,\n        billingType,\n        billingDescription,\n        billingAmount,\n        billingPaid,\n        billingNotes,\n        billingAttachmentName,\n        billingAttachmentFormat,\n        billingAttachmentPath\n      };\n      console.log(`\n    adding patient billing...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    billingDate: ${billingDate},\n    billingTitle: ${billingTitle},\n    billingType: ${billingType},\n    billingDescription: ${billingDescription},\n    billingAmount: ${billingAmount},\n    billingPaid: ${billingPaid},\n    billingNotes: ${billingNotes},\n    billingAttachmentName: ${billingAttachmentName},\n    billingAttachmentFormat: ${billingAttachmentFormat},\n    billingAttachmentPath: ${billingAttachmentPath},\n    `);\n      this.setState({\n        userAlert: \"adding patient billing...\"\n      });\n      const requestBody = {\n        query: `\n        mutation {updatePatientBilling(userId:\\\"${userId}\\\", patientId:\\\"${selectedPatientId}\\\",patientInput:{billingDate:\\\"${billingDate}\\\",billingTitle:\\\"${billingTitle}\\\",billingType:\\\"${billingType}\\\",billingDescription:\\\"${billingDescription}\\\",billingAmount:${billingAmount},billingPaid:${billingPaid},billingNotes:\\\"${billingNotes}\\\",billingAttachmentName:\\\"${billingAttachmentName}\\\",billingAttachmentFormat:\\\"${billingAttachmentFormat}\\\",billingAttachmentPath:\\\"${billingAttachmentPath}\\\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientBilling._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.updatePatientBilling);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert,\n          selectedPatient: resData.data.updatePatientBilling\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientAttachmentHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id; // if(this.context.user.role !== 'admin') {\n      //   console.log(\"No edit permission!!\");\n      //   return;\n      // }\n\n      console.log(`\n        UpdatePatientAttachmentFormData:\n        ${event.target.formGridPatientAttachmentName.value}\n      `);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      }); // let attachmentName = event.target.formGridPatientAttachmentName.value;\n\n      let attachmentFormat = event.target.formGridPatientAttachmentFormat.value;\n      let attachmentPath = event.target.formGridPatientAttachmentPath.value;\n      let file = AuthContext._currentValue.file;\n      console.log(`\n      uploading to s3...\n      file.name: ${file.name},\n      AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n      `);\n      const config = {\n        bucketName: 'ent-emr-bucket',\n        dirName: attachmentPath,\n        region: 'us-east-2',\n        accessKeyId: \"AKIARFTS6Q6DALQKT4QR\",\n        secretAccessKey: \"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\"\n      };\n      const ReactS3Client = new S3(config);\n      const newFileName = file.name;\n      const attachmentName = newFileName;\n      ReactS3Client.uploadFile(file, newFileName).then(data => {\n        console.log(data);\n        this.setState({\n          userAlert: \"attachment upload success!\"\n        });\n      }).catch(err => {\n        console.error(err);\n        this.setState({\n          userAlert: \"upload error:  \" + err\n        });\n      });\n\n      if (attachmentName.trim().length === 0 || attachmentFormat.trim().length === 0 || attachmentPath.trim().length === 0) {\n        console.log(\"blank fields detected!!!...Please try again...\");\n        this.setState({\n          userAlert: \"blank fields detected!!!...Please try again...\"\n        });\n        return;\n      }\n\n      this.setState({\n        userAlert: \"adding patient attachment\"\n      });\n      const requestBody = {\n        query: `\n                    mutation {updatePatientAttachment(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{attachmentName:\"${attachmentName}\",attachmentFormat:\"${attachmentFormat}\",attachmentPath:\"${attachmentFormat}\"})\n                    {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n            `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientAttachment._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.updatePatientAttachment);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert,\n          selectedPatient: resData.data.updatePatientAttachment\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientNoteHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id; // if(this.context.user.role !== 'admin') {\n      //   console.log(\"No edit permission!!\");\n      //   return;\n      // }\n\n      console.log(`\n      UpdatePatientNoteFormData:\n      ${event.target.formGridNote.value}\n    `);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let note = event.target.formGridNote.value;\n\n      if (note.trim().length === 0) {\n        console.log(\"Can't Submit a blank form!!!...Please try again...\");\n        this.setState({\n          userAlert: \"Can't Submit a blank form!!!...Please try again...\"\n        });\n        return;\n      }\n\n      this.setState({\n        userAlert: \"adding patient note\"\n      });\n      const requestBody = {\n        query: `\n              mutation {updatePatientNotes(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{notes:\"${note}\"})\n              {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n            `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientNotes._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.updatePatientNotes);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert,\n          selectedPatient: resData.data.updatePatientNotes\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientTagHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id; // if(this.context.user.role !== 'admin') {\n      //   console.log(\"No edit permission!!\");\n      //   return;\n      // }\n\n      console.log(`\n      UpdatePatientTagFormData:\n      ${event.target.formGridTag.value}\n    `);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let tag = event.target.formGridTag.value;\n\n      if (tag.trim().length === 0) {\n        console.log(\"Can't Submit a blank form!!!...Please try again...\");\n        this.setState({\n          userAlert: \"Can't Submit a blank form!!!...Please try again...\"\n        });\n        return;\n      }\n\n      const requestBody = {\n        query: `\n                    mutation {updatePatientTags(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{tag:\"${tag}\"})\n                    {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n            `\n      };\n      this.setState({\n        userAlert: \"adding patient tag\"\n      });\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientTags._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.updatePatientTags);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert,\n          selectedPatient: resData.data.updatePatientTags\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.modalConfirmSearchHandler = event => {\n      console.log(\"SearchPatientForm:  \");\n      let userId = this.context.userId;\n      console.log(\"SearchPatientFormData:  \", event.target.formBasicField.value);\n      this.setState({\n        searching: false\n      });\n      let field = null;\n      let query = event.target.formBasicQuery.value;\n\n      if (event.target.formBasicFieldSelect.value === \"select\") {\n        field = event.target.formBasicField.value;\n      } else {\n        field = event.target.formBasicFieldSelect.value;\n      }\n\n      this.setState({\n        patientSearchField: field,\n        patientSearchQuery: query\n      });\n\n      if (field.trim().length === 0 || query.trim().length === 0) {\n        console.log(\"blank fields detected!!!...Please try again...\");\n        return;\n      }\n\n      const search = {\n        field,\n        query\n      };\n      console.log(\"Searching for Patient:  \", JSON.stringify(search));\n      this.setState({\n        userAlert: \"Searching for Patient:  \"\n      });\n      const requestBody = {\n        query: `\n        query {\n          getPatientField(userId: \"${userId}\", field: \"${field}\", query: \"${query}\" )\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n      };\n      const token = this.context.token;\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n        const responseAlert = JSON.stringify(resData.data).slice(2, 15);\n        this.setState({\n          userAlert: responseAlert\n        });\n        const searchPatients = resData.data.getPatientField;\n        this.setState({\n          searchPatients: searchPatients\n        });\n        console.log(\"state.searchPatients:  \", this.state.searchPatients); // this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.modalConfirmSearchIdHandler = event => {\n      console.log(\"SearchPatientIdFormData\");\n      let userId = this.context.userId;\n      this.setState({\n        searching: false\n      });\n      const patientId = event.target.formBasicId.value;\n      const requestBody = {\n        query: `\n      query {getPatientId(userId:\\\"${userId}\\\",patientId:\\\"${patientId}\\\")\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{_id,title,time,location},consultant{date,reference{_id,name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `\n      };\n      const token = this.context.token;\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        const searchPatients = resData.data.getPatientId;\n        this.setState({\n          searchPatients: [searchPatients]\n        });\n        console.log(\"state.searchPatients:  \", this.state.searchPatients); // this.fetchUsers();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.modalConfirmSearchVisitHandler = event => {\n      console.log(\"SearchPatientVisitFormData\");\n      let userId = this.context.userId;\n      this.setState({\n        searching: false\n      });\n      const requestBody = {\n        query: `\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{_id,title,time,location,date},consultant{date,reference{_id,name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `\n      };\n      const token = this.context.token;\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n        const searchPatients = resData.data.getPatientId;\n        this.setState({\n          searchPatients: searchPatients\n        });\n        console.log(\"state.searchPatients:  \", this.state.searchPatients); // this.fetchUsers();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.modalConfirmSearchNameHandler = event => {\n      console.log(\"SearchPatientNameFormData:\", event.target.formBasicName.value);\n      let userId = this.context.userId;\n      this.setState({\n        searching: false\n      });\n      let patients = this.state.patients;\n      const regex = new RegExp(event.target.formBasicName.value, \"i\");\n      console.log(`\n    regex: ${regex},\n    `);\n      let result = patients.filter(patient => patient.name.match(regex));\n      console.log(`\n      result: ${JSON.stringify(result)}\n      `);\n      this.setState({\n        searchPatients: result\n      });\n    };\n\n    this.getPatientVisit = event => {\n      const selectedPatient = this.state.selectedPatient;\n      event.preventDefault();\n      console.log(`\n        getUserVisit function:\n        selectedPatient.consultant: ${JSON.stringify(selectedPatient.consultant)},\n        selectedPatient.complaints: ${JSON.stringify(selectedPatient.complaints)},\n        visitDate: ${new Date(event.target.formBasicVisitDate.value)},\n        complaintDate: ${new Date(1580515200 * 1000)},\n      `);\n      let visitDate = new Date(event.target.formBasicVisitDate.value).toISOString().substring(0, 10);\n      let visitSurveys = selectedPatient.surveys.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n      let visitConsultants = selectedPatient.consultant.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n      let visitComplaints = selectedPatient.complaints.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate); // let visitSurveys = selectedPatient.surveys.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString() === visitDate);\n\n      let visitVitals = selectedPatient.vitals.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n      let visitExaminations = selectedPatient.examination.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n      let visitHistory = selectedPatient.history.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n      let visitInvestigations = selectedPatient.investigation.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n      let visitDiagnosis = selectedPatient.diagnosis.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n      let visitTreatments = selectedPatient.treatment.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n      let visitBilling = selectedPatient.billing.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n      const visit = {\n        date: visitDate,\n        patientName: this.context.selectedPatient.name,\n        consultant: visitConsultants,\n        complaint: visitComplaints,\n        examination: visitExaminations,\n        survey: visitSurveys,\n        vitals: visitVitals,\n        history: visitHistory,\n        investigation: visitInvestigations,\n        diagnosis: visitDiagnosis,\n        treatment: visitTreatments,\n        billing: visitBilling\n      };\n      console.log(`\n        visit: ${JSON.stringify(visit)},\n        `);\n      this.context.visit = visit;\n      this.setState({\n        visit: visit\n      });\n    };\n\n    this.modalCancelHandler = () => {\n      this.setState({\n        creating: false,\n        updating: false,\n        searching: false,\n        selectedPatient: null\n      });\n    };\n\n    this.fetchPatientsAsc = () => {\n      console.log(\"fetch patients function:  \");\n      const userId = this.context.userId;\n      const token = this.context.token; // this.setState({ isLoading: true });\n\n      const requestBody = {\n        query: `\n          query {patientsNameAsc(userId:\"${userId}\")\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{_id,title,time,location,date},consultant{date,reference{_id,name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n        `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"resData\", resData);\n        const patients = resData.data.patientsNameAsc;\n        console.log(patients);\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.context.patients = patients;\n        this.setState({\n          patients: patients\n        }); // if (this.isActive) {\n        //   this.setState({ patients: patients, isLoading: false });\n        // }\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        }); // if (this.isActive) {\n        //   this.setState({ isLoading: false });\n        // }\n      });\n    };\n\n    this.fetchPatientsDesc = () => {\n      console.log(\"fetch patients function:  \");\n      const userId = this.context.userId;\n      const token = this.context.token; // this.setState({ isLoading: true });\n\n      const requestBody = {\n        query: `\n          query {patientsNameDesc(userId:\"${userId}\")\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{_id,title,time,location,date},consultant{date,reference{_id,name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n        `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"resData\", resData);\n        const patients = resData.data.patientsNameDesc;\n        console.log(patients);\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.context.patients = patients; // if (this.isActive) {\n        //   this.setState({ patients: patients, isLoading: false });\n        // }\n\n        this.setState({\n          patients: patients\n        });\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        }); // if (this.isActive) {\n        //   this.setState({ isLoading: false });\n        // }\n      });\n    };\n\n    this.modalDeleteHandler = () => {\n      console.log(\"deleting patient...selectedPatient:  \", this.context.selectedPatient);\n      const selectedPatientId = this.context.selectedPatient._id;\n      const userId = this.context.selectedUser._id;\n\n      if (this.context.user.role !== 'admin') {\n        console.log(\"Not the Admin! No edit permission!!\");\n      }\n\n      this.setState({\n        deleting: true\n      });\n      const requestBody = {\n        query: `\n          mutation {deletePatient(userId:\"${userId}\",patientId:\"${selectedPatientId}\")\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n        `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + this.context.token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatient;\n        console.log(deletedPatient);\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        let deletedPatientId = deletedPatient._id;\n        deletedPatient = this.state.patients.find(e => e._id === deletedPatientId);\n        const deletedPatientPos = this.state.patients.indexOf(deletedPatient);\n        const slicedArray = this.state.patients.splice(deletedPatientPos, 1);\n        console.log(\"deletedPatient:  \", JSON.stringify(deletedPatient), \"  deletedUserPos:  \", deletedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.setState({\n          deleting: false\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n\n        if (this.isActive) {\n          this.setState({\n            deleting: false\n          });\n        }\n      });\n    };\n\n    this.deletePatientInsuranceItem = props => {\n      let token = this.context.token;\n      let userId = this.context.userId;\n      let patientId = this.state.selectedPatient._id;\n      console.log(`\n      delete patient insurance item:\n      props: ${JSON.stringify(props)},\n      token: ${token},\n      userId: ${userId},\n      patientId: ${patientId},\n      `);\n      const requestBody = {\n        query: `\n         mutation {deletePatientInsurance (userId:\\\"${userId}\\\", patientId:\\\"${patientId}\\\",insuranceCompany:\\\"${props.company}\\\",insuranceNumber:\"${props.number}\")\n         {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatientInsurance;\n        console.log(deletedPatient);\n        const updatedPatientId = resData.data.deletePatientInsurance._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.deletePatientInsurance);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        }); // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientInsurance})\n\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.deletePatientConsultantItem = props => {\n      let token = this.context.token;\n      let userId = this.context.userId;\n      let patientId = this.state.selectedPatient._id;\n      let date = new Date(props.date.substr(0, 10) * 1000).toISOString().slice(0, 10);\n      console.log(`\n      delete patient consultant item:\n      props: ${JSON.stringify(props)},\n      token: ${token},\n      userId: ${userId},\n      patientId: ${patientId},\n      consultant date: ${date},\n      `);\n      const requestBody = {\n        query: `\n         mutation {deletePatientConsultant (userId:\\\"${userId}\\\", patientId:\\\"${patientId}\\\",consultantId:\\\"${props.reference.id}\\\",consultantDate:\\\"${date}\\\")\n         {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatientConsultant;\n        console.log(deletedPatient);\n        const updatedPatientId = resData.data.deletePatientConsultant._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.deletePatientConsultant);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        }); // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientConsultant})\n\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.deletePatientNextOfKinItem = props => {\n      let token = this.context.token;\n      let userId = this.context.userId;\n      let patientId = this.state.selectedPatient._id;\n      console.log(`\n    delete patient nextOfKin item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    `);\n      const requestBody = {\n        query: `\n       mutation {deletePatientNextOfKin (userId:\\\"${userId}\\\", patientId:\\\"${patientId}\\\",nextOfKinName:\\\"${props.name}\\\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatientNextOfKin;\n        console.log(deletedPatient);\n        const updatedPatientId = resData.data.deletePatientNextOfKin._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.deletePatientNextOfKin);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        }); // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientNextOfKin})\n\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.deletePatientComplaintItem = props => {\n      let token = this.context.token;\n      let userId = this.context.userId;\n      let patientId = this.state.selectedPatient._id;\n      let date = new Date(props.date.substr(0, 10) * 1000).toISOString().slice(0, 10);\n      console.log(`\n    delete patient Complaint item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    complaint date: ${date},\n    `);\n      const requestBody = {\n        query: `\n       mutation {deletePatientComplaint (userId:\\\"${userId}\\\", patientId:\\\"${patientId}\\\",complaintTitle:\\\"${props.title}\\\",complaintDate:\\\"${date}\\\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatientComplaint;\n        console.log(deletedPatient);\n        const updatedPatientId = resData.data.deletePatientComplaint._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.deletePatientComplaint);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        }); // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientComplaint})\n\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.deletePatientSurveyItem = props => {\n      let token = this.context.token;\n      let userId = this.context.userId;\n      let patientId = this.state.selectedPatient._id;\n      let date = new Date(props.date.substr(0, 10) * 1000).toISOString().slice(0, 10);\n      console.log(`\n    delete patient Survey item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    survey date: ${date}\n    `);\n      const requestBody = {\n        query: `\n       mutation {deletePatientSurvey (userId:\\\"${userId}\\\", patientId:\\\"${patientId}\\\",surveyTitle:\\\"${props.title}\\\",surveyDate:\\\"${date}\\\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatientSurvey;\n        console.log(deletedPatient);\n        const updatedPatientId = resData.data.deletePatientSurvey._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.deletePatientSurvey);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        }); // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientSurvey})\n\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.deletePatientVitalsItem = props => {\n      let token = this.context.token;\n      let userId = this.context.userId;\n      let patientId = this.state.selectedPatient._id;\n      let date = new Date(props.date.substr(0, 10) * 1000).toISOString().slice(0, 10);\n      console.log(`\n    delete patient Vitals item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    vitals date: ${date},\n    `);\n      const requestBody = {\n        query: `\n       mutation {deletePatientVitals (userId:\\\"${userId}\\\", patientId:\\\"${patientId}\\\",vitalsDate:\\\"${date}\\\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatientVitals;\n        console.log(deletedPatient);\n        const updatedPatientId = resData.data.deletePatientVitals._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.deletePatientVitals);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        }); // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientVitals})\n\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.deletePatientExaminationItem = props => {\n      let token = this.context.token;\n      let userId = this.context.userId;\n      let patientId = this.state.selectedPatient._id;\n      let date = new Date(props.date.substr(0, 10) * 1000).toISOString().slice(0, 10);\n      console.log(`\n    delete patient Examination item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    examination date: ${date},\n    `);\n      const requestBody = {\n        query: `\n       mutation {deletePatientExamination (userId:\\\"${userId}\\\", patientId:\\\"${patientId}\\\",examinationType:\\\"${props.type}\\\",examinationDate:\\\"${date}\\\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatientExamination;\n        console.log(deletedPatient);\n        const updatedPatientId = resData.data.deletePatientExamination._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.deletePatientExamination);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        }); // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientExamination})\n\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.deletePatientHistoryItem = props => {\n      let token = this.context.token;\n      let userId = this.context.userId;\n      let patientId = this.state.selectedPatient._id;\n      let date = new Date(props.date.substr(0, 10) * 1000).toISOString().slice(0, 10);\n      console.log(`\n    delete patient History item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    history date: ${date},\n    `);\n      const requestBody = {\n        query: `\n       mutation {deletePatientHistory (userId:\\\"${userId}\\\", patientId:\\\"${patientId}\\\",historyTitle:\\\"${props.title}\\\",historyDate:\\\"${date}\\\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatientHistory;\n        console.log(deletedPatient);\n        const updatedPatientId = resData.data.deletePatientHistory._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.deletePatientHistory);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        }); // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientHistory})\n\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.deletePatientAllergiesItem = props => {\n      let token = this.context.token;\n      let userId = this.context.userId;\n      let patientId = this.state.selectedPatient._id;\n      console.log(`\n    delete patient Allergies item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    `);\n      const requestBody = {\n        query: `\n       mutation {deletePatientAllergies (userId:\\\"${userId}\\\", patientId:\\\"${patientId}\\\",allergiesTitle:\\\"${props.title}\\\",allergiesType:\\\"${props.type}\\\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatientAllergies;\n        console.log(deletedPatient);\n        const updatedPatientId = resData.data.deletePatientAllergies._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.deletePatientAllergies);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        }); // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientAllergies})\n\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.deletePatientMedicationItem = props => {\n      let token = this.context.token;\n      let userId = this.context.userId;\n      let patientId = this.state.selectedPatient._id;\n      console.log(`\n    delete patient Medication item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    `);\n      const requestBody = {\n        query: `\n       mutation {deletePatientMedication (userId:\\\"${userId}\\\", patientId:\\\"${patientId}\\\",medicationTitle:\\\"${props.title}\\\",medicationType:\\\"${props.type}\\\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatientMedication;\n        console.log(deletedPatient);\n        const updatedPatientId = resData.data.deletePatientMedication._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.deletePatientMedication);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        }); // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientMedication})\n\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.deletePatientInvestigationItem = props => {\n      let token = this.context.token;\n      let userId = this.context.userId;\n      let patientId = this.state.selectedPatient._id;\n      let date = new Date(props.date.substr(0, 10) * 1000).toISOString().slice(0, 10);\n      console.log(`\n    delete patient Investigation item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    investigation date: ${date},\n    `);\n      const requestBody = {\n        query: `\n       mutation {deletePatientInvestigation (userId:\\\"${userId}\\\", patientId:\\\"${patientId}\\\",investigationDate:\\\"${date}\\\",investigationTitle:\\\"${props.title}\\\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatientInvestigation;\n        console.log(deletedPatient);\n        const updatedPatientId = resData.data.deletePatientInvestigation._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.deletePatientInvestigation);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        }); // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientInvestigation})\n\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.deletePatientDiagnosisItem = props => {\n      let token = this.context.token;\n      let userId = this.context.userId;\n      let patientId = this.state.selectedPatient._id;\n      let date = new Date(props.date.substr(0, 10) * 1000).toISOString().slice(0, 10);\n      console.log(`\n    delete patient Diagnosis item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    diagnosis date: ${date}\n    `);\n      const requestBody = {\n        query: `\n       mutation {deletePatientDiagnosis (userId:\\\"${userId}\\\",patientId:\\\"${patientId}\\\",diagnosisDate:\\\"${date}\\\",diagnosisTitle:\\\"${props.title}\\\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatientDiagnosis;\n        console.log(deletedPatient);\n        const updatedPatientId = resData.data.deletePatientDiagnosis._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.deletePatientDiagnosis);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        }); // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientDiagnosis})\n\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.deletePatientTreatmentItem = props => {\n      let token = this.context.token;\n      let userId = this.context.userId;\n      let patientId = this.state.selectedPatient._id;\n      let date = new Date(props.date.substr(0, 10) * 1000).toISOString().slice(0, 10);\n      console.log(`\n    delete patient Treatment item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    treatment date: ${date},\n    `);\n      const requestBody = {\n        query: `\n       mutation {deletePatientTreatment (userId:\\\"${userId}\\\", patientId:\\\"${patientId}\\\",treatmentDate:\\\"${date}\\\",treatmentTitle:\\\"${props.title}\\\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatientTreatment;\n        console.log(deletedPatient);\n        const updatedPatientId = resData.data.deletePatientTreatment._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.deletePatientTreatment);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        }); // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientTreatment})\n\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.deletePatientBillingItem = props => {\n      let token = this.context.token;\n      let userId = this.context.userId;\n      let patientId = this.state.selectedPatient._id;\n      let date = new Date(props.date.substr(0, 10) * 1000).toISOString().slice(0, 10);\n      console.log(`\n    delete patient Billing item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    billing date: ${date},\n    `);\n      const requestBody = {\n        query: `\n       mutation {deletePatientBilling (userId:\\\"${userId}\\\", patientId:\\\"${patientId}\\\",billingDate:\\\"${date}\\\",billingTitle:\\\"${props.title}\\\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatientBilling;\n        console.log(deletedPatient);\n        const updatedPatientId = resData.data.deletePatientBilling._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.deletePatientBilling);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        }); // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientBilling})\n\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.deletePatientAttachmentItem = props => {\n      let token = this.context.token;\n      let userId = this.context.userId;\n      let patientId = this.state.selectedPatient._id;\n      console.log(`\n    delete patient Attachment item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    `);\n      const requestBody = {\n        query: `\n       mutation {deletePatientAttachment (userId:\\\"${userId}\\\", patientId:\\\"${patientId}\\\",attachmentName:\\\"${props.name}\\\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatientAttachment;\n        console.log(deletedPatient);\n        const updatedPatientId = resData.data.deletePatientAttachment._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.deletePatientAttachment);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        }); // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientAttachment})\n\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.deletePatientNoteItem = props => {\n      let token = this.context.token;\n      let userId = this.context.userId;\n      let patientId = this.state.selectedPatient._id;\n      console.log(`\n    delete patient Note item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    `);\n      const requestBody = {\n        query: `\n\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatientNextOfKin;\n        console.log(deletedPatient);\n        const updatedPatientId = resData.data.deletePatientNextOfKin._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.deletePatientNextOfKin);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        }); // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientNextOfKin})\n\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.deletePatientTagItem = props => {\n      let token = this.context.token;\n      let userId = this.context.userId;\n      let patientId = this.state.selectedPatient._id;\n      console.log(`\n    delete patient Tag item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    `);\n      const requestBody = {\n        query: `\n\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatientNextOfKin;\n        console.log(deletedPatient);\n        const updatedPatientId = resData.data.deletePatientNextOfKin._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.deletePatientNextOfKin);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        }); // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientNextOfKin})\n\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.showDetailHandler = patientId => {\n      this.setState(prevState => {\n        const selectedPatient = prevState.patients.find(e => e._id === patientId);\n        this.context.selectedPatient = selectedPatient;\n        this.context.selectedPatientId = selectedPatient._id;\n        console.log(\"selectedPatient:  \", selectedPatient);\n        return {\n          selectedPatient: selectedPatient\n        };\n      });\n    };\n\n    this.nameElRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.fetchPatients();\n\n    if (this.context.user.name === 'admin579') {\n      this.setState({\n        canDelete: true\n      });\n    }\n  }\n\n  fetchPatients() {\n    console.log(\"fetch patients function:  \");\n    const userId = this.context.userId;\n    const token = this.context.token;\n    this.setState({\n      isLoading: true\n    });\n    const requestBody = {\n      query: `\n          query {patients(userId:\"${userId}\")\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{_id,title,time,location,date},consultant{date,reference{_id,name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n        `\n    };\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    }).then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n\n      return res.json();\n    }).then(resData => {\n      console.log(\"resData\", resData);\n      const patients = resData.data.patients;\n      console.log(patients);\n      const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n      this.setState({\n        userAlert: responseAlert\n      });\n      this.context.patients = this.state.patients;\n\n      if (this.isActive) {\n        this.setState({\n          patients: patients,\n          isLoading: false\n        });\n      }\n    }).catch(err => {\n      console.log(err);\n      this.setState({\n        userAlert: err\n      });\n\n      if (this.isActive) {\n        this.setState({\n          isLoading: false\n        });\n      }\n    });\n  }\n\n  updatePatientSpecial(event) {\n    console.log(\"special field to update:  \", event.target.value);\n    const field = event.target.value;\n    this.setState({\n      patientUpdateField: field\n    });\n  }\n\n  componentWillUnmount() {\n    this.isActive = false;\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3617\n      },\n      __self: this\n    }, React.createElement(Accordion, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3619\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3621\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 3,\n      className: \"MasterCol1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3622\n      },\n      __self: this\n    }, React.createElement(AlertBox, {\n      authUserId: this.context.userId,\n      alert: this.state.userAlert,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3624\n      },\n      __self: this\n    }), React.createElement(SidebarPage, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3628\n      },\n      __self: this\n    })), React.createElement(Col, {\n      md: 9,\n      className: \"MasterCol2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3631\n      },\n      __self: this\n    }, React.createElement(Container, {\n      className: \"containerCombinedDetail\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3632\n      },\n      __self: this\n    }, React.createElement(Tabs, {\n      defaultActiveKey: \"\",\n      id: \"uncontrolled-tab-example\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3633\n      },\n      __self: this\n    }, React.createElement(Tab, {\n      eventKey: \"\",\n      title: \"Edit:\",\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3634\n      },\n      __self: this\n    }), React.createElement(Tab, {\n      eventKey: \"patientDetail\",\n      title: \"Details\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3636\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3638\n      },\n      __self: this\n    }, \"Select a Patient from the Master List below\"), this.state.isLoading === false && this.state.selectedPatient !== null && React.createElement(PatientDetail, {\n      authUserId: this.context.userId,\n      token: this.context.token,\n      patient: this.state.selectedPatient,\n      onEdit: this.startUpdatePatientHandler,\n      canDelete: this.state.canDelete,\n      onDelete: this.modalDeleteHandler,\n      onGetVisit: this.getPatientVisit,\n      visit: this.context.visit,\n      fetchUsers: this.fetchUsers,\n      consultantDelete: this.deletePatientConsultantItem,\n      insuranceDelete: this.deletePatientInsuranceItem,\n      nextOfKinDelete: this.deletePatientNextOfKinItem,\n      complaintDelete: this.deletePatientComplaintItem,\n      surveyDelete: this.deletePatientSurveyItem,\n      vitalsDelete: this.deletePatientVitalsItem,\n      examinationDelete: this.deletePatientExaminationItem,\n      historyDelete: this.deletePatientHistoryItem,\n      allergiesDelete: this.deletePatientAllergiesItem,\n      medicationDelete: this.deletePatientMedicationItem,\n      investigationDelete: this.deletePatientInvestigationItem,\n      diagnosisDelete: this.deletePatientDiagnosisItem,\n      treatmentDelete: this.deletePatientTreatmentItem,\n      billingDelete: this.deletePatientBillingItem,\n      attachmentDelete: this.deletePatientAttachmentItem,\n      noteDelete: this.deletePatientNoteItem,\n      tagDelete: this.deletePatientTagItem,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3645\n      },\n      __self: this\n    })), React.createElement(Tab, {\n      eventKey: \"patientCreate\",\n      title: \"Create\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3676\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"outline-primary\",\n      onClick: this.startCreatePatientHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3677\n      },\n      __self: this\n    }, \"Create\"), this.state.creating && React.createElement(CreatePatientForm, {\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmHandler,\n      confirmText: \"Confirm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3680\n      },\n      __self: this\n    })), React.createElement(Tab, {\n      eventKey: \"patientEditDemographics\",\n      title: \"Demographics\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3690\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3692\n      },\n      __self: this\n    }, \"Select a Patient from the Master List below\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      onClick: this.startUpdatePatientHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3697\n      },\n      __self: this\n    }, \"Edit Demographics\"), this.state.updating && this.state.selectedPatient !== null && React.createElement(UpdatePatientForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmUpdateHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3702\n      },\n      __self: this\n    })), React.createElement(Tab, {\n      eventKey: \"patientEditField\",\n      title: \"Single Field\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3714\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3716\n      },\n      __self: this\n    }, \"Select a Patient from the Master List below\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      onClick: this.startUpdatePatientHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3721\n      },\n      __self: this\n    }, \"Edit Field\"), this.state.updating && this.state.selectedPatient !== null && React.createElement(UpdatePatientFieldForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmUpdateFieldHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3726\n      },\n      __self: this\n    })), React.createElement(Tab, {\n      eventKey: \"patientEditConsultant\",\n      title: \"Consultant\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3738\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3740\n      },\n      __self: this\n    }, \"Select a Patient from the Master List below\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"consultant\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3745\n      },\n      __self: this\n    }, \"Add Consultant\"), this.state.patientUpdateField === 'consultant' && this.state.selectedPatient !== null && React.createElement(UpdatePatientConsultantForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientConsultantHandler,\n      confirmText: \"Confirm\",\n      consultant: this.context.selectedUser,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3750\n      },\n      __self: this\n    }), this.state.patientUpdateField === 'consultant' && this.state.selectedPatient !== null && React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3763\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3764\n      },\n      __self: this\n    }, \"Add Consultant: \", this.context.selectedUser.name), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3765\n      },\n      __self: this\n    }, \" To Paitient: \", this.state.selectedPatient.name, \" ??\"), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3766\n      },\n      __self: this\n    })), this.state.patientUpdateField === 'consultant' && this.state.selectedPatient !== null && React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3772\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3773\n      },\n      __self: this\n    }, \"Select a doctor from the Staff page\"))), React.createElement(Tab, {\n      eventKey: \"patientEditInsurance\",\n      title: \"Insurance\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3779\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3781\n      },\n      __self: this\n    }, \"Select a Patient from the Master List below\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"insurance\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3786\n      },\n      __self: this\n    }, \"Add Insurance\"), this.state.patientUpdateField === 'insurance' && this.state.selectedPatient !== null && React.createElement(UpdatePatientInsuranceForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientInsuranceHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3791\n      },\n      __self: this\n    })), React.createElement(Tab, {\n      eventKey: \"patientEditNextOfKin\",\n      title: \"NextOfKin\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3802\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3804\n      },\n      __self: this\n    }, \"Select a Patient from the Master List below\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"nextOfKin\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3809\n      },\n      __self: this\n    }, \"Add NextOfKin\"), this.state.patientUpdateField === 'nextOfKin' && this.state.selectedPatient !== null && React.createElement(UpdatePatientNextOfKinForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientNextOfKinHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3814\n      },\n      __self: this\n    })), React.createElement(Tab, {\n      eventKey: \"patientEditComplaint\",\n      title: \"Complaint\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3825\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3827\n      },\n      __self: this\n    }, \"Select a Patient from the Master List below\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"complaint\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3832\n      },\n      __self: this\n    }, \"Add Complaint\"), this.state.patientUpdateField === 'complaint' && this.state.selectedPatient !== null && React.createElement(UpdatePatientComplaintForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientComplaintHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3837\n      },\n      __self: this\n    })), React.createElement(Tab, {\n      eventKey: \"patientEditSurvey\",\n      title: \"Survey\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3848\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3850\n      },\n      __self: this\n    }, \"Select a Patient from the Master List below\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"survey\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3855\n      },\n      __self: this\n    }, \"Add Survey\"), this.state.patientUpdateField === 'survey' && this.state.selectedPatient !== null && React.createElement(UpdatePatientSurveyForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientSurveyHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3860\n      },\n      __self: this\n    })), React.createElement(Tab, {\n      eventKey: \"patientEditVitals\",\n      title: \"Vitals\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3871\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3873\n      },\n      __self: this\n    }, \"Select a Patient from the Master List below\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"vitals\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3878\n      },\n      __self: this\n    }, \"Add Vitals\"), this.state.patientUpdateField === 'vitals' && this.state.selectedPatient !== null && React.createElement(UpdatePatientVitalsForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientVitalsHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3883\n      },\n      __self: this\n    })), React.createElement(Tab, {\n      eventKey: \"patientEditExamination\",\n      title: \"Examination\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3894\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3896\n      },\n      __self: this\n    }, \"Select a Patient from the Master List below\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"examintion\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3901\n      },\n      __self: this\n    }, \"Add Examination\"), this.state.patientUpdateField === 'examintion' && this.state.selectedPatient !== null && React.createElement(UpdatePatientExaminationForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientExaminationHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3906\n      },\n      __self: this\n    })), React.createElement(Tab, {\n      eventKey: \"patientEditHistory\",\n      title: \"History\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3917\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3919\n      },\n      __self: this\n    }, \"Select a Patient from the Master List below\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"history\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3924\n      },\n      __self: this\n    }, \"Add History\"), this.state.patientUpdateField === 'history' && this.state.selectedPatient !== null && React.createElement(UpdatePatientHistoryForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientHistoryHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3929\n      },\n      __self: this\n    })), React.createElement(Tab, {\n      eventKey: \"patientEditAllergies\",\n      title: \"Allergies\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3940\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3942\n      },\n      __self: this\n    }, \"Select a Patient from the Master List below\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"allergies\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3947\n      },\n      __self: this\n    }, \"Add Allergies\"), this.state.patientUpdateField === 'allergies' && this.state.selectedPatient !== null && React.createElement(UpdatePatientAllergiesForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientAllergiesHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3952\n      },\n      __self: this\n    })), React.createElement(Tab, {\n      eventKey: \"patientEditMedication\",\n      title: \"Medication\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3963\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3965\n      },\n      __self: this\n    }, \"Select a Patient from the Master List below\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"medication\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3970\n      },\n      __self: this\n    }, \"Add Medication\"), this.state.patientUpdateField === 'medication' && this.state.selectedPatient !== null && React.createElement(UpdatePatientMedicationForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientMedicationHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3975\n      },\n      __self: this\n    })), React.createElement(Tab, {\n      eventKey: \"patientEditInvestigation\",\n      title: \"Investigation\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3986\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3988\n      },\n      __self: this\n    }, \"Select a Patient from the Master List below\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"investigation\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3993\n      },\n      __self: this\n    }, \"Add Investigation\"), this.state.patientUpdateField === 'investigation' && this.state.selectedPatient !== null && React.createElement(UpdatePatientInvestigationForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientInvestigationHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3998\n      },\n      __self: this\n    })), React.createElement(Tab, {\n      eventKey: \"patientEditDiagnosis\",\n      title: \"Diagnosis\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4009\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4011\n      },\n      __self: this\n    }, \"Select a Patient from the Master List below\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"diagnosis\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4016\n      },\n      __self: this\n    }, \"Add Diagnosis\"), this.state.patientUpdateField === 'diagnosis' && this.state.selectedPatient !== null && React.createElement(UpdatePatientDiagnosisForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientDiagnosisHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4021\n      },\n      __self: this\n    })), React.createElement(Tab, {\n      eventKey: \"patientEditTreatment\",\n      title: \"Treatment\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4032\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4034\n      },\n      __self: this\n    }, \"Select a Patient from the Master List below\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"treatment\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4039\n      },\n      __self: this\n    }, \"Add Treatment\"), this.state.patientUpdateField === 'treatment' && this.state.selectedPatient !== null && React.createElement(UpdatePatientTreatmentForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientTreatmentHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4044\n      },\n      __self: this\n    })), React.createElement(Tab, {\n      eventKey: \"patientEditBilling\",\n      title: \"Billing\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4055\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4057\n      },\n      __self: this\n    }, \"Select a Patient from the Master List below\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"billing\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4062\n      },\n      __self: this\n    }, \"Add Billing\"), this.state.patientUpdateField === 'billing' && this.state.selectedPatient !== null && React.createElement(UpdatePatientBillingForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientBillingHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4067\n      },\n      __self: this\n    })), React.createElement(Tab, {\n      eventKey: \"patientEditAttachment\",\n      title: \"Attachment\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4079\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4081\n      },\n      __self: this\n    }, \"Select a Patient from the Master List below\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"attachment\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4086\n      },\n      __self: this\n    }, \"Add Attachment\"), this.state.patientUpdateField === 'attachment' && this.state.selectedPatient !== null && React.createElement(UpdatePatientAttachmentForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientAttachmentHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4091\n      },\n      __self: this\n    })), React.createElement(Tab, {\n      eventKey: \"patientEditNote\",\n      title: \"Note\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4102\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4104\n      },\n      __self: this\n    }, \"Select a Patient from the Master List below\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"notes\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4109\n      },\n      __self: this\n    }, \"Add Note\"), this.state.patientUpdateField === 'notes' && this.state.selectedPatient !== null && React.createElement(UpdatePatientNoteForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientNoteHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4114\n      },\n      __self: this\n    })), React.createElement(Tab, {\n      eventKey: \"patientEditTag\",\n      title: \"Tag\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4125\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4127\n      },\n      __self: this\n    }, \"Select a Patient from the Master List below\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"tags\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4132\n      },\n      __self: this\n    }, \"Add Tag\"), this.state.patientUpdateField === 'tags' && this.state.selectedPatient !== null && React.createElement(UpdatePatientTagForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientTagHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4137\n      },\n      __self: this\n    })), React.createElement(Tab, {\n      eventKey: \"MasterList\",\n      title: \"Master List\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4149\n      },\n      __self: this\n    }, React.createElement(Container, {\n      className: \"containerUserMasterList\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4150\n      },\n      __self: this\n    }, React.createElement(Row, {\n      className: \"searchListRow\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4151\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"primary\",\n      size: \"sm\",\n      onClick: this.fetchPatientsAsc,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4152\n      },\n      __self: this\n    }, \"Sort Asc\"), React.createElement(Button, {\n      variant: \"info\",\n      size: \"sm\",\n      onClick: this.fetchPatientsDesc,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4155\n      },\n      __self: this\n    }, \"Sort Desc\"), this.state.isLoading ? React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4159\n      },\n      __self: this\n    }) : React.createElement(PatientList, {\n      patients: this.state.patients,\n      authUserId: this.context.userId,\n      onViewDetail: this.showDetailHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4161\n      },\n      __self: this\n    })))), React.createElement(Tab, {\n      eventKey: \"SearchInput\",\n      title: \"Search\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4171\n      },\n      __self: this\n    }, React.createElement(Container, {\n      className: \"containerSearchUserInput\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4172\n      },\n      __self: this\n    }, this.context.token && React.createElement(Row, {\n      className: \"searchUserRowAdd\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4174\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"primary\",\n      onClick: this.startSearchPatientHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4175\n      },\n      __self: this\n    }, \"Search\")), React.createElement(Row, {\n      className: \"searchUserRowForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4179\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 10,\n      className: \"searchUserColForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4180\n      },\n      __self: this\n    }, React.createElement(Tabs, {\n      defaultActiveKey: \"Field\",\n      id: \"uncontrolled-tab-example\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4181\n      },\n      __self: this\n    }, React.createElement(Tab, {\n      eventKey: \"Search\",\n      title: \"Search:\",\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4182\n      },\n      __self: this\n    }), React.createElement(Tab, {\n      eventKey: \"Field\",\n      title: \"Field:\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4184\n      },\n      __self: this\n    }, this.state.searching === true && React.createElement(SearchPatientForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmSearchHandler,\n      confirmText: \"Search\",\n      patient: this.context.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4186\n      },\n      __self: this\n    })), React.createElement(Tab, {\n      eventKey: \"Id\",\n      title: \"Id:\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4197\n      },\n      __self: this\n    }, this.state.searching === true && React.createElement(SearchPatientIdForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmSearchIdHandler,\n      confirmText: \"Search\",\n      patient: this.context.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4199\n      },\n      __self: this\n    })), React.createElement(Tab, {\n      eventKey: \"Name\",\n      title: \"Name:\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4225\n      },\n      __self: this\n    }, this.state.searching === true && React.createElement(SearchPatientNameForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmSearchNameHandler,\n      confirmText: \"Search\",\n      patient: this.context.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4227\n      },\n      __self: this\n    }))))))), React.createElement(Tab, {\n      eventKey: \"SearchResult\",\n      title: \"Search Results\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4244\n      },\n      __self: this\n    }, React.createElement(Container, {\n      className: \"containerSearchUserResults\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4245\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4246\n      },\n      __self: this\n    }, React.createElement(Card, {\n      className: \"searchCard\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4247\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      className: \"searchCardBody\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4248\n      },\n      __self: this\n    }, React.createElement(Card.Title, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4249\n      },\n      __self: this\n    }, \"Your Search\"), React.createElement(Card.Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4250\n      },\n      __self: this\n    }, \"Field: \", this.state.patientSearchField), React.createElement(Card.Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4253\n      },\n      __self: this\n    }, \"Query: \", this.state.patientSearchQuery)))), React.createElement(Row, {\n      className: \"searchListRow\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4259\n      },\n      __self: this\n    }, this.state.searchPatients !== [] && React.createElement(SearchPatientList, {\n      searchPatients: this.state.searchPatients,\n      authUserId: this.context.userId,\n      onCancel: this.modalCancelHandler,\n      onViewDetail: this.showDetailHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4262\n      },\n      __self: this\n    }))))))), React.createElement(Col, {\n      md: 3,\n      className: \"MasterCol3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4282\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nPatientsPage.contextType = AuthContext;\nexport default PatientsPage;","map":{"version":3,"sources":["/Users/pedrojacob/Downloads/AMR/websites/office_records/ENT_EMR/frontend/src/pages/Patients.js"],"names":["React","Component","S3","S3FileUpload","Container","Row","Col","Button","Accordion","SidebarPage","Tabs","Tab","Card","PatientList","PatientDetail","Spinner","AuthContext","SearchPatientList","SearchPatientForm","SearchPatientIdForm","SearchPatientNameForm","SearchPatientVisitForm","AlertBox","CreatePatientForm","UpdatePatientForm","UpdatePatientFieldForm","UpdatePatientConsultantForm","UpdatePatientInsuranceForm","UpdatePatientNextOfKinForm","UpdatePatientComplaintForm","UpdatePatientSurveyForm","UpdatePatientVitalsForm","UpdatePatientExaminationForm","UpdatePatientHistoryForm","UpdatePatientAllergiesForm","UpdatePatientMedicationForm","UpdatePatientInvestigationForm","UpdatePatientDiagnosisForm","UpdatePatientTreatmentForm","UpdatePatientBillingForm","UpdatePatientAttachmentForm","UpdatePatientNoteForm","UpdatePatientTagForm","PatientsPage","constructor","props","state","creating","updating","searching","updatingArray","deleting","patients","searchPatients","isLoading","selectedPatient","patientUpdateField","patientSearchField","patientSearchQuery","canDelete","visit","userAlert","isActive","startCreatePatientHandler","setState","console","log","startUpdatePatientHandler","startSearchPatientHandler","modalConfirmHandler","event","target","formGridName","value","userId","context","title","formGridTitle","name","dob","formGridDob","age","formGridAge","gender","formGridGender","addressNumber","formGridAddressNumber","addressStreet","formGridAddressStreet","addressTown","formGridAddressTown","addressParish","formGridAddressParish","addressPostOffice","formGridAddressPostOffice","contactPhone","formGridContactPhone","contactEmail","formGridContactEmail","registrationDate","formGridRegistrationDate","referralDate","formGridReferralDate","expirationDate","formGridExpirationDate","attendingPhysicianName","formGridAttendingPhysicianName","attendingPhysicianEmail","formGridAttendingPhysicianEmail","attendingPhysicianPhone","formGridAttendingPhysicianPhone","referringDoctorName","formGridReferringDoctorName","referringDoctorEmail","formGridReferringDoctorEmail","referringDoctorPhone","formGridReferringDoctorPhone","occupationRole","formGridOccupationRole","occupationEmployer","formGridOccupationEmployer","occupationEmployerContactPhone","formGridOccupationEmployerContactPhone","occupationEmployerContactEmail","formGridOccupationEmployerContactEmail","trim","length","patient","requestBody","query","token","fetch","method","body","JSON","stringify","headers","Authorization","then","res","status","Error","json","resData","data","createPatient","responseAlert","slice","newPatient","prevState","updatedPatients","push","catch","err","modalCancelHandler","modalConfirmUpdateHandler","selectedPatientId","_id","address","number","street","town","parish","postOffice","contact","phone","email","attendingPhysician","referringDoctor","occupation","role","employer","updatedPatientId","updatePatient","updatedPatient","find","e","updatedPatientPos","indexOf","slicedArray","splice","fetchPatients","modalConfirmUpdateFieldHandler","formGridField","field","formGridQuery","formGridFieldSelect","updatePatientField","updatePatientConsultantHandler","patientConsultantReference","selectedUser","undefined","formGridConsultantDate","consultantDate","patientConsultant","updatePatientConsultant","updatePatientInsuranceHandler","formGridInsuranceCompany","insuranceCompany","insuranceNumber","formGridInsuranceNumber","insuranceExpiry","formGridInsuranceExpiry","insuranceDescription","formGridInsuranceDescription","insuranceSubscriberCompany","formGridInsuranceSubscriberCompany","insuranceSubscriberDescription","formGridInsuranceSubscriberDescription","patientInsurance","updatePatientInsurance","updatePatientNextOfKinHandler","formGridNextOfKinName","nextOfKinName","nextOfKinPhone","formGridNextOfKinPhone","nextOfKinEmail","formGridNextOfKinEmail","patientNextOfKin","updatePatientNextOfKin","updatePatientComplaintHandler","formGridComplaintTitle","complaintTitle","complaintDate","formGridComplaintDate","complaintDescription","formGridComplaintDescription","complaintAnamnesis","formGridComplaintAnamnesis","complaintAttachmentName","formGridComplaintAttachmentName","complaintAttachmentFormat","formGridComplaintAttachmentFormat","complaintAttachmentPath","formGridComplaintAttachmentPath","file","_currentValue","config","bucketName","dirName","region","accessKeyId","secretAccessKey","ReactS3Client","newFileName","uploadFile","error","patientComplaint","updatePatientComplaint","updatePatientSurveyHandler","formGridSurveyTitle","surveyDate","formGridSurveyDate","surveyTitle","surveyDescription","formGridSurveyDescription","surveyAttachmentFormat","formGridSurveyAttachmentFormat","surveyAttachmentPath","formGridSurveyAttachmentPath","surveyAttachmentName","patientSurvey","updatePatientSurvey","updatePatientVitalsHandler","formGridVitalsDate","vitalsDate","vitalsPr","formGridVitalsPr","vitalsBp1","formGridVitalsBp1","vitalsBp2","formGridVitalsBp2","vitalsRr","formGridVitalsRr","vitalsTemp","formGridVitalsTemp","vitalsPs02","formGridVitalsPs02","vitalsHeight","formGridVitalsHeight","vitalsWeight","formGridVitalsWeight","vitalsBmi","formGridVitalsBmi","vitalsUrineType","formGridVitalsUrineType","vitalsUrineValue","formGridVitalsUrineValue","patientVitals","updatePatientVitals","updatePatientExaminationHandler","formGridExaminationArea","examinationDate","formGridExaminationDate","examinationGeneral","formGridExaminationGeneral","examinationArea","formGridExaminationAreaSelect","examinationType","formGridExaminationType","examinationMeasure","formGridExaminationMeasure","examinationValue","formGridExaminationValue","examinationDescription","formGridExaminationDescription","examinationFollowUp","formGridExaminationFollowUp","examinationAttachmentFormat","formGridExaminationAttachmentFormat","examinationAttachmentPath","formGridExaminationAttachmentPath","examinationAttachmentName","patientExamination","updatePatientExamination","updatePatientHistoryHandler","formGridHistoryTitle","historyType","formGridHistoryType","historyDate","formGridHistoryDate","historyTitle","historyDescription","formGridHistoryDescription","historyAttachmentFormat","formGridHistoryAttachmentFormat","historyAttachmentPath","formGridHistoryAttachmentPath","historyAttachmentName","patientHistory","updatePatientHistory","updatePatientAllergiesHandler","formGridAllergiesTitle","allergiesTitle","allergiesType","formGridAllergiesTypeSelect","formGridAllergiesType","allergiesDescription","formGridAllergiesDescription","allergiesAttachmentFormat","formGridAllergiesAttachmentFormat","allergiesAttachmentPath","formGridAllergiesAttachmentPath","allergiesAttachmentName","patientAllergies","updatePatientAllergies","updatePatientMedicationHandler","formGridMedicationTitle","medicationTitle","medicationType","formGridMedicationType","medicationDescription","formGridMedicationDescription","medicationAttachmentFormat","formGridMedicationAttachmentFormat","medicationAttachmentPath","formGridMedicationAttachmentPath","medicationAttachmentName","patientMedication","updatePatientMedication","updatePatientInvestigationHandler","formGridInvestigationTitle","investigationDate","formGridInvestigationDate","investigationTitle","investigationType","formGridInvestigationTypeSelect","formGridInvestigationType","investigationDescription","formGridInvestigationDescription","investigationAttachmentFormat","formGridInvestigationAttachmentFormat","investigationAttachmentPath","formGridInvestigationAttachmentPath","investigationAttachmentName","patientInvestigation","updatePatientInvestigation","updatePatientDiagnosisHandler","formGridDiagnosisTitle","diagnosisDate","formGridDiagnosisDate","diagnosisTitle","diagnosisType","formGridDiagnosisType","diagnosisDescription","formGridDiagnosisDescription","diagnosisAttachmentFormat","formGridDiagnosisAttachmentFormat","diagnosisAttachmentPath","formGridDiagnosisAttachmentPath","diagnosisAttachmentName","patientDiagnosis","updatePatientDiagnosis","updatePatientTreatmentHandler","formGridTreatmentTitle","treatmentDate","formGridTreatmentDate","treatmentTitle","treatmentDescription","formGridTreatmentDescription","treatmentDose","formGridTreatmentDose","treatmentFrequency","formGridTreatmentFrequency","treatmentType","formGridTreatmentType","formGridTreatmentTypeSelect","treatmentAttachmentFormat","formGridTreatmentAttachmentFormat","treatmentAttachmentPath","formGridTreatmentAttachmentPath","treatmentAttachmentName","patientTreatment","updatePatientTreatment","updatePatientBillingHandler","formGridBillingTitle","billingDate","formGridBillingDate","billingTitle","billingType","formGridBillingType","billingDescription","formGridBillingDescription","billingAmount","formGridBillingAmount","billingPaid","formGridBillingPaid","billingNotes","formGridBillingNotes","billingAttachmentFormat","formGridBillingAttachmentFormat","billingAttachmentPath","formGridBillingAttachmentPath","billingAttachmentName","patientBilling","updatePatientBilling","updatePatientAttachmentHandler","formGridPatientAttachmentName","attachmentFormat","formGridPatientAttachmentFormat","attachmentPath","formGridPatientAttachmentPath","attachmentName","updatePatientAttachment","updatePatientNoteHandler","formGridNote","note","updatePatientNotes","updatePatientTagHandler","formGridTag","tag","updatePatientTags","modalConfirmSearchHandler","formBasicField","formBasicQuery","formBasicFieldSelect","search","getPatientField","modalConfirmSearchIdHandler","patientId","formBasicId","getPatientId","modalConfirmSearchVisitHandler","modalConfirmSearchNameHandler","formBasicName","regex","RegExp","result","filter","match","getPatientVisit","preventDefault","consultant","complaints","Date","formBasicVisitDate","visitDate","toISOString","substring","visitSurveys","surveys","x","date","substr","visitConsultants","visitComplaints","visitVitals","vitals","visitExaminations","examination","visitHistory","history","visitInvestigations","investigation","visitDiagnosis","diagnosis","visitTreatments","treatment","visitBilling","billing","patientName","complaint","survey","fetchPatientsAsc","patientsNameAsc","fetchPatientsDesc","patientsNameDesc","modalDeleteHandler","user","deletedPatient","deletePatient","deletedPatientId","deletedPatientPos","deletePatientInsuranceItem","company","deletePatientInsurance","deletePatientConsultantItem","reference","id","deletePatientConsultant","deletePatientNextOfKinItem","deletePatientNextOfKin","deletePatientComplaintItem","deletePatientComplaint","deletePatientSurveyItem","deletePatientSurvey","deletePatientVitalsItem","deletePatientVitals","deletePatientExaminationItem","type","deletePatientExamination","deletePatientHistoryItem","deletePatientHistory","deletePatientAllergiesItem","deletePatientAllergies","deletePatientMedicationItem","deletePatientMedication","deletePatientInvestigationItem","deletePatientInvestigation","deletePatientDiagnosisItem","deletePatientDiagnosis","deletePatientTreatmentItem","deletePatientTreatment","deletePatientBillingItem","deletePatientBilling","deletePatientAttachmentItem","deletePatientAttachment","deletePatientNoteItem","deletePatientTagItem","showDetailHandler","nameElRef","createRef","componentDidMount","updatePatientSpecial","componentWillUnmount","render","fetchUsers","bind","contextType"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport S3 from 'react-aws-s3';\nimport S3FileUpload from 'react-s3';\n\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Button from 'react-bootstrap/Button';\nimport Accordion from 'react-bootstrap/Accordion';\nimport SidebarPage from './Sidebar';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\nimport Card from 'react-bootstrap/Card';\n\nimport PatientList from '../components/Patients/PatientList/PatientList';\nimport PatientDetail from '../components/Patients/PatientDetail';\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\nimport SearchPatientList from '../components/Patients/PatientList/SearchPatientList';\nimport SearchPatientForm from '../components/Forms/SearchPatientForm';\nimport SearchPatientIdForm from '../components/Forms/SearchPatientIdForm';\nimport SearchPatientNameForm from '../components/Forms/SearchPatientNameForm';\nimport SearchPatientVisitForm from '../components/Forms/SearchPatientVisitForm';\n\nimport AlertBox from '../components/AlertBox';\n\nimport CreatePatientForm from '../components/Forms/CreatePatientForm';\nimport UpdatePatientForm from '../components/Forms/UpdatePatientForm';\nimport UpdatePatientFieldForm from '../components/Forms/UpdatePatientFieldForm';\nimport UpdatePatientConsultantForm from '../components/Forms/UpdatePatientConsultantForm';\nimport UpdatePatientInsuranceForm from '../components/Forms/UpdatePatientInsuranceForm';\nimport UpdatePatientNextOfKinForm from '../components/Forms/UpdatePatientNextOfKinForm';\nimport UpdatePatientComplaintForm from '../components/Forms/UpdatePatientComplaintForm';\nimport UpdatePatientSurveyForm from '../components/Forms/UpdatePatientSurveyForm';\nimport UpdatePatientVitalsForm from '../components/Forms/UpdatePatientVitalsForm';\nimport UpdatePatientExaminationForm from '../components/Forms/UpdatePatientExaminationForm';\nimport UpdatePatientHistoryForm from '../components/Forms/UpdatePatientHistoryForm';\nimport UpdatePatientAllergiesForm from '../components/Forms/UpdatePatientAllergiesForm';\nimport UpdatePatientMedicationForm from '../components/Forms/UpdatePatientMedicationForm';\nimport UpdatePatientInvestigationForm from '../components/Forms/UpdatePatientInvestigationForm';\nimport UpdatePatientDiagnosisForm from '../components/Forms/UpdatePatientDiagnosisForm';\nimport UpdatePatientTreatmentForm from '../components/Forms/UpdatePatientTreatmentForm';\nimport UpdatePatientBillingForm from '../components/Forms/UpdatePatientBillingForm';\nimport UpdatePatientAttachmentForm from '../components/Forms/UpdatePatientAttachmentForm';\nimport UpdatePatientNoteForm from '../components/Forms/UpdatePatientNoteForm';\nimport UpdatePatientTagForm from '../components/Forms/UpdatePatientTagForm';\n\nimport './Users.css';\n\nclass PatientsPage extends Component {\n  state = {\n    creating: false,\n    updating: false,\n    searching: false,\n    updatingArray: false,\n    deleting: false,\n    patients: [],\n    searchPatients: [],\n    isLoading: false,\n    selectedPatient: null,\n    patientUpdateField: null,\n    patientSearchField: null,\n    patientSearchQuery: null,\n    canDelete: null,\n    visit: null,\n    userAlert: null,\n  };\n  isActive = true;\n\n  static contextType = AuthContext;\n\n  constructor(props) {\n    super(props);\n    this.nameElRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.fetchPatients();\n    if (this.context.user.name === 'admin579'){\n      this.setState({canDelete: true})\n    }\n  }\n\n\n  startCreatePatientHandler = () => {\n    this.setState({ creating: true });\n    console.log(\"CreatePatientForm...\");\n  };\n  startUpdatePatientHandler = () => {\n    this.setState({ updating: true, updatingArray: true });\n    console.log(\"UpdatePatientForm...\");\n  };\n  startSearchPatientHandler = () => {\n    this.setState({ searching: true });\n    console.log(\"SearchPatientForm...\");\n  };\n\n  modalConfirmHandler = (event) => {\n\n    console.log(\"CreatePatientFormData:  \", event.target.formGridName.value);\n\n    this.setState({ creating: false });\n    const userId = this.context.userId;\n\n    let title = event.target.formGridTitle.value;\n    let name = event.target.formGridName.value;\n    let dob = event.target.formGridDob.value;\n    let age = event.target.formGridAge.value;\n    let gender = event.target.formGridGender.value;\n    let addressNumber = event.target.formGridAddressNumber.value;\n    let addressStreet = event.target.formGridAddressStreet.value;\n    let addressTown = event.target.formGridAddressTown.value;\n    let addressParish = event.target.formGridAddressParish.value;\n    let addressPostOffice = event.target.formGridAddressPostOffice.value;\n    let contactPhone = event.target.formGridContactPhone.value;\n    let contactEmail = event.target.formGridContactEmail.value;\n    let registrationDate = event.target.formGridRegistrationDate.value;\n    let referralDate = event.target.formGridReferralDate.value;\n    let expirationDate = event.target.formGridExpirationDate.value;\n    let attendingPhysicianName = event.target.formGridAttendingPhysicianName.value;\n    let attendingPhysicianEmail = event.target.formGridAttendingPhysicianEmail.value;\n    let attendingPhysicianPhone = event.target.formGridAttendingPhysicianPhone.value;\n    let referringDoctorName = event.target.formGridReferringDoctorName.value;\n    let referringDoctorEmail = event.target.formGridReferringDoctorEmail.value;\n    let referringDoctorPhone = event.target.formGridReferringDoctorPhone.value;\n    let occupationRole = event.target.formGridOccupationRole.value;\n    let occupationEmployer = event.target.formGridOccupationEmployer.value;\n    let occupationEmployerContactPhone = event.target.formGridOccupationEmployerContactPhone.value;\n    let occupationEmployerContactEmail = event.target.formGridOccupationEmployerContactEmail.value;\n\n\n    if (\n      name.trim().length === 0 ||\n      // title.trim().length === 0 ||\n      // name.trim().length === 0 ||\n      // dob.trim().length === 0 ||\n      // age.trim().length === 0 ||\n      // gender.trim().length === 0 ||\n      // addressNumber.trim().length === 0 ||\n      // addressStreet.trim().length === 0 ||\n      // addressTown.trim().length === 0 ||\n      // addressParish.trim().length === 0 ||\n      // addressPostOffice.trim().length === 0 ||\n      contactPhone.trim().length === 0\n      // contactEmail.trim().length === 0 ||\n      // registrationDate.trim().length === 0 ||\n      // referralDate.trim().length === 0 ||\n      // expirationDate.trim().length === 0 ||\n      // attendingPhysicianName.trim().length === 0 ||\n      // attendingPhysicianEmail.trim().length === 0 ||\n      // attendingPhysicianPhone.trim().length === 0 ||\n      // referringDoctorName.trim().length === 0 ||\n      // referringDoctorEmail.trim().length === 0 ||\n      // referringDoctorPhone.trim().length === 0 ||\n      // occupationRole.trim().length === 0 ||\n      // occupationEmployer.trim().length === 0 ||\n      // occupationEmployerContactPhone.trim().length === 0 ||\n      // occupationEmployerContactEmail.trim().length === 0\n\n    ) {\n      console.log(\"patient must have at least a Name and Contact Number!!!...Please try again...\");\n      this.setState({userAlert: \"patient requires Name and Contact Number!!!... Try again...\"});\n      return;\n    }\n\n    const patient = { title, name, dob, age, gender, addressNumber, addressStreet, addressTown, addressParish, addressPostOffice, contactPhone, contactEmail, registrationDate, referralDate, expirationDate, attendingPhysicianName, attendingPhysicianEmail, attendingPhysicianPhone, referringDoctorName, referringDoctorEmail, referringDoctorPhone, occupationRole, occupationEmployer, occupationEmployerContactPhone, occupationEmployerContactEmail };\n    console.log(`\n      creating patient...\n      title: ${title},\n      name: ${name},\n      dob: ${dob},\n      age: ${age},\n      gender: ${gender},\n      addressNumber: ${addressNumber},\n      addressStreet: ${addressStreet},\n      addressTown: ${addressTown},\n      addressParish: ${addressParish},\n      addressPostOffice: ${addressPostOffice},\n      contactPhone: ${contactPhone},\n      contactEmail: ${contactEmail},\n      registrationDate: ${registrationDate},\n      referralDate: ${referralDate},\n      expirationDate: ${expirationDate},\n      attendingPhysicianName: ${attendingPhysicianName},\n      attendingPhysicianEmail: ${attendingPhysicianEmail},\n      attendingPhysicianPhone: ${attendingPhysicianPhone},\n      referringDoctorName: ${referringDoctorName},\n      referringDoctorEmail: ${referringDoctorEmail},\n      referringDoctorPhone: ${referringDoctorPhone},\n      occupationRole: ${occupationRole},\n      occupationEmployer: ${occupationEmployer},\n      occupationEmployerContactPhone: ${occupationEmployerContactPhone},\n      occupationEmployerContactEmail: ${occupationEmployerContactEmail},\n      `);\n\n    const requestBody = {\n      query: `\n          mutation {createPatient(userId:\\\"${userId}\\\", patientInput:{title:\\\"${title}\\\",name:\\\"${name}\\\",dob:\\\"${dob}\\\",age:${age},gender:\\\"${gender}\\\",addressNumber:${addressNumber},addressStreet:\\\"${addressStreet}\\\",addressTown:\\\"${addressTown}\\\",addressParish:\\\"${addressParish}\\\",addressPostOffice:\\\"${addressPostOffice}\\\",contactPhone:\\\"${contactPhone}\\\",contactEmail:\\\"${contactEmail}\\\",registrationDate:\\\"${registrationDate}\\\",referralDate:\\\"${referralDate}\\\",expirationDate:\\\"${expirationDate}\\\",referringDoctorName:\\\"${referringDoctorName}\\\",referringDoctorEmail:\\\"${referringDoctorEmail}\\\",referringDoctorPhone:\\\"${referringDoctorPhone}\\\",attendingPhysicianName:\\\"${attendingPhysicianName}\\\",attendingPhysicianEmail:\\\"${attendingPhysicianEmail}\\\",attendingPhysicianPhone:\\\"${attendingPhysicianPhone}\\\",occupationRole:\\\"${occupationRole}\\\",occupationEmployer:\\\"${occupationEmployer}\\\",occupationEmployerContactPhone:\\\"${occupationEmployerContactPhone}\\\",occupationEmployerContactEmail:\\\"${occupationEmployerContactEmail}\\\"})\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n        `};\n\n    const token = this.context.token;\n\n    // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(`\n          response data:\n          ${JSON.stringify(resData.data.createPatient)}\n          `);\n          const responseAlert = JSON.stringify(resData.data).slice(2,15);\n          this.setState({userAlert: responseAlert});\n\n        const newPatient = resData.data.createPatient;\n        this.setState(prevState => {\n          const updatedPatients = [...prevState.patients];\n          updatedPatients.push(newPatient);\n\n          return { patients: updatedPatients };\n        });\n\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n  };\n\n  modalCancelHandler = () => {\n    this.setState({ creating: false, updating: false, selectedPatient: null });\n  };\n\n\n  modalConfirmUpdateHandler = (event) => {\n\n    // if(this.context.user.role !== 'admin') {\n    //   console.log(\"Not the Admin! No edit permission!!\");\n    // }\n\n    const userId = this.context.userId;\n    const selectedPatientId = this.context.selectedPatient._id;\n\n    console.log(\"UpdatePatientFormData:  \", event.target.formGridName.value);\n\n\n    this.setState({ updating: false });\n\n    let title = event.target.formGridTitle.value;\n    let name = event.target.formGridName.value;\n    let dob = event.target.formGridDob.value;\n    let age = event.target.formGridAge.value;\n    let gender = event.target.formGridGender.value;\n    let addressNumber = event.target.formGridAddressNumber.value;\n    let addressStreet = event.target.formGridAddressStreet.value;\n    let addressTown = event.target.formGridAddressTown.value;\n    let addressParish = event.target.formGridAddressParish.value;\n    let addressPostOffice = event.target.formGridAddressPostOffice.value;\n    let contactPhone = event.target.formGridContactPhone.value;\n    let contactEmail = event.target.formGridContactEmail.value;\n    let registrationDate = event.target.formGridRegistrationDate.value;\n    let referralDate = event.target.formGridReferralDate.value;\n    let expirationDate = event.target.formGridExpirationDate.value;\n    let attendingPhysicianName = event.target.formGridAttendingPhysicianName.value;\n    let attendingPhysicianEmail = event.target.formGridAttendingPhysicianEmail.value;\n    let attendingPhysicianPhone = event.target.formGridAttendingPhysicianPhone.value;\n    let referringDoctorName = event.target.formGridReferringDoctorName.value;\n    let referringDoctorEmail = event.target.formGridReferringDoctorEmail.value;\n    let referringDoctorPhone = event.target.formGridReferringDoctorPhone.value;\n    let occupationRole = event.target.formGridOccupationRole.value;\n    let occupationEmployer = event.target.formGridOccupationEmployer.value;\n    let occupationEmployerContactPhone = event.target.formGridOccupationEmployerContactPhone.value;\n    let occupationEmployerContactEmail = event.target.formGridOccupationEmployerContactEmail.value;\n\n    if (title.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      title = this.context.selectedPatient.title;\n    }\n    if (name.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      name = this.context.selectedPatient.name;\n    }\n    if (dob.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      dob = this.context.selectedPatient.dob;\n    }\n    if (gender.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      gender = this.context.selectedPatient.gender;\n    }\n    if (age.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      age = this.context.selectedPatient.age;\n    }\n    if (addressNumber.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      addressNumber = this.context.selectedPatient.address.number;\n    }\n    if (addressStreet.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      addressStreet = this.context.selectedPatient.address.street;\n    }\n    if (addressTown.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      addressTown = this.context.selectedPatient.address.town;\n    }\n    if (addressParish.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      addressParish = this.context.selectedPatient.address.parish;\n    }\n    if (addressPostOffice.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      addressPostOffice = this.context.selectedPatient.address.postOffice;\n    }\n    if (contactPhone.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      contactPhone = this.context.selectedPatient.contact.phone;\n    }\n    if (contactEmail.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      contactEmail = this.context.selectedPatient.contact.email;\n    }\n    if (registrationDate.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      registrationDate = this.context.selectedPatient.registrationDate;\n    }\n    if (attendingPhysicianName.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      attendingPhysicianName = this.context.selectedPatient.attendingPhysician.name;\n    }\n    if (attendingPhysicianEmail.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      attendingPhysicianEmail = this.context.selectedPatient.attendingPhysician.email;\n    }\n    if (attendingPhysicianPhone.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      attendingPhysicianPhone = this.context.selectedPatient.attendingPhysician.phone;\n    }\n    if (referringDoctorName.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      referringDoctorName = this.context.selectedPatient.referringDoctor.name;\n    }\n    if (referringDoctorEmail.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      referringDoctorEmail = this.context.selectedPatient.referringDoctor.email;\n    }\n    if (referringDoctorPhone.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      referringDoctorPhone = this.context.selectedPatient.referringDoctor.phone;\n    }\n    if (occupationRole.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      occupationRole = this.context.selectedPatient.occupation.role;\n    }\n    if (occupationEmployer.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      occupationEmployer = this.context.selectedPatient.occupation.employer;\n    }\n    if (occupationEmployerContactEmail.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      occupationEmployerContactEmail = this.context.selectedPatient.occupation.contact.email;\n    }\n    if (occupationEmployerContactPhone.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      occupationEmployerContactPhone = this.context.selectedPatient.occupation.contact.phone;\n    }\n\n    const patient = { title, name, dob, age, gender, addressNumber, addressStreet, addressTown, addressParish, addressPostOffice, contactPhone, contactEmail, registrationDate, referralDate, expirationDate, attendingPhysicianName, attendingPhysicianEmail, attendingPhysicianPhone, referringDoctorName, referringDoctorEmail, referringDoctorPhone, occupationRole, occupationEmployer, occupationEmployerContactPhone, occupationEmployerContactEmail };\n    console.log(`\n      updating patient...\n      title: ${title},\n      name: ${name},\n      dob: ${dob},\n      age: ${age},\n      gender: ${gender},\n      addressNumber: ${addressNumber},\n      addressStreet: ${addressStreet},\n      addressTown: ${addressTown},\n      addressParish: ${addressParish},\n      addressPostOffice: ${addressPostOffice},\n      contactPhone: ${contactPhone},\n      contactEmail: ${contactEmail},\n      registrationDate: ${registrationDate},\n      referralDate: ${referralDate},\n      expirationDate: ${expirationDate},\n      attendingPhysicianName: ${attendingPhysicianName},\n      attendingPhysicianEmail: ${attendingPhysicianEmail},\n      attendingPhysicianPhone: ${attendingPhysicianPhone},\n      referringDoctorName: ${referringDoctorName},\n      referringDoctorEmail: ${referringDoctorEmail},\n      referringDoctorPhone: ${referringDoctorPhone},\n      occupationRole: ${occupationRole},\n      occupationEmployer: ${occupationEmployer},\n      occupationEmployerContactPhone: ${occupationEmployerContactPhone},\n      occupationEmployerContactEmail: ${occupationEmployerContactEmail},\n      `);\n      this.setState({userAlert: \"updating patient...\"});\n\n    const requestBody = {\n      query: `\n          mutation {updatePatient(userId:\"${userId}\",patientId:\"${selectedPatientId}\", patientInput:{title:\"${title}\",name:\"${name}\",dob:\"${dob}\",age:${age},gender:\"${gender}\",addressNumber:${addressNumber},addressStreet:\"${addressStreet}\",addressTown:\"${addressTown}\",addressParish:\"${addressParish}\",addressPostOffice:\"${addressPostOffice}\",contactPhone:\"${contactPhone}\",contactEmail:\"${contactEmail}\",registrationDate:\"${registrationDate}\",referralDate:\"${referralDate}\",expirationDate:\"${expirationDate}\",referringDoctorName:\"${referringDoctorName}\",referringDoctorEmail:\"${referringDoctorEmail}\",referringDoctorPhone:\"${referringDoctorPhone}\",attendingPhysicianName:\"${attendingPhysicianName}\",attendingPhysicianEmail:\"${attendingPhysicianEmail}\",attendingPhysicianPhone:\"${attendingPhysicianPhone}\",occupationRole:\"${occupationRole}\",occupationEmployer:\"${occupationEmployer}\",occupationEmployerContactPhone:\"${occupationEmployerContactPhone}\",occupationEmployerContactEmail:\"${occupationEmployerContactPhone}\"})\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n        `};\n\n    const token = this.context.token;\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n\n        const updatedPatientId = resData.data.updatePatient._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatient);\n\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatient})\n        this.fetchPatients();\n\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n  };\n\n\n  modalConfirmUpdateFieldHandler = (event) => {\n\n    const token = this.context.token;\n    const userId = this.context.userId;\n    let selectedPatientId = this.context.selectedPatient._id;\n\n    // if( this.context.user.role !== 'admin') {\n    //   console.log(\"Not the creator or Admin! No edit permission!!\");\n    //   selectedPatientId = null;\n    // }\n\n      console.log(\"UpdatePatientFieldFormData:  \", event.target.formGridField.value);\n      this.setState({ updating: false });\n\n      let field = null;\n      let query = event.target.formGridQuery.value;\n      if (event.target.formGridFieldSelect.value === \"select\") {\n        field = event.target.formGridField.value;\n      } else {\n        field = event.target.formGridFieldSelect.value;\n      }\n\n      const requestBody = {\n        query:`\n          mutation {updatePatientField(userId:\\\"${userId}\\\",patientId:\\\"${selectedPatientId}\\\",field:\\\"${field}\\\",query:\\\"${query}\\\")\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n        `};\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData.data.updatePatientField));\n\n          const updatedPatientId = resData.data.updatePatientField._id;\n          const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n          const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n          const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n          console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n          this.state.patients.push(resData.data.updatePatientField);\n          this.context.patients = this.state.patients;\n          const responseAlert = JSON.stringify(resData.data).slice(2,25);\n          this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientField})\n          this.fetchPatients();\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({userAlert: err});\n        });\n\n  }\n\n\nupdatePatientConsultantHandler = (event) => {\n\n  let token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n  const patientConsultantReference = this.context.selectedUser._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n  if (patientConsultantReference === undefined) {\n    console.log(`\n      select a Staff member before adding a Patient Consultant!!\n      `);\n      this.setState({userAlert: \"select a Staff member before adding a Patient Consultant!!...\"});\n      token = null;\n  }\n\n  console.log(\"UpdatePatientConsultantFormData:  \", event.target.formGridConsultantDate.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let consultantDate = event.target.formGridConsultantDate.value;\n\n  const patientConsultant = { consultantDate, patientConsultantReference };\n  console.log(`\n    adding patient consultant item...\n    userId: ${userId},\n    selectedPatientId: ${selectedPatientId},\n    consultantDate: ${consultantDate},\n    consultantReference: ${patientConsultantReference},\n    `);\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientConsultant(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{consultantDate:\" ${consultantDate}\",consultantReference: \"${patientConsultantReference}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    };\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData.data));\n\n          const updatedPatientId = resData.data.updatePatientConsultant._id;\n          const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n          const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n          const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n          console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n          this.state.patients.push(resData.data.updatePatientConsultant);\n          this.context.patients = this.state.patients;\n          const responseAlert = JSON.stringify(resData.data).slice(2,25);\n          this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientConsultant})\n          this.fetchPatients();\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({userAlert: err});\n        });\n\n}\nupdatePatientInsuranceHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientInsuranceFormData:  \", event.target.formGridInsuranceCompany.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let insuranceCompany = event.target.formGridInsuranceCompany.value;\n  let insuranceNumber = event.target.formGridInsuranceNumber.value;\n  let insuranceExpiry = event.target.formGridInsuranceExpiry.value;\n  let insuranceDescription = event.target.formGridInsuranceDescription.value;\n  let insuranceSubscriberCompany = event.target.formGridInsuranceSubscriberCompany.value;\n  let insuranceSubscriberDescription = event.target.formGridInsuranceSubscriberDescription.value;\n\n  const patientInsurance = { insuranceCompany, insuranceNumber, insuranceExpiry, insuranceDescription, insuranceSubscriberCompany, insuranceSubscriberDescription };\n  console.log(`\n    adding patient insurance item...\n    userId: ${userId},\n    selectedPatientId: ${selectedPatientId},\n    insuranceCompany: ${insuranceCompany},\n    insuranceNumber: ${insuranceNumber},\n    insuranceExpiry: ${insuranceExpiry},\n    insuranceDescription: ${insuranceDescription},\n    insuranceSubscriberCompany: ${insuranceSubscriberCompany},\n    insuranceSubscriberDescription: ${insuranceSubscriberDescription},\n    `);\n    this.setState({userAlert: \"adding patient insurance item...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientInsurance(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{insuranceCompany:\"${insuranceCompany}\",insuranceNumber:\"${insuranceNumber}\",insuranceDescription:\"${insuranceDescription}\",insuranceExpiry:\"${insuranceExpiry}\",insuranceSubscriberCompany:\"${insuranceSubscriberCompany}\",insuranceSubscriberDescription:\"${insuranceSubscriberDescription}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    };\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData.data));\n\n          const updatedPatientId = resData.data.updatePatientInsurance._id;\n          const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n          const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n          const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n          console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n          this.state.patients.push(resData.data.updatePatientInsurance);\n          this.context.patients = this.state.patients;\n          const responseAlert = JSON.stringify(resData.data).slice(2,25);\n          this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientInsurance})\n          this.fetchPatients();\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({userAlert: err});\n        });\n\n}\n\nupdatePatientNextOfKinHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientNextOfKinFormData:  \", event.target.formGridNextOfKinName.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let nextOfKinName = event.target.formGridNextOfKinName.value;\n  let nextOfKinPhone = event.target.formGridNextOfKinPhone.value;\n  let nextOfKinEmail = event.target.formGridNextOfKinEmail.value;\n\n  const patientNextOfKin = { nextOfKinName, nextOfKinPhone, nextOfKinEmail };\n  console.log(`\n    adding patient nextOfKin item...\n    userId: ${userId},\n    selectedPatientId: ${selectedPatientId},\n    nextOfKinName: ${nextOfKinName},\n    nextOfKinPhone: ${nextOfKinPhone},\n    nextOfKinEmail: ${nextOfKinEmail},\n    `);\n    this.setState({userAlert: \"adding patient nextOfKin item...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientNextOfKin(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{nextOfKinName:\"${nextOfKinName}\",nextOfKinEmail:\"${nextOfKinEmail}\",nextOfKinPhone:\"${nextOfKinPhone}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    };\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData.data));\n\n          const updatedPatientId = resData.data.updatePatientNextOfKin._id;\n          const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n          const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n          const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n          console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n          this.state.patients.push(resData.data.updatePatientNextOfKin);\n          this.context.patients = this.state.patients;\n          const responseAlert = JSON.stringify(resData.data).slice(2,25);\n          this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientNextOfKin})\n          this.fetchPatients();\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({userAlert: err});\n        });\n}\n\n\nupdatePatientComplaintHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientComplaintFormData:  \", event.target.formGridComplaintTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let complaintTitle = event.target.formGridComplaintTitle.value;\n  let complaintDate = event.target.formGridComplaintDate.value;\n  let complaintDescription = event.target.formGridComplaintDescription.value;\n  let complaintAnamnesis = event.target.formGridComplaintAnamnesis.value;\n  let complaintAttachmentName = event.target.formGridComplaintAttachmentName.value;\n  let complaintAttachmentFormat = event.target.formGridComplaintAttachmentFormat.value;\n  let complaintAttachmentPath = event.target.formGridComplaintAttachmentPath.value;\n  let file = AuthContext._currentValue.file;\n\n  console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n  const config = {\n    bucketName: 'ent-emr-bucket',\n    dirName: complaintAttachmentPath,\n    region: 'us-east-2',\n    accessKeyId: \"AKIARFTS6Q6DALQKT4QR\",\n    secretAccessKey: \"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\",\n  }\n  const ReactS3Client = new S3(config);\n  const newFileName = file.name;\n\n  ReactS3Client\n      .uploadFile(file, newFileName)\n      .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n      .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n  const patientComplaint = { complaintTitle, complaintDate, complaintDescription, complaintAnamnesis, complaintAttachmentName, complaintAttachmentFormat, complaintAttachmentPath };\n  console.log(`\n    adding patient complaint...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    complaintTitle: ${complaintTitle},\n    complaintDate: ${complaintDate},\n    complaintDescription: ${complaintDescription},\n    complaintAnamnesis: ${complaintAnamnesis},\n    complaintAttachmentName: ${complaintAttachmentName},\n    complaintAttachmentFormat: ${complaintAttachmentFormat},\n    complaintAttachmentPath: ${complaintAttachmentPath},\n    `);\n    this.setState({userAlert: \"adding patient complaint...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientComplaint(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{complaintDate:\"${complaintDate}\",complaintTitle:\"${complaintTitle}\",complaintDescription:\"${complaintDescription}\",complaintAnamnesis:\"${complaintAnamnesis}\",complaintAttachmentName:\"${complaintAttachmentName}\",complaintAttachmentFormat:\"${complaintAttachmentFormat}\",complaintAttachmentPath:\"${complaintAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientComplaint._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientComplaint);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientComplaint})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n}\n\nupdatePatientSurveyHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientSurveyFormData:  \", event.target.formGridSurveyTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let surveyDate = event.target.formGridSurveyDate.value;\n  let surveyTitle = event.target.formGridSurveyTitle.value;\n  let surveyDescription = event.target.formGridSurveyDescription.value;\n  // let surveyAttachmentName = event.target.formGridSurveyAttachmentName.value;\n  let surveyAttachmentFormat = event.target.formGridSurveyAttachmentFormat.value;\n  let surveyAttachmentPath = event.target.formGridSurveyAttachmentPath.value;\n  let file = AuthContext._currentValue.file;\n\n  console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n  const config = {\n    bucketName: 'ent-emr-bucket',\n    dirName: surveyAttachmentPath,\n    region: 'us-east-2',\n    accessKeyId: \"AKIARFTS6Q6DALQKT4QR\",\n    secretAccessKey: \"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\",\n  }\n  const ReactS3Client = new S3(config);\n  const newFileName = file.name;\n  const surveyAttachmentName = newFileName;\n\n  ReactS3Client\n      .uploadFile(file, newFileName)\n      .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n      .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n  const patientSurvey = { surveyDate, surveyTitle, surveyDescription, surveyAttachmentName, surveyAttachmentFormat, surveyAttachmentPath };\n  console.log(`\n    adding patient survey...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    surveyDate: ${surveyDate},\n    surveyTitle: ${surveyTitle},\n    surveyDescription: ${surveyDescription},\n    surveyAttachmentName: ${surveyAttachmentName},\n    surveyAttachmentFormat: ${surveyAttachmentFormat},\n    surveyAttachmentPath: ${surveyAttachmentPath},\n    `);\n    this.setState({userAlert: \"adding patient survey...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientSurvey(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{surveyDate:\"${surveyDate}\",surveyTitle:\"${surveyTitle}\",surveyDescription:\"${surveyDescription}\",surveyAttachmentName:\"${surveyAttachmentName}\",surveyAttachmentFormat:\"${surveyAttachmentFormat}\",surveyAttachmentPath:\"${surveyAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientSurvey._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientSurvey);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientSurvey})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n}\n\nupdatePatientVitalsHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientVitalsFormData:  \", event.target.formGridVitalsDate.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let vitalsDate = event.target.formGridVitalsDate.value;\n  let vitalsPr = event.target.formGridVitalsPr.value;\n  let vitalsBp1 = event.target.formGridVitalsBp1.value;\n  let vitalsBp2 = event.target.formGridVitalsBp2.value;\n  let vitalsRr = event.target.formGridVitalsRr.value;\n  let vitalsTemp = event.target.formGridVitalsTemp.value;\n  let vitalsPs02 = event.target.formGridVitalsPs02.value;\n  let vitalsHeight = event.target.formGridVitalsHeight.value;\n  let vitalsWeight = event.target.formGridVitalsWeight.value;\n  let vitalsBmi = event.target.formGridVitalsBmi.value;\n  let vitalsUrineType = event.target.formGridVitalsUrineType.value;\n  let vitalsUrineValue = event.target.formGridVitalsUrineValue.value;\n\n  const patientVitals = {  };\n  console.log(`\n    adding patient vitals...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    `);\n    this.setState({userAlert: \"adding patient vitals...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientVitals(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{vitalsDate:\"${vitalsDate}\",vitalsPr:${vitalsPr},vitalsBp1:${vitalsBp1},vitalsBp2:${vitalsBp2},vitalsRr:${vitalsRr},vitalsTemp:${vitalsTemp},vitalsPs02:${vitalsPs02},vitalsHeight:${vitalsHeight},vitalsWeight:${vitalsWeight},vitalsBmi:${vitalsBmi},vitalsUrineType:\"${vitalsUrineType}\",vitalsUrineValue:\"${vitalsUrineValue}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientVitals._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientVitals);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientVitals})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n}\n\n\nupdatePatientExaminationHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientExaminationFormData:  \", event.target.formGridExaminationArea.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let examinationDate = event.target.formGridExaminationDate.value;\n  let examinationGeneral = event.target.formGridExaminationGeneral.value;\n  let examinationArea = undefined;\n  if (event.target.formGridExaminationAreaSelect === \"select\") {\n    examinationArea = event.target.formGridExaminationArea.value;\n  } else {\n    examinationArea = event.target.formGridExaminationAreaSelect.value;\n  }\n  let examinationType = event.target.formGridExaminationType.value;\n  let examinationMeasure = event.target.formGridExaminationMeasure.value;\n  let examinationValue = event.target.formGridExaminationValue.value;\n  let examinationDescription = event.target.formGridExaminationDescription.value;\n  let examinationFollowUp = event.target.formGridExaminationFollowUp.value;\n  // let examinationAttachmentName = event.target.formGridExaminationAttachmentName.value;\n  let examinationAttachmentFormat = event.target.formGridExaminationAttachmentFormat.value;\n  let examinationAttachmentPath = event.target.formGridExaminationAttachmentPath.value;\n  let file = AuthContext._currentValue.file;\n\n  console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n  const config = {\n    bucketName: 'ent-emr-bucket',\n    dirName: examinationAttachmentPath,\n    region: 'us-east-2',\n    accessKeyId: \"AKIARFTS6Q6DALQKT4QR\",\n    secretAccessKey: \"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\",\n  }\n  const ReactS3Client = new S3(config);\n  const newFileName = file.name;\n  const examinationAttachmentName = newFileName;\n\n  ReactS3Client\n      .uploadFile(file, newFileName)\n      .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n      .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n  const patientExamination = { examinationArea, examinationGeneral, examinationType, examinationMeasure, examinationValue, examinationAttachmentName, examinationAttachmentFormat, examinationAttachmentPath };\n\n  console.log(`\n    adding patient examination...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    examinationDate: ${examinationDate},\n    examinationGeneral: ${examinationGeneral},\n    examinationArea: ${examinationArea},\n    examinationType: ${examinationType},\n    examinationMeasure: ${examinationMeasure},\n    examinationValue: ${examinationValue},\n    examinationDescription: ${examinationDescription},\n    examinationFollowUp: ${examinationFollowUp},\n    examinationAttachmentName: ${examinationAttachmentName},\n    examinationAttachmentFormat: ${examinationAttachmentFormat},\n    examinationAttachmentPath: ${examinationAttachmentPath},\n    `);\n    this.setState({userAlert: \"adding patient examination...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientExamination(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{examinationDate:\"${examinationDate}\",examinationGeneral:\"${examinationGeneral}\",examinationArea:\"${examinationArea}\",examinationType:\"${examinationType}\",examinationMeasure:\"${examinationMeasure}\",examinationValue:\"${examinationValue}\",examinationDescription:\"${examinationDescription}\",examinationFollowUp:${examinationFollowUp},examinationAttachmentName:\"${examinationAttachmentName}\",examinationAttachmentFormat:\"${examinationAttachmentFormat}\",examinationAttachmentPath:\"${examinationAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientExamination._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientExamination);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientExamination})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n}\n\n\nupdatePatientHistoryHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientHistoryFormData:  \", event.target.formGridHistoryTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let historyType = event.target.formGridHistoryType.value;\n  let historyDate = event.target.formGridHistoryDate.value;\n  let historyTitle = event.target.formGridHistoryTitle.value;\n  let historyDescription = event.target.formGridHistoryDescription.value;\n  // let historyAttachmentName = event.target.formGridHistoryAttachmentName.value;\n  let historyAttachmentFormat = event.target.formGridHistoryAttachmentFormat.value;\n  let historyAttachmentPath = event.target.formGridHistoryAttachmentPath.value;\n  let file = AuthContext._currentValue.file;\n\n  console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n  const config = {\n    bucketName: 'ent-emr-bucket',\n    dirName: historyAttachmentPath,\n    region: 'us-east-2',\n    accessKeyId: \"AKIARFTS6Q6DALQKT4QR\",\n    secretAccessKey: \"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\",\n  }\n  const ReactS3Client = new S3(config);\n  const newFileName = file.name;\n  const historyAttachmentName = newFileName;\n\n  ReactS3Client\n      .uploadFile(file, newFileName)\n      .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n      .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n  const patientHistory = { historyType, historyDate, historyTitle, historyDescription, historyAttachmentName, historyAttachmentFormat, historyAttachmentPath };\n  console.log(`\n    adding patient history...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    historyType: ${historyType},\n    historyDate: ${historyDate},\n    historyTitle: ${historyTitle},\n    historyDescription: ${historyDescription},\n    historyAttachmentName: ${historyAttachmentName},\n    historyAttachmentFormat: ${historyAttachmentFormat},\n    historyAttachmentPath: ${historyAttachmentPath},\n    `);\n    this.setState({userAlert: \"adding patient history...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientHistory(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{historyTitle:\"${historyTitle}\",historyType:\"${historyType}\",historyDate:\"${historyDate}\",historyDescription:\"${historyDescription}\",historyAttachmentName:\"${historyAttachmentName}\",historyAttachmentFormat:\"${historyAttachmentFormat}\",historyAttachmentPath:\"${historyAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientHistory._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientHistory);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientHistory})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n}\n\n\nupdatePatientAllergiesHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientAllergiesFormData:  \", event.target.formGridAllergiesTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let allergiesTitle = event.target.formGridAllergiesTitle.value;\n  let allergiesType = undefined;\n  if (event.target.formGridAllergiesTypeSelect === \"select\") {\n    allergiesType = event.target.formGridAllergiesType.value;\n  } else {\n    allergiesType = event.target.formGridAllergiesTypeSelect.value;\n  }\n  let allergiesDescription = event.target.formGridAllergiesDescription.value;\n  // let allergiesAttachmentName = event.target.formGridAllergiesAttachmentName.value;\n  let allergiesAttachmentFormat = event.target.formGridAllergiesAttachmentFormat.value;\n  let allergiesAttachmentPath = event.target.formGridAllergiesAttachmentPath.value;\n  let file = AuthContext._currentValue.file;\n\n  console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n  const config = {\n    bucketName: 'ent-emr-bucket',\n    dirName: allergiesAttachmentPath,\n    region: 'us-east-2',\n    accessKeyId: \"AKIARFTS6Q6DALQKT4QR\",\n    secretAccessKey: \"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\",\n  }\n  const ReactS3Client = new S3(config);\n  const newFileName = file.name;\n  const allergiesAttachmentName = newFileName;\n\n  ReactS3Client\n      .uploadFile(file, newFileName)\n      .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n      .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n  const patientAllergies = { allergiesTitle, allergiesType, allergiesDescription, allergiesAttachmentName, allergiesAttachmentFormat, allergiesAttachmentPath };\n\n  console.log(`\n    adding patient allergies...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    allergiesTitle: ${allergiesTitle},\n    allergiesType: ${allergiesType},\n    allergiesDescription: ${allergiesDescription},\n    allergiesAttachmentName: ${allergiesAttachmentName},\n    allergiesAttachmentFormat: ${allergiesAttachmentFormat},\n    allergiesAttachmentPath: ${allergiesAttachmentPath},\n    `);\n    this.setState({userAlert: \"adding patient allergies...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientAllergies(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{allergiesTitle:\"${allergiesTitle}\",allergiesType:\"${allergiesType}\", allergiesDescription:\"${allergiesDescription}\",allergiesAttachmentName:\"${allergiesAttachmentName}\",allergiesAttachmentFormat:\"${allergiesAttachmentFormat}\",allergiesAttachmentPath:\"${allergiesAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientAllergies._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientAllergies);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientAllergies})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n\n}\n\n\nupdatePatientMedicationHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientMedicationFormData:  \", event.target.formGridMedicationTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let medicationTitle = event.target.formGridMedicationTitle.value;\n  let medicationType = event.target.formGridMedicationType.value;\n  let medicationDescription = event.target.formGridMedicationDescription.value;\n  // let medicationAttachmentName = event.target.formGridMedicationAttachmentName.value;\n  let medicationAttachmentFormat = event.target.formGridMedicationAttachmentFormat.value;\n  let medicationAttachmentPath = event.target.formGridMedicationAttachmentPath.value;\n  let file = AuthContext._currentValue.file;\n\n  console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n  const config = {\n    bucketName: 'ent-emr-bucket',\n    dirName: medicationAttachmentPath,\n    region: 'us-east-2',\n    accessKeyId: \"AKIARFTS6Q6DALQKT4QR\",\n    secretAccessKey: \"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\",\n  }\n  const ReactS3Client = new S3(config);\n  const newFileName = file.name;\n  const medicationAttachmentName = newFileName;\n\n  ReactS3Client\n      .uploadFile(file, newFileName)\n      .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n      .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n  const patientMedication = { medicationTitle, medicationType, medicationDescription, medicationAttachmentName, medicationAttachmentFormat, medicationAttachmentPath };\n\n  console.log(`\n    adding patient medication...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    medicationTitle: ${medicationTitle},\n    medicationType: ${medicationType},\n    medicationDescription: ${medicationDescription},\n    medicationAttachmentName: ${medicationAttachmentName},\n    medicationAttachmentFormat: ${medicationAttachmentFormat},\n    medicationAttachmentPath: ${medicationAttachmentPath},\n    `);\n    this.setState({userAlert: \"adding patient medication...\"});\n\n    const requestBody = {\n      query:`\n      mutation {updatePatientMedication(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{medicationTitle:\"${medicationTitle}\",medicationType:\"${medicationType}\" medicationDescription:\"${medicationDescription}\",medicationAttachmentName:\"${medicationAttachmentName}\",medicationAttachmentFormat:\"${medicationAttachmentFormat}\",medicationAttachmentPath:\"${medicationAttachmentPath}\"})\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientMedication._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientMedication);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientMedication})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n}\n\n\nupdatePatientInvestigationHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientInvestigationFormData:  \", event.target.formGridInvestigationTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let investigationDate = event.target.formGridInvestigationDate.value;\n  let investigationTitle = event.target.formGridInvestigationTitle.value;\n  let investigationType = undefined;\n  if (event.target.formGridInvestigationTypeSelect === \"select\") {\n    investigationType = event.target.formGridInvestigationType.value;\n  } else {\n    investigationType = event.target.formGridInvestigationTypeSelect.value;\n  }\n  let investigationDescription = event.target.formGridInvestigationDescription.value;\n  // let investigationAttachmentName = event.target.formGridInvestigationAttachmentName.value;\n  let investigationAttachmentFormat = event.target.formGridInvestigationAttachmentFormat.value;\n  let investigationAttachmentPath = event.target.formGridInvestigationAttachmentPath.value;\n  let file = AuthContext._currentValue.file;\n\n  console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n  const config = {\n    bucketName: 'ent-emr-bucket',\n    dirName: investigationAttachmentPath,\n    region: 'us-east-2',\n    accessKeyId: \"AKIARFTS6Q6DALQKT4QR\",\n    secretAccessKey: \"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\",\n  }\n  const ReactS3Client = new S3(config);\n  const newFileName = file.name;\n  const investigationAttachmentName = newFileName;\n\n  ReactS3Client\n      .uploadFile(file, newFileName)\n      .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n      .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n  const patientInvestigation = { investigationDate, investigationTitle, investigationType, investigationDescription, investigationAttachmentName, investigationAttachmentFormat, investigationAttachmentPath };\n\n  console.log(`\n    adding patient investigation...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    investigationDate: ${investigationDate},\n    investigationTitle: ${investigationTitle},\n    investigationType: ${investigationType},\n    investigationDescription: ${investigationDescription},\n    investigationAttachmentName: ${investigationAttachmentName},\n    investigationAttachmentFormat: ${investigationAttachmentFormat},\n    investigationAttachmentPath: ${investigationAttachmentPath},\n    `);\n    this.setState({userAlert: \"adding patient investigation...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientInvestigation(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{investigationDate:\"${investigationDate}\",investigationTitle:\"${investigationTitle}\",investigationType:\"${investigationType}\",investigationDescription:\"${investigationDescription}\",investigationAttachmentName:\"${investigationAttachmentName}\",investigationAttachmentFormat:\"${investigationAttachmentFormat}\",investigationAttachmentPath:\"${investigationAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientInvestigation._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientInvestigation);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientInvestigation})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n}\n\n\nupdatePatientDiagnosisHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientDiagnosisFormData:  \", event.target.formGridDiagnosisTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let diagnosisDate = event.target.formGridDiagnosisDate.value;\n  let diagnosisTitle = event.target.formGridDiagnosisTitle.value;\n  let diagnosisType = event.target.formGridDiagnosisType.value;\n  let diagnosisDescription = event.target.formGridDiagnosisDescription.value;\n  // let diagnosisAttachmentName = event.target.formGridDiagnosisAttachmentName.value;\n  let diagnosisAttachmentFormat = event.target.formGridDiagnosisAttachmentFormat.value;\n  let diagnosisAttachmentPath = event.target.formGridDiagnosisAttachmentPath.value;\n  let file = AuthContext._currentValue.file;\n\n  console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n  const config = {\n    bucketName: 'ent-emr-bucket',\n    dirName: diagnosisAttachmentPath,\n    region: 'us-east-2',\n    accessKeyId: \"AKIARFTS6Q6DALQKT4QR\",\n    secretAccessKey: \"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\",\n  }\n  const ReactS3Client = new S3(config);\n  const newFileName = file.name;\n  const diagnosisAttachmentName = newFileName;\n\n  ReactS3Client\n      .uploadFile(file, newFileName)\n      .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n      .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n  const patientDiagnosis = { diagnosisDate, diagnosisTitle, diagnosisType, diagnosisDescription, diagnosisAttachmentName, diagnosisAttachmentFormat, diagnosisAttachmentPath };\n\n  console.log(`\n    adding patient diagnosis...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    diagnosisDate: ${diagnosisDate},\n    diagnosisTitle: ${diagnosisTitle},\n    diagnosisType: ${diagnosisType},\n    diagnosisDescription: ${diagnosisDescription},\n    diagnosisAttachmentName: ${diagnosisAttachmentName},\n    diagnosisAttachmentFormat: ${diagnosisAttachmentFormat},\n    diagnosisAttachmentPath: ${diagnosisAttachmentPath},\n    `);\n    this.setState({userAlert: \"adding patient diagnosis...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientDiagnosis(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{diagnosisDate:\"${diagnosisDate}\",diagnosisTitle:\"${diagnosisTitle}\",diagnosisType:\"${diagnosisType}\",diagnosisDescription:\"${diagnosisDescription}\",diagnosisAttachmentName:\"${diagnosisAttachmentName}\",diagnosisAttachmentFormat:\"${diagnosisAttachmentFormat}\",diagnosisAttachmentPath:\"${diagnosisAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientDiagnosis._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientDiagnosis);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientDiagnosis})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n}\n\n\nupdatePatientTreatmentHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientTreatmentFormData:  \", event.target.formGridTreatmentTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let treatmentDate = event.target.formGridTreatmentDate.value;\n  let treatmentTitle = event.target.formGridTreatmentTitle.value;\n  let treatmentDescription = event.target.formGridTreatmentDescription.value;\n  let treatmentDose = event.target.formGridTreatmentDose.value;\n  let treatmentFrequency = event.target.formGridTreatmentFrequency.value;\n  let treatmentType = undefined;\n  if (event.target.formGridInvestigationTypeSelect === \"select\") {\n    treatmentType = event.target.formGridTreatmentType.value;\n  } else {\n    treatmentType = event.target.formGridTreatmentTypeSelect.value;\n  }\n  // let treatmentAttachmentName = event.target.formGridTreatmentAttachmentName.value;\n  let treatmentAttachmentFormat = event.target.formGridTreatmentAttachmentFormat.value;\n  let treatmentAttachmentPath = event.target.formGridTreatmentAttachmentPath.value;\n  let file = AuthContext._currentValue.file;\n\n  console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n  const config = {\n    bucketName: 'ent-emr-bucket',\n    dirName: treatmentAttachmentPath,\n    region: 'us-east-2',\n    accessKeyId: \"AKIARFTS6Q6DALQKT4QR\",\n    secretAccessKey: \"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\",\n  }\n  const ReactS3Client = new S3(config);\n  const newFileName = file.name;\n  const treatmentAttachmentName = newFileName;\n\n  ReactS3Client\n      .uploadFile(file, newFileName)\n      .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n      .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n\n  const patientTreatment = { treatmentDate, treatmentTitle, treatmentDescription, treatmentDose, treatmentFrequency, treatmentType, treatmentAttachmentName, treatmentAttachmentFormat, treatmentAttachmentPath };\n\n  console.log(`\n    adding patient treatment...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    treatmentDate: ${treatmentDate},\n    treatmentTitle: ${treatmentTitle},\n    treatmentDescription: ${treatmentDescription},\n    treatmentDose: ${treatmentDose},\n    treatmentFrequency: ${treatmentFrequency},\n    treatmentType: ${treatmentType},\n    treatmentAttachmentName: ${treatmentAttachmentName},\n    treatmentAttachmentFormat: ${treatmentAttachmentFormat},\n    treatmentAttachmentPath: ${treatmentAttachmentPath},\n    `);\n    this.setState({userAlert: \"adding patient treatment...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientTreatment(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{treatmentDate:\"${treatmentDate}\",treatmentTitle:\"${treatmentTitle}\",treatmentType:\"${treatmentType}\",treatmentDescription:\"${treatmentDescription}\",treatmentDose:\"${treatmentDose}\",treatmentFrequency:\"${treatmentFrequency}\",treatmentAttachmentName:\"${treatmentAttachmentName}\",treatmentAttachmentFormat:\"${treatmentAttachmentFormat}\",treatmentAttachmentPath:\"${treatmentAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `}\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientTreatment._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientTreatment);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientTreatment})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n}\n\n\n\nupdatePatientBillingHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientBillingFormData:  \", event.target.formGridBillingTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let billingDate = event.target.formGridBillingDate.value;\n  let billingTitle = event.target.formGridBillingTitle.value;\n  let billingType = event.target.formGridBillingType.value;\n  let billingDescription = event.target.formGridBillingDescription.value;\n  let billingAmount = event.target.formGridBillingAmount.value;\n  let billingPaid = event.target.formGridBillingPaid.value;\n  let billingNotes = event.target.formGridBillingNotes.value;\n  // let billingAttachmentName = event.target.formGridBillingAttachmentName.value;\n  let billingAttachmentFormat = event.target.formGridBillingAttachmentFormat.value;\n  let billingAttachmentPath = event.target.formGridBillingAttachmentPath.value;\n  let file = AuthContext._currentValue.file;\n\n  console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n  const config = {\n    bucketName: 'ent-emr-bucket',\n    dirName: billingAttachmentPath,\n    region: 'us-east-2',\n    accessKeyId: \"AKIARFTS6Q6DALQKT4QR\",\n    secretAccessKey: \"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\",\n  }\n  const ReactS3Client = new S3(config);\n  const newFileName = file.name;\n  const billingAttachmentName = newFileName;\n\n  ReactS3Client\n      .uploadFile(file, newFileName)\n      .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n      .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n  const patientBilling = { billingDate, billingTitle, billingType, billingDescription, billingAmount, billingPaid, billingNotes, billingAttachmentName, billingAttachmentFormat, billingAttachmentPath };\n\n  console.log(`\n    adding patient billing...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    billingDate: ${billingDate},\n    billingTitle: ${billingTitle},\n    billingType: ${billingType},\n    billingDescription: ${billingDescription},\n    billingAmount: ${billingAmount},\n    billingPaid: ${billingPaid},\n    billingNotes: ${billingNotes},\n    billingAttachmentName: ${billingAttachmentName},\n    billingAttachmentFormat: ${billingAttachmentFormat},\n    billingAttachmentPath: ${billingAttachmentPath},\n    `);\n    this.setState({userAlert: \"adding patient billing...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientBilling(userId:\\\"${userId}\\\", patientId:\\\"${selectedPatientId}\\\",patientInput:{billingDate:\\\"${billingDate}\\\",billingTitle:\\\"${billingTitle}\\\",billingType:\\\"${billingType}\\\",billingDescription:\\\"${billingDescription}\\\",billingAmount:${billingAmount},billingPaid:${billingPaid},billingNotes:\\\"${billingNotes}\\\",billingAttachmentName:\\\"${billingAttachmentName}\\\",billingAttachmentFormat:\\\"${billingAttachmentFormat}\\\",billingAttachmentPath:\\\"${billingAttachmentPath}\\\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientBilling._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientBilling);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientBilling})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n\n}\n\nupdatePatientAttachmentHandler = (event) => {\n\n    const token = this.context.token;\n    const userId = this.context.userId;\n    let selectedPatientId = this.context.selectedPatient._id;\n\n    // if(this.context.user.role !== 'admin') {\n    //   console.log(\"No edit permission!!\");\n    //   return;\n    // }\n\n    console.log(`\n        UpdatePatientAttachmentFormData:\n        ${event.target.formGridPatientAttachmentName.value}\n      `);\n\n    this.setState({ updating: false , patientUpdateField: null });\n\n    // let attachmentName = event.target.formGridPatientAttachmentName.value;\n    let attachmentFormat = event.target.formGridPatientAttachmentFormat.value;\n    let attachmentPath = event.target.formGridPatientAttachmentPath.value;\n    let file = AuthContext._currentValue.file;\n\n    console.log(`\n      uploading to s3...\n      file.name: ${file.name},\n      AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n      `);\n    const config = {\n      bucketName: 'ent-emr-bucket',\n      dirName: attachmentPath,\n      region: 'us-east-2',\n      accessKeyId: \"AKIARFTS6Q6DALQKT4QR\",\n      secretAccessKey: \"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\",\n    }\n    const ReactS3Client = new S3(config);\n    const newFileName = file.name;\n    const attachmentName = newFileName;\n\n    ReactS3Client\n        .uploadFile(file, newFileName)\n        .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n        .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n    if (\n      attachmentName.trim().length === 0 ||\n      attachmentFormat.trim().length === 0 ||\n      attachmentPath.trim().length === 0\n    ) {\n      console.log(\"blank fields detected!!!...Please try again...\");\n      this.setState({userAlert: \"blank fields detected!!!...Please try again...\"});\n      return;\n    }\n\n    this.setState({userAlert: \"adding patient attachment\"});\n\n    const requestBody = {\n                    query:`\n                    mutation {updatePatientAttachment(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{attachmentName:\"${attachmentName}\",attachmentFormat:\"${attachmentFormat}\",attachmentPath:\"${attachmentFormat}\"})\n                    {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n            `}\n\n    fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            console.log(\"response data... \" + JSON.stringify(resData.data));\n\n            const updatedPatientId = resData.data.updatePatientAttachment._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.updatePatientAttachment);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientAttachment})\n            this.fetchPatients();\n          })\n          .catch(err => {\n            console.log(err);\n            this.setState({userAlert: err});\n          });\n\n}\n\nupdatePatientNoteHandler = (event) => {\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(`\n      UpdatePatientNoteFormData:\n      ${event.target.formGridNote.value}\n    `);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n    let note = event.target.formGridNote.value;\n\n    if (\n      note.trim().length === 0\n    ) {\n      console.log(\"Can't Submit a blank form!!!...Please try again...\");\n      this.setState({userAlert: \"Can't Submit a blank form!!!...Please try again...\"});\n      return;\n    }\n\n    this.setState({userAlert: \"adding patient note\"});\n\n    const requestBody = {\n              query:`\n              mutation {updatePatientNotes(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{notes:\"${note}\"})\n              {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n            `}\n\n    fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            console.log(\"response data... \" + JSON.stringify(resData.data));\n\n            const updatedPatientId = resData.data.updatePatientNotes._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.updatePatientNotes);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientNotes})\n            this.fetchPatients();\n          })\n          .catch(err => {\n            console.log(err);\n            this.setState({userAlert: err});\n          });\n\n}\nupdatePatientTagHandler = (event) => {\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(`\n      UpdatePatientTagFormData:\n      ${event.target.formGridTag.value}\n    `);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n    let tag = event.target.formGridTag.value;\n\n    if (\n      tag.trim().length === 0\n    ) {\n      console.log(\"Can't Submit a blank form!!!...Please try again...\");\n      this.setState({userAlert: \"Can't Submit a blank form!!!...Please try again...\"});\n      return;\n    }\n\n    const requestBody = {\n                    query:`\n                    mutation {updatePatientTags(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{tag:\"${tag}\"})\n                    {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n            `}\n    this.setState({userAlert: \"adding patient tag\"});\n\n\n    fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            console.log(\"response data... \" + JSON.stringify(resData.data));\n\n            const updatedPatientId = resData.data.updatePatientTags._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.updatePatientTags);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientTags})\n            this.fetchPatients();\n          })\n          .catch(err => {\n            console.log(err);\n            this.setState({userAlert: err});\n          });\n\n\n}\n\n\nmodalConfirmSearchHandler = (event) => {\n  console.log(\"SearchPatientForm:  \");\n\n\n  let userId = this.context.userId;\n\n    console.log(\"SearchPatientFormData:  \", event.target.formBasicField.value);\n    this.setState({ searching: false });\n\n    let field = null;\n    let query = event.target.formBasicQuery.value;\n    if (event.target.formBasicFieldSelect.value === \"select\") {\n      field = event.target.formBasicField.value;\n    } else {\n      field = event.target.formBasicFieldSelect.value;\n    }\n\n    this.setState({\n      patientSearchField: field,\n      patientSearchQuery: query,\n    })\n\n    if (\n      field.trim().length === 0 ||\n      query.trim().length === 0\n    ) {\n      console.log(\"blank fields detected!!!...Please try again...\");\n      return;\n    }\n\n\n\n    const search = { field, query }\n    console.log(\"Searching for Patient:  \", JSON.stringify(search));\n    this.setState({userAlert: \"Searching for Patient:  \"});\n\n    const requestBody = {\n      query: `\n        query {\n          getPatientField(userId: \"${userId}\", field: \"${field}\", query: \"${query}\" )\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n    const token = this.context.token;\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n        const responseAlert = JSON.stringify(resData.data).slice(2,15);\n        this.setState({userAlert: responseAlert});\n\n        const searchPatients = resData.data.getPatientField;\n\n        this.setState({ searchPatients: searchPatients})\n        console.log(\"state.searchPatients:  \", this.state.searchPatients);\n        // this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n}\n\nmodalConfirmSearchIdHandler = (event) => {\n  console.log(\"SearchPatientIdFormData\");\n\n  let userId = this.context.userId;\n  this.setState({ searching: false });\n\n  const patientId = event.target.formBasicId.value;\n\n  const requestBody = {\n    query: `\n      query {getPatientId(userId:\\\"${userId}\\\",patientId:\\\"${patientId}\\\")\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{_id,title,time,location},consultant{date,reference{_id,name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `}\n\n  const token = this.context.token;\n\n  fetch('http://localhost:10000/graphql', {\n    method: 'POST',\n    body: JSON.stringify(requestBody),\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + token\n    }\n  })\n    .then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n      return res.json();\n    })\n    .then(resData => {\n      console.log(\"response data... \" + JSON.stringify(resData));\n      const responseAlert = JSON.stringify(resData.data).slice(2,25);\n      this.setState({userAlert: responseAlert});\n\n      const searchPatients = resData.data.getPatientId;\n\n      this.setState({ searchPatients: [searchPatients]})\n      console.log(\"state.searchPatients:  \", this.state.searchPatients);\n      // this.fetchUsers();\n    })\n    .catch(err => {\n      console.log(err);\n      this.setState({userAlert: err});\n    });\n}\n\nmodalConfirmSearchVisitHandler = (event) => {\n  console.log(\"SearchPatientVisitFormData\");\n\n  let userId = this.context.userId;\n  this.setState({ searching: false });\n\n  const requestBody = {\n    query: `\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{_id,title,time,location,date},consultant{date,reference{_id,name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `}\n\n  const token = this.context.token;\n\n  fetch('http://localhost:10000/graphql', {\n    method: 'POST',\n    body: JSON.stringify(requestBody),\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + token\n    }\n  })\n    .then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n      return res.json();\n    })\n    .then(resData => {\n      console.log(\"response data... \" + JSON.stringify(resData));\n\n      const searchPatients = resData.data.getPatientId;\n\n      this.setState({ searchPatients: searchPatients})\n      console.log(\"state.searchPatients:  \", this.state.searchPatients);\n      // this.fetchUsers();\n    })\n    .catch(err => {\n      console.log(err);\n      this.setState({userAlert: err});\n    });\n\n}\n\nmodalConfirmSearchNameHandler = (event) => {\n  console.log(\"SearchPatientNameFormData:\", event.target.formBasicName.value);\n\n  let userId = this.context.userId;\n  this.setState({ searching: false });\n\n  let patients = this.state.patients;\n  const regex = new RegExp(event.target.formBasicName.value,\"i\");\n  console.log(`\n    regex: ${regex},\n    `);\n    let result = patients.filter(patient => patient.name.match(regex))\n    console.log(`\n      result: ${JSON.stringify(result)}\n      `);\n\n      this.setState({ searchPatients: result})\n\n}\n\n  getPatientVisit = (event) => {\n\n    const selectedPatient = this.state.selectedPatient;\n    event.preventDefault();\n    console.log(`\n        getUserVisit function:\n        selectedPatient.consultant: ${JSON.stringify(selectedPatient.consultant)},\n        selectedPatient.complaints: ${JSON.stringify(selectedPatient.complaints)},\n        visitDate: ${new Date(event.target.formBasicVisitDate.value)},\n        complaintDate: ${new Date(1580515200*1000)},\n      `);\n\n    let visitDate = new Date(event.target.formBasicVisitDate.value).toISOString().substring(0, 10);\n    let visitSurveys = selectedPatient.surveys.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    let visitConsultants = selectedPatient.consultant.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    let visitComplaints = selectedPatient.complaints.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    // let visitSurveys = selectedPatient.surveys.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString() === visitDate);\n    let visitVitals = selectedPatient.vitals.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    let visitExaminations = selectedPatient.examination.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    let visitHistory = selectedPatient.history.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    let visitInvestigations = selectedPatient.investigation.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    let visitDiagnosis = selectedPatient.diagnosis.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    let visitTreatments = selectedPatient.treatment.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    let visitBilling = selectedPatient.billing.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n\n      const visit = {\n        date: visitDate,\n        patientName: this.context.selectedPatient.name,\n        consultant: visitConsultants,\n        complaint: visitComplaints,\n        examination: visitExaminations,\n        survey: visitSurveys,\n        vitals: visitVitals,\n        history: visitHistory,\n        investigation: visitInvestigations,\n        diagnosis: visitDiagnosis,\n        treatment: visitTreatments,\n        billing: visitBilling,\n      };\n\n      console.log(`\n        visit: ${JSON.stringify(visit)},\n        `);\n        this.context.visit = visit;\n        this.setState({visit: visit});\n\n  }\n\n\n  modalCancelHandler = () => {\n    this.setState({ creating: false, updating: false, searching: false, selectedPatient: null });\n  };\n\n\n  fetchPatients() {\n    console.log(\"fetch patients function:  \");\n    const userId = this.context.userId;\n    const token = this.context.token;\n\n    this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n          query {patients(userId:\"${userId}\")\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{_id,title,time,location,date},consultant{date,reference{_id,name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n        `\n    };\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"resData\", resData);\n        const patients = resData.data.patients;\n        console.log(patients);\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({userAlert: responseAlert});\n\n        this.context.patients = this.state.patients;\n        if (this.isActive) {\n          this.setState({ patients: patients, isLoading: false });\n        }\n\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n        if (this.isActive) {\n          this.setState({ isLoading: false });\n        }\n      });\n  }\n\n  fetchPatientsAsc = () => {\n    console.log(\"fetch patients function:  \");\n    const userId = this.context.userId;\n    const token = this.context.token;\n\n    // this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n          query {patientsNameAsc(userId:\"${userId}\")\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{_id,title,time,location,date},consultant{date,reference{_id,name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n        `\n    };\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"resData\", resData);\n        const patients = resData.data.patientsNameAsc;\n        console.log(patients);\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({userAlert: responseAlert});\n\n        this.context.patients = patients;\n        this.setState({ patients: patients});\n        // if (this.isActive) {\n        //   this.setState({ patients: patients, isLoading: false });\n        // }\n\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n        // if (this.isActive) {\n        //   this.setState({ isLoading: false });\n        // }\n      });\n  }\n\n  fetchPatientsDesc = () => {\n    console.log(\"fetch patients function:  \");\n    const userId = this.context.userId;\n    const token = this.context.token;\n\n    // this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n          query {patientsNameDesc(userId:\"${userId}\")\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{_id,title,time,location,date},consultant{date,reference{_id,name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n        `\n    };\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"resData\", resData);\n        const patients = resData.data.patientsNameDesc;\n        console.log(patients);\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({userAlert: responseAlert});\n\n        this.context.patients = patients\n        // if (this.isActive) {\n        //   this.setState({ patients: patients, isLoading: false });\n        // }\n        this.setState({ patients: patients});\n\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n        // if (this.isActive) {\n        //   this.setState({ isLoading: false });\n        // }\n      });\n  }\n\n\n  modalDeleteHandler = () => {\n    console.log(\"deleting patient...selectedPatient:  \", this.context.selectedPatient);\n\n    const selectedPatientId = this.context.selectedPatient._id;\n    const userId = this.context.selectedUser._id;\n\n    if(this.context.user.role !== 'admin') {\n      console.log(\"Not the Admin! No edit permission!!\");\n    }\n\n    this.setState({deleting: true});\n\n\n    const requestBody = {\n      query: `\n          mutation {deletePatient(userId:\"${userId}\",patientId:\"${selectedPatientId}\")\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n        `\n    };\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        let deletedPatient = resData.data.deletePatient;\n        console.log(deletedPatient);\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({userAlert: responseAlert});\n\n        let deletedPatientId = deletedPatient._id;\n        deletedPatient = this.state.patients.find(e => e._id === deletedPatientId);\n        const deletedPatientPos = this.state.patients.indexOf(deletedPatient);\n        const slicedArray = this.state.patients.splice(deletedPatientPos, 1);\n        console.log(\"deletedPatient:  \", JSON.stringify(deletedPatient),\"  deletedUserPos:  \", deletedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.setState({ deleting: false });\n\n        this.fetchPatients();\n\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n        if (this.isActive) {\n          this.setState({ deleting: false });\n        }\n      });\n  }\n\n\n  deletePatientInsuranceItem = (props) => {\n\n    let token = this.context.token;\n    let userId = this.context.userId;\n    let patientId = this.state.selectedPatient._id;\n\n    console.log(`\n      delete patient insurance item:\n      props: ${JSON.stringify(props)},\n      token: ${token},\n      userId: ${userId},\n      patientId: ${patientId},\n      `);\n\n      const requestBody = {\n        query: `\n         mutation {deletePatientInsurance (userId:\\\"${userId}\\\", patientId:\\\"${patientId}\\\",insuranceCompany:\\\"${props.company}\\\",insuranceNumber:\"${props.number}\")\n         {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `};\n\n          fetch('http://localhost:10000/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n              'Content-Type': 'application/json',\n              Authorization: 'Bearer ' + token\n            }\n          })\n            .then(res => {\n              if (res.status !== 200 && res.status !== 201) {\n                throw new Error('Failed!');\n              }\n              return res.json();\n            })\n            .then(resData => {\n              let deletedPatient = resData.data.deletePatientInsurance;\n              console.log(deletedPatient);\n\n              const updatedPatientId = resData.data.deletePatientInsurance._id;\n              const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n              const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n              const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n              console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n              this.state.patients.push(resData.data.deletePatientInsurance);\n              this.context.patients = this.state.patients;\n              const responseAlert = JSON.stringify(resData.data).slice(2,25);\n              this.setState({ userAlert: responseAlert})\n              // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientInsurance})\n              this.fetchPatients();\n\n            })\n            .catch(err => {\n              console.log(err);\n            });\n\n  }\n\n  deletePatientConsultantItem = (props) => {\n\n    let token = this.context.token;\n    let userId = this.context.userId;\n    let patientId = this.state.selectedPatient._id;\n    let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n    console.log(`\n      delete patient consultant item:\n      props: ${JSON.stringify(props)},\n      token: ${token},\n      userId: ${userId},\n      patientId: ${patientId},\n      consultant date: ${date},\n      `);\n\n      const requestBody = {\n        query: `\n         mutation {deletePatientConsultant (userId:\\\"${userId}\\\", patientId:\\\"${patientId}\\\",consultantId:\\\"${props.reference.id}\\\",consultantDate:\\\"${date}\\\")\n         {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `};\n\n          fetch('http://localhost:10000/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n              'Content-Type': 'application/json',\n              Authorization: 'Bearer ' + token\n            }\n          })\n            .then(res => {\n              if (res.status !== 200 && res.status !== 201) {\n                throw new Error('Failed!');\n              }\n              return res.json();\n            })\n            .then(resData => {\n              let deletedPatient = resData.data.deletePatientConsultant;\n              console.log(deletedPatient);\n\n              const updatedPatientId = resData.data.deletePatientConsultant._id;\n              const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n              const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n              const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n              console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n              this.state.patients.push(resData.data.deletePatientConsultant);\n              this.context.patients = this.state.patients;\n              const responseAlert = JSON.stringify(resData.data).slice(2,25);\n              this.setState({ userAlert: responseAlert})\n              // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientConsultant})\n              this.fetchPatients();\n\n            })\n            .catch(err => {\n              console.log(err);\n            });\n}\n\ndeletePatientNextOfKinItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n\n  console.log(`\n    delete patient nextOfKin item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientNextOfKin (userId:\\\"${userId}\\\", patientId:\\\"${patientId}\\\",nextOfKinName:\\\"${props.name}\\\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientNextOfKin;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientNextOfKin._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientNextOfKin);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientNextOfKin})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientComplaintItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n  let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n  console.log(`\n    delete patient Complaint item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    complaint date: ${date},\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientComplaint (userId:\\\"${userId}\\\", patientId:\\\"${patientId}\\\",complaintTitle:\\\"${props.title}\\\",complaintDate:\\\"${date}\\\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientComplaint;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientComplaint._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientComplaint);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientComplaint})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientSurveyItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n  let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n  console.log(`\n    delete patient Survey item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    survey date: ${date}\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientSurvey (userId:\\\"${userId}\\\", patientId:\\\"${patientId}\\\",surveyTitle:\\\"${props.title}\\\",surveyDate:\\\"${date}\\\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientSurvey;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientSurvey._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientSurvey);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientSurvey})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientVitalsItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n  let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n  console.log(`\n    delete patient Vitals item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    vitals date: ${date},\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientVitals (userId:\\\"${userId}\\\", patientId:\\\"${patientId}\\\",vitalsDate:\\\"${date}\\\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientVitals;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientVitals._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientVitals);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientVitals})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientExaminationItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n  let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n  console.log(`\n    delete patient Examination item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    examination date: ${date},\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientExamination (userId:\\\"${userId}\\\", patientId:\\\"${patientId}\\\",examinationType:\\\"${props.type}\\\",examinationDate:\\\"${date}\\\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientExamination;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientExamination._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientExamination);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientExamination})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientHistoryItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n  let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n  console.log(`\n    delete patient History item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    history date: ${date},\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientHistory (userId:\\\"${userId}\\\", patientId:\\\"${patientId}\\\",historyTitle:\\\"${props.title}\\\",historyDate:\\\"${date}\\\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientHistory;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientHistory._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientHistory);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientHistory})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientAllergiesItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n\n  console.log(`\n    delete patient Allergies item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientAllergies (userId:\\\"${userId}\\\", patientId:\\\"${patientId}\\\",allergiesTitle:\\\"${props.title}\\\",allergiesType:\\\"${props.type}\\\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientAllergies;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientAllergies._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientAllergies);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientAllergies})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientMedicationItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n\n  console.log(`\n    delete patient Medication item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientMedication (userId:\\\"${userId}\\\", patientId:\\\"${patientId}\\\",medicationTitle:\\\"${props.title}\\\",medicationType:\\\"${props.type}\\\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientMedication;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientMedication._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientMedication);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientMedication})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientInvestigationItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n  let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n  console.log(`\n    delete patient Investigation item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    investigation date: ${date},\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientInvestigation (userId:\\\"${userId}\\\", patientId:\\\"${patientId}\\\",investigationDate:\\\"${date}\\\",investigationTitle:\\\"${props.title}\\\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientInvestigation;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientInvestigation._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientInvestigation);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientInvestigation})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientDiagnosisItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n  let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n  console.log(`\n    delete patient Diagnosis item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    diagnosis date: ${date}\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientDiagnosis (userId:\\\"${userId}\\\",patientId:\\\"${patientId}\\\",diagnosisDate:\\\"${date}\\\",diagnosisTitle:\\\"${props.title}\\\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientDiagnosis;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientDiagnosis._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientDiagnosis);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientDiagnosis})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientTreatmentItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n  let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n  console.log(`\n    delete patient Treatment item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    treatment date: ${date},\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientTreatment (userId:\\\"${userId}\\\", patientId:\\\"${patientId}\\\",treatmentDate:\\\"${date}\\\",treatmentTitle:\\\"${props.title}\\\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientTreatment;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientTreatment._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientTreatment);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientTreatment})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientBillingItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n  let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n  console.log(`\n    delete patient Billing item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    billing date: ${date},\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientBilling (userId:\\\"${userId}\\\", patientId:\\\"${patientId}\\\",billingDate:\\\"${date}\\\",billingTitle:\\\"${props.title}\\\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientBilling;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientBilling._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientBilling);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientBilling})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientAttachmentItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n\n  console.log(`\n    delete patient Attachment item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientAttachment (userId:\\\"${userId}\\\", patientId:\\\"${patientId}\\\",attachmentName:\\\"${props.name}\\\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientAttachment;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientAttachment._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientAttachment);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientAttachment})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientNoteItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n\n  console.log(`\n    delete patient Note item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    `);\n\n    const requestBody = {\n      query: `\n\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientNextOfKin;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientNextOfKin._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientNextOfKin);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientNextOfKin})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientTagItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n\n  console.log(`\n    delete patient Tag item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    `);\n\n    const requestBody = {\n      query: `\n\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientNextOfKin;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientNextOfKin._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientNextOfKin);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientNextOfKin})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\n\n  updatePatientSpecial (event) {\n\n    console.log(\"special field to update:  \", event.target.value);\n    const field = event.target.value;\n    this.setState({ patientUpdateField: field});\n\n  }\n\n\n  showDetailHandler = patientId => {\n\n    this.setState(prevState => {\n      const selectedPatient = prevState.patients.find(e => e._id === patientId);\n      this.context.selectedPatient = selectedPatient;\n      this.context.selectedPatientId = selectedPatient._id;\n      console.log(\"selectedPatient:  \", selectedPatient);\n      return { selectedPatient: selectedPatient };\n    });\n  };\n\n\n  componentWillUnmount() {\n    this.isActive = false;\n  }\n\n  render() {\n    return (\n\n    <React.Fragment>\n\n    <Accordion>\n\n    <Row>\n    <Col md={3} className=\"MasterCol1\">\n\n    <AlertBox\n          authUserId={this.context.userId}\n          alert={this.state.userAlert}\n        />\n      <SidebarPage/>\n    </Col>\n\n    <Col md={9} className=\"MasterCol2\">\n    <Container className=\"containerCombinedDetail\">\n    <Tabs defaultActiveKey=\"\" id=\"uncontrolled-tab-example\">\n    <Tab eventKey=\"\" title=\"Edit:\" disabled>\n    </Tab>\n    <Tab eventKey=\"patientDetail\" title=\"Details\">\n    {this.state.selectedPatient === null && (\n      <Button variant=\"outline-warning\" size=\"lg\">\n        Select a Patient from the Master List below\n      </Button>\n    )}\n    {this.state.isLoading === false &&\n      this.state.selectedPatient !== null\n      &&\n      (<PatientDetail\n        authUserId={this.context.userId}\n        token={this.context.token}\n        patient={this.state.selectedPatient}\n        onEdit={this.startUpdatePatientHandler}\n        canDelete={this.state.canDelete}\n        onDelete={this.modalDeleteHandler}\n        onGetVisit={this.getPatientVisit}\n        visit={this.context.visit}\n        fetchUsers={this.fetchUsers}\n        consultantDelete={this.deletePatientConsultantItem}\n        insuranceDelete={this.deletePatientInsuranceItem}\n        nextOfKinDelete={this.deletePatientNextOfKinItem}\n        complaintDelete={this.deletePatientComplaintItem}\n        surveyDelete={this.deletePatientSurveyItem}\n        vitalsDelete={this.deletePatientVitalsItem}\n        examinationDelete={this.deletePatientExaminationItem}\n        historyDelete={this.deletePatientHistoryItem}\n        allergiesDelete={this.deletePatientAllergiesItem}\n        medicationDelete={this.deletePatientMedicationItem}\n        investigationDelete={this.deletePatientInvestigationItem}\n        diagnosisDelete={this.deletePatientDiagnosisItem}\n        treatmentDelete={this.deletePatientTreatmentItem}\n        billingDelete={this.deletePatientBillingItem}\n        attachmentDelete={this.deletePatientAttachmentItem}\n        noteDelete={this.deletePatientNoteItem}\n        tagDelete={this.deletePatientTagItem}\n        />\n    )}\n    </Tab>\n\n    <Tab eventKey=\"patientCreate\" title=\"Create\">\n    <Button variant=\"outline-primary\" onClick={this.startCreatePatientHandler} >Create</Button>\n    {\n      this.state.creating && (\n        <CreatePatientForm\n        canCancel\n          canConfirm\n          onCancel={this.modalCancelHandler}\n          onConfirm={this.modalConfirmHandler}\n          confirmText=\"Confirm\"\n        />\n    )}\n    </Tab>\n\n    <Tab eventKey=\"patientEditDemographics\" title=\"Demographics\">\n    {this.state.selectedPatient === null && (\n      <Button variant=\"outline-warning\" size=\"lg\">\n        Select a Patient from the Master List below\n      </Button>\n    )}\n    {this.state.selectedPatient !== null && (\n      <Button variant=\"outline-primary\" onClick={this.startUpdatePatientHandler}>Edit Demographics</Button>\n    )}\n    {this.state.updating &&\n      this.state.selectedPatient !== null\n      && (\n      <UpdatePatientForm\n      authUserId={this.context.userId}\n      canCancel\n        canConfirm\n        onCancel={this.modalCancelHandler}\n        onConfirm={this.modalConfirmUpdateHandler}\n        confirmText=\"Confirm\"\n        patient={this.state.selectedPatient}\n      />\n    )}\n    </Tab>\n\n    <Tab eventKey=\"patientEditField\" title=\"Single Field\">\n    {this.state.selectedPatient === null && (\n      <Button variant=\"outline-warning\" size=\"lg\">\n        Select a Patient from the Master List below\n      </Button>\n    )}\n    {this.state.selectedPatient !== null && (\n      <Button variant=\"outline-primary\" onClick={this.startUpdatePatientHandler}>Edit Field</Button>\n    )}\n    {this.state.updating &&\n      this.state.selectedPatient !== null\n      && (\n        <UpdatePatientFieldForm\n          authUserId={this.context.userId}\n          canCancel\n          canConfirm\n          onCancel={this.modalCancelHandler}\n          onConfirm={this.modalConfirmUpdateFieldHandler}\n          confirmText=\"Confirm\"\n          patient={this.state.selectedPatient}\n        />\n    )}\n    </Tab>\n\n    <Tab eventKey=\"patientEditConsultant\" title=\"Consultant\">\n    {this.state.selectedPatient === null && (\n      <Button variant=\"outline-warning\" size=\"lg\">\n        Select a Patient from the Master List below\n      </Button>\n    )}\n    {this.state.selectedPatient !== null && (\n      <Button variant=\"outline-primary\" value='consultant' onClick={this.updatePatientSpecial.bind(this)}>Add Consultant</Button>\n    )}\n    {this.state.patientUpdateField === 'consultant' &&\n    this.state.selectedPatient !== null\n    && (\n      <UpdatePatientConsultantForm\n      authUserId={this.context.userId}\n      canCancel\n        canConfirm\n        onCancel={this.modalCancelHandler}\n        onConfirm={this.updatePatientConsultantHandler}\n        confirmText=\"Confirm\"\n        consultant={this.context.selectedUser}\n      />\n    )}\n    {this.state.patientUpdateField === 'consultant' &&\n    this.state.selectedPatient !== null &&\n    (\n      <Row>\n      <p>Add Consultant: {this.context.selectedUser.name}</p>\n      <p> To Paitient: {this.state.selectedPatient.name} ??</p>\n      <hr/>\n      </Row>\n    )}\n    {this.state.patientUpdateField === 'consultant' &&\n    this.state.selectedPatient !== null &&\n    (\n      <Row>\n      <Button variant=\"outline-warning\" size=\"lg\">\n        Select a doctor from the Staff page\n      </Button>\n      </Row>\n    )}\n    </Tab>\n    <Tab eventKey=\"patientEditInsurance\" title=\"Insurance\">\n    {this.state.selectedPatient === null && (\n      <Button variant=\"outline-warning\" size=\"lg\">\n        Select a Patient from the Master List below\n      </Button>\n    )}\n    {this.state.selectedPatient !== null && (\n      <Button variant=\"outline-primary\" value='insurance' onClick={this.updatePatientSpecial.bind(this)}>Add Insurance</Button>\n    )}\n    {this.state.patientUpdateField === 'insurance' &&\n    this.state.selectedPatient !== null\n    && (\n      <UpdatePatientInsuranceForm\n      authUserId={this.context.userId}\n      canCancel\n        canConfirm\n        onCancel={this.modalCancelHandler}\n        onConfirm={this.updatePatientInsuranceHandler}\n        confirmText=\"Confirm\"\n        patient={this.state.selectedPatient}\n      />\n    )}\n    </Tab>\n    <Tab eventKey=\"patientEditNextOfKin\" title=\"NextOfKin\">\n    {this.state.selectedPatient === null && (\n      <Button variant=\"outline-warning\" size=\"lg\">\n        Select a Patient from the Master List below\n      </Button>\n    )}\n    {this.state.selectedPatient !== null && (\n      <Button variant=\"outline-primary\" value='nextOfKin' onClick={this.updatePatientSpecial.bind(this)}>Add NextOfKin</Button>\n    )}\n    {this.state.patientUpdateField === 'nextOfKin' &&\n    this.state.selectedPatient !== null\n    && (\n      <UpdatePatientNextOfKinForm\n            authUserId={this.context.userId}\n            canCancel\n              canConfirm\n              onCancel={this.modalCancelHandler}\n              onConfirm={this.updatePatientNextOfKinHandler}\n              confirmText=\"Confirm\"\n              patient={this.state.selectedPatient}\n            />\n    )}\n    </Tab>\n    <Tab eventKey=\"patientEditComplaint\" title=\"Complaint\">\n    {this.state.selectedPatient === null && (\n      <Button variant=\"outline-warning\" size=\"lg\">\n        Select a Patient from the Master List below\n      </Button>\n    )}\n    {this.state.selectedPatient !== null && (\n      <Button variant=\"outline-primary\" value='complaint' onClick={this.updatePatientSpecial.bind(this)}>Add Complaint</Button>\n    )}\n    {this.state.patientUpdateField === 'complaint' &&\n    this.state.selectedPatient !== null\n    && (\n      <UpdatePatientComplaintForm\n            authUserId={this.context.userId}\n            canCancel\n              canConfirm\n              onCancel={this.modalCancelHandler}\n              onConfirm={this.updatePatientComplaintHandler}\n              confirmText=\"Confirm\"\n              patient={this.state.selectedPatient}\n            />\n    )}\n    </Tab>\n    <Tab eventKey=\"patientEditSurvey\" title=\"Survey\">\n    {this.state.selectedPatient === null && (\n      <Button variant=\"outline-warning\" size=\"lg\">\n        Select a Patient from the Master List below\n      </Button>\n    )}\n    {this.state.selectedPatient !== null && (\n      <Button variant=\"outline-primary\" value='survey' onClick={this.updatePatientSpecial.bind(this)}>Add Survey</Button>\n    )}\n    {this.state.patientUpdateField === 'survey' &&\n    this.state.selectedPatient !== null\n    && (\n      <UpdatePatientSurveyForm\n            authUserId={this.context.userId}\n            canCancel\n              canConfirm\n              onCancel={this.modalCancelHandler}\n              onConfirm={this.updatePatientSurveyHandler}\n              confirmText=\"Confirm\"\n              patient={this.state.selectedPatient}\n            />\n    )}\n    </Tab>\n    <Tab eventKey=\"patientEditVitals\" title=\"Vitals\">\n    {this.state.selectedPatient === null && (\n      <Button variant=\"outline-warning\" size=\"lg\">\n        Select a Patient from the Master List below\n      </Button>\n    )}\n    {this.state.selectedPatient !== null && (\n      <Button variant=\"outline-primary\" value='vitals' onClick={this.updatePatientSpecial.bind(this)}>Add Vitals</Button>\n    )}\n    {this.state.patientUpdateField === 'vitals' &&\n    this.state.selectedPatient !== null\n    && (\n      <UpdatePatientVitalsForm\n            authUserId={this.context.userId}\n            canCancel\n              canConfirm\n              onCancel={this.modalCancelHandler}\n              onConfirm={this.updatePatientVitalsHandler}\n              confirmText=\"Confirm\"\n              patient={this.state.selectedPatient}\n            />\n    )}\n    </Tab>\n    <Tab eventKey=\"patientEditExamination\" title=\"Examination\">\n    {this.state.selectedPatient === null && (\n      <Button variant=\"outline-warning\" size=\"lg\">\n        Select a Patient from the Master List below\n      </Button>\n    )}\n    {this.state.selectedPatient !== null && (\n      <Button variant=\"outline-primary\" value='examintion' onClick={this.updatePatientSpecial.bind(this)}>Add Examination</Button>\n    )}\n    {this.state.patientUpdateField === 'examintion' &&\n    this.state.selectedPatient !== null\n    && (\n      <UpdatePatientExaminationForm\n            authUserId={this.context.userId}\n            canCancel\n              canConfirm\n              onCancel={this.modalCancelHandler}\n              onConfirm={this.updatePatientExaminationHandler}\n              confirmText=\"Confirm\"\n              patient={this.state.selectedPatient}\n            />\n    )}\n    </Tab>\n    <Tab eventKey=\"patientEditHistory\" title=\"History\">\n    {this.state.selectedPatient === null && (\n      <Button variant=\"outline-warning\" size=\"lg\">\n        Select a Patient from the Master List below\n      </Button>\n    )}\n    {this.state.selectedPatient !== null && (\n      <Button variant=\"outline-primary\" value='history' onClick={this.updatePatientSpecial.bind(this)}>Add History</Button>\n    )}\n    {this.state.patientUpdateField === 'history' &&\n    this.state.selectedPatient !== null\n    && (\n      <UpdatePatientHistoryForm\n      authUserId={this.context.userId}\n      canCancel\n        canConfirm\n        onCancel={this.modalCancelHandler}\n        onConfirm={this.updatePatientHistoryHandler}\n        confirmText=\"Confirm\"\n        patient={this.state.selectedPatient}\n      />\n    )}\n    </Tab>\n    <Tab eventKey=\"patientEditAllergies\" title=\"Allergies\">\n    {this.state.selectedPatient === null && (\n      <Button variant=\"outline-warning\" size=\"lg\">\n        Select a Patient from the Master List below\n      </Button>\n    )}\n    {this.state.selectedPatient !== null && (\n      <Button variant=\"outline-primary\" value='allergies' onClick={this.updatePatientSpecial.bind(this)}>Add Allergies</Button>\n    )}\n    {this.state.patientUpdateField === 'allergies' &&\n    this.state.selectedPatient !== null\n    && (\n      <UpdatePatientAllergiesForm\n            authUserId={this.context.userId}\n            canCancel\n              canConfirm\n              onCancel={this.modalCancelHandler}\n              onConfirm={this.updatePatientAllergiesHandler}\n              confirmText=\"Confirm\"\n              patient={this.state.selectedPatient}\n            />\n    )}\n    </Tab>\n    <Tab eventKey=\"patientEditMedication\" title=\"Medication\">\n    {this.state.selectedPatient === null && (\n      <Button variant=\"outline-warning\" size=\"lg\">\n        Select a Patient from the Master List below\n      </Button>\n    )}\n    {this.state.selectedPatient !== null && (\n      <Button variant=\"outline-primary\" value='medication' onClick={this.updatePatientSpecial.bind(this)}>Add Medication</Button>\n    )}\n    {this.state.patientUpdateField === 'medication' &&\n    this.state.selectedPatient !== null\n    && (\n      <UpdatePatientMedicationForm\n      authUserId={this.context.userId}\n      canCancel\n        canConfirm\n        onCancel={this.modalCancelHandler}\n        onConfirm={this.updatePatientMedicationHandler}\n        confirmText=\"Confirm\"\n        patient={this.state.selectedPatient}\n      />\n    )}\n    </Tab>\n    <Tab eventKey=\"patientEditInvestigation\" title=\"Investigation\">\n    {this.state.selectedPatient === null && (\n      <Button variant=\"outline-warning\" size=\"lg\">\n        Select a Patient from the Master List below\n      </Button>\n    )}\n    {this.state.selectedPatient !== null && (\n      <Button variant=\"outline-primary\" value='investigation' onClick={this.updatePatientSpecial.bind(this)}>Add Investigation</Button>\n    )}\n    {this.state.patientUpdateField === 'investigation' &&\n    this.state.selectedPatient !== null\n    && (\n      <UpdatePatientInvestigationForm\n            authUserId={this.context.userId}\n            canCancel\n              canConfirm\n              onCancel={this.modalCancelHandler}\n              onConfirm={this.updatePatientInvestigationHandler}\n              confirmText=\"Confirm\"\n              patient={this.state.selectedPatient}\n            />\n    )}\n    </Tab>\n    <Tab eventKey=\"patientEditDiagnosis\" title=\"Diagnosis\">\n    {this.state.selectedPatient === null && (\n      <Button variant=\"outline-warning\" size=\"lg\">\n        Select a Patient from the Master List below\n      </Button>\n    )}\n    {this.state.selectedPatient !== null && (\n      <Button variant=\"outline-primary\" value='diagnosis' onClick={this.updatePatientSpecial.bind(this)}>Add Diagnosis</Button>\n    )}\n    {this.state.patientUpdateField === 'diagnosis' &&\n    this.state.selectedPatient !== null\n    && (\n      <UpdatePatientDiagnosisForm\n            authUserId={this.context.userId}\n            canCancel\n              canConfirm\n              onCancel={this.modalCancelHandler}\n              onConfirm={this.updatePatientDiagnosisHandler}\n              confirmText=\"Confirm\"\n              patient={this.state.selectedPatient}\n            />\n    )}\n    </Tab>\n    <Tab eventKey=\"patientEditTreatment\" title=\"Treatment\">\n    {this.state.selectedPatient === null && (\n      <Button variant=\"outline-warning\" size=\"lg\">\n        Select a Patient from the Master List below\n      </Button>\n    )}\n    {this.state.selectedPatient !== null && (\n      <Button variant=\"outline-primary\" value='treatment' onClick={this.updatePatientSpecial.bind(this)}>Add Treatment</Button>\n    )}\n    {this.state.patientUpdateField === 'treatment' &&\n    this.state.selectedPatient !== null\n    && (\n      <UpdatePatientTreatmentForm\n            authUserId={this.context.userId}\n            canCancel\n              canConfirm\n              onCancel={this.modalCancelHandler}\n              onConfirm={this.updatePatientTreatmentHandler}\n              confirmText=\"Confirm\"\n              patient={this.state.selectedPatient}\n            />\n    )}\n    </Tab>\n    <Tab eventKey=\"patientEditBilling\" title=\"Billing\">\n    {this.state.selectedPatient === null && (\n      <Button variant=\"outline-warning\" size=\"lg\">\n        Select a Patient from the Master List below\n      </Button>\n    )}\n    {this.state.selectedPatient !== null && (\n      <Button variant=\"outline-primary\" value='billing' onClick={this.updatePatientSpecial.bind(this)}>Add Billing</Button>\n    )}\n    {this.state.patientUpdateField === 'billing' &&\n    this.state.selectedPatient !== null\n    && (\n      <UpdatePatientBillingForm\n            authUserId={this.context.userId}\n            canCancel\n              canConfirm\n              onCancel={this.modalCancelHandler}\n              onConfirm={this.updatePatientBillingHandler}\n              confirmText=\"Confirm\"\n              patient={this.state.selectedPatient}\n            />\n    )}\n    </Tab>\n\n    <Tab eventKey=\"patientEditAttachment\" title=\"Attachment\">\n    {this.state.selectedPatient === null && (\n      <Button variant=\"outline-warning\" size=\"lg\">\n        Select a Patient from the Master List below\n      </Button>\n    )}\n    {this.state.selectedPatient !== null && (\n      <Button variant=\"outline-primary\" value='attachment' onClick={this.updatePatientSpecial.bind(this)}>Add Attachment</Button>\n    )}\n    {this.state.patientUpdateField === 'attachment' &&\n    this.state.selectedPatient !== null\n    && (\n      <UpdatePatientAttachmentForm\n            authUserId={this.context.userId}\n            canCancel\n              canConfirm\n              onCancel={this.modalCancelHandler}\n              onConfirm={this.updatePatientAttachmentHandler}\n              confirmText=\"Confirm\"\n              patient={this.state.selectedPatient}\n            />\n          )}\n    </Tab>\n    <Tab eventKey=\"patientEditNote\" title=\"Note\">\n    {this.state.selectedPatient === null && (\n      <Button variant=\"outline-warning\" size=\"lg\">\n        Select a Patient from the Master List below\n      </Button>\n    )}\n    {this.state.selectedPatient !== null && (\n      <Button variant=\"outline-primary\" value='notes' onClick={this.updatePatientSpecial.bind(this)}>Add Note</Button>\n    )}\n    {this.state.patientUpdateField === 'notes' &&\n    this.state.selectedPatient !== null\n    && (\n      <UpdatePatientNoteForm\n            authUserId={this.context.userId}\n            canCancel\n              canConfirm\n              onCancel={this.modalCancelHandler}\n              onConfirm={this.updatePatientNoteHandler}\n              confirmText=\"Confirm\"\n              patient={this.state.selectedPatient}\n            />\n          )}\n    </Tab>\n    <Tab eventKey=\"patientEditTag\" title=\"Tag\">\n    {this.state.selectedPatient === null && (\n      <Button variant=\"outline-warning\" size=\"lg\">\n        Select a Patient from the Master List below\n      </Button>\n    )}\n    {this.state.selectedPatient !== null && (\n      <Button variant=\"outline-primary\" value='tags' onClick={this.updatePatientSpecial.bind(this)}>Add Tag</Button>\n    )}\n    {this.state.patientUpdateField === 'tags' &&\n    this.state.selectedPatient !== null\n    && (\n      <UpdatePatientTagForm\n            authUserId={this.context.userId}\n            canCancel\n              canConfirm\n              onCancel={this.modalCancelHandler}\n              onConfirm={this.updatePatientTagHandler}\n              confirmText=\"Confirm\"\n              patient={this.state.selectedPatient}\n            />\n          )}\n    </Tab>\n\n    <Tab eventKey=\"MasterList\" title=\"Master List\">\n    <Container className=\"containerUserMasterList\">\n    <Row className=\"searchListRow\">\n    <Button variant=\"primary\" size=\"sm\" onClick={this.fetchPatientsAsc}>\n       Sort Asc\n     </Button>\n    <Button variant=\"info\" size=\"sm\" onClick={this.fetchPatientsDesc}>\n       Sort Desc\n     </Button>\n    {this.state.isLoading ? (\n      <Spinner />\n    ) : (\n      <PatientList\n        patients={this.state.patients}\n        authUserId={this.context.userId}\n        onViewDetail={this.showDetailHandler}\n      />\n    )}\n    </Row>\n    </Container>\n    </Tab>\n\n    <Tab eventKey=\"SearchInput\" title=\"Search\">\n    <Container className=\"containerSearchUserInput\">\n      {this.context.token && (\n      <Row className=\"searchUserRowAdd\">\n      <Button variant=\"primary\" onClick={this.startSearchPatientHandler}>Search</Button>\n      </Row>\n    )}\n\n    <Row className=\"searchUserRowForm\">\n    <Col md={10} className=\"searchUserColForm\">\n    <Tabs defaultActiveKey=\"Field\" id=\"uncontrolled-tab-example\">\n    <Tab eventKey=\"Search\" title=\"Search:\" disabled>\n    </Tab>\n    <Tab eventKey=\"Field\" title=\"Field:\">\n    {this.state.searching === true && (\n      <SearchPatientForm\n      authUserId={this.context.userId}\n      canCancel\n        canConfirm\n        onCancel={this.modalCancelHandler}\n        onConfirm={this.modalConfirmSearchHandler}\n        confirmText=\"Search\"\n        patient={this.context.selectedPatient}\n      />\n    )}\n    </Tab>\n    <Tab eventKey=\"Id\" title=\"Id:\">\n    {this.state.searching === true && (\n      <SearchPatientIdForm\n      authUserId={this.context.userId}\n      canCancel\n        canConfirm\n        onCancel={this.modalCancelHandler}\n        onConfirm={this.modalConfirmSearchIdHandler}\n        confirmText=\"Search\"\n        patient={this.context.selectedPatient}\n      />\n    )}\n    </Tab>\n    {\n    //   <Tab eventKey=\"Visit\" title=\"Visit:\">\n    // {this.state.searching === true && (\n    //   <SearchPatientVisitForm\n    //   authUserId={this.context.userId}\n    //   canCancel\n    //     canConfirm\n    //     onCancel={this.modalCancelHandler}\n    //     onConfirm={this.modalConfirmSearchVisitHandler}\n    //     confirmText=\"Search\"\n    //     patient={this.context.selectedPatient}\n    //   />\n    // )}\n    // </Tab>\n  }\n    <Tab eventKey=\"Name\" title=\"Name:\">\n    {this.state.searching === true && (\n      <SearchPatientNameForm\n      authUserId={this.context.userId}\n      canCancel\n        canConfirm\n        onCancel={this.modalCancelHandler}\n        onConfirm={this.modalConfirmSearchNameHandler}\n        confirmText=\"Search\"\n        patient={this.context.selectedPatient}\n      />\n    )}\n    </Tab>\n    </Tabs>\n    </Col>\n    </Row>\n    </Container>\n    </Tab>\n\n    <Tab eventKey=\"SearchResult\" title=\"Search Results\">\n    <Container className=\"containerSearchUserResults\">\n    <Row>\n      <Card className=\"searchCard\">\n        <Card.Body className=\"searchCardBody\">\n          <Card.Title>Your Search</Card.Title>\n          <Card.Text>\n            Field: {this.state.patientSearchField}\n          </Card.Text>\n          <Card.Text>\n            Query: {this.state.patientSearchQuery}\n          </Card.Text>\n        </Card.Body>\n      </Card>\n    </Row>\n    <Row className=\"searchListRow\">\n    {\n      this.state.searchPatients !== [] &&\n      <SearchPatientList\n        searchPatients={this.state.searchPatients}\n        authUserId={this.context.userId}\n        onCancel={this.modalCancelHandler}\n          onViewDetail={this.showDetailHandler}\n      />\n    }\n    </Row>\n    </Container>\n    </Tab>\n\n    </Tabs>\n    </Container>\n\n\n\n\n\n    </Col>\n\n    <Col md={3} className=\"MasterCol3\">\n\n\n    </Col>\n    </Row>\n\n</Accordion>\n\n      </React.Fragment>\n    );\n  }\n}\n\nexport default PatientsPage;\n"]},"metadata":{},"sourceType":"module"}