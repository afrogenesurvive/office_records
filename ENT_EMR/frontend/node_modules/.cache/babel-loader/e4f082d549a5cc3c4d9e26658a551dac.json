{"ast":null,"code":"var _jsxFileName = \"/Users/pedrojacob/Downloads/AMR/websites/office_records/ENT_EMR/frontend/src/pages/Signup.js\";\nimport React, { Component } from 'react';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport AlertBox from '../components/AlertBox';\nimport CreateUserForm from '../components/Forms/CreateUserForm';\nimport LoadingOverlay from '../components/LoadingOverlay';\n\nclass SignupPage extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      success: \"Signup!!\",\n      userAlert: null,\n      overlay: false,\n      overlayStatus: \"test\"\n    };\n\n    this.modalConfirmHandler = event => {\n      event.preventDefault();\n      this.setState({\n        creating: false,\n        userAlert: \"Signing you up....\"\n      });\n      const email = event.target.formGridEmail.value;\n      const password = event.target.formGridPassword.value;\n      const name = event.target.formGridName.value;\n      const role = event.target.formGridRole.value;\n      let dob = event.target.formGridDob.value;\n      let phone = event.target.formGridPhone.value;\n      let addressNumber = event.target.formGridAddressNumber.value;\n      let addressStreet = event.target.formGridAddressStreet.value;\n      let addressTown = event.target.formGridAddressTown.value;\n      let addressParish = event.target.formGridAddressParish.value;\n      let addressPostOffice = event.target.formGridAddressPostOffice.value;\n      let employmentDate = event.target.formGridEmploymentDate.value;\n\n      if (event.target.formGridEmploymentDateTodayCheckbox.checked === true) {\n        employmentDate = new Date().toISOString().slice(0, 10);\n      }\n\n      if (event.target.staffCalendarEmploymentDate.value !== null && event.target.formGridEmploymentDateTodayCheckbox.checked !== true) {\n        console.log(\"fancyDate2\", new Date(event.target.staffCalendarEmploymentDate.value).toISOString().slice(0, 10));\n        employmentDate = new Date(event.target.staffCalendarEmploymentDate.value).toISOString().slice(0, 10);\n      }\n\n      let terminationDate = event.target.formGridTerminationDate.value;\n\n      if (event.target.formGridTerminationDateTodayCheckbox.checked === true) {\n        terminationDate = new Date().toISOString().slice(0, 10);\n      }\n\n      if (event.target.staffCalendarTerminationDate.value !== null && event.target.formGridTerminationDateTodayCheckbox.checked !== true) {\n        console.log(\"fancyDate2\", new Date(event.target.staffCalendarTerminationDate.value).toISOString().slice(0, 10));\n        terminationDate = new Date(event.target.staffCalendarTerminationDate.value).toISOString().slice(0, 10);\n      }\n\n      if (email.trim().length === 0 || password.trim().length === 0 || name.trim().length === 0 || role.trim().length === 0 || dob.trim().length === 0 || phone.trim().length === 0 || addressNumber.trim().length === 0 || addressStreet.trim().length === 0 || addressTown.trim().length === 0 || addressParish.trim().length === 0 || addressPostOffice.trim().length === 0 || employmentDate.trim().length === 0 || terminationDate.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...Please try again...\"\n        });\n        return;\n      }\n\n      const token = this.context.token;\n      const userId = this.context.userId;\n      const requestBody = {\n        query: `\n          mutation {\n            createUser(userInput: {email:\"${email}\",password:\"${password}\",name:\"${name}\",role:\"${role}\",employmentDate:\"${employmentDate}\",terminationDate:\"${terminationDate}\"})\n            {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}\n          }`\n      }; // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        if (JSON.stringify(resData).slice(2, 7) === 'error') {\n          this.setState({\n            success: \"Something went wrong!!!\",\n            userAlert: \"Something went wrong!!!\"\n          });\n        } else {\n          this.setState({\n            success: \"Signup success...Proceed to login\",\n            userAlert: \"Signup success...Proceed to login\"\n          });\n        }\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, React.createElement(AlertBox, {\n      authUserId: this.context.userId,\n      alert: this.state.userAlert,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }), this.state.overlay === true && React.createElement(LoadingOverlay, {\n      status: this.state.overlayStatus,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }), React.createElement(Col, {\n      className: \"signupRow\",\n      md: 8,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, React.createElement(CreateUserForm, {\n      canConfirm: true,\n      onConfirm: this.modalConfirmHandler,\n      onSubmit: this.modalConfirmHandler,\n      confirmText: \"Confirm\",\n      successText: this.state.success,\n      title: \"Sign-Up\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default SignupPage;","map":{"version":3,"sources":["/Users/pedrojacob/Downloads/AMR/websites/office_records/ENT_EMR/frontend/src/pages/Signup.js"],"names":["React","Component","Row","Col","AlertBox","CreateUserForm","LoadingOverlay","SignupPage","state","success","userAlert","overlay","overlayStatus","modalConfirmHandler","event","preventDefault","setState","creating","email","target","formGridEmail","value","password","formGridPassword","name","formGridName","role","formGridRole","dob","formGridDob","phone","formGridPhone","addressNumber","formGridAddressNumber","addressStreet","formGridAddressStreet","addressTown","formGridAddressTown","addressParish","formGridAddressParish","addressPostOffice","formGridAddressPostOffice","employmentDate","formGridEmploymentDate","formGridEmploymentDateTodayCheckbox","checked","Date","toISOString","slice","staffCalendarEmploymentDate","console","log","terminationDate","formGridTerminationDate","formGridTerminationDateTodayCheckbox","staffCalendarTerminationDate","trim","length","token","context","userId","requestBody","query","fetch","method","body","JSON","stringify","headers","Authorization","then","res","status","Error","json","resData","catch","err","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nimport AlertBox from '../components/AlertBox';\nimport CreateUserForm from '../components/Forms/CreateUserForm';\nimport LoadingOverlay from '../components/LoadingOverlay';\n\nclass SignupPage extends Component {\n  state = {\n    success: \"Signup!!\",\n    userAlert: null,\n    overlay: false,\n    overlayStatus: \"test\",\n  };\n\n  modalConfirmHandler = (event) => {\n\n    event.preventDefault();\n\n    this.setState({ creating: false, userAlert: \"Signing you up....\" });\n    const email = event.target.formGridEmail.value;\n    const password = event.target.formGridPassword.value;\n    const name = event.target.formGridName.value;\n    const role = event.target.formGridRole.value;\n    let dob = event.target.formGridDob.value;\n    let phone = event.target.formGridPhone.value;\n    let addressNumber = event.target.formGridAddressNumber.value;\n    let addressStreet = event.target.formGridAddressStreet.value;\n    let addressTown = event.target.formGridAddressTown.value;\n    let addressParish = event.target.formGridAddressParish.value;\n    let addressPostOffice = event.target.formGridAddressPostOffice.value;\n\n\n    let employmentDate = event.target.formGridEmploymentDate.value;\n    if (event.target.formGridEmploymentDateTodayCheckbox.checked === true) {\n      employmentDate = new Date().toISOString().slice(0,10);\n    }\n\n    if (\n      event.target.staffCalendarEmploymentDate.value !== null &&\n      event.target.formGridEmploymentDateTodayCheckbox.checked !== true\n    ) {\n      console.log(\"fancyDate2\", new Date(event.target.staffCalendarEmploymentDate.value).toISOString().slice(0,10));\n      employmentDate = new Date(event.target.staffCalendarEmploymentDate.value).toISOString().slice(0,10);\n    }\n\n\n    let terminationDate = event.target.formGridTerminationDate.value;\n    if (event.target.formGridTerminationDateTodayCheckbox.checked === true) {\n      terminationDate = new Date().toISOString().slice(0,10);\n    }\n\n    if (\n      event.target.staffCalendarTerminationDate.value !== null &&\n      event.target.formGridTerminationDateTodayCheckbox.checked !== true\n    ) {\n      console.log(\"fancyDate2\", new Date(event.target.staffCalendarTerminationDate.value).toISOString().slice(0,10));\n      terminationDate = new Date(event.target.staffCalendarTerminationDate.value).toISOString().slice(0,10);\n    }\n\n    if (\n      email.trim().length === 0 ||\n      password.trim().length === 0 ||\n      name.trim().length === 0 ||\n      role.trim().length === 0 ||\n      dob.trim().length === 0 ||\n      phone.trim().length === 0 ||\n      addressNumber.trim().length === 0 ||\n      addressStreet.trim().length === 0 ||\n      addressTown.trim().length === 0 ||\n      addressParish.trim().length === 0 ||\n      addressPostOffice.trim().length === 0 ||\n      employmentDate.trim().length === 0 ||\n      terminationDate.trim().length === 0\n    ) {\n      this.setState({userAlert: \"blank fields detected!!!...Please try again...\"});\n      return;\n    }\n\n    const token = this.context.token;\n    const userId = this.context.userId;\n    const requestBody = {\n      query: `\n          mutation {\n            createUser(userInput: {email:\"${email}\",password:\"${password}\",name:\"${name}\",role:\"${role}\",employmentDate:\"${employmentDate}\",terminationDate:\"${terminationDate}\"})\n            {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}\n          }`\n        };\n\n    // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        if (JSON.stringify(resData).slice(2,7) === 'error') {\n          this.setState({success: \"Something went wrong!!!\", userAlert: \"Something went wrong!!!\"  });\n        } else {\n          this.setState({success: \"Signup success...Proceed to login\", userAlert: \"Signup success...Proceed to login\" });\n        }\n      })\n      .catch(err => {\n        this.setState({userAlert: err});\n      });\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n\n      <Row>\n      <AlertBox\n        authUserId={this.context.userId}\n        alert={this.state.userAlert}\n      />\n\n      {this.state.overlay === true && (\n        <LoadingOverlay\n          status={this.state.overlayStatus}\n        />\n      )}\n\n      <Col className=\"signupRow\" md={8}>\n        <CreateUserForm\n          canConfirm\n          onConfirm={this.modalConfirmHandler}\n          onSubmit={this.modalConfirmHandler}\n          confirmText=\"Confirm\"\n          successText={this.state.success}\n          title={\"Sign-Up\"}\n        />\n      </Col>\n      </Row>\n\n      </React.Fragment>\n    );\n  }\n}\n\nexport default SignupPage;\n"]},"metadata":{},"sourceType":"module"}