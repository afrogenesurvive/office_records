{"ast":null,"code":"var _jsxFileName = \"/Users/pedrojacob/Downloads/AMR/websites/office_records/ENT_EMR/frontend/src/pages/Patients.js\";\nimport React, { Component } from 'react';\nimport S3 from 'react-aws-s3';\nimport S3FileUpload from 'react-s3';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport Accordion from 'react-bootstrap/Accordion';\nimport SidebarPage from './Sidebar';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\nimport TabContainer from 'react-bootstrap/TabContainer';\nimport TabContent from 'react-bootstrap/TabContent';\nimport TabPane from 'react-bootstrap/TabPane';\nimport Nav from 'react-bootstrap/Nav';\nimport Card from 'react-bootstrap/Card';\nimport PatientList from '../components/Patients/PatientList/PatientList';\nimport PatientDetail from '../components/Patients/PatientDetail';\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\nimport SearchPatientList from '../components/Patients/PatientList/SearchPatientList';\nimport SearchPatientForm from '../components/Forms/SearchPatientForm';\nimport SearchPatientIdForm from '../components/Forms/SearchPatientIdForm';\nimport SearchPatientNameForm from '../components/Forms/SearchPatientNameForm';\nimport SearchPatientVisitForm from '../components/Forms/SearchPatientVisitForm';\nimport AlertBox from '../components/AlertBox';\nimport AttachmentViewer from '../components/AttachmentViewer';\nimport PdfCreator from '../components/PdfCreator';\nimport CreatePatientForm from '../components/Forms/CreatePatientForm';\nimport UpdatePatientForm from '../components/Forms/UpdatePatientForm';\nimport UpdatePatientFieldForm from '../components/Forms/UpdatePatientFieldForm';\nimport UpdatePatientConsultantForm from '../components/Forms/UpdatePatientConsultantForm';\nimport UpdatePatientInsuranceForm from '../components/Forms/UpdatePatientInsuranceForm';\nimport UpdatePatientNextOfKinForm from '../components/Forms/UpdatePatientNextOfKinForm';\nimport UpdatePatientComplaintForm from '../components/Forms/UpdatePatientComplaintForm';\nimport UpdatePatientSurveyForm from '../components/Forms/UpdatePatientSurveyForm';\nimport UpdatePatientVitalsForm from '../components/Forms/UpdatePatientVitalsForm';\nimport UpdatePatientExaminationForm from '../components/Forms/UpdatePatientExaminationForm';\nimport UpdatePatientHistoryForm from '../components/Forms/UpdatePatientHistoryForm';\nimport UpdatePatientAllergiesForm from '../components/Forms/UpdatePatientAllergiesForm';\nimport UpdatePatientMedicationForm from '../components/Forms/UpdatePatientMedicationForm';\nimport UpdatePatientInvestigationForm from '../components/Forms/UpdatePatientInvestigationForm';\nimport UpdatePatientDiagnosisForm from '../components/Forms/UpdatePatientDiagnosisForm';\nimport UpdatePatientTreatmentForm from '../components/Forms/UpdatePatientTreatmentForm';\nimport UpdatePatientBillingForm from '../components/Forms/UpdatePatientBillingForm';\nimport UpdatePatientAttachmentForm from '../components/Forms/UpdatePatientAttachmentForm';\nimport UpdatePatientNoteForm from '../components/Forms/UpdatePatientNoteForm';\nimport UpdatePatientTagForm from '../components/Forms/UpdatePatientTagForm';\nimport './Users.css';\n\nclass PatientsPage extends Component {\n  constructor(_props) {\n    super(_props);\n    this.state = {\n      creating: false,\n      updating: false,\n      searching: false,\n      updatingArray: false,\n      deleting: false,\n      patients: [],\n      searchPatients: [],\n      isLoading: false,\n      selectedPatient: null,\n      patientUpdateField: null,\n      patientSearchField: null,\n      patientSearchQuery: null,\n      canDelete: null,\n      visit: null,\n      userAlert: null,\n      showAttachment: false,\n      showThisAttachmentFile: null,\n      showThisAttachmentType: null,\n      createPdf: false,\n      pdfData: null\n    };\n    this.isActive = true;\n\n    this.startCreatePatientHandler = () => {\n      this.setState({\n        creating: true\n      });\n      console.log(\"CreatePatientForm...\");\n    };\n\n    this.startUpdatePatientHandler = () => {\n      this.setState({\n        updating: true,\n        updatingArray: true\n      });\n      console.log(\"UpdatePatientForm...\");\n    };\n\n    this.startSearchPatientHandler = () => {\n      this.setState({\n        searching: true\n      });\n      console.log(\"SearchPatientForm...\");\n    };\n\n    this.modalConfirmHandler = event => {\n      console.log(\"CreatePatientFormData:  \", event.target.formGridName.value);\n      this.setState({\n        creating: false\n      });\n      const userId = this.context.userId;\n      let title = event.target.formGridTitle.value;\n      let name = event.target.formGridName.value;\n      let dob = event.target.formGridDob.value;\n      let age = event.target.formGridAge.value;\n      let gender = event.target.formGridGender.value;\n      let addressNumber = event.target.formGridAddressNumber.value;\n      let addressStreet = event.target.formGridAddressStreet.value;\n      let addressTown = event.target.formGridAddressTown.value;\n      let addressParish = event.target.formGridAddressParish.value;\n      let addressPostOffice = event.target.formGridAddressPostOffice.value;\n      let contactPhone = event.target.formGridContactPhone.value;\n      let contactEmail = event.target.formGridContactEmail.value;\n      let registrationDate = event.target.formGridRegistrationDate.value;\n\n      if (event.target.formGridRegistrationDateTodayCheckbox.checked === true) {\n        registrationDate = new Date().toISOString().slice(0, 10);\n      }\n\n      let referralDate = event.target.formGridReferralDate.value;\n\n      if (event.target.formGridReferralDateTodayCheckbox.checked === true) {\n        referralDate = new Date().toISOString().slice(0, 10);\n      }\n\n      let expirationDate = event.target.formGridExpirationDate.value;\n      let attendingPhysicianName = event.target.formGridAttendingPhysicianName.value;\n      let attendingPhysicianEmail = event.target.formGridAttendingPhysicianEmail.value;\n      let attendingPhysicianPhone = event.target.formGridAttendingPhysicianPhone.value;\n      let referringDoctorName = event.target.formGridReferringDoctorName.value;\n      let referringDoctorEmail = event.target.formGridReferringDoctorEmail.value;\n      let referringDoctorPhone = event.target.formGridReferringDoctorPhone.value;\n      let occupationRole = event.target.formGridOccupationRole.value;\n      let occupationEmployer = event.target.formGridOccupationEmployer.value;\n      let occupationEmployerContactPhone = event.target.formGridOccupationEmployerContactPhone.value;\n      let occupationEmployerContactEmail = event.target.formGridOccupationEmployerContactEmail.value;\n\n      if (name.trim().length === 0 || // title.trim().length === 0 ||\n      // name.trim().length === 0 ||\n      // dob.trim().length === 0 ||\n      // age.trim().length === 0 ||\n      // gender.trim().length === 0 ||\n      // addressNumber.trim().length === 0 ||\n      // addressStreet.trim().length === 0 ||\n      // addressTown.trim().length === 0 ||\n      // addressParish.trim().length === 0 ||\n      // addressPostOffice.trim().length === 0 ||\n      contactPhone.trim().length === 0 // contactEmail.trim().length === 0 ||\n      // registrationDate.trim().length === 0 ||\n      // referralDate.trim().length === 0 ||\n      // expirationDate.trim().length === 0 ||\n      // attendingPhysicianName.trim().length === 0 ||\n      // attendingPhysicianEmail.trim().length === 0 ||\n      // attendingPhysicianPhone.trim().length === 0 ||\n      // referringDoctorName.trim().length === 0 ||\n      // referringDoctorEmail.trim().length === 0 ||\n      // referringDoctorPhone.trim().length === 0 ||\n      // occupationRole.trim().length === 0 ||\n      // occupationEmployer.trim().length === 0 ||\n      // occupationEmployerContactPhone.trim().length === 0 ||\n      // occupationEmployerContactEmail.trim().length === 0\n      ) {\n          console.log(\"patient must have at least a Name and Contact Number!!!...Please try again...\");\n          this.setState({\n            userAlert: \"patient requires Name and Contact Number!!!... Try again...\"\n          });\n          return;\n        }\n\n      const patient = {\n        title,\n        name,\n        dob,\n        age,\n        gender,\n        addressNumber,\n        addressStreet,\n        addressTown,\n        addressParish,\n        addressPostOffice,\n        contactPhone,\n        contactEmail,\n        registrationDate,\n        referralDate,\n        expirationDate,\n        attendingPhysicianName,\n        attendingPhysicianEmail,\n        attendingPhysicianPhone,\n        referringDoctorName,\n        referringDoctorEmail,\n        referringDoctorPhone,\n        occupationRole,\n        occupationEmployer,\n        occupationEmployerContactPhone,\n        occupationEmployerContactEmail\n      };\n      console.log(`\n      creating patient...\n      title: ${title},\n      name: ${name},\n      dob: ${dob},\n      age: ${age},\n      gender: ${gender},\n      addressNumber: ${addressNumber},\n      addressStreet: ${addressStreet},\n      addressTown: ${addressTown},\n      addressParish: ${addressParish},\n      addressPostOffice: ${addressPostOffice},\n      contactPhone: ${contactPhone},\n      contactEmail: ${contactEmail},\n      registrationDate: ${registrationDate},\n      referralDate: ${referralDate},\n      expirationDate: ${expirationDate},\n      attendingPhysicianName: ${attendingPhysicianName},\n      attendingPhysicianEmail: ${attendingPhysicianEmail},\n      attendingPhysicianPhone: ${attendingPhysicianPhone},\n      referringDoctorName: ${referringDoctorName},\n      referringDoctorEmail: ${referringDoctorEmail},\n      referringDoctorPhone: ${referringDoctorPhone},\n      occupationRole: ${occupationRole},\n      occupationEmployer: ${occupationEmployer},\n      occupationEmployerContactPhone: ${occupationEmployerContactPhone},\n      occupationEmployerContactEmail: ${occupationEmployerContactEmail},\n      `);\n      const requestBody = {\n        query: `\n          mutation {createPatient(userId:\\\"${userId}\\\", patientInput:{title:\\\"${title}\\\",name:\\\"${name}\\\",dob:\\\"${dob}\\\",age:${age},gender:\\\"${gender}\\\",addressNumber:${addressNumber},addressStreet:\\\"${addressStreet}\\\",addressTown:\\\"${addressTown}\\\",addressParish:\\\"${addressParish}\\\",addressPostOffice:\\\"${addressPostOffice}\\\",contactPhone:\\\"${contactPhone}\\\",contactEmail:\\\"${contactEmail}\\\",registrationDate:\\\"${registrationDate}\\\",referralDate:\\\"${referralDate}\\\",expirationDate:\\\"${expirationDate}\\\",referringDoctorName:\\\"${referringDoctorName}\\\",referringDoctorEmail:\\\"${referringDoctorEmail}\\\",referringDoctorPhone:\\\"${referringDoctorPhone}\\\",attendingPhysicianName:\\\"${attendingPhysicianName}\\\",attendingPhysicianEmail:\\\"${attendingPhysicianEmail}\\\",attendingPhysicianPhone:\\\"${attendingPhysicianPhone}\\\",occupationRole:\\\"${occupationRole}\\\",occupationEmployer:\\\"${occupationEmployer}\\\",occupationEmployerContactPhone:\\\"${occupationEmployerContactPhone}\\\",occupationEmployerContactEmail:\\\"${occupationEmployerContactEmail}\\\"})\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n        `\n      };\n      const token = this.context.token; // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(`\n          response data:\n          ${JSON.stringify(resData.data.createPatient)}\n          `);\n        const responseAlert = JSON.stringify(resData.data).slice(2, 15);\n        this.setState({\n          userAlert: responseAlert\n        });\n        const newPatient = resData.data.createPatient;\n        this.setState(prevState => {\n          const updatedPatients = [...prevState.patients];\n          updatedPatients.push(newPatient);\n          return {\n            patients: updatedPatients\n          };\n        });\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.modalCancelHandler = () => {\n      this.setState({\n        creating: false,\n        updating: false,\n        selectedPatient: null\n      });\n    };\n\n    this.modalConfirmUpdateHandler = event => {\n      // if(this.context.user.role !== 'admin') {\n      //   console.log(\"Not the Admin! No edit permission!!\");\n      // }\n      const userId = this.context.userId;\n      const selectedPatientId = this.context.selectedPatient._id;\n      console.log(\"UpdatePatientFormData:  \", event.target.formGridName.value);\n      this.setState({\n        updating: false\n      });\n      let title = event.target.formGridTitle.value;\n      let name = event.target.formGridName.value;\n      let dob = event.target.formGridDob.value;\n      let age = event.target.formGridAge.value;\n      let gender = event.target.formGridGender.value;\n      let addressNumber = event.target.formGridAddressNumber.value;\n      let addressStreet = event.target.formGridAddressStreet.value;\n      let addressTown = event.target.formGridAddressTown.value;\n      let addressParish = event.target.formGridAddressParish.value;\n      let addressPostOffice = event.target.formGridAddressPostOffice.value;\n      let contactPhone = event.target.formGridContactPhone.value;\n      let contactEmail = event.target.formGridContactEmail.value;\n      let registrationDate = event.target.formGridRegistrationDate.value;\n\n      if (event.target.formGridRegistrationDateTodayCheckbox.checked === true) {\n        registrationDate = new Date().toISOString().slice(0, 10);\n      }\n\n      let referralDate = event.target.formGridReferralDate.value;\n\n      if (event.target.formGridReferralDateTodayCheckbox.checked === true) {\n        referralDate = new Date().toISOString().slice(0, 10);\n      }\n\n      let expirationDate = event.target.formGridExpirationDate.value;\n\n      if (event.target.formGridExpirationDateTodayCheckbox.checked === true) {\n        expirationDate = new Date().toISOString().slice(0, 10);\n      }\n\n      let attendingPhysicianName = event.target.formGridAttendingPhysicianName.value;\n      let attendingPhysicianEmail = event.target.formGridAttendingPhysicianEmail.value;\n      let attendingPhysicianPhone = event.target.formGridAttendingPhysicianPhone.value;\n      let referringDoctorName = event.target.formGridReferringDoctorName.value;\n      let referringDoctorEmail = event.target.formGridReferringDoctorEmail.value;\n      let referringDoctorPhone = event.target.formGridReferringDoctorPhone.value;\n      let occupationRole = event.target.formGridOccupationRole.value;\n      let occupationEmployer = event.target.formGridOccupationEmployer.value;\n      let occupationEmployerContactPhone = event.target.formGridOccupationEmployerContactPhone.value;\n      let occupationEmployerContactEmail = event.target.formGridOccupationEmployerContactEmail.value;\n\n      if (title.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        title = this.context.selectedPatient.title;\n      }\n\n      if (name.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        name = this.context.selectedPatient.name;\n      }\n\n      if (dob.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        dob = this.context.selectedPatient.dob;\n      }\n\n      if (gender.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        gender = this.context.selectedPatient.gender;\n      }\n\n      if (age.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        age = this.context.selectedPatient.age;\n      }\n\n      if (addressNumber.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        addressNumber = this.context.selectedPatient.address.number;\n      }\n\n      if (addressStreet.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        addressStreet = this.context.selectedPatient.address.street;\n      }\n\n      if (addressTown.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        addressTown = this.context.selectedPatient.address.town;\n      }\n\n      if (addressParish.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        addressParish = this.context.selectedPatient.address.parish;\n      }\n\n      if (addressPostOffice.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        addressPostOffice = this.context.selectedPatient.address.postOffice;\n      }\n\n      if (contactPhone.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        contactPhone = this.context.selectedPatient.contact.phone;\n      }\n\n      if (contactEmail.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        contactEmail = this.context.selectedPatient.contact.email;\n      }\n\n      if (registrationDate.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        registrationDate = this.context.selectedPatient.registrationDate;\n      }\n\n      if (attendingPhysicianName.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        attendingPhysicianName = this.context.selectedPatient.attendingPhysician.name;\n      }\n\n      if (attendingPhysicianEmail.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        attendingPhysicianEmail = this.context.selectedPatient.attendingPhysician.email;\n      }\n\n      if (attendingPhysicianPhone.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        attendingPhysicianPhone = this.context.selectedPatient.attendingPhysician.phone;\n      }\n\n      if (referringDoctorName.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        referringDoctorName = this.context.selectedPatient.referringDoctor.name;\n      }\n\n      if (referringDoctorEmail.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        referringDoctorEmail = this.context.selectedPatient.referringDoctor.email;\n      }\n\n      if (referringDoctorPhone.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        referringDoctorPhone = this.context.selectedPatient.referringDoctor.phone;\n      }\n\n      if (occupationRole.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        occupationRole = this.context.selectedPatient.occupation.role;\n      }\n\n      if (occupationEmployer.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        occupationEmployer = this.context.selectedPatient.occupation.employer;\n      }\n\n      if (occupationEmployerContactEmail.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        occupationEmployerContactEmail = this.context.selectedPatient.occupation.contact.email;\n      }\n\n      if (occupationEmployerContactPhone.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        occupationEmployerContactPhone = this.context.selectedPatient.occupation.contact.phone;\n      }\n\n      const patient = {\n        title,\n        name,\n        dob,\n        age,\n        gender,\n        addressNumber,\n        addressStreet,\n        addressTown,\n        addressParish,\n        addressPostOffice,\n        contactPhone,\n        contactEmail,\n        registrationDate,\n        referralDate,\n        expirationDate,\n        attendingPhysicianName,\n        attendingPhysicianEmail,\n        attendingPhysicianPhone,\n        referringDoctorName,\n        referringDoctorEmail,\n        referringDoctorPhone,\n        occupationRole,\n        occupationEmployer,\n        occupationEmployerContactPhone,\n        occupationEmployerContactEmail\n      };\n      console.log(`\n      updating patient...\n      title: ${title},\n      name: ${name},\n      dob: ${dob},\n      age: ${age},\n      gender: ${gender},\n      addressNumber: ${addressNumber},\n      addressStreet: ${addressStreet},\n      addressTown: ${addressTown},\n      addressParish: ${addressParish},\n      addressPostOffice: ${addressPostOffice},\n      contactPhone: ${contactPhone},\n      contactEmail: ${contactEmail},\n      registrationDate: ${registrationDate},\n      referralDate: ${referralDate},\n      expirationDate: ${expirationDate},\n      attendingPhysicianName: ${attendingPhysicianName},\n      attendingPhysicianEmail: ${attendingPhysicianEmail},\n      attendingPhysicianPhone: ${attendingPhysicianPhone},\n      referringDoctorName: ${referringDoctorName},\n      referringDoctorEmail: ${referringDoctorEmail},\n      referringDoctorPhone: ${referringDoctorPhone},\n      occupationRole: ${occupationRole},\n      occupationEmployer: ${occupationEmployer},\n      occupationEmployerContactPhone: ${occupationEmployerContactPhone},\n      occupationEmployerContactEmail: ${occupationEmployerContactEmail},\n      `);\n      this.setState({\n        userAlert: \"updating patient...\"\n      });\n      const requestBody = {\n        query: `\n          mutation {updatePatient(userId:\"${userId}\",patientId:\"${selectedPatientId}\", patientInput:{title:\"${title}\",name:\"${name}\",dob:\"${dob}\",age:${age},gender:\"${gender}\",addressNumber:${addressNumber},addressStreet:\"${addressStreet}\",addressTown:\"${addressTown}\",addressParish:\"${addressParish}\",addressPostOffice:\"${addressPostOffice}\",contactPhone:\"${contactPhone}\",contactEmail:\"${contactEmail}\",registrationDate:\"${registrationDate}\",referralDate:\"${referralDate}\",expirationDate:\"${expirationDate}\",referringDoctorName:\"${referringDoctorName}\",referringDoctorEmail:\"${referringDoctorEmail}\",referringDoctorPhone:\"${referringDoctorPhone}\",attendingPhysicianName:\"${attendingPhysicianName}\",attendingPhysicianEmail:\"${attendingPhysicianEmail}\",attendingPhysicianPhone:\"${attendingPhysicianPhone}\",occupationRole:\"${occupationRole}\",occupationEmployer:\"${occupationEmployer}\",occupationEmployerContactPhone:\"${occupationEmployerContactPhone}\",occupationEmployerContactEmail:\"${occupationEmployerContactPhone}\"})\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n        `\n      };\n      const token = this.context.token;\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n        const updatedPatientId = resData.data.updatePatient._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.updatePatient);\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert,\n          selectedPatient: resData.data.updatePatient\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.modalConfirmUpdateFieldHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id; // if( this.context.user.role !== 'admin') {\n      //   console.log(\"Not the creator or Admin! No edit permission!!\");\n      //   selectedPatientId = null;\n      // }\n\n      console.log(\"UpdatePatientFieldFormData:  \", event.target.formGridField.value);\n      this.setState({\n        updating: false\n      });\n      let field = null;\n      let query = event.target.formGridQuery.value;\n\n      if (event.target.formGridFieldSelect.value === \"select\") {\n        field = event.target.formGridField.value;\n      } else {\n        field = event.target.formGridFieldSelect.value;\n      }\n\n      const requestBody = {\n        query: `\n          mutation {updatePatientField(userId:\\\"${userId}\\\",patientId:\\\"${selectedPatientId}\\\",field:\\\"${field}\\\",query:\\\"${query}\\\")\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n        `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data.updatePatientField));\n        const updatedPatientId = resData.data.updatePatientField._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.updatePatientField);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert,\n          selectedPatient: resData.data.updatePatientField\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientConsultantHandler = event => {\n      let token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id;\n      const patientConsultantReference = this.context.selectedUser._id; // if(this.context.user.role !== 'admin') {\n      //   console.log(\"No edit permission!!\");\n      //   return;\n      // }\n\n      if (patientConsultantReference === undefined) {\n        console.log(`\n      select a Staff member before adding a Patient Consultant!!\n      `);\n        this.setState({\n          userAlert: \"select a Staff member before adding a Patient Consultant!!...\"\n        });\n        token = null;\n      }\n\n      console.log(\"UpdatePatientConsultantFormData:  \", event.target.formGridConsultantDate.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let consultantDate = event.target.formGridConsultantDate.value;\n\n      if (event.target.formGridConsultantDateTodayCheckbox.checked === true) {\n        consultantDate = new Date().toISOString().slice(0, 10);\n      }\n\n      const patientConsultant = {\n        consultantDate,\n        patientConsultantReference\n      };\n      console.log(`\n    adding patient consultant item...\n    userId: ${userId},\n    selectedPatientId: ${selectedPatientId},\n    consultantDate: ${consultantDate},\n    consultantReference: ${patientConsultantReference},\n    `);\n      const requestBody = {\n        query: `\n        mutation {updatePatientConsultant(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{consultantDate:\" ${consultantDate}\",consultantReference: \"${patientConsultantReference}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientConsultant._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.updatePatientConsultant);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert,\n          selectedPatient: resData.data.updatePatientConsultant\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientInsuranceHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id; // if(this.context.user.role !== 'admin') {\n      //   console.log(\"No edit permission!!\");\n      //   return;\n      // }\n\n      console.log(\"UpdatePatientInsuranceFormData:  \", event.target.formGridInsuranceCompany.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let insuranceCompany = event.target.formGridInsuranceCompany.value;\n      let insuranceNumber = event.target.formGridInsuranceNumber.value;\n      let insuranceExpiry = event.target.formGridInsuranceExpiry.value;\n      let insuranceDescription = event.target.formGridInsuranceDescription.value;\n      let insuranceSubscriberCompany = event.target.formGridInsuranceSubscriberCompany.value;\n      let insuranceSubscriberDescription = event.target.formGridInsuranceSubscriberDescription.value;\n      const patientInsurance = {\n        insuranceCompany,\n        insuranceNumber,\n        insuranceExpiry,\n        insuranceDescription,\n        insuranceSubscriberCompany,\n        insuranceSubscriberDescription\n      };\n      console.log(`\n    adding patient insurance item...\n    userId: ${userId},\n    selectedPatientId: ${selectedPatientId},\n    insuranceCompany: ${insuranceCompany},\n    insuranceNumber: ${insuranceNumber},\n    insuranceExpiry: ${insuranceExpiry},\n    insuranceDescription: ${insuranceDescription},\n    insuranceSubscriberCompany: ${insuranceSubscriberCompany},\n    insuranceSubscriberDescription: ${insuranceSubscriberDescription},\n    `);\n      this.setState({\n        userAlert: \"adding patient insurance item...\"\n      });\n      const requestBody = {\n        query: `\n        mutation {updatePatientInsurance(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{insuranceCompany:\"${insuranceCompany}\",insuranceNumber:\"${insuranceNumber}\",insuranceDescription:\"${insuranceDescription}\",insuranceExpiry:\"${insuranceExpiry}\",insuranceSubscriberCompany:\"${insuranceSubscriberCompany}\",insuranceSubscriberDescription:\"${insuranceSubscriberDescription}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientInsurance._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.updatePatientInsurance);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert,\n          selectedPatient: resData.data.updatePatientInsurance\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientNextOfKinHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id; // if(this.context.user.role !== 'admin') {\n      //   console.log(\"No edit permission!!\");\n      //   return;\n      // }\n\n      console.log(\"UpdatePatientNextOfKinFormData:  \", event.target.formGridNextOfKinName.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let nextOfKinName = event.target.formGridNextOfKinName.value;\n      let nextOfKinPhone = event.target.formGridNextOfKinPhone.value;\n      let nextOfKinEmail = event.target.formGridNextOfKinEmail.value;\n      const patientNextOfKin = {\n        nextOfKinName,\n        nextOfKinPhone,\n        nextOfKinEmail\n      };\n      console.log(`\n    adding patient nextOfKin item...\n    userId: ${userId},\n    selectedPatientId: ${selectedPatientId},\n    nextOfKinName: ${nextOfKinName},\n    nextOfKinPhone: ${nextOfKinPhone},\n    nextOfKinEmail: ${nextOfKinEmail},\n    `);\n      this.setState({\n        userAlert: \"adding patient nextOfKin item...\"\n      });\n      const requestBody = {\n        query: `\n        mutation {updatePatientNextOfKin(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{nextOfKinName:\"${nextOfKinName}\",nextOfKinEmail:\"${nextOfKinEmail}\",nextOfKinPhone:\"${nextOfKinPhone}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientNextOfKin._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.updatePatientNextOfKin);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert,\n          selectedPatient: resData.data.updatePatientNextOfKin\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientComplaintHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id; // if(this.context.user.role !== 'admin') {\n      //   console.log(\"No edit permission!!\");\n      //   return;\n      // }\n\n      console.log(\"UpdatePatientComplaintFormData:  \", event.target.formGridComplaintTitle.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let complaintTitle = event.target.formGridComplaintTitle.value;\n      let complaintDate = event.target.formGridComplaintDate.value;\n\n      if (event.target.formGridComplaintDateTodayCheckbox.checked === true) {\n        complaintDate = new Date().toISOString().slice(0, 10);\n      }\n\n      let complaintDescription = event.target.formGridComplaintDescription.value;\n      let complaintAnamnesis = event.target.formGridComplaintAnamnesis.value; // let complaintAttachmentName = event.target.formGridComplaintAttachmentName.value;\n\n      let complaintAttachmentFormat = event.target.formGridComplaintAttachmentFormat.value; // let complaintAttachmentPath = event.target.formGridComplaintAttachmentPath.value;\n\n      let complaintAttachmentPath = \"uploads/patients/\" + selectedPatientId + \"/complaints\";\n      let file = AuthContext._currentValue.file;\n      console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n      const config = {\n        bucketName: this.context.creds.s3.bucketName,\n        dirName: complaintAttachmentPath,\n        region: this.context.creds.s3.region,\n        accessKeyId: this.context.creds.s3.accessKeyId,\n        secretAccessKey: this.context.creds.s3.secretAccessKey\n      };\n      const ReactS3Client = new S3(config);\n      const newFileName = file.name;\n      const complaintAttachmentName = newFileName;\n      ReactS3Client.uploadFile(file, newFileName).then(data => {\n        console.log(data);\n        this.setState({\n          userAlert: \"attachment upload success!\"\n        });\n      }).catch(err => {\n        console.error(err);\n        this.setState({\n          userAlert: \"upload error:  \" + err\n        });\n      });\n      const patientComplaint = {\n        complaintTitle,\n        complaintDate,\n        complaintDescription,\n        complaintAnamnesis,\n        complaintAttachmentName,\n        complaintAttachmentFormat,\n        complaintAttachmentPath\n      };\n      console.log(`\n    adding patient complaint...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    complaintTitle: ${complaintTitle},\n    complaintDate: ${complaintDate},\n    complaintDescription: ${complaintDescription},\n    complaintAnamnesis: ${complaintAnamnesis},\n    complaintAttachmentName: ${complaintAttachmentName},\n    complaintAttachmentFormat: ${complaintAttachmentFormat},\n    complaintAttachmentPath: ${complaintAttachmentPath},\n    `);\n      this.setState({\n        userAlert: \"adding patient complaint...\"\n      });\n      const requestBody = {\n        query: `\n        mutation {updatePatientComplaint(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{complaintDate:\"${complaintDate}\",complaintTitle:\"${complaintTitle}\",complaintDescription:\"${complaintDescription}\",complaintAnamnesis:\"${complaintAnamnesis}\",complaintAttachmentName:\"${complaintAttachmentName}\",complaintAttachmentFormat:\"${complaintAttachmentFormat}\",complaintAttachmentPath:\"${complaintAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientComplaint._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.updatePatientComplaint);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert,\n          selectedPatient: resData.data.updatePatientComplaint\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientSurveyHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id; // if(this.context.user.role !== 'admin') {\n      //   console.log(\"No edit permission!!\");\n      //   return;\n      // }\n\n      console.log(\"UpdatePatientSurveyFormData:  \", event.target.formGridSurveyTitle.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let surveyDate = event.target.formGridSurveyDate.value;\n\n      if (event.target.formGridSurveyDateTodayCheckbox.checked === true) {\n        surveyDate = new Date().toISOString().slice(0, 10);\n      }\n\n      let surveyTitle = event.target.formGridSurveyTitle.value;\n      let surveyDescription = event.target.formGridSurveyDescription.value; // let surveyAttachmentName = event.target.formGridSurveyAttachmentName.value;\n\n      let surveyAttachmentFormat = event.target.formGridSurveyAttachmentFormat.value;\n      let surveyAttachmentPath = \"uploads/patients/\" + selectedPatientId + \"/surveys\"; // let surveyAttachmentPath = event.target.formGridSurveyAttachmentPath.value;\n\n      let file = AuthContext._currentValue.file;\n      console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n      const config = {\n        bucketName: this.context.creds.s3.bucketName,\n        dirName: surveyAttachmentPath,\n        region: this.context.creds.s3.region,\n        accessKeyId: this.context.creds.s3.accessKeyId,\n        secretAccessKey: this.context.creds.s3.secretAccessKey\n      };\n      const ReactS3Client = new S3(config);\n      const newFileName = file.name;\n      const surveyAttachmentName = newFileName;\n      ReactS3Client.uploadFile(file, newFileName).then(data => {\n        console.log(data);\n        this.setState({\n          userAlert: \"attachment upload success!\"\n        });\n      }).catch(err => {\n        console.error(err);\n        this.setState({\n          userAlert: \"upload error:  \" + err\n        });\n      });\n      const patientSurvey = {\n        surveyDate,\n        surveyTitle,\n        surveyDescription,\n        surveyAttachmentName,\n        surveyAttachmentFormat,\n        surveyAttachmentPath\n      };\n      console.log(`\n    adding patient survey...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    surveyDate: ${surveyDate},\n    surveyTitle: ${surveyTitle},\n    surveyDescription: ${surveyDescription},\n    surveyAttachmentName: ${surveyAttachmentName},\n    surveyAttachmentFormat: ${surveyAttachmentFormat},\n    surveyAttachmentPath: ${surveyAttachmentPath},\n    `);\n      this.setState({\n        userAlert: \"adding patient survey...\"\n      });\n      const requestBody = {\n        query: `\n        mutation {updatePatientSurvey(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{surveyDate:\"${surveyDate}\",surveyTitle:\"${surveyTitle}\",surveyDescription:\"${surveyDescription}\",surveyAttachmentName:\"${surveyAttachmentName}\",surveyAttachmentFormat:\"${surveyAttachmentFormat}\",surveyAttachmentPath:\"${surveyAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientSurvey._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.updatePatientSurvey);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert,\n          selectedPatient: resData.data.updatePatientSurvey\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientVitalsHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id; // if(this.context.user.role !== 'admin') {\n      //   console.log(\"No edit permission!!\");\n      //   return;\n      // }\n\n      console.log(\"UpdatePatientVitalsFormData:  \", event.target.formGridVitalsDate.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let vitalsDate = event.target.formGridVitalsDate.value;\n\n      if (event.target.formGridVitalsDateTodayCheckbox.checked === true) {\n        vitalsDate = new Date().toISOString().slice(0, 10);\n      }\n\n      let vitalsPr = event.target.formGridVitalsPr.value;\n      let vitalsBp1 = event.target.formGridVitalsBp1.value;\n      let vitalsBp2 = event.target.formGridVitalsBp2.value;\n      let vitalsRr = event.target.formGridVitalsRr.value;\n      let vitalsTemp = event.target.formGridVitalsTemp.value;\n      let vitalsPs02 = event.target.formGridVitalsPs02.value;\n      let vitalsHeight = event.target.formGridVitalsHeight.value;\n      let vitalsWeight = event.target.formGridVitalsWeight.value;\n      let vitalsBmi = event.target.formGridVitalsBmi.value;\n      let vitalsUrineType = event.target.formGridVitalsUrineType.value;\n      let vitalsUrineValue = event.target.formGridVitalsUrineValue.value;\n      const patientVitals = {};\n      console.log(`\n    adding patient vitals...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    `);\n      this.setState({\n        userAlert: \"adding patient vitals...\"\n      });\n      const requestBody = {\n        query: `\n        mutation {updatePatientVitals(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{vitalsDate:\"${vitalsDate}\",vitalsPr:${vitalsPr},vitalsBp1:${vitalsBp1},vitalsBp2:${vitalsBp2},vitalsRr:${vitalsRr},vitalsTemp:${vitalsTemp},vitalsPs02:${vitalsPs02},vitalsHeight:${vitalsHeight},vitalsWeight:${vitalsWeight},vitalsBmi:${vitalsBmi},vitalsUrineType:\"${vitalsUrineType}\",vitalsUrineValue:\"${vitalsUrineValue}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientVitals._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.updatePatientVitals);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert,\n          selectedPatient: resData.data.updatePatientVitals\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientExaminationHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id; // if(this.context.user.role !== 'admin') {\n      //   console.log(\"No edit permission!!\");\n      //   return;\n      // }\n\n      console.log(\"UpdatePatientExaminationFormData:  \", event.target.formGridExaminationArea.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let examinationDate = event.target.formGridExaminationDate.value;\n\n      if (event.target.formGridExaminationDateTodayCheckbox.checked === true) {\n        examinationDate = new Date().toISOString().slice(0, 10);\n      }\n\n      let examinationGeneral = event.target.formGridExaminationGeneral.value;\n      let examinationArea = undefined;\n\n      if (event.target.formGridExaminationAreaSelect === \"select\") {\n        examinationArea = event.target.formGridExaminationArea.value;\n      } else {\n        examinationArea = event.target.formGridExaminationAreaSelect.value;\n      }\n\n      let examinationType = event.target.formGridExaminationType.value;\n      let examinationMeasure = event.target.formGridExaminationMeasure.value;\n      let examinationValue = event.target.formGridExaminationValue.value;\n      let examinationDescription = event.target.formGridExaminationDescription.value;\n      let examinationFollowUp = event.target.formGridExaminationFollowUp.value; // let examinationAttachmentName = event.target.formGridExaminationAttachmentName.value;\n\n      let examinationAttachmentFormat = event.target.formGridExaminationAttachmentFormat.value;\n      let examinationAttachmentPath = \"uploads/patients/\" + selectedPatientId + \"/examinations\"; // let examinationAttachmentPath = event.target.formGridExaminationAttachmentPath.value;\n\n      let file = AuthContext._currentValue.file;\n      console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n      const config = {\n        bucketName: this.context.creds.s3.bucketName,\n        dirName: examinationAttachmentPath,\n        region: this.context.creds.s3.region,\n        accessKeyId: this.context.creds.s3.accessKeyId,\n        secretAccessKey: this.context.creds.s3.secretAccessKey\n      };\n      const ReactS3Client = new S3(config);\n      const newFileName = file.name;\n      const examinationAttachmentName = newFileName;\n      ReactS3Client.uploadFile(file, newFileName).then(data => {\n        console.log(data);\n        this.setState({\n          userAlert: \"attachment upload success!\"\n        });\n      }).catch(err => {\n        console.error(err);\n        this.setState({\n          userAlert: \"upload error:  \" + err\n        });\n      });\n      const patientExamination = {\n        examinationArea,\n        examinationGeneral,\n        examinationType,\n        examinationMeasure,\n        examinationValue,\n        examinationAttachmentName,\n        examinationAttachmentFormat,\n        examinationAttachmentPath\n      };\n      console.log(`\n    adding patient examination...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    examinationDate: ${examinationDate},\n    examinationGeneral: ${examinationGeneral},\n    examinationArea: ${examinationArea},\n    examinationType: ${examinationType},\n    examinationMeasure: ${examinationMeasure},\n    examinationValue: ${examinationValue},\n    examinationDescription: ${examinationDescription},\n    examinationFollowUp: ${examinationFollowUp},\n    examinationAttachmentName: ${examinationAttachmentName},\n    examinationAttachmentFormat: ${examinationAttachmentFormat},\n    examinationAttachmentPath: ${examinationAttachmentPath},\n    `);\n      this.setState({\n        userAlert: \"adding patient examination...\"\n      });\n      const requestBody = {\n        query: `\n        mutation {updatePatientExamination(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{examinationDate:\"${examinationDate}\",examinationGeneral:\"${examinationGeneral}\",examinationArea:\"${examinationArea}\",examinationType:\"${examinationType}\",examinationMeasure:\"${examinationMeasure}\",examinationValue:\"${examinationValue}\",examinationDescription:\"${examinationDescription}\",examinationFollowUp:${examinationFollowUp},examinationAttachmentName:\"${examinationAttachmentName}\",examinationAttachmentFormat:\"${examinationAttachmentFormat}\",examinationAttachmentPath:\"${examinationAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientExamination._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.updatePatientExamination);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert,\n          selectedPatient: resData.data.updatePatientExamination\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientHistoryHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id; // if(this.context.user.role !== 'admin') {\n      //   console.log(\"No edit permission!!\");\n      //   return;\n      // }\n\n      console.log(\"UpdatePatientHistoryFormData:  \", event.target.formGridHistoryTitle.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let historyType = event.target.formGridHistoryType.value;\n      let historyDate = event.target.formGridHistoryDate.value;\n\n      if (event.target.formGridHistoryDateTodayCheckbox.checked === true) {\n        historyDate = new Date().toISOString().slice(0, 10);\n      }\n\n      let historyTitle = event.target.formGridHistoryTitle.value;\n      let historyDescription = event.target.formGridHistoryDescription.value; // let historyAttachmentName = event.target.formGridHistoryAttachmentName.value;\n\n      let historyAttachmentFormat = event.target.formGridHistoryAttachmentFormat.value;\n      let historyAttachmentPath = \"uploads/patients/\" + selectedPatientId + \"/history\"; // let historyAttachmentPath = event.target.formGridHistoryAttachmentPath.value;\n\n      let file = AuthContext._currentValue.file;\n      console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n      const config = {\n        bucketName: this.context.creds.s3.bucketName,\n        dirName: historyAttachmentPath,\n        region: this.context.creds.s3.region,\n        accessKeyId: this.context.creds.s3.accessKeyId,\n        secretAccessKey: this.context.creds.s3.secretAccessKey\n      };\n      const ReactS3Client = new S3(config);\n      const newFileName = file.name;\n      const historyAttachmentName = newFileName;\n      ReactS3Client.uploadFile(file, newFileName).then(data => {\n        console.log(data);\n        this.setState({\n          userAlert: \"attachment upload success!\"\n        });\n      }).catch(err => {\n        console.error(err);\n        this.setState({\n          userAlert: \"upload error:  \" + err\n        });\n      });\n      const patientHistory = {\n        historyType,\n        historyDate,\n        historyTitle,\n        historyDescription,\n        historyAttachmentName,\n        historyAttachmentFormat,\n        historyAttachmentPath\n      };\n      console.log(`\n    adding patient history...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    historyType: ${historyType},\n    historyDate: ${historyDate},\n    historyTitle: ${historyTitle},\n    historyDescription: ${historyDescription},\n    historyAttachmentName: ${historyAttachmentName},\n    historyAttachmentFormat: ${historyAttachmentFormat},\n    historyAttachmentPath: ${historyAttachmentPath},\n    `);\n      this.setState({\n        userAlert: \"adding patient history...\"\n      });\n      const requestBody = {\n        query: `\n        mutation {updatePatientHistory(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{historyTitle:\"${historyTitle}\",historyType:\"${historyType}\",historyDate:\"${historyDate}\",historyDescription:\"${historyDescription}\",historyAttachmentName:\"${historyAttachmentName}\",historyAttachmentFormat:\"${historyAttachmentFormat}\",historyAttachmentPath:\"${historyAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientHistory._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.updatePatientHistory);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert,\n          selectedPatient: resData.data.updatePatientHistory\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientAllergiesHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id; // if(this.context.user.role !== 'admin') {\n      //   console.log(\"No edit permission!!\");\n      //   return;\n      // }\n\n      console.log(\"UpdatePatientAllergiesFormData:  \", event.target.formGridAllergiesTitle.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let allergiesTitle = event.target.formGridAllergiesTitle.value;\n      let allergiesType = undefined;\n\n      if (event.target.formGridAllergiesTypeSelect === \"select\") {\n        allergiesType = event.target.formGridAllergiesType.value;\n      } else {\n        allergiesType = event.target.formGridAllergiesTypeSelect.value;\n      }\n\n      let allergiesDescription = event.target.formGridAllergiesDescription.value; // let allergiesAttachmentName = event.target.formGridAllergiesAttachmentName.value;\n\n      let allergiesAttachmentFormat = event.target.formGridAllergiesAttachmentFormat.value;\n      let allergiesAttachmentPath = \"uploads/patients/\" + selectedPatientId + \"/allergies\"; // let allergiesAttachmentPath = event.target.formGridAllergiesAttachmentPath.value;\n\n      let file = AuthContext._currentValue.file;\n      console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n      const config = {\n        bucketName: this.context.creds.s3.bucketName,\n        dirName: allergiesAttachmentPath,\n        region: this.context.creds.s3.region,\n        accessKeyId: this.context.creds.s3.accessKeyId,\n        secretAccessKey: this.context.creds.s3.secretAccessKey\n      };\n      const ReactS3Client = new S3(config);\n      const newFileName = file.name;\n      const allergiesAttachmentName = newFileName;\n      ReactS3Client.uploadFile(file, newFileName).then(data => {\n        console.log(data);\n        this.setState({\n          userAlert: \"attachment upload success!\"\n        });\n      }).catch(err => {\n        console.error(err);\n        this.setState({\n          userAlert: \"upload error:  \" + err\n        });\n      });\n      const patientAllergies = {\n        allergiesTitle,\n        allergiesType,\n        allergiesDescription,\n        allergiesAttachmentName,\n        allergiesAttachmentFormat,\n        allergiesAttachmentPath\n      };\n      console.log(`\n    adding patient allergies...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    allergiesTitle: ${allergiesTitle},\n    allergiesType: ${allergiesType},\n    allergiesDescription: ${allergiesDescription},\n    allergiesAttachmentName: ${allergiesAttachmentName},\n    allergiesAttachmentFormat: ${allergiesAttachmentFormat},\n    allergiesAttachmentPath: ${allergiesAttachmentPath},\n    `);\n      this.setState({\n        userAlert: \"adding patient allergies...\"\n      });\n      const requestBody = {\n        query: `\n        mutation {updatePatientAllergies(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{allergiesTitle:\"${allergiesTitle}\",allergiesType:\"${allergiesType}\", allergiesDescription:\"${allergiesDescription}\",allergiesAttachmentName:\"${allergiesAttachmentName}\",allergiesAttachmentFormat:\"${allergiesAttachmentFormat}\",allergiesAttachmentPath:\"${allergiesAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientAllergies._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.updatePatientAllergies);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert,\n          selectedPatient: resData.data.updatePatientAllergies\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientMedicationHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id; // if(this.context.user.role !== 'admin') {\n      //   console.log(\"No edit permission!!\");\n      //   return;\n      // }\n\n      console.log(\"UpdatePatientMedicationFormData:  \", event.target.formGridMedicationTitle.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let medicationTitle = event.target.formGridMedicationTitle.value;\n      let medicationType = event.target.formGridMedicationType.value;\n      let medicationDescription = event.target.formGridMedicationDescription.value; // let medicationAttachmentName = event.target.formGridMedicationAttachmentName.value;\n\n      let medicationAttachmentFormat = event.target.formGridMedicationAttachmentFormat.value;\n      let medicationAttachmentPath = \"uploads/patients/\" + selectedPatientId + \"/medication\"; // let medicationAttachmentPath = event.target.formGridMedicationAttachmentPath.value;\n\n      let file = AuthContext._currentValue.file;\n      console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n      const config = {\n        bucketName: this.context.creds.s3.bucketName,\n        dirName: medicationAttachmentPath,\n        region: this.context.creds.s3.region,\n        accessKeyId: this.context.creds.s3.accessKeyId,\n        secretAccessKey: this.context.creds.s3.secretAccessKey\n      };\n      const ReactS3Client = new S3(config);\n      const newFileName = file.name;\n      const medicationAttachmentName = newFileName;\n      ReactS3Client.uploadFile(file, newFileName).then(data => {\n        console.log(data);\n        this.setState({\n          userAlert: \"attachment upload success!\"\n        });\n      }).catch(err => {\n        console.error(err);\n        this.setState({\n          userAlert: \"upload error:  \" + err\n        });\n      });\n      const patientMedication = {\n        medicationTitle,\n        medicationType,\n        medicationDescription,\n        medicationAttachmentName,\n        medicationAttachmentFormat,\n        medicationAttachmentPath\n      };\n      console.log(`\n    adding patient medication...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    medicationTitle: ${medicationTitle},\n    medicationType: ${medicationType},\n    medicationDescription: ${medicationDescription},\n    medicationAttachmentName: ${medicationAttachmentName},\n    medicationAttachmentFormat: ${medicationAttachmentFormat},\n    medicationAttachmentPath: ${medicationAttachmentPath},\n    `);\n      this.setState({\n        userAlert: \"adding patient medication...\"\n      });\n      const requestBody = {\n        query: `\n      mutation {updatePatientMedication(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{medicationTitle:\"${medicationTitle}\",medicationType:\"${medicationType}\" medicationDescription:\"${medicationDescription}\",medicationAttachmentName:\"${medicationAttachmentName}\",medicationAttachmentFormat:\"${medicationAttachmentFormat}\",medicationAttachmentPath:\"${medicationAttachmentPath}\"})\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientMedication._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.updatePatientMedication);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert,\n          selectedPatient: resData.data.updatePatientMedication\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientInvestigationHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id; // if(this.context.user.role !== 'admin') {\n      //   console.log(\"No edit permission!!\");\n      //   return;\n      // }\n\n      console.log(\"UpdatePatientInvestigationFormData:  \", event.target.formGridInvestigationTitle.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let investigationDate = event.target.formGridInvestigationDate.value;\n\n      if (event.target.formGridInvestigationDateTodayCheckbox.checked === true) {\n        investigationDate = new Date().toISOString().slice(0, 10);\n      }\n\n      let investigationTitle = event.target.formGridInvestigationTitle.value;\n      let investigationType = undefined;\n\n      if (event.target.formGridInvestigationTypeSelect === \"select\") {\n        investigationType = event.target.formGridInvestigationType.value;\n      } else {\n        investigationType = event.target.formGridInvestigationTypeSelect.value;\n      }\n\n      let investigationDescription = event.target.formGridInvestigationDescription.value; // let investigationAttachmentName = event.target.formGridInvestigationAttachmentName.value;\n\n      let investigationAttachmentFormat = event.target.formGridInvestigationAttachmentFormat.value;\n      let investigationAttachmentPath = \"uploads/patients/\" + selectedPatientId + \"/investigation\"; // let investigationAttachmentPath = event.target.formGridInvestigationAttachmentPath.value;\n\n      let file = AuthContext._currentValue.file;\n      console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n      const config = {\n        bucketName: this.context.creds.s3.bucketName,\n        dirName: investigationAttachmentPath,\n        region: this.context.creds.s3.region,\n        accessKeyId: this.context.creds.s3.accessKeyId,\n        secretAccessKey: this.context.creds.s3.secretAccessKey\n      };\n      const ReactS3Client = new S3(config);\n      const newFileName = file.name;\n      const investigationAttachmentName = newFileName;\n      ReactS3Client.uploadFile(file, newFileName).then(data => {\n        console.log(data);\n        this.setState({\n          userAlert: \"attachment upload success!\"\n        });\n      }).catch(err => {\n        console.error(err);\n        this.setState({\n          userAlert: \"upload error:  \" + err\n        });\n      });\n      const patientInvestigation = {\n        investigationDate,\n        investigationTitle,\n        investigationType,\n        investigationDescription,\n        investigationAttachmentName,\n        investigationAttachmentFormat,\n        investigationAttachmentPath\n      };\n      console.log(`\n    adding patient investigation...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    investigationDate: ${investigationDate},\n    investigationTitle: ${investigationTitle},\n    investigationType: ${investigationType},\n    investigationDescription: ${investigationDescription},\n    investigationAttachmentName: ${investigationAttachmentName},\n    investigationAttachmentFormat: ${investigationAttachmentFormat},\n    investigationAttachmentPath: ${investigationAttachmentPath},\n    `);\n      this.setState({\n        userAlert: \"adding patient investigation...\"\n      });\n      const requestBody = {\n        query: `\n        mutation {updatePatientInvestigation(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{investigationDate:\"${investigationDate}\",investigationTitle:\"${investigationTitle}\",investigationType:\"${investigationType}\",investigationDescription:\"${investigationDescription}\",investigationAttachmentName:\"${investigationAttachmentName}\",investigationAttachmentFormat:\"${investigationAttachmentFormat}\",investigationAttachmentPath:\"${investigationAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientInvestigation._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.updatePatientInvestigation);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert,\n          selectedPatient: resData.data.updatePatientInvestigation\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientDiagnosisHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id; // if(this.context.user.role !== 'admin') {\n      //   console.log(\"No edit permission!!\");\n      //   return;\n      // }\n\n      console.log(\"UpdatePatientDiagnosisFormData:  \", event.target.formGridDiagnosisTitle.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let diagnosisDate = event.target.formGridDiagnosisDate.value;\n\n      if (event.target.formGridDiagnosisDateTodayCheckbox.checked === true) {\n        diagnosisDate = new Date().toISOString().slice(0, 10);\n      }\n\n      let diagnosisTitle = event.target.formGridDiagnosisTitle.value;\n      let diagnosisType = event.target.formGridDiagnosisType.value;\n      let diagnosisDescription = event.target.formGridDiagnosisDescription.value; // let diagnosisAttachmentName = event.target.formGridDiagnosisAttachmentName.value;\n\n      let diagnosisAttachmentFormat = event.target.formGridDiagnosisAttachmentFormat.value;\n      let diagnosisAttachmentPath = \"uploads/patients/\" + selectedPatientId + \"/diagnosis\"; // let diagnosisAttachmentPath = event.target.formGridDiagnosisAttachmentPath.value;\n\n      let file = AuthContext._currentValue.file;\n      console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n      const config = {\n        bucketName: this.context.creds.s3.bucketName,\n        dirName: diagnosisAttachmentPath,\n        region: this.context.creds.s3.region,\n        accessKeyId: this.context.creds.s3.accessKeyId,\n        secretAccessKey: this.context.creds.s3.secretAccessKey\n      };\n      const ReactS3Client = new S3(config);\n      const newFileName = file.name;\n      const diagnosisAttachmentName = newFileName;\n      ReactS3Client.uploadFile(file, newFileName).then(data => {\n        console.log(data);\n        this.setState({\n          userAlert: \"attachment upload success!\"\n        });\n      }).catch(err => {\n        console.error(err);\n        this.setState({\n          userAlert: \"upload error:  \" + err\n        });\n      });\n      const patientDiagnosis = {\n        diagnosisDate,\n        diagnosisTitle,\n        diagnosisType,\n        diagnosisDescription,\n        diagnosisAttachmentName,\n        diagnosisAttachmentFormat,\n        diagnosisAttachmentPath\n      };\n      console.log(`\n    adding patient diagnosis...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    diagnosisDate: ${diagnosisDate},\n    diagnosisTitle: ${diagnosisTitle},\n    diagnosisType: ${diagnosisType},\n    diagnosisDescription: ${diagnosisDescription},\n    diagnosisAttachmentName: ${diagnosisAttachmentName},\n    diagnosisAttachmentFormat: ${diagnosisAttachmentFormat},\n    diagnosisAttachmentPath: ${diagnosisAttachmentPath},\n    `);\n      this.setState({\n        userAlert: \"adding patient diagnosis...\"\n      });\n      const requestBody = {\n        query: `\n        mutation {updatePatientDiagnosis(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{diagnosisDate:\"${diagnosisDate}\",diagnosisTitle:\"${diagnosisTitle}\",diagnosisType:\"${diagnosisType}\",diagnosisDescription:\"${diagnosisDescription}\",diagnosisAttachmentName:\"${diagnosisAttachmentName}\",diagnosisAttachmentFormat:\"${diagnosisAttachmentFormat}\",diagnosisAttachmentPath:\"${diagnosisAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientDiagnosis._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.updatePatientDiagnosis);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert,\n          selectedPatient: resData.data.updatePatientDiagnosis\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientTreatmentHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id; // if(this.context.user.role !== 'admin') {\n      //   console.log(\"No edit permission!!\");\n      //   return;\n      // }\n\n      console.log(\"UpdatePatientTreatmentFormData:  \", event.target.formGridTreatmentTitle.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let treatmentDate = event.target.formGridTreatmentDate.value;\n\n      if (event.target.formGridTreatmentDateTodayCheckbox.checked === true) {\n        treatmentDate = new Date().toISOString().slice(0, 10);\n      }\n\n      let treatmentTitle = event.target.formGridTreatmentTitle.value;\n      let treatmentDescription = event.target.formGridTreatmentDescription.value;\n      let treatmentDose = event.target.formGridTreatmentDose.value;\n      let treatmentFrequency = event.target.formGridTreatmentFrequency.value;\n      let treatmentType = undefined;\n\n      if (event.target.formGridInvestigationTypeSelect === \"select\") {\n        treatmentType = event.target.formGridTreatmentType.value;\n      } else {\n        treatmentType = event.target.formGridTreatmentTypeSelect.value;\n      } // let treatmentAttachmentName = event.target.formGridTreatmentAttachmentName.value;\n\n\n      let treatmentAttachmentFormat = event.target.formGridTreatmentAttachmentFormat.value;\n      let treatmentAttachmentPath = \"uploads/patients/\" + selectedPatientId + \"/treatment\"; // let treatmentAttachmentPath = event.target.formGridTreatmentAttachmentPath.value;\n\n      let file = AuthContext._currentValue.file;\n      console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n      const config = {\n        bucketName: this.context.creds.s3.bucketName,\n        dirName: treatmentAttachmentPath,\n        region: this.context.creds.s3.region,\n        accessKeyId: this.context.creds.s3.accessKeyId,\n        secretAccessKey: this.context.creds.s3.secretAccessKey\n      };\n      const ReactS3Client = new S3(config);\n      const newFileName = file.name;\n      const treatmentAttachmentName = newFileName;\n      ReactS3Client.uploadFile(file, newFileName).then(data => {\n        console.log(data);\n        this.setState({\n          userAlert: \"attachment upload success!\"\n        });\n      }).catch(err => {\n        console.error(err);\n        this.setState({\n          userAlert: \"upload error:  \" + err\n        });\n      });\n      const patientTreatment = {\n        treatmentDate,\n        treatmentTitle,\n        treatmentDescription,\n        treatmentDose,\n        treatmentFrequency,\n        treatmentType,\n        treatmentAttachmentName,\n        treatmentAttachmentFormat,\n        treatmentAttachmentPath\n      };\n      console.log(`\n    adding patient treatment...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    treatmentDate: ${treatmentDate},\n    treatmentTitle: ${treatmentTitle},\n    treatmentDescription: ${treatmentDescription},\n    treatmentDose: ${treatmentDose},\n    treatmentFrequency: ${treatmentFrequency},\n    treatmentType: ${treatmentType},\n    treatmentAttachmentName: ${treatmentAttachmentName},\n    treatmentAttachmentFormat: ${treatmentAttachmentFormat},\n    treatmentAttachmentPath: ${treatmentAttachmentPath},\n    `);\n      this.setState({\n        userAlert: \"adding patient treatment...\"\n      });\n      const requestBody = {\n        query: `\n        mutation {updatePatientTreatment(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{treatmentDate:\"${treatmentDate}\",treatmentTitle:\"${treatmentTitle}\",treatmentType:\"${treatmentType}\",treatmentDescription:\"${treatmentDescription}\",treatmentDose:\"${treatmentDose}\",treatmentFrequency:\"${treatmentFrequency}\",treatmentAttachmentName:\"${treatmentAttachmentName}\",treatmentAttachmentFormat:\"${treatmentAttachmentFormat}\",treatmentAttachmentPath:\"${treatmentAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientTreatment._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.updatePatientTreatment);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert,\n          selectedPatient: resData.data.updatePatientTreatment\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientBillingHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id; // if(this.context.user.role !== 'admin') {\n      //   console.log(\"No edit permission!!\");\n      //   return;\n      // }\n\n      console.log(\"UpdatePatientBillingFormData:  \", event.target.formGridBillingTitle.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let billingDate = event.target.formGridBillingDate.value;\n\n      if (event.target.formGridBillingDateTodayCheckbox.checked === true) {\n        billingDate = new Date().toISOString().slice(0, 10);\n      }\n\n      let billingTitle = event.target.formGridBillingTitle.value;\n      let billingType = event.target.formGridBillingType.value;\n      let billingDescription = event.target.formGridBillingDescription.value;\n      let billingAmount = event.target.formGridBillingAmount.value;\n      let billingPaid = event.target.formGridBillingPaid.value;\n      let billingNotes = event.target.formGridBillingNotes.value; // let billingAttachmentName = event.target.formGridBillingAttachmentName.value;\n\n      let billingAttachmentFormat = event.target.formGridBillingAttachmentFormat.value;\n      let billingAttachmentPath = event.target.formGridBillingAttachmentPath.value;\n      let file = AuthContext._currentValue.file;\n      console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n      const config = {\n        bucketName: this.context.creds.s3.bucketName,\n        dirName: billingAttachmentPath,\n        region: this.context.creds.s3.region,\n        accessKeyId: this.context.creds.s3.accessKeyId,\n        secretAccessKey: this.context.creds.s3.secretAccessKey\n      };\n      const ReactS3Client = new S3(config);\n      const newFileName = file.name;\n      const billingAttachmentName = newFileName;\n      ReactS3Client.uploadFile(file, newFileName).then(data => {\n        console.log(data);\n        this.setState({\n          userAlert: \"attachment upload success!\"\n        });\n      }).catch(err => {\n        console.error(err);\n        this.setState({\n          userAlert: \"upload error:  \" + err\n        });\n      });\n      const patientBilling = {\n        billingDate,\n        billingTitle,\n        billingType,\n        billingDescription,\n        billingAmount,\n        billingPaid,\n        billingNotes,\n        billingAttachmentName,\n        billingAttachmentFormat,\n        billingAttachmentPath\n      };\n      console.log(`\n    adding patient billing...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    billingDate: ${billingDate},\n    billingTitle: ${billingTitle},\n    billingType: ${billingType},\n    billingDescription: ${billingDescription},\n    billingAmount: ${billingAmount},\n    billingPaid: ${billingPaid},\n    billingNotes: ${billingNotes},\n    billingAttachmentName: ${billingAttachmentName},\n    billingAttachmentFormat: ${billingAttachmentFormat},\n    billingAttachmentPath: ${billingAttachmentPath},\n    `);\n      this.setState({\n        userAlert: \"adding patient billing...\"\n      });\n      const requestBody = {\n        query: `\n        mutation {updatePatientBilling(userId:\\\"${userId}\\\", patientId:\\\"${selectedPatientId}\\\",patientInput:{billingDate:\\\"${billingDate}\\\",billingTitle:\\\"${billingTitle}\\\",billingType:\\\"${billingType}\\\",billingDescription:\\\"${billingDescription}\\\",billingAmount:${billingAmount},billingPaid:${billingPaid},billingNotes:\\\"${billingNotes}\\\",billingAttachmentName:\\\"${billingAttachmentName}\\\",billingAttachmentFormat:\\\"${billingAttachmentFormat}\\\",billingAttachmentPath:\\\"${billingAttachmentPath}\\\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientBilling._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.updatePatientBilling);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert,\n          selectedPatient: resData.data.updatePatientBilling\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientAttachmentHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id; // if(this.context.user.role !== 'admin') {\n      //   console.log(\"No edit permission!!\");\n      //   return;\n      // }\n\n      console.log(`\n        UpdatePatientAttachmentFormData:\n      `);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      }); // let attachmentName = event.target.formGridPatientAttachmentName.value;\n\n      let attachmentFormat = event.target.formGridPatientAttachmentFormat.value;\n      let attachmentPath = event.target.formGridPatientAttachmentPath.value;\n      let file = AuthContext._currentValue.file;\n      console.log(`\n      uploading to s3...\n      file.name: ${file.name},\n      AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n      `);\n      const config = {\n        bucketName: this.context.creds.s3.bucketName,\n        dirName: attachmentPath,\n        region: this.context.creds.s3.region,\n        accessKeyId: this.context.creds.s3.accessKeyId,\n        secretAccessKey: this.context.creds.s3.secretAccessKey\n      };\n      const ReactS3Client = new S3(config);\n      const newFileName = file.name;\n      const attachmentName = newFileName;\n      ReactS3Client.uploadFile(file, newFileName).then(data => {\n        console.log(data);\n        this.setState({\n          userAlert: \"attachment upload success!\"\n        });\n      }).catch(err => {\n        console.error(err);\n        this.setState({\n          userAlert: \"upload error:  \" + err\n        });\n      });\n\n      if (attachmentName.trim().length === 0 || attachmentFormat.trim().length === 0 || attachmentPath.trim().length === 0) {\n        console.log(\"blank fields detected!!!...Please try again...\");\n        this.setState({\n          userAlert: \"blank fields detected!!!...Please try again...\"\n        });\n        return;\n      }\n\n      this.setState({\n        userAlert: \"adding patient attachment\"\n      });\n      const requestBody = {\n        query: `\n                    mutation {updatePatientAttachment(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{attachmentName:\"${attachmentName}\",attachmentFormat:\"${attachmentFormat}\",attachmentPath:\"${attachmentFormat}\"})\n                    {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n            `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientAttachment._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.updatePatientAttachment);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert,\n          selectedPatient: resData.data.updatePatientAttachment\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientNoteHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id; // if(this.context.user.role !== 'admin') {\n      //   console.log(\"No edit permission!!\");\n      //   return;\n      // }\n\n      console.log(`\n      UpdatePatientNoteFormData:\n      ${event.target.formGridNote.value}\n    `);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let note = event.target.formGridNote.value;\n\n      if (note.trim().length === 0) {\n        console.log(\"Can't Submit a blank form!!!...Please try again...\");\n        this.setState({\n          userAlert: \"Can't Submit a blank form!!!...Please try again...\"\n        });\n        return;\n      }\n\n      this.setState({\n        userAlert: \"adding patient note\"\n      });\n      const requestBody = {\n        query: `\n              mutation {updatePatientNotes(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{notes:\"${note}\"})\n              {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n            `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientNotes._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.updatePatientNotes);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert,\n          selectedPatient: resData.data.updatePatientNotes\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientTagHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id; // if(this.context.user.role !== 'admin') {\n      //   console.log(\"No edit permission!!\");\n      //   return;\n      // }\n\n      console.log(`\n      UpdatePatientTagFormData:\n      ${event.target.formGridTag.value}\n    `);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let tag = event.target.formGridTag.value;\n\n      if (tag.trim().length === 0) {\n        console.log(\"Can't Submit a blank form!!!...Please try again...\");\n        this.setState({\n          userAlert: \"Can't Submit a blank form!!!...Please try again...\"\n        });\n        return;\n      }\n\n      const requestBody = {\n        query: `\n                    mutation {updatePatientTags(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{tag:\"${tag}\"})\n                    {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n            `\n      };\n      this.setState({\n        userAlert: \"adding patient tag\"\n      });\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientTags._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.updatePatientTags);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert,\n          selectedPatient: resData.data.updatePatientTags\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.modalConfirmSearchHandler = event => {\n      console.log(\"SearchPatientForm:  \");\n      let userId = this.context.userId;\n      console.log(\"SearchPatientFormData:  \", event.target.formBasicField.value);\n      this.setState({\n        searching: false\n      });\n      let field = null;\n      let query = event.target.formBasicQuery.value;\n\n      if (event.target.formBasicFieldSelect.value === \"select\") {\n        field = event.target.formBasicField.value;\n      } else {\n        field = event.target.formBasicFieldSelect.value;\n      }\n\n      this.setState({\n        patientSearchField: field,\n        patientSearchQuery: query\n      });\n\n      if (field.trim().length === 0 || query.trim().length === 0) {\n        console.log(\"blank fields detected!!!...Please try again...\");\n        return;\n      }\n\n      const search = {\n        field,\n        query\n      };\n      console.log(\"Searching for Patient:  \", JSON.stringify(search));\n      this.setState({\n        userAlert: \"Searching for Patient:  \"\n      });\n      const requestBody = {\n        query: `\n        query {\n          getPatientField(userId: \"${userId}\", field: \"${field}\", query: \"${query}\" )\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n      };\n      const token = this.context.token;\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n        const responseAlert = JSON.stringify(resData.data).slice(2, 15);\n        this.setState({\n          userAlert: responseAlert\n        });\n        const searchPatients = resData.data.getPatientField;\n        this.setState({\n          searchPatients: searchPatients\n        });\n        console.log(\"state.searchPatients:  \", this.state.searchPatients); // this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.modalConfirmSearchIdHandler = event => {\n      console.log(\"SearchPatientIdFormData\");\n      let userId = this.context.userId;\n      this.setState({\n        searching: false\n      });\n      const patientId = event.target.formBasicId.value;\n      const requestBody = {\n        query: `\n      query {getPatientId(userId:\\\"${userId}\\\",patientId:\\\"${patientId}\\\")\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{_id,title,time,location},consultant{date,reference{_id,name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `\n      };\n      const token = this.context.token;\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        const searchPatients = resData.data.getPatientId;\n        this.setState({\n          searchPatients: [searchPatients]\n        });\n        console.log(\"state.searchPatients:  \", this.state.searchPatients); // this.fetchUsers();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.modalConfirmSearchVisitHandler = event => {\n      console.log(\"SearchPatientVisitFormData\");\n      let userId = this.context.userId;\n      this.setState({\n        searching: false\n      });\n      const requestBody = {\n        query: `\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{_id,title,time,location,date},consultant{date,reference{_id,name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `\n      };\n      const token = this.context.token;\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n        const searchPatients = resData.data.getPatientId;\n        this.setState({\n          searchPatients: searchPatients\n        });\n        console.log(\"state.searchPatients:  \", this.state.searchPatients); // this.fetchUsers();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.modalConfirmSearchNameHandler = event => {\n      console.log(\"SearchPatientNameFormData:\", event.target.formBasicName.value);\n      let userId = this.context.userId;\n      this.setState({\n        searching: false\n      });\n      let patients = this.state.patients;\n      const regex = new RegExp(event.target.formBasicName.value, \"i\");\n      console.log(`\n    regex: ${regex},\n    `);\n      let result = patients.filter(patient => patient.name.match(regex));\n      console.log(`\n      result: ${JSON.stringify(result)}\n      `);\n      this.setState({\n        searchPatients: result\n      });\n    };\n\n    this.getPatientVisit = event => {\n      const selectedPatient = this.state.selectedPatient;\n      event.preventDefault();\n      console.log(`\n        getUserVisit function:\n        selectedPatient.consultant: ${JSON.stringify(selectedPatient.consultant)},\n        selectedPatient.complaints: ${JSON.stringify(selectedPatient.complaints)},\n        visitDate: ${new Date(event.target.formBasicVisitDate.value)},\n        complaintDate: ${new Date(1580515200 * 1000)},\n      `);\n      let visitDate = new Date(event.target.formBasicVisitDate.value).toISOString().substring(0, 10);\n      let visitSurveys = selectedPatient.surveys.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n      let visitConsultants = selectedPatient.consultant.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n      let visitComplaints = selectedPatient.complaints.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate); // let visitSurveys = selectedPatient.surveys.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString() === visitDate);\n\n      let visitVitals = selectedPatient.vitals.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n      let visitExaminations = selectedPatient.examination.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n      let visitHistory = selectedPatient.history.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n      let visitInvestigations = selectedPatient.investigation.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n      let visitDiagnosis = selectedPatient.diagnosis.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n      let visitTreatments = selectedPatient.treatment.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n      let visitBilling = selectedPatient.billing.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n      const visit = {\n        date: visitDate,\n        patientName: this.context.selectedPatient.name,\n        consultant: visitConsultants,\n        complaint: visitComplaints,\n        examination: visitExaminations,\n        survey: visitSurveys,\n        vitals: visitVitals,\n        history: visitHistory,\n        investigation: visitInvestigations,\n        diagnosis: visitDiagnosis,\n        treatment: visitTreatments,\n        billing: visitBilling\n      };\n      console.log(`\n        visit: ${JSON.stringify(visit)},\n        `);\n      this.context.visit = visit;\n      this.setState({\n        visit: visit\n      });\n    };\n\n    this.modalCancelHandler = () => {\n      this.setState({\n        creating: false,\n        updating: false,\n        searching: false,\n        selectedPatient: null\n      });\n    };\n\n    this.fetchPatientsAsc = () => {\n      console.log(\"fetch patients function:  \");\n      const userId = this.context.userId;\n      const token = this.context.token; // this.setState({ isLoading: true });\n\n      const requestBody = {\n        query: `\n          query {patientsNameAsc(userId:\"${userId}\")\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{_id,title,time,location,date},consultant{date,reference{_id,name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n        `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"resData\", resData);\n        const patients = resData.data.patientsNameAsc;\n        console.log(patients);\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.context.patients = patients;\n        this.setState({\n          patients: patients\n        }); // if (this.isActive) {\n        //   this.setState({ patients: patients, isLoading: false });\n        // }\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        }); // if (this.isActive) {\n        //   this.setState({ isLoading: false });\n        // }\n      });\n    };\n\n    this.fetchPatientsDesc = () => {\n      console.log(\"fetch patients function:  \");\n      const userId = this.context.userId;\n      const token = this.context.token; // this.setState({ isLoading: true });\n\n      const requestBody = {\n        query: `\n          query {patientsNameDesc(userId:\"${userId}\")\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{_id,title,time,location,date},consultant{date,reference{_id,name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n        `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"resData\", resData);\n        const patients = resData.data.patientsNameDesc;\n        console.log(patients);\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.context.patients = patients; // if (this.isActive) {\n        //   this.setState({ patients: patients, isLoading: false });\n        // }\n\n        this.setState({\n          patients: patients\n        });\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        }); // if (this.isActive) {\n        //   this.setState({ isLoading: false });\n        // }\n      });\n    };\n\n    this.modalDeleteHandler = () => {\n      console.log(\"deleting patient...selectedPatient:  \", this.context.selectedPatient);\n      const selectedPatientId = this.context.selectedPatient._id;\n      const userId = this.context.selectedUser._id;\n\n      if (this.context.user.role !== 'admin') {\n        console.log(\"Not the Admin! No edit permission!!\");\n      }\n\n      this.setState({\n        deleting: true\n      });\n      const requestBody = {\n        query: `\n          mutation {deletePatient(userId:\"${userId}\",patientId:\"${selectedPatientId}\")\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n        `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + this.context.token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatient;\n        console.log(deletedPatient);\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        let deletedPatientId = deletedPatient._id;\n        deletedPatient = this.state.patients.find(e => e._id === deletedPatientId);\n        const deletedPatientPos = this.state.patients.indexOf(deletedPatient);\n        const slicedArray = this.state.patients.splice(deletedPatientPos, 1);\n        console.log(\"deletedPatient:  \", JSON.stringify(deletedPatient), \"  deletedUserPos:  \", deletedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.setState({\n          deleting: false\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n\n        if (this.isActive) {\n          this.setState({\n            deleting: false\n          });\n        }\n      });\n    };\n\n    this.deletePatientInsuranceItem = props => {\n      let token = this.context.token;\n      let userId = this.context.userId;\n      let patientId = this.state.selectedPatient._id;\n      console.log(`\n      delete patient insurance item:\n      props: ${JSON.stringify(props)},\n      token: ${token},\n      userId: ${userId},\n      patientId: ${patientId},\n      `);\n      const requestBody = {\n        query: `\n         mutation {deletePatientInsurance (userId:\\\"${userId}\\\", patientId:\\\"${patientId}\\\",insuranceCompany:\\\"${props.company}\\\",insuranceNumber:\"${props.number}\")\n         {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatientInsurance;\n        console.log(deletedPatient);\n        const updatedPatientId = resData.data.deletePatientInsurance._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.deletePatientInsurance);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        }); // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientInsurance})\n\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.deletePatientConsultantItem = props => {\n      let token = this.context.token;\n      let userId = this.context.userId;\n      let patientId = this.state.selectedPatient._id;\n      let date = new Date(props.date.substr(0, 10) * 1000).toISOString().slice(0, 10);\n      console.log(`\n      delete patient consultant item:\n      props: ${JSON.stringify(props)},\n      token: ${token},\n      userId: ${userId},\n      patientId: ${patientId},\n      consultant date: ${date},\n      `);\n      const requestBody = {\n        query: `\n         mutation {deletePatientConsultant (userId:\\\"${userId}\\\", patientId:\\\"${patientId}\\\",consultantId:\\\"${props.reference.id}\\\",consultantDate:\\\"${date}\\\")\n         {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatientConsultant;\n        console.log(deletedPatient);\n        const updatedPatientId = resData.data.deletePatientConsultant._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.deletePatientConsultant);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        }); // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientConsultant})\n\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.deletePatientNextOfKinItem = props => {\n      let token = this.context.token;\n      let userId = this.context.userId;\n      let patientId = this.state.selectedPatient._id;\n      console.log(`\n    delete patient nextOfKin item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    `);\n      const requestBody = {\n        query: `\n       mutation {deletePatientNextOfKin (userId:\\\"${userId}\\\", patientId:\\\"${patientId}\\\",nextOfKinName:\\\"${props.name}\\\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatientNextOfKin;\n        console.log(deletedPatient);\n        const updatedPatientId = resData.data.deletePatientNextOfKin._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.deletePatientNextOfKin);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        }); // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientNextOfKin})\n\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.deletePatientComplaintItem = props => {\n      let token = this.context.token;\n      let userId = this.context.userId;\n      let patientId = this.state.selectedPatient._id;\n      let date = new Date(props.date.substr(0, 10) * 1000).toISOString().slice(0, 10);\n      console.log(`\n    delete patient Complaint item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    complaint date: ${date},\n    `);\n      const requestBody = {\n        query: `\n       mutation {deletePatientComplaint (userId:\\\"${userId}\\\", patientId:\\\"${patientId}\\\",complaintTitle:\\\"${props.title}\\\",complaintDate:\\\"${date}\\\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatientComplaint;\n        console.log(deletedPatient);\n        const updatedPatientId = resData.data.deletePatientComplaint._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.deletePatientComplaint);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        }); // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientComplaint})\n\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.deletePatientSurveyItem = props => {\n      let token = this.context.token;\n      let userId = this.context.userId;\n      let patientId = this.state.selectedPatient._id;\n      let date = new Date(props.date.substr(0, 10) * 1000).toISOString().slice(0, 10);\n      console.log(`\n    delete patient Survey item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    survey date: ${date}\n    `);\n      const requestBody = {\n        query: `\n       mutation {deletePatientSurvey (userId:\\\"${userId}\\\", patientId:\\\"${patientId}\\\",surveyTitle:\\\"${props.title}\\\",surveyDate:\\\"${date}\\\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatientSurvey;\n        console.log(deletedPatient);\n        const updatedPatientId = resData.data.deletePatientSurvey._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.deletePatientSurvey);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        }); // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientSurvey})\n\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.deletePatientVitalsItem = props => {\n      let token = this.context.token;\n      let userId = this.context.userId;\n      let patientId = this.state.selectedPatient._id;\n      let date = new Date(props.date.substr(0, 10) * 1000).toISOString().slice(0, 10);\n      console.log(`\n    delete patient Vitals item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    vitals date: ${date},\n    `);\n      const requestBody = {\n        query: `\n       mutation {deletePatientVitals (userId:\\\"${userId}\\\", patientId:\\\"${patientId}\\\",vitalsDate:\\\"${date}\\\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatientVitals;\n        console.log(deletedPatient);\n        const updatedPatientId = resData.data.deletePatientVitals._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.deletePatientVitals);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        }); // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientVitals})\n\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.deletePatientExaminationItem = props => {\n      let token = this.context.token;\n      let userId = this.context.userId;\n      let patientId = this.state.selectedPatient._id;\n      let date = new Date(props.date.substr(0, 10) * 1000).toISOString().slice(0, 10);\n      console.log(`\n    delete patient Examination item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    examination date: ${date},\n    `);\n      const requestBody = {\n        query: `\n       mutation {deletePatientExamination (userId:\\\"${userId}\\\", patientId:\\\"${patientId}\\\",examinationType:\\\"${props.type}\\\",examinationDate:\\\"${date}\\\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatientExamination;\n        console.log(deletedPatient);\n        const updatedPatientId = resData.data.deletePatientExamination._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.deletePatientExamination);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        }); // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientExamination})\n\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.deletePatientHistoryItem = props => {\n      let token = this.context.token;\n      let userId = this.context.userId;\n      let patientId = this.state.selectedPatient._id;\n      let date = new Date(props.date.substr(0, 10) * 1000).toISOString().slice(0, 10);\n      console.log(`\n    delete patient History item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    history date: ${date},\n    `);\n      const requestBody = {\n        query: `\n       mutation {deletePatientHistory (userId:\\\"${userId}\\\", patientId:\\\"${patientId}\\\",historyTitle:\\\"${props.title}\\\",historyDate:\\\"${date}\\\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatientHistory;\n        console.log(deletedPatient);\n        const updatedPatientId = resData.data.deletePatientHistory._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.deletePatientHistory);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        }); // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientHistory})\n\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.deletePatientAllergiesItem = props => {\n      let token = this.context.token;\n      let userId = this.context.userId;\n      let patientId = this.state.selectedPatient._id;\n      console.log(`\n    delete patient Allergies item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    `);\n      const requestBody = {\n        query: `\n       mutation {deletePatientAllergies (userId:\\\"${userId}\\\", patientId:\\\"${patientId}\\\",allergiesTitle:\\\"${props.title}\\\",allergiesType:\\\"${props.type}\\\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatientAllergies;\n        console.log(deletedPatient);\n        const updatedPatientId = resData.data.deletePatientAllergies._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.deletePatientAllergies);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        }); // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientAllergies})\n\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.deletePatientMedicationItem = props => {\n      let token = this.context.token;\n      let userId = this.context.userId;\n      let patientId = this.state.selectedPatient._id;\n      console.log(`\n    delete patient Medication item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    `);\n      const requestBody = {\n        query: `\n       mutation {deletePatientMedication (userId:\\\"${userId}\\\", patientId:\\\"${patientId}\\\",medicationTitle:\\\"${props.title}\\\",medicationType:\\\"${props.type}\\\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatientMedication;\n        console.log(deletedPatient);\n        const updatedPatientId = resData.data.deletePatientMedication._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.deletePatientMedication);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        }); // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientMedication})\n\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.deletePatientInvestigationItem = props => {\n      let token = this.context.token;\n      let userId = this.context.userId;\n      let patientId = this.state.selectedPatient._id;\n      let date = new Date(props.date.substr(0, 10) * 1000).toISOString().slice(0, 10);\n      console.log(`\n    delete patient Investigation item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    investigation date: ${date},\n    `);\n      const requestBody = {\n        query: `\n       mutation {deletePatientInvestigation (userId:\\\"${userId}\\\", patientId:\\\"${patientId}\\\",investigationDate:\\\"${date}\\\",investigationTitle:\\\"${props.title}\\\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatientInvestigation;\n        console.log(deletedPatient);\n        const updatedPatientId = resData.data.deletePatientInvestigation._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.deletePatientInvestigation);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        }); // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientInvestigation})\n\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.deletePatientDiagnosisItem = props => {\n      let token = this.context.token;\n      let userId = this.context.userId;\n      let patientId = this.state.selectedPatient._id;\n      let date = new Date(props.date.substr(0, 10) * 1000).toISOString().slice(0, 10);\n      console.log(`\n    delete patient Diagnosis item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    diagnosis date: ${date}\n    `);\n      const requestBody = {\n        query: `\n       mutation {deletePatientDiagnosis (userId:\\\"${userId}\\\",patientId:\\\"${patientId}\\\",diagnosisDate:\\\"${date}\\\",diagnosisTitle:\\\"${props.title}\\\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatientDiagnosis;\n        console.log(deletedPatient);\n        const updatedPatientId = resData.data.deletePatientDiagnosis._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.deletePatientDiagnosis);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        }); // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientDiagnosis})\n\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.deletePatientTreatmentItem = props => {\n      let token = this.context.token;\n      let userId = this.context.userId;\n      let patientId = this.state.selectedPatient._id;\n      let date = new Date(props.date.substr(0, 10) * 1000).toISOString().slice(0, 10);\n      console.log(`\n    delete patient Treatment item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    treatment date: ${date},\n    `);\n      const requestBody = {\n        query: `\n       mutation {deletePatientTreatment (userId:\\\"${userId}\\\", patientId:\\\"${patientId}\\\",treatmentDate:\\\"${date}\\\",treatmentTitle:\\\"${props.title}\\\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatientTreatment;\n        console.log(deletedPatient);\n        const updatedPatientId = resData.data.deletePatientTreatment._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.deletePatientTreatment);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        }); // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientTreatment})\n\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.deletePatientBillingItem = props => {\n      let token = this.context.token;\n      let userId = this.context.userId;\n      let patientId = this.state.selectedPatient._id;\n      let date = new Date(props.date.substr(0, 10) * 1000).toISOString().slice(0, 10);\n      console.log(`\n    delete patient Billing item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    billing date: ${date},\n    `);\n      const requestBody = {\n        query: `\n       mutation {deletePatientBilling (userId:\\\"${userId}\\\", patientId:\\\"${patientId}\\\",billingDate:\\\"${date}\\\",billingTitle:\\\"${props.title}\\\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatientBilling;\n        console.log(deletedPatient);\n        const updatedPatientId = resData.data.deletePatientBilling._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.deletePatientBilling);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        }); // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientBilling})\n\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.deletePatientAttachmentItem = props => {\n      let token = this.context.token;\n      let userId = this.context.userId;\n      let patientId = this.state.selectedPatient._id; // console.log(`\n      //   deleting from s3...\n      //   file.name: ${props.name},\n      //   `);\n      //\n      //   const config = {\n      //     bucketName: this.context.creds.s3.bucketName,\n      //     dirName: props.path,\n      //     region: this.context.creds.s3.region,\n      //     accessKeyId: this.context.creds.s3.accessKeyId,\n      //     secretAccessKey: this.context.creds.s3.secretAccessKey,\n      //   }\n      // const ReactS3Client = new S3(config);\n      // const filename = props.name;\n      // // const attachmentName = newFileName;\n      // //\n      // S3FileUpload\n      // .deleteFile(filename, config)\n      // .then(response => console.log(response))\n      // .catch(err => console.error(err))\n\n      console.log(`\n    delete patient Attachment item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    `);\n      const requestBody = {\n        query: `\n       mutation {deletePatientAttachment (userId:\\\"${userId}\\\", patientId:\\\"${patientId}\\\",attachmentName:\\\"${props.name}\\\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatientAttachment;\n        console.log(deletedPatient);\n        const updatedPatientId = resData.data.deletePatientAttachment._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.deletePatientAttachment);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        }); // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientAttachment})\n\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.deletePatientNoteItem = props => {\n      let token = this.context.token;\n      let userId = this.context.userId;\n      let patientId = this.state.selectedPatient._id;\n      console.log(`\n    delete patient Note item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    `);\n      const requestBody = {\n        query: `\n\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatientNextOfKin;\n        console.log(deletedPatient);\n        const updatedPatientId = resData.data.deletePatientNextOfKin._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.deletePatientNextOfKin);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        }); // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientNextOfKin})\n\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.deletePatientTagItem = props => {\n      let token = this.context.token;\n      let userId = this.context.userId;\n      let patientId = this.state.selectedPatient._id;\n      console.log(`\n    delete patient Tag item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    `);\n      const requestBody = {\n        query: `\n\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatientNextOfKin;\n        console.log(deletedPatient);\n        const updatedPatientId = resData.data.deletePatientNextOfKin._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.deletePatientNextOfKin);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        }); // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientNextOfKin})\n\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.onViewAttachment = attachment => {\n      console.log(`\n      setting up attachment viewer...\n      attachment: ${JSON.stringify(attachment)}\n      `);\n      this.setState({\n        showAttachment: true\n      });\n      const file = \"https://ent-emr-bucket.s3-us-east-2.amazonaws.com/\" + attachment.path + \"/\" + attachment.name;\n      const type = attachment.format;\n      this.setState({\n        showThisAttachmentFile: file,\n        showThisAttachmentType: type\n      });\n    };\n\n    this.closeAttachmentView = () => {\n      console.log(`\n      closing attachment viewer...\n      `);\n      this.setState({\n        showAttachment: false\n      });\n    };\n\n    this.createPdf = patient => {\n      console.log(`\n        creating pdf...\n        user: ${JSON.stringify(patient)}\n      `);\n      const pdfData = {\n        title: patient.name,\n        body: patient.dob\n      };\n      this.setState({\n        createPdf: true,\n        pdfData: pdfData\n      });\n    };\n\n    this.closePdfCreator = () => {\n      console.log(`\n      closing pdf creator...\n      `);\n      this.setState({\n        createPdf: false,\n        pdfData: null\n      });\n    };\n\n    this.showDetailHandler = patientId => {\n      this.setState(prevState => {\n        const selectedPatient = prevState.patients.find(e => e._id === patientId);\n        this.context.selectedPatient = selectedPatient;\n        this.context.selectedPatientId = selectedPatient._id;\n        console.log(\"selectedPatient:  \", selectedPatient);\n        return {\n          selectedPatient: selectedPatient\n        };\n      });\n    };\n\n    this.nameElRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.fetchPatients();\n\n    if (this.context.user.name === 'admin579') {\n      this.setState({\n        canDelete: true\n      });\n    }\n  }\n\n  fetchPatients() {\n    console.log(\"fetch patients function:  \");\n    const userId = this.context.userId;\n    const token = this.context.token;\n    this.setState({\n      isLoading: true\n    });\n    const requestBody = {\n      query: `\n          query {patients(userId:\"${userId}\")\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{_id,title,time,location,date},consultant{date,reference{_id,name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n        `\n    };\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    }).then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n\n      return res.json();\n    }).then(resData => {\n      console.log(\"resData\", resData);\n      const patients = resData.data.patients;\n      console.log(patients);\n      const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n      this.setState({\n        userAlert: responseAlert\n      });\n      this.context.patients = this.state.patients;\n\n      if (this.isActive) {\n        this.setState({\n          patients: patients,\n          isLoading: false\n        });\n      }\n    }).catch(err => {\n      console.log(err);\n      this.setState({\n        userAlert: err\n      });\n\n      if (this.isActive) {\n        this.setState({\n          isLoading: false\n        });\n      }\n    });\n  }\n\n  updatePatientSpecial(event) {\n    console.log(\"special field to update:  \", event.target.value);\n    const field = event.target.value;\n    this.setState({\n      patientUpdateField: field\n    });\n  }\n\n  componentWillUnmount() {\n    this.isActive = false;\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3767\n      },\n      __self: this\n    }, this.state.showAttachment === true && React.createElement(AttachmentViewer, {\n      onCloseAttachmentView: this.closeAttachmentView,\n      attachmentFile: this.state.showThisAttachmentFile,\n      attachmentType: this.state.showThisAttachmentType,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3769\n      },\n      __self: this\n    }), this.state.createPdf === true && React.createElement(PdfCreator, {\n      pdfData: this.state.pdfData,\n      onClosePdfCreator: this.closePdfCreator,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3777\n      },\n      __self: this\n    }), React.createElement(Accordion, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3783\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3785\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 3,\n      className: \"MasterCol1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3786\n      },\n      __self: this\n    }, React.createElement(AlertBox, {\n      authUserId: this.context.userId,\n      alert: this.state.userAlert,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3788\n      },\n      __self: this\n    }), React.createElement(SidebarPage, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3792\n      },\n      __self: this\n    })), React.createElement(Col, {\n      md: 9,\n      className: \"MasterCol2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3795\n      },\n      __self: this\n    }, React.createElement(Container, {\n      className: \"containerCombinedDetail\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3796\n      },\n      __self: this\n    }, React.createElement(Tab.Container, {\n      id: \"left-tabs-example\",\n      defaultActiveKey: \"patientDetail\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3798\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3799\n      },\n      __self: this\n    }, React.createElement(Col, {\n      sm: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3800\n      },\n      __self: this\n    }, React.createElement(Nav, {\n      variant: \"pills\",\n      className: \"flex-column\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3801\n      },\n      __self: this\n    }, React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3802\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"MasterList\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3803\n      },\n      __self: this\n    }, \"MASTER LIST\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3805\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientDetail\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3806\n      },\n      __self: this\n    }, \"Selected\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3808\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientCreate\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3809\n      },\n      __self: this\n    }, \"Create New\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3811\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"disabled\",\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3812\n      },\n      __self: this\n    }, \"Edit:\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3814\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientEditDemographics\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3815\n      },\n      __self: this\n    }, \"Demographics\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3817\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientEditField\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3818\n      },\n      __self: this\n    }, \"Single Field\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3820\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"disabled\",\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3821\n      },\n      __self: this\n    }, \"Add:\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3823\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientEditConsultant\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3824\n      },\n      __self: this\n    }, \"Consultant\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3826\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientEditInsurance\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3827\n      },\n      __self: this\n    }, \"Insurance\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3829\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientEditNextOfKin\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3830\n      },\n      __self: this\n    }, \"Next of Kin\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3832\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientEditComplaint\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3833\n      },\n      __self: this\n    }, \"Complaint\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3835\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientEditSurvey\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3836\n      },\n      __self: this\n    }, \"Survey\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3838\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientEditVitals\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3839\n      },\n      __self: this\n    }, \"Vitals\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3841\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientEditExamination\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3842\n      },\n      __self: this\n    }, \"Examination\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3844\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientEditHistory\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3845\n      },\n      __self: this\n    }, \"History\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3847\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientEditAllergies\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3848\n      },\n      __self: this\n    }, \"Allergies\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3850\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientEditMedication\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3851\n      },\n      __self: this\n    }, \"Medication\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3853\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientEditInvestigation\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3854\n      },\n      __self: this\n    }, \"Investigation\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3856\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientEditDiagnosis\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3857\n      },\n      __self: this\n    }, \"Diagnosis\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3859\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientEditTreatment\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3860\n      },\n      __self: this\n    }, \"Treatment\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3862\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientEditBilling\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3863\n      },\n      __self: this\n    }, \"Billing\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3865\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientEditAttachment\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3866\n      },\n      __self: this\n    }, \"Attachment\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3868\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientEditNote\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3869\n      },\n      __self: this\n    }, \"Note\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3871\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientEditTag\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3872\n      },\n      __self: this\n    }, \"Tag\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3875\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"disabled\",\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3876\n      },\n      __self: this\n    }, \"Search:\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3878\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"SearchInput\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3879\n      },\n      __self: this\n    }, \"Input\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3881\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"SearchResult\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3882\n      },\n      __self: this\n    }, \"Search\")))), React.createElement(Col, {\n      sm: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3886\n      },\n      __self: this\n    }, React.createElement(Tab.Content, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3887\n      },\n      __self: this\n    }, React.createElement(Tab.Pane, {\n      eventKey: \"patientDetail\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3888\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3890\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.isLoading === false && this.state.selectedPatient !== null && React.createElement(PatientDetail, {\n      authUserId: this.context.userId,\n      token: this.context.token,\n      patient: this.state.selectedPatient,\n      onEdit: this.startUpdatePatientHandler,\n      canDelete: this.state.canDelete,\n      onDelete: this.modalDeleteHandler,\n      onGetVisit: this.getPatientVisit,\n      visit: this.context.visit,\n      fetchUsers: this.fetchUsers,\n      consultantDelete: this.deletePatientConsultantItem,\n      insuranceDelete: this.deletePatientInsuranceItem,\n      nextOfKinDelete: this.deletePatientNextOfKinItem,\n      complaintDelete: this.deletePatientComplaintItem,\n      surveyDelete: this.deletePatientSurveyItem,\n      vitalsDelete: this.deletePatientVitalsItem,\n      examinationDelete: this.deletePatientExaminationItem,\n      historyDelete: this.deletePatientHistoryItem,\n      allergiesDelete: this.deletePatientAllergiesItem,\n      medicationDelete: this.deletePatientMedicationItem,\n      investigationDelete: this.deletePatientInvestigationItem,\n      diagnosisDelete: this.deletePatientDiagnosisItem,\n      treatmentDelete: this.deletePatientTreatmentItem,\n      billingDelete: this.deletePatientBillingItem,\n      attachmentDelete: this.deletePatientAttachmentItem,\n      noteDelete: this.deletePatientNoteItem,\n      tagDelete: this.deletePatientTagItem,\n      onViewAttachment: this.onViewAttachment,\n      onCreatePdf: this.createPdf,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3897\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientCreate\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3930\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"outline-primary\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.startCreatePatientHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3931\n      },\n      __self: this\n    }, \"Create NEW Patient Profile\"), this.state.creating && React.createElement(CreatePatientForm, {\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmHandler,\n      confirmText: \"Confirm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3934\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientEditDemographics\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3944\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3946\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.startUpdatePatientHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3951\n      },\n      __self: this\n    }, \"Edit Demographics\"), this.state.updating && this.state.selectedPatient !== null && React.createElement(UpdatePatientForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmUpdateHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3956\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientEditField\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3968\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3970\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.startUpdatePatientHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3975\n      },\n      __self: this\n    }, \"Edit a Single Field\"), this.state.updating && this.state.selectedPatient !== null && React.createElement(UpdatePatientFieldForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmUpdateFieldHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3980\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientEditConsultant\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3992\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3994\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"consultant\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3999\n      },\n      __self: this\n    }, \"Add a Consultant\"), this.state.patientUpdateField === 'consultant' && this.state.selectedPatient !== null && React.createElement(UpdatePatientConsultantForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientConsultantHandler,\n      confirmText: \"Confirm\",\n      consultant: this.context.selectedUser,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4004\n      },\n      __self: this\n    }), this.state.patientUpdateField === 'consultant' && this.state.selectedPatient !== null && React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4017\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4018\n      },\n      __self: this\n    }, \"Add Consultant: \", this.context.selectedUser.name), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4019\n      },\n      __self: this\n    }, \" To Paitient: \", this.state.selectedPatient.name, \" ??\"), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4020\n      },\n      __self: this\n    })), this.state.patientUpdateField === 'consultant' && this.state.selectedPatient !== null && React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4026\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4027\n      },\n      __self: this\n    }, \"Select someone from the Staff page\"))), React.createElement(Tab.Pane, {\n      eventKey: \"patientEditInsurance\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4034\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4036\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"insurance\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4041\n      },\n      __self: this\n    }, \"Add Insurance\"), this.state.patientUpdateField === 'insurance' && this.state.selectedPatient !== null && React.createElement(UpdatePatientInsuranceForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientInsuranceHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4046\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientEditNextOfKin\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4058\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4060\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"nextOfKin\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4065\n      },\n      __self: this\n    }, \"Add NextOfKin\"), this.state.patientUpdateField === 'nextOfKin' && this.state.selectedPatient !== null && React.createElement(UpdatePatientNextOfKinForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientNextOfKinHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4070\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientEditComplaint\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4082\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4084\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"complaint\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4089\n      },\n      __self: this\n    }, \"Add Complaint\"), this.state.patientUpdateField === 'complaint' && this.state.selectedPatient !== null && React.createElement(UpdatePatientComplaintForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientComplaintHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4094\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientEditSurvey\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4106\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4108\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"survey\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4113\n      },\n      __self: this\n    }, \"Add Survey\"), this.state.patientUpdateField === 'survey' && this.state.selectedPatient !== null && React.createElement(UpdatePatientSurveyForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientSurveyHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4118\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientEditVitals\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4130\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4132\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"vitals\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4137\n      },\n      __self: this\n    }, \"Add Vitals\"), this.state.patientUpdateField === 'vitals' && this.state.selectedPatient !== null && React.createElement(UpdatePatientVitalsForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientVitalsHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4142\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientEditExamination\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4154\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4156\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"examintion\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4161\n      },\n      __self: this\n    }, \"Add Examination\"), this.state.patientUpdateField === 'examintion' && this.state.selectedPatient !== null && React.createElement(UpdatePatientExaminationForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientExaminationHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4166\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientEditHistory\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4178\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4180\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"history\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4185\n      },\n      __self: this\n    }, \"Add History\"), this.state.patientUpdateField === 'history' && this.state.selectedPatient !== null && React.createElement(UpdatePatientHistoryForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientHistoryHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4190\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientEditAllergies\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4202\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4204\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"allergies\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4209\n      },\n      __self: this\n    }, \"Add Allergies\"), this.state.patientUpdateField === 'allergies' && this.state.selectedPatient !== null && React.createElement(UpdatePatientAllergiesForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientAllergiesHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4214\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientEditMedication\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4226\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4228\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"medication\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4233\n      },\n      __self: this\n    }, \"Add Medication\"), this.state.patientUpdateField === 'medication' && this.state.selectedPatient !== null && React.createElement(UpdatePatientMedicationForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientMedicationHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4238\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientEditInvestigation\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4250\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4252\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"investigation\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4257\n      },\n      __self: this\n    }, \"Add Investigation\"), this.state.patientUpdateField === 'investigation' && this.state.selectedPatient !== null && React.createElement(UpdatePatientInvestigationForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientInvestigationHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4262\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientEditDiagnosis\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4274\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4276\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"diagnosis\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4281\n      },\n      __self: this\n    }, \"Add Diagnosis\"), this.state.patientUpdateField === 'diagnosis' && this.state.selectedPatient !== null && React.createElement(UpdatePatientDiagnosisForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientDiagnosisHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4286\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientEditTreatment\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4298\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4300\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"treatment\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4305\n      },\n      __self: this\n    }, \"Add Treatment\"), this.state.patientUpdateField === 'treatment' && this.state.selectedPatient !== null && React.createElement(UpdatePatientTreatmentForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientTreatmentHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4310\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientEditBilling\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4322\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4324\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"billing\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4329\n      },\n      __self: this\n    }, \"Add Billing\"), this.state.patientUpdateField === 'billing' && this.state.selectedPatient !== null && React.createElement(UpdatePatientBillingForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientBillingHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4334\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientEditAttachment\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4346\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4348\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"attachment\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4353\n      },\n      __self: this\n    }, \"Add Attachment\"), this.state.patientUpdateField === 'attachment' && this.state.selectedPatient !== null && React.createElement(UpdatePatientAttachmentForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientAttachmentHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4358\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientEditNote\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4370\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4372\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"notes\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4377\n      },\n      __self: this\n    }, \"Add Note\"), this.state.patientUpdateField === 'notes' && this.state.selectedPatient !== null && React.createElement(UpdatePatientNoteForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientNoteHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4382\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientEditTag\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4394\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4396\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"tags\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4401\n      },\n      __self: this\n    }, \"Add Tag\"), this.state.patientUpdateField === 'tags' && this.state.selectedPatient !== null && React.createElement(UpdatePatientTagForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientTagHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4406\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"MasterList\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4418\n      },\n      __self: this\n    }, React.createElement(Container, {\n      className: \"containerUserMasterList\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4419\n      },\n      __self: this\n    }, React.createElement(Row, {\n      className: \"searchListRow\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4420\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"primary\",\n      size: \"sm\",\n      onClick: this.fetchPatientsAsc,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4421\n      },\n      __self: this\n    }, \"Sort Asc\"), React.createElement(Button, {\n      variant: \"info\",\n      size: \"sm\",\n      onClick: this.fetchPatientsDesc,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4424\n      },\n      __self: this\n    }, \"Sort Desc\"), this.state.isLoading ? React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4428\n      },\n      __self: this\n    }) : React.createElement(PatientList, {\n      patients: this.state.patients,\n      authUserId: this.context.userId,\n      onViewDetail: this.showDetailHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4430\n      },\n      __self: this\n    })))), React.createElement(Tab.Pane, {\n      eventKey: \"SearchInput\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4440\n      },\n      __self: this\n    }, React.createElement(Container, {\n      className: \"containerSearchUserInput\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4441\n      },\n      __self: this\n    }, this.context.token && React.createElement(Row, {\n      className: \"searchUserRowAdd\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4443\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"primary\",\n      onClick: this.startSearchPatientHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4444\n      },\n      __self: this\n    }, \"Search\")), React.createElement(Row, {\n      className: \"searchUserRowForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4448\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 10,\n      className: \"searchUserColForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4449\n      },\n      __self: this\n    }, React.createElement(Tabs, {\n      defaultActiveKey: \"Field\",\n      id: \"uncontrolled-tab-example\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4450\n      },\n      __self: this\n    }, React.createElement(Tab, {\n      eventKey: \"Search\",\n      title: \"Search:\",\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4451\n      },\n      __self: this\n    }), React.createElement(Tab, {\n      eventKey: \"Field\",\n      title: \"Search by Field:\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4453\n      },\n      __self: this\n    }, this.state.searching !== true && React.createElement(Button, {\n      variant: \"outline-warning\",\n      className: \"confirmEditButton\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4455\n      },\n      __self: this\n    }, \"Click the 'Search' Button start\"), this.state.searching === true && React.createElement(SearchPatientForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmSearchHandler,\n      confirmText: \"Search\",\n      patient: this.context.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4460\n      },\n      __self: this\n    })), React.createElement(Tab, {\n      eventKey: \"Id\",\n      title: \"Search by ID:\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4471\n      },\n      __self: this\n    }, this.state.searching !== true && React.createElement(Button, {\n      variant: \"outline-warning\",\n      className: \"confirmEditButton\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4473\n      },\n      __self: this\n    }, \"Click the 'Search' Button start\"), this.state.searching === true && React.createElement(SearchPatientIdForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmSearchIdHandler,\n      confirmText: \"Search\",\n      patient: this.context.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4478\n      },\n      __self: this\n    })), React.createElement(Tab, {\n      eventKey: \"Name\",\n      title: \"Search by Name:\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4490\n      },\n      __self: this\n    }, this.state.searching !== true && React.createElement(Button, {\n      variant: \"outline-warning\",\n      className: \"confirmEditButton\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4492\n      },\n      __self: this\n    }, \"Click the 'Search' Button start\"), this.state.searching === true && React.createElement(SearchPatientNameForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmSearchNameHandler,\n      confirmText: \"Search\",\n      patient: this.context.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4497\n      },\n      __self: this\n    }))))))), React.createElement(Tab.Pane, {\n      eventKey: \"SearchResult\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4514\n      },\n      __self: this\n    }, React.createElement(Container, {\n      className: \"containerSearchUserResults\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4515\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4516\n      },\n      __self: this\n    }, React.createElement(Card, {\n      className: \"searchCard\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4517\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      className: \"searchCardBody\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4518\n      },\n      __self: this\n    }, React.createElement(Card.Title, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4519\n      },\n      __self: this\n    }, \"Your Search\"), React.createElement(Card.Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4520\n      },\n      __self: this\n    }, \"Field: \", this.state.patientSearchField), React.createElement(Card.Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4523\n      },\n      __self: this\n    }, \"Query: \", this.state.patientSearchQuery)))), React.createElement(Row, {\n      className: \"searchListRow\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4529\n      },\n      __self: this\n    }, this.state.searchPatients !== [] && React.createElement(SearchPatientList, {\n      searchPatients: this.state.searchPatients,\n      authUserId: this.context.userId,\n      onCancel: this.modalCancelHandler,\n      onViewDetail: this.showDetailHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4532\n      },\n      __self: this\n    })))))))))), React.createElement(Col, {\n      md: 3,\n      className: \"MasterCol3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4557\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nPatientsPage.contextType = AuthContext;\nexport default PatientsPage;","map":{"version":3,"sources":["/Users/pedrojacob/Downloads/AMR/websites/office_records/ENT_EMR/frontend/src/pages/Patients.js"],"names":["React","Component","S3","S3FileUpload","Container","Row","Col","Button","Accordion","SidebarPage","Tabs","Tab","TabContainer","TabContent","TabPane","Nav","Card","PatientList","PatientDetail","Spinner","AuthContext","SearchPatientList","SearchPatientForm","SearchPatientIdForm","SearchPatientNameForm","SearchPatientVisitForm","AlertBox","AttachmentViewer","PdfCreator","CreatePatientForm","UpdatePatientForm","UpdatePatientFieldForm","UpdatePatientConsultantForm","UpdatePatientInsuranceForm","UpdatePatientNextOfKinForm","UpdatePatientComplaintForm","UpdatePatientSurveyForm","UpdatePatientVitalsForm","UpdatePatientExaminationForm","UpdatePatientHistoryForm","UpdatePatientAllergiesForm","UpdatePatientMedicationForm","UpdatePatientInvestigationForm","UpdatePatientDiagnosisForm","UpdatePatientTreatmentForm","UpdatePatientBillingForm","UpdatePatientAttachmentForm","UpdatePatientNoteForm","UpdatePatientTagForm","PatientsPage","constructor","props","state","creating","updating","searching","updatingArray","deleting","patients","searchPatients","isLoading","selectedPatient","patientUpdateField","patientSearchField","patientSearchQuery","canDelete","visit","userAlert","showAttachment","showThisAttachmentFile","showThisAttachmentType","createPdf","pdfData","isActive","startCreatePatientHandler","setState","console","log","startUpdatePatientHandler","startSearchPatientHandler","modalConfirmHandler","event","target","formGridName","value","userId","context","title","formGridTitle","name","dob","formGridDob","age","formGridAge","gender","formGridGender","addressNumber","formGridAddressNumber","addressStreet","formGridAddressStreet","addressTown","formGridAddressTown","addressParish","formGridAddressParish","addressPostOffice","formGridAddressPostOffice","contactPhone","formGridContactPhone","contactEmail","formGridContactEmail","registrationDate","formGridRegistrationDate","formGridRegistrationDateTodayCheckbox","checked","Date","toISOString","slice","referralDate","formGridReferralDate","formGridReferralDateTodayCheckbox","expirationDate","formGridExpirationDate","attendingPhysicianName","formGridAttendingPhysicianName","attendingPhysicianEmail","formGridAttendingPhysicianEmail","attendingPhysicianPhone","formGridAttendingPhysicianPhone","referringDoctorName","formGridReferringDoctorName","referringDoctorEmail","formGridReferringDoctorEmail","referringDoctorPhone","formGridReferringDoctorPhone","occupationRole","formGridOccupationRole","occupationEmployer","formGridOccupationEmployer","occupationEmployerContactPhone","formGridOccupationEmployerContactPhone","occupationEmployerContactEmail","formGridOccupationEmployerContactEmail","trim","length","patient","requestBody","query","token","fetch","method","body","JSON","stringify","headers","Authorization","then","res","status","Error","json","resData","data","createPatient","responseAlert","newPatient","prevState","updatedPatients","push","catch","err","modalCancelHandler","modalConfirmUpdateHandler","selectedPatientId","_id","formGridExpirationDateTodayCheckbox","address","number","street","town","parish","postOffice","contact","phone","email","attendingPhysician","referringDoctor","occupation","role","employer","updatedPatientId","updatePatient","updatedPatient","find","e","updatedPatientPos","indexOf","slicedArray","splice","fetchPatients","modalConfirmUpdateFieldHandler","formGridField","field","formGridQuery","formGridFieldSelect","updatePatientField","updatePatientConsultantHandler","patientConsultantReference","selectedUser","undefined","formGridConsultantDate","consultantDate","formGridConsultantDateTodayCheckbox","patientConsultant","updatePatientConsultant","updatePatientInsuranceHandler","formGridInsuranceCompany","insuranceCompany","insuranceNumber","formGridInsuranceNumber","insuranceExpiry","formGridInsuranceExpiry","insuranceDescription","formGridInsuranceDescription","insuranceSubscriberCompany","formGridInsuranceSubscriberCompany","insuranceSubscriberDescription","formGridInsuranceSubscriberDescription","patientInsurance","updatePatientInsurance","updatePatientNextOfKinHandler","formGridNextOfKinName","nextOfKinName","nextOfKinPhone","formGridNextOfKinPhone","nextOfKinEmail","formGridNextOfKinEmail","patientNextOfKin","updatePatientNextOfKin","updatePatientComplaintHandler","formGridComplaintTitle","complaintTitle","complaintDate","formGridComplaintDate","formGridComplaintDateTodayCheckbox","complaintDescription","formGridComplaintDescription","complaintAnamnesis","formGridComplaintAnamnesis","complaintAttachmentFormat","formGridComplaintAttachmentFormat","complaintAttachmentPath","file","_currentValue","config","bucketName","creds","s3","dirName","region","accessKeyId","secretAccessKey","ReactS3Client","newFileName","complaintAttachmentName","uploadFile","error","patientComplaint","updatePatientComplaint","updatePatientSurveyHandler","formGridSurveyTitle","surveyDate","formGridSurveyDate","formGridSurveyDateTodayCheckbox","surveyTitle","surveyDescription","formGridSurveyDescription","surveyAttachmentFormat","formGridSurveyAttachmentFormat","surveyAttachmentPath","surveyAttachmentName","patientSurvey","updatePatientSurvey","updatePatientVitalsHandler","formGridVitalsDate","vitalsDate","formGridVitalsDateTodayCheckbox","vitalsPr","formGridVitalsPr","vitalsBp1","formGridVitalsBp1","vitalsBp2","formGridVitalsBp2","vitalsRr","formGridVitalsRr","vitalsTemp","formGridVitalsTemp","vitalsPs02","formGridVitalsPs02","vitalsHeight","formGridVitalsHeight","vitalsWeight","formGridVitalsWeight","vitalsBmi","formGridVitalsBmi","vitalsUrineType","formGridVitalsUrineType","vitalsUrineValue","formGridVitalsUrineValue","patientVitals","updatePatientVitals","updatePatientExaminationHandler","formGridExaminationArea","examinationDate","formGridExaminationDate","formGridExaminationDateTodayCheckbox","examinationGeneral","formGridExaminationGeneral","examinationArea","formGridExaminationAreaSelect","examinationType","formGridExaminationType","examinationMeasure","formGridExaminationMeasure","examinationValue","formGridExaminationValue","examinationDescription","formGridExaminationDescription","examinationFollowUp","formGridExaminationFollowUp","examinationAttachmentFormat","formGridExaminationAttachmentFormat","examinationAttachmentPath","examinationAttachmentName","patientExamination","updatePatientExamination","updatePatientHistoryHandler","formGridHistoryTitle","historyType","formGridHistoryType","historyDate","formGridHistoryDate","formGridHistoryDateTodayCheckbox","historyTitle","historyDescription","formGridHistoryDescription","historyAttachmentFormat","formGridHistoryAttachmentFormat","historyAttachmentPath","historyAttachmentName","patientHistory","updatePatientHistory","updatePatientAllergiesHandler","formGridAllergiesTitle","allergiesTitle","allergiesType","formGridAllergiesTypeSelect","formGridAllergiesType","allergiesDescription","formGridAllergiesDescription","allergiesAttachmentFormat","formGridAllergiesAttachmentFormat","allergiesAttachmentPath","allergiesAttachmentName","patientAllergies","updatePatientAllergies","updatePatientMedicationHandler","formGridMedicationTitle","medicationTitle","medicationType","formGridMedicationType","medicationDescription","formGridMedicationDescription","medicationAttachmentFormat","formGridMedicationAttachmentFormat","medicationAttachmentPath","medicationAttachmentName","patientMedication","updatePatientMedication","updatePatientInvestigationHandler","formGridInvestigationTitle","investigationDate","formGridInvestigationDate","formGridInvestigationDateTodayCheckbox","investigationTitle","investigationType","formGridInvestigationTypeSelect","formGridInvestigationType","investigationDescription","formGridInvestigationDescription","investigationAttachmentFormat","formGridInvestigationAttachmentFormat","investigationAttachmentPath","investigationAttachmentName","patientInvestigation","updatePatientInvestigation","updatePatientDiagnosisHandler","formGridDiagnosisTitle","diagnosisDate","formGridDiagnosisDate","formGridDiagnosisDateTodayCheckbox","diagnosisTitle","diagnosisType","formGridDiagnosisType","diagnosisDescription","formGridDiagnosisDescription","diagnosisAttachmentFormat","formGridDiagnosisAttachmentFormat","diagnosisAttachmentPath","diagnosisAttachmentName","patientDiagnosis","updatePatientDiagnosis","updatePatientTreatmentHandler","formGridTreatmentTitle","treatmentDate","formGridTreatmentDate","formGridTreatmentDateTodayCheckbox","treatmentTitle","treatmentDescription","formGridTreatmentDescription","treatmentDose","formGridTreatmentDose","treatmentFrequency","formGridTreatmentFrequency","treatmentType","formGridTreatmentType","formGridTreatmentTypeSelect","treatmentAttachmentFormat","formGridTreatmentAttachmentFormat","treatmentAttachmentPath","treatmentAttachmentName","patientTreatment","updatePatientTreatment","updatePatientBillingHandler","formGridBillingTitle","billingDate","formGridBillingDate","formGridBillingDateTodayCheckbox","billingTitle","billingType","formGridBillingType","billingDescription","formGridBillingDescription","billingAmount","formGridBillingAmount","billingPaid","formGridBillingPaid","billingNotes","formGridBillingNotes","billingAttachmentFormat","formGridBillingAttachmentFormat","billingAttachmentPath","formGridBillingAttachmentPath","billingAttachmentName","patientBilling","updatePatientBilling","updatePatientAttachmentHandler","attachmentFormat","formGridPatientAttachmentFormat","attachmentPath","formGridPatientAttachmentPath","attachmentName","updatePatientAttachment","updatePatientNoteHandler","formGridNote","note","updatePatientNotes","updatePatientTagHandler","formGridTag","tag","updatePatientTags","modalConfirmSearchHandler","formBasicField","formBasicQuery","formBasicFieldSelect","search","getPatientField","modalConfirmSearchIdHandler","patientId","formBasicId","getPatientId","modalConfirmSearchVisitHandler","modalConfirmSearchNameHandler","formBasicName","regex","RegExp","result","filter","match","getPatientVisit","preventDefault","consultant","complaints","formBasicVisitDate","visitDate","substring","visitSurveys","surveys","x","date","substr","visitConsultants","visitComplaints","visitVitals","vitals","visitExaminations","examination","visitHistory","history","visitInvestigations","investigation","visitDiagnosis","diagnosis","visitTreatments","treatment","visitBilling","billing","patientName","complaint","survey","fetchPatientsAsc","patientsNameAsc","fetchPatientsDesc","patientsNameDesc","modalDeleteHandler","user","deletedPatient","deletePatient","deletedPatientId","deletedPatientPos","deletePatientInsuranceItem","company","deletePatientInsurance","deletePatientConsultantItem","reference","id","deletePatientConsultant","deletePatientNextOfKinItem","deletePatientNextOfKin","deletePatientComplaintItem","deletePatientComplaint","deletePatientSurveyItem","deletePatientSurvey","deletePatientVitalsItem","deletePatientVitals","deletePatientExaminationItem","type","deletePatientExamination","deletePatientHistoryItem","deletePatientHistory","deletePatientAllergiesItem","deletePatientAllergies","deletePatientMedicationItem","deletePatientMedication","deletePatientInvestigationItem","deletePatientInvestigation","deletePatientDiagnosisItem","deletePatientDiagnosis","deletePatientTreatmentItem","deletePatientTreatment","deletePatientBillingItem","deletePatientBilling","deletePatientAttachmentItem","deletePatientAttachment","deletePatientNoteItem","deletePatientTagItem","onViewAttachment","attachment","path","format","closeAttachmentView","closePdfCreator","showDetailHandler","nameElRef","createRef","componentDidMount","updatePatientSpecial","componentWillUnmount","render","fetchUsers","bind","contextType"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport S3 from 'react-aws-s3';\nimport S3FileUpload from 'react-s3';\n\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Button from 'react-bootstrap/Button';\nimport Accordion from 'react-bootstrap/Accordion';\nimport SidebarPage from './Sidebar';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\nimport TabContainer from 'react-bootstrap/TabContainer';\nimport TabContent from 'react-bootstrap/TabContent';\nimport TabPane from 'react-bootstrap/TabPane';\nimport Nav from 'react-bootstrap/Nav';\nimport Card from 'react-bootstrap/Card';\n\nimport PatientList from '../components/Patients/PatientList/PatientList';\nimport PatientDetail from '../components/Patients/PatientDetail';\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\nimport SearchPatientList from '../components/Patients/PatientList/SearchPatientList';\nimport SearchPatientForm from '../components/Forms/SearchPatientForm';\nimport SearchPatientIdForm from '../components/Forms/SearchPatientIdForm';\nimport SearchPatientNameForm from '../components/Forms/SearchPatientNameForm';\nimport SearchPatientVisitForm from '../components/Forms/SearchPatientVisitForm';\n\nimport AlertBox from '../components/AlertBox';\nimport AttachmentViewer from '../components/AttachmentViewer';\nimport PdfCreator from '../components/PdfCreator';\n\nimport CreatePatientForm from '../components/Forms/CreatePatientForm';\nimport UpdatePatientForm from '../components/Forms/UpdatePatientForm';\nimport UpdatePatientFieldForm from '../components/Forms/UpdatePatientFieldForm';\nimport UpdatePatientConsultantForm from '../components/Forms/UpdatePatientConsultantForm';\nimport UpdatePatientInsuranceForm from '../components/Forms/UpdatePatientInsuranceForm';\nimport UpdatePatientNextOfKinForm from '../components/Forms/UpdatePatientNextOfKinForm';\nimport UpdatePatientComplaintForm from '../components/Forms/UpdatePatientComplaintForm';\nimport UpdatePatientSurveyForm from '../components/Forms/UpdatePatientSurveyForm';\nimport UpdatePatientVitalsForm from '../components/Forms/UpdatePatientVitalsForm';\nimport UpdatePatientExaminationForm from '../components/Forms/UpdatePatientExaminationForm';\nimport UpdatePatientHistoryForm from '../components/Forms/UpdatePatientHistoryForm';\nimport UpdatePatientAllergiesForm from '../components/Forms/UpdatePatientAllergiesForm';\nimport UpdatePatientMedicationForm from '../components/Forms/UpdatePatientMedicationForm';\nimport UpdatePatientInvestigationForm from '../components/Forms/UpdatePatientInvestigationForm';\nimport UpdatePatientDiagnosisForm from '../components/Forms/UpdatePatientDiagnosisForm';\nimport UpdatePatientTreatmentForm from '../components/Forms/UpdatePatientTreatmentForm';\nimport UpdatePatientBillingForm from '../components/Forms/UpdatePatientBillingForm';\nimport UpdatePatientAttachmentForm from '../components/Forms/UpdatePatientAttachmentForm';\nimport UpdatePatientNoteForm from '../components/Forms/UpdatePatientNoteForm';\nimport UpdatePatientTagForm from '../components/Forms/UpdatePatientTagForm';\n\nimport './Users.css';\n\nclass PatientsPage extends Component {\n  state = {\n    creating: false,\n    updating: false,\n    searching: false,\n    updatingArray: false,\n    deleting: false,\n    patients: [],\n    searchPatients: [],\n    isLoading: false,\n    selectedPatient: null,\n    patientUpdateField: null,\n    patientSearchField: null,\n    patientSearchQuery: null,\n    canDelete: null,\n    visit: null,\n    userAlert: null,\n    showAttachment: false,\n    showThisAttachmentFile: null,\n    showThisAttachmentType: null,\n    createPdf: false,\n    pdfData: null,\n  };\n  isActive = true;\n\n  static contextType = AuthContext;\n\n  constructor(props) {\n    super(props);\n    this.nameElRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.fetchPatients();\n    if (this.context.user.name === 'admin579'){\n      this.setState({canDelete: true})\n    }\n  }\n\n\n  startCreatePatientHandler = () => {\n    this.setState({ creating: true });\n    console.log(\"CreatePatientForm...\");\n  };\n  startUpdatePatientHandler = () => {\n    this.setState({ updating: true, updatingArray: true });\n    console.log(\"UpdatePatientForm...\");\n  };\n  startSearchPatientHandler = () => {\n    this.setState({ searching: true });\n    console.log(\"SearchPatientForm...\");\n  };\n\n  modalConfirmHandler = (event) => {\n\n    console.log(\"CreatePatientFormData:  \", event.target.formGridName.value);\n\n    this.setState({ creating: false });\n    const userId = this.context.userId;\n\n    let title = event.target.formGridTitle.value;\n    let name = event.target.formGridName.value;\n    let dob = event.target.formGridDob.value;\n    let age = event.target.formGridAge.value;\n    let gender = event.target.formGridGender.value;\n    let addressNumber = event.target.formGridAddressNumber.value;\n    let addressStreet = event.target.formGridAddressStreet.value;\n    let addressTown = event.target.formGridAddressTown.value;\n    let addressParish = event.target.formGridAddressParish.value;\n    let addressPostOffice = event.target.formGridAddressPostOffice.value;\n    let contactPhone = event.target.formGridContactPhone.value;\n    let contactEmail = event.target.formGridContactEmail.value;\n\n    let registrationDate = event.target.formGridRegistrationDate.value;\n    if (event.target.formGridRegistrationDateTodayCheckbox.checked === true) {\n      registrationDate = new Date().toISOString().slice(0,10);\n    }\n    let referralDate = event.target.formGridReferralDate.value;\n    if (event.target.formGridReferralDateTodayCheckbox.checked === true) {\n      referralDate = new Date().toISOString().slice(0,10);\n    }\n\n    let expirationDate = event.target.formGridExpirationDate.value;\n    let attendingPhysicianName = event.target.formGridAttendingPhysicianName.value;\n    let attendingPhysicianEmail = event.target.formGridAttendingPhysicianEmail.value;\n    let attendingPhysicianPhone = event.target.formGridAttendingPhysicianPhone.value;\n    let referringDoctorName = event.target.formGridReferringDoctorName.value;\n    let referringDoctorEmail = event.target.formGridReferringDoctorEmail.value;\n    let referringDoctorPhone = event.target.formGridReferringDoctorPhone.value;\n    let occupationRole = event.target.formGridOccupationRole.value;\n    let occupationEmployer = event.target.formGridOccupationEmployer.value;\n    let occupationEmployerContactPhone = event.target.formGridOccupationEmployerContactPhone.value;\n    let occupationEmployerContactEmail = event.target.formGridOccupationEmployerContactEmail.value;\n\n\n    if (\n      name.trim().length === 0 ||\n      // title.trim().length === 0 ||\n      // name.trim().length === 0 ||\n      // dob.trim().length === 0 ||\n      // age.trim().length === 0 ||\n      // gender.trim().length === 0 ||\n      // addressNumber.trim().length === 0 ||\n      // addressStreet.trim().length === 0 ||\n      // addressTown.trim().length === 0 ||\n      // addressParish.trim().length === 0 ||\n      // addressPostOffice.trim().length === 0 ||\n      contactPhone.trim().length === 0\n      // contactEmail.trim().length === 0 ||\n      // registrationDate.trim().length === 0 ||\n      // referralDate.trim().length === 0 ||\n      // expirationDate.trim().length === 0 ||\n      // attendingPhysicianName.trim().length === 0 ||\n      // attendingPhysicianEmail.trim().length === 0 ||\n      // attendingPhysicianPhone.trim().length === 0 ||\n      // referringDoctorName.trim().length === 0 ||\n      // referringDoctorEmail.trim().length === 0 ||\n      // referringDoctorPhone.trim().length === 0 ||\n      // occupationRole.trim().length === 0 ||\n      // occupationEmployer.trim().length === 0 ||\n      // occupationEmployerContactPhone.trim().length === 0 ||\n      // occupationEmployerContactEmail.trim().length === 0\n\n    ) {\n      console.log(\"patient must have at least a Name and Contact Number!!!...Please try again...\");\n      this.setState({userAlert: \"patient requires Name and Contact Number!!!... Try again...\"});\n      return;\n    }\n\n    const patient = { title, name, dob, age, gender, addressNumber, addressStreet, addressTown, addressParish, addressPostOffice, contactPhone, contactEmail, registrationDate, referralDate, expirationDate, attendingPhysicianName, attendingPhysicianEmail, attendingPhysicianPhone, referringDoctorName, referringDoctorEmail, referringDoctorPhone, occupationRole, occupationEmployer, occupationEmployerContactPhone, occupationEmployerContactEmail };\n    console.log(`\n      creating patient...\n      title: ${title},\n      name: ${name},\n      dob: ${dob},\n      age: ${age},\n      gender: ${gender},\n      addressNumber: ${addressNumber},\n      addressStreet: ${addressStreet},\n      addressTown: ${addressTown},\n      addressParish: ${addressParish},\n      addressPostOffice: ${addressPostOffice},\n      contactPhone: ${contactPhone},\n      contactEmail: ${contactEmail},\n      registrationDate: ${registrationDate},\n      referralDate: ${referralDate},\n      expirationDate: ${expirationDate},\n      attendingPhysicianName: ${attendingPhysicianName},\n      attendingPhysicianEmail: ${attendingPhysicianEmail},\n      attendingPhysicianPhone: ${attendingPhysicianPhone},\n      referringDoctorName: ${referringDoctorName},\n      referringDoctorEmail: ${referringDoctorEmail},\n      referringDoctorPhone: ${referringDoctorPhone},\n      occupationRole: ${occupationRole},\n      occupationEmployer: ${occupationEmployer},\n      occupationEmployerContactPhone: ${occupationEmployerContactPhone},\n      occupationEmployerContactEmail: ${occupationEmployerContactEmail},\n      `);\n\n    const requestBody = {\n      query: `\n          mutation {createPatient(userId:\\\"${userId}\\\", patientInput:{title:\\\"${title}\\\",name:\\\"${name}\\\",dob:\\\"${dob}\\\",age:${age},gender:\\\"${gender}\\\",addressNumber:${addressNumber},addressStreet:\\\"${addressStreet}\\\",addressTown:\\\"${addressTown}\\\",addressParish:\\\"${addressParish}\\\",addressPostOffice:\\\"${addressPostOffice}\\\",contactPhone:\\\"${contactPhone}\\\",contactEmail:\\\"${contactEmail}\\\",registrationDate:\\\"${registrationDate}\\\",referralDate:\\\"${referralDate}\\\",expirationDate:\\\"${expirationDate}\\\",referringDoctorName:\\\"${referringDoctorName}\\\",referringDoctorEmail:\\\"${referringDoctorEmail}\\\",referringDoctorPhone:\\\"${referringDoctorPhone}\\\",attendingPhysicianName:\\\"${attendingPhysicianName}\\\",attendingPhysicianEmail:\\\"${attendingPhysicianEmail}\\\",attendingPhysicianPhone:\\\"${attendingPhysicianPhone}\\\",occupationRole:\\\"${occupationRole}\\\",occupationEmployer:\\\"${occupationEmployer}\\\",occupationEmployerContactPhone:\\\"${occupationEmployerContactPhone}\\\",occupationEmployerContactEmail:\\\"${occupationEmployerContactEmail}\\\"})\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n        `};\n\n    const token = this.context.token;\n\n    // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(`\n          response data:\n          ${JSON.stringify(resData.data.createPatient)}\n          `);\n          const responseAlert = JSON.stringify(resData.data).slice(2,15);\n          this.setState({userAlert: responseAlert});\n\n        const newPatient = resData.data.createPatient;\n        this.setState(prevState => {\n          const updatedPatients = [...prevState.patients];\n          updatedPatients.push(newPatient);\n\n          return { patients: updatedPatients };\n        });\n\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n  };\n\n  modalCancelHandler = () => {\n    this.setState({ creating: false, updating: false, selectedPatient: null });\n  };\n\n\n  modalConfirmUpdateHandler = (event) => {\n\n    // if(this.context.user.role !== 'admin') {\n    //   console.log(\"Not the Admin! No edit permission!!\");\n    // }\n\n    const userId = this.context.userId;\n    const selectedPatientId = this.context.selectedPatient._id;\n\n    console.log(\"UpdatePatientFormData:  \", event.target.formGridName.value);\n\n\n    this.setState({ updating: false });\n\n    let title = event.target.formGridTitle.value;\n    let name = event.target.formGridName.value;\n    let dob = event.target.formGridDob.value;\n    let age = event.target.formGridAge.value;\n    let gender = event.target.formGridGender.value;\n    let addressNumber = event.target.formGridAddressNumber.value;\n    let addressStreet = event.target.formGridAddressStreet.value;\n    let addressTown = event.target.formGridAddressTown.value;\n    let addressParish = event.target.formGridAddressParish.value;\n    let addressPostOffice = event.target.formGridAddressPostOffice.value;\n    let contactPhone = event.target.formGridContactPhone.value;\n    let contactEmail = event.target.formGridContactEmail.value;\n\n    let registrationDate = event.target.formGridRegistrationDate.value;\n    if (event.target.formGridRegistrationDateTodayCheckbox.checked === true) {\n      registrationDate = new Date().toISOString().slice(0,10);\n    }\n\n    let referralDate = event.target.formGridReferralDate.value;\n    if (event.target.formGridReferralDateTodayCheckbox.checked === true) {\n      referralDate = new Date().toISOString().slice(0,10);\n    }\n\n    let expirationDate = event.target.formGridExpirationDate.value;\n    if (event.target.formGridExpirationDateTodayCheckbox.checked === true) {\n      expirationDate = new Date().toISOString().slice(0,10);\n    }\n\n    let attendingPhysicianName = event.target.formGridAttendingPhysicianName.value;\n    let attendingPhysicianEmail = event.target.formGridAttendingPhysicianEmail.value;\n    let attendingPhysicianPhone = event.target.formGridAttendingPhysicianPhone.value;\n    let referringDoctorName = event.target.formGridReferringDoctorName.value;\n    let referringDoctorEmail = event.target.formGridReferringDoctorEmail.value;\n    let referringDoctorPhone = event.target.formGridReferringDoctorPhone.value;\n    let occupationRole = event.target.formGridOccupationRole.value;\n    let occupationEmployer = event.target.formGridOccupationEmployer.value;\n    let occupationEmployerContactPhone = event.target.formGridOccupationEmployerContactPhone.value;\n    let occupationEmployerContactEmail = event.target.formGridOccupationEmployerContactEmail.value;\n\n    if (title.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      title = this.context.selectedPatient.title;\n    }\n    if (name.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      name = this.context.selectedPatient.name;\n    }\n    if (dob.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      dob = this.context.selectedPatient.dob;\n    }\n    if (gender.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      gender = this.context.selectedPatient.gender;\n    }\n    if (age.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      age = this.context.selectedPatient.age;\n    }\n    if (addressNumber.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      addressNumber = this.context.selectedPatient.address.number;\n    }\n    if (addressStreet.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      addressStreet = this.context.selectedPatient.address.street;\n    }\n    if (addressTown.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      addressTown = this.context.selectedPatient.address.town;\n    }\n    if (addressParish.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      addressParish = this.context.selectedPatient.address.parish;\n    }\n    if (addressPostOffice.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      addressPostOffice = this.context.selectedPatient.address.postOffice;\n    }\n    if (contactPhone.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      contactPhone = this.context.selectedPatient.contact.phone;\n    }\n    if (contactEmail.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      contactEmail = this.context.selectedPatient.contact.email;\n    }\n    if (registrationDate.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      registrationDate = this.context.selectedPatient.registrationDate;\n    }\n    if (attendingPhysicianName.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      attendingPhysicianName = this.context.selectedPatient.attendingPhysician.name;\n    }\n    if (attendingPhysicianEmail.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      attendingPhysicianEmail = this.context.selectedPatient.attendingPhysician.email;\n    }\n    if (attendingPhysicianPhone.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      attendingPhysicianPhone = this.context.selectedPatient.attendingPhysician.phone;\n    }\n    if (referringDoctorName.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      referringDoctorName = this.context.selectedPatient.referringDoctor.name;\n    }\n    if (referringDoctorEmail.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      referringDoctorEmail = this.context.selectedPatient.referringDoctor.email;\n    }\n    if (referringDoctorPhone.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      referringDoctorPhone = this.context.selectedPatient.referringDoctor.phone;\n    }\n    if (occupationRole.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      occupationRole = this.context.selectedPatient.occupation.role;\n    }\n    if (occupationEmployer.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      occupationEmployer = this.context.selectedPatient.occupation.employer;\n    }\n    if (occupationEmployerContactEmail.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      occupationEmployerContactEmail = this.context.selectedPatient.occupation.contact.email;\n    }\n    if (occupationEmployerContactPhone.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      occupationEmployerContactPhone = this.context.selectedPatient.occupation.contact.phone;\n    }\n\n    const patient = { title, name, dob, age, gender, addressNumber, addressStreet, addressTown, addressParish, addressPostOffice, contactPhone, contactEmail, registrationDate, referralDate, expirationDate, attendingPhysicianName, attendingPhysicianEmail, attendingPhysicianPhone, referringDoctorName, referringDoctorEmail, referringDoctorPhone, occupationRole, occupationEmployer, occupationEmployerContactPhone, occupationEmployerContactEmail };\n    console.log(`\n      updating patient...\n      title: ${title},\n      name: ${name},\n      dob: ${dob},\n      age: ${age},\n      gender: ${gender},\n      addressNumber: ${addressNumber},\n      addressStreet: ${addressStreet},\n      addressTown: ${addressTown},\n      addressParish: ${addressParish},\n      addressPostOffice: ${addressPostOffice},\n      contactPhone: ${contactPhone},\n      contactEmail: ${contactEmail},\n      registrationDate: ${registrationDate},\n      referralDate: ${referralDate},\n      expirationDate: ${expirationDate},\n      attendingPhysicianName: ${attendingPhysicianName},\n      attendingPhysicianEmail: ${attendingPhysicianEmail},\n      attendingPhysicianPhone: ${attendingPhysicianPhone},\n      referringDoctorName: ${referringDoctorName},\n      referringDoctorEmail: ${referringDoctorEmail},\n      referringDoctorPhone: ${referringDoctorPhone},\n      occupationRole: ${occupationRole},\n      occupationEmployer: ${occupationEmployer},\n      occupationEmployerContactPhone: ${occupationEmployerContactPhone},\n      occupationEmployerContactEmail: ${occupationEmployerContactEmail},\n      `);\n      this.setState({userAlert: \"updating patient...\"});\n\n    const requestBody = {\n      query: `\n          mutation {updatePatient(userId:\"${userId}\",patientId:\"${selectedPatientId}\", patientInput:{title:\"${title}\",name:\"${name}\",dob:\"${dob}\",age:${age},gender:\"${gender}\",addressNumber:${addressNumber},addressStreet:\"${addressStreet}\",addressTown:\"${addressTown}\",addressParish:\"${addressParish}\",addressPostOffice:\"${addressPostOffice}\",contactPhone:\"${contactPhone}\",contactEmail:\"${contactEmail}\",registrationDate:\"${registrationDate}\",referralDate:\"${referralDate}\",expirationDate:\"${expirationDate}\",referringDoctorName:\"${referringDoctorName}\",referringDoctorEmail:\"${referringDoctorEmail}\",referringDoctorPhone:\"${referringDoctorPhone}\",attendingPhysicianName:\"${attendingPhysicianName}\",attendingPhysicianEmail:\"${attendingPhysicianEmail}\",attendingPhysicianPhone:\"${attendingPhysicianPhone}\",occupationRole:\"${occupationRole}\",occupationEmployer:\"${occupationEmployer}\",occupationEmployerContactPhone:\"${occupationEmployerContactPhone}\",occupationEmployerContactEmail:\"${occupationEmployerContactPhone}\"})\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n        `};\n\n    const token = this.context.token;\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n\n        const updatedPatientId = resData.data.updatePatient._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatient);\n\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatient})\n        this.fetchPatients();\n\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n  };\n\n\n  modalConfirmUpdateFieldHandler = (event) => {\n\n    const token = this.context.token;\n    const userId = this.context.userId;\n    let selectedPatientId = this.context.selectedPatient._id;\n\n    // if( this.context.user.role !== 'admin') {\n    //   console.log(\"Not the creator or Admin! No edit permission!!\");\n    //   selectedPatientId = null;\n    // }\n\n      console.log(\"UpdatePatientFieldFormData:  \", event.target.formGridField.value);\n      this.setState({ updating: false });\n\n      let field = null;\n      let query = event.target.formGridQuery.value;\n      if (event.target.formGridFieldSelect.value === \"select\") {\n        field = event.target.formGridField.value;\n      } else {\n        field = event.target.formGridFieldSelect.value;\n      }\n\n      const requestBody = {\n        query:`\n          mutation {updatePatientField(userId:\\\"${userId}\\\",patientId:\\\"${selectedPatientId}\\\",field:\\\"${field}\\\",query:\\\"${query}\\\")\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n        `};\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData.data.updatePatientField));\n\n          const updatedPatientId = resData.data.updatePatientField._id;\n          const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n          const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n          const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n          console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n          this.state.patients.push(resData.data.updatePatientField);\n          this.context.patients = this.state.patients;\n          const responseAlert = JSON.stringify(resData.data).slice(2,25);\n          this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientField})\n          this.fetchPatients();\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({userAlert: err});\n        });\n\n  }\n\n\nupdatePatientConsultantHandler = (event) => {\n\n  let token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n  const patientConsultantReference = this.context.selectedUser._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n  if (patientConsultantReference === undefined) {\n    console.log(`\n      select a Staff member before adding a Patient Consultant!!\n      `);\n      this.setState({userAlert: \"select a Staff member before adding a Patient Consultant!!...\"});\n      token = null;\n  }\n\n  console.log(\"UpdatePatientConsultantFormData:  \", event.target.formGridConsultantDate.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let consultantDate = event.target.formGridConsultantDate.value;\n  if (event.target.formGridConsultantDateTodayCheckbox.checked === true) {\n    consultantDate = new Date().toISOString().slice(0,10);\n  }\n\n  const patientConsultant = { consultantDate, patientConsultantReference };\n  console.log(`\n    adding patient consultant item...\n    userId: ${userId},\n    selectedPatientId: ${selectedPatientId},\n    consultantDate: ${consultantDate},\n    consultantReference: ${patientConsultantReference},\n    `);\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientConsultant(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{consultantDate:\" ${consultantDate}\",consultantReference: \"${patientConsultantReference}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    };\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData.data));\n\n          const updatedPatientId = resData.data.updatePatientConsultant._id;\n          const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n          const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n          const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n          console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n          this.state.patients.push(resData.data.updatePatientConsultant);\n          this.context.patients = this.state.patients;\n          const responseAlert = JSON.stringify(resData.data).slice(2,25);\n          this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientConsultant})\n          this.fetchPatients();\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({userAlert: err});\n        });\n\n}\nupdatePatientInsuranceHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientInsuranceFormData:  \", event.target.formGridInsuranceCompany.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let insuranceCompany = event.target.formGridInsuranceCompany.value;\n  let insuranceNumber = event.target.formGridInsuranceNumber.value;\n\n  let insuranceExpiry = event.target.formGridInsuranceExpiry.value;\n\n  let insuranceDescription = event.target.formGridInsuranceDescription.value;\n  let insuranceSubscriberCompany = event.target.formGridInsuranceSubscriberCompany.value;\n  let insuranceSubscriberDescription = event.target.formGridInsuranceSubscriberDescription.value;\n\n  const patientInsurance = { insuranceCompany, insuranceNumber, insuranceExpiry, insuranceDescription, insuranceSubscriberCompany, insuranceSubscriberDescription };\n  console.log(`\n    adding patient insurance item...\n    userId: ${userId},\n    selectedPatientId: ${selectedPatientId},\n    insuranceCompany: ${insuranceCompany},\n    insuranceNumber: ${insuranceNumber},\n    insuranceExpiry: ${insuranceExpiry},\n    insuranceDescription: ${insuranceDescription},\n    insuranceSubscriberCompany: ${insuranceSubscriberCompany},\n    insuranceSubscriberDescription: ${insuranceSubscriberDescription},\n    `);\n    this.setState({userAlert: \"adding patient insurance item...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientInsurance(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{insuranceCompany:\"${insuranceCompany}\",insuranceNumber:\"${insuranceNumber}\",insuranceDescription:\"${insuranceDescription}\",insuranceExpiry:\"${insuranceExpiry}\",insuranceSubscriberCompany:\"${insuranceSubscriberCompany}\",insuranceSubscriberDescription:\"${insuranceSubscriberDescription}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    };\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData.data));\n\n          const updatedPatientId = resData.data.updatePatientInsurance._id;\n          const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n          const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n          const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n          console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n          this.state.patients.push(resData.data.updatePatientInsurance);\n          this.context.patients = this.state.patients;\n          const responseAlert = JSON.stringify(resData.data).slice(2,25);\n          this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientInsurance})\n          this.fetchPatients();\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({userAlert: err});\n        });\n\n}\n\nupdatePatientNextOfKinHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientNextOfKinFormData:  \", event.target.formGridNextOfKinName.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let nextOfKinName = event.target.formGridNextOfKinName.value;\n  let nextOfKinPhone = event.target.formGridNextOfKinPhone.value;\n  let nextOfKinEmail = event.target.formGridNextOfKinEmail.value;\n\n  const patientNextOfKin = { nextOfKinName, nextOfKinPhone, nextOfKinEmail };\n  console.log(`\n    adding patient nextOfKin item...\n    userId: ${userId},\n    selectedPatientId: ${selectedPatientId},\n    nextOfKinName: ${nextOfKinName},\n    nextOfKinPhone: ${nextOfKinPhone},\n    nextOfKinEmail: ${nextOfKinEmail},\n    `);\n    this.setState({userAlert: \"adding patient nextOfKin item...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientNextOfKin(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{nextOfKinName:\"${nextOfKinName}\",nextOfKinEmail:\"${nextOfKinEmail}\",nextOfKinPhone:\"${nextOfKinPhone}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    };\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData.data));\n\n          const updatedPatientId = resData.data.updatePatientNextOfKin._id;\n          const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n          const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n          const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n          console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n          this.state.patients.push(resData.data.updatePatientNextOfKin);\n          this.context.patients = this.state.patients;\n          const responseAlert = JSON.stringify(resData.data).slice(2,25);\n          this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientNextOfKin})\n          this.fetchPatients();\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({userAlert: err});\n        });\n}\n\n\nupdatePatientComplaintHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientComplaintFormData:  \", event.target.formGridComplaintTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let complaintTitle = event.target.formGridComplaintTitle.value;\n\n  let complaintDate = event.target.formGridComplaintDate.value;\n  if (event.target.formGridComplaintDateTodayCheckbox.checked === true) {\n    complaintDate = new Date().toISOString().slice(0,10);\n  }\n\n  let complaintDescription = event.target.formGridComplaintDescription.value;\n  let complaintAnamnesis = event.target.formGridComplaintAnamnesis.value;\n  // let complaintAttachmentName = event.target.formGridComplaintAttachmentName.value;\n  let complaintAttachmentFormat = event.target.formGridComplaintAttachmentFormat.value;\n  // let complaintAttachmentPath = event.target.formGridComplaintAttachmentPath.value;\n  let complaintAttachmentPath = \"uploads/patients/\"+selectedPatientId+\"/complaints\";\n  let file = AuthContext._currentValue.file;\n\n  console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n    const config = {\n      bucketName: this.context.creds.s3.bucketName,\n      dirName: complaintAttachmentPath,\n      region: this.context.creds.s3.region,\n      accessKeyId: this.context.creds.s3.accessKeyId,\n      secretAccessKey: this.context.creds.s3.secretAccessKey,\n    }\n\n  const ReactS3Client = new S3(config);\n  const newFileName = file.name;\n  const complaintAttachmentName = newFileName;\n\n  ReactS3Client\n      .uploadFile(file, newFileName)\n      .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n      .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n  const patientComplaint = { complaintTitle, complaintDate, complaintDescription, complaintAnamnesis, complaintAttachmentName, complaintAttachmentFormat, complaintAttachmentPath };\n  console.log(`\n    adding patient complaint...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    complaintTitle: ${complaintTitle},\n    complaintDate: ${complaintDate},\n    complaintDescription: ${complaintDescription},\n    complaintAnamnesis: ${complaintAnamnesis},\n    complaintAttachmentName: ${complaintAttachmentName},\n    complaintAttachmentFormat: ${complaintAttachmentFormat},\n    complaintAttachmentPath: ${complaintAttachmentPath},\n    `);\n    this.setState({userAlert: \"adding patient complaint...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientComplaint(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{complaintDate:\"${complaintDate}\",complaintTitle:\"${complaintTitle}\",complaintDescription:\"${complaintDescription}\",complaintAnamnesis:\"${complaintAnamnesis}\",complaintAttachmentName:\"${complaintAttachmentName}\",complaintAttachmentFormat:\"${complaintAttachmentFormat}\",complaintAttachmentPath:\"${complaintAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientComplaint._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientComplaint);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientComplaint})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n}\n\nupdatePatientSurveyHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientSurveyFormData:  \", event.target.formGridSurveyTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let surveyDate = event.target.formGridSurveyDate.value;\n  if (event.target.formGridSurveyDateTodayCheckbox.checked === true) {\n    surveyDate = new Date().toISOString().slice(0,10);\n  }\n\n  let surveyTitle = event.target.formGridSurveyTitle.value;\n  let surveyDescription = event.target.formGridSurveyDescription.value;\n  // let surveyAttachmentName = event.target.formGridSurveyAttachmentName.value;\n  let surveyAttachmentFormat = event.target.formGridSurveyAttachmentFormat.value;\n  let surveyAttachmentPath = \"uploads/patients/\"+selectedPatientId+\"/surveys\";\n  // let surveyAttachmentPath = event.target.formGridSurveyAttachmentPath.value;\n  let file = AuthContext._currentValue.file;\n\n  console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n\n    const config = {\n      bucketName: this.context.creds.s3.bucketName,\n      dirName: surveyAttachmentPath,\n      region: this.context.creds.s3.region,\n      accessKeyId: this.context.creds.s3.accessKeyId,\n      secretAccessKey: this.context.creds.s3.secretAccessKey,\n    }\n\n  const ReactS3Client = new S3(config);\n  const newFileName = file.name;\n  const surveyAttachmentName = newFileName;\n\n  ReactS3Client\n      .uploadFile(file, newFileName)\n      .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n      .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n  const patientSurvey = { surveyDate, surveyTitle, surveyDescription, surveyAttachmentName, surveyAttachmentFormat, surveyAttachmentPath };\n  console.log(`\n    adding patient survey...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    surveyDate: ${surveyDate},\n    surveyTitle: ${surveyTitle},\n    surveyDescription: ${surveyDescription},\n    surveyAttachmentName: ${surveyAttachmentName},\n    surveyAttachmentFormat: ${surveyAttachmentFormat},\n    surveyAttachmentPath: ${surveyAttachmentPath},\n    `);\n    this.setState({userAlert: \"adding patient survey...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientSurvey(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{surveyDate:\"${surveyDate}\",surveyTitle:\"${surveyTitle}\",surveyDescription:\"${surveyDescription}\",surveyAttachmentName:\"${surveyAttachmentName}\",surveyAttachmentFormat:\"${surveyAttachmentFormat}\",surveyAttachmentPath:\"${surveyAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientSurvey._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientSurvey);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientSurvey})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n}\n\nupdatePatientVitalsHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientVitalsFormData:  \", event.target.formGridVitalsDate.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let vitalsDate = event.target.formGridVitalsDate.value;\n  if (event.target.formGridVitalsDateTodayCheckbox.checked === true) {\n    vitalsDate = new Date().toISOString().slice(0,10);\n  }\n\n  let vitalsPr = event.target.formGridVitalsPr.value;\n  let vitalsBp1 = event.target.formGridVitalsBp1.value;\n  let vitalsBp2 = event.target.formGridVitalsBp2.value;\n  let vitalsRr = event.target.formGridVitalsRr.value;\n  let vitalsTemp = event.target.formGridVitalsTemp.value;\n  let vitalsPs02 = event.target.formGridVitalsPs02.value;\n  let vitalsHeight = event.target.formGridVitalsHeight.value;\n  let vitalsWeight = event.target.formGridVitalsWeight.value;\n  let vitalsBmi = event.target.formGridVitalsBmi.value;\n  let vitalsUrineType = event.target.formGridVitalsUrineType.value;\n  let vitalsUrineValue = event.target.formGridVitalsUrineValue.value;\n\n  const patientVitals = {  };\n  console.log(`\n    adding patient vitals...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    `);\n    this.setState({userAlert: \"adding patient vitals...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientVitals(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{vitalsDate:\"${vitalsDate}\",vitalsPr:${vitalsPr},vitalsBp1:${vitalsBp1},vitalsBp2:${vitalsBp2},vitalsRr:${vitalsRr},vitalsTemp:${vitalsTemp},vitalsPs02:${vitalsPs02},vitalsHeight:${vitalsHeight},vitalsWeight:${vitalsWeight},vitalsBmi:${vitalsBmi},vitalsUrineType:\"${vitalsUrineType}\",vitalsUrineValue:\"${vitalsUrineValue}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientVitals._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientVitals);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientVitals})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n}\n\n\nupdatePatientExaminationHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientExaminationFormData:  \", event.target.formGridExaminationArea.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let examinationDate = event.target.formGridExaminationDate.value;\n  if (event.target.formGridExaminationDateTodayCheckbox.checked === true) {\n    examinationDate = new Date().toISOString().slice(0,10);\n  }\n\n  let examinationGeneral = event.target.formGridExaminationGeneral.value;\n  let examinationArea = undefined;\n  if (event.target.formGridExaminationAreaSelect === \"select\") {\n    examinationArea = event.target.formGridExaminationArea.value;\n  } else {\n    examinationArea = event.target.formGridExaminationAreaSelect.value;\n  }\n  let examinationType = event.target.formGridExaminationType.value;\n  let examinationMeasure = event.target.formGridExaminationMeasure.value;\n  let examinationValue = event.target.formGridExaminationValue.value;\n  let examinationDescription = event.target.formGridExaminationDescription.value;\n  let examinationFollowUp = event.target.formGridExaminationFollowUp.value;\n  // let examinationAttachmentName = event.target.formGridExaminationAttachmentName.value;\n  let examinationAttachmentFormat = event.target.formGridExaminationAttachmentFormat.value;\n  let examinationAttachmentPath = \"uploads/patients/\"+selectedPatientId+\"/examinations\";\n  // let examinationAttachmentPath = event.target.formGridExaminationAttachmentPath.value;\n  let file = AuthContext._currentValue.file;\n\n  console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n    const config = {\n      bucketName: this.context.creds.s3.bucketName,\n      dirName: examinationAttachmentPath,\n      region: this.context.creds.s3.region,\n      accessKeyId: this.context.creds.s3.accessKeyId,\n      secretAccessKey: this.context.creds.s3.secretAccessKey,\n    }\n  const ReactS3Client = new S3(config);\n  const newFileName = file.name;\n  const examinationAttachmentName = newFileName;\n\n  ReactS3Client\n      .uploadFile(file, newFileName)\n      .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n      .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n  const patientExamination = { examinationArea, examinationGeneral, examinationType, examinationMeasure, examinationValue, examinationAttachmentName, examinationAttachmentFormat, examinationAttachmentPath };\n\n  console.log(`\n    adding patient examination...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    examinationDate: ${examinationDate},\n    examinationGeneral: ${examinationGeneral},\n    examinationArea: ${examinationArea},\n    examinationType: ${examinationType},\n    examinationMeasure: ${examinationMeasure},\n    examinationValue: ${examinationValue},\n    examinationDescription: ${examinationDescription},\n    examinationFollowUp: ${examinationFollowUp},\n    examinationAttachmentName: ${examinationAttachmentName},\n    examinationAttachmentFormat: ${examinationAttachmentFormat},\n    examinationAttachmentPath: ${examinationAttachmentPath},\n    `);\n    this.setState({userAlert: \"adding patient examination...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientExamination(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{examinationDate:\"${examinationDate}\",examinationGeneral:\"${examinationGeneral}\",examinationArea:\"${examinationArea}\",examinationType:\"${examinationType}\",examinationMeasure:\"${examinationMeasure}\",examinationValue:\"${examinationValue}\",examinationDescription:\"${examinationDescription}\",examinationFollowUp:${examinationFollowUp},examinationAttachmentName:\"${examinationAttachmentName}\",examinationAttachmentFormat:\"${examinationAttachmentFormat}\",examinationAttachmentPath:\"${examinationAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientExamination._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientExamination);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientExamination})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n}\n\n\nupdatePatientHistoryHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientHistoryFormData:  \", event.target.formGridHistoryTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let historyType = event.target.formGridHistoryType.value;\n\n  let historyDate = event.target.formGridHistoryDate.value;\n  if (event.target.formGridHistoryDateTodayCheckbox.checked === true) {\n    historyDate = new Date().toISOString().slice(0,10);\n  }\n\n  let historyTitle = event.target.formGridHistoryTitle.value;\n  let historyDescription = event.target.formGridHistoryDescription.value;\n  // let historyAttachmentName = event.target.formGridHistoryAttachmentName.value;\n  let historyAttachmentFormat = event.target.formGridHistoryAttachmentFormat.value;\n  let historyAttachmentPath = \"uploads/patients/\"+selectedPatientId+\"/history\";\n  // let historyAttachmentPath = event.target.formGridHistoryAttachmentPath.value;\n  let file = AuthContext._currentValue.file;\n\n  console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n    const config = {\n      bucketName: this.context.creds.s3.bucketName,\n      dirName: historyAttachmentPath,\n      region: this.context.creds.s3.region,\n      accessKeyId: this.context.creds.s3.accessKeyId,\n      secretAccessKey: this.context.creds.s3.secretAccessKey,\n    }\n  const ReactS3Client = new S3(config);\n  const newFileName = file.name;\n  const historyAttachmentName = newFileName;\n\n  ReactS3Client\n      .uploadFile(file, newFileName)\n      .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n      .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n  const patientHistory = { historyType, historyDate, historyTitle, historyDescription, historyAttachmentName, historyAttachmentFormat, historyAttachmentPath };\n  console.log(`\n    adding patient history...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    historyType: ${historyType},\n    historyDate: ${historyDate},\n    historyTitle: ${historyTitle},\n    historyDescription: ${historyDescription},\n    historyAttachmentName: ${historyAttachmentName},\n    historyAttachmentFormat: ${historyAttachmentFormat},\n    historyAttachmentPath: ${historyAttachmentPath},\n    `);\n    this.setState({userAlert: \"adding patient history...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientHistory(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{historyTitle:\"${historyTitle}\",historyType:\"${historyType}\",historyDate:\"${historyDate}\",historyDescription:\"${historyDescription}\",historyAttachmentName:\"${historyAttachmentName}\",historyAttachmentFormat:\"${historyAttachmentFormat}\",historyAttachmentPath:\"${historyAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientHistory._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientHistory);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientHistory})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n}\n\n\nupdatePatientAllergiesHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientAllergiesFormData:  \", event.target.formGridAllergiesTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let allergiesTitle = event.target.formGridAllergiesTitle.value;\n  let allergiesType = undefined;\n  if (event.target.formGridAllergiesTypeSelect === \"select\") {\n    allergiesType = event.target.formGridAllergiesType.value;\n  } else {\n    allergiesType = event.target.formGridAllergiesTypeSelect.value;\n  }\n  let allergiesDescription = event.target.formGridAllergiesDescription.value;\n  // let allergiesAttachmentName = event.target.formGridAllergiesAttachmentName.value;\n  let allergiesAttachmentFormat = event.target.formGridAllergiesAttachmentFormat.value;\n  let allergiesAttachmentPath = \"uploads/patients/\"+selectedPatientId+\"/allergies\";\n  // let allergiesAttachmentPath = event.target.formGridAllergiesAttachmentPath.value;\n  let file = AuthContext._currentValue.file;\n\n  console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n    const config = {\n      bucketName: this.context.creds.s3.bucketName,\n      dirName: allergiesAttachmentPath,\n      region: this.context.creds.s3.region,\n      accessKeyId: this.context.creds.s3.accessKeyId,\n      secretAccessKey: this.context.creds.s3.secretAccessKey,\n    }\n  const ReactS3Client = new S3(config);\n  const newFileName = file.name;\n  const allergiesAttachmentName = newFileName;\n\n  ReactS3Client\n      .uploadFile(file, newFileName)\n      .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n      .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n  const patientAllergies = { allergiesTitle, allergiesType, allergiesDescription, allergiesAttachmentName, allergiesAttachmentFormat, allergiesAttachmentPath };\n\n  console.log(`\n    adding patient allergies...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    allergiesTitle: ${allergiesTitle},\n    allergiesType: ${allergiesType},\n    allergiesDescription: ${allergiesDescription},\n    allergiesAttachmentName: ${allergiesAttachmentName},\n    allergiesAttachmentFormat: ${allergiesAttachmentFormat},\n    allergiesAttachmentPath: ${allergiesAttachmentPath},\n    `);\n    this.setState({userAlert: \"adding patient allergies...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientAllergies(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{allergiesTitle:\"${allergiesTitle}\",allergiesType:\"${allergiesType}\", allergiesDescription:\"${allergiesDescription}\",allergiesAttachmentName:\"${allergiesAttachmentName}\",allergiesAttachmentFormat:\"${allergiesAttachmentFormat}\",allergiesAttachmentPath:\"${allergiesAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientAllergies._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientAllergies);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientAllergies})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n\n}\n\n\nupdatePatientMedicationHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientMedicationFormData:  \", event.target.formGridMedicationTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let medicationTitle = event.target.formGridMedicationTitle.value;\n  let medicationType = event.target.formGridMedicationType.value;\n  let medicationDescription = event.target.formGridMedicationDescription.value;\n  // let medicationAttachmentName = event.target.formGridMedicationAttachmentName.value;\n  let medicationAttachmentFormat = event.target.formGridMedicationAttachmentFormat.value;\n  let medicationAttachmentPath = \"uploads/patients/\"+selectedPatientId+\"/medication\";\n  // let medicationAttachmentPath = event.target.formGridMedicationAttachmentPath.value;\n  let file = AuthContext._currentValue.file;\n\n  console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n    const config = {\n      bucketName: this.context.creds.s3.bucketName,\n      dirName: medicationAttachmentPath,\n      region: this.context.creds.s3.region,\n      accessKeyId: this.context.creds.s3.accessKeyId,\n      secretAccessKey: this.context.creds.s3.secretAccessKey,\n    }\n  const ReactS3Client = new S3(config);\n  const newFileName = file.name;\n  const medicationAttachmentName = newFileName;\n\n  ReactS3Client\n      .uploadFile(file, newFileName)\n      .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n      .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n  const patientMedication = { medicationTitle, medicationType, medicationDescription, medicationAttachmentName, medicationAttachmentFormat, medicationAttachmentPath };\n\n  console.log(`\n    adding patient medication...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    medicationTitle: ${medicationTitle},\n    medicationType: ${medicationType},\n    medicationDescription: ${medicationDescription},\n    medicationAttachmentName: ${medicationAttachmentName},\n    medicationAttachmentFormat: ${medicationAttachmentFormat},\n    medicationAttachmentPath: ${medicationAttachmentPath},\n    `);\n    this.setState({userAlert: \"adding patient medication...\"});\n\n    const requestBody = {\n      query:`\n      mutation {updatePatientMedication(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{medicationTitle:\"${medicationTitle}\",medicationType:\"${medicationType}\" medicationDescription:\"${medicationDescription}\",medicationAttachmentName:\"${medicationAttachmentName}\",medicationAttachmentFormat:\"${medicationAttachmentFormat}\",medicationAttachmentPath:\"${medicationAttachmentPath}\"})\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientMedication._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientMedication);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientMedication})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n}\n\n\nupdatePatientInvestigationHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientInvestigationFormData:  \", event.target.formGridInvestigationTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let investigationDate = event.target.formGridInvestigationDate.value;\n  if (event.target.formGridInvestigationDateTodayCheckbox.checked === true) {\n    investigationDate = new Date().toISOString().slice(0,10);\n  }\n\n  let investigationTitle = event.target.formGridInvestigationTitle.value;\n  let investigationType = undefined;\n  if (event.target.formGridInvestigationTypeSelect === \"select\") {\n    investigationType = event.target.formGridInvestigationType.value;\n  } else {\n    investigationType = event.target.formGridInvestigationTypeSelect.value;\n  }\n  let investigationDescription = event.target.formGridInvestigationDescription.value;\n  // let investigationAttachmentName = event.target.formGridInvestigationAttachmentName.value;\n  let investigationAttachmentFormat = event.target.formGridInvestigationAttachmentFormat.value;\n  let investigationAttachmentPath = \"uploads/patients/\"+selectedPatientId+\"/investigation\";\n  // let investigationAttachmentPath = event.target.formGridInvestigationAttachmentPath.value;\n  let file = AuthContext._currentValue.file;\n\n  console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n    const config = {\n      bucketName: this.context.creds.s3.bucketName,\n      dirName: investigationAttachmentPath,\n      region: this.context.creds.s3.region,\n      accessKeyId: this.context.creds.s3.accessKeyId,\n      secretAccessKey: this.context.creds.s3.secretAccessKey,\n    }\n  const ReactS3Client = new S3(config);\n  const newFileName = file.name;\n  const investigationAttachmentName = newFileName;\n\n  ReactS3Client\n      .uploadFile(file, newFileName)\n      .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n      .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n  const patientInvestigation = { investigationDate, investigationTitle, investigationType, investigationDescription, investigationAttachmentName, investigationAttachmentFormat, investigationAttachmentPath };\n\n  console.log(`\n    adding patient investigation...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    investigationDate: ${investigationDate},\n    investigationTitle: ${investigationTitle},\n    investigationType: ${investigationType},\n    investigationDescription: ${investigationDescription},\n    investigationAttachmentName: ${investigationAttachmentName},\n    investigationAttachmentFormat: ${investigationAttachmentFormat},\n    investigationAttachmentPath: ${investigationAttachmentPath},\n    `);\n    this.setState({userAlert: \"adding patient investigation...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientInvestigation(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{investigationDate:\"${investigationDate}\",investigationTitle:\"${investigationTitle}\",investigationType:\"${investigationType}\",investigationDescription:\"${investigationDescription}\",investigationAttachmentName:\"${investigationAttachmentName}\",investigationAttachmentFormat:\"${investigationAttachmentFormat}\",investigationAttachmentPath:\"${investigationAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientInvestigation._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientInvestigation);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientInvestigation})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n}\n\n\nupdatePatientDiagnosisHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientDiagnosisFormData:  \", event.target.formGridDiagnosisTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let diagnosisDate = event.target.formGridDiagnosisDate.value;\n  if (event.target.formGridDiagnosisDateTodayCheckbox.checked === true) {\n    diagnosisDate = new Date().toISOString().slice(0,10);\n  }\n\n  let diagnosisTitle = event.target.formGridDiagnosisTitle.value;\n  let diagnosisType = event.target.formGridDiagnosisType.value;\n  let diagnosisDescription = event.target.formGridDiagnosisDescription.value;\n  // let diagnosisAttachmentName = event.target.formGridDiagnosisAttachmentName.value;\n  let diagnosisAttachmentFormat = event.target.formGridDiagnosisAttachmentFormat.value;\n  let diagnosisAttachmentPath = \"uploads/patients/\"+selectedPatientId+\"/diagnosis\";\n  // let diagnosisAttachmentPath = event.target.formGridDiagnosisAttachmentPath.value;\n  let file = AuthContext._currentValue.file;\n\n  console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n    const config = {\n      bucketName: this.context.creds.s3.bucketName,\n      dirName: diagnosisAttachmentPath,\n      region: this.context.creds.s3.region,\n      accessKeyId: this.context.creds.s3.accessKeyId,\n      secretAccessKey: this.context.creds.s3.secretAccessKey,\n    }\n  const ReactS3Client = new S3(config);\n  const newFileName = file.name;\n  const diagnosisAttachmentName = newFileName;\n\n  ReactS3Client\n      .uploadFile(file, newFileName)\n      .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n      .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n  const patientDiagnosis = { diagnosisDate, diagnosisTitle, diagnosisType, diagnosisDescription, diagnosisAttachmentName, diagnosisAttachmentFormat, diagnosisAttachmentPath };\n\n  console.log(`\n    adding patient diagnosis...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    diagnosisDate: ${diagnosisDate},\n    diagnosisTitle: ${diagnosisTitle},\n    diagnosisType: ${diagnosisType},\n    diagnosisDescription: ${diagnosisDescription},\n    diagnosisAttachmentName: ${diagnosisAttachmentName},\n    diagnosisAttachmentFormat: ${diagnosisAttachmentFormat},\n    diagnosisAttachmentPath: ${diagnosisAttachmentPath},\n    `);\n    this.setState({userAlert: \"adding patient diagnosis...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientDiagnosis(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{diagnosisDate:\"${diagnosisDate}\",diagnosisTitle:\"${diagnosisTitle}\",diagnosisType:\"${diagnosisType}\",diagnosisDescription:\"${diagnosisDescription}\",diagnosisAttachmentName:\"${diagnosisAttachmentName}\",diagnosisAttachmentFormat:\"${diagnosisAttachmentFormat}\",diagnosisAttachmentPath:\"${diagnosisAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientDiagnosis._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientDiagnosis);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientDiagnosis})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n}\n\n\nupdatePatientTreatmentHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientTreatmentFormData:  \", event.target.formGridTreatmentTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let treatmentDate = event.target.formGridTreatmentDate.value;\n  if (event.target.formGridTreatmentDateTodayCheckbox.checked === true) {\n    treatmentDate = new Date().toISOString().slice(0,10);\n  }\n\n  let treatmentTitle = event.target.formGridTreatmentTitle.value;\n  let treatmentDescription = event.target.formGridTreatmentDescription.value;\n  let treatmentDose = event.target.formGridTreatmentDose.value;\n  let treatmentFrequency = event.target.formGridTreatmentFrequency.value;\n  let treatmentType = undefined;\n  if (event.target.formGridInvestigationTypeSelect === \"select\") {\n    treatmentType = event.target.formGridTreatmentType.value;\n  } else {\n    treatmentType = event.target.formGridTreatmentTypeSelect.value;\n  }\n  // let treatmentAttachmentName = event.target.formGridTreatmentAttachmentName.value;\n  let treatmentAttachmentFormat = event.target.formGridTreatmentAttachmentFormat.value;\n  let treatmentAttachmentPath = \"uploads/patients/\"+selectedPatientId+\"/treatment\";\n  // let treatmentAttachmentPath = event.target.formGridTreatmentAttachmentPath.value;\n  let file = AuthContext._currentValue.file;\n\n  console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n    const config = {\n      bucketName: this.context.creds.s3.bucketName,\n      dirName: treatmentAttachmentPath,\n      region: this.context.creds.s3.region,\n      accessKeyId: this.context.creds.s3.accessKeyId,\n      secretAccessKey: this.context.creds.s3.secretAccessKey,\n    }\n  const ReactS3Client = new S3(config);\n  const newFileName = file.name;\n  const treatmentAttachmentName = newFileName;\n\n  ReactS3Client\n      .uploadFile(file, newFileName)\n      .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n      .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n\n  const patientTreatment = { treatmentDate, treatmentTitle, treatmentDescription, treatmentDose, treatmentFrequency, treatmentType, treatmentAttachmentName, treatmentAttachmentFormat, treatmentAttachmentPath };\n\n  console.log(`\n    adding patient treatment...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    treatmentDate: ${treatmentDate},\n    treatmentTitle: ${treatmentTitle},\n    treatmentDescription: ${treatmentDescription},\n    treatmentDose: ${treatmentDose},\n    treatmentFrequency: ${treatmentFrequency},\n    treatmentType: ${treatmentType},\n    treatmentAttachmentName: ${treatmentAttachmentName},\n    treatmentAttachmentFormat: ${treatmentAttachmentFormat},\n    treatmentAttachmentPath: ${treatmentAttachmentPath},\n    `);\n    this.setState({userAlert: \"adding patient treatment...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientTreatment(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{treatmentDate:\"${treatmentDate}\",treatmentTitle:\"${treatmentTitle}\",treatmentType:\"${treatmentType}\",treatmentDescription:\"${treatmentDescription}\",treatmentDose:\"${treatmentDose}\",treatmentFrequency:\"${treatmentFrequency}\",treatmentAttachmentName:\"${treatmentAttachmentName}\",treatmentAttachmentFormat:\"${treatmentAttachmentFormat}\",treatmentAttachmentPath:\"${treatmentAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `}\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientTreatment._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientTreatment);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientTreatment})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n}\n\n\n\nupdatePatientBillingHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientBillingFormData:  \", event.target.formGridBillingTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let billingDate = event.target.formGridBillingDate.value;\n  if (event.target.formGridBillingDateTodayCheckbox.checked === true) {\n    billingDate = new Date().toISOString().slice(0,10);\n  }\n\n  let billingTitle = event.target.formGridBillingTitle.value;\n  let billingType = event.target.formGridBillingType.value;\n  let billingDescription = event.target.formGridBillingDescription.value;\n  let billingAmount = event.target.formGridBillingAmount.value;\n  let billingPaid = event.target.formGridBillingPaid.value;\n  let billingNotes = event.target.formGridBillingNotes.value;\n  // let billingAttachmentName = event.target.formGridBillingAttachmentName.value;\n  let billingAttachmentFormat = event.target.formGridBillingAttachmentFormat.value;\n  let billingAttachmentPath = event.target.formGridBillingAttachmentPath.value;\n  let file = AuthContext._currentValue.file;\n\n  console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n    const config = {\n      bucketName: this.context.creds.s3.bucketName,\n      dirName: billingAttachmentPath,\n      region: this.context.creds.s3.region,\n      accessKeyId: this.context.creds.s3.accessKeyId,\n      secretAccessKey: this.context.creds.s3.secretAccessKey,\n    }\n  const ReactS3Client = new S3(config);\n  const newFileName = file.name;\n  const billingAttachmentName = newFileName;\n\n  ReactS3Client\n      .uploadFile(file, newFileName)\n      .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n      .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n  const patientBilling = { billingDate, billingTitle, billingType, billingDescription, billingAmount, billingPaid, billingNotes, billingAttachmentName, billingAttachmentFormat, billingAttachmentPath };\n\n  console.log(`\n    adding patient billing...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    billingDate: ${billingDate},\n    billingTitle: ${billingTitle},\n    billingType: ${billingType},\n    billingDescription: ${billingDescription},\n    billingAmount: ${billingAmount},\n    billingPaid: ${billingPaid},\n    billingNotes: ${billingNotes},\n    billingAttachmentName: ${billingAttachmentName},\n    billingAttachmentFormat: ${billingAttachmentFormat},\n    billingAttachmentPath: ${billingAttachmentPath},\n    `);\n    this.setState({userAlert: \"adding patient billing...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientBilling(userId:\\\"${userId}\\\", patientId:\\\"${selectedPatientId}\\\",patientInput:{billingDate:\\\"${billingDate}\\\",billingTitle:\\\"${billingTitle}\\\",billingType:\\\"${billingType}\\\",billingDescription:\\\"${billingDescription}\\\",billingAmount:${billingAmount},billingPaid:${billingPaid},billingNotes:\\\"${billingNotes}\\\",billingAttachmentName:\\\"${billingAttachmentName}\\\",billingAttachmentFormat:\\\"${billingAttachmentFormat}\\\",billingAttachmentPath:\\\"${billingAttachmentPath}\\\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientBilling._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientBilling);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientBilling})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n\n}\n\nupdatePatientAttachmentHandler = (event) => {\n\n    const token = this.context.token;\n    const userId = this.context.userId;\n    let selectedPatientId = this.context.selectedPatient._id;\n\n    // if(this.context.user.role !== 'admin') {\n    //   console.log(\"No edit permission!!\");\n    //   return;\n    // }\n\n    console.log(`\n        UpdatePatientAttachmentFormData:\n      `);\n\n    this.setState({ updating: false , patientUpdateField: null });\n\n    // let attachmentName = event.target.formGridPatientAttachmentName.value;\n    let attachmentFormat = event.target.formGridPatientAttachmentFormat.value;\n    let attachmentPath = event.target.formGridPatientAttachmentPath.value;\n    let file = AuthContext._currentValue.file;\n\n    console.log(`\n      uploading to s3...\n      file.name: ${file.name},\n      AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n      `);\n      const config = {\n        bucketName: this.context.creds.s3.bucketName,\n        dirName: attachmentPath,\n        region: this.context.creds.s3.region,\n        accessKeyId: this.context.creds.s3.accessKeyId,\n        secretAccessKey: this.context.creds.s3.secretAccessKey,\n      }\n    const ReactS3Client = new S3(config);\n    const newFileName = file.name;\n    const attachmentName = newFileName;\n\n    ReactS3Client\n        .uploadFile(file, newFileName)\n        .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n        .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n    if (\n      attachmentName.trim().length === 0 ||\n      attachmentFormat.trim().length === 0 ||\n      attachmentPath.trim().length === 0\n    ) {\n      console.log(\"blank fields detected!!!...Please try again...\");\n      this.setState({userAlert: \"blank fields detected!!!...Please try again...\"});\n      return;\n    }\n\n    this.setState({userAlert: \"adding patient attachment\"});\n\n    const requestBody = {\n                    query:`\n                    mutation {updatePatientAttachment(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{attachmentName:\"${attachmentName}\",attachmentFormat:\"${attachmentFormat}\",attachmentPath:\"${attachmentFormat}\"})\n                    {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n            `}\n\n    fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            console.log(\"response data... \" + JSON.stringify(resData.data));\n\n            const updatedPatientId = resData.data.updatePatientAttachment._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.updatePatientAttachment);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientAttachment})\n            this.fetchPatients();\n          })\n          .catch(err => {\n            console.log(err);\n            this.setState({userAlert: err});\n          });\n\n}\n\nupdatePatientNoteHandler = (event) => {\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(`\n      UpdatePatientNoteFormData:\n      ${event.target.formGridNote.value}\n    `);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n    let note = event.target.formGridNote.value;\n\n    if (\n      note.trim().length === 0\n    ) {\n      console.log(\"Can't Submit a blank form!!!...Please try again...\");\n      this.setState({userAlert: \"Can't Submit a blank form!!!...Please try again...\"});\n      return;\n    }\n\n    this.setState({userAlert: \"adding patient note\"});\n\n    const requestBody = {\n              query:`\n              mutation {updatePatientNotes(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{notes:\"${note}\"})\n              {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n            `}\n\n    fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            console.log(\"response data... \" + JSON.stringify(resData.data));\n\n            const updatedPatientId = resData.data.updatePatientNotes._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.updatePatientNotes);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientNotes})\n            this.fetchPatients();\n          })\n          .catch(err => {\n            console.log(err);\n            this.setState({userAlert: err});\n          });\n\n}\nupdatePatientTagHandler = (event) => {\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(`\n      UpdatePatientTagFormData:\n      ${event.target.formGridTag.value}\n    `);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n    let tag = event.target.formGridTag.value;\n\n    if (\n      tag.trim().length === 0\n    ) {\n      console.log(\"Can't Submit a blank form!!!...Please try again...\");\n      this.setState({userAlert: \"Can't Submit a blank form!!!...Please try again...\"});\n      return;\n    }\n\n    const requestBody = {\n                    query:`\n                    mutation {updatePatientTags(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{tag:\"${tag}\"})\n                    {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n            `}\n    this.setState({userAlert: \"adding patient tag\"});\n\n\n    fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            console.log(\"response data... \" + JSON.stringify(resData.data));\n\n            const updatedPatientId = resData.data.updatePatientTags._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.updatePatientTags);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientTags})\n            this.fetchPatients();\n          })\n          .catch(err => {\n            console.log(err);\n            this.setState({userAlert: err});\n          });\n\n\n}\n\n\nmodalConfirmSearchHandler = (event) => {\n  console.log(\"SearchPatientForm:  \");\n\n\n  let userId = this.context.userId;\n\n    console.log(\"SearchPatientFormData:  \", event.target.formBasicField.value);\n    this.setState({ searching: false });\n\n    let field = null;\n    let query = event.target.formBasicQuery.value;\n    if (event.target.formBasicFieldSelect.value === \"select\") {\n      field = event.target.formBasicField.value;\n    } else {\n      field = event.target.formBasicFieldSelect.value;\n    }\n\n    this.setState({\n      patientSearchField: field,\n      patientSearchQuery: query,\n    })\n\n    if (\n      field.trim().length === 0 ||\n      query.trim().length === 0\n    ) {\n      console.log(\"blank fields detected!!!...Please try again...\");\n      return;\n    }\n\n\n\n    const search = { field, query }\n    console.log(\"Searching for Patient:  \", JSON.stringify(search));\n    this.setState({userAlert: \"Searching for Patient:  \"});\n\n    const requestBody = {\n      query: `\n        query {\n          getPatientField(userId: \"${userId}\", field: \"${field}\", query: \"${query}\" )\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n    const token = this.context.token;\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n        const responseAlert = JSON.stringify(resData.data).slice(2,15);\n        this.setState({userAlert: responseAlert});\n\n        const searchPatients = resData.data.getPatientField;\n\n        this.setState({ searchPatients: searchPatients})\n        console.log(\"state.searchPatients:  \", this.state.searchPatients);\n        // this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n}\n\nmodalConfirmSearchIdHandler = (event) => {\n  console.log(\"SearchPatientIdFormData\");\n\n  let userId = this.context.userId;\n  this.setState({ searching: false });\n\n  const patientId = event.target.formBasicId.value;\n\n  const requestBody = {\n    query: `\n      query {getPatientId(userId:\\\"${userId}\\\",patientId:\\\"${patientId}\\\")\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{_id,title,time,location},consultant{date,reference{_id,name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `}\n\n  const token = this.context.token;\n\n  fetch('http://localhost:10000/graphql', {\n    method: 'POST',\n    body: JSON.stringify(requestBody),\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + token\n    }\n  })\n    .then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n      return res.json();\n    })\n    .then(resData => {\n      console.log(\"response data... \" + JSON.stringify(resData));\n      const responseAlert = JSON.stringify(resData.data).slice(2,25);\n      this.setState({userAlert: responseAlert});\n\n      const searchPatients = resData.data.getPatientId;\n\n      this.setState({ searchPatients: [searchPatients]})\n      console.log(\"state.searchPatients:  \", this.state.searchPatients);\n      // this.fetchUsers();\n    })\n    .catch(err => {\n      console.log(err);\n      this.setState({userAlert: err});\n    });\n}\n\nmodalConfirmSearchVisitHandler = (event) => {\n  console.log(\"SearchPatientVisitFormData\");\n\n  let userId = this.context.userId;\n  this.setState({ searching: false });\n\n  const requestBody = {\n    query: `\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{_id,title,time,location,date},consultant{date,reference{_id,name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `}\n\n  const token = this.context.token;\n\n  fetch('http://localhost:10000/graphql', {\n    method: 'POST',\n    body: JSON.stringify(requestBody),\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + token\n    }\n  })\n    .then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n      return res.json();\n    })\n    .then(resData => {\n      console.log(\"response data... \" + JSON.stringify(resData));\n\n      const searchPatients = resData.data.getPatientId;\n\n      this.setState({ searchPatients: searchPatients})\n      console.log(\"state.searchPatients:  \", this.state.searchPatients);\n      // this.fetchUsers();\n    })\n    .catch(err => {\n      console.log(err);\n      this.setState({userAlert: err});\n    });\n\n}\n\nmodalConfirmSearchNameHandler = (event) => {\n  console.log(\"SearchPatientNameFormData:\", event.target.formBasicName.value);\n\n  let userId = this.context.userId;\n  this.setState({ searching: false });\n\n  let patients = this.state.patients;\n  const regex = new RegExp(event.target.formBasicName.value,\"i\");\n  console.log(`\n    regex: ${regex},\n    `);\n    let result = patients.filter(patient => patient.name.match(regex))\n    console.log(`\n      result: ${JSON.stringify(result)}\n      `);\n\n      this.setState({ searchPatients: result})\n\n}\n\n  getPatientVisit = (event) => {\n\n    const selectedPatient = this.state.selectedPatient;\n    event.preventDefault();\n    console.log(`\n        getUserVisit function:\n        selectedPatient.consultant: ${JSON.stringify(selectedPatient.consultant)},\n        selectedPatient.complaints: ${JSON.stringify(selectedPatient.complaints)},\n        visitDate: ${new Date(event.target.formBasicVisitDate.value)},\n        complaintDate: ${new Date(1580515200*1000)},\n      `);\n\n    let visitDate = new Date(event.target.formBasicVisitDate.value).toISOString().substring(0, 10);\n    let visitSurveys = selectedPatient.surveys.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    let visitConsultants = selectedPatient.consultant.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    let visitComplaints = selectedPatient.complaints.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    // let visitSurveys = selectedPatient.surveys.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString() === visitDate);\n    let visitVitals = selectedPatient.vitals.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    let visitExaminations = selectedPatient.examination.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    let visitHistory = selectedPatient.history.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    let visitInvestigations = selectedPatient.investigation.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    let visitDiagnosis = selectedPatient.diagnosis.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    let visitTreatments = selectedPatient.treatment.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    let visitBilling = selectedPatient.billing.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n\n      const visit = {\n        date: visitDate,\n        patientName: this.context.selectedPatient.name,\n        consultant: visitConsultants,\n        complaint: visitComplaints,\n        examination: visitExaminations,\n        survey: visitSurveys,\n        vitals: visitVitals,\n        history: visitHistory,\n        investigation: visitInvestigations,\n        diagnosis: visitDiagnosis,\n        treatment: visitTreatments,\n        billing: visitBilling,\n      };\n\n      console.log(`\n        visit: ${JSON.stringify(visit)},\n        `);\n        this.context.visit = visit;\n        this.setState({visit: visit});\n\n  }\n\n\n  modalCancelHandler = () => {\n    this.setState({ creating: false, updating: false, searching: false, selectedPatient: null });\n  };\n\n\n  fetchPatients() {\n    console.log(\"fetch patients function:  \");\n    const userId = this.context.userId;\n    const token = this.context.token;\n\n    this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n          query {patients(userId:\"${userId}\")\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{_id,title,time,location,date},consultant{date,reference{_id,name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n        `\n    };\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"resData\", resData);\n        const patients = resData.data.patients;\n        console.log(patients);\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({userAlert: responseAlert});\n\n        this.context.patients = this.state.patients;\n        if (this.isActive) {\n          this.setState({ patients: patients, isLoading: false });\n        }\n\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n        if (this.isActive) {\n          this.setState({ isLoading: false });\n        }\n      });\n  }\n\n  fetchPatientsAsc = () => {\n    console.log(\"fetch patients function:  \");\n    const userId = this.context.userId;\n    const token = this.context.token;\n\n    // this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n          query {patientsNameAsc(userId:\"${userId}\")\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{_id,title,time,location,date},consultant{date,reference{_id,name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n        `\n    };\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"resData\", resData);\n        const patients = resData.data.patientsNameAsc;\n        console.log(patients);\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({userAlert: responseAlert});\n\n        this.context.patients = patients;\n        this.setState({ patients: patients});\n        // if (this.isActive) {\n        //   this.setState({ patients: patients, isLoading: false });\n        // }\n\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n        // if (this.isActive) {\n        //   this.setState({ isLoading: false });\n        // }\n      });\n  }\n\n  fetchPatientsDesc = () => {\n    console.log(\"fetch patients function:  \");\n    const userId = this.context.userId;\n    const token = this.context.token;\n\n    // this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n          query {patientsNameDesc(userId:\"${userId}\")\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{_id,title,time,location,date},consultant{date,reference{_id,name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n        `\n    };\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"resData\", resData);\n        const patients = resData.data.patientsNameDesc;\n        console.log(patients);\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({userAlert: responseAlert});\n\n        this.context.patients = patients\n        // if (this.isActive) {\n        //   this.setState({ patients: patients, isLoading: false });\n        // }\n        this.setState({ patients: patients});\n\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n        // if (this.isActive) {\n        //   this.setState({ isLoading: false });\n        // }\n      });\n  }\n\n\n  modalDeleteHandler = () => {\n    console.log(\"deleting patient...selectedPatient:  \", this.context.selectedPatient);\n\n    const selectedPatientId = this.context.selectedPatient._id;\n    const userId = this.context.selectedUser._id;\n\n    if(this.context.user.role !== 'admin') {\n      console.log(\"Not the Admin! No edit permission!!\");\n    }\n\n    this.setState({deleting: true});\n\n\n    const requestBody = {\n      query: `\n          mutation {deletePatient(userId:\"${userId}\",patientId:\"${selectedPatientId}\")\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n        `\n    };\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        let deletedPatient = resData.data.deletePatient;\n        console.log(deletedPatient);\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({userAlert: responseAlert});\n\n        let deletedPatientId = deletedPatient._id;\n        deletedPatient = this.state.patients.find(e => e._id === deletedPatientId);\n        const deletedPatientPos = this.state.patients.indexOf(deletedPatient);\n        const slicedArray = this.state.patients.splice(deletedPatientPos, 1);\n        console.log(\"deletedPatient:  \", JSON.stringify(deletedPatient),\"  deletedUserPos:  \", deletedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.setState({ deleting: false });\n\n        this.fetchPatients();\n\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n        if (this.isActive) {\n          this.setState({ deleting: false });\n        }\n      });\n  }\n\n\n  deletePatientInsuranceItem = (props) => {\n\n    let token = this.context.token;\n    let userId = this.context.userId;\n    let patientId = this.state.selectedPatient._id;\n\n    console.log(`\n      delete patient insurance item:\n      props: ${JSON.stringify(props)},\n      token: ${token},\n      userId: ${userId},\n      patientId: ${patientId},\n      `);\n\n      const requestBody = {\n        query: `\n         mutation {deletePatientInsurance (userId:\\\"${userId}\\\", patientId:\\\"${patientId}\\\",insuranceCompany:\\\"${props.company}\\\",insuranceNumber:\"${props.number}\")\n         {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `};\n\n          fetch('http://localhost:10000/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n              'Content-Type': 'application/json',\n              Authorization: 'Bearer ' + token\n            }\n          })\n            .then(res => {\n              if (res.status !== 200 && res.status !== 201) {\n                throw new Error('Failed!');\n              }\n              return res.json();\n            })\n            .then(resData => {\n              let deletedPatient = resData.data.deletePatientInsurance;\n              console.log(deletedPatient);\n\n              const updatedPatientId = resData.data.deletePatientInsurance._id;\n              const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n              const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n              const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n              console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n              this.state.patients.push(resData.data.deletePatientInsurance);\n              this.context.patients = this.state.patients;\n              const responseAlert = JSON.stringify(resData.data).slice(2,25);\n              this.setState({ userAlert: responseAlert})\n              // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientInsurance})\n              this.fetchPatients();\n\n            })\n            .catch(err => {\n              console.log(err);\n            });\n\n  }\n\n  deletePatientConsultantItem = (props) => {\n\n    let token = this.context.token;\n    let userId = this.context.userId;\n    let patientId = this.state.selectedPatient._id;\n    let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n    console.log(`\n      delete patient consultant item:\n      props: ${JSON.stringify(props)},\n      token: ${token},\n      userId: ${userId},\n      patientId: ${patientId},\n      consultant date: ${date},\n      `);\n\n      const requestBody = {\n        query: `\n         mutation {deletePatientConsultant (userId:\\\"${userId}\\\", patientId:\\\"${patientId}\\\",consultantId:\\\"${props.reference.id}\\\",consultantDate:\\\"${date}\\\")\n         {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `};\n\n          fetch('http://localhost:10000/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n              'Content-Type': 'application/json',\n              Authorization: 'Bearer ' + token\n            }\n          })\n            .then(res => {\n              if (res.status !== 200 && res.status !== 201) {\n                throw new Error('Failed!');\n              }\n              return res.json();\n            })\n            .then(resData => {\n              let deletedPatient = resData.data.deletePatientConsultant;\n              console.log(deletedPatient);\n\n              const updatedPatientId = resData.data.deletePatientConsultant._id;\n              const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n              const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n              const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n              console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n              this.state.patients.push(resData.data.deletePatientConsultant);\n              this.context.patients = this.state.patients;\n              const responseAlert = JSON.stringify(resData.data).slice(2,25);\n              this.setState({ userAlert: responseAlert})\n              // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientConsultant})\n              this.fetchPatients();\n\n            })\n            .catch(err => {\n              console.log(err);\n            });\n}\n\ndeletePatientNextOfKinItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n\n  console.log(`\n    delete patient nextOfKin item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientNextOfKin (userId:\\\"${userId}\\\", patientId:\\\"${patientId}\\\",nextOfKinName:\\\"${props.name}\\\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientNextOfKin;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientNextOfKin._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientNextOfKin);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientNextOfKin})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientComplaintItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n  let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n  console.log(`\n    delete patient Complaint item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    complaint date: ${date},\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientComplaint (userId:\\\"${userId}\\\", patientId:\\\"${patientId}\\\",complaintTitle:\\\"${props.title}\\\",complaintDate:\\\"${date}\\\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientComplaint;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientComplaint._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientComplaint);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientComplaint})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientSurveyItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n  let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n  console.log(`\n    delete patient Survey item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    survey date: ${date}\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientSurvey (userId:\\\"${userId}\\\", patientId:\\\"${patientId}\\\",surveyTitle:\\\"${props.title}\\\",surveyDate:\\\"${date}\\\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientSurvey;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientSurvey._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientSurvey);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientSurvey})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientVitalsItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n  let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n  console.log(`\n    delete patient Vitals item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    vitals date: ${date},\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientVitals (userId:\\\"${userId}\\\", patientId:\\\"${patientId}\\\",vitalsDate:\\\"${date}\\\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientVitals;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientVitals._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientVitals);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientVitals})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientExaminationItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n  let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n  console.log(`\n    delete patient Examination item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    examination date: ${date},\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientExamination (userId:\\\"${userId}\\\", patientId:\\\"${patientId}\\\",examinationType:\\\"${props.type}\\\",examinationDate:\\\"${date}\\\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientExamination;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientExamination._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientExamination);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientExamination})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientHistoryItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n  let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n  console.log(`\n    delete patient History item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    history date: ${date},\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientHistory (userId:\\\"${userId}\\\", patientId:\\\"${patientId}\\\",historyTitle:\\\"${props.title}\\\",historyDate:\\\"${date}\\\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientHistory;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientHistory._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientHistory);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientHistory})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientAllergiesItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n\n  console.log(`\n    delete patient Allergies item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientAllergies (userId:\\\"${userId}\\\", patientId:\\\"${patientId}\\\",allergiesTitle:\\\"${props.title}\\\",allergiesType:\\\"${props.type}\\\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientAllergies;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientAllergies._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientAllergies);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientAllergies})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientMedicationItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n\n  console.log(`\n    delete patient Medication item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientMedication (userId:\\\"${userId}\\\", patientId:\\\"${patientId}\\\",medicationTitle:\\\"${props.title}\\\",medicationType:\\\"${props.type}\\\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientMedication;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientMedication._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientMedication);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientMedication})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientInvestigationItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n  let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n  console.log(`\n    delete patient Investigation item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    investigation date: ${date},\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientInvestigation (userId:\\\"${userId}\\\", patientId:\\\"${patientId}\\\",investigationDate:\\\"${date}\\\",investigationTitle:\\\"${props.title}\\\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientInvestigation;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientInvestigation._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientInvestigation);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientInvestigation})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientDiagnosisItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n  let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n  console.log(`\n    delete patient Diagnosis item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    diagnosis date: ${date}\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientDiagnosis (userId:\\\"${userId}\\\",patientId:\\\"${patientId}\\\",diagnosisDate:\\\"${date}\\\",diagnosisTitle:\\\"${props.title}\\\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientDiagnosis;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientDiagnosis._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientDiagnosis);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientDiagnosis})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientTreatmentItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n  let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n  console.log(`\n    delete patient Treatment item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    treatment date: ${date},\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientTreatment (userId:\\\"${userId}\\\", patientId:\\\"${patientId}\\\",treatmentDate:\\\"${date}\\\",treatmentTitle:\\\"${props.title}\\\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientTreatment;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientTreatment._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientTreatment);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientTreatment})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientBillingItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n  let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n  console.log(`\n    delete patient Billing item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    billing date: ${date},\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientBilling (userId:\\\"${userId}\\\", patientId:\\\"${patientId}\\\",billingDate:\\\"${date}\\\",billingTitle:\\\"${props.title}\\\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientBilling;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientBilling._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientBilling);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientBilling})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientAttachmentItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n\n  // console.log(`\n  //   deleting from s3...\n  //   file.name: ${props.name},\n  //   `);\n  //\n  //   const config = {\n  //     bucketName: this.context.creds.s3.bucketName,\n  //     dirName: props.path,\n  //     region: this.context.creds.s3.region,\n  //     accessKeyId: this.context.creds.s3.accessKeyId,\n  //     secretAccessKey: this.context.creds.s3.secretAccessKey,\n  //   }\n  // const ReactS3Client = new S3(config);\n  // const filename = props.name;\n  // // const attachmentName = newFileName;\n  // //\n  // S3FileUpload\n  // .deleteFile(filename, config)\n  // .then(response => console.log(response))\n  // .catch(err => console.error(err))\n\n  console.log(`\n    delete patient Attachment item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientAttachment (userId:\\\"${userId}\\\", patientId:\\\"${patientId}\\\",attachmentName:\\\"${props.name}\\\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientAttachment;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientAttachment._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientAttachment);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientAttachment})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientNoteItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n\n  console.log(`\n    delete patient Note item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    `);\n\n    const requestBody = {\n      query: `\n\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientNextOfKin;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientNextOfKin._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientNextOfKin);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientNextOfKin})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientTagItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n\n  console.log(`\n    delete patient Tag item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    `);\n\n    const requestBody = {\n      query: `\n\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientNextOfKin;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientNextOfKin._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientNextOfKin);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientNextOfKin})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n            this.setState({ userAlert: err})\n          });\n}\n\n\n  updatePatientSpecial (event) {\n\n    console.log(\"special field to update:  \", event.target.value);\n    const field = event.target.value;\n    this.setState({ patientUpdateField: field});\n\n  }\n\n  onViewAttachment = (attachment) => {\n    console.log(`\n      setting up attachment viewer...\n      attachment: ${JSON.stringify(attachment)}\n      `);\n      this.setState({showAttachment: true})\n\n      const file = \"https://ent-emr-bucket.s3-us-east-2.amazonaws.com/\"+attachment.path+\"/\"+attachment.name;\n      const type = attachment.format;\n\n      this.setState({showThisAttachmentFile: file, showThisAttachmentType: type})\n  }\n\n  closeAttachmentView = () => {\n    console.log(`\n      closing attachment viewer...\n      `);\n      this.setState({showAttachment: false})\n  }\n\n  createPdf = (patient) => {\n    console.log(`\n        creating pdf...\n        user: ${JSON.stringify(patient)}\n      `);\n\n      const pdfData = {\n        title: patient.name,\n        body: patient.dob,\n      };\n\n    this.setState({createPdf: true, pdfData: pdfData})\n  }\n\n  closePdfCreator = () => {\n    console.log(`\n      closing pdf creator...\n      `);\n      this.setState({createPdf: false, pdfData: null} )\n  }\n\n\n  showDetailHandler = patientId => {\n\n    this.setState(prevState => {\n      const selectedPatient = prevState.patients.find(e => e._id === patientId);\n      this.context.selectedPatient = selectedPatient;\n      this.context.selectedPatientId = selectedPatient._id;\n      console.log(\"selectedPatient:  \", selectedPatient);\n      return { selectedPatient: selectedPatient };\n    });\n  };\n\n\n  componentWillUnmount() {\n    this.isActive = false;\n  }\n\n  render() {\n    return (\n\n    <React.Fragment>\n    {this.state.showAttachment === true && (\n      <AttachmentViewer\n        onCloseAttachmentView={this.closeAttachmentView}\n        attachmentFile={this.state.showThisAttachmentFile}\n        attachmentType={this.state.showThisAttachmentType}\n      />\n    )}\n\n    {this.state.createPdf === true && (\n        <PdfCreator\n          pdfData={this.state.pdfData}\n          onClosePdfCreator={this.closePdfCreator}\n        />\n    )}\n\n    <Accordion>\n\n    <Row>\n    <Col md={3} className=\"MasterCol1\">\n\n    <AlertBox\n          authUserId={this.context.userId}\n          alert={this.state.userAlert}\n        />\n      <SidebarPage/>\n    </Col>\n\n    <Col md={9} className=\"MasterCol2\">\n    <Container className=\"containerCombinedDetail\">\n\n    <Tab.Container id=\"left-tabs-example\" defaultActiveKey=\"patientDetail\">\n      <Row>\n        <Col sm={2}>\n          <Nav variant=\"pills\" className=\"flex-column\">\n            <Nav.Item>\n              <Nav.Link eventKey=\"MasterList\">MASTER LIST</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientDetail\">Selected</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientCreate\">Create New</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"disabled\" disabled>Edit:</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditDemographics\">Demographics</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditField\">Single Field</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"disabled\" disabled>Add:</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditConsultant\">Consultant</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditInsurance\">Insurance</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditNextOfKin\">Next of Kin</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditComplaint\">Complaint</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditSurvey\">Survey</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditVitals\">Vitals</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditExamination\">Examination</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditHistory\">History</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditAllergies\">Allergies</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditMedication\">Medication</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditInvestigation\">Investigation</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditDiagnosis\">Diagnosis</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditTreatment\">Treatment</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditBilling\">Billing</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditAttachment\">Attachment</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditNote\">Note</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditTag\">Tag</Nav.Link>\n            </Nav.Item>\n\n            <Nav.Item>\n              <Nav.Link eventKey=\"disabled\" disabled>Search:</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"SearchInput\">Input</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"SearchResult\">Search</Nav.Link>\n            </Nav.Item>\n          </Nav>\n        </Col>\n        <Col sm={10}>\n          <Tab.Content>\n            <Tab.Pane eventKey=\"patientDetail\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.isLoading === false &&\n                this.state.selectedPatient !== null\n                &&\n                (<PatientDetail\n                  authUserId={this.context.userId}\n                  token={this.context.token}\n                  patient={this.state.selectedPatient}\n                  onEdit={this.startUpdatePatientHandler}\n                  canDelete={this.state.canDelete}\n                  onDelete={this.modalDeleteHandler}\n                  onGetVisit={this.getPatientVisit}\n                  visit={this.context.visit}\n                  fetchUsers={this.fetchUsers}\n                  consultantDelete={this.deletePatientConsultantItem}\n                  insuranceDelete={this.deletePatientInsuranceItem}\n                  nextOfKinDelete={this.deletePatientNextOfKinItem}\n                  complaintDelete={this.deletePatientComplaintItem}\n                  surveyDelete={this.deletePatientSurveyItem}\n                  vitalsDelete={this.deletePatientVitalsItem}\n                  examinationDelete={this.deletePatientExaminationItem}\n                  historyDelete={this.deletePatientHistoryItem}\n                  allergiesDelete={this.deletePatientAllergiesItem}\n                  medicationDelete={this.deletePatientMedicationItem}\n                  investigationDelete={this.deletePatientInvestigationItem}\n                  diagnosisDelete={this.deletePatientDiagnosisItem}\n                  treatmentDelete={this.deletePatientTreatmentItem}\n                  billingDelete={this.deletePatientBillingItem}\n                  attachmentDelete={this.deletePatientAttachmentItem}\n                  noteDelete={this.deletePatientNoteItem}\n                  tagDelete={this.deletePatientTagItem}\n                  onViewAttachment={this.onViewAttachment}\n                  onCreatePdf={this.createPdf}\n                  />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientCreate\">\n              <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" onClick={this.startCreatePatientHandler} >Create NEW Patient Profile</Button>\n              {\n                this.state.creating && (\n                  <CreatePatientForm\n                  canCancel\n                    canConfirm\n                    onCancel={this.modalCancelHandler}\n                    onConfirm={this.modalConfirmHandler}\n                    confirmText=\"Confirm\"\n                  />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditDemographics\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" onClick={this.startUpdatePatientHandler}>Edit Demographics</Button>\n              )}\n              {this.state.updating &&\n                this.state.selectedPatient !== null\n                && (\n                <UpdatePatientForm\n                authUserId={this.context.userId}\n                canCancel\n                  canConfirm\n                  onCancel={this.modalCancelHandler}\n                  onConfirm={this.modalConfirmUpdateHandler}\n                  confirmText=\"Confirm\"\n                  patient={this.state.selectedPatient}\n                />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditField\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" onClick={this.startUpdatePatientHandler}>Edit a Single Field</Button>\n              )}\n              {this.state.updating &&\n                this.state.selectedPatient !== null\n                && (\n                  <UpdatePatientFieldForm\n                    authUserId={this.context.userId}\n                    canCancel\n                    canConfirm\n                    onCancel={this.modalCancelHandler}\n                    onConfirm={this.modalConfirmUpdateFieldHandler}\n                    confirmText=\"Confirm\"\n                    patient={this.state.selectedPatient}\n                  />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditConsultant\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='consultant' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add a Consultant</Button>\n              )}\n              {this.state.patientUpdateField === 'consultant' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientConsultantForm\n                authUserId={this.context.userId}\n                canCancel\n                  canConfirm\n                  onCancel={this.modalCancelHandler}\n                  onConfirm={this.updatePatientConsultantHandler}\n                  confirmText=\"Confirm\"\n                  consultant={this.context.selectedUser}\n                />\n              )}\n              {this.state.patientUpdateField === 'consultant' &&\n              this.state.selectedPatient !== null &&\n              (\n                <Row>\n                <p>Add Consultant: {this.context.selectedUser.name}</p>\n                <p> To Paitient: {this.state.selectedPatient.name} ??</p>\n                <hr/>\n                </Row>\n              )}\n              {this.state.patientUpdateField === 'consultant' &&\n              this.state.selectedPatient !== null &&\n              (\n                <Row>\n                <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                  Select someone from the Staff page\n                </Button>\n                </Row>\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditInsurance\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='insurance' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Insurance</Button>\n              )}\n              {this.state.patientUpdateField === 'insurance' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientInsuranceForm\n                authUserId={this.context.userId}\n                canCancel\n                  canConfirm\n                  onCancel={this.modalCancelHandler}\n                  onConfirm={this.updatePatientInsuranceHandler}\n                  confirmText=\"Confirm\"\n                  patient={this.state.selectedPatient}\n                />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditNextOfKin\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='nextOfKin' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add NextOfKin</Button>\n              )}\n              {this.state.patientUpdateField === 'nextOfKin' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientNextOfKinForm\n                      authUserId={this.context.userId}\n                      canCancel\n                        canConfirm\n                        onCancel={this.modalCancelHandler}\n                        onConfirm={this.updatePatientNextOfKinHandler}\n                        confirmText=\"Confirm\"\n                        patient={this.state.selectedPatient}\n                      />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditComplaint\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='complaint' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Complaint</Button>\n              )}\n              {this.state.patientUpdateField === 'complaint' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientComplaintForm\n                      authUserId={this.context.userId}\n                      canCancel\n                        canConfirm\n                        onCancel={this.modalCancelHandler}\n                        onConfirm={this.updatePatientComplaintHandler}\n                        confirmText=\"Confirm\"\n                        patient={this.state.selectedPatient}\n                      />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditSurvey\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='survey' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Survey</Button>\n              )}\n              {this.state.patientUpdateField === 'survey' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientSurveyForm\n                      authUserId={this.context.userId}\n                      canCancel\n                        canConfirm\n                        onCancel={this.modalCancelHandler}\n                        onConfirm={this.updatePatientSurveyHandler}\n                        confirmText=\"Confirm\"\n                        patient={this.state.selectedPatient}\n                      />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditVitals\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='vitals' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Vitals</Button>\n              )}\n              {this.state.patientUpdateField === 'vitals' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientVitalsForm\n                      authUserId={this.context.userId}\n                      canCancel\n                        canConfirm\n                        onCancel={this.modalCancelHandler}\n                        onConfirm={this.updatePatientVitalsHandler}\n                        confirmText=\"Confirm\"\n                        patient={this.state.selectedPatient}\n                      />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditExamination\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='examintion' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Examination</Button>\n              )}\n              {this.state.patientUpdateField === 'examintion' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientExaminationForm\n                      authUserId={this.context.userId}\n                      canCancel\n                        canConfirm\n                        onCancel={this.modalCancelHandler}\n                        onConfirm={this.updatePatientExaminationHandler}\n                        confirmText=\"Confirm\"\n                        patient={this.state.selectedPatient}\n                      />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditHistory\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='history' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add History</Button>\n              )}\n              {this.state.patientUpdateField === 'history' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientHistoryForm\n                authUserId={this.context.userId}\n                canCancel\n                  canConfirm\n                  onCancel={this.modalCancelHandler}\n                  onConfirm={this.updatePatientHistoryHandler}\n                  confirmText=\"Confirm\"\n                  patient={this.state.selectedPatient}\n                />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditAllergies\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='allergies' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Allergies</Button>\n              )}\n              {this.state.patientUpdateField === 'allergies' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientAllergiesForm\n                      authUserId={this.context.userId}\n                      canCancel\n                        canConfirm\n                        onCancel={this.modalCancelHandler}\n                        onConfirm={this.updatePatientAllergiesHandler}\n                        confirmText=\"Confirm\"\n                        patient={this.state.selectedPatient}\n                      />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditMedication\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='medication' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Medication</Button>\n              )}\n              {this.state.patientUpdateField === 'medication' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientMedicationForm\n                authUserId={this.context.userId}\n                canCancel\n                  canConfirm\n                  onCancel={this.modalCancelHandler}\n                  onConfirm={this.updatePatientMedicationHandler}\n                  confirmText=\"Confirm\"\n                  patient={this.state.selectedPatient}\n                />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditInvestigation\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='investigation' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Investigation</Button>\n              )}\n              {this.state.patientUpdateField === 'investigation' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientInvestigationForm\n                      authUserId={this.context.userId}\n                      canCancel\n                        canConfirm\n                        onCancel={this.modalCancelHandler}\n                        onConfirm={this.updatePatientInvestigationHandler}\n                        confirmText=\"Confirm\"\n                        patient={this.state.selectedPatient}\n                      />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditDiagnosis\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='diagnosis' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Diagnosis</Button>\n              )}\n              {this.state.patientUpdateField === 'diagnosis' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientDiagnosisForm\n                      authUserId={this.context.userId}\n                      canCancel\n                        canConfirm\n                        onCancel={this.modalCancelHandler}\n                        onConfirm={this.updatePatientDiagnosisHandler}\n                        confirmText=\"Confirm\"\n                        patient={this.state.selectedPatient}\n                      />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditTreatment\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='treatment' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Treatment</Button>\n              )}\n              {this.state.patientUpdateField === 'treatment' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientTreatmentForm\n                      authUserId={this.context.userId}\n                      canCancel\n                        canConfirm\n                        onCancel={this.modalCancelHandler}\n                        onConfirm={this.updatePatientTreatmentHandler}\n                        confirmText=\"Confirm\"\n                        patient={this.state.selectedPatient}\n                      />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditBilling\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='billing' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Billing</Button>\n              )}\n              {this.state.patientUpdateField === 'billing' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientBillingForm\n                      authUserId={this.context.userId}\n                      canCancel\n                        canConfirm\n                        onCancel={this.modalCancelHandler}\n                        onConfirm={this.updatePatientBillingHandler}\n                        confirmText=\"Confirm\"\n                        patient={this.state.selectedPatient}\n                      />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditAttachment\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='attachment' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Attachment</Button>\n              )}\n              {this.state.patientUpdateField === 'attachment' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientAttachmentForm\n                      authUserId={this.context.userId}\n                      canCancel\n                        canConfirm\n                        onCancel={this.modalCancelHandler}\n                        onConfirm={this.updatePatientAttachmentHandler}\n                        confirmText=\"Confirm\"\n                        patient={this.state.selectedPatient}\n                      />\n                    )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditNote\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='notes' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Note</Button>\n              )}\n              {this.state.patientUpdateField === 'notes' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientNoteForm\n                      authUserId={this.context.userId}\n                      canCancel\n                        canConfirm\n                        onCancel={this.modalCancelHandler}\n                        onConfirm={this.updatePatientNoteHandler}\n                        confirmText=\"Confirm\"\n                        patient={this.state.selectedPatient}\n                      />\n                    )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditTag\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='tags' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Tag</Button>\n              )}\n              {this.state.patientUpdateField === 'tags' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientTagForm\n                      authUserId={this.context.userId}\n                      canCancel\n                        canConfirm\n                        onCancel={this.modalCancelHandler}\n                        onConfirm={this.updatePatientTagHandler}\n                        confirmText=\"Confirm\"\n                        patient={this.state.selectedPatient}\n                      />\n                    )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"MasterList\">\n              <Container className=\"containerUserMasterList\">\n              <Row className=\"searchListRow\">\n              <Button variant=\"primary\" size=\"sm\" onClick={this.fetchPatientsAsc}>\n                 Sort Asc\n               </Button>\n              <Button variant=\"info\" size=\"sm\" onClick={this.fetchPatientsDesc}>\n                 Sort Desc\n               </Button>\n              {this.state.isLoading ? (\n                <Spinner />\n              ) : (\n                <PatientList\n                  patients={this.state.patients}\n                  authUserId={this.context.userId}\n                  onViewDetail={this.showDetailHandler}\n                />\n              )}\n              </Row>\n              </Container>\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"SearchInput\">\n              <Container className=\"containerSearchUserInput\">\n                {this.context.token && (\n                <Row className=\"searchUserRowAdd\">\n                <Button variant=\"primary\" onClick={this.startSearchPatientHandler}>Search</Button>\n                </Row>\n              )}\n\n              <Row className=\"searchUserRowForm\">\n              <Col md={10} className=\"searchUserColForm\">\n              <Tabs defaultActiveKey=\"Field\" id=\"uncontrolled-tab-example\">\n              <Tab eventKey=\"Search\" title=\"Search:\" disabled>\n              </Tab>\n              <Tab eventKey=\"Field\" title=\"Search by Field:\">\n              {this.state.searching !== true && (\n                <Button variant=\"outline-warning\" className=\"confirmEditButton\" size=\"lg\">\n                  Click the 'Search' Button start\n                </Button>\n              )}\n              {this.state.searching === true && (\n                <SearchPatientForm\n                authUserId={this.context.userId}\n                canCancel\n                  canConfirm\n                  onCancel={this.modalCancelHandler}\n                  onConfirm={this.modalConfirmSearchHandler}\n                  confirmText=\"Search\"\n                  patient={this.context.selectedPatient}\n                />\n              )}\n              </Tab>\n              <Tab eventKey=\"Id\" title=\"Search by ID:\">\n              {this.state.searching !== true && (\n                <Button variant=\"outline-warning\" className=\"confirmEditButton\" size=\"lg\">\n                  Click the 'Search' Button start\n                </Button>\n              )}\n              {this.state.searching === true && (\n                <SearchPatientIdForm\n                authUserId={this.context.userId}\n                canCancel\n                  canConfirm\n                  onCancel={this.modalCancelHandler}\n                  onConfirm={this.modalConfirmSearchIdHandler}\n                  confirmText=\"Search\"\n                  patient={this.context.selectedPatient}\n                />\n              )}\n              </Tab>\n\n              <Tab eventKey=\"Name\" title=\"Search by Name:\">\n              {this.state.searching !== true && (\n                <Button variant=\"outline-warning\" className=\"confirmEditButton\" size=\"lg\">\n                  Click the 'Search' Button start\n                </Button>\n              )}\n              {this.state.searching === true && (\n                <SearchPatientNameForm\n                authUserId={this.context.userId}\n                canCancel\n                  canConfirm\n                  onCancel={this.modalCancelHandler}\n                  onConfirm={this.modalConfirmSearchNameHandler}\n                  confirmText=\"Search\"\n                  patient={this.context.selectedPatient}\n                />\n              )}\n              </Tab>\n              </Tabs>\n              </Col>\n              </Row>\n              </Container>\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"SearchResult\">\n              <Container className=\"containerSearchUserResults\">\n              <Row>\n                <Card className=\"searchCard\">\n                  <Card.Body className=\"searchCardBody\">\n                    <Card.Title>Your Search</Card.Title>\n                    <Card.Text>\n                      Field: {this.state.patientSearchField}\n                    </Card.Text>\n                    <Card.Text>\n                      Query: {this.state.patientSearchQuery}\n                    </Card.Text>\n                  </Card.Body>\n                </Card>\n              </Row>\n              <Row className=\"searchListRow\">\n              {\n                this.state.searchPatients !== [] &&\n                <SearchPatientList\n                  searchPatients={this.state.searchPatients}\n                  authUserId={this.context.userId}\n                  onCancel={this.modalCancelHandler}\n                    onViewDetail={this.showDetailHandler}\n                />\n              }\n              </Row>\n              </Container>\n            </Tab.Pane>\n          </Tab.Content>\n        </Col>\n      </Row>\n    </Tab.Container>\n\n\n\n    </Container>\n\n\n\n\n\n    </Col>\n\n    <Col md={3} className=\"MasterCol3\">\n\n\n    </Col>\n    </Row>\n\n</Accordion>\n\n      </React.Fragment>\n    );\n  }\n}\n\nexport default PatientsPage;\n"]},"metadata":{},"sourceType":"module"}