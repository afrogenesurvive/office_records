{"ast":null,"code":"var _jsxFileName = \"/Users/pedrojacob/Downloads/AMR/websites/office_records/ENT_EMR/frontend/src/pages/Appointments.js\";\nimport React, { Component } from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport Accordion from 'react-bootstrap/Accordion';\nimport SidebarPage from './Sidebar';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\nimport Nav from 'react-bootstrap/Nav';\nimport Card from 'react-bootstrap/Card';\nimport AuthContext from '../context/auth-context';\nimport AlertBox from '../components/AlertBox';\nimport PdfCreator from '../components/PdfCreator';\nimport LoadingOverlay from '../components/LoadingOverlay';\nimport AppointmentList from '../components/Appointments/AppointmentList/AppointmentList';\nimport AppointmentDetail from '../components/Appointments/AppointmentDetail';\nimport SearchAppointmentList from '../components/Appointments/AppointmentList/SearchAppointmentList';\nimport SearchAppointmentForm from '../components/Forms/SearchAppointmentForm';\nimport SearchAppointmentIdForm from '../components/Forms/SearchAppointmentIdForm';\nimport SearchAppointmentPatientForm from '../components/Forms/SearchAppointmentPatientForm';\nimport SearchAppointmentDateForm from '../components/Forms/SearchAppointmentDateForm';\nimport SearchAppointmentDateRangeForm from '../components/Forms/SearchAppointmentDateRangeForm';\nimport CreateAppointmentForm from '../components/Forms/CreateAppointmentForm';\nimport UpdateAppointmentForm from '../components/Forms/UpdateAppointmentForm';\nimport UpdateAppointmentFieldForm from '../components/Forms/UpdateAppointmentFieldForm';\nimport './Users.css';\n\nclass AppointmentsPage extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      creating: false,\n      updating: false,\n      deleting: false,\n      searching: false,\n      searchAppointments: [],\n      appointments: [],\n      isLoading: false,\n      selectedAppointment: null,\n      selectedPatient: null,\n      appointmentUpdateField: null,\n      appointmentSearchField: null,\n      appointmentSearchQuery: null,\n      canDelete: null,\n      userAlert: null,\n      overlay: false,\n      overlayStatus: \"test\",\n      createPdf: false,\n      pdfData: null\n    };\n    this.isActive = true;\n\n    this.startCreateAppointmentHandler = () => {\n      this.setState({\n        creating: true\n      });\n    };\n\n    this.startUpdateAppointmentHandler = () => {\n      this.setState({\n        updating: true\n      });\n    };\n\n    this.startSearchAppointmentHandler = () => {\n      this.setState({\n        searching: true\n      });\n    };\n\n    this.modalConfirmHandler = event => {\n      this.setState({\n        creating: false,\n        userAlert: \"creating appointment...\"\n      });\n      const userId = this.context.userId;\n      const selectedPatientId = this.context.selectedPatient._id;\n      const token = this.context.token;\n\n      if (selectedPatientId === undefined) {\n        this.setState({\n          userAlert: \"select a Patient before creating an Appointment!!...\"\n        });\n        return;\n      }\n\n      const title = event.target.formGridTitle.value;\n      const type = event.target.formGridType.value;\n      let date = event.target.formGridDate.value;\n\n      if (event.target.formGridDateTodayCheckbox.checked === true) {\n        date = new Date().toISOString().slice(0, 10);\n      }\n\n      const time = event.target.formGridTime.value;\n      const seenTime = event.target.formGridSeenTime.value;\n      const checkinTime = event.target.formGridCheckinTime.value;\n      const location = event.target.formGridLocation.value;\n      const description = event.target.formGridDescription.value;\n      const inProgress = event.target.formGridInProgress.value;\n      const attended = event.target.formGridAttended.value;\n      const important = event.target.formGridImportant.value;\n\n      if (title.trim().length === 0 || type.trim().length === 0 || date.trim().length === 0 || time.trim().length === 0 || location.trim().length === 0 || description.trim().length === 0 || inProgress.trim().length === 0 || attended.trim().length === 0 || important.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...Please try again...\"\n        });\n        return;\n      }\n\n      ;\n      const requestBody = {\n        query: `\n          mutation {createAppointment(userId:\"${userId}\",patientId:\"${selectedPatientId}\",appointmentInput:{title:\"${title}\",type:\"${type}\",date:\"${date}\",time:\"${time}\",seenTime:\"${seenTime}\",checkinTime:\"${checkinTime}\",location:\"${location}\",description:\"${description}\",inProgress:${inProgress},attended:${attended},important:${important},})\n          {_id,title,type,date,time,seenTime,checkinTime,location,description,patient{_id,name,appointments{_id,date,title}},inProgress,attended,important}}\n        `\n      }; // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const responseAlert = JSON.stringify(resData.data).slice(2, 15);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.state.appointments.push(resData.data.createAppointment);\n        this.context.appointments = this.state.appointments;\n        this.fetchAppointments();\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.modalCancelHandler = () => {\n      this.setState({\n        creating: false,\n        updating: false,\n        searching: false,\n        selectedAppointment: null\n      });\n    };\n\n    this.modalConfirmUpdateHandler = event => {\n      if (this.context.user.role !== 'admin') {\n        this.setState({\n          userAlert: \"Not the Admin! No edit permission!!\"\n        });\n      }\n\n      const userId = this.context.userId;\n      const appointmentId = this.context.selectedAppointment._id;\n      console.log(\"UpdateAppointmentFormData:  \", event.target.formGridTitle.value);\n      this.setState({\n        updating: false,\n        userAlert: \"updating appointment...\"\n      });\n      let title = event.target.formGridTitle.value;\n      let type = event.target.formGridType.value;\n      let date = event.target.formGridDate.value;\n\n      if (event.target.formGridDateTodayCheckbox.checked === true) {\n        date = new Date().toISOString().slice(0, 10);\n      }\n\n      let time = event.target.formGridTime.value;\n      let seenTime = event.target.formGridSeenTime.value;\n      let checkinTime = event.target.formGridCheckinTime.value;\n      let location = event.target.formGridLocation.value;\n      let description = event.target.formGridDescription.value;\n      let inProgress = event.target.formGridInProgress.value;\n      let attended = event.target.formGridAttended.value;\n      let important = event.target.formGridImportant.value;\n\n      if (title.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        title = this.context.selectedAppointment.title;\n      }\n\n      if (type.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        type = this.context.selectedAppointment.type;\n      }\n\n      if (date.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        date = this.context.selectedAppointment.date;\n      }\n\n      if (time.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        time = this.context.selectedAppointment.time;\n      }\n\n      if (seenTime.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        seenTime = this.context.selectedAppointment.seenTime;\n      }\n\n      if (checkinTime.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        checkinTime = this.context.selectedAppointment.checkinTime;\n      }\n\n      if (location.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        location = this.context.selectedAppointment.location;\n      }\n\n      if (description.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        description = this.context.selectedAppointment.description;\n      }\n\n      if (inProgress.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        inProgress = this.context.selectedAppointment.inProgress;\n      }\n\n      if (attended.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        attended = this.context.selectedAppointment.attended;\n      }\n\n      if (important.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        important = this.context.selectedAppointment.important;\n      }\n\n      console.log(`\n        updating appointment...\n        title: ${title},\n        type: ${type},\n        date: ${date},\n        time: ${time},\n        seenTime: ${seenTime},\n        checkinTime: ${checkinTime},\n        location: ${location},\n        description: ${description},\n        inProgress: ${inProgress},\n        attended: ${attended},\n        important: ${important},\n      `);\n      const requestBody = {\n        query: `\n      mutation {updateAppointment(userId:\"${userId}\",appointmentId:\"${appointmentId}\",appointmentInput:{title:\"${title}\",type:\"${type}\",date:\"${date}\",time:\"${time}\",seenTime:\"${seenTime}\",checkinTime:\"${checkinTime}\",location:\"${location}\",description:\"${description}\",inProgress:${inProgress},attended:${attended},important:${important},})\n      {_id,title,type,date,time,seenTime,checkinTime,location,description,patient{_id,name,appointments{_id,date,title}},inProgress,attended,important,notes}}\n        `\n      };\n      const token = this.context.token;\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n        const updatedAppointmentId = resData.data.updateAppointment._id;\n        const updatedAppointment = this.state.appointments.find(e => e._id === updatedAppointmentId);\n        const updatedAppointmentPos = this.state.appointments.indexOf(updatedAppointment);\n        const slicedArray = this.state.appointments.splice(updatedAppointmentPos, 1);\n        console.log(\"updatedAppointment:  \", JSON.stringify(updatedAppointment), \"  updatedPatientPos:  \", updatedAppointmentPos, \"  slicedArray:  \", slicedArray);\n        this.state.appointments.push(resData.data.updateAppointment);\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchAppointments();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updateAppointmentPatientHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedAppointmentId = this.context.selectedAppointment._id;\n      let selectedPatientId = this.context.selectedPatient._id;\n\n      if (this.context.user.role !== 'admin') {\n        console.log(\"No edit permission!!\");\n        this.setState({\n          userAlert: \"No edit permission!!\"\n        });\n        return;\n      }\n\n      if (selectedPatientId === undefined) {\n        console.log(`\n        select a Patient before creating an Appointment!!\n        `);\n        this.setState({\n          userAlert: \"select a Patient before creating an Appointment!!...\"\n        });\n        return;\n      }\n\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      console.log(`\n      updating appointment patient...\n      userId: ${userId},\n      appointmentId: ${selectedAppointmentId},\n      patientId: ${selectedPatientId},\n      `);\n      this.setState({\n        userAlert: \"updating appointment patient...\"\n      });\n      const requestBody = {\n        query: `\n        mutation {updateAppointmentPatient(userId:\"${userId}\",appointmentId:\"${selectedAppointmentId}\",patientId:\"${selectedPatientId}\")\n        {_id,title,type,date,time,seenTime,checkinTime,location,description,patient{_id,name,appointments{_id,date,title},consultant{reference{_id,name,role}}},inProgress,attended,important}}\n        `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n        const updatedAppointmentId = resData.data.updateAppointmentPatient._id;\n        const updatedAppointment = this.state.appointments.find(e => e._id === updatedAppointmentId);\n        const updatedAppointmentPos = this.state.appointments.indexOf(updatedAppointment);\n        const slicedArray = this.state.appointments.splice(updatedAppointmentPos, 1);\n        console.log(\"updatedAppointment:  \", JSON.stringify(updatedAppointment), \"  updatedPatientPos:  \", updatedAppointmentPos, \"  slicedArray:  \", slicedArray);\n        this.state.appointments.push(resData.data.updateAppointmentPatient);\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchAppointments();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.modalConfirmUpdateFieldHandler = event => {\n      event.preventDefault();\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedAppointmentId = this.context.selectedAppointment._id;\n\n      if (this.context.user.role !== 'admin') {\n        console.log(\"Not the creator or Admin! No edit permission!!\");\n        selectedAppointmentId = null;\n      }\n\n      console.log(\"UpdateAppointmentFieldFormData:  \", event.target.formGridField.value);\n      this.setState({\n        updating: false\n      });\n      let field = null;\n      let query = event.target.formGridQuery.value;\n\n      if (event.target.formGridFieldSelect.value === \"select\") {\n        field = event.target.formGridField.value;\n      } else {\n        field = event.target.formGridFieldSelect.value;\n      }\n\n      const requestBody = {\n        query: `\n        mutation {updateAppointmentField(userId:\"${userId}\",appointmentId:\"${selectedAppointmentId}\",field:\"${field}\",query:\"${query}\")\n        {_id,title,type,date,time,seenTime,checkinTime,location,description,patient{_id,name,appointments{_id,date,title}},inProgress,attended,important,notes}}\n        `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data.updateAppointmentField));\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        }); // this.setState({ userAlert: responseAlert, selectedAppointment: resData.data.updateAppointmentField})\n\n        const updatedAppointmentId = resData.data.updateAppointmentField._id;\n        const updatedAppointment = this.state.appointments.find(e => e._id === updatedAppointmentId);\n        const updatedAppointmentPos = this.state.appointments.indexOf(updatedAppointment);\n        const slicedArray = this.state.appointments.splice(updatedAppointmentPos, 1);\n        console.log(\"updatedAppointment:  \", JSON.stringify(updatedAppointment), \"  updatedAppointmentPos:  \", updatedAppointmentPos, \"  slicedArray:  \", slicedArray);\n        this.state.appointments.push(resData.data.updateAppointmentField);\n        this.context.appointments = this.state.appointments;\n        this.fetchAppointments();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.modalConfirmSearchHandler = event => {\n      console.log(\"SearchAppointmentForm:  \");\n      let userId = this.context.userId;\n      console.log(\"SearchAppointmentFormData:  \", event.target.formBasicField.value);\n      this.setState({\n        searching: false\n      });\n      let field = null;\n      let query = event.target.formBasicQuery.value;\n\n      if (event.target.formBasicFieldSelect.value === \"select\") {\n        field = event.target.formBasicField.value;\n      } else {\n        field = event.target.formBasicFieldSelect.value;\n      }\n\n      if (field.trim().length === 0 || query.trim().length === 0) {\n        console.log(\"blank fields detected!!!...Please try again...\");\n        this.setState({\n          userAlert: \"blank fields detected!!!...Please try again...\"\n        });\n        return;\n      }\n\n      const search = {\n        field,\n        query\n      };\n      console.log(\"Searching for Appointment:  \", JSON.stringify(search));\n      const requestBody = {\n        query: `\n          query {getAppointmentField(userId:\"${userId}\", field:\"${field}\", query:\"${query}\")\n          {_id,title,type,date,time,seenTime,checkinTime,location,description,patient{_id,name,appointments{_id,date,title},consultant{reference{_id,name,role}}},inProgress,attended,important}}\n        `\n      };\n      const token = this.context.token;\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n        const responseAlert = JSON.stringify(resData.data).slice(2, 15);\n        this.setState({\n          userAlert: responseAlert\n        });\n        const searchAppointments = resData.data.getAppointmentField;\n        this.setState({\n          searchAppointments: searchAppointments\n        });\n        console.log(\"state.searchAppointments:  \", this.state.searchAppointments); // this.fetchAppointments();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.modalConfirmSearchIdHandler = event => {\n      console.log(`\n      SearchAppointmentIdFormData\n      `);\n      let userId = this.context.userId;\n      this.setState({\n        searching: false\n      });\n      let selectedAppointmentId = event.target.formBasicId.value;\n      const requestBody = {\n        query: `\n          query {getAppointmentId(userId:\"${userId}\", appointmentId:\"${selectedAppointmentId}\")\n          {_id,title,type,date,time,patient{_id,name},location,description,inProgress,important,attended}}\n        `\n      };\n      const token = this.context.token;\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n        const responseAlert = JSON.stringify(resData.data).slice(2, 15);\n        this.setState({\n          userAlert: responseAlert\n        });\n        const searchAppointments = resData.data.getAppointmentId;\n        this.setState({\n          searchAppointments: [searchAppointments]\n        });\n        console.log(\"state.searchAppointments:  \", this.state.searchAppointments); // this.fetchUsers();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.modalConfirmSearchPatientHandler = event => {\n      console.log(`\n      SearchAppointmentPatientFormData\n      `);\n      let userId = this.context.userId;\n      this.setState({\n        searching: false\n      });\n      let selectedPatientId = event.target.formBasicPatientId.value;\n      const requestBody = {\n        query: `\n          query {getAppointmentPatient(userId:\"${userId}\", patientId:\"${selectedPatientId}\")\n          {_id,title,type,date,time,patient{_id,name},location,description,inProgress,important,attended}}\n        `\n      };\n      const token = this.context.token;\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n        const responseAlert = JSON.stringify(resData.data).slice(2, 15); // const responseAlert = JSON.stringify(resData.errors).slice(2,15);\n\n        this.setState({\n          userAlert: responseAlert\n        });\n        const searchAppointments = resData.data.getAppointmentPatient;\n        this.setState({\n          searchAppointments: searchAppointments\n        }); // this.state.searchApointments.push(searchAppointments)\n\n        console.log(\"state.searchApointments:  \", this.state.searchApointments); // this.fetchUsers();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.modalConfirmSearchDateHandler = event => {\n      console.log(`\n      SearchAppointmentDateFormData\n      `);\n      let userId = this.context.userId;\n      this.setState({\n        searching: false\n      });\n      let appointmentDate = event.target.formBasicDate.value;\n\n      if (event.target.formBasicDateTodayCheckbox.checked === true) {\n        appointmentDate = new Date().toISOString().slice(0, 10);\n      }\n\n      const requestBody = {\n        query: `\n          query {getAppointmentDate(userId:\"${userId}\",date:\"${appointmentDate}\")\n          {_id,title,type,date,time,patient{_id,name},location,description,inProgress,important,attended}}\n        `\n      };\n      const token = this.context.token;\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n        const responseAlert = JSON.stringify(resData.data).slice(2, 15);\n        this.setState({\n          userAlert: responseAlert\n        });\n        const searchAppointments = resData.data.getAppointmentDate;\n        this.setState({\n          searchAppointments: searchAppointments\n        });\n        console.log(\"state.searchAppointments:  \", this.state.searchAppointments); // this.fetchUsers();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.modalConfirmSearchDateRangeHandler = event => {\n      console.log(`\n      SearchAppointmentDateRangeFormData\n      `);\n      let userId = this.context.userId;\n      this.setState({\n        searching: false\n      });\n      let appointmentStartDate = event.target.formBasicStartDate.value;\n      let appointmentEndDate = event.target.formBasicEndDate.value;\n      const requestBody = {\n        query: `\n          query {getAppointmentDateRange(userId:\"${userId}\",startDate:\"${appointmentStartDate}\",endDate:\"${appointmentEndDate}\")\n          {_id,title,type,date,time,patient{_id,name},location,description,inProgress,important,attended}}\n        `\n      };\n      const token = this.context.token;\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n        const responseAlert = JSON.stringify(resData.data).slice(2, 15);\n        this.setState({\n          userAlert: responseAlert\n        });\n        const searchAppointments = resData.data.getAppointmentDateRange;\n        this.setState({\n          searchAppointments: searchAppointments\n        });\n        console.log(\"state.searchApointments:  \", this.state.searchAppointments); // this.fetchUsers();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.modalCancelHandler = () => {\n      this.setState({\n        creating: false,\n        updating: false,\n        searching: false,\n        selectedAppointment: null\n      });\n    };\n\n    this.fetchAppointmentsAsc = () => {\n      console.log(\"'fetch appointments function' context object... \" + JSON.stringify(this.context));\n      const userId = this.context.userId; // this.setState({ isLoading: true });\n\n      const requestBody = {\n        query: `\n            query {appointmentsDateAsc(userId:\"${userId}\")\n            {_id,title,type,date,time,seenTime,checkinTime,location,description,patient{_id,name,contact{email,phone},consultant{reference{_id,name,role}}},inProgress,attended,important,notes}}\n        `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + this.context.token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const appointments = resData.data.appointmentsDateAsc;\n        console.log(appointments);\n        const responseAlert = JSON.stringify(resData.data).slice(2, 15);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.context.appointments = appointments;\n        this.setState({\n          appointments: appointments\n        }); // if (this.isActive) {\n        //   this.setState({ appointments: appointments, isLoading: false });\n        // }\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        }); // if (this.isActive) {\n        //   this.setState({ isLoading: false });\n        // }\n      });\n    };\n\n    this.fetchAppointmentsDesc = () => {\n      console.log(\"'fetch appointments function' context object... \" + JSON.stringify(this.context));\n      const userId = this.context.userId; // this.setState({ isLoading: true });\n\n      const requestBody = {\n        query: `\n            query {appointmentsDateDesc(userId:\"${userId}\")\n            {_id,title,type,date,time,seenTime,checkinTime,location,description,patient{_id,name,contact{email,phone},consultant{reference{_id,name,role}}},inProgress,attended,important,notes}}\n        `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + this.context.token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const appointments = resData.data.appointmentsDateDesc;\n        console.log(appointments);\n        const responseAlert = JSON.stringify(resData.data).slice(2, 15);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.context.appointments = appointments;\n        this.setState({\n          appointments: appointments\n        }); // if (this.isActive) {\n        //   this.setState({ appointments: appointments, isLoading: false });\n        // }\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        }); // if (this.isActive) {\n        //   this.setState({ isLoading: false });\n        // }\n      });\n    };\n\n    this.modalDeleteHandler = () => {\n      console.log(\"deleting appointment...selectedAppointment:  \", this.context.selectedAppointment);\n      const userId = this.context.userId;\n      const selectedAppointmentId = this.context.selectedAppointment._id;\n\n      if (this.context.user.role !== 'admin') {\n        console.log(\"Not the Admin! No edit permission!!\");\n        this.setState({\n          userAlert: \"Not the Admin! No edit permission!!\"\n        });\n      }\n\n      this.setState({\n        deleting: true\n      });\n      const requestBody = {\n        query: `\n          mutation {deleteAppointment(userId:\"${userId}\",appointmentId:\"${selectedAppointmentId}\")\n          {_id,title,type,date,time,seenTime,checkinTime,location,description,patient{_id,name,appointments{_id,date,title}},inProgress,attended,important,notes}}\n        `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + this.context.token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"resData:  \", resData); // console.log(\"resData.data.deleteAppointment:  \", resData.data.deleteAppointment);\n\n        let deletedAppointment = resData.data.deleteAppointment;\n        console.log(deletedAppointment);\n        const responseAlert = JSON.stringify(resData.data).slice(2, 15);\n        this.setState({\n          userAlert: responseAlert\n        });\n        let deletedAppointmentId = deletedAppointment._id;\n        deletedAppointment = this.state.appointments.find(e => e._id === deletedAppointmentId);\n        const deletedAppointmentPos = this.state.appointments.indexOf(deletedAppointment);\n        const slicedArray = this.state.appointments.splice(deletedAppointmentPos, 1);\n        console.log(\"deletedAppointment:  \", JSON.stringify(deletedAppointment), \"  deletedUserPos:  \", deletedAppointmentPos, \"  slicedArray:  \", slicedArray);\n        this.setState({\n          deleting: false\n        });\n        this.fetchAppointments();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n\n        if (this.isActive) {\n          this.setState({\n            deleting: false\n          });\n        }\n      });\n    };\n\n    this.showDetailHandler = appointmentId => {\n      this.setState(prevState => {\n        const selectedAppointment = prevState.appointments.find(e => e._id === appointmentId);\n        this.setState({\n          selectedAppointment: selectedAppointment\n        });\n        this.context.selectedAppointment = selectedAppointment;\n        console.log(\"selectedAppointment:  \", selectedAppointment);\n        return {\n          selecteAppointment: selectedAppointment\n        };\n      });\n    };\n\n    this.createPdf = appointment => {\n      console.log(`\n        creating pdf...\n        user: ${JSON.stringify(appointment)}\n      `);\n      const pdfData = {\n        title: \"This pdf is supplied with Appointment data...\",\n        appointment: {\n          _id: appointment._id,\n          title: appointment.title,\n          type: appointment.type,\n          date: appointment.date,\n          time: appointment.time,\n          seenTime: appointment.seenTime,\n          checkinTime: appointment.checkinTime,\n          location: appointment.location,\n          description: appointment.description,\n          patient: {\n            _id: appointment.patient._id,\n            name: appointment.patient.name,\n            contact: {\n              email: appointment.patient.contact.email,\n              phone: appointment.patient.contact.phone\n            }\n          },\n          inProgress: appointment.inProgress,\n          attended: appointment.attended,\n          important: appointment.important,\n          notes: appointment.notes\n        }\n      };\n      this.setState({\n        createPdf: true,\n        pdfData: pdfData\n      });\n    };\n\n    this.closePdfCreator = () => {\n      console.log(`\n      closing pdf creator...\n      `);\n      this.setState({\n        createPdf: false,\n        pdfData: null\n      });\n    };\n  }\n\n  componentDidMount() {\n    if (this.context.user.name === \"Lord-of-the-Manor\") {\n      this.setState({\n        canDelete: true\n      });\n    }\n\n    this.fetchAppointments();\n    this.fetchAppointmentToday();\n    this.fetchAppointmentInProgress();\n  }\n\n  fetchAppointments() {\n    console.log(\"'fetch appointments function' context object... \" + JSON.stringify(this.context));\n    const userId = this.context.userId;\n    this.setState({\n      isLoading: true\n    });\n    const requestBody = {\n      query: `\n            query {appointments(userId:\"${userId}\")\n            {_id,title,type,date,time,seenTime,checkinTime,location,description,patient{_id,name,contact{email,phone},consultant{reference{_id,name,role}}},inProgress,attended,important,notes}}\n        `\n    };\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    }).then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n\n      return res.json();\n    }).then(resData => {\n      const appointments = resData.data.appointments;\n      console.log(appointments);\n      const responseAlert = JSON.stringify(resData.data).slice(2, 15);\n      this.setState({\n        userAlert: responseAlert\n      });\n      this.context.appointments = this.state.appointments;\n\n      if (this.isActive) {\n        this.setState({\n          appointments: appointments,\n          isLoading: false\n        });\n      }\n    }).catch(err => {\n      console.log(err);\n      this.setState({\n        userAlert: err\n      });\n\n      if (this.isActive) {\n        this.setState({\n          isLoading: false\n        });\n      }\n    });\n  }\n\n  updateAppointmentSpecial(event) {\n    console.log(\"special field to update:  \", event.target.value);\n    const field = event.target.value;\n    this.setState({\n      appointmentUpdateField: field\n    });\n  }\n\n  fetchAppointmentToday() {\n    console.log(\"fetching todays appts function:  \");\n    const token = this.context.token;\n    const userId = this.context.userId;\n    const requestBody = {\n      query: `\n          query {getAppointmentToday(userId:\"${userId}\")\n          {_id,title,type,date,time,patient{_id,name},location,description,inProgress,important,attended}}\n        `\n    };\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    }).then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n\n      return res.json();\n    }).then(resData => {\n      this.context.appointmentsToday = resData.data.getAppointmentToday;\n      console.log(\"context today's appts:  \", JSON.stringify(this.context.appointmentsToday));\n      const responseAlert = JSON.stringify(resData.data).slice(2, 15);\n      this.setState({\n        userAlert: responseAlert\n      });\n    }).catch(err => {\n      console.log(err);\n      this.setState({\n        userAlert: err\n      });\n    });\n  }\n\n  fetchAppointmentInProgress() {\n    console.log(\"fetching inProgress appts function:  \");\n    const token = this.context.token;\n    const userId = this.context.userId;\n    const requestBody = {\n      query: `\n          query {getAppointmentField(userId:\"${userId}\",field:\"inProgress\",query:\"true\"){_id,title,type,date,time,patient{_id,name},location,description,inProgress,important,attended}}\n        `\n    };\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    }).then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n\n      return res.json();\n    }).then(resData => {\n      this.context.appointmentsInProgress = resData.data.getAppointmentField;\n      console.log(\"context in progress appts:  \", JSON.stringify(this.context.appointmentsInProgress));\n      const responseAlert = JSON.stringify(resData.data).slice(2, 15);\n      this.setState({\n        userAlert: responseAlert\n      });\n\n      if (this.state.selectedPatient === {} || this.context.selectedstate === null) {\n        this.setState({\n          userAlert: \"No Patient Selected\"\n        });\n      }\n\n      console.log(`\n          context.selectedPatient: ${JSON.stringify(this.context.selectedPatient)},\n          state.selectedPatient: ${JSON.stringify(this.state.selectedPatient)},\n          `);\n    }).catch(err => {\n      console.log(err);\n      this.setState({\n        userAlert: err\n      });\n    });\n  }\n\n  componentWillUnmount() {\n    this.isActive = false;\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1075\n      },\n      __self: this\n    }, this.state.createPdf === true && React.createElement(PdfCreator, {\n      pdfData: this.state.pdfData,\n      onClosePdfCreator: this.closePdfCreator,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1078\n      },\n      __self: this\n    }), React.createElement(Accordion, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1084\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1086\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 3,\n      className: \"MasterCol1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1088\n      },\n      __self: this\n    }, React.createElement(AlertBox, {\n      authUserId: this.context.userId,\n      alert: this.state.userAlert,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1090\n      },\n      __self: this\n    }), React.createElement(SidebarPage, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1094\n      },\n      __self: this\n    })), React.createElement(Col, {\n      md: 9,\n      className: \"MasterCol2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1098\n      },\n      __self: this\n    }, React.createElement(Container, {\n      className: \"containerCombinedDetail\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1100\n      },\n      __self: this\n    }, React.createElement(Tab.Container, {\n      id: \"left-tabs-example\",\n      defaultActiveKey: \"appointmentDetail\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1102\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1103\n      },\n      __self: this\n    }, React.createElement(Col, {\n      sm: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1104\n      },\n      __self: this\n    }, React.createElement(Nav, {\n      variant: \"pills\",\n      className: \"flex-column\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1105\n      },\n      __self: this\n    }, React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1106\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"MasterList\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1107\n      },\n      __self: this\n    }, \"MASTER LIST\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1109\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"appointmentDetail\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1110\n      },\n      __self: this\n    }, \"Selected\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1112\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"appointmentCreate\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1113\n      },\n      __self: this\n    }, \"Create New\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1115\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"disabled\",\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1116\n      },\n      __self: this\n    }, \"Edit:\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1118\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"appointmentEditBasic\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1119\n      },\n      __self: this\n    }, \"Basic Info\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1121\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"appointmentEditField\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1122\n      },\n      __self: this\n    }, \"Single Field\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1124\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"appointmentEditPatient\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1125\n      },\n      __self: this\n    }, \"Patient\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1127\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"disabled\",\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1128\n      },\n      __self: this\n    }, \"Search:\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1130\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"SearchInput\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1131\n      },\n      __self: this\n    }, \"Input\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1133\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"SearchResult\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1134\n      },\n      __self: this\n    }, \"Results\")))), React.createElement(Col, {\n      sm: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1138\n      },\n      __self: this\n    }, React.createElement(Tab.Content, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1139\n      },\n      __self: this\n    }, React.createElement(Tab.Pane, {\n      eventKey: \"appointmentDetail\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1140\n      },\n      __self: this\n    }, this.state.selectedAppointment === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1142\n      },\n      __self: this\n    }, \"Select an Appointment from the Master List\"), this.state.isLoading === false && this.state.selectedAppointment !== null && React.createElement(AppointmentDetail, {\n      authUserId: this.context.userId,\n      appointment: this.state.selectedAppointment,\n      onEdit: this.startUpdateAppointmentHandler,\n      canDelete: this.state.canDelete,\n      onDelete: this.modalDeleteHandler,\n      onCreatePdf: this.createPdf,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1151\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"appointmentCreate\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1162\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"outline-primary\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.startCreateAppointmentHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1163\n      },\n      __self: this\n    }, \"Create New\"), this.state.creating && this.context.selectedPatient._id !== null && React.createElement(CreateAppointmentForm, {\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmHandler,\n      onSubmit: this.modalConfirmHandler,\n      confirmText: \"Confirm\",\n      selectedPatient: this.context.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1168\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"appointmentEditBasic\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1180\n      },\n      __self: this\n    }, this.state.selectedAppointment === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1182\n      },\n      __self: this\n    }, \"Select an Appointment from the Master List\"), this.state.selectedAppointment !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.startUpdateAppointmentHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1187\n      },\n      __self: this\n    }, \"Edit Basic Data\"), this.state.updating && this.state.selectedAppointment !== null && React.createElement(UpdateAppointmentForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmUpdateHandler,\n      confirmText: \"Confirm\",\n      appointment: this.state.selectedAppointment,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1192\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"appointmentEditField\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1204\n      },\n      __self: this\n    }, this.state.selectedAppointment === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1206\n      },\n      __self: this\n    }, \"Select an Appointment from the Master List\"), this.state.selectedAppointment !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.startUpdateAppointmentHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1211\n      },\n      __self: this\n    }, \"Edit a Single Field\"), this.state.updating && this.state.selectedAppointment !== null && React.createElement(UpdateAppointmentFieldForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmUpdateFieldHandler,\n      confirmText: \"Confirm\",\n      appointment: this.state.selectedAppointment,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1216\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"appointmentEditPatient\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1228\n      },\n      __self: this\n    }, this.state.selectedAppointment === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1230\n      },\n      __self: this\n    }, \"Select an Appointment from the Master List\"), this.state.selectedAppointment !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      value: \"patient\",\n      onClick: this.updateAppointmentSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1235\n      },\n      __self: this\n    }, \"Change Patient:\"), this.state.selecteAppointment !== null && this.context.selectedPatient === null && this.state.appointmentUpdateField === \"patient\" && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1240\n      },\n      __self: this\n    }, \"Select someone from the Patients page\"), this.state.selectedAppointment !== null && this.context.selectedPatient !== null && this.state.appointmentUpdateField === \"patient\" && React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1247\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 8,\n      className: \"updateUserColAdd\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1248\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1249\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"bold\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1249\n      },\n      __self: this\n    }, \"Add Patient :\"), \" \", this.context.selectedPatient.name), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1250\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"bold\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1250\n      },\n      __self: this\n    }, \"To Appointment :\"), \" \", this.state.selectedAppointment.title, \"  \", React.createElement(\"span\", {\n      className: \"bold\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1250\n      },\n      __self: this\n    }, \"On :\"), \" \", new Date(this.state.selecteAppointment.date.substr(0, 10) * 1000).toISOString().slice(0, 10), \" \", React.createElement(\"span\", {\n      className: \"bold\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1250\n      },\n      __self: this\n    }, \"At :\"), \" \", this.state.selecteAppointment.time, \" ??\"), React.createElement(Button, {\n      variant: \"success\",\n      onClick: this.updateAppointmentPatientHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1251\n      },\n      __self: this\n    }, \"Yes\")))), React.createElement(Tab.Pane, {\n      eventKey: \"MasterList\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1259\n      },\n      __self: this\n    }, React.createElement(Container, {\n      className: \"containerUserMasterList\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1260\n      },\n      __self: this\n    }, React.createElement(Row, {\n      className: \"searchListRow\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1261\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"primary\",\n      size: \"sm\",\n      onClick: this.fetchAppointmentsAsc,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1262\n      },\n      __self: this\n    }, \"Sort Asc\"), React.createElement(Button, {\n      variant: \"info\",\n      size: \"sm\",\n      onClick: this.fetchAppointmentsDesc,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1265\n      },\n      __self: this\n    }, \"Sort Desc\"), this.state.isLoading ? React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1269\n      },\n      __self: this\n    }) : React.createElement(AppointmentList, {\n      appointments: this.state.appointments,\n      authUserId: this.context.userId,\n      onViewDetail: this.showDetailHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1272\n      },\n      __self: this\n    })))), React.createElement(Tab.Pane, {\n      eventKey: \"SearchInput\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1282\n      },\n      __self: this\n    }, React.createElement(Container, {\n      className: \"containerSearchUserInput\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1283\n      },\n      __self: this\n    }, React.createElement(Row, {\n      className: \"searchUserRowAdd\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1284\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"primary\",\n      onClick: this.startSearchAppointmentHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1285\n      },\n      __self: this\n    }, \"Search\")), React.createElement(Row, {\n      className: \"searchUserRowForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1288\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 10,\n      className: \"searchUserColForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1289\n      },\n      __self: this\n    }, React.createElement(Tabs, {\n      defaultActiveKey: \"Field\",\n      id: \"uncontrolled-tab-example\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1290\n      },\n      __self: this\n    }, React.createElement(Tab, {\n      eventKey: \"Search\",\n      title: \"Search:\",\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1291\n      },\n      __self: this\n    }), React.createElement(Tab, {\n      eventKey: \"Field\",\n      title: \"Search by Field:\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1293\n      },\n      __self: this\n    }, this.state.searching !== true && React.createElement(Button, {\n      variant: \"outline-warning\",\n      className: \"confirmEditButton\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1295\n      },\n      __self: this\n    }, \"Click the 'Search' Button start\"), this.state.searching === true && React.createElement(SearchAppointmentForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmSearchHandler,\n      confirmText: \"Search\",\n      appointment: this.context.selectedAppointment,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1300\n      },\n      __self: this\n    })), React.createElement(Tab, {\n      eventKey: \"Id\",\n      title: \"Search by Id:\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1311\n      },\n      __self: this\n    }, this.state.searching !== true && React.createElement(Button, {\n      variant: \"outline-warning\",\n      className: \"confirmEditButton\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1313\n      },\n      __self: this\n    }, \"Click the 'Search' Button start\"), this.state.searching === true && React.createElement(SearchAppointmentIdForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmSearchIdHandler,\n      confirmText: \"Search\",\n      appointment: this.context.selectedAppointment,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1318\n      },\n      __self: this\n    })), React.createElement(Tab, {\n      eventKey: \"Patient\",\n      title: \"Search by Patient:\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1329\n      },\n      __self: this\n    }, this.state.searching !== true && React.createElement(Button, {\n      variant: \"outline-warning\",\n      className: \"confirmEditButton\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1331\n      },\n      __self: this\n    }, \"Click the 'Search' Button start\"), this.state.searching === true && React.createElement(SearchAppointmentPatientForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmSearchPatientHandler,\n      confirmText: \"Search\",\n      appointment: this.context.selectedAppointment,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1336\n      },\n      __self: this\n    })), React.createElement(Tab, {\n      eventKey: \"Date\",\n      title: \"Search by Date:\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1347\n      },\n      __self: this\n    }, this.state.searching !== true && React.createElement(Button, {\n      variant: \"outline-warning\",\n      className: \"confirmEditButton\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1349\n      },\n      __self: this\n    }, \"Click the 'Search' Button start\"), this.state.searching === true && React.createElement(SearchAppointmentDateForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmSearchDateHandler,\n      confirmText: \"Search\",\n      appointment: this.context.selectedAppointment,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1354\n      },\n      __self: this\n    })), React.createElement(Tab, {\n      eventKey: \"Date Range\",\n      title: \"Search by Date Range:\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1365\n      },\n      __self: this\n    }, this.state.searching !== true && React.createElement(Button, {\n      variant: \"outline-warning\",\n      className: \"confirmEditButton\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1367\n      },\n      __self: this\n    }, \"Click the 'Search' Button start\"), this.state.searching === true && React.createElement(SearchAppointmentDateRangeForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmSearchDateRangeHandler,\n      confirmText: \"Search\",\n      appointment: this.context.selectedAppointment,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1372\n      },\n      __self: this\n    })))), React.createElement(Col, {\n      md: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1385\n      },\n      __self: this\n    })))), React.createElement(Tab.Pane, {\n      eventKey: \"SearchResult\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1391\n      },\n      __self: this\n    }, React.createElement(Container, {\n      className: \"containerSearchUserResults\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1392\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1393\n      },\n      __self: this\n    }, React.createElement(Card, {\n      className: \"searchCard\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1394\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      className: \"searchCardBody\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1395\n      },\n      __self: this\n    }, React.createElement(Card.Title, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1396\n      },\n      __self: this\n    }, \"Your Search\"), React.createElement(Card.Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1397\n      },\n      __self: this\n    }, \"Field: \", this.state.appointmentSearchField), React.createElement(Card.Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1400\n      },\n      __self: this\n    }, \"Query: \", this.state.appointmentSearchQuery)))), React.createElement(Row, {\n      className: \"searchListRow\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1406\n      },\n      __self: this\n    }, this.state.searchAppointments !== [] && React.createElement(SearchAppointmentList, {\n      searchAppointments: this.state.searchAppointments,\n      authUserId: this.context.userId,\n      onCancel: this.modalCancelHandler,\n      onViewDetail: this.showDetailHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1409\n      },\n      __self: this\n    })))))))))))));\n  }\n\n}\n\nAppointmentsPage.contextType = AuthContext;\nexport default AppointmentsPage;","map":{"version":3,"sources":["/Users/pedrojacob/Downloads/AMR/websites/office_records/ENT_EMR/frontend/src/pages/Appointments.js"],"names":["React","Component","Container","Row","Col","Button","Accordion","SidebarPage","Tabs","Tab","Nav","Card","AuthContext","AlertBox","PdfCreator","LoadingOverlay","AppointmentList","AppointmentDetail","SearchAppointmentList","SearchAppointmentForm","SearchAppointmentIdForm","SearchAppointmentPatientForm","SearchAppointmentDateForm","SearchAppointmentDateRangeForm","CreateAppointmentForm","UpdateAppointmentForm","UpdateAppointmentFieldForm","AppointmentsPage","state","creating","updating","deleting","searching","searchAppointments","appointments","isLoading","selectedAppointment","selectedPatient","appointmentUpdateField","appointmentSearchField","appointmentSearchQuery","canDelete","userAlert","overlay","overlayStatus","createPdf","pdfData","isActive","startCreateAppointmentHandler","setState","startUpdateAppointmentHandler","startSearchAppointmentHandler","modalConfirmHandler","event","userId","context","selectedPatientId","_id","token","undefined","title","target","formGridTitle","value","type","formGridType","date","formGridDate","formGridDateTodayCheckbox","checked","Date","toISOString","slice","time","formGridTime","seenTime","formGridSeenTime","checkinTime","formGridCheckinTime","location","formGridLocation","description","formGridDescription","inProgress","formGridInProgress","attended","formGridAttended","important","formGridImportant","trim","length","requestBody","query","fetch","method","body","JSON","stringify","headers","Authorization","then","res","status","Error","json","resData","responseAlert","data","push","createAppointment","fetchAppointments","catch","err","modalCancelHandler","modalConfirmUpdateHandler","user","role","appointmentId","console","log","updatedAppointmentId","updateAppointment","updatedAppointment","find","e","updatedAppointmentPos","indexOf","slicedArray","splice","updateAppointmentPatientHandler","selectedAppointmentId","patientUpdateField","updateAppointmentPatient","modalConfirmUpdateFieldHandler","preventDefault","formGridField","field","formGridQuery","formGridFieldSelect","updateAppointmentField","modalConfirmSearchHandler","formBasicField","formBasicQuery","formBasicFieldSelect","search","getAppointmentField","modalConfirmSearchIdHandler","formBasicId","getAppointmentId","modalConfirmSearchPatientHandler","formBasicPatientId","getAppointmentPatient","searchApointments","modalConfirmSearchDateHandler","appointmentDate","formBasicDate","formBasicDateTodayCheckbox","getAppointmentDate","modalConfirmSearchDateRangeHandler","appointmentStartDate","formBasicStartDate","appointmentEndDate","formBasicEndDate","getAppointmentDateRange","fetchAppointmentsAsc","appointmentsDateAsc","fetchAppointmentsDesc","appointmentsDateDesc","modalDeleteHandler","deletedAppointment","deleteAppointment","deletedAppointmentId","deletedAppointmentPos","showDetailHandler","prevState","selecteAppointment","appointment","patient","name","contact","email","phone","notes","closePdfCreator","componentDidMount","fetchAppointmentToday","fetchAppointmentInProgress","updateAppointmentSpecial","appointmentsToday","getAppointmentToday","appointmentsInProgress","selectedstate","componentWillUnmount","render","bind","substr","contextType"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Button from 'react-bootstrap/Button';\nimport Accordion from 'react-bootstrap/Accordion';\nimport SidebarPage from './Sidebar';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\nimport Nav from 'react-bootstrap/Nav';\nimport Card from 'react-bootstrap/Card';\n\nimport AuthContext from '../context/auth-context';\nimport AlertBox from '../components/AlertBox';\nimport PdfCreator from '../components/PdfCreator';\nimport LoadingOverlay from '../components/LoadingOverlay';\n\nimport AppointmentList from '../components/Appointments/AppointmentList/AppointmentList';\nimport AppointmentDetail from '../components/Appointments/AppointmentDetail';\nimport SearchAppointmentList from '../components/Appointments/AppointmentList/SearchAppointmentList';\nimport SearchAppointmentForm from '../components/Forms/SearchAppointmentForm';\nimport SearchAppointmentIdForm from '../components/Forms/SearchAppointmentIdForm';\nimport SearchAppointmentPatientForm from '../components/Forms/SearchAppointmentPatientForm';\nimport SearchAppointmentDateForm from '../components/Forms/SearchAppointmentDateForm';\nimport SearchAppointmentDateRangeForm from '../components/Forms/SearchAppointmentDateRangeForm';\nimport CreateAppointmentForm from '../components/Forms/CreateAppointmentForm';\nimport UpdateAppointmentForm from '../components/Forms/UpdateAppointmentForm';\nimport UpdateAppointmentFieldForm from '../components/Forms/UpdateAppointmentFieldForm';\n\nimport './Users.css';\n\nclass AppointmentsPage extends Component {\n  state = {\n    creating: false,\n    updating: false,\n    deleting: false,\n    searching: false,\n    searchAppointments: [],\n    appointments: [],\n    isLoading: false,\n    selectedAppointment: null,\n    selectedPatient: null,\n    appointmentUpdateField: null,\n    appointmentSearchField: null,\n    appointmentSearchQuery: null,\n    canDelete: null,\n    userAlert: null,\n    overlay: false,\n    overlayStatus: \"test\",\n    createPdf: false,\n    pdfData: null,\n  };\n  isActive = true;\n\n  static contextType = AuthContext;\n\n  componentDidMount() {\n    if (this.context.user.name === \"Lord-of-the-Manor\"){\n      this.setState({canDelete: true})\n    }\n    this.fetchAppointments();\n    this.fetchAppointmentToday();\n    this.fetchAppointmentInProgress();\n  }\n\n\n  startCreateAppointmentHandler = () => {\n    this.setState({ creating: true });\n  };\n  startUpdateAppointmentHandler = () => {\n    this.setState({ updating: true });\n  };\n  startSearchAppointmentHandler = () => {\n    this.setState({ searching: true });\n  };\n\n  modalConfirmHandler = (event) => {\n\n    this.setState({ creating: false, userAlert: \"creating appointment...\" });\n    const userId = this.context.userId;\n    const selectedPatientId = this.context.selectedPatient._id;\n    const token = this.context.token;\n      if (selectedPatientId === undefined) {\n        this.setState({userAlert: \"select a Patient before creating an Appointment!!...\"});\n        return\n      }\n    const title = event.target.formGridTitle.value;\n    const type = event.target.formGridType.value;\n    let date = event.target.formGridDate.value;\n    if (event.target.formGridDateTodayCheckbox.checked === true) {\n      date = new Date().toISOString().slice(0,10);\n    }\n    const time = event.target.formGridTime.value;\n    const seenTime = event.target.formGridSeenTime.value;\n    const checkinTime = event.target.formGridCheckinTime.value;\n    const location = event.target.formGridLocation.value;\n    const description = event.target.formGridDescription.value;\n    const inProgress = event.target.formGridInProgress.value;\n    const attended = event.target.formGridAttended.value;\n    const important = event.target.formGridImportant.value;\n\n    if (\n      title.trim().length === 0 ||\n      type.trim().length === 0 ||\n      date.trim().length === 0 ||\n      time.trim().length === 0 ||\n      location.trim().length === 0 ||\n      description.trim().length === 0 ||\n      inProgress.trim().length === 0 ||\n      attended.trim().length === 0 ||\n      important.trim().length === 0\n    ) {\n      this.setState({userAlert: \"blank fields detected!!!...Please try again...\"});\n      return\n    };\n\n    const requestBody = {\n      query: `\n          mutation {createAppointment(userId:\"${userId}\",patientId:\"${selectedPatientId}\",appointmentInput:{title:\"${title}\",type:\"${type}\",date:\"${date}\",time:\"${time}\",seenTime:\"${seenTime}\",checkinTime:\"${checkinTime}\",location:\"${location}\",description:\"${description}\",inProgress:${inProgress},attended:${attended},important:${important},})\n          {_id,title,type,date,time,seenTime,checkinTime,location,description,patient{_id,name,appointments{_id,date,title}},inProgress,attended,important}}\n        `\n    };\n\n    // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const responseAlert = JSON.stringify(resData.data).slice(2,15);\n        this.setState({userAlert: responseAlert});\n\n        this.state.appointments.push(resData.data.createAppointment);\n        this.context.appointments = this.state.appointments;\n        this.fetchAppointments();\n      })\n      .catch(err => {\n        this.setState({userAlert: err});\n      });\n  };\n\n  modalCancelHandler = () => {\n    this.setState({ creating: false, updating: false, searching: false, selectedAppointment: null });\n  };\n\n\n  modalConfirmUpdateHandler = (event) => {\n\n    if(this.context.user.role !== 'admin') {\n      this.setState({userAlert: \"Not the Admin! No edit permission!!\"});\n    }\n\n    const userId = this.context.userId;\n    const appointmentId = this.context.selectedAppointment._id;\n    console.log(\"UpdateAppointmentFormData:  \", event.target.formGridTitle.value);\n\n\n    this.setState({ updating: false, userAlert: \"updating appointment...\" });\n    let title = event.target.formGridTitle.value;\n    let type = event.target.formGridType.value;\n\n    let date = event.target.formGridDate.value;\n    if (event.target.formGridDateTodayCheckbox.checked === true) {\n      date = new Date().toISOString().slice(0,10);\n    }\n\n    let time = event.target.formGridTime.value;\n    let seenTime = event.target.formGridSeenTime.value;\n    let checkinTime = event.target.formGridCheckinTime.value;\n    let location = event.target.formGridLocation.value;\n    let description = event.target.formGridDescription.value;\n    let inProgress = event.target.formGridInProgress.value;\n    let attended = event.target.formGridAttended.value;\n    let important = event.target.formGridImportant.value;\n\n    if (title.trim().length === 0 ) {\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      title  = this.context.selectedAppointment.title;\n    }\n    if (type.trim().length === 0 ) {\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      type  = this.context.selectedAppointment.type;\n    }\n    if (date.trim().length === 0 ) {\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      date  = this.context.selectedAppointment.date;\n    }\n    if (time.trim().length === 0 ) {\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      time  = this.context.selectedAppointment.time;\n    }\n    if (seenTime.trim().length === 0 ) {\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      seenTime  = this.context.selectedAppointment.seenTime;\n    }\n    if (checkinTime.trim().length === 0 ) {\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      checkinTime  = this.context.selectedAppointment.checkinTime;\n    }\n    if (location.trim().length === 0 ) {\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      location  = this.context.selectedAppointment.location;\n    }\n    if (description.trim().length === 0 ) {\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      description  = this.context.selectedAppointment.description;\n    }\n    if (inProgress.trim().length === 0 ) {\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      inProgress  = this.context.selectedAppointment.inProgress;\n    }\n    if (attended.trim().length === 0 ) {\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      attended  = this.context.selectedAppointment.attended;\n    }\n    if (important.trim().length === 0 ) {\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      important  = this.context.selectedAppointment.important;\n    }\n\n    console.log(`\n        updating appointment...\n        title: ${title},\n        type: ${type},\n        date: ${date},\n        time: ${time},\n        seenTime: ${seenTime},\n        checkinTime: ${checkinTime},\n        location: ${location},\n        description: ${description},\n        inProgress: ${inProgress},\n        attended: ${attended},\n        important: ${important},\n      `);\n\n    const requestBody = {\n      query: `\n      mutation {updateAppointment(userId:\"${userId}\",appointmentId:\"${appointmentId}\",appointmentInput:{title:\"${title}\",type:\"${type}\",date:\"${date}\",time:\"${time}\",seenTime:\"${seenTime}\",checkinTime:\"${checkinTime}\",location:\"${location}\",description:\"${description}\",inProgress:${inProgress},attended:${attended},important:${important},})\n      {_id,title,type,date,time,seenTime,checkinTime,location,description,patient{_id,name,appointments{_id,date,title}},inProgress,attended,important,notes}}\n        `\n    };\n\n    const token = this.context.token;\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n\n        const updatedAppointmentId = resData.data.updateAppointment._id;\n        const updatedAppointment = this.state.appointments.find(e => e._id === updatedAppointmentId);\n        const updatedAppointmentPos = this.state.appointments.indexOf(updatedAppointment);\n        const slicedArray = this.state.appointments.splice(updatedAppointmentPos, 1);\n        console.log(\"updatedAppointment:  \", JSON.stringify(updatedAppointment),\"  updatedPatientPos:  \", updatedAppointmentPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.appointments.push(resData.data.updateAppointment);\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert})\n        this.fetchAppointments();\n\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n  };\n\n\n  updateAppointmentPatientHandler = (event) => {\n\n    const token = this.context.token;\n    const userId = this.context.userId;\n    let selectedAppointmentId = this.context.selectedAppointment._id;\n    let selectedPatientId = this.context.selectedPatient._id;\n    if(\n      this.context.user.role !== 'admin'\n    ) {\n      console.log(\"No edit permission!!\");\n      this.setState({userAlert: \"No edit permission!!\"});\n      return;\n    }\n\n    if (selectedPatientId === undefined) {\n      console.log(`\n        select a Patient before creating an Appointment!!\n        `);\n        this.setState({userAlert: \"select a Patient before creating an Appointment!!...\"});\n        return\n    }\n\n    this.setState({ updating: false , patientUpdateField: null });\n\n    console.log(`\n      updating appointment patient...\n      userId: ${userId},\n      appointmentId: ${selectedAppointmentId},\n      patientId: ${selectedPatientId},\n      `);\n      this.setState({userAlert: \"updating appointment patient...\"});\n\n      const requestBody = {\n        query:`\n        mutation {updateAppointmentPatient(userId:\"${userId}\",appointmentId:\"${selectedAppointmentId}\",patientId:\"${selectedPatientId}\")\n        {_id,title,type,date,time,seenTime,checkinTime,location,description,patient{_id,name,appointments{_id,date,title},consultant{reference{_id,name,role}}},inProgress,attended,important}}\n        `\n      }\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData));\n\n          const updatedAppointmentId = resData.data.updateAppointmentPatient._id;\n          const updatedAppointment = this.state.appointments.find(e => e._id === updatedAppointmentId);\n          const updatedAppointmentPos = this.state.appointments.indexOf(updatedAppointment);\n          const slicedArray = this.state.appointments.splice(updatedAppointmentPos, 1);\n          console.log(\"updatedAppointment:  \", JSON.stringify(updatedAppointment),\"  updatedPatientPos:  \", updatedAppointmentPos, \"  slicedArray:  \", slicedArray);\n\n          this.state.appointments.push(resData.data.updateAppointmentPatient);\n          const responseAlert = JSON.stringify(resData.data).slice(2,25);\n          this.setState({ userAlert: responseAlert})\n          this.fetchAppointments();\n\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({userAlert: err});\n        });\n\n\n  }\n\n\n  modalConfirmUpdateFieldHandler = (event) => {\n    event.preventDefault();\n\n    const token = this.context.token;\n    const userId = this.context.userId;\n    let selectedAppointmentId = this.context.selectedAppointment._id;\n    if( this.context.user.role !== 'admin') {\n      console.log(\"Not the creator or Admin! No edit permission!!\");\n      selectedAppointmentId = null;\n    }\n\n      console.log(\"UpdateAppointmentFieldFormData:  \", event.target.formGridField.value);\n      this.setState({ updating: false });\n\n      let field = null;\n      let query = event.target.formGridQuery.value;\n      if (event.target.formGridFieldSelect.value === \"select\") {\n        field = event.target.formGridField.value;\n      } else {\n        field = event.target.formGridFieldSelect.value;\n      }\n\n      const requestBody = {\n        query:`\n        mutation {updateAppointmentField(userId:\"${userId}\",appointmentId:\"${selectedAppointmentId}\",field:\"${field}\",query:\"${query}\")\n        {_id,title,type,date,time,seenTime,checkinTime,location,description,patient{_id,name,appointments{_id,date,title}},inProgress,attended,important,notes}}\n        `};\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData.data.updateAppointmentField));\n\n          const responseAlert = JSON.stringify(resData.data).slice(2,25);\n          this.setState({ userAlert: responseAlert})\n          // this.setState({ userAlert: responseAlert, selectedAppointment: resData.data.updateAppointmentField})\n\n          const updatedAppointmentId = resData.data.updateAppointmentField._id;\n          const updatedAppointment = this.state.appointments.find(e => e._id === updatedAppointmentId);\n          const updatedAppointmentPos = this.state.appointments.indexOf(updatedAppointment);\n          const slicedArray = this.state.appointments.splice(updatedAppointmentPos, 1);\n          console.log(\"updatedAppointment:  \", JSON.stringify(updatedAppointment),\"  updatedAppointmentPos:  \", updatedAppointmentPos, \"  slicedArray:  \", slicedArray);\n\n          this.state.appointments.push(resData.data.updateAppointmentField);\n          this.context.appointments = this.state.appointments;\n\n          this.fetchAppointments();\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({userAlert: err});\n        });\n\n  }\n\n\n  modalConfirmSearchHandler = (event) => {\n    console.log(\"SearchAppointmentForm:  \");\n\n\n    let userId = this.context.userId;\n\n      console.log(\"SearchAppointmentFormData:  \", event.target.formBasicField.value);\n      this.setState({ searching: false });\n\n      let field = null;\n      let query = event.target.formBasicQuery.value;\n      if (event.target.formBasicFieldSelect.value === \"select\") {\n        field = event.target.formBasicField.value;\n      } else {\n        field = event.target.formBasicFieldSelect.value;\n      }\n\n      if (\n        field.trim().length === 0 ||\n        query.trim().length === 0\n      ) {\n        console.log(\"blank fields detected!!!...Please try again...\");\n        this.setState({userAlert: \"blank fields detected!!!...Please try again...\"});\n        return;\n      }\n\n      const search = { field, query }\n      console.log(\"Searching for Appointment:  \", JSON.stringify(search));\n\n      const requestBody = {\n        query: `\n          query {getAppointmentField(userId:\"${userId}\", field:\"${field}\", query:\"${query}\")\n          {_id,title,type,date,time,seenTime,checkinTime,location,description,patient{_id,name,appointments{_id,date,title},consultant{reference{_id,name,role}}},inProgress,attended,important}}\n        `}\n\n      const token = this.context.token;\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData));\n          const responseAlert = JSON.stringify(resData.data).slice(2,15);\n          this.setState({userAlert: responseAlert});\n\n          const searchAppointments = resData.data.getAppointmentField;\n\n          this.setState({ searchAppointments: searchAppointments})\n          console.log(\"state.searchAppointments:  \", this.state.searchAppointments);\n          // this.fetchAppointments();\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({userAlert: err});\n        });\n  }\n\n  modalConfirmSearchIdHandler = (event) => {\n    console.log(`\n      SearchAppointmentIdFormData\n      `);\n\n      let userId = this.context.userId;\n      this.setState({ searching: false });\n      let selectedAppointmentId = event.target.formBasicId.value;\n\n      const requestBody = {\n        query: `\n          query {getAppointmentId(userId:\"${userId}\", appointmentId:\"${selectedAppointmentId}\")\n          {_id,title,type,date,time,patient{_id,name},location,description,inProgress,important,attended}}\n        `}\n\n      const token = this.context.token;\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData));\n          const responseAlert = JSON.stringify(resData.data).slice(2,15);\n          this.setState({userAlert: responseAlert});\n\n          const searchAppointments = resData.data.getAppointmentId;\n\n          this.setState({ searchAppointments: [searchAppointments]})\n          console.log(\"state.searchAppointments:  \", this.state.searchAppointments);\n          // this.fetchUsers();\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({userAlert: err});\n        });\n  }\n\n  modalConfirmSearchPatientHandler = (event) => {\n    console.log(`\n      SearchAppointmentPatientFormData\n      `);\n\n      let userId = this.context.userId;\n      this.setState({ searching: false });\n      let selectedPatientId = event.target.formBasicPatientId.value;\n\n      const requestBody = {\n        query: `\n          query {getAppointmentPatient(userId:\"${userId}\", patientId:\"${selectedPatientId}\")\n          {_id,title,type,date,time,patient{_id,name},location,description,inProgress,important,attended}}\n        `}\n\n      const token = this.context.token;\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData));\n          const responseAlert = JSON.stringify(resData.data).slice(2,15);\n          // const responseAlert = JSON.stringify(resData.errors).slice(2,15);\n          this.setState({userAlert: responseAlert});\n\n          const searchAppointments = resData.data.getAppointmentPatient;\n\n          this.setState({ searchAppointments: searchAppointments })\n          // this.state.searchApointments.push(searchAppointments)\n          console.log(\"state.searchApointments:  \", this.state.searchApointments);\n          // this.fetchUsers();\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({userAlert: err});\n        });\n\n  }\n  modalConfirmSearchDateHandler = (event) => {\n    console.log(`\n      SearchAppointmentDateFormData\n      `);\n\n      let userId = this.context.userId;\n      this.setState({ searching: false });\n\n      let appointmentDate = event.target.formBasicDate.value;\n      if (event.target.formBasicDateTodayCheckbox.checked === true) {\n        appointmentDate = new Date().toISOString().slice(0,10);\n      }\n\n      const requestBody = {\n        query: `\n          query {getAppointmentDate(userId:\"${userId}\",date:\"${appointmentDate}\")\n          {_id,title,type,date,time,patient{_id,name},location,description,inProgress,important,attended}}\n        `}\n\n      const token = this.context.token;\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData));\n          const responseAlert = JSON.stringify(resData.data).slice(2,15);\n          this.setState({userAlert: responseAlert});\n\n          const searchAppointments = resData.data.getAppointmentDate;\n\n          this.setState({ searchAppointments: searchAppointments})\n          console.log(\"state.searchAppointments:  \", this.state.searchAppointments);\n          // this.fetchUsers();\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({userAlert: err});\n        });\n\n  }\n  modalConfirmSearchDateRangeHandler = (event) => {\n    console.log(`\n      SearchAppointmentDateRangeFormData\n      `);\n\n      let userId = this.context.userId;\n      this.setState({ searching: false });\n      let appointmentStartDate = event.target.formBasicStartDate.value;\n      let appointmentEndDate = event.target.formBasicEndDate.value;\n\n      const requestBody = {\n        query: `\n          query {getAppointmentDateRange(userId:\"${userId}\",startDate:\"${appointmentStartDate}\",endDate:\"${appointmentEndDate}\")\n          {_id,title,type,date,time,patient{_id,name},location,description,inProgress,important,attended}}\n        `}\n\n      const token = this.context.token;\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData));\n          const responseAlert = JSON.stringify(resData.data).slice(2,15);\n          this.setState({userAlert: responseAlert});\n\n          const searchAppointments = resData.data.getAppointmentDateRange;\n\n          this.setState({ searchAppointments: searchAppointments})\n          console.log(\"state.searchApointments:  \", this.state.searchAppointments);\n          // this.fetchUsers();\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({userAlert: err});\n        });\n\n\n  }\n\n\n\n  modalCancelHandler = () => {\n    this.setState({ creating: false, updating: false, searching: false, selectedAppointment: null });\n  };\n\n\n  fetchAppointments() {\n    console.log(\"'fetch appointments function' context object... \" + JSON.stringify(this.context));\n    const userId = this.context.userId;\n\n    this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n            query {appointments(userId:\"${userId}\")\n            {_id,title,type,date,time,seenTime,checkinTime,location,description,patient{_id,name,contact{email,phone},consultant{reference{_id,name,role}}},inProgress,attended,important,notes}}\n        `};\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const appointments = resData.data.appointments;\n        console.log(appointments);\n        const responseAlert = JSON.stringify(resData.data).slice(2,15);\n        this.setState({userAlert: responseAlert});\n\n        this.context.appointments = this.state.appointments;\n        if (this.isActive) {\n          this.setState({ appointments: appointments, isLoading: false });\n        }\n\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n        if (this.isActive) {\n          this.setState({ isLoading: false });\n        }\n      });\n  }\n\n  fetchAppointmentsAsc = () => {\n    console.log(\"'fetch appointments function' context object... \" + JSON.stringify(this.context));\n    const userId = this.context.userId;\n\n    // this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n            query {appointmentsDateAsc(userId:\"${userId}\")\n            {_id,title,type,date,time,seenTime,checkinTime,location,description,patient{_id,name,contact{email,phone},consultant{reference{_id,name,role}}},inProgress,attended,important,notes}}\n        `};\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const appointments = resData.data.appointmentsDateAsc;\n        console.log(appointments);\n        const responseAlert = JSON.stringify(resData.data).slice(2,15);\n        this.setState({userAlert: responseAlert});\n\n        this.context.appointments = appointments;\n        this.setState({appointments: appointments})\n        // if (this.isActive) {\n        //   this.setState({ appointments: appointments, isLoading: false });\n        // }\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n        // if (this.isActive) {\n        //   this.setState({ isLoading: false });\n        // }\n      });\n  }\n  fetchAppointmentsDesc = () => {\n    console.log(\"'fetch appointments function' context object... \" + JSON.stringify(this.context));\n    const userId = this.context.userId;\n\n    // this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n            query {appointmentsDateDesc(userId:\"${userId}\")\n            {_id,title,type,date,time,seenTime,checkinTime,location,description,patient{_id,name,contact{email,phone},consultant{reference{_id,name,role}}},inProgress,attended,important,notes}}\n        `};\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const appointments = resData.data.appointmentsDateDesc;\n        console.log(appointments);\n        const responseAlert = JSON.stringify(resData.data).slice(2,15);\n        this.setState({userAlert: responseAlert});\n\n        this.context.appointments = appointments;\n        this.setState({appointments: appointments})\n        // if (this.isActive) {\n        //   this.setState({ appointments: appointments, isLoading: false });\n        // }\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n        // if (this.isActive) {\n        //   this.setState({ isLoading: false });\n        // }\n      });\n  }\n\n  modalDeleteHandler = () => {\n    console.log(\"deleting appointment...selectedAppointment:  \", this.context.selectedAppointment);\n\n    const userId = this.context.userId;\n    const selectedAppointmentId = this.context.selectedAppointment._id;\n\n    if(this.context.user.role !== 'admin') {\n      console.log(\"Not the Admin! No edit permission!!\");\n      this.setState({userAlert: \"Not the Admin! No edit permission!!\"});\n    }\n\n    this.setState({deleting: true});\n\n\n    const requestBody = {\n      query: `\n          mutation {deleteAppointment(userId:\"${userId}\",appointmentId:\"${selectedAppointmentId}\")\n          {_id,title,type,date,time,seenTime,checkinTime,location,description,patient{_id,name,appointments{_id,date,title}},inProgress,attended,important,notes}}\n        `};\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"resData:  \", resData);\n        // console.log(\"resData.data.deleteAppointment:  \", resData.data.deleteAppointment);\n        let deletedAppointment = resData.data.deleteAppointment;\n        console.log(deletedAppointment);\n        const responseAlert = JSON.stringify(resData.data).slice(2,15);\n        this.setState({userAlert: responseAlert});\n\n        let deletedAppointmentId = deletedAppointment._id;\n        deletedAppointment = this.state.appointments.find(e => e._id === deletedAppointmentId);\n        const deletedAppointmentPos = this.state.appointments.indexOf(deletedAppointment);\n        const slicedArray = this.state.appointments.splice(deletedAppointmentPos, 1);\n        console.log(\"deletedAppointment:  \", JSON.stringify(deletedAppointment),\"  deletedUserPos:  \", deletedAppointmentPos, \"  slicedArray:  \", slicedArray);\n\n        this.setState({ deleting: false });\n\n        this.fetchAppointments();\n\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n        if (this.isActive) {\n          this.setState({ deleting: false });\n        }\n      });\n\n\n  }\n\n  updateAppointmentSpecial (event) {\n\n    console.log(\"special field to update:  \", event.target.value);\n    const field = event.target.value;\n    this.setState({ appointmentUpdateField: field});\n\n  }\n\n\n  showDetailHandler = appointmentId => {\n\n    this.setState(prevState => {\n      const selectedAppointment = prevState.appointments.find(e => e._id === appointmentId);\n      this.setState({selectedAppointment: selectedAppointment});\n      this.context.selectedAppointment = selectedAppointment;\n      console.log(\"selectedAppointment:  \", selectedAppointment);\n      return { selecteAppointment: selectedAppointment };\n    });\n  };\n\n\n  fetchAppointmentToday() {\n    console.log(\"fetching todays appts function:  \");\n\n    const token = this.context.token;\n    const userId = this.context.userId;\n\n    const requestBody = {\n      query: `\n          query {getAppointmentToday(userId:\"${userId}\")\n          {_id,title,type,date,time,patient{_id,name},location,description,inProgress,important,attended}}\n        `\n    };\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        this.context.appointmentsToday = resData.data.getAppointmentToday;\n        console.log(\"context today's appts:  \", JSON.stringify(this.context.appointmentsToday));\n\n        const responseAlert = JSON.stringify(resData.data).slice(2,15);\n        this.setState({userAlert: responseAlert});\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n\n  }\n\n\n  fetchAppointmentInProgress() {\n    console.log(\"fetching inProgress appts function:  \");\n\n    const token = this.context.token;\n    const userId = this.context.userId;\n\n    const requestBody = {\n      query: `\n          query {getAppointmentField(userId:\"${userId}\",field:\"inProgress\",query:\"true\"){_id,title,type,date,time,patient{_id,name},location,description,inProgress,important,attended}}\n        `\n    };\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        this.context.appointmentsInProgress = resData.data.getAppointmentField;\n        console.log(\"context in progress appts:  \", JSON.stringify(this.context.appointmentsInProgress));\n\n        const responseAlert = JSON.stringify(resData.data).slice(2,15);\n        this.setState({userAlert: responseAlert});\n\n        if (this.state.selectedPatient === {} || this.context.selectedstate === null) {\n          this.setState({userAlert: \"No Patient Selected\"})\n        }\n        console.log(`\n          context.selectedPatient: ${JSON.stringify(this.context.selectedPatient)},\n          state.selectedPatient: ${JSON.stringify(this.state.selectedPatient)},\n          `);\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n\n  }\n\n  createPdf = (appointment) => {\n    console.log(`\n        creating pdf...\n        user: ${JSON.stringify(appointment)}\n      `);\n\n      const pdfData = {\n        title: \"This pdf is supplied with Appointment data...\",\n        appointment: {\n          _id: appointment._id,\n          title: appointment.title,\n          type: appointment.type,\n          date: appointment.date,\n          time: appointment.time,\n          seenTime: appointment.seenTime,\n          checkinTime: appointment.checkinTime,\n          location: appointment.location,\n          description: appointment.description,\n          patient:{\n            _id: appointment.patient._id,\n            name: appointment.patient.name,\n            contact:\n            {\n              email: appointment.patient.contact.email,\n              phone: appointment.patient.contact.phone\n            }},\n              inProgress: appointment.inProgress,\n              attended: appointment.attended,\n              important: appointment.important,\n              notes: appointment.notes\n            }\n        }\n\n    this.setState({createPdf: true, pdfData: pdfData})\n  }\n\n  closePdfCreator = () => {\n    console.log(`\n      closing pdf creator...\n      `);\n      this.setState({createPdf: false, pdfData: null})\n  }\n\n  componentWillUnmount() {\n    this.isActive = false;\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n\n      {this.state.createPdf === true && (\n          <PdfCreator\n            pdfData={this.state.pdfData}\n            onClosePdfCreator={this.closePdfCreator}\n          />\n      )}\n\n      <Accordion>\n\n      <Row>\n\n      <Col md={3} className=\"MasterCol1\">\n\n      <AlertBox\n            authUserId={this.context.userId}\n            alert={this.state.userAlert}\n          />\n      <SidebarPage/>\n\n      </Col>\n\n      <Col md={9} className=\"MasterCol2\">\n\n          <Container className=\"containerCombinedDetail\">\n\n          <Tab.Container id=\"left-tabs-example\" defaultActiveKey=\"appointmentDetail\">\n            <Row>\n              <Col sm={2}>\n                <Nav variant=\"pills\" className=\"flex-column\">\n                  <Nav.Item>\n                    <Nav.Link eventKey=\"MasterList\">MASTER LIST</Nav.Link>\n                  </Nav.Item>\n                  <Nav.Item>\n                    <Nav.Link eventKey=\"appointmentDetail\">Selected</Nav.Link>\n                  </Nav.Item>\n                  <Nav.Item>\n                    <Nav.Link eventKey=\"appointmentCreate\">Create New</Nav.Link>\n                  </Nav.Item>\n                  <Nav.Item>\n                    <Nav.Link eventKey=\"disabled\" disabled>Edit:</Nav.Link>\n                  </Nav.Item>\n                  <Nav.Item>\n                    <Nav.Link eventKey=\"appointmentEditBasic\">Basic Info</Nav.Link>\n                  </Nav.Item>\n                  <Nav.Item>\n                    <Nav.Link eventKey=\"appointmentEditField\">Single Field</Nav.Link>\n                  </Nav.Item>\n                  <Nav.Item>\n                    <Nav.Link eventKey=\"appointmentEditPatient\">Patient</Nav.Link>\n                  </Nav.Item>\n                  <Nav.Item>\n                    <Nav.Link eventKey=\"disabled\" disabled>Search:</Nav.Link>\n                  </Nav.Item>\n                  <Nav.Item>\n                    <Nav.Link eventKey=\"SearchInput\">Input</Nav.Link>\n                  </Nav.Item>\n                  <Nav.Item>\n                    <Nav.Link eventKey=\"SearchResult\">Results</Nav.Link>\n                  </Nav.Item>\n                </Nav>\n              </Col>\n              <Col sm={10}>\n                <Tab.Content>\n                  <Tab.Pane eventKey=\"appointmentDetail\">\n                    {this.state.selectedAppointment === null && (\n                      <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                        Select an Appointment from the Master List\n                      </Button>\n                    )}\n                    {\n                      this.state.isLoading === false &&\n                      this.state.selectedAppointment !== null\n                      &&\n                      (\n                        <AppointmentDetail\n                        authUserId={this.context.userId}\n                        appointment={this.state.selectedAppointment}\n                        onEdit={this.startUpdateAppointmentHandler}\n                        canDelete={this.state.canDelete}\n                        onDelete={this.modalDeleteHandler}\n                        onCreatePdf={this.createPdf}\n                        />\n                    )}\n                  </Tab.Pane>\n\n                  <Tab.Pane eventKey=\"appointmentCreate\">\n                    <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" onClick={this.startCreateAppointmentHandler} >Create New</Button>\n                    {\n                      this.state.creating &&\n                      this.context.selectedPatient._id !== null\n                      && (\n                        <CreateAppointmentForm\n                        canCancel\n                          canConfirm\n                          onCancel={this.modalCancelHandler}\n                          onConfirm={this.modalConfirmHandler}\n                          onSubmit={this.modalConfirmHandler}\n                          confirmText=\"Confirm\"\n                          selectedPatient={this.context.selectedPatient}\n                        />\n                    )}\n                  </Tab.Pane>\n\n                  <Tab.Pane eventKey=\"appointmentEditBasic\">\n                    {this.state.selectedAppointment === null && (\n                      <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                        Select an Appointment from the Master List\n                      </Button>\n                    )}\n                    {this.state.selectedAppointment !== null && (\n                      <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" onClick={this.startUpdateAppointmentHandler}>Edit Basic Data</Button>\n                    )}\n                    {this.state.updating &&\n                      this.state.selectedAppointment !== null\n                      && (\n                      <UpdateAppointmentForm\n                      authUserId={this.context.userId}\n                      canCancel\n                        canConfirm\n                        onCancel={this.modalCancelHandler}\n                        onConfirm={this.modalConfirmUpdateHandler}\n                        confirmText=\"Confirm\"\n                        appointment={this.state.selectedAppointment}\n                      />\n                    )}\n                  </Tab.Pane>\n\n                  <Tab.Pane eventKey=\"appointmentEditField\">\n                    {this.state.selectedAppointment === null && (\n                      <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                        Select an Appointment from the Master List\n                      </Button>\n                    )}\n                    {this.state.selectedAppointment !== null && (\n                      <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" onClick={this.startUpdateAppointmentHandler}>Edit a Single Field</Button>\n                    )}\n                    {this.state.updating &&\n                      this.state.selectedAppointment !== null\n                      && (\n                        <UpdateAppointmentFieldForm\n                          authUserId={this.context.userId}\n                          canCancel\n                          canConfirm\n                          onCancel={this.modalCancelHandler}\n                          onConfirm={this.modalConfirmUpdateFieldHandler}\n                          confirmText=\"Confirm\"\n                          appointment={this.state.selectedAppointment}\n                        />\n                    )}\n                  </Tab.Pane>\n\n                  <Tab.Pane eventKey=\"appointmentEditPatient\">\n                    {this.state.selectedAppointment === null && (\n                      <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                        Select an Appointment from the Master List\n                      </Button>\n                    )}\n                    {this.state.selectedAppointment !== null && (\n                      <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" value='patient' onClick={this.updateAppointmentSpecial.bind(this)}>Change Patient:</Button>\n                    )}\n                    {this.state.selecteAppointment !== null &&\n                      this.context.selectedPatient === null &&\n                      this.state.appointmentUpdateField === \"patient\" && (\n                        <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                          Select someone from the Patients page\n                        </Button>\n                      )}\n                    {this.state.selectedAppointment !== null &&\n                      this.context.selectedPatient !== null &&\n                      this.state.appointmentUpdateField === \"patient\" && (\n                      <Row>\n                      <Col md={8} className=\"updateUserColAdd\">\n                      <p><span className=\"bold\">Add Patient :</span> {this.context.selectedPatient.name}</p>\n                      <p><span className=\"bold\">To Appointment :</span> {this.state.selectedAppointment.title}  <span className=\"bold\">On :</span> {new Date(this.state.selecteAppointment.date.substr(0,10)*1000).toISOString().slice(0,10)} <span className=\"bold\">At :</span> {this.state.selecteAppointment.time} ??</p>\n                      <Button variant=\"success\" onClick={this.updateAppointmentPatientHandler}>\n                        Yes\n                      </Button>\n                      </Col>\n                      </Row>\n                    )}\n                  </Tab.Pane>\n\n                  <Tab.Pane eventKey=\"MasterList\">\n                    <Container className=\"containerUserMasterList\">\n                    <Row className=\"searchListRow\">\n                    <Button variant=\"primary\" size=\"sm\" onClick={this.fetchAppointmentsAsc}>\n                       Sort Asc\n                     </Button>\n                    <Button variant=\"info\" size=\"sm\" onClick={this.fetchAppointmentsDesc}>\n                       Sort Desc\n                     </Button>\n                    {this.state.isLoading ? (\n                      <Spinner />\n                    ) :\n                    (\n                      <AppointmentList\n                        appointments={this.state.appointments}\n                        authUserId={this.context.userId}\n                        onViewDetail={this.showDetailHandler}\n                      />\n                    )}\n                    </Row>\n                    </Container>\n                  </Tab.Pane>\n\n                  <Tab.Pane eventKey=\"SearchInput\">\n                    <Container className=\"containerSearchUserInput\">\n                    <Row className=\"searchUserRowAdd\">\n                    <Button variant=\"primary\" onClick={this.startSearchAppointmentHandler}>Search</Button>\n                    </Row>\n\n                    <Row className=\"searchUserRowForm\">\n                    <Col md={10} className=\"searchUserColForm\">\n                    <Tabs defaultActiveKey=\"Field\" id=\"uncontrolled-tab-example\">\n                    <Tab eventKey=\"Search\" title=\"Search:\" disabled>\n                    </Tab>\n                    <Tab eventKey=\"Field\" title=\"Search by Field:\">\n                    {this.state.searching !== true && (\n                      <Button variant=\"outline-warning\" className=\"confirmEditButton\" size=\"lg\">\n                        Click the 'Search' Button start\n                      </Button>\n                    )}\n                    {this.state.searching === true && (\n                      <SearchAppointmentForm\n                      authUserId={this.context.userId}\n                      canCancel\n                        canConfirm\n                        onCancel={this.modalCancelHandler}\n                        onConfirm={this.modalConfirmSearchHandler}\n                        confirmText=\"Search\"\n                        appointment={this.context.selectedAppointment}\n                      />\n                    )}\n                    </Tab>\n                    <Tab eventKey=\"Id\" title=\"Search by Id:\">\n                    {this.state.searching !== true && (\n                      <Button variant=\"outline-warning\" className=\"confirmEditButton\" size=\"lg\">\n                        Click the 'Search' Button start\n                      </Button>\n                    )}\n                      {this.state.searching === true && (\n                        <SearchAppointmentIdForm\n                        authUserId={this.context.userId}\n                        canCancel\n                          canConfirm\n                          onCancel={this.modalCancelHandler}\n                          onConfirm={this.modalConfirmSearchIdHandler}\n                          confirmText=\"Search\"\n                          appointment={this.context.selectedAppointment}\n                        />\n                      )}\n                    </Tab>\n                    <Tab eventKey=\"Patient\" title=\"Search by Patient:\">\n                    {this.state.searching !== true && (\n                      <Button variant=\"outline-warning\" className=\"confirmEditButton\" size=\"lg\">\n                        Click the 'Search' Button start\n                      </Button>\n                    )}\n                      {this.state.searching === true && (\n                        <SearchAppointmentPatientForm\n                        authUserId={this.context.userId}\n                        canCancel\n                          canConfirm\n                          onCancel={this.modalCancelHandler}\n                          onConfirm={this.modalConfirmSearchPatientHandler}\n                          confirmText=\"Search\"\n                          appointment={this.context.selectedAppointment}\n                        />\n                      )}\n                    </Tab>\n                    <Tab eventKey=\"Date\" title=\"Search by Date:\">\n                    {this.state.searching !== true && (\n                      <Button variant=\"outline-warning\" className=\"confirmEditButton\" size=\"lg\">\n                        Click the 'Search' Button start\n                      </Button>\n                    )}\n                      {this.state.searching === true && (\n                        <SearchAppointmentDateForm\n                        authUserId={this.context.userId}\n                        canCancel\n                          canConfirm\n                          onCancel={this.modalCancelHandler}\n                          onConfirm={this.modalConfirmSearchDateHandler}\n                          confirmText=\"Search\"\n                          appointment={this.context.selectedAppointment}\n                        />\n                      )}\n                    </Tab>\n                    <Tab eventKey=\"Date Range\" title=\"Search by Date Range:\">\n                    {this.state.searching !== true && (\n                      <Button variant=\"outline-warning\" className=\"confirmEditButton\" size=\"lg\">\n                        Click the 'Search' Button start\n                      </Button>\n                    )}\n                      {this.state.searching === true && (\n                        <SearchAppointmentDateRangeForm\n                        authUserId={this.context.userId}\n                        canCancel\n                          canConfirm\n                          onCancel={this.modalCancelHandler}\n                          onConfirm={this.modalConfirmSearchDateRangeHandler}\n                          confirmText=\"Search\"\n                          appointment={this.context.selectedAppointment}\n                        />\n                      )}\n                    </Tab>\n                    </Tabs>\n                    </Col>\n                    <Col md={10}>\n                    </Col>\n                    </Row>\n                    </Container>\n                  </Tab.Pane>\n\n                  <Tab.Pane eventKey=\"SearchResult\">\n                    <Container className=\"containerSearchUserResults\">\n                    <Row>\n                      <Card className=\"searchCard\">\n                        <Card.Body className=\"searchCardBody\">\n                          <Card.Title>Your Search</Card.Title>\n                          <Card.Text>\n                            Field: {this.state.appointmentSearchField}\n                          </Card.Text>\n                          <Card.Text>\n                            Query: {this.state.appointmentSearchQuery}\n                          </Card.Text>\n                        </Card.Body>\n                      </Card>\n                    </Row>\n                    <Row className=\"searchListRow\">\n                    {\n                      this.state.searchAppointments !== [] && (\n                      <SearchAppointmentList\n                        searchAppointments={this.state.searchAppointments}\n                        authUserId={this.context.userId}\n                        onCancel={this.modalCancelHandler}\n                          onViewDetail={this.showDetailHandler}\n                      />\n                    )}\n                    </Row>\n                    </Container>\n                  </Tab.Pane>\n                </Tab.Content>\n              </Col>\n            </Row>\n          </Tab.Container>\n\n\n          </Container>\n\n      </Col>\n    </Row>\n\n  </Accordion>\n\n        {\n        //   this.state.isLoading === false &&\n        //   (<PatientDetail\n        //     authUserId={this.context.userId}\n        //     patient={this.context.selectedPatient}\n        //     className=\"PatientDetailBox2\"\n        // />)\n      }\n      </React.Fragment>\n    );\n  }\n}\n\nexport default AppointmentsPage;\n"]},"metadata":{},"sourceType":"module"}