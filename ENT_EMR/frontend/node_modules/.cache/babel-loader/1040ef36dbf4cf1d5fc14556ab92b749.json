{"ast":null,"code":"var _jsxFileName = \"/Users/pedrojacob/Downloads/AMR/websites/office_records/ENT_EMR/frontend/src/pages/Appointments.js\";\nimport React, { Component } from 'react'; // import Form from 'react-bootstrap/Form';\n// import Button from 'react-bootstrap/Button';\n// import Modal from '../components/Modal/Modal';\n// import Backdrop from '../components/Backdrop/Backdrop';\n\nimport AppointmentList from '../components/Appointments/AppointmentList/AppointmentList';\nimport AppointmentDetail from '../components/Appointments/AppointmentDetail';\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context'; // import CreateAppointmentForm from '../components/Forms/CreateAppointmentForm';\n// import UpdateAppointmentForm from '../components/Forms/UpdateAppointmentForm';\n\nimport './Users.css';\n\nclass AppointmentsPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      creating: false,\n      updating: false,\n      appointments: [],\n      isLoading: false,\n      selectedAppointment: null\n    };\n    this.isActive = true;\n\n    this.startCreateAppointmentHandler = () => {\n      this.setState({\n        creating: true\n      });\n      console.log(\"CreateAppointmentForm...\");\n    };\n\n    this.startUpdateAppointmentHandler = () => {\n      this.setState({\n        updating: true\n      });\n      console.log(\"UpdateAppointmentForm...\");\n    };\n\n    this.modalConfirmHandler = event => {\n      // console.log(\"CreatePatientFormData:  \", event.target.formGridTitle.value);\n      this.setState({\n        creating: false\n      });\n      const userId = this.context.userId;\n      const title = event.targetformGridTitle.value;\n      const type = event.targetformGridType.value;\n      const date = event.targetformGridDate.value;\n      const location = event.targetformGridLocation.value;\n      const description = event.targetformGridDescription.value;\n      const inProgress = event.targetformGridInProgress.value;\n      const note = event.targetformGridNote.value;\n\n      if (title.trim().length === 0 || type.trim().length === 0 || date.trim().length === 0 || location.trim().length === 0 || description.trim().length === 0 || inProgress.trim().length === 0 || note.trim().length === 0) {\n        console.log(\"blank fields detected!!!...Please try again...\");\n        return;\n      }\n\n      const appointment = {\n        title,\n        type,\n        date,\n        location,\n        description,\n        inProgress,\n        note\n      };\n      console.log(\"creating appointment... \" + JSON.stringify(appointment));\n      const requestBody = {\n        query: \"\\n          mutation CreateAppointment($userId: ID!, $patientId: ID, $title: String!, $type: String!, $date: String!, $location: String!, $description: String!, $inProgress: Boolean!, $note: String!) {\\n            createAppointment(userId: $userId, patientId: $patientId, appointmentInput: { title: $title, type: $type, date: $date, location: $location, description: $description, inProgress: $inProgress, note: $note }) {\\n              _id\\n              title\\n              type\\n              date\\n              location\\n              description\\n              patient\\n              {\\n                name\\n                dob\\n                address\\n              }\\n              inProgress\\n              notes\\n              }\\n            }\\n          }\\n        \",\n        variables: {\n          userId: userId,\n          patientId: patientId,\n          title: title,\n          type: type,\n          date: date,\n          location: location,\n          description: description,\n          inProgress: inProgress,\n          note: note\n        }\n      };\n      const token = this.context.token;\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n        this.setState(prevState => {\n          const updatedPatients = [...prevState.patients];\n          updatedPatients.push({\n            _id: resData.data.createAppointment._id,\n            title: resData.data.createAppointment.title,\n            type: resData.data.createAppointment.type,\n            date: resData.data.createAppointment.date,\n            location: resData.data.createAppointment.location,\n            description: resData.data.createAppointment.description,\n            patient: resData.data.createAppointment.patient,\n            inProgress: resData.data.createAppointment.inProgress,\n            note: resData.data.createAppointment.note\n          });\n          return {\n            appointments: updatedAppointments\n          };\n        });\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.modalCancelHandler = () => {\n      this.setState({\n        creating: false,\n        updating: false,\n        selectedAppointment: null\n      });\n    };\n\n    this.modalConfirmUpdateHandler = event => {\n      if (this.context.user.role !== 'admin') {\n        console.log(\"Not the Admin! No edit permission!!\");\n      }\n\n      const userId = this.context.userId;\n      const appointmentId = this.state.selectedAppointment._id;\n      const patientId = this.context.selectedPatientId; // console.log(\"UpdateUserFormData:  \", event);\n\n      console.log(\"UpdateAppointmentFormData:  \", event.target.formGridTitle.value);\n      this.setState({\n        updating: false\n      });\n      let title = event.targetformGridTitle.value;\n      let type = event.targetformGridType.value;\n      let date = event.targetformGridDate.value;\n      let location = event.targetformGridLocation.value;\n      let description = event.targetformGridDescription.value;\n      let inProgress = event.targetformGridInProgress.value;\n      let note = event.targetformGridNote.value;\n\n      if (title.trim().length === 0 || type.trim().length === 0 || date.trim().length === 0 || location.trim().length === 0 || description.trim().length === 0 || inProgress.trim().length === 0 || note.trim().length === 0) {\n        console.log(\"\\n        blank data fields detected!!...\\n        name: \".concat(name, \"\\n        \"));\n        name = this.state.selectedPatient.name;\n        console.log(\"\\n        inputting previous data...\\n        name: \".concat(name, \"\\n        \")); // return;\n      }\n\n      const appointment = {\n        title,\n        type,\n        date,\n        location,\n        description,\n        inProgress,\n        note\n      };\n      console.log(\"updating appointment... \" + JSON.stringify(appointment));\n      const requestBody = {\n        query: \"\\n          mutation UpdateAppointment($userId: ID!, $patientId: ID, $title: String!, $type: String!, $date: String!, $location: String!, $description: String!, $inProgress: Boolean!, $note: String!) {\\n            updateAppointment(userId: $userId, patientId: $patientId, appointmentInput: { title: $title, type: $type, date: $date, location: $location, description: $description, inProgress: $inProgress, note: $note }) {\\n              _id\\n              title\\n              type\\n              date\\n              location\\n              description\\n              patient\\n              {\\n                name\\n                dob\\n                address\\n              }\\n              inProgress\\n              notes\\n              }\\n            }\\n          }\\n        \",\n        variables: {\n          userId: userId,\n          patientId: patientId,\n          userId: userId,\n          title: title,\n          type: type,\n          date: date,\n          location: location,\n          description: description,\n          inProgress: inProgress,\n          note: note\n        }\n      };\n      const token = this.context.token;\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n        const updatedAppointmentId = resData.data.updateAppointment._id;\n        const updatedAppointment = this.state.appointments.find(e => e._id === updatedAppointmentId);\n        const updatedAppointmentPos = this.state.appointments.indexOf(updatedAppointment);\n        const slicedArray = this.state.appointments.splice(updatedAppointmentPos, 1);\n        console.log(\"updatedAppointment:  \", JSON.stringify(updatedAppointment), \"  updatedPatientPos:  \", updatedAppointmentPos, \"  slicedArray:  \", slicedArray);\n        this.state.appointments.push({\n          _id: resData.data.updateAppointment._id,\n          title: resData.data.updateAppointment.title,\n          type: resData.data.updateAppointment.type,\n          date: resData.data.updateAppointment.date,\n          location: resData.data.updateAppointment.location,\n          description: resData.data.updateAppointment.description,\n          patient: resData.data.updateAppointment.patient,\n          inProgress: resData.data.updateAppointment.inProgress,\n          note: resData.data.updateAppointment.note\n        });\n        this.fetchAppointments();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.modalCancelHandler = () => {\n      this.setState({\n        creating: false,\n        updating: false,\n        selectedAppointment: null\n      });\n    };\n\n    this.showDetailHandler = appointmentId => {\n      this.setState(prevState => {\n        const selectedAppointment = prevState.appointments.find(e => e._id === appointmentId);\n        this.context.selectedAppointment = selectedAppointment;\n        console.log(\"selectedAppointment:  \", selectedAppointment);\n        return {\n          selecteAppointment: selectedAppointment\n        };\n      });\n    };\n\n    this.titleELRef = React.createRef();\n    this.typeELRef = React.createRef();\n    this.dateELRef = React.createRef();\n    this.locationELRef = React.createRef();\n    this.descriptionELRef = React.createRef();\n    this.patientELRef = React.createRef();\n    this.inProgressELRef = React.createRef();\n    this.noteELRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.fetchAppointments();\n  }\n\n  fetchPatients() {\n    console.log(\"'fetch appointments function' context object... \" + JSON.stringify(this.context));\n    const userId = this.context.userId;\n    this.setState({\n      isLoading: true\n    });\n    const requestBody = {\n      query: \"\\n          query appointments($userId: ID!) {\\n            appointments(userId: $userId) {\\n              _id\\n              title\\n              type\\n              date\\n              location\\n              description\\n              patient\\n              {\\n                name\\n                dob\\n                address\\n              }\\n              inProgress\\n              notes\\n            }\\n          }\\n        \",\n      variables: {\n        userId: userId\n      }\n    };\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    }).then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n\n      return res.json();\n    }).then(resData => {\n      const appointments = resData.data.appointments;\n      console.log(appointments);\n\n      if (this.isActive) {\n        this.setState({\n          appointments: appointments,\n          isLoading: false\n        });\n      }\n    }).catch(err => {\n      console.log(err);\n\n      if (this.isActive) {\n        this.setState({\n          isLoading: false\n        });\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    this.isActive = false;\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 385\n      },\n      __self: this\n    }, this.state.creating && React.createElement(CreateAppointmentForm, {\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmHandler,\n      onSubmit: this.modalConfirmHandler,\n      confirmText: \"Confirm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 388\n      },\n      __self: this\n    }), this.state.updating && React.createElement(UpdateAppointmentForm, {\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmUpdateHandler,\n      confirmText: \"Confirm\",\n      appointment: this.context.selectedAppointment,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 398\n      },\n      __self: this\n    }), this.state.isLoading === false && React.createElement(AppointmentDetail, {\n      authUserId: this.context.userId,\n      appointment: this.state.selectedAppointment,\n      onEdit: this.startUpdateAppointmentHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 408\n      },\n      __self: this\n    }), this.state.isLoading === false && React.createElement(PatientDetail, {\n      authUserId: this.context.userId,\n      patient: this.context.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 414\n      },\n      __self: this\n    }), this.context.token && React.createElement(\"div\", {\n      className: \"users-control\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 419\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 420\n      },\n      __self: this\n    }, \"Add New Appointment\"), React.createElement(\"button\", {\n      className: \"btn\",\n      onClick: this.startCreateAppointmentHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 421\n      },\n      __self: this\n    }, \"+\")), this.state.isLoading ? React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 427\n      },\n      __self: this\n    }) : React.createElement(AppointmentList, {\n      appointments: this.state.appointments,\n      authUserId: this.context.userId,\n      onViewDetail: this.showDetailHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 429\n      },\n      __self: this\n    }));\n  }\n\n}\n\nAppointmentsPage.contextType = AuthContext;\nexport default AppointmentsPage;","map":{"version":3,"sources":["/Users/pedrojacob/Downloads/AMR/websites/office_records/ENT_EMR/frontend/src/pages/Appointments.js"],"names":["React","Component","AppointmentList","AppointmentDetail","Spinner","AuthContext","AppointmentsPage","constructor","props","state","creating","updating","appointments","isLoading","selectedAppointment","isActive","startCreateAppointmentHandler","setState","console","log","startUpdateAppointmentHandler","modalConfirmHandler","event","userId","context","title","targetformGridTitle","value","type","targetformGridType","date","targetformGridDate","location","targetformGridLocation","description","targetformGridDescription","inProgress","targetformGridInProgress","note","targetformGridNote","trim","length","appointment","JSON","stringify","requestBody","query","variables","patientId","token","fetch","method","body","headers","Authorization","then","res","status","Error","json","resData","prevState","updatedPatients","patients","push","_id","data","createAppointment","patient","updatedAppointments","catch","err","modalCancelHandler","modalConfirmUpdateHandler","user","role","appointmentId","selectedPatientId","target","formGridTitle","name","selectedPatient","updatedAppointmentId","updateAppointment","updatedAppointment","find","e","updatedAppointmentPos","indexOf","slicedArray","splice","fetchAppointments","showDetailHandler","selecteAppointment","titleELRef","createRef","typeELRef","dateELRef","locationELRef","descriptionELRef","patientELRef","inProgressELRef","noteELRef","componentDidMount","fetchPatients","componentWillUnmount","render","contextType"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n// import Form from 'react-bootstrap/Form';\n// import Button from 'react-bootstrap/Button';\n\n// import Modal from '../components/Modal/Modal';\n// import Backdrop from '../components/Backdrop/Backdrop';\nimport AppointmentList from '../components/Appointments/AppointmentList/AppointmentList';\nimport AppointmentDetail from '../components/Appointments/AppointmentDetail';\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\n\n// import CreateAppointmentForm from '../components/Forms/CreateAppointmentForm';\n// import UpdateAppointmentForm from '../components/Forms/UpdateAppointmentForm';\nimport './Users.css';\n\nclass AppointmentsPage extends Component {\n  state = {\n    creating: false,\n    updating: false,\n    appointments: [],\n    isLoading: false,\n    selectedAppointment: null\n  };\n  isActive = true;\n\n  static contextType = AuthContext;\n\n  constructor(props) {\n    super(props);\n    this.titleELRef = React.createRef();\n    this.typeELRef = React.createRef();\n    this.dateELRef = React.createRef();\n    this.locationELRef = React.createRef();\n    this.descriptionELRef = React.createRef();\n    this.patientELRef = React.createRef();\n    this.inProgressELRef = React.createRef();\n    this.noteELRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.fetchAppointments();\n  }\n\n\n  startCreateAppointmentHandler = () => {\n    this.setState({ creating: true });\n    console.log(\"CreateAppointmentForm...\");\n  };\n  startUpdateAppointmentHandler = () => {\n    this.setState({ updating: true });\n    console.log(\"UpdateAppointmentForm...\");\n  };\n\n  modalConfirmHandler = (event) => {\n\n    // console.log(\"CreatePatientFormData:  \", event.target.formGridTitle.value);\n\n    this.setState({ creating: false });\n    const userId = this.context.userId;\n\n    const title = event.targetformGridTitle.value;\n    const type = event.targetformGridType.value;\n    const date = event.targetformGridDate.value;\n    const location = event.targetformGridLocation.value;\n    const description = event.targetformGridDescription.value;\n    const inProgress = event.targetformGridInProgress.value;\n    const note = event.targetformGridNote.value;\n    if (\n      title.trim().length === 0 ||\n      type.trim().length === 0 ||\n      date.trim().length === 0 ||\n      location.trim().length === 0 ||\n      description.trim().length === 0 ||\n      inProgress.trim().length === 0 ||\n      note.trim().length === 0\n    ) {\n      console.log(\"blank fields detected!!!...Please try again...\");\n      return;\n    }\n\n    const appointment = { title, type, date, location, description, inProgress, note };\n    console.log(\"creating appointment... \" + JSON.stringify(appointment));\n\n    const requestBody = {\n      query: `\n          mutation CreateAppointment($userId: ID!, $patientId: ID, $title: String!, $type: String!, $date: String!, $location: String!, $description: String!, $inProgress: Boolean!, $note: String!) {\n            createAppointment(userId: $userId, patientId: $patientId, appointmentInput: { title: $title, type: $type, date: $date, location: $location, description: $description, inProgress: $inProgress, note: $note }) {\n              _id\n              title\n              type\n              date\n              location\n              description\n              patient\n              {\n                name\n                dob\n                address\n              }\n              inProgress\n              notes\n              }\n            }\n          }\n        `,\n        variables: {\n          userId: userId,\n          patientId: patientId,\n          title: title,\n          type: type,\n          date: date,\n          location: location,\n          description: description,\n          inProgress: inProgress,\n          note: note\n        }\n    };\n\n    const token = this.context.token;\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n\n        this.setState(prevState => {\n          const updatedPatients = [...prevState.patients];\n          updatedPatients.push(\n            {\n            _id: resData.data.createAppointment._id,\n            title: resData.data.createAppointment.title,\n            type: resData.data.createAppointment.type,\n            date: resData.data.createAppointment.date,\n            location: resData.data.createAppointment.location,\n            description: resData.data.createAppointment.description,\n            patient: resData.data.createAppointment.patient,\n            inProgress: resData.data.createAppointment.inProgress,\n            note: resData.data.createAppointment.note\n          }\n        );\n\n          return { appointments: updatedAppointments };\n        });\n\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  modalCancelHandler = () => {\n    this.setState({ creating: false, updating: false, selectedAppointment: null });\n  };\n\n\n  modalConfirmUpdateHandler = (event) => {\n\n    if(this.context.user.role !== 'admin') {\n      console.log(\"Not the Admin! No edit permission!!\");\n\n    }\n\n    const userId = this.context.userId;\n    const appointmentId = this.state.selectedAppointment._id;\n    const patientId = this.context.selectedPatientId;\n\n    // console.log(\"UpdateUserFormData:  \", event);\n    console.log(\"UpdateAppointmentFormData:  \", event.target.formGridTitle.value);\n\n\n    this.setState({ updating: false });\n    let title = event.targetformGridTitle.value;\n    let type = event.targetformGridType.value;\n    let date = event.targetformGridDate.value;\n    let location = event.targetformGridLocation.value;\n    let description = event.targetformGridDescription.value;\n    let inProgress = event.targetformGridInProgress.value;\n    let note = event.targetformGridNote.value;\n\n\n    if (\n      title.trim().length === 0 ||\n      type.trim().length === 0 ||\n      date.trim().length === 0 ||\n      location.trim().length === 0 ||\n      description.trim().length === 0 ||\n      inProgress.trim().length === 0 ||\n      note.trim().length === 0\n    ) {\n      console.log(`\n        blank data fields detected!!...\n        name: ${name}\n        `);\n\n      name = this.state.selectedPatient.name;\n\n      console.log(`\n        inputting previous data...\n        name: ${name}\n        `);\n\n      // return;\n    }\n\n    const appointment = { title, type, date, location, description, inProgress, note };\n    console.log(\"updating appointment... \" + JSON.stringify(appointment));\n\n    const requestBody = {\n      query: `\n          mutation UpdateAppointment($userId: ID!, $patientId: ID, $title: String!, $type: String!, $date: String!, $location: String!, $description: String!, $inProgress: Boolean!, $note: String!) {\n            updateAppointment(userId: $userId, patientId: $patientId, appointmentInput: { title: $title, type: $type, date: $date, location: $location, description: $description, inProgress: $inProgress, note: $note }) {\n              _id\n              title\n              type\n              date\n              location\n              description\n              patient\n              {\n                name\n                dob\n                address\n              }\n              inProgress\n              notes\n              }\n            }\n          }\n        `,\n        variables: {\n          userId: userId,\n          patientId: patientId,\n          userId: userId,\n          title: title,\n          type: type,\n          date: date,\n          location: location,\n          description: description,\n          inProgress: inProgress,\n          note: note\n        }\n    };\n\n    const token = this.context.token;\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n\n        const updatedAppointmentId = resData.data.updateAppointment._id;\n        const updatedAppointment = this.state.appointments.find(e => e._id === updatedAppointmentId);\n        const updatedAppointmentPos = this.state.appointments.indexOf(updatedAppointment);\n        const slicedArray = this.state.appointments.splice(updatedAppointmentPos, 1);\n        console.log(\"updatedAppointment:  \", JSON.stringify(updatedAppointment),\"  updatedPatientPos:  \", updatedAppointmentPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.appointments.push(\n          {\n          _id: resData.data.updateAppointment._id,\n          title: resData.data.updateAppointment.title,\n          type: resData.data.updateAppointment.type,\n          date: resData.data.updateAppointment.date,\n          location: resData.data.updateAppointment.location,\n          description: resData.data.updateAppointment.description,\n          patient: resData.data.updateAppointment.patient,\n          inProgress: resData.data.updateAppointment.inProgress,\n          note: resData.data.updateAppointment.note\n        });\n        this.fetchAppointments();\n\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  modalCancelHandler = () => {\n    this.setState({ creating: false, updating: false, selectedAppointment: null });\n  };\n\n\n  fetchPatients() {\n    console.log(\"'fetch appointments function' context object... \" + JSON.stringify(this.context));\n    const userId = this.context.userId;\n\n    this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n          query appointments($userId: ID!) {\n            appointments(userId: $userId) {\n              _id\n              title\n              type\n              date\n              location\n              description\n              patient\n              {\n                name\n                dob\n                address\n              }\n              inProgress\n              notes\n            }\n          }\n        `,\n        variables: {\n          userId: userId\n        }\n    };\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const appointments = resData.data.appointments;\n        console.log(appointments);\n\n        if (this.isActive) {\n          this.setState({ appointments: appointments, isLoading: false });\n        }\n      })\n      .catch(err => {\n        console.log(err);\n        if (this.isActive) {\n          this.setState({ isLoading: false });\n        }\n      });\n  }\n\n\n  showDetailHandler = appointmentId => {\n\n    this.setState(prevState => {\n      const selectedAppointment = prevState.appointments.find(e => e._id === appointmentId);\n      this.context.selectedAppointment = selectedAppointment;\n      console.log(\"selectedAppointment:  \", selectedAppointment);\n      return { selecteAppointment: selectedAppointment };\n    });\n  };\n\n\n  componentWillUnmount() {\n    this.isActive = false;\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        {\n          this.state.creating && (\n          <CreateAppointmentForm\n          canCancel\n            canConfirm\n            onCancel={this.modalCancelHandler}\n            onConfirm={this.modalConfirmHandler}\n            onSubmit={this.modalConfirmHandler}\n            confirmText=\"Confirm\"\n          />\n        )}\n        {this.state.updating && (\n          <UpdateAppointmentForm\n          canCancel\n            canConfirm\n            onCancel={this.modalCancelHandler}\n            onConfirm={this.modalConfirmUpdateHandler}\n            confirmText=\"Confirm\"\n            appointment={this.context.selectedAppointment}\n          />\n        )}\n        {this.state.isLoading === false &&\n          (<AppointmentDetail\n            authUserId={this.context.userId}\n            appointment={this.state.selectedAppointment}\n            onEdit={this.startUpdateAppointmentHandler}\n        />)}\n        {this.state.isLoading === false &&\n          (<PatientDetail\n            authUserId={this.context.userId}\n            patient={this.context.selectedPatient}\n        />)}\n        {this.context.token &&\n          (<div className=\"users-control\">\n            <p>Add New Appointment</p>\n            <button className=\"btn\" onClick={this.startCreateAppointmentHandler}>\n              +\n            </button>\n          </div>\n        )}\n        {this.state.isLoading ? (\n          <Spinner />\n        ) : (\n          <AppointmentList\n            appointments={this.state.appointments}\n            authUserId={this.context.userId}\n            onViewDetail={this.showDetailHandler}\n          />\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default AppointmentsPage;\n"]},"metadata":{},"sourceType":"module"}