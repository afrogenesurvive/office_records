{"ast":null,"code":"var _jsxFileName = \"/Users/pedrojacob/Downloads/AMR/websites/office_records/ENT_EMR/frontend/src/pages/Users.js\";\nimport React, { Component } from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col'; // import Form from 'react-bootstrap/Form';\n\nimport Button from 'react-bootstrap/Button';\nimport Accordion from 'react-bootstrap/Accordion'; // import Modal from '../components/Modal/Modal';\n// import Backdrop from '../components/Backdrop/Backdrop';\n\nimport UserList from '../components/Users/UserList/UserList';\nimport SearchUserList from '../components/Users/UserList/SearchUserList';\nimport UserDetail from '../components/Users/UserDetail';\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\nimport CreateUserForm from '../components/Forms/CreateUserForm';\nimport UpdateUserForm from '../components/Forms/UpdateUserForm';\nimport UpdateUserAttendanceForm from '../components/Forms/UpdateUserAttendanceForm';\nimport UpdateUserAttatchmentForm from '../components/Forms/UpdateUserAttatchmentForm';\nimport UpdateUserLeaveForm from '../components/Forms/UpdateUserLeaveForm';\nimport SearchUserForm from '../components/Forms/SearchUserForm';\nimport './Users.css';\n\nclass UsersPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      creating: false,\n      updating: false,\n      deleting: false,\n      searching: false,\n      users: [],\n      searchUsers: [],\n      isLoading: false,\n      selectedUser: null,\n      userUpdateField: null\n    };\n    this.isActive = true;\n\n    this.startCreateUserHandler = () => {\n      this.setState({\n        creating: true\n      });\n      console.log(\"CreateUserForm...\");\n    };\n\n    this.startUpdateUserHandler = () => {\n      this.setState({\n        updating: true\n      });\n      console.log(\"UpdateUserForm...\");\n    };\n\n    this.startSearchUserHandler = () => {\n      this.setState({\n        searching: true\n      });\n      console.log(\"SearchUserForm...\");\n    };\n\n    this.modalConfirmHandler = event => {\n      console.log(\"CreateUserFormData:  \", event.target.formGridEmail.value);\n      this.setState({\n        creating: false\n      });\n      const email = event.target.formGridEmail.value;\n      const password = event.target.formGridPassword.value;\n      const name = event.target.formGridName.value;\n      const role = event.target.formGridRole.value;\n      const employmentDate = event.target.formGridEmploymentDate.value;\n      const terminationDate = event.target.formGridTerminationDate.value;\n\n      if (email.trim().length === 0 || password.trim().length === 0 || name.trim().length === 0 || role.trim().length === 0 || employmentDate.trim().length === 0 || terminationDate.trim().length === 0) {\n        console.log(\"blank fields detected!!!...Please try again...\");\n        return;\n      }\n\n      const token = this.context.token;\n      const userId = this.context.userId;\n      const user = {\n        email,\n        password,\n        name,\n        role,\n        employmentDate,\n        terminationDate\n      };\n      console.log(\"\\n      creating user...\\n      userId: \".concat(userId, \"\\n      email: \").concat(email, \",\\n      password: \").concat(password, \",\\n      name: \").concat(name, \",\\n      role: \").concat(role, \",\\n      employmentDate: \").concat(employmentDate, \",\\n      terminationDate: \").concat(terminationDate, \"\\n      \"));\n      const requestBody = {\n        query: \"\\n          mutation {\\n            createUser(userInput: {email:\\\"\".concat(email, \"\\\",password:\\\"\").concat(password, \"\\\",name:\\\"\").concat(name, \"\\\",role:\\\"\").concat(role, \"\\\",employmentDate:\\\"\").concat(employmentDate, \"\\\",terminationDate:\\\"\").concat(terminationDate, \"\\\"}) {\\n              _id\\n              name\\n              email\\n              role\\n              employmentDate\\n              terminationDate\\n              attendance{\\n                date\\n                status\\n                description}\\n                attachments{\\n                  name\\n                  format\\n                  path}\\n              leave{\\n                type\\n                startDate\\n                endDate}\\n            }\\n          }\\n        \")\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"create user response data... \" + JSON.stringify(resData.data.createUser));\n        this.setState(prevState => {\n          const updatedUsers = [...prevState.users];\n          updatedUsers.push(resData.data.createUser);\n          return {\n            users: updatedUsers\n          };\n        });\n        this.context.users = this.state.users;\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.modalConfirmUpdateHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedUserId = this.context.selectedUser._id;\n\n      if (userId !== selectedUserId && this.context.user.role !== 'admin') {\n        console.log(\"Not the creator or Admin! No edit permission!!\");\n        selectedUserId = null;\n      }\n\n      console.log(\"UpdateUserFormData:  \", event.target.formGridEmail.value);\n      this.setState({\n        updating: false\n      });\n      let email = event.target.formGridEmail.value;\n      let password = event.target.formGridPassword.value;\n      let name = event.target.formGridName.value;\n      let role = event.target.formGridRole.value;\n      let employmentDate = event.target.formGridEmploymentDate.value;\n      let terminationDate = event.target.formGridTerminationDate.value;\n\n      if (email.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        email = this.context.selectedUser.email; // return;\n      }\n\n      if (password.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        password = this.context.selectedUser.password;\n      }\n\n      if (name.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        name = this.context.selectedUser.name;\n      }\n\n      if (role.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        role = this.context.selectedUser.role;\n      }\n\n      if (employmentDate.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        employmentDate = this.context.selectedUser.employmentDate;\n      }\n\n      if (terminationDate.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        terminationDate = this.context.selectedUser.terminationDate;\n      }\n\n      const user = {\n        email,\n        password,\n        name,\n        role,\n        employmentDate,\n        terminationDate\n      };\n      console.log(\"\\n      updating user...\\n      userId: \".concat(userId, \",\\n      email: \").concat(email, \",\\n      password: \").concat(password, \",\\n      name: \").concat(name, \",\\n      role: \").concat(role, \",\\n      employmentDate: \").concat(employmentDate, \",\\n      terminationDate: \").concat(terminationDate, \"\\n      \"));\n      const requestBody = {\n        query: \"\\n          mutation { updateUser(userId:\\\"\".concat(userId, \"\\\", selectedUserId:\\\"\").concat(selectedUserId, \"\\\", userInput:{email:\\\"\").concat(email, \"\\\", password:\\\"\").concat(password, \"\\\", name:\\\"\").concat(name, \"\\\", role:\\\"\").concat(role, \"\\\", employmentDate:\\\"\").concat(employmentDate, \"\\\",terminationDate:\\\"\").concat(terminationDate, \"\\\"}) {\\n            _id\\n            name\\n            email\\n            role\\n            employmentDate\\n            terminationDate\\n            attendance{\\n              date\\n              status\\n              description}\\n              attachments{\\n                name\\n                format\\n                path}\\n            leave{\\n              type\\n              startDate\\n              endDate}\\n            }\\n          }\\n        \")\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data.updateUser));\n        const updatedUserId = resData.data.updateUser._id;\n        const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n        const updatedUserPos = this.state.users.indexOf(updatedUser);\n        const slicedArray = this.state.users.splice(updatedUserPos, 1);\n        console.log(\"updatedUser:  \", JSON.stringify(updatedUser), \"  updatedUserPos:  \", updatedUserPos, \"  slicedArray:  \", slicedArray);\n        this.state.users.push(updatedUser);\n        this.context.users = this.state.users;\n        this.fetchUsers();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.updateUserAttendanceHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedUserId = this.context.selectedUser._id;\n\n      if (userId !== selectedUserId && this.context.user.role !== 'admin') {\n        console.log(\"Not the creator or Admin! No edit permission!!\");\n        selectedUserId = null;\n      }\n\n      console.log(\"UpdateUserAttendanceFormData:  \", event.target.formGridAttendanceDate.value);\n      this.setState({\n        updating: false,\n        userUpdateField: null\n      });\n      let attendanceDate = event.target.formGridAttendanceDate.value;\n      let attendanceStatus = event.target.formGridAttendanceStatus.value;\n      let attendanceDescription = event.target.formGridAttendanceDescription.value;\n\n      if (attendanceDate.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        attendanceDate = this.context.selectedUser.attendanceDate;\n      }\n\n      if (attendanceStatus.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        attendanceStatus = this.context.selectedUser.attendanceStatus;\n      }\n\n      if (attendanceDescription.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        attendanceDescription = this.context.selectedUser.attendanceDescription;\n      }\n\n      const userAttendance = {\n        attendanceDate,\n        attendanceStatus,\n        attendanceDescription\n      };\n      console.log(\"\\n      adding user attendance item...\\n      userId: \".concat(userId, \",\\n      selectedUserId: \").concat(selectedUserId, \"\\n      attendanceDate: \").concat(attendanceDate, \",\\n      attendanceStatus: \").concat(attendanceStatus, \",\\n      attendanceDescription: \").concat(attendanceDescription, \"\\n      \"));\n      const requestBody = {\n        query: \"\\n          mutation {updateUserAttendance(userId:\\\"\".concat(userId, \"\\\", selectedUserId:\\\"\").concat(selectedUserId, \"\\\",userInput:{attendanceDate:\\\"\").concat(attendanceDate, \"\\\",attendanceStatus:\\\"\").concat(attendanceStatus, \"\\\",attendanceDescription:\\\"\").concat(attendanceDescription, \"\\\"}){_id,name,email,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description}}}\\n        \")\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data.updateUserAttendance));\n        const updatedUserId = resData.data.updateUserAttendance._id;\n        const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n        const updatedUserPos = this.state.users.indexOf(updatedUser);\n        const slicedArray = this.state.users.splice(updatedUserPos, 1);\n        console.log(\"updatedUser:  \", JSON.stringify(updatedUser), \"  updatedUserPos:  \", updatedUserPos, \"  slicedArray:  \", slicedArray);\n        this.state.users.push(updatedUser);\n        this.context.users = this.state.users; // this.fetchUsers();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.updateUserAttachmentHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedUserId = this.context.selectedUser._id;\n\n      if (userId !== selectedUserId && this.context.user.role !== 'admin') {\n        console.log(\"Not the creator or Admin! No edit permission!!\");\n        selectedUserId = null;\n      }\n\n      console.log(\"UpdateUserAttachmentFormData:  \", event.target.formGridAttachmentName.value);\n      this.setState({\n        updating: false,\n        userUpdateField: null\n      });\n      let attachmentName = event.target.formGridAttachmentName.value;\n      let attachmentFormat = event.target.formGridAttachmentFormat.value;\n\n      if (attendanceDate.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        attendanceDate = this.context.selectedUser.attendanceDate;\n      }\n\n      if (attendanceStatus.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        attendanceStatus = this.context.selectedUser.attendanceStatus;\n      }\n\n      if (attendanceDescription.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        attendanceDescription = this.context.selectedUser.attendanceDescription;\n      }\n\n      const userAttendance = {\n        attendanceDate,\n        attendanceStatus,\n        attendanceDescription\n      };\n      console.log(\"\\n      adding user attendance item...\\n      userId: \".concat(userId, \",\\n      selectedUserId: \").concat(selectedUserId, \"\\n      attendanceDate: \").concat(attendanceDate, \",\\n      attendanceStatus: \").concat(attendanceStatus, \",\\n      attendanceDescription: \").concat(attendanceDescription, \"\\n      \"));\n      const requestBody = {\n        query: \"\\n          mutation {updateUserAttendance(userId:\\\"\".concat(userId, \"\\\", selectedUserId:\\\"\").concat(selectedUserId, \"\\\",userInput:{attendanceDate:\\\"\").concat(attendanceDate, \"\\\",attendanceStatus:\\\"\").concat(attendanceStatus, \"\\\",attendanceDescription:\\\"\").concat(attendanceDescription, \"\\\"}){_id,name,email,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description}}}\\n        \")\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data.updateUserAttendance));\n        const updatedUserId = resData.data.updateUserAttendance._id;\n        const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n        const updatedUserPos = this.state.users.indexOf(updatedUser);\n        const slicedArray = this.state.users.splice(updatedUserPos, 1);\n        console.log(\"updatedUser:  \", JSON.stringify(updatedUser), \"  updatedUserPos:  \", updatedUserPos, \"  slicedArray:  \", slicedArray);\n        this.state.users.push(updatedUser);\n        this.context.users = this.state.users; // this.fetchUsers();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.updateUserLeaveHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedUserId = this.context.selectedUser._id;\n\n      if (userId !== selectedUserId && this.context.user.role !== 'admin') {\n        console.log(\"Not the creator or Admin! No edit permission!!\");\n        selectedUserId = null;\n      }\n\n      console.log(\"UpdateUserLeaveFormData:  \", event.target.formGridLeaveType.value);\n      this.setState({\n        updating: false,\n        userUpdateField: null\n      });\n      let leaveType = event.target.formGridLeaveType.value;\n      let leaveStartDate = event.target.formGridLeaveStartDate.value;\n      let leaveEndDate = event.target.formGridLeaveEndDate.value;\n\n      if (leaveType.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        leaveType = this.context.selectedUser.leaveType;\n      }\n\n      if (leaveStartDate.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        leaveStartDate = this.context.selectedUser.leaveStartDate;\n      }\n\n      if (leaveEndDate.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        leaveEndDate = this.context.selectedUser.leaveEndDate;\n      }\n\n      const userLeave = {\n        leaveType,\n        leaveStartDate,\n        leaveEndDate\n      };\n      console.log(\"\\n      adding user attendance item...\\n      userId: \".concat(userId, \",\\n      selectedUserId: \").concat(selectedUserId, \"\\n      leave: {\\n        type: \").concat(leaveType, \",\\n        startDate: \").concat(leaveStartDate, \",\\n        endDate: \").concat(leaveEndDate, \"\\n      }\\n      \"));\n      const requestBody = {\n        query: \"\\n          mutation {updateUserLeave(userId:\\\"\".concat(userId, \"\\\", selectedUserId:\\\"\").concat(selectedUserId, \"\\\",userInput:{leaveType:\\\"\").concat(leaveType, \"\\\",leaveStartDate:\\\"\").concat(leaveStartDate, \"\\\",leaveEndDate:\\\"\").concat(leaveEndDate, \"\\\"}){_id,name,email,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,startDate,endDate}}}\\n        \")\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedUserId = resData.data.updateUserLeave._id;\n        const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n        const updatedUserPos = this.state.users.indexOf(updatedUser);\n        const slicedArray = this.state.users.splice(updatedUserPos, 1);\n        console.log(\"updatedUser:  \", JSON.stringify(updatedUser), \"  updatedUserPos:  \", updatedUserPos, \"  slicedArray:  \", slicedArray);\n        this.state.users.push(updatedUser);\n        this.context.users = this.state.users; // this.fetchUsers();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.modalConfirmSearchHandler = event => {\n      console.log(\"SearchUserForm:  \");\n      let userId = this.context.userId;\n      console.log(\"SearchUserFormData:  \", event.target.formBasicField.value);\n      this.setState({\n        searching: false\n      });\n      let field = event.target.formBasicField.value;\n      let query = event.target.formBasicQuery.value;\n\n      if (field.trim().length === 0 || query.trim().length === 0) {\n        console.log(\"blank fields detected!!!...Please try again...\");\n        return;\n      }\n\n      const search = {\n        field,\n        query\n      };\n      console.log(\"Searching for User:  \", JSON.stringify(search));\n      const requestBody = {\n        query: \"\\n          query getUserField($userId: ID!, $field: String!, $query: String!)\\n          {getUserField(userId: $userId, field: $field, query: $query ){\\n            _id\\n            name\\n            email\\n            role\\n            employmentDate\\n            terminationDate\\n            attachments{\\n              name\\n              format\\n              path\\n            }\\n            attendance{\\n              date\\n              status\\n              description\\n            }\\n            leave{\\n              type\\n              startDate\\n              endDate\\n            }\\n          }\\n      }\\n        \",\n        variables: {\n          userId: userId,\n          field: field,\n          query: query\n        }\n      };\n      const token = this.context.token;\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n        const searchUsers = resData.data.getUserField;\n        this.setState({\n          searchUsers: searchUsers\n        });\n        console.log(\"state.searchUsers:  \", this.state.searchUsers); // this.fetchUsers();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.modalCancelHandler = () => {\n      this.setState({\n        creating: false,\n        updating: false,\n        deleting: false,\n        searching: false\n      });\n    };\n\n    this.modalDeleteHandler = () => {\n      console.log(\"deleting user...selectedUser:  \", this.context.selectedUser);\n      const selectedUserId = this.context.selectedUser._id;\n\n      if (this.context.user.role !== 'admin') {\n        console.log(\"Not the Admin! No edit permission!!\");\n      }\n\n      this.setState({\n        deleting: true\n      });\n      const requestBody = {\n        query: \"\\n        mutation DeleteUser($userId: ID!, $selectedUserId: ID!) {\\n          deleteUser(userId: $userId, selectedUserId: $selectedUserId) {\\n            _id\\n            email\\n            password\\n            name\\n            role\\n          }\\n        }\\n      \",\n        variables: {\n          userId: this.context.userId,\n          selectedUserId: selectedUserId\n        }\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + this.context.token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedUser = resData.data.deleteUser;\n        console.log(deletedUser);\n        let deletedUserId = deletedUser._id;\n        deletedUser = this.state.users.find(e => e._id === deletedUserId);\n        const deletedUserPos = this.state.users.indexOf(deletedUser);\n        const slicedArray = this.state.users.splice(deletedUserPos, 1);\n        console.log(\"deletedUser:  \", JSON.stringify(deletedUser), \"  deletedUserPos:  \", deletedUserPos, \"  slicedArray:  \", slicedArray);\n        this.setState({\n          deleting: false,\n          selectedUser: null\n        });\n        this.context.selectedUser = null;\n        this.fetchUsers();\n      }).catch(err => {\n        console.log(err);\n\n        if (this.isActive) {\n          this.setState({\n            deleting: false\n          });\n        }\n      });\n    };\n\n    this.showDetailHandler = userId => {\n      this.setState(prevState => {\n        const selectedUser = prevState.users.find(e => e._id === userId);\n        this.context.selectedUser = selectedUser;\n        this.setState({\n          selectedUser: selectedUser\n        });\n        console.log(\"User selected  :  \", selectedUser);\n        return {\n          selectedUser: selectedUser\n        };\n      });\n    };\n\n    this.emailElRef = React.createRef();\n    this.passwordElRef = React.createRef();\n    this.nameElRef = React.createRef();\n    this.roleElRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.fetchUsers();\n  }\n\n  fetchUsers() {\n    console.log(\"'fetch users function' context object... \" + JSON.stringify(this.context));\n    const userId = this.context.userId;\n    this.setState({\n      isLoading: true\n    });\n    const requestBody = {\n      query: \"\\n          query users($userId: ID!) {\\n            users(userId: $userId) {\\n              _id\\n              name\\n              email\\n              role\\n              employmentDate\\n              terminationDate\\n              attachments{\\n                name\\n                format\\n                path\\n              }\\n              attendance{\\n                date\\n                status\\n                description\\n              }\\n              leave{\\n                type\\n                startDate\\n                endDate\\n              }\\n            }\\n          }\\n        \",\n      variables: {\n        userId: userId\n      }\n    };\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    }).then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n\n      return res.json();\n    }).then(resData => {\n      const users = resData.data.users;\n      console.log(users);\n\n      if (this.isActive) {\n        this.setState({\n          users: users,\n          isLoading: false\n        });\n      }\n\n      this.context.users = this.state.users;\n    }).catch(err => {\n      console.log(err);\n\n      if (this.isActive) {\n        this.setState({\n          isLoading: false\n        });\n      }\n    });\n  }\n\n  updateUserSpecial(event) {\n    console.log(\"special field to update:  \", event.target.value);\n    const field = event.target.value;\n    this.setState({\n      userUpdateField: field\n    });\n  }\n\n  componentWillUnmount() {\n    this.isActive = false;\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 789\n      },\n      __self: this\n    }, React.createElement(Accordion, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 791\n      },\n      __self: this\n    }, React.createElement(Container, {\n      className: \"containerUserDetail\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 793\n      },\n      __self: this\n    }, React.createElement(Row, {\n      className: \"createUserRowAdd\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 795\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 4,\n      className: \"createUserColAdd\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 796\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 797\n      },\n      __self: this\n    }, \"Staff Detail\")), React.createElement(Col, {\n      md: 6,\n      className: \"createUserColAdd\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 799\n      },\n      __self: this\n    }, React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: \"4\",\n      className: \"btn\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 800\n      },\n      __self: this\n    }, \"Details\"))), React.createElement(Accordion.Collapse, {\n      eventKey: \"4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 806\n      },\n      __self: this\n    }, React.createElement(Row, {\n      className: \"createUserRowForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 807\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 11,\n      className: \"createUserColForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 808\n      },\n      __self: this\n    }, this.state.isLoading === false && React.createElement(UserDetail, {\n      authUserId: this.context.userId,\n      AuthContext: this.context,\n      user: this.state.selectedUser,\n      onEdit: this.startUpdateUserHandler,\n      onDelete: this.modalDeleteHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 810\n      },\n      __self: this\n    }))))), React.createElement(Container, {\n      className: \"containerCreateUpdate\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 823\n      },\n      __self: this\n    }, React.createElement(Row, {\n      className: \"createUserRowAdd\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 825\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 4,\n      className: \"createUserColAdd\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 826\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 827\n      },\n      __self: this\n    }, \"Add New Staff\")), React.createElement(Col, {\n      md: 8,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 829\n      },\n      __self: this\n    }, this.context.token && React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: \"0\",\n      className: \"btn\",\n      onClick: this.startCreateUserHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 831\n      },\n      __self: this\n    }, \"Add\"))), React.createElement(Accordion.Collapse, {\n      eventKey: \"0\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 838\n      },\n      __self: this\n    }, React.createElement(Row, {\n      className: \"createUserRowForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 839\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 11,\n      className: \"createUserColForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 840\n      },\n      __self: this\n    }, this.state.creating && React.createElement(CreateUserForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmHandler,\n      onSubmit: this.modalConfirmHandler,\n      confirmText: \"Confirm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 842\n      },\n      __self: this\n    })))), React.createElement(Row, {\n      className: \"updateUserRowAdd\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 856\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 4,\n      className: \"updateUserCol\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 857\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 858\n      },\n      __self: this\n    }, \"Edit Selected Staff\")), React.createElement(Col, {\n      md: 4,\n      className: \"updateUserCol\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 860\n      },\n      __self: this\n    }, this.context.token && React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: \"1\",\n      className: \"btn\",\n      onClick: this.startUpdateUserHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 862\n      },\n      __self: this\n    }, \"Basic Info & Demographics\"))), React.createElement(Row, {\n      className: \"createUserRowAdd\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 871\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 3,\n      className: \"updateUserCol2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 872\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 873\n      },\n      __self: this\n    }, \"Edit Selected Staff\")), React.createElement(Col, {\n      md: 9,\n      className: \"updateUserCol2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 875\n      },\n      __self: this\n    }, this.context.token && React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: \"2\",\n      className: \"btn\",\n      value: \"attendance\",\n      onClick: this.updateUserSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 877\n      },\n      __self: this\n    }, \"Attendance\"), this.context.token && React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: \"2\",\n      className: \"btn\",\n      value: \"leave\",\n      onClick: this.updateUserSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 882\n      },\n      __self: this\n    }, \"Leave\"), this.context.token && React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: \"2\",\n      className: \"btn\",\n      value: \"attachments\",\n      onClick: this.updateUserSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 887\n      },\n      __self: this\n    }, \"Attachments\"))), React.createElement(Accordion.Collapse, {\n      eventKey: \"1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 894\n      },\n      __self: this\n    }, React.createElement(Row, {\n      className: \"updateUserRowForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 895\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 10,\n      className: \"updateUserColForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 896\n      },\n      __self: this\n    }, this.state.updating && React.createElement(UpdateUserForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmUpdateHandler,\n      confirmText: \"Confirm\",\n      user: this.context.selectedUser,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 898\n      },\n      __self: this\n    })))), React.createElement(Accordion.Collapse, {\n      eventKey: \"2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 912\n      },\n      __self: this\n    }, React.createElement(Row, {\n      className: \"updateUserRowForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 913\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 10,\n      className: \"updateUserColForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 914\n      },\n      __self: this\n    }, this.state.userUpdateField === 'attendance' && React.createElement(UpdateUserAttendanceForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updateUserAttendanceHandler,\n      confirmText: \"Confirm\",\n      user: this.state.selectedUser,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 916\n      },\n      __self: this\n    }), this.state.userUpdateField === 'leave' && React.createElement(UpdateUserLeaveForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updateUserLeaveHandler,\n      confirmText: \"Confirm\",\n      user: this.state.selectedUser,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 927\n      },\n      __self: this\n    }), this.state.userUpdateField === 'attachments' && React.createElement(UpdateUserAttachmentForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updateUserAttachmentHandler,\n      confirmText: \"Confirm\",\n      user: this.state.selectedUser,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 938\n      },\n      __self: this\n    }))))), React.createElement(Container, {\n      className: \"containerSearchuser\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 956\n      },\n      __self: this\n    }, React.createElement(Row, {\n      className: \"searchUserRowAdd\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 957\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 4,\n      className: \"searchUserColAdd\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 958\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 959\n      },\n      __self: this\n    }, \"Search for a User\")), React.createElement(Col, {\n      md: 8,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 961\n      },\n      __self: this\n    }, this.context.token && React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: \"3\",\n      className: \"btn\",\n      onClick: this.startSearchUserHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 963\n      },\n      __self: this\n    }, \"Search\"))), React.createElement(Accordion.Collapse, {\n      eventKey: \"3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 970\n      },\n      __self: this\n    }, React.createElement(Row, {\n      className: \"searchUserRowForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 971\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 10,\n      className: \"searchUserColForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 972\n      },\n      __self: this\n    }, this.state.searching === true && React.createElement(SearchUserForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmSearchHandler,\n      confirmText: \"Search\",\n      user: this.context.selectedUser,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 975\n      },\n      __self: this\n    })), React.createElement(Col, {\n      md: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 986\n      },\n      __self: this\n    })))), React.createElement(Accordion.Collapse, {\n      eventKey: \"3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 993\n      },\n      __self: this\n    }, React.createElement(Container, {\n      className: \"containerSearchuser\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 994\n      },\n      __self: this\n    }, React.createElement(Row, {\n      className: \"searchListRow\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 995\n      },\n      __self: this\n    }, this.state.searchUsers !== [] && React.createElement(SearchUserList, {\n      searchUsers: this.state.searchUsers,\n      authUserId: this.context.userId,\n      onCancel: this.modalCancelHandler,\n      onViewDetail: this.showDetailHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 998\n      },\n      __self: this\n    })))), React.createElement(Container, {\n      className: \"containerSearchuser\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1009\n      },\n      __self: this\n    }, React.createElement(Row, {\n      className: \"searchListRow\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1010\n      },\n      __self: this\n    }, this.state.isLoading ? React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1013\n      },\n      __self: this\n    }) : React.createElement(UserList, {\n      users: this.state.users,\n      authUserId: this.context.userId,\n      onViewDetail: this.showDetailHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1015\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nUsersPage.contextType = AuthContext;\nexport default UsersPage;","map":{"version":3,"sources":["/Users/pedrojacob/Downloads/AMR/websites/office_records/ENT_EMR/frontend/src/pages/Users.js"],"names":["React","Component","Container","Row","Col","Button","Accordion","UserList","SearchUserList","UserDetail","Spinner","AuthContext","CreateUserForm","UpdateUserForm","UpdateUserAttendanceForm","UpdateUserAttatchmentForm","UpdateUserLeaveForm","SearchUserForm","UsersPage","constructor","props","state","creating","updating","deleting","searching","users","searchUsers","isLoading","selectedUser","userUpdateField","isActive","startCreateUserHandler","setState","console","log","startUpdateUserHandler","startSearchUserHandler","modalConfirmHandler","event","target","formGridEmail","value","email","password","formGridPassword","name","formGridName","role","formGridRole","employmentDate","formGridEmploymentDate","terminationDate","formGridTerminationDate","trim","length","token","context","userId","user","requestBody","query","fetch","method","body","JSON","stringify","headers","Authorization","then","res","status","Error","json","resData","data","createUser","prevState","updatedUsers","push","catch","err","modalConfirmUpdateHandler","selectedUserId","_id","updateUser","updatedUserId","updatedUser","find","e","updatedUserPos","indexOf","slicedArray","splice","fetchUsers","updateUserAttendanceHandler","formGridAttendanceDate","attendanceDate","attendanceStatus","formGridAttendanceStatus","attendanceDescription","formGridAttendanceDescription","userAttendance","updateUserAttendance","updateUserAttachmentHandler","formGridAttachmentName","attachmentName","attachmentFormat","formGridAttachmentFormat","updateUserLeaveHandler","formGridLeaveType","leaveType","leaveStartDate","formGridLeaveStartDate","leaveEndDate","formGridLeaveEndDate","userLeave","updateUserLeave","modalConfirmSearchHandler","formBasicField","field","formBasicQuery","search","variables","getUserField","modalCancelHandler","modalDeleteHandler","deletedUser","deleteUser","deletedUserId","deletedUserPos","showDetailHandler","emailElRef","createRef","passwordElRef","nameElRef","roleElRef","componentDidMount","updateUserSpecial","componentWillUnmount","render","bind","contextType"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n// import Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Accordion from 'react-bootstrap/Accordion';\n\n// import Modal from '../components/Modal/Modal';\n// import Backdrop from '../components/Backdrop/Backdrop';\nimport UserList from '../components/Users/UserList/UserList';\nimport SearchUserList from '../components/Users/UserList/SearchUserList';\nimport UserDetail from '../components/Users/UserDetail';\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\n\nimport CreateUserForm from '../components/Forms/CreateUserForm';\nimport UpdateUserForm from '../components/Forms/UpdateUserForm';\nimport UpdateUserAttendanceForm from '../components/Forms/UpdateUserAttendanceForm';\nimport UpdateUserAttatchmentForm from '../components/Forms/UpdateUserAttatchmentForm';\nimport UpdateUserLeaveForm from '../components/Forms/UpdateUserLeaveForm';\nimport SearchUserForm from '../components/Forms/SearchUserForm';\nimport './Users.css';\n\nclass UsersPage extends Component {\n  state = {\n    creating: false,\n    updating: false,\n    deleting: false,\n    searching: false,\n    users: [],\n    searchUsers: [],\n    isLoading: false,\n    selectedUser: null,\n    userUpdateField: null,\n  };\n  isActive = true;\n\n  static contextType = AuthContext;\n\n  constructor(props) {\n    super(props);\n    this.emailElRef = React.createRef();\n    this.passwordElRef = React.createRef();\n    this.nameElRef = React.createRef();\n    this.roleElRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.fetchUsers();\n  }\n\n\n  startCreateUserHandler = () => {\n    this.setState({ creating: true });\n    console.log(\"CreateUserForm...\");\n  };\n  startUpdateUserHandler = () => {\n    this.setState({ updating: true });\n    console.log(\"UpdateUserForm...\");\n  };\n  // startUpdateUserHandler = () => {\n  //   this.setState({ deleting: true });\n  //   console.log(\"UpdateUserForm...\");\n  //\n  // };\n\n  startSearchUserHandler = () => {\n    this.setState({ searching: true });\n    console.log(\"SearchUserForm...\");\n  };\n\n  modalConfirmHandler = (event) => {\n\n    console.log(\"CreateUserFormData:  \", event.target.formGridEmail.value);\n\n    this.setState({ creating: false });\n    const email = event.target.formGridEmail.value;\n    const password = event.target.formGridPassword.value;\n    const name = event.target.formGridName.value;\n    const role = event.target.formGridRole.value;\n    const employmentDate = event.target.formGridEmploymentDate.value;\n    const terminationDate = event.target.formGridTerminationDate.value;\n\n    if (\n      email.trim().length === 0 ||\n      password.trim().length === 0 ||\n      name.trim().length === 0 ||\n      role.trim().length === 0 ||\n      employmentDate.trim().length === 0 ||\n      terminationDate.trim().length === 0\n    ) {\n      console.log(\"blank fields detected!!!...Please try again...\");\n      return;\n    }\n\n    const token = this.context.token;\n    const userId = this.context.userId;\n    const user = { email, password, name, role, employmentDate, terminationDate };\n\n    console.log(`\n      creating user...\n      userId: ${userId}\n      email: ${email},\n      password: ${password},\n      name: ${name},\n      role: ${role},\n      employmentDate: ${employmentDate},\n      terminationDate: ${terminationDate}\n      `);\n\n    const requestBody = {\n      query: `\n          mutation {\n            createUser(userInput: {email:\"${email}\",password:\"${password}\",name:\"${name}\",role:\"${role}\",employmentDate:\"${employmentDate}\",terminationDate:\"${terminationDate}\"}) {\n              _id\n              name\n              email\n              role\n              employmentDate\n              terminationDate\n              attendance{\n                date\n                status\n                description}\n                attachments{\n                  name\n                  format\n                  path}\n              leave{\n                type\n                startDate\n                endDate}\n            }\n          }\n        `\n    };\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"create user response data... \" + JSON.stringify(resData.data.createUser));\n        this.setState(prevState => {\n          const updatedUsers = [...prevState.users];\n          updatedUsers.push(resData.data.createUser);\n\n          return { users: updatedUsers };\n        });\n        this.context.users = this.state.users;\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n\n  modalConfirmUpdateHandler = (event) => {\n\n    const token = this.context.token;\n    const userId = this.context.userId;\n    let selectedUserId = this.context.selectedUser._id;\n    if(userId !== selectedUserId && this.context.user.role !== 'admin') {\n      console.log(\"Not the creator or Admin! No edit permission!!\");\n      selectedUserId = null;\n    }\n\n    console.log(\"UpdateUserFormData:  \", event.target.formGridEmail.value);\n\n    this.setState({ updating: false });\n    let email = event.target.formGridEmail.value;\n    let password = event.target.formGridPassword.value;\n    let name = event.target.formGridName.value;\n    let role = event.target.formGridRole.value;\n    let employmentDate = event.target.formGridEmploymentDate.value;\n    let terminationDate = event.target.formGridTerminationDate.value;\n\n    if (email.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      email  = this.context.selectedUser.email;\n      // return;\n    }\n    if (password.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      password = this.context.selectedUser.password;\n    }\n    if (name.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      name  = this.context.selectedUser.name;\n    }\n    if (role.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      role  = this.context.selectedUser.role;\n    }\n    if (employmentDate.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      employmentDate  = this.context.selectedUser.employmentDate;\n    }\n    if (terminationDate.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      terminationDate  = this.context.selectedUser.terminationDate;\n    }\n\n\n    const user = { email, password, name, role, employmentDate, terminationDate };\n    console.log(`\n      updating user...\n      userId: ${userId},\n      email: ${email},\n      password: ${password},\n      name: ${name},\n      role: ${role},\n      employmentDate: ${employmentDate},\n      terminationDate: ${terminationDate}\n      `);\n\n    const requestBody = {\n      query: `\n          mutation { updateUser(userId:\"${userId}\", selectedUserId:\"${selectedUserId}\", userInput:{email:\"${email}\", password:\"${password}\", name:\"${name}\", role:\"${role}\", employmentDate:\"${employmentDate}\",terminationDate:\"${terminationDate}\"}) {\n            _id\n            name\n            email\n            role\n            employmentDate\n            terminationDate\n            attendance{\n              date\n              status\n              description}\n              attachments{\n                name\n                format\n                path}\n            leave{\n              type\n              startDate\n              endDate}\n            }\n          }\n        `\n    };\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data.updateUser));\n\n        const updatedUserId = resData.data.updateUser._id;\n        const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n        const updatedUserPos = this.state.users.indexOf(updatedUser);\n        const slicedArray = this.state.users.splice(updatedUserPos, 1);\n        console.log(\"updatedUser:  \", JSON.stringify(updatedUser),\"  updatedUserPos:  \", updatedUserPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.users.push(updatedUser);\n        this.context.users = this.state.users;\n        this.fetchUsers();\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n\n  updateUserAttendanceHandler = (event) => {\n\n    const token = this.context.token;\n    const userId = this.context.userId;\n    let selectedUserId = this.context.selectedUser._id;\n    if(userId !== selectedUserId && this.context.user.role !== 'admin') {\n      console.log(\"Not the creator or Admin! No edit permission!!\");\n      selectedUserId = null;\n    }\n\n    console.log(\"UpdateUserAttendanceFormData:  \", event.target.formGridAttendanceDate.value);\n\n    this.setState({ updating: false , userUpdateField: null });\n\n    let attendanceDate = event.target.formGridAttendanceDate.value;\n    let attendanceStatus = event.target.formGridAttendanceStatus.value;\n    let attendanceDescription = event.target.formGridAttendanceDescription.value;\n\n    if (attendanceDate.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      attendanceDate = this.context.selectedUser.attendanceDate;\n    }\n    if (attendanceStatus.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      attendanceStatus = this.context.selectedUser.attendanceStatus;\n    }\n    if (attendanceDescription.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      attendanceDescription = this.context.selectedUser.attendanceDescription;\n    }\n\n    const userAttendance = { attendanceDate, attendanceStatus, attendanceDescription }\n    console.log(`\n      adding user attendance item...\n      userId: ${userId},\n      selectedUserId: ${selectedUserId}\n      attendanceDate: ${attendanceDate},\n      attendanceStatus: ${attendanceStatus},\n      attendanceDescription: ${attendanceDescription}\n      `);\n\n      const requestBody = {\n        query:`\n          mutation {updateUserAttendance(userId:\"${userId}\", selectedUserId:\"${selectedUserId}\",userInput:{attendanceDate:\"${attendanceDate}\",attendanceStatus:\"${attendanceStatus}\",attendanceDescription:\"${attendanceDescription}\"}){_id,name,email,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description}}}\n        `};\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData.data.updateUserAttendance));\n\n          const updatedUserId = resData.data.updateUserAttendance._id;\n          const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n          const updatedUserPos = this.state.users.indexOf(updatedUser);\n          const slicedArray = this.state.users.splice(updatedUserPos, 1);\n          console.log(\"updatedUser:  \", JSON.stringify(updatedUser),\"  updatedUserPos:  \", updatedUserPos, \"  slicedArray:  \", slicedArray);\n\n          this.state.users.push(updatedUser);\n          this.context.users = this.state.users;\n          // this.fetchUsers();\n        })\n        .catch(err => {\n          console.log(err);\n        });\n\n\n  }\n\n  updateUserAttachmentHandler = (event) => {\n\n    const token = this.context.token;\n    const userId = this.context.userId;\n    let selectedUserId = this.context.selectedUser._id;\n    if(userId !== selectedUserId && this.context.user.role !== 'admin') {\n      console.log(\"Not the creator or Admin! No edit permission!!\");\n      selectedUserId = null;\n    }\n\n    console.log(\"UpdateUserAttachmentFormData:  \", event.target.formGridAttachmentName.value);\n\n    this.setState({ updating: false , userUpdateField: null });\n\n    let attachmentName = event.target.formGridAttachmentName.value;\n    let attachmentFormat = event.target.formGridAttachmentFormat.value;\n\n\n    if (attendanceDate.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      attendanceDate = this.context.selectedUser.attendanceDate;\n    }\n    if (attendanceStatus.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      attendanceStatus = this.context.selectedUser.attendanceStatus;\n    }\n    if (attendanceDescription.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      attendanceDescription = this.context.selectedUser.attendanceDescription;\n    }\n\n    const userAttendance = { attendanceDate, attendanceStatus, attendanceDescription }\n    console.log(`\n      adding user attendance item...\n      userId: ${userId},\n      selectedUserId: ${selectedUserId}\n      attendanceDate: ${attendanceDate},\n      attendanceStatus: ${attendanceStatus},\n      attendanceDescription: ${attendanceDescription}\n      `);\n\n      const requestBody = {\n        query:`\n          mutation {updateUserAttendance(userId:\"${userId}\", selectedUserId:\"${selectedUserId}\",userInput:{attendanceDate:\"${attendanceDate}\",attendanceStatus:\"${attendanceStatus}\",attendanceDescription:\"${attendanceDescription}\"}){_id,name,email,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description}}}\n        `};\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData.data.updateUserAttendance));\n\n          const updatedUserId = resData.data.updateUserAttendance._id;\n          const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n          const updatedUserPos = this.state.users.indexOf(updatedUser);\n          const slicedArray = this.state.users.splice(updatedUserPos, 1);\n          console.log(\"updatedUser:  \", JSON.stringify(updatedUser),\"  updatedUserPos:  \", updatedUserPos, \"  slicedArray:  \", slicedArray);\n\n          this.state.users.push(updatedUser);\n          this.context.users = this.state.users;\n          // this.fetchUsers();\n        })\n        .catch(err => {\n          console.log(err);\n        });\n\n\n  }\n\n\n  updateUserLeaveHandler = (event) => {\n\n    const token = this.context.token;\n    const userId = this.context.userId;\n    let selectedUserId = this.context.selectedUser._id;\n    if(userId !== selectedUserId && this.context.user.role !== 'admin') {\n      console.log(\"Not the creator or Admin! No edit permission!!\");\n      selectedUserId = null;\n    }\n\n    console.log(\"UpdateUserLeaveFormData:  \", event.target.formGridLeaveType.value);\n\n    this.setState({ updating: false , userUpdateField: null });\n\n    let leaveType = event.target.formGridLeaveType.value;\n    let leaveStartDate = event.target.formGridLeaveStartDate.value;\n    let leaveEndDate = event.target.formGridLeaveEndDate.value;\n\n    if (leaveType.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      leaveType = this.context.selectedUser.leaveType;\n    }\n    if (leaveStartDate.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      leaveStartDate = this.context.selectedUser.leaveStartDate;\n    }\n    if (leaveEndDate.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      leaveEndDate = this.context.selectedUser.leaveEndDate;\n    }\n\n    const userLeave = { leaveType, leaveStartDate, leaveEndDate }\n    console.log(`\n      adding user attendance item...\n      userId: ${userId},\n      selectedUserId: ${selectedUserId}\n      leave: {\n        type: ${leaveType},\n        startDate: ${leaveStartDate},\n        endDate: ${leaveEndDate}\n      }\n      `);\n\n      const requestBody = {\n        query:`\n          mutation {updateUserLeave(userId:\"${userId}\", selectedUserId:\"${selectedUserId}\",userInput:{leaveType:\"${leaveType}\",leaveStartDate:\"${leaveStartDate}\",leaveEndDate:\"${leaveEndDate}\"}){_id,name,email,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,startDate,endDate}}}\n        `};\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData.data));\n\n          const updatedUserId = resData.data.updateUserLeave._id;\n          const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n          const updatedUserPos = this.state.users.indexOf(updatedUser);\n          const slicedArray = this.state.users.splice(updatedUserPos, 1);\n          console.log(\"updatedUser:  \", JSON.stringify(updatedUser),\"  updatedUserPos:  \", updatedUserPos, \"  slicedArray:  \", slicedArray);\n\n          this.state.users.push(updatedUser);\n          this.context.users = this.state.users;\n          // this.fetchUsers();\n        })\n        .catch(err => {\n          console.log(err);\n        });\n\n\n  }\n\n\n  modalConfirmSearchHandler = (event) => {\n    console.log(\"SearchUserForm:  \");\n\n\n    let userId = this.context.userId;\n\n      console.log(\"SearchUserFormData:  \", event.target.formBasicField.value);\n      this.setState({ searching: false });\n\n      let field = event.target.formBasicField.value;\n      let query = event.target.formBasicQuery.value;\n\n      if (\n        field.trim().length === 0 ||\n        query.trim().length === 0\n      ) {\n        console.log(\"blank fields detected!!!...Please try again...\");\n        return;\n      }\n\n      const search = { field, query }\n      console.log(\"Searching for User:  \", JSON.stringify(search));\n\n      const requestBody = {\n        query: `\n          query getUserField($userId: ID!, $field: String!, $query: String!)\n          {getUserField(userId: $userId, field: $field, query: $query ){\n            _id\n            name\n            email\n            role\n            employmentDate\n            terminationDate\n            attachments{\n              name\n              format\n              path\n            }\n            attendance{\n              date\n              status\n              description\n            }\n            leave{\n              type\n              startDate\n              endDate\n            }\n          }\n      }\n        `,\n        variables: {\n          userId: userId,\n          field: field,\n          query: query\n        }\n      }\n\n      const token = this.context.token;\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData));\n\n          const searchUsers = resData.data.getUserField;\n\n          this.setState({ searchUsers: searchUsers})\n          console.log(\"state.searchUsers:  \", this.state.searchUsers);\n          // this.fetchUsers();\n        })\n        .catch(err => {\n          console.log(err);\n        });\n  }\n\n\n  modalCancelHandler = () => {\n    this.setState({ creating: false, updating: false, deleting: false, searching: false});\n  };\n\n  fetchUsers() {\n    console.log(\"'fetch users function' context object... \" + JSON.stringify(this.context));\n    const userId = this.context.userId;\n\n    this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n          query users($userId: ID!) {\n            users(userId: $userId) {\n              _id\n              name\n              email\n              role\n              employmentDate\n              terminationDate\n              attachments{\n                name\n                format\n                path\n              }\n              attendance{\n                date\n                status\n                description\n              }\n              leave{\n                type\n                startDate\n                endDate\n              }\n            }\n          }\n        `,\n        variables: {\n          userId: userId\n        }\n    };\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const users = resData.data.users;\n        console.log(users);\n\n        if (this.isActive) {\n          this.setState({ users: users, isLoading: false });\n        }\n        this.context.users = this.state.users;\n      })\n      .catch(err => {\n        console.log(err);\n        if (this.isActive) {\n          this.setState({ isLoading: false });\n        }\n      });\n  }\n\nmodalDeleteHandler = () => {\n  console.log(\"deleting user...selectedUser:  \", this.context.selectedUser);\n\n  const selectedUserId = this.context.selectedUser._id;\n\n  if(this.context.user.role !== 'admin') {\n    console.log(\"Not the Admin! No edit permission!!\");\n  }\n\n  this.setState({deleting: true});\n\n  const requestBody = {\n    query: `\n        mutation DeleteUser($userId: ID!, $selectedUserId: ID!) {\n          deleteUser(userId: $userId, selectedUserId: $selectedUserId) {\n            _id\n            email\n            password\n            name\n            role\n          }\n        }\n      `,\n      variables: {\n        userId: this.context.userId,\n        selectedUserId: selectedUserId\n      }\n  };\n\n  fetch('http://localhost:10000/graphql', {\n    method: 'POST',\n    body: JSON.stringify(requestBody),\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + this.context.token\n    }\n  })\n    .then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n      return res.json();\n    })\n    .then(resData => {\n      let deletedUser = resData.data.deleteUser;\n      console.log(deletedUser);\n\n      let deletedUserId = deletedUser._id;\n      deletedUser = this.state.users.find(e => e._id === deletedUserId);\n      const deletedUserPos = this.state.users.indexOf(deletedUser);\n      const slicedArray = this.state.users.splice(deletedUserPos, 1);\n      console.log(\"deletedUser:  \", JSON.stringify(deletedUser),\"  deletedUserPos:  \", deletedUserPos, \"  slicedArray:  \", slicedArray);\n\n      this.setState({ deleting: false, selectedUser: null });\n      this.context.selectedUser = null;\n\n      this.fetchUsers();\n\n    })\n    .catch(err => {\n      console.log(err);\n      if (this.isActive) {\n        this.setState({ deleting: false });\n      }\n    });\n\n\n}\n\nupdateUserSpecial (event) {\n\n  console.log(\"special field to update:  \", event.target.value);\n  const field = event.target.value;\n  this.setState({ userUpdateField: field});\n\n}\n\n  showDetailHandler = userId => {\n\n    this.setState(prevState => {\n      const selectedUser = prevState.users.find(e => e._id === userId);\n      this.context.selectedUser = selectedUser;\n      this.setState({selectedUser: selectedUser});\n      console.log(\"User selected  :  \", selectedUser);\n      return { selectedUser: selectedUser };\n    });\n  };\n\n\n  componentWillUnmount() {\n    this.isActive = false;\n  }\n\n  render() {\n    return (\n\n    <React.Fragment>\n\n    <Accordion>\n\n    <Container className=\"containerUserDetail\">\n\n    <Row className=\"createUserRowAdd\">\n    <Col md={4} className=\"createUserColAdd\">\n    <p>Staff Detail</p>\n    </Col>\n    <Col md={6} className=\"createUserColAdd\">\n    <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"4\" className=\"btn\">\n    Details\n    </Accordion.Toggle>\n    </Col>\n    </Row>\n\n    <Accordion.Collapse eventKey=\"4\">\n    <Row className=\"createUserRowForm\">\n    <Col md={11} className=\"createUserColForm\">\n    {this.state.isLoading === false &&\n      (<UserDetail\n        authUserId={this.context.userId}\n        AuthContext={this.context}\n        user={this.state.selectedUser}\n        onEdit={this.startUpdateUserHandler}\n        onDelete={this.modalDeleteHandler}\n    />)}\n    </Col>\n    </Row>\n    </Accordion.Collapse>\n\n    </Container>\n\n    <Container className=\"containerCreateUpdate\">\n\n    <Row className=\"createUserRowAdd\">\n    <Col md={4} className=\"createUserColAdd\">\n    <p>Add New Staff</p>\n    </Col>\n    <Col md={8}>\n    {this.context.token && (\n      <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"0\" className=\"btn\" onClick={this.startCreateUserHandler}>\n      Add\n      </Accordion.Toggle>\n    )}\n    </Col>\n    </Row>\n\n    <Accordion.Collapse eventKey=\"0\">\n    <Row className=\"createUserRowForm\">\n    <Col md={11} className=\"createUserColForm\">\n    {this.state.creating && (\n      <CreateUserForm\n      authUserId={this.context.userId}\n      canCancel\n        canConfirm\n        onCancel={this.modalCancelHandler}\n        onConfirm={this.modalConfirmHandler}\n        onSubmit={this.modalConfirmHandler}\n        confirmText=\"Confirm\"\n      />\n    )}\n    </Col>\n    </Row>\n    </Accordion.Collapse>\n\n    <Row className=\"updateUserRowAdd\">\n    <Col md={4} className=\"updateUserCol\">\n    <p>Edit Selected Staff</p>\n    </Col>\n    <Col md={4} className=\"updateUserCol\">\n    {this.context.token && (\n      <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"1\" className=\"btn\" onClick={this.startUpdateUserHandler}>\n      Basic Info & Demographics\n      </Accordion.Toggle>\n    )}\n    </Col>\n    </Row>\n\n\n\n    <Row className=\"createUserRowAdd\">\n    <Col md={3} className=\"updateUserCol2\">\n    <p>Edit Selected Staff</p>\n    </Col>\n    <Col md={9} className=\"updateUserCol2\">\n    {this.context.token && (\n      <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"2\" className=\"btn\" value='attendance' onClick={this.updateUserSpecial.bind(this)}>\n      Attendance\n      </Accordion.Toggle>\n    )}\n    {this.context.token && (\n      <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"2\" className=\"btn\" value='leave' onClick={this.updateUserSpecial.bind(this)}>\n      Leave\n      </Accordion.Toggle>\n    )}\n    {this.context.token && (\n      <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"2\" className=\"btn\" value='attachments' onClick={this.updateUserSpecial.bind(this)}>\n      Attachments\n      </Accordion.Toggle>\n    )}\n    </Col>\n    </Row>\n\n    <Accordion.Collapse eventKey=\"1\">\n    <Row className=\"updateUserRowForm\">\n    <Col md={10} className=\"updateUserColForm\">\n    {this.state.updating && (\n      <UpdateUserForm\n      authUserId={this.context.userId}\n      canCancel\n        canConfirm\n        onCancel={this.modalCancelHandler}\n        onConfirm={this.modalConfirmUpdateHandler}\n        confirmText=\"Confirm\"\n        user={this.context.selectedUser}\n      />\n    )}\n    </Col>\n    </Row>\n    </Accordion.Collapse>\n\n    <Accordion.Collapse eventKey=\"2\">\n    <Row className=\"updateUserRowForm\">\n    <Col md={10} className=\"updateUserColForm\">\n    {this.state.userUpdateField === 'attendance' && (\n      <UpdateUserAttendanceForm\n      authUserId={this.context.userId}\n      canCancel\n        canConfirm\n        onCancel={this.modalCancelHandler}\n        onConfirm={this.updateUserAttendanceHandler}\n        confirmText=\"Confirm\"\n        user={this.state.selectedUser}\n      />\n    )}\n    {this.state.userUpdateField === 'leave' && (\n      <UpdateUserLeaveForm\n      authUserId={this.context.userId}\n      canCancel\n        canConfirm\n        onCancel={this.modalCancelHandler}\n        onConfirm={this.updateUserLeaveHandler}\n        confirmText=\"Confirm\"\n        user={this.state.selectedUser}\n      />\n    )}\n    {this.state.userUpdateField === 'attachments' && (\n      <UpdateUserAttachmentForm\n      authUserId={this.context.userId}\n      canCancel\n        canConfirm\n        onCancel={this.modalCancelHandler}\n        onConfirm={this.updateUserAttachmentHandler}\n        confirmText=\"Confirm\"\n        user={this.state.selectedUser}\n      />\n    )}\n    </Col>\n    </Row>\n    </Accordion.Collapse>\n\n    </Container>\n\n\n\n  <Container className=\"containerSearchuser\">\n  <Row className=\"searchUserRowAdd\">\n  <Col md={4} className=\"searchUserColAdd\">\n  <p>Search for a User</p>\n  </Col>\n  <Col md={8}>\n    {this.context.token && (\n    <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"3\" className=\"btn\" onClick={this.startSearchUserHandler}>\n    Search\n    </Accordion.Toggle>\n    )}\n  </Col>\n  </Row>\n\n  <Accordion.Collapse eventKey=\"3\">\n  <Row className=\"searchUserRowForm\">\n  <Col md={10} className=\"searchUserColForm\">\n  {\n    this.state.searching === true &&\n    <SearchUserForm\n    authUserId={this.context.userId}\n    canCancel\n      canConfirm\n      onCancel={this.modalCancelHandler}\n      onConfirm={this.modalConfirmSearchHandler}\n      confirmText=\"Search\"\n      user={this.context.selectedUser}\n    />\n  }\n  </Col>\n  <Col md={10}>\n\n  </Col>\n  </Row>\n  </Accordion.Collapse>\n  </Container>\n\n  <Accordion.Collapse eventKey=\"3\">\n  <Container className=\"containerSearchuser\">\n  <Row className=\"searchListRow\">\n  {\n    this.state.searchUsers !== [] &&\n    <SearchUserList\n      searchUsers={this.state.searchUsers}\n      authUserId={this.context.userId}\n      onCancel={this.modalCancelHandler}\n        onViewDetail={this.showDetailHandler}\n    />\n  }\n  </Row>\n  </Container>\n  </Accordion.Collapse>\n\n<Container className=\"containerSearchuser\">\n<Row className=\"searchListRow\">\n\n{this.state.isLoading ? (\n  <Spinner />\n) : (\n  <UserList\n    users={this.state.users}\n    authUserId={this.context.userId}\n    onViewDetail={this.showDetailHandler}\n  />\n)}\n\n</Row>\n</Container>\n</Accordion>\n</React.Fragment>\n    );\n  }\n}\n\nexport default UsersPage;\n"]},"metadata":{},"sourceType":"module"}