{"ast":null,"code":"var _jsxFileName = \"/Users/pedrojacob/Downloads/AMR/websites/office_records/ENT_EMR/frontend/src/pages/Patients.js\";\nimport React, { Component } from 'react'; // import Form from 'react-bootstrap/Form';\n// import Button from 'react-bootstrap/Button';\n// import Modal from '../components/Modal/Modal';\n// import Backdrop from '../components/Backdrop/Backdrop';\n\nimport PatientList from '../components/Patients/PatientList/PatientList';\nimport PatientDetail from '../components/Patients/PatientDetail';\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\nimport CreatePatientForm from '../components/Forms/CreatePatientForm';\nimport UpdatePatientForm from '../components/Forms/UpdatePatientForm';\nimport './Users.css';\n\nclass PatientsPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      creating: false,\n      updating: false,\n      patients: [],\n      isLoading: false,\n      selectedPatient: null\n    };\n    this.isActive = true;\n\n    this.startCreatePatientHandler = () => {\n      this.setState({\n        creating: true\n      });\n      console.log(\"CreatePatientForm...\");\n    };\n\n    this.startUpdatePatientHandler = () => {\n      this.setState({\n        updating: true\n      });\n      console.log(\"UpdatePatientForm...\");\n    };\n\n    this.modalConfirmHandler = event => {\n      console.log(\"CreatePatientFormData:  \", event.target.formGridName.value);\n      this.setState({\n        creating: false\n      });\n      const userId = this.context.userId;\n      const name = event.target.formGridName.value;\n      const dob = event.target.formGridDob.value;\n      const address = event.target.formGridAddress.value;\n      const contactPhone = null;\n      const contactEmail = null;\n      const registrationDate = null;\n      const referringDoctor = null;\n      const referringDoctorName = null;\n      const referringDoctorEmail = null;\n      const referringDoctorPhone = null;\n      const occupationRole = null;\n      const occupationEmployer = null;\n      const occupationEmployerContactPhone = null;\n      const occupationEmployerContactEmail = null;\n\n      if (name.trim().length === 0 || dob.trim().length === 0 || address.trim().length === 0 || contactPhone.trim().length === 0 || contactEmail.trim().length === 0 || registrationDate.trim().length === 0 || referringDoctor.trim().length === 0 || referringDoctorName.trim().length === 0 || referringDoctorEmail.trim().length === 0 || referringDoctorPhone.trim().length === 0 || occupationRole.trim().length === 0 || occupationEmployer.trim().length === 0 || occupationEmployerContactPhone.trim().length === 0 || occupationEmployerContactEmail.trim().length === 0) {\n        return;\n      }\n\n      const patient = {\n        name,\n        dob,\n        address,\n        contactPhone,\n        contactEmail,\n        registrationDate,\n        referringDoctor,\n        referringDoctorName,\n        referringDoctorEmail,\n        referringDoctorPhone,\n        occupationRole,\n        occupationEmployer,\n        occupationEmployerContactPhone,\n        occupationEmployerContactEmail\n      };\n      console.log(\"creating patient.. \" + JSON.stringify(patient));\n      const requestBody = {\n        query: \"\\n          mutation CreatePaitient($userId: ID!, $name: String!, $dob: String!, $address: String!, $contactPhone: String!, $contactEmail: String!, $registrationDate: String!, $referringDoctor: String!, $referringDoctorName: String!, $referringDoctorEmail: String!, $referringDoctorPhone: String!, $occupationRole: String!, $occupationEmployer: String!, $occupationEmployerContactPhone: String!, $occupationEmployerContactEmail: String!) {\\n            createPaitient(userId: $userId, patientInput: { email: $email, name: $name, dob: $dob, address: $address, contactPhone: $contactPhone, contactEmail: $contactEmail, registrationDate: $registrationDate, referringDoctor: $referringDoctor, referringDoctorName: $referringDoctorName, referringDoctorEmail: $referringDoctorEmail, referringDoctorPhone: $referringDoctorPhone, occupationRole: $occupationRole, occupationEmployer: $occupationEmployer, occupationEmployerContactPhone: $occupationEmployerContactPhone, occupationEmployerContactEmail: $occupationEmployerContactEmail}) {\\n              _id\\n              name\\n              address\\n              contact{\\n                email\\n                phone\\n              }\\n              registrationDate\\n              referringDoctor\\n              {\\n                name\\n                email\\n                phone\\n              }\\n              occupation\\n              {\\n                role\\n                employer\\n                contact\\n                {\\n                  email\\n                  phone\\n                }\\n              }\\n            }\\n          }\\n        \",\n        variables: {\n          userId: userId,\n          name: name,\n          dob: dob,\n          address: address,\n          contactPhone: contactPhone,\n          contactEmail: contactEmail,\n          registrationDate: registrationDate,\n          referringDoctor: referringDoctor,\n          referringDoctorName: referringDoctorName,\n          referringDoctorEmail: referringDoctorEmail,\n          referringDoctorPhone: referringDoctorPhone,\n          occupationRole: occupationRole,\n          occupationEmployer: occupationEmployer,\n          occupationEmployerContactPhone: occupationEmployerContactPhone,\n          occupationEmployerContactEmail: occupationEmployerContactEmail\n        }\n      };\n      const token = this.context.token;\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.modalCancelHandler = () => {\n      this.setState({\n        creating: false,\n        updating: false,\n        selectedPatient: null\n      });\n    };\n\n    this.modalConfirmUpdateHandler = event => {\n      if (this.context.user.role !== 'admin') {\n        console.log(\"Not the Admin! No edit permission!!\");\n      }\n\n      const userId = this.context.userId; // console.log(\"UpdateUserFormData:  \", event);\n\n      console.log(\"UpdateUserFormData:  \", event.target.formGridName.value);\n      this.setState({\n        updating: false\n      });\n      const name = event.target.formGridName.value;\n      const dob = event.target.formGridDob.value;\n      const address = event.target.formGridAddress.value;\n      const contactPhone = '';\n      const contactEmail = '';\n      const registrationDate = '';\n      const referringDoctor = '';\n      const referringDoctorName = '';\n      const referringDoctorEmail = '';\n      const referringDoctorPhone = '';\n      const occupationRole = '';\n      const occupationEmployer = '';\n      const occupationEmployerContactPhone = '';\n      const occupationEmployerContactEmail = '';\n\n      if (name.trim().length === 0 || dob.trim().length === 0 || address.trim().length === 0 || contactPhone.trim().length === 0 || contactEmail.trim().length === 0 || registrationDate.trim().length === 0 || referringDoctor.trim().length === 0 || referringDoctorName.trim().length === 0 || referringDoctorEmail.trim().length === 0 || referringDoctorPhone.trim().length === 0 || occupationRole.trim().length === 0 || occupationEmployer.trim().length === 0 || occupationEmployerContactPhone.trim().length === 0 || occupationEmployerContactEmail.trim().length === 0) {\n        // console.log(\"blank feilds detected!!...name:  \",name, \"  dob:  \", dob, \"  address:  \", address, \"  contactPhone:  \",  contactPhone, \"  contactEmail:  \", contactEmail, \"  registrationDate:  \", registrationDate, \"  referringDoctor:  \", referringDoctor, \"  referringDoctorName:  \", referringDoctorName, \"  referringDoctorEmail:  \", referringDoctorEmail, \"  referringDoctorPhone:  \", referringDoctorPhone, \"  occupationRole:  \", occupationRole, \"  occupationEmployer:  \"occupationEmployer, occupationEmployerContactPhone, occupationEmployerContactEmail);\n        console.log(\"\\n        blank data fields detected!!...\\n        name: \".concat(name, \"\\n        dob: \").concat(dob, \"\\n        address: \").concat(address, \"\\n        contactPhone: \").concat(contactPhone, \"\\n        contactEmail: \").concat(contactEmail, \"\\n        registrationDate: \").concat(registrationDate, \"\\n        registrationDate: \").concat(registrationDate, \"\\n        referringDoctor: \").concat(referringDoctor, \"\\n        referringDoctorName: \").concat(referringDoctorName, \"\\n        referringDoctorEmail: \").concat(referringDoctorEmail, \"\\n        referringDoctorPhone: \").concat(referringDoctorPhone, \"\\n        occupationRole: \").concat(occupationRole, \"\\n        occupationEmployer: \").concat(occupationEmployer, \"\\n        occupationEmployerContactPhone: \").concat(occupationEmployerContactPhone, \"\\n        occupationEmployerContactEmail: \").concat(occupationEmployerContactEmail, \"\\n        \"));\n        name = this.state.selectedPatient.name;\n        dob = this.state.selectedPatient.dob;\n        address = this.state.selectedPatient.address;\n        contactPhone = this.state.selectedPatient.contactPhone;\n        contactEmail = this.state.selectedPatient.contactEmail;\n        registrationDate = this.state.selectedPatient.registrationDate;\n        registrationDate = this.state.selectedPatient.registrationDate;\n        referringDoctor = this.state.selectedPatient.referringDoctor;\n        referringDoctorName = this.state.selectedPatient.referringDoctorName;\n        referringDoctorEmail = this.state.selectedPatient.referringDoctorEmail;\n        referringDoctorPhone = this.state.selectedPatient.referringDoctorPhone;\n        occupationRole = this.state.selectedPatient.occupationRole;\n        occupationEmployer = this.state.selectedPatient.occupationEmployer;\n        occupationEmployerContactPhone = this.state.selectedPatient.occupationEmployerContactPhone;\n        occupationEmployerContactEmail = this.state.selectedPatient.occupationEmployerContactEmail; // console.log(\"inputting previous data...name:  \", name, \"  address:  \", address, \"  dob:  \", dob);\n\n        console.log(\"\\n        inputting previous data...\\n        name: \".concat(name, \"\\n        dob: \").concat(dob, \"\\n        address: \").concat(address, \"\\n        contactPhone: \").concat(contactPhone, \"\\n        contactEmail: \").concat(contactEmail, \"\\n        registrationDate: \").concat(registrationDate, \"\\n        registrationDate: \").concat(registrationDate, \"\\n        referringDoctor: \").concat(referringDoctor, \"\\n        referringDoctorName: \").concat(referringDoctorName, \"\\n        referringDoctorEmail: \").concat(referringDoctorEmail, \"\\n        referringDoctorPhone: \").concat(referringDoctorPhone, \"\\n        occupationRole: \").concat(occupationRole, \"\\n        occupationEmployer: \").concat(occupationEmployer, \"\\n        occupationEmployerContactPhone: \").concat(occupationEmployerContactPhone, \"\\n        occupationEmployerContactEmail: \").concat(occupationEmployerContactEmail, \"\\n        \")); // return;\n      }\n\n      const patient = {\n        name,\n        dob,\n        address,\n        contactPhone,\n        contactEmail,\n        registrationDate,\n        registrationDate,\n        referringDoctor,\n        referringDoctorName,\n        referringDoctorEmail,\n        referringDoctorPhone,\n        occupationRole,\n        occupationEmployer,\n        occupationEmployerContactPhone,\n        occupationEmployerContactEmail\n      };\n      console.log(\"updating patient.. \" + JSON.stringify(patient));\n      const requestBody = {\n        query: \"\\n          mutation UpdatePatient($userId: ID!, ) {\\n            updatePatient(userId: $userId, patientInput: {}) {\\n              _id\\n              name\\n            }\\n          }\\n        \",\n        variables: {\n          userId: userId,\n          name: name,\n          dob: dob,\n          address: address,\n          contactPhone: contactPhone,\n          contactEmail: contactEmail,\n          registrationDate: registrationDate,\n          registrationDate: registrationDate,\n          referringDoctor: referringDoctor,\n          referringDoctorName: referringDoctorName,\n          referringDoctorEmail: referringDoctorEmail,\n          referringDoctorPhone: referringDoctorPhone,\n          occupationRole: occupationRole,\n          occupationEmployer: occupationEmployer,\n          occupationEmployerContactPhone: occupationEmployerContactPhone,\n          occupationEmployerContactEmail: occupationEmployerContactEmail\n        }\n      };\n      const token = this.context.token;\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n        const updatedPatientId = resData.data.updatePatient._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push({\n          _id: resData.data.updatePatient._id,\n          email: resData.data.updatePatient.email,\n          name: resData.data.updatePatient.name,\n          role: resData.data.updatePatient.role\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.modalCancelHandler = () => {\n      this.setState({\n        creating: false,\n        updating: false,\n        selectedPatient: null\n      });\n    };\n\n    this.showDetailHandler = patientId => {\n      this.setState(prevState => {\n        const selectedPatient = prevState.patients.find(e => e._id === patientId);\n        this.context.selectedPatient = selectedPatient;\n        console.log(\"here:  \", selectedPatient);\n        return {\n          selectedPatient: selectedPatient\n        };\n      });\n    };\n\n    this.nameElRef = React.createRef();\n    this.dobElRef = React.createRef();\n    this.addressElRef = React.createRef();\n    this.contactPhoneElRef = React.createRef();\n    this.contactEmailElRef = React.createRef();\n    this.registrationDateElRef = React.createRef();\n    this.referringDoctorElRef = React.createRef();\n    this.referringDoctorNameElRef = React.createRef();\n    this.referringDoctorEmailElRef = React.createRef();\n    this.referringDoctorPhoneElRef = React.createRef();\n    this.occupationRoleElRef = React.createRef();\n    this.occupationEmployerElRef = React.createRef();\n    this.occupationEmployerContactPhoneElRef = React.createRef();\n    this.occupationEmployerContactEmailElRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.fetchPatients();\n  }\n\n  fetchPatients() {\n    console.log(\"'fetch patients function' context object... \" + JSON.stringify(this.context));\n    const userId = this.context.userId;\n    this.setState({\n      isLoading: true\n    });\n    const requestBody = {\n      query: \"\\n          query patients($userId: ID!) {\\n            patients(userId: $userId) {\\n              _id\\n              name\\n              address\\n              contact{\\n                email\\n                phone\\n              }\\n              registrationDate\\n              referringDoctor\\n              {\\n                name\\n                email\\n                phone\\n              }\\n              occupation\\n              {\\n                role\\n                employer\\n                contact\\n                {\\n                  email\\n                  phone\\n                }\\n              }\\n            }\\n          }\\n        \",\n      variables: {\n        userId: userId\n      }\n    };\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    }).then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n\n      return res.json();\n    }).then(resData => {\n      const patients = resData.data.patients;\n      console.log(patients);\n\n      if (this.isActive) {\n        this.setState({\n          patients: patients,\n          isLoading: false\n        });\n      }\n    }).catch(err => {\n      console.log(err);\n\n      if (this.isActive) {\n        this.setState({\n          isLoading: false\n        });\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    this.isActive = false;\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 459\n      },\n      __self: this\n    }, this.state.creating && React.createElement(CreatePatientForm, {\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmHandler,\n      onSubmit: this.modalConfirmHandler,\n      confirmText: \"Confirm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 462\n      },\n      __self: this\n    }), this.state.updating && React.createElement(UpdatePatientForm, {\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmUpdateHandler,\n      confirmText: \"Confirm\",\n      user: this.context.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 473\n      },\n      __self: this\n    }), this.state.isLoading === false && React.createElement(PatientDetail, {\n      authUserId: this.context.userId,\n      user: this.state.selectedPatient,\n      onEdit: this.startUpdatePatientHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 483\n      },\n      __self: this\n    }), this.context.token && React.createElement(\"div\", {\n      className: \"users-control\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 490\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 491\n      },\n      __self: this\n    }, \"Add New Patient\"), React.createElement(\"button\", {\n      className: \"btn\",\n      onClick: this.startCreatePatientHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 492\n      },\n      __self: this\n    }, \"+\")), this.state.isLoading ? React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 498\n      },\n      __self: this\n    }) : React.createElement(PatientList, {\n      patients: this.state.patients,\n      authUserId: this.context.userId,\n      onViewDetail: this.showDetailHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 500\n      },\n      __self: this\n    }));\n  }\n\n}\n\nPatientsPage.contextType = AuthContext;\nexport default PatientsPage;","map":{"version":3,"sources":["/Users/pedrojacob/Downloads/AMR/websites/office_records/ENT_EMR/frontend/src/pages/Patients.js"],"names":["React","Component","PatientList","PatientDetail","Spinner","AuthContext","CreatePatientForm","UpdatePatientForm","PatientsPage","constructor","props","state","creating","updating","patients","isLoading","selectedPatient","isActive","startCreatePatientHandler","setState","console","log","startUpdatePatientHandler","modalConfirmHandler","event","target","formGridName","value","userId","context","name","dob","formGridDob","address","formGridAddress","contactPhone","contactEmail","registrationDate","referringDoctor","referringDoctorName","referringDoctorEmail","referringDoctorPhone","occupationRole","occupationEmployer","occupationEmployerContactPhone","occupationEmployerContactEmail","trim","length","patient","JSON","stringify","requestBody","query","variables","token","fetch","method","body","headers","Authorization","then","res","status","Error","json","resData","catch","err","modalCancelHandler","modalConfirmUpdateHandler","user","role","updatedPatientId","data","updatePatient","_id","updatedPatient","find","e","updatedPatientPos","indexOf","slicedArray","splice","push","email","fetchPatients","showDetailHandler","patientId","prevState","nameElRef","createRef","dobElRef","addressElRef","contactPhoneElRef","contactEmailElRef","registrationDateElRef","referringDoctorElRef","referringDoctorNameElRef","referringDoctorEmailElRef","referringDoctorPhoneElRef","occupationRoleElRef","occupationEmployerElRef","occupationEmployerContactPhoneElRef","occupationEmployerContactEmailElRef","componentDidMount","componentWillUnmount","render","contextType"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n// import Form from 'react-bootstrap/Form';\n// import Button from 'react-bootstrap/Button';\n\n// import Modal from '../components/Modal/Modal';\n// import Backdrop from '../components/Backdrop/Backdrop';\nimport PatientList from '../components/Patients/PatientList/PatientList';\nimport PatientDetail from '../components/Patients/PatientDetail';\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\n\nimport CreatePatientForm from '../components/Forms/CreatePatientForm';\nimport UpdatePatientForm from '../components/Forms/UpdatePatientForm';\nimport './Users.css';\n\nclass PatientsPage extends Component {\n  state = {\n    creating: false,\n    updating: false,\n    patients: [],\n    isLoading: false,\n    selectedPatient: null\n  };\n  isActive = true;\n\n  static contextType = AuthContext;\n\n  constructor(props) {\n    super(props);\n    this.nameElRef = React.createRef();\n    this.dobElRef = React.createRef();\n    this.addressElRef = React.createRef();\n    this.contactPhoneElRef = React.createRef();\n    this.contactEmailElRef = React.createRef();\n    this.registrationDateElRef = React.createRef();\n    this.referringDoctorElRef = React.createRef();\n    this.referringDoctorNameElRef = React.createRef();\n    this.referringDoctorEmailElRef = React.createRef();\n    this.referringDoctorPhoneElRef = React.createRef();\n    this.occupationRoleElRef = React.createRef();\n    this.occupationEmployerElRef = React.createRef();\n    this.occupationEmployerContactPhoneElRef = React.createRef();\n    this.occupationEmployerContactEmailElRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.fetchPatients();\n  }\n\n\n  startCreatePatientHandler = () => {\n    this.setState({ creating: true });\n    console.log(\"CreatePatientForm...\");\n  };\n  startUpdatePatientHandler = () => {\n    this.setState({ updating: true });\n    console.log(\"UpdatePatientForm...\");\n  };\n\n  modalConfirmHandler = (event) => {\n\n    console.log(\"CreatePatientFormData:  \", event.target.formGridName.value);\n\n    this.setState({ creating: false });\n    const userId = this.context.userId;\n\n    const name = event.target.formGridName.value;\n    const dob = event.target.formGridDob.value;\n    const address = event.target.formGridAddress.value;\n    const contactPhone = null;\n    const contactEmail = null;\n    const registrationDate = null;\n    const referringDoctor = null;\n    const referringDoctorName = null;\n    const referringDoctorEmail = null;\n    const referringDoctorPhone = null;\n    const occupationRole = null;\n    const occupationEmployer = null;\n    const occupationEmployerContactPhone = null;\n    const occupationEmployerContactEmail = null;\n\n    if (\n      name.trim().length === 0 ||\n      dob.trim().length === 0 ||\n      address.trim().length === 0 ||\n      contactPhone.trim().length === 0 ||\n      contactEmail.trim().length === 0 ||\n      registrationDate.trim().length === 0 ||\n      referringDoctor.trim().length === 0 ||\n      referringDoctorName.trim().length === 0 ||\n      referringDoctorEmail.trim().length === 0 ||\n      referringDoctorPhone.trim().length === 0 ||\n      occupationRole.trim().length === 0 ||\n      occupationEmployer.trim().length === 0 ||\n      occupationEmployerContactPhone.trim().length === 0 ||\n      occupationEmployerContactEmail.trim().length === 0\n    ) {\n      return;\n    }\n\n    const patient = { name, dob, address, contactPhone, contactEmail, registrationDate, referringDoctor, referringDoctorName, referringDoctorEmail, referringDoctorPhone, occupationRole, occupationEmployer, occupationEmployerContactPhone, occupationEmployerContactEmail };\n    console.log(\"creating patient.. \" + JSON.stringify(patient));\n\n    const requestBody = {\n      query: `\n          mutation CreatePaitient($userId: ID!, $name: String!, $dob: String!, $address: String!, $contactPhone: String!, $contactEmail: String!, $registrationDate: String!, $referringDoctor: String!, $referringDoctorName: String!, $referringDoctorEmail: String!, $referringDoctorPhone: String!, $occupationRole: String!, $occupationEmployer: String!, $occupationEmployerContactPhone: String!, $occupationEmployerContactEmail: String!) {\n            createPaitient(userId: $userId, patientInput: { email: $email, name: $name, dob: $dob, address: $address, contactPhone: $contactPhone, contactEmail: $contactEmail, registrationDate: $registrationDate, referringDoctor: $referringDoctor, referringDoctorName: $referringDoctorName, referringDoctorEmail: $referringDoctorEmail, referringDoctorPhone: $referringDoctorPhone, occupationRole: $occupationRole, occupationEmployer: $occupationEmployer, occupationEmployerContactPhone: $occupationEmployerContactPhone, occupationEmployerContactEmail: $occupationEmployerContactEmail}) {\n              _id\n              name\n              address\n              contact{\n                email\n                phone\n              }\n              registrationDate\n              referringDoctor\n              {\n                name\n                email\n                phone\n              }\n              occupation\n              {\n                role\n                employer\n                contact\n                {\n                  email\n                  phone\n                }\n              }\n            }\n          }\n        `,\n        variables: {\n          userId: userId,\n          name: name,\n          dob: dob,\n          address: address,\n          contactPhone: contactPhone,\n          contactEmail: contactEmail,\n          registrationDate: registrationDate,\n          referringDoctor: referringDoctor,\n          referringDoctorName: referringDoctorName,\n          referringDoctorEmail: referringDoctorEmail,\n          referringDoctorPhone: referringDoctorPhone,\n          occupationRole: occupationRole,\n          occupationEmployer: occupationEmployer,\n          occupationEmployerContactPhone: occupationEmployerContactPhone,\n          occupationEmployerContactEmail: occupationEmployerContactEmail\n        }\n    };\n\n    const token = this.context.token;\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  modalCancelHandler = () => {\n    this.setState({ creating: false, updating: false, selectedPatient: null });\n  };\n\n\n  modalConfirmUpdateHandler = (event) => {\n\n    if(this.context.user.role !== 'admin') {\n      console.log(\"Not the Admin! No edit permission!!\");\n\n    }\n\n    const userId = this.context.userId;\n\n    // console.log(\"UpdateUserFormData:  \", event);\n    console.log(\"UpdateUserFormData:  \", event.target.formGridName.value);\n\n\n    this.setState({ updating: false });\n    const name = event.target.formGridName.value;\n    const dob = event.target.formGridDob.value;\n    const address = event.target.formGridAddress.value;\n    const contactPhone = '';\n    const contactEmail = '';\n    const registrationDate = '';\n    const referringDoctor = '';\n    const referringDoctorName = '';\n    const referringDoctorEmail = '';\n    const referringDoctorPhone = '';\n    const occupationRole = '';\n    const occupationEmployer = '';\n    const occupationEmployerContactPhone = '';\n    const occupationEmployerContactEmail = '';\n\n\n\n    if (\n      name.trim().length === 0 ||\n      dob.trim().length === 0 ||\n      address.trim().length === 0 ||\n      contactPhone.trim().length === 0 ||\n      contactEmail.trim().length === 0 ||\n      registrationDate.trim().length === 0 ||\n      referringDoctor.trim().length === 0 ||\n      referringDoctorName.trim().length === 0 ||\n      referringDoctorEmail.trim().length === 0 ||\n      referringDoctorPhone.trim().length === 0 ||\n      occupationRole.trim().length === 0 ||\n      occupationEmployer.trim().length === 0 ||\n      occupationEmployerContactPhone.trim().length === 0 ||\n      occupationEmployerContactEmail.trim().length === 0\n    ) {\n      // console.log(\"blank feilds detected!!...name:  \",name, \"  dob:  \", dob, \"  address:  \", address, \"  contactPhone:  \",  contactPhone, \"  contactEmail:  \", contactEmail, \"  registrationDate:  \", registrationDate, \"  referringDoctor:  \", referringDoctor, \"  referringDoctorName:  \", referringDoctorName, \"  referringDoctorEmail:  \", referringDoctorEmail, \"  referringDoctorPhone:  \", referringDoctorPhone, \"  occupationRole:  \", occupationRole, \"  occupationEmployer:  \"occupationEmployer, occupationEmployerContactPhone, occupationEmployerContactEmail);\n      console.log(`\n        blank data fields detected!!...\n        name: ${name}\n        dob: ${dob}\n        address: ${address}\n        contactPhone: ${contactPhone}\n        contactEmail: ${contactEmail}\n        registrationDate: ${registrationDate}\n        registrationDate: ${registrationDate}\n        referringDoctor: ${referringDoctor}\n        referringDoctorName: ${referringDoctorName}\n        referringDoctorEmail: ${referringDoctorEmail}\n        referringDoctorPhone: ${referringDoctorPhone}\n        occupationRole: ${occupationRole}\n        occupationEmployer: ${occupationEmployer}\n        occupationEmployerContactPhone: ${occupationEmployerContactPhone}\n        occupationEmployerContactEmail: ${occupationEmployerContactEmail}\n        `);\n\n      name = this.state.selectedPatient.name;\n      dob = this.state.selectedPatient.dob;\n      address = this.state.selectedPatient.address;\n      contactPhone = this.state.selectedPatient.contactPhone;\n      contactEmail = this.state.selectedPatient.contactEmail;\n      registrationDate = this.state.selectedPatient.registrationDate;\n      registrationDate = this.state.selectedPatient.registrationDate;\n      referringDoctor = this.state.selectedPatient.referringDoctor;\n      referringDoctorName = this.state.selectedPatient.referringDoctorName;\n      referringDoctorEmail = this.state.selectedPatient.referringDoctorEmail;\n      referringDoctorPhone = this.state.selectedPatient.referringDoctorPhone;\n      occupationRole = this.state.selectedPatient.occupationRole;\n      occupationEmployer = this.state.selectedPatient.occupationEmployer;\n      occupationEmployerContactPhone = this.state.selectedPatient.occupationEmployerContactPhone;\n      occupationEmployerContactEmail = this.state.selectedPatient.occupationEmployerContactEmail;\n\n      // console.log(\"inputting previous data...name:  \", name, \"  address:  \", address, \"  dob:  \", dob);\n\n      console.log(`\n        inputting previous data...\n        name: ${name}\n        dob: ${dob}\n        address: ${address}\n        contactPhone: ${contactPhone}\n        contactEmail: ${contactEmail}\n        registrationDate: ${registrationDate}\n        registrationDate: ${registrationDate}\n        referringDoctor: ${referringDoctor}\n        referringDoctorName: ${referringDoctorName}\n        referringDoctorEmail: ${referringDoctorEmail}\n        referringDoctorPhone: ${referringDoctorPhone}\n        occupationRole: ${occupationRole}\n        occupationEmployer: ${occupationEmployer}\n        occupationEmployerContactPhone: ${occupationEmployerContactPhone}\n        occupationEmployerContactEmail: ${occupationEmployerContactEmail}\n        `);\n\n      // return;\n    }\n\n\n\n    const patient = { name, dob, address, contactPhone, contactEmail, registrationDate, registrationDate, referringDoctor, referringDoctorName, referringDoctorEmail, referringDoctorPhone, occupationRole, occupationEmployer, occupationEmployerContactPhone, occupationEmployerContactEmail };\n    console.log(\"updating patient.. \" + JSON.stringify(patient));\n\n    const requestBody = {\n      query: `\n          mutation UpdatePatient($userId: ID!, ) {\n            updatePatient(userId: $userId, patientInput: {}) {\n              _id\n              name\n            }\n          }\n        `,\n        variables: {\n          userId: userId,\n          name: name,\n          dob: dob,\n          address: address,\n          contactPhone: contactPhone,\n          contactEmail: contactEmail,\n          registrationDate: registrationDate,\n          registrationDate: registrationDate,\n          referringDoctor: referringDoctor,\n          referringDoctorName: referringDoctorName,\n          referringDoctorEmail: referringDoctorEmail,\n          referringDoctorPhone: referringDoctorPhone,\n          occupationRole: occupationRole,\n          occupationEmployer: occupationEmployer,\n          occupationEmployerContactPhone: occupationEmployerContactPhone,\n          occupationEmployerContactEmail: occupationEmployerContactEmail\n        }\n    };\n\n    const token = this.context.token;\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n\n        const updatedPatientId = resData.data.updatePatient._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(\n          {\n              _id: resData.data.updatePatient._id,\n              email: resData.data.updatePatient.email,\n              name: resData.data.updatePatient.name,\n              role: resData.data.updatePatient.role\n            }\n        );\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  modalCancelHandler = () => {\n    this.setState({ creating: false, updating: false, selectedPatient: null });\n  };\n\n\n  fetchPatients() {\n    console.log(\"'fetch patients function' context object... \" + JSON.stringify(this.context));\n    const userId = this.context.userId;\n\n    this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n          query patients($userId: ID!) {\n            patients(userId: $userId) {\n              _id\n              name\n              address\n              contact{\n                email\n                phone\n              }\n              registrationDate\n              referringDoctor\n              {\n                name\n                email\n                phone\n              }\n              occupation\n              {\n                role\n                employer\n                contact\n                {\n                  email\n                  phone\n                }\n              }\n            }\n          }\n        `,\n        variables: {\n          userId: userId\n        }\n    };\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const patients = resData.data.patients;\n        console.log(patients);\n\n        if (this.isActive) {\n          this.setState({ patients: patients, isLoading: false });\n        }\n      })\n      .catch(err => {\n        console.log(err);\n        if (this.isActive) {\n          this.setState({ isLoading: false });\n        }\n      });\n  }\n\n\n  showDetailHandler = patientId => {\n\n    this.setState(prevState => {\n      const selectedPatient = prevState.patients.find(e => e._id === patientId);\n      this.context.selectedPatient = selectedPatient;\n      console.log(\"here:  \", selectedPatient);\n      return { selectedPatient: selectedPatient };\n    });\n  };\n\n\n  componentWillUnmount() {\n    this.isActive = false;\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        {\n          this.state.creating && (\n          <CreatePatientForm\n          canCancel\n            canConfirm\n            onCancel={this.modalCancelHandler}\n            onConfirm={this.modalConfirmHandler}\n            onSubmit={this.modalConfirmHandler}\n            confirmText=\"Confirm\"\n          />\n        )\n      }\n        {this.state.updating && (\n          <UpdatePatientForm\n          canCancel\n            canConfirm\n            onCancel={this.modalCancelHandler}\n            onConfirm={this.modalConfirmUpdateHandler}\n            confirmText=\"Confirm\"\n            user={this.context.selectedPatient}\n          />\n        )}\n        {this.state.isLoading === false &&\n          (<PatientDetail\n            authUserId={this.context.userId}\n            user={this.state.selectedPatient}\n            onEdit={this.startUpdatePatientHandler}\n        />)}\n\n        {this.context.token &&\n          (<div className=\"users-control\">\n            <p>Add New Patient</p>\n            <button className=\"btn\" onClick={this.startCreatePatientHandler}>\n              +\n            </button>\n          </div>\n        )}\n        {this.state.isLoading ? (\n          <Spinner />\n        ) : (\n          <PatientList\n            patients={this.state.patients}\n            authUserId={this.context.userId}\n            onViewDetail={this.showDetailHandler}\n          />\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default PatientsPage;\n"]},"metadata":{},"sourceType":"module"}