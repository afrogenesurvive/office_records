{"ast":null,"code":"var _jsxFileName = \"/Users/pedrojacob/Downloads/AMR/websites/office_records/ENT_EMR/frontend/src/pages/Users.js\";\nimport S3 from 'react-aws-s3';\nimport React, { Component } from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport Accordion from 'react-bootstrap/Accordion';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\nimport Nav from 'react-bootstrap/Nav';\nimport Card from 'react-bootstrap/Card';\nimport AuthContext from '../context/auth-context';\nimport UserList from '../components/Users/UserList/UserList';\nimport SearchUserList from '../components/Users/UserList/SearchUserList';\nimport UserDetail from '../components/Users/UserDetail';\nimport Spinner from '../components/Spinner/Spinner';\nimport SidebarPage from './Sidebar';\nimport SidebarControl from '../components/SidebarControl';\nimport AlertBox from '../components/AlertBox';\nimport LoadingOverlay from '../components/LoadingOverlay';\nimport AttachmentViewer from '../components/AttachmentViewer';\nimport PdfCreator from '../components/PdfCreator';\nimport CreateUserForm from '../components/Forms/CreateUserForm';\nimport UpdateUserForm from '../components/Forms/UpdateUserForm';\nimport UpdateUserFieldForm from '../components/Forms/UpdateUserFieldForm';\nimport UpdateUserAttendanceForm from '../components/Forms/UpdateUserAttendanceForm';\nimport UpdateUserAttachmentForm from '../components/Forms/UpdateUserAttachmentForm';\nimport UpdateUserLeaveForm from '../components/Forms/UpdateUserLeaveForm';\nimport SearchUserForm from '../components/Forms/SearchUserForm';\nimport SearchUserIdForm from '../components/Forms/SearchUserIdForm';\nimport SearchUserNameForm from '../components/Forms/SearchUserNameForm';\nimport SearchUserAttendanceDateForm from '../components/Forms/SearchUserAttendanceDateForm';\nimport SearchUserLeaveDateRangeForm from '../components/Forms/SearchUserLeaveDateRangeForm';\nimport './Users.css';\n\nclass UsersPage extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      creating: false,\n      updating: false,\n      deleting: false,\n      searching: false,\n      users: [],\n      searchUsers: [],\n      isLoading: false,\n      isSorting: false,\n      selectedUser: null,\n      userUpdateField: null,\n      userSearchField: null,\n      userSearchQuery: null,\n      canDelete: null,\n      userAlert: null,\n      overlay: false,\n      overlayStatus: \"test\",\n      file: null,\n      showAttachment: false,\n      showThisAttachmentFile: null,\n      showThisAttachmentType: null,\n      creatingDocument: false,\n      createPdf: false,\n      pdfData: null,\n      pdfType: null,\n      sidebarShow: true,\n      mCol1Size: 3,\n      mCol2Size: 9\n    };\n    this.isActive = true;\n\n    this.startCreateUserHandler = () => {\n      this.setState({\n        creating: true\n      });\n    };\n\n    this.startUpdateUserHandler = () => {\n      this.setState({\n        updating: true\n      });\n    };\n\n    this.startSearchUserHandler = () => {\n      this.setState({\n        searching: true\n      });\n    };\n\n    this.modalConfirmHandler = event => {\n      this.setState({\n        creating: false,\n        userAlert: \"Creating new user...\"\n      });\n      const email = event.target.formGridEmail.value;\n      const password = event.target.formGridPassword.value;\n      const name = event.target.formGridName.value;\n      const role = event.target.formGridRole.value;\n      const dob = event.target.formGridDob.value;\n      const phone = event.target.formGridPhone.value;\n      const addressNumber = event.target.formGridAddressNumber.value;\n      const addressStreet = event.target.formGridAddressStreet.value;\n      const addressTown = event.target.formGridAddressTown.value;\n      const addressParish = event.target.formGridAddressParish.value;\n      const addressPostOffice = event.target.formGridAddressPostOffice.value;\n      let employmentDate = event.target.formGridEmploymentDate.value;\n\n      if (event.target.formGridEmploymentDateTodayCheckbox.checked === true) {\n        employmentDate = new Date().toISOString().slice(0, 10);\n      }\n\n      if (event.target.staffCalendarEmploymentDate.value !== null && event.target.formGridEmploymentDateTodayCheckbox.checked !== true) {\n        console.log(\"fancyDate2\", new Date(event.target.staffCalendarEmploymentDate.value).toISOString().slice(0, 10));\n        employmentDate = new Date(event.target.staffCalendarEmploymentDate.value).toISOString().slice(0, 10);\n      }\n\n      let terminationDate = event.target.formGridTerminationDate.value;\n\n      if (event.target.formGridTerminationDateTodayCheckbox.checked === true) {\n        terminationDate = new Date().toISOString().slice(0, 10);\n      }\n\n      if (event.target.staffCalendarTerminationDate.value !== null && event.target.formGridTerminationDateTodayCheckbox.checked !== true) {\n        console.log(\"fancyDate2\", new Date(event.target.staffCalendarTerminationDate.value).toISOString().slice(0, 10));\n        terminationDate = new Date(event.target.staffCalendarTerminationDate.value).toISOString().slice(0, 10);\n      }\n\n      if (email.trim().length === 0 || password.trim().length === 0 || name.trim().length === 0 || role.trim().length === 0 || dob.trim().length === 0 || phone.trim().length === 0 || addressNumber.trim().length === 0 || addressStreet.trim().length === 0 || addressTown.trim().length === 0 || addressParish.trim().length === 0 || addressPostOffice.trim().length === 0 || employmentDate.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...Please try again...\"\n        });\n        return;\n      }\n\n      const token = this.context.token;\n      const userId = this.context.userId;\n      const requestBody = {\n        query: `\n          mutation {createUser(userInput: {email:\"${email}\",password:\"${password}\",name:\"${name}\",dob:\"${dob}\",addressNumber:${addressNumber},addressStreet:\"${addressStreet}\",addressTown:\"${addressTown}\",addressParish:\"${addressParish}\", addressPostOffice:\"${addressPostOffice}\",phone:\"${phone}\",role:\"${role}\",employmentDate:\"${employmentDate}\",terminationDate:\"${terminationDate}\"})\n          {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}\n        }`\n      }; // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        this.setState(prevState => {\n          const updatedUsers = [...prevState.users];\n          updatedUsers.push(resData.data.createUser);\n          return {\n            users: updatedUsers\n          };\n        });\n        this.context.users.push(resData.data.createUser);\n        const responseAlert = JSON.stringify(resData.data).slice(0, 8);\n        this.setState({\n          userAlert: responseAlert,\n          selectedUser: resData.data.createUser\n        });\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.modalConfirmUpdateHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedUserId = this.context.selectedUser._id;\n\n      if (userId !== selectedUserId && this.context.user.role !== 'admin') {\n        this.setState({\n          userAlert: \"Not the creator or Admin! No edit permission!!\"\n        });\n        selectedUserId = null;\n      }\n\n      let email = event.target.formGridEmail.value;\n      let password = event.target.formGridPassword.value;\n      let name = event.target.formGridName.value;\n      let role = this.context.selectedUser.role;\n      let dob = event.target.formGridDob.value;\n      let phone = event.target.formGridPhone.value;\n      let addressNumber = event.target.formGridAddressNumber.value;\n      let addressStreet = event.target.formGridAddressStreet.value;\n      let addressTown = event.target.formGridAddressTown.value;\n      let addressParish = event.target.formGridAddressParish.value;\n      let addressPostOffice = event.target.formGridAddressPostOffice.value;\n      let employmentDate = event.target.formGridEmploymentDate.value;\n\n      if (event.target.formGridEmploymentDateTodayCheckbox.checked === true) {\n        employmentDate = new Date().toISOString().slice(0, 10);\n      }\n\n      if (event.target.staffCalendarEmploymentDate.value !== null && event.target.formGridEmploymentDateTodayCheckbox.checked !== true) {\n        console.log(\"fancyDate2\", new Date(event.target.staffCalendarEmploymentDate.value).toISOString().slice(0, 10));\n        employmentDate = new Date(event.target.staffCalendarEmploymentDate.value).toISOString().slice(0, 10);\n      }\n\n      let terminationDate = event.target.formGridTerminationDate.value;\n\n      if (event.target.formGridTerminationDateTodayCheckbox.checked === true) {\n        terminationDate = new Date().toISOString().slice(0, 10);\n      }\n\n      if (event.target.staffCalendarTerminationDate.value !== null && event.target.formGridTerminationDateTodayCheckbox.checked !== true) {\n        console.log(\"fancyDate2\", new Date(event.target.staffCalendarTerminationDate.value).toISOString().slice(0, 10));\n        terminationDate = new Date(event.target.staffCalendarTerminationDate.value).toISOString().slice(0, 10);\n      }\n\n      if (email.trim().length === 0) {\n        email = this.context.selectedUser.email;\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n      }\n\n      if (password.trim().length === 0) {\n        password = this.context.selectedUser.password;\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n      }\n\n      if (name.trim().length === 0) {\n        name = this.context.selectedUser.name;\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n      } // if (role.trim().length === 0) {\n      //   console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      //   role = this.state.selectedUser.role;\n      // }\n\n\n      if (dob.trim().length === 0) {\n        dob = this.context.selectedUser.dob;\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n      }\n\n      if (phone.trim().length === 0) {\n        phone = this.context.selectedUser.phone;\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n      }\n\n      if (addressNumber.trim().length === 0) {\n        addressNumber = this.context.selectedUser.address.number;\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n      }\n\n      if (addressStreet.trim().length === 0) {\n        addressStreet = this.context.selectedUser.address.street;\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n      }\n\n      if (addressTown.trim().length === 0) {\n        addressTown = this.context.selectedUser.address.town;\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n      }\n\n      if (addressParish.trim().length === 0) {\n        addressParish = this.context.selectedUser.address.parish;\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n      }\n\n      if (addressPostOffice.trim().length === 0) {\n        addressPostOffice = this.context.selectedUser.address.postOffice;\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n      }\n\n      if (employmentDate.trim().length === 0) {\n        employmentDate = this.context.selectedUser.employmentDate;\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n      }\n\n      if (terminationDate.trim().length === 0) {\n        terminationDate = this.context.selectedUser.terminationDate;\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n      }\n\n      this.setState({\n        userAlert: \"updating user profile...\"\n      });\n      const requestBody = {\n        query: `\n      mutation {updateUser(userId:\"${userId}\",selectedUserId:\"${selectedUserId}\",userInput: {email:\"${email}\",password:\"${password}\",name:\"${name}\",dob:\"${dob}\",addressNumber:${addressNumber},addressStreet:\"${addressStreet}\",addressTown:\"${addressTown}\",addressParish:\"${addressParish}\", addressPostOffice:\"${addressPostOffice}\",phone:\"${phone}\",role:\"${role}\",employmentDate:\"${employmentDate}\",terminationDate:\"${terminationDate}\"})\n      {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n        `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        // const updatedUser = resData.data.updateUser;\n        // this.setState({user: updatedUser})\n        this.state.users.push(resData.data.updateUser);\n        this.context.users = this.state.users;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchUsers();\n        this.setState({\n          userAlert: responseAlert,\n          selectedUser: resData.data.updateUser,\n          user: resData.data.updateUser\n        });\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.modalConfirmUpdateFieldHandler = event => {\n      this.setState({\n        updating: false,\n        userAlert: \"Updating your profile by field...\"\n      });\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedUserId = this.context.selectedUser._id;\n      let field = null;\n      let query = event.target.formGridQuery.value;\n\n      if (event.target.formGridFieldSelect.value === \"select\") {\n        field = event.target.formGridField.value;\n      } else {\n        field = event.target.formGridFieldSelect.value;\n      }\n\n      const requestBody = {\n        query: `\n        mutation{updateUserField(userId:\"${userId}\",selectedUserId:\"${selectedUserId}\",field:\"${field}\",query:\"${query}\")\n        {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}\n      }\n      `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const updatedUserId = resData.data.updateUserField._id;\n        const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n        const updatedUserPos = this.state.users.indexOf(updatedUser);\n        const slicedArray = this.state.users.splice(updatedUserPos, 1);\n        this.state.users.push(resData.data.updateUserField);\n        this.context.users = this.state.users;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert,\n          selectedUser: resData.data.updateUserField\n        });\n        this.fetchUsers();\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updateUserAttendanceHandler = event => {\n      this.setState({\n        updating: false,\n        userUpdateField: null,\n        userAlert: \"adding user attendance item...\"\n      });\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedUserId = this.context.selectedUser._id;\n\n      if (userId !== selectedUserId && this.context.user.role !== \"admin\") {\n        this.setState({\n          userAlert: \"Not the creator or Admin! No edit permission!!\"\n        });\n        selectedUserId = null;\n      }\n\n      let attendanceDate = event.target.formGridAttendanceDate.value;\n\n      if (event.target.formGridAttendanceDateTodayCheckbox.checked === true) {\n        console.log(\"1\");\n        attendanceDate = new Date().toISOString().slice(0, 10);\n      }\n\n      if (event.target.staffAttendanceCalendarDate.value !== null && event.target.formGridAttendanceDateTodayCheckbox.checked !== true) {\n        console.log(\"fancyDate2\", new Date(event.target.staffAttendanceCalendarDate.value).toISOString().slice(0, 10));\n        attendanceDate = new Date(event.target.staffAttendanceCalendarDate.value).toISOString().slice(0, 10);\n      }\n\n      let attendanceStatus = event.target.formGridAttendanceStatus.value;\n      let attendanceDescription = event.target.formGridAttendanceDescription.value;\n\n      if (attendanceDate.trim().length === 0 || attendanceStatus.trim().length === 0) {\n        return;\n      }\n\n      const requestBody = {\n        query: `\n        mutation {updateUserAttendance(userId:\"${userId}\", selectedUserId:\"${selectedUserId}\",userInput:{attendanceDate:\"${attendanceDate}\",attendanceStatus:\"${attendanceStatus}\",attendanceDescription:\"${attendanceDescription}\"})\n        {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n      `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const updatedUserId = resData.data.updateUserAttendance._id;\n        const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n        const updatedUserPos = this.state.users.indexOf(updatedUser);\n        const slicedArray = this.state.users.splice(updatedUserPos, 1);\n        this.state.users.push(resData.data.updateUserAttendance);\n        this.context.users = this.state.users;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.fetchUsers();\n        this.setState({\n          userAlert: responseAlert,\n          selectedUser: resData.data.updateUserAttendance\n        });\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updateUserAttachmentHandler = event => {\n      this.setState({\n        updating: false,\n        userUpdateField: null,\n        userAlert: \"adding user attatchment item...\"\n      });\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedUserId = this.context.selectedUser._id;\n\n      if (userId !== selectedUserId && this.context.user.role !== \"admin\") {\n        this.setState({\n          userAlert: \"Not the creator or Admin! No edit permission!!\"\n        });\n        selectedUserId = null;\n      }\n\n      let attachmentFormat = event.target.formGridAttachmentFormat.value;\n      let attachmentPath = \"uploads/staff/\" + selectedUserId + \"/attachments\";\n      let file = AuthContext._currentValue.file;\n      const config = {\n        bucketName: this.context.creds.s3.bucketName,\n        dirName: attachmentPath,\n        region: this.context.creds.s3.region,\n        accessKeyId: this.context.creds.s3.accessKeyId,\n        secretAccessKey: this.context.creds.s3.secretAccessKey\n      };\n      const ReactS3Client = new S3(config);\n      const newFileName = file.name;\n      const attachmentName = newFileName;\n      this.setState({\n        userAlert: \"uploading attachment ...\"\n      });\n      ReactS3Client.uploadFile(file, newFileName).then(data => {\n        console.log(data);\n        this.setState({\n          userAlert: \"attachment upload success!\"\n        });\n      }).catch(err => {\n        console.error(err);\n        this.setState({\n          userAlert: \"upload error:  \" + err\n        });\n      });\n\n      if (attachmentName.trim().length === 0 || attachmentFormat.trim().length === 0 || attachmentPath.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!! try again\"\n        });\n        return;\n      }\n\n      const requestBody = {\n        query: `\n        mutation{updateUserAttachment(userId:\"${userId}\",selectedUserId:\"${selectedUserId}\",userInput:{attachmentName:\"${attachmentName}\",attachmentFormat:\"${attachmentFormat}\",attachmentPath:\"${attachmentPath}\"})\n        {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n      `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const updatedUserId = resData.data.updateUserAttachment._id;\n        const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n        const updatedUserPos = this.state.users.indexOf(updatedUser);\n        const slicedArray = this.state.users.splice(updatedUserPos, 1);\n        this.state.users.push(resData.data.updateUserAttachment);\n        this.context.users = this.state.users;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.fetchUsers();\n        this.setState({\n          userAlert: responseAlert,\n          selectedUser: resData.data.updateUserAttachment\n        });\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updateUserLeaveHandler = event => {\n      this.setState({\n        updating: false,\n        userUpdateField: null,\n        userAlert: \"adding user leave item...\"\n      });\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedUserId = this.context.selectedUser._id;\n\n      if (userId !== selectedUserId && this.context.user.role !== \"admin\") {\n        this.setState({\n          userAlert: \"Not the creator or Admin! No edit permission!!\"\n        });\n        selectedUserId = null;\n      }\n\n      let leaveType = event.target.formGridLeaveType.value;\n      let leaveTitle = event.target.formGridLeaveTitle.value;\n      let leaveStartDate = event.target.formGridLeaveStartDate.value;\n\n      if (event.target.formGridLeaveStartDateTodayCheckbox.checked === true) {\n        leaveStartDate = new Date().toISOString().slice(0, 10);\n      }\n\n      if (event.target.staffLeaveCalendarStartDate.value !== null && event.target.formGridLeaveStartDateTodayCheckbox.checked !== true) {\n        console.log(\"fancyDate2\", new Date(event.target.staffLeaveCalendarStartDate.value).toISOString().slice(0, 10));\n        leaveStartDate = new Date(event.target.staffLeaveCalendarStartDate.value).toISOString().slice(0, 10);\n      }\n\n      let leaveEndDate = event.target.formGridLeaveEndDate.value;\n\n      if (event.target.formGridLeaveEndDateTodayCheckbox.checked === true) {\n        leaveEndDate = new Date().toISOString().slice(0, 10);\n      }\n\n      if (event.target.staffLeaveCalendarEndDate.value !== null && event.target.formGridLeaveEndDateTodayCheckbox.checked !== true) {\n        console.log(\"fancyDate2a\", new Date(event.target.staffLeaveCalendarEndDate.value).toISOString().slice(0, 10));\n        leaveEndDate = new Date(event.target.staffLeaveCalendarEndDate.value).toISOString().slice(0, 10);\n      }\n\n      if (leaveType.trim().length === 0 || leaveTitle.trim().length === 0 || leaveStartDate.trim().length === 0 || leaveEndDate.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...try again\"\n        });\n        return;\n      }\n\n      const requestBody = {\n        query: `\n        mutation{updateUserLeave(userId:\"${userId}\",selectedUserId:\"${selectedUserId}\",userInput:{leaveType:\"${leaveType}\",leaveTitle:\"${leaveTitle}\",leaveStartDate:\"${leaveStartDate}\",leaveEndDate:\"${leaveEndDate}\"})\n        {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n      `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const updatedUserId = resData.data.updateUserLeave._id;\n        const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n        const updatedUserPos = this.state.users.indexOf(updatedUser);\n        const slicedArray = this.state.users.splice(updatedUserPos, 1);\n        this.state.users.push(resData.data.updateUserLeave);\n        this.context.users = this.state.users;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25); // this.setState({ userAlert: responseAlert})\n\n        this.fetchUsers();\n        this.setState({\n          userAlert: responseAlert,\n          selectedUser: resData.data.updateUserLeave\n        });\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.modalConfirmSearchHandler = event => {\n      let userId = this.context.userId;\n      const token = this.context.token;\n      let field = null;\n      let query = event.target.formBasicQuery.value;\n\n      if (event.target.formBasicFieldSelect.value === \"select\") {\n        field = event.target.formBasicField.value;\n      } else {\n        field = event.target.formBasicFieldSelect.value;\n      }\n\n      this.setState({\n        userSearchField: field,\n        userSearchQuery: query,\n        searching: false,\n        userAlert: \"Searching for User...\"\n      });\n\n      if (field.trim().length === 0 || query.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...Please try again...\"\n        });\n        return;\n      }\n\n      const search = {\n        field,\n        query\n      };\n      const requestBody = {\n        query: `\n        query {getUserField(userId:\"${userId}\",field:\"${field}\",query:\"${query}\")\n        {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n      `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const responseAlert = JSON.stringify(resData.data).slice(0, 8);\n        const searchUsers = resData.data.getUserField;\n        this.setState({\n          searchUsers: searchUsers,\n          userAlert: responseAlert\n        }); // this.fetchUsers();\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.modalConfirmSearchIdHandler = event => {\n      let userId = this.context.userId;\n      const token = this.context.token;\n      this.setState({\n        searching: false,\n        userAlert: \"Searching for Staff by Id #...\"\n      });\n      let selectedUserId = event.target.formBasicId.value;\n      const requestBody = {\n        query: `\n        query {getUserId(userId:\"${userId}\",selectedUserId:\"${selectedUserId}\")\n        {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n      `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        const searchUsers = resData.data.getUserId;\n        this.setState({\n          searchUsers: [searchUsers],\n          userAlert: responseAlert\n        }); // this.fetchUsers();\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.modalConfirmSearchAttendanceDateHandler = event => {\n      let userId = this.context.userId;\n      const token = this.context.token;\n      this.setState({\n        searching: false,\n        userAlert: \"Searching for user by Attendance Date...\"\n      });\n      let attendanceDate = event.target.formBasicDate.value;\n\n      if (event.target.formBasicDateTodayCheckbox.checked === true) {\n        attendanceDate = new Date().toISOString().slice(0, 10);\n      }\n\n      if (event.target.staffAttendanceCalendarDate.value !== null && event.target.formBasicDateTodayCheckbox.checked !== true) {\n        console.log(\"fancyDate2\", new Date(event.target.staffAttendanceCalendarDate.value).toISOString().slice(0, 10));\n        attendanceDate = new Date(event.target.staffAttendanceCalendarDate.value).toISOString().slice(0, 10);\n      }\n\n      const requestBody = {\n        query: `\n        query {getUserAttendanceDate(userId:\"${userId}\",attendanceDate:\"${attendanceDate}\")\n        {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n      `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const responseAlert = JSON.stringify(resData.data).slice(0, 8);\n        const searchUsers = resData.data.getUserAttendanceDate;\n        this.setState({\n          searchUsers: searchUsers,\n          userAlert: responseAlert\n        }); // this.fetchUsers();\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.modalConfirmSearchLeaveDateRangeHandler = event => {\n      this.setState({\n        searching: false,\n        userAlert: \"Searching for Staff by Leave Date range...\"\n      });\n      let userId = this.context.userId;\n      const token = this.context.token;\n      let startDate = event.target.formBasicStartDate.value;\n\n      if (event.target.staffLeaveStartCalendarDate.value !== null) {\n        console.log(\"fancyDate2\", new Date(event.target.staffLeaveStartCalendarDate.value).toISOString().slice(0, 10));\n        startDate = new Date(event.target.staffLeaveStartCalendarDate.value).toISOString().slice(0, 10);\n      }\n\n      let endDate = event.target.formBasicEndDate.value;\n\n      if (event.target.staffLeaveEndCalendarDate.value !== null) {\n        console.log(\"fancyDate2\", new Date(event.target.staffLeaveEndCalendarDate.value).toISOString().slice(0, 10));\n        endDate = new Date(event.target.staffLeaveEndCalendarDate.value).toISOString().slice(0, 10);\n      }\n\n      const requestBody = {\n        query: `\n        query{getUserLeaveDateRange(userId:\"${userId}\",startDate:\"${startDate}\",endDate:\"${endDate}\")\n        {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n      `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const responseAlert = JSON.stringify(resData.data).slice(0, 8);\n        const searchUsers = resData.data.getUserLeaveDateRange;\n        this.setState({\n          searchUsers: searchUsers,\n          userAlert: responseAlert\n        }); // this.fetchUsers();\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.modalConfirmSearchNameHandler = event => {\n      this.setState({\n        searching: false,\n        userAlert: \"Searching users by name ...\"\n      });\n      let users = this.state.users;\n      const regex = new RegExp(event.target.formBasicName.value, \"i\");\n      let result = users.filter(user => user.name.match(regex));\n      this.setState({\n        searchUsers: result\n      });\n    };\n\n    this.modalCancelHandler = () => {\n      this.setState({\n        creating: false,\n        updating: false,\n        deleting: false,\n        searching: false\n      });\n    };\n\n    this.fetchUsersAsc = () => {\n      this.setState({\n        userAlert: \"Fetching Staff Master List in Ascending order...\"\n      });\n      const userId = this.context.userId;\n      const requestBody = {\n        query: `\n          query {usersNameAsc (userId:\"${userId}\")\n          {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n        `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + this.context.token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          this.context.userAlert = 'Failed!';\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const users = resData.data.usersNameAsc;\n        const responseAlert = JSON.stringify(resData.data).slice(0, 8);\n        this.setState({\n          userAlert: responseAlert,\n          users: users\n        });\n        this.context.users = this.state.users;\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.fetchUsersDesc = () => {\n      this.setState({\n        userAlert: \"Fetching Staff Master List in Descending order ...\"\n      });\n      const userId = this.context.userId;\n      const requestBody = {\n        query: `\n          query {usersNameDesc (userId:\"${userId}\")\n          {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n        `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + this.context.token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          this.context.userAlert = 'Failed!';\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const users = resData.data.usersNameDesc;\n        const responseAlert = JSON.stringify(resData.data).slice(0, 8);\n        this.setState({\n          userAlert: responseAlert,\n          users: users\n        });\n        this.context.users = this.state.users;\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.modalDeleteHandler = () => {\n      const userId = this.context.userId;\n      const selectedUserId = this.context.selectedUser._id;\n\n      if (this.context.user.role !== 'admin') {\n        this.setState({\n          userAlert: \"Not the Admin! No edit permission!!\"\n        });\n      }\n\n      this.setState({\n        deleting: true,\n        userAlert: \"deleting user..\"\n      });\n      const requestBody = {\n        query: `\n        mutation {\n          deleteUser(userId: \"${userId}\", selectedUserId: \"${selectedUserId}\")\n          {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}\n        }`\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + this.context.token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const responseAlert = JSON.stringify(resData.data).slice(0, 8);\n        this.setState({\n          userAlert: responseAlert\n        });\n        let deletedUser = resData.data.deleteUser;\n        let deletedUserId = deletedUser._id;\n        deletedUser = this.state.users.find(e => e._id === deletedUserId);\n        const deletedUserPos = this.state.users.indexOf(deletedUser);\n        const slicedArray = this.state.users.splice(deletedUserPos, 1);\n        this.setState({\n          deleting: false\n        });\n        this.fetchUsers();\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n\n        if (this.isActive) {\n          this.setState({\n            deleting: false\n          });\n        }\n      });\n    };\n\n    this.deleteUserAttendanceItem = props => {\n      this.setState({\n        userAlert: \"Deleting Staff Attendance Item...\"\n      });\n      let token = this.context.token;\n      let userId = this.context.userId;\n      let selectedUserId = this.state.selectedUser._id;\n      let date = new Date(props.date.substr(0, 10) * 1000).toISOString().slice(0, 10);\n      const requestBody = {\n        query: `\n     mutation{deleteUserAttendance(userId:\"${userId}\",selectedUserId:\"${selectedUserId}\",attendanceDate:\"${date}\")\n     {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n  `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const updatedUserId = resData.data.deleteUserAttendance._id;\n        const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n        const updatedUserPos = this.state.users.indexOf(updatedUser);\n        const slicedArray = this.state.users.splice(updatedUserPos, 1);\n        this.state.users.push(resData.data.deleteUserAttendance);\n        this.context.users = this.state.users;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchUsers();\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.deleteUserLeaveItem = props => {\n      this.setState({\n        userAlert: \"Deleting Staff Leave Item...\"\n      });\n      let token = this.context.token;\n      let userId = this.context.userId;\n      let selectedUserId = this.state.selectedUser._id;\n      const requestBody = {\n        query: `\n     mutation{deleteUserLeave(userId:\"${userId}\",selectedUserId:\"${selectedUserId}\",leaveTitle:\"${props.title}\")\n     {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n  `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedUser = resData.data.deleteUserLeave;\n        const updatedUserId = resData.data.deleteUserLeave._id;\n        const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n        const updatedUserPos = this.state.users.indexOf(updatedUser);\n        const slicedArray = this.state.users.splice(updatedUserPos, 1);\n        this.state.users.push(resData.data.deleteUserLeave);\n        this.context.users = this.state.users;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchUsers();\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.deleteUserAttachmentItem = props => {\n      this.setState({\n        userAlert: \"Deleting Staff Attachment Item...\"\n      });\n      let token = this.context.token;\n      let userId = this.context.userId;\n      let selectedUserId = this.state.selectedUser._id; // console.log(`\n      //   deleting from s3...\n      //   file.name: ${props.name},\n      //   `);\n      //\n      //   const config = {\n      //     bucketName: this.context.creds.s3.bucketName,\n      //     dirName: props.path,\n      //     region: this.context.creds.s3.region,\n      //     accessKeyId: this.context.creds.s3.accessKeyId,\n      //     secretAccessKey: this.context.creds.s3.secretAccessKey,\n      //   }\n      // const ReactS3Client = new S3(config);\n      // const filename = props.name;\n      // // const attachmentName = newFileName;\n      // //\n      // S3FileUpload\n      // .deleteFile(filename, config)\n      // .then(response => console.log(response))\n      // .catch(err => console.error(err))\n\n      const requestBody = {\n        query: `\n       mutation{deleteUserAttachment(userId:\"${userId}\",selectedUserId:\"${selectedUserId}\",attachmentName:\"${props.name}\")\n       {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedUser = resData.data.deleteUserAttachment;\n        const updatedUserId = resData.data.deleteUserAttachment._id;\n        const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n        const updatedUserPos = this.state.users.indexOf(updatedUser);\n        const slicedArray = this.state.users.splice(updatedUserPos, 1);\n        this.state.users.push(resData.data.deleteUserAttachment);\n        this.context.users = this.state.users;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchUsers();\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.showDetailHandler = userId => {\n      this.setState(prevState => {\n        const selectedUser = prevState.users.find(e => e._id === userId);\n        this.context.selectedUser = selectedUser;\n        this.setState({\n          selectedUser: selectedUser\n        });\n        return {\n          selectedUser: selectedUser\n        };\n      });\n    };\n\n    this.onViewAttachment = attachment => {\n      this.setState({\n        showAttachment: true\n      });\n      const file = \"https://ent-emr-bucket.s3-us-east-2.amazonaws.com/\" + attachment.path + \"/\" + attachment.name;\n      const type = attachment.format;\n      this.setState({\n        showThisAttachmentFile: file,\n        showThisAttachmentType: type\n      });\n    };\n\n    this.closeAttachmentView = () => {\n      this.setState({\n        showAttachment: false\n      });\n    };\n\n    this.createPdf = user => {\n      const pdfData = {\n        title: \"This pdf is supplied with Staff data...\",\n        user: {\n          _id: user._id,\n          email: user.email,\n          password: user.password,\n          name: user.name,\n          dob: user.dob,\n          address: {\n            number: user.address.number,\n            street: user.address.street,\n            town: user.address.town,\n            parish: user.address.parish,\n            postOffice: user.address.postOffice\n          },\n          phone: user.phone,\n          role: user.role,\n          employmentDate: user.employmentDate,\n          terminationDate: user.terminationDate,\n          attachments: user.attachments,\n          attendance: user.atttendance,\n          leave: user.leave\n        }\n      };\n      this.setState({\n        createPdf: true,\n        pdfData: pdfData\n      });\n    };\n\n    this.closePdfCreator = () => {\n      this.setState({\n        createPdf: false,\n        pdfData: null\n      });\n    };\n\n    this.showSidebar = () => {\n      console.log(`\n      showing sidebar...\n      `);\n      this.setState({\n        sidebarShow: true,\n        mCol2Size: 9\n      });\n    };\n\n    this.hideSidebar = () => {\n      console.log(`\n      hiding sidebar...\n      `);\n      this.setState({\n        sidebarShow: false,\n        mCol2Size: 11\n      });\n    };\n  }\n\n  componentDidMount() {\n    if (this.context.user.name === \"Lord-of-the-Manor\") {\n      this.setState({\n        canDelete: true\n      });\n    }\n\n    if (JSON.stringify(this.context.selectedUser) !== \"{}\") {\n      this.setState({\n        selectedUser: this.context.selectedUser\n      });\n    }\n\n    this.fetchUsers();\n  }\n\n  fetchUsers() {\n    const userId = this.context.userId;\n    this.setState({\n      isLoading: true,\n      userAlert: \"Fetching Staff Master List...\"\n    });\n    const requestBody = {\n      query: `\n          query {users (userId:\"${userId}\")\n          {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n        `\n    };\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    }).then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        this.context.userAlert = 'Failed!';\n        throw new Error('Failed!');\n      }\n\n      return res.json();\n    }).then(resData => {\n      const responseAlert = JSON.stringify(resData.data).slice(0, 8);\n      this.setState({\n        userAlert: responseAlert,\n        users: resData.data.users,\n        isLoading: false\n      });\n      this.context.users = this.state.users;\n    }).catch(err => {\n      this.setState({\n        userAlert: err\n      });\n\n      if (this.isActive) {\n        this.setState({\n          isLoading: false\n        });\n      }\n    });\n  }\n\n  updateUserSpecial(event) {\n    const field = event.target.value;\n    this.setState({\n      userUpdateField: field\n    });\n  }\n\n  userSearchClearlHandler() {\n    this.setState({\n      searchUsers: [],\n      userAlert: \"clearing user search results\"\n    });\n  }\n\n  componentWillUnmount() {\n    this.isActive = false;\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1243\n      },\n      __self: this\n    }, this.state.showAttachment === true && React.createElement(AttachmentViewer, {\n      onCloseAttachmentView: this.closeAttachmentView,\n      attachmentFile: this.state.showThisAttachmentFile,\n      attachmentType: this.state.showThisAttachmentType,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1245\n      },\n      __self: this\n    }), this.state.creatingDocument === true && React.createElement(PdfCreator, {\n      pdfType: this.state.pdfType,\n      pdfData: this.state.pdfData,\n      onClosePdfCreator: this.closePdfCreator,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1252\n      },\n      __self: this\n    }), React.createElement(AlertBox, {\n      authUserId: this.context.userId,\n      alert: this.state.userAlert,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1258\n      },\n      __self: this\n    }), React.createElement(SidebarControl, {\n      onShowSidebar: this.showSidebar,\n      onHideSidebar: this.hideSidebar,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1262\n      },\n      __self: this\n    }), this.state.overlay === true && React.createElement(LoadingOverlay, {\n      status: this.state.overlayStatus,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1267\n      },\n      __self: this\n    }), React.createElement(Accordion, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1272\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1274\n      },\n      __self: this\n    }, this.state.sidebarShow === true && React.createElement(Col, {\n      md: 3,\n      className: \"MasterCol1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1277\n      },\n      __self: this\n    }, React.createElement(SidebarPage, {\n      you: this.state.selectedUser,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1278\n      },\n      __self: this\n    })), React.createElement(Col, {\n      md: this.state.mCol2Size,\n      className: \"MasterCol2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1284\n      },\n      __self: this\n    }, React.createElement(Container, {\n      className: \"containerCombinedDetail\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1285\n      },\n      __self: this\n    }, React.createElement(Tab.Container, {\n      id: \"left-tabs-example\",\n      defaultActiveKey: \"userDetail\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1286\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1287\n      },\n      __self: this\n    }, React.createElement(Col, {\n      sm: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1288\n      },\n      __self: this\n    }, React.createElement(Nav, {\n      variant: \"pills\",\n      className: \"flex-column\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1289\n      },\n      __self: this\n    }, React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1290\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"MasterList\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1291\n      },\n      __self: this\n    }, \"MASTER LIST\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1293\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"disabled\",\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1294\n      },\n      __self: this\n    }, \"Search:\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1296\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"SearchInput\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1297\n      },\n      __self: this\n    }, \"Input\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1299\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"SearchResult\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1300\n      },\n      __self: this\n    }, \"Results\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1302\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"userDetail\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1303\n      },\n      __self: this\n    }, \"Selected\")), this.context.user.role === \"admin\" && React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1306\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"userCreate\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1307\n      },\n      __self: this\n    }, \"Create New\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1310\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"disabled\",\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1311\n      },\n      __self: this\n    }, \"Edit:\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1313\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"userEditDemographics\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1314\n      },\n      __self: this\n    }, \"Demographics\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1316\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"userEditField\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1317\n      },\n      __self: this\n    }, \"Single Field\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1319\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"disabled\",\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1320\n      },\n      __self: this\n    }, \"Add:\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1322\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"userEditAttendance\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1323\n      },\n      __self: this\n    }, \"Attendance\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1325\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"userEditLeave\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1326\n      },\n      __self: this\n    }, \"Leave\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1328\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"userEditAttachment\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1329\n      },\n      __self: this\n    }, \"Attachment\")))), React.createElement(Col, {\n      sm: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1335\n      },\n      __self: this\n    }, React.createElement(Tab.Content, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1336\n      },\n      __self: this\n    }, React.createElement(Tab.Pane, {\n      eventKey: \"userDetail\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1337\n      },\n      __self: this\n    }, this.state.selectedUser === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1339\n      },\n      __self: this\n    }, \"Select a Staff member from the Master List\"), this.state.isLoading === false && this.state.selectedUser !== null && React.createElement(UserDetail, {\n      authUserId: this.context.userId,\n      AuthContext: this.context,\n      user: this.state.selectedUser,\n      onEdit: this.startUpdateUserHandler,\n      canDelete: this.state.canDelete,\n      onDelete: this.modalDeleteHandler,\n      attendanceDelete: this.deleteUserAttendanceItem,\n      leaveDelete: this.deleteUserLeaveItem,\n      attachmentDelete: this.deleteUserAttachmentItem,\n      onViewAttachment: this.onViewAttachment,\n      onCreatePdf: this.createPdf,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1346\n      },\n      __self: this\n    })), this.context.user.role === \"admin\" && React.createElement(Tab.Pane, {\n      eventKey: \"userCreate\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1363\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"outline-primary\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.startCreateUserHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1364\n      },\n      __self: this\n    }, \"Create a NEW Staff Profile\"), this.state.creating && React.createElement(CreateUserForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmHandler,\n      onSubmit: this.modalConfirmHandler,\n      confirmText: \"Confirm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1366\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"userEditDemographics\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1380\n      },\n      __self: this\n    }, this.state.selectedUser === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      className: \"confirmEditButton\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1382\n      },\n      __self: this\n    }, \"Select a Staff member from the Master List\"), this.state.selectedUser !== null && this.context.user.role === \"admin\" && React.createElement(Button, {\n      variant: \"outline-primary\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.startUpdateUserHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1389\n      },\n      __self: this\n    }, \"Edit Demographics as Admin\"), this.state.selectedUser !== null && this.state.selectedUser._id === this.context.user._id && React.createElement(Button, {\n      variant: \"outline-primary\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.startUpdateUserHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1394\n      },\n      __self: this\n    }, \"Edit Demographics\"), this.state.selectedUser !== null && this.state.selectedUser._id === this.context.user._id && React.createElement(Button, {\n      variant: \"outline-danger\",\n      className: \"confirmEditButton\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1398\n      },\n      __self: this\n    }, \"Your Profile\"), this.state.selectedUser !== null && this.state.selectedUser._id !== this.context.user._id && React.createElement(Button, {\n      variant: \"outline-danger\",\n      className: \"confirmEditButton\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1404\n      },\n      __self: this\n    }, \"Not my profile\"), this.state.updating && this.state.selectedUser !== null && React.createElement(UpdateUserForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmUpdateHandler,\n      confirmText: \"Confirm\",\n      user: this.context.selectedUser,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1411\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"userEditField\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1423\n      },\n      __self: this\n    }, this.state.selectedUser === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      className: \"confirmEditButton\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1425\n      },\n      __self: this\n    }, \"Select a Staff member from the Master List\"), this.state.selectedUser !== null && this.context.user.role === \"admin\" && React.createElement(Button, {\n      variant: \"outline-primary\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.startUpdateUserHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1433\n      },\n      __self: this\n    }, \"Edit Field as Admin\"), this.state.selectedUser !== null && this.state.selectedUser._id === this.context.user._id && React.createElement(Button, {\n      variant: \"outline-primary\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.startUpdateUserHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1438\n      },\n      __self: this\n    }, \"Edit a Single Field\"), this.state.selectedUser !== null && this.state.selectedUser._id === this.context.user._id && React.createElement(Button, {\n      variant: \"outline-success\",\n      className: \"confirmEditButton\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1442\n      },\n      __self: this\n    }, \"Your Profile\"), this.state.selectedUser !== null && this.state.selectedUser._id !== this.context.user._id && React.createElement(Button, {\n      variant: \"outline-danger\",\n      className: \"confirmEditButton\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1448\n      },\n      __self: this\n    }, \"Not my profile\"), this.state.updating && this.state.selectedUser !== null && React.createElement(UpdateUserFieldForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmUpdateFieldHandler,\n      confirmText: \"Confirm\",\n      user: this.state.selectedUser,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1455\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"userEditAttendance\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1467\n      },\n      __self: this\n    }, this.state.selectedUser === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      className: \"confirmEditButton\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1469\n      },\n      __self: this\n    }, \"Select a Staff member from the Master List below\"), this.state.selectedUser !== null && this.context.user.role === \"admin\" && React.createElement(Button, {\n      variant: \"outline-primary\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      value: \"attendance\",\n      onClick: this.updateUserSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1477\n      },\n      __self: this\n    }, \"Add Attendance as Admin\"), this.state.selectedUser !== null && this.state.selectedUser._id === this.context.user._id && React.createElement(Button, {\n      variant: \"outline-primary\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      value: \"attendance\",\n      onClick: this.updateUserSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1482\n      },\n      __self: this\n    }, \"Add Attendance\"), this.state.selectedUser !== null && this.state.selectedUser._id === this.context.user._id && React.createElement(Button, {\n      variant: \"outline-success\",\n      className: \"confirmEditButton\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1486\n      },\n      __self: this\n    }, \"Your Profile\"), this.state.selectedUser !== null && this.state.selectedUser._id !== this.context.user._id && React.createElement(Button, {\n      variant: \"outline-danger\",\n      className: \"confirmEditButton\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1492\n      },\n      __self: this\n    }, \"Not my profile\"), this.state.userUpdateField === 'attendance' && this.state.selectedUser !== null && React.createElement(UpdateUserAttendanceForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updateUserAttendanceHandler,\n      confirmText: \"Confirm\",\n      user: this.state.selectedUser,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1500\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"userEditLeave\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1512\n      },\n      __self: this\n    }, this.state.selectedUser === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      className: \"confirmEditButton\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1514\n      },\n      __self: this\n    }, \"Select a Staff member from the Master List\"), this.state.selectedUser !== null && this.context.user.role === \"admin\" && React.createElement(Button, {\n      variant: \"outline-primary\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      value: \"leave\",\n      onClick: this.updateUserSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1522\n      },\n      __self: this\n    }, \"Add Leave as Admin\"), this.state.selectedUser !== null && this.state.selectedUser._id === this.context.user._id && React.createElement(Button, {\n      variant: \"outline-primary\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      value: \"leave\",\n      onClick: this.updateUserSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1527\n      },\n      __self: this\n    }, \"Add Leave\"), this.state.selectedUser !== null && this.state.selectedUser._id === this.context.user._id && React.createElement(Button, {\n      variant: \"outline-success\",\n      className: \"confirmEditButton\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1531\n      },\n      __self: this\n    }, \"Your Profile\"), this.state.selectedUser !== null && this.state.selectedUser._id !== this.context.user._id && React.createElement(Button, {\n      variant: \"outline-danger\",\n      className: \"confirmEditButton\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1537\n      },\n      __self: this\n    }, \"Not my profile\"), this.state.userUpdateField === 'leave' && this.state.selectedUser !== null && React.createElement(UpdateUserLeaveForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updateUserLeaveHandler,\n      confirmText: \"Confirm\",\n      user: this.state.selectedUser,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1544\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"userEditAttachment\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1555\n      },\n      __self: this\n    }, this.state.selectedUser === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      className: \"confirmEditButton\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1557\n      },\n      __self: this\n    }, \"Select a Staff member from the Master List\"), this.state.selectedUser !== null && this.context.user.role === \"admin\" && React.createElement(Button, {\n      variant: \"outline-primary\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      value: \"attachments\",\n      onClick: this.updateUserSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1565\n      },\n      __self: this\n    }, \"Add Attachment as Admin\"), this.state.selectedUser !== null && this.state.selectedUser._id === this.context.user._id && React.createElement(Button, {\n      variant: \"outline-primary\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      value: \"attachments\",\n      onClick: this.updateUserSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1570\n      },\n      __self: this\n    }, \"Add Attachment\"), this.state.selectedUser !== null && this.state.selectedUser._id === this.context.user._id && React.createElement(Button, {\n      variant: \"outline-success\",\n      className: \"confirmEditButton\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1574\n      },\n      __self: this\n    }, \"Your Profile\"), this.state.selectedUser !== null && this.state.selectedUser._id !== this.context.user._id && React.createElement(Button, {\n      variant: \"outline-danger\",\n      className: \"confirmEditButton\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1580\n      },\n      __self: this\n    }, \"Not my profile\"), this.state.userUpdateField === 'attachments' && this.state.selectedUser !== null && React.createElement(UpdateUserAttachmentForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updateUserAttachmentHandler,\n      confirmText: \"Confirm\",\n      user: this.state.selectedUser,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1587\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"MasterList\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1598\n      },\n      __self: this\n    }, React.createElement(Container, {\n      className: \"containerUserMasterList\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1599\n      },\n      __self: this\n    }, React.createElement(Row, {\n      className: \"searchListRow\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1600\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"primary\",\n      size: \"sm\",\n      onClick: this.fetchUsersAsc,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1601\n      },\n      __self: this\n    }, \"Sort Asc\"), React.createElement(Button, {\n      variant: \"info\",\n      size: \"sm\",\n      onClick: this.fetchUsersDesc,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1604\n      },\n      __self: this\n    }, \"Sort Desc\"), this.state.isLoading ? React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1608\n      },\n      __self: this\n    }) : React.createElement(UserList, {\n      users: this.state.users,\n      authUserId: this.context.userId,\n      onViewDetail: this.showDetailHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1610\n      },\n      __self: this\n    })))), React.createElement(Tab.Pane, {\n      eventKey: \"SearchInput\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1620\n      },\n      __self: this\n    }, React.createElement(Container, {\n      className: \"containerSearchUserInput\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1621\n      },\n      __self: this\n    }, React.createElement(Row, {\n      className: \"searchUserRowAdd\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1623\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"primary\",\n      className: \"searchButton\",\n      size: \"lg\",\n      onClick: this.startSearchUserHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1624\n      },\n      __self: this\n    }, \"Search\")), React.createElement(Row, {\n      className: \"searchUserRowForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1627\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 10,\n      className: \"searchUserColForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1628\n      },\n      __self: this\n    }, React.createElement(Tabs, {\n      defaultActiveKey: \"Field\",\n      id: \"uncontrolled-tab-example\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1629\n      },\n      __self: this\n    }, React.createElement(Tab, {\n      eventKey: \"Search\",\n      title: \"Search:\",\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1630\n      },\n      __self: this\n    }), React.createElement(Tab, {\n      eventKey: \"Field\",\n      title: \"Search by Field:\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1632\n      },\n      __self: this\n    }, this.state.searching !== true && React.createElement(Button, {\n      variant: \"outline-warning\",\n      className: \"confirmEditButton\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1634\n      },\n      __self: this\n    }, \"Click the 'Search' Button start\"), this.state.searching === true && React.createElement(SearchUserForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmSearchHandler,\n      confirmText: \"Search\",\n      user: this.context.selectedUser,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1639\n      },\n      __self: this\n    })), React.createElement(Tab, {\n      eventKey: \"Id\",\n      title: \"Search by ID:\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1649\n      },\n      __self: this\n    }, this.state.searching !== true && React.createElement(Button, {\n      variant: \"outline-warning\",\n      className: \"confirmEditButton\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1651\n      },\n      __self: this\n    }, \"Click the 'Search' Button start\"), this.state.searching === true && React.createElement(SearchUserIdForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmSearchIdHandler,\n      confirmText: \"Search\",\n      user: this.context.selectedUser,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1656\n      },\n      __self: this\n    })), React.createElement(Tab, {\n      eventKey: \"Attendance\",\n      title: \"Search by Attendance:\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1667\n      },\n      __self: this\n    }, this.state.searching !== true && React.createElement(Button, {\n      variant: \"outline-warning\",\n      className: \"confirmEditButton\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1669\n      },\n      __self: this\n    }, \"Click the 'Search' Button start\"), this.state.searching === true && React.createElement(SearchUserAttendanceDateForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmSearchAttendanceDateHandler,\n      confirmText: \"Search\",\n      user: this.context.selectedUser,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1674\n      },\n      __self: this\n    })), React.createElement(Tab, {\n      eventKey: \"Leave\",\n      title: \"Search by Leave:\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1685\n      },\n      __self: this\n    }, this.state.searching !== true && React.createElement(Button, {\n      variant: \"outline-warning\",\n      className: \"confirmEditButton\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1687\n      },\n      __self: this\n    }, \"Click the 'Search' Button start\"), this.state.searching === true && React.createElement(SearchUserLeaveDateRangeForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmSearchLeaveDateRangeHandler,\n      confirmText: \"Search\",\n      user: this.context.selectedUser,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1692\n      },\n      __self: this\n    })), React.createElement(Tab, {\n      eventKey: \"Name\",\n      title: \"Search by Name:\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1703\n      },\n      __self: this\n    }, this.state.searching !== true && React.createElement(Button, {\n      variant: \"outline-warning\",\n      className: \"confirmEditButton\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1705\n      },\n      __self: this\n    }, \"Click the 'Search' Button start\"), this.state.searching === true && React.createElement(SearchUserNameForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmSearchNameHandler,\n      confirmText: \"Search\",\n      user: this.context.selectedUser,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1710\n      },\n      __self: this\n    })))), React.createElement(Col, {\n      md: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1723\n      },\n      __self: this\n    })))), React.createElement(Tab.Pane, {\n      eventKey: \"SearchResult\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1730\n      },\n      __self: this\n    }, React.createElement(Container, {\n      className: \"containerSearchUserResults\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1731\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1732\n      },\n      __self: this\n    }, React.createElement(Card, {\n      className: \"searchCard\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1733\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      className: \"searchCardBody\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1734\n      },\n      __self: this\n    }, React.createElement(Card.Title, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1735\n      },\n      __self: this\n    }, \"Your Search\"), React.createElement(Card.Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1736\n      },\n      __self: this\n    }, \"Field: \", this.state.userSearchField), React.createElement(Card.Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1739\n      },\n      __self: this\n    }, \"Query: \", this.state.userSearchQuery)))), React.createElement(Row, {\n      className: \"searchListRow\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1745\n      },\n      __self: this\n    }, this.state.searchUsers !== [] && React.createElement(SearchUserList, {\n      searchUsers: this.state.searchUsers,\n      authUserId: this.context.userId,\n      onViewDetail: this.showDetailHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1748\n      },\n      __self: this\n    })))))))))))));\n  }\n\n}\n\nUsersPage.contextType = AuthContext;\nexport default UsersPage;","map":{"version":3,"sources":["/Users/pedrojacob/Downloads/AMR/websites/office_records/ENT_EMR/frontend/src/pages/Users.js"],"names":["S3","React","Component","Container","Row","Col","Button","Accordion","Tabs","Tab","Nav","Card","AuthContext","UserList","SearchUserList","UserDetail","Spinner","SidebarPage","SidebarControl","AlertBox","LoadingOverlay","AttachmentViewer","PdfCreator","CreateUserForm","UpdateUserForm","UpdateUserFieldForm","UpdateUserAttendanceForm","UpdateUserAttachmentForm","UpdateUserLeaveForm","SearchUserForm","SearchUserIdForm","SearchUserNameForm","SearchUserAttendanceDateForm","SearchUserLeaveDateRangeForm","UsersPage","state","creating","updating","deleting","searching","users","searchUsers","isLoading","isSorting","selectedUser","userUpdateField","userSearchField","userSearchQuery","canDelete","userAlert","overlay","overlayStatus","file","showAttachment","showThisAttachmentFile","showThisAttachmentType","creatingDocument","createPdf","pdfData","pdfType","sidebarShow","mCol1Size","mCol2Size","isActive","startCreateUserHandler","setState","startUpdateUserHandler","startSearchUserHandler","modalConfirmHandler","event","email","target","formGridEmail","value","password","formGridPassword","name","formGridName","role","formGridRole","dob","formGridDob","phone","formGridPhone","addressNumber","formGridAddressNumber","addressStreet","formGridAddressStreet","addressTown","formGridAddressTown","addressParish","formGridAddressParish","addressPostOffice","formGridAddressPostOffice","employmentDate","formGridEmploymentDate","formGridEmploymentDateTodayCheckbox","checked","Date","toISOString","slice","staffCalendarEmploymentDate","console","log","terminationDate","formGridTerminationDate","formGridTerminationDateTodayCheckbox","staffCalendarTerminationDate","trim","length","token","context","userId","requestBody","query","fetch","method","body","JSON","stringify","headers","Authorization","then","res","status","Error","json","resData","prevState","updatedUsers","push","data","createUser","responseAlert","catch","err","modalConfirmUpdateHandler","selectedUserId","_id","user","address","number","street","town","parish","postOffice","updateUser","fetchUsers","modalConfirmUpdateFieldHandler","field","formGridQuery","formGridFieldSelect","formGridField","updatedUserId","updateUserField","updatedUser","find","e","updatedUserPos","indexOf","slicedArray","splice","updateUserAttendanceHandler","attendanceDate","formGridAttendanceDate","formGridAttendanceDateTodayCheckbox","staffAttendanceCalendarDate","attendanceStatus","formGridAttendanceStatus","attendanceDescription","formGridAttendanceDescription","updateUserAttendance","updateUserAttachmentHandler","attachmentFormat","formGridAttachmentFormat","attachmentPath","_currentValue","config","bucketName","creds","s3","dirName","region","accessKeyId","secretAccessKey","ReactS3Client","newFileName","attachmentName","uploadFile","error","updateUserAttachment","updateUserLeaveHandler","leaveType","formGridLeaveType","leaveTitle","formGridLeaveTitle","leaveStartDate","formGridLeaveStartDate","formGridLeaveStartDateTodayCheckbox","staffLeaveCalendarStartDate","leaveEndDate","formGridLeaveEndDate","formGridLeaveEndDateTodayCheckbox","staffLeaveCalendarEndDate","updateUserLeave","modalConfirmSearchHandler","formBasicQuery","formBasicFieldSelect","formBasicField","search","getUserField","modalConfirmSearchIdHandler","formBasicId","getUserId","modalConfirmSearchAttendanceDateHandler","formBasicDate","formBasicDateTodayCheckbox","getUserAttendanceDate","modalConfirmSearchLeaveDateRangeHandler","startDate","formBasicStartDate","staffLeaveStartCalendarDate","endDate","formBasicEndDate","staffLeaveEndCalendarDate","getUserLeaveDateRange","modalConfirmSearchNameHandler","regex","RegExp","formBasicName","result","filter","match","modalCancelHandler","fetchUsersAsc","usersNameAsc","fetchUsersDesc","usersNameDesc","modalDeleteHandler","deletedUser","deleteUser","deletedUserId","deletedUserPos","deleteUserAttendanceItem","props","date","substr","deleteUserAttendance","deleteUserLeaveItem","title","deleteUserLeave","deleteUserAttachmentItem","deleteUserAttachment","showDetailHandler","onViewAttachment","attachment","path","type","format","closeAttachmentView","attachments","attendance","atttendance","leave","closePdfCreator","showSidebar","hideSidebar","componentDidMount","updateUserSpecial","userSearchClearlHandler","componentWillUnmount","render","bind","contextType"],"mappings":";AAAA,OAAOA,EAAP,MAAe,cAAf;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,OAAOC,SAAP,MAAsB,2BAAtB;AACA,OAAOC,GAAP,MAAgB,qBAAhB;AACA,OAAOC,GAAP,MAAgB,qBAAhB;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,OAAOC,SAAP,MAAsB,2BAAtB;AACA,OAAOC,IAAP,MAAiB,sBAAjB;AACA,OAAOC,GAAP,MAAgB,qBAAhB;AACA,OAAOC,GAAP,MAAgB,qBAAhB;AACA,OAAOC,IAAP,MAAiB,sBAAjB;AAEA,OAAOC,WAAP,MAAwB,yBAAxB;AACA,OAAOC,QAAP,MAAqB,uCAArB;AACA,OAAOC,cAAP,MAA2B,6CAA3B;AACA,OAAOC,UAAP,MAAuB,gCAAvB;AAEA,OAAOC,OAAP,MAAoB,+BAApB;AACA,OAAOC,WAAP,MAAwB,WAAxB;AACA,OAAOC,cAAP,MAA2B,8BAA3B;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,cAAP,MAA2B,8BAA3B;AACA,OAAOC,gBAAP,MAA6B,gCAA7B;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AAEA,OAAOC,cAAP,MAA2B,oCAA3B;AACA,OAAOC,cAAP,MAA2B,oCAA3B;AACA,OAAOC,mBAAP,MAAgC,yCAAhC;AACA,OAAOC,wBAAP,MAAqC,8CAArC;AACA,OAAOC,wBAAP,MAAqC,8CAArC;AACA,OAAOC,mBAAP,MAAgC,yCAAhC;AACA,OAAOC,cAAP,MAA2B,oCAA3B;AACA,OAAOC,gBAAP,MAA6B,sCAA7B;AACA,OAAOC,kBAAP,MAA+B,wCAA/B;AACA,OAAOC,4BAAP,MAAyC,kDAAzC;AACA,OAAOC,4BAAP,MAAyC,kDAAzC;AAEA,OAAO,aAAP;;AAEA,MAAMC,SAAN,SAAwBhC,SAAxB,CAAkC;AAAA;AAAA;AAAA,SAChCiC,KADgC,GACxB;AACNC,MAAAA,QAAQ,EAAE,KADJ;AAENC,MAAAA,QAAQ,EAAE,KAFJ;AAGNC,MAAAA,QAAQ,EAAE,KAHJ;AAINC,MAAAA,SAAS,EAAE,KAJL;AAKNC,MAAAA,KAAK,EAAE,EALD;AAMNC,MAAAA,WAAW,EAAE,EANP;AAONC,MAAAA,SAAS,EAAE,KAPL;AAQNC,MAAAA,SAAS,EAAE,KARL;AASNC,MAAAA,YAAY,EAAE,IATR;AAUNC,MAAAA,eAAe,EAAE,IAVX;AAWNC,MAAAA,eAAe,EAAE,IAXX;AAYNC,MAAAA,eAAe,EAAE,IAZX;AAaNC,MAAAA,SAAS,EAAE,IAbL;AAcNC,MAAAA,SAAS,EAAE,IAdL;AAeNC,MAAAA,OAAO,EAAE,KAfH;AAgBNC,MAAAA,aAAa,EAAE,MAhBT;AAiBNC,MAAAA,IAAI,EAAE,IAjBA;AAkBNC,MAAAA,cAAc,EAAE,KAlBV;AAmBNC,MAAAA,sBAAsB,EAAE,IAnBlB;AAoBNC,MAAAA,sBAAsB,EAAE,IApBlB;AAqBNC,MAAAA,gBAAgB,EAAE,KArBZ;AAsBNC,MAAAA,SAAS,EAAE,KAtBL;AAuBNC,MAAAA,OAAO,EAAE,IAvBH;AAwBNC,MAAAA,OAAO,EAAE,IAxBH;AAwBQC,MAAAA,WAAW,EAAE,IAxBrB;AAyBNC,MAAAA,SAAS,EAAE,CAzBL;AA0BNC,MAAAA,SAAS,EAAE;AA1BL,KADwB;AAAA,SA6BhCC,QA7BgC,GA6BrB,IA7BqB;;AAAA,SA8ChCC,sBA9CgC,GA8CP,MAAM;AAC7B,WAAKC,QAAL,CAAc;AAAE7B,QAAAA,QAAQ,EAAE;AAAZ,OAAd;AACD,KAhD+B;;AAAA,SAiDhC8B,sBAjDgC,GAiDP,MAAM;AAC7B,WAAKD,QAAL,CAAc;AAAE5B,QAAAA,QAAQ,EAAE;AAAZ,OAAd;AACD,KAnD+B;;AAAA,SAoDhC8B,sBApDgC,GAoDP,MAAM;AAC7B,WAAKF,QAAL,CAAc;AAAE1B,QAAAA,SAAS,EAAE;AAAb,OAAd;AACD,KAtD+B;;AAAA,SAwDhC6B,mBAxDgC,GAwDTC,KAAD,IAAW;AAE/B,WAAKJ,QAAL,CAAc;AAAE7B,QAAAA,QAAQ,EAAE,KAAZ;AAAmBa,QAAAA,SAAS,EAAE;AAA9B,OAAd;AAEA,YAAMqB,KAAK,GAAGD,KAAK,CAACE,MAAN,CAAaC,aAAb,CAA2BC,KAAzC;AACA,YAAMC,QAAQ,GAAGL,KAAK,CAACE,MAAN,CAAaI,gBAAb,CAA8BF,KAA/C;AACA,YAAMG,IAAI,GAAGP,KAAK,CAACE,MAAN,CAAaM,YAAb,CAA0BJ,KAAvC;AACA,YAAMK,IAAI,GAAGT,KAAK,CAACE,MAAN,CAAaQ,YAAb,CAA0BN,KAAvC;AACA,YAAMO,GAAG,GAAGX,KAAK,CAACE,MAAN,CAAaU,WAAb,CAAyBR,KAArC;AACA,YAAMS,KAAK,GAAGb,KAAK,CAACE,MAAN,CAAaY,aAAb,CAA2BV,KAAzC;AACA,YAAMW,aAAa,GAAGf,KAAK,CAACE,MAAN,CAAac,qBAAb,CAAmCZ,KAAzD;AACA,YAAMa,aAAa,GAAGjB,KAAK,CAACE,MAAN,CAAagB,qBAAb,CAAmCd,KAAzD;AACA,YAAMe,WAAW,GAAGnB,KAAK,CAACE,MAAN,CAAakB,mBAAb,CAAiChB,KAArD;AACA,YAAMiB,aAAa,GAAGrB,KAAK,CAACE,MAAN,CAAaoB,qBAAb,CAAmClB,KAAzD;AACA,YAAMmB,iBAAiB,GAAGvB,KAAK,CAACE,MAAN,CAAasB,yBAAb,CAAuCpB,KAAjE;AAEA,UAAIqB,cAAc,GAAGzB,KAAK,CAACE,MAAN,CAAawB,sBAAb,CAAoCtB,KAAzD;;AACA,UAAIJ,KAAK,CAACE,MAAN,CAAayB,mCAAb,CAAiDC,OAAjD,KAA6D,IAAjE,EAAuE;AACrEH,QAAAA,cAAc,GAAG,IAAII,IAAJ,GAAWC,WAAX,GAAyBC,KAAzB,CAA+B,CAA/B,EAAiC,EAAjC,CAAjB;AACD;;AAED,UACE/B,KAAK,CAACE,MAAN,CAAa8B,2BAAb,CAAyC5B,KAAzC,KAAmD,IAAnD,IACAJ,KAAK,CAACE,MAAN,CAAayB,mCAAb,CAAiDC,OAAjD,KAA6D,IAF/D,EAGE;AACAK,QAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0B,IAAIL,IAAJ,CAAS7B,KAAK,CAACE,MAAN,CAAa8B,2BAAb,CAAyC5B,KAAlD,EAAyD0B,WAAzD,GAAuEC,KAAvE,CAA6E,CAA7E,EAA+E,EAA/E,CAA1B;AACAN,QAAAA,cAAc,GAAG,IAAII,IAAJ,CAAS7B,KAAK,CAACE,MAAN,CAAa8B,2BAAb,CAAyC5B,KAAlD,EAAyD0B,WAAzD,GAAuEC,KAAvE,CAA6E,CAA7E,EAA+E,EAA/E,CAAjB;AACD;;AAED,UAAII,eAAe,GAAGnC,KAAK,CAACE,MAAN,CAAakC,uBAAb,CAAqChC,KAA3D;;AACA,UAAIJ,KAAK,CAACE,MAAN,CAAamC,oCAAb,CAAkDT,OAAlD,KAA8D,IAAlE,EAAwE;AACtEO,QAAAA,eAAe,GAAG,IAAIN,IAAJ,GAAWC,WAAX,GAAyBC,KAAzB,CAA+B,CAA/B,EAAiC,EAAjC,CAAlB;AACD;;AAED,UACE/B,KAAK,CAACE,MAAN,CAAaoC,4BAAb,CAA0ClC,KAA1C,KAAoD,IAApD,IACAJ,KAAK,CAACE,MAAN,CAAamC,oCAAb,CAAkDT,OAAlD,KAA8D,IAFhE,EAGE;AACAK,QAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0B,IAAIL,IAAJ,CAAS7B,KAAK,CAACE,MAAN,CAAaoC,4BAAb,CAA0ClC,KAAnD,EAA0D0B,WAA1D,GAAwEC,KAAxE,CAA8E,CAA9E,EAAgF,EAAhF,CAA1B;AACAI,QAAAA,eAAe,GAAG,IAAIN,IAAJ,CAAS7B,KAAK,CAACE,MAAN,CAAaoC,4BAAb,CAA0ClC,KAAnD,EAA0D0B,WAA1D,GAAwEC,KAAxE,CAA8E,CAA9E,EAAgF,EAAhF,CAAlB;AACD;;AAGD,UACE9B,KAAK,CAACsC,IAAN,GAAaC,MAAb,KAAwB,CAAxB,IACAnC,QAAQ,CAACkC,IAAT,GAAgBC,MAAhB,KAA2B,CAD3B,IAEAjC,IAAI,CAACgC,IAAL,GAAYC,MAAZ,KAAuB,CAFvB,IAGA/B,IAAI,CAAC8B,IAAL,GAAYC,MAAZ,KAAuB,CAHvB,IAIA7B,GAAG,CAAC4B,IAAJ,GAAWC,MAAX,KAAsB,CAJtB,IAKA3B,KAAK,CAAC0B,IAAN,GAAaC,MAAb,KAAwB,CALxB,IAMAzB,aAAa,CAACwB,IAAd,GAAqBC,MAArB,KAAgC,CANhC,IAOAvB,aAAa,CAACsB,IAAd,GAAqBC,MAArB,KAAgC,CAPhC,IAQArB,WAAW,CAACoB,IAAZ,GAAmBC,MAAnB,KAA8B,CAR9B,IASAnB,aAAa,CAACkB,IAAd,GAAqBC,MAArB,KAAgC,CAThC,IAUAjB,iBAAiB,CAACgB,IAAlB,GAAyBC,MAAzB,KAAoC,CAVpC,IAWAf,cAAc,CAACc,IAAf,GAAsBC,MAAtB,KAAiC,CAZnC,EAaE;AACA,aAAK5C,QAAL,CAAc;AAAChB,UAAAA,SAAS,EAAE;AAAZ,SAAd;AACA;AACD;;AAED,YAAM6D,KAAK,GAAG,KAAKC,OAAL,CAAaD,KAA3B;AACA,YAAME,MAAM,GAAG,KAAKD,OAAL,CAAaC,MAA5B;AACA,YAAMC,WAAW,GAAG;AAClBC,QAAAA,KAAK,EAAG;oDACsC5C,KAAM,eAAcI,QAAS,WAAUE,IAAK,UAASI,GAAI,mBAAkBI,aAAc,mBAAkBE,aAAc,kBAAiBE,WAAY,oBAAmBE,aAAc,yBAAwBE,iBAAkB,YAAWV,KAAM,WAAUJ,IAAK,qBAAoBgB,cAAe,sBAAqBU,eAAgB;;;AAFrW,OAApB,CA/D+B,CAsE/B;;AACAW,MAAAA,KAAK,CAAC,gCAAD,EAAmC;AACtCC,QAAAA,MAAM,EAAE,MAD8B;AAEtCC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,WAAf,CAFgC;AAGtCO,QAAAA,OAAO,EAAE;AACP,0BAAgB,kBADT;AAEPC,UAAAA,aAAa,EAAE,YAAYX;AAFpB;AAH6B,OAAnC,CAAL,CAQGY,IARH,CAQQC,GAAG,IAAI;AACX,YAAIA,GAAG,CAACC,MAAJ,KAAe,GAAf,IAAsBD,GAAG,CAACC,MAAJ,KAAe,GAAzC,EAA8C;AAC5C,gBAAM,IAAIC,KAAJ,CAAU,SAAV,CAAN;AACD;;AACD,eAAOF,GAAG,CAACG,IAAJ,EAAP;AACD,OAbH,EAcGJ,IAdH,CAcQK,OAAO,IAAI;AACf,aAAK9D,QAAL,CAAc+D,SAAS,IAAI;AACzB,gBAAMC,YAAY,GAAG,CAAC,GAAGD,SAAS,CAACxF,KAAd,CAArB;AACAyF,UAAAA,YAAY,CAACC,IAAb,CAAkBH,OAAO,CAACI,IAAR,CAAaC,UAA/B;AACA,iBAAO;AAAE5F,YAAAA,KAAK,EAAEyF;AAAT,WAAP;AACD,SAJD;AAKA,aAAKlB,OAAL,CAAavE,KAAb,CAAmB0F,IAAnB,CAAwBH,OAAO,CAACI,IAAR,CAAaC,UAArC;AACA,cAAMC,aAAa,GAAGf,IAAI,CAACC,SAAL,CAAeQ,OAAO,CAACI,IAAvB,EAA6B/B,KAA7B,CAAmC,CAAnC,EAAqC,CAArC,CAAtB;AACA,aAAKnC,QAAL,CAAc;AAAChB,UAAAA,SAAS,EAAEoF,aAAZ;AAA2BzF,UAAAA,YAAY,EAAEmF,OAAO,CAACI,IAAR,CAAaC;AAAtD,SAAd;AACD,OAvBH,EAwBGE,KAxBH,CAwBSC,GAAG,IAAI;AACZ,aAAKtE,QAAL,CAAc;AAAChB,UAAAA,SAAS,EAAEsF;AAAZ,SAAd;AACD,OA1BH;AA2BD,KA1J+B;;AAAA,SA4JhCC,yBA5JgC,GA4JHnE,KAAD,IAAW;AAErC,YAAMyC,KAAK,GAAG,KAAKC,OAAL,CAAaD,KAA3B;AACA,YAAME,MAAM,GAAG,KAAKD,OAAL,CAAaC,MAA5B;AACA,UAAIyB,cAAc,GAAG,KAAK1B,OAAL,CAAanE,YAAb,CAA0B8F,GAA/C;;AACA,UAAG1B,MAAM,KAAKyB,cAAX,IAA6B,KAAK1B,OAAL,CAAa4B,IAAb,CAAkB7D,IAAlB,KAA2B,OAA3D,EAAoE;AAClE,aAAKb,QAAL,CAAc;AAAChB,UAAAA,SAAS,EAAE;AAAZ,SAAd;AACAwF,QAAAA,cAAc,GAAG,IAAjB;AACD;;AAED,UAAInE,KAAK,GAAGD,KAAK,CAACE,MAAN,CAAaC,aAAb,CAA2BC,KAAvC;AACA,UAAIC,QAAQ,GAAGL,KAAK,CAACE,MAAN,CAAaI,gBAAb,CAA8BF,KAA7C;AACA,UAAIG,IAAI,GAAGP,KAAK,CAACE,MAAN,CAAaM,YAAb,CAA0BJ,KAArC;AACA,UAAIK,IAAI,GAAG,KAAKiC,OAAL,CAAanE,YAAb,CAA0BkC,IAArC;AACA,UAAIE,GAAG,GAAGX,KAAK,CAACE,MAAN,CAAaU,WAAb,CAAyBR,KAAnC;AACA,UAAIS,KAAK,GAAGb,KAAK,CAACE,MAAN,CAAaY,aAAb,CAA2BV,KAAvC;AACA,UAAIW,aAAa,GAAGf,KAAK,CAACE,MAAN,CAAac,qBAAb,CAAmCZ,KAAvD;AACA,UAAIa,aAAa,GAAGjB,KAAK,CAACE,MAAN,CAAagB,qBAAb,CAAmCd,KAAvD;AACA,UAAIe,WAAW,GAAGnB,KAAK,CAACE,MAAN,CAAakB,mBAAb,CAAiChB,KAAnD;AACA,UAAIiB,aAAa,GAAGrB,KAAK,CAACE,MAAN,CAAaoB,qBAAb,CAAmClB,KAAvD;AACA,UAAImB,iBAAiB,GAAGvB,KAAK,CAACE,MAAN,CAAasB,yBAAb,CAAuCpB,KAA/D;AAEA,UAAIqB,cAAc,GAAGzB,KAAK,CAACE,MAAN,CAAawB,sBAAb,CAAoCtB,KAAzD;;AACA,UAAIJ,KAAK,CAACE,MAAN,CAAayB,mCAAb,CAAiDC,OAAjD,KAA6D,IAAjE,EAAuE;AACrEH,QAAAA,cAAc,GAAG,IAAII,IAAJ,GAAWC,WAAX,GAAyBC,KAAzB,CAA+B,CAA/B,EAAiC,EAAjC,CAAjB;AACD;;AAED,UACE/B,KAAK,CAACE,MAAN,CAAa8B,2BAAb,CAAyC5B,KAAzC,KAAmD,IAAnD,IACAJ,KAAK,CAACE,MAAN,CAAayB,mCAAb,CAAiDC,OAAjD,KAA6D,IAF/D,EAGE;AACAK,QAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0B,IAAIL,IAAJ,CAAS7B,KAAK,CAACE,MAAN,CAAa8B,2BAAb,CAAyC5B,KAAlD,EAAyD0B,WAAzD,GAAuEC,KAAvE,CAA6E,CAA7E,EAA+E,EAA/E,CAA1B;AACAN,QAAAA,cAAc,GAAG,IAAII,IAAJ,CAAS7B,KAAK,CAACE,MAAN,CAAa8B,2BAAb,CAAyC5B,KAAlD,EAAyD0B,WAAzD,GAAuEC,KAAvE,CAA6E,CAA7E,EAA+E,EAA/E,CAAjB;AACD;;AAGD,UAAII,eAAe,GAAGnC,KAAK,CAACE,MAAN,CAAakC,uBAAb,CAAqChC,KAA3D;;AACA,UAAIJ,KAAK,CAACE,MAAN,CAAamC,oCAAb,CAAkDT,OAAlD,KAA8D,IAAlE,EAAwE;AACtEO,QAAAA,eAAe,GAAG,IAAIN,IAAJ,GAAWC,WAAX,GAAyBC,KAAzB,CAA+B,CAA/B,EAAiC,EAAjC,CAAlB;AACD;;AAED,UACE/B,KAAK,CAACE,MAAN,CAAaoC,4BAAb,CAA0ClC,KAA1C,KAAoD,IAApD,IACAJ,KAAK,CAACE,MAAN,CAAamC,oCAAb,CAAkDT,OAAlD,KAA8D,IAFhE,EAGE;AACAK,QAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0B,IAAIL,IAAJ,CAAS7B,KAAK,CAACE,MAAN,CAAaoC,4BAAb,CAA0ClC,KAAnD,EAA0D0B,WAA1D,GAAwEC,KAAxE,CAA8E,CAA9E,EAAgF,EAAhF,CAA1B;AACAI,QAAAA,eAAe,GAAG,IAAIN,IAAJ,CAAS7B,KAAK,CAACE,MAAN,CAAaoC,4BAAb,CAA0ClC,KAAnD,EAA0D0B,WAA1D,GAAwEC,KAAxE,CAA8E,CAA9E,EAAgF,EAAhF,CAAlB;AACD;;AAED,UAAI9B,KAAK,CAACsC,IAAN,GAAaC,MAAb,KAAwB,CAA5B,EAAgC;AAC9BvC,QAAAA,KAAK,GAAG,KAAKyC,OAAL,CAAanE,YAAb,CAA0B0B,KAAlC;AACA,aAAKL,QAAL,CAAc;AAAEhB,UAAAA,SAAS,EAAE;AAAb,SAAd;AACD;;AACD,UAAIyB,QAAQ,CAACkC,IAAT,GAAgBC,MAAhB,KAA2B,CAA/B,EAAkC;AAChCnC,QAAAA,QAAQ,GAAG,KAAKqC,OAAL,CAAanE,YAAb,CAA0B8B,QAArC;AACA,aAAKT,QAAL,CAAc;AAAEhB,UAAAA,SAAS,EAAE;AAAb,SAAd;AACD;;AACD,UAAI2B,IAAI,CAACgC,IAAL,GAAYC,MAAZ,KAAuB,CAA3B,EAA8B;AAC5BjC,QAAAA,IAAI,GAAG,KAAKmC,OAAL,CAAanE,YAAb,CAA0BgC,IAAjC;AACA,aAAKX,QAAL,CAAc;AAAEhB,UAAAA,SAAS,EAAE;AAAb,SAAd;AACD,OA5DoC,CA6DrC;AACA;AACA;AACA;;;AACA,UAAI+B,GAAG,CAAC4B,IAAJ,GAAWC,MAAX,KAAsB,CAA1B,EAA6B;AAC3B7B,QAAAA,GAAG,GAAG,KAAK+B,OAAL,CAAanE,YAAb,CAA0BoC,GAAhC;AACA,aAAKf,QAAL,CAAc;AAAEhB,UAAAA,SAAS,EAAE;AAAb,SAAd;AACD;;AACD,UAAIiC,KAAK,CAAC0B,IAAN,GAAaC,MAAb,KAAwB,CAA5B,EAA+B;AAC7B3B,QAAAA,KAAK,GAAG,KAAK6B,OAAL,CAAanE,YAAb,CAA0BsC,KAAlC;AACA,aAAKjB,QAAL,CAAc;AAAEhB,UAAAA,SAAS,EAAE;AAAb,SAAd;AACD;;AACD,UAAImC,aAAa,CAACwB,IAAd,GAAqBC,MAArB,KAAgC,CAApC,EAAuC;AACrCzB,QAAAA,aAAa,GAAG,KAAK2B,OAAL,CAAanE,YAAb,CAA0BgG,OAA1B,CAAkCC,MAAlD;AACA,aAAK5E,QAAL,CAAc;AAAEhB,UAAAA,SAAS,EAAE;AAAb,SAAd;AACD;;AACD,UAAIqC,aAAa,CAACsB,IAAd,GAAqBC,MAArB,KAAgC,CAApC,EAAuC;AACrCvB,QAAAA,aAAa,GAAG,KAAKyB,OAAL,CAAanE,YAAb,CAA0BgG,OAA1B,CAAkCE,MAAlD;AACA,aAAK7E,QAAL,CAAc;AAAEhB,UAAAA,SAAS,EAAE;AAAb,SAAd;AACD;;AACD,UAAIuC,WAAW,CAACoB,IAAZ,GAAmBC,MAAnB,KAA8B,CAAlC,EAAqC;AACnCrB,QAAAA,WAAW,GAAG,KAAKuB,OAAL,CAAanE,YAAb,CAA0BgG,OAA1B,CAAkCG,IAAhD;AACA,aAAK9E,QAAL,CAAc;AAAEhB,UAAAA,SAAS,EAAE;AAAb,SAAd;AACD;;AACD,UAAIyC,aAAa,CAACkB,IAAd,GAAqBC,MAArB,KAAgC,CAApC,EAAuC;AACrCnB,QAAAA,aAAa,GAAG,KAAKqB,OAAL,CAAanE,YAAb,CAA0BgG,OAA1B,CAAkCI,MAAlD;AACA,aAAK/E,QAAL,CAAc;AAAEhB,UAAAA,SAAS,EAAE;AAAb,SAAd;AACD;;AACD,UAAI2C,iBAAiB,CAACgB,IAAlB,GAAyBC,MAAzB,KAAoC,CAAxC,EAA2C;AACzCjB,QAAAA,iBAAiB,GAAG,KAAKmB,OAAL,CAAanE,YAAb,CAA0BgG,OAA1B,CAAkCK,UAAtD;AACA,aAAKhF,QAAL,CAAc;AAAEhB,UAAAA,SAAS,EAAE;AAAb,SAAd;AACD;;AACD,UAAI6C,cAAc,CAACc,IAAf,GAAsBC,MAAtB,KAAiC,CAArC,EAAwC;AACtCf,QAAAA,cAAc,GAAG,KAAKiB,OAAL,CAAanE,YAAb,CAA0BkD,cAA3C;AACA,aAAK7B,QAAL,CAAc;AAAEhB,UAAAA,SAAS,EAAE;AAAb,SAAd;AACD;;AACD,UAAIuD,eAAe,CAACI,IAAhB,GAAuBC,MAAvB,KAAkC,CAAtC,EAAyC;AACvCL,QAAAA,eAAe,GAAG,KAAKO,OAAL,CAAanE,YAAb,CAA0B4D,eAA5C;AACA,aAAKvC,QAAL,CAAc;AAAEhB,UAAAA,SAAS,EAAE;AAAb,SAAd;AACD;;AAED,WAAKgB,QAAL,CAAc;AAAChB,QAAAA,SAAS,EAAE;AAAZ,OAAd;AAEA,YAAMgE,WAAW,GAAG;AAClBC,QAAAA,KAAK,EAAG;qCACuBF,MAAO,qBAAoByB,cAAe,wBAAuBnE,KAAM,eAAcI,QAAS,WAAUE,IAAK,UAASI,GAAI,mBAAkBI,aAAc,mBAAkBE,aAAc,kBAAiBE,WAAY,oBAAmBE,aAAc,yBAAwBE,iBAAkB,YAAWV,KAAM,WAAUJ,IAAK,qBAAoBgB,cAAe,sBAAqBU,eAAgB;;;AAFvZ,OAApB;AAMEW,MAAAA,KAAK,CAAC,gCAAD,EAAmC;AACxCC,QAAAA,MAAM,EAAE,MADgC;AAExCC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,WAAf,CAFkC;AAGxCO,QAAAA,OAAO,EAAE;AACP,0BAAgB,kBADT;AAEPC,UAAAA,aAAa,EAAE,YAAYX;AAFpB;AAH+B,OAAnC,CAAL,CAOCY,IAPD,CAOMC,GAAG,IAAI;AACX,YAAIA,GAAG,CAACC,MAAJ,KAAe,GAAf,IAAsBD,GAAG,CAACC,MAAJ,KAAe,GAAzC,EAA8C;AAC5C,gBAAM,IAAIC,KAAJ,CAAU,SAAV,CAAN;AACD;;AACD,eAAOF,GAAG,CAACG,IAAJ,EAAP;AACD,OAZD,EAaCJ,IAbD,CAaMK,OAAO,IAAI;AACf;AACA;AACA,aAAK5F,KAAL,CAAWK,KAAX,CAAiB0F,IAAjB,CAAsBH,OAAO,CAACI,IAAR,CAAae,UAAnC;AACA,aAAKnC,OAAL,CAAavE,KAAb,GAAqB,KAAKL,KAAL,CAAWK,KAAhC;AACA,cAAM6F,aAAa,GAAGf,IAAI,CAACC,SAAL,CAAeQ,OAAO,CAACI,IAAvB,EAA6B/B,KAA7B,CAAmC,CAAnC,EAAqC,EAArC,CAAtB;AACA,aAAKnC,QAAL,CAAc;AAAEhB,UAAAA,SAAS,EAAEoF;AAAb,SAAd;AACA,aAAKc,UAAL;AACA,aAAKlF,QAAL,CAAc;AAAEhB,UAAAA,SAAS,EAAEoF,aAAb;AAA4BzF,UAAAA,YAAY,EAAEmF,OAAO,CAACI,IAAR,CAAae,UAAvD;AAAmEP,UAAAA,IAAI,EAAEZ,OAAO,CAACI,IAAR,CAAae;AAAtF,SAAd;AACD,OAtBD,EAuBCZ,KAvBD,CAuBOC,GAAG,IAAI;AACZjC,QAAAA,OAAO,CAACC,GAAR,CAAYgC,GAAZ;AACA,aAAKtE,QAAL,CAAc;AAAChB,UAAAA,SAAS,EAAEsF;AAAZ,SAAd;AACD,OA1BD;AA2BH,KArS+B;;AAAA,SAuShCa,8BAvSgC,GAuSE/E,KAAD,IAAW;AAE1C,WAAKJ,QAAL,CAAc;AAAE5B,QAAAA,QAAQ,EAAE,KAAZ;AAAoBY,QAAAA,SAAS,EAAE;AAA/B,OAAd;AACA,YAAM6D,KAAK,GAAG,KAAKC,OAAL,CAAaD,KAA3B;AACA,YAAME,MAAM,GAAG,KAAKD,OAAL,CAAaC,MAA5B;AACA,UAAIyB,cAAc,GAAG,KAAK1B,OAAL,CAAanE,YAAb,CAA0B8F,GAA/C;AACA,UAAIW,KAAK,GAAG,IAAZ;AACA,UAAInC,KAAK,GAAG7C,KAAK,CAACE,MAAN,CAAa+E,aAAb,CAA2B7E,KAAvC;;AACA,UAAIJ,KAAK,CAACE,MAAN,CAAagF,mBAAb,CAAiC9E,KAAjC,KAA2C,QAA/C,EAAyD;AACvD4E,QAAAA,KAAK,GAAGhF,KAAK,CAACE,MAAN,CAAaiF,aAAb,CAA2B/E,KAAnC;AACD,OAFD,MAEO;AACL4E,QAAAA,KAAK,GAAGhF,KAAK,CAACE,MAAN,CAAagF,mBAAb,CAAiC9E,KAAzC;AACD;;AAED,YAAMwC,WAAW,GAAG;AAClBC,QAAAA,KAAK,EAAE;2CAC8BF,MAAO,qBAAoByB,cAAe,YAAWY,KAAM,YAAWnC,KAAM;;;;AAF/F,OAApB;AAOEC,MAAAA,KAAK,CAAC,gCAAD,EAAmC;AACxCC,QAAAA,MAAM,EAAE,MADgC;AAExCC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,WAAf,CAFkC;AAGxCO,QAAAA,OAAO,EAAE;AACP,0BAAgB,kBADT;AAEPC,UAAAA,aAAa,EAAE,YAAYX;AAFpB;AAH+B,OAAnC,CAAL,CAQCY,IARD,CAQMC,GAAG,IAAI;AACX,YAAIA,GAAG,CAACC,MAAJ,KAAe,GAAf,IAAsBD,GAAG,CAACC,MAAJ,KAAe,GAAzC,EAA8C;AAC5C,gBAAM,IAAIC,KAAJ,CAAU,SAAV,CAAN;AACD;;AACD,eAAOF,GAAG,CAACG,IAAJ,EAAP;AACD,OAbD,EAcCJ,IAdD,CAcMK,OAAO,IAAI;AACf,cAAM0B,aAAa,GAAG1B,OAAO,CAACI,IAAR,CAAauB,eAAb,CAA6BhB,GAAnD;AACA,cAAMiB,WAAW,GAAG,KAAKxH,KAAL,CAAWK,KAAX,CAAiBoH,IAAjB,CAAsBC,CAAC,IAAIA,CAAC,CAACnB,GAAF,KAAUe,aAArC,CAApB;AACA,cAAMK,cAAc,GAAG,KAAK3H,KAAL,CAAWK,KAAX,CAAiBuH,OAAjB,CAAyBJ,WAAzB,CAAvB;AACA,cAAMK,WAAW,GAAG,KAAK7H,KAAL,CAAWK,KAAX,CAAiByH,MAAjB,CAAwBH,cAAxB,EAAwC,CAAxC,CAApB;AACA,aAAK3H,KAAL,CAAWK,KAAX,CAAiB0F,IAAjB,CAAsBH,OAAO,CAACI,IAAR,CAAauB,eAAnC;AACA,aAAK3C,OAAL,CAAavE,KAAb,GAAqB,KAAKL,KAAL,CAAWK,KAAhC;AACA,cAAM6F,aAAa,GAAGf,IAAI,CAACC,SAAL,CAAeQ,OAAO,CAACI,IAAvB,EAA6B/B,KAA7B,CAAmC,CAAnC,EAAqC,EAArC,CAAtB;AACA,aAAKnC,QAAL,CAAc;AAAEhB,UAAAA,SAAS,EAAEoF,aAAb;AAA4BzF,UAAAA,YAAY,EAAEmF,OAAO,CAACI,IAAR,CAAauB;AAAvD,SAAd;AACA,aAAKP,UAAL;AACD,OAxBD,EAyBCb,KAzBD,CAyBOC,GAAG,IAAI;AACZ,aAAKtE,QAAL,CAAc;AAAChB,UAAAA,SAAS,EAAEsF;AAAZ,SAAd;AACD,OA3BD;AA4BH,KAxV+B;;AAAA,SA0VhC2B,2BA1VgC,GA0VD7F,KAAD,IAAW;AAEvC,WAAKJ,QAAL,CAAc;AAAE5B,QAAAA,QAAQ,EAAE,KAAZ;AAAoBQ,QAAAA,eAAe,EAAE,IAArC;AAA2CI,QAAAA,SAAS,EAAE;AAAtD,OAAd;AACA,YAAM6D,KAAK,GAAG,KAAKC,OAAL,CAAaD,KAA3B;AACA,YAAME,MAAM,GAAG,KAAKD,OAAL,CAAaC,MAA5B;AACA,UAAIyB,cAAc,GAAG,KAAK1B,OAAL,CAAanE,YAAb,CAA0B8F,GAA/C;;AACA,UAAI1B,MAAM,KAAKyB,cAAX,IAA6B,KAAK1B,OAAL,CAAa4B,IAAb,CAAkB7D,IAAlB,KAA2B,OAA5D,EAAsE;AACpE,aAAKb,QAAL,CAAc;AAAEhB,UAAAA,SAAS,EAAE;AAAb,SAAd;AACAwF,QAAAA,cAAc,GAAG,IAAjB;AACD;;AAED,UAAI0B,cAAc,GAAG9F,KAAK,CAACE,MAAN,CAAa6F,sBAAb,CAAoC3F,KAAzD;;AACA,UAAIJ,KAAK,CAACE,MAAN,CAAa8F,mCAAb,CAAiDpE,OAAjD,KAA6D,IAAjE,EAAuE;AACrEK,QAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ;AACA4D,QAAAA,cAAc,GAAG,IAAIjE,IAAJ,GAAWC,WAAX,GAAyBC,KAAzB,CAA+B,CAA/B,EAAiC,EAAjC,CAAjB;AACD;;AAED,UACE/B,KAAK,CAACE,MAAN,CAAa+F,2BAAb,CAAyC7F,KAAzC,KAAmD,IAAnD,IACAJ,KAAK,CAACE,MAAN,CAAa8F,mCAAb,CAAiDpE,OAAjD,KAA6D,IAF/D,EAGE;AACAK,QAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0B,IAAIL,IAAJ,CAAS7B,KAAK,CAACE,MAAN,CAAa+F,2BAAb,CAAyC7F,KAAlD,EAAyD0B,WAAzD,GAAuEC,KAAvE,CAA6E,CAA7E,EAA+E,EAA/E,CAA1B;AACA+D,QAAAA,cAAc,GAAG,IAAIjE,IAAJ,CAAS7B,KAAK,CAACE,MAAN,CAAa+F,2BAAb,CAAyC7F,KAAlD,EAAyD0B,WAAzD,GAAuEC,KAAvE,CAA6E,CAA7E,EAA+E,EAA/E,CAAjB;AACD;;AAED,UAAImE,gBAAgB,GAAGlG,KAAK,CAACE,MAAN,CAAaiG,wBAAb,CAAsC/F,KAA7D;AACA,UAAIgG,qBAAqB,GAAGpG,KAAK,CAACE,MAAN,CAAamG,6BAAb,CAA2CjG,KAAvE;;AAEA,UACA0F,cAAc,CAACvD,IAAf,GAAsBC,MAAtB,KAAiC,CAAjC,IACA0D,gBAAgB,CAAC3D,IAAjB,GAAwBC,MAAxB,KAAmC,CAFnC,EAGC;AACC;AACD;;AAED,YAAMI,WAAW,GAAG;AAClBC,QAAAA,KAAK,EAAE;iDACoCF,MAAO,sBAAqByB,cAAe,gCAA+B0B,cAAe,uBAAsBI,gBAAiB,4BAA2BE,qBAAsB;;;AAF1M,OAApB;AAMAtD,MAAAA,KAAK,CAAC,gCAAD,EAAmC;AACtCC,QAAAA,MAAM,EAAE,MAD8B;AAEtCC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,WAAf,CAFgC;AAGtCO,QAAAA,OAAO,EAAE;AACP,0BAAgB,kBADT;AAEPC,UAAAA,aAAa,EAAE,YAAYX;AAFpB;AAH6B,OAAnC,CAAL,CAQGY,IARH,CAQQC,GAAG,IAAI;AACX,YAAIA,GAAG,CAACC,MAAJ,KAAe,GAAf,IAAsBD,GAAG,CAACC,MAAJ,KAAe,GAAzC,EAA8C;AAC5C,gBAAM,IAAIC,KAAJ,CAAU,SAAV,CAAN;AACD;;AACD,eAAOF,GAAG,CAACG,IAAJ,EAAP;AACD,OAbH,EAcGJ,IAdH,CAcQK,OAAO,IAAI;AACf,cAAM0B,aAAa,GAAG1B,OAAO,CAACI,IAAR,CAAawC,oBAAb,CAAkCjC,GAAxD;AACA,cAAMiB,WAAW,GAAG,KAAKxH,KAAL,CAAWK,KAAX,CAAiBoH,IAAjB,CAAsBC,CAAC,IAAIA,CAAC,CAACnB,GAAF,KAAUe,aAArC,CAApB;AACA,cAAMK,cAAc,GAAG,KAAK3H,KAAL,CAAWK,KAAX,CAAiBuH,OAAjB,CAAyBJ,WAAzB,CAAvB;AACA,cAAMK,WAAW,GAAG,KAAK7H,KAAL,CAAWK,KAAX,CAAiByH,MAAjB,CAAwBH,cAAxB,EAAwC,CAAxC,CAApB;AACA,aAAK3H,KAAL,CAAWK,KAAX,CAAiB0F,IAAjB,CAAsBH,OAAO,CAACI,IAAR,CAAawC,oBAAnC;AACA,aAAK5D,OAAL,CAAavE,KAAb,GAAqB,KAAKL,KAAL,CAAWK,KAAhC;AACA,cAAM6F,aAAa,GAAGf,IAAI,CAACC,SAAL,CAAeQ,OAAO,CAACI,IAAvB,EAA6B/B,KAA7B,CAAmC,CAAnC,EAAqC,EAArC,CAAtB;AACA,aAAK+C,UAAL;AACA,aAAKlF,QAAL,CAAc;AAAEhB,UAAAA,SAAS,EAAEoF,aAAb;AAA4BzF,UAAAA,YAAY,EAAEmF,OAAO,CAACI,IAAR,CAAawC;AAAvD,SAAd;AACD,OAxBH,EAyBGrC,KAzBH,CAyBSC,GAAG,IAAI;AACZ,aAAKtE,QAAL,CAAc;AAAChB,UAAAA,SAAS,EAAEsF;AAAZ,SAAd;AACD,OA3BH;AA4BD,KA/Z+B;;AAAA,SAia9BqC,2BAja8B,GAiaCvG,KAAD,IAAW;AAEzC,WAAKJ,QAAL,CAAc;AAAE5B,QAAAA,QAAQ,EAAE,KAAZ;AAAoBQ,QAAAA,eAAe,EAAE,IAArC;AAA2CI,QAAAA,SAAS,EAAE;AAAtD,OAAd;AACA,YAAM6D,KAAK,GAAG,KAAKC,OAAL,CAAaD,KAA3B;AACA,YAAME,MAAM,GAAG,KAAKD,OAAL,CAAaC,MAA5B;AACA,UAAIyB,cAAc,GAAG,KAAK1B,OAAL,CAAanE,YAAb,CAA0B8F,GAA/C;;AACA,UAAI1B,MAAM,KAAKyB,cAAX,IAA6B,KAAK1B,OAAL,CAAa4B,IAAb,CAAkB7D,IAAlB,KAA2B,OAA5D,EAAsE;AACpE,aAAKb,QAAL,CAAc;AAAChB,UAAAA,SAAS,EAAE;AAAZ,SAAd;AACAwF,QAAAA,cAAc,GAAG,IAAjB;AACD;;AACD,UAAIoC,gBAAgB,GAAGxG,KAAK,CAACE,MAAN,CAAauG,wBAAb,CAAsCrG,KAA7D;AACA,UAAIsG,cAAc,GAAG,mBAAiBtC,cAAjB,GAAgC,cAArD;AACA,UAAIrF,IAAI,GAAGxC,WAAW,CAACoK,aAAZ,CAA0B5H,IAArC;AACA,YAAM6H,MAAM,GAAG;AACbC,QAAAA,UAAU,EAAE,KAAKnE,OAAL,CAAaoE,KAAb,CAAmBC,EAAnB,CAAsBF,UADrB;AAEbG,QAAAA,OAAO,EAAEN,cAFI;AAGbO,QAAAA,MAAM,EAAE,KAAKvE,OAAL,CAAaoE,KAAb,CAAmBC,EAAnB,CAAsBE,MAHjB;AAIbC,QAAAA,WAAW,EAAE,KAAKxE,OAAL,CAAaoE,KAAb,CAAmBC,EAAnB,CAAsBG,WAJtB;AAKbC,QAAAA,eAAe,EAAE,KAAKzE,OAAL,CAAaoE,KAAb,CAAmBC,EAAnB,CAAsBI;AAL1B,OAAf;AAOA,YAAMC,aAAa,GAAG,IAAIzL,EAAJ,CAAOiL,MAAP,CAAtB;AACA,YAAMS,WAAW,GAAGtI,IAAI,CAACwB,IAAzB;AACA,YAAM+G,cAAc,GAAGD,WAAvB;AACA,WAAKzH,QAAL,CAAc;AAAChB,QAAAA,SAAS,EAAE;AAAZ,OAAd;AAEAwI,MAAAA,aAAa,CACRG,UADL,CACgBxI,IADhB,EACsBsI,WADtB,EAEKhE,IAFL,CAEUS,IAAI,IAAI;AAAC7B,QAAAA,OAAO,CAACC,GAAR,CAAY4B,IAAZ;AAAkB,aAAKlE,QAAL,CAAc;AAAChB,UAAAA,SAAS,EAAE;AAAZ,SAAd;AAA0D,OAF/F,EAGKqF,KAHL,CAGWC,GAAG,IAAI;AAACjC,QAAAA,OAAO,CAACuF,KAAR,CAActD,GAAd;AAAmB,aAAKtE,QAAL,CAAc;AAAChB,UAAAA,SAAS,EAAE,oBAAkBsF;AAA9B,SAAd;AAAmD,OAHzF;;AAKA,UACEoD,cAAc,CAAC/E,IAAf,GAAsBC,MAAtB,KAAiC,CAAjC,IACAgE,gBAAgB,CAACjE,IAAjB,GAAwBC,MAAxB,KAAmC,CADnC,IAEAkE,cAAc,CAACnE,IAAf,GAAsBC,MAAtB,KAAiC,CAHnC,EAIE;AACA,aAAK5C,QAAL,CAAc;AAAEhB,UAAAA,SAAS,EAAE;AAAb,SAAd;AACA;AACD;;AAED,YAAMgE,WAAW,GAAG;AAClBC,QAAAA,KAAK,EAAE;gDACmCF,MAAO,qBAAoByB,cAAe,gCAA+BkD,cAAe,uBAAsBd,gBAAiB,qBAAoBE,cAAe;;;AAF1L,OAApB;AAME5D,MAAAA,KAAK,CAAC,gCAAD,EAAmC;AACxCC,QAAAA,MAAM,EAAE,MADgC;AAExCC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,WAAf,CAFkC;AAGxCO,QAAAA,OAAO,EAAE;AACP,0BAAgB,kBADT;AAEPC,UAAAA,aAAa,EAAE,YAAYX;AAFpB;AAH+B,OAAnC,CAAL,CAQCY,IARD,CAQMC,GAAG,IAAI;AACX,YAAIA,GAAG,CAACC,MAAJ,KAAe,GAAf,IAAsBD,GAAG,CAACC,MAAJ,KAAe,GAAzC,EAA8C;AAC5C,gBAAM,IAAIC,KAAJ,CAAU,SAAV,CAAN;AACD;;AACD,eAAOF,GAAG,CAACG,IAAJ,EAAP;AACD,OAbD,EAcCJ,IAdD,CAcMK,OAAO,IAAI;AACf,cAAM0B,aAAa,GAAG1B,OAAO,CAACI,IAAR,CAAa2D,oBAAb,CAAkCpD,GAAxD;AACA,cAAMiB,WAAW,GAAG,KAAKxH,KAAL,CAAWK,KAAX,CAAiBoH,IAAjB,CAAsBC,CAAC,IAAIA,CAAC,CAACnB,GAAF,KAAUe,aAArC,CAApB;AACA,cAAMK,cAAc,GAAG,KAAK3H,KAAL,CAAWK,KAAX,CAAiBuH,OAAjB,CAAyBJ,WAAzB,CAAvB;AACA,cAAMK,WAAW,GAAG,KAAK7H,KAAL,CAAWK,KAAX,CAAiByH,MAAjB,CAAwBH,cAAxB,EAAwC,CAAxC,CAApB;AACA,aAAK3H,KAAL,CAAWK,KAAX,CAAiB0F,IAAjB,CAAsBH,OAAO,CAACI,IAAR,CAAa2D,oBAAnC;AACA,aAAK/E,OAAL,CAAavE,KAAb,GAAqB,KAAKL,KAAL,CAAWK,KAAhC;AACA,cAAM6F,aAAa,GAAGf,IAAI,CAACC,SAAL,CAAeQ,OAAO,CAACI,IAAvB,EAA6B/B,KAA7B,CAAmC,CAAnC,EAAqC,EAArC,CAAtB;AACA,aAAK+C,UAAL;AACA,aAAKlF,QAAL,CAAc;AAAEhB,UAAAA,SAAS,EAAEoF,aAAb;AAA4BzF,UAAAA,YAAY,EAAEmF,OAAO,CAACI,IAAR,CAAa2D;AAAvD,SAAd;AACD,OAxBD,EAyBCxD,KAzBD,CAyBOC,GAAG,IAAI;AACZ,aAAKtE,QAAL,CAAc;AAAChB,UAAAA,SAAS,EAAEsF;AAAZ,SAAd;AACD,OA3BD;AA4BH,KA1e+B;;AAAA,SA6ehCwD,sBA7egC,GA6eN1H,KAAD,IAAW;AAElC,WAAKJ,QAAL,CAAc;AAAE5B,QAAAA,QAAQ,EAAE,KAAZ;AAAoBQ,QAAAA,eAAe,EAAE,IAArC;AAA2CI,QAAAA,SAAS,EAAE;AAAtD,OAAd;AACA,YAAM6D,KAAK,GAAG,KAAKC,OAAL,CAAaD,KAA3B;AACA,YAAME,MAAM,GAAG,KAAKD,OAAL,CAAaC,MAA5B;AACA,UAAIyB,cAAc,GAAG,KAAK1B,OAAL,CAAanE,YAAb,CAA0B8F,GAA/C;;AACA,UAAI1B,MAAM,KAAKyB,cAAX,IAA6B,KAAK1B,OAAL,CAAa4B,IAAb,CAAkB7D,IAAlB,KAA2B,OAA5D,EAAsE;AACpE,aAAKb,QAAL,CAAc;AAAChB,UAAAA,SAAS,EAAE;AAAZ,SAAd;AACAwF,QAAAA,cAAc,GAAG,IAAjB;AACD;;AAED,UAAIuD,SAAS,GAAG3H,KAAK,CAACE,MAAN,CAAa0H,iBAAb,CAA+BxH,KAA/C;AACA,UAAIyH,UAAU,GAAG7H,KAAK,CAACE,MAAN,CAAa4H,kBAAb,CAAgC1H,KAAjD;AACA,UAAI2H,cAAc,GAAG/H,KAAK,CAACE,MAAN,CAAa8H,sBAAb,CAAoC5H,KAAzD;;AACA,UAAIJ,KAAK,CAACE,MAAN,CAAa+H,mCAAb,CAAiDrG,OAAjD,KAA6D,IAAjE,EAAuE;AACrEmG,QAAAA,cAAc,GAAG,IAAIlG,IAAJ,GAAWC,WAAX,GAAyBC,KAAzB,CAA+B,CAA/B,EAAiC,EAAjC,CAAjB;AACD;;AAED,UACE/B,KAAK,CAACE,MAAN,CAAagI,2BAAb,CAAyC9H,KAAzC,KAAmD,IAAnD,IACAJ,KAAK,CAACE,MAAN,CAAa+H,mCAAb,CAAiDrG,OAAjD,KAA6D,IAF/D,EAGE;AACAK,QAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0B,IAAIL,IAAJ,CAAS7B,KAAK,CAACE,MAAN,CAAagI,2BAAb,CAAyC9H,KAAlD,EAAyD0B,WAAzD,GAAuEC,KAAvE,CAA6E,CAA7E,EAA+E,EAA/E,CAA1B;AACAgG,QAAAA,cAAc,GAAE,IAAIlG,IAAJ,CAAS7B,KAAK,CAACE,MAAN,CAAagI,2BAAb,CAAyC9H,KAAlD,EAAyD0B,WAAzD,GAAuEC,KAAvE,CAA6E,CAA7E,EAA+E,EAA/E,CAAhB;AACD;;AAGD,UAAIoG,YAAY,GAAGnI,KAAK,CAACE,MAAN,CAAakI,oBAAb,CAAkChI,KAArD;;AACA,UAAIJ,KAAK,CAACE,MAAN,CAAamI,iCAAb,CAA+CzG,OAA/C,KAA2D,IAA/D,EAAqE;AACnEuG,QAAAA,YAAY,GAAG,IAAItG,IAAJ,GAAWC,WAAX,GAAyBC,KAAzB,CAA+B,CAA/B,EAAiC,EAAjC,CAAf;AACD;;AAED,UACE/B,KAAK,CAACE,MAAN,CAAaoI,yBAAb,CAAuClI,KAAvC,KAAiD,IAAjD,IACAJ,KAAK,CAACE,MAAN,CAAamI,iCAAb,CAA+CzG,OAA/C,KAA2D,IAF7D,EAGE;AACAK,QAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2B,IAAIL,IAAJ,CAAS7B,KAAK,CAACE,MAAN,CAAaoI,yBAAb,CAAuClI,KAAhD,EAAuD0B,WAAvD,GAAqEC,KAArE,CAA2E,CAA3E,EAA6E,EAA7E,CAA3B;AACAoG,QAAAA,YAAY,GAAE,IAAItG,IAAJ,CAAS7B,KAAK,CAACE,MAAN,CAAaoI,yBAAb,CAAuClI,KAAhD,EAAuD0B,WAAvD,GAAqEC,KAArE,CAA2E,CAA3E,EAA6E,EAA7E,CAAd;AACD;;AAED,UACE4F,SAAS,CAACpF,IAAV,GAAiBC,MAAjB,KAA4B,CAA5B,IACAqF,UAAU,CAACtF,IAAX,GAAkBC,MAAlB,KAA6B,CAD7B,IAEAuF,cAAc,CAACxF,IAAf,GAAsBC,MAAtB,KAAiC,CAFjC,IAGA2F,YAAY,CAAC5F,IAAb,GAAoBC,MAApB,KAA+B,CAJjC,EAKE;AACA,aAAK5C,QAAL,CAAc;AAAChB,UAAAA,SAAS,EAAE;AAAZ,SAAd;AACA;AACD;;AAED,YAAMgE,WAAW,GAAG;AAClBC,QAAAA,KAAK,EAAE;2CAC8BF,MAAO,qBAAoByB,cAAe,2BAA0BuD,SAAU,iBAAgBE,UAAW,qBAAoBE,cAAe,mBAAkBI,YAAa;;;AAF9L,OAApB;AAMArF,MAAAA,KAAK,CAAC,gCAAD,EAAmC;AACtCC,QAAAA,MAAM,EAAE,MAD8B;AAEtCC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,WAAf,CAFgC;AAGtCO,QAAAA,OAAO,EAAE;AACP,0BAAgB,kBADT;AAEPC,UAAAA,aAAa,EAAE,YAAYX;AAFpB;AAH6B,OAAnC,CAAL,CAQGY,IARH,CAQQC,GAAG,IAAI;AACX,YAAIA,GAAG,CAACC,MAAJ,KAAe,GAAf,IAAsBD,GAAG,CAACC,MAAJ,KAAe,GAAzC,EAA8C;AAC5C,gBAAM,IAAIC,KAAJ,CAAU,SAAV,CAAN;AACD;;AACD,eAAOF,GAAG,CAACG,IAAJ,EAAP;AACD,OAbH,EAcGJ,IAdH,CAcQK,OAAO,IAAI;AACf,cAAM0B,aAAa,GAAG1B,OAAO,CAACI,IAAR,CAAayE,eAAb,CAA6BlE,GAAnD;AACA,cAAMiB,WAAW,GAAG,KAAKxH,KAAL,CAAWK,KAAX,CAAiBoH,IAAjB,CAAsBC,CAAC,IAAIA,CAAC,CAACnB,GAAF,KAAUe,aAArC,CAApB;AACA,cAAMK,cAAc,GAAG,KAAK3H,KAAL,CAAWK,KAAX,CAAiBuH,OAAjB,CAAyBJ,WAAzB,CAAvB;AACA,cAAMK,WAAW,GAAG,KAAK7H,KAAL,CAAWK,KAAX,CAAiByH,MAAjB,CAAwBH,cAAxB,EAAwC,CAAxC,CAApB;AACA,aAAK3H,KAAL,CAAWK,KAAX,CAAiB0F,IAAjB,CAAsBH,OAAO,CAACI,IAAR,CAAayE,eAAnC;AACA,aAAK7F,OAAL,CAAavE,KAAb,GAAqB,KAAKL,KAAL,CAAWK,KAAhC;AACA,cAAM6F,aAAa,GAAGf,IAAI,CAACC,SAAL,CAAeQ,OAAO,CAACI,IAAvB,EAA6B/B,KAA7B,CAAmC,CAAnC,EAAqC,EAArC,CAAtB,CAPe,CAQf;;AACA,aAAK+C,UAAL;AACA,aAAKlF,QAAL,CAAc;AAAEhB,UAAAA,SAAS,EAAEoF,aAAb;AAA4BzF,UAAAA,YAAY,EAAEmF,OAAO,CAACI,IAAR,CAAayE;AAAvD,SAAd;AACD,OAzBH,EA0BGtE,KA1BH,CA0BSC,GAAG,IAAI;AACZ,aAAKtE,QAAL,CAAc;AAAChB,UAAAA,SAAS,EAAEsF;AAAZ,SAAd;AACD,OA5BH;AA6BD,KAlkB+B;;AAAA,SAqkBhCsE,yBArkBgC,GAqkBHxI,KAAD,IAAW;AAErC,UAAI2C,MAAM,GAAG,KAAKD,OAAL,CAAaC,MAA1B;AACA,YAAMF,KAAK,GAAG,KAAKC,OAAL,CAAaD,KAA3B;AACA,UAAIuC,KAAK,GAAG,IAAZ;AACA,UAAInC,KAAK,GAAG7C,KAAK,CAACE,MAAN,CAAauI,cAAb,CAA4BrI,KAAxC;;AACA,UAAIJ,KAAK,CAACE,MAAN,CAAawI,oBAAb,CAAkCtI,KAAlC,KAA4C,QAAhD,EAA0D;AACxD4E,QAAAA,KAAK,GAAGhF,KAAK,CAACE,MAAN,CAAayI,cAAb,CAA4BvI,KAApC;AACD,OAFD,MAEO;AACL4E,QAAAA,KAAK,GAAGhF,KAAK,CAACE,MAAN,CAAawI,oBAAb,CAAkCtI,KAA1C;AACD;;AAED,WAAKR,QAAL,CAAc;AACZnB,QAAAA,eAAe,EAAEuG,KADL;AAEZtG,QAAAA,eAAe,EAAEmE,KAFL;AAGZ3E,QAAAA,SAAS,EAAE,KAHC;AAIZU,QAAAA,SAAS,EAAE;AAJC,OAAd;;AAOA,UACEoG,KAAK,CAACzC,IAAN,GAAaC,MAAb,KAAwB,CAAxB,IACAK,KAAK,CAACN,IAAN,GAAaC,MAAb,KAAwB,CAF1B,EAGE;AACA,aAAK5C,QAAL,CAAc;AAAChB,UAAAA,SAAS,EAAE;AAAZ,SAAd;AACA;AACD;;AAED,YAAMgK,MAAM,GAAG;AAAE5D,QAAAA,KAAF;AAASnC,QAAAA;AAAT,OAAf;AACA,YAAMD,WAAW,GAAG;AAClBC,QAAAA,KAAK,EAAG;sCACwBF,MAAO,YAAWqC,KAAM,YAAWnC,KAAM;;;AAFvD,OAApB;AAMAC,MAAAA,KAAK,CAAC,gCAAD,EAAmC;AACtCC,QAAAA,MAAM,EAAE,MAD8B;AAEtCC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,WAAf,CAFgC;AAGtCO,QAAAA,OAAO,EAAE;AACP,0BAAgB,kBADT;AAEPC,UAAAA,aAAa,EAAE,YAAYX;AAFpB;AAH6B,OAAnC,CAAL,CAQGY,IARH,CAQQC,GAAG,IAAI;AACX,YAAIA,GAAG,CAACC,MAAJ,KAAe,GAAf,IAAsBD,GAAG,CAACC,MAAJ,KAAe,GAAzC,EAA8C;AAC5C,gBAAM,IAAIC,KAAJ,CAAU,SAAV,CAAN;AACD;;AACD,eAAOF,GAAG,CAACG,IAAJ,EAAP;AACD,OAbH,EAcGJ,IAdH,CAcQK,OAAO,IAAI;AACf,cAAMM,aAAa,GAAGf,IAAI,CAACC,SAAL,CAAeQ,OAAO,CAACI,IAAvB,EAA6B/B,KAA7B,CAAmC,CAAnC,EAAqC,CAArC,CAAtB;AACA,cAAM3D,WAAW,GAAGsF,OAAO,CAACI,IAAR,CAAa+E,YAAjC;AACA,aAAKjJ,QAAL,CAAc;AAAExB,UAAAA,WAAW,EAAEA,WAAf;AAA4BQ,UAAAA,SAAS,EAAEoF;AAAvC,SAAd,EAHe,CAIf;AACD,OAnBH,EAoBGC,KApBH,CAoBSC,GAAG,IAAI;AACZ,aAAKtE,QAAL,CAAc;AAAChB,UAAAA,SAAS,EAAEsF;AAAZ,SAAd;AACD,OAtBH;AAuBD,KA9nB+B;;AAAA,SAgoBhC4E,2BAhoBgC,GAgoBD9I,KAAD,IAAW;AAEvC,UAAI2C,MAAM,GAAG,KAAKD,OAAL,CAAaC,MAA1B;AACA,YAAMF,KAAK,GAAG,KAAKC,OAAL,CAAaD,KAA3B;AACA,WAAK7C,QAAL,CAAc;AAAE1B,QAAAA,SAAS,EAAE,KAAb;AAAoBU,QAAAA,SAAS,EAAE;AAA/B,OAAd;AACA,UAAIwF,cAAc,GAAGpE,KAAK,CAACE,MAAN,CAAa6I,WAAb,CAAyB3I,KAA9C;AACA,YAAMwC,WAAW,GAAG;AAClBC,QAAAA,KAAK,EAAG;mCACqBF,MAAO,qBAAoByB,cAAe;;;AAFrD,OAApB;AAMAtB,MAAAA,KAAK,CAAC,gCAAD,EAAmC;AACtCC,QAAAA,MAAM,EAAE,MAD8B;AAEtCC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,WAAf,CAFgC;AAGtCO,QAAAA,OAAO,EAAE;AACP,0BAAgB,kBADT;AAEPC,UAAAA,aAAa,EAAE,YAAYX;AAFpB;AAH6B,OAAnC,CAAL,CAQGY,IARH,CAQQC,GAAG,IAAI;AACX,YAAIA,GAAG,CAACC,MAAJ,KAAe,GAAf,IAAsBD,GAAG,CAACC,MAAJ,KAAe,GAAzC,EAA8C;AAC5C,gBAAM,IAAIC,KAAJ,CAAU,SAAV,CAAN;AACD;;AACD,eAAOF,GAAG,CAACG,IAAJ,EAAP;AACD,OAbH,EAcGJ,IAdH,CAcQK,OAAO,IAAI;AACf,cAAMM,aAAa,GAAGf,IAAI,CAACC,SAAL,CAAeQ,OAAO,CAACI,IAAvB,EAA6B/B,KAA7B,CAAmC,CAAnC,EAAqC,EAArC,CAAtB;AACA,cAAM3D,WAAW,GAAGsF,OAAO,CAACI,IAAR,CAAakF,SAAjC;AAEA,aAAKpJ,QAAL,CAAc;AAAExB,UAAAA,WAAW,EAAE,CAACA,WAAD,CAAf;AAA8BQ,UAAAA,SAAS,EAAEoF;AAAzC,SAAd,EAJe,CAKf;AACD,OApBH,EAqBGC,KArBH,CAqBSC,GAAG,IAAI;AACZ,aAAKtE,QAAL,CAAc;AAAChB,UAAAA,SAAS,EAAEsF;AAAZ,SAAd;AACD,OAvBH;AAwBD,KApqB+B;;AAAA,SAsqBhC+E,uCAtqBgC,GAsqBWjJ,KAAD,IAAW;AAEnD,UAAI2C,MAAM,GAAG,KAAKD,OAAL,CAAaC,MAA1B;AACA,YAAMF,KAAK,GAAG,KAAKC,OAAL,CAAaD,KAA3B;AACA,WAAK7C,QAAL,CAAc;AAAE1B,QAAAA,SAAS,EAAE,KAAb;AAAoBU,QAAAA,SAAS,EAAE;AAA/B,OAAd;AACA,UAAIkH,cAAc,GAAG9F,KAAK,CAACE,MAAN,CAAagJ,aAAb,CAA2B9I,KAAhD;;AACA,UAAIJ,KAAK,CAACE,MAAN,CAAaiJ,0BAAb,CAAwCvH,OAAxC,KAAoD,IAAxD,EAA8D;AAC5DkE,QAAAA,cAAc,GAAG,IAAIjE,IAAJ,GAAWC,WAAX,GAAyBC,KAAzB,CAA+B,CAA/B,EAAiC,EAAjC,CAAjB;AACD;;AAED,UACE/B,KAAK,CAACE,MAAN,CAAa+F,2BAAb,CAAyC7F,KAAzC,KAAmD,IAAnD,IACAJ,KAAK,CAACE,MAAN,CAAaiJ,0BAAb,CAAwCvH,OAAxC,KAAoD,IAFtD,EAGE;AACAK,QAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0B,IAAIL,IAAJ,CAAS7B,KAAK,CAACE,MAAN,CAAa+F,2BAAb,CAAyC7F,KAAlD,EAAyD0B,WAAzD,GAAuEC,KAAvE,CAA6E,CAA7E,EAA+E,EAA/E,CAA1B;AACA+D,QAAAA,cAAc,GAAG,IAAIjE,IAAJ,CAAS7B,KAAK,CAACE,MAAN,CAAa+F,2BAAb,CAAyC7F,KAAlD,EAAyD0B,WAAzD,GAAuEC,KAAvE,CAA6E,CAA7E,EAA+E,EAA/E,CAAjB;AACD;;AAED,YAAMa,WAAW,GAAG;AAClBC,QAAAA,KAAK,EAAG;+CACiCF,MAAO,qBAAoBmD,cAAe;;;AAFjE,OAApB;AAMAhD,MAAAA,KAAK,CAAC,gCAAD,EAAmC;AACtCC,QAAAA,MAAM,EAAE,MAD8B;AAEtCC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,WAAf,CAFgC;AAGtCO,QAAAA,OAAO,EAAE;AACP,0BAAgB,kBADT;AAEPC,UAAAA,aAAa,EAAE,YAAYX;AAFpB;AAH6B,OAAnC,CAAL,CAQGY,IARH,CAQQC,GAAG,IAAI;AACX,YAAIA,GAAG,CAACC,MAAJ,KAAe,GAAf,IAAsBD,GAAG,CAACC,MAAJ,KAAe,GAAzC,EAA8C;AAC5C,gBAAM,IAAIC,KAAJ,CAAU,SAAV,CAAN;AACD;;AACD,eAAOF,GAAG,CAACG,IAAJ,EAAP;AACD,OAbH,EAcGJ,IAdH,CAcQK,OAAO,IAAI;AACf,cAAMM,aAAa,GAAGf,IAAI,CAACC,SAAL,CAAeQ,OAAO,CAACI,IAAvB,EAA6B/B,KAA7B,CAAmC,CAAnC,EAAqC,CAArC,CAAtB;AACA,cAAM3D,WAAW,GAAGsF,OAAO,CAACI,IAAR,CAAasF,qBAAjC;AACA,aAAKxJ,QAAL,CAAc;AAAExB,UAAAA,WAAW,EAAEA,WAAf;AAA4BQ,UAAAA,SAAS,EAAEoF;AAAvC,SAAd,EAHe,CAIf;AACD,OAnBH,EAoBGC,KApBH,CAoBSC,GAAG,IAAI;AACZ,aAAKtE,QAAL,CAAc;AAAChB,UAAAA,SAAS,EAAEsF;AAAZ,SAAd;AACD,OAtBH;AAuBD,KArtB+B;;AAAA,SAutBhCmF,uCAvtBgC,GAutBWrJ,KAAD,IAAW;AAEnD,WAAKJ,QAAL,CAAc;AAAE1B,QAAAA,SAAS,EAAE,KAAb;AAAoBU,QAAAA,SAAS,EAAE;AAA/B,OAAd;AACA,UAAI+D,MAAM,GAAG,KAAKD,OAAL,CAAaC,MAA1B;AACA,YAAMF,KAAK,GAAG,KAAKC,OAAL,CAAaD,KAA3B;AAEA,UAAI6G,SAAS,GAAGtJ,KAAK,CAACE,MAAN,CAAaqJ,kBAAb,CAAgCnJ,KAAhD;;AAEA,UACEJ,KAAK,CAACE,MAAN,CAAasJ,2BAAb,CAAyCpJ,KAAzC,KAAmD,IADrD,EAEE;AACA6B,QAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0B,IAAIL,IAAJ,CAAS7B,KAAK,CAACE,MAAN,CAAasJ,2BAAb,CAAyCpJ,KAAlD,EAAyD0B,WAAzD,GAAuEC,KAAvE,CAA6E,CAA7E,EAA+E,EAA/E,CAA1B;AACAuH,QAAAA,SAAS,GAAG,IAAIzH,IAAJ,CAAS7B,KAAK,CAACE,MAAN,CAAasJ,2BAAb,CAAyCpJ,KAAlD,EAAyD0B,WAAzD,GAAuEC,KAAvE,CAA6E,CAA7E,EAA+E,EAA/E,CAAZ;AACD;;AAED,UAAI0H,OAAO,GAAGzJ,KAAK,CAACE,MAAN,CAAawJ,gBAAb,CAA8BtJ,KAA5C;;AAEA,UACEJ,KAAK,CAACE,MAAN,CAAayJ,yBAAb,CAAuCvJ,KAAvC,KAAiD,IADnD,EAEE;AACA6B,QAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0B,IAAIL,IAAJ,CAAS7B,KAAK,CAACE,MAAN,CAAayJ,yBAAb,CAAuCvJ,KAAhD,EAAuD0B,WAAvD,GAAqEC,KAArE,CAA2E,CAA3E,EAA6E,EAA7E,CAA1B;AACA0H,QAAAA,OAAO,GAAG,IAAI5H,IAAJ,CAAS7B,KAAK,CAACE,MAAN,CAAayJ,yBAAb,CAAuCvJ,KAAhD,EAAuD0B,WAAvD,GAAqEC,KAArE,CAA2E,CAA3E,EAA6E,EAA7E,CAAV;AACD;;AAED,YAAMa,WAAW,GAAG;AAClBC,QAAAA,KAAK,EAAG;8CACgCF,MAAO,gBAAe2G,SAAU,cAAaG,OAAQ;;;AAF3E,OAApB;AAMA3G,MAAAA,KAAK,CAAC,gCAAD,EAAmC;AACtCC,QAAAA,MAAM,EAAE,MAD8B;AAEtCC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,WAAf,CAFgC;AAGtCO,QAAAA,OAAO,EAAE;AACP,0BAAgB,kBADT;AAEPC,UAAAA,aAAa,EAAE,YAAYX;AAFpB;AAH6B,OAAnC,CAAL,CAQGY,IARH,CAQQC,GAAG,IAAI;AACX,YAAIA,GAAG,CAACC,MAAJ,KAAe,GAAf,IAAsBD,GAAG,CAACC,MAAJ,KAAe,GAAzC,EAA8C;AAC5C,gBAAM,IAAIC,KAAJ,CAAU,SAAV,CAAN;AACD;;AACD,eAAOF,GAAG,CAACG,IAAJ,EAAP;AACD,OAbH,EAcGJ,IAdH,CAcQK,OAAO,IAAI;AACf,cAAMM,aAAa,GAAGf,IAAI,CAACC,SAAL,CAAeQ,OAAO,CAACI,IAAvB,EAA6B/B,KAA7B,CAAmC,CAAnC,EAAqC,CAArC,CAAtB;AACA,cAAM3D,WAAW,GAAGsF,OAAO,CAACI,IAAR,CAAa8F,qBAAjC;AACA,aAAKhK,QAAL,CAAc;AAAExB,UAAAA,WAAW,EAAEA,WAAf;AAA4BQ,UAAAA,SAAS,EAAEoF;AAAvC,SAAd,EAHe,CAIf;AACD,OAnBH,EAoBGC,KApBH,CAoBSC,GAAG,IAAI;AACZ,aAAKtE,QAAL,CAAc;AAAChB,UAAAA,SAAS,EAAEsF;AAAZ,SAAd;AACD,OAtBH;AAuBD,KA5wB+B;;AAAA,SA8wBhC2F,6BA9wBgC,GA8wBC7J,KAAD,IAAW;AAEzC,WAAKJ,QAAL,CAAc;AAAE1B,QAAAA,SAAS,EAAE,KAAb;AAAoBU,QAAAA,SAAS,EAAE;AAA/B,OAAd;AAEA,UAAIT,KAAK,GAAG,KAAKL,KAAL,CAAWK,KAAvB;AACA,YAAM2L,KAAK,GAAG,IAAIC,MAAJ,CAAW/J,KAAK,CAACE,MAAN,CAAa8J,aAAb,CAA2B5J,KAAtC,EAA4C,GAA5C,CAAd;AACA,UAAI6J,MAAM,GAAG9L,KAAK,CAAC+L,MAAN,CAAa5F,IAAI,IAAIA,IAAI,CAAC/D,IAAL,CAAU4J,KAAV,CAAgBL,KAAhB,CAArB,CAAb;AACA,WAAKlK,QAAL,CAAc;AAAExB,QAAAA,WAAW,EAAE6L;AAAf,OAAd;AACD,KAtxB+B;;AAAA,SAyxBhCG,kBAzxBgC,GAyxBX,MAAM;AACzB,WAAKxK,QAAL,CAAc;AAAE7B,QAAAA,QAAQ,EAAE,KAAZ;AAAmBC,QAAAA,QAAQ,EAAE,KAA7B;AAAoCC,QAAAA,QAAQ,EAAE,KAA9C;AAAqDC,QAAAA,SAAS,EAAE;AAAhE,OAAd;AACD,KA3xB+B;;AAAA,SAm0BhCmM,aAn0BgC,GAm0BhB,MAAM;AAEpB,WAAKzK,QAAL,CAAc;AAAEhB,QAAAA,SAAS,EAAE;AAAb,OAAd;AACA,YAAM+D,MAAM,GAAG,KAAKD,OAAL,CAAaC,MAA5B;AACA,YAAMC,WAAW,GAAG;AAClBC,QAAAA,KAAK,EAAG;yCAC2BF,MAAO;;;AAFxB,OAApB;AAMAG,MAAAA,KAAK,CAAC,gCAAD,EAAmC;AACtCC,QAAAA,MAAM,EAAE,MAD8B;AAEtCC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,WAAf,CAFgC;AAGtCO,QAAAA,OAAO,EAAE;AACP,0BAAgB,kBADT;AAEPC,UAAAA,aAAa,EAAE,YAAY,KAAKV,OAAL,CAAaD;AAFjC;AAH6B,OAAnC,CAAL,CAQGY,IARH,CAQQC,GAAG,IAAI;AACX,YAAIA,GAAG,CAACC,MAAJ,KAAe,GAAf,IAAsBD,GAAG,CAACC,MAAJ,KAAe,GAAzC,EAA8C;AAC5C,eAAKb,OAAL,CAAa9D,SAAb,GAAyB,SAAzB;AACA,gBAAM,IAAI4E,KAAJ,CAAU,SAAV,CAAN;AACD;;AACD,eAAOF,GAAG,CAACG,IAAJ,EAAP;AACD,OAdH,EAeGJ,IAfH,CAeQK,OAAO,IAAI;AACf,cAAMvF,KAAK,GAAGuF,OAAO,CAACI,IAAR,CAAawG,YAA3B;AACA,cAAMtG,aAAa,GAAGf,IAAI,CAACC,SAAL,CAAeQ,OAAO,CAACI,IAAvB,EAA6B/B,KAA7B,CAAmC,CAAnC,EAAqC,CAArC,CAAtB;AACA,aAAKnC,QAAL,CAAc;AAAChB,UAAAA,SAAS,EAAEoF,aAAZ;AAA2B7F,UAAAA,KAAK,EAAEA;AAAlC,SAAd;AACA,aAAKuE,OAAL,CAAavE,KAAb,GAAqB,KAAKL,KAAL,CAAWK,KAAhC;AACD,OApBH,EAqBG8F,KArBH,CAqBSC,GAAG,IAAI;AACZ,aAAKtE,QAAL,CAAc;AAAChB,UAAAA,SAAS,EAAEsF;AAAZ,SAAd;AACD,OAvBH;AAwBD,KAr2B+B;;AAAA,SAs2BhCqG,cAt2BgC,GAs2Bf,MAAM;AAErB,WAAK3K,QAAL,CAAc;AAAEhB,QAAAA,SAAS,EAAE;AAAb,OAAd;AACA,YAAM+D,MAAM,GAAG,KAAKD,OAAL,CAAaC,MAA5B;AACA,YAAMC,WAAW,GAAG;AAClBC,QAAAA,KAAK,EAAG;0CAC4BF,MAAO;;;AAFzB,OAApB;AAMAG,MAAAA,KAAK,CAAC,gCAAD,EAAmC;AACtCC,QAAAA,MAAM,EAAE,MAD8B;AAEtCC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,WAAf,CAFgC;AAGtCO,QAAAA,OAAO,EAAE;AACP,0BAAgB,kBADT;AAEPC,UAAAA,aAAa,EAAE,YAAY,KAAKV,OAAL,CAAaD;AAFjC;AAH6B,OAAnC,CAAL,CAQGY,IARH,CAQQC,GAAG,IAAI;AACX,YAAIA,GAAG,CAACC,MAAJ,KAAe,GAAf,IAAsBD,GAAG,CAACC,MAAJ,KAAe,GAAzC,EAA8C;AAC5C,eAAKb,OAAL,CAAa9D,SAAb,GAAyB,SAAzB;AACA,gBAAM,IAAI4E,KAAJ,CAAU,SAAV,CAAN;AACD;;AACD,eAAOF,GAAG,CAACG,IAAJ,EAAP;AACD,OAdH,EAeGJ,IAfH,CAeQK,OAAO,IAAI;AACf,cAAMvF,KAAK,GAAGuF,OAAO,CAACI,IAAR,CAAa0G,aAA3B;AACA,cAAMxG,aAAa,GAAGf,IAAI,CAACC,SAAL,CAAeQ,OAAO,CAACI,IAAvB,EAA6B/B,KAA7B,CAAmC,CAAnC,EAAqC,CAArC,CAAtB;AACA,aAAKnC,QAAL,CAAc;AAAChB,UAAAA,SAAS,EAAEoF,aAAZ;AAA2B7F,UAAAA,KAAK,EAAEA;AAAlC,SAAd;AACA,aAAKuE,OAAL,CAAavE,KAAb,GAAqB,KAAKL,KAAL,CAAWK,KAAhC;AACD,OApBH,EAqBG8F,KArBH,CAqBSC,GAAG,IAAI;AACZ,aAAKtE,QAAL,CAAc;AAAChB,UAAAA,SAAS,EAAEsF;AAAZ,SAAd;AACD,OAvBH;AAwBD,KAx4B+B;;AAAA,SA04BlCuG,kBA14BkC,GA04Bb,MAAM;AAEzB,YAAM9H,MAAM,GAAG,KAAKD,OAAL,CAAaC,MAA5B;AACA,YAAMyB,cAAc,GAAG,KAAK1B,OAAL,CAAanE,YAAb,CAA0B8F,GAAjD;;AACA,UAAG,KAAK3B,OAAL,CAAa4B,IAAb,CAAkB7D,IAAlB,KAA2B,OAA9B,EAAuC;AACrC,aAAKb,QAAL,CAAc;AAAChB,UAAAA,SAAS,EAAE;AAAZ,SAAd;AACD;;AAED,WAAKgB,QAAL,CAAc;AAAC3B,QAAAA,QAAQ,EAAE,IAAX;AAAiBW,QAAAA,SAAS,EAAE;AAA5B,OAAd;AAEA,YAAMgE,WAAW,GAAG;AAClBC,QAAAA,KAAK,EAAG;;gCAEoBF,MAAO,uBAAsByB,cAAe;;;AAHtD,OAApB;AAQAtB,MAAAA,KAAK,CAAC,gCAAD,EAAmC;AACtCC,QAAAA,MAAM,EAAE,MAD8B;AAEtCC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,WAAf,CAFgC;AAGtCO,QAAAA,OAAO,EAAE;AACP,0BAAgB,kBADT;AAEPC,UAAAA,aAAa,EAAE,YAAY,KAAKV,OAAL,CAAaD;AAFjC;AAH6B,OAAnC,CAAL,CAQGY,IARH,CAQQC,GAAG,IAAI;AACX,YAAIA,GAAG,CAACC,MAAJ,KAAe,GAAf,IAAsBD,GAAG,CAACC,MAAJ,KAAe,GAAzC,EAA8C;AAC5C,gBAAM,IAAIC,KAAJ,CAAU,SAAV,CAAN;AACD;;AACD,eAAOF,GAAG,CAACG,IAAJ,EAAP;AACD,OAbH,EAcGJ,IAdH,CAcQK,OAAO,IAAI;AACf,cAAMM,aAAa,GAAGf,IAAI,CAACC,SAAL,CAAeQ,OAAO,CAACI,IAAvB,EAA6B/B,KAA7B,CAAmC,CAAnC,EAAqC,CAArC,CAAtB;AACA,aAAKnC,QAAL,CAAc;AAAChB,UAAAA,SAAS,EAAEoF;AAAZ,SAAd;AACA,YAAI0G,WAAW,GAAGhH,OAAO,CAACI,IAAR,CAAa6G,UAA/B;AACA,YAAIC,aAAa,GAAGF,WAAW,CAACrG,GAAhC;AACAqG,QAAAA,WAAW,GAAG,KAAK5M,KAAL,CAAWK,KAAX,CAAiBoH,IAAjB,CAAsBC,CAAC,IAAIA,CAAC,CAACnB,GAAF,KAAUuG,aAArC,CAAd;AACA,cAAMC,cAAc,GAAG,KAAK/M,KAAL,CAAWK,KAAX,CAAiBuH,OAAjB,CAAyBgF,WAAzB,CAAvB;AACA,cAAM/E,WAAW,GAAG,KAAK7H,KAAL,CAAWK,KAAX,CAAiByH,MAAjB,CAAwBiF,cAAxB,EAAwC,CAAxC,CAApB;AACA,aAAKjL,QAAL,CAAc;AAAE3B,UAAAA,QAAQ,EAAE;AAAZ,SAAd;AACA,aAAK6G,UAAL;AACD,OAxBH,EAyBGb,KAzBH,CAyBSC,GAAG,IAAI;AACZ,aAAKtE,QAAL,CAAc;AAAChB,UAAAA,SAAS,EAAEsF;AAAZ,SAAd;;AACA,YAAI,KAAKxE,QAAT,EAAmB;AACjB,eAAKE,QAAL,CAAc;AAAE3B,YAAAA,QAAQ,EAAE;AAAZ,WAAd;AACD;AACF,OA9BH;AA+BD,KA37BiC;;AAAA,SA67BlC6M,wBA77BkC,GA67BNC,KAAD,IAAW;AAEpC,WAAKnL,QAAL,CAAc;AAAEhB,QAAAA,SAAS,EAAE;AAAb,OAAd;AACA,UAAI6D,KAAK,GAAG,KAAKC,OAAL,CAAaD,KAAzB;AACA,UAAIE,MAAM,GAAG,KAAKD,OAAL,CAAaC,MAA1B;AACA,UAAIyB,cAAc,GAAG,KAAKtG,KAAL,CAAWS,YAAX,CAAwB8F,GAA7C;AACA,UAAI2G,IAAI,GAAG,IAAInJ,IAAJ,CAASkJ,KAAK,CAACC,IAAN,CAAWC,MAAX,CAAkB,CAAlB,EAAoB,EAApB,IAAwB,IAAjC,EAAuCnJ,WAAvC,GAAqDC,KAArD,CAA2D,CAA3D,EAA6D,EAA7D,CAAX;AACA,YAAMa,WAAW,GAAG;AAClBC,QAAAA,KAAK,EAAG;6CACiCF,MAAO,qBAAoByB,cAAe,qBAAoB4G,IAAK;;;AAF1F,OAApB;AAMElI,MAAAA,KAAK,CAAC,gCAAD,EAAmC;AACtCC,QAAAA,MAAM,EAAE,MAD8B;AAEtCC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,WAAf,CAFgC;AAGtCO,QAAAA,OAAO,EAAE;AACP,0BAAgB,kBADT;AAEPC,UAAAA,aAAa,EAAE,YAAYX;AAFpB;AAH6B,OAAnC,CAAL,CAQGY,IARH,CAQQC,GAAG,IAAI;AACX,YAAIA,GAAG,CAACC,MAAJ,KAAe,GAAf,IAAsBD,GAAG,CAACC,MAAJ,KAAe,GAAzC,EAA8C;AAC5C,gBAAM,IAAIC,KAAJ,CAAU,SAAV,CAAN;AACD;;AACD,eAAOF,GAAG,CAACG,IAAJ,EAAP;AACD,OAbH,EAcGJ,IAdH,CAcQK,OAAO,IAAI;AACf,cAAM0B,aAAa,GAAG1B,OAAO,CAACI,IAAR,CAAaoH,oBAAb,CAAkC7G,GAAxD;AACA,cAAMiB,WAAW,GAAG,KAAKxH,KAAL,CAAWK,KAAX,CAAiBoH,IAAjB,CAAsBC,CAAC,IAAIA,CAAC,CAACnB,GAAF,KAAUe,aAArC,CAApB;AACA,cAAMK,cAAc,GAAG,KAAK3H,KAAL,CAAWK,KAAX,CAAiBuH,OAAjB,CAAyBJ,WAAzB,CAAvB;AACA,cAAMK,WAAW,GAAG,KAAK7H,KAAL,CAAWK,KAAX,CAAiByH,MAAjB,CAAwBH,cAAxB,EAAwC,CAAxC,CAApB;AACA,aAAK3H,KAAL,CAAWK,KAAX,CAAiB0F,IAAjB,CAAsBH,OAAO,CAACI,IAAR,CAAaoH,oBAAnC;AACA,aAAKxI,OAAL,CAAavE,KAAb,GAAqB,KAAKL,KAAL,CAAWK,KAAhC;AACA,cAAM6F,aAAa,GAAGf,IAAI,CAACC,SAAL,CAAeQ,OAAO,CAACI,IAAvB,EAA6B/B,KAA7B,CAAmC,CAAnC,EAAqC,EAArC,CAAtB;AACA,aAAKnC,QAAL,CAAc;AAAEhB,UAAAA,SAAS,EAAEoF;AAAb,SAAd;AACA,aAAKc,UAAL;AACD,OAxBH,EAyBGb,KAzBH,CAyBSC,GAAG,IAAI;AACZ,aAAKtE,QAAL,CAAc;AAAEhB,UAAAA,SAAS,EAAEsF;AAAb,SAAd;AACD,OA3BH;AA4BH,KAt+BiC;;AAAA,SAw+BlCiH,mBAx+BkC,GAw+BXJ,KAAD,IAAW;AAE/B,WAAKnL,QAAL,CAAc;AAAEhB,QAAAA,SAAS,EAAE;AAAb,OAAd;AACA,UAAI6D,KAAK,GAAG,KAAKC,OAAL,CAAaD,KAAzB;AACA,UAAIE,MAAM,GAAG,KAAKD,OAAL,CAAaC,MAA1B;AACA,UAAIyB,cAAc,GAAG,KAAKtG,KAAL,CAAWS,YAAX,CAAwB8F,GAA7C;AACA,YAAMzB,WAAW,GAAG;AAClBC,QAAAA,KAAK,EAAG;wCAC4BF,MAAO,qBAAoByB,cAAe,iBAAgB2G,KAAK,CAACK,KAAM;;;AAFxF,OAApB;AAMAtI,MAAAA,KAAK,CAAC,gCAAD,EAAmC;AACtCC,QAAAA,MAAM,EAAE,MAD8B;AAEtCC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,WAAf,CAFgC;AAGtCO,QAAAA,OAAO,EAAE;AACP,0BAAgB,kBADT;AAEPC,UAAAA,aAAa,EAAE,YAAYX;AAFpB;AAH6B,OAAnC,CAAL,CAQGY,IARH,CAQQC,GAAG,IAAI;AACX,YAAIA,GAAG,CAACC,MAAJ,KAAe,GAAf,IAAsBD,GAAG,CAACC,MAAJ,KAAe,GAAzC,EAA8C;AAC5C,gBAAM,IAAIC,KAAJ,CAAU,SAAV,CAAN;AACD;;AACD,eAAOF,GAAG,CAACG,IAAJ,EAAP;AACD,OAbH,EAcGJ,IAdH,CAcQK,OAAO,IAAI;AACf,YAAIgH,WAAW,GAAGhH,OAAO,CAACI,IAAR,CAAauH,eAA/B;AACA,cAAMjG,aAAa,GAAG1B,OAAO,CAACI,IAAR,CAAauH,eAAb,CAA6BhH,GAAnD;AACA,cAAMiB,WAAW,GAAG,KAAKxH,KAAL,CAAWK,KAAX,CAAiBoH,IAAjB,CAAsBC,CAAC,IAAIA,CAAC,CAACnB,GAAF,KAAUe,aAArC,CAApB;AACA,cAAMK,cAAc,GAAG,KAAK3H,KAAL,CAAWK,KAAX,CAAiBuH,OAAjB,CAAyBJ,WAAzB,CAAvB;AACA,cAAMK,WAAW,GAAG,KAAK7H,KAAL,CAAWK,KAAX,CAAiByH,MAAjB,CAAwBH,cAAxB,EAAwC,CAAxC,CAApB;AACA,aAAK3H,KAAL,CAAWK,KAAX,CAAiB0F,IAAjB,CAAsBH,OAAO,CAACI,IAAR,CAAauH,eAAnC;AACA,aAAK3I,OAAL,CAAavE,KAAb,GAAqB,KAAKL,KAAL,CAAWK,KAAhC;AACA,cAAM6F,aAAa,GAAGf,IAAI,CAACC,SAAL,CAAeQ,OAAO,CAACI,IAAvB,EAA6B/B,KAA7B,CAAmC,CAAnC,EAAqC,EAArC,CAAtB;AACA,aAAKnC,QAAL,CAAc;AAAEhB,UAAAA,SAAS,EAAEoF;AAAb,SAAd;AACA,aAAKc,UAAL;AACD,OAzBH,EA0BGb,KA1BH,CA0BSC,GAAG,IAAI;AACZ,aAAKtE,QAAL,CAAc;AAAEhB,UAAAA,SAAS,EAAEsF;AAAb,SAAd;AACD,OA5BH;AA6BD,KAjhCiC;;AAAA,SAmhClCoH,wBAnhCkC,GAmhCNP,KAAD,IAAW;AAEpC,WAAKnL,QAAL,CAAc;AAAEhB,QAAAA,SAAS,EAAE;AAAb,OAAd;AACA,UAAI6D,KAAK,GAAG,KAAKC,OAAL,CAAaD,KAAzB;AACA,UAAIE,MAAM,GAAG,KAAKD,OAAL,CAAaC,MAA1B;AACA,UAAIyB,cAAc,GAAG,KAAKtG,KAAL,CAAWS,YAAX,CAAwB8F,GAA7C,CALoC,CAMlC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAMzB,WAAW,GAAG;AAClBC,QAAAA,KAAK,EAAG;+CACiCF,MAAO,qBAAoByB,cAAe,qBAAoB2G,KAAK,CAACxK,IAAK;;;AAFhG,OAApB;AAMAuC,MAAAA,KAAK,CAAC,gCAAD,EAAmC;AACtCC,QAAAA,MAAM,EAAE,MAD8B;AAEtCC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,WAAf,CAFgC;AAGtCO,QAAAA,OAAO,EAAE;AACP,0BAAgB,kBADT;AAEPC,UAAAA,aAAa,EAAE,YAAYX;AAFpB;AAH6B,OAAnC,CAAL,CAQGY,IARH,CAQQC,GAAG,IAAI;AACX,YAAIA,GAAG,CAACC,MAAJ,KAAe,GAAf,IAAsBD,GAAG,CAACC,MAAJ,KAAe,GAAzC,EAA8C;AAC5C,gBAAM,IAAIC,KAAJ,CAAU,SAAV,CAAN;AACD;;AACD,eAAOF,GAAG,CAACG,IAAJ,EAAP;AACD,OAbH,EAcGJ,IAdH,CAcQK,OAAO,IAAI;AACf,YAAIgH,WAAW,GAAGhH,OAAO,CAACI,IAAR,CAAayH,oBAA/B;AACA,cAAMnG,aAAa,GAAG1B,OAAO,CAACI,IAAR,CAAayH,oBAAb,CAAkClH,GAAxD;AACA,cAAMiB,WAAW,GAAG,KAAKxH,KAAL,CAAWK,KAAX,CAAiBoH,IAAjB,CAAsBC,CAAC,IAAIA,CAAC,CAACnB,GAAF,KAAUe,aAArC,CAApB;AACA,cAAMK,cAAc,GAAG,KAAK3H,KAAL,CAAWK,KAAX,CAAiBuH,OAAjB,CAAyBJ,WAAzB,CAAvB;AACA,cAAMK,WAAW,GAAG,KAAK7H,KAAL,CAAWK,KAAX,CAAiByH,MAAjB,CAAwBH,cAAxB,EAAwC,CAAxC,CAApB;AACA,aAAK3H,KAAL,CAAWK,KAAX,CAAiB0F,IAAjB,CAAsBH,OAAO,CAACI,IAAR,CAAayH,oBAAnC;AACA,aAAK7I,OAAL,CAAavE,KAAb,GAAqB,KAAKL,KAAL,CAAWK,KAAhC;AACA,cAAM6F,aAAa,GAAGf,IAAI,CAACC,SAAL,CAAeQ,OAAO,CAACI,IAAvB,EAA6B/B,KAA7B,CAAmC,CAAnC,EAAqC,EAArC,CAAtB;AACA,aAAKnC,QAAL,CAAc;AAAEhB,UAAAA,SAAS,EAAEoF;AAAb,SAAd;AACA,aAAKc,UAAL;AACD,OAzBH,EA0BGb,KA1BH,CA0BSC,GAAG,IAAI;AACZ,aAAKtE,QAAL,CAAc;AAAEhB,UAAAA,SAAS,EAAEsF;AAAb,SAAd;AACD,OA5BH;AA6BH,KAjlCiC;;AAAA,SA0lClCsH,iBA1lCkC,GA0lCd7I,MAAM,IAAI;AAE5B,WAAK/C,QAAL,CAAc+D,SAAS,IAAI;AACzB,cAAMpF,YAAY,GAAGoF,SAAS,CAACxF,KAAV,CAAgBoH,IAAhB,CAAqBC,CAAC,IAAIA,CAAC,CAACnB,GAAF,KAAU1B,MAApC,CAArB;AACA,aAAKD,OAAL,CAAanE,YAAb,GAA4BA,YAA5B;AACA,aAAKqB,QAAL,CAAc;AAACrB,UAAAA,YAAY,EAAEA;AAAf,SAAd;AACA,eAAO;AAAEA,UAAAA,YAAY,EAAEA;AAAhB,SAAP;AACD,OALD;AAMD,KAlmCiC;;AAAA,SAomChCkN,gBApmCgC,GAomCZC,UAAD,IAAgB;AAE/B,WAAK9L,QAAL,CAAc;AAACZ,QAAAA,cAAc,EAAE;AAAjB,OAAd;AAEA,YAAMD,IAAI,GAAG,uDAAqD2M,UAAU,CAACC,IAAhE,GAAqE,GAArE,GAAyED,UAAU,CAACnL,IAAjG;AACA,YAAMqL,IAAI,GAAGF,UAAU,CAACG,MAAxB;AAEA,WAAKjM,QAAL,CAAc;AAACX,QAAAA,sBAAsB,EAAEF,IAAzB;AAA+BG,QAAAA,sBAAsB,EAAE0M;AAAvD,OAAd;AACH,KA5mC+B;;AAAA,SA8mChCE,mBA9mCgC,GA8mCV,MAAM;AAExB,WAAKlM,QAAL,CAAc;AAACZ,QAAAA,cAAc,EAAE;AAAjB,OAAd;AACH,KAjnC+B;;AAAA,SAmnChCI,SAnnCgC,GAmnCnBkF,IAAD,IAAU;AAElB,YAAMjF,OAAO,GAAG;AACd+L,QAAAA,KAAK,EAAE,yCADO;AAEd9G,QAAAA,IAAI,EAAE;AACJD,UAAAA,GAAG,EAAEC,IAAI,CAACD,GADN;AAEJpE,UAAAA,KAAK,EAAEqE,IAAI,CAACrE,KAFR;AAGJI,UAAAA,QAAQ,EAAEiE,IAAI,CAACjE,QAHX;AAIJE,UAAAA,IAAI,EAAE+D,IAAI,CAAC/D,IAJP;AAKJI,UAAAA,GAAG,EAAE2D,IAAI,CAAC3D,GALN;AAMJ4D,UAAAA,OAAO,EAAC;AACNC,YAAAA,MAAM,EAAEF,IAAI,CAACC,OAAL,CAAaC,MADf;AAENC,YAAAA,MAAM,EAAEH,IAAI,CAACC,OAAL,CAAaE,MAFf;AAGNC,YAAAA,IAAI,EAAEJ,IAAI,CAACC,OAAL,CAAaG,IAHb;AAINC,YAAAA,MAAM,EAAEL,IAAI,CAACC,OAAL,CAAaI,MAJf;AAKNC,YAAAA,UAAU,EAAEN,IAAI,CAACC,OAAL,CAAaK;AALnB,WANJ;AAaJ/D,UAAAA,KAAK,EAAEyD,IAAI,CAACzD,KAbR;AAcJJ,UAAAA,IAAI,EAAE6D,IAAI,CAAC7D,IAdP;AAeJgB,UAAAA,cAAc,EAAE6C,IAAI,CAAC7C,cAfjB;AAgBJU,UAAAA,eAAe,EAAEmC,IAAI,CAACnC,eAhBlB;AAiBJ4J,UAAAA,WAAW,EAAEzH,IAAI,CAACyH,WAjBd;AAkBJC,UAAAA,UAAU,EAAE1H,IAAI,CAAC2H,WAlBb;AAmBJC,UAAAA,KAAK,EAAE5H,IAAI,CAAC4H;AAnBR;AAFQ,OAAhB;AAwBF,WAAKtM,QAAL,CAAc;AAACR,QAAAA,SAAS,EAAE,IAAZ;AAAkBC,QAAAA,OAAO,EAAEA;AAA3B,OAAd;AACD,KA9oC+B;;AAAA,SAgpChC8M,eAhpCgC,GAgpCd,MAAM;AACpB,WAAKvM,QAAL,CAAc;AAACR,QAAAA,SAAS,EAAE,KAAZ;AAAmBC,QAAAA,OAAO,EAAE;AAA5B,OAAd;AACH,KAlpC+B;;AAAA,SAwpChC+M,WAxpCgC,GAwpClB,MAAM;AAClBnK,MAAAA,OAAO,CAACC,GAAR,CAAa;;OAAb;AAGE,WAAKtC,QAAL,CAAc;AACZL,QAAAA,WAAW,EAAE,IADD;AAEZE,QAAAA,SAAS,EAAE;AAFC,OAAd;AAIH,KAhqC+B;;AAAA,SAkqChC4M,WAlqCgC,GAkqClB,MAAM;AAClBpK,MAAAA,OAAO,CAACC,GAAR,CAAa;;OAAb;AAGE,WAAKtC,QAAL,CAAc;AACZL,QAAAA,WAAW,EAAE,KADD;AAEZE,QAAAA,SAAS,EAAE;AAFC,OAAd;AAIH,KA1qC+B;AAAA;;AAiChC6M,EAAAA,iBAAiB,GAAG;AAElB,QAAI,KAAK5J,OAAL,CAAa4B,IAAb,CAAkB/D,IAAlB,KAA2B,mBAA/B,EAAmD;AACjD,WAAKX,QAAL,CAAc;AAACjB,QAAAA,SAAS,EAAE;AAAZ,OAAd;AACD;;AAED,QAAIsE,IAAI,CAACC,SAAL,CAAe,KAAKR,OAAL,CAAanE,YAA5B,MAA8C,IAAlD,EAAwD;AACtD,WAAKqB,QAAL,CAAc;AAAErB,QAAAA,YAAY,EAAE,KAAKmE,OAAL,CAAanE;AAA7B,OAAd;AACD;;AAED,SAAKuG,UAAL;AACD;;AAivBDA,EAAAA,UAAU,GAAG;AAEX,UAAMnC,MAAM,GAAG,KAAKD,OAAL,CAAaC,MAA5B;AACA,SAAK/C,QAAL,CAAc;AAAEvB,MAAAA,SAAS,EAAE,IAAb;AAAmBO,MAAAA,SAAS,EAAE;AAA9B,KAAd;AACA,UAAMgE,WAAW,GAAG;AAClBC,MAAAA,KAAK,EAAG;kCACoBF,MAAO;;;AAFjB,KAApB;AAMAG,IAAAA,KAAK,CAAC,gCAAD,EAAmC;AACtCC,MAAAA,MAAM,EAAE,MAD8B;AAEtCC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,WAAf,CAFgC;AAGtCO,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEPC,QAAAA,aAAa,EAAE,YAAY,KAAKV,OAAL,CAAaD;AAFjC;AAH6B,KAAnC,CAAL,CAQGY,IARH,CAQQC,GAAG,IAAI;AACX,UAAIA,GAAG,CAACC,MAAJ,KAAe,GAAf,IAAsBD,GAAG,CAACC,MAAJ,KAAe,GAAzC,EAA8C;AAC5C,aAAKb,OAAL,CAAa9D,SAAb,GAAyB,SAAzB;AACA,cAAM,IAAI4E,KAAJ,CAAU,SAAV,CAAN;AACD;;AACD,aAAOF,GAAG,CAACG,IAAJ,EAAP;AACD,KAdH,EAeGJ,IAfH,CAeQK,OAAO,IAAI;AACf,YAAMM,aAAa,GAAGf,IAAI,CAACC,SAAL,CAAeQ,OAAO,CAACI,IAAvB,EAA6B/B,KAA7B,CAAmC,CAAnC,EAAqC,CAArC,CAAtB;AACA,WAAKnC,QAAL,CAAc;AAAChB,QAAAA,SAAS,EAAEoF,aAAZ;AAA2B7F,QAAAA,KAAK,EAAEuF,OAAO,CAACI,IAAR,CAAa3F,KAA/C;AAAsDE,QAAAA,SAAS,EAAE;AAAjE,OAAd;AACA,WAAKqE,OAAL,CAAavE,KAAb,GAAqB,KAAKL,KAAL,CAAWK,KAAhC;AACD,KAnBH,EAoBG8F,KApBH,CAoBSC,GAAG,IAAI;AACZ,WAAKtE,QAAL,CAAc;AAAChB,QAAAA,SAAS,EAAEsF;AAAZ,OAAd;;AACA,UAAI,KAAKxE,QAAT,EAAmB;AACjB,aAAKE,QAAL,CAAc;AAAEvB,UAAAA,SAAS,EAAE;AAAb,SAAd;AACD;AACF,KAzBH;AA0BD;;AAmRHkO,EAAAA,iBAAiB,CAAEvM,KAAF,EAAS;AAExB,UAAMgF,KAAK,GAAGhF,KAAK,CAACE,MAAN,CAAaE,KAA3B;AACA,SAAKR,QAAL,CAAc;AAAEpB,MAAAA,eAAe,EAAEwG;AAAnB,KAAd;AACD;;AA4DCwH,EAAAA,uBAAuB,GAAI;AACzB,SAAK5M,QAAL,CAAc;AAACxB,MAAAA,WAAW,EAAE,EAAd;AAAkBQ,MAAAA,SAAS,EAAE;AAA7B,KAAd;AACD;;AAsBD6N,EAAAA,oBAAoB,GAAG;AACrB,SAAK/M,QAAL,GAAgB,KAAhB;AACD;;AAEDgN,EAAAA,MAAM,GAAG;AACP,WACA,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAK5O,KAAL,CAAWkB,cAAX,KAA8B,IAA9B,IACC,oBAAC,gBAAD;AACE,MAAA,qBAAqB,EAAE,KAAK8M,mBAD9B;AAEE,MAAA,cAAc,EAAE,KAAKhO,KAAL,CAAWmB,sBAF7B;AAGE,MAAA,cAAc,EAAE,KAAKnB,KAAL,CAAWoB,sBAH7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,EAQG,KAAKpB,KAAL,CAAWqB,gBAAX,KAAgC,IAAhC,IACC,oBAAC,UAAD;AACE,MAAA,OAAO,EAAE,KAAKrB,KAAL,CAAWwB,OADtB;AAEE,MAAA,OAAO,EAAE,KAAKxB,KAAL,CAAWuB,OAFtB;AAGE,MAAA,iBAAiB,EAAE,KAAK8M,eAH1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MATJ,EAeE,oBAAC,QAAD;AACE,MAAA,UAAU,EAAE,KAAKzJ,OAAL,CAAaC,MAD3B;AAEE,MAAA,KAAK,EAAE,KAAK7E,KAAL,CAAWc,SAFpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAfF,EAmBE,oBAAC,cAAD;AACE,MAAA,aAAa,EAAE,KAAKwN,WADtB;AAEE,MAAA,aAAa,EAAE,KAAKC,WAFtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAnBF,EAuBG,KAAKvO,KAAL,CAAWe,OAAX,KAAuB,IAAvB,IACC,oBAAC,cAAD;AACE,MAAA,MAAM,EAAE,KAAKf,KAAL,CAAWgB,aADrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAxBJ,EA6BE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEC,KAAKhB,KAAL,CAAWyB,WAAX,KAA2B,IAA3B,IACC,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,CAAT;AAAY,MAAA,SAAS,EAAC,YAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA,oBAAC,WAAD;AACE,MAAA,GAAG,EAAE,KAAKzB,KAAL,CAAWS,YADlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADA,CAHF,EAUA,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,KAAKT,KAAL,CAAW2B,SAApB;AAA+B,MAAA,SAAS,EAAC,YAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,SAAD;AAAW,MAAA,SAAS,EAAC,yBAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,GAAD,CAAK,SAAL;AAAe,MAAA,EAAE,EAAC,mBAAlB;AAAsC,MAAA,gBAAgB,EAAC,YAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,GAAD;AAAK,MAAA,OAAO,EAAC,OAAb;AAAqB,MAAA,SAAS,EAAC,aAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,GAAD,CAAK,IAAL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,GAAD,CAAK,IAAL;AAAU,MAAA,QAAQ,EAAC,YAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,CADF,EAIE,oBAAC,GAAD,CAAK,IAAL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,GAAD,CAAK,IAAL;AAAU,MAAA,QAAQ,EAAC,UAAnB;AAA8B,MAAA,QAAQ,MAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,CAJF,EAOE,oBAAC,GAAD,CAAK,IAAL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,GAAD,CAAK,IAAL;AAAU,MAAA,QAAQ,EAAC,aAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,CAPF,EAUE,oBAAC,GAAD,CAAK,IAAL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,GAAD,CAAK,IAAL;AAAU,MAAA,QAAQ,EAAC,cAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,CAVF,EAaE,oBAAC,GAAD,CAAK,IAAL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,GAAD,CAAK,IAAL;AAAU,MAAA,QAAQ,EAAC,YAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,CAbF,EAgBI,KAAKiD,OAAL,CAAa4B,IAAb,CAAkB7D,IAAlB,KAA2B,OAA3B,IACF,oBAAC,GAAD,CAAK,IAAL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,GAAD,CAAK,IAAL;AAAU,MAAA,QAAQ,EAAC,YAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,CAjBF,EAqBE,oBAAC,GAAD,CAAK,IAAL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,GAAD,CAAK,IAAL;AAAU,MAAA,QAAQ,EAAC,UAAnB;AAA8B,MAAA,QAAQ,MAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,CArBF,EAwBE,oBAAC,GAAD,CAAK,IAAL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,GAAD,CAAK,IAAL;AAAU,MAAA,QAAQ,EAAC,sBAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,CAxBF,EA2BE,oBAAC,GAAD,CAAK,IAAL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,GAAD,CAAK,IAAL;AAAU,MAAA,QAAQ,EAAC,eAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,CA3BF,EA8BE,oBAAC,GAAD,CAAK,IAAL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,GAAD,CAAK,IAAL;AAAU,MAAA,QAAQ,EAAC,UAAnB;AAA8B,MAAA,QAAQ,MAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,CA9BF,EAiCE,oBAAC,GAAD,CAAK,IAAL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,GAAD,CAAK,IAAL;AAAU,MAAA,QAAQ,EAAC,oBAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,CAjCF,EAoCE,oBAAC,GAAD,CAAK,IAAL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,GAAD,CAAK,IAAL;AAAU,MAAA,QAAQ,EAAC,eAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,CApCF,EAuCE,oBAAC,GAAD,CAAK,IAAL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,GAAD,CAAK,IAAL;AAAU,MAAA,QAAQ,EAAC,oBAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,CAvCF,CADF,CADF,EAgDE,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,GAAD,CAAK,OAAL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,GAAD,CAAK,IAAL;AAAU,MAAA,QAAQ,EAAC,YAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAK3C,KAAL,CAAWS,YAAX,KAA4B,IAA5B,IACC,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,iBAAhB;AAAkC,MAAA,IAAI,EAAC,IAAvC;AAA4C,MAAA,SAAS,EAAC,mBAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oDAFJ,EAMG,KAAKT,KAAL,CAAWO,SAAX,KAAyB,KAAzB,IACC,KAAKP,KAAL,CAAWS,YAAX,KAA4B,IAD7B,IAGG,oBAAC,UAAD;AACA,MAAA,UAAU,EAAE,KAAKmE,OAAL,CAAaC,MADzB;AAEA,MAAA,WAAW,EAAE,KAAKD,OAFlB;AAGA,MAAA,IAAI,EAAE,KAAK5E,KAAL,CAAWS,YAHjB;AAIA,MAAA,MAAM,EAAE,KAAKsB,sBAJb;AAKA,MAAA,SAAS,EAAE,KAAK/B,KAAL,CAAWa,SALtB;AAMA,MAAA,QAAQ,EAAE,KAAK8L,kBANf;AAOA,MAAA,gBAAgB,EAAE,KAAKK,wBAPvB;AAQA,MAAA,WAAW,EAAE,KAAKK,mBARlB;AASA,MAAA,gBAAgB,EAAE,KAAKG,wBATvB;AAUA,MAAA,gBAAgB,EAAE,KAAKG,gBAVvB;AAWA,MAAA,WAAW,EAAE,KAAKrM,SAXlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MATN,CADF,EA0BI,KAAKsD,OAAL,CAAa4B,IAAb,CAAkB7D,IAAlB,KAA2B,OAA3B,IACA,oBAAC,GAAD,CAAK,IAAL;AAAU,MAAA,QAAQ,EAAC,YAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,iBAAhB;AAAkC,MAAA,IAAI,EAAC,IAAvC;AAA4C,MAAA,SAAS,EAAC,mBAAtD;AAA0E,MAAA,OAAO,EAAE,KAAKd,sBAAxF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCADA,EAEG,KAAK7B,KAAL,CAAWC,QAAX,IACC,oBAAC,cAAD;AACE,MAAA,UAAU,EAAE,KAAK2E,OAAL,CAAaC,MAD3B;AAEE,MAAA,SAAS,MAFX;AAGE,MAAA,UAAU,MAHZ;AAIE,MAAA,QAAQ,EAAE,KAAKyH,kBAJjB;AAKE,MAAA,SAAS,EAAE,KAAKrK,mBALlB;AAME,MAAA,QAAQ,EAAE,KAAKA,mBANjB;AAOE,MAAA,WAAW,EAAC,SAPd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHJ,CA3BJ,EA4CE,oBAAC,GAAD,CAAK,IAAL;AAAU,MAAA,QAAQ,EAAC,sBAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKjC,KAAL,CAAWS,YAAX,KAA4B,IAA5B,IACC,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,iBAAhB;AAAkC,MAAA,SAAS,EAAC,mBAA5C;AAAgE,MAAA,IAAI,EAAC,IAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oDAFJ,EAMG,KAAKT,KAAL,CAAWS,YAAX,KAA4B,IAA5B,IACC,KAAKmE,OAAL,CAAa4B,IAAb,CAAkB7D,IAAlB,KAA2B,OAD5B,IAGC,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,iBAAhB;AAAkC,MAAA,IAAI,EAAC,IAAvC;AAA4C,MAAA,SAAS,EAAC,mBAAtD;AAA0E,MAAA,OAAO,EAAE,KAAKZ,sBAAxF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCATJ,EAWG,KAAK/B,KAAL,CAAWS,YAAX,KAA4B,IAA5B,IACC,KAAKT,KAAL,CAAWS,YAAX,CAAwB8F,GAAxB,KAAgC,KAAK3B,OAAL,CAAa4B,IAAb,CAAkBD,GADnD,IAGC,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,iBAAhB;AAAkC,MAAA,IAAI,EAAC,IAAvC;AAA4C,MAAA,SAAS,EAAC,mBAAtD;AAA0E,MAAA,OAAO,EAAE,KAAKxE,sBAAxF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAdJ,EAgBG,KAAK/B,KAAL,CAAWS,YAAX,KAA4B,IAA5B,IACC,KAAKT,KAAL,CAAWS,YAAX,CAAwB8F,GAAxB,KAAgC,KAAK3B,OAAL,CAAa4B,IAAb,CAAkBD,GADnD,IAEC,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,gBAAhB;AAAiC,MAAA,SAAS,EAAC,mBAA3C;AAA+D,MAAA,IAAI,EAAC,IAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAlBJ,EAsBG,KAAKvG,KAAL,CAAWS,YAAX,KAA4B,IAA5B,IACC,KAAKT,KAAL,CAAWS,YAAX,CAAwB8F,GAAxB,KAAgC,KAAK3B,OAAL,CAAa4B,IAAb,CAAkBD,GADnD,IAEC,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,gBAAhB;AAAiC,MAAA,SAAS,EAAC,mBAA3C;AAA+D,MAAA,IAAI,EAAC,IAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAxBJ,EA4BG,KAAKvG,KAAL,CAAWE,QAAX,IACC,KAAKF,KAAL,CAAWS,YAAX,KAA4B,IAD7B,IAGC,oBAAC,cAAD;AACE,MAAA,UAAU,EAAE,KAAKmE,OAAL,CAAaC,MAD3B;AAEE,MAAA,SAAS,MAFX;AAGE,MAAA,UAAU,MAHZ;AAIE,MAAA,QAAQ,EAAE,KAAKyH,kBAJjB;AAKE,MAAA,SAAS,EAAE,KAAKjG,yBALlB;AAME,MAAA,WAAW,EAAC,SANd;AAOE,MAAA,IAAI,EAAE,KAAKzB,OAAL,CAAanE,YAPrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA/BJ,CA5CF,EAuFE,oBAAC,GAAD,CAAK,IAAL;AAAU,MAAA,QAAQ,EAAC,eAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKT,KAAL,CAAWS,YAAX,KAA4B,IAA5B,IACC,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,iBAAhB;AAAkC,MAAA,SAAS,EAAC,mBAA5C;AAAgE,MAAA,IAAI,EAAC,IAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oDAFJ,EAOG,KAAKT,KAAL,CAAWS,YAAX,KAA4B,IAA5B,IACC,KAAKmE,OAAL,CAAa4B,IAAb,CAAkB7D,IAAlB,KAA2B,OAD5B,IAGC,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,iBAAhB;AAAkC,MAAA,IAAI,EAAC,IAAvC;AAA4C,MAAA,SAAS,EAAC,mBAAtD;AAA0E,MAAA,OAAO,EAAE,KAAKZ,sBAAxF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAVJ,EAYG,KAAK/B,KAAL,CAAWS,YAAX,KAA4B,IAA5B,IACC,KAAKT,KAAL,CAAWS,YAAX,CAAwB8F,GAAxB,KAAgC,KAAK3B,OAAL,CAAa4B,IAAb,CAAkBD,GADnD,IAGC,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,iBAAhB;AAAkC,MAAA,IAAI,EAAC,IAAvC;AAA4C,MAAA,SAAS,EAAC,mBAAtD;AAA0E,MAAA,OAAO,EAAE,KAAKxE,sBAAxF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAfJ,EAiBG,KAAK/B,KAAL,CAAWS,YAAX,KAA4B,IAA5B,IACC,KAAKT,KAAL,CAAWS,YAAX,CAAwB8F,GAAxB,KAAgC,KAAK3B,OAAL,CAAa4B,IAAb,CAAkBD,GADnD,IAEC,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,iBAAhB;AAAkC,MAAA,SAAS,EAAC,mBAA5C;AAAgE,MAAA,IAAI,EAAC,IAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAnBJ,EAuBG,KAAKvG,KAAL,CAAWS,YAAX,KAA4B,IAA5B,IACC,KAAKT,KAAL,CAAWS,YAAX,CAAwB8F,GAAxB,KAAgC,KAAK3B,OAAL,CAAa4B,IAAb,CAAkBD,GADnD,IAEC,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,gBAAhB;AAAiC,MAAA,SAAS,EAAC,mBAA3C;AAA+D,MAAA,IAAI,EAAC,IAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAzBJ,EA6BG,KAAKvG,KAAL,CAAWE,QAAX,IACC,KAAKF,KAAL,CAAWS,YAAX,KAA4B,IAD7B,IAGG,oBAAC,mBAAD;AACE,MAAA,UAAU,EAAE,KAAKmE,OAAL,CAAaC,MAD3B;AAEE,MAAA,SAAS,MAFX;AAGE,MAAA,UAAU,MAHZ;AAIE,MAAA,QAAQ,EAAE,KAAKyH,kBAJjB;AAKE,MAAA,SAAS,EAAE,KAAKrF,8BALlB;AAME,MAAA,WAAW,EAAC,SANd;AAOE,MAAA,IAAI,EAAE,KAAKjH,KAAL,CAAWS,YAPnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAhCN,CAvFF,EAmIE,oBAAC,GAAD,CAAK,IAAL;AAAU,MAAA,QAAQ,EAAC,oBAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKT,KAAL,CAAWS,YAAX,KAA4B,IAA5B,IACC,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,iBAAhB;AAAkC,MAAA,SAAS,EAAC,mBAA5C;AAAgE,MAAA,IAAI,EAAC,IAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0DAFJ,EAOG,KAAKT,KAAL,CAAWS,YAAX,KAA4B,IAA5B,IACC,KAAKmE,OAAL,CAAa4B,IAAb,CAAkB7D,IAAlB,KAA2B,OAD5B,IAGC,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,iBAAhB;AAAkC,MAAA,IAAI,EAAC,IAAvC;AAA4C,MAAA,SAAS,EAAC,mBAAtD;AAA0E,MAAA,KAAK,EAAC,YAAhF;AAA6F,MAAA,OAAO,EAAE,KAAK8L,iBAAL,CAAuBI,IAAvB,CAA4B,IAA5B,CAAtG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAVJ,EAYG,KAAK7O,KAAL,CAAWS,YAAX,KAA4B,IAA5B,IACC,KAAKT,KAAL,CAAWS,YAAX,CAAwB8F,GAAxB,KAAgC,KAAK3B,OAAL,CAAa4B,IAAb,CAAkBD,GADnD,IAGC,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,iBAAhB;AAAkC,MAAA,IAAI,EAAC,IAAvC;AAA4C,MAAA,SAAS,EAAC,mBAAtD;AAA0E,MAAA,KAAK,EAAC,YAAhF;AAA6F,MAAA,OAAO,EAAE,KAAKkI,iBAAL,CAAuBI,IAAvB,CAA4B,IAA5B,CAAtG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAfJ,EAiBG,KAAK7O,KAAL,CAAWS,YAAX,KAA4B,IAA5B,IACC,KAAKT,KAAL,CAAWS,YAAX,CAAwB8F,GAAxB,KAAgC,KAAK3B,OAAL,CAAa4B,IAAb,CAAkBD,GADnD,IAEC,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,iBAAhB;AAAkC,MAAA,SAAS,EAAC,mBAA5C;AAAgE,MAAA,IAAI,EAAC,IAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAnBJ,EAuBG,KAAKvG,KAAL,CAAWS,YAAX,KAA4B,IAA5B,IACC,KAAKT,KAAL,CAAWS,YAAX,CAAwB8F,GAAxB,KAAgC,KAAK3B,OAAL,CAAa4B,IAAb,CAAkBD,GADnD,IAEC,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,gBAAhB;AAAiC,MAAA,SAAS,EAAC,mBAA3C;AAA+D,MAAA,IAAI,EAAC,IAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAzBJ,EA8BG,KAAKvG,KAAL,CAAWU,eAAX,KAA+B,YAA/B,IACD,KAAKV,KAAL,CAAWS,YAAX,KAA4B,IAD3B,IAGE,oBAAC,wBAAD;AACD,MAAA,UAAU,EAAE,KAAKmE,OAAL,CAAaC,MADxB;AAED,MAAA,SAAS,MAFR;AAGC,MAAA,UAAU,MAHX;AAIC,MAAA,QAAQ,EAAE,KAAKyH,kBAJhB;AAKC,MAAA,SAAS,EAAE,KAAKvE,2BALjB;AAMC,MAAA,WAAW,EAAC,SANb;AAOC,MAAA,IAAI,EAAE,KAAK/H,KAAL,CAAWS,YAPlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAjCL,CAnIF,EAgLE,oBAAC,GAAD,CAAK,IAAL;AAAU,MAAA,QAAQ,EAAC,eAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC,KAAKT,KAAL,CAAWS,YAAX,KAA4B,IAA5B,IACC,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,iBAAhB;AAAkC,MAAA,SAAS,EAAC,mBAA5C;AAAgE,MAAA,IAAI,EAAC,IAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oDAFF,EAOC,KAAKT,KAAL,CAAWS,YAAX,KAA4B,IAA5B,IACC,KAAKmE,OAAL,CAAa4B,IAAb,CAAkB7D,IAAlB,KAA2B,OAD5B,IAGC,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,iBAAhB;AAAkC,MAAA,IAAI,EAAC,IAAvC;AAA4C,MAAA,SAAS,EAAC,mBAAtD;AAA0E,MAAA,KAAK,EAAC,OAAhF;AAAwF,MAAA,OAAO,EAAE,KAAK8L,iBAAL,CAAuBI,IAAvB,CAA4B,IAA5B,CAAjG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAVF,EAYC,KAAK7O,KAAL,CAAWS,YAAX,KAA4B,IAA5B,IACC,KAAKT,KAAL,CAAWS,YAAX,CAAwB8F,GAAxB,KAAgC,KAAK3B,OAAL,CAAa4B,IAAb,CAAkBD,GADnD,IAGC,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,iBAAhB;AAAkC,MAAA,IAAI,EAAC,IAAvC;AAA4C,MAAA,SAAS,EAAC,mBAAtD;AAA0E,MAAA,KAAK,EAAC,OAAhF;AAAwF,MAAA,OAAO,EAAE,KAAKkI,iBAAL,CAAuBI,IAAvB,CAA4B,IAA5B,CAAjG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAfF,EAiBC,KAAK7O,KAAL,CAAWS,YAAX,KAA4B,IAA5B,IACC,KAAKT,KAAL,CAAWS,YAAX,CAAwB8F,GAAxB,KAAgC,KAAK3B,OAAL,CAAa4B,IAAb,CAAkBD,GADnD,IAEC,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,iBAAhB;AAAkC,MAAA,SAAS,EAAC,mBAA5C;AAAgE,MAAA,IAAI,EAAC,IAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAnBF,EAuBC,KAAKvG,KAAL,CAAWS,YAAX,KAA4B,IAA5B,IACC,KAAKT,KAAL,CAAWS,YAAX,CAAwB8F,GAAxB,KAAgC,KAAK3B,OAAL,CAAa4B,IAAb,CAAkBD,GADnD,IAEC,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,gBAAhB;AAAiC,MAAA,SAAS,EAAC,mBAA3C;AAA+D,MAAA,IAAI,EAAC,IAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAzBF,EA8BC,KAAKvG,KAAL,CAAWU,eAAX,KAA+B,OAA/B,IACD,KAAKV,KAAL,CAAWS,YAAX,KAA4B,IAD3B,IAEG,oBAAC,mBAAD;AACF,MAAA,UAAU,EAAE,KAAKmE,OAAL,CAAaC,MADvB;AAEF,MAAA,SAAS,MAFP;AAGA,MAAA,UAAU,MAHV;AAIA,MAAA,QAAQ,EAAE,KAAKyH,kBAJf;AAKA,MAAA,SAAS,EAAE,KAAK1C,sBALhB;AAMA,MAAA,WAAW,EAAC,SANZ;AAOA,MAAA,IAAI,EAAE,KAAK5J,KAAL,CAAWS,YAPjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAhCJ,CAhLF,EA2NE,oBAAC,GAAD,CAAK,IAAL;AAAU,MAAA,QAAQ,EAAC,oBAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC,KAAKT,KAAL,CAAWS,YAAX,KAA4B,IAA5B,IACC,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,iBAAhB;AAAkC,MAAA,SAAS,EAAC,mBAA5C;AAAgE,MAAA,IAAI,EAAC,IAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oDAFF,EAOC,KAAKT,KAAL,CAAWS,YAAX,KAA4B,IAA5B,IACC,KAAKmE,OAAL,CAAa4B,IAAb,CAAkB7D,IAAlB,KAA2B,OAD5B,IAGC,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,iBAAhB;AAAkC,MAAA,IAAI,EAAC,IAAvC;AAA4C,MAAA,SAAS,EAAC,mBAAtD;AAA0E,MAAA,KAAK,EAAC,aAAhF;AAA8F,MAAA,OAAO,EAAE,KAAK8L,iBAAL,CAAuBI,IAAvB,CAA4B,IAA5B,CAAvG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAVF,EAYC,KAAK7O,KAAL,CAAWS,YAAX,KAA4B,IAA5B,IACC,KAAKT,KAAL,CAAWS,YAAX,CAAwB8F,GAAxB,KAAgC,KAAK3B,OAAL,CAAa4B,IAAb,CAAkBD,GADnD,IAGC,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,iBAAhB;AAAkC,MAAA,IAAI,EAAC,IAAvC;AAA4C,MAAA,SAAS,EAAC,mBAAtD;AAA0E,MAAA,KAAK,EAAC,aAAhF;AAA8F,MAAA,OAAO,EAAE,KAAKkI,iBAAL,CAAuBI,IAAvB,CAA4B,IAA5B,CAAvG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAfF,EAiBC,KAAK7O,KAAL,CAAWS,YAAX,KAA4B,IAA5B,IACC,KAAKT,KAAL,CAAWS,YAAX,CAAwB8F,GAAxB,KAAgC,KAAK3B,OAAL,CAAa4B,IAAb,CAAkBD,GADnD,IAEC,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,iBAAhB;AAAkC,MAAA,SAAS,EAAC,mBAA5C;AAAgE,MAAA,IAAI,EAAC,IAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAnBF,EAuBC,KAAKvG,KAAL,CAAWS,YAAX,KAA4B,IAA5B,IACC,KAAKT,KAAL,CAAWS,YAAX,CAAwB8F,GAAxB,KAAgC,KAAK3B,OAAL,CAAa4B,IAAb,CAAkBD,GADnD,IAEC,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,gBAAhB;AAAiC,MAAA,SAAS,EAAC,mBAA3C;AAA+D,MAAA,IAAI,EAAC,IAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAzBF,EA8BC,KAAKvG,KAAL,CAAWU,eAAX,KAA+B,aAA/B,IACD,KAAKV,KAAL,CAAWS,YAAX,KAA4B,IAD3B,IAEG,oBAAC,wBAAD;AACF,MAAA,UAAU,EAAE,KAAKmE,OAAL,CAAaC,MADvB;AAEF,MAAA,SAAS,MAFP;AAGA,MAAA,UAAU,MAHV;AAIA,MAAA,QAAQ,EAAE,KAAKyH,kBAJf;AAKA,MAAA,SAAS,EAAE,KAAK7D,2BALhB;AAMA,MAAA,WAAW,EAAC,SANZ;AAOA,MAAA,IAAI,EAAE,KAAKzI,KAAL,CAAWS,YAPjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAhCJ,CA3NF,EAsQE,oBAAC,GAAD,CAAK,IAAL;AAAU,MAAA,QAAQ,EAAC,YAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AAAW,MAAA,SAAS,EAAC,yBAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA,oBAAC,GAAD;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,SAAhB;AAA0B,MAAA,IAAI,EAAC,IAA/B;AAAoC,MAAA,OAAO,EAAE,KAAK8L,aAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADA,EAIA,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,MAAhB;AAAuB,MAAA,IAAI,EAAC,IAA5B;AAAiC,MAAA,OAAO,EAAE,KAAKE,cAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAJA,EAOE,KAAKzM,KAAL,CAAWO,SAAX,GACC,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,GAGC,oBAAC,QAAD;AACE,MAAA,KAAK,EAAE,KAAKP,KAAL,CAAWK,KADpB;AAEE,MAAA,UAAU,EAAE,KAAKuE,OAAL,CAAaC,MAF3B;AAGE,MAAA,YAAY,EAAE,KAAK6I,iBAHrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAVH,CADA,CADF,CAtQF,EA4RE,oBAAC,GAAD,CAAK,IAAL;AAAU,MAAA,QAAQ,EAAC,aAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AAAW,MAAA,SAAS,EAAC,0BAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEA,oBAAC,GAAD;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,SAAhB;AAA0B,MAAA,SAAS,EAAC,cAApC;AAAmD,MAAA,IAAI,EAAC,IAAxD;AAA6D,MAAA,OAAO,EAAE,KAAK1L,sBAA3E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADA,CAFA,EAMA,oBAAC,GAAD;AAAK,MAAA,SAAS,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,EAAT;AAAa,MAAA,SAAS,EAAC,mBAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA,oBAAC,IAAD;AAAM,MAAA,gBAAgB,EAAC,OAAvB;AAA+B,MAAA,EAAE,EAAC,0BAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA,oBAAC,GAAD;AAAK,MAAA,QAAQ,EAAC,QAAd;AAAuB,MAAA,KAAK,EAAC,SAA7B;AAAuC,MAAA,QAAQ,MAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADA,EAGA,oBAAC,GAAD;AAAK,MAAA,QAAQ,EAAC,OAAd;AAAsB,MAAA,KAAK,EAAC,kBAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC,KAAKhC,KAAL,CAAWI,SAAX,KAAyB,IAAzB,IACC,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,iBAAhB;AAAkC,MAAA,SAAS,EAAC,mBAA5C;AAAgE,MAAA,IAAI,EAAC,IAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCAFF,EAMC,KAAKJ,KAAL,CAAWI,SAAX,KAAyB,IAAzB,IACC,oBAAC,cAAD;AACA,MAAA,UAAU,EAAE,KAAKwE,OAAL,CAAaC,MADzB;AAEA,MAAA,SAAS,MAFT;AAGE,MAAA,UAAU,MAHZ;AAIE,MAAA,QAAQ,EAAE,KAAKyH,kBAJjB;AAKE,MAAA,SAAS,EAAE,KAAK5B,yBALlB;AAME,MAAA,WAAW,EAAC,QANd;AAOE,MAAA,IAAI,EAAE,KAAK9F,OAAL,CAAanE,YAPrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPF,CAHA,EAoBA,oBAAC,GAAD;AAAK,MAAA,QAAQ,EAAC,IAAd;AAAmB,MAAA,KAAK,EAAC,eAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC,KAAKT,KAAL,CAAWI,SAAX,KAAyB,IAAzB,IACC,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,iBAAhB;AAAkC,MAAA,SAAS,EAAC,mBAA5C;AAAgE,MAAA,IAAI,EAAC,IAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCAFF,EAMC,KAAKJ,KAAL,CAAWI,SAAX,KAAyB,IAAzB,IACC,oBAAC,gBAAD;AACA,MAAA,UAAU,EAAE,KAAKwE,OAAL,CAAaC,MADzB;AAEA,MAAA,SAAS,MAFT;AAGE,MAAA,UAAU,MAHZ;AAIE,MAAA,QAAQ,EAAE,KAAKyH,kBAJjB;AAKE,MAAA,SAAS,EAAE,KAAKtB,2BALlB;AAME,MAAA,WAAW,EAAC,QANd;AAOE,MAAA,IAAI,EAAE,KAAKpG,OAAL,CAAanE,YAPrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPF,CApBA,EAsCA,oBAAC,GAAD;AAAK,MAAA,QAAQ,EAAC,YAAd;AAA2B,MAAA,KAAK,EAAC,uBAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC,KAAKT,KAAL,CAAWI,SAAX,KAAyB,IAAzB,IACC,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,iBAAhB;AAAkC,MAAA,SAAS,EAAC,mBAA5C;AAAgE,MAAA,IAAI,EAAC,IAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCAFF,EAMC,KAAKJ,KAAL,CAAWI,SAAX,KAAyB,IAAzB,IACC,oBAAC,4BAAD;AACA,MAAA,UAAU,EAAE,KAAKwE,OAAL,CAAaC,MADzB;AAEA,MAAA,SAAS,MAFT;AAGE,MAAA,UAAU,MAHZ;AAIE,MAAA,QAAQ,EAAE,KAAKyH,kBAJjB;AAKE,MAAA,SAAS,EAAE,KAAKnB,uCALlB;AAME,MAAA,WAAW,EAAC,QANd;AAOE,MAAA,IAAI,EAAE,KAAKvG,OAAL,CAAanE,YAPrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPF,CAtCA,EAwDA,oBAAC,GAAD;AAAK,MAAA,QAAQ,EAAC,OAAd;AAAsB,MAAA,KAAK,EAAC,kBAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC,KAAKT,KAAL,CAAWI,SAAX,KAAyB,IAAzB,IACC,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,iBAAhB;AAAkC,MAAA,SAAS,EAAC,mBAA5C;AAAgE,MAAA,IAAI,EAAC,IAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCAFF,EAMC,KAAKJ,KAAL,CAAWI,SAAX,KAAyB,IAAzB,IACC,oBAAC,4BAAD;AACA,MAAA,UAAU,EAAE,KAAKwE,OAAL,CAAaC,MADzB;AAEA,MAAA,SAAS,MAFT;AAGE,MAAA,UAAU,MAHZ;AAIE,MAAA,QAAQ,EAAE,KAAKyH,kBAJjB;AAKE,MAAA,SAAS,EAAE,KAAKf,uCALlB;AAME,MAAA,WAAW,EAAC,QANd;AAOE,MAAA,IAAI,EAAE,KAAK3G,OAAL,CAAanE,YAPrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPF,CAxDA,EA0EA,oBAAC,GAAD;AAAK,MAAA,QAAQ,EAAC,MAAd;AAAqB,MAAA,KAAK,EAAC,iBAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC,KAAKT,KAAL,CAAWI,SAAX,KAAyB,IAAzB,IACC,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,iBAAhB;AAAkC,MAAA,SAAS,EAAC,mBAA5C;AAAgE,MAAA,IAAI,EAAC,IAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCAFF,EAMC,KAAKJ,KAAL,CAAWI,SAAX,KAAyB,IAAzB,IACC,oBAAC,kBAAD;AACA,MAAA,UAAU,EAAE,KAAKwE,OAAL,CAAaC,MADzB;AAEA,MAAA,SAAS,MAFT;AAGE,MAAA,UAAU,MAHZ;AAIE,MAAA,QAAQ,EAAE,KAAKyH,kBAJjB;AAKE,MAAA,SAAS,EAAE,KAAKP,6BALlB;AAME,MAAA,WAAW,EAAC,QANd;AAOE,MAAA,IAAI,EAAE,KAAKnH,OAAL,CAAanE,YAPrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPF,CA1EA,CADA,CADA,EAgGA,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAhGA,CANA,CADF,CA5RF,EA0YE,oBAAC,GAAD,CAAK,IAAL;AAAU,MAAA,QAAQ,EAAC,cAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AAAW,MAAA,SAAS,EAAC,4BAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD;AAAM,MAAA,SAAS,EAAC,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD,CAAM,IAAN;AAAW,MAAA,SAAS,EAAC,gBAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,EAEE,oBAAC,IAAD,CAAM,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACU,KAAKT,KAAL,CAAWW,eADrB,CAFF,EAKE,oBAAC,IAAD,CAAM,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACU,KAAKX,KAAL,CAAWY,eADrB,CALF,CADF,CADF,CADA,EAcA,oBAAC,GAAD;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEC,KAAKZ,KAAL,CAAWM,WAAX,KAA2B,EAA3B,IACC,oBAAC,cAAD;AACE,MAAA,WAAW,EAAE,KAAKN,KAAL,CAAWM,WAD1B;AAEE,MAAA,UAAU,EAAE,KAAKsE,OAAL,CAAaC,MAF3B;AAGE,MAAA,YAAY,EAAE,KAAK6I,iBAHrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,CAdA,CADF,CA1YF,CADF,CAhDF,CADF,CADF,CADJ,CAVA,CAFF,CA7BF,CADA;AA6gBD;;AA9rD+B;;AAA5B3N,S,CA+BG+O,W,GAAcrQ,W;AAkqDvB,eAAesB,SAAf","sourcesContent":["import S3 from 'react-aws-s3';\nimport React, { Component } from 'react';\n\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport Accordion from 'react-bootstrap/Accordion';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\nimport Nav from 'react-bootstrap/Nav';\nimport Card from 'react-bootstrap/Card';\n\nimport AuthContext from '../context/auth-context';\nimport UserList from '../components/Users/UserList/UserList';\nimport SearchUserList from '../components/Users/UserList/SearchUserList';\nimport UserDetail from '../components/Users/UserDetail';\n\nimport Spinner from '../components/Spinner/Spinner';\nimport SidebarPage from './Sidebar';\nimport SidebarControl from '../components/SidebarControl';\nimport AlertBox from '../components/AlertBox';\nimport LoadingOverlay from '../components/LoadingOverlay';\nimport AttachmentViewer from '../components/AttachmentViewer';\nimport PdfCreator from '../components/PdfCreator';\n\nimport CreateUserForm from '../components/Forms/CreateUserForm';\nimport UpdateUserForm from '../components/Forms/UpdateUserForm';\nimport UpdateUserFieldForm from '../components/Forms/UpdateUserFieldForm';\nimport UpdateUserAttendanceForm from '../components/Forms/UpdateUserAttendanceForm';\nimport UpdateUserAttachmentForm from '../components/Forms/UpdateUserAttachmentForm';\nimport UpdateUserLeaveForm from '../components/Forms/UpdateUserLeaveForm';\nimport SearchUserForm from '../components/Forms/SearchUserForm';\nimport SearchUserIdForm from '../components/Forms/SearchUserIdForm';\nimport SearchUserNameForm from '../components/Forms/SearchUserNameForm';\nimport SearchUserAttendanceDateForm from '../components/Forms/SearchUserAttendanceDateForm';\nimport SearchUserLeaveDateRangeForm from '../components/Forms/SearchUserLeaveDateRangeForm';\n\nimport './Users.css';\n\nclass UsersPage extends Component {\n  state = {\n    creating: false,\n    updating: false,\n    deleting: false,\n    searching: false,\n    users: [],\n    searchUsers: [],\n    isLoading: false,\n    isSorting: false,\n    selectedUser: null,\n    userUpdateField: null,\n    userSearchField: null,\n    userSearchQuery: null,\n    canDelete: null,\n    userAlert: null,\n    overlay: false,\n    overlayStatus: \"test\",\n    file: null,\n    showAttachment: false,\n    showThisAttachmentFile: null,\n    showThisAttachmentType: null,\n    creatingDocument: false,\n    createPdf: false,\n    pdfData: null,\n    pdfType: null,sidebarShow: true,\n    mCol1Size: 3,\n    mCol2Size: 9\n  };\n  isActive = true;\n\n  static contextType = AuthContext;\n\n  componentDidMount() {\n\n    if (this.context.user.name === \"Lord-of-the-Manor\"){\n      this.setState({canDelete: true})\n    }\n\n    if (JSON.stringify(this.context.selectedUser) !== \"{}\") {\n      this.setState({ selectedUser: this.context.selectedUser })\n    }\n\n    this.fetchUsers();\n  }\n\n  startCreateUserHandler = () => {\n    this.setState({ creating: true });\n  };\n  startUpdateUserHandler = () => {\n    this.setState({ updating: true });\n  };\n  startSearchUserHandler = () => {\n    this.setState({ searching: true });\n  };\n\n  modalConfirmHandler = (event) => {\n\n    this.setState({ creating: false, userAlert: \"Creating new user...\" });\n\n    const email = event.target.formGridEmail.value;\n    const password = event.target.formGridPassword.value;\n    const name = event.target.formGridName.value;\n    const role = event.target.formGridRole.value;\n    const dob = event.target.formGridDob.value;\n    const phone = event.target.formGridPhone.value;\n    const addressNumber = event.target.formGridAddressNumber.value;\n    const addressStreet = event.target.formGridAddressStreet.value;\n    const addressTown = event.target.formGridAddressTown.value;\n    const addressParish = event.target.formGridAddressParish.value;\n    const addressPostOffice = event.target.formGridAddressPostOffice.value;\n\n    let employmentDate = event.target.formGridEmploymentDate.value;\n    if (event.target.formGridEmploymentDateTodayCheckbox.checked === true) {\n      employmentDate = new Date().toISOString().slice(0,10);\n    }\n\n    if (\n      event.target.staffCalendarEmploymentDate.value !== null &&\n      event.target.formGridEmploymentDateTodayCheckbox.checked !== true\n    ) {\n      console.log(\"fancyDate2\", new Date(event.target.staffCalendarEmploymentDate.value).toISOString().slice(0,10));\n      employmentDate = new Date(event.target.staffCalendarEmploymentDate.value).toISOString().slice(0,10);\n    }\n\n    let terminationDate = event.target.formGridTerminationDate.value;\n    if (event.target.formGridTerminationDateTodayCheckbox.checked === true) {\n      terminationDate = new Date().toISOString().slice(0,10);\n    }\n\n    if (\n      event.target.staffCalendarTerminationDate.value !== null &&\n      event.target.formGridTerminationDateTodayCheckbox.checked !== true\n    ) {\n      console.log(\"fancyDate2\", new Date(event.target.staffCalendarTerminationDate.value).toISOString().slice(0,10));\n      terminationDate = new Date(event.target.staffCalendarTerminationDate.value).toISOString().slice(0,10);\n    }\n\n\n    if (\n      email.trim().length === 0 ||\n      password.trim().length === 0 ||\n      name.trim().length === 0 ||\n      role.trim().length === 0 ||\n      dob.trim().length === 0 ||\n      phone.trim().length === 0 ||\n      addressNumber.trim().length === 0 ||\n      addressStreet.trim().length === 0 ||\n      addressTown.trim().length === 0 ||\n      addressParish.trim().length === 0 ||\n      addressPostOffice.trim().length === 0 ||\n      employmentDate.trim().length === 0\n    ) {\n      this.setState({userAlert: \"blank fields detected!!!...Please try again...\"});\n      return;\n    }\n\n    const token = this.context.token;\n    const userId = this.context.userId;\n    const requestBody = {\n      query: `\n          mutation {createUser(userInput: {email:\"${email}\",password:\"${password}\",name:\"${name}\",dob:\"${dob}\",addressNumber:${addressNumber},addressStreet:\"${addressStreet}\",addressTown:\"${addressTown}\",addressParish:\"${addressParish}\", addressPostOffice:\"${addressPostOffice}\",phone:\"${phone}\",role:\"${role}\",employmentDate:\"${employmentDate}\",terminationDate:\"${terminationDate}\"})\n          {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}\n        }`\n      };\n\n    // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        this.setState(prevState => {\n          const updatedUsers = [...prevState.users];\n          updatedUsers.push(resData.data.createUser);\n          return { users: updatedUsers };\n        });\n        this.context.users.push(resData.data.createUser);\n        const responseAlert = JSON.stringify(resData.data).slice(0,8);\n        this.setState({userAlert: responseAlert, selectedUser: resData.data.createUser});\n      })\n      .catch(err => {\n        this.setState({userAlert: err});\n      });\n  };\n\n  modalConfirmUpdateHandler = (event) => {\n\n    const token = this.context.token;\n    const userId = this.context.userId;\n    let selectedUserId = this.context.selectedUser._id;\n    if(userId !== selectedUserId && this.context.user.role !== 'admin') {\n      this.setState({userAlert: \"Not the creator or Admin! No edit permission!!\"});\n      selectedUserId = null;\n    }\n\n    let email = event.target.formGridEmail.value;\n    let password = event.target.formGridPassword.value;\n    let name = event.target.formGridName.value;\n    let role = this.context.selectedUser.role;\n    let dob = event.target.formGridDob.value;\n    let phone = event.target.formGridPhone.value;\n    let addressNumber = event.target.formGridAddressNumber.value;\n    let addressStreet = event.target.formGridAddressStreet.value;\n    let addressTown = event.target.formGridAddressTown.value;\n    let addressParish = event.target.formGridAddressParish.value;\n    let addressPostOffice = event.target.formGridAddressPostOffice.value;\n\n    let employmentDate = event.target.formGridEmploymentDate.value;\n    if (event.target.formGridEmploymentDateTodayCheckbox.checked === true) {\n      employmentDate = new Date().toISOString().slice(0,10);\n    }\n\n    if (\n      event.target.staffCalendarEmploymentDate.value !== null &&\n      event.target.formGridEmploymentDateTodayCheckbox.checked !== true\n    ) {\n      console.log(\"fancyDate2\", new Date(event.target.staffCalendarEmploymentDate.value).toISOString().slice(0,10));\n      employmentDate = new Date(event.target.staffCalendarEmploymentDate.value).toISOString().slice(0,10);\n    }\n\n\n    let terminationDate = event.target.formGridTerminationDate.value;\n    if (event.target.formGridTerminationDateTodayCheckbox.checked === true) {\n      terminationDate = new Date().toISOString().slice(0,10);\n    }\n\n    if (\n      event.target.staffCalendarTerminationDate.value !== null &&\n      event.target.formGridTerminationDateTodayCheckbox.checked !== true\n    ) {\n      console.log(\"fancyDate2\", new Date(event.target.staffCalendarTerminationDate.value).toISOString().slice(0,10));\n      terminationDate = new Date(event.target.staffCalendarTerminationDate.value).toISOString().slice(0,10);\n    }\n\n    if (email.trim().length === 0 ) {\n      email = this.context.selectedUser.email;\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n    }\n    if (password.trim().length === 0) {\n      password = this.context.selectedUser.password;\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n    }\n    if (name.trim().length === 0) {\n      name = this.context.selectedUser.name;\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n    }\n    // if (role.trim().length === 0) {\n    //   console.log(\"blank fields detected!!!...filling w/ previous data...\");\n    //   role = this.state.selectedUser.role;\n    // }\n    if (dob.trim().length === 0) {\n      dob = this.context.selectedUser.dob;\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n    }\n    if (phone.trim().length === 0) {\n      phone = this.context.selectedUser.phone;\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n    }\n    if (addressNumber.trim().length === 0) {\n      addressNumber = this.context.selectedUser.address.number;\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n    }\n    if (addressStreet.trim().length === 0) {\n      addressStreet = this.context.selectedUser.address.street;\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n    }\n    if (addressTown.trim().length === 0) {\n      addressTown = this.context.selectedUser.address.town;\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n    }\n    if (addressParish.trim().length === 0) {\n      addressParish = this.context.selectedUser.address.parish;\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n    }\n    if (addressPostOffice.trim().length === 0) {\n      addressPostOffice = this.context.selectedUser.address.postOffice;\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n    }\n    if (employmentDate.trim().length === 0) {\n      employmentDate = this.context.selectedUser.employmentDate;\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n    }\n    if (terminationDate.trim().length === 0) {\n      terminationDate = this.context.selectedUser.terminationDate;\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n    }\n\n    this.setState({userAlert: \"updating user profile...\"});\n\n    const requestBody = {\n      query: `\n      mutation {updateUser(userId:\"${userId}\",selectedUserId:\"${selectedUserId}\",userInput: {email:\"${email}\",password:\"${password}\",name:\"${name}\",dob:\"${dob}\",addressNumber:${addressNumber},addressStreet:\"${addressStreet}\",addressTown:\"${addressTown}\",addressParish:\"${addressParish}\", addressPostOffice:\"${addressPostOffice}\",phone:\"${phone}\",role:\"${role}\",employmentDate:\"${employmentDate}\",terminationDate:\"${terminationDate}\"})\n      {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n        `};\n\n      fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }})\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        // const updatedUser = resData.data.updateUser;\n        // this.setState({user: updatedUser})\n        this.state.users.push(resData.data.updateUser);\n        this.context.users = this.state.users;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert})\n        this.fetchUsers();\n        this.setState({ userAlert: responseAlert, selectedUser: resData.data.updateUser, user: resData.data.updateUser })\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n  };\n\n  modalConfirmUpdateFieldHandler = (event) => {\n\n    this.setState({ updating: false , userAlert: \"Updating your profile by field...\"});\n    const token = this.context.token;\n    const userId = this.context.userId;\n    let selectedUserId = this.context.selectedUser._id;\n    let field = null;\n    let query = event.target.formGridQuery.value;\n    if (event.target.formGridFieldSelect.value === \"select\") {\n      field = event.target.formGridField.value;\n    } else {\n      field = event.target.formGridFieldSelect.value;\n    }\n\n    const requestBody = {\n      query:`\n        mutation{updateUserField(userId:\"${userId}\",selectedUserId:\"${selectedUserId}\",field:\"${field}\",query:\"${query}\")\n        {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}\n      }\n      `};\n\n      fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const updatedUserId = resData.data.updateUserField._id;\n        const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n        const updatedUserPos = this.state.users.indexOf(updatedUser);\n        const slicedArray = this.state.users.splice(updatedUserPos, 1);\n        this.state.users.push(resData.data.updateUserField);\n        this.context.users = this.state.users;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert, selectedUser: resData.data.updateUserField })\n        this.fetchUsers();\n      })\n      .catch(err => {\n        this.setState({userAlert: err});\n      });\n  }\n\n  updateUserAttendanceHandler = (event) => {\n\n    this.setState({ updating: false , userUpdateField: null, userAlert: \"adding user attendance item...\" });\n    const token = this.context.token;\n    const userId = this.context.userId;\n    let selectedUserId = this.context.selectedUser._id;\n    if (userId !== selectedUserId && this.context.user.role !== \"admin\" ) {\n      this.setState({ userAlert: \"Not the creator or Admin! No edit permission!!\"});\n      selectedUserId = null;\n    }\n\n    let attendanceDate = event.target.formGridAttendanceDate.value;\n    if (event.target.formGridAttendanceDateTodayCheckbox.checked === true) {\n      console.log(\"1\");\n      attendanceDate = new Date().toISOString().slice(0,10);\n    }\n\n    if (\n      event.target.staffAttendanceCalendarDate.value !== null &&\n      event.target.formGridAttendanceDateTodayCheckbox.checked !== true\n    ) {\n      console.log(\"fancyDate2\", new Date(event.target.staffAttendanceCalendarDate.value).toISOString().slice(0,10));\n      attendanceDate = new Date(event.target.staffAttendanceCalendarDate.value).toISOString().slice(0,10);\n    }\n\n    let attendanceStatus = event.target.formGridAttendanceStatus.value;\n    let attendanceDescription = event.target.formGridAttendanceDescription.value;\n\n    if (\n    attendanceDate.trim().length === 0 ||\n    attendanceStatus.trim().length === 0\n    ){\n      return\n    }\n\n    const requestBody = {\n      query:`\n        mutation {updateUserAttendance(userId:\"${userId}\", selectedUserId:\"${selectedUserId}\",userInput:{attendanceDate:\"${attendanceDate}\",attendanceStatus:\"${attendanceStatus}\",attendanceDescription:\"${attendanceDescription}\"})\n        {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n      `};\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const updatedUserId = resData.data.updateUserAttendance._id;\n        const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n        const updatedUserPos = this.state.users.indexOf(updatedUser);\n        const slicedArray = this.state.users.splice(updatedUserPos, 1);\n        this.state.users.push(resData.data.updateUserAttendance);\n        this.context.users = this.state.users;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.fetchUsers();\n        this.setState({ userAlert: responseAlert, selectedUser: resData.data.updateUserAttendance })\n      })\n      .catch(err => {\n        this.setState({userAlert: err});\n      });\n  }\n\n    updateUserAttachmentHandler = (event) => {\n\n    this.setState({ updating: false , userUpdateField: null, userAlert: \"adding user attatchment item...\" });\n    const token = this.context.token;\n    const userId = this.context.userId;\n    let selectedUserId = this.context.selectedUser._id;\n    if (userId !== selectedUserId && this.context.user.role !== \"admin\" ) {\n      this.setState({userAlert: \"Not the creator or Admin! No edit permission!!\"})\n      selectedUserId = null;\n    }\n    let attachmentFormat = event.target.formGridAttachmentFormat.value;\n    let attachmentPath = \"uploads/staff/\"+selectedUserId+\"/attachments\";\n    let file = AuthContext._currentValue.file;\n    const config = {\n      bucketName: this.context.creds.s3.bucketName,\n      dirName: attachmentPath,\n      region: this.context.creds.s3.region,\n      accessKeyId: this.context.creds.s3.accessKeyId,\n      secretAccessKey: this.context.creds.s3.secretAccessKey,\n    }\n    const ReactS3Client = new S3(config);\n    const newFileName = file.name;\n    const attachmentName = newFileName;\n    this.setState({userAlert: \"uploading attachment ...\"});\n\n    ReactS3Client\n        .uploadFile(file, newFileName)\n        .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n        .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n    if (\n      attachmentName.trim().length === 0 ||\n      attachmentFormat.trim().length === 0 ||\n      attachmentPath.trim().length === 0\n    ) {\n      this.setState({ userAlert: \"blank fields detected!!! try again\" })\n      return\n    }\n\n    const requestBody = {\n      query:`\n        mutation{updateUserAttachment(userId:\"${userId}\",selectedUserId:\"${selectedUserId}\",userInput:{attachmentName:\"${attachmentName}\",attachmentFormat:\"${attachmentFormat}\",attachmentPath:\"${attachmentPath}\"})\n        {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n      `};\n\n      fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const updatedUserId = resData.data.updateUserAttachment._id;\n        const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n        const updatedUserPos = this.state.users.indexOf(updatedUser);\n        const slicedArray = this.state.users.splice(updatedUserPos, 1);\n        this.state.users.push(resData.data.updateUserAttachment);\n        this.context.users = this.state.users;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.fetchUsers();\n        this.setState({ userAlert: responseAlert, selectedUser: resData.data.updateUserAttachment })\n      })\n      .catch(err => {\n        this.setState({userAlert: err});\n      });\n  }\n\n\n  updateUserLeaveHandler = (event) => {\n\n    this.setState({ updating: false , userUpdateField: null, userAlert: \"adding user leave item...\" });\n    const token = this.context.token;\n    const userId = this.context.userId;\n    let selectedUserId = this.context.selectedUser._id;\n    if (userId !== selectedUserId && this.context.user.role !== \"admin\" ) {\n      this.setState({userAlert: \"Not the creator or Admin! No edit permission!!\"})\n      selectedUserId = null;\n    }\n\n    let leaveType = event.target.formGridLeaveType.value;\n    let leaveTitle = event.target.formGridLeaveTitle.value;\n    let leaveStartDate = event.target.formGridLeaveStartDate.value;\n    if (event.target.formGridLeaveStartDateTodayCheckbox.checked === true) {\n      leaveStartDate = new Date().toISOString().slice(0,10);\n    }\n\n    if (\n      event.target.staffLeaveCalendarStartDate.value !== null &&\n      event.target.formGridLeaveStartDateTodayCheckbox.checked !== true\n    ) {\n      console.log(\"fancyDate2\", new Date(event.target.staffLeaveCalendarStartDate.value).toISOString().slice(0,10));\n      leaveStartDate= new Date(event.target.staffLeaveCalendarStartDate.value).toISOString().slice(0,10);\n    }\n\n\n    let leaveEndDate = event.target.formGridLeaveEndDate.value;\n    if (event.target.formGridLeaveEndDateTodayCheckbox.checked === true) {\n      leaveEndDate = new Date().toISOString().slice(0,10);\n    }\n\n    if (\n      event.target.staffLeaveCalendarEndDate.value !== null &&\n      event.target.formGridLeaveEndDateTodayCheckbox.checked !== true\n    ) {\n      console.log(\"fancyDate2a\", new Date(event.target.staffLeaveCalendarEndDate.value).toISOString().slice(0,10));\n      leaveEndDate= new Date(event.target.staffLeaveCalendarEndDate.value).toISOString().slice(0,10);\n    }\n\n    if (\n      leaveType.trim().length === 0 ||\n      leaveTitle.trim().length === 0 ||\n      leaveStartDate.trim().length === 0 ||\n      leaveEndDate.trim().length === 0\n    ) {\n      this.setState({userAlert: \"blank fields detected!!!...try again\"});\n      return\n    }\n\n    const requestBody = {\n      query:`\n        mutation{updateUserLeave(userId:\"${userId}\",selectedUserId:\"${selectedUserId}\",userInput:{leaveType:\"${leaveType}\",leaveTitle:\"${leaveTitle}\",leaveStartDate:\"${leaveStartDate}\",leaveEndDate:\"${leaveEndDate}\"})\n        {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n      `};\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const updatedUserId = resData.data.updateUserLeave._id;\n        const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n        const updatedUserPos = this.state.users.indexOf(updatedUser);\n        const slicedArray = this.state.users.splice(updatedUserPos, 1);\n        this.state.users.push(resData.data.updateUserLeave);\n        this.context.users = this.state.users;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        // this.setState({ userAlert: responseAlert})\n        this.fetchUsers();\n        this.setState({ userAlert: responseAlert, selectedUser: resData.data.updateUserLeave })\n      })\n      .catch(err => {\n        this.setState({userAlert: err});\n      });\n  }\n\n\n  modalConfirmSearchHandler = (event) => {\n\n    let userId = this.context.userId;\n    const token = this.context.token;\n    let field = null;\n    let query = event.target.formBasicQuery.value;\n    if (event.target.formBasicFieldSelect.value === \"select\") {\n      field = event.target.formBasicField.value;\n    } else {\n      field = event.target.formBasicFieldSelect.value;\n    }\n\n    this.setState({\n      userSearchField: field,\n      userSearchQuery: query,\n      searching: false,\n      userAlert: \"Searching for User...\"\n    })\n\n    if (\n      field.trim().length === 0 ||\n      query.trim().length === 0\n    ) {\n      this.setState({userAlert: \"blank fields detected!!!...Please try again...\"})\n      return;\n    }\n\n    const search = { field, query };\n    const requestBody = {\n      query: `\n        query {getUserField(userId:\"${userId}\",field:\"${field}\",query:\"${query}\")\n        {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n      `}\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const responseAlert = JSON.stringify(resData.data).slice(0,8);\n        const searchUsers = resData.data.getUserField;\n        this.setState({ searchUsers: searchUsers, userAlert: responseAlert})\n        // this.fetchUsers();\n      })\n      .catch(err => {\n        this.setState({userAlert: err});\n      });\n  }\n\n  modalConfirmSearchIdHandler = (event) => {\n\n    let userId = this.context.userId;\n    const token = this.context.token;\n    this.setState({ searching: false, userAlert: \"Searching for Staff by Id #...\" });\n    let selectedUserId = event.target.formBasicId.value;\n    const requestBody = {\n      query: `\n        query {getUserId(userId:\"${userId}\",selectedUserId:\"${selectedUserId}\")\n        {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n      `}\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        const searchUsers = resData.data.getUserId;\n\n        this.setState({ searchUsers: [searchUsers], userAlert: responseAlert });\n        // this.fetchUsers();\n      })\n      .catch(err => {\n        this.setState({userAlert: err});\n      });\n  }\n\n  modalConfirmSearchAttendanceDateHandler = (event) => {\n\n    let userId = this.context.userId;\n    const token = this.context.token;\n    this.setState({ searching: false, userAlert: \"Searching for user by Attendance Date...\" });\n    let attendanceDate = event.target.formBasicDate.value;\n    if (event.target.formBasicDateTodayCheckbox.checked === true) {\n      attendanceDate = new Date().toISOString().slice(0,10);\n    }\n\n    if (\n      event.target.staffAttendanceCalendarDate.value !== null &&\n      event.target.formBasicDateTodayCheckbox.checked !== true\n    ) {\n      console.log(\"fancyDate2\", new Date(event.target.staffAttendanceCalendarDate.value).toISOString().slice(0,10));\n      attendanceDate = new Date(event.target.staffAttendanceCalendarDate.value).toISOString().slice(0,10);\n    }\n\n    const requestBody = {\n      query: `\n        query {getUserAttendanceDate(userId:\"${userId}\",attendanceDate:\"${attendanceDate}\")\n        {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n      `}\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const responseAlert = JSON.stringify(resData.data).slice(0,8);\n        const searchUsers = resData.data.getUserAttendanceDate;\n        this.setState({ searchUsers: searchUsers, userAlert: responseAlert })\n        // this.fetchUsers();\n      })\n      .catch(err => {\n        this.setState({userAlert: err});\n      });\n  }\n\n  modalConfirmSearchLeaveDateRangeHandler = (event) => {\n\n    this.setState({ searching: false, userAlert: \"Searching for Staff by Leave Date range...\" });\n    let userId = this.context.userId;\n    const token = this.context.token;\n\n    let startDate = event.target.formBasicStartDate.value;\n\n    if (\n      event.target.staffLeaveStartCalendarDate.value !== null\n    ) {\n      console.log(\"fancyDate2\", new Date(event.target.staffLeaveStartCalendarDate.value).toISOString().slice(0,10));\n      startDate = new Date(event.target.staffLeaveStartCalendarDate.value).toISOString().slice(0,10);\n    }\n\n    let endDate = event.target.formBasicEndDate.value;\n\n    if (\n      event.target.staffLeaveEndCalendarDate.value !== null\n    ) {\n      console.log(\"fancyDate2\", new Date(event.target.staffLeaveEndCalendarDate.value).toISOString().slice(0,10));\n      endDate = new Date(event.target.staffLeaveEndCalendarDate.value).toISOString().slice(0,10);\n    }\n\n    const requestBody = {\n      query: `\n        query{getUserLeaveDateRange(userId:\"${userId}\",startDate:\"${startDate}\",endDate:\"${endDate}\")\n        {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n      `}\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const responseAlert = JSON.stringify(resData.data).slice(0,8);\n        const searchUsers = resData.data.getUserLeaveDateRange;\n        this.setState({ searchUsers: searchUsers, userAlert: responseAlert})\n        // this.fetchUsers();\n      })\n      .catch(err => {\n        this.setState({userAlert: err});\n      });\n  }\n\n  modalConfirmSearchNameHandler = (event) => {\n\n    this.setState({ searching: false, userAlert: \"Searching users by name ...\" });\n\n    let users = this.state.users;\n    const regex = new RegExp(event.target.formBasicName.value,\"i\");\n    let result = users.filter(user => user.name.match(regex))\n    this.setState({ searchUsers: result})\n  }\n\n\n  modalCancelHandler = () => {\n    this.setState({ creating: false, updating: false, deleting: false, searching: false});\n  };\n\n  fetchUsers() {\n\n    const userId = this.context.userId;\n    this.setState({ isLoading: true, userAlert: \"Fetching Staff Master List...\" });\n    const requestBody = {\n      query: `\n          query {users (userId:\"${userId}\")\n          {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n        `};\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          this.context.userAlert = 'Failed!';\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const responseAlert = JSON.stringify(resData.data).slice(0,8);\n        this.setState({userAlert: responseAlert, users: resData.data.users, isLoading: false});\n        this.context.users = this.state.users;\n      })\n      .catch(err => {\n        this.setState({userAlert: err});\n        if (this.isActive) {\n          this.setState({ isLoading: false });\n        }\n      });\n  }\n\n  fetchUsersAsc = () => {\n\n    this.setState({ userAlert: \"Fetching Staff Master List in Ascending order...\"})\n    const userId = this.context.userId;\n    const requestBody = {\n      query: `\n          query {usersNameAsc (userId:\"${userId}\")\n          {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n        `};\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          this.context.userAlert = 'Failed!';\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const users = resData.data.usersNameAsc;\n        const responseAlert = JSON.stringify(resData.data).slice(0,8);\n        this.setState({userAlert: responseAlert, users: users});\n        this.context.users = this.state.users;\n      })\n      .catch(err => {\n        this.setState({userAlert: err});\n      });\n  }\n  fetchUsersDesc = () => {\n\n    this.setState({ userAlert: \"Fetching Staff Master List in Descending order ...\"})\n    const userId = this.context.userId;\n    const requestBody = {\n      query: `\n          query {usersNameDesc (userId:\"${userId}\")\n          {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n        `};\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          this.context.userAlert = 'Failed!';\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const users = resData.data.usersNameDesc;\n        const responseAlert = JSON.stringify(resData.data).slice(0,8);\n        this.setState({userAlert: responseAlert, users: users});\n        this.context.users = this.state.users;\n      })\n      .catch(err => {\n        this.setState({userAlert: err});\n      });\n  }\n\nmodalDeleteHandler = () => {\n\n  const userId = this.context.userId;\n  const selectedUserId = this.context.selectedUser._id;\n  if(this.context.user.role !== 'admin') {\n    this.setState({userAlert: \"Not the Admin! No edit permission!!\"})\n  }\n\n  this.setState({deleting: true, userAlert: \"deleting user..\"});\n\n  const requestBody = {\n    query: `\n        mutation {\n          deleteUser(userId: \"${userId}\", selectedUserId: \"${selectedUserId}\")\n          {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}\n        }`\n      };\n\n  fetch('http://localhost:10000/graphql', {\n    method: 'POST',\n    body: JSON.stringify(requestBody),\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + this.context.token\n    }\n  })\n    .then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n      return res.json();\n    })\n    .then(resData => {\n      const responseAlert = JSON.stringify(resData.data).slice(0,8);\n      this.setState({userAlert: responseAlert});\n      let deletedUser = resData.data.deleteUser;\n      let deletedUserId = deletedUser._id;\n      deletedUser = this.state.users.find(e => e._id === deletedUserId);\n      const deletedUserPos = this.state.users.indexOf(deletedUser);\n      const slicedArray = this.state.users.splice(deletedUserPos, 1);\n      this.setState({ deleting: false });\n      this.fetchUsers();\n    })\n    .catch(err => {\n      this.setState({userAlert: err});\n      if (this.isActive) {\n        this.setState({ deleting: false });\n      }\n    });\n}\n\ndeleteUserAttendanceItem = (props) => {\n\n  this.setState({ userAlert: \"Deleting Staff Attendance Item...\"})\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let selectedUserId = this.state.selectedUser._id;\n  let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n  const requestBody = {\n    query: `\n     mutation{deleteUserAttendance(userId:\"${userId}\",selectedUserId:\"${selectedUserId}\",attendanceDate:\"${date}\")\n     {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n  `};\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const updatedUserId = resData.data.deleteUserAttendance._id;\n        const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n        const updatedUserPos = this.state.users.indexOf(updatedUser);\n        const slicedArray = this.state.users.splice(updatedUserPos, 1);\n        this.state.users.push(resData.data.deleteUserAttendance);\n        this.context.users = this.state.users;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert})\n        this.fetchUsers();\n      })\n      .catch(err => {\n        this.setState({ userAlert: err })\n      });\n}\n\ndeleteUserLeaveItem = (props) => {\n\n  this.setState({ userAlert: \"Deleting Staff Leave Item...\"})\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let selectedUserId = this.state.selectedUser._id;\n  const requestBody = {\n    query: `\n     mutation{deleteUserLeave(userId:\"${userId}\",selectedUserId:\"${selectedUserId}\",leaveTitle:\"${props.title}\")\n     {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n  `};\n\n  fetch('http://localhost:10000/graphql', {\n    method: 'POST',\n    body: JSON.stringify(requestBody),\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + token\n    }\n  })\n    .then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n      return res.json();\n    })\n    .then(resData => {\n      let deletedUser = resData.data.deleteUserLeave;\n      const updatedUserId = resData.data.deleteUserLeave._id;\n      const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n      const updatedUserPos = this.state.users.indexOf(updatedUser);\n      const slicedArray = this.state.users.splice(updatedUserPos, 1);\n      this.state.users.push(resData.data.deleteUserLeave);\n      this.context.users = this.state.users;\n      const responseAlert = JSON.stringify(resData.data).slice(2,25);\n      this.setState({ userAlert: responseAlert})\n      this.fetchUsers();\n    })\n    .catch(err => {\n      this.setState({ userAlert: err })\n    });\n}\n\ndeleteUserAttachmentItem = (props) => {\n\n  this.setState({ userAlert: \"Deleting Staff Attachment Item...\"})\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let selectedUserId = this.state.selectedUser._id;\n    // console.log(`\n    //   deleting from s3...\n    //   file.name: ${props.name},\n    //   `);\n    //\n    //   const config = {\n    //     bucketName: this.context.creds.s3.bucketName,\n    //     dirName: props.path,\n    //     region: this.context.creds.s3.region,\n    //     accessKeyId: this.context.creds.s3.accessKeyId,\n    //     secretAccessKey: this.context.creds.s3.secretAccessKey,\n    //   }\n    // const ReactS3Client = new S3(config);\n    // const filename = props.name;\n    // // const attachmentName = newFileName;\n    // //\n    // S3FileUpload\n    // .deleteFile(filename, config)\n    // .then(response => console.log(response))\n    // .catch(err => console.error(err))\n\n    const requestBody = {\n      query: `\n       mutation{deleteUserAttachment(userId:\"${userId}\",selectedUserId:\"${selectedUserId}\",attachmentName:\"${props.name}\")\n       {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n    `};\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        let deletedUser = resData.data.deleteUserAttachment;\n        const updatedUserId = resData.data.deleteUserAttachment._id;\n        const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n        const updatedUserPos = this.state.users.indexOf(updatedUser);\n        const slicedArray = this.state.users.splice(updatedUserPos, 1);\n        this.state.users.push(resData.data.deleteUserAttachment);\n        this.context.users = this.state.users;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert})\n        this.fetchUsers();\n      })\n      .catch(err => {\n        this.setState({ userAlert: err })\n      });\n}\n\n\nupdateUserSpecial (event) {\n\n  const field = event.target.value;\n  this.setState({ userUpdateField: field});\n}\n\nshowDetailHandler = userId => {\n\n  this.setState(prevState => {\n    const selectedUser = prevState.users.find(e => e._id === userId);\n    this.context.selectedUser = selectedUser;\n    this.setState({selectedUser: selectedUser});\n    return { selectedUser: selectedUser };\n  });\n};\n\n  onViewAttachment = (attachment) => {\n\n      this.setState({showAttachment: true})\n\n      const file = \"https://ent-emr-bucket.s3-us-east-2.amazonaws.com/\"+attachment.path+\"/\"+attachment.name;\n      const type = attachment.format;\n\n      this.setState({showThisAttachmentFile: file, showThisAttachmentType: type, })\n  }\n\n  closeAttachmentView = () => {\n\n      this.setState({showAttachment: false})\n  }\n\n  createPdf = (user) => {\n\n      const pdfData = {\n        title: \"This pdf is supplied with Staff data...\",\n        user: {\n          _id: user._id,\n          email: user.email,\n          password: user.password,\n          name: user.name,\n          dob: user.dob,\n          address:{\n            number: user.address.number,\n            street: user.address.street,\n            town: user.address.town,\n            parish: user.address.parish,\n            postOffice: user.address.postOffice,\n          },\n          phone: user.phone,\n          role: user.role,\n          employmentDate: user.employmentDate,\n          terminationDate: user.terminationDate,\n          attachments: user.attachments,\n          attendance: user.atttendance,\n          leave: user.leave\n        }\n      };\n    this.setState({createPdf: true, pdfData: pdfData})\n  }\n\n  closePdfCreator = () => {\n      this.setState({createPdf: false, pdfData: null})\n  }\n\n  userSearchClearlHandler () {\n    this.setState({searchUsers: [], userAlert: \"clearing user search results\"});\n  }\n\n  showSidebar = () => {\n    console.log(`\n      showing sidebar...\n      `);\n      this.setState({\n        sidebarShow: true,\n        mCol2Size: 9\n      })\n  }\n\n  hideSidebar = () => {\n    console.log(`\n      hiding sidebar...\n      `);\n      this.setState({\n        sidebarShow: false,\n        mCol2Size: 11\n      })\n  }\n\n  componentWillUnmount() {\n    this.isActive = false;\n  }\n\n  render() {\n    return (\n    <React.Fragment>\n      {this.state.showAttachment === true && (\n        <AttachmentViewer\n          onCloseAttachmentView={this.closeAttachmentView}\n          attachmentFile={this.state.showThisAttachmentFile}\n          attachmentType={this.state.showThisAttachmentType}\n        />\n      )}\n      {this.state.creatingDocument === true && (\n        <PdfCreator\n          pdfType={this.state.pdfType}\n          pdfData={this.state.pdfData}\n          onClosePdfCreator={this.closePdfCreator}\n        />\n      )}\n      <AlertBox\n        authUserId={this.context.userId}\n        alert={this.state.userAlert}\n      />\n      <SidebarControl\n        onShowSidebar={this.showSidebar}\n        onHideSidebar={this.hideSidebar}\n      />\n      {this.state.overlay === true && (\n        <LoadingOverlay\n          status={this.state.overlayStatus}\n        />\n      )}\n\n      <Accordion>\n\n        <Row>\n\n        {this.state.sidebarShow === true && (\n          <Col md={3} className=\"MasterCol1\">\n          <SidebarPage\n            you={this.state.selectedUser}\n          />\n          </Col>\n        )}\n\n        <Col md={this.state.mCol2Size} className=\"MasterCol2\">\n            <Container className=\"containerCombinedDetail\">\n              <Tab.Container id=\"left-tabs-example\" defaultActiveKey=\"userDetail\">\n                <Row>\n                  <Col sm={2}>\n                    <Nav variant=\"pills\" className=\"flex-column\">\n                      <Nav.Item>\n                        <Nav.Link eventKey=\"MasterList\">MASTER LIST</Nav.Link>\n                      </Nav.Item>\n                      <Nav.Item>\n                        <Nav.Link eventKey=\"disabled\" disabled>Search:</Nav.Link>\n                      </Nav.Item>\n                      <Nav.Item>\n                        <Nav.Link eventKey=\"SearchInput\">Input</Nav.Link>\n                      </Nav.Item>\n                      <Nav.Item>\n                        <Nav.Link eventKey=\"SearchResult\">Results</Nav.Link>\n                      </Nav.Item>\n                      <Nav.Item>\n                        <Nav.Link eventKey=\"userDetail\">Selected</Nav.Link>\n                      </Nav.Item>\n                      { this.context.user.role === \"admin\" && (\n                      <Nav.Item>\n                        <Nav.Link eventKey=\"userCreate\">Create New</Nav.Link>\n                      </Nav.Item>\n                      )}\n                      <Nav.Item>\n                        <Nav.Link eventKey=\"disabled\" disabled>Edit:</Nav.Link>\n                      </Nav.Item>\n                      <Nav.Item>\n                        <Nav.Link eventKey=\"userEditDemographics\">Demographics</Nav.Link>\n                      </Nav.Item>\n                      <Nav.Item>\n                        <Nav.Link eventKey=\"userEditField\">Single Field</Nav.Link>\n                      </Nav.Item>\n                      <Nav.Item>\n                        <Nav.Link eventKey=\"disabled\" disabled>Add:</Nav.Link>\n                      </Nav.Item>\n                      <Nav.Item>\n                        <Nav.Link eventKey=\"userEditAttendance\">Attendance</Nav.Link>\n                      </Nav.Item>\n                      <Nav.Item>\n                        <Nav.Link eventKey=\"userEditLeave\">Leave</Nav.Link>\n                      </Nav.Item>\n                      <Nav.Item>\n                        <Nav.Link eventKey=\"userEditAttachment\">Attachment</Nav.Link>\n                      </Nav.Item>\n\n                    </Nav>\n                  </Col>\n\n                  <Col sm={10}>\n                    <Tab.Content>\n                      <Tab.Pane eventKey=\"userDetail\">\n                        {this.state.selectedUser === null && (\n                          <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                            Select a Staff member from the Master List\n                          </Button>\n                        )}\n                        {this.state.isLoading === false &&\n                          this.state.selectedUser !== null\n                          && (\n                            <UserDetail\n                            authUserId={this.context.userId}\n                            AuthContext={this.context}\n                            user={this.state.selectedUser}\n                            onEdit={this.startUpdateUserHandler}\n                            canDelete={this.state.canDelete}\n                            onDelete={this.modalDeleteHandler}\n                            attendanceDelete={this.deleteUserAttendanceItem}\n                            leaveDelete={this.deleteUserLeaveItem}\n                            attachmentDelete={this.deleteUserAttachmentItem}\n                            onViewAttachment={this.onViewAttachment}\n                            onCreatePdf={this.createPdf}\n                            />\n                          )}\n                      </Tab.Pane>\n\n                      { this.context.user.role === \"admin\" && (\n                        <Tab.Pane eventKey=\"userCreate\">\n                        <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" onClick={this.startCreateUserHandler} >Create a NEW Staff Profile</Button>\n                          {this.state.creating && (\n                            <CreateUserForm\n                              authUserId={this.context.userId}\n                              canCancel\n                              canConfirm\n                              onCancel={this.modalCancelHandler}\n                              onConfirm={this.modalConfirmHandler}\n                              onSubmit={this.modalConfirmHandler}\n                              confirmText=\"Confirm\"\n                            />\n                          )}\n                        </Tab.Pane>\n                      )}\n\n\n                      <Tab.Pane eventKey=\"userEditDemographics\">\n                        {this.state.selectedUser === null && (\n                          <Button variant=\"outline-warning\" className=\"confirmEditButton\" size=\"lg\">\n                            Select a Staff member from the Master List\n                          </Button>\n                        )}\n                        {this.state.selectedUser !== null &&\n                          this.context.user.role === \"admin\"\n                          && (\n                          <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" onClick={this.startUpdateUserHandler}>Edit Demographics as Admin</Button>\n                        )}\n                        {this.state.selectedUser !== null &&\n                          this.state.selectedUser._id === this.context.user._id\n                          && (\n                          <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" onClick={this.startUpdateUserHandler}>Edit Demographics</Button>\n                        )}\n                        {this.state.selectedUser !== null &&\n                          this.state.selectedUser._id === this.context.user._id && (\n                          <Button variant=\"outline-danger\" className=\"confirmEditButton\" size=\"lg\">\n                            Your Profile\n                          </Button>\n                        )}\n                        {this.state.selectedUser !== null &&\n                          this.state.selectedUser._id !== this.context.user._id && (\n                          <Button variant=\"outline-danger\" className=\"confirmEditButton\" size=\"lg\">\n                            Not my profile\n                          </Button>\n                        )}\n                        {this.state.updating &&\n                          this.state.selectedUser !== null\n                          && (\n                          <UpdateUserForm\n                            authUserId={this.context.userId}\n                            canCancel\n                            canConfirm\n                            onCancel={this.modalCancelHandler}\n                            onConfirm={this.modalConfirmUpdateHandler}\n                            confirmText=\"Confirm\"\n                            user={this.context.selectedUser}\n                          />\n                        )}\n                      </Tab.Pane>\n\n                      <Tab.Pane eventKey=\"userEditField\">\n                        {this.state.selectedUser === null && (\n                          <Button variant=\"outline-warning\" className=\"confirmEditButton\" size=\"lg\">\n                            Select a Staff member from the Master List\n                          </Button>\n                        )}\n\n                        {this.state.selectedUser !== null &&\n                          this.context.user.role === \"admin\"\n                          && (\n                          <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" onClick={this.startUpdateUserHandler}>Edit Field as Admin</Button>\n                        )}\n                        {this.state.selectedUser !== null &&\n                          this.state.selectedUser._id === this.context.user._id\n                          && (\n                          <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" onClick={this.startUpdateUserHandler}>Edit a Single Field</Button>\n                        )}\n                        {this.state.selectedUser !== null &&\n                          this.state.selectedUser._id === this.context.user._id && (\n                          <Button variant=\"outline-success\" className=\"confirmEditButton\" size=\"lg\">\n                            Your Profile\n                          </Button>\n                        )}\n                        {this.state.selectedUser !== null &&\n                          this.state.selectedUser._id !== this.context.user._id && (\n                          <Button variant=\"outline-danger\" className=\"confirmEditButton\" size=\"lg\">\n                            Not my profile\n                          </Button>\n                        )}\n                        {this.state.updating &&\n                          this.state.selectedUser !== null\n                          && (\n                            <UpdateUserFieldForm\n                              authUserId={this.context.userId}\n                              canCancel\n                              canConfirm\n                              onCancel={this.modalCancelHandler}\n                              onConfirm={this.modalConfirmUpdateFieldHandler}\n                              confirmText=\"Confirm\"\n                              user={this.state.selectedUser}\n                            />\n                        )}\n                      </Tab.Pane>\n\n                      <Tab.Pane eventKey=\"userEditAttendance\">\n                        {this.state.selectedUser === null && (\n                          <Button variant=\"outline-warning\" className=\"confirmEditButton\" size=\"lg\">\n                            Select a Staff member from the Master List below\n                          </Button>\n                        )}\n\n                        {this.state.selectedUser !== null &&\n                          this.context.user.role === \"admin\"\n                          && (\n                          <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" value='attendance' onClick={this.updateUserSpecial.bind(this)}>Add Attendance as Admin</Button>\n                        )}\n                        {this.state.selectedUser !== null &&\n                          this.state.selectedUser._id === this.context.user._id\n                          && (\n                          <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" value='attendance' onClick={this.updateUserSpecial.bind(this)}>Add Attendance</Button>\n                        )}\n                        {this.state.selectedUser !== null &&\n                          this.state.selectedUser._id === this.context.user._id && (\n                          <Button variant=\"outline-success\" className=\"confirmEditButton\" size=\"lg\">\n                            Your Profile\n                          </Button>\n                        )}\n                        {this.state.selectedUser !== null &&\n                          this.state.selectedUser._id !== this.context.user._id && (\n                          <Button variant=\"outline-danger\" className=\"confirmEditButton\" size=\"lg\">\n                            Not my profile\n                          </Button>\n                        )}\n\n                        {this.state.userUpdateField === 'attendance' &&\n                        this.state.selectedUser !== null\n                         && (\n                           <UpdateUserAttendanceForm\n                          authUserId={this.context.userId}\n                          canCancel\n                            canConfirm\n                            onCancel={this.modalCancelHandler}\n                            onConfirm={this.updateUserAttendanceHandler}\n                            confirmText=\"Confirm\"\n                            user={this.state.selectedUser}\n                          />\n                        )}\n                      </Tab.Pane>\n\n                      <Tab.Pane eventKey=\"userEditLeave\">\n                      {this.state.selectedUser === null && (\n                        <Button variant=\"outline-warning\" className=\"confirmEditButton\" size=\"lg\">\n                          Select a Staff member from the Master List\n                        </Button>\n                      )}\n\n                      {this.state.selectedUser !== null &&\n                        this.context.user.role === \"admin\"\n                        && (\n                        <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" value='leave' onClick={this.updateUserSpecial.bind(this)}>Add Leave as Admin</Button>\n                      )}\n                      {this.state.selectedUser !== null &&\n                        this.state.selectedUser._id === this.context.user._id\n                        && (\n                        <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" value='leave' onClick={this.updateUserSpecial.bind(this)}>Add Leave</Button>\n                      )}\n                      {this.state.selectedUser !== null &&\n                        this.state.selectedUser._id === this.context.user._id && (\n                        <Button variant=\"outline-success\" className=\"confirmEditButton\" size=\"lg\">\n                          Your Profile\n                        </Button>\n                      )}\n                      {this.state.selectedUser !== null &&\n                        this.state.selectedUser._id !== this.context.user._id && (\n                        <Button variant=\"outline-danger\" className=\"confirmEditButton\" size=\"lg\">\n                          Not my profile\n                        </Button>\n                      )}\n\n                      {this.state.userUpdateField === 'leave' &&\n                      this.state.selectedUser !== null\n                      && (<UpdateUserLeaveForm\n                        authUserId={this.context.userId}\n                        canCancel\n                          canConfirm\n                          onCancel={this.modalCancelHandler}\n                          onConfirm={this.updateUserLeaveHandler}\n                          confirmText=\"Confirm\"\n                          user={this.state.selectedUser}\n                        />)}\n                      </Tab.Pane>\n\n                      <Tab.Pane eventKey=\"userEditAttachment\">\n                      {this.state.selectedUser === null && (\n                        <Button variant=\"outline-warning\" className=\"confirmEditButton\" size=\"lg\">\n                          Select a Staff member from the Master List\n                        </Button>\n                      )}\n\n                      {this.state.selectedUser !== null &&\n                        this.context.user.role === \"admin\"\n                        && (\n                        <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" value='attachments' onClick={this.updateUserSpecial.bind(this)}>Add Attachment as Admin</Button>\n                      )}\n                      {this.state.selectedUser !== null &&\n                        this.state.selectedUser._id === this.context.user._id\n                        && (\n                        <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" value='attachments' onClick={this.updateUserSpecial.bind(this)}>Add Attachment</Button>\n                      )}\n                      {this.state.selectedUser !== null &&\n                        this.state.selectedUser._id === this.context.user._id && (\n                        <Button variant=\"outline-success\" className=\"confirmEditButton\" size=\"lg\">\n                          Your Profile\n                        </Button>\n                      )}\n                      {this.state.selectedUser !== null &&\n                        this.state.selectedUser._id !== this.context.user._id && (\n                        <Button variant=\"outline-danger\" className=\"confirmEditButton\" size=\"lg\">\n                          Not my profile\n                        </Button>\n                      )}\n\n                      {this.state.userUpdateField === 'attachments' &&\n                      this.state.selectedUser !== null\n                      && (<UpdateUserAttachmentForm\n                        authUserId={this.context.userId}\n                        canCancel\n                          canConfirm\n                          onCancel={this.modalCancelHandler}\n                          onConfirm={this.updateUserAttachmentHandler}\n                          confirmText=\"Confirm\"\n                          user={this.state.selectedUser}\n                        />)}\n                      </Tab.Pane>\n\n                      <Tab.Pane eventKey=\"MasterList\">\n                        <Container className=\"containerUserMasterList\">\n                        <Row className=\"searchListRow\">\n                        <Button variant=\"primary\" size=\"sm\" onClick={this.fetchUsersAsc}>\n                           Sort Asc\n                         </Button>\n                        <Button variant=\"info\" size=\"sm\" onClick={this.fetchUsersDesc}>\n                           Sort Desc\n                         </Button>\n                         {this.state.isLoading ? (\n                           <Spinner />\n                         ) : (\n                           <UserList\n                             users={this.state.users}\n                             authUserId={this.context.userId}\n                             onViewDetail={this.showDetailHandler}\n                           />\n                         )}\n                        </Row>\n                        </Container>\n                      </Tab.Pane>\n\n                      <Tab.Pane eventKey=\"SearchInput\">\n                        <Container className=\"containerSearchUserInput\">\n\n                        <Row className=\"searchUserRowAdd\">\n                        <Button variant=\"primary\" className=\"searchButton\" size=\"lg\" onClick={this.startSearchUserHandler}>Search</Button>\n                        </Row>\n\n                        <Row className=\"searchUserRowForm\">\n                        <Col md={10} className=\"searchUserColForm\">\n                        <Tabs defaultActiveKey=\"Field\" id=\"uncontrolled-tab-example\">\n                        <Tab eventKey=\"Search\" title=\"Search:\" disabled>\n                        </Tab>\n                        <Tab eventKey=\"Field\" title=\"Search by Field:\">\n                        {this.state.searching !== true && (\n                          <Button variant=\"outline-warning\" className=\"confirmEditButton\" size=\"lg\">\n                            Click the 'Search' Button start\n                          </Button>\n                        )}\n                        {this.state.searching === true && (\n                          <SearchUserForm\n                          authUserId={this.context.userId}\n                          canCancel\n                            canConfirm\n                            onCancel={this.modalCancelHandler}\n                            onConfirm={this.modalConfirmSearchHandler}\n                            confirmText=\"Search\"\n                            user={this.context.selectedUser}\n                          />)}\n                        </Tab>\n                        <Tab eventKey=\"Id\" title=\"Search by ID:\">\n                        {this.state.searching !== true && (\n                          <Button variant=\"outline-warning\" className=\"confirmEditButton\" size=\"lg\">\n                            Click the 'Search' Button start\n                          </Button>\n                        )}\n                        {this.state.searching === true && (\n                          <SearchUserIdForm\n                          authUserId={this.context.userId}\n                          canCancel\n                            canConfirm\n                            onCancel={this.modalCancelHandler}\n                            onConfirm={this.modalConfirmSearchIdHandler}\n                            confirmText=\"Search\"\n                            user={this.context.selectedUser}\n                          />\n                          )}\n                        </Tab>\n                        <Tab eventKey=\"Attendance\" title=\"Search by Attendance:\">\n                        {this.state.searching !== true && (\n                          <Button variant=\"outline-warning\" className=\"confirmEditButton\" size=\"lg\">\n                            Click the 'Search' Button start\n                          </Button>\n                        )}\n                        {this.state.searching === true && (\n                          <SearchUserAttendanceDateForm\n                          authUserId={this.context.userId}\n                          canCancel\n                            canConfirm\n                            onCancel={this.modalCancelHandler}\n                            onConfirm={this.modalConfirmSearchAttendanceDateHandler}\n                            confirmText=\"Search\"\n                            user={this.context.selectedUser}\n                          />\n                          )}\n                        </Tab>\n                        <Tab eventKey=\"Leave\" title=\"Search by Leave:\">\n                        {this.state.searching !== true && (\n                          <Button variant=\"outline-warning\" className=\"confirmEditButton\" size=\"lg\">\n                            Click the 'Search' Button start\n                          </Button>\n                        )}\n                        {this.state.searching === true && (\n                          <SearchUserLeaveDateRangeForm\n                          authUserId={this.context.userId}\n                          canCancel\n                            canConfirm\n                            onCancel={this.modalCancelHandler}\n                            onConfirm={this.modalConfirmSearchLeaveDateRangeHandler}\n                            confirmText=\"Search\"\n                            user={this.context.selectedUser}\n                          />\n                          )}\n                        </Tab>\n                        <Tab eventKey=\"Name\" title=\"Search by Name:\">\n                        {this.state.searching !== true && (\n                          <Button variant=\"outline-warning\" className=\"confirmEditButton\" size=\"lg\">\n                            Click the 'Search' Button start\n                          </Button>\n                        )}\n                        {this.state.searching === true && (\n                          <SearchUserNameForm\n                          authUserId={this.context.userId}\n                          canCancel\n                            canConfirm\n                            onCancel={this.modalCancelHandler}\n                            onConfirm={this.modalConfirmSearchNameHandler}\n                            confirmText=\"Search\"\n                            user={this.context.selectedUser}\n                          />\n                        )}\n                        </Tab>\n                        </Tabs>\n                        </Col>\n                        <Col md={10}>\n                        </Col>\n                        </Row>\n\n                        </Container>\n                      </Tab.Pane>\n\n                      <Tab.Pane eventKey=\"SearchResult\">\n                        <Container className=\"containerSearchUserResults\">\n                        <Row>\n                          <Card className=\"searchCard\">\n                            <Card.Body className=\"searchCardBody\">\n                              <Card.Title>Your Search</Card.Title>\n                              <Card.Text>\n                                Field: {this.state.userSearchField}\n                              </Card.Text>\n                              <Card.Text>\n                                Query: {this.state.userSearchQuery}\n                              </Card.Text>\n                            </Card.Body>\n                          </Card>\n                        </Row>\n                        <Row className=\"searchListRow\">\n\n                        {this.state.searchUsers !== [] && (\n                          <SearchUserList\n                            searchUsers={this.state.searchUsers}\n                            authUserId={this.context.userId}\n                            onViewDetail={this.showDetailHandler}\n                          />\n                        )}\n                        </Row>\n                        </Container>\n                      </Tab.Pane>\n                    </Tab.Content>\n                  </Col>\n                </Row>\n              </Tab.Container>\n            </Container>\n        </Col>\n      </Row>\n  </Accordion>\n</React.Fragment>\n    );\n  }\n}\n\nexport default UsersPage;\n"]},"metadata":{},"sourceType":"module"}