{"ast":null,"code":"var _jsxFileName = \"/Users/pedrojacob/Downloads/AMR/websites/office_records/ENT_EMR/frontend/src/pages/thisUser.js\";\nimport React, { Component } from 'react';\nimport UpdateUserForm from '../components/Forms/UpdateUserForm';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Accordion from 'react-bootstrap/Accordion'; // import Modal from '../components/Modal/Modal';\n// import Backdrop from '../components/Backdrop/Backdrop';\n\nimport ThisUserProfile from '../components/Users/thisUserProfile';\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\nimport './Users.css';\n\nclass ThisUserPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      user: null,\n      users: [],\n      updating: false,\n      isLoading: false,\n      userUpdateField: null\n    };\n    this.isActive = true;\n\n    this.startUpdateUserHandler = () => {\n      this.setState({\n        updating: true\n      });\n      console.log(\"UpdateUserForm...\");\n    };\n\n    this.modalConfirmUpdateHandler = event => {\n      let userId = this.context.userId;\n      let selectedUserId = this.context.selectedUser._id;\n\n      if (userId !== selectedUserId && this.context.user.role !== 'admin') {\n        console.log(\"Not the creator or Admin! No edit permission!!\");\n        selectedUserId = null;\n      }\n\n      console.log(\"UpdateUserFormData:  \", event.target.formGridEmail.value);\n      this.setState({\n        updating: false\n      });\n      let email = event.target.formGridEmail.value;\n      let password = event.target.formGridPassword.value;\n      let name = event.target.formGridName.value;\n      let role = event.target.formGridRole.value;\n\n      if (email.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        email = this.state.user.email; // return;\n      }\n\n      if (password.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        password = this.state.user.password;\n      }\n\n      if (name.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        name = this.state.user.name;\n      }\n\n      if (role.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        role = this.state.user.role;\n      }\n\n      const user = {\n        email,\n        password,\n        name,\n        role\n      };\n      console.log(\"updating user.. \" + JSON.stringify(user));\n      const requestBody = {\n        query: \"\\n          mutation UpdateUser($userId: ID!, $selectedUserId: ID!, $email: String!, $password: String!, $name: String!, $role: String!) {\\n            updateUser(userId: $userId, selectedUserId: $selectedUserId, userInput: {email: $email, password: $password, name: $name, role: $role}) {\\n              _id\\n              email\\n              password\\n              name\\n              role\\n            }\\n          }\\n        \",\n        variables: {\n          userId: userId,\n          selectedUserId: userId,\n          email: email,\n          password: password,\n          name: name,\n          role: role\n        }\n      };\n      const token = this.context.token;\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n        const updatedUser = resData.data.updateUser;\n        console.log(\"updatedUser:  \", JSON.stringify(updatedUser));\n        this.setState({\n          user: updatedUser\n        });\n        this.state.users.push({\n          _id: resData.data.updateUser._id,\n          email: resData.data.updateUser.email,\n          name: resData.data.updateUser.name,\n          role: resData.data.updateUser.role\n        });\n        this.context.users = this.state.users; // this.fetchUsers();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.modalCancelHandler = () => {\n      this.setState({\n        updating: false\n      });\n    };\n\n    this.emailElRef = React.createRef();\n    this.passwordElRef = React.createRef();\n    this.nameElRef = React.createRef();\n    this.roleElRef = React.createRef();\n    this.user = null;\n  }\n\n  componentDidMount() {\n    this.getThisUser();\n  }\n\n  getThisUser() {\n    this.setState({\n      isLoading: true\n    });\n    const requestBody = {\n      query: \"\\n          query {\\n            getThisUser {\\n              _id\\n              name\\n              email\\n              role\\n              employmentDate\\n              terminationDate\\n              attachments{\\n                name\\n                format\\n                path\\n              }\\n              attendance{\\n                date\\n                status\\n                description\\n              }\\n              leave{\\n                type\\n                startDate\\n                endDate\\n              }\\n            }\\n          }\\n        \"\n    };\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    }).then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n\n      return res.json();\n    }).then(resData => {\n      // console.log(\"resdata...\" + JSON.stringify(resData));\n      const thisUser = resData.data.getThisUser;\n\n      if (this.isActive) {\n        this.setState({\n          user: thisUser,\n          isLoading: false\n        });\n        this.context.user = thisUser;\n        console.log(\"thisUser context, user object.name ...\" + this.context.user.name);\n        sessionStorage.setItem('thisUser', JSON.stringify(thisUser));\n      }\n    }).catch(err => {\n      console.log(err);\n\n      if (this.isActive) {\n        this.setState({\n          isLoading: false\n        });\n      }\n    });\n  }\n\n  fetchUsers() {\n    console.log(\"'fetch users function' context object... \" + JSON.stringify(this.context));\n    const userId = this.context.userId;\n    this.setState({\n      isLoading: true\n    });\n    const requestBody = {\n      query: \"\\n          query users($userId: ID!) {\\n            users(userId: $userId) {\\n              _id\\n              name\\n              email\\n              role\\n              employmentDate\\n              terminationDate\\n              attachments{\\n                name\\n                format\\n                path\\n              }\\n              attendance{\\n                date\\n                status\\n                description\\n              }\\n              leave{\\n                type\\n                startDate\\n                endDate\\n              }\\n            }\\n          }\\n        \",\n      variables: {\n        userId: userId\n      }\n    };\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    }).then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n\n      return res.json();\n    }).then(resData => {\n      const users = resData.data.users;\n      console.log(users);\n\n      if (this.isActive) {\n        this.setState({\n          users: users,\n          isLoading: false\n        });\n      }\n\n      this.context.users = this.state.users;\n    }).catch(err => {\n      console.log(err);\n\n      if (this.isActive) {\n        this.setState({\n          isLoading: false\n        });\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    this.isActive = false;\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298\n      },\n      __self: this\n    }, React.createElement(Container, {\n      className: \"containerUserProfile\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299\n      },\n      __self: this\n    }, React.createElement(Row, {\n      className: \"UserProfileRow\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 12,\n      className: \"UserProfileCol\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301\n      },\n      __self: this\n    }, this.state.user !== null && React.createElement(ThisUserProfile, {\n      user: this.state.user,\n      authUserId: this.context.userId,\n      onEdit: this.startUpdateUserHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304\n      },\n      __self: this\n    })))), React.createElement(Container, {\n      className: \"containerCreateuser\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318\n      },\n      __self: this\n    }, React.createElement(Row, {\n      className: \"createUserRowForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 12,\n      className: \"createUserColForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320\n      },\n      __self: this\n    }, this.state.updating === true && React.createElement(UpdateUserForm, {\n      canCancelProfile: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmUpdateHandler,\n      confirmText: \"Confirm\",\n      user: this.state.user,\n      authUserId: this.context.userId,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nThisUserPage.contextType = AuthContext;\nexport default ThisUserPage;","map":{"version":3,"sources":["/Users/pedrojacob/Downloads/AMR/websites/office_records/ENT_EMR/frontend/src/pages/thisUser.js"],"names":["React","Component","UpdateUserForm","Container","Row","Col","Accordion","ThisUserProfile","Spinner","AuthContext","ThisUserPage","constructor","props","state","user","users","updating","isLoading","userUpdateField","isActive","startUpdateUserHandler","setState","console","log","modalConfirmUpdateHandler","event","userId","context","selectedUserId","selectedUser","_id","role","target","formGridEmail","value","email","password","formGridPassword","name","formGridName","formGridRole","trim","length","JSON","stringify","requestBody","query","variables","token","fetch","method","body","headers","Authorization","then","res","status","Error","json","resData","updatedUser","data","updateUser","push","catch","err","modalCancelHandler","emailElRef","createRef","passwordElRef","nameElRef","roleElRef","componentDidMount","getThisUser","thisUser","sessionStorage","setItem","fetchUsers","componentWillUnmount","render","contextType"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport UpdateUserForm from '../components/Forms/UpdateUserForm';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Accordion from 'react-bootstrap/Accordion';\n\n// import Modal from '../components/Modal/Modal';\n// import Backdrop from '../components/Backdrop/Backdrop';\nimport ThisUserProfile from '../components/Users/thisUserProfile';\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\nimport './Users.css';\n\nclass ThisUserPage extends Component {\n  state = {\n    user: null,\n    users: [],\n    updating: false,\n    isLoading: false,\n    userUpdateField: null,\n  };\n  isActive = true;\n\n  static contextType = AuthContext;\n\n  constructor(props) {\n    super(props);\n    this.emailElRef = React.createRef();\n    this.passwordElRef = React.createRef();\n    this.nameElRef = React.createRef();\n    this.roleElRef = React.createRef();\n    this.user = null;\n  }\n\n  componentDidMount() {\n    this.getThisUser();\n  }\n\n  startUpdateUserHandler = () => {\n    this.setState({ updating: true });\n    console.log(\"UpdateUserForm...\");\n  };\n\n\n  modalConfirmUpdateHandler = (event) => {\n\n    let userId = this.context.userId;\n    let selectedUserId = this.context.selectedUser._id;\n    if(userId !== selectedUserId && this.context.user.role !== 'admin') {\n\n      console.log(\"Not the creator or Admin! No edit permission!!\");\n      selectedUserId = null;\n    }\n\n    console.log(\"UpdateUserFormData:  \", event.target.formGridEmail.value);\n\n    this.setState({ updating: false });\n    let email = event.target.formGridEmail.value;\n    let password = event.target.formGridPassword.value;\n    let name = event.target.formGridName.value;\n    let role = event.target.formGridRole.value;\n\n    if (email.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      email  = this.state.user.email;\n      // return;\n    }\n    if (password.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      password = this.state.user.password;\n    }\n    if (name.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      name  = this.state.user.name;\n    }\n    if (role.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      role  = this.state.user.role;\n    }\n\n\n    const user = { email, password, name, role };\n    console.log(\"updating user.. \" + JSON.stringify(user));\n\n    const requestBody = {\n      query: `\n          mutation UpdateUser($userId: ID!, $selectedUserId: ID!, $email: String!, $password: String!, $name: String!, $role: String!) {\n            updateUser(userId: $userId, selectedUserId: $selectedUserId, userInput: {email: $email, password: $password, name: $name, role: $role}) {\n              _id\n              email\n              password\n              name\n              role\n            }\n          }\n        `,\n        variables: {\n          userId: userId,\n          selectedUserId: userId,\n          email: email,\n          password: password,\n          name: name,\n          role: role\n        }\n    };\n\n    const token = this.context.token;\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n\n        const updatedUser = resData.data.updateUser;\n        console.log(\"updatedUser:  \", JSON.stringify(updatedUser));\n\n        this.setState({user: updatedUser})\n        this.state.users.push(\n          {\n              _id: resData.data.updateUser._id,\n              email: resData.data.updateUser.email,\n              name: resData.data.updateUser.name,\n              role: resData.data.updateUser.role\n            }\n        );\n        this.context.users = this.state.users;\n        // this.fetchUsers();\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n\n  getThisUser() {\n\n    this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n          query {\n            getThisUser {\n              _id\n              name\n              email\n              role\n              employmentDate\n              terminationDate\n              attachments{\n                name\n                format\n                path\n              }\n              attendance{\n                date\n                status\n                description\n              }\n              leave{\n                type\n                startDate\n                endDate\n              }\n            }\n          }\n        `\n    };\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        // console.log(\"resdata...\" + JSON.stringify(resData));\n        const thisUser = resData.data.getThisUser;\n        if (this.isActive) {\n\n          this.setState({ user: thisUser, isLoading: false });\n\n          this.context.user = thisUser;\n          console.log(\"thisUser context, user object.name ...\" + this.context.user.name);\n\n          sessionStorage.setItem('thisUser', JSON.stringify(thisUser));\n\n        }\n      })\n      .catch(err => {\n        console.log(err);\n        if (this.isActive) {\n          this.setState({ isLoading: false });\n        }\n      });\n  }\n\n\n  modalCancelHandler = () => {\n    this.setState({ updating: false  });\n  };\n\n  fetchUsers() {\n    console.log(\"'fetch users function' context object... \" + JSON.stringify(this.context));\n    const userId = this.context.userId;\n\n    this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n          query users($userId: ID!) {\n            users(userId: $userId) {\n              _id\n              name\n              email\n              role\n              employmentDate\n              terminationDate\n              attachments{\n                name\n                format\n                path\n              }\n              attendance{\n                date\n                status\n                description\n              }\n              leave{\n                type\n                startDate\n                endDate\n              }\n            }\n          }\n        `,\n        variables: {\n          userId: userId\n        }\n    };\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const users = resData.data.users;\n        console.log(users);\n\n        if (this.isActive) {\n          this.setState({ users: users, isLoading: false });\n        }\n        this.context.users = this.state.users;\n      })\n      .catch(err => {\n        console.log(err);\n        if (this.isActive) {\n          this.setState({ isLoading: false });\n        }\n      });\n  }\n\n\n  componentWillUnmount() {\n    this.isActive = false;\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n      <Container className=\"containerUserProfile\">\n      <Row className=\"UserProfileRow\">\n      <Col md={12} className=\"UserProfileCol\">\n      {\n        this.state.user !== null && (\n          <ThisUserProfile\n            user={this.state.user}\n            authUserId={this.context.userId}\n            onEdit={this.startUpdateUserHandler}\n          />\n        )\n      }\n      </Col>\n      </Row>\n      </Container>\n\n\n\n\n<Container className=\"containerCreateuser\">\n<Row className=\"createUserRowForm\">\n<Col md={12} className=\"createUserColForm\">\n{this.state.updating === true && (\n  <UpdateUserForm\n  canCancelProfile\n    canConfirm\n    onCancel={this.modalCancelHandler}\n    onConfirm={this.modalConfirmUpdateHandler}\n    confirmText=\"Confirm\"\n    user={this.state.user}\n    authUserId={this.context.userId}\n  />\n  )}\n  </Col>\n  </Row>\n  </Container>\n\n      </React.Fragment>\n    );\n  }\n}\n\nexport default ThisUserPage;\n"]},"metadata":{},"sourceType":"module"}