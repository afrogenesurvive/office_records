{"ast":null,"code":"var _jsxFileName = \"/Users/pedrojacob/Downloads/AMR/websites/office_records/ENT_EMR/frontend/src/pages/Patients.js\";\nimport React, { Component } from 'react'; // import Form from 'react-bootstrap/Form';\n\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport Accordion from 'react-bootstrap/Accordion';\nimport SidebarPage from './Sidebar';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\nimport Card from 'react-bootstrap/Card';\nimport PatientList from '../components/Patients/PatientList/PatientList';\nimport PatientDetail from '../components/Patients/PatientDetail';\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\nimport SearchPatientList from '../components/Patients/PatientList/SearchPatientList';\nimport SearchPatientForm from '../components/Forms/SearchPatientForm';\nimport CreatePatientForm from '../components/Forms/CreatePatientForm';\nimport UpdatePatientForm from '../components/Forms/UpdatePatientForm';\nimport UpdatePatientConsultantForm from '../components/Forms/UpdatePatientConsultantForm';\nimport UpdatePatientInsuranceForm from '../components/Forms/UpdatePatientInsuranceForm';\nimport UpdatePatientNextOfKinForm from '../components/Forms/UpdatePatientNextOfKinForm';\nimport UpdatePatientComplaintForm from '../components/Forms/UpdatePatientSurveyForm';\nimport UpdatePatientSurveyForm from '../components/Forms/UpdatePatientComplaintForm';\nimport UpdatePatientExaminationForm from '../components/Forms/UpdatePatientExaminationForm';\nimport UpdatePatientHistoryForm from '../components/Forms/UpdatePatientHistoryForm';\nimport UpdatePatientAllergiesForm from '../components/Forms/UpdatePatientAllergiesForm';\nimport UpdatePatientMedicationForm from '../components/Forms/UpdatePatientMedicationForm';\nimport UpdatePatientInvestigationForm from '../components/Forms/UpdatePatientInvestigationForm';\nimport UpdatePatientDiagnosisForm from '../components/Forms/UpdatePatientDiagnosisForm';\nimport UpdatePatientTreatmentForm from '../components/Forms/UpdatePatientTreatmentForm';\nimport UpdatePatientBillingForm from '../components/Forms/UpdatePatientBillingForm';\ng;\nimport './Users.css';\n\nclass PatientsPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      creating: false,\n      updating: false,\n      searching: false,\n      updatingArray: false,\n      deleting: false,\n      patients: [],\n      searchPatients: [],\n      isLoading: false,\n      selectedPatient: null,\n      patientUpdateField: null,\n      patientSearchField: null,\n      patientSearchQuery: null\n    };\n    this.isActive = true;\n\n    this.startCreatePatientHandler = () => {\n      this.setState({\n        creating: true\n      });\n      console.log(\"CreatePatientForm...\");\n    };\n\n    this.startUpdatePatientHandler = () => {\n      this.setState({\n        updating: true,\n        updatingArray: true\n      });\n      console.log(\"UpdatePatientForm...\");\n    };\n\n    this.startSearchPatientHandler = () => {\n      this.setState({\n        searching: true\n      });\n      console.log(\"SearchPatientForm...\");\n    };\n\n    this.modalConfirmHandler = event => {\n      console.log(\"CreatePatientFormData:  \", event.target.formGridName.value);\n      this.setState({\n        creating: false\n      });\n      const userId = this.context.userId;\n      let title = event.target.formGridTitle.value;\n      let name = event.target.formGridName.value;\n      let dob = event.target.formGridDob.value;\n      let age = event.target.formGridAge.value;\n      let gender = event.target.formGridgender.value;\n      let addressNumber = event.target.formGridAddressNumber.value;\n      let addressStreet = event.target.formGridAddressStreet.value;\n      let addressTown = event.target.formGridAddressTown.value;\n      let addressParish = event.target.formGridAddressParish.value;\n      let addressPostOffice = event.target.formGridAddressPostOffice.value;\n      let contactPhone = event.target.formGridContactPhone.value;\n      let contactEmail = event.target.formGridContactEmail.value;\n      let registrationDate = event.target.formGridRegistrationDate.value;\n      let referralDate = event.target.formGridReferralDate.value;\n      let expirationDate = event.target.formGridExpirationDate.value;\n      let attendingPhysicianName = event.target.formGridAttendingPhysicianName.value;\n      let attendingPhysicianEmail = event.target.formGridAttendingPhysicianEmail.value;\n      let attendingPhysicianPhone = event.target.formGridAttendingPhysicianPhone.value;\n      let referringDoctorName = event.target.formGridReferringDoctorName.value;\n      let referringDoctorEmail = event.target.formGridReferringDoctorEmail.value;\n      let referringDoctorPhone = event.target.formGridReferringDoctorPhone.value;\n\n      if (name.trim().length === 0 || title.trim().length === 0 || name.trim().length === 0 || dob.trim().length === 0 || age.trim().length === 0 || gender.trim().length === 0 || addressNumber.trim().length === 0 || addressStreet.trim().length === 0 || addressTown.trim().length === 0 || addressParish.trim().length === 0 || addressPostOffice.trim().length === 0 || contactPhone.trim().length === 0 || contactEmail.trim().length === 0 || registrationDate.trim().length === 0 || referralDate.trim().length === 0 || expirationDate.trim().length === 0 || attendingPhysicianName.trim().length === 0 || attendingPhysicianEmail.trim().length === 0 || attendingPhysicianPhone.trim().length === 0 || referringDoctorName.trim().length === 0 || referringDoctorEmail.trim().length === 0 || referringDoctorPhone.trim().length === 0) {\n        console.log(\"blank fields detected!!!...Please try again...\");\n        return;\n      }\n\n      const patient = {\n        title,\n        name,\n        dob,\n        age,\n        gender,\n        addressNumber,\n        addressStreet,\n        addressTown,\n        addressParish,\n        addressPostOffice,\n        contactPhone,\n        contactEmail,\n        registrationDate,\n        referralDate,\n        expirationDate,\n        attendingPhysicianName,\n        attendingPhysicianEmail,\n        attendingPhysicianPhone,\n        referringDoctorName,\n        referringDoctorEmail,\n        referringDoctorPhone\n      };\n      console.log(\"\\n      craeting patient...\\n      title: \".concat(title, \",\\n      name: \").concat(name, \",\\n      dob: \").concat(dob, \",\\n      age: \").concat(age, \",\\n      gender: \").concat(gender, \",\\n      addressNumber: \").concat(addressNumber, \",\\n      addressStreet: \").concat(addressStreet, \",\\n      addressTown: \").concat(addressTown, \",\\n      addressParish: \").concat(addressParish, \",\\n      addressPostOffice: \").concat(addressPostOffice, \",\\n      contactPhone: \").concat(contactPhone, \",\\n      contactEmail: \").concat(contactEmail, \",\\n      registrationDate: \").concat(registrationDate, \",\\n      referralDate: \").concat(referralDate, \",\\n      expirationDate: \").concat(expirationDate, \",\\n      attendingPhysicianName: \").concat(attendingPhysicianName, \",\\n      attendingPhysicianEmail: \").concat(attendingPhysicianEmail, \",\\n      attendingPhysicianPhone: \").concat(attendingPhysicianPhone, \",\\n      referringDoctorName: \").concat(referringDoctorName, \",\\n      referringDoctorEmail: \").concat(referringDoctorEmail, \",\\n      referringDoctorPhone: \").concat(referringDoctorPhone, \",\\n      \"));\n      const requestBody = {\n        query: \"\\n          mutation {createPatient(userId:\\\"5debdfd99da4842aafe3af56\\\", patientInput:{title:\\\"Mr\\\",name:\\\"test patient 00876909\\\",dob:\\\"1997-04-20\\\",age:36,gender:\\\"male\\\",addressNumber:7775,addressStreet:\\\"test drive7775\\\",addressTown:\\\"test city7775\\\",addressParish:\\\"Westmoreland\\\",addressPostOffice:\\\"n/a\\\",contactPhone:\\\"18769095112\\\",contactEmail:\\\"test55@testmail.com\\\",registrationDate:\\\"2017-02-25\\\",referralDate:\\\"2018-05-01\\\",expirationDate:\\\"2035-10-05\\\",referringDoctorName:\\\"Dr. Test 7775\\\",referringDoctorEmail:\\\"dr7775@drmail.com\\\",referringDoctorPhone:\\\"123456789\\\",attendingPhysicianName:\\\"Dr. Test7775\\\",attendingPhysicianEmail:\\\"7775@drmail.com\\\",attendingPhysicianPhone:\\\"12345678909\\\",occupationRole:\\\"tester7775\\\",occupationEmployer:\\\"Tests & Co\\\",occupationEmployerContactPhone:\\\"123456789098\\\",occupationEmployerContactEmail:\\\"testbos7775@testmail.com\\\"})\\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n        \"\n      };\n      const token = this.context.token;\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"\\n          response data:\\n          \".concat(JSON.stringify(resData.data.createPatient), \"\\n          \"));\n        const newPatient = resData.data.createPatient;\n        this.setState(prevState => {\n          const updatedPatients = [...prevState.patients];\n          updatedPatients.push(newPatient);\n          return {\n            patients: updatedPatients\n          };\n        });\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.modalCancelHandler = () => {\n      this.setState({\n        creating: false,\n        updating: false,\n        selectedPatient: null\n      });\n    };\n\n    this.modalConfirmUpdateHandler = event => {\n      if (this.context.user.role !== 'admin') {\n        console.log(\"Not the Admin! No edit permission!!\");\n      }\n\n      const userId = this.context.userId;\n      const patientId = this.context.selectedPatient._id;\n      console.log(\"UpdatePatientFormData:  \", event.target.formGridName.value);\n      this.setState({\n        updating: false\n      });\n      let name = event.target.formGridName.value;\n      let dob = event.target.formGridDob.value;\n      let age = event.target.formGridAge.value;\n      let address = event.target.formGridAddress.value;\n      let contactPhone = event.target.formGridContactPhone.value;\n      let contactEmail = event.target.formGridContactEmail.value;\n      let registrationDate = event.target.formGridRegistrationDate.value;\n      let referringDoctorName = event.target.formGridReferringDoctorName.value;\n      let referringDoctorEmail = event.target.formGridReferringDoctorEmail.value;\n      let referringDoctorPhone = event.target.formGridReferringDoctorPhone.value;\n      let occupationRole = event.target.formGridOccupationRole.value;\n      let occupationEmployer = event.target.formGridOccupationEmployer.value;\n      let occupationEmployerContactPhone = event.target.formGridOccupationEmployerContactPhone.value;\n      let occupationEmployerContactEmail = event.target.formGridOccupationEmployerContactEmail.value;\n\n      if (name.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        name = this.context.selectedUser.name; // return;\n      }\n\n      if (dob.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        dob = this.context.selectedUser.dob;\n      }\n\n      if (age.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        age = this.context.selectedUser.age;\n      }\n\n      if (address.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        address = this.context.selectedUser.address;\n      }\n\n      if (contactPhone.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        contactPhone = this.context.selectedUser.contactPhone;\n      }\n\n      if (contactEmail.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        contactEmail = this.context.selectedUser.contactEmail;\n      }\n\n      if (registrationDate.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        registrationDate = this.context.selectedUser.registrationDate;\n      }\n\n      if (referringDoctorName.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        referringDoctorName = this.context.selectedUser.referringDoctorName;\n      }\n\n      if (referringDoctorEmail.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        referringDoctorEmail = this.context.selectedUser.referringDoctorEmail;\n      }\n\n      if (referringDoctorPhone.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        referringDoctorPhone = this.context.selectedUser.referringDoctorPhone;\n      }\n\n      if (occupationRole.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        occupationRole = this.context.selectedUser.occupationRole;\n      }\n\n      if (occupationEmployer.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        occupationEmployer = this.context.selectedUser.occupationEmployer;\n      }\n\n      if (occupationEmployerContactEmail.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        occupationEmployerContactEmail = this.context.selectedUser.occupationEmployerContactEmail;\n      }\n\n      if (occupationEmployerContactPhone.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        occupationEmployerContactPhone = this.context.selectedUser.occupationEmployerContactPhone;\n      }\n\n      const patient = {\n        name,\n        dob,\n        age,\n        address,\n        contactPhone,\n        contactEmail,\n        registrationDate,\n        referringDoctorName,\n        referringDoctorEmail,\n        referringDoctorPhone,\n        occupationRole,\n        occupationEmployer,\n        occupationEmployerContactPhone,\n        occupationEmployerContactEmail\n      };\n      console.log(\"\\n      updating patient...\\n      userId: \".concat(userId, \",\\n      patientId: \").concat(patientId, \",\\n      name: \").concat(name, \",\\n      dob: \").concat(dob, \",\\n      age: \").concat(age, \",\\n      address: \").concat(address, \",\\n      contactPhone: \").concat(contactPhone, \",\\n      contactEmail: \").concat(contactEmail, \",\\n      registrationDate: \").concat(registrationDate, \",\\n      referringDoctorName: \").concat(referringDoctorName, \",\\n      referringDoctorEmail: \").concat(referringDoctorEmail, \",\\n      referringDoctorPhone: \").concat(referringDoctorPhone, \",\\n      occupationRole: \").concat(occupationRole, \",\\n      occupationEmployer: \").concat(occupationEmployer, \",\\n      occupationEmployerContactPhone: \").concat(occupationEmployerContactPhone, \",\\n      occupationEmployerContactEmail: \").concat(occupationEmployerContactEmail, \",\\n      \"));\n      const requestBody = {\n        query: \"\\n          mutation {\\n            updatePatient(userId:\\\"\".concat(userId, \"\\\", patientId: \\\"\").concat(patientId, \"\\\", patientInput: { name: \\\"\").concat(name, \"\\\", dob: \\\"\").concat(dob, \"\\\",age: \").concat(age, \", address: \\\"\").concat(address, \"\\\", contactPhone: \\\"\").concat(contactPhone, \"\\\", contactEmail: \\\"\").concat(contactEmail, \"\\\", registrationDate: \\\"\").concat(registrationDate, \"\\\", referringDoctorName: \\\"\").concat(referringDoctorName, \"\\\", referringDoctorEmail: \\\"\").concat(referringDoctorEmail, \"\\\", referringDoctorPhone: \\\"\").concat(referringDoctorPhone, \"\\\", occupationRole: \\\"\").concat(occupationRole, \"\\\", occupationEmployer: \\\"\").concat(occupationEmployer, \"\\\", occupationEmployerContactPhone: \\\"\").concat(occupationEmployerContactPhone, \"\\\", occupationEmployerContactEmail: \\\"\").concat(occupationEmployerContactEmail, \"\\\" })\\n            {_id,name,address,dob,age,contact{email,phone},registrationDate,referralDate,expirationDate,referringDoctor{name,email,phone},appointments{date,title,type},consultant{date,reference{name,role}},occupation{role,employer,contact{email,phone}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{email,phone}},complaints{date,title,description,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},examination{date,area,type,measure,value,description,attachment{name,format,path}},history{title,type,date,description,attachment{name,format,path}},allergies{title,description,attachment{name,format,path}},medication{title,description,attachment{name,format,path}},investigation{date,title,description,attachment{name,format,path}},diagnosis{date,title,description,attachment{name,format,path}},treatment{date,title,type,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,notes,attachment{name,format,path}}}\\n          }\\n        \")\n      };\n      const token = this.context.token;\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n        const updatedPatientId = resData.data.updatePatient._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push({\n          _id: resData.data.updatePatient._id,\n          name: resData.data.updatePatient.name,\n          dob: resData.data.updatePatient.dob,\n          age: resData.data.updatePatient.age,\n          address: resData.data.updatePatient.address,\n          contact: {\n            phone: resData.data.updatePatient.contactPhone,\n            email: resData.data.updatePatient.contactEmail\n          },\n          registrationDate: resData.data.updatePatient.registrationDate,\n          referringDoctor: {\n            name: resData.data.updatePatient.referringDoctorName,\n            email: resData.data.updatePatient.referringDoctorEmail,\n            phone: resData.data.updatePatient.referringDoctorPhone\n          },\n          occupation: {\n            role: resData.data.updatePatient.occupationRole,\n            employer: resData.data.updatePatient.occupationEmployer,\n            contact: {\n              phone: resData.data.updatePatient.occupationEmployerContactPhone,\n              email: resData.data.updatePatient.occupationEmployerContactEmail\n            }\n          }\n        }); // if (this.state.updatingArray === false && this.state.updating === false) {\n        //   console.log(\"update and updateArray complete...now fetching users\");\n        //\n        // }\n\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.updatePatientConsultantHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id;\n      const patientConsultantReference = this.context.selectedUser._id;\n\n      if (this.context.user.role !== 'admin') {\n        console.log(\"No edit permission!!\");\n        return;\n      }\n\n      console.log(\"UpdatePatientConsultantFormData:  \", event.target.formGridConsultantDate.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let consultantDate = event.target.formGridConsultantDate.value;\n      const patientConsultant = {\n        consultantDate,\n        patientConsultantReference\n      };\n      console.log(\"\\n    adding patient consultant item...\\n    userId: \".concat(userId, \",\\n    selectedPatientId: \").concat(selectedPatientId, \",\\n    consultantDate: \").concat(consultantDate, \",\\n    consultantReference: \").concat(patientConsultantReference, \",\\n    \"));\n      const requestBody = {\n        query: \"\\n        mutation {updatePatientConsultant(userId:\\\"\".concat(userId, \"\\\", patientId:\\\"\").concat(selectedPatientId, \"\\\",patientInput:{consultantDate:\\\" \").concat(consultantDate, \"\\\",consultantReference: \\\"\").concat(patientConsultantReference, \"\\\"})\\n        {_id,name,address,dob,age,contact{email,phone},registrationDate,referralDate,expirationDate,referringDoctor{name,email,phone},appointments{date,title,type},consultant{date,reference{name,role}},occupation{role,employer,contact{email,phone}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{email,phone}},complaints{date,title,description,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},examination{date,area,type,measure,value,description,attachment{name,format,path}},history{title,type,date,description,attachment{name,format,path}},allergies{title,description,attachment{name,format,path}},medication{title,description,attachment{name,format,path}},investigation{date,title,description,attachment{name,format,path}},diagnosis{date,title,description,attachment{name,format,path}},treatment{date,title,type,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,notes,attachment{name,format,path}}}\\n      }\\n      \")\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientInsurance._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(updatedPatient);\n        this.context.patients = this.state.patients;\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.updatePatientInsuranceHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id;\n\n      if (this.context.user.role !== 'admin') {\n        console.log(\"No edit permission!!\");\n        return;\n      }\n\n      console.log(\"UpdatePatientInsuranceFormData:  \", event.target.formGridInsuranceCompany.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let insuranceCompany = event.target.formGridInsuranceCompany.value;\n      let insuranceNumber = event.target.formGridInsuranceNumber.value;\n      let insuranceExpiry = event.target.formGridInsuranceExpiry.value;\n      let insuranceDescription = event.target.formGridInsuranceDescription.value;\n      let insuranceSubscriberCompany = event.target.formGridInsuranceSubscriberCompany.value;\n      let insuranceSubscriberDescription = event.target.formGridInsuranceSubscriberDescription.value;\n      const patientInsurance = {\n        insuranceCompany,\n        insuranceNumber,\n        insuranceExpiry,\n        insuranceDescription,\n        insuranceSubscriberCompany,\n        insuranceSubscriberDescription\n      };\n      console.log(\"\\n    adding patient insurance item...\\n    userId: \".concat(userId, \",\\n    selectedPatientId: \").concat(selectedPatientId, \",\\n    insuranceCompany: \").concat(insuranceCompany, \",\\n    insuranceNumber: \").concat(insuranceNumber, \",\\n    insuranceExpiry: \").concat(insuranceExpiry, \",\\n    insuranceDescription: \").concat(insuranceDescription, \",\\n    insuranceSubscriberCompany: \").concat(insuranceSubscriberCompany, \",\\n    insuranceSubscriberDescription: \").concat(insuranceSubscriberDescription, \",\\n    \"));\n      const requestBody = {\n        query: \"\\n        mutation {updatePatientInsurance(userId:\\\"\".concat(userId, \"\\\", patientId:\\\"\").concat(selectedPatientId, \"\\\",patientInput:{insuranceCompany:\\\"\").concat(insuranceCompany, \"\\\",insuranceNumber:\\\"\").concat(insuranceNumber, \"\\\",insuranceDescription:\\\"\").concat(insuranceDescription, \"\\\",insuranceExpiry:\\\"\").concat(insuranceExpiry, \"\\\",insuranceSubscriberCompany:\\\"\").concat(insuranceSubscriberCompany, \"\\\",insuranceSubscriberDescription:\\\"\").concat(insuranceSubscriberDescription, \"\\\"})\\n        {_id,name,address,dob,age,contact{email,phone},registrationDate,referralDate,expirationDate,referringDoctor{name,email,phone},appointments{date,title,type},consultant{date,reference{name,role}},occupation{role,employer,contact{email,phone}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{email,phone}},complaints{date,title,description,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},examination{date,area,type,measure,value,description,attachment{name,format,path}},history{title,type,date,description,attachment{name,format,path}},allergies{title,description,attachment{name,format,path}},medication{title,description,attachment{name,format,path}},investigation{date,title,description,attachment{name,format,path}},diagnosis{date,title,description,attachment{name,format,path}},treatment{date,title,type,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,notes,attachment{name,format,path}}}\\n        }\\n      \")\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientInsurance._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(updatedPatient);\n        this.context.patients = this.state.patients;\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.updatePatientNextOfKinHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id;\n\n      if (this.context.user.role !== 'admin') {\n        console.log(\"No edit permission!!\");\n        return;\n      }\n\n      console.log(\"UpdatePatientNextOfKinFormData:  \", event.target.formGridNextOfKinName.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let nextOfKinName = event.target.formGridNextOfKinName.value;\n      let nextOfKinPhone = event.target.formGridNextOfKinPhone.value;\n      let nextOfKinEmail = event.target.formGridNextOfKinEmail.value;\n      const patientNextOfKin = {\n        nextOfKinName,\n        nextOfKinPhone,\n        nextOfKinEmail\n      };\n      console.log(\"\\n    adding patient nextOfKin item...\\n    userId: \".concat(userId, \",\\n    selectedPatientId: \").concat(selectedPatientId, \",\\n    nextOfKinName: \").concat(nextOfKinName, \",\\n    nextOfKinPhone: \").concat(nextOfKinPhone, \",\\n    nextOfKinEmail: \").concat(nextOfKinEmail, \",\\n    \"));\n      const requestBody = {\n        query: \"\\n        mutation {updatePatientNextOfKin(userId:\\\"\".concat(userId, \"\\\", patientId:\\\"\").concat(selectedPatientId, \"\\\",patientInput:{nextOfKinName:\\\"\").concat(nextOfKinName, \"\\\",nextOfKinEmail:\\\"granny@kin.mail\\\",nextOfKinPhone:\\\"1234566\\\"})\\n        {_id,name,address,dob,age,contact{email,phone},registrationDate,referralDate,expirationDate,referringDoctor{name,email,phone},appointments{date,title,type},consultant{date,reference{name,role}},occupation{role,employer,contact{email,phone}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{email,phone}},complaints{date,title,description,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},examination{date,area,type,measure,value,description,attachment{name,format,path}},history{title,type,date,description,attachment{name,format,path}},allergies{title,description,attachment{name,format,path}},medication{title,description,attachment{name,format,path}},investigation{date,title,description,attachment{name,format,path}},diagnosis{date,title,description,attachment{name,format,path}},treatment{date,title,type,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,notes,attachment{name,format,path}}}\\n        }\\n      \")\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientNextOfKin._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(updatedPatient);\n        this.context.patients = this.state.patients;\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.updatePatientComplaintHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id;\n\n      if (this.context.user.role !== 'admin') {\n        console.log(\"No edit permission!!\");\n        return;\n      }\n\n      console.log(\"UpdatePatientComplaintFormData:  \", event.target.formGridComplaintTitle.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let complaintTitle = event.target.formGridComplaintTitle.value;\n      let complaintDate = event.target.formGridComplaintDate.value;\n      let complaintDescription = event.target.formGridComplaintDescription.value;\n      let complaintAttachmentName = event.target.formGridComplaintAttachmentName.value;\n      let complaintAttachmentFormat = event.target.formGridComplaintAttachmentFormat.value;\n      let complaintAttachmentPath = event.target.formGridComplaintAttachmentPath.value;\n      const patientComplaint = {\n        complaintTitle,\n        complaintDate,\n        complaintDescription,\n        complaintAttachmentName,\n        complaintAttachmentFormat,\n        complaintAttachmentPath\n      };\n      console.log(\"\\n    adding patient complaint...\\n    userId: \".concat(userId, \",\\n    patientId: \").concat(selectedPatientId, \",\\n    complaintTitle: \").concat(complaintTitle, \",\\n    complaintDate: \").concat(complaintDate, \",\\n    complaintDescription: \").concat(complaintDescription, \",\\n    complaintAttachmentName: \").concat(complaintAttachmentName, \",\\n    complaintAttachmentFormat: \").concat(complaintAttachmentFormat, \",\\n    complaintAttachmentPath: \").concat(complaintAttachmentPath, \",\\n    \"));\n      const requestBody = {\n        query: \"\\n        mutation {updatePatientComplaint(userId:\\\"\".concat(userId, \"\\\", patientId:\\\"\").concat(selectedPatientId, \"\\\",patientInput:{complaintDate:\\\"\").concat(complaintDate, \"\\\",complaintTitle:\\\"\").concat(complaintTitle, \"\\\",complaintDescription:\\\"\").concat(complaintDescription, \"\\\",complaintAttachmentName:\\\"\").concat(complaintAttachmentName, \"\\\",complaintAttachmentFormat:\\\"\").concat(complaintAttachmentFormat, \"\\\",complaintAttachmentPath:\\\"\").concat(complaintAttachmentPath, \"\\\"})\\n        {_id,name,address,dob,age,contact{email,phone},registrationDate,referralDate,expirationDate,referringDoctor{name,email,phone},appointments{date,title,type},consultant{date,reference{name,role}},occupation{role,employer,contact{email,phone}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{email,phone}},complaints{date,title,description,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},examination{date,area,type,measure,value,description,attachment{name,format,path}},history{title,type,date,description,attachment{name,format,path}},allergies{title,description,attachment{name,format,path}},medication{title,description,attachment{name,format,path}},investigation{date,title,description,attachment{name,format,path}},diagnosis{date,title,description,attachment{name,format,path}},treatment{date,title,type,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,notes,attachment{name,format,path}}}\\n      }\\n      \")\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientComplaint._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(updatedPatient);\n        this.context.patients = this.state.patients;\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.updatePatientExaminationHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id;\n\n      if (this.context.user.role !== 'admin') {\n        console.log(\"No edit permission!!\");\n        return;\n      }\n\n      console.log(\"UpdatePatientExaminationFormData:  \", event.target.formGridExaminationArea.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let examinationDate = event.target.formGridExaminationDate.value;\n      let examinationArea = event.target.formGridExaminationArea.value;\n      let examinationType = event.target.formGridExaminationType.value;\n      let examinationMeasure = event.target.formGridExaminationMeasure.value;\n      let examinationValue = event.target.formGridExaminationValue.value;\n      let examinationDescription = event.target.formGridExaminationDescription.value;\n      let examinationAttachmentName = event.target.formGridExaminationAttachmentName.value;\n      let examinationAttachmentFormat = event.target.formGridExaminationAttachmentFormat.value;\n      let examinationAttachmentPath = event.target.formGridExaminationAttachmentPath.value;\n      const patientExamination = {\n        examinationArea,\n        examinationType,\n        examinationMeasure,\n        examinationValue,\n        examinationAttachmentName,\n        examinationAttachmentFormat,\n        examinationAttachmentPath\n      };\n      console.log(\"\\n    adding patient examination...\\n    userId: \".concat(userId, \",\\n    patientId: \").concat(selectedPatientId, \",\\n    examinationDate: \").concat(examinationDate, \",\\n    examinationArea: \").concat(examinationArea, \",\\n    examinationType: \").concat(examinationType, \",\\n    examinationMeasure: \").concat(examinationMeasure, \",\\n    examinationValue: \").concat(examinationValue, \",\\n    examinationDescription: \").concat(examinationDescription, \",\\n    examinationAttachmentName: \").concat(examinationAttachmentName, \",\\n    examinationAttachmentFormat: \").concat(examinationAttachmentFormat, \",\\n    examinationAttachmentPath: \").concat(examinationAttachmentPath, \",\\n    \"));\n      const requestBody = {\n        query: \"\\n        mutation {updatePatientExamination(userId:\\\"\".concat(userId, \"\\\", patientId:\\\"\").concat(selectedPatientId, \"\\\",patientInput:{examinationDate:\\\"\").concat(examinationDate, \"\\\",examinationArea:\\\"\").concat(examinationArea, \"\\\",examinationType:\\\"\").concat(examinationType, \"\\\",examinationMeasure:\\\"\").concat(examinationMeasure, \"\\\",examinationValue:\\\"\").concat(examinationValue, \"\\\",examinationDescription:\\\"\").concat(examinationDescription, \"\\\",examinationAttachmentName:\\\"\").concat(examinationAttachmentName, \"\\\",examinationAttachmentFormat:\\\"\").concat(examinationAttachmentFormat, \"\\\",examinationAttachmentPath:\\\"\").concat(examinationAttachmentPath, \"\\\"})\\n        {_id,name,address,dob,age,contact{email,phone},registrationDate,referralDate,expirationDate,referringDoctor{name,email,phone},appointments{date,title,type},consultant{date,reference{name,role}},occupation{role,employer,contact{email,phone}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{email,phone}},complaints{date,title,description,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},examination{date,area,type,measure,value,description,attachment{name,format,path}},history{title,type,date,description,attachment{name,format,path}},allergies{title,description,attachment{name,format,path}},medication{title,description,attachment{name,format,path}},investigation{date,title,description,attachment{name,format,path}},diagnosis{date,title,description,attachment{name,format,path}},treatment{date,title,type,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,notes,attachment{name,format,path}}}\\n      }\\n      \")\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientExamination._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(updatedPatient);\n        this.context.patients = this.state.patients;\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.updatePatientHistoryHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id;\n\n      if (this.context.user.role !== 'admin') {\n        console.log(\"No edit permission!!\");\n        return;\n      }\n\n      console.log(\"UpdatePatientHistoryFormData:  \", event.target.formGridHistoryTitle.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let historyType = event.target.formGridHistoryType.value;\n      let historyDate = event.target.formGridHistoryDate.value;\n      let historyTitle = event.target.formGridHistoryTitle.value;\n      let historyDescription = event.target.formGridHistoryDescription.value;\n      let historyAttachmentName = event.target.formGridHistoryAttachmentName.value;\n      let historyAttachmentFormat = event.target.formGridHistoryAttachmentFormat.value;\n      let historyAttachmentPath = event.target.formGridHistoryAttachmentPath.value;\n      const patientHistory = {\n        historyType,\n        historyDate,\n        historyTitle,\n        historyDescription,\n        historyAttachmentName,\n        historyAttachmentFormat,\n        historyAttachmentPath\n      };\n      console.log(\"\\n    adding patient history...\\n    userId: \".concat(userId, \",\\n    patientId: \").concat(selectedPatientId, \",\\n    historyType: \").concat(historyType, \",\\n    historyDate: \").concat(historyDate, \",\\n    historyTitle: \").concat(historyTitle, \",\\n    historyDescription: \").concat(historyDescription, \",\\n    historyAttachmentName: \").concat(historyAttachmentName, \",\\n    historyAttachmentFormat: \").concat(historyAttachmentFormat, \",\\n    historyAttachmentPath: \").concat(historyAttachmentPath, \",\\n    \"));\n      const requestBody = {\n        query: \"\\n        mutation {updatePatientHistory(userId:\\\"\".concat(userId, \"\\\", patientId:\\\"\").concat(selectedPatientId, \"\\\",patientInput:{historyTitle:\\\"\").concat(historyTitle, \"\\\",historyType:\\\"\").concat(historyType, \"\\\",historyDate:\\\"\").concat(historyDate, \"\\\",historyDescription:\\\"\").concat(historyDescription, \"\\\",historyAttachmentName:\\\"\").concat(historyAttachmentName, \"\\\",historyAttachmentFormat:\\\"\").concat(historyAttachmentFormat, \"\\\",historyAttachmentPath:\\\"\").concat(historyAttachmentPath, \"\\\"})\\n        {_id,name,address,dob,age,contact{email,phone},registrationDate,referralDate,expirationDate,referringDoctor{name,email,phone},appointments{date,title,type},consultant{date,reference{name,role}},occupation{role,employer,contact{email,phone}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{email,phone}},complaints{date,title,description,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},examination{date,area,type,measure,value,description,attachment{name,format,path}},history{title,type,date,description,attachment{name,format,path}},allergies{title,description,attachment{name,format,path}},medication{title,description,attachment{name,format,path}},investigation{date,title,description,attachment{name,format,path}},diagnosis{date,title,description,attachment{name,format,path}},treatment{date,title,type,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,notes,attachment{name,format,path}}}\\n        }\\n      \")\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientHistory._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(updatedPatient);\n        this.context.patients = this.state.patients;\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.updatePatientAllergiesHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id;\n\n      if (this.context.user.role !== 'admin') {\n        console.log(\"No edit permission!!\");\n        return;\n      }\n\n      console.log(\"UpdatePatientAllergiesFormData:  \", event.target.formGridAllergiesTitle.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let allergiesTitle = event.target.formGridAllergiesTitle.value;\n      let allergiesDescription = event.target.formGridAllergiesDescription.value;\n      let allergiesAttachmentName = event.target.formGridAllergiesAttachmentName.value;\n      let allergiesAttachmentFormat = event.target.formGridAllergiesAttachmentFormat.value;\n      let allergiesAttachmentPath = event.target.formGridAllergiesAttachmentPath.value;\n      const patientAllergies = {\n        allergiesTitle,\n        allergiesDescription,\n        allergiesAttachmentName,\n        allergiesAttachmentFormat,\n        allergiesAttachmentPath\n      };\n      console.log(\"\\n    adding patient allergies...\\n    userId: \".concat(userId, \",\\n    patientId: \").concat(selectedPatientId, \",\\n    allergiesTitle: \").concat(allergiesTitle, \",\\n    allergiesDescription: \").concat(allergiesDescription, \",\\n    allergiesAttachmentName: \").concat(allergiesAttachmentName, \",\\n    allergiesAttachmentFormat: \").concat(allergiesAttachmentFormat, \",\\n    allergiesAttachmentPath: \").concat(allergiesAttachmentPath, \",\\n    \"));\n      const requestBody = {\n        query: \"\\n        mutation {updatePatientAllergies(userId:\\\"\".concat(userId, \"\\\", patientId:\\\"\").concat(selectedPatientId, \"\\\",patientInput:{allergiesTitle:\\\"\").concat(allergiesTitle, \"\\\", allergiesDescription:\\\"\").concat(allergiesDescription, \"\\\",allergiesAttachmentName:\\\"\").concat(allergiesAttachmentName, \"\\\",allergiesAttachmentFormat:\\\"\").concat(allergiesAttachmentFormat, \"\\\",allergiesAttachmentPath:\\\"\").concat(allergiesAttachmentPath, \"\\\"})\\n        {_id,name,address,dob,age,contact{email,phone},registrationDate,referralDate,expirationDate,referringDoctor{name,email,phone},appointments{date,title,type},consultant{date,reference{name,role}},occupation{role,employer,contact{email,phone}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{email,phone}},complaints{date,title,description,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},examination{date,area,type,measure,value,description,attachment{name,format,path}},history{title,type,date,description,attachment{name,format,path}},allergies{title,description,attachment{name,format,path}},medication{title,description,attachment{name,format,path}},investigation{date,title,description,attachment{name,format,path}},diagnosis{date,title,description,attachment{name,format,path}},treatment{date,title,type,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,notes,attachment{name,format,path}}}\\n      }\\n      \")\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientAllergies._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(updatedPatient);\n        this.context.patients = this.state.patients;\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.updatePatientMedicationHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id;\n\n      if (this.context.user.role !== 'admin') {\n        console.log(\"No edit permission!!\");\n        return;\n      }\n\n      console.log(\"UpdatePatientMedicationFormData:  \", event.target.formGridMedicationTitle.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let medicationTitle = event.target.formGridMedicationTitle.value;\n      let medicationDescription = event.target.formGridMedicationDescription.value;\n      let medicationAttachmentName = event.target.formGridMedicationAttachmentName.value;\n      let medicationAttachmentFormat = event.target.formGridMedicationAttachmentFormat.value;\n      let medicationAttachmentPath = event.target.formGridMedicationAttachmentPath.value;\n      const patientMedication = {\n        medicationTitle,\n        medicationDescription,\n        medicationAttachmentName,\n        medicationAttachmentFormat,\n        medicationAttachmentPath\n      };\n      console.log(\"\\n    adding patient medication...\\n    userId: \".concat(userId, \",\\n    patientId: \").concat(selectedPatientId, \",\\n    medicationTitle: \").concat(medicationTitle, \",\\n    medicationDescription: \").concat(medicationDescription, \",\\n    medicationAttachmentName: \").concat(medicationAttachmentName, \",\\n    medicationAttachmentFormat: \").concat(medicationAttachmentFormat, \",\\n    medicationAttachmentPath: \").concat(medicationAttachmentPath, \",\\n    \"));\n      const requestBody = {\n        query: \"\\n      mutation {updatePatientMedication(userId:\\\"\".concat(userId, \"\\\", patientId:\\\"\").concat(selectedPatientId, \"\\\",patientInput:{medicationTitle:\\\"\").concat(medicationTitle, \"\\\", medicationDescription:\\\"\").concat(medicationDescription, \"\\\",medicationAttachmentName:\\\"\").concat(medicationAttachmentName, \"\\\",medicationAttachmentFormat:\\\"\").concat(medicationAttachmentFormat, \"\\\",medicationAttachmentPath:\\\"\").concat(medicationAttachmentPath, \"\\\"})\\n      {_id,name,address,dob,age,contact{email,phone},registrationDate,referralDate,expirationDate,referringDoctor{name,email,phone},appointments{date,title,type},consultant{date,reference{name,role}},occupation{role,employer,contact{email,phone}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{email,phone}},complaints{date,title,description,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},examination{date,area,type,measure,value,description,attachment{name,format,path}},history{title,type,date,description,attachment{name,format,path}},allergies{title,description,attachment{name,format,path}},medication{title,description,attachment{name,format,path}},investigation{date,title,description,attachment{name,format,path}},diagnosis{date,title,description,attachment{name,format,path}},treatment{date,title,type,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,notes,attachment{name,format,path}}}\\n        }\\n      \")\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientMedication._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(updatedPatient);\n        this.context.patients = this.state.patients;\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.updatePatientInvestigationHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id;\n\n      if (this.context.user.role !== 'admin') {\n        console.log(\"No edit permission!!\");\n        return;\n      }\n\n      console.log(\"UpdatePatientInvestigationFormData:  \", event.target.formGridInvestigationTitle.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let investigationDate = event.target.formGridInvestigationDate.value;\n      let investigationTitle = event.target.formGridInvestigationTitle.value;\n      let investigationDescription = event.target.formGridInvestigationDescription.value;\n      let investigationAttachmentName = event.target.formGridInvestigationAttachmentName.value;\n      let investigationAttachmentFormat = event.target.formGridInvestigationAttachmentFormat.value;\n      let investigationAttachmentPath = event.target.formGridInvestigationAttachmentPath.value;\n      const patientInvestigation = {\n        investigationDate,\n        investigationTitle,\n        investigationDescription,\n        investigationAttachmentName,\n        investigationAttachmentFormat,\n        investigationAttachmentPath\n      };\n      console.log(\"\\n    adding patient investigation...\\n    userId: \".concat(userId, \",\\n    patientId: \").concat(selectedPatientId, \",\\n    investigationDate: \").concat(investigationDate, \",\\n    investigationTitle: \").concat(investigationTitle, \",\\n    investigationDescription: \").concat(investigationDescription, \",\\n    investigationAttachmentName: \").concat(investigationAttachmentName, \",\\n    investigationAttachmentFormat: \").concat(investigationAttachmentFormat, \",\\n    investigationAttachmentPath: \").concat(investigationAttachmentPath, \",\\n    \"));\n      const requestBody = {\n        query: \"\\n        mutation {updatePatientInvestigation(userId:\\\"\".concat(userId, \"\\\", patientId:\\\"\").concat(selectedPatientId, \"\\\",patientInput:{investigationDate:\\\"\").concat(investigationDate, \"\\\",investigationTitle:\\\"\").concat(investigationTitle, \"\\\",investigationDescription:\\\"\").concat(investigationDescription, \"\\\",investigationAttachmentName:\\\"\").concat(investigationAttachmentName, \"\\\",investigationAttachmentFormat:\\\"\").concat(investigationAttachmentFormat, \"\\\",investigationAttachmentPath:\\\"\").concat(investigationAttachmentPath, \"\\\"})\\n        {_id,name,address,dob,age,contact{email,phone},registrationDate,referralDate,expirationDate,referringDoctor{name,email,phone},appointments{date,title,type},consultant{date,reference{name,role}},occupation{role,employer,contact{email,phone}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{email,phone}},complaints{date,title,description,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},examination{date,area,type,measure,value,description,attachment{name,format,path}},history{title,type,date,description,attachment{name,format,path}},allergies{title,description,attachment{name,format,path}},medication{title,description,attachment{name,format,path}},investigation{date,title,description,attachment{name,format,path}},diagnosis{date,title,description,attachment{name,format,path}},treatment{date,title,type,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,notes,attachment{name,format,path}}}\\n        }\\n      \")\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientInvestigation._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(updatedPatient);\n        this.context.patients = this.state.patients;\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.updatePatientDiagnosisHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id;\n\n      if (this.context.user.role !== 'admin') {\n        console.log(\"No edit permission!!\");\n        return;\n      }\n\n      console.log(\"UpdatePatientDiagnosisFormData:  \", event.target.formGridDiagnosisTitle.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let diagnosisDate = event.target.formGridDiagnosisDate.value;\n      let diagnosisTitle = event.target.formGridDiagnosisTitle.value;\n      let diagnosisDescription = event.target.formGridDiagnosisDescription.value;\n      let diagnosisAttachmentName = event.target.formGridDiagnosisAttachmentName.value;\n      let diagnosisAttachmentFormat = event.target.formGridDiagnosisAttachmentFormat.value;\n      let diagnosisAttachmentPath = event.target.formGridDiagnosisAttachmentPath.value;\n      const patientDiagnosis = {\n        diagnosisDate,\n        diagnosisTitle,\n        diagnosisDescription,\n        diagnosisAttachmentName,\n        diagnosisAttachmentFormat,\n        diagnosisAttachmentPath\n      };\n      console.log(\"\\n    adding patient diagnosis...\\n    userId: \".concat(userId, \",\\n    patientId: \").concat(selectedPatientId, \",\\n    diagnosisDate: \").concat(diagnosisDate, \",\\n    diagnosisTitle: \").concat(diagnosisTitle, \",\\n    diagnosisDescription: \").concat(diagnosisDescription, \",\\n    diagnosisAttachmentName: \").concat(diagnosisAttachmentName, \",\\n    diagnosisAttachmentFormat: \").concat(diagnosisAttachmentFormat, \",\\n    diagnosisAttachmentPath: \").concat(diagnosisAttachmentPath, \",\\n    \"));\n      const requestBody = {\n        query: \"\\n        mutation {updatePatientDiagnosis(userId:\\\"\".concat(userId, \"\\\", patientId:\\\"\").concat(selectedPatientId, \"\\\",patientInput:{diagnosisDate:\\\"\").concat(diagnosisDate, \"\\\",diagnosisTitle:\\\"\").concat(diagnosisTitle, \"\\\",diagnosisDescription:\\\"\").concat(diagnosisDescription, \"\\\",diagnosisAttachmentName:\\\"\").concat(diagnosisAttachmentName, \"\\\",diagnosisAttachmentFormat:\\\"\").concat(diagnosisAttachmentFormat, \"\\\",diagnosisAttachmentPath:\\\"\").concat(diagnosisAttachmentPath, \"\\\"})\\n        {_id,name,address,dob,age,contact{email,phone},registrationDate,referralDate,expirationDate,referringDoctor{name,email,phone},appointments{date,title,type},consultant{date,reference{name,role}},occupation{role,employer,contact{email,phone}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{email,phone}},complaints{date,title,description,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},examination{date,area,type,measure,value,description,attachment{name,format,path}},history{title,type,date,description,attachment{name,format,path}},allergies{title,description,attachment{name,format,path}},medication{title,description,attachment{name,format,path}},investigation{date,title,description,attachment{name,format,path}},diagnosis{date,title,description,attachment{name,format,path}},treatment{date,title,type,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,notes,attachment{name,format,path}}}\\n        }\\n      \")\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientDiagnosis._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(updatedPatient);\n        this.context.patients = this.state.patients;\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.updatePatientTreatmentHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id;\n\n      if (this.context.user.role !== 'admin') {\n        console.log(\"No edit permission!!\");\n        return;\n      }\n\n      console.log(\"UpdatePatientTreatmentFormData:  \", event.target.formGridTreatmentTitle.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let treatmentDate = event.target.formGridTreatmentDate.value;\n      let treatmentTitle = event.target.formGridTreatmentTitle.value;\n      let treatmentDescription = event.target.formGridTreatmentDescription.value;\n      let treatmentDose = event.target.formGridTreatmentDose.value;\n      let treatmentFrequency = event.target.formGridTreatmentFrequency.value;\n      let treatmentType = event.target.formGridTreatmentType.value;\n      let treatmentAttachmentName = event.target.formGridTreatmentAttachmentName.value;\n      let treatmentAttachmentFormat = event.target.formGridTreatmentAttachmentFormat.value;\n      let treatmentAttachmentPath = event.target.formGridTreatmentAttachmentPath.value;\n      const patientTreatment = {\n        treatmentDate,\n        treatmentTitle,\n        treatmentDescription,\n        treatmentDose,\n        treatmentFrequency,\n        treatmentType,\n        treatmentAttachmentName,\n        treatmentAttachmentFormat,\n        treatmentAttachmentPath\n      };\n      console.log(\"\\n    adding patient treatment...\\n    userId: \".concat(userId, \",\\n    patientId: \").concat(selectedPatientId, \",\\n    treatmentDate: \").concat(treatmentDate, \",\\n    treatmentTitle: \").concat(treatmentTitle, \",\\n    treatmentDescription: \").concat(treatmentDescription, \",\\n    treatmentDose: \").concat(treatmentDose, \",\\n    treatmentFrequency: \").concat(treatmentFrequency, \",\\n    treatmentType: \").concat(treatmentType, \",\\n    treatmentAttachmentName: \").concat(treatmentAttachmentName, \",\\n    treatmentAttachmentFormat: \").concat(treatmentAttachmentFormat, \",\\n    treatmentAttachmentPath: \").concat(treatmentAttachmentPath, \",\\n    \"));\n      const requestBody = {\n        query: \"\\n        mutation {updatePatientTreatment(userId:\\\"\".concat(userId, \"\\\", patientId:\\\"\").concat(selectedPatientId, \"\\\",patientInput:{treatmentDate:\\\"\").concat(treatmentDate, \"\\\",treatmentTitle:\\\"\").concat(treatmentTitle, \"\\\",treatmentType:\\\"\").concat(treatmentType, \"\\\",treatmentDescription:\\\"\").concat(treatmentDescription, \"\\\",treatmentDose:\\\"\").concat(treatmentDose, \"\\\",treatmentFrequency:\\\"\").concat(treatmentFrequency, \"\\\",treatmentAttachmentName:\\\"\").concat(treatmentAttachmentName, \"\\\",treatmentAttachmentFormat:\\\"\").concat(treatmentAttachmentFormat, \"\\\",treatmentAttachmentPath:\\\"\").concat(treatmentAttachmentPath, \"\\\"})\\n        {_id,name,address,dob,age,contact{email,phone},registrationDate,referralDate,expirationDate,referringDoctor{name,email,phone},appointments{date,title,type},consultant{date,reference{name,role}},occupation{role,employer,contact{email,phone}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{email,phone}},complaints{date,title,description,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},examination{date,area,type,measure,value,description,attachment{name,format,path}},history{title,type,date,description,attachment{name,format,path}},allergies{title,description,attachment{name,format,path}},medication{title,description,attachment{name,format,path}},investigation{date,title,description,attachment{name,format,path}},diagnosis{date,title,description,attachment{name,format,path}},treatment{date,title,type,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,notes,attachment{name,format,path}}}\\n        }\\n      \")\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientTreatment._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(updatedPatient);\n        this.context.patients = this.state.patients;\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.updatePatientBillingHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id;\n\n      if (this.context.user.role !== 'admin') {\n        console.log(\"No edit permission!!\");\n        return;\n      }\n\n      console.log(\"UpdatePatientBillingFormData:  \", event.target.formGridBillingTitle.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let billingDate = event.target.formGridBillingDate.value;\n      let billingTitle = event.target.formGridBillingTitle.value;\n      let billingType = event.target.formGridBillingType.value;\n      let billingDescription = event.target.formGridBillingDescription.value;\n      let billingAmount = event.target.formGridBillingAmount.value;\n      let billingPaid = event.target.formGridBillingPaid.value;\n      let billingNotes = event.target.formGridBillingNotes.value;\n      let billingAttachmentName = event.target.formGridBillingAttachmentName.value;\n      let billingAttachmentFormat = event.target.formGridBillingAttachmentFormat.value;\n      let billingAttachmentPath = event.target.formGridBillingAttachmentPath.value;\n      const patientBilling = {\n        billingDate,\n        billingTitle,\n        billingType,\n        billingDescription,\n        billingAmount,\n        billingPaid,\n        billingNotes,\n        billingAttachmentName,\n        billingAttachmentFormat,\n        billingAttachmentPath\n      };\n      console.log(\"\\n    adding patient treatment...\\n    userId: \".concat(userId, \",\\n    patientId: \").concat(selectedPatientId, \",\\n    billingDate: \").concat(billingDate, \",\\n    billingTitle: \").concat(billingTitle, \",\\n    billingType: \").concat(billingType, \",\\n    billingDescription: \").concat(billingDescription, \",\\n    billingAmount: \").concat(billingAmount, \",\\n    billingPaid: \").concat(billingPaid, \",\\n    billingNotes: \").concat(billingNotes, \",\\n    billingAttachmentName: \").concat(billingAttachmentName, \",\\n    billingAttachmentFormat: \").concat(billingAttachmentFormat, \",\\n    billingAttachmentPath: \").concat(billingAttachmentPath, \",\\n    \"));\n      const requestBody = {\n        query: \"\\n        mutation {updatePatientBilling(userId:\\\"\".concat(userId, \"\\\", patientId:\\\"\").concat(selectedPatientId, \"\\\",patientInput:{billingDate:\\\"\").concat(billingDate, \"\\\",billingTitle:\\\"\").concat(billingTitle, \"\\\",billingType:\\\"\").concat(billingType, \"\\\",billingDescription:\\\"\").concat(billingDescription, \"\\\",billingAmount:\").concat(billingAmount, \",billingPaid:\").concat(billingPaid, \",billingNotes:\\\"\").concat(billingNotes, \"\\\",billingAttachmentName:\\\"\").concat(billingAttachmentName, \"\\\",billingAttachmentFormat:\\\"\").concat(billingAttachmentFormat, \"\\\",billingAttachmentPath:\\\"\").concat(billingAttachmentPath, \"\\\"})\\n        {_id,name,address,dob,age,contact{email,phone},registrationDate,referralDate,expirationDate,referringDoctor{name,email,phone},appointments{date,title,type},consultant{date,reference{name,role}},occupation{role,employer,contact{email,phone}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{email,phone}},complaints{date,title,description,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},examination{date,area,type,measure,value,description,attachment{name,format,path}},history{title,type,date,description,attachment{name,format,path}},allergies{title,description,attachment{name,format,path}},medication{title,description,attachment{name,format,path}},investigation{date,title,description,attachment{name,format,path}},diagnosis{date,title,description,attachment{name,format,path}},treatment{date,title,type,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,notes,attachment{name,format,path}}}\\n        }\\n      \")\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientBilling._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(updatedPatient);\n        this.context.patients = this.state.patients;\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.modalConfirmSearchHandler = event => {\n      console.log(\"SearchPatientForm:  \");\n      let userId = this.context.userId;\n      console.log(\"SearchPatientFormData:  \", event.target.formBasicField.value);\n      this.setState({\n        searching: false\n      });\n      let field = event.target.formBasicField.value;\n      let query = event.target.formBasicQuery.value;\n      this.setState({\n        patientSearchField: field,\n        patientSearchQuery: query\n      });\n\n      if (field.trim().length === 0 || query.trim().length === 0) {\n        console.log(\"blank fields detected!!!...Please try again...\");\n        return;\n      }\n\n      const search = {\n        field,\n        query\n      };\n      console.log(\"Searching for Patient:  \", JSON.stringify(search));\n      const requestBody = {\n        query: \"\\n        query {\\n          getPatientField(userId: \\\"\".concat(userId, \"\\\", field: \\\"\").concat(field, \"\\\", query: \\\"\").concat(query, \"\\\" )\\n          {_id,name,address,dob,age,contact{email,phone},registrationDate,referralDate,expirationDate,referringDoctor{name,email,phone},appointments{date,title,type},consultant{date,reference{name,role}},occupation{role,employer,contact{email,phone}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{email,phone}},complaints{date,title,description,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},examination{date,area,type,measure,value,description,attachment{name,format,path}},history{title,type,date,description,attachment{name,format,path}},allergies{title,description,attachment{name,format,path}},medication{title,description,attachment{name,format,path}},investigation{date,title,description,attachment{name,format,path}},diagnosis{date,title,description,attachment{name,format,path}},treatment{date,title,type,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,notes,attachment{name,format,path}}}\\n      }\\n      \")\n      };\n      const token = this.context.token;\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n        const searchPatients = resData.data.getPatientField;\n        this.setState({\n          searchPatients: searchPatients\n        });\n        console.log(\"state.searchPatients:  \", this.state.searchPatients); // this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.modalCancelHandler = () => {\n      this.setState({\n        creating: false,\n        updating: false,\n        searching: false,\n        selectedPatient: null\n      });\n    };\n\n    this.modalDeleteHandler = () => {\n      console.log(\"deleting patient...selectedPatient:  \", this.context.selectedPatient);\n      const selectedPatientId = this.context.selectedPatient._id;\n      const userId = this.context.selectedUser._id;\n\n      if (this.context.user.role !== 'admin') {\n        console.log(\"Not the Admin! No edit permission!!\");\n      }\n\n      this.setState({\n        deleting: true\n      });\n      const requestBody = {\n        query: \"\\n          mutation {deletePatient(userId:\\\"\".concat(userId, \"\\\",patientId:\\\"\").concat(selectedPatientId, \"\\\")\\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n        \")\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + this.context.token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatient;\n        console.log(deletedPatient);\n        let deletedPatientId = deletedPatient._id;\n        deletedPatient = this.state.patients.find(e => e._id === deletedPatientId);\n        const deletedPatientPos = this.state.patients.indexOf(deletedPatient);\n        const slicedArray = this.state.patients.splice(deletedPatientPos, 1);\n        console.log(\"deletedPatient:  \", JSON.stringify(deletedPatient), \"  deletedUserPos:  \", deletedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.setState({\n          deleting: false\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n\n        if (this.isActive) {\n          this.setState({\n            deleting: false\n          });\n        }\n      });\n    };\n\n    this.showDetailHandler = patientId => {\n      this.setState(prevState => {\n        const selectedPatient = prevState.patients.find(e => e._id === patientId);\n        this.context.selectedPatient = selectedPatient;\n        this.context.selectedPatientId = selectedPatient._id;\n        console.log(\"selectedPatient:  \", selectedPatient);\n        return {\n          selectedPatient: selectedPatient\n        };\n      });\n    };\n\n    this.nameElRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.fetchPatients();\n  }\n\n  fetchPatients() {\n    console.log(\"fetch patients function:  \");\n    const userId = this.context.userId;\n    const token = this.context.token;\n    this.setState({\n      isLoading: true\n    });\n    const requestBody = {\n      query: \"\\n          query {patients(userId:\\\"\".concat(userId, \"\\\")\\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{_id,title,time,location},consultant{date,reference{_id,name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n        \")\n    };\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    }).then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n\n      return res.json();\n    }).then(resData => {\n      console.log(\"resData\", resData);\n      const patients = resData.data.patients;\n      console.log(patients);\n      this.context.patients = this.state.patients;\n\n      if (this.isActive) {\n        this.setState({\n          patients: patients,\n          isLoading: false\n        });\n      }\n    }).catch(err => {\n      console.log(err);\n\n      if (this.isActive) {\n        this.setState({\n          isLoading: false\n        });\n      }\n    });\n  }\n\n  updatePatientSpecial(event) {\n    console.log(\"special field to update:  \", event.target.value);\n    const field = event.target.value;\n    this.setState({\n      patientUpdateField: field\n    });\n  }\n\n  componentWillUnmount() {\n    this.isActive = false;\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1551\n      },\n      __self: this\n    }, React.createElement(Accordion, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1553\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1555\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 3,\n      className: \"MasterCol1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1556\n      },\n      __self: this\n    }, React.createElement(SidebarPage, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1557\n      },\n      __self: this\n    })), React.createElement(Col, {\n      md: 6,\n      className: \"MasterCol2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1560\n      },\n      __self: this\n    }, React.createElement(Container, {\n      className: \"containerCombinedDetail\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1561\n      },\n      __self: this\n    }, React.createElement(Tabs, {\n      defaultActiveKey: \"\",\n      id: \"uncontrolled-tab-example\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1562\n      },\n      __self: this\n    }, React.createElement(Tab, {\n      eventKey: \"\",\n      title: \"Edit:\",\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1563\n      },\n      __self: this\n    }), React.createElement(Tab, {\n      eventKey: \"patientDetail\",\n      title: \"Details\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1565\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1567\n      },\n      __self: this\n    }, \"Select a Patient from the Master List below\"), this.state.isLoading === false && this.state.selectedPatient !== null && React.createElement(PatientDetail, {\n      authUserId: this.context.userId,\n      patient: this.state.selectedPatient,\n      onEdit: this.startUpdatePatientHandler,\n      onDelete: this.modalDeleteHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1574\n      },\n      __self: this\n    })), React.createElement(Tab, {\n      eventKey: \"patientCreate\",\n      title: \"Create\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1583\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"outline-primary\",\n      onClick: this.startCreatePatientHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1584\n      },\n      __self: this\n    }, \"Create\"), this.state.creating && React.createElement(CreatePatientForm, {\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmHandler,\n      confirmText: \"Confirm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1587\n      },\n      __self: this\n    })), React.createElement(Tab, {\n      eventKey: \"patientEditDemographics\",\n      title: \"Demographics\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1597\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1599\n      },\n      __self: this\n    }, \"Select a Patient from the Master List below\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      onClick: this.startUpdatePatientHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1604\n      },\n      __self: this\n    }, \"Edit Demographics\"), this.state.updating && this.state.selectedPatient !== null && React.createElement(UpdatePatientForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmUpdateHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1609\n      },\n      __self: this\n    })), React.createElement(Tab, {\n      eventKey: \"patientEditConsultant\",\n      title: \"Consultant\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1621\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1623\n      },\n      __self: this\n    }, \"Select a Patient from the Master List below\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"consultant\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1628\n      },\n      __self: this\n    }, \"Add Consultant\"), this.state.patientUpdateField === 'consultant' && this.state.selectedPatient !== null && React.createElement(UpdatePatientConsultantForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientConsultantHandler,\n      confirmText: \"Confirm\",\n      consultant: this.context.selectedUser,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1633\n      },\n      __self: this\n    }), this.state.patientUpdateField === 'consultant' && this.state.selectedPatient !== null && React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1646\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1647\n      },\n      __self: this\n    }, \"Add Consultant: \", this.context.selectedUser.name), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1648\n      },\n      __self: this\n    }, \" To Paitient: \", this.state.selectedPatient.name, \" ??\"), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1649\n      },\n      __self: this\n    })), this.state.patientUpdateField === 'consultant' && this.state.selectedPatient !== null && React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1655\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1656\n      },\n      __self: this\n    }, \"Select a doctor from the Staff page\"))), React.createElement(Tab, {\n      eventKey: \"patientEditInsurance\",\n      title: \"Insurance\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1662\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1664\n      },\n      __self: this\n    }, \"Select a Patient from the Master List below\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"insurance\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1669\n      },\n      __self: this\n    }, \"Add Insurance\"), this.state.patientUpdateField === 'insurance' && this.state.selectedPatient !== null && React.createElement(UpdatePatientInsuranceForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientInsuranceHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1674\n      },\n      __self: this\n    })), React.createElement(Tab, {\n      eventKey: \"patientEditNextOfKin\",\n      title: \"NextOfKin\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1685\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1687\n      },\n      __self: this\n    }, \"Select a Patient from the Master List below\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"nextOfKin\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1692\n      },\n      __self: this\n    }, \"Add NextOfKin\"), this.state.patientUpdateField === 'nextOfKin' && this.state.selectedPatient !== null && React.createElement(UpdatePatientNextOfKinForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientNextOfKinHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1697\n      },\n      __self: this\n    })), React.createElement(Tab, {\n      eventKey: \"patientEditComplaint\",\n      title: \"Complaint\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1708\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1710\n      },\n      __self: this\n    }, \"Select a Patient from the Master List below\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"complaint\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1715\n      },\n      __self: this\n    }, \"Add Complaint\"), this.state.patientUpdateField === 'complaint' && this.state.selectedPatient !== null && React.createElement(UpdatePatientComplaintForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientSurveyHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1720\n      },\n      __self: this\n    })), React.createElement(Tab, {\n      eventKey: \"patientEditSurvey\",\n      title: \"Survey\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1731\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1733\n      },\n      __self: this\n    }, \"Select a Patient from the Master List below\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"survey\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1738\n      },\n      __self: this\n    }, \"Add Survey\"), this.state.patientUpdateField === 'survey' && this.state.selectedPatient !== null && React.createElement(UpdatePatientSurveyForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientComplaintHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1743\n      },\n      __self: this\n    })), React.createElement(Tab, {\n      eventKey: \"patientEditExamination\",\n      title: \"Examination\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1754\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1756\n      },\n      __self: this\n    }, \"Select a Patient from the Master List below\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"examintion\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1761\n      },\n      __self: this\n    }, \"Add Examination\"), this.state.patientUpdateField === 'examintion' && this.state.selectedPatient !== null && React.createElement(UpdatePatientExaminationForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientExaminationHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1766\n      },\n      __self: this\n    })), React.createElement(Tab, {\n      eventKey: \"patientEditHistory\",\n      title: \"History\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1777\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1779\n      },\n      __self: this\n    }, \"Select a Patient from the Master List below\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"history\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1784\n      },\n      __self: this\n    }, \"Add History\"), this.state.patientUpdateField === 'history' && this.state.selectedPatient !== null && React.createElement(UpdatePatientHistoryForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientHistoryHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1789\n      },\n      __self: this\n    })), React.createElement(Tab, {\n      eventKey: \"patientEditAllergies\",\n      title: \"Allergies\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1800\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1802\n      },\n      __self: this\n    }, \"Select a Patient from the Master List below\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"allergies\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1807\n      },\n      __self: this\n    }, \"Add Allergies\"), this.state.patientUpdateField === 'allergies' && this.state.selectedPatient !== null && React.createElement(UpdatePatientAllergiesForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientAllergiesHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1812\n      },\n      __self: this\n    })), React.createElement(Tab, {\n      eventKey: \"patientEditMedication\",\n      title: \"Medication\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1823\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1825\n      },\n      __self: this\n    }, \"Select a Patient from the Master List below\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"medication\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1830\n      },\n      __self: this\n    }, \"Add Medication\"), this.state.patientUpdateField === 'medication' && this.state.selectedPatient !== null && React.createElement(UpdatePatientMedicationForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientMedicationHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1835\n      },\n      __self: this\n    })), React.createElement(Tab, {\n      eventKey: \"patientEditInvestigation\",\n      title: \"Investigation\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1846\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1848\n      },\n      __self: this\n    }, \"Select a Patient from the Master List below\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"investigation\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1853\n      },\n      __self: this\n    }, \"Add Investigation\"), this.state.patientUpdateField === 'investigation' && this.state.selectedPatient !== null && React.createElement(UpdatePatientInvestigationForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientInvestigationHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1858\n      },\n      __self: this\n    })), React.createElement(Tab, {\n      eventKey: \"patientEditDiagnosis\",\n      title: \"Diagnosis\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1869\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1871\n      },\n      __self: this\n    }, \"Select a Patient from the Master List below\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"diagnosis\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1876\n      },\n      __self: this\n    }, \"Add Diagnosis\"), this.state.patientUpdateField === 'diagnosis' && this.state.selectedPatient !== null && React.createElement(UpdatePatientDiagnosisForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientDiagnosisHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1881\n      },\n      __self: this\n    })), React.createElement(Tab, {\n      eventKey: \"patientEditTreatment\",\n      title: \"Treatment\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1892\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1894\n      },\n      __self: this\n    }, \"Select a Patient from the Master List below\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"treatment\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1899\n      },\n      __self: this\n    }, \"Add Treatment\"), this.state.patientUpdateField === 'treatment' && this.state.selectedPatient !== null && React.createElement(UpdatePatientTreatmentForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientTreatmentHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1904\n      },\n      __self: this\n    })), React.createElement(Tab, {\n      eventKey: \"patientEditBilling\",\n      title: \"Billing\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1915\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1917\n      },\n      __self: this\n    }, \"Select a Patient from the Master List below\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"billing\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1922\n      },\n      __self: this\n    }, \"Add Billing\"), this.state.patientUpdateField === 'billing' && this.state.selectedPatient !== null && React.createElement(UpdatePatientBillingForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientBillingHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1927\n      },\n      __self: this\n    })))), React.createElement(Container, {\n      className: \"containerUserMasterList\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1940\n      },\n      __self: this\n    }, React.createElement(Row, {\n      className: \"searchListRow\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1941\n      },\n      __self: this\n    }, this.state.isLoading ? React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1943\n      },\n      __self: this\n    }) : React.createElement(PatientList, {\n      patients: this.state.patients,\n      authUserId: this.context.userId,\n      onViewDetail: this.showDetailHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1945\n      },\n      __self: this\n    })))), React.createElement(Col, {\n      md: 3,\n      className: \"MasterCol3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1956\n      },\n      __self: this\n    }, React.createElement(Container, {\n      className: \"containerSearchUserInput\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1958\n      },\n      __self: this\n    }, React.createElement(Row, {\n      className: \"searchUserRowAdd\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1959\n      },\n      __self: this\n    }, this.context.token && React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"primary\",\n      eventKey: \"10\",\n      onClick: this.startSearchPatientHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1961\n      },\n      __self: this\n    }, \"Search\")), React.createElement(Accordion.Collapse, {\n      eventKey: \"10\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1966\n      },\n      __self: this\n    }, React.createElement(Row, {\n      className: \"searchUserRowForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1967\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 10,\n      className: \"searchUserColForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1968\n      },\n      __self: this\n    }, this.state.searching === true && React.createElement(SearchPatientForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmSearchHandler,\n      confirmText: \"Search\",\n      patient: this.context.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1971\n      },\n      __self: this\n    }))))), React.createElement(Container, {\n      className: \"containerSearchUserResults\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1986\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1987\n      },\n      __self: this\n    }, React.createElement(Card, {\n      className: \"searchCard\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1988\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      className: \"searchCardBody\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1989\n      },\n      __self: this\n    }, React.createElement(Card.Title, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1990\n      },\n      __self: this\n    }, \"Your Search\"), React.createElement(Card.Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1991\n      },\n      __self: this\n    }, \"Field: \", this.state.patientSearchField), React.createElement(Card.Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1994\n      },\n      __self: this\n    }, \"Query: \", this.state.patientSearchQuery)))), React.createElement(Row, {\n      className: \"searchListRow\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2000\n      },\n      __self: this\n    }, this.state.searchPatients !== [] && React.createElement(SearchPatientList, {\n      searchPatients: this.state.searchPatients,\n      authUserId: this.context.userId,\n      onCancel: this.modalCancelHandler,\n      onViewDetail: this.showDetailHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2003\n      },\n      __self: this\n    })))))));\n  }\n\n}\n\nPatientsPage.contextType = AuthContext;\nexport default PatientsPage;","map":{"version":3,"sources":["/Users/pedrojacob/Downloads/AMR/websites/office_records/ENT_EMR/frontend/src/pages/Patients.js"],"names":["React","Component","Container","Row","Col","Button","Accordion","SidebarPage","Tabs","Tab","Card","PatientList","PatientDetail","Spinner","AuthContext","SearchPatientList","SearchPatientForm","CreatePatientForm","UpdatePatientForm","UpdatePatientConsultantForm","UpdatePatientInsuranceForm","UpdatePatientNextOfKinForm","UpdatePatientComplaintForm","UpdatePatientSurveyForm","UpdatePatientExaminationForm","UpdatePatientHistoryForm","UpdatePatientAllergiesForm","UpdatePatientMedicationForm","UpdatePatientInvestigationForm","UpdatePatientDiagnosisForm","UpdatePatientTreatmentForm","UpdatePatientBillingForm","g","PatientsPage","constructor","props","state","creating","updating","searching","updatingArray","deleting","patients","searchPatients","isLoading","selectedPatient","patientUpdateField","patientSearchField","patientSearchQuery","isActive","startCreatePatientHandler","setState","console","log","startUpdatePatientHandler","startSearchPatientHandler","modalConfirmHandler","event","target","formGridName","value","userId","context","title","formGridTitle","name","dob","formGridDob","age","formGridAge","gender","formGridgender","addressNumber","formGridAddressNumber","addressStreet","formGridAddressStreet","addressTown","formGridAddressTown","addressParish","formGridAddressParish","addressPostOffice","formGridAddressPostOffice","contactPhone","formGridContactPhone","contactEmail","formGridContactEmail","registrationDate","formGridRegistrationDate","referralDate","formGridReferralDate","expirationDate","formGridExpirationDate","attendingPhysicianName","formGridAttendingPhysicianName","attendingPhysicianEmail","formGridAttendingPhysicianEmail","attendingPhysicianPhone","formGridAttendingPhysicianPhone","referringDoctorName","formGridReferringDoctorName","referringDoctorEmail","formGridReferringDoctorEmail","referringDoctorPhone","formGridReferringDoctorPhone","trim","length","patient","requestBody","query","token","fetch","method","body","JSON","stringify","headers","Authorization","then","res","status","Error","json","resData","data","createPatient","newPatient","prevState","updatedPatients","push","catch","err","modalCancelHandler","modalConfirmUpdateHandler","user","role","patientId","_id","address","formGridAddress","occupationRole","formGridOccupationRole","occupationEmployer","formGridOccupationEmployer","occupationEmployerContactPhone","formGridOccupationEmployerContactPhone","occupationEmployerContactEmail","formGridOccupationEmployerContactEmail","selectedUser","updatedPatientId","updatePatient","updatedPatient","find","e","updatedPatientPos","indexOf","slicedArray","splice","contact","phone","email","referringDoctor","occupation","employer","fetchPatients","updatePatientConsultantHandler","selectedPatientId","patientConsultantReference","formGridConsultantDate","consultantDate","patientConsultant","updatePatientInsurance","updatePatientInsuranceHandler","formGridInsuranceCompany","insuranceCompany","insuranceNumber","formGridInsuranceNumber","insuranceExpiry","formGridInsuranceExpiry","insuranceDescription","formGridInsuranceDescription","insuranceSubscriberCompany","formGridInsuranceSubscriberCompany","insuranceSubscriberDescription","formGridInsuranceSubscriberDescription","patientInsurance","updatePatientNextOfKinHandler","formGridNextOfKinName","nextOfKinName","nextOfKinPhone","formGridNextOfKinPhone","nextOfKinEmail","formGridNextOfKinEmail","patientNextOfKin","updatePatientNextOfKin","updatePatientComplaintHandler","formGridComplaintTitle","complaintTitle","complaintDate","formGridComplaintDate","complaintDescription","formGridComplaintDescription","complaintAttachmentName","formGridComplaintAttachmentName","complaintAttachmentFormat","formGridComplaintAttachmentFormat","complaintAttachmentPath","formGridComplaintAttachmentPath","patientComplaint","updatePatientComplaint","updatePatientExaminationHandler","formGridExaminationArea","examinationDate","formGridExaminationDate","examinationArea","examinationType","formGridExaminationType","examinationMeasure","formGridExaminationMeasure","examinationValue","formGridExaminationValue","examinationDescription","formGridExaminationDescription","examinationAttachmentName","formGridExaminationAttachmentName","examinationAttachmentFormat","formGridExaminationAttachmentFormat","examinationAttachmentPath","formGridExaminationAttachmentPath","patientExamination","updatePatientExamination","updatePatientHistoryHandler","formGridHistoryTitle","historyType","formGridHistoryType","historyDate","formGridHistoryDate","historyTitle","historyDescription","formGridHistoryDescription","historyAttachmentName","formGridHistoryAttachmentName","historyAttachmentFormat","formGridHistoryAttachmentFormat","historyAttachmentPath","formGridHistoryAttachmentPath","patientHistory","updatePatientHistory","updatePatientAllergiesHandler","formGridAllergiesTitle","allergiesTitle","allergiesDescription","formGridAllergiesDescription","allergiesAttachmentName","formGridAllergiesAttachmentName","allergiesAttachmentFormat","formGridAllergiesAttachmentFormat","allergiesAttachmentPath","formGridAllergiesAttachmentPath","patientAllergies","updatePatientAllergies","updatePatientMedicationHandler","formGridMedicationTitle","medicationTitle","medicationDescription","formGridMedicationDescription","medicationAttachmentName","formGridMedicationAttachmentName","medicationAttachmentFormat","formGridMedicationAttachmentFormat","medicationAttachmentPath","formGridMedicationAttachmentPath","patientMedication","updatePatientMedication","updatePatientInvestigationHandler","formGridInvestigationTitle","investigationDate","formGridInvestigationDate","investigationTitle","investigationDescription","formGridInvestigationDescription","investigationAttachmentName","formGridInvestigationAttachmentName","investigationAttachmentFormat","formGridInvestigationAttachmentFormat","investigationAttachmentPath","formGridInvestigationAttachmentPath","patientInvestigation","updatePatientInvestigation","updatePatientDiagnosisHandler","formGridDiagnosisTitle","diagnosisDate","formGridDiagnosisDate","diagnosisTitle","diagnosisDescription","formGridDiagnosisDescription","diagnosisAttachmentName","formGridDiagnosisAttachmentName","diagnosisAttachmentFormat","formGridDiagnosisAttachmentFormat","diagnosisAttachmentPath","formGridDiagnosisAttachmentPath","patientDiagnosis","updatePatientDiagnosis","updatePatientTreatmentHandler","formGridTreatmentTitle","treatmentDate","formGridTreatmentDate","treatmentTitle","treatmentDescription","formGridTreatmentDescription","treatmentDose","formGridTreatmentDose","treatmentFrequency","formGridTreatmentFrequency","treatmentType","formGridTreatmentType","treatmentAttachmentName","formGridTreatmentAttachmentName","treatmentAttachmentFormat","formGridTreatmentAttachmentFormat","treatmentAttachmentPath","formGridTreatmentAttachmentPath","patientTreatment","updatePatientTreatment","updatePatientBillingHandler","formGridBillingTitle","billingDate","formGridBillingDate","billingTitle","billingType","formGridBillingType","billingDescription","formGridBillingDescription","billingAmount","formGridBillingAmount","billingPaid","formGridBillingPaid","billingNotes","formGridBillingNotes","billingAttachmentName","formGridBillingAttachmentName","billingAttachmentFormat","formGridBillingAttachmentFormat","billingAttachmentPath","formGridBillingAttachmentPath","patientBilling","updatePatientBilling","modalConfirmSearchHandler","formBasicField","field","formBasicQuery","search","getPatientField","modalDeleteHandler","deletedPatient","deletePatient","deletedPatientId","deletedPatientPos","showDetailHandler","nameElRef","createRef","componentDidMount","updatePatientSpecial","componentWillUnmount","render","bind","updatePatientSurveyHandler","contextType"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CACA;;AACA,OAAOC,SAAP,MAAsB,2BAAtB;AACA,OAAOC,GAAP,MAAgB,qBAAhB;AACA,OAAOC,GAAP,MAAgB,qBAAhB;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,OAAOC,SAAP,MAAsB,2BAAtB;AACA,OAAOC,WAAP,MAAwB,WAAxB;AACA,OAAOC,IAAP,MAAiB,sBAAjB;AACA,OAAOC,GAAP,MAAgB,qBAAhB;AACA,OAAOC,IAAP,MAAiB,sBAAjB;AAEA,OAAOC,WAAP,MAAwB,gDAAxB;AACA,OAAOC,aAAP,MAA0B,sCAA1B;AACA,OAAOC,OAAP,MAAoB,+BAApB;AACA,OAAOC,WAAP,MAAwB,yBAAxB;AACA,OAAOC,iBAAP,MAA8B,sDAA9B;AACA,OAAOC,iBAAP,MAA8B,uCAA9B;AAEA,OAAOC,iBAAP,MAA8B,uCAA9B;AACA,OAAOC,iBAAP,MAA8B,uCAA9B;AACA,OAAOC,2BAAP,MAAwC,iDAAxC;AACA,OAAOC,0BAAP,MAAuC,gDAAvC;AACA,OAAOC,0BAAP,MAAuC,gDAAvC;AACA,OAAOC,0BAAP,MAAuC,6CAAvC;AACA,OAAOC,uBAAP,MAAoC,gDAApC;AACA,OAAOC,4BAAP,MAAyC,kDAAzC;AACA,OAAOC,wBAAP,MAAqC,8CAArC;AACA,OAAOC,0BAAP,MAAuC,gDAAvC;AACA,OAAOC,2BAAP,MAAwC,iDAAxC;AACA,OAAOC,8BAAP,MAA2C,oDAA3C;AACA,OAAOC,0BAAP,MAAuC,gDAAvC;AACA,OAAOC,0BAAP,MAAuC,gDAAvC;AACA,OAAOC,wBAAP,MAAqC,8CAArC;AAAoFC,CAAC;AACrF,OAAO,aAAP;;AAEA,MAAMC,YAAN,SAA2BhC,SAA3B,CAAqC;AAmBnCiC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AADiB,SAlBnBC,KAkBmB,GAlBX;AACNC,MAAAA,QAAQ,EAAE,KADJ;AAENC,MAAAA,QAAQ,EAAE,KAFJ;AAGNC,MAAAA,SAAS,EAAE,KAHL;AAINC,MAAAA,aAAa,EAAE,KAJT;AAKNC,MAAAA,QAAQ,EAAE,KALJ;AAMNC,MAAAA,QAAQ,EAAE,EANJ;AAONC,MAAAA,cAAc,EAAE,EAPV;AAQNC,MAAAA,SAAS,EAAE,KARL;AASNC,MAAAA,eAAe,EAAE,IATX;AAUNC,MAAAA,kBAAkB,EAAE,IAVd;AAWNC,MAAAA,kBAAkB,EAAE,IAXd;AAYNC,MAAAA,kBAAkB,EAAE;AAZd,KAkBW;AAAA,SAJnBC,QAImB,GAJR,IAIQ;;AAAA,SAUnBC,yBAVmB,GAUS,MAAM;AAChC,WAAKC,QAAL,CAAc;AAAEd,QAAAA,QAAQ,EAAE;AAAZ,OAAd;AACAe,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACD,KAbkB;;AAAA,SAcnBC,yBAdmB,GAcS,MAAM;AAChC,WAAKH,QAAL,CAAc;AAAEb,QAAAA,QAAQ,EAAE,IAAZ;AAAkBE,QAAAA,aAAa,EAAE;AAAjC,OAAd;AACAY,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACD,KAjBkB;;AAAA,SAkBnBE,yBAlBmB,GAkBS,MAAM;AAChC,WAAKJ,QAAL,CAAc;AAAEZ,QAAAA,SAAS,EAAE;AAAb,OAAd;AACAa,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACD,KArBkB;;AAAA,SAuBnBG,mBAvBmB,GAuBIC,KAAD,IAAW;AAE/BL,MAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ,EAAwCI,KAAK,CAACC,MAAN,CAAaC,YAAb,CAA0BC,KAAlE;AAEA,WAAKT,QAAL,CAAc;AAAEd,QAAAA,QAAQ,EAAE;AAAZ,OAAd;AACA,YAAMwB,MAAM,GAAG,KAAKC,OAAL,CAAaD,MAA5B;AAEA,UAAIE,KAAK,GAAGN,KAAK,CAACC,MAAN,CAAaM,aAAb,CAA2BJ,KAAvC;AACA,UAAIK,IAAI,GAAGR,KAAK,CAACC,MAAN,CAAaC,YAAb,CAA0BC,KAArC;AACA,UAAIM,GAAG,GAAGT,KAAK,CAACC,MAAN,CAAaS,WAAb,CAAyBP,KAAnC;AACA,UAAIQ,GAAG,GAAGX,KAAK,CAACC,MAAN,CAAaW,WAAb,CAAyBT,KAAnC;AACA,UAAIU,MAAM,GAAGb,KAAK,CAACC,MAAN,CAAaa,cAAb,CAA4BX,KAAzC;AACA,UAAIY,aAAa,GAAGf,KAAK,CAACC,MAAN,CAAae,qBAAb,CAAmCb,KAAvD;AACA,UAAIc,aAAa,GAAGjB,KAAK,CAACC,MAAN,CAAaiB,qBAAb,CAAmCf,KAAvD;AACA,UAAIgB,WAAW,GAAGnB,KAAK,CAACC,MAAN,CAAamB,mBAAb,CAAiCjB,KAAnD;AACA,UAAIkB,aAAa,GAAGrB,KAAK,CAACC,MAAN,CAAaqB,qBAAb,CAAmCnB,KAAvD;AACA,UAAIoB,iBAAiB,GAAGvB,KAAK,CAACC,MAAN,CAAauB,yBAAb,CAAuCrB,KAA/D;AACA,UAAIsB,YAAY,GAAGzB,KAAK,CAACC,MAAN,CAAayB,oBAAb,CAAkCvB,KAArD;AACA,UAAIwB,YAAY,GAAG3B,KAAK,CAACC,MAAN,CAAa2B,oBAAb,CAAkCzB,KAArD;AACA,UAAI0B,gBAAgB,GAAG7B,KAAK,CAACC,MAAN,CAAa6B,wBAAb,CAAsC3B,KAA7D;AACA,UAAI4B,YAAY,GAAG/B,KAAK,CAACC,MAAN,CAAa+B,oBAAb,CAAkC7B,KAArD;AACA,UAAI8B,cAAc,GAAGjC,KAAK,CAACC,MAAN,CAAaiC,sBAAb,CAAoC/B,KAAzD;AACA,UAAIgC,sBAAsB,GAAGnC,KAAK,CAACC,MAAN,CAAamC,8BAAb,CAA4CjC,KAAzE;AACA,UAAIkC,uBAAuB,GAAGrC,KAAK,CAACC,MAAN,CAAaqC,+BAAb,CAA6CnC,KAA3E;AACA,UAAIoC,uBAAuB,GAAGvC,KAAK,CAACC,MAAN,CAAauC,+BAAb,CAA6CrC,KAA3E;AACA,UAAIsC,mBAAmB,GAAGzC,KAAK,CAACC,MAAN,CAAayC,2BAAb,CAAyCvC,KAAnE;AACA,UAAIwC,oBAAoB,GAAG3C,KAAK,CAACC,MAAN,CAAa2C,4BAAb,CAA0CzC,KAArE;AACA,UAAI0C,oBAAoB,GAAG7C,KAAK,CAACC,MAAN,CAAa6C,4BAAb,CAA0C3C,KAArE;;AAGA,UACEK,IAAI,CAACuC,IAAL,GAAYC,MAAZ,KAAuB,CAAvB,IACA1C,KAAK,CAACyC,IAAN,GAAaC,MAAb,KAAwB,CADxB,IAEAxC,IAAI,CAACuC,IAAL,GAAYC,MAAZ,KAAuB,CAFvB,IAGAvC,GAAG,CAACsC,IAAJ,GAAWC,MAAX,KAAsB,CAHtB,IAIArC,GAAG,CAACoC,IAAJ,GAAWC,MAAX,KAAsB,CAJtB,IAKAnC,MAAM,CAACkC,IAAP,GAAcC,MAAd,KAAyB,CALzB,IAMAjC,aAAa,CAACgC,IAAd,GAAqBC,MAArB,KAAgC,CANhC,IAOA/B,aAAa,CAAC8B,IAAd,GAAqBC,MAArB,KAAgC,CAPhC,IAQA7B,WAAW,CAAC4B,IAAZ,GAAmBC,MAAnB,KAA8B,CAR9B,IASA3B,aAAa,CAAC0B,IAAd,GAAqBC,MAArB,KAAgC,CAThC,IAUAzB,iBAAiB,CAACwB,IAAlB,GAAyBC,MAAzB,KAAoC,CAVpC,IAWAvB,YAAY,CAACsB,IAAb,GAAoBC,MAApB,KAA+B,CAX/B,IAYArB,YAAY,CAACoB,IAAb,GAAoBC,MAApB,KAA+B,CAZ/B,IAaAnB,gBAAgB,CAACkB,IAAjB,GAAwBC,MAAxB,KAAmC,CAbnC,IAcAjB,YAAY,CAACgB,IAAb,GAAoBC,MAApB,KAA+B,CAd/B,IAeAf,cAAc,CAACc,IAAf,GAAsBC,MAAtB,KAAiC,CAfjC,IAgBAb,sBAAsB,CAACY,IAAvB,GAA8BC,MAA9B,KAAyC,CAhBzC,IAiBAX,uBAAuB,CAACU,IAAxB,GAA+BC,MAA/B,KAA0C,CAjB1C,IAkBAT,uBAAuB,CAACQ,IAAxB,GAA+BC,MAA/B,KAA0C,CAlB1C,IAmBAP,mBAAmB,CAACM,IAApB,GAA2BC,MAA3B,KAAsC,CAnBtC,IAoBAL,oBAAoB,CAACI,IAArB,GAA4BC,MAA5B,KAAuC,CApBvC,IAqBAH,oBAAoB,CAACE,IAArB,GAA4BC,MAA5B,KAAuC,CAtBzC,EAwBE;AACArD,QAAAA,OAAO,CAACC,GAAR,CAAY,gDAAZ;AACA;AACD;;AAED,YAAMqD,OAAO,GAAG;AAAE3C,QAAAA,KAAF;AAASE,QAAAA,IAAT;AAAeC,QAAAA,GAAf;AAAoBE,QAAAA,GAApB;AAAyBE,QAAAA,MAAzB;AAAiCE,QAAAA,aAAjC;AAAgDE,QAAAA,aAAhD;AAA+DE,QAAAA,WAA/D;AAA4EE,QAAAA,aAA5E;AAA2FE,QAAAA,iBAA3F;AAA8GE,QAAAA,YAA9G;AAA4HE,QAAAA,YAA5H;AAA0IE,QAAAA,gBAA1I;AAA4JE,QAAAA,YAA5J;AAA0KE,QAAAA,cAA1K;AAA0LE,QAAAA,sBAA1L;AAAkNE,QAAAA,uBAAlN;AAA2OE,QAAAA,uBAA3O;AAAoQE,QAAAA,mBAApQ;AAAyRE,QAAAA,oBAAzR;AAA+SE,QAAAA;AAA/S,OAAhB;AACAlD,MAAAA,OAAO,CAACC,GAAR,qDAEWU,KAFX,4BAGUE,IAHV,2BAISC,GAJT,2BAKSE,GALT,8BAMYE,MANZ,qCAOmBE,aAPnB,qCAQmBE,aARnB,mCASiBE,WATjB,qCAUmBE,aAVnB,yCAWuBE,iBAXvB,oCAYkBE,YAZlB,oCAakBE,YAblB,wCAcsBE,gBAdtB,oCAekBE,YAflB,sCAgBoBE,cAhBpB,8CAiB4BE,sBAjB5B,+CAkB6BE,uBAlB7B,+CAmB6BE,uBAnB7B,2CAoByBE,mBApBzB,4CAqB0BE,oBArB1B,4CAsB0BE,oBAtB1B;AAyBA,YAAMK,WAAW,GAAG;AAClBC,QAAAA,KAAK;AADa,OAApB;AAMA,YAAMC,KAAK,GAAG,KAAK/C,OAAL,CAAa+C,KAA3B;AAEAC,MAAAA,KAAK,CAAC,gCAAD,EAAmC;AACtCC,QAAAA,MAAM,EAAE,MAD8B;AAEtCC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeP,WAAf,CAFgC;AAGtCQ,QAAAA,OAAO,EAAE;AACP,0BAAgB,kBADT;AAEPC,UAAAA,aAAa,EAAE,YAAYP;AAFpB;AAH6B,OAAnC,CAAL,CAQGQ,IARH,CAQQC,GAAG,IAAI;AACX,YAAIA,GAAG,CAACC,MAAJ,KAAe,GAAf,IAAsBD,GAAG,CAACC,MAAJ,KAAe,GAAzC,EAA8C;AAC5C,gBAAM,IAAIC,KAAJ,CAAU,SAAV,CAAN;AACD;;AACD,eAAOF,GAAG,CAACG,IAAJ,EAAP;AACD,OAbH,EAcGJ,IAdH,CAcQK,OAAO,IAAI;AACftE,QAAAA,OAAO,CAACC,GAAR,iDAEI4D,IAAI,CAACC,SAAL,CAAeQ,OAAO,CAACC,IAAR,CAAaC,aAA5B,CAFJ;AAIA,cAAMC,UAAU,GAAGH,OAAO,CAACC,IAAR,CAAaC,aAAhC;AACA,aAAKzE,QAAL,CAAc2E,SAAS,IAAI;AACzB,gBAAMC,eAAe,GAAG,CAAC,GAAGD,SAAS,CAACpF,QAAd,CAAxB;AACAqF,UAAAA,eAAe,CAACC,IAAhB,CAAqBH,UAArB;AAEA,iBAAO;AAAEnF,YAAAA,QAAQ,EAAEqF;AAAZ,WAAP;AACD,SALD;AAOD,OA3BH,EA4BGE,KA5BH,CA4BSC,GAAG,IAAI;AACZ9E,QAAAA,OAAO,CAACC,GAAR,CAAY6E,GAAZ;AACD,OA9BH;AA+BD,KAnJkB;;AAAA,SAqJnBC,kBArJmB,GAqJE,MAAM;AACzB,WAAKhF,QAAL,CAAc;AAAEd,QAAAA,QAAQ,EAAE,KAAZ;AAAmBC,QAAAA,QAAQ,EAAE,KAA7B;AAAoCO,QAAAA,eAAe,EAAE;AAArD,OAAd;AACD,KAvJkB;;AAAA,SA0JnBuF,yBA1JmB,GA0JU3E,KAAD,IAAW;AAErC,UAAG,KAAKK,OAAL,CAAauE,IAAb,CAAkBC,IAAlB,KAA2B,OAA9B,EAAuC;AACrClF,QAAAA,OAAO,CAACC,GAAR,CAAY,qCAAZ;AAED;;AAED,YAAMQ,MAAM,GAAG,KAAKC,OAAL,CAAaD,MAA5B;AACA,YAAM0E,SAAS,GAAG,KAAKzE,OAAL,CAAajB,eAAb,CAA6B2F,GAA/C;AAEApF,MAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ,EAAwCI,KAAK,CAACC,MAAN,CAAaC,YAAb,CAA0BC,KAAlE;AAGA,WAAKT,QAAL,CAAc;AAAEb,QAAAA,QAAQ,EAAE;AAAZ,OAAd;AACA,UAAI2B,IAAI,GAAGR,KAAK,CAACC,MAAN,CAAaC,YAAb,CAA0BC,KAArC;AACA,UAAIM,GAAG,GAAGT,KAAK,CAACC,MAAN,CAAaS,WAAb,CAAyBP,KAAnC;AACA,UAAIQ,GAAG,GAAGX,KAAK,CAACC,MAAN,CAAaW,WAAb,CAAyBT,KAAnC;AACA,UAAI6E,OAAO,GAAGhF,KAAK,CAACC,MAAN,CAAagF,eAAb,CAA6B9E,KAA3C;AACA,UAAIsB,YAAY,GAAGzB,KAAK,CAACC,MAAN,CAAayB,oBAAb,CAAkCvB,KAArD;AACA,UAAIwB,YAAY,GAAG3B,KAAK,CAACC,MAAN,CAAa2B,oBAAb,CAAkCzB,KAArD;AACA,UAAI0B,gBAAgB,GAAG7B,KAAK,CAACC,MAAN,CAAa6B,wBAAb,CAAsC3B,KAA7D;AACA,UAAIsC,mBAAmB,GAAGzC,KAAK,CAACC,MAAN,CAAayC,2BAAb,CAAyCvC,KAAnE;AACA,UAAIwC,oBAAoB,GAAG3C,KAAK,CAACC,MAAN,CAAa2C,4BAAb,CAA0CzC,KAArE;AACA,UAAI0C,oBAAoB,GAAG7C,KAAK,CAACC,MAAN,CAAa6C,4BAAb,CAA0C3C,KAArE;AACA,UAAI+E,cAAc,GAAGlF,KAAK,CAACC,MAAN,CAAakF,sBAAb,CAAoChF,KAAzD;AACA,UAAIiF,kBAAkB,GAAGpF,KAAK,CAACC,MAAN,CAAaoF,0BAAb,CAAwClF,KAAjE;AACA,UAAImF,8BAA8B,GAAGtF,KAAK,CAACC,MAAN,CAAasF,sCAAb,CAAoDpF,KAAzF;AACA,UAAIqF,8BAA8B,GAAGxF,KAAK,CAACC,MAAN,CAAawF,sCAAb,CAAoDtF,KAAzF;;AAGA,UAAIK,IAAI,CAACuC,IAAL,GAAYC,MAAZ,KAAuB,CAA3B,EAA+B;AAC7BrD,QAAAA,OAAO,CAACC,GAAR,CAAY,wDAAZ;AACAY,QAAAA,IAAI,GAAI,KAAKH,OAAL,CAAaqF,YAAb,CAA0BlF,IAAlC,CAF6B,CAG7B;AACD;;AACD,UAAIC,GAAG,CAACsC,IAAJ,GAAWC,MAAX,KAAsB,CAA1B,EAA8B;AAC5BrD,QAAAA,OAAO,CAACC,GAAR,CAAY,wDAAZ;AACAa,QAAAA,GAAG,GAAI,KAAKJ,OAAL,CAAaqF,YAAb,CAA0BjF,GAAjC;AACD;;AACD,UAAIE,GAAG,CAACoC,IAAJ,GAAWC,MAAX,KAAsB,CAA1B,EAA8B;AAC5BrD,QAAAA,OAAO,CAACC,GAAR,CAAY,wDAAZ;AACAe,QAAAA,GAAG,GAAI,KAAKN,OAAL,CAAaqF,YAAb,CAA0B/E,GAAjC;AACD;;AACD,UAAIqE,OAAO,CAACjC,IAAR,GAAeC,MAAf,KAA0B,CAA9B,EAAkC;AAChCrD,QAAAA,OAAO,CAACC,GAAR,CAAY,wDAAZ;AACAoF,QAAAA,OAAO,GAAI,KAAK3E,OAAL,CAAaqF,YAAb,CAA0BV,OAArC;AACD;;AACD,UAAIvD,YAAY,CAACsB,IAAb,GAAoBC,MAApB,KAA+B,CAAnC,EAAuC;AACrCrD,QAAAA,OAAO,CAACC,GAAR,CAAY,wDAAZ;AACA6B,QAAAA,YAAY,GAAI,KAAKpB,OAAL,CAAaqF,YAAb,CAA0BjE,YAA1C;AACD;;AACD,UAAIE,YAAY,CAACoB,IAAb,GAAoBC,MAApB,KAA+B,CAAnC,EAAuC;AACrCrD,QAAAA,OAAO,CAACC,GAAR,CAAY,wDAAZ;AACA+B,QAAAA,YAAY,GAAI,KAAKtB,OAAL,CAAaqF,YAAb,CAA0B/D,YAA1C;AACD;;AACD,UAAIE,gBAAgB,CAACkB,IAAjB,GAAwBC,MAAxB,KAAmC,CAAvC,EAA2C;AACzCrD,QAAAA,OAAO,CAACC,GAAR,CAAY,wDAAZ;AACAiC,QAAAA,gBAAgB,GAAI,KAAKxB,OAAL,CAAaqF,YAAb,CAA0B7D,gBAA9C;AACD;;AACD,UAAIY,mBAAmB,CAACM,IAApB,GAA2BC,MAA3B,KAAsC,CAA1C,EAA8C;AAC5CrD,QAAAA,OAAO,CAACC,GAAR,CAAY,wDAAZ;AACA6C,QAAAA,mBAAmB,GAAI,KAAKpC,OAAL,CAAaqF,YAAb,CAA0BjD,mBAAjD;AACD;;AACD,UAAIE,oBAAoB,CAACI,IAArB,GAA4BC,MAA5B,KAAuC,CAA3C,EAA+C;AAC7CrD,QAAAA,OAAO,CAACC,GAAR,CAAY,wDAAZ;AACA+C,QAAAA,oBAAoB,GAAI,KAAKtC,OAAL,CAAaqF,YAAb,CAA0B/C,oBAAlD;AACD;;AACD,UAAIE,oBAAoB,CAACE,IAArB,GAA4BC,MAA5B,KAAuC,CAA3C,EAA+C;AAC7CrD,QAAAA,OAAO,CAACC,GAAR,CAAY,wDAAZ;AACAiD,QAAAA,oBAAoB,GAAI,KAAKxC,OAAL,CAAaqF,YAAb,CAA0B7C,oBAAlD;AACD;;AACD,UAAIqC,cAAc,CAACnC,IAAf,GAAsBC,MAAtB,KAAiC,CAArC,EAAyC;AACvCrD,QAAAA,OAAO,CAACC,GAAR,CAAY,wDAAZ;AACAsF,QAAAA,cAAc,GAAI,KAAK7E,OAAL,CAAaqF,YAAb,CAA0BR,cAA5C;AACD;;AACD,UAAIE,kBAAkB,CAACrC,IAAnB,GAA0BC,MAA1B,KAAqC,CAAzC,EAA6C;AAC3CrD,QAAAA,OAAO,CAACC,GAAR,CAAY,wDAAZ;AACAwF,QAAAA,kBAAkB,GAAI,KAAK/E,OAAL,CAAaqF,YAAb,CAA0BN,kBAAhD;AACD;;AACD,UAAII,8BAA8B,CAACzC,IAA/B,GAAsCC,MAAtC,KAAiD,CAArD,EAAyD;AACvDrD,QAAAA,OAAO,CAACC,GAAR,CAAY,wDAAZ;AACA4F,QAAAA,8BAA8B,GAAI,KAAKnF,OAAL,CAAaqF,YAAb,CAA0BF,8BAA5D;AACD;;AACD,UAAIF,8BAA8B,CAACvC,IAA/B,GAAsCC,MAAtC,KAAiD,CAArD,EAAyD;AACvDrD,QAAAA,OAAO,CAACC,GAAR,CAAY,wDAAZ;AACA0F,QAAAA,8BAA8B,GAAI,KAAKjF,OAAL,CAAaqF,YAAb,CAA0BJ,8BAA5D;AACD;;AAGD,YAAMrC,OAAO,GAAG;AAAEzC,QAAAA,IAAF;AAAQC,QAAAA,GAAR;AAAaE,QAAAA,GAAb;AAAkBqE,QAAAA,OAAlB;AAA2BvD,QAAAA,YAA3B;AAAyCE,QAAAA,YAAzC;AAAuDE,QAAAA,gBAAvD;AAAyEY,QAAAA,mBAAzE;AAA8FE,QAAAA,oBAA9F;AAAoHE,QAAAA,oBAApH;AAA0IqC,QAAAA,cAA1I;AAA0JE,QAAAA,kBAA1J;AAA8KE,QAAAA,8BAA9K;AAA8ME,QAAAA;AAA9M,OAAhB;AACA7F,MAAAA,OAAO,CAACC,GAAR,sDAEYQ,MAFZ,iCAGe0E,SAHf,4BAIUtE,IAJV,2BAKSC,GALT,2BAMSE,GANT,+BAOaqE,OAPb,oCAQkBvD,YARlB,oCASkBE,YATlB,wCAUsBE,gBAVtB,2CAWyBY,mBAXzB,4CAY0BE,oBAZ1B,4CAa0BE,oBAb1B,sCAcoBqC,cAdpB,0CAewBE,kBAfxB,sDAgBoCE,8BAhBpC,sDAiBoCE,8BAjBpC;AAoBA,YAAMtC,WAAW,GAAG;AAClBC,QAAAA,KAAK,uEAE0B/C,MAF1B,8BAEmD0E,SAFnD,yCAEyFtE,IAFzF,wBAEyGC,GAFzG,qBAEsHE,GAFtH,0BAEwIqE,OAFxI,iCAEoKvD,YAFpK,iCAEqME,YAFrM,qCAE0OE,gBAF1O,wCAEsRY,mBAFtR,yCAEsUE,oBAFtU,yCAEuXE,oBAFvX,mCAEkaqC,cAFla,uCAE2cE,kBAF3c,mDAEogBE,8BAFpgB,mDAEykBE,8BAFzkB;AADa,OAApB;AASA,YAAMpC,KAAK,GAAG,KAAK/C,OAAL,CAAa+C,KAA3B;AAEAC,MAAAA,KAAK,CAAC,gCAAD,EAAmC;AACtCC,QAAAA,MAAM,EAAE,MAD8B;AAEtCC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeP,WAAf,CAFgC;AAGtCQ,QAAAA,OAAO,EAAE;AACP,0BAAgB,kBADT;AAEPC,UAAAA,aAAa,EAAE,YAAYP;AAFpB;AAH6B,OAAnC,CAAL,CAQGQ,IARH,CAQQC,GAAG,IAAI;AACX,YAAIA,GAAG,CAACC,MAAJ,KAAe,GAAf,IAAsBD,GAAG,CAACC,MAAJ,KAAe,GAAzC,EAA8C;AAC5C,gBAAM,IAAIC,KAAJ,CAAU,SAAV,CAAN;AACD;;AACD,eAAOF,GAAG,CAACG,IAAJ,EAAP;AACD,OAbH,EAcGJ,IAdH,CAcQK,OAAO,IAAI;AACftE,QAAAA,OAAO,CAACC,GAAR,CAAY,sBAAsB4D,IAAI,CAACC,SAAL,CAAeQ,OAAf,CAAlC;AAEA,cAAM0B,gBAAgB,GAAG1B,OAAO,CAACC,IAAR,CAAa0B,aAAb,CAA2Bb,GAApD;AACA,cAAMc,cAAc,GAAG,KAAKlH,KAAL,CAAWM,QAAX,CAAoB6G,IAApB,CAAyBC,CAAC,IAAIA,CAAC,CAAChB,GAAF,KAAUY,gBAAxC,CAAvB;AACA,cAAMK,iBAAiB,GAAG,KAAKrH,KAAL,CAAWM,QAAX,CAAoBgH,OAApB,CAA4BJ,cAA5B,CAA1B;AACA,cAAMK,WAAW,GAAG,KAAKvH,KAAL,CAAWM,QAAX,CAAoBkH,MAApB,CAA2BH,iBAA3B,EAA8C,CAA9C,CAApB;AACArG,QAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiC4D,IAAI,CAACC,SAAL,CAAeoC,cAAf,CAAjC,EAAgE,wBAAhE,EAA0FG,iBAA1F,EAA6G,kBAA7G,EAAiIE,WAAjI;AAEA,aAAKvH,KAAL,CAAWM,QAAX,CAAoBsF,IAApB,CACE;AACAQ,UAAAA,GAAG,EAAEd,OAAO,CAACC,IAAR,CAAa0B,aAAb,CAA2Bb,GADhC;AAEAvE,UAAAA,IAAI,EAAEyD,OAAO,CAACC,IAAR,CAAa0B,aAAb,CAA2BpF,IAFjC;AAGAC,UAAAA,GAAG,EAAEwD,OAAO,CAACC,IAAR,CAAa0B,aAAb,CAA2BnF,GAHhC;AAIAE,UAAAA,GAAG,EAAEsD,OAAO,CAACC,IAAR,CAAa0B,aAAb,CAA2BjF,GAJhC;AAKAqE,UAAAA,OAAO,EAAEf,OAAO,CAACC,IAAR,CAAa0B,aAAb,CAA2BZ,OALpC;AAMAoB,UAAAA,OAAO,EAAC;AACNC,YAAAA,KAAK,EAAEpC,OAAO,CAACC,IAAR,CAAa0B,aAAb,CAA2BnE,YAD5B;AAEN6E,YAAAA,KAAK,EAAErC,OAAO,CAACC,IAAR,CAAa0B,aAAb,CAA2BjE;AAF5B,WANR;AAUAE,UAAAA,gBAAgB,EAAEoC,OAAO,CAACC,IAAR,CAAa0B,aAAb,CAA2B/D,gBAV7C;AAWA0E,UAAAA,eAAe,EAAE;AACf/F,YAAAA,IAAI,EAAEyD,OAAO,CAACC,IAAR,CAAa0B,aAAb,CAA2BnD,mBADlB;AAEf6D,YAAAA,KAAK,EAAErC,OAAO,CAACC,IAAR,CAAa0B,aAAb,CAA2BjD,oBAFnB;AAGf0D,YAAAA,KAAK,EAAEpC,OAAO,CAACC,IAAR,CAAa0B,aAAb,CAA2B/C;AAHnB,WAXjB;AAgBA2D,UAAAA,UAAU,EAAE;AACV3B,YAAAA,IAAI,EAAEZ,OAAO,CAACC,IAAR,CAAa0B,aAAb,CAA2BV,cADvB;AAEVuB,YAAAA,QAAQ,EAAExC,OAAO,CAACC,IAAR,CAAa0B,aAAb,CAA2BR,kBAF3B;AAGVgB,YAAAA,OAAO,EAAE;AACPC,cAAAA,KAAK,EAAEpC,OAAO,CAACC,IAAR,CAAa0B,aAAb,CAA2BN,8BAD3B;AAEPgB,cAAAA,KAAK,EAAErC,OAAO,CAACC,IAAR,CAAa0B,aAAb,CAA2BJ;AAF3B;AAHC;AAhBZ,SADF,EATe,CAqCf;AACA;AACA;AACA;;AACA,aAAKkB,aAAL;AAED,OAzDH,EA0DGlC,KA1DH,CA0DSC,GAAG,IAAI;AACZ9E,QAAAA,OAAO,CAACC,GAAR,CAAY6E,GAAZ;AACD,OA5DH;AA6DD,KAhVkB;;AAAA,SAkVrBkC,8BAlVqB,GAkVa3G,KAAD,IAAW;AAE1C,YAAMoD,KAAK,GAAG,KAAK/C,OAAL,CAAa+C,KAA3B;AACA,YAAMhD,MAAM,GAAG,KAAKC,OAAL,CAAaD,MAA5B;AACA,UAAIwG,iBAAiB,GAAG,KAAKvG,OAAL,CAAajB,eAAb,CAA6B2F,GAArD;AACA,YAAM8B,0BAA0B,GAAG,KAAKxG,OAAL,CAAaqF,YAAb,CAA0BX,GAA7D;;AACA,UACE,KAAK1E,OAAL,CAAauE,IAAb,CAAkBC,IAAlB,KAA2B,OAD7B,EAEE;AACAlF,QAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACA;AACD;;AAEDD,MAAAA,OAAO,CAACC,GAAR,CAAY,oCAAZ,EAAkDI,KAAK,CAACC,MAAN,CAAa6G,sBAAb,CAAoC3G,KAAtF;AAEA,WAAKT,QAAL,CAAc;AAAEb,QAAAA,QAAQ,EAAE,KAAZ;AAAoBQ,QAAAA,kBAAkB,EAAE;AAAxC,OAAd;AAEA,UAAI0H,cAAc,GAAG/G,KAAK,CAACC,MAAN,CAAa6G,sBAAb,CAAoC3G,KAAzD;AAEA,YAAM6G,iBAAiB,GAAG;AAAED,QAAAA,cAAF;AAAkBF,QAAAA;AAAlB,OAA1B;AACAlH,MAAAA,OAAO,CAACC,GAAR,gEAEYQ,MAFZ,uCAGuBwG,iBAHvB,oCAIoBG,cAJpB,yCAKyBF,0BALzB;AAQE,YAAM3D,WAAW,GAAG;AAClBC,QAAAA,KAAK,iEAC0C/C,MAD1C,6BACmEwG,iBADnE,gDACyHG,cADzH,uCACkKF,0BADlK;AADa,OAApB;AAQExD,MAAAA,KAAK,CAAC,gCAAD,EAAmC;AACtCC,QAAAA,MAAM,EAAE,MAD8B;AAEtCC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeP,WAAf,CAFgC;AAGtCQ,QAAAA,OAAO,EAAE;AACP,0BAAgB,kBADT;AAEPC,UAAAA,aAAa,EAAE,YAAYP;AAFpB;AAH6B,OAAnC,CAAL,CAQGQ,IARH,CAQQC,GAAG,IAAI;AACX,YAAIA,GAAG,CAACC,MAAJ,KAAe,GAAf,IAAsBD,GAAG,CAACC,MAAJ,KAAe,GAAzC,EAA8C;AAC5C,gBAAM,IAAIC,KAAJ,CAAU,SAAV,CAAN;AACD;;AACD,eAAOF,GAAG,CAACG,IAAJ,EAAP;AACD,OAbH,EAcGJ,IAdH,CAcQK,OAAO,IAAI;AACftE,QAAAA,OAAO,CAACC,GAAR,CAAY,sBAAsB4D,IAAI,CAACC,SAAL,CAAeQ,OAAO,CAACC,IAAvB,CAAlC;AAEA,cAAMyB,gBAAgB,GAAG1B,OAAO,CAACC,IAAR,CAAa+C,sBAAb,CAAoClC,GAA7D;AACA,cAAMc,cAAc,GAAG,KAAKlH,KAAL,CAAWM,QAAX,CAAoB6G,IAApB,CAAyBC,CAAC,IAAIA,CAAC,CAAChB,GAAF,KAAUY,gBAAxC,CAAvB;AACA,cAAMK,iBAAiB,GAAG,KAAKrH,KAAL,CAAWM,QAAX,CAAoBgH,OAApB,CAA4BJ,cAA5B,CAA1B;AACA,cAAMK,WAAW,GAAG,KAAKvH,KAAL,CAAWM,QAAX,CAAoBkH,MAApB,CAA2BH,iBAA3B,EAA8C,CAA9C,CAApB;AACArG,QAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiC4D,IAAI,CAACC,SAAL,CAAeoC,cAAf,CAAjC,EAAgE,wBAAhE,EAA0FG,iBAA1F,EAA6G,kBAA7G,EAAiIE,WAAjI;AAEA,aAAKvH,KAAL,CAAWM,QAAX,CAAoBsF,IAApB,CAAyBsB,cAAzB;AACA,aAAKxF,OAAL,CAAapB,QAAb,GAAwB,KAAKN,KAAL,CAAWM,QAAnC;AACA,aAAKyH,aAAL;AACD,OA1BH,EA2BGlC,KA3BH,CA2BSC,GAAG,IAAI;AACZ9E,QAAAA,OAAO,CAACC,GAAR,CAAY6E,GAAZ;AACD,OA7BH;AA+BL,KArZoB;;AAAA,SAsZrByC,6BAtZqB,GAsZYlH,KAAD,IAAW;AAEzC,YAAMoD,KAAK,GAAG,KAAK/C,OAAL,CAAa+C,KAA3B;AACA,YAAMhD,MAAM,GAAG,KAAKC,OAAL,CAAaD,MAA5B;AACA,UAAIwG,iBAAiB,GAAG,KAAKvG,OAAL,CAAajB,eAAb,CAA6B2F,GAArD;;AACA,UACE,KAAK1E,OAAL,CAAauE,IAAb,CAAkBC,IAAlB,KAA2B,OAD7B,EAEE;AACAlF,QAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACA;AACD;;AAEDD,MAAAA,OAAO,CAACC,GAAR,CAAY,mCAAZ,EAAiDI,KAAK,CAACC,MAAN,CAAakH,wBAAb,CAAsChH,KAAvF;AAEA,WAAKT,QAAL,CAAc;AAAEb,QAAAA,QAAQ,EAAE,KAAZ;AAAoBQ,QAAAA,kBAAkB,EAAE;AAAxC,OAAd;AAEA,UAAI+H,gBAAgB,GAAGpH,KAAK,CAACC,MAAN,CAAakH,wBAAb,CAAsChH,KAA7D;AACA,UAAIkH,eAAe,GAAGrH,KAAK,CAACC,MAAN,CAAaqH,uBAAb,CAAqCnH,KAA3D;AACA,UAAIoH,eAAe,GAAGvH,KAAK,CAACC,MAAN,CAAauH,uBAAb,CAAqCrH,KAA3D;AACA,UAAIsH,oBAAoB,GAAGzH,KAAK,CAACC,MAAN,CAAayH,4BAAb,CAA0CvH,KAArE;AACA,UAAIwH,0BAA0B,GAAG3H,KAAK,CAACC,MAAN,CAAa2H,kCAAb,CAAgDzH,KAAjF;AACA,UAAI0H,8BAA8B,GAAG7H,KAAK,CAACC,MAAN,CAAa6H,sCAAb,CAAoD3H,KAAzF;AAEA,YAAM4H,gBAAgB,GAAG;AAAEX,QAAAA,gBAAF;AAAoBC,QAAAA,eAApB;AAAqCE,QAAAA,eAArC;AAAsDE,QAAAA,oBAAtD;AAA4EE,QAAAA,0BAA5E;AAAwGE,QAAAA;AAAxG,OAAzB;AACAlI,MAAAA,OAAO,CAACC,GAAR,+DAEYQ,MAFZ,uCAGuBwG,iBAHvB,sCAIsBQ,gBAJtB,qCAKqBC,eALrB,qCAMqBE,eANrB,0CAO0BE,oBAP1B,gDAQgCE,0BARhC,oDASoCE,8BATpC;AAYE,YAAM3E,WAAW,GAAG;AAClBC,QAAAA,KAAK,gEACyC/C,MADzC,6BACkEwG,iBADlE,iDAC0HQ,gBAD1H,kCACkKC,eADlK,uCAC8MI,oBAD9M,kCAC0PF,eAD1P,6CAC4SI,0BAD5S,iDAC6WE,8BAD7W;AADa,OAApB;AAQExE,MAAAA,KAAK,CAAC,gCAAD,EAAmC;AACtCC,QAAAA,MAAM,EAAE,MAD8B;AAEtCC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeP,WAAf,CAFgC;AAGtCQ,QAAAA,OAAO,EAAE;AACP,0BAAgB,kBADT;AAEPC,UAAAA,aAAa,EAAE,YAAYP;AAFpB;AAH6B,OAAnC,CAAL,CAQGQ,IARH,CAQQC,GAAG,IAAI;AACX,YAAIA,GAAG,CAACC,MAAJ,KAAe,GAAf,IAAsBD,GAAG,CAACC,MAAJ,KAAe,GAAzC,EAA8C;AAC5C,gBAAM,IAAIC,KAAJ,CAAU,SAAV,CAAN;AACD;;AACD,eAAOF,GAAG,CAACG,IAAJ,EAAP;AACD,OAbH,EAcGJ,IAdH,CAcQK,OAAO,IAAI;AACftE,QAAAA,OAAO,CAACC,GAAR,CAAY,sBAAsB4D,IAAI,CAACC,SAAL,CAAeQ,OAAO,CAACC,IAAvB,CAAlC;AAEA,cAAMyB,gBAAgB,GAAG1B,OAAO,CAACC,IAAR,CAAa+C,sBAAb,CAAoClC,GAA7D;AACA,cAAMc,cAAc,GAAG,KAAKlH,KAAL,CAAWM,QAAX,CAAoB6G,IAApB,CAAyBC,CAAC,IAAIA,CAAC,CAAChB,GAAF,KAAUY,gBAAxC,CAAvB;AACA,cAAMK,iBAAiB,GAAG,KAAKrH,KAAL,CAAWM,QAAX,CAAoBgH,OAApB,CAA4BJ,cAA5B,CAA1B;AACA,cAAMK,WAAW,GAAG,KAAKvH,KAAL,CAAWM,QAAX,CAAoBkH,MAApB,CAA2BH,iBAA3B,EAA8C,CAA9C,CAApB;AACArG,QAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiC4D,IAAI,CAACC,SAAL,CAAeoC,cAAf,CAAjC,EAAgE,wBAAhE,EAA0FG,iBAA1F,EAA6G,kBAA7G,EAAiIE,WAAjI;AAEA,aAAKvH,KAAL,CAAWM,QAAX,CAAoBsF,IAApB,CAAyBsB,cAAzB;AACA,aAAKxF,OAAL,CAAapB,QAAb,GAAwB,KAAKN,KAAL,CAAWM,QAAnC;AACA,aAAKyH,aAAL;AACD,OA1BH,EA2BGlC,KA3BH,CA2BSC,GAAG,IAAI;AACZ9E,QAAAA,OAAO,CAACC,GAAR,CAAY6E,GAAZ;AACD,OA7BH;AA+BL,KAjeoB;;AAAA,SAmerBuD,6BAneqB,GAmeYhI,KAAD,IAAW;AAEzC,YAAMoD,KAAK,GAAG,KAAK/C,OAAL,CAAa+C,KAA3B;AACA,YAAMhD,MAAM,GAAG,KAAKC,OAAL,CAAaD,MAA5B;AACA,UAAIwG,iBAAiB,GAAG,KAAKvG,OAAL,CAAajB,eAAb,CAA6B2F,GAArD;;AACA,UACE,KAAK1E,OAAL,CAAauE,IAAb,CAAkBC,IAAlB,KAA2B,OAD7B,EAEE;AACAlF,QAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACA;AACD;;AAEDD,MAAAA,OAAO,CAACC,GAAR,CAAY,mCAAZ,EAAiDI,KAAK,CAACC,MAAN,CAAagI,qBAAb,CAAmC9H,KAApF;AAEA,WAAKT,QAAL,CAAc;AAAEb,QAAAA,QAAQ,EAAE,KAAZ;AAAoBQ,QAAAA,kBAAkB,EAAE;AAAxC,OAAd;AAEA,UAAI6I,aAAa,GAAGlI,KAAK,CAACC,MAAN,CAAagI,qBAAb,CAAmC9H,KAAvD;AACA,UAAIgI,cAAc,GAAGnI,KAAK,CAACC,MAAN,CAAamI,sBAAb,CAAoCjI,KAAzD;AACA,UAAIkI,cAAc,GAAGrI,KAAK,CAACC,MAAN,CAAaqI,sBAAb,CAAoCnI,KAAzD;AAEA,YAAMoI,gBAAgB,GAAG;AAAEL,QAAAA,aAAF;AAAiBC,QAAAA,cAAjB;AAAiCE,QAAAA;AAAjC,OAAzB;AACA1I,MAAAA,OAAO,CAACC,GAAR,+DAEYQ,MAFZ,uCAGuBwG,iBAHvB,mCAImBsB,aAJnB,oCAKoBC,cALpB,oCAMoBE,cANpB;AASE,YAAMnF,WAAW,GAAG;AAClBC,QAAAA,KAAK,gEACyC/C,MADzC,6BACkEwG,iBADlE,8CACuHsB,aADvH;AADa,OAApB;AAQE7E,MAAAA,KAAK,CAAC,gCAAD,EAAmC;AACtCC,QAAAA,MAAM,EAAE,MAD8B;AAEtCC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeP,WAAf,CAFgC;AAGtCQ,QAAAA,OAAO,EAAE;AACP,0BAAgB,kBADT;AAEPC,UAAAA,aAAa,EAAE,YAAYP;AAFpB;AAH6B,OAAnC,CAAL,CAQGQ,IARH,CAQQC,GAAG,IAAI;AACX,YAAIA,GAAG,CAACC,MAAJ,KAAe,GAAf,IAAsBD,GAAG,CAACC,MAAJ,KAAe,GAAzC,EAA8C;AAC5C,gBAAM,IAAIC,KAAJ,CAAU,SAAV,CAAN;AACD;;AACD,eAAOF,GAAG,CAACG,IAAJ,EAAP;AACD,OAbH,EAcGJ,IAdH,CAcQK,OAAO,IAAI;AACftE,QAAAA,OAAO,CAACC,GAAR,CAAY,sBAAsB4D,IAAI,CAACC,SAAL,CAAeQ,OAAO,CAACC,IAAvB,CAAlC;AAEA,cAAMyB,gBAAgB,GAAG1B,OAAO,CAACC,IAAR,CAAasE,sBAAb,CAAoCzD,GAA7D;AACA,cAAMc,cAAc,GAAG,KAAKlH,KAAL,CAAWM,QAAX,CAAoB6G,IAApB,CAAyBC,CAAC,IAAIA,CAAC,CAAChB,GAAF,KAAUY,gBAAxC,CAAvB;AACA,cAAMK,iBAAiB,GAAG,KAAKrH,KAAL,CAAWM,QAAX,CAAoBgH,OAApB,CAA4BJ,cAA5B,CAA1B;AACA,cAAMK,WAAW,GAAG,KAAKvH,KAAL,CAAWM,QAAX,CAAoBkH,MAApB,CAA2BH,iBAA3B,EAA8C,CAA9C,CAApB;AACArG,QAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiC4D,IAAI,CAACC,SAAL,CAAeoC,cAAf,CAAjC,EAAgE,wBAAhE,EAA0FG,iBAA1F,EAA6G,kBAA7G,EAAiIE,WAAjI;AAEA,aAAKvH,KAAL,CAAWM,QAAX,CAAoBsF,IAApB,CAAyBsB,cAAzB;AACA,aAAKxF,OAAL,CAAapB,QAAb,GAAwB,KAAKN,KAAL,CAAWM,QAAnC;AACA,aAAKyH,aAAL;AACD,OA1BH,EA2BGlC,KA3BH,CA2BSC,GAAG,IAAI;AACZ9E,QAAAA,OAAO,CAACC,GAAR,CAAY6E,GAAZ;AACD,OA7BH;AA8BL,KAviBoB;;AAAA,SA0iBrBgE,6BA1iBqB,GA0iBYzI,KAAD,IAAW;AAEzC,YAAMoD,KAAK,GAAG,KAAK/C,OAAL,CAAa+C,KAA3B;AACA,YAAMhD,MAAM,GAAG,KAAKC,OAAL,CAAaD,MAA5B;AACA,UAAIwG,iBAAiB,GAAG,KAAKvG,OAAL,CAAajB,eAAb,CAA6B2F,GAArD;;AACA,UACE,KAAK1E,OAAL,CAAauE,IAAb,CAAkBC,IAAlB,KAA2B,OAD7B,EAEE;AACAlF,QAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACA;AACD;;AAEDD,MAAAA,OAAO,CAACC,GAAR,CAAY,mCAAZ,EAAiDI,KAAK,CAACC,MAAN,CAAayI,sBAAb,CAAoCvI,KAArF;AAEA,WAAKT,QAAL,CAAc;AAAEb,QAAAA,QAAQ,EAAE,KAAZ;AAAoBQ,QAAAA,kBAAkB,EAAE;AAAxC,OAAd;AAEA,UAAIsJ,cAAc,GAAG3I,KAAK,CAACC,MAAN,CAAayI,sBAAb,CAAoCvI,KAAzD;AACA,UAAIyI,aAAa,GAAG5I,KAAK,CAACC,MAAN,CAAa4I,qBAAb,CAAmC1I,KAAvD;AACA,UAAI2I,oBAAoB,GAAG9I,KAAK,CAACC,MAAN,CAAa8I,4BAAb,CAA0C5I,KAArE;AACA,UAAI6I,uBAAuB,GAAGhJ,KAAK,CAACC,MAAN,CAAagJ,+BAAb,CAA6C9I,KAA3E;AACA,UAAI+I,yBAAyB,GAAGlJ,KAAK,CAACC,MAAN,CAAakJ,iCAAb,CAA+ChJ,KAA/E;AACA,UAAIiJ,uBAAuB,GAAGpJ,KAAK,CAACC,MAAN,CAAaoJ,+BAAb,CAA6ClJ,KAA3E;AAEA,YAAMmJ,gBAAgB,GAAG;AAAEX,QAAAA,cAAF;AAAkBC,QAAAA,aAAlB;AAAiCE,QAAAA,oBAAjC;AAAuDE,QAAAA,uBAAvD;AAAgFE,QAAAA,yBAAhF;AAA2GE,QAAAA;AAA3G,OAAzB;AACAzJ,MAAAA,OAAO,CAACC,GAAR,0DAEYQ,MAFZ,+BAGewG,iBAHf,oCAIoB+B,cAJpB,mCAKmBC,aALnB,0CAM0BE,oBAN1B,6CAO6BE,uBAP7B,+CAQ+BE,yBAR/B,6CAS6BE,uBAT7B;AAYE,YAAMlG,WAAW,GAAG;AAClBC,QAAAA,KAAK,gEACyC/C,MADzC,6BACkEwG,iBADlE,8CACuHgC,aADvH,iCAC2JD,cAD3J,uCACsMG,oBADtM,0CAC0PE,uBAD1P,4CACmTE,yBADnT,0CAC4WE,uBAD5W;AADa,OAApB;AAQA/F,MAAAA,KAAK,CAAC,gCAAD,EAAmC;AACtCC,QAAAA,MAAM,EAAE,MAD8B;AAEtCC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeP,WAAf,CAFgC;AAGtCQ,QAAAA,OAAO,EAAE;AACP,0BAAgB,kBADT;AAEPC,UAAAA,aAAa,EAAE,YAAYP;AAFpB;AAH6B,OAAnC,CAAL,CAQGQ,IARH,CAQQC,GAAG,IAAI;AACX,YAAIA,GAAG,CAACC,MAAJ,KAAe,GAAf,IAAsBD,GAAG,CAACC,MAAJ,KAAe,GAAzC,EAA8C;AAC5C,gBAAM,IAAIC,KAAJ,CAAU,SAAV,CAAN;AACD;;AACD,eAAOF,GAAG,CAACG,IAAJ,EAAP;AACD,OAbH,EAcGJ,IAdH,CAcQK,OAAO,IAAI;AACftE,QAAAA,OAAO,CAACC,GAAR,CAAY,sBAAsB4D,IAAI,CAACC,SAAL,CAAeQ,OAAO,CAACC,IAAvB,CAAlC;AAEA,cAAMyB,gBAAgB,GAAG1B,OAAO,CAACC,IAAR,CAAaqF,sBAAb,CAAoCxE,GAA7D;AACA,cAAMc,cAAc,GAAG,KAAKlH,KAAL,CAAWM,QAAX,CAAoB6G,IAApB,CAAyBC,CAAC,IAAIA,CAAC,CAAChB,GAAF,KAAUY,gBAAxC,CAAvB;AACA,cAAMK,iBAAiB,GAAG,KAAKrH,KAAL,CAAWM,QAAX,CAAoBgH,OAApB,CAA4BJ,cAA5B,CAA1B;AACA,cAAMK,WAAW,GAAG,KAAKvH,KAAL,CAAWM,QAAX,CAAoBkH,MAApB,CAA2BH,iBAA3B,EAA8C,CAA9C,CAApB;AACArG,QAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiC4D,IAAI,CAACC,SAAL,CAAeoC,cAAf,CAAjC,EAAgE,wBAAhE,EAA0FG,iBAA1F,EAA6G,kBAA7G,EAAiIE,WAAjI;AAEA,aAAKvH,KAAL,CAAWM,QAAX,CAAoBsF,IAApB,CAAyBsB,cAAzB;AACA,aAAKxF,OAAL,CAAapB,QAAb,GAAwB,KAAKN,KAAL,CAAWM,QAAnC;AACA,aAAKyH,aAAL;AACD,OA1BH,EA2BGlC,KA3BH,CA2BSC,GAAG,IAAI;AACZ9E,QAAAA,OAAO,CAACC,GAAR,CAAY6E,GAAZ;AACD,OA7BH;AA+BH,KArnBoB;;AAAA,SAwnBrB+E,+BAxnBqB,GAwnBcxJ,KAAD,IAAW;AAE3C,YAAMoD,KAAK,GAAG,KAAK/C,OAAL,CAAa+C,KAA3B;AACA,YAAMhD,MAAM,GAAG,KAAKC,OAAL,CAAaD,MAA5B;AACA,UAAIwG,iBAAiB,GAAG,KAAKvG,OAAL,CAAajB,eAAb,CAA6B2F,GAArD;;AACA,UACE,KAAK1E,OAAL,CAAauE,IAAb,CAAkBC,IAAlB,KAA2B,OAD7B,EAEE;AACAlF,QAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACA;AACD;;AAEDD,MAAAA,OAAO,CAACC,GAAR,CAAY,qCAAZ,EAAmDI,KAAK,CAACC,MAAN,CAAawJ,uBAAb,CAAqCtJ,KAAxF;AAEA,WAAKT,QAAL,CAAc;AAAEb,QAAAA,QAAQ,EAAE,KAAZ;AAAoBQ,QAAAA,kBAAkB,EAAE;AAAxC,OAAd;AAEA,UAAIqK,eAAe,GAAG1J,KAAK,CAACC,MAAN,CAAa0J,uBAAb,CAAqCxJ,KAA3D;AACA,UAAIyJ,eAAe,GAAG5J,KAAK,CAACC,MAAN,CAAawJ,uBAAb,CAAqCtJ,KAA3D;AACA,UAAI0J,eAAe,GAAG7J,KAAK,CAACC,MAAN,CAAa6J,uBAAb,CAAqC3J,KAA3D;AACA,UAAI4J,kBAAkB,GAAG/J,KAAK,CAACC,MAAN,CAAa+J,0BAAb,CAAwC7J,KAAjE;AACA,UAAI8J,gBAAgB,GAAGjK,KAAK,CAACC,MAAN,CAAaiK,wBAAb,CAAsC/J,KAA7D;AACA,UAAIgK,sBAAsB,GAAGnK,KAAK,CAACC,MAAN,CAAamK,8BAAb,CAA4CjK,KAAzE;AACA,UAAIkK,yBAAyB,GAAGrK,KAAK,CAACC,MAAN,CAAaqK,iCAAb,CAA+CnK,KAA/E;AACA,UAAIoK,2BAA2B,GAAGvK,KAAK,CAACC,MAAN,CAAauK,mCAAb,CAAiDrK,KAAnF;AACA,UAAIsK,yBAAyB,GAAGzK,KAAK,CAACC,MAAN,CAAayK,iCAAb,CAA+CvK,KAA/E;AAEA,YAAMwK,kBAAkB,GAAG;AAAEf,QAAAA,eAAF;AAAmBC,QAAAA,eAAnB;AAAoCE,QAAAA,kBAApC;AAAwDE,QAAAA,gBAAxD;AAA0EI,QAAAA,yBAA1E;AAAqGE,QAAAA,2BAArG;AAAkIE,QAAAA;AAAlI,OAA3B;AAEA9K,MAAAA,OAAO,CAACC,GAAR,4DAEYQ,MAFZ,+BAGewG,iBAHf,qCAIqB8C,eAJrB,qCAKqBE,eALrB,qCAMqBC,eANrB,wCAOwBE,kBAPxB,sCAQsBE,gBARtB,4CAS4BE,sBAT5B,+CAU+BE,yBAV/B,iDAWiCE,2BAXjC,+CAY+BE,yBAZ/B;AAeE,YAAMvH,WAAW,GAAG;AAClBC,QAAAA,KAAK,kEAC2C/C,MAD3C,6BACoEwG,iBADpE,gDAC2H8C,eAD3H,kCACkKE,eADlK,kCACyMC,eADzM,qCACmPE,kBADnP,mCAC8RE,gBAD9R,yCAC6UE,sBAD7U,4CACqYE,yBADrY,8CACkcE,2BADlc,4CAC+fE,yBAD/f;AADa,OAApB;AAQApH,MAAAA,KAAK,CAAC,gCAAD,EAAmC;AACtCC,QAAAA,MAAM,EAAE,MAD8B;AAEtCC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeP,WAAf,CAFgC;AAGtCQ,QAAAA,OAAO,EAAE;AACP,0BAAgB,kBADT;AAEPC,UAAAA,aAAa,EAAE,YAAYP;AAFpB;AAH6B,OAAnC,CAAL,CAQGQ,IARH,CAQQC,GAAG,IAAI;AACX,YAAIA,GAAG,CAACC,MAAJ,KAAe,GAAf,IAAsBD,GAAG,CAACC,MAAJ,KAAe,GAAzC,EAA8C;AAC5C,gBAAM,IAAIC,KAAJ,CAAU,SAAV,CAAN;AACD;;AACD,eAAOF,GAAG,CAACG,IAAJ,EAAP;AACD,OAbH,EAcGJ,IAdH,CAcQK,OAAO,IAAI;AACftE,QAAAA,OAAO,CAACC,GAAR,CAAY,sBAAsB4D,IAAI,CAACC,SAAL,CAAeQ,OAAO,CAACC,IAAvB,CAAlC;AAEA,cAAMyB,gBAAgB,GAAG1B,OAAO,CAACC,IAAR,CAAa0G,wBAAb,CAAsC7F,GAA/D;AACA,cAAMc,cAAc,GAAG,KAAKlH,KAAL,CAAWM,QAAX,CAAoB6G,IAApB,CAAyBC,CAAC,IAAIA,CAAC,CAAChB,GAAF,KAAUY,gBAAxC,CAAvB;AACA,cAAMK,iBAAiB,GAAG,KAAKrH,KAAL,CAAWM,QAAX,CAAoBgH,OAApB,CAA4BJ,cAA5B,CAA1B;AACA,cAAMK,WAAW,GAAG,KAAKvH,KAAL,CAAWM,QAAX,CAAoBkH,MAApB,CAA2BH,iBAA3B,EAA8C,CAA9C,CAApB;AACArG,QAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiC4D,IAAI,CAACC,SAAL,CAAeoC,cAAf,CAAjC,EAAgE,wBAAhE,EAA0FG,iBAA1F,EAA6G,kBAA7G,EAAiIE,WAAjI;AAEA,aAAKvH,KAAL,CAAWM,QAAX,CAAoBsF,IAApB,CAAyBsB,cAAzB;AACA,aAAKxF,OAAL,CAAapB,QAAb,GAAwB,KAAKN,KAAL,CAAWM,QAAnC;AACA,aAAKyH,aAAL;AACD,OA1BH,EA2BGlC,KA3BH,CA2BSC,GAAG,IAAI;AACZ9E,QAAAA,OAAO,CAACC,GAAR,CAAY6E,GAAZ;AACD,OA7BH;AA+BH,KA1sBoB;;AAAA,SA6sBrBoG,2BA7sBqB,GA6sBU7K,KAAD,IAAW;AAEvC,YAAMoD,KAAK,GAAG,KAAK/C,OAAL,CAAa+C,KAA3B;AACA,YAAMhD,MAAM,GAAG,KAAKC,OAAL,CAAaD,MAA5B;AACA,UAAIwG,iBAAiB,GAAG,KAAKvG,OAAL,CAAajB,eAAb,CAA6B2F,GAArD;;AACA,UACE,KAAK1E,OAAL,CAAauE,IAAb,CAAkBC,IAAlB,KAA2B,OAD7B,EAEE;AACAlF,QAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACA;AACD;;AAEDD,MAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ,EAA+CI,KAAK,CAACC,MAAN,CAAa6K,oBAAb,CAAkC3K,KAAjF;AAEA,WAAKT,QAAL,CAAc;AAAEb,QAAAA,QAAQ,EAAE,KAAZ;AAAoBQ,QAAAA,kBAAkB,EAAE;AAAxC,OAAd;AAEA,UAAI0L,WAAW,GAAG/K,KAAK,CAACC,MAAN,CAAa+K,mBAAb,CAAiC7K,KAAnD;AACA,UAAI8K,WAAW,GAAGjL,KAAK,CAACC,MAAN,CAAaiL,mBAAb,CAAiC/K,KAAnD;AACA,UAAIgL,YAAY,GAAGnL,KAAK,CAACC,MAAN,CAAa6K,oBAAb,CAAkC3K,KAArD;AACA,UAAIiL,kBAAkB,GAAGpL,KAAK,CAACC,MAAN,CAAaoL,0BAAb,CAAwClL,KAAjE;AACA,UAAImL,qBAAqB,GAAGtL,KAAK,CAACC,MAAN,CAAasL,6BAAb,CAA2CpL,KAAvE;AACA,UAAIqL,uBAAuB,GAAGxL,KAAK,CAACC,MAAN,CAAawL,+BAAb,CAA6CtL,KAA3E;AACA,UAAIuL,qBAAqB,GAAG1L,KAAK,CAACC,MAAN,CAAa0L,6BAAb,CAA2CxL,KAAvE;AAEA,YAAMyL,cAAc,GAAG;AAAEb,QAAAA,WAAF;AAAeE,QAAAA,WAAf;AAA4BE,QAAAA,YAA5B;AAA0CC,QAAAA,kBAA1C;AAA8DE,QAAAA,qBAA9D;AAAqFE,QAAAA,uBAArF;AAA8GE,QAAAA;AAA9G,OAAvB;AACA/L,MAAAA,OAAO,CAACC,GAAR,wDAEYQ,MAFZ,+BAGewG,iBAHf,iCAIiBmE,WAJjB,iCAKiBE,WALjB,kCAMkBE,YANlB,wCAOwBC,kBAPxB,2CAQ2BE,qBAR3B,6CAS6BE,uBAT7B,2CAU2BE,qBAV3B;AAaE,YAAMxI,WAAW,GAAG;AAClBC,QAAAA,KAAK,8DACuC/C,MADvC,6BACgEwG,iBADhE,6CACoHuE,YADpH,8BACoJJ,WADpJ,8BACmLE,WADnL,qCACyNG,kBADzN,wCACyQE,qBADzQ,0CAC8TE,uBAD9T,wCACmXE,qBADnX;AADa,OAApB;AAQArI,MAAAA,KAAK,CAAC,gCAAD,EAAmC;AACtCC,QAAAA,MAAM,EAAE,MAD8B;AAEtCC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeP,WAAf,CAFgC;AAGtCQ,QAAAA,OAAO,EAAE;AACP,0BAAgB,kBADT;AAEPC,UAAAA,aAAa,EAAE,YAAYP;AAFpB;AAH6B,OAAnC,CAAL,CAQGQ,IARH,CAQQC,GAAG,IAAI;AACX,YAAIA,GAAG,CAACC,MAAJ,KAAe,GAAf,IAAsBD,GAAG,CAACC,MAAJ,KAAe,GAAzC,EAA8C;AAC5C,gBAAM,IAAIC,KAAJ,CAAU,SAAV,CAAN;AACD;;AACD,eAAOF,GAAG,CAACG,IAAJ,EAAP;AACD,OAbH,EAcGJ,IAdH,CAcQK,OAAO,IAAI;AACftE,QAAAA,OAAO,CAACC,GAAR,CAAY,sBAAsB4D,IAAI,CAACC,SAAL,CAAeQ,OAAO,CAACC,IAAvB,CAAlC;AAEA,cAAMyB,gBAAgB,GAAG1B,OAAO,CAACC,IAAR,CAAa2H,oBAAb,CAAkC9G,GAA3D;AACA,cAAMc,cAAc,GAAG,KAAKlH,KAAL,CAAWM,QAAX,CAAoB6G,IAApB,CAAyBC,CAAC,IAAIA,CAAC,CAAChB,GAAF,KAAUY,gBAAxC,CAAvB;AACA,cAAMK,iBAAiB,GAAG,KAAKrH,KAAL,CAAWM,QAAX,CAAoBgH,OAApB,CAA4BJ,cAA5B,CAA1B;AACA,cAAMK,WAAW,GAAG,KAAKvH,KAAL,CAAWM,QAAX,CAAoBkH,MAApB,CAA2BH,iBAA3B,EAA8C,CAA9C,CAApB;AACArG,QAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiC4D,IAAI,CAACC,SAAL,CAAeoC,cAAf,CAAjC,EAAgE,wBAAhE,EAA0FG,iBAA1F,EAA6G,kBAA7G,EAAiIE,WAAjI;AAEA,aAAKvH,KAAL,CAAWM,QAAX,CAAoBsF,IAApB,CAAyBsB,cAAzB;AACA,aAAKxF,OAAL,CAAapB,QAAb,GAAwB,KAAKN,KAAL,CAAWM,QAAnC;AACA,aAAKyH,aAAL;AACD,OA1BH,EA2BGlC,KA3BH,CA2BSC,GAAG,IAAI;AACZ9E,QAAAA,OAAO,CAACC,GAAR,CAAY6E,GAAZ;AACD,OA7BH;AA+BH,KA1xBoB;;AAAA,SA6xBrBqH,6BA7xBqB,GA6xBY9L,KAAD,IAAW;AAEzC,YAAMoD,KAAK,GAAG,KAAK/C,OAAL,CAAa+C,KAA3B;AACA,YAAMhD,MAAM,GAAG,KAAKC,OAAL,CAAaD,MAA5B;AACA,UAAIwG,iBAAiB,GAAG,KAAKvG,OAAL,CAAajB,eAAb,CAA6B2F,GAArD;;AACA,UACE,KAAK1E,OAAL,CAAauE,IAAb,CAAkBC,IAAlB,KAA2B,OAD7B,EAEE;AACAlF,QAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACA;AACD;;AAEDD,MAAAA,OAAO,CAACC,GAAR,CAAY,mCAAZ,EAAiDI,KAAK,CAACC,MAAN,CAAa8L,sBAAb,CAAoC5L,KAArF;AAEA,WAAKT,QAAL,CAAc;AAAEb,QAAAA,QAAQ,EAAE,KAAZ;AAAoBQ,QAAAA,kBAAkB,EAAE;AAAxC,OAAd;AAEA,UAAI2M,cAAc,GAAGhM,KAAK,CAACC,MAAN,CAAa8L,sBAAb,CAAoC5L,KAAzD;AACA,UAAI8L,oBAAoB,GAAGjM,KAAK,CAACC,MAAN,CAAaiM,4BAAb,CAA0C/L,KAArE;AACA,UAAIgM,uBAAuB,GAAGnM,KAAK,CAACC,MAAN,CAAamM,+BAAb,CAA6CjM,KAA3E;AACA,UAAIkM,yBAAyB,GAAGrM,KAAK,CAACC,MAAN,CAAaqM,iCAAb,CAA+CnM,KAA/E;AACA,UAAIoM,uBAAuB,GAAGvM,KAAK,CAACC,MAAN,CAAauM,+BAAb,CAA6CrM,KAA3E;AAEA,YAAMsM,gBAAgB,GAAG;AAAET,QAAAA,cAAF;AAAkBC,QAAAA,oBAAlB;AAAwCE,QAAAA,uBAAxC;AAAiEE,QAAAA,yBAAjE;AAA4FE,QAAAA;AAA5F,OAAzB;AAEA5M,MAAAA,OAAO,CAACC,GAAR,0DAEYQ,MAFZ,+BAGewG,iBAHf,oCAIoBoF,cAJpB,0CAK0BC,oBAL1B,6CAM6BE,uBAN7B,+CAO+BE,yBAP/B,6CAQ6BE,uBAR7B;AAWE,YAAMrJ,WAAW,GAAG;AAClBC,QAAAA,KAAK,gEACyC/C,MADzC,6BACkEwG,iBADlE,+CACwHoF,cADxH,wCACoKC,oBADpK,0CACwNE,uBADxN,4CACiRE,yBADjR,0CAC0UE,uBAD1U;AADa,OAApB;AAQAlJ,MAAAA,KAAK,CAAC,gCAAD,EAAmC;AACtCC,QAAAA,MAAM,EAAE,MAD8B;AAEtCC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeP,WAAf,CAFgC;AAGtCQ,QAAAA,OAAO,EAAE;AACP,0BAAgB,kBADT;AAEPC,UAAAA,aAAa,EAAE,YAAYP;AAFpB;AAH6B,OAAnC,CAAL,CAQGQ,IARH,CAQQC,GAAG,IAAI;AACX,YAAIA,GAAG,CAACC,MAAJ,KAAe,GAAf,IAAsBD,GAAG,CAACC,MAAJ,KAAe,GAAzC,EAA8C;AAC5C,gBAAM,IAAIC,KAAJ,CAAU,SAAV,CAAN;AACD;;AACD,eAAOF,GAAG,CAACG,IAAJ,EAAP;AACD,OAbH,EAcGJ,IAdH,CAcQK,OAAO,IAAI;AACftE,QAAAA,OAAO,CAACC,GAAR,CAAY,sBAAsB4D,IAAI,CAACC,SAAL,CAAeQ,OAAO,CAACC,IAAvB,CAAlC;AAEA,cAAMyB,gBAAgB,GAAG1B,OAAO,CAACC,IAAR,CAAawI,sBAAb,CAAoC3H,GAA7D;AACA,cAAMc,cAAc,GAAG,KAAKlH,KAAL,CAAWM,QAAX,CAAoB6G,IAApB,CAAyBC,CAAC,IAAIA,CAAC,CAAChB,GAAF,KAAUY,gBAAxC,CAAvB;AACA,cAAMK,iBAAiB,GAAG,KAAKrH,KAAL,CAAWM,QAAX,CAAoBgH,OAApB,CAA4BJ,cAA5B,CAA1B;AACA,cAAMK,WAAW,GAAG,KAAKvH,KAAL,CAAWM,QAAX,CAAoBkH,MAApB,CAA2BH,iBAA3B,EAA8C,CAA9C,CAApB;AACArG,QAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiC4D,IAAI,CAACC,SAAL,CAAeoC,cAAf,CAAjC,EAAgE,wBAAhE,EAA0FG,iBAA1F,EAA6G,kBAA7G,EAAiIE,WAAjI;AAEA,aAAKvH,KAAL,CAAWM,QAAX,CAAoBsF,IAApB,CAAyBsB,cAAzB;AACA,aAAKxF,OAAL,CAAapB,QAAb,GAAwB,KAAKN,KAAL,CAAWM,QAAnC;AACA,aAAKyH,aAAL;AACD,OA1BH,EA2BGlC,KA3BH,CA2BSC,GAAG,IAAI;AACZ9E,QAAAA,OAAO,CAACC,GAAR,CAAY6E,GAAZ;AACD,OA7BH;AAgCH,KAx2BoB;;AAAA,SA22BrBkI,8BA32BqB,GA22Ba3M,KAAD,IAAW;AAE1C,YAAMoD,KAAK,GAAG,KAAK/C,OAAL,CAAa+C,KAA3B;AACA,YAAMhD,MAAM,GAAG,KAAKC,OAAL,CAAaD,MAA5B;AACA,UAAIwG,iBAAiB,GAAG,KAAKvG,OAAL,CAAajB,eAAb,CAA6B2F,GAArD;;AACA,UACE,KAAK1E,OAAL,CAAauE,IAAb,CAAkBC,IAAlB,KAA2B,OAD7B,EAEE;AACAlF,QAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACA;AACD;;AAEDD,MAAAA,OAAO,CAACC,GAAR,CAAY,oCAAZ,EAAkDI,KAAK,CAACC,MAAN,CAAa2M,uBAAb,CAAqCzM,KAAvF;AAEA,WAAKT,QAAL,CAAc;AAAEb,QAAAA,QAAQ,EAAE,KAAZ;AAAoBQ,QAAAA,kBAAkB,EAAE;AAAxC,OAAd;AAEA,UAAIwN,eAAe,GAAG7M,KAAK,CAACC,MAAN,CAAa2M,uBAAb,CAAqCzM,KAA3D;AACA,UAAI2M,qBAAqB,GAAG9M,KAAK,CAACC,MAAN,CAAa8M,6BAAb,CAA2C5M,KAAvE;AACA,UAAI6M,wBAAwB,GAAGhN,KAAK,CAACC,MAAN,CAAagN,gCAAb,CAA8C9M,KAA7E;AACA,UAAI+M,0BAA0B,GAAGlN,KAAK,CAACC,MAAN,CAAakN,kCAAb,CAAgDhN,KAAjF;AACA,UAAIiN,wBAAwB,GAAGpN,KAAK,CAACC,MAAN,CAAaoN,gCAAb,CAA8ClN,KAA7E;AAEA,YAAMmN,iBAAiB,GAAG;AAAET,QAAAA,eAAF;AAAmBC,QAAAA,qBAAnB;AAA0CE,QAAAA,wBAA1C;AAAoEE,QAAAA,0BAApE;AAAgGE,QAAAA;AAAhG,OAA1B;AAEAzN,MAAAA,OAAO,CAACC,GAAR,2DAEYQ,MAFZ,+BAGewG,iBAHf,qCAIqBiG,eAJrB,2CAK2BC,qBAL3B,8CAM8BE,wBAN9B,gDAOgCE,0BAPhC,8CAQ8BE,wBAR9B;AAWE,YAAMlK,WAAW,GAAG;AAClBC,QAAAA,KAAK,+DACwC/C,MADxC,6BACiEwG,iBADjE,gDACwHiG,eADxH,yCACsKC,qBADtK,2CAC4NE,wBAD5N,6CACuRE,0BADvR,2CACkVE,wBADlV;AADa,OAApB;AAQA/J,MAAAA,KAAK,CAAC,gCAAD,EAAmC;AACtCC,QAAAA,MAAM,EAAE,MAD8B;AAEtCC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeP,WAAf,CAFgC;AAGtCQ,QAAAA,OAAO,EAAE;AACP,0BAAgB,kBADT;AAEPC,UAAAA,aAAa,EAAE,YAAYP;AAFpB;AAH6B,OAAnC,CAAL,CAQGQ,IARH,CAQQC,GAAG,IAAI;AACX,YAAIA,GAAG,CAACC,MAAJ,KAAe,GAAf,IAAsBD,GAAG,CAACC,MAAJ,KAAe,GAAzC,EAA8C;AAC5C,gBAAM,IAAIC,KAAJ,CAAU,SAAV,CAAN;AACD;;AACD,eAAOF,GAAG,CAACG,IAAJ,EAAP;AACD,OAbH,EAcGJ,IAdH,CAcQK,OAAO,IAAI;AACftE,QAAAA,OAAO,CAACC,GAAR,CAAY,sBAAsB4D,IAAI,CAACC,SAAL,CAAeQ,OAAO,CAACC,IAAvB,CAAlC;AAEA,cAAMyB,gBAAgB,GAAG1B,OAAO,CAACC,IAAR,CAAaqJ,uBAAb,CAAqCxI,GAA9D;AACA,cAAMc,cAAc,GAAG,KAAKlH,KAAL,CAAWM,QAAX,CAAoB6G,IAApB,CAAyBC,CAAC,IAAIA,CAAC,CAAChB,GAAF,KAAUY,gBAAxC,CAAvB;AACA,cAAMK,iBAAiB,GAAG,KAAKrH,KAAL,CAAWM,QAAX,CAAoBgH,OAApB,CAA4BJ,cAA5B,CAA1B;AACA,cAAMK,WAAW,GAAG,KAAKvH,KAAL,CAAWM,QAAX,CAAoBkH,MAApB,CAA2BH,iBAA3B,EAA8C,CAA9C,CAApB;AACArG,QAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiC4D,IAAI,CAACC,SAAL,CAAeoC,cAAf,CAAjC,EAAgE,wBAAhE,EAA0FG,iBAA1F,EAA6G,kBAA7G,EAAiIE,WAAjI;AAEA,aAAKvH,KAAL,CAAWM,QAAX,CAAoBsF,IAApB,CAAyBsB,cAAzB;AACA,aAAKxF,OAAL,CAAapB,QAAb,GAAwB,KAAKN,KAAL,CAAWM,QAAnC;AACA,aAAKyH,aAAL;AACD,OA1BH,EA2BGlC,KA3BH,CA2BSC,GAAG,IAAI;AACZ9E,QAAAA,OAAO,CAACC,GAAR,CAAY6E,GAAZ;AACD,OA7BH;AA+BH,KAr7BoB;;AAAA,SAw7BrB+I,iCAx7BqB,GAw7BgBxN,KAAD,IAAW;AAE7C,YAAMoD,KAAK,GAAG,KAAK/C,OAAL,CAAa+C,KAA3B;AACA,YAAMhD,MAAM,GAAG,KAAKC,OAAL,CAAaD,MAA5B;AACA,UAAIwG,iBAAiB,GAAG,KAAKvG,OAAL,CAAajB,eAAb,CAA6B2F,GAArD;;AACA,UACE,KAAK1E,OAAL,CAAauE,IAAb,CAAkBC,IAAlB,KAA2B,OAD7B,EAEE;AACAlF,QAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACA;AACD;;AAEDD,MAAAA,OAAO,CAACC,GAAR,CAAY,uCAAZ,EAAqDI,KAAK,CAACC,MAAN,CAAawN,0BAAb,CAAwCtN,KAA7F;AAEA,WAAKT,QAAL,CAAc;AAAEb,QAAAA,QAAQ,EAAE,KAAZ;AAAoBQ,QAAAA,kBAAkB,EAAE;AAAxC,OAAd;AAEA,UAAIqO,iBAAiB,GAAG1N,KAAK,CAACC,MAAN,CAAa0N,yBAAb,CAAuCxN,KAA/D;AACA,UAAIyN,kBAAkB,GAAG5N,KAAK,CAACC,MAAN,CAAawN,0BAAb,CAAwCtN,KAAjE;AACA,UAAI0N,wBAAwB,GAAG7N,KAAK,CAACC,MAAN,CAAa6N,gCAAb,CAA8C3N,KAA7E;AACA,UAAI4N,2BAA2B,GAAG/N,KAAK,CAACC,MAAN,CAAa+N,mCAAb,CAAiD7N,KAAnF;AACA,UAAI8N,6BAA6B,GAAGjO,KAAK,CAACC,MAAN,CAAaiO,qCAAb,CAAmD/N,KAAvF;AACA,UAAIgO,2BAA2B,GAAGnO,KAAK,CAACC,MAAN,CAAamO,mCAAb,CAAiDjO,KAAnF;AAEA,YAAMkO,oBAAoB,GAAG;AAAEX,QAAAA,iBAAF;AAAqBE,QAAAA,kBAArB;AAAyCC,QAAAA,wBAAzC;AAAmEE,QAAAA,2BAAnE;AAAgGE,QAAAA,6BAAhG;AAA+HE,QAAAA;AAA/H,OAA7B;AAEAxO,MAAAA,OAAO,CAACC,GAAR,8DAEYQ,MAFZ,+BAGewG,iBAHf,uCAIuB8G,iBAJvB,wCAKwBE,kBALxB,8CAM8BC,wBAN9B,iDAOiCE,2BAPjC,mDAQmCE,6BARnC,iDASiCE,2BATjC;AAYE,YAAMjL,WAAW,GAAG;AAClBC,QAAAA,KAAK,oEAC6C/C,MAD7C,6BACsEwG,iBADtE,kDAC+H8G,iBAD/H,qCAC2KE,kBAD3K,2CAC8NC,wBAD9N,8CAC0RE,2BAD1R,gDAC2VE,6BAD3V,8CAC4ZE,2BAD5Z;AADa,OAApB;AAQA9K,MAAAA,KAAK,CAAC,gCAAD,EAAmC;AACtCC,QAAAA,MAAM,EAAE,MAD8B;AAEtCC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeP,WAAf,CAFgC;AAGtCQ,QAAAA,OAAO,EAAE;AACP,0BAAgB,kBADT;AAEPC,UAAAA,aAAa,EAAE,YAAYP;AAFpB;AAH6B,OAAnC,CAAL,CAQGQ,IARH,CAQQC,GAAG,IAAI;AACX,YAAIA,GAAG,CAACC,MAAJ,KAAe,GAAf,IAAsBD,GAAG,CAACC,MAAJ,KAAe,GAAzC,EAA8C;AAC5C,gBAAM,IAAIC,KAAJ,CAAU,SAAV,CAAN;AACD;;AACD,eAAOF,GAAG,CAACG,IAAJ,EAAP;AACD,OAbH,EAcGJ,IAdH,CAcQK,OAAO,IAAI;AACftE,QAAAA,OAAO,CAACC,GAAR,CAAY,sBAAsB4D,IAAI,CAACC,SAAL,CAAeQ,OAAO,CAACC,IAAvB,CAAlC;AAEA,cAAMyB,gBAAgB,GAAG1B,OAAO,CAACC,IAAR,CAAaoK,0BAAb,CAAwCvJ,GAAjE;AACA,cAAMc,cAAc,GAAG,KAAKlH,KAAL,CAAWM,QAAX,CAAoB6G,IAApB,CAAyBC,CAAC,IAAIA,CAAC,CAAChB,GAAF,KAAUY,gBAAxC,CAAvB;AACA,cAAMK,iBAAiB,GAAG,KAAKrH,KAAL,CAAWM,QAAX,CAAoBgH,OAApB,CAA4BJ,cAA5B,CAA1B;AACA,cAAMK,WAAW,GAAG,KAAKvH,KAAL,CAAWM,QAAX,CAAoBkH,MAApB,CAA2BH,iBAA3B,EAA8C,CAA9C,CAApB;AACArG,QAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiC4D,IAAI,CAACC,SAAL,CAAeoC,cAAf,CAAjC,EAAgE,wBAAhE,EAA0FG,iBAA1F,EAA6G,kBAA7G,EAAiIE,WAAjI;AAEA,aAAKvH,KAAL,CAAWM,QAAX,CAAoBsF,IAApB,CAAyBsB,cAAzB;AACA,aAAKxF,OAAL,CAAapB,QAAb,GAAwB,KAAKN,KAAL,CAAWM,QAAnC;AACA,aAAKyH,aAAL;AACD,OA1BH,EA2BGlC,KA3BH,CA2BSC,GAAG,IAAI;AACZ9E,QAAAA,OAAO,CAACC,GAAR,CAAY6E,GAAZ;AACD,OA7BH;AA+BH,KApgCoB;;AAAA,SAugCrB8J,6BAvgCqB,GAugCYvO,KAAD,IAAW;AAEzC,YAAMoD,KAAK,GAAG,KAAK/C,OAAL,CAAa+C,KAA3B;AACA,YAAMhD,MAAM,GAAG,KAAKC,OAAL,CAAaD,MAA5B;AACA,UAAIwG,iBAAiB,GAAG,KAAKvG,OAAL,CAAajB,eAAb,CAA6B2F,GAArD;;AACA,UACE,KAAK1E,OAAL,CAAauE,IAAb,CAAkBC,IAAlB,KAA2B,OAD7B,EAEE;AACAlF,QAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACA;AACD;;AAEDD,MAAAA,OAAO,CAACC,GAAR,CAAY,mCAAZ,EAAiDI,KAAK,CAACC,MAAN,CAAauO,sBAAb,CAAoCrO,KAArF;AAEA,WAAKT,QAAL,CAAc;AAAEb,QAAAA,QAAQ,EAAE,KAAZ;AAAoBQ,QAAAA,kBAAkB,EAAE;AAAxC,OAAd;AAEA,UAAIoP,aAAa,GAAGzO,KAAK,CAACC,MAAN,CAAayO,qBAAb,CAAmCvO,KAAvD;AACA,UAAIwO,cAAc,GAAG3O,KAAK,CAACC,MAAN,CAAauO,sBAAb,CAAoCrO,KAAzD;AACA,UAAIyO,oBAAoB,GAAG5O,KAAK,CAACC,MAAN,CAAa4O,4BAAb,CAA0C1O,KAArE;AACA,UAAI2O,uBAAuB,GAAG9O,KAAK,CAACC,MAAN,CAAa8O,+BAAb,CAA6C5O,KAA3E;AACA,UAAI6O,yBAAyB,GAAGhP,KAAK,CAACC,MAAN,CAAagP,iCAAb,CAA+C9O,KAA/E;AACA,UAAI+O,uBAAuB,GAAGlP,KAAK,CAACC,MAAN,CAAakP,+BAAb,CAA6ChP,KAA3E;AAEA,YAAMiP,gBAAgB,GAAG;AAAEX,QAAAA,aAAF;AAAiBE,QAAAA,cAAjB;AAAiCC,QAAAA,oBAAjC;AAAuDE,QAAAA,uBAAvD;AAAgFE,QAAAA,yBAAhF;AAA2GE,QAAAA;AAA3G,OAAzB;AAEAvP,MAAAA,OAAO,CAACC,GAAR,0DAEYQ,MAFZ,+BAGewG,iBAHf,mCAImB6H,aAJnB,oCAKoBE,cALpB,0CAM0BC,oBAN1B,6CAO6BE,uBAP7B,+CAQ+BE,yBAR/B,6CAS6BE,uBAT7B;AAYE,YAAMhM,WAAW,GAAG;AAClBC,QAAAA,KAAK,gEACyC/C,MADzC,6BACkEwG,iBADlE,8CACuH6H,aADvH,iCAC2JE,cAD3J,uCACsMC,oBADtM,0CAC0PE,uBAD1P,4CACmTE,yBADnT,0CAC4WE,uBAD5W;AADa,OAApB;AAQA7L,MAAAA,KAAK,CAAC,gCAAD,EAAmC;AACtCC,QAAAA,MAAM,EAAE,MAD8B;AAEtCC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeP,WAAf,CAFgC;AAGtCQ,QAAAA,OAAO,EAAE;AACP,0BAAgB,kBADT;AAEPC,UAAAA,aAAa,EAAE,YAAYP;AAFpB;AAH6B,OAAnC,CAAL,CAQGQ,IARH,CAQQC,GAAG,IAAI;AACX,YAAIA,GAAG,CAACC,MAAJ,KAAe,GAAf,IAAsBD,GAAG,CAACC,MAAJ,KAAe,GAAzC,EAA8C;AAC5C,gBAAM,IAAIC,KAAJ,CAAU,SAAV,CAAN;AACD;;AACD,eAAOF,GAAG,CAACG,IAAJ,EAAP;AACD,OAbH,EAcGJ,IAdH,CAcQK,OAAO,IAAI;AACftE,QAAAA,OAAO,CAACC,GAAR,CAAY,sBAAsB4D,IAAI,CAACC,SAAL,CAAeQ,OAAO,CAACC,IAAvB,CAAlC;AAEA,cAAMyB,gBAAgB,GAAG1B,OAAO,CAACC,IAAR,CAAamL,sBAAb,CAAoCtK,GAA7D;AACA,cAAMc,cAAc,GAAG,KAAKlH,KAAL,CAAWM,QAAX,CAAoB6G,IAApB,CAAyBC,CAAC,IAAIA,CAAC,CAAChB,GAAF,KAAUY,gBAAxC,CAAvB;AACA,cAAMK,iBAAiB,GAAG,KAAKrH,KAAL,CAAWM,QAAX,CAAoBgH,OAApB,CAA4BJ,cAA5B,CAA1B;AACA,cAAMK,WAAW,GAAG,KAAKvH,KAAL,CAAWM,QAAX,CAAoBkH,MAApB,CAA2BH,iBAA3B,EAA8C,CAA9C,CAApB;AACArG,QAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiC4D,IAAI,CAACC,SAAL,CAAeoC,cAAf,CAAjC,EAAgE,wBAAhE,EAA0FG,iBAA1F,EAA6G,kBAA7G,EAAiIE,WAAjI;AAEA,aAAKvH,KAAL,CAAWM,QAAX,CAAoBsF,IAApB,CAAyBsB,cAAzB;AACA,aAAKxF,OAAL,CAAapB,QAAb,GAAwB,KAAKN,KAAL,CAAWM,QAAnC;AACA,aAAKyH,aAAL;AACD,OA1BH,EA2BGlC,KA3BH,CA2BSC,GAAG,IAAI;AACZ9E,QAAAA,OAAO,CAACC,GAAR,CAAY6E,GAAZ;AACD,OA7BH;AA+BH,KAnlCoB;;AAAA,SAslCrB6K,6BAtlCqB,GAslCYtP,KAAD,IAAW;AAEzC,YAAMoD,KAAK,GAAG,KAAK/C,OAAL,CAAa+C,KAA3B;AACA,YAAMhD,MAAM,GAAG,KAAKC,OAAL,CAAaD,MAA5B;AACA,UAAIwG,iBAAiB,GAAG,KAAKvG,OAAL,CAAajB,eAAb,CAA6B2F,GAArD;;AACA,UACE,KAAK1E,OAAL,CAAauE,IAAb,CAAkBC,IAAlB,KAA2B,OAD7B,EAEE;AACAlF,QAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACA;AACD;;AAEDD,MAAAA,OAAO,CAACC,GAAR,CAAY,mCAAZ,EAAiDI,KAAK,CAACC,MAAN,CAAasP,sBAAb,CAAoCpP,KAArF;AAEA,WAAKT,QAAL,CAAc;AAAEb,QAAAA,QAAQ,EAAE,KAAZ;AAAoBQ,QAAAA,kBAAkB,EAAE;AAAxC,OAAd;AAEA,UAAImQ,aAAa,GAAGxP,KAAK,CAACC,MAAN,CAAawP,qBAAb,CAAmCtP,KAAvD;AACA,UAAIuP,cAAc,GAAG1P,KAAK,CAACC,MAAN,CAAasP,sBAAb,CAAoCpP,KAAzD;AACA,UAAIwP,oBAAoB,GAAG3P,KAAK,CAACC,MAAN,CAAa2P,4BAAb,CAA0CzP,KAArE;AACA,UAAI0P,aAAa,GAAG7P,KAAK,CAACC,MAAN,CAAa6P,qBAAb,CAAmC3P,KAAvD;AACA,UAAI4P,kBAAkB,GAAG/P,KAAK,CAACC,MAAN,CAAa+P,0BAAb,CAAwC7P,KAAjE;AACA,UAAI8P,aAAa,GAAGjQ,KAAK,CAACC,MAAN,CAAaiQ,qBAAb,CAAmC/P,KAAvD;AACA,UAAIgQ,uBAAuB,GAAGnQ,KAAK,CAACC,MAAN,CAAamQ,+BAAb,CAA6CjQ,KAA3E;AACA,UAAIkQ,yBAAyB,GAAGrQ,KAAK,CAACC,MAAN,CAAaqQ,iCAAb,CAA+CnQ,KAA/E;AACA,UAAIoQ,uBAAuB,GAAGvQ,KAAK,CAACC,MAAN,CAAauQ,+BAAb,CAA6CrQ,KAA3E;AAEA,YAAMsQ,gBAAgB,GAAG;AAAEjB,QAAAA,aAAF;AAAiBE,QAAAA,cAAjB;AAAiCC,QAAAA,oBAAjC;AAAuDE,QAAAA,aAAvD;AAAsEE,QAAAA,kBAAtE;AAA0FE,QAAAA,aAA1F;AAAyGE,QAAAA,uBAAzG;AAAkIE,QAAAA,yBAAlI;AAA6JE,QAAAA;AAA7J,OAAzB;AAEA5Q,MAAAA,OAAO,CAACC,GAAR,0DAEYQ,MAFZ,+BAGewG,iBAHf,mCAImB4I,aAJnB,oCAKoBE,cALpB,0CAM0BC,oBAN1B,mCAOmBE,aAPnB,wCAQwBE,kBARxB,mCASmBE,aATnB,6CAU6BE,uBAV7B,+CAW+BE,yBAX/B,6CAY6BE,uBAZ7B;AAeE,YAAMrN,WAAW,GAAG;AAClBC,QAAAA,KAAK,gEACyC/C,MADzC,6BACkEwG,iBADlE,8CACuH4I,aADvH,iCAC2JE,cAD3J,gCAC+LO,aAD/L,uCACyON,oBADzO,gCACmRE,aADnR,qCAC2TE,kBAD3T,0CAC6WI,uBAD7W,4CACsaE,yBADta,0CAC+dE,uBAD/d;AADa,OAApB;AAQAlN,MAAAA,KAAK,CAAC,gCAAD,EAAmC;AACtCC,QAAAA,MAAM,EAAE,MAD8B;AAEtCC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeP,WAAf,CAFgC;AAGtCQ,QAAAA,OAAO,EAAE;AACP,0BAAgB,kBADT;AAEPC,UAAAA,aAAa,EAAE,YAAYP;AAFpB;AAH6B,OAAnC,CAAL,CAQGQ,IARH,CAQQC,GAAG,IAAI;AACX,YAAIA,GAAG,CAACC,MAAJ,KAAe,GAAf,IAAsBD,GAAG,CAACC,MAAJ,KAAe,GAAzC,EAA8C;AAC5C,gBAAM,IAAIC,KAAJ,CAAU,SAAV,CAAN;AACD;;AACD,eAAOF,GAAG,CAACG,IAAJ,EAAP;AACD,OAbH,EAcGJ,IAdH,CAcQK,OAAO,IAAI;AACftE,QAAAA,OAAO,CAACC,GAAR,CAAY,sBAAsB4D,IAAI,CAACC,SAAL,CAAeQ,OAAO,CAACC,IAAvB,CAAlC;AAEA,cAAMyB,gBAAgB,GAAG1B,OAAO,CAACC,IAAR,CAAawM,sBAAb,CAAoC3L,GAA7D;AACA,cAAMc,cAAc,GAAG,KAAKlH,KAAL,CAAWM,QAAX,CAAoB6G,IAApB,CAAyBC,CAAC,IAAIA,CAAC,CAAChB,GAAF,KAAUY,gBAAxC,CAAvB;AACA,cAAMK,iBAAiB,GAAG,KAAKrH,KAAL,CAAWM,QAAX,CAAoBgH,OAApB,CAA4BJ,cAA5B,CAA1B;AACA,cAAMK,WAAW,GAAG,KAAKvH,KAAL,CAAWM,QAAX,CAAoBkH,MAApB,CAA2BH,iBAA3B,EAA8C,CAA9C,CAApB;AACArG,QAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiC4D,IAAI,CAACC,SAAL,CAAeoC,cAAf,CAAjC,EAAgE,wBAAhE,EAA0FG,iBAA1F,EAA6G,kBAA7G,EAAiIE,WAAjI;AAEA,aAAKvH,KAAL,CAAWM,QAAX,CAAoBsF,IAApB,CAAyBsB,cAAzB;AACA,aAAKxF,OAAL,CAAapB,QAAb,GAAwB,KAAKN,KAAL,CAAWM,QAAnC;AACA,aAAKyH,aAAL;AACD,OA1BH,EA2BGlC,KA3BH,CA2BSC,GAAG,IAAI;AACZ9E,QAAAA,OAAO,CAACC,GAAR,CAAY6E,GAAZ;AACD,OA7BH;AA+BH,KAxqCoB;;AAAA,SA4qCrBkM,2BA5qCqB,GA4qCU3Q,KAAD,IAAW;AAEvC,YAAMoD,KAAK,GAAG,KAAK/C,OAAL,CAAa+C,KAA3B;AACA,YAAMhD,MAAM,GAAG,KAAKC,OAAL,CAAaD,MAA5B;AACA,UAAIwG,iBAAiB,GAAG,KAAKvG,OAAL,CAAajB,eAAb,CAA6B2F,GAArD;;AACA,UACE,KAAK1E,OAAL,CAAauE,IAAb,CAAkBC,IAAlB,KAA2B,OAD7B,EAEE;AACAlF,QAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACA;AACD;;AAEDD,MAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ,EAA+CI,KAAK,CAACC,MAAN,CAAa2Q,oBAAb,CAAkCzQ,KAAjF;AAEA,WAAKT,QAAL,CAAc;AAAEb,QAAAA,QAAQ,EAAE,KAAZ;AAAoBQ,QAAAA,kBAAkB,EAAE;AAAxC,OAAd;AAEA,UAAIwR,WAAW,GAAG7Q,KAAK,CAACC,MAAN,CAAa6Q,mBAAb,CAAiC3Q,KAAnD;AACA,UAAI4Q,YAAY,GAAG/Q,KAAK,CAACC,MAAN,CAAa2Q,oBAAb,CAAkCzQ,KAArD;AACA,UAAI6Q,WAAW,GAAGhR,KAAK,CAACC,MAAN,CAAagR,mBAAb,CAAiC9Q,KAAnD;AACA,UAAI+Q,kBAAkB,GAAGlR,KAAK,CAACC,MAAN,CAAakR,0BAAb,CAAwChR,KAAjE;AACA,UAAIiR,aAAa,GAAGpR,KAAK,CAACC,MAAN,CAAaoR,qBAAb,CAAmClR,KAAvD;AACA,UAAImR,WAAW,GAAGtR,KAAK,CAACC,MAAN,CAAasR,mBAAb,CAAiCpR,KAAnD;AACA,UAAIqR,YAAY,GAAGxR,KAAK,CAACC,MAAN,CAAawR,oBAAb,CAAkCtR,KAArD;AACA,UAAIuR,qBAAqB,GAAG1R,KAAK,CAACC,MAAN,CAAa0R,6BAAb,CAA2CxR,KAAvE;AACA,UAAIyR,uBAAuB,GAAG5R,KAAK,CAACC,MAAN,CAAa4R,+BAAb,CAA6C1R,KAA3E;AACA,UAAI2R,qBAAqB,GAAG9R,KAAK,CAACC,MAAN,CAAa8R,6BAAb,CAA2C5R,KAAvE;AAEA,YAAM6R,cAAc,GAAG;AAAEnB,QAAAA,WAAF;AAAeE,QAAAA,YAAf;AAA6BC,QAAAA,WAA7B;AAA0CE,QAAAA,kBAA1C;AAA8DE,QAAAA,aAA9D;AAA6EE,QAAAA,WAA7E;AAA0FE,QAAAA,YAA1F;AAAwGE,QAAAA,qBAAxG;AAA+HE,QAAAA,uBAA/H;AAAwJE,QAAAA;AAAxJ,OAAvB;AAEAnS,MAAAA,OAAO,CAACC,GAAR,0DAEYQ,MAFZ,+BAGewG,iBAHf,iCAIiBiK,WAJjB,kCAKkBE,YALlB,iCAMiBC,WANjB,wCAOwBE,kBAPxB,mCAQmBE,aARnB,iCASiBE,WATjB,kCAUkBE,YAVlB,2CAW2BE,qBAX3B,6CAY6BE,uBAZ7B,2CAa2BE,qBAb3B;AAgBE,YAAM5O,WAAW,GAAG;AAClBC,QAAAA,KAAK,8DACuC/C,MADvC,6BACgEwG,iBADhE,4CACmHiK,WADnH,+BACmJE,YADnJ,8BACmLC,WADnL,qCACyNE,kBADzN,8BAC+PE,aAD/P,0BAC4RE,WAD5R,6BAC0TE,YAD1T,wCACoWE,qBADpW,0CACyZE,uBADzZ,wCAC8cE,qBAD9c;AADa,OAApB;AAQAzO,MAAAA,KAAK,CAAC,gCAAD,EAAmC;AACtCC,QAAAA,MAAM,EAAE,MAD8B;AAEtCC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeP,WAAf,CAFgC;AAGtCQ,QAAAA,OAAO,EAAE;AACP,0BAAgB,kBADT;AAEPC,UAAAA,aAAa,EAAE,YAAYP;AAFpB;AAH6B,OAAnC,CAAL,CAQGQ,IARH,CAQQC,GAAG,IAAI;AACX,YAAIA,GAAG,CAACC,MAAJ,KAAe,GAAf,IAAsBD,GAAG,CAACC,MAAJ,KAAe,GAAzC,EAA8C;AAC5C,gBAAM,IAAIC,KAAJ,CAAU,SAAV,CAAN;AACD;;AACD,eAAOF,GAAG,CAACG,IAAJ,EAAP;AACD,OAbH,EAcGJ,IAdH,CAcQK,OAAO,IAAI;AACftE,QAAAA,OAAO,CAACC,GAAR,CAAY,sBAAsB4D,IAAI,CAACC,SAAL,CAAeQ,OAAO,CAACC,IAAvB,CAAlC;AAEA,cAAMyB,gBAAgB,GAAG1B,OAAO,CAACC,IAAR,CAAa+N,oBAAb,CAAkClN,GAA3D;AACA,cAAMc,cAAc,GAAG,KAAKlH,KAAL,CAAWM,QAAX,CAAoB6G,IAApB,CAAyBC,CAAC,IAAIA,CAAC,CAAChB,GAAF,KAAUY,gBAAxC,CAAvB;AACA,cAAMK,iBAAiB,GAAG,KAAKrH,KAAL,CAAWM,QAAX,CAAoBgH,OAApB,CAA4BJ,cAA5B,CAA1B;AACA,cAAMK,WAAW,GAAG,KAAKvH,KAAL,CAAWM,QAAX,CAAoBkH,MAApB,CAA2BH,iBAA3B,EAA8C,CAA9C,CAApB;AACArG,QAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiC4D,IAAI,CAACC,SAAL,CAAeoC,cAAf,CAAjC,EAAgE,wBAAhE,EAA0FG,iBAA1F,EAA6G,kBAA7G,EAAiIE,WAAjI;AAEA,aAAKvH,KAAL,CAAWM,QAAX,CAAoBsF,IAApB,CAAyBsB,cAAzB;AACA,aAAKxF,OAAL,CAAapB,QAAb,GAAwB,KAAKN,KAAL,CAAWM,QAAnC;AACA,aAAKyH,aAAL;AACD,OA1BH,EA2BGlC,KA3BH,CA2BSC,GAAG,IAAI;AACZ9E,QAAAA,OAAO,CAACC,GAAR,CAAY6E,GAAZ;AACD,OA7BH;AAgCH,KAjwCoB;;AAAA,SAswCrByN,yBAtwCqB,GAswCQlS,KAAD,IAAW;AACrCL,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AAGA,UAAIQ,MAAM,GAAG,KAAKC,OAAL,CAAaD,MAA1B;AAEET,MAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ,EAAwCI,KAAK,CAACC,MAAN,CAAakS,cAAb,CAA4BhS,KAApE;AACA,WAAKT,QAAL,CAAc;AAAEZ,QAAAA,SAAS,EAAE;AAAb,OAAd;AAEA,UAAIsT,KAAK,GAAGpS,KAAK,CAACC,MAAN,CAAakS,cAAb,CAA4BhS,KAAxC;AACA,UAAIgD,KAAK,GAAGnD,KAAK,CAACC,MAAN,CAAaoS,cAAb,CAA4BlS,KAAxC;AAEA,WAAKT,QAAL,CAAc;AACZJ,QAAAA,kBAAkB,EAAE8S,KADR;AAEZ7S,QAAAA,kBAAkB,EAAE4D;AAFR,OAAd;;AAKA,UACEiP,KAAK,CAACrP,IAAN,GAAaC,MAAb,KAAwB,CAAxB,IACAG,KAAK,CAACJ,IAAN,GAAaC,MAAb,KAAwB,CAF1B,EAGE;AACArD,QAAAA,OAAO,CAACC,GAAR,CAAY,gDAAZ;AACA;AACD;;AAID,YAAM0S,MAAM,GAAG;AAAEF,QAAAA,KAAF;AAASjP,QAAAA;AAAT,OAAf;AACAxD,MAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ,EAAwC4D,IAAI,CAACC,SAAL,CAAe6O,MAAf,CAAxC;AAEA,YAAMpP,WAAW,GAAG;AAClBC,QAAAA,KAAK,mEAE0B/C,MAF1B,0BAE8CgS,KAF9C,0BAEiEjP,KAFjE;AADa,OAApB;AASA,YAAMC,KAAK,GAAG,KAAK/C,OAAL,CAAa+C,KAA3B;AAEAC,MAAAA,KAAK,CAAC,gCAAD,EAAmC;AACtCC,QAAAA,MAAM,EAAE,MAD8B;AAEtCC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeP,WAAf,CAFgC;AAGtCQ,QAAAA,OAAO,EAAE;AACP,0BAAgB,kBADT;AAEPC,UAAAA,aAAa,EAAE,YAAYP;AAFpB;AAH6B,OAAnC,CAAL,CAQGQ,IARH,CAQQC,GAAG,IAAI;AACX,YAAIA,GAAG,CAACC,MAAJ,KAAe,GAAf,IAAsBD,GAAG,CAACC,MAAJ,KAAe,GAAzC,EAA8C;AAC5C,gBAAM,IAAIC,KAAJ,CAAU,SAAV,CAAN;AACD;;AACD,eAAOF,GAAG,CAACG,IAAJ,EAAP;AACD,OAbH,EAcGJ,IAdH,CAcQK,OAAO,IAAI;AACftE,QAAAA,OAAO,CAACC,GAAR,CAAY,sBAAsB4D,IAAI,CAACC,SAAL,CAAeQ,OAAf,CAAlC;AAEA,cAAM/E,cAAc,GAAG+E,OAAO,CAACC,IAAR,CAAaqO,eAApC;AAEA,aAAK7S,QAAL,CAAc;AAAER,UAAAA,cAAc,EAAEA;AAAlB,SAAd;AACAS,QAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuC,KAAKjB,KAAL,CAAWO,cAAlD,EANe,CAOf;AACD,OAtBH,EAuBGsF,KAvBH,CAuBSC,GAAG,IAAI;AACZ9E,QAAAA,OAAO,CAACC,GAAR,CAAY6E,GAAZ;AACD,OAzBH;AA0BH,KAz0CoB;;AAAA,SA60CnBC,kBA70CmB,GA60CE,MAAM;AACzB,WAAKhF,QAAL,CAAc;AAAEd,QAAAA,QAAQ,EAAE,KAAZ;AAAmBC,QAAAA,QAAQ,EAAE,KAA7B;AAAoCC,QAAAA,SAAS,EAAE,KAA/C;AAAsDM,QAAAA,eAAe,EAAE;AAAvE,OAAd;AACD,KA/0CkB;;AAAA,SAi4CnBoT,kBAj4CmB,GAi4CE,MAAM;AACzB7S,MAAAA,OAAO,CAACC,GAAR,CAAY,uCAAZ,EAAqD,KAAKS,OAAL,CAAajB,eAAlE;AAEA,YAAMwH,iBAAiB,GAAG,KAAKvG,OAAL,CAAajB,eAAb,CAA6B2F,GAAvD;AACA,YAAM3E,MAAM,GAAG,KAAKC,OAAL,CAAaqF,YAAb,CAA0BX,GAAzC;;AAEA,UAAG,KAAK1E,OAAL,CAAauE,IAAb,CAAkBC,IAAlB,KAA2B,OAA9B,EAAuC;AACrClF,QAAAA,OAAO,CAACC,GAAR,CAAY,qCAAZ;AACD;;AAED,WAAKF,QAAL,CAAc;AAACV,QAAAA,QAAQ,EAAE;AAAX,OAAd;AAGA,YAAMkE,WAAW,GAAG;AAClBC,QAAAA,KAAK,yDACiC/C,MADjC,4BACuDwG,iBADvD;AADa,OAApB;AAOAvD,MAAAA,KAAK,CAAC,gCAAD,EAAmC;AACtCC,QAAAA,MAAM,EAAE,MAD8B;AAEtCC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeP,WAAf,CAFgC;AAGtCQ,QAAAA,OAAO,EAAE;AACP,0BAAgB,kBADT;AAEPC,UAAAA,aAAa,EAAE,YAAY,KAAKtD,OAAL,CAAa+C;AAFjC;AAH6B,OAAnC,CAAL,CAQGQ,IARH,CAQQC,GAAG,IAAI;AACX,YAAIA,GAAG,CAACC,MAAJ,KAAe,GAAf,IAAsBD,GAAG,CAACC,MAAJ,KAAe,GAAzC,EAA8C;AAC5C,gBAAM,IAAIC,KAAJ,CAAU,SAAV,CAAN;AACD;;AACD,eAAOF,GAAG,CAACG,IAAJ,EAAP;AACD,OAbH,EAcGJ,IAdH,CAcQK,OAAO,IAAI;AACf,YAAIwO,cAAc,GAAGxO,OAAO,CAACC,IAAR,CAAawO,aAAlC;AACA/S,QAAAA,OAAO,CAACC,GAAR,CAAY6S,cAAZ;AAEA,YAAIE,gBAAgB,GAAGF,cAAc,CAAC1N,GAAtC;AACA0N,QAAAA,cAAc,GAAG,KAAK9T,KAAL,CAAWM,QAAX,CAAoB6G,IAApB,CAAyBC,CAAC,IAAIA,CAAC,CAAChB,GAAF,KAAU4N,gBAAxC,CAAjB;AACA,cAAMC,iBAAiB,GAAG,KAAKjU,KAAL,CAAWM,QAAX,CAAoBgH,OAApB,CAA4BwM,cAA5B,CAA1B;AACA,cAAMvM,WAAW,GAAG,KAAKvH,KAAL,CAAWM,QAAX,CAAoBkH,MAApB,CAA2ByM,iBAA3B,EAA8C,CAA9C,CAApB;AACAjT,QAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiC4D,IAAI,CAACC,SAAL,CAAegP,cAAf,CAAjC,EAAgE,qBAAhE,EAAuFG,iBAAvF,EAA0G,kBAA1G,EAA8H1M,WAA9H;AAEA,aAAKxG,QAAL,CAAc;AAAEV,UAAAA,QAAQ,EAAE;AAAZ,SAAd;AAEA,aAAK0H,aAAL;AAED,OA5BH,EA6BGlC,KA7BH,CA6BSC,GAAG,IAAI;AACZ9E,QAAAA,OAAO,CAACC,GAAR,CAAY6E,GAAZ;;AACA,YAAI,KAAKjF,QAAT,EAAmB;AACjB,eAAKE,QAAL,CAAc;AAAEV,YAAAA,QAAQ,EAAE;AAAZ,WAAd;AACD;AACF,OAlCH;AAmCD,KAx7CkB;;AAAA,SAo8CnB6T,iBAp8CmB,GAo8CC/N,SAAS,IAAI;AAE/B,WAAKpF,QAAL,CAAc2E,SAAS,IAAI;AACzB,cAAMjF,eAAe,GAAGiF,SAAS,CAACpF,QAAV,CAAmB6G,IAAnB,CAAwBC,CAAC,IAAIA,CAAC,CAAChB,GAAF,KAAUD,SAAvC,CAAxB;AACA,aAAKzE,OAAL,CAAajB,eAAb,GAA+BA,eAA/B;AACA,aAAKiB,OAAL,CAAauG,iBAAb,GAAiCxH,eAAe,CAAC2F,GAAjD;AACApF,QAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCR,eAAlC;AACA,eAAO;AAAEA,UAAAA,eAAe,EAAEA;AAAnB,SAAP;AACD,OAND;AAOD,KA78CkB;;AAEjB,SAAK0T,SAAL,GAAiBvW,KAAK,CAACwW,SAAN,EAAjB;AACD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClB,SAAKtM,aAAL;AACD;;AA20CDA,EAAAA,aAAa,GAAG;AACd/G,IAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;AACA,UAAMQ,MAAM,GAAG,KAAKC,OAAL,CAAaD,MAA5B;AACA,UAAMgD,KAAK,GAAG,KAAK/C,OAAL,CAAa+C,KAA3B;AAEA,SAAK1D,QAAL,CAAc;AAAEP,MAAAA,SAAS,EAAE;AAAb,KAAd;AACA,UAAM+D,WAAW,GAAG;AAClBC,MAAAA,KAAK,iDACyB/C,MADzB;AADa,KAApB;AAOAiD,IAAAA,KAAK,CAAC,gCAAD,EAAmC;AACtCC,MAAAA,MAAM,EAAE,MAD8B;AAEtCC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeP,WAAf,CAFgC;AAGtCQ,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEPC,QAAAA,aAAa,EAAE,YAAYP;AAFpB;AAH6B,KAAnC,CAAL,CAQGQ,IARH,CAQQC,GAAG,IAAI;AACX,UAAIA,GAAG,CAACC,MAAJ,KAAe,GAAf,IAAsBD,GAAG,CAACC,MAAJ,KAAe,GAAzC,EAA8C;AAC5C,cAAM,IAAIC,KAAJ,CAAU,SAAV,CAAN;AACD;;AACD,aAAOF,GAAG,CAACG,IAAJ,EAAP;AACD,KAbH,EAcGJ,IAdH,CAcQK,OAAO,IAAI;AACftE,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBqE,OAAvB;AACA,YAAMhF,QAAQ,GAAGgF,OAAO,CAACC,IAAR,CAAajF,QAA9B;AACAU,MAAAA,OAAO,CAACC,GAAR,CAAYX,QAAZ;AAEA,WAAKoB,OAAL,CAAapB,QAAb,GAAwB,KAAKN,KAAL,CAAWM,QAAnC;;AACA,UAAI,KAAKO,QAAT,EAAmB;AACjB,aAAKE,QAAL,CAAc;AAAET,UAAAA,QAAQ,EAAEA,QAAZ;AAAsBE,UAAAA,SAAS,EAAE;AAAjC,SAAd;AACD;AAEF,KAxBH,EAyBGqF,KAzBH,CAyBSC,GAAG,IAAI;AACZ9E,MAAAA,OAAO,CAACC,GAAR,CAAY6E,GAAZ;;AACA,UAAI,KAAKjF,QAAT,EAAmB;AACjB,aAAKE,QAAL,CAAc;AAAEP,UAAAA,SAAS,EAAE;AAAb,SAAd;AACD;AACF,KA9BH;AA+BD;;AA6DD8T,EAAAA,oBAAoB,CAAEjT,KAAF,EAAS;AAE3BL,IAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ,EAA0CI,KAAK,CAACC,MAAN,CAAaE,KAAvD;AACA,UAAMiS,KAAK,GAAGpS,KAAK,CAACC,MAAN,CAAaE,KAA3B;AACA,SAAKT,QAAL,CAAc;AAAEL,MAAAA,kBAAkB,EAAE+S;AAAtB,KAAd;AAED;;AAeDc,EAAAA,oBAAoB,GAAG;AACrB,SAAK1T,QAAL,GAAgB,KAAhB;AACD;;AAED2T,EAAAA,MAAM,GAAG;AACP,WAEA,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEA,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEA,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,CAAT;AAAY,MAAA,SAAS,EAAC,YAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADA,EAKA,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,CAAT;AAAY,MAAA,SAAS,EAAC,YAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA,oBAAC,SAAD;AAAW,MAAA,SAAS,EAAC,yBAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA,oBAAC,IAAD;AAAM,MAAA,gBAAgB,EAAC,EAAvB;AAA0B,MAAA,EAAE,EAAC,0BAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA,oBAAC,GAAD;AAAK,MAAA,QAAQ,EAAC,EAAd;AAAiB,MAAA,KAAK,EAAC,OAAvB;AAA+B,MAAA,QAAQ,MAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADA,EAGA,oBAAC,GAAD;AAAK,MAAA,QAAQ,EAAC,eAAd;AAA8B,MAAA,KAAK,EAAC,SAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC,KAAKxU,KAAL,CAAWS,eAAX,KAA+B,IAA/B,IACC,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,iBAAhB;AAAkC,MAAA,IAAI,EAAC,IAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qDAFF,EAMC,KAAKT,KAAL,CAAWQ,SAAX,KAAyB,KAAzB,IACC,KAAKR,KAAL,CAAWS,eAAX,KAA+B,IADhC,IAGE,oBAAC,aAAD;AACC,MAAA,UAAU,EAAE,KAAKiB,OAAL,CAAaD,MAD1B;AAEC,MAAA,OAAO,EAAE,KAAKzB,KAAL,CAAWS,eAFrB;AAGC,MAAA,MAAM,EAAE,KAAKS,yBAHd;AAIC,MAAA,QAAQ,EAAE,KAAK2S,kBAJhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MATH,CAHA,EAqBA,oBAAC,GAAD;AAAK,MAAA,QAAQ,EAAC,eAAd;AAA8B,MAAA,KAAK,EAAC,QAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,iBAAhB;AAAkC,MAAA,OAAO,EAAE,KAAK/S,yBAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADA,EAGE,KAAKd,KAAL,CAAWC,QAAX,IACE,oBAAC,iBAAD;AACA,MAAA,SAAS,MADT;AAEE,MAAA,UAAU,MAFZ;AAGE,MAAA,QAAQ,EAAE,KAAK8F,kBAHjB;AAIE,MAAA,SAAS,EAAE,KAAK3E,mBAJlB;AAKE,MAAA,WAAW,EAAC,SALd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJJ,CArBA,EAmCA,oBAAC,GAAD;AAAK,MAAA,QAAQ,EAAC,yBAAd;AAAwC,MAAA,KAAK,EAAC,cAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC,KAAKpB,KAAL,CAAWS,eAAX,KAA+B,IAA/B,IACC,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,iBAAhB;AAAkC,MAAA,IAAI,EAAC,IAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qDAFF,EAMC,KAAKT,KAAL,CAAWS,eAAX,KAA+B,IAA/B,IACC,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,iBAAhB;AAAkC,MAAA,OAAO,EAAE,KAAKS,yBAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAPF,EASC,KAAKlB,KAAL,CAAWE,QAAX,IACC,KAAKF,KAAL,CAAWS,eAAX,KAA+B,IADhC,IAGC,oBAAC,iBAAD;AACA,MAAA,UAAU,EAAE,KAAKiB,OAAL,CAAaD,MADzB;AAEA,MAAA,SAAS,MAFT;AAGE,MAAA,UAAU,MAHZ;AAIE,MAAA,QAAQ,EAAE,KAAKsE,kBAJjB;AAKE,MAAA,SAAS,EAAE,KAAKC,yBALlB;AAME,MAAA,WAAW,EAAC,SANd;AAOE,MAAA,OAAO,EAAE,KAAKhG,KAAL,CAAWS,eAPtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAZF,CAnCA,EA2DA,oBAAC,GAAD;AAAK,MAAA,QAAQ,EAAC,uBAAd;AAAsC,MAAA,KAAK,EAAC,YAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC,KAAKT,KAAL,CAAWS,eAAX,KAA+B,IAA/B,IACC,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,iBAAhB;AAAkC,MAAA,IAAI,EAAC,IAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qDAFF,EAMC,KAAKT,KAAL,CAAWS,eAAX,KAA+B,IAA/B,IACC,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,iBAAhB;AAAkC,MAAA,KAAK,EAAC,YAAxC;AAAqD,MAAA,OAAO,EAAE,KAAK6T,oBAAL,CAA0BG,IAA1B,CAA+B,IAA/B,CAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAPF,EASC,KAAKzU,KAAL,CAAWU,kBAAX,KAAkC,YAAlC,IACD,KAAKV,KAAL,CAAWS,eAAX,KAA+B,IAD9B,IAGC,oBAAC,2BAAD;AACA,MAAA,UAAU,EAAE,KAAKiB,OAAL,CAAaD,MADzB;AAEA,MAAA,SAAS,MAFT;AAGE,MAAA,UAAU,MAHZ;AAIE,MAAA,QAAQ,EAAE,KAAKsE,kBAJjB;AAKE,MAAA,SAAS,EAAE,KAAKiC,8BALlB;AAME,MAAA,WAAW,EAAC,SANd;AAOE,MAAA,UAAU,EAAE,KAAKtG,OAAL,CAAaqF,YAP3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAZF,EAsBC,KAAK/G,KAAL,CAAWU,kBAAX,KAAkC,YAAlC,IACD,KAAKV,KAAL,CAAWS,eAAX,KAA+B,IAD9B,IAGC,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAoB,KAAKiB,OAAL,CAAaqF,YAAb,CAA0BlF,IAA9C,CADA,EAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAkB,KAAK7B,KAAL,CAAWS,eAAX,CAA2BoB,IAA7C,QAFA,EAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHA,CAzBF,EA+BC,KAAK7B,KAAL,CAAWU,kBAAX,KAAkC,YAAlC,IACD,KAAKV,KAAL,CAAWS,eAAX,KAA+B,IAD9B,IAGC,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,iBAAhB;AAAkC,MAAA,IAAI,EAAC,IAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CADA,CAlCF,CA3DA,EAoGA,oBAAC,GAAD;AAAK,MAAA,QAAQ,EAAC,sBAAd;AAAqC,MAAA,KAAK,EAAC,WAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC,KAAKT,KAAL,CAAWS,eAAX,KAA+B,IAA/B,IACC,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,iBAAhB;AAAkC,MAAA,IAAI,EAAC,IAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qDAFF,EAMC,KAAKT,KAAL,CAAWS,eAAX,KAA+B,IAA/B,IACC,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,iBAAhB;AAAkC,MAAA,KAAK,EAAC,WAAxC;AAAoD,MAAA,OAAO,EAAE,KAAK6T,oBAAL,CAA0BG,IAA1B,CAA+B,IAA/B,CAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAPF,EASC,KAAKzU,KAAL,CAAWU,kBAAX,KAAkC,WAAlC,IACD,KAAKV,KAAL,CAAWS,eAAX,KAA+B,IAD9B,IAGC,oBAAC,0BAAD;AACA,MAAA,UAAU,EAAE,KAAKiB,OAAL,CAAaD,MADzB;AAEA,MAAA,SAAS,MAFT;AAGE,MAAA,UAAU,MAHZ;AAIE,MAAA,QAAQ,EAAE,KAAKsE,kBAJjB;AAKE,MAAA,SAAS,EAAE,KAAKwC,6BALlB;AAME,MAAA,WAAW,EAAC,SANd;AAOE,MAAA,OAAO,EAAE,KAAKvI,KAAL,CAAWS,eAPtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAZF,CApGA,EA2HA,oBAAC,GAAD;AAAK,MAAA,QAAQ,EAAC,sBAAd;AAAqC,MAAA,KAAK,EAAC,WAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC,KAAKT,KAAL,CAAWS,eAAX,KAA+B,IAA/B,IACC,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,iBAAhB;AAAkC,MAAA,IAAI,EAAC,IAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qDAFF,EAMC,KAAKT,KAAL,CAAWS,eAAX,KAA+B,IAA/B,IACC,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,iBAAhB;AAAkC,MAAA,KAAK,EAAC,WAAxC;AAAoD,MAAA,OAAO,EAAE,KAAK6T,oBAAL,CAA0BG,IAA1B,CAA+B,IAA/B,CAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAPF,EASC,KAAKzU,KAAL,CAAWU,kBAAX,KAAkC,WAAlC,IACD,KAAKV,KAAL,CAAWS,eAAX,KAA+B,IAD9B,IAGC,oBAAC,0BAAD;AACM,MAAA,UAAU,EAAE,KAAKiB,OAAL,CAAaD,MAD/B;AAEM,MAAA,SAAS,MAFf;AAGQ,MAAA,UAAU,MAHlB;AAIQ,MAAA,QAAQ,EAAE,KAAKsE,kBAJvB;AAKQ,MAAA,SAAS,EAAE,KAAKsD,6BALxB;AAMQ,MAAA,WAAW,EAAC,SANpB;AAOQ,MAAA,OAAO,EAAE,KAAKrJ,KAAL,CAAWS,eAP5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAZF,CA3HA,EAkJA,oBAAC,GAAD;AAAK,MAAA,QAAQ,EAAC,sBAAd;AAAqC,MAAA,KAAK,EAAC,WAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC,KAAKT,KAAL,CAAWS,eAAX,KAA+B,IAA/B,IACC,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,iBAAhB;AAAkC,MAAA,IAAI,EAAC,IAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qDAFF,EAMC,KAAKT,KAAL,CAAWS,eAAX,KAA+B,IAA/B,IACC,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,iBAAhB;AAAkC,MAAA,KAAK,EAAC,WAAxC;AAAoD,MAAA,OAAO,EAAE,KAAK6T,oBAAL,CAA0BG,IAA1B,CAA+B,IAA/B,CAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAPF,EASC,KAAKzU,KAAL,CAAWU,kBAAX,KAAkC,WAAlC,IACD,KAAKV,KAAL,CAAWS,eAAX,KAA+B,IAD9B,IAGC,oBAAC,0BAAD;AACM,MAAA,UAAU,EAAE,KAAKiB,OAAL,CAAaD,MAD/B;AAEM,MAAA,SAAS,MAFf;AAGQ,MAAA,UAAU,MAHlB;AAIQ,MAAA,QAAQ,EAAE,KAAKsE,kBAJvB;AAKQ,MAAA,SAAS,EAAE,KAAK2O,0BALxB;AAMQ,MAAA,WAAW,EAAC,SANpB;AAOQ,MAAA,OAAO,EAAE,KAAK1U,KAAL,CAAWS,eAP5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAZF,CAlJA,EAyKA,oBAAC,GAAD;AAAK,MAAA,QAAQ,EAAC,mBAAd;AAAkC,MAAA,KAAK,EAAC,QAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC,KAAKT,KAAL,CAAWS,eAAX,KAA+B,IAA/B,IACC,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,iBAAhB;AAAkC,MAAA,IAAI,EAAC,IAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qDAFF,EAMC,KAAKT,KAAL,CAAWS,eAAX,KAA+B,IAA/B,IACC,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,iBAAhB;AAAkC,MAAA,KAAK,EAAC,QAAxC;AAAiD,MAAA,OAAO,EAAE,KAAK6T,oBAAL,CAA0BG,IAA1B,CAA+B,IAA/B,CAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAPF,EASC,KAAKzU,KAAL,CAAWU,kBAAX,KAAkC,QAAlC,IACD,KAAKV,KAAL,CAAWS,eAAX,KAA+B,IAD9B,IAGC,oBAAC,uBAAD;AACM,MAAA,UAAU,EAAE,KAAKiB,OAAL,CAAaD,MAD/B;AAEM,MAAA,SAAS,MAFf;AAGQ,MAAA,UAAU,MAHlB;AAIQ,MAAA,QAAQ,EAAE,KAAKsE,kBAJvB;AAKQ,MAAA,SAAS,EAAE,KAAK+D,6BALxB;AAMQ,MAAA,WAAW,EAAC,SANpB;AAOQ,MAAA,OAAO,EAAE,KAAK9J,KAAL,CAAWS,eAP5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAZF,CAzKA,EAgMA,oBAAC,GAAD;AAAK,MAAA,QAAQ,EAAC,wBAAd;AAAuC,MAAA,KAAK,EAAC,aAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC,KAAKT,KAAL,CAAWS,eAAX,KAA+B,IAA/B,IACC,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,iBAAhB;AAAkC,MAAA,IAAI,EAAC,IAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qDAFF,EAMC,KAAKT,KAAL,CAAWS,eAAX,KAA+B,IAA/B,IACC,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,iBAAhB;AAAkC,MAAA,KAAK,EAAC,YAAxC;AAAqD,MAAA,OAAO,EAAE,KAAK6T,oBAAL,CAA0BG,IAA1B,CAA+B,IAA/B,CAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAPF,EASC,KAAKzU,KAAL,CAAWU,kBAAX,KAAkC,YAAlC,IACD,KAAKV,KAAL,CAAWS,eAAX,KAA+B,IAD9B,IAGC,oBAAC,4BAAD;AACM,MAAA,UAAU,EAAE,KAAKiB,OAAL,CAAaD,MAD/B;AAEM,MAAA,SAAS,MAFf;AAGQ,MAAA,UAAU,MAHlB;AAIQ,MAAA,QAAQ,EAAE,KAAKsE,kBAJvB;AAKQ,MAAA,SAAS,EAAE,KAAK8E,+BALxB;AAMQ,MAAA,WAAW,EAAC,SANpB;AAOQ,MAAA,OAAO,EAAE,KAAK7K,KAAL,CAAWS,eAP5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAZF,CAhMA,EAuNA,oBAAC,GAAD;AAAK,MAAA,QAAQ,EAAC,oBAAd;AAAmC,MAAA,KAAK,EAAC,SAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC,KAAKT,KAAL,CAAWS,eAAX,KAA+B,IAA/B,IACC,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,iBAAhB;AAAkC,MAAA,IAAI,EAAC,IAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qDAFF,EAMC,KAAKT,KAAL,CAAWS,eAAX,KAA+B,IAA/B,IACC,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,iBAAhB;AAAkC,MAAA,KAAK,EAAC,SAAxC;AAAkD,MAAA,OAAO,EAAE,KAAK6T,oBAAL,CAA0BG,IAA1B,CAA+B,IAA/B,CAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAPF,EASC,KAAKzU,KAAL,CAAWU,kBAAX,KAAkC,SAAlC,IACD,KAAKV,KAAL,CAAWS,eAAX,KAA+B,IAD9B,IAGC,oBAAC,wBAAD;AACA,MAAA,UAAU,EAAE,KAAKiB,OAAL,CAAaD,MADzB;AAEA,MAAA,SAAS,MAFT;AAGE,MAAA,UAAU,MAHZ;AAIE,MAAA,QAAQ,EAAE,KAAKsE,kBAJjB;AAKE,MAAA,SAAS,EAAE,KAAKmG,2BALlB;AAME,MAAA,WAAW,EAAC,SANd;AAOE,MAAA,OAAO,EAAE,KAAKlM,KAAL,CAAWS,eAPtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAZF,CAvNA,EA8OA,oBAAC,GAAD;AAAK,MAAA,QAAQ,EAAC,sBAAd;AAAqC,MAAA,KAAK,EAAC,WAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC,KAAKT,KAAL,CAAWS,eAAX,KAA+B,IAA/B,IACC,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,iBAAhB;AAAkC,MAAA,IAAI,EAAC,IAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qDAFF,EAMC,KAAKT,KAAL,CAAWS,eAAX,KAA+B,IAA/B,IACC,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,iBAAhB;AAAkC,MAAA,KAAK,EAAC,WAAxC;AAAoD,MAAA,OAAO,EAAE,KAAK6T,oBAAL,CAA0BG,IAA1B,CAA+B,IAA/B,CAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAPF,EASC,KAAKzU,KAAL,CAAWU,kBAAX,KAAkC,WAAlC,IACD,KAAKV,KAAL,CAAWS,eAAX,KAA+B,IAD9B,IAGC,oBAAC,0BAAD;AACM,MAAA,UAAU,EAAE,KAAKiB,OAAL,CAAaD,MAD/B;AAEM,MAAA,SAAS,MAFf;AAGQ,MAAA,UAAU,MAHlB;AAIQ,MAAA,QAAQ,EAAE,KAAKsE,kBAJvB;AAKQ,MAAA,SAAS,EAAE,KAAKoH,6BALxB;AAMQ,MAAA,WAAW,EAAC,SANpB;AAOQ,MAAA,OAAO,EAAE,KAAKnN,KAAL,CAAWS,eAP5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAZF,CA9OA,EAqQA,oBAAC,GAAD;AAAK,MAAA,QAAQ,EAAC,uBAAd;AAAsC,MAAA,KAAK,EAAC,YAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC,KAAKT,KAAL,CAAWS,eAAX,KAA+B,IAA/B,IACC,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,iBAAhB;AAAkC,MAAA,IAAI,EAAC,IAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qDAFF,EAMC,KAAKT,KAAL,CAAWS,eAAX,KAA+B,IAA/B,IACC,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,iBAAhB;AAAkC,MAAA,KAAK,EAAC,YAAxC;AAAqD,MAAA,OAAO,EAAE,KAAK6T,oBAAL,CAA0BG,IAA1B,CAA+B,IAA/B,CAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAPF,EASC,KAAKzU,KAAL,CAAWU,kBAAX,KAAkC,YAAlC,IACD,KAAKV,KAAL,CAAWS,eAAX,KAA+B,IAD9B,IAGC,oBAAC,2BAAD;AACA,MAAA,UAAU,EAAE,KAAKiB,OAAL,CAAaD,MADzB;AAEA,MAAA,SAAS,MAFT;AAGE,MAAA,UAAU,MAHZ;AAIE,MAAA,QAAQ,EAAE,KAAKsE,kBAJjB;AAKE,MAAA,SAAS,EAAE,KAAKiI,8BALlB;AAME,MAAA,WAAW,EAAC,SANd;AAOE,MAAA,OAAO,EAAE,KAAKhO,KAAL,CAAWS,eAPtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAZF,CArQA,EA4RA,oBAAC,GAAD;AAAK,MAAA,QAAQ,EAAC,0BAAd;AAAyC,MAAA,KAAK,EAAC,eAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC,KAAKT,KAAL,CAAWS,eAAX,KAA+B,IAA/B,IACC,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,iBAAhB;AAAkC,MAAA,IAAI,EAAC,IAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qDAFF,EAMC,KAAKT,KAAL,CAAWS,eAAX,KAA+B,IAA/B,IACC,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,iBAAhB;AAAkC,MAAA,KAAK,EAAC,eAAxC;AAAwD,MAAA,OAAO,EAAE,KAAK6T,oBAAL,CAA0BG,IAA1B,CAA+B,IAA/B,CAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAPF,EASC,KAAKzU,KAAL,CAAWU,kBAAX,KAAkC,eAAlC,IACD,KAAKV,KAAL,CAAWS,eAAX,KAA+B,IAD9B,IAGC,oBAAC,8BAAD;AACM,MAAA,UAAU,EAAE,KAAKiB,OAAL,CAAaD,MAD/B;AAEM,MAAA,SAAS,MAFf;AAGQ,MAAA,UAAU,MAHlB;AAIQ,MAAA,QAAQ,EAAE,KAAKsE,kBAJvB;AAKQ,MAAA,SAAS,EAAE,KAAK8I,iCALxB;AAMQ,MAAA,WAAW,EAAC,SANpB;AAOQ,MAAA,OAAO,EAAE,KAAK7O,KAAL,CAAWS,eAP5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAZF,CA5RA,EAmTA,oBAAC,GAAD;AAAK,MAAA,QAAQ,EAAC,sBAAd;AAAqC,MAAA,KAAK,EAAC,WAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC,KAAKT,KAAL,CAAWS,eAAX,KAA+B,IAA/B,IACC,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,iBAAhB;AAAkC,MAAA,IAAI,EAAC,IAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qDAFF,EAMC,KAAKT,KAAL,CAAWS,eAAX,KAA+B,IAA/B,IACC,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,iBAAhB;AAAkC,MAAA,KAAK,EAAC,WAAxC;AAAoD,MAAA,OAAO,EAAE,KAAK6T,oBAAL,CAA0BG,IAA1B,CAA+B,IAA/B,CAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAPF,EASC,KAAKzU,KAAL,CAAWU,kBAAX,KAAkC,WAAlC,IACD,KAAKV,KAAL,CAAWS,eAAX,KAA+B,IAD9B,IAGC,oBAAC,0BAAD;AACM,MAAA,UAAU,EAAE,KAAKiB,OAAL,CAAaD,MAD/B;AAEM,MAAA,SAAS,MAFf;AAGQ,MAAA,UAAU,MAHlB;AAIQ,MAAA,QAAQ,EAAE,KAAKsE,kBAJvB;AAKQ,MAAA,SAAS,EAAE,KAAK6J,6BALxB;AAMQ,MAAA,WAAW,EAAC,SANpB;AAOQ,MAAA,OAAO,EAAE,KAAK5P,KAAL,CAAWS,eAP5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAZF,CAnTA,EA0UA,oBAAC,GAAD;AAAK,MAAA,QAAQ,EAAC,sBAAd;AAAqC,MAAA,KAAK,EAAC,WAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC,KAAKT,KAAL,CAAWS,eAAX,KAA+B,IAA/B,IACC,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,iBAAhB;AAAkC,MAAA,IAAI,EAAC,IAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qDAFF,EAMC,KAAKT,KAAL,CAAWS,eAAX,KAA+B,IAA/B,IACC,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,iBAAhB;AAAkC,MAAA,KAAK,EAAC,WAAxC;AAAoD,MAAA,OAAO,EAAE,KAAK6T,oBAAL,CAA0BG,IAA1B,CAA+B,IAA/B,CAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAPF,EASC,KAAKzU,KAAL,CAAWU,kBAAX,KAAkC,WAAlC,IACD,KAAKV,KAAL,CAAWS,eAAX,KAA+B,IAD9B,IAGC,oBAAC,0BAAD;AACM,MAAA,UAAU,EAAE,KAAKiB,OAAL,CAAaD,MAD/B;AAEM,MAAA,SAAS,MAFf;AAGQ,MAAA,UAAU,MAHlB;AAIQ,MAAA,QAAQ,EAAE,KAAKsE,kBAJvB;AAKQ,MAAA,SAAS,EAAE,KAAK4K,6BALxB;AAMQ,MAAA,WAAW,EAAC,SANpB;AAOQ,MAAA,OAAO,EAAE,KAAK3Q,KAAL,CAAWS,eAP5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAZF,CA1UA,EAiWA,oBAAC,GAAD;AAAK,MAAA,QAAQ,EAAC,oBAAd;AAAmC,MAAA,KAAK,EAAC,SAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC,KAAKT,KAAL,CAAWS,eAAX,KAA+B,IAA/B,IACC,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,iBAAhB;AAAkC,MAAA,IAAI,EAAC,IAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qDAFF,EAMC,KAAKT,KAAL,CAAWS,eAAX,KAA+B,IAA/B,IACC,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,iBAAhB;AAAkC,MAAA,KAAK,EAAC,SAAxC;AAAkD,MAAA,OAAO,EAAE,KAAK6T,oBAAL,CAA0BG,IAA1B,CAA+B,IAA/B,CAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAPF,EASC,KAAKzU,KAAL,CAAWU,kBAAX,KAAkC,SAAlC,IACD,KAAKV,KAAL,CAAWS,eAAX,KAA+B,IAD9B,IAGC,oBAAC,wBAAD;AACM,MAAA,UAAU,EAAE,KAAKiB,OAAL,CAAaD,MAD/B;AAEM,MAAA,SAAS,MAFf;AAGQ,MAAA,UAAU,MAHlB;AAIQ,MAAA,QAAQ,EAAE,KAAKsE,kBAJvB;AAKQ,MAAA,SAAS,EAAE,KAAKiM,2BALxB;AAMQ,MAAA,WAAW,EAAC,SANpB;AAOQ,MAAA,OAAO,EAAE,KAAKhS,KAAL,CAAWS,eAP5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAZF,CAjWA,CADA,CADA,EA4XA,oBAAC,SAAD;AAAW,MAAA,SAAS,EAAC,yBAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA,oBAAC,GAAD;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC,KAAKT,KAAL,CAAWQ,SAAX,GACC,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,GAGC,oBAAC,WAAD;AACE,MAAA,QAAQ,EAAE,KAAKR,KAAL,CAAWM,QADvB;AAEE,MAAA,UAAU,EAAE,KAAKoB,OAAL,CAAaD,MAF3B;AAGE,MAAA,YAAY,EAAE,KAAKyS,iBAHrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJF,CADA,CA5XA,CALA,EAiZA,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,CAAT;AAAY,MAAA,SAAS,EAAC,YAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEA,oBAAC,SAAD;AAAW,MAAA,SAAS,EAAC,0BAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA,oBAAC,GAAD;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKxS,OAAL,CAAa+C,KAAb,IACD,oBAAC,SAAD,CAAW,MAAX;AAAkB,MAAA,EAAE,EAAExG,MAAtB;AAA8B,MAAA,OAAO,EAAC,SAAtC;AAAgD,MAAA,QAAQ,EAAC,IAAzD;AAA8D,MAAA,OAAO,EAAE,KAAKkD,yBAA5E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF,CADA,EAQA,oBAAC,SAAD,CAAW,QAAX;AAAoB,MAAA,QAAQ,EAAC,IAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA,oBAAC,GAAD;AAAK,MAAA,SAAS,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,EAAT;AAAa,MAAA,SAAS,EAAC,mBAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEE,KAAKnB,KAAL,CAAWG,SAAX,KAAyB,IAAzB,IACA,oBAAC,iBAAD;AACA,MAAA,UAAU,EAAE,KAAKuB,OAAL,CAAaD,MADzB;AAEA,MAAA,SAAS,MAFT;AAGE,MAAA,UAAU,MAHZ;AAIE,MAAA,QAAQ,EAAE,KAAKsE,kBAJjB;AAKE,MAAA,SAAS,EAAE,KAAKwN,yBALlB;AAME,MAAA,WAAW,EAAC,QANd;AAOE,MAAA,OAAO,EAAE,KAAK7R,OAAL,CAAajB,eAPxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,CADA,CADA,CARA,CAFA,EA8BA,oBAAC,SAAD;AAAW,MAAA,SAAS,EAAC,4BAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD;AAAM,MAAA,SAAS,EAAC,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD,CAAM,IAAN;AAAW,MAAA,SAAS,EAAC,gBAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,EAEE,oBAAC,IAAD,CAAM,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACU,KAAKT,KAAL,CAAWW,kBADrB,CAFF,EAKE,oBAAC,IAAD,CAAM,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACU,KAAKX,KAAL,CAAWY,kBADrB,CALF,CADF,CADF,CADA,EAcA,oBAAC,GAAD;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEE,KAAKZ,KAAL,CAAWO,cAAX,KAA8B,EAA9B,IACA,oBAAC,iBAAD;AACE,MAAA,cAAc,EAAE,KAAKP,KAAL,CAAWO,cAD7B;AAEE,MAAA,UAAU,EAAE,KAAKmB,OAAL,CAAaD,MAF3B;AAGE,MAAA,QAAQ,EAAE,KAAKsE,kBAHjB;AAII,MAAA,YAAY,EAAE,KAAKmO,iBAJvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,CAdA,CA9BA,CAjZA,CAFA,CAFA,CAFA;AAudD;;AA/7DkC;;AAA/BrU,Y,CAiBG8U,W,GAAcjW,W;AAi7DvB,eAAemB,YAAf","sourcesContent":["import React, { Component } from 'react';\n// import Form from 'react-bootstrap/Form';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Button from 'react-bootstrap/Button';\nimport Accordion from 'react-bootstrap/Accordion';\nimport SidebarPage from './Sidebar';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\nimport Card from 'react-bootstrap/Card';\n\nimport PatientList from '../components/Patients/PatientList/PatientList';\nimport PatientDetail from '../components/Patients/PatientDetail';\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\nimport SearchPatientList from '../components/Patients/PatientList/SearchPatientList';\nimport SearchPatientForm from '../components/Forms/SearchPatientForm';\n\nimport CreatePatientForm from '../components/Forms/CreatePatientForm';\nimport UpdatePatientForm from '../components/Forms/UpdatePatientForm';\nimport UpdatePatientConsultantForm from '../components/Forms/UpdatePatientConsultantForm';\nimport UpdatePatientInsuranceForm from '../components/Forms/UpdatePatientInsuranceForm';\nimport UpdatePatientNextOfKinForm from '../components/Forms/UpdatePatientNextOfKinForm';\nimport UpdatePatientComplaintForm from '../components/Forms/UpdatePatientSurveyForm';\nimport UpdatePatientSurveyForm from '../components/Forms/UpdatePatientComplaintForm';\nimport UpdatePatientExaminationForm from '../components/Forms/UpdatePatientExaminationForm';\nimport UpdatePatientHistoryForm from '../components/Forms/UpdatePatientHistoryForm';\nimport UpdatePatientAllergiesForm from '../components/Forms/UpdatePatientAllergiesForm';\nimport UpdatePatientMedicationForm from '../components/Forms/UpdatePatientMedicationForm';\nimport UpdatePatientInvestigationForm from '../components/Forms/UpdatePatientInvestigationForm';\nimport UpdatePatientDiagnosisForm from '../components/Forms/UpdatePatientDiagnosisForm';\nimport UpdatePatientTreatmentForm from '../components/Forms/UpdatePatientTreatmentForm';\nimport UpdatePatientBillingForm from '../components/Forms/UpdatePatientBillingForm';g\nimport './Users.css';\n\nclass PatientsPage extends Component {\n  state = {\n    creating: false,\n    updating: false,\n    searching: false,\n    updatingArray: false,\n    deleting: false,\n    patients: [],\n    searchPatients: [],\n    isLoading: false,\n    selectedPatient: null,\n    patientUpdateField: null,\n    patientSearchField: null,\n    patientSearchQuery: null,\n  };\n  isActive = true;\n\n  static contextType = AuthContext;\n\n  constructor(props) {\n    super(props);\n    this.nameElRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.fetchPatients();\n  }\n\n\n  startCreatePatientHandler = () => {\n    this.setState({ creating: true });\n    console.log(\"CreatePatientForm...\");\n  };\n  startUpdatePatientHandler = () => {\n    this.setState({ updating: true, updatingArray: true });\n    console.log(\"UpdatePatientForm...\");\n  };\n  startSearchPatientHandler = () => {\n    this.setState({ searching: true });\n    console.log(\"SearchPatientForm...\");\n  };\n\n  modalConfirmHandler = (event) => {\n\n    console.log(\"CreatePatientFormData:  \", event.target.formGridName.value);\n\n    this.setState({ creating: false });\n    const userId = this.context.userId;\n\n    let title = event.target.formGridTitle.value;\n    let name = event.target.formGridName.value;\n    let dob = event.target.formGridDob.value;\n    let age = event.target.formGridAge.value;\n    let gender = event.target.formGridgender.value;\n    let addressNumber = event.target.formGridAddressNumber.value;\n    let addressStreet = event.target.formGridAddressStreet.value;\n    let addressTown = event.target.formGridAddressTown.value;\n    let addressParish = event.target.formGridAddressParish.value;\n    let addressPostOffice = event.target.formGridAddressPostOffice.value;\n    let contactPhone = event.target.formGridContactPhone.value;\n    let contactEmail = event.target.formGridContactEmail.value;\n    let registrationDate = event.target.formGridRegistrationDate.value;\n    let referralDate = event.target.formGridReferralDate.value;\n    let expirationDate = event.target.formGridExpirationDate.value;\n    let attendingPhysicianName = event.target.formGridAttendingPhysicianName.value;\n    let attendingPhysicianEmail = event.target.formGridAttendingPhysicianEmail.value;\n    let attendingPhysicianPhone = event.target.formGridAttendingPhysicianPhone.value;\n    let referringDoctorName = event.target.formGridReferringDoctorName.value;\n    let referringDoctorEmail = event.target.formGridReferringDoctorEmail.value;\n    let referringDoctorPhone = event.target.formGridReferringDoctorPhone.value;\n\n\n    if (\n      name.trim().length === 0 ||\n      title.trim().length === 0 ||\n      name.trim().length === 0 ||\n      dob.trim().length === 0 ||\n      age.trim().length === 0 ||\n      gender.trim().length === 0 ||\n      addressNumber.trim().length === 0 ||\n      addressStreet.trim().length === 0 ||\n      addressTown.trim().length === 0 ||\n      addressParish.trim().length === 0 ||\n      addressPostOffice.trim().length === 0 ||\n      contactPhone.trim().length === 0 ||\n      contactEmail.trim().length === 0 ||\n      registrationDate.trim().length === 0 ||\n      referralDate.trim().length === 0 ||\n      expirationDate.trim().length === 0 ||\n      attendingPhysicianName.trim().length === 0 ||\n      attendingPhysicianEmail.trim().length === 0 ||\n      attendingPhysicianPhone.trim().length === 0 ||\n      referringDoctorName.trim().length === 0 ||\n      referringDoctorEmail.trim().length === 0 ||\n      referringDoctorPhone.trim().length === 0\n\n    ) {\n      console.log(\"blank fields detected!!!...Please try again...\");\n      return;\n    }\n\n    const patient = { title, name, dob, age, gender, addressNumber, addressStreet, addressTown, addressParish, addressPostOffice, contactPhone, contactEmail, registrationDate, referralDate, expirationDate, attendingPhysicianName, attendingPhysicianEmail, attendingPhysicianPhone, referringDoctorName, referringDoctorEmail, referringDoctorPhone };\n    console.log(`\n      craeting patient...\n      title: ${title},\n      name: ${name},\n      dob: ${dob},\n      age: ${age},\n      gender: ${gender},\n      addressNumber: ${addressNumber},\n      addressStreet: ${addressStreet},\n      addressTown: ${addressTown},\n      addressParish: ${addressParish},\n      addressPostOffice: ${addressPostOffice},\n      contactPhone: ${contactPhone},\n      contactEmail: ${contactEmail},\n      registrationDate: ${registrationDate},\n      referralDate: ${referralDate},\n      expirationDate: ${expirationDate},\n      attendingPhysicianName: ${attendingPhysicianName},\n      attendingPhysicianEmail: ${attendingPhysicianEmail},\n      attendingPhysicianPhone: ${attendingPhysicianPhone},\n      referringDoctorName: ${referringDoctorName},\n      referringDoctorEmail: ${referringDoctorEmail},\n      referringDoctorPhone: ${referringDoctorPhone},\n      `);\n\n    const requestBody = {\n      query: `\n          mutation {createPatient(userId:\\\"5debdfd99da4842aafe3af56\\\", patientInput:{title:\\\"Mr\\\",name:\\\"test patient 00876909\\\",dob:\\\"1997-04-20\\\",age:36,gender:\\\"male\\\",addressNumber:7775,addressStreet:\\\"test drive7775\\\",addressTown:\\\"test city7775\\\",addressParish:\\\"Westmoreland\\\",addressPostOffice:\\\"n/a\\\",contactPhone:\\\"18769095112\\\",contactEmail:\\\"test55@testmail.com\\\",registrationDate:\\\"2017-02-25\\\",referralDate:\\\"2018-05-01\\\",expirationDate:\\\"2035-10-05\\\",referringDoctorName:\\\"Dr. Test 7775\\\",referringDoctorEmail:\\\"dr7775@drmail.com\\\",referringDoctorPhone:\\\"123456789\\\",attendingPhysicianName:\\\"Dr. Test7775\\\",attendingPhysicianEmail:\\\"7775@drmail.com\\\",attendingPhysicianPhone:\\\"12345678909\\\",occupationRole:\\\"tester7775\\\",occupationEmployer:\\\"Tests & Co\\\",occupationEmployerContactPhone:\\\"123456789098\\\",occupationEmployerContactEmail:\\\"testbos7775@testmail.com\\\"})\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n        `};\n\n    const token = this.context.token;\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(`\n          response data:\n          ${JSON.stringify(resData.data.createPatient)}\n          `);\n        const newPatient = resData.data.createPatient;\n        this.setState(prevState => {\n          const updatedPatients = [...prevState.patients];\n          updatedPatients.push(newPatient);\n\n          return { patients: updatedPatients };\n        });\n\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  modalCancelHandler = () => {\n    this.setState({ creating: false, updating: false, selectedPatient: null });\n  };\n\n\n  modalConfirmUpdateHandler = (event) => {\n\n    if(this.context.user.role !== 'admin') {\n      console.log(\"Not the Admin! No edit permission!!\");\n\n    }\n\n    const userId = this.context.userId;\n    const patientId = this.context.selectedPatient._id;\n\n    console.log(\"UpdatePatientFormData:  \", event.target.formGridName.value);\n\n\n    this.setState({ updating: false });\n    let name = event.target.formGridName.value;\n    let dob = event.target.formGridDob.value;\n    let age = event.target.formGridAge.value;\n    let address = event.target.formGridAddress.value;\n    let contactPhone = event.target.formGridContactPhone.value;\n    let contactEmail = event.target.formGridContactEmail.value;\n    let registrationDate = event.target.formGridRegistrationDate.value;\n    let referringDoctorName = event.target.formGridReferringDoctorName.value;\n    let referringDoctorEmail = event.target.formGridReferringDoctorEmail.value;\n    let referringDoctorPhone = event.target.formGridReferringDoctorPhone.value;\n    let occupationRole = event.target.formGridOccupationRole.value;\n    let occupationEmployer = event.target.formGridOccupationEmployer.value;\n    let occupationEmployerContactPhone = event.target.formGridOccupationEmployerContactPhone.value;\n    let occupationEmployerContactEmail = event.target.formGridOccupationEmployerContactEmail.value;\n\n\n    if (name.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      name  = this.context.selectedUser.name;\n      // return;\n    }\n    if (dob.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      dob  = this.context.selectedUser.dob;\n    }\n    if (age.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      age  = this.context.selectedUser.age;\n    }\n    if (address.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      address  = this.context.selectedUser.address;\n    }\n    if (contactPhone.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      contactPhone  = this.context.selectedUser.contactPhone;\n    }\n    if (contactEmail.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      contactEmail  = this.context.selectedUser.contactEmail;\n    }\n    if (registrationDate.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      registrationDate  = this.context.selectedUser.registrationDate;\n    }\n    if (referringDoctorName.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      referringDoctorName  = this.context.selectedUser.referringDoctorName;\n    }\n    if (referringDoctorEmail.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      referringDoctorEmail  = this.context.selectedUser.referringDoctorEmail;\n    }\n    if (referringDoctorPhone.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      referringDoctorPhone  = this.context.selectedUser.referringDoctorPhone;\n    }\n    if (occupationRole.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      occupationRole  = this.context.selectedUser.occupationRole;\n    }\n    if (occupationEmployer.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      occupationEmployer  = this.context.selectedUser.occupationEmployer;\n    }\n    if (occupationEmployerContactEmail.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      occupationEmployerContactEmail  = this.context.selectedUser.occupationEmployerContactEmail;\n    }\n    if (occupationEmployerContactPhone.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      occupationEmployerContactPhone  = this.context.selectedUser.occupationEmployerContactPhone;\n    }\n\n\n    const patient = { name, dob, age, address, contactPhone, contactEmail, registrationDate, referringDoctorName, referringDoctorEmail, referringDoctorPhone, occupationRole, occupationEmployer, occupationEmployerContactPhone, occupationEmployerContactEmail};\n    console.log(`\n      updating patient...\n      userId: ${userId},\n      patientId: ${patientId},\n      name: ${name},\n      dob: ${dob},\n      age: ${age},\n      address: ${address},\n      contactPhone: ${contactPhone},\n      contactEmail: ${contactEmail},\n      registrationDate: ${registrationDate},\n      referringDoctorName: ${referringDoctorName},\n      referringDoctorEmail: ${referringDoctorEmail},\n      referringDoctorPhone: ${referringDoctorPhone},\n      occupationRole: ${occupationRole},\n      occupationEmployer: ${occupationEmployer},\n      occupationEmployerContactPhone: ${occupationEmployerContactPhone},\n      occupationEmployerContactEmail: ${occupationEmployerContactEmail},\n      `);\n\n    const requestBody = {\n      query: `\n          mutation {\n            updatePatient(userId:\\\"${userId}\\\", patientId: \"${patientId}\", patientInput: { name: \"${name}\", dob: \"${dob}\",age: ${age}, address: \"${address}\", contactPhone: \"${contactPhone}\", contactEmail: \"${contactEmail}\", registrationDate: \"${registrationDate}\", referringDoctorName: \"${referringDoctorName}\", referringDoctorEmail: \"${referringDoctorEmail}\", referringDoctorPhone: \"${referringDoctorPhone}\", occupationRole: \"${occupationRole}\", occupationEmployer: \"${occupationEmployer}\", occupationEmployerContactPhone: \"${occupationEmployerContactPhone}\", occupationEmployerContactEmail: \"${occupationEmployerContactEmail}\" })\n            {_id,name,address,dob,age,contact{email,phone},registrationDate,referralDate,expirationDate,referringDoctor{name,email,phone},appointments{date,title,type},consultant{date,reference{name,role}},occupation{role,employer,contact{email,phone}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{email,phone}},complaints{date,title,description,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},examination{date,area,type,measure,value,description,attachment{name,format,path}},history{title,type,date,description,attachment{name,format,path}},allergies{title,description,attachment{name,format,path}},medication{title,description,attachment{name,format,path}},investigation{date,title,description,attachment{name,format,path}},diagnosis{date,title,description,attachment{name,format,path}},treatment{date,title,type,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,notes,attachment{name,format,path}}}\n          }\n        `\n    };\n\n    const token = this.context.token;\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n\n        const updatedPatientId = resData.data.updatePatient._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(\n          {\n          _id: resData.data.updatePatient._id,\n          name: resData.data.updatePatient.name,\n          dob: resData.data.updatePatient.dob,\n          age: resData.data.updatePatient.age,\n          address: resData.data.updatePatient.address,\n          contact:{\n            phone: resData.data.updatePatient.contactPhone,\n            email: resData.data.updatePatient.contactEmail\n          },\n          registrationDate: resData.data.updatePatient.registrationDate,\n          referringDoctor: {\n            name: resData.data.updatePatient.referringDoctorName,\n            email: resData.data.updatePatient.referringDoctorEmail,\n            phone: resData.data.updatePatient.referringDoctorPhone,\n          },\n          occupation: {\n            role: resData.data.updatePatient.occupationRole,\n            employer: resData.data.updatePatient.occupationEmployer,\n            contact: {\n              phone: resData.data.updatePatient.occupationEmployerContactPhone,\n              email: resData.data.updatePatient.occupationEmployerContactEmail\n            }\n          }\n        }\n        );\n\n        // if (this.state.updatingArray === false && this.state.updating === false) {\n        //   console.log(\"update and updateArray complete...now fetching users\");\n        //\n        // }\n        this.fetchPatients();\n\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\nupdatePatientConsultantHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n  const patientConsultantReference = this.context.selectedUser._id;\n  if(\n    this.context.user.role !== 'admin'\n  ) {\n    console.log(\"No edit permission!!\");\n    return;\n  }\n\n  console.log(\"UpdatePatientConsultantFormData:  \", event.target.formGridConsultantDate.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let consultantDate = event.target.formGridConsultantDate.value;\n\n  const patientConsultant = { consultantDate, patientConsultantReference };\n  console.log(`\n    adding patient consultant item...\n    userId: ${userId},\n    selectedPatientId: ${selectedPatientId},\n    consultantDate: ${consultantDate},\n    consultantReference: ${patientConsultantReference},\n    `);\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientConsultant(userId:\\\"${userId}\\\", patientId:\\\"${selectedPatientId}\\\",patientInput:{consultantDate:\" ${consultantDate}\",consultantReference: \"${patientConsultantReference}\"})\n        {_id,name,address,dob,age,contact{email,phone},registrationDate,referralDate,expirationDate,referringDoctor{name,email,phone},appointments{date,title,type},consultant{date,reference{name,role}},occupation{role,employer,contact{email,phone}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{email,phone}},complaints{date,title,description,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},examination{date,area,type,measure,value,description,attachment{name,format,path}},history{title,type,date,description,attachment{name,format,path}},allergies{title,description,attachment{name,format,path}},medication{title,description,attachment{name,format,path}},investigation{date,title,description,attachment{name,format,path}},diagnosis{date,title,description,attachment{name,format,path}},treatment{date,title,type,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,notes,attachment{name,format,path}}}\n      }\n      `\n    };\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData.data));\n\n          const updatedPatientId = resData.data.updatePatientInsurance._id;\n          const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n          const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n          const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n          console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n          this.state.patients.push(updatedPatient);\n          this.context.patients = this.state.patients;\n          this.fetchPatients();\n        })\n        .catch(err => {\n          console.log(err);\n        });\n\n}\nupdatePatientInsuranceHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n  if(\n    this.context.user.role !== 'admin'\n  ) {\n    console.log(\"No edit permission!!\");\n    return;\n  }\n\n  console.log(\"UpdatePatientInsuranceFormData:  \", event.target.formGridInsuranceCompany.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let insuranceCompany = event.target.formGridInsuranceCompany.value;\n  let insuranceNumber = event.target.formGridInsuranceNumber.value;\n  let insuranceExpiry = event.target.formGridInsuranceExpiry.value;\n  let insuranceDescription = event.target.formGridInsuranceDescription.value;\n  let insuranceSubscriberCompany = event.target.formGridInsuranceSubscriberCompany.value;\n  let insuranceSubscriberDescription = event.target.formGridInsuranceSubscriberDescription.value;\n\n  const patientInsurance = { insuranceCompany, insuranceNumber, insuranceExpiry, insuranceDescription, insuranceSubscriberCompany, insuranceSubscriberDescription };\n  console.log(`\n    adding patient insurance item...\n    userId: ${userId},\n    selectedPatientId: ${selectedPatientId},\n    insuranceCompany: ${insuranceCompany},\n    insuranceNumber: ${insuranceNumber},\n    insuranceExpiry: ${insuranceExpiry},\n    insuranceDescription: ${insuranceDescription},\n    insuranceSubscriberCompany: ${insuranceSubscriberCompany},\n    insuranceSubscriberDescription: ${insuranceSubscriberDescription},\n    `);\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientInsurance(userId:\\\"${userId}\\\", patientId:\\\"${selectedPatientId}\\\",patientInput:{insuranceCompany:\\\"${insuranceCompany}\\\",insuranceNumber:\\\"${insuranceNumber}\\\",insuranceDescription:\\\"${insuranceDescription}\\\",insuranceExpiry:\\\"${insuranceExpiry}\\\",insuranceSubscriberCompany:\\\"${insuranceSubscriberCompany}\\\",insuranceSubscriberDescription:\\\"${insuranceSubscriberDescription}\\\"})\n        {_id,name,address,dob,age,contact{email,phone},registrationDate,referralDate,expirationDate,referringDoctor{name,email,phone},appointments{date,title,type},consultant{date,reference{name,role}},occupation{role,employer,contact{email,phone}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{email,phone}},complaints{date,title,description,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},examination{date,area,type,measure,value,description,attachment{name,format,path}},history{title,type,date,description,attachment{name,format,path}},allergies{title,description,attachment{name,format,path}},medication{title,description,attachment{name,format,path}},investigation{date,title,description,attachment{name,format,path}},diagnosis{date,title,description,attachment{name,format,path}},treatment{date,title,type,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,notes,attachment{name,format,path}}}\n        }\n      `\n    };\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData.data));\n\n          const updatedPatientId = resData.data.updatePatientInsurance._id;\n          const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n          const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n          const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n          console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n          this.state.patients.push(updatedPatient);\n          this.context.patients = this.state.patients;\n          this.fetchPatients();\n        })\n        .catch(err => {\n          console.log(err);\n        });\n\n}\n\nupdatePatientNextOfKinHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n  if(\n    this.context.user.role !== 'admin'\n  ) {\n    console.log(\"No edit permission!!\");\n    return;\n  }\n\n  console.log(\"UpdatePatientNextOfKinFormData:  \", event.target.formGridNextOfKinName.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let nextOfKinName = event.target.formGridNextOfKinName.value;\n  let nextOfKinPhone = event.target.formGridNextOfKinPhone.value;\n  let nextOfKinEmail = event.target.formGridNextOfKinEmail.value;\n\n  const patientNextOfKin = { nextOfKinName, nextOfKinPhone, nextOfKinEmail };\n  console.log(`\n    adding patient nextOfKin item...\n    userId: ${userId},\n    selectedPatientId: ${selectedPatientId},\n    nextOfKinName: ${nextOfKinName},\n    nextOfKinPhone: ${nextOfKinPhone},\n    nextOfKinEmail: ${nextOfKinEmail},\n    `);\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientNextOfKin(userId:\\\"${userId}\\\", patientId:\\\"${selectedPatientId}\\\",patientInput:{nextOfKinName:\\\"${nextOfKinName}\\\",nextOfKinEmail:\\\"granny@kin.mail\\\",nextOfKinPhone:\\\"1234566\\\"})\n        {_id,name,address,dob,age,contact{email,phone},registrationDate,referralDate,expirationDate,referringDoctor{name,email,phone},appointments{date,title,type},consultant{date,reference{name,role}},occupation{role,employer,contact{email,phone}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{email,phone}},complaints{date,title,description,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},examination{date,area,type,measure,value,description,attachment{name,format,path}},history{title,type,date,description,attachment{name,format,path}},allergies{title,description,attachment{name,format,path}},medication{title,description,attachment{name,format,path}},investigation{date,title,description,attachment{name,format,path}},diagnosis{date,title,description,attachment{name,format,path}},treatment{date,title,type,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,notes,attachment{name,format,path}}}\n        }\n      `\n    };\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData.data));\n\n          const updatedPatientId = resData.data.updatePatientNextOfKin._id;\n          const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n          const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n          const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n          console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n          this.state.patients.push(updatedPatient);\n          this.context.patients = this.state.patients;\n          this.fetchPatients();\n        })\n        .catch(err => {\n          console.log(err);\n        });\n}\n\n\nupdatePatientComplaintHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n  if(\n    this.context.user.role !== 'admin'\n  ) {\n    console.log(\"No edit permission!!\");\n    return;\n  }\n\n  console.log(\"UpdatePatientComplaintFormData:  \", event.target.formGridComplaintTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let complaintTitle = event.target.formGridComplaintTitle.value;\n  let complaintDate = event.target.formGridComplaintDate.value;\n  let complaintDescription = event.target.formGridComplaintDescription.value;\n  let complaintAttachmentName = event.target.formGridComplaintAttachmentName.value;\n  let complaintAttachmentFormat = event.target.formGridComplaintAttachmentFormat.value;\n  let complaintAttachmentPath = event.target.formGridComplaintAttachmentPath.value;\n\n  const patientComplaint = { complaintTitle, complaintDate, complaintDescription, complaintAttachmentName, complaintAttachmentFormat, complaintAttachmentPath };\n  console.log(`\n    adding patient complaint...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    complaintTitle: ${complaintTitle},\n    complaintDate: ${complaintDate},\n    complaintDescription: ${complaintDescription},\n    complaintAttachmentName: ${complaintAttachmentName},\n    complaintAttachmentFormat: ${complaintAttachmentFormat},\n    complaintAttachmentPath: ${complaintAttachmentPath},\n    `);\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientComplaint(userId:\\\"${userId}\\\", patientId:\\\"${selectedPatientId}\\\",patientInput:{complaintDate:\\\"${complaintDate}\\\",complaintTitle:\\\"${complaintTitle}\\\",complaintDescription:\\\"${complaintDescription}\\\",complaintAttachmentName:\\\"${complaintAttachmentName}\\\",complaintAttachmentFormat:\\\"${complaintAttachmentFormat}\\\",complaintAttachmentPath:\\\"${complaintAttachmentPath}\\\"})\n        {_id,name,address,dob,age,contact{email,phone},registrationDate,referralDate,expirationDate,referringDoctor{name,email,phone},appointments{date,title,type},consultant{date,reference{name,role}},occupation{role,employer,contact{email,phone}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{email,phone}},complaints{date,title,description,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},examination{date,area,type,measure,value,description,attachment{name,format,path}},history{title,type,date,description,attachment{name,format,path}},allergies{title,description,attachment{name,format,path}},medication{title,description,attachment{name,format,path}},investigation{date,title,description,attachment{name,format,path}},diagnosis{date,title,description,attachment{name,format,path}},treatment{date,title,type,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,notes,attachment{name,format,path}}}\n      }\n      `\n    }\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientComplaint._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(updatedPatient);\n        this.context.patients = this.state.patients;\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n      });\n\n}\n\n\nupdatePatientExaminationHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n  if(\n    this.context.user.role !== 'admin'\n  ) {\n    console.log(\"No edit permission!!\");\n    return;\n  }\n\n  console.log(\"UpdatePatientExaminationFormData:  \", event.target.formGridExaminationArea.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let examinationDate = event.target.formGridExaminationDate.value;\n  let examinationArea = event.target.formGridExaminationArea.value;\n  let examinationType = event.target.formGridExaminationType.value;\n  let examinationMeasure = event.target.formGridExaminationMeasure.value;\n  let examinationValue = event.target.formGridExaminationValue.value;\n  let examinationDescription = event.target.formGridExaminationDescription.value;\n  let examinationAttachmentName = event.target.formGridExaminationAttachmentName.value;\n  let examinationAttachmentFormat = event.target.formGridExaminationAttachmentFormat.value;\n  let examinationAttachmentPath = event.target.formGridExaminationAttachmentPath.value;\n\n  const patientExamination = { examinationArea, examinationType, examinationMeasure, examinationValue, examinationAttachmentName, examinationAttachmentFormat, examinationAttachmentPath };\n\n  console.log(`\n    adding patient examination...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    examinationDate: ${examinationDate},\n    examinationArea: ${examinationArea},\n    examinationType: ${examinationType},\n    examinationMeasure: ${examinationMeasure},\n    examinationValue: ${examinationValue},\n    examinationDescription: ${examinationDescription},\n    examinationAttachmentName: ${examinationAttachmentName},\n    examinationAttachmentFormat: ${examinationAttachmentFormat},\n    examinationAttachmentPath: ${examinationAttachmentPath},\n    `);\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientExamination(userId:\\\"${userId}\\\", patientId:\\\"${selectedPatientId}\\\",patientInput:{examinationDate:\\\"${examinationDate}\\\",examinationArea:\\\"${examinationArea}\\\",examinationType:\\\"${examinationType}\\\",examinationMeasure:\\\"${examinationMeasure}\\\",examinationValue:\\\"${examinationValue}\\\",examinationDescription:\\\"${examinationDescription}\\\",examinationAttachmentName:\\\"${examinationAttachmentName}\\\",examinationAttachmentFormat:\\\"${examinationAttachmentFormat}\\\",examinationAttachmentPath:\\\"${examinationAttachmentPath}\\\"})\n        {_id,name,address,dob,age,contact{email,phone},registrationDate,referralDate,expirationDate,referringDoctor{name,email,phone},appointments{date,title,type},consultant{date,reference{name,role}},occupation{role,employer,contact{email,phone}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{email,phone}},complaints{date,title,description,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},examination{date,area,type,measure,value,description,attachment{name,format,path}},history{title,type,date,description,attachment{name,format,path}},allergies{title,description,attachment{name,format,path}},medication{title,description,attachment{name,format,path}},investigation{date,title,description,attachment{name,format,path}},diagnosis{date,title,description,attachment{name,format,path}},treatment{date,title,type,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,notes,attachment{name,format,path}}}\n      }\n      `\n    }\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientExamination._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(updatedPatient);\n        this.context.patients = this.state.patients;\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n      });\n\n}\n\n\nupdatePatientHistoryHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n  if(\n    this.context.user.role !== 'admin'\n  ) {\n    console.log(\"No edit permission!!\");\n    return;\n  }\n\n  console.log(\"UpdatePatientHistoryFormData:  \", event.target.formGridHistoryTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let historyType = event.target.formGridHistoryType.value;\n  let historyDate = event.target.formGridHistoryDate.value;\n  let historyTitle = event.target.formGridHistoryTitle.value;\n  let historyDescription = event.target.formGridHistoryDescription.value;\n  let historyAttachmentName = event.target.formGridHistoryAttachmentName.value;\n  let historyAttachmentFormat = event.target.formGridHistoryAttachmentFormat.value;\n  let historyAttachmentPath = event.target.formGridHistoryAttachmentPath.value;\n\n  const patientHistory = { historyType, historyDate, historyTitle, historyDescription, historyAttachmentName, historyAttachmentFormat, historyAttachmentPath };\n  console.log(`\n    adding patient history...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    historyType: ${historyType},\n    historyDate: ${historyDate},\n    historyTitle: ${historyTitle},\n    historyDescription: ${historyDescription},\n    historyAttachmentName: ${historyAttachmentName},\n    historyAttachmentFormat: ${historyAttachmentFormat},\n    historyAttachmentPath: ${historyAttachmentPath},\n    `);\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientHistory(userId:\\\"${userId}\\\", patientId:\\\"${selectedPatientId}\\\",patientInput:{historyTitle:\\\"${historyTitle}\\\",historyType:\\\"${historyType}\\\",historyDate:\\\"${historyDate}\\\",historyDescription:\\\"${historyDescription}\\\",historyAttachmentName:\\\"${historyAttachmentName}\\\",historyAttachmentFormat:\\\"${historyAttachmentFormat}\\\",historyAttachmentPath:\\\"${historyAttachmentPath}\\\"})\n        {_id,name,address,dob,age,contact{email,phone},registrationDate,referralDate,expirationDate,referringDoctor{name,email,phone},appointments{date,title,type},consultant{date,reference{name,role}},occupation{role,employer,contact{email,phone}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{email,phone}},complaints{date,title,description,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},examination{date,area,type,measure,value,description,attachment{name,format,path}},history{title,type,date,description,attachment{name,format,path}},allergies{title,description,attachment{name,format,path}},medication{title,description,attachment{name,format,path}},investigation{date,title,description,attachment{name,format,path}},diagnosis{date,title,description,attachment{name,format,path}},treatment{date,title,type,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,notes,attachment{name,format,path}}}\n        }\n      `\n    }\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientHistory._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(updatedPatient);\n        this.context.patients = this.state.patients;\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n      });\n\n}\n\n\nupdatePatientAllergiesHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n  if(\n    this.context.user.role !== 'admin'\n  ) {\n    console.log(\"No edit permission!!\");\n    return;\n  }\n\n  console.log(\"UpdatePatientAllergiesFormData:  \", event.target.formGridAllergiesTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let allergiesTitle = event.target.formGridAllergiesTitle.value;\n  let allergiesDescription = event.target.formGridAllergiesDescription.value;\n  let allergiesAttachmentName = event.target.formGridAllergiesAttachmentName.value;\n  let allergiesAttachmentFormat = event.target.formGridAllergiesAttachmentFormat.value;\n  let allergiesAttachmentPath = event.target.formGridAllergiesAttachmentPath.value;\n\n  const patientAllergies = { allergiesTitle, allergiesDescription, allergiesAttachmentName, allergiesAttachmentFormat, allergiesAttachmentPath };\n\n  console.log(`\n    adding patient allergies...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    allergiesTitle: ${allergiesTitle},\n    allergiesDescription: ${allergiesDescription},\n    allergiesAttachmentName: ${allergiesAttachmentName},\n    allergiesAttachmentFormat: ${allergiesAttachmentFormat},\n    allergiesAttachmentPath: ${allergiesAttachmentPath},\n    `);\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientAllergies(userId:\\\"${userId}\\\", patientId:\\\"${selectedPatientId}\\\",patientInput:{allergiesTitle:\\\"${allergiesTitle}\\\", allergiesDescription:\\\"${allergiesDescription}\\\",allergiesAttachmentName:\\\"${allergiesAttachmentName}\\\",allergiesAttachmentFormat:\\\"${allergiesAttachmentFormat}\\\",allergiesAttachmentPath:\\\"${allergiesAttachmentPath}\\\"})\n        {_id,name,address,dob,age,contact{email,phone},registrationDate,referralDate,expirationDate,referringDoctor{name,email,phone},appointments{date,title,type},consultant{date,reference{name,role}},occupation{role,employer,contact{email,phone}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{email,phone}},complaints{date,title,description,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},examination{date,area,type,measure,value,description,attachment{name,format,path}},history{title,type,date,description,attachment{name,format,path}},allergies{title,description,attachment{name,format,path}},medication{title,description,attachment{name,format,path}},investigation{date,title,description,attachment{name,format,path}},diagnosis{date,title,description,attachment{name,format,path}},treatment{date,title,type,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,notes,attachment{name,format,path}}}\n      }\n      `\n    }\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientAllergies._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(updatedPatient);\n        this.context.patients = this.state.patients;\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n      });\n\n\n}\n\n\nupdatePatientMedicationHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n  if(\n    this.context.user.role !== 'admin'\n  ) {\n    console.log(\"No edit permission!!\");\n    return;\n  }\n\n  console.log(\"UpdatePatientMedicationFormData:  \", event.target.formGridMedicationTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let medicationTitle = event.target.formGridMedicationTitle.value;\n  let medicationDescription = event.target.formGridMedicationDescription.value;\n  let medicationAttachmentName = event.target.formGridMedicationAttachmentName.value;\n  let medicationAttachmentFormat = event.target.formGridMedicationAttachmentFormat.value;\n  let medicationAttachmentPath = event.target.formGridMedicationAttachmentPath.value;\n\n  const patientMedication = { medicationTitle, medicationDescription, medicationAttachmentName, medicationAttachmentFormat, medicationAttachmentPath };\n\n  console.log(`\n    adding patient medication...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    medicationTitle: ${medicationTitle},\n    medicationDescription: ${medicationDescription},\n    medicationAttachmentName: ${medicationAttachmentName},\n    medicationAttachmentFormat: ${medicationAttachmentFormat},\n    medicationAttachmentPath: ${medicationAttachmentPath},\n    `);\n\n    const requestBody = {\n      query:`\n      mutation {updatePatientMedication(userId:\\\"${userId}\\\", patientId:\\\"${selectedPatientId}\\\",patientInput:{medicationTitle:\\\"${medicationTitle}\\\", medicationDescription:\\\"${medicationDescription}\\\",medicationAttachmentName:\\\"${medicationAttachmentName}\\\",medicationAttachmentFormat:\\\"${medicationAttachmentFormat}\\\",medicationAttachmentPath:\\\"${medicationAttachmentPath}\\\"})\n      {_id,name,address,dob,age,contact{email,phone},registrationDate,referralDate,expirationDate,referringDoctor{name,email,phone},appointments{date,title,type},consultant{date,reference{name,role}},occupation{role,employer,contact{email,phone}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{email,phone}},complaints{date,title,description,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},examination{date,area,type,measure,value,description,attachment{name,format,path}},history{title,type,date,description,attachment{name,format,path}},allergies{title,description,attachment{name,format,path}},medication{title,description,attachment{name,format,path}},investigation{date,title,description,attachment{name,format,path}},diagnosis{date,title,description,attachment{name,format,path}},treatment{date,title,type,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,notes,attachment{name,format,path}}}\n        }\n      `\n    }\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientMedication._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(updatedPatient);\n        this.context.patients = this.state.patients;\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n      });\n\n}\n\n\nupdatePatientInvestigationHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n  if(\n    this.context.user.role !== 'admin'\n  ) {\n    console.log(\"No edit permission!!\");\n    return;\n  }\n\n  console.log(\"UpdatePatientInvestigationFormData:  \", event.target.formGridInvestigationTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let investigationDate = event.target.formGridInvestigationDate.value;\n  let investigationTitle = event.target.formGridInvestigationTitle.value;\n  let investigationDescription = event.target.formGridInvestigationDescription.value;\n  let investigationAttachmentName = event.target.formGridInvestigationAttachmentName.value;\n  let investigationAttachmentFormat = event.target.formGridInvestigationAttachmentFormat.value;\n  let investigationAttachmentPath = event.target.formGridInvestigationAttachmentPath.value;\n\n  const patientInvestigation = { investigationDate, investigationTitle, investigationDescription, investigationAttachmentName, investigationAttachmentFormat, investigationAttachmentPath };\n\n  console.log(`\n    adding patient investigation...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    investigationDate: ${investigationDate},\n    investigationTitle: ${investigationTitle},\n    investigationDescription: ${investigationDescription},\n    investigationAttachmentName: ${investigationAttachmentName},\n    investigationAttachmentFormat: ${investigationAttachmentFormat},\n    investigationAttachmentPath: ${investigationAttachmentPath},\n    `);\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientInvestigation(userId:\\\"${userId}\\\", patientId:\\\"${selectedPatientId}\\\",patientInput:{investigationDate:\\\"${investigationDate}\\\",investigationTitle:\\\"${investigationTitle}\\\",investigationDescription:\\\"${investigationDescription}\\\",investigationAttachmentName:\\\"${investigationAttachmentName}\\\",investigationAttachmentFormat:\\\"${investigationAttachmentFormat}\\\",investigationAttachmentPath:\\\"${investigationAttachmentPath}\\\"})\n        {_id,name,address,dob,age,contact{email,phone},registrationDate,referralDate,expirationDate,referringDoctor{name,email,phone},appointments{date,title,type},consultant{date,reference{name,role}},occupation{role,employer,contact{email,phone}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{email,phone}},complaints{date,title,description,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},examination{date,area,type,measure,value,description,attachment{name,format,path}},history{title,type,date,description,attachment{name,format,path}},allergies{title,description,attachment{name,format,path}},medication{title,description,attachment{name,format,path}},investigation{date,title,description,attachment{name,format,path}},diagnosis{date,title,description,attachment{name,format,path}},treatment{date,title,type,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,notes,attachment{name,format,path}}}\n        }\n      `\n    }\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientInvestigation._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(updatedPatient);\n        this.context.patients = this.state.patients;\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n      });\n\n}\n\n\nupdatePatientDiagnosisHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n  if(\n    this.context.user.role !== 'admin'\n  ) {\n    console.log(\"No edit permission!!\");\n    return;\n  }\n\n  console.log(\"UpdatePatientDiagnosisFormData:  \", event.target.formGridDiagnosisTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let diagnosisDate = event.target.formGridDiagnosisDate.value;\n  let diagnosisTitle = event.target.formGridDiagnosisTitle.value;\n  let diagnosisDescription = event.target.formGridDiagnosisDescription.value;\n  let diagnosisAttachmentName = event.target.formGridDiagnosisAttachmentName.value;\n  let diagnosisAttachmentFormat = event.target.formGridDiagnosisAttachmentFormat.value;\n  let diagnosisAttachmentPath = event.target.formGridDiagnosisAttachmentPath.value;\n\n  const patientDiagnosis = { diagnosisDate, diagnosisTitle, diagnosisDescription, diagnosisAttachmentName, diagnosisAttachmentFormat, diagnosisAttachmentPath };\n\n  console.log(`\n    adding patient diagnosis...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    diagnosisDate: ${diagnosisDate},\n    diagnosisTitle: ${diagnosisTitle},\n    diagnosisDescription: ${diagnosisDescription},\n    diagnosisAttachmentName: ${diagnosisAttachmentName},\n    diagnosisAttachmentFormat: ${diagnosisAttachmentFormat},\n    diagnosisAttachmentPath: ${diagnosisAttachmentPath},\n    `);\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientDiagnosis(userId:\\\"${userId}\\\", patientId:\\\"${selectedPatientId}\\\",patientInput:{diagnosisDate:\\\"${diagnosisDate}\\\",diagnosisTitle:\\\"${diagnosisTitle}\\\",diagnosisDescription:\\\"${diagnosisDescription}\\\",diagnosisAttachmentName:\\\"${diagnosisAttachmentName}\\\",diagnosisAttachmentFormat:\\\"${diagnosisAttachmentFormat}\\\",diagnosisAttachmentPath:\\\"${diagnosisAttachmentPath}\\\"})\n        {_id,name,address,dob,age,contact{email,phone},registrationDate,referralDate,expirationDate,referringDoctor{name,email,phone},appointments{date,title,type},consultant{date,reference{name,role}},occupation{role,employer,contact{email,phone}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{email,phone}},complaints{date,title,description,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},examination{date,area,type,measure,value,description,attachment{name,format,path}},history{title,type,date,description,attachment{name,format,path}},allergies{title,description,attachment{name,format,path}},medication{title,description,attachment{name,format,path}},investigation{date,title,description,attachment{name,format,path}},diagnosis{date,title,description,attachment{name,format,path}},treatment{date,title,type,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,notes,attachment{name,format,path}}}\n        }\n      `\n    }\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientDiagnosis._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(updatedPatient);\n        this.context.patients = this.state.patients;\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n      });\n\n}\n\n\nupdatePatientTreatmentHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n  if(\n    this.context.user.role !== 'admin'\n  ) {\n    console.log(\"No edit permission!!\");\n    return;\n  }\n\n  console.log(\"UpdatePatientTreatmentFormData:  \", event.target.formGridTreatmentTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let treatmentDate = event.target.formGridTreatmentDate.value;\n  let treatmentTitle = event.target.formGridTreatmentTitle.value;\n  let treatmentDescription = event.target.formGridTreatmentDescription.value;\n  let treatmentDose = event.target.formGridTreatmentDose.value;\n  let treatmentFrequency = event.target.formGridTreatmentFrequency.value;\n  let treatmentType = event.target.formGridTreatmentType.value;\n  let treatmentAttachmentName = event.target.formGridTreatmentAttachmentName.value;\n  let treatmentAttachmentFormat = event.target.formGridTreatmentAttachmentFormat.value;\n  let treatmentAttachmentPath = event.target.formGridTreatmentAttachmentPath.value;\n\n  const patientTreatment = { treatmentDate, treatmentTitle, treatmentDescription, treatmentDose, treatmentFrequency, treatmentType, treatmentAttachmentName, treatmentAttachmentFormat, treatmentAttachmentPath };\n\n  console.log(`\n    adding patient treatment...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    treatmentDate: ${treatmentDate},\n    treatmentTitle: ${treatmentTitle},\n    treatmentDescription: ${treatmentDescription},\n    treatmentDose: ${treatmentDose},\n    treatmentFrequency: ${treatmentFrequency},\n    treatmentType: ${treatmentType},\n    treatmentAttachmentName: ${treatmentAttachmentName},\n    treatmentAttachmentFormat: ${treatmentAttachmentFormat},\n    treatmentAttachmentPath: ${treatmentAttachmentPath},\n    `);\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientTreatment(userId:\\\"${userId}\\\", patientId:\\\"${selectedPatientId}\\\",patientInput:{treatmentDate:\\\"${treatmentDate}\\\",treatmentTitle:\\\"${treatmentTitle}\\\",treatmentType:\\\"${treatmentType}\\\",treatmentDescription:\\\"${treatmentDescription}\\\",treatmentDose:\\\"${treatmentDose}\\\",treatmentFrequency:\\\"${treatmentFrequency}\\\",treatmentAttachmentName:\\\"${treatmentAttachmentName}\\\",treatmentAttachmentFormat:\\\"${treatmentAttachmentFormat}\\\",treatmentAttachmentPath:\\\"${treatmentAttachmentPath}\\\"})\n        {_id,name,address,dob,age,contact{email,phone},registrationDate,referralDate,expirationDate,referringDoctor{name,email,phone},appointments{date,title,type},consultant{date,reference{name,role}},occupation{role,employer,contact{email,phone}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{email,phone}},complaints{date,title,description,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},examination{date,area,type,measure,value,description,attachment{name,format,path}},history{title,type,date,description,attachment{name,format,path}},allergies{title,description,attachment{name,format,path}},medication{title,description,attachment{name,format,path}},investigation{date,title,description,attachment{name,format,path}},diagnosis{date,title,description,attachment{name,format,path}},treatment{date,title,type,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,notes,attachment{name,format,path}}}\n        }\n      `\n    }\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientTreatment._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(updatedPatient);\n        this.context.patients = this.state.patients;\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n      });\n\n}\n\n\n\nupdatePatientBillingHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n  if(\n    this.context.user.role !== 'admin'\n  ) {\n    console.log(\"No edit permission!!\");\n    return;\n  }\n\n  console.log(\"UpdatePatientBillingFormData:  \", event.target.formGridBillingTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let billingDate = event.target.formGridBillingDate.value;\n  let billingTitle = event.target.formGridBillingTitle.value;\n  let billingType = event.target.formGridBillingType.value;\n  let billingDescription = event.target.formGridBillingDescription.value;\n  let billingAmount = event.target.formGridBillingAmount.value;\n  let billingPaid = event.target.formGridBillingPaid.value;\n  let billingNotes = event.target.formGridBillingNotes.value;\n  let billingAttachmentName = event.target.formGridBillingAttachmentName.value;\n  let billingAttachmentFormat = event.target.formGridBillingAttachmentFormat.value;\n  let billingAttachmentPath = event.target.formGridBillingAttachmentPath.value;\n\n  const patientBilling = { billingDate, billingTitle, billingType, billingDescription, billingAmount, billingPaid, billingNotes, billingAttachmentName, billingAttachmentFormat, billingAttachmentPath };\n\n  console.log(`\n    adding patient treatment...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    billingDate: ${billingDate},\n    billingTitle: ${billingTitle},\n    billingType: ${billingType},\n    billingDescription: ${billingDescription},\n    billingAmount: ${billingAmount},\n    billingPaid: ${billingPaid},\n    billingNotes: ${billingNotes},\n    billingAttachmentName: ${billingAttachmentName},\n    billingAttachmentFormat: ${billingAttachmentFormat},\n    billingAttachmentPath: ${billingAttachmentPath},\n    `);\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientBilling(userId:\\\"${userId}\\\", patientId:\\\"${selectedPatientId}\\\",patientInput:{billingDate:\\\"${billingDate}\\\",billingTitle:\\\"${billingTitle}\\\",billingType:\\\"${billingType}\\\",billingDescription:\\\"${billingDescription}\\\",billingAmount:${billingAmount},billingPaid:${billingPaid},billingNotes:\\\"${billingNotes}\\\",billingAttachmentName:\\\"${billingAttachmentName}\\\",billingAttachmentFormat:\\\"${billingAttachmentFormat}\\\",billingAttachmentPath:\\\"${billingAttachmentPath}\\\"})\n        {_id,name,address,dob,age,contact{email,phone},registrationDate,referralDate,expirationDate,referringDoctor{name,email,phone},appointments{date,title,type},consultant{date,reference{name,role}},occupation{role,employer,contact{email,phone}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{email,phone}},complaints{date,title,description,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},examination{date,area,type,measure,value,description,attachment{name,format,path}},history{title,type,date,description,attachment{name,format,path}},allergies{title,description,attachment{name,format,path}},medication{title,description,attachment{name,format,path}},investigation{date,title,description,attachment{name,format,path}},diagnosis{date,title,description,attachment{name,format,path}},treatment{date,title,type,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,notes,attachment{name,format,path}}}\n        }\n      `\n    }\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientBilling._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(updatedPatient);\n        this.context.patients = this.state.patients;\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n      });\n\n\n}\n\n\n\n\nmodalConfirmSearchHandler = (event) => {\n  console.log(\"SearchPatientForm:  \");\n\n\n  let userId = this.context.userId;\n\n    console.log(\"SearchPatientFormData:  \", event.target.formBasicField.value);\n    this.setState({ searching: false });\n\n    let field = event.target.formBasicField.value;\n    let query = event.target.formBasicQuery.value;\n\n    this.setState({\n      patientSearchField: field,\n      patientSearchQuery: query,\n    })\n\n    if (\n      field.trim().length === 0 ||\n      query.trim().length === 0\n    ) {\n      console.log(\"blank fields detected!!!...Please try again...\");\n      return;\n    }\n\n\n\n    const search = { field, query }\n    console.log(\"Searching for Patient:  \", JSON.stringify(search));\n\n    const requestBody = {\n      query: `\n        query {\n          getPatientField(userId: \"${userId}\", field: \"${field}\", query: \"${query}\" )\n          {_id,name,address,dob,age,contact{email,phone},registrationDate,referralDate,expirationDate,referringDoctor{name,email,phone},appointments{date,title,type},consultant{date,reference{name,role}},occupation{role,employer,contact{email,phone}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{email,phone}},complaints{date,title,description,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},examination{date,area,type,measure,value,description,attachment{name,format,path}},history{title,type,date,description,attachment{name,format,path}},allergies{title,description,attachment{name,format,path}},medication{title,description,attachment{name,format,path}},investigation{date,title,description,attachment{name,format,path}},diagnosis{date,title,description,attachment{name,format,path}},treatment{date,title,type,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,notes,attachment{name,format,path}}}\n      }\n      `\n    }\n\n    const token = this.context.token;\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n\n        const searchPatients = resData.data.getPatientField;\n\n        this.setState({ searchPatients: searchPatients})\n        console.log(\"state.searchPatients:  \", this.state.searchPatients);\n        // this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n      });\n}\n\n\n\n  modalCancelHandler = () => {\n    this.setState({ creating: false, updating: false, searching: false, selectedPatient: null });\n  };\n\n\n  fetchPatients() {\n    console.log(\"fetch patients function:  \");\n    const userId = this.context.userId;\n    const token = this.context.token;\n\n    this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n          query {patients(userId:\"${userId}\")\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{_id,title,time,location},consultant{date,reference{_id,name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n        `\n    };\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"resData\", resData);\n        const patients = resData.data.patients;\n        console.log(patients);\n\n        this.context.patients = this.state.patients;\n        if (this.isActive) {\n          this.setState({ patients: patients, isLoading: false });\n        }\n\n      })\n      .catch(err => {\n        console.log(err);\n        if (this.isActive) {\n          this.setState({ isLoading: false });\n        }\n      });\n  }\n\n\n  modalDeleteHandler = () => {\n    console.log(\"deleting patient...selectedPatient:  \", this.context.selectedPatient);\n\n    const selectedPatientId = this.context.selectedPatient._id;\n    const userId = this.context.selectedUser._id;\n\n    if(this.context.user.role !== 'admin') {\n      console.log(\"Not the Admin! No edit permission!!\");\n    }\n\n    this.setState({deleting: true});\n\n\n    const requestBody = {\n      query: `\n          mutation {deletePatient(userId:\"${userId}\",patientId:\"${selectedPatientId}\")\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n        `\n    };\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        let deletedPatient = resData.data.deletePatient;\n        console.log(deletedPatient);\n\n        let deletedPatientId = deletedPatient._id;\n        deletedPatient = this.state.patients.find(e => e._id === deletedPatientId);\n        const deletedPatientPos = this.state.patients.indexOf(deletedPatient);\n        const slicedArray = this.state.patients.splice(deletedPatientPos, 1);\n        console.log(\"deletedPatient:  \", JSON.stringify(deletedPatient),\"  deletedUserPos:  \", deletedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.setState({ deleting: false });\n\n        this.fetchPatients();\n\n      })\n      .catch(err => {\n        console.log(err);\n        if (this.isActive) {\n          this.setState({ deleting: false });\n        }\n      });\n  }\n\n\n  updatePatientSpecial (event) {\n\n    console.log(\"special field to update:  \", event.target.value);\n    const field = event.target.value;\n    this.setState({ patientUpdateField: field});\n\n  }\n\n\n  showDetailHandler = patientId => {\n\n    this.setState(prevState => {\n      const selectedPatient = prevState.patients.find(e => e._id === patientId);\n      this.context.selectedPatient = selectedPatient;\n      this.context.selectedPatientId = selectedPatient._id;\n      console.log(\"selectedPatient:  \", selectedPatient);\n      return { selectedPatient: selectedPatient };\n    });\n  };\n\n\n  componentWillUnmount() {\n    this.isActive = false;\n  }\n\n  render() {\n    return (\n\n    <React.Fragment>\n\n    <Accordion>\n\n    <Row>\n    <Col md={3} className=\"MasterCol1\">\n      <SidebarPage/>\n    </Col>\n\n    <Col md={6} className=\"MasterCol2\">\n    <Container className=\"containerCombinedDetail\">\n    <Tabs defaultActiveKey=\"\" id=\"uncontrolled-tab-example\">\n    <Tab eventKey=\"\" title=\"Edit:\" disabled>\n    </Tab>\n    <Tab eventKey=\"patientDetail\" title=\"Details\">\n    {this.state.selectedPatient === null && (\n      <Button variant=\"outline-warning\" size=\"lg\">\n        Select a Patient from the Master List below\n      </Button>\n    )}\n    {this.state.isLoading === false &&\n      this.state.selectedPatient !== null\n      &&\n      (<PatientDetail\n        authUserId={this.context.userId}\n        patient={this.state.selectedPatient}\n        onEdit={this.startUpdatePatientHandler}\n        onDelete={this.modalDeleteHandler}\n        />\n    )}\n    </Tab>\n\n    <Tab eventKey=\"patientCreate\" title=\"Create\">\n    <Button variant=\"outline-primary\" onClick={this.startCreatePatientHandler} >Create</Button>\n    {\n      this.state.creating && (\n        <CreatePatientForm\n        canCancel\n          canConfirm\n          onCancel={this.modalCancelHandler}\n          onConfirm={this.modalConfirmHandler}\n          confirmText=\"Confirm\"\n        />\n    )}\n    </Tab>\n\n    <Tab eventKey=\"patientEditDemographics\" title=\"Demographics\">\n    {this.state.selectedPatient === null && (\n      <Button variant=\"outline-warning\" size=\"lg\">\n        Select a Patient from the Master List below\n      </Button>\n    )}\n    {this.state.selectedPatient !== null && (\n      <Button variant=\"outline-primary\" onClick={this.startUpdatePatientHandler}>Edit Demographics</Button>\n    )}\n    {this.state.updating &&\n      this.state.selectedPatient !== null\n      && (\n      <UpdatePatientForm\n      authUserId={this.context.userId}\n      canCancel\n        canConfirm\n        onCancel={this.modalCancelHandler}\n        onConfirm={this.modalConfirmUpdateHandler}\n        confirmText=\"Confirm\"\n        patient={this.state.selectedPatient}\n      />\n    )}\n    </Tab>\n\n    <Tab eventKey=\"patientEditConsultant\" title=\"Consultant\">\n    {this.state.selectedPatient === null && (\n      <Button variant=\"outline-warning\" size=\"lg\">\n        Select a Patient from the Master List below\n      </Button>\n    )}\n    {this.state.selectedPatient !== null && (\n      <Button variant=\"outline-primary\" value='consultant' onClick={this.updatePatientSpecial.bind(this)}>Add Consultant</Button>\n    )}\n    {this.state.patientUpdateField === 'consultant' &&\n    this.state.selectedPatient !== null\n    && (\n      <UpdatePatientConsultantForm\n      authUserId={this.context.userId}\n      canCancel\n        canConfirm\n        onCancel={this.modalCancelHandler}\n        onConfirm={this.updatePatientConsultantHandler}\n        confirmText=\"Confirm\"\n        consultant={this.context.selectedUser}\n      />\n    )}\n    {this.state.patientUpdateField === 'consultant' &&\n    this.state.selectedPatient !== null &&\n    (\n      <Row>\n      <p>Add Consultant: {this.context.selectedUser.name}</p>\n      <p> To Paitient: {this.state.selectedPatient.name} ??</p>\n      <hr/>\n      </Row>\n    )}\n    {this.state.patientUpdateField === 'consultant' &&\n    this.state.selectedPatient !== null &&\n    (\n      <Row>\n      <Button variant=\"outline-warning\" size=\"lg\">\n        Select a doctor from the Staff page\n      </Button>\n      </Row>\n    )}\n    </Tab>\n    <Tab eventKey=\"patientEditInsurance\" title=\"Insurance\">\n    {this.state.selectedPatient === null && (\n      <Button variant=\"outline-warning\" size=\"lg\">\n        Select a Patient from the Master List below\n      </Button>\n    )}\n    {this.state.selectedPatient !== null && (\n      <Button variant=\"outline-primary\" value='insurance' onClick={this.updatePatientSpecial.bind(this)}>Add Insurance</Button>\n    )}\n    {this.state.patientUpdateField === 'insurance' &&\n    this.state.selectedPatient !== null\n    && (\n      <UpdatePatientInsuranceForm\n      authUserId={this.context.userId}\n      canCancel\n        canConfirm\n        onCancel={this.modalCancelHandler}\n        onConfirm={this.updatePatientInsuranceHandler}\n        confirmText=\"Confirm\"\n        patient={this.state.selectedPatient}\n      />\n    )}\n    </Tab>\n    <Tab eventKey=\"patientEditNextOfKin\" title=\"NextOfKin\">\n    {this.state.selectedPatient === null && (\n      <Button variant=\"outline-warning\" size=\"lg\">\n        Select a Patient from the Master List below\n      </Button>\n    )}\n    {this.state.selectedPatient !== null && (\n      <Button variant=\"outline-primary\" value='nextOfKin' onClick={this.updatePatientSpecial.bind(this)}>Add NextOfKin</Button>\n    )}\n    {this.state.patientUpdateField === 'nextOfKin' &&\n    this.state.selectedPatient !== null\n    && (\n      <UpdatePatientNextOfKinForm\n            authUserId={this.context.userId}\n            canCancel\n              canConfirm\n              onCancel={this.modalCancelHandler}\n              onConfirm={this.updatePatientNextOfKinHandler}\n              confirmText=\"Confirm\"\n              patient={this.state.selectedPatient}\n            />\n    )}\n    </Tab>\n    <Tab eventKey=\"patientEditComplaint\" title=\"Complaint\">\n    {this.state.selectedPatient === null && (\n      <Button variant=\"outline-warning\" size=\"lg\">\n        Select a Patient from the Master List below\n      </Button>\n    )}\n    {this.state.selectedPatient !== null && (\n      <Button variant=\"outline-primary\" value='complaint' onClick={this.updatePatientSpecial.bind(this)}>Add Complaint</Button>\n    )}\n    {this.state.patientUpdateField === 'complaint' &&\n    this.state.selectedPatient !== null\n    && (\n      <UpdatePatientComplaintForm\n            authUserId={this.context.userId}\n            canCancel\n              canConfirm\n              onCancel={this.modalCancelHandler}\n              onConfirm={this.updatePatientSurveyHandler}\n              confirmText=\"Confirm\"\n              patient={this.state.selectedPatient}\n            />\n    )}\n    </Tab>\n    <Tab eventKey=\"patientEditSurvey\" title=\"Survey\">\n    {this.state.selectedPatient === null && (\n      <Button variant=\"outline-warning\" size=\"lg\">\n        Select a Patient from the Master List below\n      </Button>\n    )}\n    {this.state.selectedPatient !== null && (\n      <Button variant=\"outline-primary\" value='survey' onClick={this.updatePatientSpecial.bind(this)}>Add Survey</Button>\n    )}\n    {this.state.patientUpdateField === 'survey' &&\n    this.state.selectedPatient !== null\n    && (\n      <UpdatePatientSurveyForm\n            authUserId={this.context.userId}\n            canCancel\n              canConfirm\n              onCancel={this.modalCancelHandler}\n              onConfirm={this.updatePatientComplaintHandler}\n              confirmText=\"Confirm\"\n              patient={this.state.selectedPatient}\n            />\n    )}\n    </Tab>\n    <Tab eventKey=\"patientEditExamination\" title=\"Examination\">\n    {this.state.selectedPatient === null && (\n      <Button variant=\"outline-warning\" size=\"lg\">\n        Select a Patient from the Master List below\n      </Button>\n    )}\n    {this.state.selectedPatient !== null && (\n      <Button variant=\"outline-primary\" value='examintion' onClick={this.updatePatientSpecial.bind(this)}>Add Examination</Button>\n    )}\n    {this.state.patientUpdateField === 'examintion' &&\n    this.state.selectedPatient !== null\n    && (\n      <UpdatePatientExaminationForm\n            authUserId={this.context.userId}\n            canCancel\n              canConfirm\n              onCancel={this.modalCancelHandler}\n              onConfirm={this.updatePatientExaminationHandler}\n              confirmText=\"Confirm\"\n              patient={this.state.selectedPatient}\n            />\n    )}\n    </Tab>\n    <Tab eventKey=\"patientEditHistory\" title=\"History\">\n    {this.state.selectedPatient === null && (\n      <Button variant=\"outline-warning\" size=\"lg\">\n        Select a Patient from the Master List below\n      </Button>\n    )}\n    {this.state.selectedPatient !== null && (\n      <Button variant=\"outline-primary\" value='history' onClick={this.updatePatientSpecial.bind(this)}>Add History</Button>\n    )}\n    {this.state.patientUpdateField === 'history' &&\n    this.state.selectedPatient !== null\n    && (\n      <UpdatePatientHistoryForm\n      authUserId={this.context.userId}\n      canCancel\n        canConfirm\n        onCancel={this.modalCancelHandler}\n        onConfirm={this.updatePatientHistoryHandler}\n        confirmText=\"Confirm\"\n        patient={this.state.selectedPatient}\n      />\n    )}\n    </Tab>\n    <Tab eventKey=\"patientEditAllergies\" title=\"Allergies\">\n    {this.state.selectedPatient === null && (\n      <Button variant=\"outline-warning\" size=\"lg\">\n        Select a Patient from the Master List below\n      </Button>\n    )}\n    {this.state.selectedPatient !== null && (\n      <Button variant=\"outline-primary\" value='allergies' onClick={this.updatePatientSpecial.bind(this)}>Add Allergies</Button>\n    )}\n    {this.state.patientUpdateField === 'allergies' &&\n    this.state.selectedPatient !== null\n    && (\n      <UpdatePatientAllergiesForm\n            authUserId={this.context.userId}\n            canCancel\n              canConfirm\n              onCancel={this.modalCancelHandler}\n              onConfirm={this.updatePatientAllergiesHandler}\n              confirmText=\"Confirm\"\n              patient={this.state.selectedPatient}\n            />\n    )}\n    </Tab>\n    <Tab eventKey=\"patientEditMedication\" title=\"Medication\">\n    {this.state.selectedPatient === null && (\n      <Button variant=\"outline-warning\" size=\"lg\">\n        Select a Patient from the Master List below\n      </Button>\n    )}\n    {this.state.selectedPatient !== null && (\n      <Button variant=\"outline-primary\" value='medication' onClick={this.updatePatientSpecial.bind(this)}>Add Medication</Button>\n    )}\n    {this.state.patientUpdateField === 'medication' &&\n    this.state.selectedPatient !== null\n    && (\n      <UpdatePatientMedicationForm\n      authUserId={this.context.userId}\n      canCancel\n        canConfirm\n        onCancel={this.modalCancelHandler}\n        onConfirm={this.updatePatientMedicationHandler}\n        confirmText=\"Confirm\"\n        patient={this.state.selectedPatient}\n      />\n    )}\n    </Tab>\n    <Tab eventKey=\"patientEditInvestigation\" title=\"Investigation\">\n    {this.state.selectedPatient === null && (\n      <Button variant=\"outline-warning\" size=\"lg\">\n        Select a Patient from the Master List below\n      </Button>\n    )}\n    {this.state.selectedPatient !== null && (\n      <Button variant=\"outline-primary\" value='investigation' onClick={this.updatePatientSpecial.bind(this)}>Add Investigation</Button>\n    )}\n    {this.state.patientUpdateField === 'investigation' &&\n    this.state.selectedPatient !== null\n    && (\n      <UpdatePatientInvestigationForm\n            authUserId={this.context.userId}\n            canCancel\n              canConfirm\n              onCancel={this.modalCancelHandler}\n              onConfirm={this.updatePatientInvestigationHandler}\n              confirmText=\"Confirm\"\n              patient={this.state.selectedPatient}\n            />\n    )}\n    </Tab>\n    <Tab eventKey=\"patientEditDiagnosis\" title=\"Diagnosis\">\n    {this.state.selectedPatient === null && (\n      <Button variant=\"outline-warning\" size=\"lg\">\n        Select a Patient from the Master List below\n      </Button>\n    )}\n    {this.state.selectedPatient !== null && (\n      <Button variant=\"outline-primary\" value='diagnosis' onClick={this.updatePatientSpecial.bind(this)}>Add Diagnosis</Button>\n    )}\n    {this.state.patientUpdateField === 'diagnosis' &&\n    this.state.selectedPatient !== null\n    && (\n      <UpdatePatientDiagnosisForm\n            authUserId={this.context.userId}\n            canCancel\n              canConfirm\n              onCancel={this.modalCancelHandler}\n              onConfirm={this.updatePatientDiagnosisHandler}\n              confirmText=\"Confirm\"\n              patient={this.state.selectedPatient}\n            />\n    )}\n    </Tab>\n    <Tab eventKey=\"patientEditTreatment\" title=\"Treatment\">\n    {this.state.selectedPatient === null && (\n      <Button variant=\"outline-warning\" size=\"lg\">\n        Select a Patient from the Master List below\n      </Button>\n    )}\n    {this.state.selectedPatient !== null && (\n      <Button variant=\"outline-primary\" value='treatment' onClick={this.updatePatientSpecial.bind(this)}>Add Treatment</Button>\n    )}\n    {this.state.patientUpdateField === 'treatment' &&\n    this.state.selectedPatient !== null\n    && (\n      <UpdatePatientTreatmentForm\n            authUserId={this.context.userId}\n            canCancel\n              canConfirm\n              onCancel={this.modalCancelHandler}\n              onConfirm={this.updatePatientTreatmentHandler}\n              confirmText=\"Confirm\"\n              patient={this.state.selectedPatient}\n            />\n    )}\n    </Tab>\n    <Tab eventKey=\"patientEditBilling\" title=\"Billing\">\n    {this.state.selectedPatient === null && (\n      <Button variant=\"outline-warning\" size=\"lg\">\n        Select a Patient from the Master List below\n      </Button>\n    )}\n    {this.state.selectedPatient !== null && (\n      <Button variant=\"outline-primary\" value='billing' onClick={this.updatePatientSpecial.bind(this)}>Add Billing</Button>\n    )}\n    {this.state.patientUpdateField === 'billing' &&\n    this.state.selectedPatient !== null\n    && (\n      <UpdatePatientBillingForm\n            authUserId={this.context.userId}\n            canCancel\n              canConfirm\n              onCancel={this.modalCancelHandler}\n              onConfirm={this.updatePatientBillingHandler}\n              confirmText=\"Confirm\"\n              patient={this.state.selectedPatient}\n            />\n    )}\n    </Tab>\n    </Tabs>\n    </Container>\n    <Container className=\"containerUserMasterList\">\n    <Row className=\"searchListRow\">\n    {this.state.isLoading ? (\n      <Spinner />\n    ) : (\n      <PatientList\n        patients={this.state.patients}\n        authUserId={this.context.userId}\n        onViewDetail={this.showDetailHandler}\n      />\n    )}\n    </Row>\n    </Container>\n\n    </Col>\n\n    <Col md={3} className=\"MasterCol3\">\n\n    <Container className=\"containerSearchUserInput\">\n    <Row className=\"searchUserRowAdd\">\n      {this.context.token && (\n      <Accordion.Toggle as={Button} variant=\"primary\" eventKey=\"10\" onClick={this.startSearchPatientHandler}>\n      Search\n      </Accordion.Toggle>)}\n    </Row>\n\n    <Accordion.Collapse eventKey=\"10\">\n    <Row className=\"searchUserRowForm\">\n    <Col md={10} className=\"searchUserColForm\">\n    {\n      this.state.searching === true &&\n      <SearchPatientForm\n      authUserId={this.context.userId}\n      canCancel\n        canConfirm\n        onCancel={this.modalCancelHandler}\n        onConfirm={this.modalConfirmSearchHandler}\n        confirmText=\"Search\"\n        patient={this.context.selectedPatient}\n      />\n    }\n    </Col>\n    </Row>\n    </Accordion.Collapse>\n    </Container>\n\n    <Container className=\"containerSearchUserResults\">\n    <Row>\n      <Card className=\"searchCard\">\n        <Card.Body className=\"searchCardBody\">\n          <Card.Title>Your Search</Card.Title>\n          <Card.Text>\n            Field: {this.state.patientSearchField}\n          </Card.Text>\n          <Card.Text>\n            Query: {this.state.patientSearchQuery}\n          </Card.Text>\n        </Card.Body>\n      </Card>\n    </Row>\n    <Row className=\"searchListRow\">\n    {\n      this.state.searchPatients !== [] &&\n      <SearchPatientList\n        searchPatients={this.state.searchPatients}\n        authUserId={this.context.userId}\n        onCancel={this.modalCancelHandler}\n          onViewDetail={this.showDetailHandler}\n      />\n    }\n    </Row>\n    </Container>\n\n    </Col>\n    </Row>\n\n</Accordion>\n\n      </React.Fragment>\n    );\n  }\n}\n\nexport default PatientsPage;\n"]},"metadata":{},"sourceType":"module"}