{"ast":null,"code":"var _jsxFileName = \"/Users/pedrojacob/Downloads/AMR/websites/office_records/ENT_EMR/frontend/src/pages/Users.js\";\nimport React, { Component } from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col'; // import Form from 'react-bootstrap/Form';\n\nimport Button from 'react-bootstrap/Button';\nimport Accordion from 'react-bootstrap/Accordion';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\nimport Card from 'react-bootstrap/Card'; // import Modal from '../components/Modal/Modal';\n// import Backdrop from '../components/Backdrop/Backdrop';\n\nimport UserList from '../components/Users/UserList/UserList';\nimport SearchUserList from '../components/Users/UserList/SearchUserList';\nimport UserDetail from '../components/Users/UserDetail';\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\nimport SidebarPage from './Sidebar';\nimport AlertBox from '../components/AlertBox';\nimport CreateUserForm from '../components/Forms/CreateUserForm';\nimport UpdateUserForm from '../components/Forms/UpdateUserForm';\nimport UpdateUserFieldForm from '../components/Forms/UpdateUserFieldForm';\nimport UpdateUserAttendanceForm from '../components/Forms/UpdateUserAttendanceForm';\nimport UpdateUserAttachmentForm from '../components/Forms/UpdateUserAttachmentForm';\nimport UpdateUserLeaveForm from '../components/Forms/UpdateUserLeaveForm';\nimport SearchUserForm from '../components/Forms/SearchUserForm';\nimport SearchUserIdForm from '../components/Forms/SearchUserIdForm';\nimport SearchUserNameForm from '../components/Forms/SearchUserNameForm';\nimport SearchUserAttendanceDateForm from '../components/Forms/SearchUserAttendanceDateForm';\nimport SearchUserLeaveDateRangeForm from '../components/Forms/SearchUserLeaveDateRangeForm';\nimport './Users.css';\n\nclass UsersPage extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      creating: false,\n      updating: false,\n      deleting: false,\n      searching: false,\n      users: [],\n      searchUsers: [],\n      isLoading: false,\n      isSorting: false,\n      selectedUser: null,\n      userUpdateField: null,\n      userSearchField: null,\n      userSearchQuery: null,\n      canDelete: null,\n      userAlert: null\n    };\n    this.isActive = true;\n\n    this.startCreateUserHandler = () => {\n      this.setState({\n        creating: true\n      });\n      console.log(\"CreateUserForm...\");\n    };\n\n    this.startUpdateUserHandler = () => {\n      this.setState({\n        updating: true\n      });\n      console.log(\"UpdateUserForm...\");\n    };\n\n    this.startSearchUserHandler = () => {\n      this.setState({\n        searching: true\n      });\n      console.log(\"SearchUserForm...\");\n    };\n\n    this.modalConfirmHandler = event => {\n      console.log(\"CreateUserFormData:  \", event.target.formGridEmail.value);\n      this.setState({\n        creating: false\n      });\n      const email = event.target.formGridEmail.value;\n      const password = event.target.formGridPassword.value;\n      const name = event.target.formGridName.value;\n      const role = event.target.formGridRole.value;\n      let dob = event.target.formGridDob.value;\n      let phone = event.target.formGridPhone.value;\n      let addressNumber = event.target.formGridAddressNumber.value;\n      let addressStreet = event.target.formGridAddressStreet.value;\n      let addressTown = event.target.formGridAddressTown.value;\n      let addressParish = event.target.formGridAddressParish.value;\n      let addressPostOffice = event.target.formGridAddressPostOffice.value;\n      let employmentDate = event.target.formGridEmploymentDate.value;\n      let terminationDate = event.target.formGridTerminationDate.value;\n\n      if (email.trim().length === 0 || password.trim().length === 0 || name.trim().length === 0 || role.trim().length === 0 || dob.trim().length === 0 || phone.trim().length === 0 || addressNumber.trim().length === 0 || addressStreet.trim().length === 0 || addressTown.trim().length === 0 || addressParish.trim().length === 0 || addressPostOffice.trim().length === 0 || employmentDate.trim().length === 0 || terminationDate.trim().length === 0) {\n        console.log(\"blank fields detected!!!...Please try again...\");\n        this.setState({\n          userAlert: \"blank fields detected!!!...Please try again...\"\n        });\n        return;\n      }\n\n      const token = this.context.token;\n      const userId = this.context.userId;\n      const user = {\n        email,\n        password,\n        name,\n        role,\n        dob,\n        phone,\n        addressNumber,\n        addressStreet,\n        addressTown,\n        addressParish,\n        addressPostOffice,\n        employmentDate,\n        terminationDate\n      };\n      console.log(`\n      creating user...\n      userId: ${userId}\n      email: ${email},\n      password: ${password},\n      name: ${name},\n      role: ${role},\n      dob: ${dob},\n      phone: ${phone},\n      addressNumber: ${addressNumber},\n      addressStreet: ${addressStreet},\n      addressTown: ${addressTown},\n      addressParish: ${addressParish},\n      addressPostOffice: ${addressPostOffice},\n      employmentDate: ${employmentDate},\n      terminationDate: ${terminationDate},\n      `);\n      const requestBody = {\n        query: `\n          mutation {\n            createUser(userInput: {email:\"${email}\",password:\"${password}\",name:\"${name}\",role:\"${role}\",dob:\"${dob}\",addressNumber:${addressNumber},addressStreet:\"${addressStreet}\",addressTown:\"${addressTown}\",addressParish:\"${addressParish}\",addressPostOffice:\"${addressPostOffice}\",phone:\"${phone}\",employmentDate:\"${employmentDate}\",terminationDate:\"${terminationDate}\"})\n            {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}\n          }\n        `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"create user response data... \" + JSON.stringify(resData.data.createUser));\n        const responseAlert = JSON.stringify(resData.data).slice(0, 8);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.setState(prevState => {\n          const updatedUsers = [...prevState.users];\n          updatedUsers.push(resData.data.createUser);\n          return {\n            users: updatedUsers\n          };\n        });\n        this.context.users = this.state.users;\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.modalConfirmUpdateHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedUserId = this.context.selectedUser._id;\n\n      if (userId !== selectedUserId && this.context.user.role !== 'admin') {\n        console.log(\"Not the creator or Admin! No edit permission!!\");\n        this.setState({\n          userAlert: \"Not the creator or Admin! No edit permission!!\"\n        });\n        selectedUserId = null;\n      }\n\n      console.log(\"UpdateUserFormData:  \", event.target.formGridEmail.value);\n      this.setState({\n        updating: false\n      });\n      let email = event.target.formGridEmail.value;\n      let password = event.target.formGridPassword.value;\n      let name = event.target.formGridName.value;\n      let role = event.target.formGridRole.value;\n      let dob = event.target.formGridDob.value;\n      let phone = event.target.formGridPhone.value;\n      let addressNumber = event.target.formGridAddressNumber.value;\n      let addressStreet = event.target.formGridAddressStreet.value;\n      let addressTown = event.target.formGridAddressTown.value;\n      let addressParish = event.target.formGridAddressParish.value;\n      let addressPostOffice = event.target.formGridAddressPostOffice.value;\n      let employmentDate = event.target.formGridEmploymentDate.value;\n      let terminationDate = event.target.formGridTerminationDate.value;\n\n      if (email.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        email = this.state.user.email;\n      }\n\n      if (password.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        password = this.state.user.password;\n      }\n\n      if (name.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        name = this.state.user.name;\n      }\n\n      if (role.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        role = this.state.user.role;\n      }\n\n      if (dob.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        dob = this.state.user.dob;\n      }\n\n      if (phone.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        phone = this.state.user.phone;\n      }\n\n      if (addressNumber.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        addressNumber = this.state.user.address.number;\n      }\n\n      if (addressStreet.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        addressStreet = this.state.user.address.street;\n      }\n\n      if (addressTown.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        addressTown = this.state.user.address.town;\n      }\n\n      if (addressParish.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        addressParish = this.state.user.address.parish;\n      }\n\n      if (addressPostOffice.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        addressPostOffice = this.state.user.address.postOffice;\n      }\n\n      if (employmentDate.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        employmentDate = this.state.user.employmentDate;\n      }\n\n      if (terminationDate.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        terminationDate = this.state.user.terminationDate;\n      }\n\n      const user = {\n        email,\n        password,\n        name,\n        role,\n        dob,\n        phone,\n        addressNumber,\n        addressStreet,\n        addressTown,\n        addressParish,\n        addressPostOffice,\n        employmentDate,\n        terminationDate\n      };\n      console.log(`\n      updating user profile...\n      userId: ${userId}\n      email: ${email},\n      password: ${password},\n      name: ${name},\n      role: ${role},\n      dob: ${dob},\n      phone: ${phone},\n      addressNumber: ${addressNumber},\n      addressStreet: ${addressStreet},\n      addressTown: ${addressTown},\n      addressParish: ${addressParish},\n      addressPostOffice: ${addressPostOffice},\n      employmentDate: ${employmentDate},\n      terminationDate: ${terminationDate},\n      `);\n      this.setState({\n        userAlert: \"updating user profile...\"\n      });\n      const requestBody = {\n        query: `\n      mutation{\n        updateUser(userId:\"${userId}\",selectedUserId:\"${selectedUserId}\",userInput:{email:\"${email}\",password:\"${password}\",name:\"${name}\",dob:\"${dob}\",addressNumber:\"${addressNumber}\",addressStreet:\"${addressStreet}\",addressTown:\"${addressTown}\",addressParish:\"${addressParish}\",addressPostOffice:\"${addressPostOffice}\",phone:\"${phone}\",role:\"${role}\",employmentDate:\"${employmentDate}\",terminationDate:\"${terminationDate}\"})\n        {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}\n      }\n        `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n        const updatedUser = resData.data.updateUser;\n        console.log(\"updatedUser:  \", JSON.stringify(updatedUser));\n        this.setState({\n          user: updatedUser\n        });\n        this.state.users.push(resData.data.updateUser);\n        this.context.users = this.state.users;\n        const responseAlert = JSON.stringify(resData.data).slice(0, 8);\n        this.setState({\n          userAlert: responseAlert\n        }); // this.fetchUsers();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.modalConfirmUpdateFieldHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedUserId = this.context.selectedUser._id; // if(userId !== selectedUserId && this.context.user.role !== 'admin') {\n      //   console.log(\"Not the creator or Admin! No edit permission!!\");\n      //   selectedUserId = null;\n      // }\n\n      console.log(\"UpdateUserFieldFormData:  \", event.target.formGridField.value, event.target.formGridFieldSelect.value);\n      this.setState({\n        updating: false\n      });\n      let field = null;\n      let query = event.target.formGridQuery.value;\n\n      if (event.target.formGridFieldSelect.value === \"select\") {\n        field = event.target.formGridField.value;\n      } else {\n        field = event.target.formGridFieldSelect.value;\n      }\n\n      console.log(`\n          field: ${field},\n          query: ${query},\n        `);\n      this.setState({\n        userAlert: \"updating user field...\"\n      });\n      const requestBody = {\n        query: `\n          mutation{updateUserField(userId:\"${userId}\",selectedUserId:\"${selectedUserId}\",field:\"${field}\",query:\"${query}\")\n          {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}\n        }\n        `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data.updateUserField));\n        const responseAlert = JSON.stringify(resData.data).slice(0, 8);\n        this.setState({\n          userAlert: responseAlert\n        });\n        const updatedUserId = resData.data.updateUserField._id;\n        const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n        const updatedUserPos = this.state.users.indexOf(updatedUser);\n        const slicedArray = this.state.users.splice(updatedUserPos, 1);\n        console.log(\"updatedUser:  \", JSON.stringify(updatedUser), \"  updatedUserPos:  \", updatedUserPos, \"  slicedArray:  \", slicedArray);\n        this.state.users.push(resData.data.updateUserField);\n        this.context.users = this.state.users; // this.fetchUsers();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updateUserAttendanceHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedUserId = this.context.selectedUser._id; // if(userId !== selectedUserId && this.context.user.role !== 'admin') {\n      //   console.log(\"Not the creator or Admin! No edit permission!!\");\n      //   selectedUserId = null;\n      // }\n\n      if (userId !== selectedUserId && this.context.user.role !== \"admin\") {\n        console.log(\"Not the creator or Admin! No edit permission!!\");\n        this.setState({\n          userAlert: \"Not the creator or Admin! No edit permission!!\"\n        });\n        selectedUserId = null;\n      }\n\n      console.log(\"UpdateUserAttendanceFormData:  \", event.target.formGridAttendanceDate.value);\n      this.setState({\n        updating: false,\n        userUpdateField: null\n      });\n      let attendanceDate = event.target.formGridAttendanceDate.value;\n      let attendanceStatus = event.target.formGridAttendanceStatus.value;\n      let attendanceDescription = event.target.formGridAttendanceDescription.value;\n\n      if (attendanceDate.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        attendanceDate = this.context.selectedUser.attendanceDate;\n      }\n\n      if (attendanceStatus.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        attendanceStatus = this.context.selectedUser.attendanceStatus;\n      }\n\n      if (attendanceDescription.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        attendanceDescription = this.context.selectedUser.attendanceDescription;\n      }\n\n      const userAttendance = {\n        attendanceDate,\n        attendanceStatus,\n        attendanceDescription\n      };\n      console.log(`\n      adding user attendance item...\n      userId: ${userId},\n      selectedUserId: ${selectedUserId}\n      attendanceDate: ${attendanceDate},\n      attendanceStatus: ${attendanceStatus},\n      attendanceDescription: ${attendanceDescription}\n      `);\n      this.setState({\n        userAlert: \"adding user attendance item...\"\n      });\n      const requestBody = {\n        query: `\n          mutation {updateUserAttendance(userId:\"${userId}\", selectedUserId:\"${selectedUserId}\",userInput:{attendanceDate:\"${attendanceDate}\",attendanceStatus:\"${attendanceStatus}\",attendanceDescription:\"${attendanceDescription}\"})\n          {_id,name,email,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description}}}\n        `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data.updateUserAttendance));\n        const responseAlert = JSON.stringify(resData.data).slice(0, 8);\n        this.setState({\n          userAlert: responseAlert\n        });\n        const updatedUserId = resData.data.updateUserAttendance._id;\n        const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n        const updatedUserPos = this.state.users.indexOf(updatedUser);\n        const slicedArray = this.state.users.splice(updatedUserPos, 1);\n        console.log(\"updatedUser:  \", JSON.stringify(updatedUser), \"  updatedUserPos:  \", updatedUserPos, \"  slicedArray:  \", slicedArray);\n        this.state.users.push(resData.data.updateUserAttendance);\n        this.context.users = this.state.users; // this.fetchUsers();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updateUserAttachmentHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedUserId = this.context.selectedUser._id; // if(userId !== selectedUserId && this.context.user.role !== 'admin') {\n      //   console.log(\"Not the creator or Admin! No edit permission!!\");\n      //   selectedUserId = null;\n      // }\n\n      if (userId !== selectedUserId && this.context.user.role !== \"admin\") {\n        console.log(\"Not the creator or Admin! No edit permission!!\");\n        this.setState({\n          userAlert: \"Not the creator or Admin! No edit permission!!\"\n        });\n        selectedUserId = null;\n      }\n\n      console.log(\"UpdateUserAttachmentFormData:  \", event.target.formGridAttachmentName.value);\n      this.setState({\n        updating: false,\n        userUpdateField: null\n      });\n      let attachmentName = event.target.formGridAttachmentName.value;\n      let attachmentFormat = event.target.formGridAttachmentFormat.value;\n      let attachmentPath = event.target.formGridAttachmentPath.value;\n\n      if (attachmentName.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        attachmentName = this.context.selectedUser.attachmentName;\n      }\n\n      if (attachmentFormat.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        attachmentFormat = this.context.selectedUser.attachmentFormat;\n      }\n\n      if (attachmentPath.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        attachmentPath = this.context.selectedUser.attachmentPath;\n      }\n\n      const userAttachment = {\n        attachmentName,\n        attachmentFormat,\n        attachmentPath\n      };\n      console.log(`\n      adding user attendance item...\n      userId: ${userId},\n      selectedUserId: ${selectedUserId}\n      attachmentName: ${attachmentName},\n      attachmentFormat: ${attachmentFormat},\n      attachmentPath: ${attachmentPath}\n      `);\n      this.setState({\n        userAlert: \"adding user attendance item...\"\n      });\n      const requestBody = {\n        query: `\n          mutation {updateUserAttachment(userId:\"${userId}\", selectedUserId:\"${selectedUserId}\",userInput:{attachmentName:\"${attachmentName}\",attachmentFormat:\"${attachmentFormat}\",attachmentPath:\"${attachmentPath}\"})\n          {_id,name,email,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description}}}\n        `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data.updateUserAttachment));\n        const responseAlert = JSON.stringify(resData.data).slice(0, 8);\n        this.setState({\n          userAlert: responseAlert\n        });\n        const updatedUserId = resData.data.updateUserAttachment._id;\n        const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n        const updatedUserPos = this.state.users.indexOf(updatedUser);\n        const slicedArray = this.state.users.splice(updatedUserPos, 1);\n        console.log(\"updatedUser:  \", JSON.stringify(updatedUser), \"  updatedUserPos:  \", updatedUserPos, \"  slicedArray:  \", slicedArray);\n        this.state.users.push(resData.data.updateUserAttachment);\n        this.context.users = this.state.users; // this.fetchUsers();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updateUserLeaveHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedUserId = this.context.selectedUser._id; // if(userId !== selectedUserId && this.context.user.role !== 'admin') {\n      //   console.log(\"Not the creator or Admin! No edit permission!!\");\n      //   selectedUserId = null;\n      // }\n\n      if (userId !== selectedUserId && this.context.user.role !== \"admin\") {\n        console.log(\"Not the creator or Admin! No edit permission!!\");\n        this.setState({\n          userAlert: \"Not the creator or Admin! No edit permission!!\"\n        });\n        selectedUserId = null;\n      }\n\n      console.log(\"UpdateUserLeaveFormData:  \", event.target.formGridLeaveType.value);\n      this.setState({\n        updating: false,\n        userUpdateField: null\n      });\n      let leaveType = event.target.formGridLeaveType.value;\n      let leaveTitle = event.target.formGridLeaveTitle.value;\n      let leaveStartDate = event.target.formGridLeaveStartDate.value;\n      let leaveEndDate = event.target.formGridLeaveEndDate.value;\n\n      if (leaveType.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        leaveType = this.context.selectedUser.leaveType;\n      }\n\n      if (leaveTitle.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        leaveTitle = this.context.selectedUser.leaveTitle;\n      }\n\n      if (leaveStartDate.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        leaveStartDate = this.context.selectedUser.leaveStartDate;\n      }\n\n      if (leaveEndDate.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        leaveEndDate = this.context.selectedUser.leaveEndDate;\n      }\n\n      const userLeave = {\n        leaveType,\n        leaveTitle,\n        leaveStartDate,\n        leaveEndDate\n      };\n      console.log(`\n      adding user attendance item...\n      userId: ${userId},\n      selectedUserId: ${selectedUserId}\n      leave: {\n        type: ${leaveType},\n        title: ${leaveTitle},\n        startDate: ${leaveStartDate},\n        endDate: ${leaveEndDate}\n      }\n      `);\n      this.setState({\n        userAlert: \"adding user attendance item...\"\n      });\n      const requestBody = {\n        query: `\n          mutation {updateUserLeave(userId:\"${userId}\", selectedUserId:\"${userId}\",userInput:{leaveType:\"${leaveType}\",leaveTitle:\"${leaveTitle}\",leaveStartDate:\"${leaveStartDate}\",leaveEndDate:\"${leaveEndDate}\"})\n          {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n        `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const responseAlert = JSON.stringify(resData.data).slice(0, 8);\n        this.setState({\n          userAlert: responseAlert\n        });\n        const updatedUserId = resData.data.updateUserLeave._id;\n        const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n        const updatedUserPos = this.state.users.indexOf(updatedUser);\n        const slicedArray = this.state.users.splice(updatedUserPos, 1);\n        console.log(\"updatedUser:  \", JSON.stringify(updatedUser), \"  updatedUserPos:  \", updatedUserPos, \"  slicedArray:  \", slicedArray);\n        this.state.users.push(resData.data.updateUserLeave);\n        this.context.users = this.state.users; // this.fetchUsers();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.modalConfirmSearchHandler = event => {\n      console.log(\"SearchUserForm:  \");\n      let userId = this.context.userId;\n      console.log(\"SearchUserFormData:  \", event.target.formBasicField.value);\n      this.setState({\n        searching: false\n      });\n      let field = null;\n      let query = event.target.formBasicQuery.value;\n\n      if (event.target.formBasicFieldSelect.value === \"select\") {\n        field = event.target.formBasicField.value;\n      } else {\n        field = event.target.formBasicFieldSelect.value;\n      }\n\n      this.setState({\n        userSearchField: field,\n        userSearchQuery: query\n      });\n\n      if (field.trim().length === 0 || query.trim().length === 0) {\n        console.log(\"blank fields detected!!!...Please try again...\");\n        this.setState({\n          userAlert: \"blank fields detected!!!...Please try again...\"\n        });\n        return;\n      }\n\n      const search = {\n        field,\n        query\n      };\n      console.log(\"Searching for User:  \", JSON.stringify(search));\n      this.setState({\n        userAlert: \"Searching for User...\"\n      });\n      const requestBody = {\n        query: `\n          query {getUserField(userId:\"${userId}\",field:\"${field}\",query:\"${query}\")\n          {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n        `\n      };\n      const token = this.context.token;\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n        const responseAlert = JSON.stringify(resData.data).slice(0, 8);\n        this.setState({\n          userAlert: responseAlert\n        });\n        const searchUsers = resData.data.getUserField;\n        this.setState({\n          searchUsers: searchUsers\n        });\n        console.log(\"state.searchUsers:  \", this.state.searchUsers); // this.fetchUsers();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.modalConfirmSearchIdHandler = event => {\n      let userId = this.context.userId;\n      this.setState({\n        searching: false\n      });\n      console.log(\"SearchUserIdFormData:\", event.target.formBasicId.value);\n      let selectedUserId = event.target.formBasicId.value;\n      const requestBody = {\n        query: `\n        query {getUserId(userId:\"${userId}\",selectedUserId:\"${selectedUserId}\")\n        {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n      `\n      };\n      const token = this.context.token;\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n        const responseAlert = JSON.stringify(resData.data).slice(0, 8);\n        this.setState({\n          userAlert: responseAlert\n        });\n        const searchUsers = resData.data.getUserId;\n        this.setState({\n          searchUsers: searchUsers\n        });\n        console.log(\"state.searchUsers:  \", this.state.searchUsers); // this.fetchUsers();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.modalConfirmSearchAttendanceDateHandler = event => {\n      let userId = this.context.userId;\n      this.setState({\n        searching: false\n      });\n      console.log(\"SearchUserAttendanceDateFormData:\");\n      const attendanceDate = event.target.formBasicDate.value;\n      const requestBody = {\n        query: `\n        query {getUserAttendanceDate(userId:\"${userId}\",attendanceDate:\"${attendanceDate}\")\n        {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n      `\n      };\n      const token = this.context.token;\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n        const responseAlert = JSON.stringify(resData.data).slice(0, 8);\n        this.setState({\n          userAlert: responseAlert\n        });\n        const searchUsers = resData.data.getUserField;\n        this.setState({\n          searchUsers: searchUsers\n        });\n        console.log(\"state.searchUsers:  \", this.state.searchUsers); // this.fetchUsers();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.modalConfirmSearchLeaveDateRangeHandler = event => {\n      let userId = this.context.userId;\n      this.setState({\n        searching: false\n      });\n      console.log(\"SearchUserLeaveDateRangeFormData:\");\n      const startDate = event.target.formBasicStartDate.value;\n      const endDate = event.target.formBasicEndDate.value;\n      const requestBody = {\n        query: `\n        query{getUserLeaveDateRange(userId:\"${userId}\",startDate:\"${startDate}\",endDate:\"${endDate}\")\n        {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n      `\n      };\n      const token = this.context.token;\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n        const searchUsers = resData.data.getUserField;\n        this.setState({\n          searchUsers: searchUsers\n        });\n        console.log(\"state.searchUsers:  \", this.state.searchUsers); // this.fetchUsers();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.modalConfirmSearchNameHandler = event => {\n      console.log(\"SearchUserNameFormData:\", event.target.formBasicName.value);\n      let userId = this.context.userId;\n      this.setState({\n        searching: false\n      });\n      let users = this.state.users;\n      const regex = new RegExp(event.target.formBasicName.value, \"i\");\n      console.log(`\n      regex: ${regex},\n      `);\n      let result = users.filter(user => user.name.match(regex));\n      console.log(`\n        result: ${JSON.stringify(result)}\n        `);\n      this.setState({\n        searchUsers: result\n      });\n    };\n\n    this.modalCancelHandler = () => {\n      this.setState({\n        creating: false,\n        updating: false,\n        deleting: false,\n        searching: false\n      });\n    };\n\n    this.fetchUsersAsc = () => {\n      console.log(\"'fetch usersAsc function' context object... \" + JSON.stringify(this.context));\n      const userId = this.context.userId; // this.setState({ isSorting: true });\n\n      const requestBody = {\n        query: `\n          query {usersNameAsc (userId:\"${userId}\")\n          {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n        `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + this.context.token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          this.context.userAlert = 'Failed!';\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const users = resData.data.usersNameAsc;\n        console.log(\"resData:  \", resData);\n        console.log(users);\n        this.setState({\n          users: users\n        }); // if (this.isActive) {\n        //   this.setState({ users: users, isLoading: false });\n        // }\n\n        this.context.users = this.state.users;\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        }); // if (this.isActive) {\n        //   this.setState({ isLoading: false });\n        // }\n      });\n    };\n\n    this.fetchUsersDesc = () => {\n      console.log(\"'fetch usersDesc function' context object... \" + JSON.stringify(this.context));\n      const userId = this.context.userId; // this.setState({ isLoading: true });\n\n      const requestBody = {\n        query: `\n          query {usersNameDesc (userId:\"${userId}\")\n          {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n        `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + this.context.token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          this.context.userAlert = 'Failed!';\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const users = resData.data.usersNameDesc;\n        console.log(\"resData:  \", resData);\n        console.log(users); // if (this.isActive) {\n        //   this.setState({ users: users, isLoading: false });\n        // }\n\n        this.setState({\n          users: users\n        });\n        this.context.users = this.state.users;\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        }); // if (this.isActive) {\n        //   this.setState({ isLoading: false });\n        // }\n      });\n    };\n\n    this.modalDeleteHandler = () => {\n      console.log(\"deleting user...selectedUser:  \", this.context.selectedUser);\n      const userId = this.context.userId;\n      const selectedUserId = this.context.selectedUser._id;\n\n      if (this.context.user.role !== 'admin') {\n        console.log(\"Not the Admin! No edit permission!!\");\n        this.setState({\n          userAlert: \"Not the Admin! No edit permission!!\"\n        });\n      }\n\n      this.setState({\n        deleting: true,\n        userAlert: \"deleting user..\"\n      });\n      const requestBody = {\n        query: `\n        mutation {\n          deleteUser(userId: ${userId}, selectedUserId: ${selectedUserId})\n          {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}\n        }\n      `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + this.context.token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedUser = resData.data.deleteUser;\n        console.log(deletedUser);\n        let deletedUserId = deletedUser._id;\n        deletedUser = this.state.users.find(e => e._id === deletedUserId);\n        const deletedUserPos = this.state.users.indexOf(deletedUser);\n        const slicedArray = this.state.users.splice(deletedUserPos, 1);\n        console.log(\"deletedUser:  \", JSON.stringify(deletedUser), \"  deletedUserPos:  \", deletedUserPos, \"  slicedArray:  \", slicedArray);\n        this.setState({\n          deleting: false,\n          selectedUser: null\n        });\n        this.context.selectedUser = null;\n        this.fetchUsers();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n\n        if (this.isActive) {\n          this.setState({\n            deleting: false\n          });\n        }\n      });\n    };\n\n    this.showDetailHandler = userId => {\n      this.setState(prevState => {\n        const selectedUser = prevState.users.find(e => e._id === userId);\n        this.context.selectedUser = selectedUser;\n        this.setState({\n          selectedUser: selectedUser\n        });\n        console.log(\"User selected  :  \", selectedUser);\n        return {\n          selectedUser: selectedUser\n        };\n      });\n    };\n  }\n\n  // constructor(props) {\n  //   super(props);\n  // }\n  componentDidMount() {\n    this.fetchUsers();\n\n    if (this.context.user.name === 'admin579') {\n      this.setState({\n        canDelete: true\n      });\n    }\n  }\n\n  fetchUsers() {\n    console.log(\"'fetch users function' context object... \" + JSON.stringify(this.context));\n    const userId = this.context.userId;\n    this.setState({\n      isLoading: true\n    });\n    const requestBody = {\n      query: `\n          query {users (userId:\"${userId}\")\n          {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n        `\n    };\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    }).then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        this.context.userAlert = 'Failed!';\n        throw new Error('Failed!');\n      }\n\n      return res.json();\n    }).then(resData => {\n      const users = resData.data.users;\n      console.log(\"resData:  \", resData);\n      console.log(users);\n\n      if (this.isActive) {\n        this.setState({\n          users: users,\n          isLoading: false\n        });\n      }\n\n      this.context.users = this.state.users;\n    }).catch(err => {\n      console.log(err);\n      this.setState({\n        userAlert: err\n      });\n\n      if (this.isActive) {\n        this.setState({\n          isLoading: false\n        });\n      }\n    });\n  }\n\n  updateUserSpecial(event) {\n    console.log(\"special field to update:  \", event.target.value);\n    const field = event.target.value;\n    this.setState({\n      userUpdateField: field\n    });\n  }\n\n  userSearchClearlHandler() {\n    console.log(\"clearing user search results\");\n    this.setState({\n      searchUsers: []\n    });\n  }\n\n  componentWillUnmount() {\n    this.isActive = false;\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1162\n      },\n      __self: this\n    }, React.createElement(Accordion, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1166\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1168\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 3,\n      className: \"MasterCol1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1170\n      },\n      __self: this\n    }, React.createElement(AlertBox, {\n      authUserId: this.context.userId,\n      alert: this.state.userAlert,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1171\n      },\n      __self: this\n    }), React.createElement(SidebarPage, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1175\n      },\n      __self: this\n    })), React.createElement(Col, {\n      md: 9,\n      className: \"MasterCol2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1179\n      },\n      __self: this\n    }, React.createElement(Container, {\n      className: \"containerCombinedDetail\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1181\n      },\n      __self: this\n    }, React.createElement(Tabs, {\n      defaultActiveKey: \"userDetail\",\n      id: \"uncontrolled-tab-example\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1182\n      },\n      __self: this\n    }, React.createElement(Tab, {\n      eventKey: \"Edit\",\n      title: \"Edit:\",\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1183\n      },\n      __self: this\n    }), React.createElement(Tab, {\n      eventKey: \"userDetail\",\n      title: \"Details\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1185\n      },\n      __self: this\n    }, this.state.selectedUser === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1187\n      },\n      __self: this\n    }, \"Select a Staff member from the Master List below\"), this.state.isLoading === false && this.state.selectedUser !== null && React.createElement(UserDetail, {\n      authUserId: this.context.userId,\n      AuthContext: this.context,\n      user: this.state.selectedUser,\n      onEdit: this.startUpdateUserHandler,\n      canDelete: this.state.canDelete,\n      onDelete: this.modalDeleteHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1194\n      },\n      __self: this\n    })), this.context.user.role === \"admin\" && React.createElement(Tab, {\n      eventKey: \"userCreate\",\n      title: \"New\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1206\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"outline-primary\",\n      onClick: this.startCreateUserHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1207\n      },\n      __self: this\n    }, \"Create\"), this.state.creating && React.createElement(CreateUserForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmHandler,\n      onSubmit: this.modalConfirmHandler,\n      confirmText: \"Confirm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1209\n      },\n      __self: this\n    })), React.createElement(Tab, {\n      eventKey: \"userEditDemographics\",\n      title: \"Demographics\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1222\n      },\n      __self: this\n    }, this.state.selectedUser === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1224\n      },\n      __self: this\n    }, \"Select a Staff member from the Master List below\"), this.state.selectedUser !== null && this.context.user.role === \"admin\" && React.createElement(Button, {\n      variant: \"outline-primary\",\n      onClick: this.startUpdateUserHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1231\n      },\n      __self: this\n    }, \"Edit Demographics as Admin\"), this.state.selectedUser !== null && this.state.selectedUser._id === this.context.user._id && React.createElement(Button, {\n      variant: \"outline-primary\",\n      onClick: this.startUpdateUserHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1236\n      },\n      __self: this\n    }, \"Edit Demographics (your profile)\"), this.state.selectedUser !== null && this.state.selectedUser._id === this.context.user._id && React.createElement(Button, {\n      variant: \"outline-danger\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1240\n      },\n      __self: this\n    }, \"Your Profile\"), this.state.selectedUser !== null && this.state.selectedUser._id !== this.context.user._id && React.createElement(Button, {\n      variant: \"outline-danger\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1246\n      },\n      __self: this\n    }, \"Not my profile\"), this.state.updating && this.state.selectedUser !== null && React.createElement(UpdateUserForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmUpdateHandler,\n      confirmText: \"Confirm\",\n      user: this.context.selectedUser,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1253\n      },\n      __self: this\n    })), React.createElement(Tab, {\n      eventKey: \"userEditField\",\n      title: \"Single Field\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1266\n      },\n      __self: this\n    }, this.state.selectedUser === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1268\n      },\n      __self: this\n    }, \"Select a Staff member from the Master List below\"), this.state.selectedUser !== null && this.context.user.role === \"admin\" && React.createElement(Button, {\n      variant: \"outline-primary\",\n      onClick: this.startUpdateUserHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1276\n      },\n      __self: this\n    }, \"Edit Field as Admin\"), this.state.selectedUser !== null && this.state.selectedUser._id === this.context.user._id && React.createElement(Button, {\n      variant: \"outline-primary\",\n      onClick: this.startUpdateUserHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1281\n      },\n      __self: this\n    }, \"Edit Field (your profile)\"), this.state.selectedUser !== null && this.state.selectedUser._id === this.context.user._id && React.createElement(Button, {\n      variant: \"outline-danger\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1285\n      },\n      __self: this\n    }, \"Your Profile\"), this.state.selectedUser !== null && this.state.selectedUser._id !== this.context.user._id && React.createElement(Button, {\n      variant: \"outline-danger\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1291\n      },\n      __self: this\n    }, \"Not my profile\"), this.state.updating && this.state.selectedUser !== null && React.createElement(UpdateUserFieldForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmUpdateFieldHandler,\n      confirmText: \"Confirm\",\n      user: this.state.selectedUser,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1298\n      },\n      __self: this\n    })), React.createElement(Tab, {\n      eventKey: \"userEditAttendance\",\n      title: \"Attendance\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1310\n      },\n      __self: this\n    }, this.state.selectedUser === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1312\n      },\n      __self: this\n    }, \"Select a Staff member from the Master List below\"), this.state.selectedUser !== null && this.context.user.role === \"admin\" && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"attendance\",\n      onClick: this.updateUserSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1320\n      },\n      __self: this\n    }, \"Add Attendance as Admin\"), this.state.selectedUser !== null && this.state.selectedUser._id === this.context.user._id && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"attendance\",\n      onClick: this.updateUserSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1325\n      },\n      __self: this\n    }, \"Add Attendance (your profile)\"), this.state.selectedUser !== null && this.state.selectedUser._id === this.context.user._id && React.createElement(Button, {\n      variant: \"outline-danger\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1329\n      },\n      __self: this\n    }, \"Your Profile\"), this.state.selectedUser !== null && this.state.selectedUser._id !== this.context.user._id && React.createElement(Button, {\n      variant: \"outline-danger\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1335\n      },\n      __self: this\n    }, \"Not my profile\"), this.state.userUpdateField === 'attendance' && this.state.selectedUser !== null && React.createElement(UpdateUserAttendanceForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updateUserAttendanceHandler,\n      confirmText: \"Confirm\",\n      user: this.state.selectedUser,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1343\n      },\n      __self: this\n    })), React.createElement(Tab, {\n      eventKey: \"userEditLeave\",\n      title: \"Leave\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1355\n      },\n      __self: this\n    }, this.state.selectedUser === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1357\n      },\n      __self: this\n    }, \"Select a Staff member from the Master List below\"), this.state.selectedUser !== null && this.context.user.role === \"admin\" && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"leave\",\n      onClick: this.updateUserSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1365\n      },\n      __self: this\n    }, \"Add Leave as Admin\"), this.state.selectedUser !== null && this.state.selectedUser._id === this.context.user._id && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"leave\",\n      onClick: this.updateUserSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1370\n      },\n      __self: this\n    }, \"Add Leave (your profile)\"), this.state.selectedUser !== null && this.state.selectedUser._id === this.context.user._id && React.createElement(Button, {\n      variant: \"outline-danger\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1374\n      },\n      __self: this\n    }, \"Your Profile\"), this.state.selectedUser !== null && this.state.selectedUser._id !== this.context.user._id && React.createElement(Button, {\n      variant: \"outline-danger\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1380\n      },\n      __self: this\n    }, \"Not my profile\"), this.state.userUpdateField === 'leave' && this.state.selectedUser !== null && React.createElement(UpdateUserLeaveForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updateUserLeaveHandler,\n      confirmText: \"Confirm\",\n      user: this.state.selectedUser,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1387\n      },\n      __self: this\n    })), React.createElement(Tab, {\n      eventKey: \"userEditAttachment\",\n      title: \"Attachment\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1397\n      },\n      __self: this\n    }, this.state.selectedUser === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1399\n      },\n      __self: this\n    }, \"Select a Staff member from the Master List below\"), this.state.selectedUser !== null && this.context.user.role === \"admin\" && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"attachments\",\n      onClick: this.updateUserSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1407\n      },\n      __self: this\n    }, \"Add Attachment as Admin\"), this.state.selectedUser !== null && this.state.selectedUser._id === this.context.user._id && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"attachments\",\n      onClick: this.updateUserSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1412\n      },\n      __self: this\n    }, \"Add Attachment (your profile)\"), this.state.selectedUser !== null && this.state.selectedUser._id === this.context.user._id && React.createElement(Button, {\n      variant: \"outline-danger\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1416\n      },\n      __self: this\n    }, \"Your Profile\"), this.state.selectedUser !== null && this.state.selectedUser._id !== this.context.user._id && React.createElement(Button, {\n      variant: \"outline-danger\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1422\n      },\n      __self: this\n    }, \"Not my profile\"), this.state.userUpdateField === 'attachments' && this.state.selectedUser !== null && React.createElement(UpdateUserAttachmentForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updateUserAttachmentHandler,\n      confirmText: \"Confirm\",\n      user: this.state.selectedUser,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1429\n      },\n      __self: this\n    })), React.createElement(Tab, {\n      eventKey: \"MasterList\",\n      title: \"Master List\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1441\n      },\n      __self: this\n    }, React.createElement(Container, {\n      className: \"containerUserMasterList\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1442\n      },\n      __self: this\n    }, React.createElement(Row, {\n      className: \"searchListRow\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1443\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"primary\",\n      size: \"sm\",\n      onClick: this.fetchUsersAsc,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1444\n      },\n      __self: this\n    }, \"Sort Asc\"), React.createElement(Button, {\n      variant: \"info\",\n      size: \"sm\",\n      onClick: this.fetchUsersDesc,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1447\n      },\n      __self: this\n    }, \"Sort Desc\"), this.state.isLoading ? React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1451\n      },\n      __self: this\n    }) : React.createElement(UserList, {\n      users: this.state.users,\n      authUserId: this.context.userId,\n      onViewDetail: this.showDetailHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1453\n      },\n      __self: this\n    })))), React.createElement(Tab, {\n      eventKey: \"SearchInput\",\n      title: \"Search\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1464\n      },\n      __self: this\n    }, React.createElement(Container, {\n      className: \"containerSearchUserInput\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1465\n      },\n      __self: this\n    }, React.createElement(Row, {\n      className: \"searchUserRowAdd\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1467\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"primary\",\n      onClick: this.startSearchUserHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1468\n      },\n      __self: this\n    }, \"Search\")), React.createElement(Row, {\n      className: \"searchUserRowForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1471\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 10,\n      className: \"searchUserColForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1472\n      },\n      __self: this\n    }, React.createElement(Tabs, {\n      defaultActiveKey: \"Field\",\n      id: \"uncontrolled-tab-example\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1473\n      },\n      __self: this\n    }, React.createElement(Tab, {\n      eventKey: \"Search\",\n      title: \"Search:\",\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1474\n      },\n      __self: this\n    }), React.createElement(Tab, {\n      eventKey: \"Field\",\n      title: \"Field:\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1476\n      },\n      __self: this\n    }, this.state.searching === true && React.createElement(SearchUserForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmSearchHandler,\n      confirmText: \"Search\",\n      user: this.context.selectedUser,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1478\n      },\n      __self: this\n    })), React.createElement(Tab, {\n      eventKey: \"Id\",\n      title: \"Id:\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1488\n      },\n      __self: this\n    }, this.state.searching === true && React.createElement(SearchUserIdForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmSearchIdHandler,\n      confirmText: \"Search\",\n      user: this.context.selectedUser,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1490\n      },\n      __self: this\n    })), React.createElement(Tab, {\n      eventKey: \"Attendance\",\n      title: \"Attendance:\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1501\n      },\n      __self: this\n    }, this.state.searching === true && React.createElement(SearchUserAttendanceDateForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmSearchAttendanceDateHandler,\n      confirmText: \"Search\",\n      user: this.context.selectedUser,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1503\n      },\n      __self: this\n    })), React.createElement(Tab, {\n      eventKey: \"Leave\",\n      title: \"Leave:\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1514\n      },\n      __self: this\n    }, this.state.searching === true && React.createElement(SearchUserLeaveDateRangeForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmSearchLeaveDateRangeHandler,\n      confirmText: \"Search\",\n      user: this.context.selectedUser,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1516\n      },\n      __self: this\n    })), React.createElement(Tab, {\n      eventKey: \"Name\",\n      title: \"Name:\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1527\n      },\n      __self: this\n    }, this.state.searching === true && React.createElement(SearchUserNameForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmSearchNameHandler,\n      confirmText: \"Search\",\n      user: this.context.selectedUser,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1529\n      },\n      __self: this\n    })))), React.createElement(Col, {\n      md: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1542\n      },\n      __self: this\n    })))), React.createElement(Tab, {\n      eventKey: \"SearchResult\",\n      title: \"Search Results\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1549\n      },\n      __self: this\n    }, React.createElement(Container, {\n      className: \"containerSearchUserResults\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1550\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1551\n      },\n      __self: this\n    }, React.createElement(Card, {\n      className: \"searchCard\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1552\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      className: \"searchCardBody\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1553\n      },\n      __self: this\n    }, React.createElement(Card.Title, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1554\n      },\n      __self: this\n    }, \"Your Search\"), React.createElement(Card.Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1555\n      },\n      __self: this\n    }, \"Field: \", this.state.userSearchField), React.createElement(Card.Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1558\n      },\n      __self: this\n    }, \"Query: \", this.state.userSearchQuery)))), React.createElement(Row, {\n      className: \"searchListRow\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1564\n      },\n      __self: this\n    }, this.state.searchUsers !== [] && React.createElement(SearchUserList, {\n      searchUsers: this.state.searchUsers,\n      authUserId: this.context.userId,\n      onViewDetail: this.showDetailHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1566\n      },\n      __self: this\n    }))))))))));\n  }\n\n}\n\nUsersPage.contextType = AuthContext;\nexport default UsersPage;","map":{"version":3,"sources":["/Users/pedrojacob/Downloads/AMR/websites/office_records/ENT_EMR/frontend/src/pages/Users.js"],"names":["React","Component","Container","Row","Col","Button","Accordion","Tabs","Tab","Card","UserList","SearchUserList","UserDetail","Spinner","AuthContext","SidebarPage","AlertBox","CreateUserForm","UpdateUserForm","UpdateUserFieldForm","UpdateUserAttendanceForm","UpdateUserAttachmentForm","UpdateUserLeaveForm","SearchUserForm","SearchUserIdForm","SearchUserNameForm","SearchUserAttendanceDateForm","SearchUserLeaveDateRangeForm","UsersPage","state","creating","updating","deleting","searching","users","searchUsers","isLoading","isSorting","selectedUser","userUpdateField","userSearchField","userSearchQuery","canDelete","userAlert","isActive","startCreateUserHandler","setState","console","log","startUpdateUserHandler","startSearchUserHandler","modalConfirmHandler","event","target","formGridEmail","value","email","password","formGridPassword","name","formGridName","role","formGridRole","dob","formGridDob","phone","formGridPhone","addressNumber","formGridAddressNumber","addressStreet","formGridAddressStreet","addressTown","formGridAddressTown","addressParish","formGridAddressParish","addressPostOffice","formGridAddressPostOffice","employmentDate","formGridEmploymentDate","terminationDate","formGridTerminationDate","trim","length","token","context","userId","user","requestBody","query","fetch","method","body","JSON","stringify","headers","Authorization","then","res","status","Error","json","resData","data","createUser","responseAlert","slice","prevState","updatedUsers","push","catch","err","modalConfirmUpdateHandler","selectedUserId","_id","address","number","street","town","parish","postOffice","updatedUser","updateUser","modalConfirmUpdateFieldHandler","formGridField","formGridFieldSelect","field","formGridQuery","updateUserField","updatedUserId","find","e","updatedUserPos","indexOf","slicedArray","splice","updateUserAttendanceHandler","formGridAttendanceDate","attendanceDate","attendanceStatus","formGridAttendanceStatus","attendanceDescription","formGridAttendanceDescription","userAttendance","updateUserAttendance","updateUserAttachmentHandler","formGridAttachmentName","attachmentName","attachmentFormat","formGridAttachmentFormat","attachmentPath","formGridAttachmentPath","userAttachment","updateUserAttachment","updateUserLeaveHandler","formGridLeaveType","leaveType","leaveTitle","formGridLeaveTitle","leaveStartDate","formGridLeaveStartDate","leaveEndDate","formGridLeaveEndDate","userLeave","updateUserLeave","modalConfirmSearchHandler","formBasicField","formBasicQuery","formBasicFieldSelect","search","getUserField","modalConfirmSearchIdHandler","formBasicId","getUserId","modalConfirmSearchAttendanceDateHandler","formBasicDate","modalConfirmSearchLeaveDateRangeHandler","startDate","formBasicStartDate","endDate","formBasicEndDate","modalConfirmSearchNameHandler","formBasicName","regex","RegExp","result","filter","match","modalCancelHandler","fetchUsersAsc","usersNameAsc","fetchUsersDesc","usersNameDesc","modalDeleteHandler","deletedUser","deleteUser","deletedUserId","deletedUserPos","fetchUsers","showDetailHandler","componentDidMount","updateUserSpecial","userSearchClearlHandler","componentWillUnmount","render","bind","contextType"],"mappings":"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","sourcesContent":["\n\nimport React, { Component } from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n// import Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Accordion from 'react-bootstrap/Accordion';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\nimport Card from 'react-bootstrap/Card';\n\n// import Modal from '../components/Modal/Modal';\n// import Backdrop from '../components/Backdrop/Backdrop';\nimport UserList from '../components/Users/UserList/UserList';\nimport SearchUserList from '../components/Users/UserList/SearchUserList';\nimport UserDetail from '../components/Users/UserDetail';\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\n\nimport SidebarPage from './Sidebar';\nimport AlertBox from '../components/AlertBox';\n\nimport CreateUserForm from '../components/Forms/CreateUserForm';\nimport UpdateUserForm from '../components/Forms/UpdateUserForm';\nimport UpdateUserFieldForm from '../components/Forms/UpdateUserFieldForm';\nimport UpdateUserAttendanceForm from '../components/Forms/UpdateUserAttendanceForm';\nimport UpdateUserAttachmentForm from '../components/Forms/UpdateUserAttachmentForm';\nimport UpdateUserLeaveForm from '../components/Forms/UpdateUserLeaveForm';\nimport SearchUserForm from '../components/Forms/SearchUserForm';\nimport SearchUserIdForm from '../components/Forms/SearchUserIdForm';\nimport SearchUserNameForm from '../components/Forms/SearchUserNameForm';\nimport SearchUserAttendanceDateForm from '../components/Forms/SearchUserAttendanceDateForm';\nimport SearchUserLeaveDateRangeForm from '../components/Forms/SearchUserLeaveDateRangeForm';\nimport './Users.css';\n\nclass UsersPage extends Component {\n  state = {\n    creating: false,\n    updating: false,\n    deleting: false,\n    searching: false,\n    users: [],\n    searchUsers: [],\n    isLoading: false,\n    isSorting: false,\n    selectedUser: null,\n    userUpdateField: null,\n    userSearchField: null,\n    userSearchQuery: null,\n    canDelete: null,\n    userAlert: null,\n  };\n  isActive = true;\n\n  static contextType = AuthContext;\n\n  // constructor(props) {\n  //   super(props);\n  // }\n\n  componentDidMount() {\n    this.fetchUsers();\n    if (this.context.user.name === 'admin579'){\n      this.setState({canDelete: true})\n    }\n  }\n\n\n  startCreateUserHandler = () => {\n    this.setState({ creating: true });\n    console.log(\"CreateUserForm...\");\n  };\n  startUpdateUserHandler = () => {\n    this.setState({ updating: true });\n    console.log(\"UpdateUserForm...\");\n  };\n\n  startSearchUserHandler = () => {\n    this.setState({ searching: true });\n    console.log(\"SearchUserForm...\");\n  };\n\n  modalConfirmHandler = (event) => {\n\n    console.log(\"CreateUserFormData:  \", event.target.formGridEmail.value);\n\n    this.setState({ creating: false });\n    const email = event.target.formGridEmail.value;\n    const password = event.target.formGridPassword.value;\n    const name = event.target.formGridName.value;\n    const role = event.target.formGridRole.value;\n    let dob = event.target.formGridDob.value;\n    let phone = event.target.formGridPhone.value;\n    let addressNumber = event.target.formGridAddressNumber.value;\n    let addressStreet = event.target.formGridAddressStreet.value;\n    let addressTown = event.target.formGridAddressTown.value;\n    let addressParish = event.target.formGridAddressParish.value;\n    let addressPostOffice = event.target.formGridAddressPostOffice.value;\n    let employmentDate = event.target.formGridEmploymentDate.value;\n    let terminationDate = event.target.formGridTerminationDate.value;\n\n    if (\n      email.trim().length === 0 ||\n      password.trim().length === 0 ||\n      name.trim().length === 0 ||\n      role.trim().length === 0 ||\n      dob.trim().length === 0 ||\n      phone.trim().length === 0 ||\n      addressNumber.trim().length === 0 ||\n      addressStreet.trim().length === 0 ||\n      addressTown.trim().length === 0 ||\n      addressParish.trim().length === 0 ||\n      addressPostOffice.trim().length === 0 ||\n      employmentDate.trim().length === 0 ||\n      terminationDate.trim().length === 0\n    ) {\n      console.log(\"blank fields detected!!!...Please try again...\");\n      this.setState({userAlert: \"blank fields detected!!!...Please try again...\"});\n      return;\n    }\n\n    const token = this.context.token;\n    const userId = this.context.userId;\n    const user = { email, password, name, role, dob, phone, addressNumber, addressStreet, addressTown, addressParish, addressPostOffice, employmentDate, terminationDate };\n\n    console.log(`\n      creating user...\n      userId: ${userId}\n      email: ${email},\n      password: ${password},\n      name: ${name},\n      role: ${role},\n      dob: ${dob},\n      phone: ${phone},\n      addressNumber: ${addressNumber},\n      addressStreet: ${addressStreet},\n      addressTown: ${addressTown},\n      addressParish: ${addressParish},\n      addressPostOffice: ${addressPostOffice},\n      employmentDate: ${employmentDate},\n      terminationDate: ${terminationDate},\n      `);\n\n    const requestBody = {\n      query: `\n          mutation {\n            createUser(userInput: {email:\"${email}\",password:\"${password}\",name:\"${name}\",role:\"${role}\",dob:\"${dob}\",addressNumber:${addressNumber},addressStreet:\"${addressStreet}\",addressTown:\"${addressTown}\",addressParish:\"${addressParish}\",addressPostOffice:\"${addressPostOffice}\",phone:\"${phone}\",employmentDate:\"${employmentDate}\",terminationDate:\"${terminationDate}\"})\n            {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}\n          }\n        `\n    };\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"create user response data... \" + JSON.stringify(resData.data.createUser));\n        const responseAlert = JSON.stringify(resData.data).slice(0,8);\n        this.setState({userAlert: responseAlert});\n\n        this.setState(prevState => {\n          const updatedUsers = [...prevState.users];\n          updatedUsers.push(resData.data.createUser);\n\n          return { users: updatedUsers };\n        });\n        this.context.users = this.state.users;\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n  };\n\n\n  modalConfirmUpdateHandler = (event) => {\n\n    const token = this.context.token;\n    const userId = this.context.userId;\n    let selectedUserId = this.context.selectedUser._id;\n    if(userId !== selectedUserId && this.context.user.role !== 'admin') {\n      console.log(\"Not the creator or Admin! No edit permission!!\");\n      this.setState({userAlert: \"Not the creator or Admin! No edit permission!!\"});\n      selectedUserId = null;\n    }\n\n    console.log(\"UpdateUserFormData:  \", event.target.formGridEmail.value);\n\n    this.setState({ updating: false });\n\n    let email = event.target.formGridEmail.value;\n    let password = event.target.formGridPassword.value;\n    let name = event.target.formGridName.value;\n    let role = event.target.formGridRole.value;\n    let dob = event.target.formGridDob.value;\n    let phone = event.target.formGridPhone.value;\n    let addressNumber = event.target.formGridAddressNumber.value;\n    let addressStreet = event.target.formGridAddressStreet.value;\n    let addressTown = event.target.formGridAddressTown.value;\n    let addressParish = event.target.formGridAddressParish.value;\n    let addressPostOffice = event.target.formGridAddressPostOffice.value;\n    let employmentDate = event.target.formGridEmploymentDate.value;\n    let terminationDate = event.target.formGridTerminationDate.value;\n\n    if (email.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      email = this.state.user.email;\n    }\n    if (password.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      password = this.state.user.password;\n    }\n    if (name.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      name = this.state.user.name;\n    }\n    if (role.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      role = this.state.user.role;\n    }\n    if (dob.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      dob = this.state.user.dob;\n    }\n    if (phone.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      phone = this.state.user.phone;\n    }\n    if (addressNumber.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      addressNumber = this.state.user.address.number;\n    }\n    if (addressStreet.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      addressStreet = this.state.user.address.street;\n    }\n    if (addressTown.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      addressTown = this.state.user.address.town;\n    }\n    if (addressParish.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      addressParish = this.state.user.address.parish;\n    }\n    if (addressPostOffice.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      addressPostOffice = this.state.user.address.postOffice;\n    }\n    if (employmentDate.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      employmentDate = this.state.user.employmentDate;\n    }\n    if (terminationDate.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      terminationDate = this.state.user.terminationDate;\n    }\n\n    const user = { email, password, name, role, dob, phone, addressNumber, addressStreet, addressTown, addressParish, addressPostOffice, employmentDate, terminationDate };\n    console.log(`\n      updating user profile...\n      userId: ${userId}\n      email: ${email},\n      password: ${password},\n      name: ${name},\n      role: ${role},\n      dob: ${dob},\n      phone: ${phone},\n      addressNumber: ${addressNumber},\n      addressStreet: ${addressStreet},\n      addressTown: ${addressTown},\n      addressParish: ${addressParish},\n      addressPostOffice: ${addressPostOffice},\n      employmentDate: ${employmentDate},\n      terminationDate: ${terminationDate},\n      `);\n      this.setState({userAlert: \"updating user profile...\"});\n\n    const requestBody = {\n      query: `\n      mutation{\n        updateUser(userId:\"${userId}\",selectedUserId:\"${selectedUserId}\",userInput:{email:\"${email}\",password:\"${password}\",name:\"${name}\",dob:\"${dob}\",addressNumber:\"${addressNumber}\",addressStreet:\"${addressStreet}\",addressTown:\"${addressTown}\",addressParish:\"${addressParish}\",addressPostOffice:\"${addressPostOffice}\",phone:\"${phone}\",role:\"${role}\",employmentDate:\"${employmentDate}\",terminationDate:\"${terminationDate}\"})\n        {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}\n      }\n        `};\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }})\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n        const updatedUser = resData.data.updateUser;\n        console.log(\"updatedUser:  \", JSON.stringify(updatedUser));\n        this.setState({user: updatedUser})\n        this.state.users.push(resData.data.updateUser);\n        this.context.users = this.state.users;\n\n        const responseAlert = JSON.stringify(resData.data).slice(0,8);\n        this.setState({userAlert: responseAlert});\n        // this.fetchUsers();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n  };\n\n\n  modalConfirmUpdateFieldHandler = (event) => {\n\n    const token = this.context.token;\n    const userId = this.context.userId;\n    let selectedUserId = this.context.selectedUser._id;\n    // if(userId !== selectedUserId && this.context.user.role !== 'admin') {\n    //   console.log(\"Not the creator or Admin! No edit permission!!\");\n    //   selectedUserId = null;\n    // }\n\n\n      console.log(\"UpdateUserFieldFormData:  \", event.target.formGridField.value, event.target.formGridFieldSelect.value);\n      this.setState({ updating: false });\n\n      let field = null;\n      let query = event.target.formGridQuery.value;\n      if (event.target.formGridFieldSelect.value === \"select\") {\n        field = event.target.formGridField.value;\n      } else {\n        field = event.target.formGridFieldSelect.value;\n      }\n      console.log(`\n          field: ${field},\n          query: ${query},\n        `);\n\n        this.setState({ userAlert: \"updating user field...\"})\n\n      const requestBody = {\n        query:`\n          mutation{updateUserField(userId:\"${userId}\",selectedUserId:\"${selectedUserId}\",field:\"${field}\",query:\"${query}\")\n          {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}\n        }\n        `};\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData.data.updateUserField));\n\n          const responseAlert = JSON.stringify(resData.data).slice(0,8);\n          this.setState({userAlert: responseAlert});\n\n          const updatedUserId = resData.data.updateUserField._id;\n          const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n          const updatedUserPos = this.state.users.indexOf(updatedUser);\n          const slicedArray = this.state.users.splice(updatedUserPos, 1);\n          console.log(\"updatedUser:  \", JSON.stringify(updatedUser),\"  updatedUserPos:  \", updatedUserPos, \"  slicedArray:  \", slicedArray);\n\n          this.state.users.push(resData.data.updateUserField);\n          this.context.users = this.state.users;\n          // this.fetchUsers();\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({userAlert: err});\n        });\n\n  }\n\n  updateUserAttendanceHandler = (event) => {\n    const token = this.context.token;\n    const userId = this.context.userId;\n    let selectedUserId = this.context.selectedUser._id;\n    // if(userId !== selectedUserId && this.context.user.role !== 'admin') {\n    //   console.log(\"Not the creator or Admin! No edit permission!!\");\n    //   selectedUserId = null;\n    // }\n    if (userId !== selectedUserId && this.context.user.role !== \"admin\" ) {\n      console.log(\"Not the creator or Admin! No edit permission!!\");\n      this.setState({ userAlert: \"Not the creator or Admin! No edit permission!!\"});\n        selectedUserId = null;\n    }\n\n    console.log(\"UpdateUserAttendanceFormData:  \", event.target.formGridAttendanceDate.value);\n\n    this.setState({ updating: false , userUpdateField: null });\n\n    let attendanceDate = event.target.formGridAttendanceDate.value;\n    let attendanceStatus = event.target.formGridAttendanceStatus.value;\n    let attendanceDescription = event.target.formGridAttendanceDescription.value;\n\n    if (attendanceDate.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      attendanceDate = this.context.selectedUser.attendanceDate;\n    }\n    if (attendanceStatus.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      attendanceStatus = this.context.selectedUser.attendanceStatus;\n    }\n    if (attendanceDescription.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      attendanceDescription = this.context.selectedUser.attendanceDescription;\n    }\n\n    const userAttendance = { attendanceDate, attendanceStatus, attendanceDescription }\n    console.log(`\n      adding user attendance item...\n      userId: ${userId},\n      selectedUserId: ${selectedUserId}\n      attendanceDate: ${attendanceDate},\n      attendanceStatus: ${attendanceStatus},\n      attendanceDescription: ${attendanceDescription}\n      `);\n\n      this.setState({ userAlert: \"adding user attendance item...\"});\n\n      const requestBody = {\n        query:`\n          mutation {updateUserAttendance(userId:\"${userId}\", selectedUserId:\"${selectedUserId}\",userInput:{attendanceDate:\"${attendanceDate}\",attendanceStatus:\"${attendanceStatus}\",attendanceDescription:\"${attendanceDescription}\"})\n          {_id,name,email,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description}}}\n        `};\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData.data.updateUserAttendance));\n\n          const responseAlert = JSON.stringify(resData.data).slice(0,8);\n          this.setState({userAlert: responseAlert});\n\n          const updatedUserId = resData.data.updateUserAttendance._id;\n          const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n          const updatedUserPos = this.state.users.indexOf(updatedUser);\n          const slicedArray = this.state.users.splice(updatedUserPos, 1);\n          console.log(\"updatedUser:  \", JSON.stringify(updatedUser),\"  updatedUserPos:  \", updatedUserPos, \"  slicedArray:  \", slicedArray);\n\n          this.state.users.push(resData.data.updateUserAttendance);\n          this.context.users = this.state.users;\n          // this.fetchUsers();\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({userAlert: err});\n        });\n\n\n  }\n\n  updateUserAttachmentHandler = (event) => {\n\n    const token = this.context.token;\n    const userId = this.context.userId;\n    let selectedUserId = this.context.selectedUser._id;\n    // if(userId !== selectedUserId && this.context.user.role !== 'admin') {\n    //   console.log(\"Not the creator or Admin! No edit permission!!\");\n    //   selectedUserId = null;\n    // }\n    if (userId !== selectedUserId && this.context.user.role !== \"admin\" ) {\n      console.log(\"Not the creator or Admin! No edit permission!!\");\n      this.setState({userAlert: \"Not the creator or Admin! No edit permission!!\"})\n        selectedUserId = null;\n    }\n\n    console.log(\"UpdateUserAttachmentFormData:  \", event.target.formGridAttachmentName.value);\n\n    this.setState({ updating: false , userUpdateField: null });\n\n    let attachmentName = event.target.formGridAttachmentName.value;\n    let attachmentFormat = event.target.formGridAttachmentFormat.value;\n    let attachmentPath = event.target.formGridAttachmentPath.value;\n\n\n    if (attachmentName.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      attachmentName = this.context.selectedUser.attachmentName;\n    }\n    if (attachmentFormat.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      attachmentFormat = this.context.selectedUser.attachmentFormat;\n    }\n    if (attachmentPath.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      attachmentPath = this.context.selectedUser.attachmentPath;\n    }\n\n    const userAttachment = { attachmentName, attachmentFormat, attachmentPath }\n    console.log(`\n      adding user attendance item...\n      userId: ${userId},\n      selectedUserId: ${selectedUserId}\n      attachmentName: ${attachmentName},\n      attachmentFormat: ${attachmentFormat},\n      attachmentPath: ${attachmentPath}\n      `);\n      this.setState({userAlert: \"adding user attendance item...\"})\n\n      const requestBody = {\n        query:`\n          mutation {updateUserAttachment(userId:\"${userId}\", selectedUserId:\"${selectedUserId}\",userInput:{attachmentName:\"${attachmentName}\",attachmentFormat:\"${attachmentFormat}\",attachmentPath:\"${attachmentPath}\"})\n          {_id,name,email,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description}}}\n        `};\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData.data.updateUserAttachment));\n\n          const responseAlert = JSON.stringify(resData.data).slice(0,8);\n          this.setState({userAlert: responseAlert});\n\n          const updatedUserId = resData.data.updateUserAttachment._id;\n          const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n          const updatedUserPos = this.state.users.indexOf(updatedUser);\n          const slicedArray = this.state.users.splice(updatedUserPos, 1);\n          console.log(\"updatedUser:  \", JSON.stringify(updatedUser),\"  updatedUserPos:  \", updatedUserPos, \"  slicedArray:  \", slicedArray);\n\n          this.state.users.push(resData.data.updateUserAttachment);\n          this.context.users = this.state.users;\n          // this.fetchUsers();\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({userAlert: err});\n        });\n\n\n  }\n\n\n  updateUserLeaveHandler = (event) => {\n\n    const token = this.context.token;\n    const userId = this.context.userId;\n    let selectedUserId = this.context.selectedUser._id;\n    // if(userId !== selectedUserId && this.context.user.role !== 'admin') {\n    //   console.log(\"Not the creator or Admin! No edit permission!!\");\n    //   selectedUserId = null;\n    // }\n    if (userId !== selectedUserId && this.context.user.role !== \"admin\" ) {\n      console.log(\"Not the creator or Admin! No edit permission!!\");\n      this.setState({userAlert: \"Not the creator or Admin! No edit permission!!\"})\n        selectedUserId = null;\n    }\n\n    console.log(\"UpdateUserLeaveFormData:  \", event.target.formGridLeaveType.value);\n\n    this.setState({ updating: false , userUpdateField: null });\n\n    let leaveType = event.target.formGridLeaveType.value;\n    let leaveTitle = event.target.formGridLeaveTitle.value;\n    let leaveStartDate = event.target.formGridLeaveStartDate.value;\n    let leaveEndDate = event.target.formGridLeaveEndDate.value;\n\n    if (leaveType.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      leaveType = this.context.selectedUser.leaveType;\n    }\n    if (leaveTitle.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      leaveTitle = this.context.selectedUser.leaveTitle;\n    }\n    if (leaveStartDate.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      leaveStartDate = this.context.selectedUser.leaveStartDate;\n    }\n    if (leaveEndDate.trim().length === 0) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      leaveEndDate = this.context.selectedUser.leaveEndDate;\n    }\n\n    const userLeave = { leaveType, leaveTitle, leaveStartDate, leaveEndDate }\n    console.log(`\n      adding user attendance item...\n      userId: ${userId},\n      selectedUserId: ${selectedUserId}\n      leave: {\n        type: ${leaveType},\n        title: ${leaveTitle},\n        startDate: ${leaveStartDate},\n        endDate: ${leaveEndDate}\n      }\n      `);\n      this.setState({userAlert: \"adding user attendance item...\"})\n\n      const requestBody = {\n        query:`\n          mutation {updateUserLeave(userId:\"${userId}\", selectedUserId:\"${userId}\",userInput:{leaveType:\"${leaveType}\",leaveTitle:\"${leaveTitle}\",leaveStartDate:\"${leaveStartDate}\",leaveEndDate:\"${leaveEndDate}\"})\n          {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n        `};\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData.data));\n\n          const responseAlert = JSON.stringify(resData.data).slice(0,8);\n          this.setState({userAlert: responseAlert});\n\n          const updatedUserId = resData.data.updateUserLeave._id;\n          const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n          const updatedUserPos = this.state.users.indexOf(updatedUser);\n          const slicedArray = this.state.users.splice(updatedUserPos, 1);\n          console.log(\"updatedUser:  \", JSON.stringify(updatedUser),\"  updatedUserPos:  \", updatedUserPos, \"  slicedArray:  \", slicedArray);\n\n          this.state.users.push(resData.data.updateUserLeave);\n          this.context.users = this.state.users;\n          // this.fetchUsers();\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({userAlert: err});\n        });\n\n  }\n\n\n  modalConfirmSearchHandler = (event) => {\n    console.log(\"SearchUserForm:  \");\n\n\n    let userId = this.context.userId;\n\n      console.log(\"SearchUserFormData:  \", event.target.formBasicField.value);\n      this.setState({ searching: false });\n\n      let field = null;\n      let query = event.target.formBasicQuery.value;\n      if (event.target.formBasicFieldSelect.value === \"select\") {\n        field = event.target.formBasicField.value;\n      } else {\n        field = event.target.formBasicFieldSelect.value;\n      }\n\n      this.setState({\n        userSearchField: field,\n        userSearchQuery: query,\n      })\n\n      if (\n        field.trim().length === 0 ||\n        query.trim().length === 0\n      ) {\n        console.log(\"blank fields detected!!!...Please try again...\");\n        this.setState({userAlert: \"blank fields detected!!!...Please try again...\"})\n        return;\n      }\n\n      const search = { field, query }\n      console.log(\"Searching for User:  \", JSON.stringify(search));\n      this.setState({userAlert: \"Searching for User...\"})\n\n      const requestBody = {\n        query: `\n          query {getUserField(userId:\"${userId}\",field:\"${field}\",query:\"${query}\")\n          {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n        `}\n\n      const token = this.context.token;\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData));\n\n          const responseAlert = JSON.stringify(resData.data).slice(0,8);\n          this.setState({userAlert: responseAlert});\n\n          const searchUsers = resData.data.getUserField;\n\n          this.setState({ searchUsers: searchUsers})\n          console.log(\"state.searchUsers:  \", this.state.searchUsers);\n          // this.fetchUsers();\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({userAlert: err});\n        });\n  }\n\n  modalConfirmSearchIdHandler = (event) => {\n\n    let userId = this.context.userId;\n    this.setState({ searching: false });\n\n    console.log(\"SearchUserIdFormData:\", event.target.formBasicId.value);\n    let selectedUserId = event.target.formBasicId.value;\n\n    const requestBody = {\n      query: `\n        query {getUserId(userId:\"${userId}\",selectedUserId:\"${selectedUserId}\")\n        {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n      `}\n\n    const token = this.context.token;\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n\n        const responseAlert = JSON.stringify(resData.data).slice(0,8);\n        this.setState({userAlert: responseAlert});\n\n        const searchUsers = resData.data.getUserId;\n\n        this.setState({ searchUsers: searchUsers})\n        console.log(\"state.searchUsers:  \", this.state.searchUsers);\n        // this.fetchUsers();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n  }\n  modalConfirmSearchAttendanceDateHandler = (event) => {\n\n    let userId = this.context.userId;\n    this.setState({ searching: false });\n\n    console.log(\"SearchUserAttendanceDateFormData:\");\n\n    const attendanceDate = event.target.formBasicDate.value;\n\n    const requestBody = {\n      query: `\n        query {getUserAttendanceDate(userId:\"${userId}\",attendanceDate:\"${attendanceDate}\")\n        {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n      `}\n\n    const token = this.context.token;\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n\n        const responseAlert = JSON.stringify(resData.data).slice(0,8);\n        this.setState({userAlert: responseAlert});\n\n        const searchUsers = resData.data.getUserField;\n\n        this.setState({ searchUsers: searchUsers})\n        console.log(\"state.searchUsers:  \", this.state.searchUsers);\n        // this.fetchUsers();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n  }\n  modalConfirmSearchLeaveDateRangeHandler = (event) => {\n\n    let userId = this.context.userId;\n    this.setState({ searching: false });\n\n    console.log(\"SearchUserLeaveDateRangeFormData:\");\n\n    const startDate = event.target.formBasicStartDate.value;\n    const endDate = event.target.formBasicEndDate.value;\n\n    const requestBody = {\n      query: `\n        query{getUserLeaveDateRange(userId:\"${userId}\",startDate:\"${startDate}\",endDate:\"${endDate}\")\n        {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n      `}\n\n    const token = this.context.token;\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n\n        const searchUsers = resData.data.getUserField;\n\n        this.setState({ searchUsers: searchUsers})\n        console.log(\"state.searchUsers:  \", this.state.searchUsers);\n        // this.fetchUsers();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n  }\n\n  modalConfirmSearchNameHandler = (event) => {\n    console.log(\"SearchUserNameFormData:\", event.target.formBasicName.value);\n\n    let userId = this.context.userId;\n    this.setState({ searching: false });\n\n    let users = this.state.users;\n    const regex = new RegExp(event.target.formBasicName.value,\"i\");\n    console.log(`\n      regex: ${regex},\n      `);\n      let result = users.filter(user => user.name.match(regex))\n      console.log(`\n        result: ${JSON.stringify(result)}\n        `);\n\n        this.setState({ searchUsers: result})\n\n  }\n\n\n  modalCancelHandler = () => {\n    this.setState({ creating: false, updating: false, deleting: false, searching: false});\n  };\n\n  fetchUsers() {\n    console.log(\"'fetch users function' context object... \" + JSON.stringify(this.context));\n    const userId = this.context.userId;\n\n    this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n          query {users (userId:\"${userId}\")\n          {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n        `};\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          this.context.userAlert = 'Failed!';\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const users = resData.data.users;\n        console.log(\"resData:  \", resData);\n        console.log(users);\n\n        if (this.isActive) {\n          this.setState({ users: users, isLoading: false });\n        }\n        this.context.users = this.state.users;\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n        if (this.isActive) {\n          this.setState({ isLoading: false });\n        }\n      });\n  }\n\n  fetchUsersAsc = () => {\n    console.log(\"'fetch usersAsc function' context object... \" + JSON.stringify(this.context));\n    const userId = this.context.userId;\n\n    // this.setState({ isSorting: true });\n    const requestBody = {\n      query: `\n          query {usersNameAsc (userId:\"${userId}\")\n          {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n        `};\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          this.context.userAlert = 'Failed!';\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const users = resData.data.usersNameAsc;\n        console.log(\"resData:  \", resData);\n        console.log(users);\n\n        this.setState({users: users});\n        // if (this.isActive) {\n        //   this.setState({ users: users, isLoading: false });\n        // }\n        this.context.users = this.state.users;\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n        // if (this.isActive) {\n        //   this.setState({ isLoading: false });\n        // }\n      });\n  }\n  fetchUsersDesc = () => {\n    console.log(\"'fetch usersDesc function' context object... \" + JSON.stringify(this.context));\n    const userId = this.context.userId;\n\n    // this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n          query {usersNameDesc (userId:\"${userId}\")\n          {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n        `};\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          this.context.userAlert = 'Failed!';\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const users = resData.data.usersNameDesc;\n        console.log(\"resData:  \", resData);\n        console.log(users);\n\n        // if (this.isActive) {\n        //   this.setState({ users: users, isLoading: false });\n        // }\n        this.setState({users: users});\n        this.context.users = this.state.users;\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n        // if (this.isActive) {\n        //   this.setState({ isLoading: false });\n        // }\n      });\n  }\n\nmodalDeleteHandler = () => {\n  console.log(\"deleting user...selectedUser:  \", this.context.selectedUser);\n\n  const userId = this.context.userId;\n  const selectedUserId = this.context.selectedUser._id;\n\n  if(this.context.user.role !== 'admin') {\n    console.log(\"Not the Admin! No edit permission!!\");\n    this.setState({userAlert: \"Not the Admin! No edit permission!!\"})\n  }\n\n  this.setState({deleting: true, userAlert: \"deleting user..\"});\n\n  const requestBody = {\n    query: `\n        mutation {\n          deleteUser(userId: ${userId}, selectedUserId: ${selectedUserId})\n          {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}\n        }\n      `};\n\n  fetch('http://localhost:10000/graphql', {\n    method: 'POST',\n    body: JSON.stringify(requestBody),\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + this.context.token\n    }\n  })\n    .then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n      return res.json();\n    })\n    .then(resData => {\n      let deletedUser = resData.data.deleteUser;\n      console.log(deletedUser);\n\n      let deletedUserId = deletedUser._id;\n      deletedUser = this.state.users.find(e => e._id === deletedUserId);\n      const deletedUserPos = this.state.users.indexOf(deletedUser);\n      const slicedArray = this.state.users.splice(deletedUserPos, 1);\n      console.log(\"deletedUser:  \", JSON.stringify(deletedUser),\"  deletedUserPos:  \", deletedUserPos, \"  slicedArray:  \", slicedArray);\n\n      this.setState({ deleting: false, selectedUser: null });\n      this.context.selectedUser = null;\n\n      this.fetchUsers();\n\n    })\n    .catch(err => {\n      console.log(err);\n      this.setState({userAlert: err});\n      if (this.isActive) {\n        this.setState({ deleting: false });\n      }\n    });\n\n\n}\n\nupdateUserSpecial (event) {\n\n  console.log(\"special field to update:  \", event.target.value);\n  const field = event.target.value;\n  this.setState({ userUpdateField: field});\n\n}\n\n  showDetailHandler = userId => {\n\n    this.setState(prevState => {\n      const selectedUser = prevState.users.find(e => e._id === userId);\n      this.context.selectedUser = selectedUser;\n      this.setState({selectedUser: selectedUser});\n      console.log(\"User selected  :  \", selectedUser);\n      return { selectedUser: selectedUser };\n    });\n  };\n\n\n  userSearchClearlHandler () {\n    console.log(\"clearing user search results\");\n    this.setState({searchUsers: []});\n  }\n\n\n  componentWillUnmount() {\n    this.isActive = false;\n  }\n\n  render() {\n    return (\n\n    <React.Fragment>\n\n\n\n    <Accordion>\n\n    <Row>\n\n    <Col md={3} className=\"MasterCol1\">\n    <AlertBox\n      authUserId={this.context.userId}\n      alert={this.state.userAlert}\n    />\n    <SidebarPage/>\n\n    </Col>\n\n    <Col md={9} className=\"MasterCol2\">\n\n        <Container className=\"containerCombinedDetail\">\n          <Tabs defaultActiveKey=\"userDetail\" id=\"uncontrolled-tab-example\">\n          <Tab eventKey=\"Edit\" title=\"Edit:\" disabled>\n          </Tab>\n            <Tab eventKey=\"userDetail\" title=\"Details\">\n                  {this.state.selectedUser === null && (\n                    <Button variant=\"outline-warning\" size=\"lg\">\n                      Select a Staff member from the Master List below\n                    </Button>\n                  )}\n                  {this.state.isLoading === false &&\n                    this.state.selectedUser !== null\n                    && (\n                      <UserDetail\n                      authUserId={this.context.userId}\n                      AuthContext={this.context}\n                      user={this.state.selectedUser}\n                      onEdit={this.startUpdateUserHandler}\n                      canDelete={this.state.canDelete}\n                      onDelete={this.modalDeleteHandler}\n                      />\n                    )}\n            </Tab>\n\n            { this.context.user.role === \"admin\" && (\n              <Tab eventKey=\"userCreate\" title=\"New\">\n              <Button variant=\"outline-primary\" onClick={this.startCreateUserHandler} >Create</Button>\n              {this.state.creating && (\n                <CreateUserForm\n                  authUserId={this.context.userId}\n                  canCancel\n                  canConfirm\n                  onCancel={this.modalCancelHandler}\n                  onConfirm={this.modalConfirmHandler}\n                  onSubmit={this.modalConfirmHandler}\n                  confirmText=\"Confirm\"\n                />\n              )}\n              </Tab>\n            )}\n\n            <Tab eventKey=\"userEditDemographics\" title=\"Demographics\">\n            {this.state.selectedUser === null && (\n              <Button variant=\"outline-warning\" size=\"lg\">\n                Select a Staff member from the Master List below\n              </Button>\n            )}\n            {this.state.selectedUser !== null &&\n              this.context.user.role === \"admin\"\n              && (\n              <Button variant=\"outline-primary\" onClick={this.startUpdateUserHandler}>Edit Demographics as Admin</Button>\n            )}\n            {this.state.selectedUser !== null &&\n              this.state.selectedUser._id === this.context.user._id\n              && (\n              <Button variant=\"outline-primary\" onClick={this.startUpdateUserHandler}>Edit Demographics (your profile)</Button>\n            )}\n            {this.state.selectedUser !== null &&\n              this.state.selectedUser._id === this.context.user._id && (\n              <Button variant=\"outline-danger\" size=\"lg\">\n                Your Profile\n              </Button>\n            )}\n            {this.state.selectedUser !== null &&\n              this.state.selectedUser._id !== this.context.user._id && (\n              <Button variant=\"outline-danger\" size=\"lg\">\n                Not my profile\n              </Button>\n            )}\n            {this.state.updating &&\n              this.state.selectedUser !== null\n              && (\n              <UpdateUserForm\n                authUserId={this.context.userId}\n                canCancel\n                canConfirm\n                onCancel={this.modalCancelHandler}\n                onConfirm={this.modalConfirmUpdateHandler}\n                confirmText=\"Confirm\"\n                user={this.context.selectedUser}\n              />\n            )}\n\n            </Tab>\n\n            <Tab eventKey=\"userEditField\" title=\"Single Field\">\n            {this.state.selectedUser === null && (\n              <Button variant=\"outline-warning\" size=\"lg\">\n                Select a Staff member from the Master List below\n              </Button>\n            )}\n\n            {this.state.selectedUser !== null &&\n              this.context.user.role === \"admin\"\n              && (\n              <Button variant=\"outline-primary\" onClick={this.startUpdateUserHandler}>Edit Field as Admin</Button>\n            )}\n            {this.state.selectedUser !== null &&\n              this.state.selectedUser._id === this.context.user._id\n              && (\n              <Button variant=\"outline-primary\" onClick={this.startUpdateUserHandler}>Edit Field (your profile)</Button>\n            )}\n            {this.state.selectedUser !== null &&\n              this.state.selectedUser._id === this.context.user._id && (\n              <Button variant=\"outline-danger\" size=\"lg\">\n                Your Profile\n              </Button>\n            )}\n            {this.state.selectedUser !== null &&\n              this.state.selectedUser._id !== this.context.user._id && (\n              <Button variant=\"outline-danger\" size=\"lg\">\n                Not my profile\n              </Button>\n            )}\n            {this.state.updating &&\n              this.state.selectedUser !== null\n              && (\n                <UpdateUserFieldForm\n                  authUserId={this.context.userId}\n                  canCancel\n                  canConfirm\n                  onCancel={this.modalCancelHandler}\n                  onConfirm={this.modalConfirmUpdateFieldHandler}\n                  confirmText=\"Confirm\"\n                  user={this.state.selectedUser}\n                />\n            )}\n            </Tab>\n\n            <Tab eventKey=\"userEditAttendance\" title=\"Attendance\">\n            {this.state.selectedUser === null && (\n              <Button variant=\"outline-warning\" size=\"lg\">\n                Select a Staff member from the Master List below\n              </Button>\n            )}\n\n            {this.state.selectedUser !== null &&\n              this.context.user.role === \"admin\"\n              && (\n              <Button variant=\"outline-primary\" value='attendance' onClick={this.updateUserSpecial.bind(this)}>Add Attendance as Admin</Button>\n            )}\n            {this.state.selectedUser !== null &&\n              this.state.selectedUser._id === this.context.user._id\n              && (\n              <Button variant=\"outline-primary\" value='attendance' onClick={this.updateUserSpecial.bind(this)}>Add Attendance (your profile)</Button>\n            )}\n            {this.state.selectedUser !== null &&\n              this.state.selectedUser._id === this.context.user._id && (\n              <Button variant=\"outline-danger\" size=\"lg\">\n                Your Profile\n              </Button>\n            )}\n            {this.state.selectedUser !== null &&\n              this.state.selectedUser._id !== this.context.user._id && (\n              <Button variant=\"outline-danger\" size=\"lg\">\n                Not my profile\n              </Button>\n            )}\n\n            {this.state.userUpdateField === 'attendance' &&\n            this.state.selectedUser !== null\n             && (\n               <UpdateUserAttendanceForm\n              authUserId={this.context.userId}\n              canCancel\n                canConfirm\n                onCancel={this.modalCancelHandler}\n                onConfirm={this.updateUserAttendanceHandler}\n                confirmText=\"Confirm\"\n                user={this.state.selectedUser}\n              />\n            )}\n            </Tab>\n\n            <Tab eventKey=\"userEditLeave\" title=\"Leave\">\n            {this.state.selectedUser === null && (\n              <Button variant=\"outline-warning\" size=\"lg\">\n                Select a Staff member from the Master List below\n              </Button>\n            )}\n\n            {this.state.selectedUser !== null &&\n              this.context.user.role === \"admin\"\n              && (\n              <Button variant=\"outline-primary\" value='leave' onClick={this.updateUserSpecial.bind(this)}>Add Leave as Admin</Button>\n            )}\n            {this.state.selectedUser !== null &&\n              this.state.selectedUser._id === this.context.user._id\n              && (\n              <Button variant=\"outline-primary\" value='leave' onClick={this.updateUserSpecial.bind(this)}>Add Leave (your profile)</Button>\n            )}\n            {this.state.selectedUser !== null &&\n              this.state.selectedUser._id === this.context.user._id && (\n              <Button variant=\"outline-danger\" size=\"lg\">\n                Your Profile\n              </Button>\n            )}\n            {this.state.selectedUser !== null &&\n              this.state.selectedUser._id !== this.context.user._id && (\n              <Button variant=\"outline-danger\" size=\"lg\">\n                Not my profile\n              </Button>\n            )}\n\n            {this.state.userUpdateField === 'leave' &&\n            this.state.selectedUser !== null\n            && (<UpdateUserLeaveForm\n              authUserId={this.context.userId}\n              canCancel\n                canConfirm\n                onCancel={this.modalCancelHandler}\n                onConfirm={this.updateUserLeaveHandler}\n                confirmText=\"Confirm\"\n                user={this.state.selectedUser}\n              />)}\n            </Tab>\n            <Tab eventKey=\"userEditAttachment\" title=\"Attachment\">\n            {this.state.selectedUser === null && (\n              <Button variant=\"outline-warning\" size=\"lg\">\n                Select a Staff member from the Master List below\n              </Button>\n            )}\n\n            {this.state.selectedUser !== null &&\n              this.context.user.role === \"admin\"\n              && (\n              <Button variant=\"outline-primary\" value='attachments' onClick={this.updateUserSpecial.bind(this)}>Add Attachment as Admin</Button>\n            )}\n            {this.state.selectedUser !== null &&\n              this.state.selectedUser._id === this.context.user._id\n              && (\n              <Button variant=\"outline-primary\" value='attachments' onClick={this.updateUserSpecial.bind(this)}>Add Attachment (your profile)</Button>\n            )}\n            {this.state.selectedUser !== null &&\n              this.state.selectedUser._id === this.context.user._id && (\n              <Button variant=\"outline-danger\" size=\"lg\">\n                Your Profile\n              </Button>\n            )}\n            {this.state.selectedUser !== null &&\n              this.state.selectedUser._id !== this.context.user._id && (\n              <Button variant=\"outline-danger\" size=\"lg\">\n                Not my profile\n              </Button>\n            )}\n\n            {this.state.userUpdateField === 'attachments' &&\n            this.state.selectedUser !== null\n            && (<UpdateUserAttachmentForm\n              authUserId={this.context.userId}\n              canCancel\n                canConfirm\n                onCancel={this.modalCancelHandler}\n                onConfirm={this.updateUserAttachmentHandler}\n                confirmText=\"Confirm\"\n                user={this.state.selectedUser}\n              />)}\n            </Tab>\n\n\n            <Tab eventKey=\"MasterList\" title=\"Master List\">\n            <Container className=\"containerUserMasterList\">\n            <Row className=\"searchListRow\">\n            <Button variant=\"primary\" size=\"sm\" onClick={this.fetchUsersAsc}>\n               Sort Asc\n             </Button>\n            <Button variant=\"info\" size=\"sm\" onClick={this.fetchUsersDesc}>\n               Sort Desc\n             </Button>\n             {this.state.isLoading ? (\n               <Spinner />\n             ) : (\n               <UserList\n                 users={this.state.users}\n                 authUserId={this.context.userId}\n                 onViewDetail={this.showDetailHandler}\n               />\n             )}\n            </Row>\n            </Container>\n\n            </Tab>\n\n            <Tab eventKey=\"SearchInput\" title=\"Search\">\n            <Container className=\"containerSearchUserInput\">\n\n            <Row className=\"searchUserRowAdd\">\n            <Button variant=\"primary\" onClick={this.startSearchUserHandler}>Search</Button>\n            </Row>\n\n            <Row className=\"searchUserRowForm\">\n            <Col md={10} className=\"searchUserColForm\">\n            <Tabs defaultActiveKey=\"Field\" id=\"uncontrolled-tab-example\">\n            <Tab eventKey=\"Search\" title=\"Search:\" disabled>\n            </Tab>\n            <Tab eventKey=\"Field\" title=\"Field:\">\n            {this.state.searching === true && (\n              <SearchUserForm\n              authUserId={this.context.userId}\n              canCancel\n                canConfirm\n                onCancel={this.modalCancelHandler}\n                onConfirm={this.modalConfirmSearchHandler}\n                confirmText=\"Search\"\n                user={this.context.selectedUser}\n              />)}\n            </Tab>\n            <Tab eventKey=\"Id\" title=\"Id:\">\n            {this.state.searching === true && (\n              <SearchUserIdForm\n              authUserId={this.context.userId}\n              canCancel\n                canConfirm\n                onCancel={this.modalCancelHandler}\n                onConfirm={this.modalConfirmSearchIdHandler}\n                confirmText=\"Search\"\n                user={this.context.selectedUser}\n              />\n              )}\n            </Tab>\n            <Tab eventKey=\"Attendance\" title=\"Attendance:\">\n            {this.state.searching === true && (\n              <SearchUserAttendanceDateForm\n              authUserId={this.context.userId}\n              canCancel\n                canConfirm\n                onCancel={this.modalCancelHandler}\n                onConfirm={this.modalConfirmSearchAttendanceDateHandler}\n                confirmText=\"Search\"\n                user={this.context.selectedUser}\n              />\n              )}\n            </Tab>\n            <Tab eventKey=\"Leave\" title=\"Leave:\">\n            {this.state.searching === true && (\n              <SearchUserLeaveDateRangeForm\n              authUserId={this.context.userId}\n              canCancel\n                canConfirm\n                onCancel={this.modalCancelHandler}\n                onConfirm={this.modalConfirmSearchLeaveDateRangeHandler}\n                confirmText=\"Search\"\n                user={this.context.selectedUser}\n              />\n              )}\n            </Tab>\n            <Tab eventKey=\"Name\" title=\"Name:\">\n            {this.state.searching === true && (\n              <SearchUserNameForm\n              authUserId={this.context.userId}\n              canCancel\n                canConfirm\n                onCancel={this.modalCancelHandler}\n                onConfirm={this.modalConfirmSearchNameHandler}\n                confirmText=\"Search\"\n                user={this.context.selectedUser}\n              />\n            )}\n            </Tab>\n            </Tabs>\n            </Col>\n            <Col md={10}>\n            </Col>\n            </Row>\n\n            </Container>\n            </Tab>\n\n            <Tab eventKey=\"SearchResult\" title=\"Search Results\">\n            <Container className=\"containerSearchUserResults\">\n            <Row>\n              <Card className=\"searchCard\">\n                <Card.Body className=\"searchCardBody\">\n                  <Card.Title>Your Search</Card.Title>\n                  <Card.Text>\n                    Field: {this.state.userSearchField}\n                  </Card.Text>\n                  <Card.Text>\n                    Query: {this.state.userSearchQuery}\n                  </Card.Text>\n                </Card.Body>\n              </Card>\n            </Row>\n            <Row className=\"searchListRow\">\n            {this.state.searchUsers !== [] && (\n              <SearchUserList\n                searchUsers={this.state.searchUsers}\n                authUserId={this.context.userId}\n                onViewDetail={this.showDetailHandler}\n              />\n            )}\n            </Row>\n            </Container>\n            </Tab>\n          </Tabs>\n        </Container>\n\n    </Col>\n\n  </Row>\n\n</Accordion>\n</React.Fragment>\n    );\n  }\n}\n\nexport default UsersPage;\n"]},"metadata":{},"sourceType":"module"}