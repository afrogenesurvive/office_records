{"ast":null,"code":"var _jsxFileName = \"/Users/pedrojacob/Downloads/AMR/websites/office_records/ENT_EMR/frontend/src/pages/Search.js\";\nimport Backdrop from '../components/Backdrop/Backdrop';\nimport UserDetail from '../components/Users/UserDetail';\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\nimport SearchForm from '../components/Forms/SearchForm';\n\nclass UsersPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searching: false,\n      search: {},\n      users: [],\n      patients: [],\n      appointments: [],\n      results: [],\n      isLoading: false,\n      selectedUser: null,\n      selectedPatient: null,\n      selectedAppointment: null,\n      selectedResult: null\n    };\n    this.isActive = true;\n\n    this.modalCancelHandler = () => {\n      this.setState({\n        searching: false,\n        selectedUser: null\n      });\n    };\n\n    this.showDetailHandler = resultId => {\n      // pass result id from resultList component\n      this.setState(prevState => {\n        const selectedResult = prevState.results.find(e => e._id === resultId); // this.context.selectedUser = selectedUser;\n\n        console.log(\"here:  \", selectedResult);\n        return {\n          selectedResult: selectedResult\n        };\n      });\n    };\n\n    this.idElRef = React.createRef();\n    this.fieldElRef = React.createRef();\n    this.queryElRef = React.createRef();\n  }\n\n  componentDidMount() {} // search functions: by id, all, feild\n  // modalSearchHandler = () => {\n  //   this.setState({ searching: false });\n  //\n  //   const id = this.idElRef.current.value;\n  //   const field = this.fieldElRef.current.value;\n  //   const query = this.queryElRef.current.value;\n  //\n  //\n  //   if (\n  //     id.trim().length === 0 ||\n  //     field.trim().length === 0 ||\n  //     query.trim().length === 0\n  //   ) {\n  //     return;\n  //   }\n  //\n  //   search() {\n  //     console.log(\"'search function' context object... \" + JSON.stringify(this.context));\n  //     const userId = this.context.userId;\n  //\n  //     const search = { id, field, query };\n  //     console.log(\"running search... search object:  \", JSON.stringify(search));\n  //\n  //     this.setState({ isLoading: true, search: search });\n  //     const requestBody = {\n  //       query: `\n  //           query users($userId: ID!) {\n  //             users(userId: $userId) {\n  //               _id\n  //               email\n  //               password\n  //               name\n  //               role\n  //             }\n  //           }\n  //         `,\n  //         variables: {\n  //           userId: userId\n  //         }\n  //     };\n  //\n  //     fetch('http://localhost:10000/graphql', {\n  //       method: 'POST',\n  //       body: JSON.stringify(requestBody),\n  //       headers: {\n  //         'Content-Type': 'application/json',\n  //         Authorization: 'Bearer ' + this.context.token\n  //       }\n  //     })\n  //       .then(res => {\n  //         if (res.status !== 200 && res.status !== 201) {\n  //           throw new Error('Failed!');\n  //         }\n  //         return res.json();\n  //       })\n  //       .then(resData => {\n  //         const users = resData.data.users;\n  //         console.log(users);\n  //\n  //         if (this.isActive) {\n  //           this.setState({ users: users, isLoading: false });\n  //         }\n  //       })\n  //       .catch(err => {\n  //         console.log(err);\n  //         if (this.isActive) {\n  //           this.setState({ isLoading: false });\n  //         }\n  //       });\n  //   }\n  // };\n\n\n  componentWillUnmount() {\n    this.isActive = false;\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, this.state.searching === false && React.createElement(SearchForm, {\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalSearchHandler,\n      confirmText: \"Confirm\",\n      search: this.state.search,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }), this.state.isLoading ? React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }) : React.createElement(SearchList, {\n      results: this.state.results,\n      authUserId: this.context.userId,\n      onViewDetail: this.showDetailHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }));\n  }\n\n}\n\nUsersPage.contextType = AuthContext;\nexport default SearchPage;","map":{"version":3,"sources":["/Users/pedrojacob/Downloads/AMR/websites/office_records/ENT_EMR/frontend/src/pages/Search.js"],"names":["Backdrop","UserDetail","Spinner","AuthContext","SearchForm","UsersPage","Component","constructor","props","state","searching","search","users","patients","appointments","results","isLoading","selectedUser","selectedPatient","selectedAppointment","selectedResult","isActive","modalCancelHandler","setState","showDetailHandler","resultId","prevState","find","e","_id","console","log","idElRef","React","createRef","fieldElRef","queryElRef","componentDidMount","componentWillUnmount","render","modalSearchHandler","context","userId","contextType","SearchPage"],"mappings":";AAAA,OAAOA,QAAP,MAAqB,iCAArB;AACA,OAAOC,UAAP,MAAuB,gCAAvB;AACA,OAAOC,OAAP,MAAoB,+BAApB;AACA,OAAOC,WAAP,MAAwB,yBAAxB;AACA,OAAOC,UAAP,MAAuB,gCAAvB;;AAGA,MAAMC,SAAN,SAAwBC,SAAxB,CAAkC;AAmBhCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AADiB,SAjBnBC,KAiBmB,GAjBX;AACNC,MAAAA,SAAS,EAAE,KADL;AAENC,MAAAA,MAAM,EAAE,EAFF;AAGNC,MAAAA,KAAK,EAAE,EAHD;AAINC,MAAAA,QAAQ,EAAE,EAJJ;AAKNC,MAAAA,YAAY,EAAE,EALR;AAMNC,MAAAA,OAAO,EAAE,EANH;AAONC,MAAAA,SAAS,EAAE,KAPL;AAQNC,MAAAA,YAAY,EAAE,IARR;AASNC,MAAAA,eAAe,EAAE,IATX;AAUNC,MAAAA,mBAAmB,EAAE,IAVf;AAWNC,MAAAA,cAAc,EAAE;AAXV,KAiBW;AAAA,SAJnBC,QAImB,GAJR,IAIQ;;AAAA,SAuFnBC,kBAvFmB,GAuFE,MAAM;AACzB,WAAKC,QAAL,CAAc;AAAEb,QAAAA,SAAS,EAAE,KAAb;AAAoBO,QAAAA,YAAY,EAAE;AAAlC,OAAd;AACD,KAzFkB;;AAAA,SA4FnBO,iBA5FmB,GA4FCC,QAAQ,IAAI;AAE9B;AAEA,WAAKF,QAAL,CAAcG,SAAS,IAAI;AACzB,cAAMN,cAAc,GAAGM,SAAS,CAACX,OAAV,CAAkBY,IAAlB,CAAuBC,CAAC,IAAIA,CAAC,CAACC,GAAF,KAAUJ,QAAtC,CAAvB,CADyB,CAEzB;;AACAK,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBX,cAAvB;AACA,eAAO;AAAEA,UAAAA,cAAc,EAAEA;AAAlB,SAAP;AACD,OALD;AAMD,KAtGkB;;AAEf,SAAKY,OAAL,GAAeC,KAAK,CAACC,SAAN,EAAf;AACA,SAAKC,UAAL,GAAkBF,KAAK,CAACC,SAAN,EAAlB;AACA,SAAKE,UAAL,GAAkBH,KAAK,CAACC,SAAN,EAAlB;AACH;;AAEDG,EAAAA,iBAAiB,GAAG,CAEnB,CA5B+B,CA8BhC;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAqBAC,EAAAA,oBAAoB,GAAG;AACrB,SAAKjB,QAAL,GAAgB,KAAhB;AACD;;AAEDkB,EAAAA,MAAM,GAAG;AACP,WACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAK9B,KAAL,CAAWC,SAAX,KAAyB,KAAzB,IACC,oBAAC,UAAD;AACA,MAAA,SAAS,MADT;AAEE,MAAA,UAAU,MAFZ;AAGE,MAAA,QAAQ,EAAE,KAAKY,kBAHjB;AAIE,MAAA,SAAS,EAAE,KAAKkB,kBAJlB;AAKE,MAAA,WAAW,EAAC,SALd;AAME,MAAA,MAAM,EAAE,KAAK/B,KAAL,CAAWE,MANrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,EAWG,KAAKF,KAAL,CAAWO,SAAX,GACC,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,GAGC,oBAAC,UAAD;AACE,MAAA,OAAO,EAAE,KAAKP,KAAL,CAAWM,OADtB;AAEE,MAAA,UAAU,EAAE,KAAK0B,OAAL,CAAaC,MAF3B;AAGE,MAAA,YAAY,EAAE,KAAKlB,iBAHrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAdJ,CADF;AAuBD;;AAxJ+B;;AAA5BnB,S,CAiBGsC,W,GAAcxC,W;AA0IvB,eAAeyC,UAAf","sourcesContent":["import Backdrop from '../components/Backdrop/Backdrop';\nimport UserDetail from '../components/Users/UserDetail';\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\nimport SearchForm from '../components/Forms/SearchForm';\n\n\nclass UsersPage extends Component {\n\n  state = {\n    searching: false,\n    search: {},\n    users: [],\n    patients: [],\n    appointments: [],\n    results: [],\n    isLoading: false,\n    selectedUser: null,\n    selectedPatient: null,\n    selectedAppointment: null,\n    selectedResult: null\n  };\n  isActive = true;\n\n  static contextType = AuthContext;\n\n  constructor(props) {\n    super(props);\n      this.idElRef = React.createRef();\n      this.fieldElRef = React.createRef();\n      this.queryElRef = React.createRef();\n  }\n\n  componentDidMount() {\n\n  }\n\n  // search functions: by id, all, feild\n\n\n  // modalSearchHandler = () => {\n  //   this.setState({ searching: false });\n  //\n  //   const id = this.idElRef.current.value;\n  //   const field = this.fieldElRef.current.value;\n  //   const query = this.queryElRef.current.value;\n  //\n  //\n  //   if (\n  //     id.trim().length === 0 ||\n  //     field.trim().length === 0 ||\n  //     query.trim().length === 0\n  //   ) {\n  //     return;\n  //   }\n  //\n  //   search() {\n  //     console.log(\"'search function' context object... \" + JSON.stringify(this.context));\n  //     const userId = this.context.userId;\n  //\n  //     const search = { id, field, query };\n  //     console.log(\"running search... search object:  \", JSON.stringify(search));\n  //\n  //     this.setState({ isLoading: true, search: search });\n  //     const requestBody = {\n  //       query: `\n  //           query users($userId: ID!) {\n  //             users(userId: $userId) {\n  //               _id\n  //               email\n  //               password\n  //               name\n  //               role\n  //             }\n  //           }\n  //         `,\n  //         variables: {\n  //           userId: userId\n  //         }\n  //     };\n  //\n  //     fetch('http://localhost:10000/graphql', {\n  //       method: 'POST',\n  //       body: JSON.stringify(requestBody),\n  //       headers: {\n  //         'Content-Type': 'application/json',\n  //         Authorization: 'Bearer ' + this.context.token\n  //       }\n  //     })\n  //       .then(res => {\n  //         if (res.status !== 200 && res.status !== 201) {\n  //           throw new Error('Failed!');\n  //         }\n  //         return res.json();\n  //       })\n  //       .then(resData => {\n  //         const users = resData.data.users;\n  //         console.log(users);\n  //\n  //         if (this.isActive) {\n  //           this.setState({ users: users, isLoading: false });\n  //         }\n  //       })\n  //       .catch(err => {\n  //         console.log(err);\n  //         if (this.isActive) {\n  //           this.setState({ isLoading: false });\n  //         }\n  //       });\n  //   }\n  // };\n\n\n  modalCancelHandler = () => {\n    this.setState({ searching: false, selectedUser: null });\n  };\n\n\n  showDetailHandler = resultId => {\n\n    // pass result id from resultList component\n\n    this.setState(prevState => {\n      const selectedResult = prevState.results.find(e => e._id === resultId);\n      // this.context.selectedUser = selectedUser;\n      console.log(\"here:  \", selectedResult);\n      return { selectedResult: selectedResult };\n    });\n  };\n\n\n  componentWillUnmount() {\n    this.isActive = false;\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        {this.state.searching === false && (\n          <SearchForm\n          canCancel\n            canConfirm\n            onCancel={this.modalCancelHandler}\n            onConfirm={this.modalSearchHandler}\n            confirmText=\"Confirm\"\n            search={this.state.search}\n          />\n        )}\n        {this.state.isLoading ? (\n          <Spinner />\n        ) : (\n          <SearchList\n            results={this.state.results}\n            authUserId={this.context.userId}\n            onViewDetail={this.showDetailHandler}\n          />\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default SearchPage;\n"]},"metadata":{},"sourceType":"module"}