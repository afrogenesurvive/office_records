{"ast":null,"code":"var _jsxFileName = \"/Users/pedrojacob/Downloads/AMR/websites/office_records/ENT_EMR/frontend/src/pages/Patients.js\";\nimport React, { Component } from 'react';\nimport S3 from 'react-aws-s3';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport Accordion from 'react-bootstrap/Accordion';\nimport SidebarPage from './Sidebar';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\nimport Nav from 'react-bootstrap/Nav';\nimport Card from 'react-bootstrap/Card';\nimport PatientList from '../components/Patients/PatientList/PatientList';\nimport PatientDetail from '../components/Patients/PatientDetail';\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\nimport SearchPatientList from '../components/Patients/PatientList/SearchPatientList';\nimport SearchPatientForm from '../components/Forms/SearchPatientForm';\nimport SearchPatientIdForm from '../components/Forms/SearchPatientIdForm';\nimport SearchPatientNameForm from '../components/Forms/SearchPatientNameForm';\nimport AlertBox from '../components/AlertBox';\nimport AttachmentViewer from '../components/AttachmentViewer';\nimport PdfCreator from '../components/PdfCreator';\nimport LoadingOverlay from '../components/LoadingOverlay';\nimport CreatePatientForm from '../components/Forms/CreatePatientForm';\nimport UpdatePatientForm from '../components/Forms/UpdatePatientForm';\nimport UpdatePatientFieldForm from '../components/Forms/UpdatePatientFieldForm';\nimport UpdatePatientConsultantForm from '../components/Forms/UpdatePatientConsultantForm';\nimport UpdatePatientInsuranceForm from '../components/Forms/UpdatePatientInsuranceForm';\nimport UpdatePatientNextOfKinForm from '../components/Forms/UpdatePatientNextOfKinForm';\nimport UpdatePatientComplaintForm from '../components/Forms/UpdatePatientComplaintForm';\nimport UpdatePatientSurveyForm from '../components/Forms/UpdatePatientSurveyForm';\nimport UpdatePatientSystematicInquiryForm from '../components/Forms/UpdatePatientSystematicInquiryForm';\nimport UpdatePatientVitalsForm from '../components/Forms/UpdatePatientVitalsForm';\nimport UpdatePatientExaminationForm from '../components/Forms/UpdatePatientExaminationForm';\nimport UpdatePatientHistoryForm from '../components/Forms/UpdatePatientHistoryForm';\nimport UpdatePatientAllergiesForm from '../components/Forms/UpdatePatientAllergiesForm';\nimport UpdatePatientMedicationForm from '../components/Forms/UpdatePatientMedicationForm';\nimport UpdatePatientInvestigationForm from '../components/Forms/UpdatePatientInvestigationForm';\nimport UpdatePatientDiagnosisForm from '../components/Forms/UpdatePatientDiagnosisForm';\nimport UpdatePatientTreatmentForm from '../components/Forms/UpdatePatientTreatmentForm';\nimport UpdatePatientBillingForm from '../components/Forms/UpdatePatientBillingForm';\nimport UpdatePatientVigilanceForm from '../components/Forms/UpdatePatientVigilanceForm';\nimport UpdatePatientAttachmentForm from '../components/Forms/UpdatePatientAttachmentForm';\nimport UpdatePatientNoteForm from '../components/Forms/UpdatePatientNoteForm';\nimport UpdatePatientTagForm from '../components/Forms/UpdatePatientTagForm';\nimport './Users.css';\n\nclass PatientsPage extends Component {\n  constructor(_props) {\n    super(_props);\n    this.state = {\n      creating: false,\n      updating: false,\n      searching: false,\n      updatingArray: false,\n      deleting: false,\n      patients: [],\n      searchPatients: [],\n      isLoading: false,\n      selectedPatient: null,\n      patientUpdateField: null,\n      patientSearchField: null,\n      patientSearchQuery: null,\n      canDelete: null,\n      visit: null,\n      visitList: [],\n      selectedVisit: null,\n      newVisit: false,\n      createVisitChecklist: {\n        consultant: false,\n        complaint: false,\n        diagnosis: false,\n        examination: false,\n        investigation: false,\n        survey: false,\n        systematicInquiry: false,\n        treatment: false,\n        vitals: false,\n        billing: false,\n        vigilance: false\n      },\n      newVisit: false,\n      userAlert: null,\n      overlay: false,\n      overlayStatus: \"test\",\n      showAttachment: false,\n      showThisAttachmentFile: null,\n      showThisAttachmentType: null,\n      createPdf: false,\n      pdfData: null\n    };\n    this.isActive = true;\n\n    this.startCreatePatientHandler = () => {\n      this.setState({\n        creating: true\n      });\n      console.log(\"CreatePatientForm...\");\n    };\n\n    this.startCreateVisitHandler = () => {\n      this.setState({\n        newVisit: true\n      });\n      console.log(\"CreateVisitForm...\");\n    };\n\n    this.startUpdatePatientHandler = () => {\n      this.setState({\n        updating: true,\n        updatingArray: true\n      });\n      console.log(\"UpdatePatientForm...\");\n    };\n\n    this.startSearchPatientHandler = () => {\n      this.setState({\n        searching: true\n      });\n      console.log(\"SearchPatientForm...\");\n    };\n\n    this.modalConfirmHandler = event => {\n      console.log(\"CreatePatientFormData:  \", event.target.formGridName.value);\n      this.setState({\n        creating: false\n      });\n      const userId = this.context.userId;\n      let title = event.target.formGridTitle.value;\n      let name = event.target.formGridName.value;\n      let dob = event.target.formGridDob.value;\n      let age = event.target.formGridAge.value;\n      let gender = event.target.formGridGender.value;\n      let addressNumber = event.target.formGridAddressNumber.value;\n      let addressStreet = event.target.formGridAddressStreet.value;\n      let addressTown = event.target.formGridAddressTown.value;\n      let addressParish = event.target.formGridAddressParish.value;\n      let addressPostOffice = event.target.formGridAddressPostOffice.value;\n      let contactPhone = event.target.formGridContactPhone.value;\n      let contactEmail = event.target.formGridContactEmail.value;\n      let registrationDate = event.target.formGridRegistrationDate.value;\n\n      if (event.target.formGridRegistrationDateTodayCheckbox.checked === true) {\n        registrationDate = new Date().toISOString().slice(0, 10);\n      }\n\n      let referralDate = event.target.formGridReferralDate.value;\n\n      if (event.target.formGridReferralDateTodayCheckbox.checked === true) {\n        referralDate = new Date().toISOString().slice(0, 10);\n      }\n\n      let expirationDate = event.target.formGridExpirationDate.value;\n      let attendingPhysicianName = event.target.formGridAttendingPhysicianName.value;\n      let attendingPhysicianEmail = event.target.formGridAttendingPhysicianEmail.value;\n      let attendingPhysicianPhone = event.target.formGridAttendingPhysicianPhone.value;\n      let referringDoctorName = event.target.formGridReferringDoctorName.value;\n      let referringDoctorEmail = event.target.formGridReferringDoctorEmail.value;\n      let referringDoctorPhone = event.target.formGridReferringDoctorPhone.value;\n      let occupationRole = event.target.formGridOccupationRole.value;\n      let occupationEmployer = event.target.formGridOccupationEmployer.value;\n      let occupationEmployerContactPhone = event.target.formGridOccupationEmployerContactPhone.value;\n      let occupationEmployerContactEmail = event.target.formGridOccupationEmployerContactEmail.value;\n\n      if (name.trim().length === 0 || // title.trim().length === 0 ||\n      // name.trim().length === 0 ||\n      // dob.trim().length === 0 ||\n      age.trim().length === 0 || // gender.trim().length === 0 ||\n      addressNumber.trim().length === 0 || addressStreet.trim().length === 0 || // addressTown.trim().length === 0 ||\n      // addressParish.trim().length === 0 ||\n      // addressPostOffice.trim().length === 0 ||\n      contactPhone.trim().length === 0 || // contactEmail.trim().length === 0 ||\n      registrationDate.trim().length === 0 // referralDate.trim().length === 0 ||\n      // expirationDate.trim().length === 0 ||\n      // attendingPhysicianName.trim().length === 0 ||\n      // attendingPhysicianEmail.trim().length === 0 ||\n      // attendingPhysicianPhone.trim().length === 0 ||\n      // referringDoctorName.trim().length === 0 ||\n      // referringDoctorEmail.trim().length === 0 ||\n      // referringDoctorPhone.trim().length === 0 ||\n      // occupationRole.trim().length === 0 ||\n      // occupationEmployer.trim().length === 0 ||\n      // occupationEmployerContactPhone.trim().length === 0 ||\n      // occupationEmployerContactEmail.trim().length === 0\n      ) {\n          console.log(\"patient must have at least: Name, Age, Contact Number, Street Name & Number and Registration Date!!!...Please try again...\");\n          this.setState({\n            userAlert: \"patient must have at least: Name, Age, Contact Number, Street Name & Number and Registration Date!!!...Please try again...\"\n          });\n          return;\n        }\n\n      console.log(`\n      creating patient...\n      title: ${title},\n      name: ${name},\n      dob: ${dob},\n      age: ${age},\n      gender: ${gender},\n      addressNumber: ${addressNumber},\n      addressStreet: ${addressStreet},\n      addressTown: ${addressTown},\n      addressParish: ${addressParish},\n      addressPostOffice: ${addressPostOffice},\n      contactPhone: ${contactPhone},\n      contactEmail: ${contactEmail},\n      registrationDate: ${registrationDate},\n      referralDate: ${referralDate},\n      expirationDate: ${expirationDate},\n      attendingPhysicianName: ${attendingPhysicianName},\n      attendingPhysicianEmail: ${attendingPhysicianEmail},\n      attendingPhysicianPhone: ${attendingPhysicianPhone},\n      referringDoctorName: ${referringDoctorName},\n      referringDoctorEmail: ${referringDoctorEmail},\n      referringDoctorPhone: ${referringDoctorPhone},\n      occupationRole: ${occupationRole},\n      occupationEmployer: ${occupationEmployer},\n      occupationEmployerContactPhone: ${occupationEmployerContactPhone},\n      occupationEmployerContactEmail: ${occupationEmployerContactEmail},\n      `);\n      const requestBody = {\n        query: `\n        mutation {createPatient(userId:\"${userId}\", patientInput:{title:\"${title}\",name:\"${name}\",dob:\"${dob}\",age:${age},gender:\"${gender}\",addressNumber:${addressNumber},addressStreet:\"${addressStreet}\",addressTown:\"${addressTown}\",addressParish:\"${addressParish}\",addressPostOffice:\"${addressPostOffice}\",contactPhone:\"${contactPhone}\",contactEmail:\"${contactEmail}\",registrationDate:\"${registrationDate}\",referralDate:\"${referralDate}\",expirationDate:\"${expirationDate}\",referringDoctorName:\"${referringDoctorName}\",referringDoctorEmail:\"${referringDoctorEmail}\",referringDoctorPhone:\"${referringDoctorPhone}\",attendingPhysicianName:\"${attendingPhysicianName}\",attendingPhysicianEmail:\"${attendingPhysicianEmail}\",attendingPhysicianPhone:\"${attendingPhysicianPhone}\",occupationRole:\"${occupationRole}\",occupationEmployer:\"${occupationEmployer}\",occupationEmployerContactPhone:\"${occupationEmployerContactPhone}\",occupationEmployerContactEmail:\"${occupationEmployerContactEmail}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n        `\n      };\n      const token = this.context.token; // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(`\n          response data:\n          ${JSON.stringify(resData.data.createPatient)}\n          `);\n        const responseAlert = JSON.stringify(resData.data).slice(2, 15);\n        this.setState({\n          userAlert: responseAlert\n        });\n        const newPatient = resData.data.createPatient;\n        this.setState(prevState => {\n          const updatedPatients = [...prevState.patients];\n          updatedPatients.push(newPatient);\n          return {\n            patients: updatedPatients\n          };\n        });\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.modalCancelHandler = () => {\n      this.setState({\n        creating: false,\n        updating: false\n      });\n    };\n\n    this.modalConfirmUpdateHandler = event => {\n      // if(this.context.user.role !== 'admin') {\n      //   console.log(\"Not the Admin! No edit permission!!\");\n      // }\n      const userId = this.context.userId;\n      const selectedPatientId = this.context.selectedPatient._id;\n      console.log(\"UpdatePatientFormData:  \", event.target.formGridName.value);\n      this.setState({\n        updating: false\n      });\n      let title = event.target.formGridTitle.value;\n      let name = event.target.formGridName.value;\n      let dob = event.target.formGridDob.value;\n      let age = event.target.formGridAge.value;\n      let gender = event.target.formGridGender.value;\n      let addressNumber = event.target.formGridAddressNumber.value;\n      let addressStreet = event.target.formGridAddressStreet.value;\n      let addressTown = event.target.formGridAddressTown.value;\n      let addressParish = event.target.formGridAddressParish.value;\n      let addressPostOffice = event.target.formGridAddressPostOffice.value;\n      let contactPhone = event.target.formGridContactPhone.value;\n      let contactEmail = event.target.formGridContactEmail.value;\n      let registrationDate = event.target.formGridRegistrationDate.value;\n\n      if (event.target.formGridRegistrationDateTodayCheckbox.checked === true) {\n        registrationDate = new Date().toISOString().slice(0, 10);\n      }\n\n      let referralDate = event.target.formGridReferralDate.value;\n\n      if (event.target.formGridReferralDateTodayCheckbox.checked === true) {\n        referralDate = new Date().toISOString().slice(0, 10);\n      }\n\n      let expirationDate = event.target.formGridExpirationDate.value;\n\n      if (event.target.formGridExpirationDateTodayCheckbox.checked === true) {\n        expirationDate = new Date().toISOString().slice(0, 10);\n      }\n\n      let attendingPhysicianName = event.target.formGridAttendingPhysicianName.value;\n      let attendingPhysicianEmail = event.target.formGridAttendingPhysicianEmail.value;\n      let attendingPhysicianPhone = event.target.formGridAttendingPhysicianPhone.value;\n      let referringDoctorName = event.target.formGridReferringDoctorName.value;\n      let referringDoctorEmail = event.target.formGridReferringDoctorEmail.value;\n      let referringDoctorPhone = event.target.formGridReferringDoctorPhone.value;\n      let occupationRole = event.target.formGridOccupationRole.value;\n      let occupationEmployer = event.target.formGridOccupationEmployer.value;\n      let occupationEmployerContactPhone = event.target.formGridOccupationEmployerContactPhone.value;\n      let occupationEmployerContactEmail = event.target.formGridOccupationEmployerContactEmail.value;\n\n      if (title.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        title = this.context.selectedPatient.title;\n      }\n\n      if (name.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        name = this.context.selectedPatient.name;\n      }\n\n      if (dob.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        dob = this.context.selectedPatient.dob;\n      }\n\n      if (gender.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        gender = this.context.selectedPatient.gender;\n      }\n\n      if (age.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        age = this.context.selectedPatient.age;\n      }\n\n      if (addressNumber.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        addressNumber = this.context.selectedPatient.address.number;\n      }\n\n      if (addressStreet.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        addressStreet = this.context.selectedPatient.address.street;\n      }\n\n      if (addressTown.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        addressTown = this.context.selectedPatient.address.town;\n      }\n\n      if (addressParish.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        addressParish = this.context.selectedPatient.address.parish;\n      }\n\n      if (addressPostOffice.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        addressPostOffice = this.context.selectedPatient.address.postOffice;\n      }\n\n      if (contactPhone.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        contactPhone = this.context.selectedPatient.contact.phone;\n      }\n\n      if (contactEmail.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        contactEmail = this.context.selectedPatient.contact.email;\n      }\n\n      if (registrationDate.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        registrationDate = this.context.selectedPatient.registrationDate;\n      }\n\n      if (attendingPhysicianName.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        attendingPhysicianName = this.context.selectedPatient.attendingPhysician.name;\n      }\n\n      if (attendingPhysicianEmail.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        attendingPhysicianEmail = this.context.selectedPatient.attendingPhysician.email;\n      }\n\n      if (attendingPhysicianPhone.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        attendingPhysicianPhone = this.context.selectedPatient.attendingPhysician.phone;\n      }\n\n      if (referringDoctorName.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        referringDoctorName = this.context.selectedPatient.referringDoctor.name;\n      }\n\n      if (referringDoctorEmail.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        referringDoctorEmail = this.context.selectedPatient.referringDoctor.email;\n      }\n\n      if (referringDoctorPhone.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        referringDoctorPhone = this.context.selectedPatient.referringDoctor.phone;\n      }\n\n      if (occupationRole.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        occupationRole = this.context.selectedPatient.occupation.role;\n      }\n\n      if (occupationEmployer.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        occupationEmployer = this.context.selectedPatient.occupation.employer;\n      }\n\n      if (occupationEmployerContactEmail.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        occupationEmployerContactEmail = this.context.selectedPatient.occupation.contact.email;\n      }\n\n      if (occupationEmployerContactPhone.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        occupationEmployerContactPhone = this.context.selectedPatient.occupation.contact.phone;\n      }\n\n      console.log(`\n      updating patient...\n      title: ${title},\n      name: ${name},\n      dob: ${dob},\n      age: ${age},\n      gender: ${gender},\n      addressNumber: ${addressNumber},\n      addressStreet: ${addressStreet},\n      addressTown: ${addressTown},\n      addressParish: ${addressParish},\n      addressPostOffice: ${addressPostOffice},\n      contactPhone: ${contactPhone},\n      contactEmail: ${contactEmail},\n      registrationDate: ${registrationDate},\n      referralDate: ${referralDate},\n      expirationDate: ${expirationDate},\n      attendingPhysicianName: ${attendingPhysicianName},\n      attendingPhysicianEmail: ${attendingPhysicianEmail},\n      attendingPhysicianPhone: ${attendingPhysicianPhone},\n      referringDoctorName: ${referringDoctorName},\n      referringDoctorEmail: ${referringDoctorEmail},\n      referringDoctorPhone: ${referringDoctorPhone},\n      occupationRole: ${occupationRole},\n      occupationEmployer: ${occupationEmployer},\n      occupationEmployerContactPhone: ${occupationEmployerContactPhone},\n      occupationEmployerContactEmail: ${occupationEmployerContactEmail},\n      `);\n      this.setState({\n        userAlert: \"updating patient...\"\n      });\n      const requestBody = {\n        query: `\n          mutation {updatePatient(userId:\"${userId}\",patientId:\"${selectedPatientId}\", patientInput:{title:\"${title}\",name:\"${name}\",dob:\"${dob}\",age:${age},gender:\"${gender}\",addressNumber:${addressNumber},addressStreet:\"${addressStreet}\",addressTown:\"${addressTown}\",addressParish:\"${addressParish}\",addressPostOffice:\"${addressPostOffice}\",contactPhone:\"${contactPhone}\",contactEmail:\"${contactEmail}\",registrationDate:\"${registrationDate}\",referralDate:\"${referralDate}\",expirationDate:\"${expirationDate}\",referringDoctorName:\"${referringDoctorName}\",referringDoctorEmail:\"${referringDoctorEmail}\",referringDoctorPhone:\"${referringDoctorPhone}\",attendingPhysicianName:\"${attendingPhysicianName}\",attendingPhysicianEmail:\"${attendingPhysicianEmail}\",attendingPhysicianPhone:\"${attendingPhysicianPhone}\",occupationRole:\"${occupationRole}\",occupationEmployer:\"${occupationEmployer}\",occupationEmployerContactPhone:\"${occupationEmployerContactPhone}\",occupationEmployerContactEmail:\"${occupationEmployerContactPhone}\"})\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n        `\n      };\n      const token = this.context.token;\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n        const updatedPatientId = resData.data.updatePatient._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.updatePatient);\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.modalConfirmUpdateFieldHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id; // if( this.context.user.role !== 'admin') {\n      //   console.log(\"Not the creator or Admin! No edit permission!!\");\n      //   selectedPatientId = null;\n      // }\n\n      console.log(\"UpdatePatientFieldFormData:  \", event.target.formGridField.value);\n      this.setState({\n        updating: false\n      });\n      let field = null;\n      let query = event.target.formGridQuery.value;\n\n      if (event.target.formGridFieldSelect.value === \"select\") {\n        field = event.target.formGridField.value;\n      } else {\n        field = event.target.formGridFieldSelect.value;\n      }\n\n      const requestBody = {\n        query: `\n          mutation {updatePatientField(userId:\"${userId}\",patientId:\"${selectedPatientId}\",field:\"${field}\",query:\"${query}\")\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n        `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data.updatePatientField));\n        const updatedPatientId = resData.data.updatePatientField._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.updatePatientField);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientConsultantHandler = event => {\n      event.preventDefault();\n      let token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id;\n      const patientConsultantReference = this.context.selectedUser._id; // if(this.context.user.role !== 'admin') {\n      //   console.log(\"No edit permission!!\");\n      //   return;\n      // }\n\n      if (patientConsultantReference === undefined) {\n        console.log(`\n      select a Staff member before adding a Patient Consultant!!\n      `);\n        this.setState({\n          userAlert: \"select a Staff member before adding a Patient Consultant!!...\"\n        });\n        token = null;\n      } // console.log(\"UpdatePatientConsultantFormData:  \", event.target.formGridConsultantDate.value);\n\n\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let consultantDate = null;\n\n      if (event.target.formGridConsultantDate) {\n        consultantDate = event.target.formGridConsultantDate.value;\n      }\n\n      if (event.target.formGridConsultantDateTodayCheckbox.checked === true) {\n        consultantDate = new Date().toISOString().slice(0, 10);\n      }\n\n      console.log(`\n    adding patient consultant item...\n    userId: ${userId},\n    selectedPatientId: ${selectedPatientId},\n    consultantDate: ${consultantDate},\n    consultantReference: ${patientConsultantReference},\n    `);\n      const requestBody = {\n        query: `\n        mutation {updatePatientConsultant(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{consultantDate:\" ${consultantDate}\",consultantReference: \"${patientConsultantReference}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientConsultant._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.updatePatientConsultant);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientInsuranceHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id; // if(this.context.user.role !== 'admin') {\n      //   console.log(\"No edit permission!!\");\n      //   return;\n      // }\n\n      console.log(\"UpdatePatientInsuranceFormData:  \", event.target.formGridInsuranceCompany.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let insuranceCompany = event.target.formGridInsuranceCompany.value;\n      let insuranceNumber = event.target.formGridInsuranceNumber.value;\n      let insuranceExpiry = event.target.formGridInsuranceExpiry.value;\n      let insuranceDescription = event.target.formGridInsuranceDescription.value;\n      let insuranceSubscriberCompany = event.target.formGridInsuranceSubscriberCompany.value;\n      let insuranceSubscriberDescription = event.target.formGridInsuranceSubscriberDescription.value;\n      console.log(`\n    adding patient insurance item...\n    userId: ${userId},\n    selectedPatientId: ${selectedPatientId},\n    insuranceCompany: ${insuranceCompany},\n    insuranceNumber: ${insuranceNumber},\n    insuranceExpiry: ${insuranceExpiry},\n    insuranceDescription: ${insuranceDescription},\n    insuranceSubscriberCompany: ${insuranceSubscriberCompany},\n    insuranceSubscriberDescription: ${insuranceSubscriberDescription},\n    `);\n      this.setState({\n        userAlert: \"adding patient insurance item...\"\n      });\n      const requestBody = {\n        query: `\n        mutation {updatePatientInsurance(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{insuranceCompany:\"${insuranceCompany}\",insuranceNumber:\"${insuranceNumber}\",insuranceDescription:\"${insuranceDescription}\",insuranceExpiry:\"${insuranceExpiry}\",insuranceSubscriberCompany:\"${insuranceSubscriberCompany}\",insuranceSubscriberDescription:\"${insuranceSubscriberDescription}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientInsurance._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.updatePatientInsurance);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientNextOfKinHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id; // if(this.context.user.role !== 'admin') {\n      //   console.log(\"No edit permission!!\");\n      //   return;\n      // }\n\n      console.log(\"UpdatePatientNextOfKinFormData:  \", event.target.formGridNextOfKinName.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let nextOfKinName = event.target.formGridNextOfKinName.value;\n      let nextOfKinPhone = event.target.formGridNextOfKinPhone.value;\n      let nextOfKinEmail = event.target.formGridNextOfKinEmail.value;\n      console.log(`\n    adding patient nextOfKin item...\n    userId: ${userId},\n    selectedPatientId: ${selectedPatientId},\n    nextOfKinName: ${nextOfKinName},\n    nextOfKinPhone: ${nextOfKinPhone},\n    nextOfKinEmail: ${nextOfKinEmail},\n    `);\n      this.setState({\n        userAlert: \"adding patient nextOfKin item...\"\n      });\n      const requestBody = {\n        query: `\n        mutation {updatePatientNextOfKin(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{nextOfKinName:\"${nextOfKinName}\",nextOfKinEmail:\"${nextOfKinEmail}\",nextOfKinPhone:\"${nextOfKinPhone}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientNextOfKin._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.updatePatientNextOfKin);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientComplaintHandler = event => {\n      event.preventDefault();\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id; // if(this.context.user.role !== 'admin') {\n      //   console.log(\"No edit permission!!\");\n      //   return;\n      // }\n\n      console.log(\"UpdatePatientComplaintFormData:  \", event.target.formGridComplaintTitle.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let complaintTitle = event.target.formGridComplaintTitle.value;\n      let complaintDate = null;\n\n      if (event.target.formGridComplaintDate) {\n        complaintDate = event.target.formGridComplaintDate.value;\n      }\n\n      if (event.target.formGridComplaintDateTodayCheckbox.checked === true) {\n        complaintDate = new Date().toISOString().slice(0, 10);\n      }\n\n      let complaintDescription = event.target.formGridComplaintDescription.value;\n      let complaintAnamnesis = event.target.formGridComplaintAnamnesis.value; // let complaintAttachmentName = event.target.formGridComplaintAttachmentName.value;\n\n      let complaintAttachmentFormat = event.target.formGridComplaintAttachmentFormat.value; // let complaintAttachmentPath = event.target.formGridComplaintAttachmentPath.value;\n\n      let complaintAttachmentPath = \"uploads/patients/\" + selectedPatientId + \"/complaints\";\n      let file = AuthContext._currentValue.file;\n      console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n      const config = {\n        bucketName: this.context.creds.s3.bucketName,\n        dirName: complaintAttachmentPath,\n        region: this.context.creds.s3.region,\n        accessKeyId: this.context.creds.s3.accessKeyId,\n        secretAccessKey: this.context.creds.s3.secretAccessKey\n      };\n      const ReactS3Client = new S3(config);\n      const newFileName = file.name;\n      const complaintAttachmentName = newFileName;\n      ReactS3Client.uploadFile(file, newFileName).then(data => {\n        console.log(data);\n        this.setState({\n          userAlert: \"attachment upload success!\"\n        });\n      }).catch(err => {\n        console.error(err);\n        this.setState({\n          userAlert: \"upload error:  \" + err\n        });\n      });\n      console.log(`\n    adding patient complaint...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    complaintTitle: ${complaintTitle},\n    complaintDate: ${complaintDate},\n    complaintDescription: ${complaintDescription},\n    complaintAnamnesis: ${complaintAnamnesis},\n    complaintAttachmentName: ${complaintAttachmentName},\n    complaintAttachmentFormat: ${complaintAttachmentFormat},\n    complaintAttachmentPath: ${complaintAttachmentPath},\n    `);\n      this.setState({\n        userAlert: \"adding patient complaint...\"\n      });\n      const requestBody = {\n        query: `\n        mutation {updatePatientComplaint(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{complaintDate:\"${complaintDate}\",complaintTitle:\"${complaintTitle}\",complaintDescription:\"${complaintDescription}\",complaintAnamnesis:\"${complaintAnamnesis}\",complaintAttachmentName:\"${complaintAttachmentName}\",complaintAttachmentFormat:\"${complaintAttachmentFormat}\",complaintAttachmentPath:\"${complaintAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientComplaint._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.updatePatientComplaint);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        }); // this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientSurveyHandler = event => {\n      event.preventDefault();\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id; // if(this.context.user.role !== 'admin') {\n      //   console.log(\"No edit permission!!\");\n      //   return;\n      // }\n\n      console.log(\"UpdatePatientSurveyFormData:  \", event.target.formGridSurveyTitle.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let surveyDate = null;\n\n      if (event.target.formGridSurveyDate) {\n        surveyDate = event.target.formGridSurveyDate.value;\n      }\n\n      if (event.target.formGridSurveyDateTodayCheckbox.checked === true) {\n        surveyDate = new Date().toISOString().slice(0, 10);\n      }\n\n      let surveyTitle = event.target.formGridSurveyTitle.value;\n      let surveyDescription = event.target.formGridSurveyDescription.value; // let surveyAttachmentName = event.target.formGridSurveyAttachmentName.value;\n\n      let surveyAttachmentFormat = event.target.formGridSurveyAttachmentFormat.value;\n      let surveyAttachmentPath = \"uploads/patients/\" + selectedPatientId + \"/surveys\"; // let surveyAttachmentPath = event.target.formGridSurveyAttachmentPath.value;\n\n      let file = AuthContext._currentValue.file;\n      console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n      const config = {\n        bucketName: this.context.creds.s3.bucketName,\n        dirName: surveyAttachmentPath,\n        region: this.context.creds.s3.region,\n        accessKeyId: this.context.creds.s3.accessKeyId,\n        secretAccessKey: this.context.creds.s3.secretAccessKey\n      };\n      const ReactS3Client = new S3(config);\n      const newFileName = file.name;\n      const surveyAttachmentName = newFileName;\n      ReactS3Client.uploadFile(file, newFileName).then(data => {\n        console.log(data);\n        this.setState({\n          userAlert: \"attachment upload success!\"\n        });\n      }).catch(err => {\n        console.error(err);\n        this.setState({\n          userAlert: \"upload error:  \" + err\n        });\n      });\n      console.log(`\n    adding patient survey...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    surveyDate: ${surveyDate},\n    surveyTitle: ${surveyTitle},\n    surveyDescription: ${surveyDescription},\n    surveyAttachmentName: ${surveyAttachmentName},\n    surveyAttachmentFormat: ${surveyAttachmentFormat},\n    surveyAttachmentPath: ${surveyAttachmentPath},\n    `);\n      this.setState({\n        userAlert: \"adding patient survey...\"\n      });\n      const requestBody = {\n        query: `\n        mutation {updatePatientSurvey(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{surveyDate:\"${surveyDate}\",surveyTitle:\"${surveyTitle}\",surveyDescription:\"${surveyDescription}\",surveyAttachmentName:\"${surveyAttachmentName}\",surveyAttachmentFormat:\"${surveyAttachmentFormat}\",surveyAttachmentPath:\"${surveyAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientSurvey._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.updatePatientSurvey);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientSystematicInquiryHandler = event => {\n      event.preventDefault();\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id; // if(this.context.user.role !== 'admin') {\n      //   console.log(\"No edit permission!!\");\n      //   return;\n      // }\n\n      console.log(\"UpdatePatientSystematicInquiryFormData:  \", event.target.formGridSystematicInquiryTitle.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let systematicInquiryDate = null;\n\n      if (event.target.formGridSystematicInquiryDate) {\n        systematicInquiryDate = event.target.formGridSystematicInquiryDate.value;\n      }\n\n      if (event.target.formGridSystematicInquiryDateTodayCheckbox.checked === true) {\n        systematicInquiryDate = new Date().toISOString().slice(0, 10);\n      }\n\n      let systematicInquiryTitle = event.target.formGridSystematicInquiryTitle.value;\n      let systematicInquiryDescription = event.target.formGridSystematicInquiryDescription.value; // let systematicInquiryAttachmentName = event.target.formGridSystematicInquiryAttachmentName.value;\n\n      let systematicInquiryAttachmentFormat = event.target.formGridSystematicInquiryAttachmentFormat.value;\n      let systematicInquiryAttachmentPath = \"uploads/patients/\" + selectedPatientId + \"/systematicInquirys\"; // let systematicInquiryAttachmentPath = event.target.formGridSystematicInquiryAttachmentPath.value;\n\n      let file = AuthContext._currentValue.file;\n      console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n      const config = {\n        bucketName: this.context.creds.s3.bucketName,\n        dirName: systematicInquiryAttachmentPath,\n        region: this.context.creds.s3.region,\n        accessKeyId: this.context.creds.s3.accessKeyId,\n        secretAccessKey: this.context.creds.s3.secretAccessKey\n      };\n      const ReactS3Client = new S3(config);\n      const newFileName = file.name;\n      const systematicInquiryAttachmentName = newFileName;\n      ReactS3Client.uploadFile(file, newFileName).then(data => {\n        console.log(data);\n        this.setState({\n          userAlert: \"attachment upload success!\"\n        });\n      }).catch(err => {\n        console.error(err);\n        this.setState({\n          userAlert: \"upload error:  \" + err\n        });\n      });\n      console.log(`\n    adding patient systematicInquiry...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    systematicInquiryDate: ${systematicInquiryDate},\n    systematicInquiryTitle: ${systematicInquiryTitle},\n    systematicInquiryDescription: ${systematicInquiryDescription},\n    systematicInquiryAttachmentName: ${systematicInquiryAttachmentName},\n    systematicInquiryAttachmentFormat: ${systematicInquiryAttachmentFormat},\n    systematicInquiryAttachmentPath: ${systematicInquiryAttachmentPath},\n    `);\n      this.setState({\n        userAlert: \"adding patient systematicInquiry...\"\n      });\n      const requestBody = {\n        query: `\n        mutation {updatePatientSystematicInquiry(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{systematicInquiryDate:\"${systematicInquiryDate}\",systematicInquiryTitle:\"${systematicInquiryTitle}\",systematicInquiryDescription:\"${systematicInquiryDescription}\",systematicInquiryAttachmentName:\"${systematicInquiryAttachmentName}\",systematicInquiryAttachmentFormat:\"${systematicInquiryAttachmentFormat}\",systematicInquiryAttachmentPath:\"${systematicInquiryAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientSystematicInquiry._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.updatePatientSystematicInquiry);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        console.log(\"responseAlert\", responseAlert);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientVitalsHandler = event => {\n      event.preventDefault();\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id; // if(this.context.user.role !== 'admin') {\n      //   console.log(\"No edit permission!!\");\n      //   return;\n      // }\n\n      console.log(\"UpdatePatientVitalsFormData:  \", event.target.formGridVitalsDate.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let vitalsDate = null;\n\n      if (event.target.formGridVitalsDate) {\n        vitalsDate = event.target.formGridVitalsDate.value;\n      }\n\n      if (event.target.formGridVitalsDateTodayCheckbox.checked === true) {\n        vitalsDate = new Date().toISOString().slice(0, 10);\n      }\n\n      let vitalsPr = event.target.formGridVitalsPr.value;\n      let vitalsBp1 = event.target.formGridVitalsBp1.value;\n      let vitalsBp2 = event.target.formGridVitalsBp2.value;\n      let vitalsRr = event.target.formGridVitalsRr.value;\n      let vitalsTemp = event.target.formGridVitalsTemp.value;\n      let vitalsPs02 = event.target.formGridVitalsPs02.value;\n      let vitalsHeight = event.target.formGridVitalsHeight.value;\n      let vitalsWeight = event.target.formGridVitalsWeight.value;\n      let vitalsBmi = event.target.formGridVitalsBmi.value;\n      let vitalsUrineType = event.target.formGridVitalsUrineType.value;\n      let vitalsUrineValue = event.target.formGridVitalsUrineValue.value;\n      console.log(`\n    adding patient vitals...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    `);\n      this.setState({\n        userAlert: \"adding patient vitals...\"\n      });\n      const requestBody = {\n        query: `\n        mutation {updatePatientVitals(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{vitalsDate:\"${vitalsDate}\",vitalsPr:${vitalsPr},vitalsBp1:${vitalsBp1},vitalsBp2:${vitalsBp2},vitalsRr:${vitalsRr},vitalsTemp:${vitalsTemp},vitalsPs02:${vitalsPs02},vitalsHeight:${vitalsHeight},vitalsWeight:${vitalsWeight},vitalsBmi:${vitalsBmi},vitalsUrineType:\"${vitalsUrineType}\",vitalsUrineValue:\"${vitalsUrineValue}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientVitals._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.updatePatientVitals);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientExaminationHandler = event => {\n      event.preventDefault();\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id; // if(this.context.user.role !== 'admin') {\n      //   console.log(\"No edit permission!!\");\n      //   return;\n      // }\n\n      console.log(\"UpdatePatientExaminationFormData:  \", event.target.formGridExaminationArea.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let examinationDate = null;\n\n      if (event.target.formGridExaminationDate) {\n        examinationDate = event.target.formGridExaminationDate.value;\n      }\n\n      if (event.target.formGridExaminationDateTodayCheckbox.checked === true) {\n        examinationDate = new Date().toISOString().slice(0, 10);\n      }\n\n      let examinationGeneral = event.target.formGridExaminationGeneral.value;\n      let examinationArea = undefined;\n\n      if (event.target.formGridExaminationAreaSelect === \"select\") {\n        examinationArea = event.target.formGridExaminationArea.value;\n      } else {\n        examinationArea = event.target.formGridExaminationAreaSelect.value;\n      }\n\n      let examinationType = event.target.formGridExaminationType.value;\n      let examinationMeasure = event.target.formGridExaminationMeasure.value;\n      let examinationValue = event.target.formGridExaminationValue.value;\n      let examinationDescription = event.target.formGridExaminationDescription.value;\n      let examinationFollowUp = event.target.formGridExaminationFollowUp.value; // let examinationAttachmentName = event.target.formGridExaminationAttachmentName.value;\n\n      let examinationAttachmentFormat = event.target.formGridExaminationAttachmentFormat.value;\n      let examinationAttachmentPath = \"uploads/patients/\" + selectedPatientId + \"/examinations\"; // let examinationAttachmentPath = event.target.formGridExaminationAttachmentPath.value;\n\n      let file = AuthContext._currentValue.file;\n      console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n      const config = {\n        bucketName: this.context.creds.s3.bucketName,\n        dirName: examinationAttachmentPath,\n        region: this.context.creds.s3.region,\n        accessKeyId: this.context.creds.s3.accessKeyId,\n        secretAccessKey: this.context.creds.s3.secretAccessKey\n      };\n      const ReactS3Client = new S3(config);\n      const newFileName = file.name;\n      const examinationAttachmentName = newFileName;\n      ReactS3Client.uploadFile(file, newFileName).then(data => {\n        console.log(data);\n        this.setState({\n          userAlert: \"attachment upload success!\"\n        });\n      }).catch(err => {\n        console.error(err);\n        this.setState({\n          userAlert: \"upload error:  \" + err\n        });\n      });\n      console.log(`\n    adding patient examination...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    examinationDate: ${examinationDate},\n    examinationGeneral: ${examinationGeneral},\n    examinationArea: ${examinationArea},\n    examinationType: ${examinationType},\n    examinationMeasure: ${examinationMeasure},\n    examinationValue: ${examinationValue},\n    examinationDescription: ${examinationDescription},\n    examinationFollowUp: ${examinationFollowUp},\n    examinationAttachmentName: ${examinationAttachmentName},\n    examinationAttachmentFormat: ${examinationAttachmentFormat},\n    examinationAttachmentPath: ${examinationAttachmentPath},\n    `);\n      this.setState({\n        userAlert: \"adding patient examination...\"\n      });\n      const requestBody = {\n        query: `\n        mutation {updatePatientExamination(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{examinationDate:\"${examinationDate}\",examinationGeneral:\"${examinationGeneral}\",examinationArea:\"${examinationArea}\",examinationType:\"${examinationType}\",examinationMeasure:\"${examinationMeasure}\",examinationValue:\"${examinationValue}\",examinationDescription:\"${examinationDescription}\",examinationFollowUp:${examinationFollowUp},examinationAttachmentName:\"${examinationAttachmentName}\",examinationAttachmentFormat:\"${examinationAttachmentFormat}\",examinationAttachmentPath:\"${examinationAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientExamination._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.updatePatientExamination);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientHistoryHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id; // if(this.context.user.role !== 'admin') {\n      //   console.log(\"No edit permission!!\");\n      //   return;\n      // }\n\n      console.log(\"UpdatePatientHistoryFormData:  \", event.target.formGridHistoryTitle.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let historyType = event.target.formGridHistoryType.value; // let historyDate = null;\n      // if (event.target.formGridHistoryDate) {\n      //   historyDate = event.target.formGridHistoryDate.value;\n      // }\n\n      let historyDate = event.target.formGridHistoryDate.value;\n\n      if (event.target.formGridHistoryDateTodayCheckbox.checked === true) {\n        historyDate = new Date().toISOString().slice(0, 10);\n      }\n\n      let historyTitle = event.target.formGridHistoryTitle.value;\n      let historyDescription = event.target.formGridHistoryDescription.value; // let historyAttachmentName = event.target.formGridHistoryAttachmentName.value;\n\n      let historyAttachmentFormat = event.target.formGridHistoryAttachmentFormat.value;\n      let historyAttachmentPath = \"uploads/patients/\" + selectedPatientId + \"/history\"; // let historyAttachmentPath = event.target.formGridHistoryAttachmentPath.value;\n\n      let file = AuthContext._currentValue.file;\n      console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n      const config = {\n        bucketName: this.context.creds.s3.bucketName,\n        dirName: historyAttachmentPath,\n        region: this.context.creds.s3.region,\n        accessKeyId: this.context.creds.s3.accessKeyId,\n        secretAccessKey: this.context.creds.s3.secretAccessKey\n      };\n      const ReactS3Client = new S3(config);\n      const newFileName = file.name;\n      const historyAttachmentName = newFileName;\n      ReactS3Client.uploadFile(file, newFileName).then(data => {\n        console.log(data);\n        this.setState({\n          userAlert: \"attachment upload success!\"\n        });\n      }).catch(err => {\n        console.error(err);\n        this.setState({\n          userAlert: \"upload error:  \" + err\n        });\n      });\n      console.log(`\n    adding patient history...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    historyType: ${historyType},\n    historyDate: ${historyDate},\n    historyTitle: ${historyTitle},\n    historyDescription: ${historyDescription},\n    historyAttachmentName: ${historyAttachmentName},\n    historyAttachmentFormat: ${historyAttachmentFormat},\n    historyAttachmentPath: ${historyAttachmentPath},\n    `);\n      this.setState({\n        userAlert: \"adding patient history...\"\n      });\n      const requestBody = {\n        query: `\n        mutation {updatePatientHistory(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{historyTitle:\"${historyTitle}\",historyType:\"${historyType}\",historyDate:\"${historyDate}\",historyDescription:\"${historyDescription}\",historyAttachmentName:\"${historyAttachmentName}\",historyAttachmentFormat:\"${historyAttachmentFormat}\",historyAttachmentPath:\"${historyAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientHistory._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.updatePatientHistory);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientAllergiesHandler = event => {\n      event.preventDefault();\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id; // if(this.context.user.role !== 'admin') {\n      //   console.log(\"No edit permission!!\");\n      //   return;\n      // }\n\n      console.log(\"UpdatePatientAllergiesFormData:  \", event.target.formGridAllergiesTitle.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let allergiesTitle = event.target.formGridAllergiesTitle.value;\n      let allergiesType = undefined;\n\n      if (event.target.formGridAllergiesTypeSelect === \"select\") {\n        allergiesType = event.target.formGridAllergiesType.value;\n      } else {\n        allergiesType = event.target.formGridAllergiesTypeSelect.value;\n      }\n\n      let allergiesDescription = event.target.formGridAllergiesDescription.value; // let allergiesAttachmentName = event.target.formGridAllergiesAttachmentName.value;\n\n      let allergiesAttachmentFormat = event.target.formGridAllergiesAttachmentFormat.value;\n      let allergiesAttachmentPath = \"uploads/patients/\" + selectedPatientId + \"/allergies\"; // let allergiesAttachmentPath = event.target.formGridAllergiesAttachmentPath.value;\n\n      let file = AuthContext._currentValue.file;\n      console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n      const config = {\n        bucketName: this.context.creds.s3.bucketName,\n        dirName: allergiesAttachmentPath,\n        region: this.context.creds.s3.region,\n        accessKeyId: this.context.creds.s3.accessKeyId,\n        secretAccessKey: this.context.creds.s3.secretAccessKey\n      };\n      const ReactS3Client = new S3(config);\n      const newFileName = file.name;\n      const allergiesAttachmentName = newFileName;\n      ReactS3Client.uploadFile(file, newFileName).then(data => {\n        console.log(data);\n        this.setState({\n          userAlert: \"attachment upload success!\"\n        });\n      }).catch(err => {\n        console.error(err);\n        this.setState({\n          userAlert: \"upload error:  \" + err\n        });\n      });\n      console.log(`\n    adding patient allergies...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    allergiesTitle: ${allergiesTitle},\n    allergiesType: ${allergiesType},\n    allergiesDescription: ${allergiesDescription},\n    allergiesAttachmentName: ${allergiesAttachmentName},\n    allergiesAttachmentFormat: ${allergiesAttachmentFormat},\n    allergiesAttachmentPath: ${allergiesAttachmentPath},\n    `);\n      this.setState({\n        userAlert: \"adding patient allergies...\"\n      });\n      const requestBody = {\n        query: `\n        mutation {updatePatientAllergies(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{allergiesTitle:\"${allergiesTitle}\",allergiesType:\"${allergiesType}\", allergiesDescription:\"${allergiesDescription}\",allergiesAttachmentName:\"${allergiesAttachmentName}\",allergiesAttachmentFormat:\"${allergiesAttachmentFormat}\",allergiesAttachmentPath:\"${allergiesAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientAllergies._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.updatePatientAllergies);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientMedicationHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id; // if(this.context.user.role !== 'admin') {\n      //   console.log(\"No edit permission!!\");\n      //   return;\n      // }\n\n      console.log(\"UpdatePatientMedicationFormData:  \", event.target.formGridMedicationTitle.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let medicationTitle = event.target.formGridMedicationTitle.value;\n      let medicationType = event.target.formGridMedicationType.value;\n      let medicationDescription = event.target.formGridMedicationDescription.value; // let medicationAttachmentName = event.target.formGridMedicationAttachmentName.value;\n\n      let medicationAttachmentFormat = event.target.formGridMedicationAttachmentFormat.value;\n      let medicationAttachmentPath = \"uploads/patients/\" + selectedPatientId + \"/medication\"; // let medicationAttachmentPath = event.target.formGridMedicationAttachmentPath.value;\n\n      let file = AuthContext._currentValue.file;\n      console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n      const config = {\n        bucketName: this.context.creds.s3.bucketName,\n        dirName: medicationAttachmentPath,\n        region: this.context.creds.s3.region,\n        accessKeyId: this.context.creds.s3.accessKeyId,\n        secretAccessKey: this.context.creds.s3.secretAccessKey\n      };\n      const ReactS3Client = new S3(config);\n      const newFileName = file.name;\n      const medicationAttachmentName = newFileName;\n      ReactS3Client.uploadFile(file, newFileName).then(data => {\n        console.log(data);\n        this.setState({\n          userAlert: \"attachment upload success!\"\n        });\n      }).catch(err => {\n        console.error(err);\n        this.setState({\n          userAlert: \"upload error:  \" + err\n        });\n      });\n      console.log(`\n    adding patient medication...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    medicationTitle: ${medicationTitle},\n    medicationType: ${medicationType},\n    medicationDescription: ${medicationDescription},\n    medicationAttachmentName: ${medicationAttachmentName},\n    medicationAttachmentFormat: ${medicationAttachmentFormat},\n    medicationAttachmentPath: ${medicationAttachmentPath},\n    `);\n      this.setState({\n        userAlert: \"adding patient medication...\"\n      });\n      const requestBody = {\n        query: `\n      mutation {updatePatientMedication(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{medicationTitle:\"${medicationTitle}\",medicationType:\"${medicationType}\" medicationDescription:\"${medicationDescription}\",medicationAttachmentName:\"${medicationAttachmentName}\",medicationAttachmentFormat:\"${medicationAttachmentFormat}\",medicationAttachmentPath:\"${medicationAttachmentPath}\"})\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientMedication._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.updatePatientMedication);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientInvestigationHandler = event => {\n      event.preventDefault();\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id; // if(this.context.user.role !== 'admin') {\n      //   console.log(\"No edit permission!!\");\n      //   return;\n      // }\n\n      console.log(\"UpdatePatientInvestigationFormData:  \", event.target.formGridInvestigationTitle.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let investigationDate = null;\n\n      if (event.target.formGridInvestigationDate) {\n        investigationDate = event.target.formGridInvestigationDate.value;\n      }\n\n      if (event.target.formGridInvestigationDateTodayCheckbox.checked === true) {\n        investigationDate = new Date().toISOString().slice(0, 10);\n      }\n\n      let investigationTitle = event.target.formGridInvestigationTitle.value;\n      let investigationType = undefined;\n\n      if (event.target.formGridInvestigationTypeSelect === \"select\") {\n        investigationType = event.target.formGridInvestigationType.value;\n      } else {\n        investigationType = event.target.formGridInvestigationTypeSelect.value;\n      }\n\n      let investigationDescription = event.target.formGridInvestigationDescription.value; // let investigationAttachmentName = event.target.formGridInvestigationAttachmentName.value;\n\n      let investigationAttachmentFormat = event.target.formGridInvestigationAttachmentFormat.value;\n      let investigationAttachmentPath = \"uploads/patients/\" + selectedPatientId + \"/investigation\"; // let investigationAttachmentPath = event.target.formGridInvestigationAttachmentPath.value;\n\n      let file = AuthContext._currentValue.file;\n      console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n      const config = {\n        bucketName: this.context.creds.s3.bucketName,\n        dirName: investigationAttachmentPath,\n        region: this.context.creds.s3.region,\n        accessKeyId: this.context.creds.s3.accessKeyId,\n        secretAccessKey: this.context.creds.s3.secretAccessKey\n      };\n      const ReactS3Client = new S3(config);\n      const newFileName = file.name;\n      const investigationAttachmentName = newFileName;\n      ReactS3Client.uploadFile(file, newFileName).then(data => {\n        console.log(data);\n        this.setState({\n          userAlert: \"attachment upload success!\"\n        });\n      }).catch(err => {\n        console.error(err);\n        this.setState({\n          userAlert: \"upload error:  \" + err\n        });\n      });\n      console.log(`\n    adding patient investigation...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    investigationDate: ${investigationDate},\n    investigationTitle: ${investigationTitle},\n    investigationType: ${investigationType},\n    investigationDescription: ${investigationDescription},\n    investigationAttachmentName: ${investigationAttachmentName},\n    investigationAttachmentFormat: ${investigationAttachmentFormat},\n    investigationAttachmentPath: ${investigationAttachmentPath},\n    `);\n      this.setState({\n        userAlert: \"adding patient investigation...\"\n      });\n      const requestBody = {\n        query: `\n        mutation {updatePatientInvestigation(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{investigationDate:\"${investigationDate}\",investigationTitle:\"${investigationTitle}\",investigationType:\"${investigationType}\",investigationDescription:\"${investigationDescription}\",investigationAttachmentName:\"${investigationAttachmentName}\",investigationAttachmentFormat:\"${investigationAttachmentFormat}\",investigationAttachmentPath:\"${investigationAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientInvestigation._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.updatePatientInvestigation);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientDiagnosisHandler = event => {\n      event.preventDefault();\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id; // if(this.context.user.role !== 'admin') {\n      //   console.log(\"No edit permission!!\");\n      //   return;\n      // }\n\n      console.log(\"UpdatePatientDiagnosisFormData:  \", event.target.formGridDiagnosisTitle.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let diagnosisDate = null;\n\n      if (event.target.formGridDiagnosisDate) {\n        diagnosisDate = event.target.formGridDiagnosisDate.value;\n      }\n\n      if (event.target.formGridDiagnosisDateTodayCheckbox.checked === true) {\n        diagnosisDate = new Date().toISOString().slice(0, 10);\n      }\n\n      let diagnosisTitle = event.target.formGridDiagnosisTitle.value;\n      let diagnosisType = event.target.formGridDiagnosisType.value;\n      let diagnosisDescription = event.target.formGridDiagnosisDescription.value; // let diagnosisAttachmentName = event.target.formGridDiagnosisAttachmentName.value;\n\n      let diagnosisAttachmentFormat = event.target.formGridDiagnosisAttachmentFormat.value;\n      let diagnosisAttachmentPath = \"uploads/patients/\" + selectedPatientId + \"/diagnosis\"; // let diagnosisAttachmentPath = event.target.formGridDiagnosisAttachmentPath.value;\n\n      let file = AuthContext._currentValue.file;\n      console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n      const config = {\n        bucketName: this.context.creds.s3.bucketName,\n        dirName: diagnosisAttachmentPath,\n        region: this.context.creds.s3.region,\n        accessKeyId: this.context.creds.s3.accessKeyId,\n        secretAccessKey: this.context.creds.s3.secretAccessKey\n      };\n      const ReactS3Client = new S3(config);\n      const newFileName = file.name;\n      const diagnosisAttachmentName = newFileName;\n      ReactS3Client.uploadFile(file, newFileName).then(data => {\n        console.log(data);\n        this.setState({\n          userAlert: \"attachment upload success!\"\n        });\n      }).catch(err => {\n        console.error(err);\n        this.setState({\n          userAlert: \"upload error:  \" + err\n        });\n      });\n      console.log(`\n    adding patient diagnosis...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    diagnosisDate: ${diagnosisDate},\n    diagnosisTitle: ${diagnosisTitle},\n    diagnosisType: ${diagnosisType},\n    diagnosisDescription: ${diagnosisDescription},\n    diagnosisAttachmentName: ${diagnosisAttachmentName},\n    diagnosisAttachmentFormat: ${diagnosisAttachmentFormat},\n    diagnosisAttachmentPath: ${diagnosisAttachmentPath},\n    `);\n      this.setState({\n        userAlert: \"adding patient diagnosis...\"\n      });\n      const requestBody = {\n        query: `\n        mutation {updatePatientDiagnosis(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{diagnosisDate:\"${diagnosisDate}\",diagnosisTitle:\"${diagnosisTitle}\",diagnosisType:\"${diagnosisType}\",diagnosisDescription:\"${diagnosisDescription}\",diagnosisAttachmentName:\"${diagnosisAttachmentName}\",diagnosisAttachmentFormat:\"${diagnosisAttachmentFormat}\",diagnosisAttachmentPath:\"${diagnosisAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientDiagnosis._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.updatePatientDiagnosis);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientTreatmentHandler = event => {\n      event.preventDefault();\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id; // if(this.context.user.role !== 'admin') {\n      //   console.log(\"No edit permission!!\");\n      //   return;\n      // }\n\n      console.log(\"UpdatePatientTreatmentFormData:  \", event.target.formGridTreatmentTitle.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let treatmentDate = null;\n\n      if (event.target.formGridTreatmentDate) {\n        treatmentDate = event.target.formGridTreatmentDate.value;\n      }\n\n      if (event.target.formGridTreatmentDateTodayCheckbox.checked === true) {\n        treatmentDate = new Date().toISOString().slice(0, 10);\n      }\n\n      let treatmentTitle = event.target.formGridTreatmentTitle.value;\n      let treatmentDescription = event.target.formGridTreatmentDescription.value;\n      let treatmentDose = event.target.formGridTreatmentDose.value;\n      let treatmentFrequency = event.target.formGridTreatmentFrequency.value;\n      let treatmentType = undefined;\n\n      if (event.target.formGridInvestigationTypeSelect === \"select\") {\n        treatmentType = event.target.formGridTreatmentType.value;\n      } else {\n        treatmentType = event.target.formGridTreatmentTypeSelect.value;\n      } // let treatmentAttachmentName = event.target.formGridTreatmentAttachmentName.value;\n\n\n      let treatmentAttachmentFormat = event.target.formGridTreatmentAttachmentFormat.value;\n      let treatmentAttachmentPath = \"uploads/patients/\" + selectedPatientId + \"/treatment\"; // let treatmentAttachmentPath = event.target.formGridTreatmentAttachmentPath.value;\n\n      let file = AuthContext._currentValue.file;\n      console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n      const config = {\n        bucketName: this.context.creds.s3.bucketName,\n        dirName: treatmentAttachmentPath,\n        region: this.context.creds.s3.region,\n        accessKeyId: this.context.creds.s3.accessKeyId,\n        secretAccessKey: this.context.creds.s3.secretAccessKey\n      };\n      const ReactS3Client = new S3(config);\n      const newFileName = file.name;\n      const treatmentAttachmentName = newFileName;\n      ReactS3Client.uploadFile(file, newFileName).then(data => {\n        console.log(data);\n        this.setState({\n          userAlert: \"attachment upload success!\"\n        });\n      }).catch(err => {\n        console.error(err);\n        this.setState({\n          userAlert: \"upload error:  \" + err\n        });\n      });\n      console.log(`\n    adding patient treatment...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    treatmentDate: ${treatmentDate},\n    treatmentTitle: ${treatmentTitle},\n    treatmentDescription: ${treatmentDescription},\n    treatmentDose: ${treatmentDose},\n    treatmentFrequency: ${treatmentFrequency},\n    treatmentType: ${treatmentType},\n    treatmentAttachmentName: ${treatmentAttachmentName},\n    treatmentAttachmentFormat: ${treatmentAttachmentFormat},\n    treatmentAttachmentPath: ${treatmentAttachmentPath},\n    `);\n      this.setState({\n        userAlert: \"adding patient treatment...\"\n      });\n      const requestBody = {\n        query: `\n        mutation {updatePatientTreatment(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{treatmentDate:\"${treatmentDate}\",treatmentTitle:\"${treatmentTitle}\",treatmentType:\"${treatmentType}\",treatmentDescription:\"${treatmentDescription}\",treatmentDose:\"${treatmentDose}\",treatmentFrequency:\"${treatmentFrequency}\",treatmentAttachmentName:\"${treatmentAttachmentName}\",treatmentAttachmentFormat:\"${treatmentAttachmentFormat}\",treatmentAttachmentPath:\"${treatmentAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientTreatment._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.updatePatientTreatment);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientBillingHandler = event => {\n      event.preventDefault();\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id; // if(this.context.user.role !== 'admin') {\n      //   console.log(\"No edit permission!!\");\n      //   return;\n      // }\n\n      console.log(\"UpdatePatientBillingFormData:  \", event.target.formGridBillingTitle.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let billingDate = null;\n\n      if (event.target.formGridBillingDate) {\n        billingDate = event.target.formGridBillingDate.value;\n      }\n\n      if (event.target.formGridBillingDateTodayCheckbox.checked === true) {\n        billingDate = new Date().toISOString().slice(0, 10);\n      }\n\n      let billingTitle = event.target.formGridBillingTitle.value;\n      let billingType = event.target.formGridBillingType.value;\n      let billingDescription = event.target.formGridBillingDescription.value;\n      let billingAmount = event.target.formGridBillingAmount.value;\n      let billingPaid = event.target.formGridBillingPaid.value;\n      let billingNotes = event.target.formGridBillingNotes.value; // let billingAttachmentName = event.target.formGridBillingAttachmentName.value;\n\n      let billingAttachmentFormat = event.target.formGridBillingAttachmentFormat.value;\n      let billingAttachmentPath = \"uploads/patients/\" + selectedPatientId + \"/billing\"; // let billingAttachmentPath = event.target.formGridBillingAttachmentPath.value;\n\n      let file = AuthContext._currentValue.file;\n      console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n      const config = {\n        bucketName: this.context.creds.s3.bucketName,\n        dirName: billingAttachmentPath,\n        region: this.context.creds.s3.region,\n        accessKeyId: this.context.creds.s3.accessKeyId,\n        secretAccessKey: this.context.creds.s3.secretAccessKey\n      };\n      const ReactS3Client = new S3(config);\n      const newFileName = file.name;\n      const billingAttachmentName = newFileName;\n      ReactS3Client.uploadFile(file, newFileName).then(data => {\n        console.log(data);\n        this.setState({\n          userAlert: \"attachment upload success!\"\n        });\n      }).catch(err => {\n        console.error(err);\n        this.setState({\n          userAlert: \"upload error:  \" + err\n        });\n      });\n      console.log(`\n    adding patient billing...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    billingDate: ${billingDate},\n    billingTitle: ${billingTitle},\n    billingType: ${billingType},\n    billingDescription: ${billingDescription},\n    billingAmount: ${billingAmount},\n    billingPaid: ${billingPaid},\n    billingNotes: ${billingNotes},\n    billingAttachmentName: ${billingAttachmentName},\n    billingAttachmentFormat: ${billingAttachmentFormat},\n    billingAttachmentPath: ${billingAttachmentPath},\n    `);\n      this.setState({\n        userAlert: \"adding patient billing...\"\n      });\n      const requestBody = {\n        query: `\n        mutation {updatePatientBilling(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{billingDate:\"${billingDate}\",billingTitle:\"${billingTitle}\",billingType:\"${billingType}\",billingDescription:\"${billingDescription}\",billingAmount:${billingAmount},billingPaid:${billingPaid},billingNotes:\"${billingNotes}\",billingAttachmentName:\"${billingAttachmentName}\",billingAttachmentFormat:\"${billingAttachmentFormat}\",billingAttachmentPath:\"${billingAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientBilling._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.updatePatientBilling);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientVigilanceHandler = event => {\n      event.preventDefault();\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id; // if(this.context.user.role !== 'admin') {\n      //   console.log(\"No edit permission!!\");\n      //   return;\n      // }\n\n      console.log(\"UpdatePatientVigilanceFormData:  \", event.target.formGridVigilanceDate.value, event.target.formGridVigilanceChronicIllnessDiabetesMedication.checked);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let vigilanceDate = null;\n\n      if (event.target.formGridVigilanceDate) {\n        vigilanceDate = event.target.formGridVigilanceDate.value;\n      }\n\n      if (event.target.formGridVigilanceDateTodayCheckbox.checked === true) {\n        vigilanceDate = new Date().toISOString().slice(0, 10);\n      }\n\n      let vigilanceChronicIllnessDiabetesMedication = event.target.formGridVigilanceChronicIllnessDiabetesMedication.checked;\n      let vigilanceChronicIllnessDiabetesTesting = event.target.formGridVigilanceChronicIllnessDiabetesTesting.checked;\n      let vigilanceChronicIllnessDiabetesComment = event.target.formGridVigilanceChronicIllnessDiabetesComment.value;\n      let vigilanceChronicIllnessHbpMedication = event.target.formGridVigilanceChronicIllnessHbpMedication.checked;\n      let vigilanceChronicIllnessHbpTesting = event.target.formGridVigilanceChronicIllnessHbpTesting.checked;\n      let vigilanceChronicIllnessHbpComment = event.target.formGridVigilanceChronicIllnessHbpComment.value;\n      let vigilanceChronicIllnessDyslipidemiaMedication = event.target.formGridVigilanceChronicIllnessDyslipidemiaMedication.checked;\n      let vigilanceChronicIllnessDyslipidemiaTesting = event.target.formGridVigilanceChronicIllnessDyslipidemiaTesting.checked;\n      let vigilanceChronicIllnessDyslipidemiaComment = event.target.formGridVigilanceChronicIllnessDyslipidemiaComment.value;\n      let vigilanceChronicIllnessCadMedication = event.target.formGridVigilanceChronicIllnessCadMedication.checked;\n      let vigilanceChronicIllnessCadTesting = event.target.formGridVigilanceChronicIllnessCadTesting.checked;\n      let vigilanceChronicIllnessCadComment = event.target.formGridVigilanceChronicIllnessCadComment.value;\n      let vigilanceLifestyleWeightMedication = event.target.formGridVigilanceLifestyleWeightMedication.checked;\n      let vigilanceLifestyleWeightTesting = event.target.formGridVigilanceLifestyleWeightTesting.checked;\n      let vigilanceLifestyleWeightComment = event.target.formGridVigilanceLifestyleWeightComment.value;\n      let vigilanceLifestyleDietMedication = event.target.formGridVigilanceLifestyleDietMedication.checked;\n      let vigilanceLifestyleDietTesting = event.target.formGridVigilanceLifestyleDietTesting.checked;\n      let vigilanceLifestyleDietComment = event.target.formGridVigilanceLifestyleDietComment.value;\n      let vigilanceLifestyleSmokingMedication = event.target.formGridVigilanceLifestyleSmokingMedication.checked;\n      let vigilanceLifestyleSmokingTesting = event.target.formGridVigilanceLifestyleSmokingTesting.checked;\n      let vigilanceLifestyleSmokingComment = event.target.formGridVigilanceLifestyleSmokingComment.value;\n      let vigilanceLifestyleSubstanceAbuseMedication = event.target.formGridVigilanceLifestyleSubstanceAbuseMedication.checked;\n      let vigilanceLifestyleSubstanceAbuseTesting = event.target.formGridVigilanceLifestyleSubstanceAbuseTesting.checked;\n      let vigilanceLifestyleSubstanceAbuseComment = event.target.formGridVigilanceLifestyleSubstanceAbuseComment.value;\n      let vigilanceLifestyleExerciseMedication = event.target.formGridVigilanceLifestyleExerciseMedication.checked;\n      let vigilanceLifestyleExerciseTesting = event.target.formGridVigilanceLifestyleExerciseTesting.checked;\n      let vigilanceLifestyleExerciseComment = event.target.formGridVigilanceLifestyleExerciseComment.value;\n      let vigilanceLifestyleAllergiesMedication = event.target.formGridVigilanceLifestyleAllergiesMedication.checked;\n      let vigilanceLifestyleAllergiesTesting = event.target.formGridVigilanceLifestyleAllergiesTesting.checked;\n      let vigilanceLifestyleAllergiesComment = event.target.formGridVigilanceLifestyleAllergiesComment.value;\n      let vigilanceLifestyleAsthmaMedication = event.target.formGridVigilanceLifestyleAsthmaMedication.checked;\n      let vigilanceLifestyleAsthmaTesting = event.target.formGridVigilanceLifestyleAsthmaTesting.checked;\n      let vigilanceLifestyleAsthmaComment = event.target.formGridVigilanceLifestyleAsthmaComment.value;\n      let vigilanceScreeningBreastMedication = event.target.formGridVigilanceScreeningBreastMedication.checked;\n      let vigilanceScreeningBreastTesting = event.target.formGridVigilanceScreeningBreastTesting.checked;\n      let vigilanceScreeningBreastComment = event.target.formGridVigilanceScreeningBreastComment.value;\n      let vigilanceScreeningProstateMedication = event.target.formGridVigilanceScreeningProstateMedication.checked;\n      let vigilanceScreeningProstateTesting = event.target.formGridVigilanceScreeningProstateTesting.checked;\n      let vigilanceScreeningProstateComment = event.target.formGridVigilanceScreeningProstateComment.value;\n      let vigilanceScreeningCervixMedication = event.target.formGridVigilanceScreeningCervixMedication.checked;\n      let vigilanceScreeningCervixTesting = event.target.formGridVigilanceScreeningCervixTesting.checked;\n      let vigilanceScreeningCervixComment = event.target.formGridVigilanceScreeningCervixComment.value;\n      let vigilanceScreeningColonMedication = event.target.formGridVigilanceScreeningColonMedication.checked;\n      let vigilanceScreeningColonTesting = event.target.formGridVigilanceScreeningColonTesting.checked;\n      let vigilanceScreeningColonComment = event.target.formGridVigilanceScreeningColonComment.value;\n      let vigilanceScreeningDentalMedication = event.target.formGridVigilanceScreeningDentalMedication.checked;\n      let vigilanceScreeningDentalTesting = event.target.formGridVigilanceScreeningDentalTesting.checked;\n      let vigilanceScreeningDentalComment = event.target.formGridVigilanceScreeningDentalComment.value;\n      let vigilanceVaccinesInfluenzaMedication = event.target.formGridVigilanceVaccinesInfluenzaMedication.checked;\n      let vigilanceVaccinesInfluenzaTesting = event.target.formGridVigilanceVaccinesInfluenzaTesting.checked;\n      let vigilanceVaccinesInfluenzaComment = event.target.formGridVigilanceVaccinesInfluenzaComment.value;\n      let vigilanceVaccinesVaricellaMedication = event.target.formGridVigilanceVaccinesVaricellaMedication.checked;\n      let vigilanceVaccinesVaricellaTesting = event.target.formGridVigilanceVaccinesVaricellaTesting.checked;\n      let vigilanceVaccinesVaricellaComment = event.target.formGridVigilanceVaccinesVaricellaComment.value;\n      let vigilanceVaccinesHpvMedication = event.target.formGridVigilanceVaccinesHpvMedication.checked;\n      let vigilanceVaccinesHpvTesting = event.target.formGridVigilanceVaccinesHpvTesting.checked;\n      let vigilanceVaccinesHpvComment = event.target.formGridVigilanceVaccinesHpvComment.value;\n      let vigilanceVaccinesMmrMedication = event.target.formGridVigilanceVaccinesMmrMedication.checked;\n      let vigilanceVaccinesMmrTesting = event.target.formGridVigilanceVaccinesMmrTesting.checked;\n      let vigilanceVaccinesMmrComment = event.target.formGridVigilanceVaccinesMmrComment.value;\n      let vigilanceVaccinesTetanusMedication = event.target.formGridVigilanceVaccinesTetanusMedication.checked;\n      let vigilanceVaccinesTetanusTesting = event.target.formGridVigilanceVaccinesTetanusTesting.checked;\n      let vigilanceVaccinesTetanusComment = event.target.formGridVigilanceVaccinesTetanusComment.value;\n      let vigilanceVaccinesPneumovaxMedication = event.target.formGridVigilanceVaccinesPneumovaxMedication.checked;\n      let vigilanceVaccinesPneumovaxTesting = event.target.formGridVigilanceVaccinesPneumovaxTesting.checked;\n      let vigilanceVaccinesPneumovaxComment = event.target.formGridVigilanceVaccinesPneumovaxComment.value;\n      let vigilanceVaccinesOtherName = event.target.formGridVigilanceVaccinesOtherName.value;\n      let vigilanceVaccinesOtherMedication = event.target.formGridVigilanceVaccinesOtherMedication.checked;\n      let vigilanceVaccinesOtherTesting = event.target.formGridVigilanceVaccinesOtherTesting.checked;\n      let vigilanceVaccinesOtherComment = event.target.formGridVigilanceVaccinesOtherComment.value;\n      console.log(`\n    adding patient vigilance...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    vigilanceDate: ${vigilanceDate},\n    vigilanceChronicIllnessDiabetesMedication: \"${vigilanceChronicIllnessDiabetesMedication}\",\n    vigilanceChronicIllnessDiabetesTesting: \"${vigilanceChronicIllnessDiabetesTesting}\",\n    vigilanceChronicIllnessDiabetesComment: \"${vigilanceChronicIllnessDiabetesComment}\",\n    vigilanceChronicIllnessHbpMedication: \"${vigilanceChronicIllnessHbpMedication}\",\n    vigilanceChronicIllnessHbpTesting: \"${vigilanceChronicIllnessHbpTesting}\",\n    vigilanceChronicIllnessHbpComment: \"${vigilanceChronicIllnessHbpComment}\",\n    vigilanceChronicIllnessDyslipidemiaMedication: \"${vigilanceChronicIllnessDyslipidemiaMedication}\",\n    vigilanceChronicIllnessDyslipidemiaTesting: \"${vigilanceChronicIllnessDyslipidemiaTesting}\",\n    vigilanceChronicIllnessDyslipidemiaComment: \"${vigilanceChronicIllnessDyslipidemiaComment}\",\n    vigilanceChronicIllnessCadMedication: \"${vigilanceChronicIllnessCadMedication}\",\n    vigilanceChronicIllnessCadTesting: \"${vigilanceChronicIllnessCadTesting}\",\n    vigilanceChronicIllnessCadComment: \"${vigilanceChronicIllnessCadComment}\",\n    vigilanceLifestyleWeightMedication: \"${vigilanceLifestyleWeightMedication}\",\n    vigilanceLifestyleWeightTesting: \"${vigilanceLifestyleWeightTesting}\",\n    vigilanceLifestyleWeightComment: \"${vigilanceLifestyleWeightComment}\",\n    vigilanceLifestyleDietMedication: \"${vigilanceLifestyleDietMedication}\",\n    vigilanceLifestyleDietTesting: \"${vigilanceLifestyleDietTesting}\",\n    vigilanceLifestyleDietComment: \"${vigilanceLifestyleDietComment}\",\n    vigilanceLifestyleSmokingMedication: \"${vigilanceLifestyleSmokingMedication}\",\n    vigilanceLifestyleSmokingTesting: \"${vigilanceLifestyleSmokingTesting}\",\n    vigilanceLifestyleSmokingComment: \"${vigilanceLifestyleSmokingComment}\",\n    vigilanceLifestyleSubstanceAbuseMedication: \"${vigilanceLifestyleSubstanceAbuseMedication}\",\n    vigilanceLifestyleSubstanceAbuseTesting: \"${vigilanceLifestyleSubstanceAbuseTesting}\",\n    vigilanceLifestyleSubstanceAbuseComment: \"${vigilanceLifestyleSubstanceAbuseComment}\",\n    vigilanceLifestyleExerciseMedication: \"${vigilanceLifestyleExerciseMedication}\",\n    vigilanceLifestyleExerciseTesting: \"${vigilanceLifestyleExerciseTesting}\",\n    vigilanceLifestyleExerciseComment: \"${vigilanceLifestyleExerciseComment}\",\n    vigilanceLifestyleAllergiesMedication: \"${vigilanceLifestyleAllergiesMedication}\",\n    vigilanceLifestyleAllergiesTesting: \"${vigilanceLifestyleAllergiesTesting}\",\n    vigilanceLifestyleAllergiesComment: \"${vigilanceLifestyleAllergiesComment}\",\n    vigilanceLifestyleAsthmaMedication: \"${vigilanceLifestyleAsthmaMedication}\",\n    vigilanceLifestyleAsthmaTesting: \"${vigilanceLifestyleAsthmaTesting}\",\n    vigilanceLifestyleAsthmaComment: \"${vigilanceLifestyleAsthmaComment}\",\n    vigilanceScreeningBreastMedication: \"${vigilanceScreeningBreastMedication}\",\n    vigilanceScreeningBreastTesting: \"${vigilanceScreeningBreastTesting}\",\n    vigilanceScreeningBreastComment: \"${vigilanceScreeningBreastComment}\",\n    vigilanceScreeningProstateMedication: \"${vigilanceScreeningProstateMedication}\",\n    vigilanceScreeningProstateTesting: \"${vigilanceScreeningProstateTesting}\",\n    vigilanceScreeningProstateComment: \"${vigilanceScreeningProstateComment}\",\n    vigilanceScreeningCervixMedication: \"${vigilanceScreeningCervixMedication}\",\n    vigilanceScreeningCervixTesting: \"${vigilanceScreeningCervixTesting}\",\n    vigilanceScreeningCervixComment: \"${vigilanceScreeningCervixComment}\",\n    vigilanceScreeningColonMedication: \"${vigilanceScreeningColonMedication}\",\n    vigilanceScreeningColonTesting: \"${vigilanceScreeningColonTesting}\",\n    vigilanceScreeningColonComment: \"${vigilanceScreeningColonComment}\",\n    vigilanceScreeningDentalMedication: \"${vigilanceScreeningDentalMedication}\",\n    vigilanceScreeningDentalTesting: \"${vigilanceScreeningDentalTesting}\",\n    vigilanceScreeningDentalComment: \"${vigilanceScreeningDentalComment}\",\n    vigilanceVaccinesInfluenzaMedication: \"${vigilanceVaccinesInfluenzaMedication}\",\n    vigilanceVaccinesInfluenzaTesting: \"${vigilanceVaccinesInfluenzaTesting}\",\n    vigilanceVaccinesInfluenzaComment: \"${vigilanceVaccinesInfluenzaComment}\",\n    vigilanceVaccinesVaricellaMedication: \"${vigilanceVaccinesVaricellaMedication}\",\n    vigilanceVaccinesVaricellaTesting: \"${vigilanceVaccinesVaricellaTesting}\",\n    vigilanceVaccinesVaricellaComment: \"${vigilanceVaccinesVaricellaComment}\",\n    vigilanceVaccinesHpvMedication: \"${vigilanceVaccinesHpvMedication}\",\n    vigilanceVaccinesHpvTesting: \"${vigilanceVaccinesHpvTesting}\",\n    vigilanceVaccinesHpvComment: \"${vigilanceVaccinesHpvComment}\",\n    vigilanceVaccinesMmrMedication: \"${vigilanceVaccinesMmrMedication}\",\n    vigilanceVaccinesMmrTesting: \"${vigilanceVaccinesMmrTesting}\",\n    vigilanceVaccinesMmrComment: \"${vigilanceVaccinesMmrComment}\",\n    vigilanceVaccinesTetanusMedication: \"${vigilanceVaccinesTetanusMedication}\",\n    vigilanceVaccinesTetanusTesting: \"${vigilanceVaccinesTetanusTesting}\",\n    vigilanceVaccinesTetanusComment: \"${vigilanceVaccinesTetanusComment}\",\n    vigilanceVaccinesPneumovaxMedication: \"${vigilanceVaccinesPneumovaxMedication}\",\n    vigilanceVaccinesPneumovaxTesting: \"${vigilanceVaccinesPneumovaxTesting}\",\n    vigilanceVaccinesPneumovaxComment: \"${vigilanceVaccinesPneumovaxComment}\",\n    vigilanceVaccinesOtherName: \"${vigilanceVaccinesOtherName}\",\n    vigilanceVaccinesOtherMedication: \"${vigilanceVaccinesOtherMedication}\",\n    vigilanceVaccinesOtherTesting: \"${vigilanceVaccinesOtherTesting}\",\n    vigilanceVaccinesOtherComment: \"${vigilanceVaccinesOtherComment}\",\n    `);\n      this.setState({\n        userAlert: \"adding patient vigilance...\"\n      });\n      const requestBody = {\n        query: `\n        mutation {updatePatientVigilance(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{\n          vigilanceDate:\"${vigilanceDate}\",\n          vigilanceChronicIllnessDiabetesMedication: ${vigilanceChronicIllnessDiabetesMedication},\n          vigilanceChronicIllnessDiabetesTesting: ${vigilanceChronicIllnessDiabetesTesting},\n          vigilanceChronicIllnessDiabetesComment: \"${vigilanceChronicIllnessDiabetesComment}\",\n          vigilanceChronicIllnessHbpMedication: ${vigilanceChronicIllnessHbpMedication},\n          vigilanceChronicIllnessHbpTesting: ${vigilanceChronicIllnessHbpTesting},\n          vigilanceChronicIllnessHbpComment: \"${vigilanceChronicIllnessHbpComment}\",\n          vigilanceChronicIllnessDyslipidemiaMedication: ${vigilanceChronicIllnessDyslipidemiaMedication},\n          vigilanceChronicIllnessDyslipidemiaTesting: ${vigilanceChronicIllnessDyslipidemiaTesting},\n          vigilanceChronicIllnessDyslipidemiaComment: \"${vigilanceChronicIllnessDyslipidemiaComment}\",\n          vigilanceChronicIllnessCadMedication: ${vigilanceChronicIllnessCadMedication},\n          vigilanceChronicIllnessCadTesting: ${vigilanceChronicIllnessCadTesting},\n          vigilanceChronicIllnessCadComment: \"${vigilanceChronicIllnessCadComment}\",\n          vigilanceLifestyleWeightMedication: ${vigilanceLifestyleWeightMedication},\n          vigilanceLifestyleWeightTesting: ${vigilanceLifestyleWeightTesting},\n          vigilanceLifestyleWeightComment: \"${vigilanceLifestyleWeightComment}\",\n          vigilanceLifestyleDietMedication: ${vigilanceLifestyleDietMedication},\n          vigilanceLifestyleDietTesting: ${vigilanceLifestyleDietTesting},\n          vigilanceLifestyleDietComment: \"${vigilanceLifestyleDietComment}\",\n          vigilanceLifestyleSmokingMedication: ${vigilanceLifestyleSmokingMedication},\n          vigilanceLifestyleSmokingTesting: ${vigilanceLifestyleSmokingTesting},\n          vigilanceLifestyleSmokingComment: \"${vigilanceLifestyleSmokingComment}\",\n          vigilanceLifestyleSubstanceAbuseMedication: ${vigilanceLifestyleSubstanceAbuseMedication},\n          vigilanceLifestyleSubstanceAbuseTesting: ${vigilanceLifestyleSubstanceAbuseTesting},\n          vigilanceLifestyleSubstanceAbuseComment: \"${vigilanceLifestyleSubstanceAbuseComment}\",\n          vigilanceLifestyleExerciseMedication: ${vigilanceLifestyleExerciseMedication},\n          vigilanceLifestyleExerciseTesting: ${vigilanceLifestyleExerciseTesting},\n          vigilanceLifestyleExerciseComment: \"${vigilanceLifestyleExerciseComment}\",\n          vigilanceLifestyleAllergiesMedication: ${vigilanceLifestyleAllergiesMedication},\n          vigilanceLifestyleAllergiesTesting: ${vigilanceLifestyleAllergiesTesting},\n          vigilanceLifestyleAllergiesComment: \"${vigilanceLifestyleAllergiesComment}\",\n          vigilanceLifestyleAsthmaMedication: ${vigilanceLifestyleAsthmaMedication},\n          vigilanceLifestyleAsthmaTesting: ${vigilanceLifestyleAsthmaTesting},\n          vigilanceLifestyleAsthmaComment: \"${vigilanceLifestyleAsthmaComment}\",\n          vigilanceScreeningBreastMedication: ${vigilanceScreeningBreastMedication},\n          vigilanceScreeningBreastTesting: ${vigilanceScreeningBreastTesting},\n          vigilanceScreeningBreastComment: \"${vigilanceScreeningBreastComment}\",\n          vigilanceScreeningProstateMedication: ${vigilanceScreeningProstateMedication},\n          vigilanceScreeningProstateTesting: ${vigilanceScreeningProstateTesting},\n          vigilanceScreeningProstateComment: \"${vigilanceScreeningProstateComment}\",\n          vigilanceScreeningCervixMedication: ${vigilanceScreeningCervixMedication},\n          vigilanceScreeningCervixTesting: ${vigilanceScreeningCervixTesting},\n          vigilanceScreeningCervixComment: \"${vigilanceScreeningCervixComment}\",\n          vigilanceScreeningColonMedication: ${vigilanceScreeningColonMedication},\n          vigilanceScreeningColonTesting: ${vigilanceScreeningColonTesting},\n          vigilanceScreeningColonComment: \"${vigilanceScreeningColonComment}\",\n          vigilanceScreeningDentalMedication: ${vigilanceScreeningDentalMedication},\n          vigilanceScreeningDentalTesting: ${vigilanceScreeningDentalTesting},\n          vigilanceScreeningDentalComment: \"${vigilanceScreeningDentalComment}\",\n          vigilanceVaccinesInfluenzaMedication: ${vigilanceVaccinesInfluenzaMedication},\n          vigilanceVaccinesInfluenzaTesting: ${vigilanceVaccinesInfluenzaTesting},\n          vigilanceVaccinesInfluenzaComment: \"${vigilanceVaccinesInfluenzaComment}\",\n          vigilanceVaccinesVaricellaMedication: ${vigilanceVaccinesVaricellaMedication},\n          vigilanceVaccinesVaricellaTesting: ${vigilanceVaccinesVaricellaTesting},\n          vigilanceVaccinesVaricellaComment: \"${vigilanceVaccinesVaricellaComment}\",\n          vigilanceVaccinesHpvMedication: ${vigilanceVaccinesHpvMedication},\n          vigilanceVaccinesHpvTesting: ${vigilanceVaccinesHpvTesting},\n          vigilanceVaccinesHpvComment: \"${vigilanceVaccinesHpvComment}\",\n          vigilanceVaccinesMmrMedication: ${vigilanceVaccinesMmrMedication},\n          vigilanceVaccinesMmrTesting: ${vigilanceVaccinesMmrTesting},\n          vigilanceVaccinesMmrComment: \"${vigilanceVaccinesMmrComment}\",\n          vigilanceVaccinesTetanusMedication: ${vigilanceVaccinesTetanusMedication},\n          vigilanceVaccinesTetanusTesting: ${vigilanceVaccinesTetanusTesting},\n          vigilanceVaccinesTetanusComment: \"${vigilanceVaccinesTetanusComment}\",\n          vigilanceVaccinesPneumovaxMedication: ${vigilanceVaccinesPneumovaxMedication},\n          vigilanceVaccinesPneumovaxTesting: ${vigilanceVaccinesPneumovaxTesting},\n          vigilanceVaccinesPneumovaxComment: \"${vigilanceVaccinesPneumovaxComment}\",\n          vigilanceVaccinesOtherName: \"${vigilanceVaccinesOtherName}\",\n          vigilanceVaccinesOtherMedication: ${vigilanceVaccinesOtherMedication},\n          vigilanceVaccinesOtherTesting: ${vigilanceVaccinesOtherTesting},\n          vigilanceVaccinesOtherComment: \"${vigilanceVaccinesOtherComment}\"})\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientVigilance._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.updatePatientVigilance);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientAttachmentHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id; // if(this.context.user.role !== 'admin') {\n      //   console.log(\"No edit permission!!\");\n      //   return;\n      // }\n\n      console.log(`\n        UpdatePatientAttachmentFormData:\n      `);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      }); // let attachmentName = event.target.formGridPatientAttachmentName.value;\n\n      let attachmentFormat = event.target.formGridPatientAttachmentFormat.value;\n      let attachmentPath = \"uploads/patients/\" + selectedPatientId + \"/attachments\"; // let attachmentPath = event.target.formGridPatientAttachmentPath.value;\n\n      let file = AuthContext._currentValue.file;\n      console.log(`\n      uploading to s3...\n      file.name: ${file.name},\n      AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n      `);\n      const config = {\n        bucketName: this.context.creds.s3.bucketName,\n        dirName: attachmentPath,\n        region: this.context.creds.s3.region,\n        accessKeyId: this.context.creds.s3.accessKeyId,\n        secretAccessKey: this.context.creds.s3.secretAccessKey\n      };\n      const ReactS3Client = new S3(config);\n      const newFileName = file.name;\n      const attachmentName = newFileName;\n      ReactS3Client.uploadFile(file, newFileName).then(data => {\n        console.log(data);\n        this.setState({\n          userAlert: \"attachment upload success!\"\n        });\n      }).catch(err => {\n        console.error(err);\n        this.setState({\n          userAlert: \"upload error:  \" + err\n        });\n      });\n\n      if (attachmentName.trim().length === 0 || attachmentFormat.trim().length === 0 || attachmentPath.trim().length === 0) {\n        console.log(\"blank fields detected!!!...Please try again...\");\n        this.setState({\n          userAlert: \"blank fields detected!!!...Please try again...\"\n        });\n        return;\n      }\n\n      this.setState({\n        userAlert: \"adding patient attachment\"\n      });\n      const requestBody = {\n        query: `\n                    mutation {updatePatientAttachment(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{attachmentName:\"${attachmentName}\",attachmentFormat:\"${attachmentFormat}\",attachmentPath:\"${attachmentPath}\"})\n                    {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n            `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientAttachment._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.updatePatientAttachment);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        }); // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientAttachment})\n\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientNoteHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id; // if(this.context.user.role !== 'admin') {\n      //   console.log(\"No edit permission!!\");\n      //   return;\n      // }\n\n      console.log(`\n      UpdatePatientNoteFormData:\n      ${event.target.formGridNote.value}\n    `);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let note = event.target.formGridNote.value;\n\n      if (note.trim().length === 0) {\n        console.log(\"Can't Submit a blank form!!!...Please try again...\");\n        this.setState({\n          userAlert: \"Can't Submit a blank form!!!...Please try again...\"\n        });\n        return;\n      }\n\n      this.setState({\n        userAlert: \"adding patient note\"\n      });\n      const requestBody = {\n        query: `\n              mutation {updatePatientNotes(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{notes:\"${note}\"})\n              {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n            `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientNotes._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.updatePatientNotes);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        }); // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientNotes})\n\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientTagHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id; // if(this.context.user.role !== 'admin') {\n      //   console.log(\"No edit permission!!\");\n      //   return;\n      // }\n\n      console.log(`\n      UpdatePatientTagFormData:\n      ${event.target.formGridTag.value}\n    `);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let tag = event.target.formGridTag.value;\n\n      if (tag.trim().length === 0) {\n        console.log(\"Can't Submit a blank form!!!...Please try again...\");\n        this.setState({\n          userAlert: \"Can't Submit a blank form!!!...Please try again...\"\n        });\n        return;\n      }\n\n      const requestBody = {\n        query: `\n                    mutation {updatePatientTags(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{tag:\"${tag}\"})\n                    {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n            `\n      };\n      this.setState({\n        userAlert: \"adding patient tag\"\n      });\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientTags._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.updatePatientTags);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.modalConfirmSearchHandler = event => {\n      console.log(\"SearchPatientForm:  \");\n      let userId = this.context.userId;\n      console.log(\"SearchPatientFormData:  \", event.target.formBasicField.value);\n      this.setState({\n        searching: false\n      });\n      let field = null;\n      let query = event.target.formBasicQuery.value;\n\n      if (event.target.formBasicFieldSelect.value === \"select\") {\n        field = event.target.formBasicField.value;\n      } else {\n        field = event.target.formBasicFieldSelect.value;\n      }\n\n      this.setState({\n        patientSearchField: field,\n        patientSearchQuery: query\n      });\n\n      if (field.trim().length === 0 || query.trim().length === 0) {\n        console.log(\"blank fields detected!!!...Please try again...\");\n        return;\n      }\n\n      this.setState({\n        userAlert: \"Searching for Patient:  \"\n      });\n      const requestBody = {\n        query: `\n        query {\n          getPatientField(userId: \"${userId}\", field: \"${field}\", query: \"${query}\" )\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `\n      };\n      const token = this.context.token;\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n        const responseAlert = JSON.stringify(resData.data).slice(2, 15);\n        this.setState({\n          userAlert: responseAlert\n        });\n        const searchPatients = resData.data.getPatientField;\n        this.setState({\n          searchPatients: searchPatients\n        });\n        console.log(\"state.searchPatients:  \", this.state.searchPatients); // this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.modalConfirmSearchIdHandler = event => {\n      console.log(\"SearchPatientIdFormData\");\n      let userId = this.context.userId;\n      this.setState({\n        searching: false\n      });\n      const patientId = event.target.formBasicId.value;\n      const requestBody = {\n        query: `\n      query {getPatientId(userId:\"${userId}\",patientId:\"${patientId}\")\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n      };\n      const token = this.context.token;\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        const searchPatients = resData.data.getPatientId;\n        this.setState({\n          searchPatients: [searchPatients]\n        });\n        console.log(\"state.searchPatients:  \", this.state.searchPatients); // this.fetchUsers();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.modalConfirmSearchNameHandler = event => {\n      console.log(\"SearchPatientNameFormData:\", event.target.formBasicName.value); // let userId = this.context.userId;\n\n      this.setState({\n        searching: false\n      });\n      let patients = this.state.patients;\n      const regex = new RegExp(event.target.formBasicName.value, \"i\");\n      console.log(`\n    regex: ${regex},\n    `);\n      let result = patients.filter(patient => patient.name.match(regex));\n      console.log(`\n      result: ${JSON.stringify(result)}\n      `);\n      this.setState({\n        searchPatients: result\n      });\n    };\n\n    this.getPatientVisit = event => {\n      const selectedPatient = this.state.selectedPatient;\n      event.preventDefault();\n      console.log(`\n        getUserVisit function:\n        selectedPatient.consultant: ${JSON.stringify(selectedPatient.consultant)},\n        selectedPatient.complaints: ${JSON.stringify(selectedPatient.complaints)},\n        visitDate: ${new Date(event.target.formBasicVisitDate.value)},\n      `);\n      let visitDate = new Date(event.target.formBasicVisitDate.value).toISOString().substring(0, 10);\n      let visitSurveys = selectedPatient.surveys.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n      let visitConsultants = selectedPatient.consultant.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n      let visitComplaints = selectedPatient.complaints.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate); // let visitSurveys = selectedPatient.surveys.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString() === visitDate);\n\n      let visitSystematicInquiry = selectedPatient.systematicInquiry.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n      let visitVitals = selectedPatient.vitals.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n      let visitExaminations = selectedPatient.examination.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n      let visitHistory = selectedPatient.history.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n      let visitInvestigations = selectedPatient.investigation.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n      let visitDiagnosis = selectedPatient.diagnosis.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n      let visitTreatments = selectedPatient.treatment.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n      let visitBilling = selectedPatient.billing.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n      let visitVigilance = selectedPatient.vigilance.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n      const visit = {\n        date: visitDate,\n        patientName: this.context.selectedPatient.name,\n        consultant: visitConsultants,\n        complaint: visitComplaints,\n        examination: visitExaminations,\n        survey: visitSurveys,\n        systematicInquiry: visitSystematicInquiry,\n        vitals: visitVitals,\n        history: visitHistory,\n        investigation: visitInvestigations,\n        diagnosis: visitDiagnosis,\n        treatment: visitTreatments,\n        billing: visitBilling,\n        vigilance: visitVigilance\n      };\n      console.log(`\n        visit: ${JSON.stringify(visit)},\n        `); // this.context.visit = visit;\n\n      this.setState({\n        visit: visit\n      });\n    };\n\n    this.getVisitList = () => {\n      const selectedPatient = this.state.selectedPatient;\n      const patientName = this.state.selectedPatient.name;\n      let selectedPatientAppointmentDateArray = [];\n      let selectedPatientAppointmentVisitArray = [];\n      let selectedPatientAppointments = this.state.selectedPatient.appointments.map(appointments => {\n        console.log(\"appointments.date\", appointments.date);\n        selectedPatientAppointmentDateArray.push(new Date(appointments.date.substr(0, 10) * 1000).toISOString().substring(0, 10));\n      });\n      console.log(`\n        getVisitList function:\n        selectedPatientAppointments: ${selectedPatientAppointmentDateArray}\n      `);\n      selectedPatientAppointmentDateArray.map(appointmentDate => {\n        console.log(`\n          retriveing visit for ${appointmentDate} ...selectedPatientAppointmentVisitArray: ${JSON.stringify(selectedPatientAppointmentVisitArray)},\n          `);\n        thisGetVisit(appointmentDate, patientName);\n      });\n\n      function thisGetVisit(argsDate, argsPatientName) {\n        console.log(\"thisGetVisit function...\");\n        let visitDate = argsDate;\n        let visitSurveys = selectedPatient.surveys.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n        let visitConsultants = selectedPatient.consultant.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n        let visitComplaints = selectedPatient.complaints.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate); // let visitSurveys = selectedPatient.surveys.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString() === visitDate);\n\n        let visitVitals = selectedPatient.vitals.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n        let visitSystematicInquiry = selectedPatient.systematicInquiry.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n        let visitExaminations = selectedPatient.examination.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n        let visitHistory = selectedPatient.history.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n        let visitInvestigations = selectedPatient.investigation.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n        let visitDiagnosis = selectedPatient.diagnosis.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n        let visitTreatments = selectedPatient.treatment.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n        let visitBilling = selectedPatient.billing.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n        let visitVigilance = selectedPatient.vigilance.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n        const visit = {\n          date: visitDate,\n          patientName: argsPatientName,\n          consultant: visitConsultants,\n          complaint: visitComplaints,\n          examination: visitExaminations,\n          survey: visitSurveys,\n          systematicInquiry: visitSystematicInquiry,\n          vitals: visitVitals,\n          history: visitHistory,\n          investigation: visitInvestigations,\n          diagnosis: visitDiagnosis,\n          treatment: visitTreatments,\n          billing: visitBilling,\n          vigilance: visitVigilance\n        };\n        selectedPatientAppointmentVisitArray.push(visit);\n      } // console.log(`\n      //     ...final selectedPatientAppointmentVisitArray: ${JSON.stringify(selectedPatientAppointmentVisitArray)}\n      //   `);\n\n\n      this.setState({\n        visitList: selectedPatientAppointmentVisitArray\n      });\n    };\n\n    this.getVisitListAsc = () => {\n      console.log(`\n      sorting visit list in ascending order...\n      `);\n      let list = this.state.visitList;\n      list.sort((a, b) => {\n        if (a.date < b.date) return -1;\n        return a.date > b.date ? 1 : 0;\n      });\n      console.log(`\n        list: ${list}\n        `);\n      this.setState({\n        visitList: list\n      });\n    };\n\n    this.getVisitListDesc = () => {\n      console.log(`\n      sorting visit list in descending order...\n      `);\n      let list = this.state.visitList;\n      list.sort((a, b) => {\n        if (a.date < b.date) return 1;\n        return a.date > b.date ? -1 : 0;\n      });\n      console.log(`\n        list: ${list}\n        `);\n      this.setState({\n        visitList: list\n      });\n    };\n\n    this.modalCancelHandler = () => {\n      this.setState({\n        creating: false,\n        updating: false,\n        searching: false,\n        selectedPatient: null\n      });\n    };\n\n    this.fetchPatientsAsc = () => {\n      console.log(\"fetch patients function:  \");\n      const userId = this.context.userId;\n      const token = this.context.token; // this.setState({ isLoading: true });\n\n      const requestBody = {\n        query: `\n          query {patientsNameAsc(userId:\"${userId}\")\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n        `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"resData\", resData);\n        const patients = resData.data.patientsNameAsc;\n        console.log(patients);\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.context.patients = patients;\n        this.setState({\n          patients: patients\n        }); // if (this.isActive) {\n        //   this.setState({ patients: patients, isLoading: false });\n        // }\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        }); // if (this.isActive) {\n        //   this.setState({ isLoading: false });\n        // }\n      });\n    };\n\n    this.fetchPatientsDesc = () => {\n      console.log(\"fetch patients function:  \");\n      const userId = this.context.userId;\n      const token = this.context.token; // this.setState({ isLoading: true });\n\n      const requestBody = {\n        query: `\n          query {patientsNameDesc(userId:\"${userId}\")\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n        `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"resData\", resData);\n        const patients = resData.data.patientsNameDesc;\n        console.log(patients);\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.context.patients = patients; // if (this.isActive) {\n        //   this.setState({ patients: patients, isLoading: false });\n        // }\n\n        this.setState({\n          patients: patients\n        });\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        }); // if (this.isActive) {\n        //   this.setState({ isLoading: false });\n        // }\n      });\n    };\n\n    this.modalDeleteHandler = () => {\n      console.log(\"deleting patient...selectedPatient:  \", this.context.selectedPatient);\n      const selectedPatientId = this.context.selectedPatient._id;\n      const userId = this.context.selectedUser._id;\n\n      if (this.context.user.role !== 'admin') {\n        console.log(\"Not the Admin! No edit permission!!\");\n      }\n\n      this.setState({\n        deleting: true\n      });\n      const requestBody = {\n        query: `\n          mutation {deletePatient(userId:\"${userId}\",patientId:\"${selectedPatientId}\")\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n        `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + this.context.token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatient;\n        console.log(deletedPatient);\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        let deletedPatientId = deletedPatient._id;\n        deletedPatient = this.state.patients.find(e => e._id === deletedPatientId);\n        const deletedPatientPos = this.state.patients.indexOf(deletedPatient);\n        const slicedArray = this.state.patients.splice(deletedPatientPos, 1);\n        console.log(\"deletedPatient:  \", JSON.stringify(deletedPatient), \"  deletedUserPos:  \", deletedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.setState({\n          deleting: false\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n\n        if (this.isActive) {\n          this.setState({\n            deleting: false\n          });\n        }\n      });\n    };\n\n    this.deletePatientInsuranceItem = props => {\n      let token = this.context.token;\n      let userId = this.context.userId;\n      let patientId = this.state.selectedPatient._id;\n      console.log(`\n      delete patient insurance item:\n      props: ${JSON.stringify(props)},\n      token: ${token},\n      userId: ${userId},\n      patientId: ${patientId},\n      `);\n      const requestBody = {\n        query: `\n         mutation {deletePatientInsurance (userId:\"${userId}\", patientId:\"${patientId}\",insuranceCompany:\"${props.company}\",insuranceNumber:\"${props.number}\")\n         {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatientInsurance;\n        console.log(deletedPatient);\n        const updatedPatientId = resData.data.deletePatientInsurance._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.deletePatientInsurance);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        }); // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientInsurance})\n\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.deletePatientAppointmentItem = props => {\n      let token = this.context.token;\n      let userId = this.context.userId;\n      let patientId = this.state.selectedPatient._id;\n      let date = new Date(props.date.substr(0, 10) * 1000).toISOString().slice(0, 10);\n      console.log(`\n      delete patient appointment item:\n      props: ${JSON.stringify(props)},\n      token: ${token},\n      userId: ${userId},\n      patientId: ${patientId},\n      appointment date: ${date},\n      `);\n      const requestBody = {\n        query: `\n         mutation {deletePatientAppointment (userId:\"${userId}\", patientId:\"${patientId}\",appointmentId:\"${props._id}\",appointmentDate:\"${date}\")\n         {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatientAppointment;\n        console.log(deletedPatient);\n        const updatedPatientId = resData.data.deletePatientAppointment._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.deletePatientAppointment);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.deletePatientConsultantItem = props => {\n      let token = this.context.token;\n      let userId = this.context.userId;\n      let patientId = this.state.selectedPatient._id;\n      let date = new Date(props.date.substr(0, 10) * 1000).toISOString().slice(0, 10);\n      console.log(`\n      delete patient consultant item:\n      props: ${JSON.stringify(props)},\n      token: ${token},\n      userId: ${userId},\n      patientId: ${patientId},\n      consultant date: ${date},\n      `);\n      const requestBody = {\n        query: `\n         mutation {deletePatientConsultant (userId:\"${userId}\", patientId:\"${patientId}\",consultantId:\"${props.reference.id}\",consultantDate:\"${date}\")\n         {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatientConsultant;\n        console.log(deletedPatient);\n        const updatedPatientId = resData.data.deletePatientConsultant._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.deletePatientConsultant);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.deletePatientNextOfKinItem = props => {\n      let token = this.context.token;\n      let userId = this.context.userId;\n      let patientId = this.state.selectedPatient._id;\n      console.log(`\n    delete patient nextOfKin item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    `);\n      const requestBody = {\n        query: `\n       mutation {deletePatientNextOfKin (userId:\"${userId}\", patientId:\"${patientId}\",nextOfKinName:\"${props.name}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatientNextOfKin;\n        console.log(deletedPatient);\n        const updatedPatientId = resData.data.deletePatientNextOfKin._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.deletePatientNextOfKin);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.deletePatientComplaintItem = props => {\n      let token = this.context.token;\n      let userId = this.context.userId;\n      let patientId = this.state.selectedPatient._id;\n      let date = new Date(props.date.substr(0, 10) * 1000).toISOString().slice(0, 10);\n      console.log(`\n    delete patient Complaint item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    complaint date: ${date},\n    `);\n      const requestBody = {\n        query: `\n       mutation {deletePatientComplaint (userId:\"${userId}\", patientId:\"${patientId}\",complaintTitle:\"${props.title}\",complaintDate:\"${date}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatientComplaint;\n        console.log(deletedPatient);\n        const updatedPatientId = resData.data.deletePatientComplaint._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.deletePatientComplaint);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.deletePatientSurveyItem = props => {\n      let token = this.context.token;\n      let userId = this.context.userId;\n      let patientId = this.state.selectedPatient._id;\n      let date = new Date(props.date.substr(0, 10) * 1000).toISOString().slice(0, 10);\n      console.log(`\n    delete patient Survey item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    survey date: ${date}\n    `);\n      const requestBody = {\n        query: `\n       mutation {deletePatientSurvey (userId:\"${userId}\", patientId:\"${patientId}\",surveyTitle:\"${props.title}\",surveyDate:\"${date}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatientSurvey;\n        console.log(deletedPatient);\n        const updatedPatientId = resData.data.deletePatientSurvey._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.deletePatientSurvey);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.deletePatientSystematicInquiryItem = props => {\n      let token = this.context.token;\n      let userId = this.context.userId;\n      let patientId = this.state.selectedPatient._id;\n      let date = new Date(props.date.substr(0, 10) * 1000).toISOString().slice(0, 10);\n      console.log(`\n    delete patient SystematicInquiry item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    systematicInquiry date: ${date}\n    `);\n      const requestBody = {\n        query: `\n       mutation {deletePatientSystematicInquiry (userId:\"${userId}\", patientId:\"${patientId}\",systematicInquiryTitle:\"${props.title}\",systematicInquiryDate:\"${date}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatientSystematicInquiry;\n        console.log(deletedPatient);\n        const updatedPatientId = resData.data.deletePatientSystematicInquiry._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.deletePatientSystematicInquiry);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.deletePatientVitalsItem = props => {\n      let token = this.context.token;\n      let userId = this.context.userId;\n      let patientId = this.state.selectedPatient._id;\n      let date = new Date(props.date.substr(0, 10) * 1000).toISOString().slice(0, 10);\n      console.log(`\n    delete patient Vitals item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    vitals date: ${date},\n    `);\n      const requestBody = {\n        query: `\n       mutation {deletePatientVitals (userId:\"${userId}\", patientId:\"${patientId}\",vitalsDate:\"${date}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatientVitals;\n        console.log(deletedPatient);\n        const updatedPatientId = resData.data.deletePatientVitals._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.deletePatientVitals);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.deletePatientExaminationItem = props => {\n      let token = this.context.token;\n      let userId = this.context.userId;\n      let patientId = this.state.selectedPatient._id;\n      let date = new Date(props.date.substr(0, 10) * 1000).toISOString().slice(0, 10);\n      console.log(`\n    delete patient Examination item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    examination date: ${date},\n    `);\n      const requestBody = {\n        query: `\n       mutation {deletePatientExamination (userId:\"${userId}\", patientId:\"${patientId}\",examinationType:\"${props.type}\",examinationDate:\"${date}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatientExamination;\n        console.log(deletedPatient);\n        const updatedPatientId = resData.data.deletePatientExamination._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.deletePatientExamination);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.deletePatientHistoryItem = props => {\n      let token = this.context.token;\n      let userId = this.context.userId;\n      let patientId = this.state.selectedPatient._id;\n      let date = new Date(props.date.substr(0, 10) * 1000).toISOString().slice(0, 10);\n      console.log(`\n    delete patient History item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    history date: ${date},\n    `);\n      const requestBody = {\n        query: `\n       mutation {deletePatientHistory (userId:\"${userId}\", patientId:\"${patientId}\",historyTitle:\"${props.title}\",historyDate:\"${date}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatientHistory;\n        console.log(deletedPatient);\n        const updatedPatientId = resData.data.deletePatientHistory._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.deletePatientHistory);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.deletePatientAllergiesItem = props => {\n      let token = this.context.token;\n      let userId = this.context.userId;\n      let patientId = this.state.selectedPatient._id;\n      console.log(`\n    delete patient Allergies item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    `);\n      const requestBody = {\n        query: `\n       mutation {deletePatientAllergies (userId:\"${userId}\", patientId:\"${patientId}\",allergiesTitle:\"${props.title}\",allergiesType:\"${props.type}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatientAllergies;\n        console.log(deletedPatient);\n        const updatedPatientId = resData.data.deletePatientAllergies._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.deletePatientAllergies);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.deletePatientMedicationItem = props => {\n      let token = this.context.token;\n      let userId = this.context.userId;\n      let patientId = this.state.selectedPatient._id;\n      console.log(`\n    delete patient Medication item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    `);\n      const requestBody = {\n        query: `\n       mutation {deletePatientMedication (userId:\"${userId}\", patientId:\"${patientId}\",medicationTitle:\"${props.title}\",medicationType:\"${props.type}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatientMedication;\n        console.log(deletedPatient);\n        const updatedPatientId = resData.data.deletePatientMedication._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.deletePatientMedication);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.deletePatientInvestigationItem = props => {\n      let token = this.context.token;\n      let userId = this.context.userId;\n      let patientId = this.state.selectedPatient._id;\n      let date = new Date(props.date.substr(0, 10) * 1000).toISOString().slice(0, 10);\n      console.log(`\n    delete patient Investigation item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    investigation date: ${date},\n    `);\n      const requestBody = {\n        query: `\n       mutation {deletePatientInvestigation (userId:\"${userId}\", patientId:\"${patientId}\",investigationDate:\"${date}\",investigationTitle:\"${props.title}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatientInvestigation;\n        console.log(deletedPatient);\n        const updatedPatientId = resData.data.deletePatientInvestigation._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.deletePatientInvestigation);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.deletePatientDiagnosisItem = props => {\n      let token = this.context.token;\n      let userId = this.context.userId;\n      let patientId = this.state.selectedPatient._id;\n      let date = new Date(props.date.substr(0, 10) * 1000).toISOString().slice(0, 10);\n      console.log(`\n    delete patient Diagnosis item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    diagnosis date: ${date}\n    `);\n      const requestBody = {\n        query: `\n       mutation {deletePatientDiagnosis (userId:\"${userId}\",patientId:\"${patientId}\",diagnosisDate:\"${date}\",diagnosisTitle:\"${props.title}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatientDiagnosis;\n        console.log(deletedPatient);\n        const updatedPatientId = resData.data.deletePatientDiagnosis._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.deletePatientDiagnosis);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.deletePatientTreatmentItem = props => {\n      let token = this.context.token;\n      let userId = this.context.userId;\n      let patientId = this.state.selectedPatient._id;\n      let date = new Date(props.date.substr(0, 10) * 1000).toISOString().slice(0, 10);\n      console.log(`\n    delete patient Treatment item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    treatment date: ${date},\n    `);\n      const requestBody = {\n        query: `\n       mutation {deletePatientTreatment (userId:\"${userId}\", patientId:\"${patientId}\",treatmentDate:\"${date}\",treatmentTitle:\"${props.title}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatientTreatment;\n        console.log(deletedPatient);\n        const updatedPatientId = resData.data.deletePatientTreatment._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.deletePatientTreatment);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.deletePatientBillingItem = props => {\n      let token = this.context.token;\n      let userId = this.context.userId;\n      let patientId = this.state.selectedPatient._id;\n      let date = new Date(props.date.substr(0, 10) * 1000).toISOString().slice(0, 10);\n      console.log(`\n    delete patient Billing item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    billing date: ${date},\n    `);\n      const requestBody = {\n        query: `\n       mutation {deletePatientBilling (userId:\"${userId}\", patientId:\"${patientId}\",billingDate:\"${date}\",billingTitle:\"${props.title}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatientBilling;\n        console.log(deletedPatient);\n        const updatedPatientId = resData.data.deletePatientBilling._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.deletePatientBilling);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.deletePatientVigilanceItem = props => {\n      let token = this.context.token;\n      let userId = this.context.userId;\n      let patientId = this.state.selectedPatient._id;\n      let date = new Date(props.date.substr(0, 10) * 1000).toISOString().slice(0, 10);\n      console.log(`\n    delete patient Vigilance item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    vigilance date: ${date},\n    `);\n      const requestBody = {\n        query: `\n       mutation {deletePatientVigilance (userId:\"${userId}\", patientId:\"${patientId}\",vigilanceDate:\"${date}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatientVigilance;\n        console.log(deletedPatient);\n        const updatedPatientId = resData.data.deletePatientVigilance._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.deletePatientVigilance);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.deletePatientAttachmentItem = props => {\n      let token = this.context.token;\n      let userId = this.context.userId;\n      let patientId = this.state.selectedPatient._id; // console.log(`\n      //   deleting from s3...\n      //   file.name: ${props.name},\n      //   `);\n      //\n      //   const config = {\n      //     bucketName: this.context.creds.s3.bucketName,\n      //     dirName: props.path,\n      //     region: this.context.creds.s3.region,\n      //     accessKeyId: this.context.creds.s3.accessKeyId,\n      //     secretAccessKey: this.context.creds.s3.secretAccessKey,\n      //   }\n      // const ReactS3Client = new S3(config);\n      // const filename = props.name;\n      // // const attachmentName = newFileName;\n      // //\n      // S3FileUpload\n      // .deleteFile(filename, config)\n      // .then(response => console.log(response))\n      // .catch(err => console.error(err))\n\n      console.log(`\n    delete patient Attachment item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    `);\n      const requestBody = {\n        query: `\n       mutation {deletePatientAttachment (userId:\"${userId}\", patientId:\"${patientId}\",attachmentName:\"${props.name}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatientAttachment;\n        console.log(deletedPatient);\n        const updatedPatientId = resData.data.deletePatientAttachment._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.deletePatientAttachment);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.deletePatientNoteItem = props => {\n      let token = this.context.token;\n      let userId = this.context.userId;\n      let patientId = this.state.selectedPatient._id;\n      console.log(`\n    delete patient Note item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    `);\n      const requestBody = {\n        query: `\n      mutation {deletePatientNote (userId:\"${userId}\", patientId:\"${patientId}\",note:\"${props}\")\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatientNote;\n        console.log(deletedPatient);\n        const updatedPatientId = resData.data.deletePatientNote._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.deletePatientNote);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.deletePatientTagItem = props => {\n      let token = this.context.token;\n      let userId = this.context.userId;\n      let patientId = this.state.selectedPatient._id;\n      console.log(`\n    delete patient Tag item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    `);\n      const requestBody = {\n        query: `\n      mutation {deletePatientTag (userId:\"${userId}\", patientId:\"${patientId}\",tag:\"${props}\")\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatientTag;\n        console.log(deletedPatient);\n        const updatedPatientId = resData.data.deletePatientTag._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.deletePatientTag);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.onViewAttachment = attachment => {\n      console.log(`\n      setting up attachment viewer...\n      attachment: ${JSON.stringify(attachment)}\n      `);\n      this.setState({\n        showAttachment: true\n      });\n      const file = \"https://ent-emr-bucket.s3-us-east-2.amazonaws.com/\" + attachment.path + \"/\" + attachment.name;\n      const type = attachment.format;\n      this.setState({\n        showThisAttachmentFile: file,\n        showThisAttachmentType: type\n      });\n    };\n\n    this.closeAttachmentView = () => {\n      console.log(`\n      closing attachment viewer...\n      `);\n      this.setState({\n        showAttachment: false\n      });\n    };\n\n    this.createPdf = patient => {\n      console.log(`\n        creating pdf...\n        user: ${JSON.stringify(patient)}\n      `);\n      const pdfData = {\n        title: \"This pdf is supplied with Patient data...\",\n        patient: {\n          _id: patient._id,\n          title: patient.title,\n          name: patient.name,\n          dob: patient.dob,\n          age: patient.age,\n          gender: patient.gender,\n          address: {\n            number: patient.number,\n            street: patient.street,\n            town: patient.town,\n            parish: patient.parish,\n            postOffice: patient.postOffice\n          },\n          registrationDate: patient.registrationDate,\n          referralDate: patient.referralDate,\n          expirationDate: patient.expirationDate,\n          attendingPhysician: {\n            name: patient.attendingPhysician.name,\n            email: patient.attendingPhysician.email,\n            phone: patient.attendingPhysician.phone\n          },\n          referringDoctor: {\n            name: patient.referringDoctor.name,\n            email: patient.referringDoctor.email,\n            phone: patient.referringDoctor.phone\n          },\n          contact: {\n            phone: patient.contact.phone,\n            email: patient.contact.email\n          },\n          occupation: {\n            role: patient.occupation.role,\n            employer: patient.occupation.employer,\n            contact: {\n              phone: patient.occupation.contact.phone,\n              email: patient.occupation.contact.email\n            }\n          },\n          appointments: patient.appointments,\n          consultant: patient.consultant,\n          insurance: patient.insurance,\n          nextOfKin: patient.nextOfKin,\n          complaints: patient.complaints,\n          surveys: patient.surveys,\n          systematicInquiry: patient.systematicInquiry,\n          vitals: patient.vitals,\n          examination: patient.examination,\n          history: patient.history,\n          allergies: patient.allergies,\n          medication: patient.medication,\n          investigation: patient.investigation,\n          diagnosis: patient.diagnosis,\n          treatment: patient.treatment,\n          billing: patient.billing,\n          vigilance: patient.vigilance,\n          attachments: patient.attachments,\n          notes: patient.notes,\n          tags: patient.tags\n        }\n      };\n      this.setState({\n        createPdf: true,\n        pdfData: pdfData\n      });\n    };\n\n    this.closePdfCreator = () => {\n      console.log(`\n      closing pdf creator...\n      `);\n      this.setState({\n        createPdf: false,\n        pdfData: null\n      });\n    };\n\n    this.showDetailHandler = patientId => {\n      this.setState({\n        visitList: []\n      });\n      this.setState(prevState => {\n        const selectedPatient = prevState.patients.find(e => e._id === patientId);\n        this.context.selectedPatient = selectedPatient;\n        this.context.selectedPatientId = selectedPatient._id;\n        console.log(\"selectedPatient:  \", selectedPatient);\n        return {\n          selectedPatient: selectedPatient\n        };\n      });\n    };\n\n    this.selectVisit = props => {\n      console.log(`\n      changing selected visit ...\n      event: ${JSON.stringify(props)},\n      `);\n      this.setState({\n        selectedVisit: props\n      });\n    };\n\n    this.closeVisit = () => {\n      console.log(`\n      clearing selected visits...\n      `);\n      this.setState({\n        visit: null,\n        selectedVisit: null\n      });\n    };\n\n    this.createVisitChecklistUpdate = props => {\n      console.log(`\n      updating create-visit checklist...\n      props: ${props},\n      `);\n      this.setState({\n        userAlert: `creating visit: ${props} addedd...`\n      });\n      let newState = Object.assign({}, this.state);\n      newState.createVisitChecklist[props] = true;\n      this.setState(newState);\n    };\n\n    this.newVisitComplete = () => {\n      console.log(`\n      finished adding new visit...\n      `);\n      this.setState({\n        newVisit: false,\n        createVisitChecklist: {\n          consultant: true,\n          complaint: true,\n          diagnosis: true,\n          examination: true,\n          investigation: true,\n          survey: true,\n          systematicInquiry: true,\n          treatment: true,\n          vitals: true,\n          billing: true,\n          vigilance: true\n        }\n      });\n    };\n\n    this.nameElRef = React.createRef();\n  }\n\n  componentDidMount() {\n    if (this.context.user.name === \"Lord-of-the-Manor\") {\n      this.setState({\n        canDelete: true\n      });\n    }\n\n    this.fetchPatients();\n  }\n\n  fetchPatients() {\n    console.log(\"fetch patients function:  \");\n    const userId = this.context.userId;\n    const token = this.context.token;\n    this.setState({\n      isLoading: true\n    });\n    const requestBody = {\n      query: `\n          query {patients(userId:\"${userId}\")\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n        `\n    };\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    }).then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n\n      return res.json();\n    }).then(resData => {\n      console.log(\"resData\", resData);\n      const patients = resData.data.patients;\n      console.log(patients);\n      const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n      this.setState({\n        userAlert: responseAlert\n      });\n      this.context.patients = this.state.patients;\n\n      if (this.isActive) {\n        this.setState({\n          patients: patients,\n          isLoading: false\n        });\n      }\n    }).catch(err => {\n      console.log(err);\n      this.setState({\n        userAlert: err\n      });\n\n      if (this.isActive) {\n        this.setState({\n          isLoading: false\n        });\n      }\n    });\n  }\n\n  updatePatientSpecial(event) {\n    console.log(\"special field to update:  \", event.target.value);\n    const field = event.target.value;\n    this.setState({\n      patientUpdateField: field\n    });\n  }\n\n  componentWillUnmount() {\n    this.isActive = false;\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4598\n      },\n      __self: this\n    }, this.state.showAttachment === true && React.createElement(AttachmentViewer, {\n      onCloseAttachmentView: this.closeAttachmentView,\n      attachmentFile: this.state.showThisAttachmentFile,\n      attachmentType: this.state.showThisAttachmentType,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4600\n      },\n      __self: this\n    }), this.state.createPdf === true && React.createElement(PdfCreator, {\n      pdfData: this.state.pdfData,\n      onClosePdfCreator: this.closePdfCreator,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4608\n      },\n      __self: this\n    }), React.createElement(Accordion, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4614\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4616\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 3,\n      className: \"MasterCol1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4617\n      },\n      __self: this\n    }, React.createElement(AlertBox, {\n      authUserId: this.context.userId,\n      alert: this.state.userAlert,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4619\n      },\n      __self: this\n    }), React.createElement(SidebarPage, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4623\n      },\n      __self: this\n    })), React.createElement(Col, {\n      md: 9,\n      className: \"MasterCol2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4626\n      },\n      __self: this\n    }, React.createElement(Container, {\n      className: \"containerCombinedDetail\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4627\n      },\n      __self: this\n    }, React.createElement(Tab.Container, {\n      id: \"left-tabs-example\",\n      defaultActiveKey: \"patientDetail\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4629\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4630\n      },\n      __self: this\n    }, React.createElement(Col, {\n      sm: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4631\n      },\n      __self: this\n    }, React.createElement(Nav, {\n      variant: \"pills\",\n      className: \"flex-column\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4632\n      },\n      __self: this\n    }, React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4633\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"MasterList\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4634\n      },\n      __self: this\n    }, \"MASTER LIST\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4636\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientDetail\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4637\n      },\n      __self: this\n    }, \"Selected\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4639\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientCreate\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4640\n      },\n      __self: this\n    }, \"Create New\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4642\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"disabled\",\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4643\n      },\n      __self: this\n    }, \"Edit:\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4645\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientEditDemographics\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4646\n      },\n      __self: this\n    }, \"Demographics\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4648\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientEditField\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4649\n      },\n      __self: this\n    }, \"Single Field\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4651\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"disabled\",\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4652\n      },\n      __self: this\n    }, \"Add:\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4654\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientAddVisit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4655\n      },\n      __self: this\n    }, \"Visit\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4657\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientEditConsultant\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4658\n      },\n      __self: this\n    }, \"Consultant\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4660\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientEditInsurance\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4661\n      },\n      __self: this\n    }, \"Insurance\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4663\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientEditNextOfKin\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4664\n      },\n      __self: this\n    }, \"Next of Kin\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4666\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientEditComplaint\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4667\n      },\n      __self: this\n    }, \"History\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4669\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientEditSurvey\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4670\n      },\n      __self: this\n    }, \"Survey\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4672\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientEditSystematicInquiry\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4673\n      },\n      __self: this\n    }, \"Systematic Inquiry\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4675\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientEditVitals\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4676\n      },\n      __self: this\n    }, \"Vitals\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4678\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientEditExamination\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4679\n      },\n      __self: this\n    }, \"Examination\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4681\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientEditHistory\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4682\n      },\n      __self: this\n    }, \"Past History\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4684\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientEditAllergies\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4685\n      },\n      __self: this\n    }, \"Allergies\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4687\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientEditMedication\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4688\n      },\n      __self: this\n    }, \"Medication\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4690\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientEditInvestigation\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4691\n      },\n      __self: this\n    }, \"Investigation\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4693\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientEditDiagnosis\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4694\n      },\n      __self: this\n    }, \"Diagnosis\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4696\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientEditTreatment\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4697\n      },\n      __self: this\n    }, \"Treatment\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4699\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientEditBilling\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4700\n      },\n      __self: this\n    }, \"Billing\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4702\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientEditVigilance\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4703\n      },\n      __self: this\n    }, \"Vigilance\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4705\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientEditAttachment\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4706\n      },\n      __self: this\n    }, \"Attachment\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4708\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientEditNote\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4709\n      },\n      __self: this\n    }, \"Note\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4711\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientEditTag\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4712\n      },\n      __self: this\n    }, \"Tag\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4715\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"disabled\",\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4716\n      },\n      __self: this\n    }, \"Search:\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4718\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"SearchInput\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4719\n      },\n      __self: this\n    }, \"Input\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4721\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"SearchResult\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4722\n      },\n      __self: this\n    }, \"Search\")))), React.createElement(Col, {\n      sm: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4726\n      },\n      __self: this\n    }, React.createElement(Tab.Content, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4727\n      },\n      __self: this\n    }, React.createElement(Tab.Pane, {\n      eventKey: \"patientDetail\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4728\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4731\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-danger\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4737\n      },\n      __self: this\n    }, \"Don't forget to select someone from the Staff page before editing Patient Consultant information !!!\"), this.state.isLoading === false && this.state.selectedPatient !== null && React.createElement(PatientDetail, {\n      authUserId: this.context.userId,\n      token: this.context.token,\n      patient: this.state.selectedPatient,\n      onEdit: this.startUpdatePatientHandler,\n      canDelete: this.state.canDelete,\n      onDelete: this.modalDeleteHandler,\n      onGetVisit: this.getPatientVisit,\n      visit: this.state.visit,\n      selectedVisit: this.state.selectedVisit,\n      fetchUsers: this.fetchUsers,\n      appointmentDelete: this.deletePatientAppointmentItem,\n      consultantDelete: this.deletePatientConsultantItem,\n      insuranceDelete: this.deletePatientInsuranceItem,\n      nextOfKinDelete: this.deletePatientNextOfKinItem,\n      complaintDelete: this.deletePatientComplaintItem,\n      surveyDelete: this.deletePatientSurveyItem,\n      systematicInquiryDelete: this.deletePatientSystematicInquiryItem,\n      vitalsDelete: this.deletePatientVitalsItem,\n      examinationDelete: this.deletePatientExaminationItem,\n      historyDelete: this.deletePatientHistoryItem,\n      allergiesDelete: this.deletePatientAllergiesItem,\n      medicationDelete: this.deletePatientMedicationItem,\n      investigationDelete: this.deletePatientInvestigationItem,\n      diagnosisDelete: this.deletePatientDiagnosisItem,\n      treatmentDelete: this.deletePatientTreatmentItem,\n      billingDelete: this.deletePatientBillingItem,\n      vigilanceDelete: this.deletePatientVigilanceItem,\n      attachmentDelete: this.deletePatientAttachmentItem,\n      noteDelete: this.deletePatientNoteItem,\n      tagDelete: this.deletePatientTagItem,\n      onViewAttachment: this.onViewAttachment,\n      onCreatePdf: this.createPdf,\n      onGetVisitList: this.getVisitList,\n      visitList: this.state.visitList,\n      onSelectVisit: this.selectVisit,\n      onCloseVisit: this.closeVisit,\n      onSortVisitListAsc: this.getVisitListAsc,\n      onSortVisitListDesc: this.getVisitListDesc,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4743\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientCreate\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4786\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"outline-primary\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.startCreatePatientHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4787\n      },\n      __self: this\n    }, \"Create NEW Patient Profile\"), this.state.creating && React.createElement(CreatePatientForm, {\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmHandler,\n      confirmText: \"Confirm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4790\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientAddVisit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4800\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4802\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && this.state.newVisit !== true && React.createElement(Button, {\n      variant: \"outline-primary\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.startCreateVisitHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4808\n      },\n      __self: this\n    }, \"Add NEW Visit\"), this.state.selectedPatient !== null && this.state.newVisit === true && React.createElement(Accordion, {\n      defaultActiveKey: \"0\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4813\n      },\n      __self: this\n    }, React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4814\n      },\n      __self: this\n    }, React.createElement(Card.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4815\n      },\n      __self: this\n    }, React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: \"0\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4816\n      },\n      __self: this\n    }, \"Guide:\")), React.createElement(Accordion.Collapse, {\n      eventKey: \"0\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4820\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4821\n      },\n      __self: this\n    }, React.createElement(Card.Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4822\n      },\n      __self: this\n    }, \"To create a NEW Patient Visit, fill in the forms below.\"), React.createElement(Card.Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4826\n      },\n      __self: this\n    }, \"Everytime you submit a form with new info, a new item is added to the current Patient visit.\"), React.createElement(Card.Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4830\n      },\n      __self: this\n    }, \"When you are done with a section click the GREEN Done adding Complaints, Vitals etc and continue to the next form.\"), React.createElement(Card.Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4834\n      },\n      __self: this\n    }, \"Once you have submitted all the information required scroll to the bottom and click the green button.\")))), React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4840\n      },\n      __self: this\n    }, React.createElement(Card.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4841\n      },\n      __self: this\n    }, React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: \"1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4842\n      },\n      __self: this\n    }, \"Consultant\")), React.createElement(Accordion.Collapse, {\n      eventKey: \"1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4846\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4847\n      },\n      __self: this\n    }, \"Add Consultant form:\", this.state.createVisitChecklist.consultant === true && React.createElement(Button, {\n      variant: \"warning\",\n      size: \"lg\",\n      className: \"formButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4851\n      },\n      __self: this\n    }, \"Consultant for this Visit has already been added!!\"), this.state.createVisitChecklist.consultant === false && this.context.selectedUser === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4858\n      },\n      __self: this\n    }, \"Select someone from the Staff page\"), this.state.createVisitChecklist.consultant === false && this.context.selectedUser !== null && React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4864\n      },\n      __self: this\n    }, React.createElement(Card.Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4865\n      },\n      __self: this\n    }, \"Add Consultant: \", this.context.selectedUser.name, \"  ...\"), React.createElement(Card.Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4866\n      },\n      __self: this\n    }, \" To Paitient: \", this.state.selectedPatient.name, \" ??\")), this.state.createVisitChecklist.consultant === false && this.context.selectedUser !== null && React.createElement(UpdatePatientConsultantForm, {\n      authUserId: this.context.userId,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientConsultantHandler,\n      confirmText: \"Confirm\",\n      consultant: this.context.selectedUser,\n      visit: true,\n      onCreateVisitChecklistUpdate: this.createVisitChecklistUpdate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4872\n      },\n      __self: this\n    })))), React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4886\n      },\n      __self: this\n    }, React.createElement(Card.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4887\n      },\n      __self: this\n    }, React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: \"2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4888\n      },\n      __self: this\n    }, \"Complaint\")), React.createElement(Accordion.Collapse, {\n      eventKey: \"2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4892\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4893\n      },\n      __self: this\n    }, \"Add Complaint form:\", this.state.createVisitChecklist.complaint === true && React.createElement(Button, {\n      variant: \"warning\",\n      size: \"lg\",\n      className: \"formButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4897\n      },\n      __self: this\n    }, \"Complaint for this Visit has already been added!!\"), this.state.createVisitChecklist.complaint === false && React.createElement(UpdatePatientComplaintForm, {\n      authUserId: this.context.userId,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientComplaintHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      visit: true,\n      onCreateVisitChecklistUpdate: this.createVisitChecklistUpdate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4902\n      },\n      __self: this\n    })))), React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4916\n      },\n      __self: this\n    }, React.createElement(Card.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4917\n      },\n      __self: this\n    }, React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: \"3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4918\n      },\n      __self: this\n    }, \"Vitals\")), React.createElement(Accordion.Collapse, {\n      eventKey: \"3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4922\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4923\n      },\n      __self: this\n    }, \"Add Vitals form:\", this.state.createVisitChecklist.vitals === true && React.createElement(Button, {\n      variant: \"warning\",\n      size: \"lg\",\n      className: \"formButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4927\n      },\n      __self: this\n    }, \"Vitals for this Visit have already been added!!\"), this.state.createVisitChecklist.vitals === false && React.createElement(UpdatePatientVitalsForm, {\n      authUserId: this.context.userId,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientVitalsHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      visit: true,\n      onCreateVisitChecklistUpdate: this.createVisitChecklistUpdate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4932\n      },\n      __self: this\n    })))), React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4946\n      },\n      __self: this\n    }, React.createElement(Card.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4947\n      },\n      __self: this\n    }, React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: \"4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4948\n      },\n      __self: this\n    }, \"Examination\")), React.createElement(Accordion.Collapse, {\n      eventKey: \"4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4952\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4953\n      },\n      __self: this\n    }, \"Add Examination form:\", this.state.createVisitChecklist.examination === true && React.createElement(Button, {\n      variant: \"warning\",\n      size: \"lg\",\n      className: \"formButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4957\n      },\n      __self: this\n    }, \"Examination for this Visit has already been added!!\"), this.state.createVisitChecklist.examination === false && React.createElement(UpdatePatientExaminationForm, {\n      authUserId: this.context.userId,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientExaminationHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      visit: true,\n      onCreateVisitChecklistUpdate: this.createVisitChecklistUpdate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4962\n      },\n      __self: this\n    })))), React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4976\n      },\n      __self: this\n    }, React.createElement(Card.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4977\n      },\n      __self: this\n    }, React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: \"5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4978\n      },\n      __self: this\n    }, \"Survey\")), React.createElement(Accordion.Collapse, {\n      eventKey: \"5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4982\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4983\n      },\n      __self: this\n    }, \"Add Survey form:\", this.state.createVisitChecklist.survey === true && React.createElement(Button, {\n      variant: \"warning\",\n      size: \"lg\",\n      className: \"formButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4986\n      },\n      __self: this\n    }, \"Survey for this Visit has already been added!!\"), this.state.createVisitChecklist.survey === false && React.createElement(UpdatePatientSurveyForm, {\n      authUserId: this.context.userId,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientSurveyHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      visit: true,\n      onCreateVisitChecklistUpdate: this.createVisitChecklistUpdate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4991\n      },\n      __self: this\n    })))), React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5005\n      },\n      __self: this\n    }, React.createElement(Card.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5006\n      },\n      __self: this\n    }, React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: \"22\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5007\n      },\n      __self: this\n    }, \"SystematicInquiry\")), React.createElement(Accordion.Collapse, {\n      eventKey: \"22\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5011\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5012\n      },\n      __self: this\n    }, \"Add Systematic Inquiry form:\", this.state.createVisitChecklist.systematicInquiry === true && React.createElement(Button, {\n      variant: \"warning\",\n      size: \"lg\",\n      className: \"formButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5015\n      },\n      __self: this\n    }, \"Systematic Inquiry for this Visit has already been added!!\"), this.state.createVisitChecklist.systematicInquiry === false && React.createElement(UpdatePatientSystematicInquiryForm, {\n      authUserId: this.context.userId,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientSystematicInquiryHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      visit: true,\n      onCreateVisitChecklistUpdate: this.createVisitChecklistUpdate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5020\n      },\n      __self: this\n    })))), React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5034\n      },\n      __self: this\n    }, React.createElement(Card.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5035\n      },\n      __self: this\n    }, React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: \"6\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5036\n      },\n      __self: this\n    }, \"Investigation\")), React.createElement(Accordion.Collapse, {\n      eventKey: \"6\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5040\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5041\n      },\n      __self: this\n    }, \"Add Investigation form:\", this.state.createVisitChecklist.investigation === true && React.createElement(Button, {\n      variant: \"warning\",\n      size: \"lg\",\n      className: \"formButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5044\n      },\n      __self: this\n    }, \"Investigation for this Visit has already been added!!\"), this.state.createVisitChecklist.investigation === false && React.createElement(UpdatePatientInvestigationForm, {\n      authUserId: this.context.userId,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientInvestigationHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      visit: true,\n      onCreateVisitChecklistUpdate: this.createVisitChecklistUpdate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5049\n      },\n      __self: this\n    })))), React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5063\n      },\n      __self: this\n    }, React.createElement(Card.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5064\n      },\n      __self: this\n    }, React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: \"7\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5065\n      },\n      __self: this\n    }, \"Diagnosis\")), React.createElement(Accordion.Collapse, {\n      eventKey: \"7\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5069\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5070\n      },\n      __self: this\n    }, \"Add Diagnosis form:\", this.state.createVisitChecklist.diagnosis === true && React.createElement(Button, {\n      variant: \"warning\",\n      size: \"lg\",\n      className: \"formButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5073\n      },\n      __self: this\n    }, \"Diagnosis for this Visit has already been added!!\"), this.state.createVisitChecklist.diagnosis === false && React.createElement(UpdatePatientDiagnosisForm, {\n      authUserId: this.context.userId,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientDiagnosisHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      visit: true,\n      onCreateVisitChecklistUpdate: this.createVisitChecklistUpdate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5078\n      },\n      __self: this\n    })))), React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5092\n      },\n      __self: this\n    }, React.createElement(Card.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5093\n      },\n      __self: this\n    }, React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: \"8\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5094\n      },\n      __self: this\n    }, \"Treatment\")), React.createElement(Accordion.Collapse, {\n      eventKey: \"8\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5098\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5099\n      },\n      __self: this\n    }, \"Add Treatment form:\", this.state.createVisitChecklist.treatment === true && React.createElement(Button, {\n      variant: \"warning\",\n      size: \"lg\",\n      className: \"formButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5102\n      },\n      __self: this\n    }, \"Treatment for this Visit has already been added!!\"), this.state.createVisitChecklist.treatment === false && React.createElement(UpdatePatientTreatmentForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientTreatmentHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      visit: true,\n      onCreateVisitChecklistUpdate: this.createVisitChecklistUpdate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5107\n      },\n      __self: this\n    })))), React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5122\n      },\n      __self: this\n    }, React.createElement(Card.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5123\n      },\n      __self: this\n    }, React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: \"9\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5124\n      },\n      __self: this\n    }, \"Billing\")), React.createElement(Accordion.Collapse, {\n      eventKey: \"9\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5128\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5129\n      },\n      __self: this\n    }, \"Add Billing form:\", this.state.createVisitChecklist.billing === true && React.createElement(Button, {\n      variant: \"warning\",\n      size: \"lg\",\n      className: \"formButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5133\n      },\n      __self: this\n    }, \"Billing for this Visit has already been added!!\"), this.state.createVisitChecklist.billing === false && React.createElement(UpdatePatientBillingForm, {\n      authUserId: this.context.userId,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientBillingHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      visit: true,\n      onCreateVisitChecklistUpdate: this.createVisitChecklistUpdate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5138\n      },\n      __self: this\n    })))), React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5152\n      },\n      __self: this\n    }, React.createElement(Card.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5153\n      },\n      __self: this\n    }, React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: \"23\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5154\n      },\n      __self: this\n    }, \"Vigilance\")), React.createElement(Accordion.Collapse, {\n      eventKey: \"23\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5158\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5159\n      },\n      __self: this\n    }, \"Add Vigilance form:\", this.state.createVisitChecklist.vigilance === true && React.createElement(Button, {\n      variant: \"warning\",\n      size: \"lg\",\n      className: \"formButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5163\n      },\n      __self: this\n    }, \"Vigilance for this Visit has already been added!!\"), this.state.createVisitChecklist.vigilance === false && React.createElement(UpdatePatientVigilanceForm, {\n      authUserId: this.context.userId,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientVigilanceHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      visit: true,\n      onCreateVisitChecklistUpdate: this.createVisitChecklistUpdate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5168\n      },\n      __self: this\n    })))), React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5182\n      },\n      __self: this\n    }, React.createElement(Card.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5183\n      },\n      __self: this\n    }, React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: \"10\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5184\n      },\n      __self: this\n    }, \"Finished ?\")), React.createElement(Accordion.Collapse, {\n      eventKey: \"10\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5188\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5189\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"success\",\n      className: \"formButton\",\n      onClick: this.newVisitComplete,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5190\n      },\n      __self: this\n    }, \"Done creating Visit\")))))), React.createElement(Tab.Pane, {\n      eventKey: \"patientEditDemographics\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5200\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5202\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.startUpdatePatientHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5207\n      },\n      __self: this\n    }, \"Edit Demographics\"), this.state.updating && this.state.selectedPatient !== null && React.createElement(UpdatePatientForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmUpdateHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5212\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientEditField\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5224\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5226\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.startUpdatePatientHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5231\n      },\n      __self: this\n    }, \"Edit a Single Field\"), this.state.updating && this.state.selectedPatient !== null && React.createElement(UpdatePatientFieldForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmUpdateFieldHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5236\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientEditConsultant\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5248\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5250\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"consultant\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5255\n      },\n      __self: this\n    }, \"Add a Consultant\"), this.state.patientUpdateField === 'consultant' && this.state.selectedPatient !== null && this.context.selectedUser === null && React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5261\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5262\n      },\n      __self: this\n    }, \"Select someone from the Staff page\")), this.state.patientUpdateField === 'consultant' && this.state.selectedPatient !== null && React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5270\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5271\n      },\n      __self: this\n    }, \"Add Consultant: \", this.context.selectedUser.name, \"  ...\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5272\n      },\n      __self: this\n    }, \" To Paitient: \", this.state.selectedPatient.name, \" ??\")), this.state.patientUpdateField === 'consultant' && this.state.selectedPatient !== null && React.createElement(UpdatePatientConsultantForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientConsultantHandler,\n      confirmText: \"Confirm\",\n      consultant: this.context.selectedUser,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5279\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientEditInsurance\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5291\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5293\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"insurance\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5298\n      },\n      __self: this\n    }, \"Add Insurance\"), this.state.patientUpdateField === 'insurance' && this.state.selectedPatient !== null && React.createElement(UpdatePatientInsuranceForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientInsuranceHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5303\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientEditNextOfKin\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5315\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5317\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"nextOfKin\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5322\n      },\n      __self: this\n    }, \"Add NextOfKin\"), this.state.patientUpdateField === 'nextOfKin' && this.state.selectedPatient !== null && React.createElement(UpdatePatientNextOfKinForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientNextOfKinHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5327\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientEditComplaint\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5339\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5341\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"complaint\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5346\n      },\n      __self: this\n    }, \"Add History\"), this.state.patientUpdateField === 'complaint' && this.state.selectedPatient !== null && React.createElement(UpdatePatientComplaintForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientComplaintHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5351\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientEditSurvey\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5363\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5365\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"survey\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5370\n      },\n      __self: this\n    }, \"Add Survey\"), this.state.patientUpdateField === 'survey' && this.state.selectedPatient !== null && React.createElement(UpdatePatientSurveyForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientSurveyHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5375\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientEditSystematicInquiry\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5387\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5389\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"systematicInquiry\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5394\n      },\n      __self: this\n    }, \"Add Systematic Inquiry\"), this.state.patientUpdateField === 'systematicInquiry' && this.state.selectedPatient !== null && React.createElement(UpdatePatientSystematicInquiryForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientSystematicInquiryHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5399\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientEditVitals\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5411\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5413\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"vitals\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5418\n      },\n      __self: this\n    }, \"Add Vitals\"), this.state.patientUpdateField === 'vitals' && this.state.selectedPatient !== null && React.createElement(UpdatePatientVitalsForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientVitalsHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5423\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientEditExamination\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5435\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5437\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"examintion\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5442\n      },\n      __self: this\n    }, \"Add Examination\"), this.state.patientUpdateField === 'examintion' && this.state.selectedPatient !== null && React.createElement(UpdatePatientExaminationForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientExaminationHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5447\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientEditHistory\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5459\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5461\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"history\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5466\n      },\n      __self: this\n    }, \"Add Past History\"), this.state.patientUpdateField === 'history' && this.state.selectedPatient !== null && React.createElement(UpdatePatientHistoryForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientHistoryHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5471\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientEditAllergies\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5483\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5485\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"allergies\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5490\n      },\n      __self: this\n    }, \"Add Allergies\"), this.state.patientUpdateField === 'allergies' && this.state.selectedPatient !== null && React.createElement(UpdatePatientAllergiesForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientAllergiesHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5495\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientEditMedication\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5507\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5509\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"medication\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5514\n      },\n      __self: this\n    }, \"Add Medication\"), this.state.patientUpdateField === 'medication' && this.state.selectedPatient !== null && React.createElement(UpdatePatientMedicationForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientMedicationHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5519\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientEditInvestigation\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5531\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5533\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"investigation\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5538\n      },\n      __self: this\n    }, \"Add Investigation\"), this.state.patientUpdateField === 'investigation' && this.state.selectedPatient !== null && React.createElement(UpdatePatientInvestigationForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientInvestigationHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5543\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientEditDiagnosis\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5555\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5557\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"diagnosis\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5562\n      },\n      __self: this\n    }, \"Add Diagnosis\"), this.state.patientUpdateField === 'diagnosis' && this.state.selectedPatient !== null && React.createElement(UpdatePatientDiagnosisForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientDiagnosisHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5567\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientEditTreatment\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5579\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5581\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"treatment\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5586\n      },\n      __self: this\n    }, \"Add Treatment\"), this.state.patientUpdateField === 'treatment' && this.state.selectedPatient !== null && React.createElement(UpdatePatientTreatmentForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientTreatmentHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5591\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientEditBilling\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5603\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5605\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"billing\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5610\n      },\n      __self: this\n    }, \"Add Billing\"), this.state.patientUpdateField === 'billing' && this.state.selectedPatient !== null && React.createElement(UpdatePatientBillingForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientBillingHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5615\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientEditVigilance\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5627\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5629\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"vigilance\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5634\n      },\n      __self: this\n    }, \"Add Vigilance\"), this.state.patientUpdateField === 'vigilance' && this.state.selectedPatient !== null && React.createElement(UpdatePatientVigilanceForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientVigilanceHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5639\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientEditAttachment\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5651\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5653\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"attachment\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5658\n      },\n      __self: this\n    }, \"Add Attachment\"), this.state.patientUpdateField === 'attachment' && this.state.selectedPatient !== null && React.createElement(UpdatePatientAttachmentForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientAttachmentHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5663\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientEditNote\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5675\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5677\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"notes\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5682\n      },\n      __self: this\n    }, \"Add Note\"), this.state.patientUpdateField === 'notes' && this.state.selectedPatient !== null && React.createElement(UpdatePatientNoteForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientNoteHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5687\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientEditTag\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5699\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5701\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"tags\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5706\n      },\n      __self: this\n    }, \"Add Tag\"), this.state.patientUpdateField === 'tags' && this.state.selectedPatient !== null && React.createElement(UpdatePatientTagForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientTagHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5711\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"MasterList\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5723\n      },\n      __self: this\n    }, React.createElement(Container, {\n      className: \"containerUserMasterList\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5724\n      },\n      __self: this\n    }, React.createElement(Row, {\n      className: \"searchListRow\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5725\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"primary\",\n      size: \"sm\",\n      onClick: this.fetchPatientsAsc,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5726\n      },\n      __self: this\n    }, \"Sort Asc\"), React.createElement(Button, {\n      variant: \"info\",\n      size: \"sm\",\n      onClick: this.fetchPatientsDesc,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5729\n      },\n      __self: this\n    }, \"Sort Desc\"), this.state.isLoading ? React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5733\n      },\n      __self: this\n    }) : React.createElement(PatientList, {\n      patients: this.state.patients,\n      authUserId: this.context.userId,\n      onViewDetail: this.showDetailHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5735\n      },\n      __self: this\n    })))), React.createElement(Tab.Pane, {\n      eventKey: \"SearchInput\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5745\n      },\n      __self: this\n    }, React.createElement(Container, {\n      className: \"containerSearchUserInput\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5746\n      },\n      __self: this\n    }, this.context.token && React.createElement(Row, {\n      className: \"searchUserRowAdd\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5748\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"primary\",\n      onClick: this.startSearchPatientHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5749\n      },\n      __self: this\n    }, \"Search\")), React.createElement(Row, {\n      className: \"searchUserRowForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5753\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 10,\n      className: \"searchUserColForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5754\n      },\n      __self: this\n    }, React.createElement(Tabs, {\n      defaultActiveKey: \"Field\",\n      id: \"uncontrolled-tab-example\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5755\n      },\n      __self: this\n    }, React.createElement(Tab, {\n      eventKey: \"Search\",\n      title: \"Search:\",\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5756\n      },\n      __self: this\n    }), React.createElement(Tab, {\n      eventKey: \"Field\",\n      title: \"Search by Field:\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5758\n      },\n      __self: this\n    }, this.state.searching !== true && React.createElement(Button, {\n      variant: \"outline-warning\",\n      className: \"confirmEditButton\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5760\n      },\n      __self: this\n    }, \"Click the 'Search' Button start\"), this.state.searching === true && React.createElement(SearchPatientForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmSearchHandler,\n      confirmText: \"Search\",\n      patient: this.context.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5765\n      },\n      __self: this\n    })), React.createElement(Tab, {\n      eventKey: \"Id\",\n      title: \"Search by ID:\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5776\n      },\n      __self: this\n    }, this.state.searching !== true && React.createElement(Button, {\n      variant: \"outline-warning\",\n      className: \"confirmEditButton\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5778\n      },\n      __self: this\n    }, \"Click the 'Search' Button start\"), this.state.searching === true && React.createElement(SearchPatientIdForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmSearchIdHandler,\n      confirmText: \"Search\",\n      patient: this.context.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5783\n      },\n      __self: this\n    })), React.createElement(Tab, {\n      eventKey: \"Name\",\n      title: \"Search by Name:\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5795\n      },\n      __self: this\n    }, this.state.searching !== true && React.createElement(Button, {\n      variant: \"outline-warning\",\n      className: \"confirmEditButton\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5797\n      },\n      __self: this\n    }, \"Click the 'Search' Button start\"), this.state.searching === true && React.createElement(SearchPatientNameForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmSearchNameHandler,\n      confirmText: \"Search\",\n      patient: this.context.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5802\n      },\n      __self: this\n    }))))))), React.createElement(Tab.Pane, {\n      eventKey: \"SearchResult\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5819\n      },\n      __self: this\n    }, React.createElement(Container, {\n      className: \"containerSearchUserResults\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5820\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5821\n      },\n      __self: this\n    }, React.createElement(Card, {\n      className: \"searchCard\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5822\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      className: \"searchCardBody\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5823\n      },\n      __self: this\n    }, React.createElement(Card.Title, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5824\n      },\n      __self: this\n    }, \"Your Search\"), React.createElement(Card.Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5825\n      },\n      __self: this\n    }, \"Field: \", this.state.patientSearchField), React.createElement(Card.Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5828\n      },\n      __self: this\n    }, \"Query: \", this.state.patientSearchQuery)))), React.createElement(Row, {\n      className: \"searchListRow\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5834\n      },\n      __self: this\n    }, this.state.searchPatients !== [] && React.createElement(SearchPatientList, {\n      searchPatients: this.state.searchPatients,\n      authUserId: this.context.userId,\n      onCancel: this.modalCancelHandler,\n      onViewDetail: this.showDetailHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5837\n      },\n      __self: this\n    })))))))))), React.createElement(Col, {\n      md: 3,\n      className: \"MasterCol3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5862\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nPatientsPage.contextType = AuthContext;\nexport default PatientsPage;","map":{"version":3,"sources":["/Users/pedrojacob/Downloads/AMR/websites/office_records/ENT_EMR/frontend/src/pages/Patients.js"],"names":["React","Component","S3","Container","Row","Col","Button","Accordion","SidebarPage","Tabs","Tab","Nav","Card","PatientList","PatientDetail","Spinner","AuthContext","SearchPatientList","SearchPatientForm","SearchPatientIdForm","SearchPatientNameForm","AlertBox","AttachmentViewer","PdfCreator","LoadingOverlay","CreatePatientForm","UpdatePatientForm","UpdatePatientFieldForm","UpdatePatientConsultantForm","UpdatePatientInsuranceForm","UpdatePatientNextOfKinForm","UpdatePatientComplaintForm","UpdatePatientSurveyForm","UpdatePatientSystematicInquiryForm","UpdatePatientVitalsForm","UpdatePatientExaminationForm","UpdatePatientHistoryForm","UpdatePatientAllergiesForm","UpdatePatientMedicationForm","UpdatePatientInvestigationForm","UpdatePatientDiagnosisForm","UpdatePatientTreatmentForm","UpdatePatientBillingForm","UpdatePatientVigilanceForm","UpdatePatientAttachmentForm","UpdatePatientNoteForm","UpdatePatientTagForm","PatientsPage","constructor","props","state","creating","updating","searching","updatingArray","deleting","patients","searchPatients","isLoading","selectedPatient","patientUpdateField","patientSearchField","patientSearchQuery","canDelete","visit","visitList","selectedVisit","newVisit","createVisitChecklist","consultant","complaint","diagnosis","examination","investigation","survey","systematicInquiry","treatment","vitals","billing","vigilance","userAlert","overlay","overlayStatus","showAttachment","showThisAttachmentFile","showThisAttachmentType","createPdf","pdfData","isActive","startCreatePatientHandler","setState","console","log","startCreateVisitHandler","startUpdatePatientHandler","startSearchPatientHandler","modalConfirmHandler","event","target","formGridName","value","userId","context","title","formGridTitle","name","dob","formGridDob","age","formGridAge","gender","formGridGender","addressNumber","formGridAddressNumber","addressStreet","formGridAddressStreet","addressTown","formGridAddressTown","addressParish","formGridAddressParish","addressPostOffice","formGridAddressPostOffice","contactPhone","formGridContactPhone","contactEmail","formGridContactEmail","registrationDate","formGridRegistrationDate","formGridRegistrationDateTodayCheckbox","checked","Date","toISOString","slice","referralDate","formGridReferralDate","formGridReferralDateTodayCheckbox","expirationDate","formGridExpirationDate","attendingPhysicianName","formGridAttendingPhysicianName","attendingPhysicianEmail","formGridAttendingPhysicianEmail","attendingPhysicianPhone","formGridAttendingPhysicianPhone","referringDoctorName","formGridReferringDoctorName","referringDoctorEmail","formGridReferringDoctorEmail","referringDoctorPhone","formGridReferringDoctorPhone","occupationRole","formGridOccupationRole","occupationEmployer","formGridOccupationEmployer","occupationEmployerContactPhone","formGridOccupationEmployerContactPhone","occupationEmployerContactEmail","formGridOccupationEmployerContactEmail","trim","length","requestBody","query","token","fetch","method","body","JSON","stringify","headers","Authorization","then","res","status","Error","json","resData","data","createPatient","responseAlert","newPatient","prevState","updatedPatients","push","catch","err","modalCancelHandler","modalConfirmUpdateHandler","selectedPatientId","_id","formGridExpirationDateTodayCheckbox","address","number","street","town","parish","postOffice","contact","phone","email","attendingPhysician","referringDoctor","occupation","role","employer","updatedPatientId","updatePatient","updatedPatient","find","e","updatedPatientPos","indexOf","slicedArray","splice","fetchPatients","modalConfirmUpdateFieldHandler","formGridField","field","formGridQuery","formGridFieldSelect","updatePatientField","updatePatientConsultantHandler","preventDefault","patientConsultantReference","selectedUser","undefined","consultantDate","formGridConsultantDate","formGridConsultantDateTodayCheckbox","updatePatientConsultant","updatePatientInsuranceHandler","formGridInsuranceCompany","insuranceCompany","insuranceNumber","formGridInsuranceNumber","insuranceExpiry","formGridInsuranceExpiry","insuranceDescription","formGridInsuranceDescription","insuranceSubscriberCompany","formGridInsuranceSubscriberCompany","insuranceSubscriberDescription","formGridInsuranceSubscriberDescription","updatePatientInsurance","updatePatientNextOfKinHandler","formGridNextOfKinName","nextOfKinName","nextOfKinPhone","formGridNextOfKinPhone","nextOfKinEmail","formGridNextOfKinEmail","updatePatientNextOfKin","updatePatientComplaintHandler","formGridComplaintTitle","complaintTitle","complaintDate","formGridComplaintDate","formGridComplaintDateTodayCheckbox","complaintDescription","formGridComplaintDescription","complaintAnamnesis","formGridComplaintAnamnesis","complaintAttachmentFormat","formGridComplaintAttachmentFormat","complaintAttachmentPath","file","_currentValue","config","bucketName","creds","s3","dirName","region","accessKeyId","secretAccessKey","ReactS3Client","newFileName","complaintAttachmentName","uploadFile","error","updatePatientComplaint","updatePatientSurveyHandler","formGridSurveyTitle","surveyDate","formGridSurveyDate","formGridSurveyDateTodayCheckbox","surveyTitle","surveyDescription","formGridSurveyDescription","surveyAttachmentFormat","formGridSurveyAttachmentFormat","surveyAttachmentPath","surveyAttachmentName","updatePatientSurvey","updatePatientSystematicInquiryHandler","formGridSystematicInquiryTitle","systematicInquiryDate","formGridSystematicInquiryDate","formGridSystematicInquiryDateTodayCheckbox","systematicInquiryTitle","systematicInquiryDescription","formGridSystematicInquiryDescription","systematicInquiryAttachmentFormat","formGridSystematicInquiryAttachmentFormat","systematicInquiryAttachmentPath","systematicInquiryAttachmentName","updatePatientSystematicInquiry","updatePatientVitalsHandler","formGridVitalsDate","vitalsDate","formGridVitalsDateTodayCheckbox","vitalsPr","formGridVitalsPr","vitalsBp1","formGridVitalsBp1","vitalsBp2","formGridVitalsBp2","vitalsRr","formGridVitalsRr","vitalsTemp","formGridVitalsTemp","vitalsPs02","formGridVitalsPs02","vitalsHeight","formGridVitalsHeight","vitalsWeight","formGridVitalsWeight","vitalsBmi","formGridVitalsBmi","vitalsUrineType","formGridVitalsUrineType","vitalsUrineValue","formGridVitalsUrineValue","updatePatientVitals","updatePatientExaminationHandler","formGridExaminationArea","examinationDate","formGridExaminationDate","formGridExaminationDateTodayCheckbox","examinationGeneral","formGridExaminationGeneral","examinationArea","formGridExaminationAreaSelect","examinationType","formGridExaminationType","examinationMeasure","formGridExaminationMeasure","examinationValue","formGridExaminationValue","examinationDescription","formGridExaminationDescription","examinationFollowUp","formGridExaminationFollowUp","examinationAttachmentFormat","formGridExaminationAttachmentFormat","examinationAttachmentPath","examinationAttachmentName","updatePatientExamination","updatePatientHistoryHandler","formGridHistoryTitle","historyType","formGridHistoryType","historyDate","formGridHistoryDate","formGridHistoryDateTodayCheckbox","historyTitle","historyDescription","formGridHistoryDescription","historyAttachmentFormat","formGridHistoryAttachmentFormat","historyAttachmentPath","historyAttachmentName","updatePatientHistory","updatePatientAllergiesHandler","formGridAllergiesTitle","allergiesTitle","allergiesType","formGridAllergiesTypeSelect","formGridAllergiesType","allergiesDescription","formGridAllergiesDescription","allergiesAttachmentFormat","formGridAllergiesAttachmentFormat","allergiesAttachmentPath","allergiesAttachmentName","updatePatientAllergies","updatePatientMedicationHandler","formGridMedicationTitle","medicationTitle","medicationType","formGridMedicationType","medicationDescription","formGridMedicationDescription","medicationAttachmentFormat","formGridMedicationAttachmentFormat","medicationAttachmentPath","medicationAttachmentName","updatePatientMedication","updatePatientInvestigationHandler","formGridInvestigationTitle","investigationDate","formGridInvestigationDate","formGridInvestigationDateTodayCheckbox","investigationTitle","investigationType","formGridInvestigationTypeSelect","formGridInvestigationType","investigationDescription","formGridInvestigationDescription","investigationAttachmentFormat","formGridInvestigationAttachmentFormat","investigationAttachmentPath","investigationAttachmentName","updatePatientInvestigation","updatePatientDiagnosisHandler","formGridDiagnosisTitle","diagnosisDate","formGridDiagnosisDate","formGridDiagnosisDateTodayCheckbox","diagnosisTitle","diagnosisType","formGridDiagnosisType","diagnosisDescription","formGridDiagnosisDescription","diagnosisAttachmentFormat","formGridDiagnosisAttachmentFormat","diagnosisAttachmentPath","diagnosisAttachmentName","updatePatientDiagnosis","updatePatientTreatmentHandler","formGridTreatmentTitle","treatmentDate","formGridTreatmentDate","formGridTreatmentDateTodayCheckbox","treatmentTitle","treatmentDescription","formGridTreatmentDescription","treatmentDose","formGridTreatmentDose","treatmentFrequency","formGridTreatmentFrequency","treatmentType","formGridTreatmentType","formGridTreatmentTypeSelect","treatmentAttachmentFormat","formGridTreatmentAttachmentFormat","treatmentAttachmentPath","treatmentAttachmentName","updatePatientTreatment","updatePatientBillingHandler","formGridBillingTitle","billingDate","formGridBillingDate","formGridBillingDateTodayCheckbox","billingTitle","billingType","formGridBillingType","billingDescription","formGridBillingDescription","billingAmount","formGridBillingAmount","billingPaid","formGridBillingPaid","billingNotes","formGridBillingNotes","billingAttachmentFormat","formGridBillingAttachmentFormat","billingAttachmentPath","billingAttachmentName","updatePatientBilling","updatePatientVigilanceHandler","formGridVigilanceDate","formGridVigilanceChronicIllnessDiabetesMedication","vigilanceDate","formGridVigilanceDateTodayCheckbox","vigilanceChronicIllnessDiabetesMedication","vigilanceChronicIllnessDiabetesTesting","formGridVigilanceChronicIllnessDiabetesTesting","vigilanceChronicIllnessDiabetesComment","formGridVigilanceChronicIllnessDiabetesComment","vigilanceChronicIllnessHbpMedication","formGridVigilanceChronicIllnessHbpMedication","vigilanceChronicIllnessHbpTesting","formGridVigilanceChronicIllnessHbpTesting","vigilanceChronicIllnessHbpComment","formGridVigilanceChronicIllnessHbpComment","vigilanceChronicIllnessDyslipidemiaMedication","formGridVigilanceChronicIllnessDyslipidemiaMedication","vigilanceChronicIllnessDyslipidemiaTesting","formGridVigilanceChronicIllnessDyslipidemiaTesting","vigilanceChronicIllnessDyslipidemiaComment","formGridVigilanceChronicIllnessDyslipidemiaComment","vigilanceChronicIllnessCadMedication","formGridVigilanceChronicIllnessCadMedication","vigilanceChronicIllnessCadTesting","formGridVigilanceChronicIllnessCadTesting","vigilanceChronicIllnessCadComment","formGridVigilanceChronicIllnessCadComment","vigilanceLifestyleWeightMedication","formGridVigilanceLifestyleWeightMedication","vigilanceLifestyleWeightTesting","formGridVigilanceLifestyleWeightTesting","vigilanceLifestyleWeightComment","formGridVigilanceLifestyleWeightComment","vigilanceLifestyleDietMedication","formGridVigilanceLifestyleDietMedication","vigilanceLifestyleDietTesting","formGridVigilanceLifestyleDietTesting","vigilanceLifestyleDietComment","formGridVigilanceLifestyleDietComment","vigilanceLifestyleSmokingMedication","formGridVigilanceLifestyleSmokingMedication","vigilanceLifestyleSmokingTesting","formGridVigilanceLifestyleSmokingTesting","vigilanceLifestyleSmokingComment","formGridVigilanceLifestyleSmokingComment","vigilanceLifestyleSubstanceAbuseMedication","formGridVigilanceLifestyleSubstanceAbuseMedication","vigilanceLifestyleSubstanceAbuseTesting","formGridVigilanceLifestyleSubstanceAbuseTesting","vigilanceLifestyleSubstanceAbuseComment","formGridVigilanceLifestyleSubstanceAbuseComment","vigilanceLifestyleExerciseMedication","formGridVigilanceLifestyleExerciseMedication","vigilanceLifestyleExerciseTesting","formGridVigilanceLifestyleExerciseTesting","vigilanceLifestyleExerciseComment","formGridVigilanceLifestyleExerciseComment","vigilanceLifestyleAllergiesMedication","formGridVigilanceLifestyleAllergiesMedication","vigilanceLifestyleAllergiesTesting","formGridVigilanceLifestyleAllergiesTesting","vigilanceLifestyleAllergiesComment","formGridVigilanceLifestyleAllergiesComment","vigilanceLifestyleAsthmaMedication","formGridVigilanceLifestyleAsthmaMedication","vigilanceLifestyleAsthmaTesting","formGridVigilanceLifestyleAsthmaTesting","vigilanceLifestyleAsthmaComment","formGridVigilanceLifestyleAsthmaComment","vigilanceScreeningBreastMedication","formGridVigilanceScreeningBreastMedication","vigilanceScreeningBreastTesting","formGridVigilanceScreeningBreastTesting","vigilanceScreeningBreastComment","formGridVigilanceScreeningBreastComment","vigilanceScreeningProstateMedication","formGridVigilanceScreeningProstateMedication","vigilanceScreeningProstateTesting","formGridVigilanceScreeningProstateTesting","vigilanceScreeningProstateComment","formGridVigilanceScreeningProstateComment","vigilanceScreeningCervixMedication","formGridVigilanceScreeningCervixMedication","vigilanceScreeningCervixTesting","formGridVigilanceScreeningCervixTesting","vigilanceScreeningCervixComment","formGridVigilanceScreeningCervixComment","vigilanceScreeningColonMedication","formGridVigilanceScreeningColonMedication","vigilanceScreeningColonTesting","formGridVigilanceScreeningColonTesting","vigilanceScreeningColonComment","formGridVigilanceScreeningColonComment","vigilanceScreeningDentalMedication","formGridVigilanceScreeningDentalMedication","vigilanceScreeningDentalTesting","formGridVigilanceScreeningDentalTesting","vigilanceScreeningDentalComment","formGridVigilanceScreeningDentalComment","vigilanceVaccinesInfluenzaMedication","formGridVigilanceVaccinesInfluenzaMedication","vigilanceVaccinesInfluenzaTesting","formGridVigilanceVaccinesInfluenzaTesting","vigilanceVaccinesInfluenzaComment","formGridVigilanceVaccinesInfluenzaComment","vigilanceVaccinesVaricellaMedication","formGridVigilanceVaccinesVaricellaMedication","vigilanceVaccinesVaricellaTesting","formGridVigilanceVaccinesVaricellaTesting","vigilanceVaccinesVaricellaComment","formGridVigilanceVaccinesVaricellaComment","vigilanceVaccinesHpvMedication","formGridVigilanceVaccinesHpvMedication","vigilanceVaccinesHpvTesting","formGridVigilanceVaccinesHpvTesting","vigilanceVaccinesHpvComment","formGridVigilanceVaccinesHpvComment","vigilanceVaccinesMmrMedication","formGridVigilanceVaccinesMmrMedication","vigilanceVaccinesMmrTesting","formGridVigilanceVaccinesMmrTesting","vigilanceVaccinesMmrComment","formGridVigilanceVaccinesMmrComment","vigilanceVaccinesTetanusMedication","formGridVigilanceVaccinesTetanusMedication","vigilanceVaccinesTetanusTesting","formGridVigilanceVaccinesTetanusTesting","vigilanceVaccinesTetanusComment","formGridVigilanceVaccinesTetanusComment","vigilanceVaccinesPneumovaxMedication","formGridVigilanceVaccinesPneumovaxMedication","vigilanceVaccinesPneumovaxTesting","formGridVigilanceVaccinesPneumovaxTesting","vigilanceVaccinesPneumovaxComment","formGridVigilanceVaccinesPneumovaxComment","vigilanceVaccinesOtherName","formGridVigilanceVaccinesOtherName","vigilanceVaccinesOtherMedication","formGridVigilanceVaccinesOtherMedication","vigilanceVaccinesOtherTesting","formGridVigilanceVaccinesOtherTesting","vigilanceVaccinesOtherComment","formGridVigilanceVaccinesOtherComment","updatePatientVigilance","updatePatientAttachmentHandler","attachmentFormat","formGridPatientAttachmentFormat","attachmentPath","attachmentName","updatePatientAttachment","updatePatientNoteHandler","formGridNote","note","updatePatientNotes","updatePatientTagHandler","formGridTag","tag","updatePatientTags","modalConfirmSearchHandler","formBasicField","formBasicQuery","formBasicFieldSelect","getPatientField","modalConfirmSearchIdHandler","patientId","formBasicId","getPatientId","modalConfirmSearchNameHandler","formBasicName","regex","RegExp","result","filter","patient","match","getPatientVisit","complaints","formBasicVisitDate","visitDate","substring","visitSurveys","surveys","x","date","substr","visitConsultants","visitComplaints","visitSystematicInquiry","visitVitals","visitExaminations","visitHistory","history","visitInvestigations","visitDiagnosis","visitTreatments","visitBilling","visitVigilance","patientName","getVisitList","selectedPatientAppointmentDateArray","selectedPatientAppointmentVisitArray","selectedPatientAppointments","appointments","map","appointmentDate","thisGetVisit","argsDate","argsPatientName","getVisitListAsc","list","sort","a","b","getVisitListDesc","fetchPatientsAsc","patientsNameAsc","fetchPatientsDesc","patientsNameDesc","modalDeleteHandler","user","deletedPatient","deletePatient","deletedPatientId","deletedPatientPos","deletePatientInsuranceItem","company","deletePatientInsurance","deletePatientAppointmentItem","deletePatientAppointment","deletePatientConsultantItem","reference","id","deletePatientConsultant","deletePatientNextOfKinItem","deletePatientNextOfKin","deletePatientComplaintItem","deletePatientComplaint","deletePatientSurveyItem","deletePatientSurvey","deletePatientSystematicInquiryItem","deletePatientSystematicInquiry","deletePatientVitalsItem","deletePatientVitals","deletePatientExaminationItem","type","deletePatientExamination","deletePatientHistoryItem","deletePatientHistory","deletePatientAllergiesItem","deletePatientAllergies","deletePatientMedicationItem","deletePatientMedication","deletePatientInvestigationItem","deletePatientInvestigation","deletePatientDiagnosisItem","deletePatientDiagnosis","deletePatientTreatmentItem","deletePatientTreatment","deletePatientBillingItem","deletePatientBilling","deletePatientVigilanceItem","deletePatientVigilance","deletePatientAttachmentItem","deletePatientAttachment","deletePatientNoteItem","deletePatientNote","deletePatientTagItem","deletePatientTag","onViewAttachment","attachment","path","format","closeAttachmentView","insurance","nextOfKin","allergies","medication","attachments","notes","tags","closePdfCreator","showDetailHandler","selectVisit","closeVisit","createVisitChecklistUpdate","newState","Object","assign","newVisitComplete","nameElRef","createRef","componentDidMount","updatePatientSpecial","componentWillUnmount","render","fetchUsers","bind","contextType"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport S3 from 'react-aws-s3';\n\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Button from 'react-bootstrap/Button';\nimport Accordion from 'react-bootstrap/Accordion';\nimport SidebarPage from './Sidebar';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\nimport Nav from 'react-bootstrap/Nav';\nimport Card from 'react-bootstrap/Card';\n\nimport PatientList from '../components/Patients/PatientList/PatientList';\nimport PatientDetail from '../components/Patients/PatientDetail';\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\nimport SearchPatientList from '../components/Patients/PatientList/SearchPatientList';\nimport SearchPatientForm from '../components/Forms/SearchPatientForm';\nimport SearchPatientIdForm from '../components/Forms/SearchPatientIdForm';\nimport SearchPatientNameForm from '../components/Forms/SearchPatientNameForm';\n\nimport AlertBox from '../components/AlertBox';\nimport AttachmentViewer from '../components/AttachmentViewer';\nimport PdfCreator from '../components/PdfCreator';\nimport LoadingOverlay from '../components/LoadingOverlay';\n\nimport CreatePatientForm from '../components/Forms/CreatePatientForm';\nimport UpdatePatientForm from '../components/Forms/UpdatePatientForm';\nimport UpdatePatientFieldForm from '../components/Forms/UpdatePatientFieldForm';\nimport UpdatePatientConsultantForm from '../components/Forms/UpdatePatientConsultantForm';\nimport UpdatePatientInsuranceForm from '../components/Forms/UpdatePatientInsuranceForm';\nimport UpdatePatientNextOfKinForm from '../components/Forms/UpdatePatientNextOfKinForm';\nimport UpdatePatientComplaintForm from '../components/Forms/UpdatePatientComplaintForm';\nimport UpdatePatientSurveyForm from '../components/Forms/UpdatePatientSurveyForm';\nimport UpdatePatientSystematicInquiryForm from '../components/Forms/UpdatePatientSystematicInquiryForm';\nimport UpdatePatientVitalsForm from '../components/Forms/UpdatePatientVitalsForm';\nimport UpdatePatientExaminationForm from '../components/Forms/UpdatePatientExaminationForm';\nimport UpdatePatientHistoryForm from '../components/Forms/UpdatePatientHistoryForm';\nimport UpdatePatientAllergiesForm from '../components/Forms/UpdatePatientAllergiesForm';\nimport UpdatePatientMedicationForm from '../components/Forms/UpdatePatientMedicationForm';\nimport UpdatePatientInvestigationForm from '../components/Forms/UpdatePatientInvestigationForm';\nimport UpdatePatientDiagnosisForm from '../components/Forms/UpdatePatientDiagnosisForm';\nimport UpdatePatientTreatmentForm from '../components/Forms/UpdatePatientTreatmentForm';\nimport UpdatePatientBillingForm from '../components/Forms/UpdatePatientBillingForm';\nimport UpdatePatientVigilanceForm from '../components/Forms/UpdatePatientVigilanceForm';\nimport UpdatePatientAttachmentForm from '../components/Forms/UpdatePatientAttachmentForm';\nimport UpdatePatientNoteForm from '../components/Forms/UpdatePatientNoteForm';\nimport UpdatePatientTagForm from '../components/Forms/UpdatePatientTagForm';\n\nimport './Users.css';\n\nclass PatientsPage extends Component {\n  state = {\n    creating: false,\n    updating: false,\n    searching: false,\n    updatingArray: false,\n    deleting: false,\n    patients: [],\n    searchPatients: [],\n    isLoading: false,\n    selectedPatient: null,\n    patientUpdateField: null,\n    patientSearchField: null,\n    patientSearchQuery: null,\n    canDelete: null,\n    visit: null,\n    visitList: [],\n    selectedVisit: null,\n    newVisit: false,\n    createVisitChecklist: {\n      consultant: false,\n      complaint: false,\n      diagnosis: false,\n      examination: false,\n      investigation: false,\n      survey: false,\n      systematicInquiry: false,\n      treatment: false,\n      vitals: false,\n      billing: false,\n      vigilance: false\n    },\n    newVisit: false,\n    userAlert: null,\n    overlay: false,\n    overlayStatus: \"test\",\n    showAttachment: false,\n    showThisAttachmentFile: null,\n    showThisAttachmentType: null,\n    createPdf: false,\n    pdfData: null,\n  };\n  isActive = true;\n\n  static contextType = AuthContext;\n\n  constructor(props) {\n    super(props);\n    this.nameElRef = React.createRef();\n  }\n\n  componentDidMount() {\n\n    if (this.context.user.name === \"Lord-of-the-Manor\"){\n      this.setState({canDelete: true})\n    }\n    this.fetchPatients();\n  }\n\n\n  startCreatePatientHandler = () => {\n    this.setState({ creating: true });\n    console.log(\"CreatePatientForm...\");\n  };\n  startCreateVisitHandler = () => {\n    this.setState({ newVisit: true });\n    console.log(\"CreateVisitForm...\");\n  };\n  startUpdatePatientHandler = () => {\n    this.setState({ updating: true, updatingArray: true });\n    console.log(\"UpdatePatientForm...\");\n  };\n  startSearchPatientHandler = () => {\n    this.setState({ searching: true });\n    console.log(\"SearchPatientForm...\");\n  };\n\n  modalConfirmHandler = (event) => {\n\n    console.log(\"CreatePatientFormData:  \", event.target.formGridName.value);\n\n    this.setState({ creating: false });\n    const userId = this.context.userId;\n\n    let title = event.target.formGridTitle.value;\n    let name = event.target.formGridName.value;\n    let dob = event.target.formGridDob.value;\n    let age = event.target.formGridAge.value;\n    let gender = event.target.formGridGender.value;\n    let addressNumber = event.target.formGridAddressNumber.value;\n    let addressStreet = event.target.formGridAddressStreet.value;\n    let addressTown = event.target.formGridAddressTown.value;\n    let addressParish = event.target.formGridAddressParish.value;\n    let addressPostOffice = event.target.formGridAddressPostOffice.value;\n    let contactPhone = event.target.formGridContactPhone.value;\n    let contactEmail = event.target.formGridContactEmail.value;\n\n    let registrationDate = event.target.formGridRegistrationDate.value;\n    if (event.target.formGridRegistrationDateTodayCheckbox.checked === true) {\n      registrationDate = new Date().toISOString().slice(0,10);\n    }\n    let referralDate = event.target.formGridReferralDate.value;\n    if (event.target.formGridReferralDateTodayCheckbox.checked === true) {\n      referralDate = new Date().toISOString().slice(0,10);\n    }\n\n    let expirationDate = event.target.formGridExpirationDate.value;\n    let attendingPhysicianName = event.target.formGridAttendingPhysicianName.value;\n    let attendingPhysicianEmail = event.target.formGridAttendingPhysicianEmail.value;\n    let attendingPhysicianPhone = event.target.formGridAttendingPhysicianPhone.value;\n    let referringDoctorName = event.target.formGridReferringDoctorName.value;\n    let referringDoctorEmail = event.target.formGridReferringDoctorEmail.value;\n    let referringDoctorPhone = event.target.formGridReferringDoctorPhone.value;\n    let occupationRole = event.target.formGridOccupationRole.value;\n    let occupationEmployer = event.target.formGridOccupationEmployer.value;\n    let occupationEmployerContactPhone = event.target.formGridOccupationEmployerContactPhone.value;\n    let occupationEmployerContactEmail = event.target.formGridOccupationEmployerContactEmail.value;\n\n\n    if (\n      name.trim().length === 0 ||\n      // title.trim().length === 0 ||\n      // name.trim().length === 0 ||\n      // dob.trim().length === 0 ||\n      age.trim().length === 0 ||\n      // gender.trim().length === 0 ||\n      addressNumber.trim().length === 0 ||\n      addressStreet.trim().length === 0 ||\n      // addressTown.trim().length === 0 ||\n      // addressParish.trim().length === 0 ||\n      // addressPostOffice.trim().length === 0 ||\n      contactPhone.trim().length === 0 ||\n      // contactEmail.trim().length === 0 ||\n      registrationDate.trim().length === 0\n      // referralDate.trim().length === 0 ||\n      // expirationDate.trim().length === 0 ||\n      // attendingPhysicianName.trim().length === 0 ||\n      // attendingPhysicianEmail.trim().length === 0 ||\n      // attendingPhysicianPhone.trim().length === 0 ||\n      // referringDoctorName.trim().length === 0 ||\n      // referringDoctorEmail.trim().length === 0 ||\n      // referringDoctorPhone.trim().length === 0 ||\n      // occupationRole.trim().length === 0 ||\n      // occupationEmployer.trim().length === 0 ||\n      // occupationEmployerContactPhone.trim().length === 0 ||\n      // occupationEmployerContactEmail.trim().length === 0\n\n    ) {\n      console.log(\"patient must have at least: Name, Age, Contact Number, Street Name & Number and Registration Date!!!...Please try again...\");\n      this.setState({userAlert: \"patient must have at least: Name, Age, Contact Number, Street Name & Number and Registration Date!!!...Please try again...\"});\n      return;\n    }\n\n    console.log(`\n      creating patient...\n      title: ${title},\n      name: ${name},\n      dob: ${dob},\n      age: ${age},\n      gender: ${gender},\n      addressNumber: ${addressNumber},\n      addressStreet: ${addressStreet},\n      addressTown: ${addressTown},\n      addressParish: ${addressParish},\n      addressPostOffice: ${addressPostOffice},\n      contactPhone: ${contactPhone},\n      contactEmail: ${contactEmail},\n      registrationDate: ${registrationDate},\n      referralDate: ${referralDate},\n      expirationDate: ${expirationDate},\n      attendingPhysicianName: ${attendingPhysicianName},\n      attendingPhysicianEmail: ${attendingPhysicianEmail},\n      attendingPhysicianPhone: ${attendingPhysicianPhone},\n      referringDoctorName: ${referringDoctorName},\n      referringDoctorEmail: ${referringDoctorEmail},\n      referringDoctorPhone: ${referringDoctorPhone},\n      occupationRole: ${occupationRole},\n      occupationEmployer: ${occupationEmployer},\n      occupationEmployerContactPhone: ${occupationEmployerContactPhone},\n      occupationEmployerContactEmail: ${occupationEmployerContactEmail},\n      `);\n\n    const requestBody = {\n      query: `\n        mutation {createPatient(userId:\"${userId}\", patientInput:{title:\"${title}\",name:\"${name}\",dob:\"${dob}\",age:${age},gender:\"${gender}\",addressNumber:${addressNumber},addressStreet:\"${addressStreet}\",addressTown:\"${addressTown}\",addressParish:\"${addressParish}\",addressPostOffice:\"${addressPostOffice}\",contactPhone:\"${contactPhone}\",contactEmail:\"${contactEmail}\",registrationDate:\"${registrationDate}\",referralDate:\"${referralDate}\",expirationDate:\"${expirationDate}\",referringDoctorName:\"${referringDoctorName}\",referringDoctorEmail:\"${referringDoctorEmail}\",referringDoctorPhone:\"${referringDoctorPhone}\",attendingPhysicianName:\"${attendingPhysicianName}\",attendingPhysicianEmail:\"${attendingPhysicianEmail}\",attendingPhysicianPhone:\"${attendingPhysicianPhone}\",occupationRole:\"${occupationRole}\",occupationEmployer:\"${occupationEmployer}\",occupationEmployerContactPhone:\"${occupationEmployerContactPhone}\",occupationEmployerContactEmail:\"${occupationEmployerContactEmail}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n        `};\n\n    const token = this.context.token;\n\n    // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(`\n          response data:\n          ${JSON.stringify(resData.data.createPatient)}\n          `);\n          const responseAlert = JSON.stringify(resData.data).slice(2,15);\n          this.setState({userAlert: responseAlert});\n\n        const newPatient = resData.data.createPatient;\n        this.setState(prevState => {\n          const updatedPatients = [...prevState.patients];\n          updatedPatients.push(newPatient);\n\n          return { patients: updatedPatients };\n        });\n\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n  };\n\n  modalCancelHandler = () => {\n    this.setState({ creating: false, updating: false });\n  };\n\n\n  modalConfirmUpdateHandler = (event) => {\n\n    // if(this.context.user.role !== 'admin') {\n    //   console.log(\"Not the Admin! No edit permission!!\");\n    // }\n\n    const userId = this.context.userId;\n    const selectedPatientId = this.context.selectedPatient._id;\n\n    console.log(\"UpdatePatientFormData:  \", event.target.formGridName.value);\n\n\n    this.setState({ updating: false });\n\n    let title = event.target.formGridTitle.value;\n    let name = event.target.formGridName.value;\n    let dob = event.target.formGridDob.value;\n    let age = event.target.formGridAge.value;\n    let gender = event.target.formGridGender.value;\n    let addressNumber = event.target.formGridAddressNumber.value;\n    let addressStreet = event.target.formGridAddressStreet.value;\n    let addressTown = event.target.formGridAddressTown.value;\n    let addressParish = event.target.formGridAddressParish.value;\n    let addressPostOffice = event.target.formGridAddressPostOffice.value;\n    let contactPhone = event.target.formGridContactPhone.value;\n    let contactEmail = event.target.formGridContactEmail.value;\n\n    let registrationDate = event.target.formGridRegistrationDate.value;\n    if (event.target.formGridRegistrationDateTodayCheckbox.checked === true) {\n      registrationDate = new Date().toISOString().slice(0,10);\n    }\n\n    let referralDate = event.target.formGridReferralDate.value;\n    if (event.target.formGridReferralDateTodayCheckbox.checked === true) {\n      referralDate = new Date().toISOString().slice(0,10);\n    }\n\n    let expirationDate = event.target.formGridExpirationDate.value;\n    if (event.target.formGridExpirationDateTodayCheckbox.checked === true) {\n      expirationDate = new Date().toISOString().slice(0,10);\n    }\n\n    let attendingPhysicianName = event.target.formGridAttendingPhysicianName.value;\n    let attendingPhysicianEmail = event.target.formGridAttendingPhysicianEmail.value;\n    let attendingPhysicianPhone = event.target.formGridAttendingPhysicianPhone.value;\n    let referringDoctorName = event.target.formGridReferringDoctorName.value;\n    let referringDoctorEmail = event.target.formGridReferringDoctorEmail.value;\n    let referringDoctorPhone = event.target.formGridReferringDoctorPhone.value;\n    let occupationRole = event.target.formGridOccupationRole.value;\n    let occupationEmployer = event.target.formGridOccupationEmployer.value;\n    let occupationEmployerContactPhone = event.target.formGridOccupationEmployerContactPhone.value;\n    let occupationEmployerContactEmail = event.target.formGridOccupationEmployerContactEmail.value;\n\n    if (title.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      title = this.context.selectedPatient.title;\n    }\n    if (name.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      name = this.context.selectedPatient.name;\n    }\n    if (dob.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      dob = this.context.selectedPatient.dob;\n    }\n    if (gender.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      gender = this.context.selectedPatient.gender;\n    }\n    if (age.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      age = this.context.selectedPatient.age;\n    }\n    if (addressNumber.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      addressNumber = this.context.selectedPatient.address.number;\n    }\n    if (addressStreet.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      addressStreet = this.context.selectedPatient.address.street;\n    }\n    if (addressTown.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      addressTown = this.context.selectedPatient.address.town;\n    }\n    if (addressParish.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      addressParish = this.context.selectedPatient.address.parish;\n    }\n    if (addressPostOffice.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      addressPostOffice = this.context.selectedPatient.address.postOffice;\n    }\n    if (contactPhone.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      contactPhone = this.context.selectedPatient.contact.phone;\n    }\n    if (contactEmail.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      contactEmail = this.context.selectedPatient.contact.email;\n    }\n    if (registrationDate.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      registrationDate = this.context.selectedPatient.registrationDate;\n    }\n    if (attendingPhysicianName.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      attendingPhysicianName = this.context.selectedPatient.attendingPhysician.name;\n    }\n    if (attendingPhysicianEmail.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      attendingPhysicianEmail = this.context.selectedPatient.attendingPhysician.email;\n    }\n    if (attendingPhysicianPhone.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      attendingPhysicianPhone = this.context.selectedPatient.attendingPhysician.phone;\n    }\n    if (referringDoctorName.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      referringDoctorName = this.context.selectedPatient.referringDoctor.name;\n    }\n    if (referringDoctorEmail.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      referringDoctorEmail = this.context.selectedPatient.referringDoctor.email;\n    }\n    if (referringDoctorPhone.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      referringDoctorPhone = this.context.selectedPatient.referringDoctor.phone;\n    }\n    if (occupationRole.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      occupationRole = this.context.selectedPatient.occupation.role;\n    }\n    if (occupationEmployer.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      occupationEmployer = this.context.selectedPatient.occupation.employer;\n    }\n    if (occupationEmployerContactEmail.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      occupationEmployerContactEmail = this.context.selectedPatient.occupation.contact.email;\n    }\n    if (occupationEmployerContactPhone.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      occupationEmployerContactPhone = this.context.selectedPatient.occupation.contact.phone;\n    }\n\n\n    console.log(`\n      updating patient...\n      title: ${title},\n      name: ${name},\n      dob: ${dob},\n      age: ${age},\n      gender: ${gender},\n      addressNumber: ${addressNumber},\n      addressStreet: ${addressStreet},\n      addressTown: ${addressTown},\n      addressParish: ${addressParish},\n      addressPostOffice: ${addressPostOffice},\n      contactPhone: ${contactPhone},\n      contactEmail: ${contactEmail},\n      registrationDate: ${registrationDate},\n      referralDate: ${referralDate},\n      expirationDate: ${expirationDate},\n      attendingPhysicianName: ${attendingPhysicianName},\n      attendingPhysicianEmail: ${attendingPhysicianEmail},\n      attendingPhysicianPhone: ${attendingPhysicianPhone},\n      referringDoctorName: ${referringDoctorName},\n      referringDoctorEmail: ${referringDoctorEmail},\n      referringDoctorPhone: ${referringDoctorPhone},\n      occupationRole: ${occupationRole},\n      occupationEmployer: ${occupationEmployer},\n      occupationEmployerContactPhone: ${occupationEmployerContactPhone},\n      occupationEmployerContactEmail: ${occupationEmployerContactEmail},\n      `);\n      this.setState({userAlert: \"updating patient...\"});\n\n    const requestBody = {\n      query: `\n          mutation {updatePatient(userId:\"${userId}\",patientId:\"${selectedPatientId}\", patientInput:{title:\"${title}\",name:\"${name}\",dob:\"${dob}\",age:${age},gender:\"${gender}\",addressNumber:${addressNumber},addressStreet:\"${addressStreet}\",addressTown:\"${addressTown}\",addressParish:\"${addressParish}\",addressPostOffice:\"${addressPostOffice}\",contactPhone:\"${contactPhone}\",contactEmail:\"${contactEmail}\",registrationDate:\"${registrationDate}\",referralDate:\"${referralDate}\",expirationDate:\"${expirationDate}\",referringDoctorName:\"${referringDoctorName}\",referringDoctorEmail:\"${referringDoctorEmail}\",referringDoctorPhone:\"${referringDoctorPhone}\",attendingPhysicianName:\"${attendingPhysicianName}\",attendingPhysicianEmail:\"${attendingPhysicianEmail}\",attendingPhysicianPhone:\"${attendingPhysicianPhone}\",occupationRole:\"${occupationRole}\",occupationEmployer:\"${occupationEmployer}\",occupationEmployerContactPhone:\"${occupationEmployerContactPhone}\",occupationEmployerContactEmail:\"${occupationEmployerContactPhone}\"})\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n        `};\n\n    const token = this.context.token;\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n\n        const updatedPatientId = resData.data.updatePatient._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatient);\n\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert})\n        this.fetchPatients();\n\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n  };\n\n\n  modalConfirmUpdateFieldHandler = (event) => {\n\n    const token = this.context.token;\n    const userId = this.context.userId;\n    let selectedPatientId = this.context.selectedPatient._id;\n\n    // if( this.context.user.role !== 'admin') {\n    //   console.log(\"Not the creator or Admin! No edit permission!!\");\n    //   selectedPatientId = null;\n    // }\n\n      console.log(\"UpdatePatientFieldFormData:  \", event.target.formGridField.value);\n      this.setState({ updating: false });\n\n      let field = null;\n      let query = event.target.formGridQuery.value;\n      if (event.target.formGridFieldSelect.value === \"select\") {\n        field = event.target.formGridField.value;\n      } else {\n        field = event.target.formGridFieldSelect.value;\n      }\n\n      const requestBody = {\n        query:`\n          mutation {updatePatientField(userId:\"${userId}\",patientId:\"${selectedPatientId}\",field:\"${field}\",query:\"${query}\")\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n        `};\n\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData.data.updatePatientField));\n\n          const updatedPatientId = resData.data.updatePatientField._id;\n          const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n          const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n          const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n          console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n          this.state.patients.push(resData.data.updatePatientField);\n          this.context.patients = this.state.patients;\n          const responseAlert = JSON.stringify(resData.data).slice(2,25);\n          this.setState({ userAlert: responseAlert})\n          this.fetchPatients();\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({userAlert: err});\n        });\n\n  }\n\n\nupdatePatientConsultantHandler = (event) => {\n  event.preventDefault();\n\n  let token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n  const patientConsultantReference = this.context.selectedUser._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n  if (patientConsultantReference === undefined) {\n    console.log(`\n      select a Staff member before adding a Patient Consultant!!\n      `);\n      this.setState({userAlert: \"select a Staff member before adding a Patient Consultant!!...\"});\n      token = null;\n  }\n\n  // console.log(\"UpdatePatientConsultantFormData:  \", event.target.formGridConsultantDate.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let consultantDate = null;\n  if (event.target.formGridConsultantDate) {\n    consultantDate = event.target.formGridConsultantDate.value;\n  }\n  if (event.target.formGridConsultantDateTodayCheckbox.checked === true) {\n    consultantDate = new Date().toISOString().slice(0,10);\n  }\n\n  console.log(`\n    adding patient consultant item...\n    userId: ${userId},\n    selectedPatientId: ${selectedPatientId},\n    consultantDate: ${consultantDate},\n    consultantReference: ${patientConsultantReference},\n    `);\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientConsultant(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{consultantDate:\" ${consultantDate}\",consultantReference: \"${patientConsultantReference}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `\n    };\n\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData.data));\n\n          const updatedPatientId = resData.data.updatePatientConsultant._id;\n          const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n          const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n          const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n          console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n          this.state.patients.push(resData.data.updatePatientConsultant);\n          this.context.patients = this.state.patients;\n          const responseAlert = JSON.stringify(resData.data).slice(2,25);\n          this.setState({ userAlert: responseAlert})\n          this.fetchPatients();\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({userAlert: err});\n        });\n\n}\nupdatePatientInsuranceHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientInsuranceFormData:  \", event.target.formGridInsuranceCompany.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let insuranceCompany = event.target.formGridInsuranceCompany.value;\n  let insuranceNumber = event.target.formGridInsuranceNumber.value;\n\n  let insuranceExpiry = event.target.formGridInsuranceExpiry.value;\n\n  let insuranceDescription = event.target.formGridInsuranceDescription.value;\n  let insuranceSubscriberCompany = event.target.formGridInsuranceSubscriberCompany.value;\n  let insuranceSubscriberDescription = event.target.formGridInsuranceSubscriberDescription.value;\n\n\n  console.log(`\n    adding patient insurance item...\n    userId: ${userId},\n    selectedPatientId: ${selectedPatientId},\n    insuranceCompany: ${insuranceCompany},\n    insuranceNumber: ${insuranceNumber},\n    insuranceExpiry: ${insuranceExpiry},\n    insuranceDescription: ${insuranceDescription},\n    insuranceSubscriberCompany: ${insuranceSubscriberCompany},\n    insuranceSubscriberDescription: ${insuranceSubscriberDescription},\n    `);\n    this.setState({userAlert: \"adding patient insurance item...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientInsurance(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{insuranceCompany:\"${insuranceCompany}\",insuranceNumber:\"${insuranceNumber}\",insuranceDescription:\"${insuranceDescription}\",insuranceExpiry:\"${insuranceExpiry}\",insuranceSubscriberCompany:\"${insuranceSubscriberCompany}\",insuranceSubscriberDescription:\"${insuranceSubscriberDescription}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `\n    };\n\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData.data));\n\n          const updatedPatientId = resData.data.updatePatientInsurance._id;\n          const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n          const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n          const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n          console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n          this.state.patients.push(resData.data.updatePatientInsurance);\n          this.context.patients = this.state.patients;\n          const responseAlert = JSON.stringify(resData.data).slice(2,25);\n          this.setState({ userAlert: responseAlert})\n          this.fetchPatients();\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({userAlert: err});\n        });\n\n}\n\nupdatePatientNextOfKinHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientNextOfKinFormData:  \", event.target.formGridNextOfKinName.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let nextOfKinName = event.target.formGridNextOfKinName.value;\n  let nextOfKinPhone = event.target.formGridNextOfKinPhone.value;\n  let nextOfKinEmail = event.target.formGridNextOfKinEmail.value;\n\n\n  console.log(`\n    adding patient nextOfKin item...\n    userId: ${userId},\n    selectedPatientId: ${selectedPatientId},\n    nextOfKinName: ${nextOfKinName},\n    nextOfKinPhone: ${nextOfKinPhone},\n    nextOfKinEmail: ${nextOfKinEmail},\n    `);\n    this.setState({userAlert: \"adding patient nextOfKin item...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientNextOfKin(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{nextOfKinName:\"${nextOfKinName}\",nextOfKinEmail:\"${nextOfKinEmail}\",nextOfKinPhone:\"${nextOfKinPhone}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `\n    };\n\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData.data));\n\n          const updatedPatientId = resData.data.updatePatientNextOfKin._id;\n          const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n          const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n          const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n          console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n          this.state.patients.push(resData.data.updatePatientNextOfKin);\n          this.context.patients = this.state.patients;\n          const responseAlert = JSON.stringify(resData.data).slice(2,25);\n          this.setState({ userAlert: responseAlert})\n          this.fetchPatients();\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState({userAlert: err});\n        });\n}\n\n\nupdatePatientComplaintHandler = (event) => {\n  event.preventDefault();\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientComplaintFormData:  \", event.target.formGridComplaintTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let complaintTitle = event.target.formGridComplaintTitle.value;\n\n  let complaintDate = null;\n  if (event.target.formGridComplaintDate) {\n    complaintDate = event.target.formGridComplaintDate.value;\n  }\n  if (event.target.formGridComplaintDateTodayCheckbox.checked === true) {\n    complaintDate = new Date().toISOString().slice(0,10);\n  }\n\n  let complaintDescription = event.target.formGridComplaintDescription.value;\n  let complaintAnamnesis = event.target.formGridComplaintAnamnesis.value;\n  // let complaintAttachmentName = event.target.formGridComplaintAttachmentName.value;\n  let complaintAttachmentFormat = event.target.formGridComplaintAttachmentFormat.value;\n  // let complaintAttachmentPath = event.target.formGridComplaintAttachmentPath.value;\n  let complaintAttachmentPath = \"uploads/patients/\"+selectedPatientId+\"/complaints\";\n  let file = AuthContext._currentValue.file;\n\n  console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n    const config = {\n      bucketName: this.context.creds.s3.bucketName,\n      dirName: complaintAttachmentPath,\n      region: this.context.creds.s3.region,\n      accessKeyId: this.context.creds.s3.accessKeyId,\n      secretAccessKey: this.context.creds.s3.secretAccessKey,\n    }\n\n  const ReactS3Client = new S3(config);\n  const newFileName = file.name;\n  const complaintAttachmentName = newFileName;\n\n  ReactS3Client\n      .uploadFile(file, newFileName)\n      .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n      .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n\n  console.log(`\n    adding patient complaint...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    complaintTitle: ${complaintTitle},\n    complaintDate: ${complaintDate},\n    complaintDescription: ${complaintDescription},\n    complaintAnamnesis: ${complaintAnamnesis},\n    complaintAttachmentName: ${complaintAttachmentName},\n    complaintAttachmentFormat: ${complaintAttachmentFormat},\n    complaintAttachmentPath: ${complaintAttachmentPath},\n    `);\n    this.setState({userAlert: \"adding patient complaint...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientComplaint(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{complaintDate:\"${complaintDate}\",complaintTitle:\"${complaintTitle}\",complaintDescription:\"${complaintDescription}\",complaintAnamnesis:\"${complaintAnamnesis}\",complaintAttachmentName:\"${complaintAttachmentName}\",complaintAttachmentFormat:\"${complaintAttachmentFormat}\",complaintAttachmentPath:\"${complaintAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientComplaint._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientComplaint);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert})\n        // this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n}\n\nupdatePatientSurveyHandler = (event) => {\n  event.preventDefault();\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientSurveyFormData:  \", event.target.formGridSurveyTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let surveyDate = null;\n  if (event.target.formGridSurveyDate) {\n    surveyDate = event.target.formGridSurveyDate.value;\n  }\n  if (event.target.formGridSurveyDateTodayCheckbox.checked === true) {\n    surveyDate = new Date().toISOString().slice(0,10);\n  }\n\n  let surveyTitle = event.target.formGridSurveyTitle.value;\n  let surveyDescription = event.target.formGridSurveyDescription.value;\n  // let surveyAttachmentName = event.target.formGridSurveyAttachmentName.value;\n  let surveyAttachmentFormat = event.target.formGridSurveyAttachmentFormat.value;\n  let surveyAttachmentPath = \"uploads/patients/\"+selectedPatientId+\"/surveys\";\n  // let surveyAttachmentPath = event.target.formGridSurveyAttachmentPath.value;\n  let file = AuthContext._currentValue.file;\n\n  console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n\n    const config = {\n      bucketName: this.context.creds.s3.bucketName,\n      dirName: surveyAttachmentPath,\n      region: this.context.creds.s3.region,\n      accessKeyId: this.context.creds.s3.accessKeyId,\n      secretAccessKey: this.context.creds.s3.secretAccessKey,\n    }\n\n  const ReactS3Client = new S3(config);\n  const newFileName = file.name;\n  const surveyAttachmentName = newFileName;\n\n  ReactS3Client\n      .uploadFile(file, newFileName)\n      .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n      .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n\n  console.log(`\n    adding patient survey...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    surveyDate: ${surveyDate},\n    surveyTitle: ${surveyTitle},\n    surveyDescription: ${surveyDescription},\n    surveyAttachmentName: ${surveyAttachmentName},\n    surveyAttachmentFormat: ${surveyAttachmentFormat},\n    surveyAttachmentPath: ${surveyAttachmentPath},\n    `);\n    this.setState({userAlert: \"adding patient survey...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientSurvey(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{surveyDate:\"${surveyDate}\",surveyTitle:\"${surveyTitle}\",surveyDescription:\"${surveyDescription}\",surveyAttachmentName:\"${surveyAttachmentName}\",surveyAttachmentFormat:\"${surveyAttachmentFormat}\",surveyAttachmentPath:\"${surveyAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientSurvey._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientSurvey);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n}\n\nupdatePatientSystematicInquiryHandler = (event) => {\n  event.preventDefault();\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientSystematicInquiryFormData:  \", event.target.formGridSystematicInquiryTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let systematicInquiryDate = null;\n  if (event.target.formGridSystematicInquiryDate) {\n    systematicInquiryDate = event.target.formGridSystematicInquiryDate.value;\n  }\n  if (event.target.formGridSystematicInquiryDateTodayCheckbox.checked === true) {\n    systematicInquiryDate = new Date().toISOString().slice(0,10);\n  }\n\n  let systematicInquiryTitle = event.target.formGridSystematicInquiryTitle.value;\n  let systematicInquiryDescription = event.target.formGridSystematicInquiryDescription.value;\n  // let systematicInquiryAttachmentName = event.target.formGridSystematicInquiryAttachmentName.value;\n  let systematicInquiryAttachmentFormat = event.target.formGridSystematicInquiryAttachmentFormat.value;\n  let systematicInquiryAttachmentPath = \"uploads/patients/\"+selectedPatientId+\"/systematicInquirys\";\n  // let systematicInquiryAttachmentPath = event.target.formGridSystematicInquiryAttachmentPath.value;\n  let file = AuthContext._currentValue.file;\n\n  console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n\n    const config = {\n      bucketName: this.context.creds.s3.bucketName,\n      dirName: systematicInquiryAttachmentPath,\n      region: this.context.creds.s3.region,\n      accessKeyId: this.context.creds.s3.accessKeyId,\n      secretAccessKey: this.context.creds.s3.secretAccessKey,\n    }\n\n  const ReactS3Client = new S3(config);\n  const newFileName = file.name;\n  const systematicInquiryAttachmentName = newFileName;\n\n  ReactS3Client\n      .uploadFile(file, newFileName)\n      .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n      .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n\n  console.log(`\n    adding patient systematicInquiry...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    systematicInquiryDate: ${systematicInquiryDate},\n    systematicInquiryTitle: ${systematicInquiryTitle},\n    systematicInquiryDescription: ${systematicInquiryDescription},\n    systematicInquiryAttachmentName: ${systematicInquiryAttachmentName},\n    systematicInquiryAttachmentFormat: ${systematicInquiryAttachmentFormat},\n    systematicInquiryAttachmentPath: ${systematicInquiryAttachmentPath},\n    `);\n    this.setState({userAlert: \"adding patient systematicInquiry...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientSystematicInquiry(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{systematicInquiryDate:\"${systematicInquiryDate}\",systematicInquiryTitle:\"${systematicInquiryTitle}\",systematicInquiryDescription:\"${systematicInquiryDescription}\",systematicInquiryAttachmentName:\"${systematicInquiryAttachmentName}\",systematicInquiryAttachmentFormat:\"${systematicInquiryAttachmentFormat}\",systematicInquiryAttachmentPath:\"${systematicInquiryAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientSystematicInquiry._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientSystematicInquiry);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        console.log(\"responseAlert\", responseAlert);\n        this.setState({ userAlert: responseAlert})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n}\n\nupdatePatientVitalsHandler = (event) => {\n  event.preventDefault();\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientVitalsFormData:  \", event.target.formGridVitalsDate.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let vitalsDate = null;\n  if (event.target.formGridVitalsDate) {\n    vitalsDate = event.target.formGridVitalsDate.value;\n  }\n  if (event.target.formGridVitalsDateTodayCheckbox.checked === true) {\n    vitalsDate = new Date().toISOString().slice(0,10);\n  }\n\n  let vitalsPr = event.target.formGridVitalsPr.value;\n  let vitalsBp1 = event.target.formGridVitalsBp1.value;\n  let vitalsBp2 = event.target.formGridVitalsBp2.value;\n  let vitalsRr = event.target.formGridVitalsRr.value;\n  let vitalsTemp = event.target.formGridVitalsTemp.value;\n  let vitalsPs02 = event.target.formGridVitalsPs02.value;\n  let vitalsHeight = event.target.formGridVitalsHeight.value;\n  let vitalsWeight = event.target.formGridVitalsWeight.value;\n  let vitalsBmi = event.target.formGridVitalsBmi.value;\n  let vitalsUrineType = event.target.formGridVitalsUrineType.value;\n  let vitalsUrineValue = event.target.formGridVitalsUrineValue.value;\n\n  console.log(`\n    adding patient vitals...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    `);\n    this.setState({userAlert: \"adding patient vitals...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientVitals(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{vitalsDate:\"${vitalsDate}\",vitalsPr:${vitalsPr},vitalsBp1:${vitalsBp1},vitalsBp2:${vitalsBp2},vitalsRr:${vitalsRr},vitalsTemp:${vitalsTemp},vitalsPs02:${vitalsPs02},vitalsHeight:${vitalsHeight},vitalsWeight:${vitalsWeight},vitalsBmi:${vitalsBmi},vitalsUrineType:\"${vitalsUrineType}\",vitalsUrineValue:\"${vitalsUrineValue}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientVitals._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientVitals);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n}\n\n\nupdatePatientExaminationHandler = (event) => {\n  event.preventDefault();\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientExaminationFormData:  \", event.target.formGridExaminationArea.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let examinationDate = null;\n  if (event.target.formGridExaminationDate) {\n    examinationDate = event.target.formGridExaminationDate.value;\n  }\n  if (event.target.formGridExaminationDateTodayCheckbox.checked === true) {\n    examinationDate = new Date().toISOString().slice(0,10);\n  }\n\n  let examinationGeneral = event.target.formGridExaminationGeneral.value;\n  let examinationArea = undefined;\n  if (event.target.formGridExaminationAreaSelect === \"select\") {\n    examinationArea = event.target.formGridExaminationArea.value;\n  } else {\n    examinationArea = event.target.formGridExaminationAreaSelect.value;\n  }\n  let examinationType = event.target.formGridExaminationType.value;\n  let examinationMeasure = event.target.formGridExaminationMeasure.value;\n  let examinationValue = event.target.formGridExaminationValue.value;\n  let examinationDescription = event.target.formGridExaminationDescription.value;\n  let examinationFollowUp = event.target.formGridExaminationFollowUp.value;\n  // let examinationAttachmentName = event.target.formGridExaminationAttachmentName.value;\n  let examinationAttachmentFormat = event.target.formGridExaminationAttachmentFormat.value;\n  let examinationAttachmentPath = \"uploads/patients/\"+selectedPatientId+\"/examinations\";\n  // let examinationAttachmentPath = event.target.formGridExaminationAttachmentPath.value;\n  let file = AuthContext._currentValue.file;\n\n  console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n    const config = {\n      bucketName: this.context.creds.s3.bucketName,\n      dirName: examinationAttachmentPath,\n      region: this.context.creds.s3.region,\n      accessKeyId: this.context.creds.s3.accessKeyId,\n      secretAccessKey: this.context.creds.s3.secretAccessKey,\n    }\n  const ReactS3Client = new S3(config);\n  const newFileName = file.name;\n  const examinationAttachmentName = newFileName;\n\n  ReactS3Client\n      .uploadFile(file, newFileName)\n      .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n      .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n\n  console.log(`\n    adding patient examination...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    examinationDate: ${examinationDate},\n    examinationGeneral: ${examinationGeneral},\n    examinationArea: ${examinationArea},\n    examinationType: ${examinationType},\n    examinationMeasure: ${examinationMeasure},\n    examinationValue: ${examinationValue},\n    examinationDescription: ${examinationDescription},\n    examinationFollowUp: ${examinationFollowUp},\n    examinationAttachmentName: ${examinationAttachmentName},\n    examinationAttachmentFormat: ${examinationAttachmentFormat},\n    examinationAttachmentPath: ${examinationAttachmentPath},\n    `);\n    this.setState({userAlert: \"adding patient examination...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientExamination(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{examinationDate:\"${examinationDate}\",examinationGeneral:\"${examinationGeneral}\",examinationArea:\"${examinationArea}\",examinationType:\"${examinationType}\",examinationMeasure:\"${examinationMeasure}\",examinationValue:\"${examinationValue}\",examinationDescription:\"${examinationDescription}\",examinationFollowUp:${examinationFollowUp},examinationAttachmentName:\"${examinationAttachmentName}\",examinationAttachmentFormat:\"${examinationAttachmentFormat}\",examinationAttachmentPath:\"${examinationAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientExamination._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientExamination);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n}\n\n\nupdatePatientHistoryHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientHistoryFormData:  \", event.target.formGridHistoryTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let historyType = event.target.formGridHistoryType.value;\n\n  // let historyDate = null;\n  // if (event.target.formGridHistoryDate) {\n  //   historyDate = event.target.formGridHistoryDate.value;\n  // }\n  let historyDate = event.target.formGridHistoryDate.value;\n  if (event.target.formGridHistoryDateTodayCheckbox.checked === true) {\n    historyDate = new Date().toISOString().slice(0,10);\n  }\n\n  let historyTitle = event.target.formGridHistoryTitle.value;\n  let historyDescription = event.target.formGridHistoryDescription.value;\n  // let historyAttachmentName = event.target.formGridHistoryAttachmentName.value;\n  let historyAttachmentFormat = event.target.formGridHistoryAttachmentFormat.value;\n  let historyAttachmentPath = \"uploads/patients/\"+selectedPatientId+\"/history\";\n  // let historyAttachmentPath = event.target.formGridHistoryAttachmentPath.value;\n  let file = AuthContext._currentValue.file;\n\n  console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n    const config = {\n      bucketName: this.context.creds.s3.bucketName,\n      dirName: historyAttachmentPath,\n      region: this.context.creds.s3.region,\n      accessKeyId: this.context.creds.s3.accessKeyId,\n      secretAccessKey: this.context.creds.s3.secretAccessKey,\n    }\n  const ReactS3Client = new S3(config);\n  const newFileName = file.name;\n  const historyAttachmentName = newFileName;\n\n  ReactS3Client\n      .uploadFile(file, newFileName)\n      .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n      .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n\n  console.log(`\n    adding patient history...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    historyType: ${historyType},\n    historyDate: ${historyDate},\n    historyTitle: ${historyTitle},\n    historyDescription: ${historyDescription},\n    historyAttachmentName: ${historyAttachmentName},\n    historyAttachmentFormat: ${historyAttachmentFormat},\n    historyAttachmentPath: ${historyAttachmentPath},\n    `);\n    this.setState({userAlert: \"adding patient history...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientHistory(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{historyTitle:\"${historyTitle}\",historyType:\"${historyType}\",historyDate:\"${historyDate}\",historyDescription:\"${historyDescription}\",historyAttachmentName:\"${historyAttachmentName}\",historyAttachmentFormat:\"${historyAttachmentFormat}\",historyAttachmentPath:\"${historyAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientHistory._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientHistory);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n}\n\n\nupdatePatientAllergiesHandler = (event) => {\n  event.preventDefault();\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientAllergiesFormData:  \", event.target.formGridAllergiesTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let allergiesTitle = event.target.formGridAllergiesTitle.value;\n  let allergiesType = undefined;\n  if (event.target.formGridAllergiesTypeSelect === \"select\") {\n    allergiesType = event.target.formGridAllergiesType.value;\n  } else {\n    allergiesType = event.target.formGridAllergiesTypeSelect.value;\n  }\n  let allergiesDescription = event.target.formGridAllergiesDescription.value;\n  // let allergiesAttachmentName = event.target.formGridAllergiesAttachmentName.value;\n  let allergiesAttachmentFormat = event.target.formGridAllergiesAttachmentFormat.value;\n  let allergiesAttachmentPath = \"uploads/patients/\"+selectedPatientId+\"/allergies\";\n  // let allergiesAttachmentPath = event.target.formGridAllergiesAttachmentPath.value;\n  let file = AuthContext._currentValue.file;\n\n  console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n    const config = {\n      bucketName: this.context.creds.s3.bucketName,\n      dirName: allergiesAttachmentPath,\n      region: this.context.creds.s3.region,\n      accessKeyId: this.context.creds.s3.accessKeyId,\n      secretAccessKey: this.context.creds.s3.secretAccessKey,\n    }\n  const ReactS3Client = new S3(config);\n  const newFileName = file.name;\n  const allergiesAttachmentName = newFileName;\n\n  ReactS3Client\n      .uploadFile(file, newFileName)\n      .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n      .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n\n  console.log(`\n    adding patient allergies...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    allergiesTitle: ${allergiesTitle},\n    allergiesType: ${allergiesType},\n    allergiesDescription: ${allergiesDescription},\n    allergiesAttachmentName: ${allergiesAttachmentName},\n    allergiesAttachmentFormat: ${allergiesAttachmentFormat},\n    allergiesAttachmentPath: ${allergiesAttachmentPath},\n    `);\n    this.setState({userAlert: \"adding patient allergies...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientAllergies(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{allergiesTitle:\"${allergiesTitle}\",allergiesType:\"${allergiesType}\", allergiesDescription:\"${allergiesDescription}\",allergiesAttachmentName:\"${allergiesAttachmentName}\",allergiesAttachmentFormat:\"${allergiesAttachmentFormat}\",allergiesAttachmentPath:\"${allergiesAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientAllergies._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientAllergies);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n\n}\n\n\nupdatePatientMedicationHandler = (event) => {\n\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientMedicationFormData:  \", event.target.formGridMedicationTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let medicationTitle = event.target.formGridMedicationTitle.value;\n  let medicationType = event.target.formGridMedicationType.value;\n  let medicationDescription = event.target.formGridMedicationDescription.value;\n  // let medicationAttachmentName = event.target.formGridMedicationAttachmentName.value;\n  let medicationAttachmentFormat = event.target.formGridMedicationAttachmentFormat.value;\n  let medicationAttachmentPath = \"uploads/patients/\"+selectedPatientId+\"/medication\";\n  // let medicationAttachmentPath = event.target.formGridMedicationAttachmentPath.value;\n  let file = AuthContext._currentValue.file;\n\n  console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n    const config = {\n      bucketName: this.context.creds.s3.bucketName,\n      dirName: medicationAttachmentPath,\n      region: this.context.creds.s3.region,\n      accessKeyId: this.context.creds.s3.accessKeyId,\n      secretAccessKey: this.context.creds.s3.secretAccessKey,\n    }\n  const ReactS3Client = new S3(config);\n  const newFileName = file.name;\n  const medicationAttachmentName = newFileName;\n\n  ReactS3Client\n      .uploadFile(file, newFileName)\n      .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n      .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n\n  console.log(`\n    adding patient medication...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    medicationTitle: ${medicationTitle},\n    medicationType: ${medicationType},\n    medicationDescription: ${medicationDescription},\n    medicationAttachmentName: ${medicationAttachmentName},\n    medicationAttachmentFormat: ${medicationAttachmentFormat},\n    medicationAttachmentPath: ${medicationAttachmentPath},\n    `);\n    this.setState({userAlert: \"adding patient medication...\"});\n\n    const requestBody = {\n      query:`\n      mutation {updatePatientMedication(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{medicationTitle:\"${medicationTitle}\",medicationType:\"${medicationType}\" medicationDescription:\"${medicationDescription}\",medicationAttachmentName:\"${medicationAttachmentName}\",medicationAttachmentFormat:\"${medicationAttachmentFormat}\",medicationAttachmentPath:\"${medicationAttachmentPath}\"})\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientMedication._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientMedication);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n}\n\n\nupdatePatientInvestigationHandler = (event) => {\n  event.preventDefault();\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientInvestigationFormData:  \", event.target.formGridInvestigationTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let investigationDate = null;\n  if (event.target.formGridInvestigationDate) {\n    investigationDate = event.target.formGridInvestigationDate.value;\n  }\n  if (event.target.formGridInvestigationDateTodayCheckbox.checked === true) {\n    investigationDate = new Date().toISOString().slice(0,10);\n  }\n\n  let investigationTitle = event.target.formGridInvestigationTitle.value;\n  let investigationType = undefined;\n  if (event.target.formGridInvestigationTypeSelect === \"select\") {\n    investigationType = event.target.formGridInvestigationType.value;\n  } else {\n    investigationType = event.target.formGridInvestigationTypeSelect.value;\n  }\n  let investigationDescription = event.target.formGridInvestigationDescription.value;\n  // let investigationAttachmentName = event.target.formGridInvestigationAttachmentName.value;\n  let investigationAttachmentFormat = event.target.formGridInvestigationAttachmentFormat.value;\n  let investigationAttachmentPath = \"uploads/patients/\"+selectedPatientId+\"/investigation\";\n  // let investigationAttachmentPath = event.target.formGridInvestigationAttachmentPath.value;\n  let file = AuthContext._currentValue.file;\n\n  console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n    const config = {\n      bucketName: this.context.creds.s3.bucketName,\n      dirName: investigationAttachmentPath,\n      region: this.context.creds.s3.region,\n      accessKeyId: this.context.creds.s3.accessKeyId,\n      secretAccessKey: this.context.creds.s3.secretAccessKey,\n    }\n  const ReactS3Client = new S3(config);\n  const newFileName = file.name;\n  const investigationAttachmentName = newFileName;\n\n  ReactS3Client\n      .uploadFile(file, newFileName)\n      .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n      .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n\n  console.log(`\n    adding patient investigation...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    investigationDate: ${investigationDate},\n    investigationTitle: ${investigationTitle},\n    investigationType: ${investigationType},\n    investigationDescription: ${investigationDescription},\n    investigationAttachmentName: ${investigationAttachmentName},\n    investigationAttachmentFormat: ${investigationAttachmentFormat},\n    investigationAttachmentPath: ${investigationAttachmentPath},\n    `);\n    this.setState({userAlert: \"adding patient investigation...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientInvestigation(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{investigationDate:\"${investigationDate}\",investigationTitle:\"${investigationTitle}\",investigationType:\"${investigationType}\",investigationDescription:\"${investigationDescription}\",investigationAttachmentName:\"${investigationAttachmentName}\",investigationAttachmentFormat:\"${investigationAttachmentFormat}\",investigationAttachmentPath:\"${investigationAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientInvestigation._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientInvestigation);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n}\n\n\nupdatePatientDiagnosisHandler = (event) => {\n  event.preventDefault();\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientDiagnosisFormData:  \", event.target.formGridDiagnosisTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let diagnosisDate = null;\n  if (event.target.formGridDiagnosisDate) {\n    diagnosisDate = event.target.formGridDiagnosisDate.value;\n  }\n  if (event.target.formGridDiagnosisDateTodayCheckbox.checked === true) {\n    diagnosisDate = new Date().toISOString().slice(0,10);\n  }\n\n  let diagnosisTitle = event.target.formGridDiagnosisTitle.value;\n  let diagnosisType = event.target.formGridDiagnosisType.value;\n  let diagnosisDescription = event.target.formGridDiagnosisDescription.value;\n  // let diagnosisAttachmentName = event.target.formGridDiagnosisAttachmentName.value;\n  let diagnosisAttachmentFormat = event.target.formGridDiagnosisAttachmentFormat.value;\n  let diagnosisAttachmentPath = \"uploads/patients/\"+selectedPatientId+\"/diagnosis\";\n  // let diagnosisAttachmentPath = event.target.formGridDiagnosisAttachmentPath.value;\n  let file = AuthContext._currentValue.file;\n\n  console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n    const config = {\n      bucketName: this.context.creds.s3.bucketName,\n      dirName: diagnosisAttachmentPath,\n      region: this.context.creds.s3.region,\n      accessKeyId: this.context.creds.s3.accessKeyId,\n      secretAccessKey: this.context.creds.s3.secretAccessKey,\n    }\n  const ReactS3Client = new S3(config);\n  const newFileName = file.name;\n  const diagnosisAttachmentName = newFileName;\n\n  ReactS3Client\n      .uploadFile(file, newFileName)\n      .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n      .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n\n  console.log(`\n    adding patient diagnosis...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    diagnosisDate: ${diagnosisDate},\n    diagnosisTitle: ${diagnosisTitle},\n    diagnosisType: ${diagnosisType},\n    diagnosisDescription: ${diagnosisDescription},\n    diagnosisAttachmentName: ${diagnosisAttachmentName},\n    diagnosisAttachmentFormat: ${diagnosisAttachmentFormat},\n    diagnosisAttachmentPath: ${diagnosisAttachmentPath},\n    `);\n    this.setState({userAlert: \"adding patient diagnosis...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientDiagnosis(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{diagnosisDate:\"${diagnosisDate}\",diagnosisTitle:\"${diagnosisTitle}\",diagnosisType:\"${diagnosisType}\",diagnosisDescription:\"${diagnosisDescription}\",diagnosisAttachmentName:\"${diagnosisAttachmentName}\",diagnosisAttachmentFormat:\"${diagnosisAttachmentFormat}\",diagnosisAttachmentPath:\"${diagnosisAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientDiagnosis._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientDiagnosis);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n}\n\n\nupdatePatientTreatmentHandler = (event) => {\n  event.preventDefault();\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientTreatmentFormData:  \", event.target.formGridTreatmentTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let treatmentDate = null;\n  if (event.target.formGridTreatmentDate) {\n    treatmentDate = event.target.formGridTreatmentDate.value;\n  }\n  if (event.target.formGridTreatmentDateTodayCheckbox.checked === true) {\n    treatmentDate = new Date().toISOString().slice(0,10);\n  }\n\n  let treatmentTitle = event.target.formGridTreatmentTitle.value;\n  let treatmentDescription = event.target.formGridTreatmentDescription.value;\n  let treatmentDose = event.target.formGridTreatmentDose.value;\n  let treatmentFrequency = event.target.formGridTreatmentFrequency.value;\n  let treatmentType = undefined;\n  if (event.target.formGridInvestigationTypeSelect === \"select\") {\n    treatmentType = event.target.formGridTreatmentType.value;\n  } else {\n    treatmentType = event.target.formGridTreatmentTypeSelect.value;\n  }\n  // let treatmentAttachmentName = event.target.formGridTreatmentAttachmentName.value;\n  let treatmentAttachmentFormat = event.target.formGridTreatmentAttachmentFormat.value;\n  let treatmentAttachmentPath = \"uploads/patients/\"+selectedPatientId+\"/treatment\";\n  // let treatmentAttachmentPath = event.target.formGridTreatmentAttachmentPath.value;\n  let file = AuthContext._currentValue.file;\n\n  console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n    const config = {\n      bucketName: this.context.creds.s3.bucketName,\n      dirName: treatmentAttachmentPath,\n      region: this.context.creds.s3.region,\n      accessKeyId: this.context.creds.s3.accessKeyId,\n      secretAccessKey: this.context.creds.s3.secretAccessKey,\n    }\n  const ReactS3Client = new S3(config);\n  const newFileName = file.name;\n  const treatmentAttachmentName = newFileName;\n\n  ReactS3Client\n      .uploadFile(file, newFileName)\n      .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n      .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n\n  console.log(`\n    adding patient treatment...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    treatmentDate: ${treatmentDate},\n    treatmentTitle: ${treatmentTitle},\n    treatmentDescription: ${treatmentDescription},\n    treatmentDose: ${treatmentDose},\n    treatmentFrequency: ${treatmentFrequency},\n    treatmentType: ${treatmentType},\n    treatmentAttachmentName: ${treatmentAttachmentName},\n    treatmentAttachmentFormat: ${treatmentAttachmentFormat},\n    treatmentAttachmentPath: ${treatmentAttachmentPath},\n    `);\n    this.setState({userAlert: \"adding patient treatment...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientTreatment(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{treatmentDate:\"${treatmentDate}\",treatmentTitle:\"${treatmentTitle}\",treatmentType:\"${treatmentType}\",treatmentDescription:\"${treatmentDescription}\",treatmentDose:\"${treatmentDose}\",treatmentFrequency:\"${treatmentFrequency}\",treatmentAttachmentName:\"${treatmentAttachmentName}\",treatmentAttachmentFormat:\"${treatmentAttachmentFormat}\",treatmentAttachmentPath:\"${treatmentAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `}\n\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientTreatment._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientTreatment);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n}\n\n\n\nupdatePatientBillingHandler = (event) => {\n  event.preventDefault();\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientBillingFormData:  \", event.target.formGridBillingTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let billingDate = null;\n  if (event.target.formGridBillingDate) {\n    billingDate = event.target.formGridBillingDate.value;\n  }\n  if (event.target.formGridBillingDateTodayCheckbox.checked === true) {\n    billingDate = new Date().toISOString().slice(0,10);\n  }\n\n  let billingTitle = event.target.formGridBillingTitle.value;\n  let billingType = event.target.formGridBillingType.value;\n  let billingDescription = event.target.formGridBillingDescription.value;\n  let billingAmount = event.target.formGridBillingAmount.value;\n  let billingPaid = event.target.formGridBillingPaid.value;\n  let billingNotes = event.target.formGridBillingNotes.value;\n  // let billingAttachmentName = event.target.formGridBillingAttachmentName.value;\n  let billingAttachmentFormat = event.target.formGridBillingAttachmentFormat.value;\n  let billingAttachmentPath = \"uploads/patients/\"+selectedPatientId+\"/billing\";\n  // let billingAttachmentPath = event.target.formGridBillingAttachmentPath.value;\n  let file = AuthContext._currentValue.file;\n\n  console.log(`\n    uploading to s3...\n    file.name: ${file.name},\n    AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n    `);\n    const config = {\n      bucketName: this.context.creds.s3.bucketName,\n      dirName: billingAttachmentPath,\n      region: this.context.creds.s3.region,\n      accessKeyId: this.context.creds.s3.accessKeyId,\n      secretAccessKey: this.context.creds.s3.secretAccessKey,\n    }\n  const ReactS3Client = new S3(config);\n  const newFileName = file.name;\n  const billingAttachmentName = newFileName;\n\n  ReactS3Client\n      .uploadFile(file, newFileName)\n      .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n      .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n\n  console.log(`\n    adding patient billing...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    billingDate: ${billingDate},\n    billingTitle: ${billingTitle},\n    billingType: ${billingType},\n    billingDescription: ${billingDescription},\n    billingAmount: ${billingAmount},\n    billingPaid: ${billingPaid},\n    billingNotes: ${billingNotes},\n    billingAttachmentName: ${billingAttachmentName},\n    billingAttachmentFormat: ${billingAttachmentFormat},\n    billingAttachmentPath: ${billingAttachmentPath},\n    `);\n    this.setState({userAlert: \"adding patient billing...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientBilling(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{billingDate:\"${billingDate}\",billingTitle:\"${billingTitle}\",billingType:\"${billingType}\",billingDescription:\"${billingDescription}\",billingAmount:${billingAmount},billingPaid:${billingPaid},billingNotes:\"${billingNotes}\",billingAttachmentName:\"${billingAttachmentName}\",billingAttachmentFormat:\"${billingAttachmentFormat}\",billingAttachmentPath:\"${billingAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientBilling._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientBilling);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n\n}\n\nupdatePatientVigilanceHandler = (event) => {\n  event.preventDefault();\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(\"UpdatePatientVigilanceFormData:  \", event.target.formGridVigilanceDate.value, event.target.formGridVigilanceChronicIllnessDiabetesMedication.checked);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let vigilanceDate = null;\n  if (event.target.formGridVigilanceDate) {\n    vigilanceDate = event.target.formGridVigilanceDate.value;\n  }\n  if (event.target.formGridVigilanceDateTodayCheckbox.checked === true) {\n    vigilanceDate = new Date().toISOString().slice(0,10);\n  }\n\n  let vigilanceChronicIllnessDiabetesMedication = event.target.formGridVigilanceChronicIllnessDiabetesMedication.checked;\n  let vigilanceChronicIllnessDiabetesTesting = event.target.formGridVigilanceChronicIllnessDiabetesTesting.checked;\n\n  let vigilanceChronicIllnessDiabetesComment = event.target.formGridVigilanceChronicIllnessDiabetesComment.value;\n\n  let vigilanceChronicIllnessHbpMedication = event.target.formGridVigilanceChronicIllnessHbpMedication.checked;\n  let vigilanceChronicIllnessHbpTesting = event.target.formGridVigilanceChronicIllnessHbpTesting.checked;\n\n  let vigilanceChronicIllnessHbpComment = event.target.formGridVigilanceChronicIllnessHbpComment.value;\n\n  let vigilanceChronicIllnessDyslipidemiaMedication = event.target.formGridVigilanceChronicIllnessDyslipidemiaMedication.checked;\n  let vigilanceChronicIllnessDyslipidemiaTesting = event.target.formGridVigilanceChronicIllnessDyslipidemiaTesting.checked;\n\n  let vigilanceChronicIllnessDyslipidemiaComment = event.target.formGridVigilanceChronicIllnessDyslipidemiaComment.value;\n\n  let vigilanceChronicIllnessCadMedication = event.target.formGridVigilanceChronicIllnessCadMedication.checked;\n  let vigilanceChronicIllnessCadTesting = event.target.formGridVigilanceChronicIllnessCadTesting.checked;\n\n  let vigilanceChronicIllnessCadComment = event.target.formGridVigilanceChronicIllnessCadComment.value;\n\n  let vigilanceLifestyleWeightMedication = event.target.formGridVigilanceLifestyleWeightMedication.checked;\n  let vigilanceLifestyleWeightTesting = event.target.formGridVigilanceLifestyleWeightTesting.checked;\n\n  let vigilanceLifestyleWeightComment = event.target.formGridVigilanceLifestyleWeightComment.value;\n  let vigilanceLifestyleDietMedication = event.target.formGridVigilanceLifestyleDietMedication.checked;\n  let vigilanceLifestyleDietTesting = event.target.formGridVigilanceLifestyleDietTesting.checked;\n  let vigilanceLifestyleDietComment = event.target.formGridVigilanceLifestyleDietComment.value;\n  let vigilanceLifestyleSmokingMedication = event.target.formGridVigilanceLifestyleSmokingMedication.checked;\n  let vigilanceLifestyleSmokingTesting = event.target.formGridVigilanceLifestyleSmokingTesting.checked;\n  let vigilanceLifestyleSmokingComment = event.target.formGridVigilanceLifestyleSmokingComment.value;\n  let vigilanceLifestyleSubstanceAbuseMedication = event.target.formGridVigilanceLifestyleSubstanceAbuseMedication.checked;\n  let vigilanceLifestyleSubstanceAbuseTesting = event.target.formGridVigilanceLifestyleSubstanceAbuseTesting.checked;\n  let vigilanceLifestyleSubstanceAbuseComment = event.target.formGridVigilanceLifestyleSubstanceAbuseComment.value;\n  let vigilanceLifestyleExerciseMedication = event.target.formGridVigilanceLifestyleExerciseMedication.checked;\n  let vigilanceLifestyleExerciseTesting = event.target.formGridVigilanceLifestyleExerciseTesting.checked;\n  let vigilanceLifestyleExerciseComment = event.target.formGridVigilanceLifestyleExerciseComment.value;\n  let vigilanceLifestyleAllergiesMedication = event.target.formGridVigilanceLifestyleAllergiesMedication.checked;\n  let vigilanceLifestyleAllergiesTesting = event.target.formGridVigilanceLifestyleAllergiesTesting.checked;\n  let vigilanceLifestyleAllergiesComment = event.target.formGridVigilanceLifestyleAllergiesComment.value;\n  let vigilanceLifestyleAsthmaMedication = event.target.formGridVigilanceLifestyleAsthmaMedication.checked;\n  let vigilanceLifestyleAsthmaTesting = event.target.formGridVigilanceLifestyleAsthmaTesting.checked;\n  let vigilanceLifestyleAsthmaComment = event.target.formGridVigilanceLifestyleAsthmaComment.value;\n  let vigilanceScreeningBreastMedication = event.target.formGridVigilanceScreeningBreastMedication.checked;\n  let vigilanceScreeningBreastTesting = event.target.formGridVigilanceScreeningBreastTesting.checked;\n  let vigilanceScreeningBreastComment = event.target.formGridVigilanceScreeningBreastComment.value;\n  let vigilanceScreeningProstateMedication = event.target.formGridVigilanceScreeningProstateMedication.checked;\n  let vigilanceScreeningProstateTesting = event.target.formGridVigilanceScreeningProstateTesting.checked;\n  let vigilanceScreeningProstateComment = event.target.formGridVigilanceScreeningProstateComment.value;\n  let vigilanceScreeningCervixMedication = event.target.formGridVigilanceScreeningCervixMedication.checked;\n  let vigilanceScreeningCervixTesting = event.target.formGridVigilanceScreeningCervixTesting.checked;\n  let vigilanceScreeningCervixComment = event.target.formGridVigilanceScreeningCervixComment.value;\n  let vigilanceScreeningColonMedication = event.target.formGridVigilanceScreeningColonMedication.checked;\n  let vigilanceScreeningColonTesting = event.target.formGridVigilanceScreeningColonTesting.checked;\n  let vigilanceScreeningColonComment = event.target.formGridVigilanceScreeningColonComment.value;\n  let vigilanceScreeningDentalMedication = event.target.formGridVigilanceScreeningDentalMedication.checked;\n  let vigilanceScreeningDentalTesting = event.target.formGridVigilanceScreeningDentalTesting.checked;\n  let vigilanceScreeningDentalComment = event.target.formGridVigilanceScreeningDentalComment.value;\n  let vigilanceVaccinesInfluenzaMedication = event.target.formGridVigilanceVaccinesInfluenzaMedication.checked;\n  let vigilanceVaccinesInfluenzaTesting = event.target.formGridVigilanceVaccinesInfluenzaTesting.checked;\n  let vigilanceVaccinesInfluenzaComment = event.target.formGridVigilanceVaccinesInfluenzaComment.value;\n  let vigilanceVaccinesVaricellaMedication = event.target.formGridVigilanceVaccinesVaricellaMedication.checked;\n  let vigilanceVaccinesVaricellaTesting = event.target.formGridVigilanceVaccinesVaricellaTesting.checked;\n  let vigilanceVaccinesVaricellaComment = event.target.formGridVigilanceVaccinesVaricellaComment.value;\n  let vigilanceVaccinesHpvMedication = event.target.formGridVigilanceVaccinesHpvMedication.checked;\n  let vigilanceVaccinesHpvTesting = event.target.formGridVigilanceVaccinesHpvTesting.checked;\n  let vigilanceVaccinesHpvComment = event.target.formGridVigilanceVaccinesHpvComment.value;\n  let vigilanceVaccinesMmrMedication = event.target.formGridVigilanceVaccinesMmrMedication.checked;\n  let vigilanceVaccinesMmrTesting = event.target.formGridVigilanceVaccinesMmrTesting.checked;\n  let vigilanceVaccinesMmrComment = event.target.formGridVigilanceVaccinesMmrComment.value;\n  let vigilanceVaccinesTetanusMedication = event.target.formGridVigilanceVaccinesTetanusMedication.checked;\n  let vigilanceVaccinesTetanusTesting = event.target.formGridVigilanceVaccinesTetanusTesting.checked;\n  let vigilanceVaccinesTetanusComment = event.target.formGridVigilanceVaccinesTetanusComment.value;\n  let vigilanceVaccinesPneumovaxMedication = event.target.formGridVigilanceVaccinesPneumovaxMedication.checked;\n  let vigilanceVaccinesPneumovaxTesting = event.target.formGridVigilanceVaccinesPneumovaxTesting.checked;\n  let vigilanceVaccinesPneumovaxComment = event.target.formGridVigilanceVaccinesPneumovaxComment.value;\n  let vigilanceVaccinesOtherName = event.target.formGridVigilanceVaccinesOtherName.value;\n  let vigilanceVaccinesOtherMedication = event.target.formGridVigilanceVaccinesOtherMedication.checked;\n  let vigilanceVaccinesOtherTesting = event.target.formGridVigilanceVaccinesOtherTesting.checked;\n  let vigilanceVaccinesOtherComment = event.target.formGridVigilanceVaccinesOtherComment.value;\n\n  console.log(`\n    adding patient vigilance...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    vigilanceDate: ${vigilanceDate},\n    vigilanceChronicIllnessDiabetesMedication: \"${vigilanceChronicIllnessDiabetesMedication}\",\n    vigilanceChronicIllnessDiabetesTesting: \"${vigilanceChronicIllnessDiabetesTesting}\",\n    vigilanceChronicIllnessDiabetesComment: \"${vigilanceChronicIllnessDiabetesComment}\",\n    vigilanceChronicIllnessHbpMedication: \"${vigilanceChronicIllnessHbpMedication}\",\n    vigilanceChronicIllnessHbpTesting: \"${vigilanceChronicIllnessHbpTesting}\",\n    vigilanceChronicIllnessHbpComment: \"${vigilanceChronicIllnessHbpComment}\",\n    vigilanceChronicIllnessDyslipidemiaMedication: \"${vigilanceChronicIllnessDyslipidemiaMedication}\",\n    vigilanceChronicIllnessDyslipidemiaTesting: \"${vigilanceChronicIllnessDyslipidemiaTesting}\",\n    vigilanceChronicIllnessDyslipidemiaComment: \"${vigilanceChronicIllnessDyslipidemiaComment}\",\n    vigilanceChronicIllnessCadMedication: \"${vigilanceChronicIllnessCadMedication}\",\n    vigilanceChronicIllnessCadTesting: \"${vigilanceChronicIllnessCadTesting}\",\n    vigilanceChronicIllnessCadComment: \"${vigilanceChronicIllnessCadComment}\",\n    vigilanceLifestyleWeightMedication: \"${vigilanceLifestyleWeightMedication}\",\n    vigilanceLifestyleWeightTesting: \"${vigilanceLifestyleWeightTesting}\",\n    vigilanceLifestyleWeightComment: \"${vigilanceLifestyleWeightComment}\",\n    vigilanceLifestyleDietMedication: \"${vigilanceLifestyleDietMedication}\",\n    vigilanceLifestyleDietTesting: \"${vigilanceLifestyleDietTesting}\",\n    vigilanceLifestyleDietComment: \"${vigilanceLifestyleDietComment}\",\n    vigilanceLifestyleSmokingMedication: \"${vigilanceLifestyleSmokingMedication}\",\n    vigilanceLifestyleSmokingTesting: \"${vigilanceLifestyleSmokingTesting}\",\n    vigilanceLifestyleSmokingComment: \"${vigilanceLifestyleSmokingComment}\",\n    vigilanceLifestyleSubstanceAbuseMedication: \"${vigilanceLifestyleSubstanceAbuseMedication}\",\n    vigilanceLifestyleSubstanceAbuseTesting: \"${vigilanceLifestyleSubstanceAbuseTesting}\",\n    vigilanceLifestyleSubstanceAbuseComment: \"${vigilanceLifestyleSubstanceAbuseComment}\",\n    vigilanceLifestyleExerciseMedication: \"${vigilanceLifestyleExerciseMedication}\",\n    vigilanceLifestyleExerciseTesting: \"${vigilanceLifestyleExerciseTesting}\",\n    vigilanceLifestyleExerciseComment: \"${vigilanceLifestyleExerciseComment}\",\n    vigilanceLifestyleAllergiesMedication: \"${vigilanceLifestyleAllergiesMedication}\",\n    vigilanceLifestyleAllergiesTesting: \"${vigilanceLifestyleAllergiesTesting}\",\n    vigilanceLifestyleAllergiesComment: \"${vigilanceLifestyleAllergiesComment}\",\n    vigilanceLifestyleAsthmaMedication: \"${vigilanceLifestyleAsthmaMedication}\",\n    vigilanceLifestyleAsthmaTesting: \"${vigilanceLifestyleAsthmaTesting}\",\n    vigilanceLifestyleAsthmaComment: \"${vigilanceLifestyleAsthmaComment}\",\n    vigilanceScreeningBreastMedication: \"${vigilanceScreeningBreastMedication}\",\n    vigilanceScreeningBreastTesting: \"${vigilanceScreeningBreastTesting}\",\n    vigilanceScreeningBreastComment: \"${vigilanceScreeningBreastComment}\",\n    vigilanceScreeningProstateMedication: \"${vigilanceScreeningProstateMedication}\",\n    vigilanceScreeningProstateTesting: \"${vigilanceScreeningProstateTesting}\",\n    vigilanceScreeningProstateComment: \"${vigilanceScreeningProstateComment}\",\n    vigilanceScreeningCervixMedication: \"${vigilanceScreeningCervixMedication}\",\n    vigilanceScreeningCervixTesting: \"${vigilanceScreeningCervixTesting}\",\n    vigilanceScreeningCervixComment: \"${vigilanceScreeningCervixComment}\",\n    vigilanceScreeningColonMedication: \"${vigilanceScreeningColonMedication}\",\n    vigilanceScreeningColonTesting: \"${vigilanceScreeningColonTesting}\",\n    vigilanceScreeningColonComment: \"${vigilanceScreeningColonComment}\",\n    vigilanceScreeningDentalMedication: \"${vigilanceScreeningDentalMedication}\",\n    vigilanceScreeningDentalTesting: \"${vigilanceScreeningDentalTesting}\",\n    vigilanceScreeningDentalComment: \"${vigilanceScreeningDentalComment}\",\n    vigilanceVaccinesInfluenzaMedication: \"${vigilanceVaccinesInfluenzaMedication}\",\n    vigilanceVaccinesInfluenzaTesting: \"${vigilanceVaccinesInfluenzaTesting}\",\n    vigilanceVaccinesInfluenzaComment: \"${vigilanceVaccinesInfluenzaComment}\",\n    vigilanceVaccinesVaricellaMedication: \"${vigilanceVaccinesVaricellaMedication}\",\n    vigilanceVaccinesVaricellaTesting: \"${vigilanceVaccinesVaricellaTesting}\",\n    vigilanceVaccinesVaricellaComment: \"${vigilanceVaccinesVaricellaComment}\",\n    vigilanceVaccinesHpvMedication: \"${vigilanceVaccinesHpvMedication}\",\n    vigilanceVaccinesHpvTesting: \"${vigilanceVaccinesHpvTesting}\",\n    vigilanceVaccinesHpvComment: \"${vigilanceVaccinesHpvComment}\",\n    vigilanceVaccinesMmrMedication: \"${vigilanceVaccinesMmrMedication}\",\n    vigilanceVaccinesMmrTesting: \"${vigilanceVaccinesMmrTesting}\",\n    vigilanceVaccinesMmrComment: \"${vigilanceVaccinesMmrComment}\",\n    vigilanceVaccinesTetanusMedication: \"${vigilanceVaccinesTetanusMedication}\",\n    vigilanceVaccinesTetanusTesting: \"${vigilanceVaccinesTetanusTesting}\",\n    vigilanceVaccinesTetanusComment: \"${vigilanceVaccinesTetanusComment}\",\n    vigilanceVaccinesPneumovaxMedication: \"${vigilanceVaccinesPneumovaxMedication}\",\n    vigilanceVaccinesPneumovaxTesting: \"${vigilanceVaccinesPneumovaxTesting}\",\n    vigilanceVaccinesPneumovaxComment: \"${vigilanceVaccinesPneumovaxComment}\",\n    vigilanceVaccinesOtherName: \"${vigilanceVaccinesOtherName}\",\n    vigilanceVaccinesOtherMedication: \"${vigilanceVaccinesOtherMedication}\",\n    vigilanceVaccinesOtherTesting: \"${vigilanceVaccinesOtherTesting}\",\n    vigilanceVaccinesOtherComment: \"${vigilanceVaccinesOtherComment}\",\n    `);\n    this.setState({userAlert: \"adding patient vigilance...\"});\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientVigilance(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{\n          vigilanceDate:\"${vigilanceDate}\",\n          vigilanceChronicIllnessDiabetesMedication: ${vigilanceChronicIllnessDiabetesMedication},\n          vigilanceChronicIllnessDiabetesTesting: ${vigilanceChronicIllnessDiabetesTesting},\n          vigilanceChronicIllnessDiabetesComment: \"${vigilanceChronicIllnessDiabetesComment}\",\n          vigilanceChronicIllnessHbpMedication: ${vigilanceChronicIllnessHbpMedication},\n          vigilanceChronicIllnessHbpTesting: ${vigilanceChronicIllnessHbpTesting},\n          vigilanceChronicIllnessHbpComment: \"${vigilanceChronicIllnessHbpComment}\",\n          vigilanceChronicIllnessDyslipidemiaMedication: ${vigilanceChronicIllnessDyslipidemiaMedication},\n          vigilanceChronicIllnessDyslipidemiaTesting: ${vigilanceChronicIllnessDyslipidemiaTesting},\n          vigilanceChronicIllnessDyslipidemiaComment: \"${vigilanceChronicIllnessDyslipidemiaComment}\",\n          vigilanceChronicIllnessCadMedication: ${vigilanceChronicIllnessCadMedication},\n          vigilanceChronicIllnessCadTesting: ${vigilanceChronicIllnessCadTesting},\n          vigilanceChronicIllnessCadComment: \"${vigilanceChronicIllnessCadComment}\",\n          vigilanceLifestyleWeightMedication: ${vigilanceLifestyleWeightMedication},\n          vigilanceLifestyleWeightTesting: ${vigilanceLifestyleWeightTesting},\n          vigilanceLifestyleWeightComment: \"${vigilanceLifestyleWeightComment}\",\n          vigilanceLifestyleDietMedication: ${vigilanceLifestyleDietMedication},\n          vigilanceLifestyleDietTesting: ${vigilanceLifestyleDietTesting},\n          vigilanceLifestyleDietComment: \"${vigilanceLifestyleDietComment}\",\n          vigilanceLifestyleSmokingMedication: ${vigilanceLifestyleSmokingMedication},\n          vigilanceLifestyleSmokingTesting: ${vigilanceLifestyleSmokingTesting},\n          vigilanceLifestyleSmokingComment: \"${vigilanceLifestyleSmokingComment}\",\n          vigilanceLifestyleSubstanceAbuseMedication: ${vigilanceLifestyleSubstanceAbuseMedication},\n          vigilanceLifestyleSubstanceAbuseTesting: ${vigilanceLifestyleSubstanceAbuseTesting},\n          vigilanceLifestyleSubstanceAbuseComment: \"${vigilanceLifestyleSubstanceAbuseComment}\",\n          vigilanceLifestyleExerciseMedication: ${vigilanceLifestyleExerciseMedication},\n          vigilanceLifestyleExerciseTesting: ${vigilanceLifestyleExerciseTesting},\n          vigilanceLifestyleExerciseComment: \"${vigilanceLifestyleExerciseComment}\",\n          vigilanceLifestyleAllergiesMedication: ${vigilanceLifestyleAllergiesMedication},\n          vigilanceLifestyleAllergiesTesting: ${vigilanceLifestyleAllergiesTesting},\n          vigilanceLifestyleAllergiesComment: \"${vigilanceLifestyleAllergiesComment}\",\n          vigilanceLifestyleAsthmaMedication: ${vigilanceLifestyleAsthmaMedication},\n          vigilanceLifestyleAsthmaTesting: ${vigilanceLifestyleAsthmaTesting},\n          vigilanceLifestyleAsthmaComment: \"${vigilanceLifestyleAsthmaComment}\",\n          vigilanceScreeningBreastMedication: ${vigilanceScreeningBreastMedication},\n          vigilanceScreeningBreastTesting: ${vigilanceScreeningBreastTesting},\n          vigilanceScreeningBreastComment: \"${vigilanceScreeningBreastComment}\",\n          vigilanceScreeningProstateMedication: ${vigilanceScreeningProstateMedication},\n          vigilanceScreeningProstateTesting: ${vigilanceScreeningProstateTesting},\n          vigilanceScreeningProstateComment: \"${vigilanceScreeningProstateComment}\",\n          vigilanceScreeningCervixMedication: ${vigilanceScreeningCervixMedication},\n          vigilanceScreeningCervixTesting: ${vigilanceScreeningCervixTesting},\n          vigilanceScreeningCervixComment: \"${vigilanceScreeningCervixComment}\",\n          vigilanceScreeningColonMedication: ${vigilanceScreeningColonMedication},\n          vigilanceScreeningColonTesting: ${vigilanceScreeningColonTesting},\n          vigilanceScreeningColonComment: \"${vigilanceScreeningColonComment}\",\n          vigilanceScreeningDentalMedication: ${vigilanceScreeningDentalMedication},\n          vigilanceScreeningDentalTesting: ${vigilanceScreeningDentalTesting},\n          vigilanceScreeningDentalComment: \"${vigilanceScreeningDentalComment}\",\n          vigilanceVaccinesInfluenzaMedication: ${vigilanceVaccinesInfluenzaMedication},\n          vigilanceVaccinesInfluenzaTesting: ${vigilanceVaccinesInfluenzaTesting},\n          vigilanceVaccinesInfluenzaComment: \"${vigilanceVaccinesInfluenzaComment}\",\n          vigilanceVaccinesVaricellaMedication: ${vigilanceVaccinesVaricellaMedication},\n          vigilanceVaccinesVaricellaTesting: ${vigilanceVaccinesVaricellaTesting},\n          vigilanceVaccinesVaricellaComment: \"${vigilanceVaccinesVaricellaComment}\",\n          vigilanceVaccinesHpvMedication: ${vigilanceVaccinesHpvMedication},\n          vigilanceVaccinesHpvTesting: ${vigilanceVaccinesHpvTesting},\n          vigilanceVaccinesHpvComment: \"${vigilanceVaccinesHpvComment}\",\n          vigilanceVaccinesMmrMedication: ${vigilanceVaccinesMmrMedication},\n          vigilanceVaccinesMmrTesting: ${vigilanceVaccinesMmrTesting},\n          vigilanceVaccinesMmrComment: \"${vigilanceVaccinesMmrComment}\",\n          vigilanceVaccinesTetanusMedication: ${vigilanceVaccinesTetanusMedication},\n          vigilanceVaccinesTetanusTesting: ${vigilanceVaccinesTetanusTesting},\n          vigilanceVaccinesTetanusComment: \"${vigilanceVaccinesTetanusComment}\",\n          vigilanceVaccinesPneumovaxMedication: ${vigilanceVaccinesPneumovaxMedication},\n          vigilanceVaccinesPneumovaxTesting: ${vigilanceVaccinesPneumovaxTesting},\n          vigilanceVaccinesPneumovaxComment: \"${vigilanceVaccinesPneumovaxComment}\",\n          vigilanceVaccinesOtherName: \"${vigilanceVaccinesOtherName}\",\n          vigilanceVaccinesOtherMedication: ${vigilanceVaccinesOtherMedication},\n          vigilanceVaccinesOtherTesting: ${vigilanceVaccinesOtherTesting},\n          vigilanceVaccinesOtherComment: \"${vigilanceVaccinesOtherComment}\"})\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientVigilance._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientVigilance);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n\n\n}\n\nupdatePatientAttachmentHandler = (event) => {\n\n    const token = this.context.token;\n    const userId = this.context.userId;\n    let selectedPatientId = this.context.selectedPatient._id;\n\n    // if(this.context.user.role !== 'admin') {\n    //   console.log(\"No edit permission!!\");\n    //   return;\n    // }\n\n    console.log(`\n        UpdatePatientAttachmentFormData:\n      `);\n\n    this.setState({ updating: false , patientUpdateField: null });\n\n    // let attachmentName = event.target.formGridPatientAttachmentName.value;\n    let attachmentFormat = event.target.formGridPatientAttachmentFormat.value;\n    let attachmentPath = \"uploads/patients/\"+selectedPatientId+\"/attachments\";\n    // let attachmentPath = event.target.formGridPatientAttachmentPath.value;\n    let file = AuthContext._currentValue.file;\n\n    console.log(`\n      uploading to s3...\n      file.name: ${file.name},\n      AuthContext._currentValue.file: ${AuthContext._currentValue.file},\n      `);\n      const config = {\n        bucketName: this.context.creds.s3.bucketName,\n        dirName: attachmentPath,\n        region: this.context.creds.s3.region,\n        accessKeyId: this.context.creds.s3.accessKeyId,\n        secretAccessKey: this.context.creds.s3.secretAccessKey,\n      }\n    const ReactS3Client = new S3(config);\n    const newFileName = file.name;\n    const attachmentName = newFileName;\n\n    ReactS3Client\n        .uploadFile(file, newFileName)\n        .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n        .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n    if (\n      attachmentName.trim().length === 0 ||\n      attachmentFormat.trim().length === 0 ||\n      attachmentPath.trim().length === 0\n    ) {\n      console.log(\"blank fields detected!!!...Please try again...\");\n      this.setState({userAlert: \"blank fields detected!!!...Please try again...\"});\n      return;\n    }\n\n    this.setState({userAlert: \"adding patient attachment\"});\n\n    const requestBody = {\n                    query:`\n                    mutation {updatePatientAttachment(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{attachmentName:\"${attachmentName}\",attachmentFormat:\"${attachmentFormat}\",attachmentPath:\"${attachmentPath}\"})\n                    {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n            `}\n\n\n    fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            console.log(\"response data... \" + JSON.stringify(resData.data));\n\n            const updatedPatientId = resData.data.updatePatientAttachment._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.updatePatientAttachment);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientAttachment})\n            this.fetchPatients();\n          })\n          .catch(err => {\n            console.log(err);\n            this.setState({userAlert: err});\n          });\n\n}\n\nupdatePatientNoteHandler = (event) => {\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(`\n      UpdatePatientNoteFormData:\n      ${event.target.formGridNote.value}\n    `);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n    let note = event.target.formGridNote.value;\n\n    if (\n      note.trim().length === 0\n    ) {\n      console.log(\"Can't Submit a blank form!!!...Please try again...\");\n      this.setState({userAlert: \"Can't Submit a blank form!!!...Please try again...\"});\n      return;\n    }\n\n    this.setState({userAlert: \"adding patient note\"});\n\n    const requestBody = {\n              query:`\n              mutation {updatePatientNotes(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{notes:\"${note}\"})\n              {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n            `}\n\n\n    fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            console.log(\"response data... \" + JSON.stringify(resData.data));\n\n            const updatedPatientId = resData.data.updatePatientNotes._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.updatePatientNotes);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientNotes})\n            this.fetchPatients();\n          })\n          .catch(err => {\n            console.log(err);\n            this.setState({userAlert: err});\n          });\n\n}\nupdatePatientTagHandler = (event) => {\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n\n  // if(this.context.user.role !== 'admin') {\n  //   console.log(\"No edit permission!!\");\n  //   return;\n  // }\n\n  console.log(`\n      UpdatePatientTagFormData:\n      ${event.target.formGridTag.value}\n    `);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n    let tag = event.target.formGridTag.value;\n\n    if (\n      tag.trim().length === 0\n    ) {\n      console.log(\"Can't Submit a blank form!!!...Please try again...\");\n      this.setState({userAlert: \"Can't Submit a blank form!!!...Please try again...\"});\n      return;\n    }\n\n    const requestBody = {\n                    query:`\n                    mutation {updatePatientTags(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{tag:\"${tag}\"})\n                    {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n            `}\n    this.setState({userAlert: \"adding patient tag\"});\n\n\n    fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            console.log(\"response data... \" + JSON.stringify(resData.data));\n\n            const updatedPatientId = resData.data.updatePatientTags._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.updatePatientTags);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            this.fetchPatients();\n          })\n          .catch(err => {\n            console.log(err);\n            this.setState({userAlert: err});\n          });\n\n\n}\n\n\nmodalConfirmSearchHandler = (event) => {\n  console.log(\"SearchPatientForm:  \");\n\n\n  let userId = this.context.userId;\n\n    console.log(\"SearchPatientFormData:  \", event.target.formBasicField.value);\n    this.setState({ searching: false });\n\n    let field = null;\n    let query = event.target.formBasicQuery.value;\n    if (event.target.formBasicFieldSelect.value === \"select\") {\n      field = event.target.formBasicField.value;\n    } else {\n      field = event.target.formBasicFieldSelect.value;\n    }\n\n    this.setState({\n      patientSearchField: field,\n      patientSearchQuery: query,\n    })\n\n    if (\n      field.trim().length === 0 ||\n      query.trim().length === 0\n    ) {\n      console.log(\"blank fields detected!!!...Please try again...\");\n      return;\n    }\n\n\n    this.setState({userAlert: \"Searching for Patient:  \"});\n\n    const requestBody = {\n      query: `\n        query {\n          getPatientField(userId: \"${userId}\", field: \"${field}\", query: \"${query}\" )\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n    const token = this.context.token;\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n        const responseAlert = JSON.stringify(resData.data).slice(2,15);\n        this.setState({userAlert: responseAlert});\n\n        const searchPatients = resData.data.getPatientField;\n\n        this.setState({ searchPatients: searchPatients})\n        console.log(\"state.searchPatients:  \", this.state.searchPatients);\n        // this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n}\n\nmodalConfirmSearchIdHandler = (event) => {\n  console.log(\"SearchPatientIdFormData\");\n\n  let userId = this.context.userId;\n  this.setState({ searching: false });\n\n  const patientId = event.target.formBasicId.value;\n\n  const requestBody = {\n    query: `\n      query {getPatientId(userId:\"${userId}\",patientId:\"${patientId}\")\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `}\n\n  const token = this.context.token;\n\n  fetch('http://localhost:10000/graphql', {\n    method: 'POST',\n    body: JSON.stringify(requestBody),\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + token\n    }\n  })\n    .then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n      return res.json();\n    })\n    .then(resData => {\n      console.log(\"response data... \" + JSON.stringify(resData));\n      const responseAlert = JSON.stringify(resData.data).slice(2,25);\n      this.setState({userAlert: responseAlert});\n\n      const searchPatients = resData.data.getPatientId;\n\n      this.setState({ searchPatients: [searchPatients]})\n      console.log(\"state.searchPatients:  \", this.state.searchPatients);\n      // this.fetchUsers();\n    })\n    .catch(err => {\n      console.log(err);\n      this.setState({userAlert: err});\n    });\n}\n\n\nmodalConfirmSearchNameHandler = (event) => {\n  console.log(\"SearchPatientNameFormData:\", event.target.formBasicName.value);\n\n  // let userId = this.context.userId;\n  this.setState({ searching: false });\n\n  let patients = this.state.patients;\n  const regex = new RegExp(event.target.formBasicName.value,\"i\");\n  console.log(`\n    regex: ${regex},\n    `);\n    let result = patients.filter(patient => patient.name.match(regex))\n    console.log(`\n      result: ${JSON.stringify(result)}\n      `);\n\n      this.setState({ searchPatients: result})\n\n}\n\n  getPatientVisit = (event) => {\n\n    const selectedPatient = this.state.selectedPatient;\n    event.preventDefault();\n    console.log(`\n        getUserVisit function:\n        selectedPatient.consultant: ${JSON.stringify(selectedPatient.consultant)},\n        selectedPatient.complaints: ${JSON.stringify(selectedPatient.complaints)},\n        visitDate: ${new Date(event.target.formBasicVisitDate.value)},\n      `);\n\n    let visitDate = new Date(event.target.formBasicVisitDate.value).toISOString().substring(0, 10);\n    let visitSurveys = selectedPatient.surveys.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    let visitConsultants = selectedPatient.consultant.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    let visitComplaints = selectedPatient.complaints.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    // let visitSurveys = selectedPatient.surveys.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString() === visitDate);\n    let visitSystematicInquiry = selectedPatient.systematicInquiry.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    let visitVitals = selectedPatient.vitals.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    let visitExaminations = selectedPatient.examination.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    let visitHistory = selectedPatient.history.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    let visitInvestigations = selectedPatient.investigation.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    let visitDiagnosis = selectedPatient.diagnosis.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    let visitTreatments = selectedPatient.treatment.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    let visitBilling = selectedPatient.billing.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    let visitVigilance = selectedPatient.vigilance.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n\n      const visit = {\n        date: visitDate,\n        patientName: this.context.selectedPatient.name,\n        consultant: visitConsultants,\n        complaint: visitComplaints,\n        examination: visitExaminations,\n        survey: visitSurveys,\n        systematicInquiry: visitSystematicInquiry,\n        vitals: visitVitals,\n        history: visitHistory,\n        investigation: visitInvestigations,\n        diagnosis: visitDiagnosis,\n        treatment: visitTreatments,\n        billing: visitBilling,\n        vigilance: visitVigilance,\n      };\n\n      console.log(`\n        visit: ${JSON.stringify(visit)},\n        `);\n        // this.context.visit = visit;\n        this.setState({visit: visit});\n\n  }\n\n  getVisitList = () => {\n\n    const selectedPatient = this.state.selectedPatient;\n    const patientName = this.state.selectedPatient.name;\n    let selectedPatientAppointmentDateArray = [];\n    let selectedPatientAppointmentVisitArray = [];\n    let selectedPatientAppointments = this.state.selectedPatient.appointments.map(appointments => {\n      console.log(\"appointments.date\", appointments.date);\n      selectedPatientAppointmentDateArray.push(new Date(appointments.date.substr(0,10)*1000).toISOString().substring(0, 10))\n    })\n    console.log(`\n        getVisitList function:\n        selectedPatientAppointments: ${selectedPatientAppointmentDateArray}\n      `);\n\n      selectedPatientAppointmentDateArray.map(appointmentDate => {\n        console.log(`\n          retriveing visit for ${appointmentDate} ...selectedPatientAppointmentVisitArray: ${JSON.stringify(selectedPatientAppointmentVisitArray)},\n          `);\n          thisGetVisit(appointmentDate, patientName)\n      })\n\n      function thisGetVisit (argsDate, argsPatientName) {\n        console.log(\"thisGetVisit function...\");\n\n        let visitDate = argsDate\n\n\n        let visitSurveys = selectedPatient.surveys.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n        let visitConsultants = selectedPatient.consultant.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n        let visitComplaints = selectedPatient.complaints.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n        // let visitSurveys = selectedPatient.surveys.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString() === visitDate);\n        let visitVitals = selectedPatient.vitals.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n        let visitSystematicInquiry = selectedPatient.systematicInquiry.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n        let visitExaminations = selectedPatient.examination.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n        let visitHistory = selectedPatient.history.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n        let visitInvestigations = selectedPatient.investigation.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n        let visitDiagnosis = selectedPatient.diagnosis.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n        let visitTreatments = selectedPatient.treatment.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n        let visitBilling = selectedPatient.billing.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n        let visitVigilance = selectedPatient.vigilance.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n\n        const visit = {\n          date: visitDate,\n          patientName: argsPatientName,\n          consultant: visitConsultants,\n          complaint: visitComplaints,\n          examination: visitExaminations,\n          survey: visitSurveys,\n          systematicInquiry: visitSystematicInquiry,\n          vitals: visitVitals,\n          history: visitHistory,\n          investigation: visitInvestigations,\n          diagnosis: visitDiagnosis,\n          treatment: visitTreatments,\n          billing: visitBilling,\n          vigilance: visitVigilance,\n        };\n\n        selectedPatientAppointmentVisitArray.push(visit)\n      }\n      // console.log(`\n      //     ...final selectedPatientAppointmentVisitArray: ${JSON.stringify(selectedPatientAppointmentVisitArray)}\n      //   `);\n\n      this.setState({ visitList: selectedPatientAppointmentVisitArray})\n\n  }\n\n\n  getVisitListAsc = () => {\n    console.log(`\n      sorting visit list in ascending order...\n      `);\n\n      let list = this.state.visitList;\n\n      list.sort((a, b) => {\n        if (a.date < b.date) return -1\n        return a.date > b.date ? 1 : 0\n      })\n\n      console.log(`\n        list: ${list}\n        `);\n\n      this.setState({visitList: list})\n  }\n  getVisitListDesc = () => {\n    console.log(`\n      sorting visit list in descending order...\n      `);\n\n      let list = this.state.visitList;\n\n      list.sort((a, b) => {\n        if (a.date < b.date) return 1\n        return a.date > b.date ? -1 : 0\n      })\n\n      console.log(`\n        list: ${list}\n        `);\n\n      this.setState({visitList: list})\n  }\n\n\n\n  modalCancelHandler = () => {\n    this.setState({ creating: false, updating: false, searching: false, selectedPatient: null });\n  };\n\n\n  fetchPatients() {\n    console.log(\"fetch patients function:  \");\n    const userId = this.context.userId;\n    const token = this.context.token;\n\n    this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n          query {patients(userId:\"${userId}\")\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n        `\n    };\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"resData\", resData);\n        const patients = resData.data.patients;\n        console.log(patients);\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({userAlert: responseAlert});\n\n        this.context.patients = this.state.patients;\n        if (this.isActive) {\n          this.setState({\n            patients: patients,\n            isLoading: false,\n\n          });\n        }\n\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n        if (this.isActive) {\n          this.setState({ isLoading: false });\n        }\n      });\n  }\n\n  fetchPatientsAsc = () => {\n    console.log(\"fetch patients function:  \");\n    const userId = this.context.userId;\n    const token = this.context.token;\n\n    // this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n          query {patientsNameAsc(userId:\"${userId}\")\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n        `\n    };\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"resData\", resData);\n        const patients = resData.data.patientsNameAsc;\n        console.log(patients);\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({userAlert: responseAlert});\n\n        this.context.patients = patients;\n        this.setState({ patients: patients});\n        // if (this.isActive) {\n        //   this.setState({ patients: patients, isLoading: false });\n        // }\n\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n        // if (this.isActive) {\n        //   this.setState({ isLoading: false });\n        // }\n      });\n  }\n\n  fetchPatientsDesc = () => {\n    console.log(\"fetch patients function:  \");\n    const userId = this.context.userId;\n    const token = this.context.token;\n\n    // this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n          query {patientsNameDesc(userId:\"${userId}\")\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n        `\n    };\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"resData\", resData);\n        const patients = resData.data.patientsNameDesc;\n        console.log(patients);\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({userAlert: responseAlert});\n\n        this.context.patients = patients\n        // if (this.isActive) {\n        //   this.setState({ patients: patients, isLoading: false });\n        // }\n        this.setState({ patients: patients});\n\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n        // if (this.isActive) {\n        //   this.setState({ isLoading: false });\n        // }\n      });\n  }\n\n\n  modalDeleteHandler = () => {\n    console.log(\"deleting patient...selectedPatient:  \", this.context.selectedPatient);\n\n    const selectedPatientId = this.context.selectedPatient._id;\n    const userId = this.context.selectedUser._id;\n\n    if(this.context.user.role !== 'admin') {\n      console.log(\"Not the Admin! No edit permission!!\");\n    }\n\n    this.setState({deleting: true});\n\n\n    const requestBody = {\n      query: `\n          mutation {deletePatient(userId:\"${userId}\",patientId:\"${selectedPatientId}\")\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n        `\n    };\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        let deletedPatient = resData.data.deletePatient;\n        console.log(deletedPatient);\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({userAlert: responseAlert});\n\n        let deletedPatientId = deletedPatient._id;\n        deletedPatient = this.state.patients.find(e => e._id === deletedPatientId);\n        const deletedPatientPos = this.state.patients.indexOf(deletedPatient);\n        const slicedArray = this.state.patients.splice(deletedPatientPos, 1);\n        console.log(\"deletedPatient:  \", JSON.stringify(deletedPatient),\"  deletedUserPos:  \", deletedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.setState({ deleting: false });\n\n        this.fetchPatients();\n\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n        if (this.isActive) {\n          this.setState({ deleting: false });\n        }\n      });\n  }\n\n\n  deletePatientInsuranceItem = (props) => {\n\n    let token = this.context.token;\n    let userId = this.context.userId;\n    let patientId = this.state.selectedPatient._id;\n\n    console.log(`\n      delete patient insurance item:\n      props: ${JSON.stringify(props)},\n      token: ${token},\n      userId: ${userId},\n      patientId: ${patientId},\n      `);\n\n      const requestBody = {\n        query: `\n         mutation {deletePatientInsurance (userId:\"${userId}\", patientId:\"${patientId}\",insuranceCompany:\"${props.company}\",insuranceNumber:\"${props.number}\")\n         {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `};\n\n          fetch('http://localhost:10000/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n              'Content-Type': 'application/json',\n              Authorization: 'Bearer ' + token\n            }\n          })\n            .then(res => {\n              if (res.status !== 200 && res.status !== 201) {\n                throw new Error('Failed!');\n              }\n              return res.json();\n            })\n            .then(resData => {\n              let deletedPatient = resData.data.deletePatientInsurance;\n              console.log(deletedPatient);\n\n              const updatedPatientId = resData.data.deletePatientInsurance._id;\n              const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n              const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n              const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n              console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n              this.state.patients.push(resData.data.deletePatientInsurance);\n              this.context.patients = this.state.patients;\n              const responseAlert = JSON.stringify(resData.data).slice(2,25);\n              this.setState({ userAlert: responseAlert})\n              // this.setState({ userAlert: responseAlert, selectedPatient: resData.data.deletePatientInsurance})\n              this.fetchPatients();\n\n            })\n            .catch(err => {\n              console.log(err);\n            });\n\n  }\n\n  deletePatientAppointmentItem = (props) => {\n\n    let token = this.context.token;\n    let userId = this.context.userId;\n    let patientId = this.state.selectedPatient._id;\n    let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n    console.log(`\n      delete patient appointment item:\n      props: ${JSON.stringify(props)},\n      token: ${token},\n      userId: ${userId},\n      patientId: ${patientId},\n      appointment date: ${date},\n      `);\n\n      const requestBody = {\n        query: `\n         mutation {deletePatientAppointment (userId:\"${userId}\", patientId:\"${patientId}\",appointmentId:\"${props._id}\",appointmentDate:\"${date}\")\n         {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `};\n\n          fetch('http://localhost:10000/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n              'Content-Type': 'application/json',\n              Authorization: 'Bearer ' + token\n            }\n          })\n            .then(res => {\n              if (res.status !== 200 && res.status !== 201) {\n                throw new Error('Failed!');\n              }\n              return res.json();\n            })\n            .then(resData => {\n              let deletedPatient = resData.data.deletePatientAppointment;\n              console.log(deletedPatient);\n\n              const updatedPatientId = resData.data.deletePatientAppointment._id;\n              const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n              const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n              const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n              console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n              this.state.patients.push(resData.data.deletePatientAppointment);\n              this.context.patients = this.state.patients;\n              const responseAlert = JSON.stringify(resData.data).slice(2,25);\n              this.setState({ userAlert: responseAlert})\n              this.fetchPatients();\n\n            })\n            .catch(err => {\n              console.log(err);\n            });\n}\n\n  deletePatientConsultantItem = (props) => {\n\n    let token = this.context.token;\n    let userId = this.context.userId;\n    let patientId = this.state.selectedPatient._id;\n    let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n    console.log(`\n      delete patient consultant item:\n      props: ${JSON.stringify(props)},\n      token: ${token},\n      userId: ${userId},\n      patientId: ${patientId},\n      consultant date: ${date},\n      `);\n\n      const requestBody = {\n        query: `\n         mutation {deletePatientConsultant (userId:\"${userId}\", patientId:\"${patientId}\",consultantId:\"${props.reference.id}\",consultantDate:\"${date}\")\n         {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `};\n\n          fetch('http://localhost:10000/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n              'Content-Type': 'application/json',\n              Authorization: 'Bearer ' + token\n            }\n          })\n            .then(res => {\n              if (res.status !== 200 && res.status !== 201) {\n                throw new Error('Failed!');\n              }\n              return res.json();\n            })\n            .then(resData => {\n              let deletedPatient = resData.data.deletePatientConsultant;\n              console.log(deletedPatient);\n\n              const updatedPatientId = resData.data.deletePatientConsultant._id;\n              const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n              const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n              const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n              console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n              this.state.patients.push(resData.data.deletePatientConsultant);\n              this.context.patients = this.state.patients;\n              const responseAlert = JSON.stringify(resData.data).slice(2,25);\n              this.setState({ userAlert: responseAlert})\n              this.fetchPatients();\n\n            })\n            .catch(err => {\n              console.log(err);\n            });\n}\n\ndeletePatientNextOfKinItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n\n  console.log(`\n    delete patient nextOfKin item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientNextOfKin (userId:\"${userId}\", patientId:\"${patientId}\",nextOfKinName:\"${props.name}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientNextOfKin;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientNextOfKin._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientNextOfKin);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientComplaintItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n  let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n  console.log(`\n    delete patient Complaint item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    complaint date: ${date},\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientComplaint (userId:\"${userId}\", patientId:\"${patientId}\",complaintTitle:\"${props.title}\",complaintDate:\"${date}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientComplaint;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientComplaint._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientComplaint);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientSurveyItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n  let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n  console.log(`\n    delete patient Survey item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    survey date: ${date}\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientSurvey (userId:\"${userId}\", patientId:\"${patientId}\",surveyTitle:\"${props.title}\",surveyDate:\"${date}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientSurvey;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientSurvey._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientSurvey);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientSystematicInquiryItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n  let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n  console.log(`\n    delete patient SystematicInquiry item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    systematicInquiry date: ${date}\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientSystematicInquiry (userId:\"${userId}\", patientId:\"${patientId}\",systematicInquiryTitle:\"${props.title}\",systematicInquiryDate:\"${date}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientSystematicInquiry;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientSystematicInquiry._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientSystematicInquiry);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientVitalsItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n  let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n  console.log(`\n    delete patient Vitals item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    vitals date: ${date},\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientVitals (userId:\"${userId}\", patientId:\"${patientId}\",vitalsDate:\"${date}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientVitals;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientVitals._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientVitals);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientExaminationItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n  let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n  console.log(`\n    delete patient Examination item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    examination date: ${date},\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientExamination (userId:\"${userId}\", patientId:\"${patientId}\",examinationType:\"${props.type}\",examinationDate:\"${date}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientExamination;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientExamination._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientExamination);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientHistoryItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n  let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n  console.log(`\n    delete patient History item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    history date: ${date},\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientHistory (userId:\"${userId}\", patientId:\"${patientId}\",historyTitle:\"${props.title}\",historyDate:\"${date}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientHistory;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientHistory._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientHistory);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientAllergiesItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n\n  console.log(`\n    delete patient Allergies item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientAllergies (userId:\"${userId}\", patientId:\"${patientId}\",allergiesTitle:\"${props.title}\",allergiesType:\"${props.type}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientAllergies;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientAllergies._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientAllergies);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientMedicationItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n\n  console.log(`\n    delete patient Medication item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientMedication (userId:\"${userId}\", patientId:\"${patientId}\",medicationTitle:\"${props.title}\",medicationType:\"${props.type}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientMedication;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientMedication._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientMedication);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert});\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientInvestigationItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n  let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n  console.log(`\n    delete patient Investigation item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    investigation date: ${date},\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientInvestigation (userId:\"${userId}\", patientId:\"${patientId}\",investigationDate:\"${date}\",investigationTitle:\"${props.title}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientInvestigation;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientInvestigation._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientInvestigation);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientDiagnosisItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n  let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n  console.log(`\n    delete patient Diagnosis item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    diagnosis date: ${date}\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientDiagnosis (userId:\"${userId}\",patientId:\"${patientId}\",diagnosisDate:\"${date}\",diagnosisTitle:\"${props.title}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientDiagnosis;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientDiagnosis._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientDiagnosis);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert});\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientTreatmentItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n  let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n  console.log(`\n    delete patient Treatment item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    treatment date: ${date},\n    `);\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientTreatment (userId:\"${userId}\", patientId:\"${patientId}\",treatmentDate:\"${date}\",treatmentTitle:\"${props.title}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientTreatment;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientTreatment._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientTreatment);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert});\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientBillingItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n  let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n  console.log(`\n    delete patient Billing item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    billing date: ${date},\n    `);\n\n    const requestBody = {\n      query:`\n       mutation {deletePatientBilling (userId:\"${userId}\", patientId:\"${patientId}\",billingDate:\"${date}\",billingTitle:\"${props.title}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientBilling;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientBilling._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientBilling);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert});\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientVigilanceItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n  let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n  console.log(`\n    delete patient Vigilance item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    vigilance date: ${date},\n    `);\n\n    const requestBody = {\n      query:`\n       mutation {deletePatientVigilance (userId:\"${userId}\", patientId:\"${patientId}\",vigilanceDate:\"${date}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientVigilance;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientVigilance._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientVigilance);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert});\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientAttachmentItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n\n  // console.log(`\n  //   deleting from s3...\n  //   file.name: ${props.name},\n  //   `);\n  //\n  //   const config = {\n  //     bucketName: this.context.creds.s3.bucketName,\n  //     dirName: props.path,\n  //     region: this.context.creds.s3.region,\n  //     accessKeyId: this.context.creds.s3.accessKeyId,\n  //     secretAccessKey: this.context.creds.s3.secretAccessKey,\n  //   }\n  // const ReactS3Client = new S3(config);\n  // const filename = props.name;\n  // // const attachmentName = newFileName;\n  // //\n  // S3FileUpload\n  // .deleteFile(filename, config)\n  // .then(response => console.log(response))\n  // .catch(err => console.error(err))\n\n  console.log(`\n    delete patient Attachment item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    `);\n\n    const requestBody = {\n      query:`\n       mutation {deletePatientAttachment (userId:\"${userId}\", patientId:\"${patientId}\",attachmentName:\"${props.name}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientAttachment;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientAttachment._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientAttachment);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert});\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientNoteItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n\n  console.log(`\n    delete patient Note item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    `);\n\n    const requestBody = {\n      query:`\n      mutation {deletePatientNote (userId:\"${userId}\", patientId:\"${patientId}\",note:\"${props}\")\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientNote;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientNote._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientNote);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert});\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n          });\n}\n\ndeletePatientTagItem = (props) => {\n\n  let token = this.context.token;\n  let userId = this.context.userId;\n  let patientId = this.state.selectedPatient._id;\n\n  console.log(`\n    delete patient Tag item:\n    props: ${JSON.stringify(props)},\n    token: ${token},\n    userId: ${userId},\n    patientId: ${patientId},\n    `);\n\n    const requestBody = {\n      query:`\n      mutation {deletePatientTag (userId:\"${userId}\", patientId:\"${patientId}\",tag:\"${props}\")\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientTag;\n            console.log(deletedPatient);\n\n            const updatedPatientId = resData.data.deletePatientTag._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n            this.state.patients.push(resData.data.deletePatientTag);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert});\n            this.fetchPatients();\n\n          })\n          .catch(err => {\n            console.log(err);\n            this.setState({ userAlert: err})\n          });\n}\n\n\n  updatePatientSpecial (event) {\n\n    console.log(\"special field to update:  \", event.target.value);\n    const field = event.target.value;\n    this.setState({ patientUpdateField: field});\n\n  }\n\n  onViewAttachment = (attachment) => {\n    console.log(`\n      setting up attachment viewer...\n      attachment: ${JSON.stringify(attachment)}\n      `);\n      this.setState({showAttachment: true})\n\n      const file = \"https://ent-emr-bucket.s3-us-east-2.amazonaws.com/\"+attachment.path+\"/\"+attachment.name;\n      const type = attachment.format;\n\n      this.setState({showThisAttachmentFile: file, showThisAttachmentType: type})\n  }\n\n  closeAttachmentView = () => {\n    console.log(`\n      closing attachment viewer...\n      `);\n      this.setState({showAttachment: false})\n  }\n\n  createPdf = (patient) => {\n    console.log(`\n        creating pdf...\n        user: ${JSON.stringify(patient)}\n      `);\n\n      const pdfData = {\n        title: \"This pdf is supplied with Patient data...\",\n        patient: {\n          _id: patient._id,\n          title: patient.title,\n          name: patient.name,\n          dob: patient.dob,\n          age: patient.age,\n          gender: patient.gender,\n          address:{\n            number: patient.number,\n            street: patient.street,\n            town: patient.town,\n            parish: patient.parish,\n            postOffice: patient.postOffice\n          },\n          registrationDate: patient.registrationDate,\n          referralDate: patient.referralDate,\n          expirationDate: patient.expirationDate,\n          attendingPhysician:{\n            name: patient.attendingPhysician.name,\n            email: patient.attendingPhysician.email,\n            phone: patient.attendingPhysician.phone\n          },\n          referringDoctor: {\n            name: patient.referringDoctor.name,\n            email: patient.referringDoctor.email,\n            phone: patient.referringDoctor.phone\n          },\n          contact: {\n            phone: patient.contact.phone,\n            email: patient.contact.email\n          },\n          occupation:{\n            role: patient.occupation.role,\n            employer: patient.occupation.employer,\n            contact:{\n              phone: patient.occupation.contact.phone,\n              email: patient.occupation.contact.email\n            }},\n            appointments: patient.appointments,\n            consultant: patient.consultant,\n            insurance: patient.insurance,\n            nextOfKin: patient.nextOfKin,\n            complaints: patient.complaints,\n            surveys: patient.surveys,\n            systematicInquiry: patient.systematicInquiry,\n            vitals: patient.vitals,\n            examination: patient.examination,\n            history: patient.history,\n            allergies: patient.allergies,\n            medication: patient.medication,\n            investigation: patient.investigation,\n            diagnosis: patient.diagnosis,\n            treatment: patient.treatment,\n            billing: patient.billing,\n            vigilance: patient.vigilance,\n            attachments: patient.attachments,\n            notes: patient.notes,\n            tags: patient.tags\n          }\n        }\n\n    this.setState({createPdf: true, pdfData: pdfData})\n  }\n\n  closePdfCreator = () => {\n    console.log(`\n      closing pdf creator...\n      `);\n      this.setState({createPdf: false, pdfData: null} )\n  }\n\n\n  showDetailHandler = patientId => {\n\n    this.setState({ visitList: [] })\n\n    this.setState(prevState => {\n      const selectedPatient = prevState.patients.find(e => e._id === patientId);\n      this.context.selectedPatient = selectedPatient;\n      this.context.selectedPatientId = selectedPatient._id;\n      console.log(\"selectedPatient:  \", selectedPatient);\n      return { selectedPatient: selectedPatient };\n    });\n  };\n\n  selectVisit = (props) => {\n    console.log(`\n      changing selected visit ...\n      event: ${JSON.stringify(props)},\n      `);\n      this.setState({ selectedVisit: props })\n\n  }\n\n  closeVisit = () => {\n    console.log(`\n      clearing selected visits...\n      `);\n\n    this.setState({\n      visit: null,\n      selectedVisit: null,\n    })\n  }\n\n  createVisitChecklistUpdate = (props) => {\n    console.log(`\n      updating create-visit checklist...\n      props: ${props},\n      `);\n      this.setState({ userAlert: `creating visit: ${props} addedd...`})\n\n      let newState = Object.assign({}, this.state);\n      newState.createVisitChecklist[props] = true;\n      this.setState(newState);\n\n  }\n\n  newVisitComplete = () => {\n    console.log(`\n      finished adding new visit...\n      `);\n      this.setState({\n          newVisit: false,\n          createVisitChecklist: {\n            consultant: true,\n            complaint: true,\n            diagnosis: true,\n            examination: true,\n            investigation: true,\n            survey: true,\n            systematicInquiry: true,\n            treatment: true,\n            vitals: true,\n            billing: true,\n            vigilance: true\n          }\n      })\n  }\n\n\n  componentWillUnmount() {\n    this.isActive = false;\n  }\n\n  render() {\n    return (\n\n    <React.Fragment>\n    {this.state.showAttachment === true && (\n      <AttachmentViewer\n        onCloseAttachmentView={this.closeAttachmentView}\n        attachmentFile={this.state.showThisAttachmentFile}\n        attachmentType={this.state.showThisAttachmentType}\n      />\n    )}\n\n    {this.state.createPdf === true && (\n        <PdfCreator\n          pdfData={this.state.pdfData}\n          onClosePdfCreator={this.closePdfCreator}\n        />\n    )}\n\n    <Accordion>\n\n    <Row>\n    <Col md={3} className=\"MasterCol1\">\n\n    <AlertBox\n          authUserId={this.context.userId}\n          alert={this.state.userAlert}\n        />\n      <SidebarPage/>\n    </Col>\n\n    <Col md={9} className=\"MasterCol2\">\n    <Container className=\"containerCombinedDetail\">\n\n    <Tab.Container id=\"left-tabs-example\" defaultActiveKey=\"patientDetail\">\n      <Row>\n        <Col sm={2}>\n          <Nav variant=\"pills\" className=\"flex-column\">\n            <Nav.Item>\n              <Nav.Link eventKey=\"MasterList\">MASTER LIST</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientDetail\">Selected</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientCreate\">Create New</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"disabled\" disabled>Edit:</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditDemographics\">Demographics</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditField\">Single Field</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"disabled\" disabled>Add:</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientAddVisit\">Visit</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditConsultant\">Consultant</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditInsurance\">Insurance</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditNextOfKin\">Next of Kin</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditComplaint\">History</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditSurvey\">Survey</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditSystematicInquiry\">Systematic Inquiry</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditVitals\">Vitals</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditExamination\">Examination</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditHistory\">Past History</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditAllergies\">Allergies</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditMedication\">Medication</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditInvestigation\">Investigation</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditDiagnosis\">Diagnosis</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditTreatment\">Treatment</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditBilling\">Billing</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditVigilance\">Vigilance</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditAttachment\">Attachment</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditNote\">Note</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"patientEditTag\">Tag</Nav.Link>\n            </Nav.Item>\n\n            <Nav.Item>\n              <Nav.Link eventKey=\"disabled\" disabled>Search:</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"SearchInput\">Input</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"SearchResult\">Search</Nav.Link>\n            </Nav.Item>\n          </Nav>\n        </Col>\n        <Col sm={10}>\n          <Tab.Content>\n            <Tab.Pane eventKey=\"patientDetail\">\n              {this.state.selectedPatient === null &&\n                 (\n                <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient === null &&\n                 (\n                <Button variant=\"outline-danger\" size=\"lg\" className=\"confirmEditButton\">\n                  Don't forget to select someone from the Staff page before editing Patient Consultant information !!!\n                </Button>\n              )}\n              {this.state.isLoading === false &&\n                this.state.selectedPatient !== null &&\n                (<PatientDetail\n                  authUserId={this.context.userId}\n                  token={this.context.token}\n                  patient={this.state.selectedPatient}\n                  onEdit={this.startUpdatePatientHandler}\n                  canDelete={this.state.canDelete}\n                  onDelete={this.modalDeleteHandler}\n                  onGetVisit={this.getPatientVisit}\n                  visit={this.state.visit}\n                  selectedVisit={this.state.selectedVisit}\n                  fetchUsers={this.fetchUsers}\n                  appointmentDelete={this.deletePatientAppointmentItem}\n                  consultantDelete={this.deletePatientConsultantItem}\n                  insuranceDelete={this.deletePatientInsuranceItem}\n                  nextOfKinDelete={this.deletePatientNextOfKinItem}\n                  complaintDelete={this.deletePatientComplaintItem}\n                  surveyDelete={this.deletePatientSurveyItem}\n                  systematicInquiryDelete={this.deletePatientSystematicInquiryItem}\n                  vitalsDelete={this.deletePatientVitalsItem}\n                  examinationDelete={this.deletePatientExaminationItem}\n                  historyDelete={this.deletePatientHistoryItem}\n                  allergiesDelete={this.deletePatientAllergiesItem}\n                  medicationDelete={this.deletePatientMedicationItem}\n                  investigationDelete={this.deletePatientInvestigationItem}\n                  diagnosisDelete={this.deletePatientDiagnosisItem}\n                  treatmentDelete={this.deletePatientTreatmentItem}\n                  billingDelete={this.deletePatientBillingItem}\n                  vigilanceDelete={this.deletePatientVigilanceItem}\n                  attachmentDelete={this.deletePatientAttachmentItem}\n                  noteDelete={this.deletePatientNoteItem}\n                  tagDelete={this.deletePatientTagItem}\n                  onViewAttachment={this.onViewAttachment}\n                  onCreatePdf={this.createPdf}\n                  onGetVisitList={this.getVisitList}\n                  visitList={this.state.visitList}\n                  onSelectVisit={this.selectVisit}\n                  onCloseVisit={this.closeVisit}\n                  onSortVisitListAsc={this.getVisitListAsc}\n                  onSortVisitListDesc={this.getVisitListDesc}\n                  />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientCreate\">\n              <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" onClick={this.startCreatePatientHandler} >Create NEW Patient Profile</Button>\n              {\n                this.state.creating && (\n                  <CreatePatientForm\n                  canCancel\n                    canConfirm\n                    onCancel={this.modalCancelHandler}\n                    onConfirm={this.modalConfirmHandler}\n                    confirmText=\"Confirm\"\n                  />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientAddVisit\">\n            {this.state.selectedPatient === null && (\n              <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                Select a Patient from the Master List\n              </Button>\n            )}\n              { this.state.selectedPatient !== null &&\n                this.state.newVisit !== true &&\n              (<Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" onClick={this.startCreateVisitHandler} >Add NEW Visit</Button>\n              )}\n              {this.state.selectedPatient !== null &&\n                this.state.newVisit === true && (\n\n                  <Accordion defaultActiveKey=\"0\">\n                    <Card>\n                      <Card.Header>\n                        <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"0\">\n                          Guide:\n                        </Accordion.Toggle>\n                      </Card.Header>\n                      <Accordion.Collapse eventKey=\"0\">\n                        <Card.Body>\n                        <Card.Text>\n                          To create a NEW Patient Visit, fill in the forms below.\n                        </Card.Text>\n\n                        <Card.Text>\n                          Everytime you submit a form with new info, a new item is added to the current Patient visit.\n                        </Card.Text>\n\n                        <Card.Text>\n                          When you are done with a section click the GREEN Done adding Complaints, Vitals etc and continue to the next form.\n                        </Card.Text>\n\n                        <Card.Text>\n                          Once you have submitted all the information required scroll to the bottom and click the green button.\n                        </Card.Text>\n                        </Card.Body>\n                      </Accordion.Collapse>\n                    </Card>\n                    <Card>\n                      <Card.Header>\n                        <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"1\">\n                          Consultant\n                        </Accordion.Toggle>\n                      </Card.Header>\n                      <Accordion.Collapse eventKey=\"1\">\n                        <Card.Body>\n                        Add Consultant form:\n                        {this.state.createVisitChecklist.consultant === true &&\n                        (\n                          <Button variant=\"warning\" size=\"lg\" className=\"formButton\">\n                          Consultant for this Visit has already been added!!\n                          </Button>\n                        )}\n\n                        {this.state.createVisitChecklist.consultant === false &&\n                        this.context.selectedUser === null && (\n                          <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                            Select someone from the Staff page\n                          </Button>\n                        )}\n                        {this.state.createVisitChecklist.consultant === false &&\n                        this.context.selectedUser !== null && (\n                          <Row>\n                          <Card.Text>Add Consultant: {this.context.selectedUser.name}  ...</Card.Text>\n                          <Card.Text> To Paitient: {this.state.selectedPatient.name} ??</Card.Text>\n\n                          </Row>\n                        )}\n                        {this.state.createVisitChecklist.consultant === false &&\n                        this.context.selectedUser !== null && (\n                          <UpdatePatientConsultantForm\n                          authUserId={this.context.userId}\n                            canConfirm\n                            onCancel={this.modalCancelHandler}\n                            onConfirm={this.updatePatientConsultantHandler}\n                            confirmText=\"Confirm\"\n                            consultant={this.context.selectedUser}\n                            visit\n                            onCreateVisitChecklistUpdate={this.createVisitChecklistUpdate}\n                          />\n                        )}\n                        </Card.Body>\n                      </Accordion.Collapse>\n                    </Card>\n                    <Card>\n                      <Card.Header>\n                        <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"2\">\n                          Complaint\n                        </Accordion.Toggle>\n                      </Card.Header>\n                      <Accordion.Collapse eventKey=\"2\">\n                        <Card.Body>\n                        Add Complaint form:\n                        {this.state.createVisitChecklist.complaint === true &&\n                        (\n                          <Button variant=\"warning\" size=\"lg\" className=\"formButton\">\n                          Complaint for this Visit has already been added!!\n                          </Button>\n                        )}\n                        {this.state.createVisitChecklist.complaint === false &&\n                        (<UpdatePatientComplaintForm\n                              authUserId={this.context.userId}\n                                canConfirm\n                                onCancel={this.modalCancelHandler}\n                                onConfirm={this.updatePatientComplaintHandler}\n                                confirmText=\"Confirm\"\n                                patient={this.state.selectedPatient}\n                                visit\n                                onCreateVisitChecklistUpdate={this.createVisitChecklistUpdate}\n                              />\n                            )}\n                        </Card.Body>\n                      </Accordion.Collapse>\n                    </Card>\n                    <Card>\n                      <Card.Header>\n                        <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"3\">\n                          Vitals\n                        </Accordion.Toggle>\n                      </Card.Header>\n                      <Accordion.Collapse eventKey=\"3\">\n                        <Card.Body>\n                        Add Vitals form:\n                        {this.state.createVisitChecklist.vitals === true &&\n                        (\n                          <Button variant=\"warning\" size=\"lg\" className=\"formButton\">\n                          Vitals for this Visit have already been added!!\n                          </Button>\n                        )}\n                        {this.state.createVisitChecklist.vitals === false && (\n                          <UpdatePatientVitalsForm\n                                authUserId={this.context.userId}\n                                  canConfirm\n                                  onCancel={this.modalCancelHandler}\n                                  onConfirm={this.updatePatientVitalsHandler}\n                                  confirmText=\"Confirm\"\n                                  patient={this.state.selectedPatient}\n                                  visit\n                                  onCreateVisitChecklistUpdate={this.createVisitChecklistUpdate}\n                                />\n                        )}\n                        </Card.Body>\n                      </Accordion.Collapse>\n                    </Card>\n                    <Card>\n                      <Card.Header>\n                        <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"4\">\n                          Examination\n                        </Accordion.Toggle>\n                      </Card.Header>\n                      <Accordion.Collapse eventKey=\"4\">\n                        <Card.Body>\n                        Add Examination form:\n                        {this.state.createVisitChecklist.examination === true &&\n                        (\n                          <Button variant=\"warning\" size=\"lg\" className=\"formButton\">\n                          Examination for this Visit has already been added!!\n                          </Button>\n                        )}\n                        {this.state.createVisitChecklist.examination === false && (\n                          <UpdatePatientExaminationForm\n                                authUserId={this.context.userId}\n                                  canConfirm\n                                  onCancel={this.modalCancelHandler}\n                                  onConfirm={this.updatePatientExaminationHandler}\n                                  confirmText=\"Confirm\"\n                                  patient={this.state.selectedPatient}\n                                  visit\n                                  onCreateVisitChecklistUpdate={this.createVisitChecklistUpdate}\n                                />\n                        )}\n                        </Card.Body>\n                      </Accordion.Collapse>\n                    </Card>\n                    <Card>\n                      <Card.Header>\n                        <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"5\">\n                          Survey\n                        </Accordion.Toggle>\n                      </Card.Header>\n                      <Accordion.Collapse eventKey=\"5\">\n                        <Card.Body>\n                        Add Survey form:\n                        {this.state.createVisitChecklist.survey === true && (\n                          <Button variant=\"warning\" size=\"lg\" className=\"formButton\">\n                          Survey for this Visit has already been added!!\n                          </Button>\n                        )}\n                        {this.state.createVisitChecklist.survey === false && (\n                          <UpdatePatientSurveyForm\n                            authUserId={this.context.userId}\n                            canConfirm\n                            onCancel={this.modalCancelHandler}\n                            onConfirm={this.updatePatientSurveyHandler}\n                            confirmText=\"Confirm\"\n                            patient={this.state.selectedPatient}\n                            visit\n                            onCreateVisitChecklistUpdate={this.createVisitChecklistUpdate}\n                          />\n                        )}\n                        </Card.Body>\n                      </Accordion.Collapse>\n                    </Card>\n                    <Card>\n                      <Card.Header>\n                        <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"22\">\n                          SystematicInquiry\n                        </Accordion.Toggle>\n                      </Card.Header>\n                      <Accordion.Collapse eventKey=\"22\">\n                        <Card.Body>\n                        Add Systematic Inquiry form:\n                        {this.state.createVisitChecklist.systematicInquiry === true && (\n                          <Button variant=\"warning\" size=\"lg\" className=\"formButton\">\n                          Systematic Inquiry for this Visit has already been added!!\n                          </Button>\n                        )}\n                        {this.state.createVisitChecklist.systematicInquiry === false && (\n                          <UpdatePatientSystematicInquiryForm\n                            authUserId={this.context.userId}\n                            canConfirm\n                            onCancel={this.modalCancelHandler}\n                            onConfirm={this.updatePatientSystematicInquiryHandler}\n                            confirmText=\"Confirm\"\n                            patient={this.state.selectedPatient}\n                            visit\n                            onCreateVisitChecklistUpdate={this.createVisitChecklistUpdate}\n                          />\n                        )}\n                        </Card.Body>\n                      </Accordion.Collapse>\n                    </Card>\n                    <Card>\n                      <Card.Header>\n                        <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"6\">\n                          Investigation\n                        </Accordion.Toggle>\n                      </Card.Header>\n                      <Accordion.Collapse eventKey=\"6\">\n                        <Card.Body>\n                        Add Investigation form:\n                        {this.state.createVisitChecklist.investigation === true && (\n                          <Button variant=\"warning\" size=\"lg\" className=\"formButton\">\n                          Investigation for this Visit has already been added!!\n                          </Button>\n                        )}\n                        {this.state.createVisitChecklist.investigation === false && (\n                          <UpdatePatientInvestigationForm\n                                authUserId={this.context.userId}\n                                  canConfirm\n                                  onCancel={this.modalCancelHandler}\n                                  onConfirm={this.updatePatientInvestigationHandler}\n                                  confirmText=\"Confirm\"\n                                  patient={this.state.selectedPatient}\n                                  visit\n                                  onCreateVisitChecklistUpdate={this.createVisitChecklistUpdate}\n                                />\n                        )}\n                        </Card.Body>\n                      </Accordion.Collapse>\n                    </Card>\n                    <Card>\n                      <Card.Header>\n                        <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"7\">\n                          Diagnosis\n                        </Accordion.Toggle>\n                      </Card.Header>\n                      <Accordion.Collapse eventKey=\"7\">\n                        <Card.Body>\n                        Add Diagnosis form:\n                        {this.state.createVisitChecklist.diagnosis === true && (\n                          <Button variant=\"warning\" size=\"lg\" className=\"formButton\">\n                          Diagnosis for this Visit has already been added!!\n                          </Button>\n                        )}\n                        {this.state.createVisitChecklist.diagnosis === false && (\n                          <UpdatePatientDiagnosisForm\n                              authUserId={this.context.userId}\n                              canConfirm\n                              onCancel={this.modalCancelHandler}\n                              onConfirm={this.updatePatientDiagnosisHandler}\n                              confirmText=\"Confirm\"\n                              patient={this.state.selectedPatient}\n                              visit\n                              onCreateVisitChecklistUpdate={this.createVisitChecklistUpdate}\n                            />\n                        )}\n                        </Card.Body>\n                      </Accordion.Collapse>\n                    </Card>\n                    <Card>\n                      <Card.Header>\n                        <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"8\">\n                          Treatment\n                        </Accordion.Toggle>\n                      </Card.Header>\n                      <Accordion.Collapse eventKey=\"8\">\n                        <Card.Body>\n                        Add Treatment form:\n                        {this.state.createVisitChecklist.treatment === true && (\n                          <Button variant=\"warning\" size=\"lg\" className=\"formButton\">\n                          Treatment for this Visit has already been added!!\n                          </Button>\n                        )}\n                        {this.state.createVisitChecklist.treatment === false && (\n                          <UpdatePatientTreatmentForm\n                              authUserId={this.context.userId}\n                              canCancel\n                              canConfirm\n                              onCancel={this.modalCancelHandler}\n                              onConfirm={this.updatePatientTreatmentHandler}\n                              confirmText=\"Confirm\"\n                              patient={this.state.selectedPatient}\n                              visit\n                              onCreateVisitChecklistUpdate={this.createVisitChecklistUpdate}\n                            />\n                        )}\n                        </Card.Body>\n                      </Accordion.Collapse>\n                    </Card>\n                    <Card>\n                      <Card.Header>\n                        <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"9\">\n                          Billing\n                        </Accordion.Toggle>\n                      </Card.Header>\n                      <Accordion.Collapse eventKey=\"9\">\n                        <Card.Body>\n                        Add Billing form:\n                        {this.state.createVisitChecklist.billing === true &&\n                        (\n                          <Button variant=\"warning\" size=\"lg\" className=\"formButton\">\n                          Billing for this Visit has already been added!!\n                          </Button>\n                        )}\n                        {this.state.createVisitChecklist.billing === false && (\n                          <UpdatePatientBillingForm\n                              authUserId={this.context.userId}\n                              canConfirm\n                              onCancel={this.modalCancelHandler}\n                              onConfirm={this.updatePatientBillingHandler}\n                              confirmText=\"Confirm\"\n                              patient={this.state.selectedPatient}\n                              visit\n                              onCreateVisitChecklistUpdate={this.createVisitChecklistUpdate}\n                            />\n                        )}\n                        </Card.Body>\n                      </Accordion.Collapse>\n                    </Card>\n                    <Card>\n                      <Card.Header>\n                        <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"23\">\n                          Vigilance\n                        </Accordion.Toggle>\n                      </Card.Header>\n                      <Accordion.Collapse eventKey=\"23\">\n                        <Card.Body>\n                        Add Vigilance form:\n                        {this.state.createVisitChecklist.vigilance === true &&\n                        (\n                          <Button variant=\"warning\" size=\"lg\" className=\"formButton\">\n                          Vigilance for this Visit has already been added!!\n                          </Button>\n                        )}\n                        {this.state.createVisitChecklist.vigilance === false && (\n                          <UpdatePatientVigilanceForm\n                              authUserId={this.context.userId}\n                              canConfirm\n                              onCancel={this.modalCancelHandler}\n                              onConfirm={this.updatePatientVigilanceHandler}\n                              confirmText=\"Confirm\"\n                              patient={this.state.selectedPatient}\n                              visit\n                              onCreateVisitChecklistUpdate={this.createVisitChecklistUpdate}\n                            />\n                        )}\n                        </Card.Body>\n                      </Accordion.Collapse>\n                    </Card>\n                    <Card>\n                      <Card.Header>\n                        <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"10\">\n                          Finished ?\n                        </Accordion.Toggle>\n                      </Card.Header>\n                      <Accordion.Collapse eventKey=\"10\">\n                        <Card.Body>\n                        <Button variant=\"success\" className=\"formButton\" onClick={this.newVisitComplete}>\n                        Done creating Visit\n                        </Button>\n                        </Card.Body>\n                      </Accordion.Collapse>\n                    </Card>\n                  </Accordion>\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditDemographics\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" onClick={this.startUpdatePatientHandler}>Edit Demographics</Button>\n              )}\n              {this.state.updating &&\n                this.state.selectedPatient !== null\n                && (\n                <UpdatePatientForm\n                authUserId={this.context.userId}\n                canCancel\n                  canConfirm\n                  onCancel={this.modalCancelHandler}\n                  onConfirm={this.modalConfirmUpdateHandler}\n                  confirmText=\"Confirm\"\n                  patient={this.state.selectedPatient}\n                />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditField\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" onClick={this.startUpdatePatientHandler}>Edit a Single Field</Button>\n              )}\n              {this.state.updating &&\n                this.state.selectedPatient !== null\n                && (\n                  <UpdatePatientFieldForm\n                    authUserId={this.context.userId}\n                    canCancel\n                    canConfirm\n                    onCancel={this.modalCancelHandler}\n                    onConfirm={this.modalConfirmUpdateFieldHandler}\n                    confirmText=\"Confirm\"\n                    patient={this.state.selectedPatient}\n                  />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditConsultant\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='consultant' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add a Consultant</Button>\n              )}\n              {this.state.patientUpdateField === 'consultant' &&\n              this.state.selectedPatient !== null &&\n              this.context.selectedUser === null &&\n              (\n                <Row>\n                <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                  Select someone from the Staff page\n                </Button>\n                </Row>\n              )}\n              {this.state.patientUpdateField === 'consultant' &&\n              this.state.selectedPatient !== null &&\n              (\n                <Row>\n                <p>Add Consultant: {this.context.selectedUser.name}  ...</p>\n                <p> To Paitient: {this.state.selectedPatient.name} ??</p>\n\n                </Row>\n              )}\n              {this.state.patientUpdateField === 'consultant' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientConsultantForm\n                authUserId={this.context.userId}\n                canCancel\n                  canConfirm\n                  onCancel={this.modalCancelHandler}\n                  onConfirm={this.updatePatientConsultantHandler}\n                  confirmText=\"Confirm\"\n                  consultant={this.context.selectedUser}\n                />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditInsurance\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='insurance' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Insurance</Button>\n              )}\n              {this.state.patientUpdateField === 'insurance' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientInsuranceForm\n                authUserId={this.context.userId}\n                canCancel\n                  canConfirm\n                  onCancel={this.modalCancelHandler}\n                  onConfirm={this.updatePatientInsuranceHandler}\n                  confirmText=\"Confirm\"\n                  patient={this.state.selectedPatient}\n                />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditNextOfKin\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='nextOfKin' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add NextOfKin</Button>\n              )}\n              {this.state.patientUpdateField === 'nextOfKin' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientNextOfKinForm\n                      authUserId={this.context.userId}\n                      canCancel\n                        canConfirm\n                        onCancel={this.modalCancelHandler}\n                        onConfirm={this.updatePatientNextOfKinHandler}\n                        confirmText=\"Confirm\"\n                        patient={this.state.selectedPatient}\n                      />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditComplaint\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='complaint' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add History</Button>\n              )}\n              {this.state.patientUpdateField === 'complaint' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientComplaintForm\n                      authUserId={this.context.userId}\n                      canCancel\n                        canConfirm\n                        onCancel={this.modalCancelHandler}\n                        onConfirm={this.updatePatientComplaintHandler}\n                        confirmText=\"Confirm\"\n                        patient={this.state.selectedPatient}\n                      />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditSurvey\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='survey' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Survey</Button>\n              )}\n              {this.state.patientUpdateField === 'survey' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientSurveyForm\n                      authUserId={this.context.userId}\n                      canCancel\n                        canConfirm\n                        onCancel={this.modalCancelHandler}\n                        onConfirm={this.updatePatientSurveyHandler}\n                        confirmText=\"Confirm\"\n                        patient={this.state.selectedPatient}\n                      />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditSystematicInquiry\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='systematicInquiry' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Systematic Inquiry</Button>\n              )}\n              {this.state.patientUpdateField === 'systematicInquiry' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientSystematicInquiryForm\n                      authUserId={this.context.userId}\n                      canCancel\n                        canConfirm\n                        onCancel={this.modalCancelHandler}\n                        onConfirm={this.updatePatientSystematicInquiryHandler}\n                        confirmText=\"Confirm\"\n                        patient={this.state.selectedPatient}\n                      />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditVitals\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='vitals' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Vitals</Button>\n              )}\n              {this.state.patientUpdateField === 'vitals' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientVitalsForm\n                      authUserId={this.context.userId}\n                      canCancel\n                        canConfirm\n                        onCancel={this.modalCancelHandler}\n                        onConfirm={this.updatePatientVitalsHandler}\n                        confirmText=\"Confirm\"\n                        patient={this.state.selectedPatient}\n                      />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditExamination\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='examintion' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Examination</Button>\n              )}\n              {this.state.patientUpdateField === 'examintion' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientExaminationForm\n                      authUserId={this.context.userId}\n                      canCancel\n                        canConfirm\n                        onCancel={this.modalCancelHandler}\n                        onConfirm={this.updatePatientExaminationHandler}\n                        confirmText=\"Confirm\"\n                        patient={this.state.selectedPatient}\n                      />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditHistory\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='history' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Past History</Button>\n              )}\n              {this.state.patientUpdateField === 'history' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientHistoryForm\n                authUserId={this.context.userId}\n                canCancel\n                  canConfirm\n                  onCancel={this.modalCancelHandler}\n                  onConfirm={this.updatePatientHistoryHandler}\n                  confirmText=\"Confirm\"\n                  patient={this.state.selectedPatient}\n                />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditAllergies\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='allergies' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Allergies</Button>\n              )}\n              {this.state.patientUpdateField === 'allergies' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientAllergiesForm\n                      authUserId={this.context.userId}\n                      canCancel\n                        canConfirm\n                        onCancel={this.modalCancelHandler}\n                        onConfirm={this.updatePatientAllergiesHandler}\n                        confirmText=\"Confirm\"\n                        patient={this.state.selectedPatient}\n                      />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditMedication\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='medication' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Medication</Button>\n              )}\n              {this.state.patientUpdateField === 'medication' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientMedicationForm\n                authUserId={this.context.userId}\n                canCancel\n                  canConfirm\n                  onCancel={this.modalCancelHandler}\n                  onConfirm={this.updatePatientMedicationHandler}\n                  confirmText=\"Confirm\"\n                  patient={this.state.selectedPatient}\n                />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditInvestigation\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='investigation' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Investigation</Button>\n              )}\n              {this.state.patientUpdateField === 'investigation' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientInvestigationForm\n                      authUserId={this.context.userId}\n                      canCancel\n                        canConfirm\n                        onCancel={this.modalCancelHandler}\n                        onConfirm={this.updatePatientInvestigationHandler}\n                        confirmText=\"Confirm\"\n                        patient={this.state.selectedPatient}\n                      />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditDiagnosis\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='diagnosis' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Diagnosis</Button>\n              )}\n              {this.state.patientUpdateField === 'diagnosis' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientDiagnosisForm\n                      authUserId={this.context.userId}\n                      canCancel\n                        canConfirm\n                        onCancel={this.modalCancelHandler}\n                        onConfirm={this.updatePatientDiagnosisHandler}\n                        confirmText=\"Confirm\"\n                        patient={this.state.selectedPatient}\n                      />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditTreatment\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='treatment' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Treatment</Button>\n              )}\n              {this.state.patientUpdateField === 'treatment' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientTreatmentForm\n                      authUserId={this.context.userId}\n                      canCancel\n                        canConfirm\n                        onCancel={this.modalCancelHandler}\n                        onConfirm={this.updatePatientTreatmentHandler}\n                        confirmText=\"Confirm\"\n                        patient={this.state.selectedPatient}\n                      />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditBilling\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='billing' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Billing</Button>\n              )}\n              {this.state.patientUpdateField === 'billing' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientBillingForm\n                      authUserId={this.context.userId}\n                      canCancel\n                        canConfirm\n                        onCancel={this.modalCancelHandler}\n                        onConfirm={this.updatePatientBillingHandler}\n                        confirmText=\"Confirm\"\n                        patient={this.state.selectedPatient}\n                      />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditVigilance\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='vigilance' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Vigilance</Button>\n              )}\n              {this.state.patientUpdateField === 'vigilance' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientVigilanceForm\n                      authUserId={this.context.userId}\n                      canCancel\n                        canConfirm\n                        onCancel={this.modalCancelHandler}\n                        onConfirm={this.updatePatientVigilanceHandler}\n                        confirmText=\"Confirm\"\n                        patient={this.state.selectedPatient}\n                      />\n              )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditAttachment\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='attachment' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Attachment</Button>\n              )}\n              {this.state.patientUpdateField === 'attachment' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientAttachmentForm\n                      authUserId={this.context.userId}\n                      canCancel\n                        canConfirm\n                        onCancel={this.modalCancelHandler}\n                        onConfirm={this.updatePatientAttachmentHandler}\n                        confirmText=\"Confirm\"\n                        patient={this.state.selectedPatient}\n                      />\n                    )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditNote\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='notes' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Note</Button>\n              )}\n              {this.state.patientUpdateField === 'notes' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientNoteForm\n                      authUserId={this.context.userId}\n                      canCancel\n                        canConfirm\n                        onCancel={this.modalCancelHandler}\n                        onConfirm={this.updatePatientNoteHandler}\n                        confirmText=\"Confirm\"\n                        patient={this.state.selectedPatient}\n                      />\n                    )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"patientEditTag\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              {this.state.selectedPatient !== null && (\n                <Button variant=\"outline-primary\" value='tags' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Tag</Button>\n              )}\n              {this.state.patientUpdateField === 'tags' &&\n              this.state.selectedPatient !== null\n              && (\n                <UpdatePatientTagForm\n                      authUserId={this.context.userId}\n                      canCancel\n                        canConfirm\n                        onCancel={this.modalCancelHandler}\n                        onConfirm={this.updatePatientTagHandler}\n                        confirmText=\"Confirm\"\n                        patient={this.state.selectedPatient}\n                      />\n                    )}\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"MasterList\">\n              <Container className=\"containerUserMasterList\">\n              <Row className=\"searchListRow\">\n              <Button variant=\"primary\" size=\"sm\" onClick={this.fetchPatientsAsc}>\n                 Sort Asc\n               </Button>\n              <Button variant=\"info\" size=\"sm\" onClick={this.fetchPatientsDesc}>\n                 Sort Desc\n               </Button>\n              {this.state.isLoading ? (\n                <Spinner />\n              ) : (\n                <PatientList\n                  patients={this.state.patients}\n                  authUserId={this.context.userId}\n                  onViewDetail={this.showDetailHandler}\n                />\n              )}\n              </Row>\n              </Container>\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"SearchInput\">\n              <Container className=\"containerSearchUserInput\">\n                {this.context.token && (\n                <Row className=\"searchUserRowAdd\">\n                <Button variant=\"primary\" onClick={this.startSearchPatientHandler}>Search</Button>\n                </Row>\n              )}\n\n              <Row className=\"searchUserRowForm\">\n              <Col md={10} className=\"searchUserColForm\">\n              <Tabs defaultActiveKey=\"Field\" id=\"uncontrolled-tab-example\">\n              <Tab eventKey=\"Search\" title=\"Search:\" disabled>\n              </Tab>\n              <Tab eventKey=\"Field\" title=\"Search by Field:\">\n              {this.state.searching !== true && (\n                <Button variant=\"outline-warning\" className=\"confirmEditButton\" size=\"lg\">\n                  Click the 'Search' Button start\n                </Button>\n              )}\n              {this.state.searching === true && (\n                <SearchPatientForm\n                authUserId={this.context.userId}\n                canCancel\n                  canConfirm\n                  onCancel={this.modalCancelHandler}\n                  onConfirm={this.modalConfirmSearchHandler}\n                  confirmText=\"Search\"\n                  patient={this.context.selectedPatient}\n                />\n              )}\n              </Tab>\n              <Tab eventKey=\"Id\" title=\"Search by ID:\">\n              {this.state.searching !== true && (\n                <Button variant=\"outline-warning\" className=\"confirmEditButton\" size=\"lg\">\n                  Click the 'Search' Button start\n                </Button>\n              )}\n              {this.state.searching === true && (\n                <SearchPatientIdForm\n                authUserId={this.context.userId}\n                canCancel\n                  canConfirm\n                  onCancel={this.modalCancelHandler}\n                  onConfirm={this.modalConfirmSearchIdHandler}\n                  confirmText=\"Search\"\n                  patient={this.context.selectedPatient}\n                />\n              )}\n              </Tab>\n\n              <Tab eventKey=\"Name\" title=\"Search by Name:\">\n              {this.state.searching !== true && (\n                <Button variant=\"outline-warning\" className=\"confirmEditButton\" size=\"lg\">\n                  Click the 'Search' Button start\n                </Button>\n              )}\n              {this.state.searching === true && (\n                <SearchPatientNameForm\n                authUserId={this.context.userId}\n                canCancel\n                  canConfirm\n                  onCancel={this.modalCancelHandler}\n                  onConfirm={this.modalConfirmSearchNameHandler}\n                  confirmText=\"Search\"\n                  patient={this.context.selectedPatient}\n                />\n              )}\n              </Tab>\n              </Tabs>\n              </Col>\n              </Row>\n              </Container>\n            </Tab.Pane>\n\n            <Tab.Pane eventKey=\"SearchResult\">\n              <Container className=\"containerSearchUserResults\">\n              <Row>\n                <Card className=\"searchCard\">\n                  <Card.Body className=\"searchCardBody\">\n                    <Card.Title>Your Search</Card.Title>\n                    <Card.Text>\n                      Field: {this.state.patientSearchField}\n                    </Card.Text>\n                    <Card.Text>\n                      Query: {this.state.patientSearchQuery}\n                    </Card.Text>\n                  </Card.Body>\n                </Card>\n              </Row>\n              <Row className=\"searchListRow\">\n              {\n                this.state.searchPatients !== [] &&\n                <SearchPatientList\n                  searchPatients={this.state.searchPatients}\n                  authUserId={this.context.userId}\n                  onCancel={this.modalCancelHandler}\n                    onViewDetail={this.showDetailHandler}\n                />\n              }\n              </Row>\n              </Container>\n            </Tab.Pane>\n          </Tab.Content>\n        </Col>\n      </Row>\n    </Tab.Container>\n\n\n\n    </Container>\n\n\n\n\n\n    </Col>\n\n    <Col md={3} className=\"MasterCol3\">\n\n\n    </Col>\n    </Row>\n\n</Accordion>\n\n      </React.Fragment>\n    );\n  }\n}\n\nexport default PatientsPage;\n"]},"metadata":{},"sourceType":"module"}