{"ast":null,"code":"var _jsxFileName = \"/Users/pedrojacob/Downloads/AMR/websites/office_records/ENT_EMR/frontend/src/pages/Users.js\";\nimport React, { Component } from 'react'; // import Form from 'react-bootstrap/Form';\n// import Button from 'react-bootstrap/Button';\n// import Modal from '../components/Modal/Modal';\n// import Backdrop from '../components/Backdrop/Backdrop';\n\nimport UserList from '../components/Users/UserList/UserList';\nimport UserDetail from '../components/Users/UserDetail';\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\nimport CreateUserForm from '../components/Forms/CreateUserForm';\nimport UpdateUserForm from '../components/Forms/UpdateUserForm';\nimport './Users.css';\n\nclass UsersPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      creating: false,\n      updating: false,\n      users: [],\n      isLoading: false,\n      selectedUser: null\n    };\n    this.isActive = true;\n\n    this.startCreateUserHandler = () => {\n      this.setState({\n        creating: true\n      });\n      console.log(\"CreateUserForm...\");\n    };\n\n    this.startUpdateUserHandler = () => {\n      this.setState({\n        updating: true\n      });\n      console.log(\"UpdateUserForm...\");\n    };\n\n    this.modalConfirmHandler = event => {\n      console.log(\"CreateUserFormData:  \", event.target.formGridEmail.value);\n      this.setState({\n        creating: false\n      });\n      const email = event.target.formGridEmail.value;\n      const password = event.target.formGridPassword.value;\n      const name = event.target.formGridName.value;\n      const role = event.target.formGridRole.value;\n\n      if (email.trim().length === 0 || password.trim().length === 0 || name.trim().length === 0 || role.trim().length === 0) {\n        console.log(\"blank fields detected!!!...Please try again...\");\n        return;\n      }\n\n      const user = {\n        email,\n        password,\n        name,\n        role\n      };\n      console.log(\"creating user.. \" + JSON.stringify(user));\n      const requestBody = {\n        query: \"\\n          mutation CreateUser($email: String!, $password: String!, $name: String!, $role: String!) {\\n            createUser(userInput: {email: $email, password: $password, name: $name, role: $role}) {\\n              _id\\n              email\\n              password\\n              name\\n              role\\n            }\\n          }\\n        \",\n        variables: {\n          email: email,\n          password: password,\n          name: name,\n          role: role\n        }\n      };\n      const token = this.context.token;\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n        this.setState(prevState => {\n          const updatedUsers = [...prevState.users];\n          updatedUsers.push({\n            _id: resData.data.createUser._id,\n            email: resData.data.createUser.email,\n            name: resData.data.createUser.name,\n            role: resData.data.createUser.role\n          });\n          return {\n            users: updatedUsers\n          };\n        });\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.modalConfirmUpdateHandler = event => {\n      let userId = this.context.userId;\n      let selectedUserId = this.context.selectedUser._id;\n\n      if (userId !== selectedUserId && this.context.user.role !== 'admin') {\n        console.log(\"Not the creator or Admin! No edit permission!!\");\n        selectedUserId = null;\n      }\n\n      console.log(\"UpdateUserFormData:  \", event.target.formGridEmail.value);\n      this.setState({\n        updating: false\n      });\n      let email = event.target.formGridEmail.value;\n      let password = event.target.formGridPassword.value;\n      let name = event.target.formGridName.value;\n      let role = event.target.formGridRole.value;\n      const updateFields = [email, password, name, role]; // for each run function\n\n      updateFields.forEach(element => this.existingFieldCheck(element));\n\n      if (email.trim().length === 0 || password.trim().length === 0 || name.trim().length === 0 || role.trim().length === 0) {\n        // console.log(\"blank feilds detected!!...email:  \", email, \"  password:  \", password, \"  name:  \", name, \"  role:  \", role);\n        //\n        // email = this.state.selectedUser.email;\n        // password = this.state.selectedUser.password;\n        // name = this.state.selectedUser.name;\n        // role = this.state.selectedUser.role;\n        // console.log(\"inputting previous data...email:  \", email, \"  password:  \", password, \"  name:  \", name, \"  role:  \", role);\n        console.log(\"blank fields detected!!!...Please try again...\");\n        return;\n      }\n\n      const user = {\n        email,\n        password,\n        name,\n        role\n      };\n      console.log(\"updating user.. \" + JSON.stringify(user));\n      const requestBody = {\n        query: \"\\n          mutation UpdateUser($userId: ID!, $selectedUserId: ID!, $email: String!, $password: String!, $name: String!, $role: String!) {\\n            updateUser(userId: $userId, selectedUserId: $selectedUserId, userInput: {email: $email, password: $password, name: $name, role: $role}) {\\n              _id\\n              email\\n              password\\n              name\\n              role\\n            }\\n          }\\n        \",\n        variables: {\n          userId: userId,\n          selectedUserId: selectedUserId,\n          email: email,\n          password: password,\n          name: name,\n          role: role\n        }\n      };\n      const token = this.context.token;\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n        const updatedUserId = resData.data.updateUser._id;\n        const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n        const updatedUserPos = this.state.users.indexOf(updatedUser);\n        const slicedArray = this.state.users.splice(updatedUserPos, 1);\n        console.log(\"updatedUser:  \", JSON.stringify(updatedUser), \"  updatedUserPos:  \", updatedUserPos, \"  slicedArray:  \", slicedArray);\n        this.state.users.push({\n          _id: resData.data.updateUser._id,\n          email: resData.data.updateUser.email,\n          name: resData.data.updateUser.name,\n          role: resData.data.updateUser.role\n        });\n        this.fetchUsers();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.modalCancelHandler = () => {\n      this.setState({\n        creating: false,\n        updating: false,\n        selectedUser: null\n      });\n    };\n\n    this.showDetailHandler = userId => {\n      this.setState(prevState => {\n        const selectedUser = prevState.users.find(e => e._id === userId);\n        this.context.selectedUser = selectedUser;\n        this.setState({\n          selectedUser: selectedUser\n        });\n        console.log(\"User selected  :  \", selectedUser);\n        return {\n          selectedUser: selectedUser\n        };\n      });\n    };\n\n    this.emailElRef = React.createRef();\n    this.passwordElRef = React.createRef();\n    this.nameElRef = React.createRef();\n    this.roleElRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.fetchUsers();\n  }\n\n  existingFieldCheck(args) {\n    let field = \"''\" + args + \"''\";\n    console.log(\"existingFieldCheck function:  \", args, [args], field, this.context.selectedUser[field]);\n\n    if (args.trim().length === 0) {\n      console.log(\"field check: emptyFields detected!!\", [args]);\n      args = this.context.selectedUser[field];\n      console.log(\"args:  \", args);\n    } // return args;\n\n  }\n\n  fetchUsers() {\n    console.log(\"'fetch users function' context object... \" + JSON.stringify(this.context));\n    const userId = this.context.userId;\n    this.setState({\n      isLoading: true\n    });\n    const requestBody = {\n      query: \"\\n          query users($userId: ID!) {\\n            users(userId: $userId) {\\n              _id\\n              email\\n              password\\n              name\\n              role\\n            }\\n          }\\n        \",\n      variables: {\n        userId: userId\n      }\n    };\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    }).then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n\n      return res.json();\n    }).then(resData => {\n      const users = resData.data.users;\n      console.log(users);\n\n      if (this.isActive) {\n        this.setState({\n          users: users,\n          isLoading: false\n        });\n      }\n    }).catch(err => {\n      console.log(err);\n\n      if (this.isActive) {\n        this.setState({\n          isLoading: false\n        });\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    this.isActive = false;\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328\n      },\n      __self: this\n    }, this.state.creating && React.createElement(CreateUserForm, {\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmHandler,\n      onSubmit: this.modalConfirmHandler,\n      confirmText: \"Confirm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331\n      },\n      __self: this\n    }), this.state.updating && React.createElement(UpdateUserForm, {\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmUpdateHandler,\n      confirmText: \"Confirm\",\n      user: this.context.selectedUser,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342\n      },\n      __self: this\n    }), this.state.isLoading === false && React.createElement(UserDetail, {\n      authUserId: this.context.userId,\n      user: this.state.selectedUser,\n      onEdit: this.startUpdateUserHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 352\n      },\n      __self: this\n    }), this.context.token && React.createElement(\"div\", {\n      className: \"users-control\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 359\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 360\n      },\n      __self: this\n    }, \"Add New User\"), React.createElement(\"button\", {\n      className: \"btn\",\n      onClick: this.startCreateUserHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361\n      },\n      __self: this\n    }, \"+\")), this.state.isLoading ? React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367\n      },\n      __self: this\n    }) : React.createElement(UserList, {\n      users: this.state.users,\n      authUserId: this.context.userId,\n      onViewDetail: this.showDetailHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 369\n      },\n      __self: this\n    }));\n  }\n\n}\n\nUsersPage.contextType = AuthContext;\nexport default UsersPage;","map":{"version":3,"sources":["/Users/pedrojacob/Downloads/AMR/websites/office_records/ENT_EMR/frontend/src/pages/Users.js"],"names":["React","Component","UserList","UserDetail","Spinner","AuthContext","CreateUserForm","UpdateUserForm","UsersPage","constructor","props","state","creating","updating","users","isLoading","selectedUser","isActive","startCreateUserHandler","setState","console","log","startUpdateUserHandler","modalConfirmHandler","event","target","formGridEmail","value","email","password","formGridPassword","name","formGridName","role","formGridRole","trim","length","user","JSON","stringify","requestBody","query","variables","token","context","fetch","method","body","headers","Authorization","then","res","status","Error","json","resData","prevState","updatedUsers","push","_id","data","createUser","catch","err","modalConfirmUpdateHandler","userId","selectedUserId","updateFields","forEach","element","existingFieldCheck","updatedUserId","updateUser","updatedUser","find","e","updatedUserPos","indexOf","slicedArray","splice","fetchUsers","modalCancelHandler","showDetailHandler","emailElRef","createRef","passwordElRef","nameElRef","roleElRef","componentDidMount","args","field","componentWillUnmount","render","contextType"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CACA;AACA;AAEA;AACA;;AACA,OAAOC,QAAP,MAAqB,uCAArB;AACA,OAAOC,UAAP,MAAuB,gCAAvB;AACA,OAAOC,OAAP,MAAoB,+BAApB;AACA,OAAOC,WAAP,MAAwB,yBAAxB;AAEA,OAAOC,cAAP,MAA2B,oCAA3B;AACA,OAAOC,cAAP,MAA2B,oCAA3B;AACA,OAAO,aAAP;;AAEA,MAAMC,SAAN,SAAwBP,SAAxB,CAAkC;AAYhCQ,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AADiB,SAXnBC,KAWmB,GAXX;AACNC,MAAAA,QAAQ,EAAE,KADJ;AAENC,MAAAA,QAAQ,EAAE,KAFJ;AAGNC,MAAAA,KAAK,EAAE,EAHD;AAINC,MAAAA,SAAS,EAAE,KAJL;AAKNC,MAAAA,YAAY,EAAE;AALR,KAWW;AAAA,SAJnBC,QAImB,GAJR,IAIQ;;AAAA,SAanBC,sBAbmB,GAaM,MAAM;AAC7B,WAAKC,QAAL,CAAc;AAAEP,QAAAA,QAAQ,EAAE;AAAZ,OAAd;AACAQ,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACD,KAhBkB;;AAAA,SAiBnBC,sBAjBmB,GAiBM,MAAM;AAC7B,WAAKH,QAAL,CAAc;AAAEN,QAAAA,QAAQ,EAAE;AAAZ,OAAd;AACAO,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACD,KApBkB;;AAAA,SAsBnBE,mBAtBmB,GAsBIC,KAAD,IAAW;AAE/BJ,MAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCG,KAAK,CAACC,MAAN,CAAaC,aAAb,CAA2BC,KAAhE;AAEA,WAAKR,QAAL,CAAc;AAAEP,QAAAA,QAAQ,EAAE;AAAZ,OAAd;AACA,YAAMgB,KAAK,GAAGJ,KAAK,CAACC,MAAN,CAAaC,aAAb,CAA2BC,KAAzC;AACA,YAAME,QAAQ,GAAGL,KAAK,CAACC,MAAN,CAAaK,gBAAb,CAA8BH,KAA/C;AACA,YAAMI,IAAI,GAAGP,KAAK,CAACC,MAAN,CAAaO,YAAb,CAA0BL,KAAvC;AACA,YAAMM,IAAI,GAAGT,KAAK,CAACC,MAAN,CAAaS,YAAb,CAA0BP,KAAvC;;AAEA,UACEC,KAAK,CAACO,IAAN,GAAaC,MAAb,KAAwB,CAAxB,IACAP,QAAQ,CAACM,IAAT,GAAgBC,MAAhB,KAA2B,CAD3B,IAEAL,IAAI,CAACI,IAAL,GAAYC,MAAZ,KAAuB,CAFvB,IAGAH,IAAI,CAACE,IAAL,GAAYC,MAAZ,KAAuB,CAJzB,EAKE;AACAhB,QAAAA,OAAO,CAACC,GAAR,CAAY,gDAAZ;AACA;AACD;;AAED,YAAMgB,IAAI,GAAG;AAAET,QAAAA,KAAF;AAASC,QAAAA,QAAT;AAAmBE,QAAAA,IAAnB;AAAyBE,QAAAA;AAAzB,OAAb;AACAb,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAqBiB,IAAI,CAACC,SAAL,CAAeF,IAAf,CAAjC;AAEA,YAAMG,WAAW,GAAG;AAClBC,QAAAA,KAAK,6VADa;AAYhBC,QAAAA,SAAS,EAAE;AACTd,UAAAA,KAAK,EAAEA,KADE;AAETC,UAAAA,QAAQ,EAAEA,QAFD;AAGTE,UAAAA,IAAI,EAAEA,IAHG;AAITE,UAAAA,IAAI,EAAEA;AAJG;AAZK,OAApB;AAoBA,YAAMU,KAAK,GAAG,KAAKC,OAAL,CAAaD,KAA3B;AAEAE,MAAAA,KAAK,CAAC,gCAAD,EAAmC;AACtCC,QAAAA,MAAM,EAAE,MAD8B;AAEtCC,QAAAA,IAAI,EAAET,IAAI,CAACC,SAAL,CAAeC,WAAf,CAFgC;AAGtCQ,QAAAA,OAAO,EAAE;AACP,0BAAgB,kBADT;AAEPC,UAAAA,aAAa,EAAE,YAAYN;AAFpB;AAH6B,OAAnC,CAAL,CAQGO,IARH,CAQQC,GAAG,IAAI;AACX,YAAIA,GAAG,CAACC,MAAJ,KAAe,GAAf,IAAsBD,GAAG,CAACC,MAAJ,KAAe,GAAzC,EAA8C;AAC5C,gBAAM,IAAIC,KAAJ,CAAU,SAAV,CAAN;AACD;;AACD,eAAOF,GAAG,CAACG,IAAJ,EAAP;AACD,OAbH,EAcGJ,IAdH,CAcQK,OAAO,IAAI;AACfnC,QAAAA,OAAO,CAACC,GAAR,CAAY,sBAAsBiB,IAAI,CAACC,SAAL,CAAegB,OAAf,CAAlC;AACA,aAAKpC,QAAL,CAAcqC,SAAS,IAAI;AACzB,gBAAMC,YAAY,GAAG,CAAC,GAAGD,SAAS,CAAC1C,KAAd,CAArB;AACA2C,UAAAA,YAAY,CAACC,IAAb,CAAkB;AAChBC,YAAAA,GAAG,EAAEJ,OAAO,CAACK,IAAR,CAAaC,UAAb,CAAwBF,GADb;AAEhB/B,YAAAA,KAAK,EAAE2B,OAAO,CAACK,IAAR,CAAaC,UAAb,CAAwBjC,KAFf;AAGhBG,YAAAA,IAAI,EAAEwB,OAAO,CAACK,IAAR,CAAaC,UAAb,CAAwB9B,IAHd;AAIhBE,YAAAA,IAAI,EAAEsB,OAAO,CAACK,IAAR,CAAaC,UAAb,CAAwB5B;AAJd,WAAlB;AAOA,iBAAO;AAAEnB,YAAAA,KAAK,EAAE2C;AAAT,WAAP;AACD,SAVD;AAWD,OA3BH,EA4BGK,KA5BH,CA4BSC,GAAG,IAAI;AACZ3C,QAAAA,OAAO,CAACC,GAAR,CAAY0C,GAAZ;AACD,OA9BH;AA+BD,KAlGkB;;AAAA,SAqGnBC,yBArGmB,GAqGUxC,KAAD,IAAW;AAErC,UAAIyC,MAAM,GAAG,KAAKrB,OAAL,CAAaqB,MAA1B;AACA,UAAIC,cAAc,GAAG,KAAKtB,OAAL,CAAa5B,YAAb,CAA0B2C,GAA/C;;AACA,UAAGM,MAAM,KAAKC,cAAX,IAA6B,KAAKtB,OAAL,CAAaP,IAAb,CAAkBJ,IAAlB,KAA2B,OAA3D,EAAoE;AAElEb,QAAAA,OAAO,CAACC,GAAR,CAAY,gDAAZ;AACA6C,QAAAA,cAAc,GAAG,IAAjB;AACD;;AAED9C,MAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCG,KAAK,CAACC,MAAN,CAAaC,aAAb,CAA2BC,KAAhE;AAEA,WAAKR,QAAL,CAAc;AAAEN,QAAAA,QAAQ,EAAE;AAAZ,OAAd;AACA,UAAIe,KAAK,GAAGJ,KAAK,CAACC,MAAN,CAAaC,aAAb,CAA2BC,KAAvC;AACA,UAAIE,QAAQ,GAAGL,KAAK,CAACC,MAAN,CAAaK,gBAAb,CAA8BH,KAA7C;AACA,UAAII,IAAI,GAAGP,KAAK,CAACC,MAAN,CAAaO,YAAb,CAA0BL,KAArC;AACA,UAAIM,IAAI,GAAGT,KAAK,CAACC,MAAN,CAAaS,YAAb,CAA0BP,KAArC;AAEA,YAAMwC,YAAY,GAAG,CAACvC,KAAD,EAAQC,QAAR,EAAkBE,IAAlB,EAAwBE,IAAxB,CAArB,CAlBqC,CAmBrC;;AACAkC,MAAAA,YAAY,CAACC,OAAb,CAAqBC,OAAO,IAC1B,KAAKC,kBAAL,CAAwBD,OAAxB,CADF;;AAMA,UACEzC,KAAK,CAACO,IAAN,GAAaC,MAAb,KAAwB,CAAxB,IACAP,QAAQ,CAACM,IAAT,GAAgBC,MAAhB,KAA2B,CAD3B,IAEAL,IAAI,CAACI,IAAL,GAAYC,MAAZ,KAAuB,CAFvB,IAGAH,IAAI,CAACE,IAAL,GAAYC,MAAZ,KAAuB,CAJzB,EAKE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAhB,QAAAA,OAAO,CAACC,GAAR,CAAY,gDAAZ;AACA;AACD;;AAGD,YAAMgB,IAAI,GAAG;AAAET,QAAAA,KAAF;AAASC,QAAAA,QAAT;AAAmBE,QAAAA,IAAnB;AAAyBE,QAAAA;AAAzB,OAAb;AACAb,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAqBiB,IAAI,CAACC,SAAL,CAAeF,IAAf,CAAjC;AAEA,YAAMG,WAAW,GAAG;AAClBC,QAAAA,KAAK,mbADa;AAYhBC,QAAAA,SAAS,EAAE;AACTuB,UAAAA,MAAM,EAAEA,MADC;AAETC,UAAAA,cAAc,EAAEA,cAFP;AAGTtC,UAAAA,KAAK,EAAEA,KAHE;AAITC,UAAAA,QAAQ,EAAEA,QAJD;AAKTE,UAAAA,IAAI,EAAEA,IALG;AAMTE,UAAAA,IAAI,EAAEA;AANG;AAZK,OAApB;AAsBA,YAAMU,KAAK,GAAG,KAAKC,OAAL,CAAaD,KAA3B;AAEAE,MAAAA,KAAK,CAAC,gCAAD,EAAmC;AACtCC,QAAAA,MAAM,EAAE,MAD8B;AAEtCC,QAAAA,IAAI,EAAET,IAAI,CAACC,SAAL,CAAeC,WAAf,CAFgC;AAGtCQ,QAAAA,OAAO,EAAE;AACP,0BAAgB,kBADT;AAEPC,UAAAA,aAAa,EAAE,YAAYN;AAFpB;AAH6B,OAAnC,CAAL,CAQGO,IARH,CAQQC,GAAG,IAAI;AACX,YAAIA,GAAG,CAACC,MAAJ,KAAe,GAAf,IAAsBD,GAAG,CAACC,MAAJ,KAAe,GAAzC,EAA8C;AAC5C,gBAAM,IAAIC,KAAJ,CAAU,SAAV,CAAN;AACD;;AACD,eAAOF,GAAG,CAACG,IAAJ,EAAP;AACD,OAbH,EAcGJ,IAdH,CAcQK,OAAO,IAAI;AACfnC,QAAAA,OAAO,CAACC,GAAR,CAAY,sBAAsBiB,IAAI,CAACC,SAAL,CAAegB,OAAf,CAAlC;AAEA,cAAMgB,aAAa,GAAGhB,OAAO,CAACK,IAAR,CAAaY,UAAb,CAAwBb,GAA9C;AACA,cAAMc,WAAW,GAAG,KAAK9D,KAAL,CAAWG,KAAX,CAAiB4D,IAAjB,CAAsBC,CAAC,IAAIA,CAAC,CAAChB,GAAF,KAAUY,aAArC,CAApB;AACA,cAAMK,cAAc,GAAG,KAAKjE,KAAL,CAAWG,KAAX,CAAiB+D,OAAjB,CAAyBJ,WAAzB,CAAvB;AACA,cAAMK,WAAW,GAAG,KAAKnE,KAAL,CAAWG,KAAX,CAAiBiE,MAAjB,CAAwBH,cAAxB,EAAwC,CAAxC,CAApB;AACAxD,QAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BiB,IAAI,CAACC,SAAL,CAAekC,WAAf,CAA9B,EAA0D,qBAA1D,EAAiFG,cAAjF,EAAiG,kBAAjG,EAAqHE,WAArH;AAEA,aAAKnE,KAAL,CAAWG,KAAX,CAAiB4C,IAAjB,CACE;AACIC,UAAAA,GAAG,EAAEJ,OAAO,CAACK,IAAR,CAAaY,UAAb,CAAwBb,GADjC;AAEI/B,UAAAA,KAAK,EAAE2B,OAAO,CAACK,IAAR,CAAaY,UAAb,CAAwB5C,KAFnC;AAGIG,UAAAA,IAAI,EAAEwB,OAAO,CAACK,IAAR,CAAaY,UAAb,CAAwBzC,IAHlC;AAIIE,UAAAA,IAAI,EAAEsB,OAAO,CAACK,IAAR,CAAaY,UAAb,CAAwBvC;AAJlC,SADF;AAQA,aAAK+C,UAAL;AACD,OAhCH,EAiCGlB,KAjCH,CAiCSC,GAAG,IAAI;AACZ3C,QAAAA,OAAO,CAACC,GAAR,CAAY0C,GAAZ;AACD,OAnCH;AAoCD,KAhNkB;;AAAA,SAkNnBkB,kBAlNmB,GAkNE,MAAM;AACzB,WAAK9D,QAAL,CAAc;AAAEP,QAAAA,QAAQ,EAAE,KAAZ;AAAmBC,QAAAA,QAAQ,EAAE,KAA7B;AAAoCG,QAAAA,YAAY,EAAE;AAAlD,OAAd;AACD,KApNkB;;AAAA,SA0RnBkE,iBA1RmB,GA0RCjB,MAAM,IAAI;AAE5B,WAAK9C,QAAL,CAAcqC,SAAS,IAAI;AACzB,cAAMxC,YAAY,GAAGwC,SAAS,CAAC1C,KAAV,CAAgB4D,IAAhB,CAAqBC,CAAC,IAAIA,CAAC,CAAChB,GAAF,KAAUM,MAApC,CAArB;AACA,aAAKrB,OAAL,CAAa5B,YAAb,GAA4BA,YAA5B;AACA,aAAKG,QAAL,CAAc;AAACH,UAAAA,YAAY,EAAEA;AAAf,SAAd;AACAI,QAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCL,YAAlC;AACA,eAAO;AAAEA,UAAAA,YAAY,EAAEA;AAAhB,SAAP;AACD,OAND;AAOD,KAnSkB;;AAEjB,SAAKmE,UAAL,GAAkBnF,KAAK,CAACoF,SAAN,EAAlB;AACA,SAAKC,aAAL,GAAqBrF,KAAK,CAACoF,SAAN,EAArB;AACA,SAAKE,SAAL,GAAiBtF,KAAK,CAACoF,SAAN,EAAjB;AACA,SAAKG,SAAL,GAAiBvF,KAAK,CAACoF,SAAN,EAAjB;AACD;;AAEDI,EAAAA,iBAAiB,GAAG;AAClB,SAAKR,UAAL;AACD;;AA4MDV,EAAAA,kBAAkB,CAACmB,IAAD,EAAO;AACvB,QAAIC,KAAK,GAAG,OAAKD,IAAL,GAAU,IAAtB;AACErE,IAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ,EAA8CoE,IAA9C,EAAoD,CAACA,IAAD,CAApD,EAA4DC,KAA5D,EAAmE,KAAK9C,OAAL,CAAa5B,YAAb,CAA0B0E,KAA1B,CAAnE;;AAEA,QAAID,IAAI,CAACtD,IAAL,GAAYC,MAAZ,KAAuB,CAA3B,EAA+B;AAC7BhB,MAAAA,OAAO,CAACC,GAAR,CAAY,qCAAZ,EAAmD,CAACoE,IAAD,CAAnD;AACAA,MAAAA,IAAI,GAAG,KAAK7C,OAAL,CAAa5B,YAAb,CAA0B0E,KAA1B,CAAP;AACAtE,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBoE,IAAvB;AACD,KARoB,CAUrB;;AACD;;AAEHT,EAAAA,UAAU,GAAG;AACX5D,IAAAA,OAAO,CAACC,GAAR,CAAY,8CAA8CiB,IAAI,CAACC,SAAL,CAAe,KAAKK,OAApB,CAA1D;AACA,UAAMqB,MAAM,GAAG,KAAKrB,OAAL,CAAaqB,MAA5B;AAEA,SAAK9C,QAAL,CAAc;AAAEJ,MAAAA,SAAS,EAAE;AAAb,KAAd;AACA,UAAMyB,WAAW,GAAG;AAClBC,MAAAA,KAAK,+NADa;AAYhBC,MAAAA,SAAS,EAAE;AACTuB,QAAAA,MAAM,EAAEA;AADC;AAZK,KAApB;AAiBApB,IAAAA,KAAK,CAAC,gCAAD,EAAmC;AACtCC,MAAAA,MAAM,EAAE,MAD8B;AAEtCC,MAAAA,IAAI,EAAET,IAAI,CAACC,SAAL,CAAeC,WAAf,CAFgC;AAGtCQ,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEPC,QAAAA,aAAa,EAAE,YAAY,KAAKL,OAAL,CAAaD;AAFjC;AAH6B,KAAnC,CAAL,CAQGO,IARH,CAQQC,GAAG,IAAI;AACX,UAAIA,GAAG,CAACC,MAAJ,KAAe,GAAf,IAAsBD,GAAG,CAACC,MAAJ,KAAe,GAAzC,EAA8C;AAC5C,cAAM,IAAIC,KAAJ,CAAU,SAAV,CAAN;AACD;;AACD,aAAOF,GAAG,CAACG,IAAJ,EAAP;AACD,KAbH,EAcGJ,IAdH,CAcQK,OAAO,IAAI;AACf,YAAMzC,KAAK,GAAGyC,OAAO,CAACK,IAAR,CAAa9C,KAA3B;AACAM,MAAAA,OAAO,CAACC,GAAR,CAAYP,KAAZ;;AAEA,UAAI,KAAKG,QAAT,EAAmB;AACjB,aAAKE,QAAL,CAAc;AAAEL,UAAAA,KAAK,EAAEA,KAAT;AAAgBC,UAAAA,SAAS,EAAE;AAA3B,SAAd;AACD;AACF,KArBH,EAsBG+C,KAtBH,CAsBSC,GAAG,IAAI;AACZ3C,MAAAA,OAAO,CAACC,GAAR,CAAY0C,GAAZ;;AACA,UAAI,KAAK9C,QAAT,EAAmB;AACjB,aAAKE,QAAL,CAAc;AAAEJ,UAAAA,SAAS,EAAE;AAAb,SAAd;AACD;AACF,KA3BH;AA4BD;;AAiBD4E,EAAAA,oBAAoB,GAAG;AACrB,SAAK1E,QAAL,GAAgB,KAAhB;AACD;;AAED2E,EAAAA,MAAM,GAAG;AACP,WACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEI,KAAKjF,KAAL,CAAWC,QAAX,IACA,oBAAC,cAAD;AACA,MAAA,SAAS,MADT;AAEE,MAAA,UAAU,MAFZ;AAGE,MAAA,QAAQ,EAAE,KAAKqE,kBAHjB;AAIE,MAAA,SAAS,EAAE,KAAK1D,mBAJlB;AAKE,MAAA,QAAQ,EAAE,KAAKA,mBALjB;AAME,MAAA,WAAW,EAAC,SANd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHJ,EAaG,KAAKZ,KAAL,CAAWE,QAAX,IACC,oBAAC,cAAD;AACA,MAAA,SAAS,MADT;AAEE,MAAA,UAAU,MAFZ;AAGE,MAAA,QAAQ,EAAE,KAAKoE,kBAHjB;AAIE,MAAA,SAAS,EAAE,KAAKjB,yBAJlB;AAKE,MAAA,WAAW,EAAC,SALd;AAME,MAAA,IAAI,EAAE,KAAKpB,OAAL,CAAa5B,YANrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAdJ,EAuBG,KAAKL,KAAL,CAAWI,SAAX,KAAyB,KAAzB,IACE,oBAAC,UAAD;AACC,MAAA,UAAU,EAAE,KAAK6B,OAAL,CAAaqB,MAD1B;AAEC,MAAA,IAAI,EAAE,KAAKtD,KAAL,CAAWK,YAFlB;AAGC,MAAA,MAAM,EAAE,KAAKM,sBAHd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAxBL,EA8BG,KAAKsB,OAAL,CAAaD,KAAb,IACE;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADD,EAEC;AAAQ,MAAA,SAAS,EAAC,KAAlB;AAAwB,MAAA,OAAO,EAAE,KAAKzB,sBAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAFD,CA/BL,EAsCG,KAAKP,KAAL,CAAWI,SAAX,GACC,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,GAGC,oBAAC,QAAD;AACE,MAAA,KAAK,EAAE,KAAKJ,KAAL,CAAWG,KADpB;AAEE,MAAA,UAAU,EAAE,KAAK8B,OAAL,CAAaqB,MAF3B;AAGE,MAAA,YAAY,EAAE,KAAKiB,iBAHrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAzCJ,CADF;AAkDD;;AAzW+B;;AAA5B1E,S,CAUGqF,W,GAAcxF,W;AAkWvB,eAAeG,SAAf","sourcesContent":["import React, { Component } from 'react';\n// import Form from 'react-bootstrap/Form';\n// import Button from 'react-bootstrap/Button';\n\n// import Modal from '../components/Modal/Modal';\n// import Backdrop from '../components/Backdrop/Backdrop';\nimport UserList from '../components/Users/UserList/UserList';\nimport UserDetail from '../components/Users/UserDetail';\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\n\nimport CreateUserForm from '../components/Forms/CreateUserForm';\nimport UpdateUserForm from '../components/Forms/UpdateUserForm';\nimport './Users.css';\n\nclass UsersPage extends Component {\n  state = {\n    creating: false,\n    updating: false,\n    users: [],\n    isLoading: false,\n    selectedUser: null\n  };\n  isActive = true;\n\n  static contextType = AuthContext;\n\n  constructor(props) {\n    super(props);\n    this.emailElRef = React.createRef();\n    this.passwordElRef = React.createRef();\n    this.nameElRef = React.createRef();\n    this.roleElRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.fetchUsers();\n  }\n\n\n  startCreateUserHandler = () => {\n    this.setState({ creating: true });\n    console.log(\"CreateUserForm...\");\n  };\n  startUpdateUserHandler = () => {\n    this.setState({ updating: true });\n    console.log(\"UpdateUserForm...\");\n  };\n\n  modalConfirmHandler = (event) => {\n\n    console.log(\"CreateUserFormData:  \", event.target.formGridEmail.value);\n\n    this.setState({ creating: false });\n    const email = event.target.formGridEmail.value;\n    const password = event.target.formGridPassword.value;\n    const name = event.target.formGridName.value;\n    const role = event.target.formGridRole.value;\n\n    if (\n      email.trim().length === 0 ||\n      password.trim().length === 0 ||\n      name.trim().length === 0 ||\n      role.trim().length === 0\n    ) {\n      console.log(\"blank fields detected!!!...Please try again...\");\n      return;\n    }\n\n    const user = { email, password, name, role };\n    console.log(\"creating user.. \" + JSON.stringify(user));\n\n    const requestBody = {\n      query: `\n          mutation CreateUser($email: String!, $password: String!, $name: String!, $role: String!) {\n            createUser(userInput: {email: $email, password: $password, name: $name, role: $role}) {\n              _id\n              email\n              password\n              name\n              role\n            }\n          }\n        `,\n        variables: {\n          email: email,\n          password: password,\n          name: name,\n          role: role\n        }\n    };\n\n    const token = this.context.token;\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n        this.setState(prevState => {\n          const updatedUsers = [...prevState.users];\n          updatedUsers.push({\n            _id: resData.data.createUser._id,\n            email: resData.data.createUser.email,\n            name: resData.data.createUser.name,\n            role: resData.data.createUser.role\n          });\n\n          return { users: updatedUsers };\n        });\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n\n  modalConfirmUpdateHandler = (event) => {\n\n    let userId = this.context.userId;\n    let selectedUserId = this.context.selectedUser._id;\n    if(userId !== selectedUserId && this.context.user.role !== 'admin') {\n\n      console.log(\"Not the creator or Admin! No edit permission!!\");\n      selectedUserId = null;\n    }\n\n    console.log(\"UpdateUserFormData:  \", event.target.formGridEmail.value);\n\n    this.setState({ updating: false });\n    let email = event.target.formGridEmail.value;\n    let password = event.target.formGridPassword.value;\n    let name = event.target.formGridName.value;\n    let role = event.target.formGridRole.value;\n\n    const updateFields = [email, password, name, role];\n    // for each run function\n    updateFields.forEach(element =>\n      this.existingFieldCheck(element)\n    )\n\n\n\n    if (\n      email.trim().length === 0 ||\n      password.trim().length === 0 ||\n      name.trim().length === 0 ||\n      role.trim().length === 0\n    ) {\n      // console.log(\"blank feilds detected!!...email:  \", email, \"  password:  \", password, \"  name:  \", name, \"  role:  \", role);\n      //\n      // email = this.state.selectedUser.email;\n      // password = this.state.selectedUser.password;\n      // name = this.state.selectedUser.name;\n      // role = this.state.selectedUser.role;\n      // console.log(\"inputting previous data...email:  \", email, \"  password:  \", password, \"  name:  \", name, \"  role:  \", role);\n      console.log(\"blank fields detected!!!...Please try again...\");\n      return;\n    }\n\n\n    const user = { email, password, name, role };\n    console.log(\"updating user.. \" + JSON.stringify(user));\n\n    const requestBody = {\n      query: `\n          mutation UpdateUser($userId: ID!, $selectedUserId: ID!, $email: String!, $password: String!, $name: String!, $role: String!) {\n            updateUser(userId: $userId, selectedUserId: $selectedUserId, userInput: {email: $email, password: $password, name: $name, role: $role}) {\n              _id\n              email\n              password\n              name\n              role\n            }\n          }\n        `,\n        variables: {\n          userId: userId,\n          selectedUserId: selectedUserId,\n          email: email,\n          password: password,\n          name: name,\n          role: role\n        }\n    };\n\n    const token = this.context.token;\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n\n        const updatedUserId = resData.data.updateUser._id;\n        const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n        const updatedUserPos = this.state.users.indexOf(updatedUser);\n        const slicedArray = this.state.users.splice(updatedUserPos, 1);\n        console.log(\"updatedUser:  \", JSON.stringify(updatedUser),\"  updatedUserPos:  \", updatedUserPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.users.push(\n          {\n              _id: resData.data.updateUser._id,\n              email: resData.data.updateUser.email,\n              name: resData.data.updateUser.name,\n              role: resData.data.updateUser.role\n            }\n        );\n        this.fetchUsers();\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  modalCancelHandler = () => {\n    this.setState({ creating: false, updating: false, selectedUser: null });\n  };\n\n  existingFieldCheck(args) {\n    let field = \"''\"+args+\"''\";\n      console.log(\"existingFieldCheck function:  \", args, [args], field ,this.context.selectedUser[field]);\n\n      if (args.trim().length === 0 ) {\n        console.log(\"field check: emptyFields detected!!\", [args]);\n        args = this.context.selectedUser[field]\n        console.log(\"args:  \", args);\n      }\n\n      // return args;\n    }\n\n  fetchUsers() {\n    console.log(\"'fetch users function' context object... \" + JSON.stringify(this.context));\n    const userId = this.context.userId;\n\n    this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n          query users($userId: ID!) {\n            users(userId: $userId) {\n              _id\n              email\n              password\n              name\n              role\n            }\n          }\n        `,\n        variables: {\n          userId: userId\n        }\n    };\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const users = resData.data.users;\n        console.log(users);\n\n        if (this.isActive) {\n          this.setState({ users: users, isLoading: false });\n        }\n      })\n      .catch(err => {\n        console.log(err);\n        if (this.isActive) {\n          this.setState({ isLoading: false });\n        }\n      });\n  }\n\n\n\n\n  showDetailHandler = userId => {\n\n    this.setState(prevState => {\n      const selectedUser = prevState.users.find(e => e._id === userId);\n      this.context.selectedUser = selectedUser;\n      this.setState({selectedUser: selectedUser});\n      console.log(\"User selected  :  \", selectedUser);\n      return { selectedUser: selectedUser };\n    });\n  };\n\n\n  componentWillUnmount() {\n    this.isActive = false;\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        {\n          this.state.creating && (\n          <CreateUserForm\n          canCancel\n            canConfirm\n            onCancel={this.modalCancelHandler}\n            onConfirm={this.modalConfirmHandler}\n            onSubmit={this.modalConfirmHandler}\n            confirmText=\"Confirm\"\n          />\n        )\n      }\n        {this.state.updating && (\n          <UpdateUserForm\n          canCancel\n            canConfirm\n            onCancel={this.modalCancelHandler}\n            onConfirm={this.modalConfirmUpdateHandler}\n            confirmText=\"Confirm\"\n            user={this.context.selectedUser}\n          />\n        )}\n        {this.state.isLoading === false &&\n          (<UserDetail\n            authUserId={this.context.userId}\n            user={this.state.selectedUser}\n            onEdit={this.startUpdateUserHandler}\n        />)}\n\n        {this.context.token &&\n          (<div className=\"users-control\">\n            <p>Add New User</p>\n            <button className=\"btn\" onClick={this.startCreateUserHandler}>\n              +\n            </button>\n          </div>\n        )}\n        {this.state.isLoading ? (\n          <Spinner />\n        ) : (\n          <UserList\n            users={this.state.users}\n            authUserId={this.context.userId}\n            onViewDetail={this.showDetailHandler}\n          />\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default UsersPage;\n"]},"metadata":{},"sourceType":"module"}