{"ast":null,"code":"var _jsxFileName = \"/Users/pedrojacob/Downloads/AMR/websites/office_records/ENT_EMR/frontend/src/pages/Patients.js\";\nimport React, { Component } from 'react'; // import Form from 'react-bootstrap/Form';\n\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport Accordion from 'react-bootstrap/Accordion'; // import Modal from '../components/Modal/Modal';\n// import Backdrop from '../components/Backdrop/Backdrop';\n\nimport PatientList from '../components/Patients/PatientList/PatientList';\nimport PatientDetail from '../components/Patients/PatientDetail';\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\nimport SearchPatientList from '../components/Patients/PatientList/SearchPatientList';\nimport SearchPatientForm from '../components/Forms/SearchPatientForm';\nimport CreatePatientForm from '../components/Forms/CreatePatientForm';\nimport UpdatePatientForm from '../components/Forms/UpdatePatientForm';\nimport UpdatePatientInsuranceForm from '../components/Forms/UpdatePatientInsuranceForm';\nimport UpdatePatientNextOfKinForm from '../components/Forms/UpdatePatientNextOfKinForm';\nimport UpdatePatientComplaintForm from '../components/Forms/UpdatePatientComplaintForm';\nimport UpdatePatientExaminationForm from '../components/Forms/UpdatePatientExaminationForm';\nimport UpdatePatientHistoryForm from '../components/Forms/UpdatePatientHistoryForm';\nimport UpdatePatientAllergiesForm from '../components/Forms/UpdatePatientAllergiesForm';\nimport UpdatePatientMedicationForm from '../components/Forms/UpdatePatientMedicationForm';\nimport UpdatePatientInvestigationForm from '../components/Forms/UpdatePatientInvestigationForm';\nimport UpdatePatientDiagnosisForm from '../components/Forms/UpdatePatientDiagnosisForm';\nimport UpdatePatientTreatmentForm from '../components/Forms/UpdatePatientTreatmentForm';\nimport UpdatePatientBillingForm from '../components/Forms/UpdatePatientBillingForm'; // import UpdatePatientArrayForm from '../components/Forms/UpdatePatientArrayForm';\n\nimport './Users.css';\n\nclass PatientsPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      creating: false,\n      updating: false,\n      searching: false,\n      updatingArray: false,\n      deleting: false,\n      patients: [],\n      searchPatients: [],\n      isLoading: false,\n      selectedPatient: null,\n      patientUpdateField: null\n    };\n    this.isActive = true;\n\n    this.startCreatePatientHandler = () => {\n      this.setState({\n        creating: true\n      });\n      console.log(\"CreatePatientForm...\");\n    };\n\n    this.startUpdatePatientHandler = () => {\n      this.setState({\n        updating: true,\n        updatingArray: true\n      });\n      console.log(\"UpdatePatientForm...\");\n    };\n\n    this.startSearchPatientHandler = () => {\n      this.setState({\n        searching: true\n      });\n      console.log(\"SearchPatientForm...\");\n    };\n\n    this.modalConfirmHandler = event => {\n      console.log(\"CreatePatientFormData:  \", event.target.formGridName.value);\n      this.setState({\n        creating: false\n      });\n      const userId = this.context.userId;\n      let name = event.target.formGridName.value;\n      let dob = event.target.formGridDob.value;\n      let address = event.target.formGridAddress.value;\n      let contactPhone = event.target.formGridContactPhone.value;\n      let contactEmail = event.target.formGridContactEmail.value;\n      let registrationDate = event.target.formGridRegistrationDate.value;\n      let referringDoctorName = event.target.formGridReferringDoctorName.value;\n      let referringDoctorEmail = event.target.formGridReferringDoctorEmail.value;\n      let referringDoctorPhone = event.target.formGridReferringDoctorPhone.value;\n      let occupationRole = event.target.formGridOccupationRole.value;\n      let occupationEmployer = event.target.formGridOccupationEmployer.value;\n      let occupationEmployerContactPhone = event.target.formGridOccupationEmployerContactPhone.value;\n      let occupationEmployerContactEmail = event.target.formGridOccupationEmployerContactEmail.value;\n\n      if (name.trim().length === 0 || dob.trim().length === 0 || address.trim().length === 0 || contactPhone.trim().length === 0 || contactEmail.trim().length === 0 || registrationDate.trim().length === 0 || referringDoctorName.trim().length === 0 || referringDoctorEmail.trim().length === 0 || referringDoctorPhone.trim().length === 0 || occupationRole.trim().length === 0 || occupationEmployer.trim().length === 0 || occupationEmployerContactPhone.trim().length === 0 || occupationEmployerContactEmail.trim().length === 0) {\n        console.log(\"blank fields detected!!!...Please try again...\");\n        return;\n      }\n\n      const patient = {\n        name,\n        dob,\n        address,\n        contactPhone,\n        contactEmail,\n        registrationDate,\n        referringDoctorName,\n        referringDoctorEmail,\n        referringDoctorPhone,\n        occupationRole,\n        occupationEmployer,\n        occupationEmployerContactPhone,\n        occupationEmployerContactEmail\n      };\n      console.log(\"creating patient.. \" + JSON.stringify(patient));\n      const requestBody = {\n        query: \"\\n          mutation CreatePatient($userId: ID!, $name: String!, $dob: String!, $address: String!, $contactPhone: String!, $contactEmail: String!, $registrationDate: String!, $referringDoctorName: String!, $referringDoctorEmail: String!, $referringDoctorPhone: String!, $occupationRole: String!, $occupationEmployer: String!, $occupationEmployerContactPhone: String!, $occupationEmployerContactEmail: String!) {\\n            createPatient(userId: $userId, patientInput: { name: $name, dob: $dob, address: $address, contactPhone: $contactPhone, contactEmail: $contactEmail, registrationDate: $registrationDate, referringDoctorName: $referringDoctorName, referringDoctorEmail: $referringDoctorEmail, referringDoctorPhone: $referringDoctorPhone, occupationRole: $occupationRole, occupationEmployer: $occupationEmployer, occupationEmployerContactPhone: $occupationEmployerContactPhone, occupationEmployerContactEmail: $occupationEmployerContactEmail }) {\\n              _id\\n              name\\n              address\\n              contact{\\n                email\\n                phone\\n              }\\n              registrationDate\\n              referringDoctor\\n              {\\n                name\\n                email\\n                phone\\n              }\\n              occupation\\n              {\\n                role\\n                employer\\n                contact\\n                {\\n                  email\\n                  phone\\n                }\\n              }\\n            }\\n          }\\n        \",\n        variables: {\n          userId: userId,\n          name: name,\n          dob: dob,\n          address: address,\n          contactPhone: contactPhone,\n          contactEmail: contactEmail,\n          registrationDate: registrationDate,\n          referringDoctorName: referringDoctorName,\n          referringDoctorEmail: referringDoctorEmail,\n          referringDoctorPhone: referringDoctorPhone,\n          occupationRole: occupationRole,\n          occupationEmployer: occupationEmployer,\n          occupationEmployerContactPhone: occupationEmployerContactPhone,\n          occupationEmployerContactEmail: occupationEmployerContactEmail\n        }\n      };\n      const token = this.context.token;\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n        this.setState(prevState => {\n          const updatedPatients = [...prevState.patients];\n          updatedPatients.push({\n            _id: resData.data.createPatient._id,\n            name: resData.data.createPatient.name,\n            dob: resData.data.createPatient.dob,\n            address: resData.data.createPatient.address,\n            contact: {\n              phone: resData.data.createPatient.contactPhone,\n              email: resData.data.createPatient.contactEmail\n            },\n            registrationDate: resData.data.createPatient.registrationDate,\n            referralDate: resData.data.createPatient.referralDate,\n            expirationDate: resData.data.createPatient.expirationDate,\n            referringDoctor: {\n              name: resData.data.createPatient.referringDoctorName,\n              email: resData.data.createPatient.referringDoctorEmail,\n              phone: resData.data.createPatient.referringDoctorPhone\n            },\n            occupation: {\n              role: resData.data.createPatient.occupationRole,\n              employer: resData.data.createPatient.occupationEmployer,\n              contact: {\n                phone: resData.data.createPatient.occupationEmployerContactPhone,\n                email: resData.data.createPatient.occupationEmployerContactEmail\n              }\n            }\n          });\n          return {\n            patients: updatedPatients\n          };\n        });\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.modalCancelHandler = () => {\n      this.setState({\n        creating: false,\n        updating: false,\n        selectedPatient: null\n      });\n    };\n\n    this.modalConfirmUpdateHandler = event => {\n      if (this.context.user.role !== 'admin') {\n        console.log(\"Not the Admin! No edit permission!!\");\n      }\n\n      const userId = this.context.userId;\n      const patientId = this.context.selectedPatient._id; // console.log(\"UpdateUserFormData:  \", event);\n\n      console.log(\"UpdatePatientFormData:  \", event.target.formGridName.value);\n      this.setState({\n        updating: false\n      });\n      let name = event.target.formGridName.value;\n      let dob = event.target.formGridDob.value;\n      let address = event.target.formGridAddress.value;\n      let contactPhone = event.target.formGridContactPhone.value;\n      let contactEmail = event.target.formGridContactEmail.value;\n      let registrationDate = event.target.formGridRegistrationDate.value;\n      let referringDoctorName = event.target.formGridReferringDoctorName.value;\n      let referringDoctorEmail = event.target.formGridReferringDoctorEmail.value;\n      let referringDoctorPhone = event.target.formGridReferringDoctorPhone.value;\n      let occupationRole = event.target.formGridOccupationRole.value;\n      let occupationEmployer = event.target.formGridOccupationEmployer.value;\n      let occupationEmployerContactPhone = event.target.formGridOccupationEmployerContactPhone.value;\n      let occupationEmployerContactEmail = event.target.formGridOccupationEmployerContactEmail.value;\n\n      if (name.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        name = this.context.selectedUser.name; // return;\n      }\n\n      if (dob.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        dob = this.context.selectedUser.dob;\n      }\n\n      if (address.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        address = this.context.selectedUser.address;\n      }\n\n      if (contactPhone.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        contactPhone = this.context.selectedUser.contactPhone;\n      }\n\n      if (contactEmail.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        contactEmail = this.context.selectedUser.contactEmail;\n      }\n\n      if (registrationDate.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        registrationDate = this.context.selectedUser.registrationDate;\n      }\n\n      if (referringDoctorName.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        referringDoctorName = this.context.selectedUser.referringDoctorName;\n      }\n\n      if (referringDoctorEmail.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        referringDoctorEmail = this.context.selectedUser.referringDoctorEmail;\n      }\n\n      if (referringDoctorPhone.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        referringDoctorPhone = this.context.selectedUser.referringDoctorPhone;\n      }\n\n      if (occupationRole.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        occupationRole = this.context.selectedUser.occupationRole;\n      }\n\n      if (occupationEmployer.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        occupationEmployer = this.context.selectedUser.occupationEmployer;\n      }\n\n      if (occupationEmployerContactEmail.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        occupationEmployerContactEmail = this.context.selectedUser.occupationEmployerContactEmail;\n      }\n\n      if (occupationEmployerContactPhone.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        occupationEmployerContactPhone = this.context.selectedUser.occupationEmployerContactPhone;\n      }\n\n      const patient = {\n        name,\n        dob,\n        address,\n        contactPhone,\n        contactEmail,\n        registrationDate,\n        referringDoctorName,\n        referringDoctorEmail,\n        referringDoctorPhone,\n        occupationRole,\n        occupationEmployer,\n        occupationEmployerContactPhone,\n        occupationEmployerContactEmail\n      };\n      console.log(\"\\n      updating patient...\\n      userId: \".concat(userId, \",\\n      patientId: \").concat(patientId, \",\\n      name: \").concat(name, \",\\n      dob: \").concat(dob, \",\\n      address: \").concat(address, \",\\n      contactPhone: \").concat(contactPhone, \",\\n      contactEmail: \").concat(contactEmail, \",\\n      registrationDate: \").concat(registrationDate, \",\\n      referringDoctorName: \").concat(referringDoctorName, \",\\n      referringDoctorEmail: \").concat(referringDoctorEmail, \",\\n      referringDoctorPhone: \").concat(referringDoctorPhone, \",\\n      occupationRole: \").concat(occupationRole, \",\\n      occupationEmployer: \").concat(occupationEmployer, \",\\n      occupationEmployerContactPhone: \").concat(occupationEmployerContactPhone, \",\\n      occupationEmployerContactEmail: \").concat(occupationEmployerContactEmail, \",\\n      \"));\n      const requestBody = {\n        query: \"\\n          mutation {\\n            updatePatient(userId:\\\"\".concat(userId, \"\\\", patientId: \\\"\").concat(patientId, \"\\\", patientInput: { name: \\\"\").concat(name, \"\\\", dob: \\\"\").concat(dob, \"\\\", address: \\\"\").concat(address, \"\\\", contactPhone: \\\"\").concat(contactPhone, \"\\\", contactEmail: \\\"\").concat(contactEmail, \"\\\", registrationDate: \\\"\").concat(registrationDate, \"\\\", referringDoctorName: \\\"\").concat(referringDoctorName, \"\\\", referringDoctorEmail: \\\"\").concat(referringDoctorEmail, \"\\\", referringDoctorPhone: \\\"\").concat(referringDoctorPhone, \"\\\", occupationRole: \\\"\").concat(occupationRole, \"\\\", occupationEmployer: \\\"\").concat(occupationEmployer, \"\\\", occupationEmployerContactPhone: \\\"\").concat(occupationEmployerContactPhone, \"\\\", occupationEmployerContactEmail: \\\"\").concat(occupationEmployerContactEmail, \"\\\" }){\\n              _id\\n              name\\n              address\\n              contact{\\n                email\\n                phone\\n              }\\n              registrationDate\\n              referralDate\\n              expirationDate\\n              referringDoctor{\\n                name\\n                email\\n                phone\\n              }\\n                occupation{\\n                  role\\n                  employer\\n                  contact{\\n                    email\\n                    phone\\n                  }\\n                }\\n                insurance\\n                {\\n                  company\\n                  number\\n                  description\\n                  expiry\\n                  subscriber{\\n                    company\\n                    description\\n                  }\\n                }\\n                nextOfKin{\\n                  name\\n                  contact{\\n                    email\\n                    phone\\n                  }\\n                }\\n                complaints{\\n                  date\\n                  title\\n                  description\\n                  attachment{\\n                    name\\n                    format\\n                    path\\n                  }\\n                }\\n                examination{\\n                  area\\n                  type\\n                  measure\\n                  value\\n                  description\\n                  attachment{\\n                    name\\n                    format\\n                    path\\n                  }\\n                }\\n                history{\\n                  title\\n                  type\\n                  date\\n                  description\\n                  attachment{\\n                    name\\n                    format\\n                    path\\n                  }\\n                }\\n                allergies{\\n                  title\\n                  description\\n                  attachment{\\n                    name\\n                    format\\n                    path\\n                  }\\n                }\\n                medication{\\n                  title\\n                  description\\n                  attachment{\\n                    name\\n                    format\\n                    path\\n                  }\\n                }\\n                investigation{\\n                  date\\n                  title\\n                  description\\n                  attachment{\\n                    name\\n                    format\\n                    path\\n                  }\\n                }\\n                  diagnosis{\\n                    date\\n                    title\\n                    description\\n                    attachment{\\n                      name\\n                      format\\n                      path\\n                    }\\n                  }\\n                  treatment{\\n                    date\\n                    title\\n                    type\\n                    description\\n                    dose\\n                    frequency\\n                    attachment{\\n                      name\\n                      format\\n                      path\\n                    }\\n                  }\\n                  billing{\\n                    date\\n                    title\\n                    type\\n                    description\\n                    amount\\n                    paid\\n                    notes\\n                    attachment\\n                    {\\n                      name\\n                      format\\n                      path\\n                    }\\n                  }\\n            }\\n          }\\n        \")\n      };\n      const token = this.context.token;\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n        const updatedPatientId = resData.data.updatePatient._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push({\n          _id: resData.data.updatePatient._id,\n          name: resData.data.updatePatient.name,\n          dob: resData.data.updatePatient.dob,\n          address: resData.data.updatePatient.address,\n          contact: {\n            phone: resData.data.updatePatient.contactPhone,\n            email: resData.data.updatePatient.contactEmail\n          },\n          registrationDate: resData.data.updatePatient.registrationDate,\n          referringDoctor: {\n            name: resData.data.updatePatient.referringDoctorName,\n            email: resData.data.updatePatient.referringDoctorEmail,\n            phone: resData.data.updatePatient.referringDoctorPhone\n          },\n          occupation: {\n            role: resData.data.updatePatient.occupationRole,\n            employer: resData.data.updatePatient.occupationEmployer,\n            contact: {\n              phone: resData.data.updatePatient.occupationEmployerContactPhone,\n              email: resData.data.updatePatient.occupationEmployerContactEmail\n            }\n          }\n        }); // if (this.state.updatingArray === false && this.state.updating === false) {\n        //   console.log(\"update and updateArray complete...now fetching users\");\n        //\n        // }\n\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.updatePatientInsuranceHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id;\n\n      if (this.context.user.role !== 'admin') {\n        console.log(\"No edit permission!!\");\n        return;\n      }\n\n      console.log(\"UpdatePatientInsuranceFormData:  \", event.target.formGridInsuranceCompany.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let insuranceCompany = event.target.formGridInsuranceCompany.value;\n      let insuranceNumber = event.target.formGridInsuranceNumber.value;\n      let insuranceExpiry = event.target.formGridInsuranceExpiry.value;\n      let insuranceDescription = event.target.formGridInsuranceDescription.value;\n      let insuranceSubscriberCompany = event.target.formGridInsuranceSubscriberCompany.value;\n      let insuranceSubscriberDescription = event.target.formGridInsuranceSubscriberDescription.value;\n      const patientInsurance = {\n        insuranceCompany,\n        insuranceNumber,\n        insuranceExpiry,\n        insuranceDescription,\n        insuranceSubscriberCompany,\n        insuranceSubscriberDescription\n      };\n      console.log(\"\\n    adding patient insurance item...\\n    userId: \".concat(userId, \",\\n    selectedPatientId: \").concat(selectedPatientId, \",\\n    insuranceCompany: \").concat(insuranceCompany, \",\\n    insuranceNumber: \").concat(insuranceNumber, \",\\n    insuranceExpiry: \").concat(insuranceExpiry, \",\\n    insuranceDescription: \").concat(insuranceDescription, \",\\n    insuranceSubscriberCompany: \").concat(insuranceSubscriberCompany, \",\\n    insuranceSubscriberDescription: \").concat(insuranceSubscriberDescription, \",\\n    \"));\n      const requestBody = {\n        query: \"\\n        mutation {updatePatientInsurance(userId:\\\"\".concat(userId, \"\\\", patientId:\\\"\").concat(selectedPatientId, \"\\\",patientInput:{insuranceCompany:\\\"\").concat(insuranceCompany, \"\\\",insuranceNumber:\\\"\").concat(insuranceNumber, \"\\\",insuranceDescription:\\\"\").concat(insuranceDescription, \"\\\",insuranceExpiry:\\\"\").concat(insuranceExpiry, \"\\\",insuranceSubscriberCompany:\\\"\").concat(insuranceSubscriberCompany, \"\\\",insuranceSubscriberDescription:\\\"\").concat(insuranceSubscriberDescription, \"\\\"})\\n        {_id,name,address,contact{email,phone},registrationDate,referralDate,expirationDate,referringDoctor{name,email,phone},occupation{role,employer,contact{email,phone}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{email,phone}},complaints{date,title,description,attachment{name,format,path}},examination{area,type,measure,value,description,attachment{name,format,path}},history{title,type,date,description,attachment{name,format,path}},allergies{title,description,attachment{name,format,path}},medication{title,description,attachment{name,format,path}},investigation{date,title,description,attachment{name,format,path}},diagnosis{date,title,description,attachment{name,format,path}},treatment{date,title,type,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,notes,attachment{name,format,path}}}}\\n      \")\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientInsurance._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(updatedPatient);\n        this.context.patients = this.state.patients;\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.updatePatientNextOfKinHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id;\n\n      if (this.context.user.role !== 'admin') {\n        console.log(\"No edit permission!!\");\n        return;\n      }\n\n      console.log(\"UpdatePatientNextOfKinFormData:  \", event.target.formGridNextOfKinName.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let nextOfKinName = event.target.formGridNextOfKinName.value;\n      let nextOfKinPhone = event.target.formGridNextOfKinPhone.value;\n      let nextOfKinEmail = event.target.formGridNextOfKinEmail.value;\n      const patientNextOfKin = {\n        nextOfKinName,\n        nextOfKinPhone,\n        nextOfKinEmail\n      };\n      console.log(\"\\n    adding patient nextOfKin item...\\n    userId: \".concat(userId, \",\\n    selectedPatientId: \").concat(selectedPatientId, \",\\n    nextOfKinName: \").concat(nextOfKinName, \",\\n    nextOfKinPhone: \").concat(nextOfKinPhone, \",\\n    nextOfKinEmail: \").concat(nextOfKinEmail, \",\\n    \"));\n      const requestBody = {\n        query: \"\\n        mutation {updatePatientNextOfKin(userId:\\\"\".concat(userId, \"\\\", patientId:\\\"\").concat(selectedPatientId, \"\\\",patientInput:{nextOfKinName:\\\"\").concat(nextOfKinName, \"\\\",nextOfKinEmail:\\\"granny@kin.mail\\\",nextOfKinPhone:\\\"1234566\\\"})\\n        {_id,name,address,contact{email,phone},registrationDate,referralDate,expirationDate,referringDoctor{name,email,phone},occupation{role,employer,contact{email,phone}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{email,phone}},complaints{date,title,description,attachment{name,format,path}},examination{area,type,measure,value,description,attachment{name,format,path}},history{title,type,date,description,attachment{name,format,path}},allergies{title,description,attachment{name,format,path}},medication{title,description,attachment{name,format,path}},investigation{date,title,description,attachment{name,format,path}},diagnosis{date,title,description,attachment{name,format,path}},treatment{date,title,type,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,notes,attachment{name,format,path}}}}\\n      \")\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientNextOfKin._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(updatedPatient);\n        this.context.patients = this.state.patients;\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.updatePatientComplaintHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id;\n\n      if (this.context.user.role !== 'admin') {\n        console.log(\"No edit permission!!\");\n        return;\n      }\n\n      console.log(\"UpdatePatientComplaintFormData:  \", event.target.formGridComplaintTitle.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let complaintTitle = event.target.formGridComplaintTitle.value;\n      let complaintDate = event.target.formGridComplaintDate.value;\n      let complaintDescription = event.target.formGridComplaintDescription.value;\n      let complaintAttachmentName = event.target.formGridComplaintAttachmentName.value;\n      let complaintAttachmentFormat = event.target.formGridComplaintAttachmentFormat.value;\n      let complaintAttachmentPath = event.target.formGridComplaintAttachmentPath.value;\n      const patientComplaint = {\n        complaintTitle,\n        complaintDate,\n        complaintDescription,\n        complaintAttachmentName,\n        complaintAttachmentFormat,\n        complaintAttachmentPath\n      };\n      console.log(\"\\n    adding patient complaint...\\n    userId: \".concat(userId, \",\\n    patientId: \").concat(selectedPatientId, \",\\n    complaintTitle: \").concat(complaintTitle, \",\\n    complaintDate: \").concat(complaintDate, \",\\n    complaintDescription: \").concat(complaintDescription, \",\\n    complaintAttachmentName: \").concat(complaintAttachmentName, \",\\n    complaintAttachmentFormat: \").concat(complaintAttachmentFormat, \",\\n    complaintAttachmentPath: \").concat(complaintAttachmentPath, \",\\n    \"));\n      const requestBody = {\n        query: \"\\n        mutation {updatePatientComplaint(userId:\\\"\".concat(userId, \"\\\", patientId:\\\"\").concat(selectedPatientId, \"\\\",patientInput:{complaintDate:\\\"\").concat(complaintDate, \"\\\",complaintTitle:\\\"\").concat(complaintTitle, \"\\\",complaintDescription:\\\"\").concat(complaintDescription, \"\\\",complaintAttachmentName:\\\"\").concat(complaintAttachmentName, \"\\\",complaintAttachmentFormat:\\\"\").concat(complaintAttachmentFormat, \"\\\",complaintAttachmentPath:\\\"\").concat(complaintAttachmentPath, \"\\\"})\\n        {_id,name,address,contact{email,phone},registrationDate,referralDate,expirationDate,referringDoctor{name,email,phone},occupation{role,employer,contact{email,phone}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{email,phone}},complaints{date,title,description,attachment{name,format,path}},examination{area,type,measure,value,description,attachment{name,format,path}},history{title,type,date,description,attachment{name,format,path}},allergies{title,description,attachment{name,format,path}},medication{title,description,attachment{name,format,path}},investigation{date,title,description,attachment{name,format,path}},diagnosis{date,title,description,attachment{name,format,path}},treatment{date,title,type,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,notes,attachment{name,format,path}}}}\\n      \")\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientComplaint._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(updatedPatient);\n        this.context.patients = this.state.patients;\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.updatePatientExaminationHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id;\n\n      if (this.context.user.role !== 'admin') {\n        console.log(\"No edit permission!!\");\n        return;\n      }\n\n      console.log(\"UpdatePatientExaminationFormData:  \", event.target.formGridExaminationArea.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let examinationArea = event.target.formGridExaminationArea.value;\n      let examinationType = event.target.formGridExaminationType.value;\n      let examinationMeasure = event.target.formGridExaminationMeasure.value;\n      let examinationValue = event.target.formGridExaminationValue.value;\n      let examinationDescription = event.target.formGridExaminationDescription.value;\n      let examinationAttachmentName = event.target.formGridExaminationAttachmentName.value;\n      let examinationAttachmentFormat = event.target.formGridExaminationAttachmentFormat.value;\n      let examinationAttachmentPath = event.target.formGridExaminationAttachmentPath.value;\n      const patientExamination = {\n        examinationArea,\n        examinationType,\n        examinationMeasure,\n        examinationValue,\n        examinationAttachmentName,\n        examinationAttachmentFormat,\n        examinationAttachmentPath\n      };\n      console.log(\"\\n    adding patient examination...\\n    userId: \".concat(userId, \",\\n    patientId: \").concat(selectedPatientId, \",\\n    examinationArea: \").concat(examinationArea, \",\\n    examinationType: \").concat(examinationType, \",\\n    examinationMeasure: \").concat(examinationMeasure, \",\\n    examinationValue: \").concat(examinationValue, \",\\n    examinationDescription: \").concat(examinationDescription, \",\\n    examinationAttachmentName: \").concat(examinationAttachmentName, \",\\n    examinationAttachmentFormat: \").concat(examinationAttachmentFormat, \",\\n    examinationAttachmentPath: \").concat(examinationAttachmentPath, \",\\n    \"));\n      const requestBody = {\n        query: \"\\n        mutation {updatePatientExamination(userId:\\\"\".concat(userId, \"\\\", patientId:\\\"\").concat(selectedPatientId, \"\\\",patientInput:{examinationArea:\\\"\").concat(examinationArea, \"\\\",examinationType:\\\"\").concat(examinationType, \"\\\",examinationMeasure:\\\"\").concat(examinationMeasure, \"\\\",examinationValue:\\\"\").concat(examinationValue, \"\\\",examinationDescription:\\\"\").concat(examinationDescription, \"\\\",examinationAttachmentName:\\\"\").concat(examinationAttachmentName, \"\\\",examinationAttachmentFormat:\\\"\").concat(examinationAttachmentFormat, \"\\\",examinationAttachmentPath:\\\"\").concat(examinationAttachmentPath, \"\\\"})\\n        {_id,name,address,contact{email,phone},registrationDate,referralDate,expirationDate,referringDoctor{name,email,phone},occupation{role,employer,contact{email,phone}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{email,phone}},complaints{date,title,description,attachment{name,format,path}},examination{area,type,measure,value,description,attachment{name,format,path}},history{title,type,date,description,attachment{name,format,path}},allergies{title,description,attachment{name,format,path}},medication{title,description,attachment{name,format,path}},investigation{date,title,description,attachment{name,format,path}},diagnosis{date,title,description,attachment{name,format,path}},treatment{date,title,type,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,notes,attachment{name,format,path}}}}\\n      \")\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientExamination._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(updatedPatient);\n        this.context.patients = this.state.patients;\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.updatePatientHistoryHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id;\n\n      if (this.context.user.role !== 'admin') {\n        console.log(\"No edit permission!!\");\n        return;\n      }\n\n      console.log(\"UpdatePatientHistoryFormData:  \", event.target.formGridHistoryTitle.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let historyType = event.target.formGridHistoryType.value;\n      let historyDate = event.target.formGridHistoryDate.value;\n      let historyTitle = event.target.formGridHistoryTitle.value;\n      let historyDescription = event.target.formGridHistoryDescription.value;\n      let historyAttachmentName = event.target.formGridHistoryAttachmentName.value;\n      let historyAttachmentFormat = event.target.formGridHistoryAttachmentFormat.value;\n      let historyAttachmentPath = event.target.formGridHistoryAttachmentPath.value;\n      const patientHistory = {\n        historyType,\n        historyDate,\n        historyTitle,\n        historyDescription,\n        historyAttachmentName,\n        historyAttachmentFormat,\n        historyAttachmentPath\n      };\n      console.log(\"\\n    adding patient history...\\n    userId: \".concat(userId, \",\\n    patientId: \").concat(selectedPatientId, \",\\n    historyType: \").concat(historyType, \",\\n    historyDate: \").concat(historyDate, \",\\n    historyTitle: \").concat(historyTitle, \",\\n    historyDescription: \").concat(historyDescription, \",\\n    historyAttachmentName: \").concat(historyAttachmentName, \",\\n    historyAttachmentFormat: \").concat(historyAttachmentFormat, \",\\n    historyAttachmentPath: \").concat(historyAttachmentPath, \",\\n    \"));\n      const requestBody = {\n        query: \"\\n        mutation {updatePatientHistory(userId:\\\"\".concat(userId, \"\\\", patientId:\\\"\").concat(selectedPatientId, \"\\\",patientInput:{historyTitle:\\\"\").concat(historyTitle, \"\\\",historyType:\\\"\").concat(historyType, \"\\\",historyDate:\\\"\").concat(historyDate, \"\\\",historyDescription:\\\"\").concat(historyDescription, \"\\\",historyAttachmentName:\\\"\").concat(historyAttachmentName, \"\\\",historyAttachmentFormat:\\\"\").concat(historyAttachmentFormat, \"\\\",historyAttachmentPath:\\\"\").concat(historyAttachmentPath, \"\\\"})\\n        {_id,name,address,contact{email,phone},registrationDate,referralDate,expirationDate,referringDoctor{name,email,phone},occupation{role,employer,contact{email,phone}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{email,phone}},complaints{date,title,description,attachment{name,format,path}},examination{area,type,measure,value,description,attachment{name,format,path}},history{title,type,date,description,attachment{name,format,path}},allergies{title,description,attachment{name,format,path}},medication{title,description,attachment{name,format,path}},investigation{date,title,description,attachment{name,format,path}},diagnosis{date,title,description,attachment{name,format,path}},treatment{date,title,type,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,notes,attachment{name,format,path}}}}\\n      \")\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientHistory._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(updatedPatient);\n        this.context.patients = this.state.patients;\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.updatePatientAllergiesHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id;\n\n      if (this.context.user.role !== 'admin') {\n        console.log(\"No edit permission!!\");\n        return;\n      }\n\n      console.log(\"UpdatePatientAllergiesFormData:  \", event.target.formGridAllergiesTitle.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let allergiesTitle = event.target.formGridAllergiesTitle.value;\n      let allergiesDescription = event.target.formGridAllergiesDescription.value;\n      let allergiesAttachmentName = event.target.formGridAllergiesAttachmentName.value;\n      let allergiesAttachmentFormat = event.target.formGridAllergiesAttachmentFormat.value;\n      let allergiesAttachmentPath = event.target.formGridAllergiesAttachmentPath.value;\n      const patientAllergies = {\n        allergiesTitle,\n        allergiesDescription,\n        allergiesAttachmentName,\n        allergiesAttachmentFormat,\n        allergiesAttachmentPath\n      };\n      console.log(\"\\n    adding patient allergies...\\n    userId: \".concat(userId, \",\\n    patientId: \").concat(selectedPatientId, \",\\n    allergiesTitle: \").concat(allergiesTitle, \",\\n    allergiesDescription: \").concat(allergiesDescription, \",\\n    allergiesAttachmentName: \").concat(allergiesAttachmentName, \",\\n    allergiesAttachmentFormat: \").concat(allergiesAttachmentFormat, \",\\n    allergiesAttachmentPath: \").concat(allergiesAttachmentPath, \",\\n    \"));\n      const requestBody = {\n        query: \"\\n        mutation {updatePatientAllergies(userId:\\\"\".concat(userId, \"\\\", patientId:\\\"\").concat(selectedPatientId, \"\\\",patientInput:{allergiesTitle:\\\"\").concat(allergiesTitle, \"\\\", allergiesDescription:\\\"\").concat(allergiesDescription, \"\\\",allergiesAttachmentName:\\\"\").concat(allergiesAttachmentName, \"\\\",allergiesAttachmentFormat:\\\"\").concat(allergiesAttachmentFormat, \"\\\",allergiesAttachmentPath:\\\"\").concat(allergiesAttachmentPath, \"\\\"})\\n        {_id,name,address,contact{email,phone},registrationDate,referralDate,expirationDate,referringDoctor{name,email,phone},occupation{role,employer,contact{email,phone}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{email,phone}},complaints{date,title,description,attachment{name,format,path}},examination{area,type,measure,value,description,attachment{name,format,path}},history{title,type,date,description,attachment{name,format,path}},allergies{title,description,attachment{name,format,path}},medication{title,description,attachment{name,format,path}},investigation{date,title,description,attachment{name,format,path}},diagnosis{date,title,description,attachment{name,format,path}},treatment{date,title,type,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,notes,attachment{name,format,path}}}}\\n      \")\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientAllergies._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(updatedPatient);\n        this.context.patients = this.state.patients;\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.updatePatientMedicationHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id;\n\n      if (this.context.user.role !== 'admin') {\n        console.log(\"No edit permission!!\");\n        return;\n      }\n\n      console.log(\"UpdatePatientMedicationFormData:  \", event.target.formGridMedicationTitle.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let medicationTitle = event.target.formGridMedicationTitle.value;\n      let medicationDescription = event.target.formGridMedicationDescription.value;\n      let medicationAttachmentName = event.target.formGridMedicationAttachmentName.value;\n      let medicationAttachmentFormat = event.target.formGridMedicationAttachmentFormat.value;\n      let medicationAttachmentPath = event.target.formGridMedicationAttachmentPath.value;\n      const patientMedication = {\n        medicationTitle,\n        medicationDescription,\n        medicationAttachmentName,\n        medicationAttachmentFormat,\n        medicationAttachmentPath\n      };\n      console.log(\"\\n    adding patient medication...\\n    userId: \".concat(userId, \",\\n    patientId: \").concat(selectedPatientId, \",\\n    medicationTitle: \").concat(medicationTitle, \",\\n    medicationDescription: \").concat(medicationDescription, \",\\n    medicationAttachmentName: \").concat(medicationAttachmentName, \",\\n    medicationAttachmentFormat: \").concat(medicationAttachmentFormat, \",\\n    medicationAttachmentPath: \").concat(medicationAttachmentPath, \",\\n    \"));\n      const requestBody = {\n        query: \"\\n      mutation {updatePatientMedication(userId:\\\"\".concat(userId, \"\\\", patientId:\\\"\").concat(selectedPatientId, \"\\\",patientInput:{medicationTitle:\\\"\").concat(medicationTitle, \"\\\", medicationDescription:\\\"\").concat(medicationDescription, \"\\\",medicationAttachmentName:\\\"\").concat(medicationAttachmentName, \"\\\",medicationAttachmentFormat:\\\"\").concat(medicationAttachmentFormat, \"\\\",medicationAttachmentPath:\\\"\").concat(medicationAttachmentPath, \"\\\"})\\n        {_id,name,address,contact{email,phone},registrationDate,referralDate,expirationDate,referringDoctor{name,email,phone},occupation{role,employer,contact{email,phone}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{email,phone}},complaints{date,title,description,attachment{name,format,path}},examination{area,type,measure,value,description,attachment{name,format,path}},history{title,type,date,description,attachment{name,format,path}},allergies{title,description,attachment{name,format,path}},medication{title,description,attachment{name,format,path}},investigation{date,title,description,attachment{name,format,path}},diagnosis{date,title,description,attachment{name,format,path}},treatment{date,title,type,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,notes,attachment{name,format,path}}}}\\n      \")\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientMedication._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(updatedPatient);\n        this.context.patients = this.state.patients;\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.updatePatientInvestigationHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id;\n\n      if (this.context.user.role !== 'admin') {\n        console.log(\"No edit permission!!\");\n        return;\n      }\n\n      console.log(\"UpdatePatientInvestigationFormData:  \", event.target.formGridInvestigationTitle.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let investigationDate = event.target.formGridInvestigationDate.value;\n      let investigationTitle = event.target.formGridInvestigationTitle.value;\n      let investigationDescription = event.target.formGridInvestigationDescription.value;\n      let investigationAttachmentName = event.target.formGridInvestigationAttachmentName.value;\n      let investigationAttachmentFormat = event.target.formGridInvestigationAttachmentFormat.value;\n      let investigationAttachmentPath = event.target.formGridInvestigationAttachmentPath.value;\n      const patientInvestigation = {\n        investigationDate,\n        investigationTitle,\n        investigationDescription,\n        investigationAttachmentName,\n        investigationAttachmentFormat,\n        investigationAttachmentPath\n      };\n      console.log(\"\\n    adding patient investigation...\\n    userId: \".concat(userId, \",\\n    patientId: \").concat(selectedPatientId, \",\\n    investigationDate: \").concat(investigationDate, \",\\n    investigationTitle: \").concat(investigationTitle, \",\\n    investigationDescription: \").concat(investigationDescription, \",\\n    investigationAttachmentName: \").concat(investigationAttachmentName, \",\\n    investigationAttachmentFormat: \").concat(investigationAttachmentFormat, \",\\n    investigationAttachmentPath: \").concat(investigationAttachmentPath, \",\\n    \"));\n      const requestBody = {\n        query: \"\\n        mutation {updatePatientInvestigation(userId:\\\"\".concat(userId, \"\\\", patientId:\\\"\").concat(selectedPatientId, \"\\\",patientInput:{investigationDate:\\\"\").concat(investigationDate, \"\\\",investigationTitle:\\\"\").concat(investigationTitle, \"\\\",investigationDescription:\\\"\").concat(investigationDescription, \"\\\",investigationAttachmentName:\\\"\").concat(investigationAttachmentName, \"\\\",investigationAttachmentFormat:\\\"\").concat(investigationAttachmentFormat, \"\\\",investigationAttachmentPath:\\\"\").concat(investigationAttachmentPath, \"\\\"})\\n        {_id,name,address,contact{email,phone},registrationDate,referralDate,expirationDate,referringDoctor{name,email,phone},occupation{role,employer,contact{email,phone}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{email,phone}},complaints{date,title,description,attachment{name,format,path}},examination{area,type,measure,value,description,attachment{name,format,path}},history{title,type,date,description,attachment{name,format,path}},allergies{title,description,attachment{name,format,path}},medication{title,description,attachment{name,format,path}},investigation{date,title,description,attachment{name,format,path}},diagnosis{date,title,description,attachment{name,format,path}},treatment{date,title,type,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,notes,attachment{name,format,path}}}}\\n      \")\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientInvestigation._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(updatedPatient);\n        this.context.patients = this.state.patients;\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.updatePatientDiagnosisHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id;\n\n      if (this.context.user.role !== 'admin') {\n        console.log(\"No edit permission!!\");\n        return;\n      }\n\n      console.log(\"UpdatePatientDiagnosisFormData:  \", event.target.formGridDiagnosisTitle.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let diagnosisDate = event.target.formGridDiagnosisDate.value;\n      let diagnosisTitle = event.target.formGridDiagnosisTitle.value;\n      let diagnosisDescription = event.target.formGridDiagnosisDescription.value;\n      let diagnosisAttachmentName = event.target.formGridDiagnosisAttachmentName.value;\n      let diagnosisAttachmentFormat = event.target.formGridDiagnosisAttachmentFormat.value;\n      let diagnosisAttachmentPath = event.target.formGridDiagnosisAttachmentPath.value;\n      const patientDiagnosis = {\n        diagnosisDate,\n        diagnosisTitle,\n        diagnosisDescription,\n        diagnosisAttachmentName,\n        diagnosisAttachmentFormat,\n        diagnosisAttachmentPath\n      };\n      console.log(\"\\n    adding patient diagnosis...\\n    userId: \".concat(userId, \",\\n    patientId: \").concat(selectedPatientId, \",\\n    diagnosisDate: \").concat(diagnosisDate, \",\\n    diagnosisTitle: \").concat(diagnosisTitle, \",\\n    diagnosisDescription: \").concat(diagnosisDescription, \",\\n    diagnosisAttachmentName: \").concat(diagnosisAttachmentName, \",\\n    diagnosisAttachmentFormat: \").concat(diagnosisAttachmentFormat, \",\\n    diagnosisAttachmentPath: \").concat(diagnosisAttachmentPath, \",\\n    \"));\n      const requestBody = {\n        query: \"\\n        mutation {updatePatientDiagnosis(userId:\\\"\".concat(userId, \"\\\", patientId:\\\"\").concat(selectedPatientId, \"\\\",patientInput:{diagnosisDate:\\\"\").concat(diagnosisDate, \"\\\",diagnosisTitle:\\\"\").concat(diagnosisTitle, \"\\\",diagnosisDescription:\\\"\").concat(diagnosisDescription, \"\\\",diagnosisAttachmentName:\\\"\").concat(diagnosisAttachmentName, \"\\\",diagnosisAttachmentFormat:\\\"\").concat(diagnosisAttachmentFormat, \"\\\",diagnosisAttachmentPath:\\\"\").concat(diagnosisAttachmentPath, \"\\\"})\\n        {_id,name,address,contact{email,phone},registrationDate,referralDate,expirationDate,referringDoctor{name,email,phone},occupation{role,employer,contact{email,phone}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{email,phone}},complaints{date,title,description,attachment{name,format,path}},examination{area,type,measure,value,description,attachment{name,format,path}},history{title,type,date,description,attachment{name,format,path}},allergies{title,description,attachment{name,format,path}},medication{title,description,attachment{name,format,path}},investigation{date,title,description,attachment{name,format,path}},diagnosis{date,title,description,attachment{name,format,path}},treatment{date,title,type,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,notes,attachment{name,format,path}}}}\\n      \")\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientDiagnosis._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(updatedPatient);\n        this.context.patients = this.state.patients;\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.updatePatientTreatmentHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id;\n\n      if (this.context.user.role !== 'admin') {\n        console.log(\"No edit permission!!\");\n        return;\n      }\n\n      console.log(\"UpdatePatientTreatmentFormData:  \", event.target.formGridTreatmentTitle.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let treatmentDate = event.target.formGridTreatmentDate.value;\n      let treatmentTitle = event.target.formGridTreatmentTitle.value;\n      let treatmentDescription = event.target.formGridTreatmentDescription.value;\n      let treatmentDose = event.target.formGridTreatmentDose.value;\n      let treatmentFrequency = event.target.formGridTreatmentFrequency.value;\n      let treatmentType = event.target.formGridTreatmentType.value;\n      let treatmentAttachmentName = event.target.formGridTreatmentAttachmentName.value;\n      let treatmentAttachmentFormat = event.target.formGridTreatmentAttachmentFormat.value;\n      let treatmentAttachmentPath = event.target.formGridTreatmentAttachmentPath.value;\n      const patientTreatment = {\n        treatmentDate,\n        treatmentTitle,\n        treatmentDescription,\n        treatmentDose,\n        treatmentFrequency,\n        treatmentType,\n        treatmentAttachmentName,\n        treatmentAttachmentFormat,\n        treatmentAttachmentPath\n      };\n      console.log(\"\\n    adding patient treatment...\\n    userId: \".concat(userId, \",\\n    patientId: \").concat(selectedPatientId, \",\\n    treatmentDate: \").concat(treatmentDate, \",\\n    treatmentTitle: \").concat(treatmentTitle, \",\\n    treatmentDescription: \").concat(treatmentDescription, \",\\n    treatmentDose: \").concat(treatmentDose, \",\\n    treatmentFrequency: \").concat(treatmentFrequency, \",\\n    treatmentType: \").concat(treatmentType, \",\\n    treatmentAttachmentName: \").concat(treatmentAttachmentName, \",\\n    treatmentAttachmentFormat: \").concat(treatmentAttachmentFormat, \",\\n    treatmentAttachmentPath: \").concat(treatmentAttachmentPath, \",\\n    \"));\n      const requestBody = {\n        query: \"\\n        mutation {updatePatientTreatment(userId:\\\"\".concat(userId, \"\\\", patientId:\\\"\").concat(selectedPatientId, \"\\\",patientInput:{treatmentDate:\\\"\").concat(treatmentDate, \"\\\",treatmentTitle:\\\"\").concat(treatmentTitle, \"\\\",treatmentType:\\\"\").concat(treatmentType, \"\\\",treatmentDescription:\\\"\").concat(treatmentDescription, \"\\\",treatmentDose:\\\"\").concat(treatmentDose, \"\\\",treatmentFrequency:\\\"\").concat(treatmentFrequency, \"\\\",treatmentAttachmentName:\\\"\").concat(treatmentAttachmentName, \"\\\",treatmentAttachmentFormat:\\\"\").concat(treatmentAttachmentFormat, \"\\\",treatmentAttachmentPath:\\\"\").concat(treatmentAttachmentPath, \"\\\"})\\n        {_id,name,address,contact{email,phone},registrationDate,referralDate,expirationDate,referringDoctor{name,email,phone},occupation{role,employer,contact{email,phone}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{email,phone}},complaints{date,title,description,attachment{name,format,path}},examination{area,type,measure,value,description,attachment{name,format,path}},history{title,type,date,description,attachment{name,format,path}},allergies{title,description,attachment{name,format,path}},medication{title,description,attachment{name,format,path}},investigation{date,title,description,attachment{name,format,path}},diagnosis{date,title,description,attachment{name,format,path}},treatment{date,title,type,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,notes,attachment{name,format,path}}}}\\n      \")\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientTreatment._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(updatedPatient);\n        this.context.patients = this.state.patients;\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.updatePatientBillingHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id;\n\n      if (this.context.user.role !== 'admin') {\n        console.log(\"No edit permission!!\");\n        return;\n      }\n\n      console.log(\"UpdatePatientBillingFormData:  \", event.target.formGridBillingTitle.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let billingDate = event.target.formGridBillingDate.value;\n      let billingTitle = event.target.formGridBillingTitle.value;\n      let billingType = event.target.formGridBillingType.value;\n      let billingDescription = event.target.formGridBillingDescription.value;\n      let billingAmount = event.target.formGridBillingAmount.value;\n      let billingPaid = event.target.formGridBillingPaid.value;\n      let billingNotes = event.target.formGridBillingNotes.value;\n      let billingAttachmentName = event.target.formGridBillingAttachmentName.value;\n      let billingAttachmentFormat = event.target.formGridBillingAttachmentFormat.value;\n      let billingAttachmentPath = event.target.formGridBillingAttachmentPath.value;\n      const patientBilling = {\n        billingDate,\n        billingTitle,\n        billingType,\n        billingDescription,\n        billingAmount,\n        billingPaid,\n        billingNotes,\n        billingAttachmentName,\n        billingAttachmentFormat,\n        billingAttachmentPath\n      };\n      console.log(\"\\n    adding patient treatment...\\n    userId: \".concat(userId, \",\\n    patientId: \").concat(selectedPatientId, \",\\n    billingDate: \").concat(billingDate, \",\\n    billingTitle: \").concat(billingTitle, \",\\n    billingType: \").concat(billingType, \",\\n    billingDescription: \").concat(billingDescription, \",\\n    billingAmount: \").concat(billingAmount, \",\\n    billingPaid: \").concat(billingPaid, \",\\n    billingNotes: \").concat(billingNotes, \",\\n    billingAttachmentName: \").concat(billingAttachmentName, \",\\n    billingAttachmentFormat: \").concat(billingAttachmentFormat, \",\\n    billingAttachmentPath: \").concat(billingAttachmentPath, \",\\n    \"));\n      const requestBody = {\n        query: \"\\n        mutation {updatePatientBilling(userId:\\\"\".concat(userId, \"\\\", patientId:\\\"\").concat(selectedPatientId, \"\\\",patientInput:{billingDate:\\\"\").concat(billingDate, \"\\\",billingTitle:\\\"\").concat(billingTitle, \"\\\",billingType:\\\"\").concat(billingType, \"\\\",billingDescription:\\\"\").concat(billingDescription, \"\\\",billingAmount:\").concat(billingAmount, \",billingPaid:\").concat(billingPaid, \",billingNotes:\\\"\").concat(billingNotes, \"\\\",billingAttachmentName:\\\"\").concat(billingAttachmentName, \"\\\",billingAttachmentFormat:\\\"\").concat(billingAttachmentFormat, \"\\\",billingAttachmentPath:\\\"\").concat(billingAttachmentPath, \"\\\"})\\n        {_id,name,address,contact{email,phone},registrationDate,referralDate,expirationDate,referringDoctor{name,email,phone},occupation{role,employer,contact{email,phone}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{email,phone}},complaints{date,title,description,attachment{name,format,path}},examination{area,type,measure,value,description,attachment{name,format,path}},history{title,type,date,description,attachment{name,format,path}},allergies{title,description,attachment{name,format,path}},medication{title,description,attachment{name,format,path}},investigation{date,title,description,attachment{name,format,path}},diagnosis{date,title,description,attachment{name,format,path}},treatment{date,title,type,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,notes,attachment{name,format,path}}}}\\n      \")\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientBilling._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(updatedPatient);\n        this.context.patients = this.state.patients;\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.modalConfirmSearchHandler = event => {\n      console.log(\"SearchPatientForm:  \");\n      let userId = this.context.userId;\n      console.log(\"SearchPatientFormData:  \", event.target.formBasicField.value);\n      this.setState({\n        searching: false\n      });\n      let field = event.target.formBasicField.value;\n      let query = event.target.formBasicQuery.value;\n\n      if (field.trim().length === 0 || query.trim().length === 0) {\n        console.log(\"blank fields detected!!!...Please try again...\");\n        return;\n      }\n\n      const search = {\n        field,\n        query\n      };\n      console.log(\"Searching for Patient:  \", JSON.stringify(search));\n      const requestBody = {\n        query: \"\\n        query GetPatientField($userId: ID!, $field: String!, $query: String!)\\n        {getPatientField(userId: $userId, field: $field, query: $query ){\\n          _id\\n          name\\n          address\\n          contact{\\n            email\\n            phone\\n          }\\n          registrationDate\\n          referralDate\\n          expirationDate\\n          referringDoctor{\\n            name\\n            email\\n            phone\\n          }\\n            occupation{\\n              role\\n              employer\\n              contact{\\n                email\\n                phone\\n              }\\n            }\\n            insurance\\n            {\\n              company\\n              number\\n              description\\n              expiry\\n              subscriber{\\n                company\\n                description\\n              }\\n            }\\n            nextOfKin{\\n              name\\n              contact{\\n                email\\n                phone\\n              }\\n            }\\n            complaints{\\n              date\\n              title\\n              description\\n              attachment{\\n                name\\n                format\\n                path\\n              }\\n            }\\n            examination{\\n              area\\n              type\\n              measure\\n              value\\n              description\\n              attachment{\\n                name\\n                format\\n                path\\n              }\\n            }\\n            history{\\n              title\\n              type\\n              date\\n              description\\n              attachment{\\n                name\\n                format\\n                path\\n              }\\n            }\\n            allergies{\\n              title\\n              description\\n              attachment{\\n                name\\n                format\\n                path\\n              }\\n            }\\n            medication{\\n              title\\n              description\\n              attachment{\\n                name\\n                format\\n                path\\n              }\\n            }\\n            investigation{\\n              date\\n              title\\n              description\\n              attachment{\\n                name\\n                format\\n                path\\n              }\\n            }\\n              diagnosis{\\n                date\\n                title\\n                description\\n                attachment{\\n                  name\\n                  format\\n                  path\\n                }\\n              }\\n              treatment{\\n                date\\n                title\\n                type\\n                description\\n                dose\\n                frequency\\n                attachment{\\n                  name\\n                  format\\n                  path\\n                }\\n              }\\n              billing{\\n                date\\n                title\\n                type\\n                description\\n                amount\\n                paid\\n                notes\\n                attachment\\n                {\\n                  name\\n                  format\\n                  path\\n                }\\n              }\\n        }\\n      }\\n      \",\n        variables: {\n          userId: userId,\n          field: field,\n          query: query\n        }\n      };\n      const token = this.context.token;\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n        const searchPatients = resData.data.getPatientField;\n        this.setState({\n          searchPatients: searchPatients\n        });\n        console.log(\"state.searchPatients:  \", this.state.searchPatients); // this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.modalCancelHandler = () => {\n      this.setState({\n        creating: false,\n        updating: false,\n        searching: false,\n        selectedPatient: null\n      });\n    };\n\n    this.modalDeleteHandler = () => {\n      console.log(\"deleting patient...selectedPatient:  \", this.context.selectedPatient);\n      const selectedPatientId = this.context.selectedPatient._id;\n\n      if (this.context.user.role !== 'admin') {\n        console.log(\"Not the Admin! No edit permission!!\");\n      }\n\n      this.setState({\n        deleting: true\n      });\n      const requestBody = {\n        query: \"\\n          mutation DeletePatient($userId: ID!, $patientId: ID!) {\\n            deletePatient(userId: $userId, patientId: $patientId) {\\n              _id\\n              name\\n              address\\n              contact{\\n                email\\n                phone\\n              }\\n              registrationDate\\n              referringDoctor\\n              {\\n                name\\n                email\\n                phone\\n              }\\n              occupation\\n              {\\n                role\\n                employer\\n                contact\\n                {\\n                  email\\n                  phone\\n                }\\n              }\\n            }\\n          }\\n        \",\n        variables: {\n          userId: this.context.userId,\n          patientId: selectedPatientId\n        }\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + this.context.token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatient;\n        console.log(deletedPatient);\n        let deletedPatientId = deletedPatient._id;\n        deletedPatient = this.state.patients.find(e => e._id === deletedPatientId);\n        const deletedPatientPos = this.state.patients.indexOf(deletedPatient);\n        const slicedArray = this.state.patients.splice(deletedPatientPos, 1);\n        console.log(\"deletedPatient:  \", JSON.stringify(deletedPatient), \"  deletedUserPos:  \", deletedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.setState({\n          deleting: false\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n\n        if (this.isActive) {\n          this.setState({\n            deleting: false\n          });\n        }\n      });\n    };\n\n    this.showDetailHandler = patientId => {\n      this.setState(prevState => {\n        const selectedPatient = prevState.patients.find(e => e._id === patientId);\n        this.context.selectedPatient = selectedPatient;\n        this.context.selectedPatientId = selectedPatient._id;\n        console.log(\"selectedPatient:  \", selectedPatient);\n        return {\n          selectedPatient: selectedPatient\n        };\n      });\n    };\n\n    this.nameElRef = React.createRef();\n    this.dobElRef = React.createRef();\n    this.addressElRef = React.createRef();\n    this.contactPhoneElRef = React.createRef();\n    this.contactEmailElRef = React.createRef();\n    this.registrationDateElRef = React.createRef();\n    this.referringDoctorNameElRef = React.createRef();\n    this.referringDoctorEmailElRef = React.createRef();\n    this.referringDoctorPhoneElRef = React.createRef();\n    this.occupationRoleElRef = React.createRef();\n    this.occupationEmployerElRef = React.createRef();\n    this.occupationEmployerContactPhoneElRef = React.createRef();\n    this.occupationEmployerContactEmailElRef = React.createRef();\n    this.nextOfKinNameELRef = React.createRef();\n    this.nextOfKinPhoneELRef = React.createRef();\n    this.nextOfKinEmailELRef = React.createRef();\n    this.insuranceCompanyELRef = React.createRef();\n    this.insuranceNumberELRef = React.createRef();\n    this.insuranceDescriptionELRef = React.createRef();\n    this.insuranceExpiryELRef = React.createRef();\n    this.insuranceSubscriberCompanyELRef = React.createRef();\n    this.insuranceSubscriberDescriptionELRef = React.createRef();\n    this.complaintDateELRef = React.createRef();\n    this.complaintTitleELRef = React.createRef();\n    this.complaintDescriptionELRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.fetchPatients();\n  }\n\n  fetchPatients() {\n    console.log(\"'fetch patients function' context object... \" + JSON.stringify(this.context));\n    const userId = this.context.userId;\n    this.setState({\n      isLoading: true\n    });\n    const requestBody = {\n      query: \"\\n          query patients($userId: ID!) {\\n            patients(userId: $userId) {\\n              _id\\n              name\\n              address\\n              contact{\\n                email\\n                phone\\n              }\\n              registrationDate\\n              referralDate\\n              expirationDate\\n              referringDoctor{\\n                name\\n                email\\n                phone\\n              }\\n                occupation{\\n                  role\\n                  employer\\n                  contact{\\n                    email\\n                    phone\\n                  }\\n                }\\n                insurance\\n                {\\n                  company\\n                  number\\n                  description\\n                  expiry\\n                  subscriber{\\n                    company\\n                    description\\n                  }\\n                }\\n                nextOfKin{\\n                  name\\n                  contact{\\n                    email\\n                    phone\\n                  }\\n                }\\n                complaints{\\n                  date\\n                  title\\n                  description\\n                  attachment{\\n                    name\\n                    format\\n                    path\\n                  }\\n                }\\n                examination{\\n                  area\\n                  type\\n                  measure\\n                  value\\n                  description\\n                  attachment{\\n                    name\\n                    format\\n                    path\\n                  }\\n                }\\n                history{\\n                  title\\n                  type\\n                  date\\n                  description\\n                  attachment{\\n                    name\\n                    format\\n                    path\\n                  }\\n                }\\n                allergies{\\n                  title\\n                  description\\n                  attachment{\\n                    name\\n                    format\\n                    path\\n                  }\\n                }\\n                medication{\\n                  title\\n                  description\\n                  attachment{\\n                    name\\n                    format\\n                    path\\n                  }\\n                }\\n                investigation{\\n                  date\\n                  title\\n                  description\\n                  attachment{\\n                    name\\n                    format\\n                    path\\n                  }\\n                }\\n                  diagnosis{\\n                    date\\n                    title\\n                    description\\n                    attachment{\\n                      name\\n                      format\\n                      path\\n                    }\\n                  }\\n                  treatment{\\n                    date\\n                    title\\n                    type\\n                    description\\n                    dose\\n                    frequency\\n                    attachment{\\n                      name\\n                      format\\n                      path\\n                    }\\n                  }\\n                  billing{\\n                    date\\n                    title\\n                    type\\n                    description\\n                    amount\\n                    paid\\n                    notes\\n                    attachment\\n                    {\\n                      name\\n                      format\\n                      path\\n                    }\\n                  }\\n            }\\n          }\\n        \",\n      variables: {\n        userId: userId\n      }\n    };\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    }).then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n\n      return res.json();\n    }).then(resData => {\n      const patients = resData.data.patients;\n      console.log(patients);\n      this.context.patients = this.state.patients;\n\n      if (this.isActive) {\n        this.setState({\n          patients: patients,\n          isLoading: false\n        });\n      }\n    }).catch(err => {\n      console.log(err);\n\n      if (this.isActive) {\n        this.setState({\n          isLoading: false\n        });\n      }\n    });\n  }\n\n  updatePatientSpecial(event) {\n    console.log(\"special field to update:  \", event.target.value);\n    const field = event.target.value;\n    this.setState({\n      patientUpdateField: field\n    });\n  }\n\n  componentWillUnmount() {\n    this.isActive = false;\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1959\n      },\n      __self: this\n    }, React.createElement(Accordion, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1960\n      },\n      __self: this\n    }, React.createElement(Container, {\n      className: \"containerUserDetail\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1962\n      },\n      __self: this\n    }, React.createElement(Row, {\n      className: \"createUserRowAdd\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1964\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 4,\n      className: \"createUserColAdd\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1965\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1966\n      },\n      __self: this\n    }, \"Patient Detail\")), React.createElement(Col, {\n      md: 6,\n      className: \"createUserColAdd\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1968\n      },\n      __self: this\n    }, React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: \"6\",\n      className: \"btn\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1969\n      },\n      __self: this\n    }, \"Details\"))), React.createElement(Accordion.Collapse, {\n      eventKey: \"6\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1975\n      },\n      __self: this\n    }, React.createElement(Row, {\n      className: \"createUserRowForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1976\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 11,\n      className: \"createUserColForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1977\n      },\n      __self: this\n    }, this.state.isLoading === false && this.state.selectedPatient !== null && React.createElement(PatientDetail, {\n      authUserId: this.context.userId,\n      patient: this.state.selectedPatient,\n      onEdit: this.startUpdatePatientHandler,\n      onDelete: this.modalDeleteHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1981\n      },\n      __self: this\n    }))))), React.createElement(Container, {\n      className: \"containerCreateuser\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1994\n      },\n      __self: this\n    }, React.createElement(Row, {\n      className: \"createUserRowAdd\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1995\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 4,\n      className: \"createUserColAdd\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1996\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1997\n      },\n      __self: this\n    }, \"Add Patient\")), React.createElement(Col, {\n      md: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1999\n      },\n      __self: this\n    }, this.context.token && React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: \"7\",\n      className: \"btn\",\n      onClick: this.startCreatePatientHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2001\n      },\n      __self: this\n    }, \"Add\"))), React.createElement(Accordion.Collapse, {\n      eventKey: \"7\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2008\n      },\n      __self: this\n    }, React.createElement(Row, {\n      className: \"createUserRowForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2009\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 12,\n      className: \"createUserColForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2010\n      },\n      __self: this\n    }, this.state.creating && React.createElement(CreatePatientForm, {\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmHandler,\n      onSubmit: this.modalConfirmHandler,\n      confirmText: \"Confirm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2013\n      },\n      __self: this\n    })))), React.createElement(Row, {\n      className: \"updateUserRowAdd\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2027\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 2,\n      className: \"updateUserCol\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2028\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2029\n      },\n      __self: this\n    }, \"Edit Patient\")), React.createElement(Col, {\n      md: 4,\n      className: \"updateUserCol\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2031\n      },\n      __self: this\n    }, this.context.token && React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: \"8\",\n      className: \"btn\",\n      onClick: this.startUpdatePatientHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2033\n      },\n      __self: this\n    }, \"Basic Info & Demographics\")), React.createElement(Col, {\n      md: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2038\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2039\n      },\n      __self: this\n    }, \"Patient\")), React.createElement(Col, {\n      md: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2041\n      },\n      __self: this\n    }, this.context.selectedPatient && React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2043\n      },\n      __self: this\n    }, this.context.selectedPatient.name))), React.createElement(Row, {\n      className: \"createUserRowAdd\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2048\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 1,\n      className: \"updateUserCol2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2049\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2050\n      },\n      __self: this\n    }, \"Edit Patient\")), React.createElement(Col, {\n      md: 11,\n      className: \"updateUserCol2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2052\n      },\n      __self: this\n    }, this.context.token && React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: \"9\",\n      className: \"btn\",\n      value: \"insurance\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2054\n      },\n      __self: this\n    }, \"Insurance\"), this.context.token && React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: \"9\",\n      className: \"btn\",\n      value: \"nextOfKin\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2059\n      },\n      __self: this\n    }, \"Next Of Kin\"), this.context.token && React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: \"9\",\n      className: \"btn\",\n      value: \"complaint\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2064\n      },\n      __self: this\n    }, \"Complaint\"), this.context.token && React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: \"9\",\n      className: \"btn\",\n      value: \"examination\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2069\n      },\n      __self: this\n    }, \"Examination\"), this.context.token && React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: \"9\",\n      className: \"btn\",\n      value: \"history\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2074\n      },\n      __self: this\n    }, \"History\"), this.context.token && React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: \"9\",\n      className: \"btn\",\n      value: \"allergies\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2079\n      },\n      __self: this\n    }, \"Allergies\"), this.context.token && React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: \"9\",\n      className: \"btn\",\n      value: \"medication\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2084\n      },\n      __self: this\n    }, \"Medication\"), this.context.token && React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: \"9\",\n      className: \"btn\",\n      value: \"investigation\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2089\n      },\n      __self: this\n    }, \"Investigation\"), this.context.token && React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: \"9\",\n      className: \"btn\",\n      value: \"diagnosis\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2094\n      },\n      __self: this\n    }, \"Diagnosis\"), this.context.token && React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: \"9\",\n      className: \"btn\",\n      value: \"treatment\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2099\n      },\n      __self: this\n    }, \"Treatment\"), this.context.token && React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: \"9\",\n      className: \"btn\",\n      value: \"billing\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2104\n      },\n      __self: this\n    }, \"Billing\"))), React.createElement(Accordion.Collapse, {\n      eventKey: \"8\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2111\n      },\n      __self: this\n    }, React.createElement(Row, {\n      className: \"updateUserRowForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2112\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 10,\n      className: \"updateUserColForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2113\n      },\n      __self: this\n    }, this.state.updating && this.state.selectedPatient !== null && React.createElement(UpdatePatientForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmUpdateHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2117\n      },\n      __self: this\n    })))), React.createElement(Accordion.Collapse, {\n      eventKey: \"9\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2131\n      },\n      __self: this\n    }, React.createElement(Row, {\n      className: \"updateUserRowForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2132\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 10,\n      className: \"updateUserColForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2133\n      },\n      __self: this\n    }, this.state.patientUpdateField === 'insurance' && this.state.selectedPatient !== null && React.createElement(UpdatePatientInsuranceForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientInsuranceHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2137\n      },\n      __self: this\n    }), this.state.patientUpdateField === 'nextOfKin' && this.state.selectedPatient !== null && React.createElement(UpdatePatientNextOfKinForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientNextOfKinHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2150\n      },\n      __self: this\n    }), this.state.patientUpdateField === 'complaint' && this.state.selectedPatient !== null && React.createElement(UpdatePatientComplaintForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientComplaintHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2163\n      },\n      __self: this\n    }), this.state.patientUpdateField === 'examination' && this.state.selectedPatient !== null && React.createElement(UpdatePatientExaminationForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientExaminationHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2176\n      },\n      __self: this\n    }), this.state.patientUpdateField === 'history' && this.state.selectedPatient !== null && React.createElement(UpdatePatientHistoryForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientHistoryHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2189\n      },\n      __self: this\n    }), this.state.patientUpdateField === 'allergies' && this.state.selectedPatient !== null && React.createElement(UpdatePatientAllergiesForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientAllergiesHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2202\n      },\n      __self: this\n    }), this.state.patientUpdateField === 'medication' && this.state.selectedPatient !== null && React.createElement(UpdatePatientMedicationForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientMedicationHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2215\n      },\n      __self: this\n    }), this.state.patientUpdateField === 'investigation' && this.state.selectedPatient !== null && React.createElement(UpdatePatientInvestigationForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientInvestigationHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2228\n      },\n      __self: this\n    }), this.state.patientUpdateField === 'diagnosis' && this.state.selectedPatient !== null && React.createElement(UpdatePatientDiagnosisForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientDiagnosisHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2241\n      },\n      __self: this\n    }), this.state.patientUpdateField === 'treatment' && this.state.selectedPatient !== null && React.createElement(UpdatePatientTreatmentForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientTreatmentHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2254\n      },\n      __self: this\n    }), this.state.patientUpdateField === 'billing' && this.state.selectedPatient !== null && React.createElement(UpdatePatientBillingForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientBillingHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2267\n      },\n      __self: this\n    }))))), React.createElement(Container, {\n      className: \"containerSearchuser\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2285\n      },\n      __self: this\n    }, React.createElement(Row, {\n      className: \"createUserRowAdd\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2286\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 4,\n      className: \"createUserColAdd\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2287\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2288\n      },\n      __self: this\n    }, \"Search for a Patient\")), React.createElement(Col, {\n      md: 8,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2290\n      },\n      __self: this\n    }, this.context.token && React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: \"10\",\n      className: \"btn\",\n      onClick: this.startSearchPatientHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2292\n      },\n      __self: this\n    }, \"Search\"))), React.createElement(Accordion.Collapse, {\n      eventKey: \"10\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2300\n      },\n      __self: this\n    }, React.createElement(Row, {\n      className: \"createUserRowForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2301\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 10,\n      className: \"createUserColForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2302\n      },\n      __self: this\n    }, this.state.searching === true && React.createElement(SearchPatientForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmSearchHandler,\n      confirmText: \"Search\",\n      patient: this.context.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2305\n      },\n      __self: this\n    })), React.createElement(Col, {\n      md: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2316\n      },\n      __self: this\n    })))), React.createElement(Accordion.Collapse, {\n      eventKey: \"10\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2323\n      },\n      __self: this\n    }, React.createElement(Container, {\n      className: \"containerSearchuser\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2324\n      },\n      __self: this\n    }, React.createElement(Row, {\n      className: \"searchListRow\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2325\n      },\n      __self: this\n    }, this.state.searchPatients !== [] && React.createElement(SearchPatientList, {\n      searchPatients: this.state.searchPatients,\n      authUserId: this.context.userId,\n      onCancel: this.modalCancelHandler,\n      onViewDetail: this.showDetailHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2328\n      },\n      __self: this\n    })))), React.createElement(Container, {\n      className: \"containerSearchuser\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2340\n      },\n      __self: this\n    }, React.createElement(Row, {\n      className: \"searchListRow\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2341\n      },\n      __self: this\n    }, this.state.isLoading ? React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2344\n      },\n      __self: this\n    }) : React.createElement(PatientList, {\n      patients: this.state.patients,\n      authUserId: this.context.userId,\n      onViewDetail: this.showDetailHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2346\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nPatientsPage.contextType = AuthContext;\nexport default PatientsPage;","map":{"version":3,"sources":["/Users/pedrojacob/Downloads/AMR/websites/office_records/ENT_EMR/frontend/src/pages/Patients.js"],"names":["React","Component","Container","Row","Col","Button","Accordion","PatientList","PatientDetail","Spinner","AuthContext","SearchPatientList","SearchPatientForm","CreatePatientForm","UpdatePatientForm","UpdatePatientInsuranceForm","UpdatePatientNextOfKinForm","UpdatePatientComplaintForm","UpdatePatientExaminationForm","UpdatePatientHistoryForm","UpdatePatientAllergiesForm","UpdatePatientMedicationForm","UpdatePatientInvestigationForm","UpdatePatientDiagnosisForm","UpdatePatientTreatmentForm","UpdatePatientBillingForm","PatientsPage","constructor","props","state","creating","updating","searching","updatingArray","deleting","patients","searchPatients","isLoading","selectedPatient","patientUpdateField","isActive","startCreatePatientHandler","setState","console","log","startUpdatePatientHandler","startSearchPatientHandler","modalConfirmHandler","event","target","formGridName","value","userId","context","name","dob","formGridDob","address","formGridAddress","contactPhone","formGridContactPhone","contactEmail","formGridContactEmail","registrationDate","formGridRegistrationDate","referringDoctorName","formGridReferringDoctorName","referringDoctorEmail","formGridReferringDoctorEmail","referringDoctorPhone","formGridReferringDoctorPhone","occupationRole","formGridOccupationRole","occupationEmployer","formGridOccupationEmployer","occupationEmployerContactPhone","formGridOccupationEmployerContactPhone","occupationEmployerContactEmail","formGridOccupationEmployerContactEmail","trim","length","patient","JSON","stringify","requestBody","query","variables","token","fetch","method","body","headers","Authorization","then","res","status","Error","json","resData","prevState","updatedPatients","push","_id","data","createPatient","contact","phone","email","referralDate","expirationDate","referringDoctor","occupation","role","employer","catch","err","modalCancelHandler","modalConfirmUpdateHandler","user","patientId","selectedUser","updatedPatientId","updatePatient","updatedPatient","find","e","updatedPatientPos","indexOf","slicedArray","splice","fetchPatients","updatePatientInsuranceHandler","selectedPatientId","formGridInsuranceCompany","insuranceCompany","insuranceNumber","formGridInsuranceNumber","insuranceExpiry","formGridInsuranceExpiry","insuranceDescription","formGridInsuranceDescription","insuranceSubscriberCompany","formGridInsuranceSubscriberCompany","insuranceSubscriberDescription","formGridInsuranceSubscriberDescription","patientInsurance","updatePatientInsurance","updatePatientNextOfKinHandler","formGridNextOfKinName","nextOfKinName","nextOfKinPhone","formGridNextOfKinPhone","nextOfKinEmail","formGridNextOfKinEmail","patientNextOfKin","updatePatientNextOfKin","updatePatientComplaintHandler","formGridComplaintTitle","complaintTitle","complaintDate","formGridComplaintDate","complaintDescription","formGridComplaintDescription","complaintAttachmentName","formGridComplaintAttachmentName","complaintAttachmentFormat","formGridComplaintAttachmentFormat","complaintAttachmentPath","formGridComplaintAttachmentPath","patientComplaint","updatePatientComplaint","updatePatientExaminationHandler","formGridExaminationArea","examinationArea","examinationType","formGridExaminationType","examinationMeasure","formGridExaminationMeasure","examinationValue","formGridExaminationValue","examinationDescription","formGridExaminationDescription","examinationAttachmentName","formGridExaminationAttachmentName","examinationAttachmentFormat","formGridExaminationAttachmentFormat","examinationAttachmentPath","formGridExaminationAttachmentPath","patientExamination","updatePatientExamination","updatePatientHistoryHandler","formGridHistoryTitle","historyType","formGridHistoryType","historyDate","formGridHistoryDate","historyTitle","historyDescription","formGridHistoryDescription","historyAttachmentName","formGridHistoryAttachmentName","historyAttachmentFormat","formGridHistoryAttachmentFormat","historyAttachmentPath","formGridHistoryAttachmentPath","patientHistory","updatePatientHistory","updatePatientAllergiesHandler","formGridAllergiesTitle","allergiesTitle","allergiesDescription","formGridAllergiesDescription","allergiesAttachmentName","formGridAllergiesAttachmentName","allergiesAttachmentFormat","formGridAllergiesAttachmentFormat","allergiesAttachmentPath","formGridAllergiesAttachmentPath","patientAllergies","updatePatientAllergies","updatePatientMedicationHandler","formGridMedicationTitle","medicationTitle","medicationDescription","formGridMedicationDescription","medicationAttachmentName","formGridMedicationAttachmentName","medicationAttachmentFormat","formGridMedicationAttachmentFormat","medicationAttachmentPath","formGridMedicationAttachmentPath","patientMedication","updatePatientMedication","updatePatientInvestigationHandler","formGridInvestigationTitle","investigationDate","formGridInvestigationDate","investigationTitle","investigationDescription","formGridInvestigationDescription","investigationAttachmentName","formGridInvestigationAttachmentName","investigationAttachmentFormat","formGridInvestigationAttachmentFormat","investigationAttachmentPath","formGridInvestigationAttachmentPath","patientInvestigation","updatePatientInvestigation","updatePatientDiagnosisHandler","formGridDiagnosisTitle","diagnosisDate","formGridDiagnosisDate","diagnosisTitle","diagnosisDescription","formGridDiagnosisDescription","diagnosisAttachmentName","formGridDiagnosisAttachmentName","diagnosisAttachmentFormat","formGridDiagnosisAttachmentFormat","diagnosisAttachmentPath","formGridDiagnosisAttachmentPath","patientDiagnosis","updatePatientDiagnosis","updatePatientTreatmentHandler","formGridTreatmentTitle","treatmentDate","formGridTreatmentDate","treatmentTitle","treatmentDescription","formGridTreatmentDescription","treatmentDose","formGridTreatmentDose","treatmentFrequency","formGridTreatmentFrequency","treatmentType","formGridTreatmentType","treatmentAttachmentName","formGridTreatmentAttachmentName","treatmentAttachmentFormat","formGridTreatmentAttachmentFormat","treatmentAttachmentPath","formGridTreatmentAttachmentPath","patientTreatment","updatePatientTreatment","updatePatientBillingHandler","formGridBillingTitle","billingDate","formGridBillingDate","billingTitle","billingType","formGridBillingType","billingDescription","formGridBillingDescription","billingAmount","formGridBillingAmount","billingPaid","formGridBillingPaid","billingNotes","formGridBillingNotes","billingAttachmentName","formGridBillingAttachmentName","billingAttachmentFormat","formGridBillingAttachmentFormat","billingAttachmentPath","formGridBillingAttachmentPath","patientBilling","updatePatientBilling","modalConfirmSearchHandler","formBasicField","field","formBasicQuery","search","getPatientField","modalDeleteHandler","deletedPatient","deletePatient","deletedPatientId","deletedPatientPos","showDetailHandler","nameElRef","createRef","dobElRef","addressElRef","contactPhoneElRef","contactEmailElRef","registrationDateElRef","referringDoctorNameElRef","referringDoctorEmailElRef","referringDoctorPhoneElRef","occupationRoleElRef","occupationEmployerElRef","occupationEmployerContactPhoneElRef","occupationEmployerContactEmailElRef","nextOfKinNameELRef","nextOfKinPhoneELRef","nextOfKinEmailELRef","insuranceCompanyELRef","insuranceNumberELRef","insuranceDescriptionELRef","insuranceExpiryELRef","insuranceSubscriberCompanyELRef","insuranceSubscriberDescriptionELRef","complaintDateELRef","complaintTitleELRef","complaintDescriptionELRef","componentDidMount","updatePatientSpecial","componentWillUnmount","render","bind","contextType"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n// import Form from 'react-bootstrap/Form';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Button from 'react-bootstrap/Button';\nimport Accordion from 'react-bootstrap/Accordion';\n\n// import Modal from '../components/Modal/Modal';\n// import Backdrop from '../components/Backdrop/Backdrop';\nimport PatientList from '../components/Patients/PatientList/PatientList';\nimport PatientDetail from '../components/Patients/PatientDetail';\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\nimport SearchPatientList from '../components/Patients/PatientList/SearchPatientList';\nimport SearchPatientForm from '../components/Forms/SearchPatientForm';\n\nimport CreatePatientForm from '../components/Forms/CreatePatientForm';\nimport UpdatePatientForm from '../components/Forms/UpdatePatientForm';\nimport UpdatePatientInsuranceForm from '../components/Forms/UpdatePatientInsuranceForm';\nimport UpdatePatientNextOfKinForm from '../components/Forms/UpdatePatientNextOfKinForm';\nimport UpdatePatientComplaintForm from '../components/Forms/UpdatePatientComplaintForm';\nimport UpdatePatientExaminationForm from '../components/Forms/UpdatePatientExaminationForm';\nimport UpdatePatientHistoryForm from '../components/Forms/UpdatePatientHistoryForm';\nimport UpdatePatientAllergiesForm from '../components/Forms/UpdatePatientAllergiesForm';\nimport UpdatePatientMedicationForm from '../components/Forms/UpdatePatientMedicationForm';\nimport UpdatePatientInvestigationForm from '../components/Forms/UpdatePatientInvestigationForm';\nimport UpdatePatientDiagnosisForm from '../components/Forms/UpdatePatientDiagnosisForm';\nimport UpdatePatientTreatmentForm from '../components/Forms/UpdatePatientTreatmentForm';\nimport UpdatePatientBillingForm from '../components/Forms/UpdatePatientBillingForm';\n// import UpdatePatientArrayForm from '../components/Forms/UpdatePatientArrayForm';\nimport './Users.css';\n\nclass PatientsPage extends Component {\n  state = {\n    creating: false,\n    updating: false,\n    searching: false,\n    updatingArray: false,\n    deleting: false,\n    patients: [],\n    searchPatients: [],\n    isLoading: false,\n    selectedPatient: null,\n    patientUpdateField: null,\n  };\n  isActive = true;\n\n  static contextType = AuthContext;\n\n  constructor(props) {\n    super(props);\n    this.nameElRef = React.createRef();\n    this.dobElRef = React.createRef();\n    this.addressElRef = React.createRef();\n    this.contactPhoneElRef = React.createRef();\n    this.contactEmailElRef = React.createRef();\n    this.registrationDateElRef = React.createRef();\n    this.referringDoctorNameElRef = React.createRef();\n    this.referringDoctorEmailElRef = React.createRef();\n    this.referringDoctorPhoneElRef = React.createRef();\n    this.occupationRoleElRef = React.createRef();\n    this.occupationEmployerElRef = React.createRef();\n    this.occupationEmployerContactPhoneElRef = React.createRef();\n    this.occupationEmployerContactEmailElRef = React.createRef();\n    this.nextOfKinNameELRef = React.createRef();\n    this.nextOfKinPhoneELRef = React.createRef();\n    this.nextOfKinEmailELRef = React.createRef();\n    this.insuranceCompanyELRef = React.createRef();\n    this.insuranceNumberELRef = React.createRef();\n    this.insuranceDescriptionELRef = React.createRef();\n    this.insuranceExpiryELRef = React.createRef();\n    this.insuranceSubscriberCompanyELRef = React.createRef();\n    this.insuranceSubscriberDescriptionELRef = React.createRef();\n    this.complaintDateELRef = React.createRef();\n    this.complaintTitleELRef = React.createRef();\n    this.complaintDescriptionELRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.fetchPatients();\n  }\n\n\n  startCreatePatientHandler = () => {\n    this.setState({ creating: true });\n    console.log(\"CreatePatientForm...\");\n  };\n  startUpdatePatientHandler = () => {\n    this.setState({ updating: true, updatingArray: true });\n    console.log(\"UpdatePatientForm...\");\n  };\n  startSearchPatientHandler = () => {\n    this.setState({ searching: true });\n    console.log(\"SearchPatientForm...\");\n  };\n\n  modalConfirmHandler = (event) => {\n\n    console.log(\"CreatePatientFormData:  \", event.target.formGridName.value);\n\n    this.setState({ creating: false });\n    const userId = this.context.userId;\n\n    let name = event.target.formGridName.value;\n    let dob = event.target.formGridDob.value;\n    let address = event.target.formGridAddress.value;\n    let contactPhone = event.target.formGridContactPhone.value;\n    let contactEmail = event.target.formGridContactEmail.value;\n    let registrationDate = event.target.formGridRegistrationDate.value;\n    let referringDoctorName = event.target.formGridReferringDoctorName.value;\n    let referringDoctorEmail = event.target.formGridReferringDoctorEmail.value;\n    let referringDoctorPhone = event.target.formGridReferringDoctorPhone.value;\n    let occupationRole = event.target.formGridOccupationRole.value;\n    let occupationEmployer = event.target.formGridOccupationEmployer.value;\n    let occupationEmployerContactPhone = event.target.formGridOccupationEmployerContactPhone.value;\n    let occupationEmployerContactEmail = event.target.formGridOccupationEmployerContactEmail.value;\n\n    if (\n      name.trim().length === 0 ||\n      dob.trim().length === 0 ||\n      address.trim().length === 0 ||\n      contactPhone.trim().length === 0 ||\n      contactEmail.trim().length === 0 ||\n      registrationDate.trim().length === 0 ||\n      referringDoctorName.trim().length === 0 ||\n      referringDoctorEmail.trim().length === 0 ||\n      referringDoctorPhone.trim().length === 0 ||\n      occupationRole.trim().length === 0 ||\n      occupationEmployer.trim().length === 0 ||\n      occupationEmployerContactPhone.trim().length === 0 ||\n      occupationEmployerContactEmail.trim().length === 0\n\n    ) {\n      console.log(\"blank fields detected!!!...Please try again...\");\n      return;\n    }\n\n    const patient = { name, dob, address, contactPhone, contactEmail, registrationDate, referringDoctorName, referringDoctorEmail, referringDoctorPhone, occupationRole, occupationEmployer, occupationEmployerContactPhone, occupationEmployerContactEmail };\n    console.log(\"creating patient.. \" + JSON.stringify(patient));\n\n    const requestBody = {\n      query: `\n          mutation CreatePatient($userId: ID!, $name: String!, $dob: String!, $address: String!, $contactPhone: String!, $contactEmail: String!, $registrationDate: String!, $referringDoctorName: String!, $referringDoctorEmail: String!, $referringDoctorPhone: String!, $occupationRole: String!, $occupationEmployer: String!, $occupationEmployerContactPhone: String!, $occupationEmployerContactEmail: String!) {\n            createPatient(userId: $userId, patientInput: { name: $name, dob: $dob, address: $address, contactPhone: $contactPhone, contactEmail: $contactEmail, registrationDate: $registrationDate, referringDoctorName: $referringDoctorName, referringDoctorEmail: $referringDoctorEmail, referringDoctorPhone: $referringDoctorPhone, occupationRole: $occupationRole, occupationEmployer: $occupationEmployer, occupationEmployerContactPhone: $occupationEmployerContactPhone, occupationEmployerContactEmail: $occupationEmployerContactEmail }) {\n              _id\n              name\n              address\n              contact{\n                email\n                phone\n              }\n              registrationDate\n              referringDoctor\n              {\n                name\n                email\n                phone\n              }\n              occupation\n              {\n                role\n                employer\n                contact\n                {\n                  email\n                  phone\n                }\n              }\n            }\n          }\n        `,\n        variables: {\n          userId: userId,\n          name: name,\n          dob: dob,\n          address: address,\n          contactPhone: contactPhone,\n          contactEmail: contactEmail,\n          registrationDate: registrationDate,\n          referringDoctorName: referringDoctorName,\n          referringDoctorEmail: referringDoctorEmail,\n          referringDoctorPhone: referringDoctorPhone,\n          occupationRole: occupationRole,\n          occupationEmployer: occupationEmployer,\n          occupationEmployerContactPhone: occupationEmployerContactPhone,\n          occupationEmployerContactEmail: occupationEmployerContactEmail\n        }\n    };\n\n    const token = this.context.token;\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n\n        this.setState(prevState => {\n          const updatedPatients = [...prevState.patients];\n          updatedPatients.push(\n            {\n            _id: resData.data.createPatient._id,\n            name: resData.data.createPatient.name,\n            dob: resData.data.createPatient.dob,\n            address: resData.data.createPatient.address,\n            contact:{\n              phone: resData.data.createPatient.contactPhone,\n              email: resData.data.createPatient.contactEmail\n            },\n            registrationDate: resData.data.createPatient.registrationDate,\n            referralDate: resData.data.createPatient.referralDate,\n            expirationDate: resData.data.createPatient.expirationDate,\n            referringDoctor: {\n              name: resData.data.createPatient.referringDoctorName,\n              email: resData.data.createPatient.referringDoctorEmail,\n              phone: resData.data.createPatient.referringDoctorPhone,\n            },\n            occupation: {\n              role: resData.data.createPatient.occupationRole,\n              employer: resData.data.createPatient.occupationEmployer,\n              contact: {\n                phone: resData.data.createPatient.occupationEmployerContactPhone,\n                email: resData.data.createPatient.occupationEmployerContactEmail\n              }\n            }\n          }\n        );\n\n          return { patients: updatedPatients };\n        });\n\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  modalCancelHandler = () => {\n    this.setState({ creating: false, updating: false, selectedPatient: null });\n  };\n\n\n  modalConfirmUpdateHandler = (event) => {\n\n    if(this.context.user.role !== 'admin') {\n      console.log(\"Not the Admin! No edit permission!!\");\n\n    }\n\n    const userId = this.context.userId;\n    const patientId = this.context.selectedPatient._id;\n\n    // console.log(\"UpdateUserFormData:  \", event);\n    console.log(\"UpdatePatientFormData:  \", event.target.formGridName.value);\n\n\n    this.setState({ updating: false });\n    let name = event.target.formGridName.value;\n    let dob = event.target.formGridDob.value;\n    let address = event.target.formGridAddress.value;\n    let contactPhone = event.target.formGridContactPhone.value;\n    let contactEmail = event.target.formGridContactEmail.value;\n    let registrationDate = event.target.formGridRegistrationDate.value;\n    let referringDoctorName = event.target.formGridReferringDoctorName.value;\n    let referringDoctorEmail = event.target.formGridReferringDoctorEmail.value;\n    let referringDoctorPhone = event.target.formGridReferringDoctorPhone.value;\n    let occupationRole = event.target.formGridOccupationRole.value;\n    let occupationEmployer = event.target.formGridOccupationEmployer.value;\n    let occupationEmployerContactPhone = event.target.formGridOccupationEmployerContactPhone.value;\n    let occupationEmployerContactEmail = event.target.formGridOccupationEmployerContactEmail.value;\n\n\n    if (name.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      name  = this.context.selectedUser.name;\n      // return;\n    }\n    if (dob.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      dob  = this.context.selectedUser.dob;\n    }\n    if (address.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      address  = this.context.selectedUser.address;\n    }\n    if (contactPhone.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      contactPhone  = this.context.selectedUser.contactPhone;\n    }\n    if (contactEmail.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      contactEmail  = this.context.selectedUser.contactEmail;\n    }\n    if (registrationDate.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      registrationDate  = this.context.selectedUser.registrationDate;\n    }\n    if (referringDoctorName.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      referringDoctorName  = this.context.selectedUser.referringDoctorName;\n    }\n    if (referringDoctorEmail.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      referringDoctorEmail  = this.context.selectedUser.referringDoctorEmail;\n    }\n    if (referringDoctorPhone.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      referringDoctorPhone  = this.context.selectedUser.referringDoctorPhone;\n    }\n    if (occupationRole.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      occupationRole  = this.context.selectedUser.occupationRole;\n    }\n    if (occupationEmployer.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      occupationEmployer  = this.context.selectedUser.occupationEmployer;\n    }\n    if (occupationEmployerContactEmail.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      occupationEmployerContactEmail  = this.context.selectedUser.occupationEmployerContactEmail;\n    }\n    if (occupationEmployerContactPhone.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      occupationEmployerContactPhone  = this.context.selectedUser.occupationEmployerContactPhone;\n    }\n\n\n    const patient = { name, dob, address, contactPhone, contactEmail, registrationDate, referringDoctorName, referringDoctorEmail, referringDoctorPhone, occupationRole, occupationEmployer, occupationEmployerContactPhone, occupationEmployerContactEmail};\n    console.log(`\n      updating patient...\n      userId: ${userId},\n      patientId: ${patientId},\n      name: ${name},\n      dob: ${dob},\n      address: ${address},\n      contactPhone: ${contactPhone},\n      contactEmail: ${contactEmail},\n      registrationDate: ${registrationDate},\n      referringDoctorName: ${referringDoctorName},\n      referringDoctorEmail: ${referringDoctorEmail},\n      referringDoctorPhone: ${referringDoctorPhone},\n      occupationRole: ${occupationRole},\n      occupationEmployer: ${occupationEmployer},\n      occupationEmployerContactPhone: ${occupationEmployerContactPhone},\n      occupationEmployerContactEmail: ${occupationEmployerContactEmail},\n      `);\n\n    const requestBody = {\n      query: `\n          mutation {\n            updatePatient(userId:\\\"${userId}\\\", patientId: \"${patientId}\", patientInput: { name: \"${name}\", dob: \"${dob}\", address: \"${address}\", contactPhone: \"${contactPhone}\", contactEmail: \"${contactEmail}\", registrationDate: \"${registrationDate}\", referringDoctorName: \"${referringDoctorName}\", referringDoctorEmail: \"${referringDoctorEmail}\", referringDoctorPhone: \"${referringDoctorPhone}\", occupationRole: \"${occupationRole}\", occupationEmployer: \"${occupationEmployer}\", occupationEmployerContactPhone: \"${occupationEmployerContactPhone}\", occupationEmployerContactEmail: \"${occupationEmployerContactEmail}\" }){\n              _id\n              name\n              address\n              contact{\n                email\n                phone\n              }\n              registrationDate\n              referralDate\n              expirationDate\n              referringDoctor{\n                name\n                email\n                phone\n              }\n                occupation{\n                  role\n                  employer\n                  contact{\n                    email\n                    phone\n                  }\n                }\n                insurance\n                {\n                  company\n                  number\n                  description\n                  expiry\n                  subscriber{\n                    company\n                    description\n                  }\n                }\n                nextOfKin{\n                  name\n                  contact{\n                    email\n                    phone\n                  }\n                }\n                complaints{\n                  date\n                  title\n                  description\n                  attachment{\n                    name\n                    format\n                    path\n                  }\n                }\n                examination{\n                  area\n                  type\n                  measure\n                  value\n                  description\n                  attachment{\n                    name\n                    format\n                    path\n                  }\n                }\n                history{\n                  title\n                  type\n                  date\n                  description\n                  attachment{\n                    name\n                    format\n                    path\n                  }\n                }\n                allergies{\n                  title\n                  description\n                  attachment{\n                    name\n                    format\n                    path\n                  }\n                }\n                medication{\n                  title\n                  description\n                  attachment{\n                    name\n                    format\n                    path\n                  }\n                }\n                investigation{\n                  date\n                  title\n                  description\n                  attachment{\n                    name\n                    format\n                    path\n                  }\n                }\n                  diagnosis{\n                    date\n                    title\n                    description\n                    attachment{\n                      name\n                      format\n                      path\n                    }\n                  }\n                  treatment{\n                    date\n                    title\n                    type\n                    description\n                    dose\n                    frequency\n                    attachment{\n                      name\n                      format\n                      path\n                    }\n                  }\n                  billing{\n                    date\n                    title\n                    type\n                    description\n                    amount\n                    paid\n                    notes\n                    attachment\n                    {\n                      name\n                      format\n                      path\n                    }\n                  }\n            }\n          }\n        `\n    };\n\n    const token = this.context.token;\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n\n        const updatedPatientId = resData.data.updatePatient._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(\n          {\n          _id: resData.data.updatePatient._id,\n          name: resData.data.updatePatient.name,\n          dob: resData.data.updatePatient.dob,\n          address: resData.data.updatePatient.address,\n          contact:{\n            phone: resData.data.updatePatient.contactPhone,\n            email: resData.data.updatePatient.contactEmail\n          },\n          registrationDate: resData.data.updatePatient.registrationDate,\n          referringDoctor: {\n            name: resData.data.updatePatient.referringDoctorName,\n            email: resData.data.updatePatient.referringDoctorEmail,\n            phone: resData.data.updatePatient.referringDoctorPhone,\n          },\n          occupation: {\n            role: resData.data.updatePatient.occupationRole,\n            employer: resData.data.updatePatient.occupationEmployer,\n            contact: {\n              phone: resData.data.updatePatient.occupationEmployerContactPhone,\n              email: resData.data.updatePatient.occupationEmployerContactEmail\n            }\n          }\n        }\n        );\n\n        // if (this.state.updatingArray === false && this.state.updating === false) {\n        //   console.log(\"update and updateArray complete...now fetching users\");\n        //\n        // }\n        this.fetchPatients();\n\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\nupdatePatientInsuranceHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n  if(\n    this.context.user.role !== 'admin'\n  ) {\n    console.log(\"No edit permission!!\");\n    return;\n  }\n\n  console.log(\"UpdatePatientInsuranceFormData:  \", event.target.formGridInsuranceCompany.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let insuranceCompany = event.target.formGridInsuranceCompany.value;\n  let insuranceNumber = event.target.formGridInsuranceNumber.value;\n  let insuranceExpiry = event.target.formGridInsuranceExpiry.value;\n  let insuranceDescription = event.target.formGridInsuranceDescription.value;\n  let insuranceSubscriberCompany = event.target.formGridInsuranceSubscriberCompany.value;\n  let insuranceSubscriberDescription = event.target.formGridInsuranceSubscriberDescription.value;\n\n  const patientInsurance = { insuranceCompany, insuranceNumber, insuranceExpiry, insuranceDescription, insuranceSubscriberCompany, insuranceSubscriberDescription };\n  console.log(`\n    adding patient insurance item...\n    userId: ${userId},\n    selectedPatientId: ${selectedPatientId},\n    insuranceCompany: ${insuranceCompany},\n    insuranceNumber: ${insuranceNumber},\n    insuranceExpiry: ${insuranceExpiry},\n    insuranceDescription: ${insuranceDescription},\n    insuranceSubscriberCompany: ${insuranceSubscriberCompany},\n    insuranceSubscriberDescription: ${insuranceSubscriberDescription},\n    `);\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientInsurance(userId:\\\"${userId}\\\", patientId:\\\"${selectedPatientId}\\\",patientInput:{insuranceCompany:\\\"${insuranceCompany}\\\",insuranceNumber:\\\"${insuranceNumber}\\\",insuranceDescription:\\\"${insuranceDescription}\\\",insuranceExpiry:\\\"${insuranceExpiry}\\\",insuranceSubscriberCompany:\\\"${insuranceSubscriberCompany}\\\",insuranceSubscriberDescription:\\\"${insuranceSubscriberDescription}\\\"})\n        {_id,name,address,contact{email,phone},registrationDate,referralDate,expirationDate,referringDoctor{name,email,phone},occupation{role,employer,contact{email,phone}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{email,phone}},complaints{date,title,description,attachment{name,format,path}},examination{area,type,measure,value,description,attachment{name,format,path}},history{title,type,date,description,attachment{name,format,path}},allergies{title,description,attachment{name,format,path}},medication{title,description,attachment{name,format,path}},investigation{date,title,description,attachment{name,format,path}},diagnosis{date,title,description,attachment{name,format,path}},treatment{date,title,type,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,notes,attachment{name,format,path}}}}\n      `\n    };\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData.data));\n\n          const updatedPatientId = resData.data.updatePatientInsurance._id;\n          const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n          const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n          const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n          console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n          this.state.patients.push(updatedPatient);\n          this.context.patients = this.state.patients;\n          this.fetchPatients();\n        })\n        .catch(err => {\n          console.log(err);\n        });\n\n}\n\nupdatePatientNextOfKinHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n  if(\n    this.context.user.role !== 'admin'\n  ) {\n    console.log(\"No edit permission!!\");\n    return;\n  }\n\n  console.log(\"UpdatePatientNextOfKinFormData:  \", event.target.formGridNextOfKinName.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let nextOfKinName = event.target.formGridNextOfKinName.value;\n  let nextOfKinPhone = event.target.formGridNextOfKinPhone.value;\n  let nextOfKinEmail = event.target.formGridNextOfKinEmail.value;\n\n  const patientNextOfKin = { nextOfKinName, nextOfKinPhone, nextOfKinEmail };\n  console.log(`\n    adding patient nextOfKin item...\n    userId: ${userId},\n    selectedPatientId: ${selectedPatientId},\n    nextOfKinName: ${nextOfKinName},\n    nextOfKinPhone: ${nextOfKinPhone},\n    nextOfKinEmail: ${nextOfKinEmail},\n    `);\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientNextOfKin(userId:\\\"${userId}\\\", patientId:\\\"${selectedPatientId}\\\",patientInput:{nextOfKinName:\\\"${nextOfKinName}\\\",nextOfKinEmail:\\\"granny@kin.mail\\\",nextOfKinPhone:\\\"1234566\\\"})\n        {_id,name,address,contact{email,phone},registrationDate,referralDate,expirationDate,referringDoctor{name,email,phone},occupation{role,employer,contact{email,phone}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{email,phone}},complaints{date,title,description,attachment{name,format,path}},examination{area,type,measure,value,description,attachment{name,format,path}},history{title,type,date,description,attachment{name,format,path}},allergies{title,description,attachment{name,format,path}},medication{title,description,attachment{name,format,path}},investigation{date,title,description,attachment{name,format,path}},diagnosis{date,title,description,attachment{name,format,path}},treatment{date,title,type,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,notes,attachment{name,format,path}}}}\n      `\n    };\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData.data));\n\n          const updatedPatientId = resData.data.updatePatientNextOfKin._id;\n          const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n          const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n          const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n          console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n          this.state.patients.push(updatedPatient);\n          this.context.patients = this.state.patients;\n          this.fetchPatients();\n        })\n        .catch(err => {\n          console.log(err);\n        });\n}\n\n\nupdatePatientComplaintHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n  if(\n    this.context.user.role !== 'admin'\n  ) {\n    console.log(\"No edit permission!!\");\n    return;\n  }\n\n  console.log(\"UpdatePatientComplaintFormData:  \", event.target.formGridComplaintTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let complaintTitle = event.target.formGridComplaintTitle.value;\n  let complaintDate = event.target.formGridComplaintDate.value;\n  let complaintDescription = event.target.formGridComplaintDescription.value;\n  let complaintAttachmentName = event.target.formGridComplaintAttachmentName.value;\n  let complaintAttachmentFormat = event.target.formGridComplaintAttachmentFormat.value;\n  let complaintAttachmentPath = event.target.formGridComplaintAttachmentPath.value;\n\n  const patientComplaint = { complaintTitle, complaintDate, complaintDescription, complaintAttachmentName, complaintAttachmentFormat, complaintAttachmentPath };\n  console.log(`\n    adding patient complaint...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    complaintTitle: ${complaintTitle},\n    complaintDate: ${complaintDate},\n    complaintDescription: ${complaintDescription},\n    complaintAttachmentName: ${complaintAttachmentName},\n    complaintAttachmentFormat: ${complaintAttachmentFormat},\n    complaintAttachmentPath: ${complaintAttachmentPath},\n    `);\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientComplaint(userId:\\\"${userId}\\\", patientId:\\\"${selectedPatientId}\\\",patientInput:{complaintDate:\\\"${complaintDate}\\\",complaintTitle:\\\"${complaintTitle}\\\",complaintDescription:\\\"${complaintDescription}\\\",complaintAttachmentName:\\\"${complaintAttachmentName}\\\",complaintAttachmentFormat:\\\"${complaintAttachmentFormat}\\\",complaintAttachmentPath:\\\"${complaintAttachmentPath}\\\"})\n        {_id,name,address,contact{email,phone},registrationDate,referralDate,expirationDate,referringDoctor{name,email,phone},occupation{role,employer,contact{email,phone}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{email,phone}},complaints{date,title,description,attachment{name,format,path}},examination{area,type,measure,value,description,attachment{name,format,path}},history{title,type,date,description,attachment{name,format,path}},allergies{title,description,attachment{name,format,path}},medication{title,description,attachment{name,format,path}},investigation{date,title,description,attachment{name,format,path}},diagnosis{date,title,description,attachment{name,format,path}},treatment{date,title,type,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,notes,attachment{name,format,path}}}}\n      `\n    }\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientComplaint._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(updatedPatient);\n        this.context.patients = this.state.patients;\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n      });\n\n}\n\n\nupdatePatientExaminationHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n  if(\n    this.context.user.role !== 'admin'\n  ) {\n    console.log(\"No edit permission!!\");\n    return;\n  }\n\n  console.log(\"UpdatePatientExaminationFormData:  \", event.target.formGridExaminationArea.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let examinationArea = event.target.formGridExaminationArea.value;\n  let examinationType = event.target.formGridExaminationType.value;\n  let examinationMeasure = event.target.formGridExaminationMeasure.value;\n  let examinationValue = event.target.formGridExaminationValue.value;\n  let examinationDescription = event.target.formGridExaminationDescription.value;\n  let examinationAttachmentName = event.target.formGridExaminationAttachmentName.value;\n  let examinationAttachmentFormat = event.target.formGridExaminationAttachmentFormat.value;\n  let examinationAttachmentPath = event.target.formGridExaminationAttachmentPath.value;\n\n  const patientExamination = { examinationArea, examinationType, examinationMeasure, examinationValue, examinationAttachmentName, examinationAttachmentFormat, examinationAttachmentPath };\n\n  console.log(`\n    adding patient examination...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    examinationArea: ${examinationArea},\n    examinationType: ${examinationType},\n    examinationMeasure: ${examinationMeasure},\n    examinationValue: ${examinationValue},\n    examinationDescription: ${examinationDescription},\n    examinationAttachmentName: ${examinationAttachmentName},\n    examinationAttachmentFormat: ${examinationAttachmentFormat},\n    examinationAttachmentPath: ${examinationAttachmentPath},\n    `);\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientExamination(userId:\\\"${userId}\\\", patientId:\\\"${selectedPatientId}\\\",patientInput:{examinationArea:\\\"${examinationArea}\\\",examinationType:\\\"${examinationType}\\\",examinationMeasure:\\\"${examinationMeasure}\\\",examinationValue:\\\"${examinationValue}\\\",examinationDescription:\\\"${examinationDescription}\\\",examinationAttachmentName:\\\"${examinationAttachmentName}\\\",examinationAttachmentFormat:\\\"${examinationAttachmentFormat}\\\",examinationAttachmentPath:\\\"${examinationAttachmentPath}\\\"})\n        {_id,name,address,contact{email,phone},registrationDate,referralDate,expirationDate,referringDoctor{name,email,phone},occupation{role,employer,contact{email,phone}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{email,phone}},complaints{date,title,description,attachment{name,format,path}},examination{area,type,measure,value,description,attachment{name,format,path}},history{title,type,date,description,attachment{name,format,path}},allergies{title,description,attachment{name,format,path}},medication{title,description,attachment{name,format,path}},investigation{date,title,description,attachment{name,format,path}},diagnosis{date,title,description,attachment{name,format,path}},treatment{date,title,type,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,notes,attachment{name,format,path}}}}\n      `\n    }\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientExamination._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(updatedPatient);\n        this.context.patients = this.state.patients;\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n      });\n\n}\n\n\nupdatePatientHistoryHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n  if(\n    this.context.user.role !== 'admin'\n  ) {\n    console.log(\"No edit permission!!\");\n    return;\n  }\n\n  console.log(\"UpdatePatientHistoryFormData:  \", event.target.formGridHistoryTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let historyType = event.target.formGridHistoryType.value;\n  let historyDate = event.target.formGridHistoryDate.value;\n  let historyTitle = event.target.formGridHistoryTitle.value;\n  let historyDescription = event.target.formGridHistoryDescription.value;\n  let historyAttachmentName = event.target.formGridHistoryAttachmentName.value;\n  let historyAttachmentFormat = event.target.formGridHistoryAttachmentFormat.value;\n  let historyAttachmentPath = event.target.formGridHistoryAttachmentPath.value;\n\n  const patientHistory = { historyType, historyDate, historyTitle, historyDescription, historyAttachmentName, historyAttachmentFormat, historyAttachmentPath };\n  console.log(`\n    adding patient history...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    historyType: ${historyType},\n    historyDate: ${historyDate},\n    historyTitle: ${historyTitle},\n    historyDescription: ${historyDescription},\n    historyAttachmentName: ${historyAttachmentName},\n    historyAttachmentFormat: ${historyAttachmentFormat},\n    historyAttachmentPath: ${historyAttachmentPath},\n    `);\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientHistory(userId:\\\"${userId}\\\", patientId:\\\"${selectedPatientId}\\\",patientInput:{historyTitle:\\\"${historyTitle}\\\",historyType:\\\"${historyType}\\\",historyDate:\\\"${historyDate}\\\",historyDescription:\\\"${historyDescription}\\\",historyAttachmentName:\\\"${historyAttachmentName}\\\",historyAttachmentFormat:\\\"${historyAttachmentFormat}\\\",historyAttachmentPath:\\\"${historyAttachmentPath}\\\"})\n        {_id,name,address,contact{email,phone},registrationDate,referralDate,expirationDate,referringDoctor{name,email,phone},occupation{role,employer,contact{email,phone}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{email,phone}},complaints{date,title,description,attachment{name,format,path}},examination{area,type,measure,value,description,attachment{name,format,path}},history{title,type,date,description,attachment{name,format,path}},allergies{title,description,attachment{name,format,path}},medication{title,description,attachment{name,format,path}},investigation{date,title,description,attachment{name,format,path}},diagnosis{date,title,description,attachment{name,format,path}},treatment{date,title,type,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,notes,attachment{name,format,path}}}}\n      `\n    }\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientHistory._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(updatedPatient);\n        this.context.patients = this.state.patients;\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n      });\n\n}\n\n\nupdatePatientAllergiesHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n  if(\n    this.context.user.role !== 'admin'\n  ) {\n    console.log(\"No edit permission!!\");\n    return;\n  }\n\n  console.log(\"UpdatePatientAllergiesFormData:  \", event.target.formGridAllergiesTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let allergiesTitle = event.target.formGridAllergiesTitle.value;\n  let allergiesDescription = event.target.formGridAllergiesDescription.value;\n  let allergiesAttachmentName = event.target.formGridAllergiesAttachmentName.value;\n  let allergiesAttachmentFormat = event.target.formGridAllergiesAttachmentFormat.value;\n  let allergiesAttachmentPath = event.target.formGridAllergiesAttachmentPath.value;\n\n  const patientAllergies = { allergiesTitle, allergiesDescription, allergiesAttachmentName, allergiesAttachmentFormat, allergiesAttachmentPath };\n\n  console.log(`\n    adding patient allergies...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    allergiesTitle: ${allergiesTitle},\n    allergiesDescription: ${allergiesDescription},\n    allergiesAttachmentName: ${allergiesAttachmentName},\n    allergiesAttachmentFormat: ${allergiesAttachmentFormat},\n    allergiesAttachmentPath: ${allergiesAttachmentPath},\n    `);\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientAllergies(userId:\\\"${userId}\\\", patientId:\\\"${selectedPatientId}\\\",patientInput:{allergiesTitle:\\\"${allergiesTitle}\\\", allergiesDescription:\\\"${allergiesDescription}\\\",allergiesAttachmentName:\\\"${allergiesAttachmentName}\\\",allergiesAttachmentFormat:\\\"${allergiesAttachmentFormat}\\\",allergiesAttachmentPath:\\\"${allergiesAttachmentPath}\\\"})\n        {_id,name,address,contact{email,phone},registrationDate,referralDate,expirationDate,referringDoctor{name,email,phone},occupation{role,employer,contact{email,phone}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{email,phone}},complaints{date,title,description,attachment{name,format,path}},examination{area,type,measure,value,description,attachment{name,format,path}},history{title,type,date,description,attachment{name,format,path}},allergies{title,description,attachment{name,format,path}},medication{title,description,attachment{name,format,path}},investigation{date,title,description,attachment{name,format,path}},diagnosis{date,title,description,attachment{name,format,path}},treatment{date,title,type,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,notes,attachment{name,format,path}}}}\n      `\n    }\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientAllergies._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(updatedPatient);\n        this.context.patients = this.state.patients;\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n      });\n\n\n}\n\n\nupdatePatientMedicationHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n  if(\n    this.context.user.role !== 'admin'\n  ) {\n    console.log(\"No edit permission!!\");\n    return;\n  }\n\n  console.log(\"UpdatePatientMedicationFormData:  \", event.target.formGridMedicationTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let medicationTitle = event.target.formGridMedicationTitle.value;\n  let medicationDescription = event.target.formGridMedicationDescription.value;\n  let medicationAttachmentName = event.target.formGridMedicationAttachmentName.value;\n  let medicationAttachmentFormat = event.target.formGridMedicationAttachmentFormat.value;\n  let medicationAttachmentPath = event.target.formGridMedicationAttachmentPath.value;\n\n  const patientMedication = { medicationTitle, medicationDescription, medicationAttachmentName, medicationAttachmentFormat, medicationAttachmentPath };\n\n  console.log(`\n    adding patient medication...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    medicationTitle: ${medicationTitle},\n    medicationDescription: ${medicationDescription},\n    medicationAttachmentName: ${medicationAttachmentName},\n    medicationAttachmentFormat: ${medicationAttachmentFormat},\n    medicationAttachmentPath: ${medicationAttachmentPath},\n    `);\n\n    const requestBody = {\n      query:`\n      mutation {updatePatientMedication(userId:\\\"${userId}\\\", patientId:\\\"${selectedPatientId}\\\",patientInput:{medicationTitle:\\\"${medicationTitle}\\\", medicationDescription:\\\"${medicationDescription}\\\",medicationAttachmentName:\\\"${medicationAttachmentName}\\\",medicationAttachmentFormat:\\\"${medicationAttachmentFormat}\\\",medicationAttachmentPath:\\\"${medicationAttachmentPath}\\\"})\n        {_id,name,address,contact{email,phone},registrationDate,referralDate,expirationDate,referringDoctor{name,email,phone},occupation{role,employer,contact{email,phone}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{email,phone}},complaints{date,title,description,attachment{name,format,path}},examination{area,type,measure,value,description,attachment{name,format,path}},history{title,type,date,description,attachment{name,format,path}},allergies{title,description,attachment{name,format,path}},medication{title,description,attachment{name,format,path}},investigation{date,title,description,attachment{name,format,path}},diagnosis{date,title,description,attachment{name,format,path}},treatment{date,title,type,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,notes,attachment{name,format,path}}}}\n      `\n    }\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientMedication._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(updatedPatient);\n        this.context.patients = this.state.patients;\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n      });\n\n}\n\n\nupdatePatientInvestigationHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n  if(\n    this.context.user.role !== 'admin'\n  ) {\n    console.log(\"No edit permission!!\");\n    return;\n  }\n\n  console.log(\"UpdatePatientInvestigationFormData:  \", event.target.formGridInvestigationTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let investigationDate = event.target.formGridInvestigationDate.value;\n  let investigationTitle = event.target.formGridInvestigationTitle.value;\n  let investigationDescription = event.target.formGridInvestigationDescription.value;\n  let investigationAttachmentName = event.target.formGridInvestigationAttachmentName.value;\n  let investigationAttachmentFormat = event.target.formGridInvestigationAttachmentFormat.value;\n  let investigationAttachmentPath = event.target.formGridInvestigationAttachmentPath.value;\n\n  const patientInvestigation = { investigationDate, investigationTitle, investigationDescription, investigationAttachmentName, investigationAttachmentFormat, investigationAttachmentPath };\n\n  console.log(`\n    adding patient investigation...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    investigationDate: ${investigationDate},\n    investigationTitle: ${investigationTitle},\n    investigationDescription: ${investigationDescription},\n    investigationAttachmentName: ${investigationAttachmentName},\n    investigationAttachmentFormat: ${investigationAttachmentFormat},\n    investigationAttachmentPath: ${investigationAttachmentPath},\n    `);\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientInvestigation(userId:\\\"${userId}\\\", patientId:\\\"${selectedPatientId}\\\",patientInput:{investigationDate:\\\"${investigationDate}\\\",investigationTitle:\\\"${investigationTitle}\\\",investigationDescription:\\\"${investigationDescription}\\\",investigationAttachmentName:\\\"${investigationAttachmentName}\\\",investigationAttachmentFormat:\\\"${investigationAttachmentFormat}\\\",investigationAttachmentPath:\\\"${investigationAttachmentPath}\\\"})\n        {_id,name,address,contact{email,phone},registrationDate,referralDate,expirationDate,referringDoctor{name,email,phone},occupation{role,employer,contact{email,phone}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{email,phone}},complaints{date,title,description,attachment{name,format,path}},examination{area,type,measure,value,description,attachment{name,format,path}},history{title,type,date,description,attachment{name,format,path}},allergies{title,description,attachment{name,format,path}},medication{title,description,attachment{name,format,path}},investigation{date,title,description,attachment{name,format,path}},diagnosis{date,title,description,attachment{name,format,path}},treatment{date,title,type,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,notes,attachment{name,format,path}}}}\n      `\n    }\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientInvestigation._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(updatedPatient);\n        this.context.patients = this.state.patients;\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n      });\n\n}\n\n\nupdatePatientDiagnosisHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n  if(\n    this.context.user.role !== 'admin'\n  ) {\n    console.log(\"No edit permission!!\");\n    return;\n  }\n\n  console.log(\"UpdatePatientDiagnosisFormData:  \", event.target.formGridDiagnosisTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let diagnosisDate = event.target.formGridDiagnosisDate.value;\n  let diagnosisTitle = event.target.formGridDiagnosisTitle.value;\n  let diagnosisDescription = event.target.formGridDiagnosisDescription.value;\n  let diagnosisAttachmentName = event.target.formGridDiagnosisAttachmentName.value;\n  let diagnosisAttachmentFormat = event.target.formGridDiagnosisAttachmentFormat.value;\n  let diagnosisAttachmentPath = event.target.formGridDiagnosisAttachmentPath.value;\n\n  const patientDiagnosis = { diagnosisDate, diagnosisTitle, diagnosisDescription, diagnosisAttachmentName, diagnosisAttachmentFormat, diagnosisAttachmentPath };\n\n  console.log(`\n    adding patient diagnosis...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    diagnosisDate: ${diagnosisDate},\n    diagnosisTitle: ${diagnosisTitle},\n    diagnosisDescription: ${diagnosisDescription},\n    diagnosisAttachmentName: ${diagnosisAttachmentName},\n    diagnosisAttachmentFormat: ${diagnosisAttachmentFormat},\n    diagnosisAttachmentPath: ${diagnosisAttachmentPath},\n    `);\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientDiagnosis(userId:\\\"${userId}\\\", patientId:\\\"${selectedPatientId}\\\",patientInput:{diagnosisDate:\\\"${diagnosisDate}\\\",diagnosisTitle:\\\"${diagnosisTitle}\\\",diagnosisDescription:\\\"${diagnosisDescription}\\\",diagnosisAttachmentName:\\\"${diagnosisAttachmentName}\\\",diagnosisAttachmentFormat:\\\"${diagnosisAttachmentFormat}\\\",diagnosisAttachmentPath:\\\"${diagnosisAttachmentPath}\\\"})\n        {_id,name,address,contact{email,phone},registrationDate,referralDate,expirationDate,referringDoctor{name,email,phone},occupation{role,employer,contact{email,phone}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{email,phone}},complaints{date,title,description,attachment{name,format,path}},examination{area,type,measure,value,description,attachment{name,format,path}},history{title,type,date,description,attachment{name,format,path}},allergies{title,description,attachment{name,format,path}},medication{title,description,attachment{name,format,path}},investigation{date,title,description,attachment{name,format,path}},diagnosis{date,title,description,attachment{name,format,path}},treatment{date,title,type,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,notes,attachment{name,format,path}}}}\n      `\n    }\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientDiagnosis._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(updatedPatient);\n        this.context.patients = this.state.patients;\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n      });\n\n}\n\n\nupdatePatientTreatmentHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n  if(\n    this.context.user.role !== 'admin'\n  ) {\n    console.log(\"No edit permission!!\");\n    return;\n  }\n\n  console.log(\"UpdatePatientTreatmentFormData:  \", event.target.formGridTreatmentTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let treatmentDate = event.target.formGridTreatmentDate.value;\n  let treatmentTitle = event.target.formGridTreatmentTitle.value;\n  let treatmentDescription = event.target.formGridTreatmentDescription.value;\n  let treatmentDose = event.target.formGridTreatmentDose.value;\n  let treatmentFrequency = event.target.formGridTreatmentFrequency.value;\n  let treatmentType = event.target.formGridTreatmentType.value;\n  let treatmentAttachmentName = event.target.formGridTreatmentAttachmentName.value;\n  let treatmentAttachmentFormat = event.target.formGridTreatmentAttachmentFormat.value;\n  let treatmentAttachmentPath = event.target.formGridTreatmentAttachmentPath.value;\n\n  const patientTreatment = { treatmentDate, treatmentTitle, treatmentDescription, treatmentDose, treatmentFrequency, treatmentType, treatmentAttachmentName, treatmentAttachmentFormat, treatmentAttachmentPath };\n\n  console.log(`\n    adding patient treatment...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    treatmentDate: ${treatmentDate},\n    treatmentTitle: ${treatmentTitle},\n    treatmentDescription: ${treatmentDescription},\n    treatmentDose: ${treatmentDose},\n    treatmentFrequency: ${treatmentFrequency},\n    treatmentType: ${treatmentType},\n    treatmentAttachmentName: ${treatmentAttachmentName},\n    treatmentAttachmentFormat: ${treatmentAttachmentFormat},\n    treatmentAttachmentPath: ${treatmentAttachmentPath},\n    `);\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientTreatment(userId:\\\"${userId}\\\", patientId:\\\"${selectedPatientId}\\\",patientInput:{treatmentDate:\\\"${treatmentDate}\\\",treatmentTitle:\\\"${treatmentTitle}\\\",treatmentType:\\\"${treatmentType}\\\",treatmentDescription:\\\"${treatmentDescription}\\\",treatmentDose:\\\"${treatmentDose}\\\",treatmentFrequency:\\\"${treatmentFrequency}\\\",treatmentAttachmentName:\\\"${treatmentAttachmentName}\\\",treatmentAttachmentFormat:\\\"${treatmentAttachmentFormat}\\\",treatmentAttachmentPath:\\\"${treatmentAttachmentPath}\\\"})\n        {_id,name,address,contact{email,phone},registrationDate,referralDate,expirationDate,referringDoctor{name,email,phone},occupation{role,employer,contact{email,phone}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{email,phone}},complaints{date,title,description,attachment{name,format,path}},examination{area,type,measure,value,description,attachment{name,format,path}},history{title,type,date,description,attachment{name,format,path}},allergies{title,description,attachment{name,format,path}},medication{title,description,attachment{name,format,path}},investigation{date,title,description,attachment{name,format,path}},diagnosis{date,title,description,attachment{name,format,path}},treatment{date,title,type,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,notes,attachment{name,format,path}}}}\n      `\n    }\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientTreatment._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(updatedPatient);\n        this.context.patients = this.state.patients;\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n      });\n\n}\n\n\n\nupdatePatientBillingHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n  if(\n    this.context.user.role !== 'admin'\n  ) {\n    console.log(\"No edit permission!!\");\n    return;\n  }\n\n  console.log(\"UpdatePatientBillingFormData:  \", event.target.formGridBillingTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let billingDate = event.target.formGridBillingDate.value;\n  let billingTitle = event.target.formGridBillingTitle.value;\n  let billingType = event.target.formGridBillingType.value;\n  let billingDescription = event.target.formGridBillingDescription.value;\n  let billingAmount = event.target.formGridBillingAmount.value;\n  let billingPaid = event.target.formGridBillingPaid.value;\n  let billingNotes = event.target.formGridBillingNotes.value;\n  let billingAttachmentName = event.target.formGridBillingAttachmentName.value;\n  let billingAttachmentFormat = event.target.formGridBillingAttachmentFormat.value;\n  let billingAttachmentPath = event.target.formGridBillingAttachmentPath.value;\n\n  const patientBilling = { billingDate, billingTitle, billingType, billingDescription, billingAmount, billingPaid, billingNotes, billingAttachmentName, billingAttachmentFormat, billingAttachmentPath };\n\n  console.log(`\n    adding patient treatment...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    billingDate: ${billingDate},\n    billingTitle: ${billingTitle},\n    billingType: ${billingType},\n    billingDescription: ${billingDescription},\n    billingAmount: ${billingAmount},\n    billingPaid: ${billingPaid},\n    billingNotes: ${billingNotes},\n    billingAttachmentName: ${billingAttachmentName},\n    billingAttachmentFormat: ${billingAttachmentFormat},\n    billingAttachmentPath: ${billingAttachmentPath},\n    `);\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientBilling(userId:\\\"${userId}\\\", patientId:\\\"${selectedPatientId}\\\",patientInput:{billingDate:\\\"${billingDate}\\\",billingTitle:\\\"${billingTitle}\\\",billingType:\\\"${billingType}\\\",billingDescription:\\\"${billingDescription}\\\",billingAmount:${billingAmount},billingPaid:${billingPaid},billingNotes:\\\"${billingNotes}\\\",billingAttachmentName:\\\"${billingAttachmentName}\\\",billingAttachmentFormat:\\\"${billingAttachmentFormat}\\\",billingAttachmentPath:\\\"${billingAttachmentPath}\\\"})\n        {_id,name,address,contact{email,phone},registrationDate,referralDate,expirationDate,referringDoctor{name,email,phone},occupation{role,employer,contact{email,phone}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{email,phone}},complaints{date,title,description,attachment{name,format,path}},examination{area,type,measure,value,description,attachment{name,format,path}},history{title,type,date,description,attachment{name,format,path}},allergies{title,description,attachment{name,format,path}},medication{title,description,attachment{name,format,path}},investigation{date,title,description,attachment{name,format,path}},diagnosis{date,title,description,attachment{name,format,path}},treatment{date,title,type,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,notes,attachment{name,format,path}}}}\n      `\n    }\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientBilling._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(updatedPatient);\n        this.context.patients = this.state.patients;\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n      });\n\n\n}\n\n\n\n\nmodalConfirmSearchHandler = (event) => {\n  console.log(\"SearchPatientForm:  \");\n\n\n  let userId = this.context.userId;\n\n    console.log(\"SearchPatientFormData:  \", event.target.formBasicField.value);\n    this.setState({ searching: false });\n\n    let field = event.target.formBasicField.value;\n    let query = event.target.formBasicQuery.value;\n\n    if (\n      field.trim().length === 0 ||\n      query.trim().length === 0\n    ) {\n      console.log(\"blank fields detected!!!...Please try again...\");\n      return;\n    }\n\n    const search = { field, query }\n    console.log(\"Searching for Patient:  \", JSON.stringify(search));\n\n    const requestBody = {\n      query: `\n        query GetPatientField($userId: ID!, $field: String!, $query: String!)\n        {getPatientField(userId: $userId, field: $field, query: $query ){\n          _id\n          name\n          address\n          contact{\n            email\n            phone\n          }\n          registrationDate\n          referralDate\n          expirationDate\n          referringDoctor{\n            name\n            email\n            phone\n          }\n            occupation{\n              role\n              employer\n              contact{\n                email\n                phone\n              }\n            }\n            insurance\n            {\n              company\n              number\n              description\n              expiry\n              subscriber{\n                company\n                description\n              }\n            }\n            nextOfKin{\n              name\n              contact{\n                email\n                phone\n              }\n            }\n            complaints{\n              date\n              title\n              description\n              attachment{\n                name\n                format\n                path\n              }\n            }\n            examination{\n              area\n              type\n              measure\n              value\n              description\n              attachment{\n                name\n                format\n                path\n              }\n            }\n            history{\n              title\n              type\n              date\n              description\n              attachment{\n                name\n                format\n                path\n              }\n            }\n            allergies{\n              title\n              description\n              attachment{\n                name\n                format\n                path\n              }\n            }\n            medication{\n              title\n              description\n              attachment{\n                name\n                format\n                path\n              }\n            }\n            investigation{\n              date\n              title\n              description\n              attachment{\n                name\n                format\n                path\n              }\n            }\n              diagnosis{\n                date\n                title\n                description\n                attachment{\n                  name\n                  format\n                  path\n                }\n              }\n              treatment{\n                date\n                title\n                type\n                description\n                dose\n                frequency\n                attachment{\n                  name\n                  format\n                  path\n                }\n              }\n              billing{\n                date\n                title\n                type\n                description\n                amount\n                paid\n                notes\n                attachment\n                {\n                  name\n                  format\n                  path\n                }\n              }\n        }\n      }\n      `,\n      variables: {\n        userId: userId,\n        field: field,\n        query: query\n      }\n    }\n\n    const token = this.context.token;\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n\n        const searchPatients = resData.data.getPatientField;\n\n        this.setState({ searchPatients: searchPatients})\n        console.log(\"state.searchPatients:  \", this.state.searchPatients);\n        // this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n      });\n}\n\n\n\n  modalCancelHandler = () => {\n    this.setState({ creating: false, updating: false, searching: false, selectedPatient: null });\n  };\n\n\n  fetchPatients() {\n    console.log(\"'fetch patients function' context object... \" + JSON.stringify(this.context));\n    const userId = this.context.userId;\n\n    this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n          query patients($userId: ID!) {\n            patients(userId: $userId) {\n              _id\n              name\n              address\n              contact{\n                email\n                phone\n              }\n              registrationDate\n              referralDate\n              expirationDate\n              referringDoctor{\n                name\n                email\n                phone\n              }\n                occupation{\n                  role\n                  employer\n                  contact{\n                    email\n                    phone\n                  }\n                }\n                insurance\n                {\n                  company\n                  number\n                  description\n                  expiry\n                  subscriber{\n                    company\n                    description\n                  }\n                }\n                nextOfKin{\n                  name\n                  contact{\n                    email\n                    phone\n                  }\n                }\n                complaints{\n                  date\n                  title\n                  description\n                  attachment{\n                    name\n                    format\n                    path\n                  }\n                }\n                examination{\n                  area\n                  type\n                  measure\n                  value\n                  description\n                  attachment{\n                    name\n                    format\n                    path\n                  }\n                }\n                history{\n                  title\n                  type\n                  date\n                  description\n                  attachment{\n                    name\n                    format\n                    path\n                  }\n                }\n                allergies{\n                  title\n                  description\n                  attachment{\n                    name\n                    format\n                    path\n                  }\n                }\n                medication{\n                  title\n                  description\n                  attachment{\n                    name\n                    format\n                    path\n                  }\n                }\n                investigation{\n                  date\n                  title\n                  description\n                  attachment{\n                    name\n                    format\n                    path\n                  }\n                }\n                  diagnosis{\n                    date\n                    title\n                    description\n                    attachment{\n                      name\n                      format\n                      path\n                    }\n                  }\n                  treatment{\n                    date\n                    title\n                    type\n                    description\n                    dose\n                    frequency\n                    attachment{\n                      name\n                      format\n                      path\n                    }\n                  }\n                  billing{\n                    date\n                    title\n                    type\n                    description\n                    amount\n                    paid\n                    notes\n                    attachment\n                    {\n                      name\n                      format\n                      path\n                    }\n                  }\n            }\n          }\n        `,\n        variables: {\n          userId: userId\n        }\n    };\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const patients = resData.data.patients;\n        console.log(patients);\n\n        this.context.patients = this.state.patients;\n        if (this.isActive) {\n          this.setState({ patients: patients, isLoading: false });\n        }\n\n      })\n      .catch(err => {\n        console.log(err);\n        if (this.isActive) {\n          this.setState({ isLoading: false });\n        }\n      });\n  }\n\n\n  modalDeleteHandler = () => {\n    console.log(\"deleting patient...selectedPatient:  \", this.context.selectedPatient);\n\n    const selectedPatientId = this.context.selectedPatient._id;\n\n    if(this.context.user.role !== 'admin') {\n      console.log(\"Not the Admin! No edit permission!!\");\n    }\n\n    this.setState({deleting: true});\n\n\n    const requestBody = {\n      query: `\n          mutation DeletePatient($userId: ID!, $patientId: ID!) {\n            deletePatient(userId: $userId, patientId: $patientId) {\n              _id\n              name\n              address\n              contact{\n                email\n                phone\n              }\n              registrationDate\n              referringDoctor\n              {\n                name\n                email\n                phone\n              }\n              occupation\n              {\n                role\n                employer\n                contact\n                {\n                  email\n                  phone\n                }\n              }\n            }\n          }\n        `,\n        variables: {\n          userId: this.context.userId,\n          patientId: selectedPatientId\n        }\n    };\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        let deletedPatient = resData.data.deletePatient;\n        console.log(deletedPatient);\n\n        let deletedPatientId = deletedPatient._id;\n        deletedPatient = this.state.patients.find(e => e._id === deletedPatientId);\n        const deletedPatientPos = this.state.patients.indexOf(deletedPatient);\n        const slicedArray = this.state.patients.splice(deletedPatientPos, 1);\n        console.log(\"deletedPatient:  \", JSON.stringify(deletedPatient),\"  deletedUserPos:  \", deletedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.setState({ deleting: false });\n\n        this.fetchPatients();\n\n      })\n      .catch(err => {\n        console.log(err);\n        if (this.isActive) {\n          this.setState({ deleting: false });\n        }\n      });\n  }\n\n\n  updatePatientSpecial (event) {\n\n    console.log(\"special field to update:  \", event.target.value);\n    const field = event.target.value;\n    this.setState({ patientUpdateField: field});\n\n  }\n\n\n  showDetailHandler = patientId => {\n\n    this.setState(prevState => {\n      const selectedPatient = prevState.patients.find(e => e._id === patientId);\n      this.context.selectedPatient = selectedPatient;\n      this.context.selectedPatientId = selectedPatient._id;\n      console.log(\"selectedPatient:  \", selectedPatient);\n      return { selectedPatient: selectedPatient };\n    });\n  };\n\n\n  componentWillUnmount() {\n    this.isActive = false;\n  }\n\n  render() {\n    return (\n\n    <React.Fragment>\n    <Accordion>\n\n    <Container className=\"containerUserDetail\">\n\n    <Row className=\"createUserRowAdd\">\n    <Col md={4} className=\"createUserColAdd\">\n    <p>Patient Detail</p>\n    </Col>\n    <Col md={6} className=\"createUserColAdd\">\n    <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"6\" className=\"btn\">\n    Details\n    </Accordion.Toggle>\n    </Col>\n    </Row>\n\n    <Accordion.Collapse eventKey=\"6\">\n    <Row className=\"createUserRowForm\">\n    <Col md={11} className=\"createUserColForm\">\n    {this.state.isLoading === false &&\n      this.state.selectedPatient !== null\n      &&\n      (<PatientDetail\n        authUserId={this.context.userId}\n        patient={this.state.selectedPatient}\n        onEdit={this.startUpdatePatientHandler}\n        onDelete={this.modalDeleteHandler}\n    />)\n  }\n    </Col>\n    </Row>\n    </Accordion.Collapse>\n\n    </Container>\n\n    <Container className=\"containerCreateuser\">\n    <Row className=\"createUserRowAdd\">\n    <Col md={4} className=\"createUserColAdd\">\n      <p>Add Patient</p>\n    </Col>\n    <Col md={4}>\n      {this.context.token && (\n        <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"7\" className=\"btn\" onClick={this.startCreatePatientHandler}>\n        Add\n        </Accordion.Toggle>\n      )}\n    </Col>\n    </Row>\n\n    <Accordion.Collapse eventKey=\"7\">\n    <Row className=\"createUserRowForm\">\n    <Col md={12} className=\"createUserColForm\">\n    {\n      this.state.creating && (\n        <CreatePatientForm\n        canCancel\n          canConfirm\n          onCancel={this.modalCancelHandler}\n          onConfirm={this.modalConfirmHandler}\n          onSubmit={this.modalConfirmHandler}\n          confirmText=\"Confirm\"\n        />\n    )}\n    </Col>\n    </Row>\n    </Accordion.Collapse>\n\n\n    <Row className=\"updateUserRowAdd\">\n    <Col md={2} className=\"updateUserCol\">\n    <p>Edit Patient</p>\n    </Col>\n    <Col md={4} className=\"updateUserCol\">\n    {this.context.token && (\n      <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"8\" className=\"btn\" onClick={this.startUpdatePatientHandler}>\n      Basic Info & Demographics\n      </Accordion.Toggle>\n    )}\n    </Col>\n    <Col md={2}>\n      <p>Patient</p>\n    </Col>\n    <Col md={4}>\n      {this.context.selectedPatient && (\n        <p>{this.context.selectedPatient.name}</p>\n      )}\n    </Col>\n    </Row>\n\n    <Row className=\"createUserRowAdd\">\n    <Col md={1} className=\"updateUserCol2\">\n    <p>Edit Patient</p>\n    </Col>\n    <Col md={11} className=\"updateUserCol2\">\n    {this.context.token && (\n      <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"9\" className=\"btn\" value='insurance' onClick={this.updatePatientSpecial.bind(this)}>\n      Insurance\n      </Accordion.Toggle>\n    )}\n    {this.context.token && (\n      <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"9\" className=\"btn\" value='nextOfKin' onClick={this.updatePatientSpecial.bind(this)}>\n      Next Of Kin\n      </Accordion.Toggle>\n    )}\n    {this.context.token && (\n      <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"9\" className=\"btn\" value='complaint' onClick={this.updatePatientSpecial.bind(this)}>\n      Complaint\n      </Accordion.Toggle>\n    )}\n    {this.context.token && (\n      <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"9\" className=\"btn\" value='examination' onClick={this.updatePatientSpecial.bind(this)}>\n      Examination\n      </Accordion.Toggle>\n    )}\n    {this.context.token && (\n      <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"9\" className=\"btn\" value='history' onClick={this.updatePatientSpecial.bind(this)}>\n      History\n      </Accordion.Toggle>\n    )}\n    {this.context.token && (\n      <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"9\" className=\"btn\" value='allergies' onClick={this.updatePatientSpecial.bind(this)}>\n      Allergies\n      </Accordion.Toggle>\n    )}\n    {this.context.token && (\n      <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"9\" className=\"btn\" value='medication' onClick={this.updatePatientSpecial.bind(this)}>\n      Medication\n      </Accordion.Toggle>\n    )}\n    {this.context.token && (\n      <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"9\" className=\"btn\" value='investigation' onClick={this.updatePatientSpecial.bind(this)}>\n      Investigation\n      </Accordion.Toggle>\n    )}\n    {this.context.token && (\n      <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"9\" className=\"btn\" value='diagnosis' onClick={this.updatePatientSpecial.bind(this)}>\n      Diagnosis\n      </Accordion.Toggle>\n    )}\n    {this.context.token && (\n      <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"9\" className=\"btn\" value='treatment' onClick={this.updatePatientSpecial.bind(this)}>\n      Treatment\n      </Accordion.Toggle>\n    )}\n    {this.context.token && (\n      <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"9\" className=\"btn\" value='billing' onClick={this.updatePatientSpecial.bind(this)}>\n      Billing\n      </Accordion.Toggle>\n    )}\n    </Col>\n    </Row>\n\n    <Accordion.Collapse eventKey=\"8\">\n    <Row className=\"updateUserRowForm\">\n    <Col md={10} className=\"updateUserColForm\">\n    {this.state.updating &&\n      this.state.selectedPatient !== null\n      && (\n      <UpdatePatientForm\n      authUserId={this.context.userId}\n      canCancel\n        canConfirm\n        onCancel={this.modalCancelHandler}\n        onConfirm={this.modalConfirmUpdateHandler}\n        confirmText=\"Confirm\"\n        patient={this.state.selectedPatient}\n      />\n    )}\n    </Col>\n    </Row>\n    </Accordion.Collapse>\n\n    <Accordion.Collapse eventKey=\"9\">\n    <Row className=\"updateUserRowForm\">\n    <Col md={10} className=\"updateUserColForm\">\n    {this.state.patientUpdateField === 'insurance' &&\n    this.state.selectedPatient !== null\n    && (\n      <UpdatePatientInsuranceForm\n      authUserId={this.context.userId}\n      canCancel\n        canConfirm\n        onCancel={this.modalCancelHandler}\n        onConfirm={this.updatePatientInsuranceHandler}\n        confirmText=\"Confirm\"\n        patient={this.state.selectedPatient}\n      />\n    )}\n    {this.state.patientUpdateField === 'nextOfKin' &&\n    this.state.selectedPatient !== null\n    && (\n      <UpdatePatientNextOfKinForm\n      authUserId={this.context.userId}\n      canCancel\n        canConfirm\n        onCancel={this.modalCancelHandler}\n        onConfirm={this.updatePatientNextOfKinHandler}\n        confirmText=\"Confirm\"\n        patient={this.state.selectedPatient}\n      />\n    )}\n    {this.state.patientUpdateField === 'complaint' &&\n    this.state.selectedPatient !== null\n    && (\n      <UpdatePatientComplaintForm\n      authUserId={this.context.userId}\n      canCancel\n        canConfirm\n        onCancel={this.modalCancelHandler}\n        onConfirm={this.updatePatientComplaintHandler}\n        confirmText=\"Confirm\"\n        patient={this.state.selectedPatient}\n      />\n    )}\n    {this.state.patientUpdateField === 'examination' &&\n    this.state.selectedPatient !== null\n    && (\n      <UpdatePatientExaminationForm\n      authUserId={this.context.userId}\n      canCancel\n        canConfirm\n        onCancel={this.modalCancelHandler}\n        onConfirm={this.updatePatientExaminationHandler}\n        confirmText=\"Confirm\"\n        patient={this.state.selectedPatient}\n      />\n    )}\n    {this.state.patientUpdateField === 'history' &&\n    this.state.selectedPatient !== null\n    && (\n      <UpdatePatientHistoryForm\n      authUserId={this.context.userId}\n      canCancel\n        canConfirm\n        onCancel={this.modalCancelHandler}\n        onConfirm={this.updatePatientHistoryHandler}\n        confirmText=\"Confirm\"\n        patient={this.state.selectedPatient}\n      />\n    )}\n    {this.state.patientUpdateField === 'allergies' &&\n    this.state.selectedPatient !== null\n    && (\n      <UpdatePatientAllergiesForm\n      authUserId={this.context.userId}\n      canCancel\n        canConfirm\n        onCancel={this.modalCancelHandler}\n        onConfirm={this.updatePatientAllergiesHandler}\n        confirmText=\"Confirm\"\n        patient={this.state.selectedPatient}\n      />\n    )}\n    {this.state.patientUpdateField === 'medication' &&\n    this.state.selectedPatient !== null\n    && (\n      <UpdatePatientMedicationForm\n      authUserId={this.context.userId}\n      canCancel\n        canConfirm\n        onCancel={this.modalCancelHandler}\n        onConfirm={this.updatePatientMedicationHandler}\n        confirmText=\"Confirm\"\n        patient={this.state.selectedPatient}\n      />\n    )}\n    {this.state.patientUpdateField === 'investigation' &&\n    this.state.selectedPatient !== null\n    && (\n      <UpdatePatientInvestigationForm\n      authUserId={this.context.userId}\n      canCancel\n        canConfirm\n        onCancel={this.modalCancelHandler}\n        onConfirm={this.updatePatientInvestigationHandler}\n        confirmText=\"Confirm\"\n        patient={this.state.selectedPatient}\n      />\n    )}\n    {this.state.patientUpdateField === 'diagnosis' &&\n    this.state.selectedPatient !== null\n    && (\n      <UpdatePatientDiagnosisForm\n      authUserId={this.context.userId}\n      canCancel\n        canConfirm\n        onCancel={this.modalCancelHandler}\n        onConfirm={this.updatePatientDiagnosisHandler}\n        confirmText=\"Confirm\"\n        patient={this.state.selectedPatient}\n      />\n    )}\n    {this.state.patientUpdateField === 'treatment' &&\n    this.state.selectedPatient !== null\n    && (\n      <UpdatePatientTreatmentForm\n      authUserId={this.context.userId}\n      canCancel\n        canConfirm\n        onCancel={this.modalCancelHandler}\n        onConfirm={this.updatePatientTreatmentHandler}\n        confirmText=\"Confirm\"\n        patient={this.state.selectedPatient}\n      />\n    )}\n    {this.state.patientUpdateField === 'billing' &&\n    this.state.selectedPatient !== null\n    && (\n      <UpdatePatientBillingForm\n      authUserId={this.context.userId}\n      canCancel\n        canConfirm\n        onCancel={this.modalCancelHandler}\n        onConfirm={this.updatePatientBillingHandler}\n        confirmText=\"Confirm\"\n        patient={this.state.selectedPatient}\n      />\n    )}\n    </Col>\n    </Row>\n    </Accordion.Collapse>\n\n    </Container>\n\n\n\n    <Container className=\"containerSearchuser\">\n  <Row className=\"createUserRowAdd\">\n  <Col md={4} className=\"createUserColAdd\">\n    <p>Search for a Patient</p>\n  </Col>\n  <Col md={8}>\n    {this.context.token && (\n      <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"10\" className=\"btn\" onClick={this.startSearchPatientHandler}>\n      Search\n      </Accordion.Toggle>\n    )}\n\n  </Col>\n  </Row>\n\n  <Accordion.Collapse eventKey=\"10\">\n  <Row className=\"createUserRowForm\">\n  <Col md={10} className=\"createUserColForm\">\n  {\n    this.state.searching === true &&\n    <SearchPatientForm\n    authUserId={this.context.userId}\n    canCancel\n      canConfirm\n      onCancel={this.modalCancelHandler}\n      onConfirm={this.modalConfirmSearchHandler}\n      confirmText=\"Search\"\n      patient={this.context.selectedPatient}\n    />\n  }\n  </Col>\n  <Col md={10}>\n\n  </Col>\n  </Row>\n  </Accordion.Collapse>\n  </Container>\n\n<Accordion.Collapse eventKey=\"10\">\n  <Container className=\"containerSearchuser\">\n  <Row className=\"searchListRow\">\n  {\n    this.state.searchPatients !== [] &&\n    <SearchPatientList\n      searchPatients={this.state.searchPatients}\n      authUserId={this.context.userId}\n      onCancel={this.modalCancelHandler}\n        onViewDetail={this.showDetailHandler}\n    />\n  }\n  </Row>\n  </Container>\n  </Accordion.Collapse>\n\n\n  <Container className=\"containerSearchuser\">\n<Row className=\"searchListRow\">\n\n{this.state.isLoading ? (\n  <Spinner />\n) : (\n  <PatientList\n    patients={this.state.patients}\n    authUserId={this.context.userId}\n    onViewDetail={this.showDetailHandler}\n  />\n)}\n\n</Row>\n</Container>\n</Accordion>\n\n      </React.Fragment>\n    );\n  }\n}\n\nexport default PatientsPage;\n"]},"metadata":{},"sourceType":"module"}