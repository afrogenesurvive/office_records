{"ast":null,"code":"var _jsxFileName = \"/Users/pedrojacob/Downloads/AMR/websites/office_records/ENT_EMR/frontend/src/pages/Patients.js\";\nimport React, { Component } from 'react'; // import Form from 'react-bootstrap/Form';\n\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport Accordion from 'react-bootstrap/Accordion';\nimport SidebarPage from './Sidebar';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\nimport Card from 'react-bootstrap/Card';\nimport PatientList from '../components/Patients/PatientList/PatientList';\nimport PatientDetail from '../components/Patients/PatientDetail';\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\nimport SearchPatientList from '../components/Patients/PatientList/SearchPatientList';\nimport SearchPatientForm from '../components/Forms/SearchPatientForm';\nimport CreatePatientForm from '../components/Forms/CreatePatientForm';\nimport UpdatePatientForm from '../components/Forms/UpdatePatientForm';\nimport UpdatePatientFieldForm from '../components/Forms/UpdatePatientFieldForm';\nimport UpdatePatientConsultantForm from '../components/Forms/UpdatePatientConsultantForm';\nimport UpdatePatientInsuranceForm from '../components/Forms/UpdatePatientInsuranceForm';\nimport UpdatePatientNextOfKinForm from '../components/Forms/UpdatePatientNextOfKinForm';\nimport UpdatePatientComplaintForm from '../components/Forms/UpdatePatientSurveyForm';\nimport UpdatePatientSurveyForm from '../components/Forms/UpdatePatientSurveyForm';\nimport UpdatePatientVitalsForm from '../components/Forms/UpdatePatientVitalsForm';\nimport UpdatePatientExaminationForm from '../components/Forms/UpdatePatientExaminationForm';\nimport UpdatePatientHistoryForm from '../components/Forms/UpdatePatientHistoryForm';\nimport UpdatePatientAllergiesForm from '../components/Forms/UpdatePatientAllergiesForm';\nimport UpdatePatientMedicationForm from '../components/Forms/UpdatePatientMedicationForm';\nimport UpdatePatientInvestigationForm from '../components/Forms/UpdatePatientInvestigationForm';\nimport UpdatePatientDiagnosisForm from '../components/Forms/UpdatePatientDiagnosisForm';\nimport UpdatePatientTreatmentForm from '../components/Forms/UpdatePatientTreatmentForm';\nimport UpdatePatientBillingForm from '../components/Forms/UpdatePatientBillingForm';\nimport './Users.css';\n\nclass PatientsPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      creating: false,\n      updating: false,\n      searching: false,\n      updatingArray: false,\n      deleting: false,\n      patients: [],\n      searchPatients: [],\n      isLoading: false,\n      selectedPatient: null,\n      patientUpdateField: null,\n      patientSearchField: null,\n      patientSearchQuery: null\n    };\n    this.isActive = true;\n\n    this.startCreatePatientHandler = () => {\n      this.setState({\n        creating: true\n      });\n      console.log(\"CreatePatientForm...\");\n    };\n\n    this.startUpdatePatientHandler = () => {\n      this.setState({\n        updating: true,\n        updatingArray: true\n      });\n      console.log(\"UpdatePatientForm...\");\n    };\n\n    this.startSearchPatientHandler = () => {\n      this.setState({\n        searching: true\n      });\n      console.log(\"SearchPatientForm...\");\n    };\n\n    this.modalConfirmHandler = event => {\n      console.log(\"CreatePatientFormData:  \", event.target.formGridName.value);\n      this.setState({\n        creating: false\n      });\n      const userId = this.context.userId;\n      let title = event.target.formGridTitle.value;\n      let name = event.target.formGridName.value;\n      let dob = event.target.formGridDob.value;\n      let age = event.target.formGridAge.value;\n      let gender = event.target.formGridgender.value;\n      let addressNumber = event.target.formGridAddressNumber.value;\n      let addressStreet = event.target.formGridAddressStreet.value;\n      let addressTown = event.target.formGridAddressTown.value;\n      let addressParish = event.target.formGridAddressParish.value;\n      let addressPostOffice = event.target.formGridAddressPostOffice.value;\n      let contactPhone = event.target.formGridContactPhone.value;\n      let contactEmail = event.target.formGridContactEmail.value;\n      let registrationDate = event.target.formGridRegistrationDate.value;\n      let referralDate = event.target.formGridReferralDate.value;\n      let expirationDate = event.target.formGridExpirationDate.value;\n      let attendingPhysicianName = event.target.formGridAttendingPhysicianName.value;\n      let attendingPhysicianEmail = event.target.formGridAttendingPhysicianEmail.value;\n      let attendingPhysicianPhone = event.target.formGridAttendingPhysicianPhone.value;\n      let referringDoctorName = event.target.formGridReferringDoctorName.value;\n      let referringDoctorEmail = event.target.formGridReferringDoctorEmail.value;\n      let referringDoctorPhone = event.target.formGridReferringDoctorPhone.value;\n      let occupationRole = event.target.formGridOccupationRole.value;\n      let occupationEmployer = event.target.formGridOccupationEmployer.value;\n      let occupationEmployerContactPhone = event.target.formGridOccupationEmployerContactPhone.value;\n      let occupationEmployerContactEmail = event.target.formGridOccupationEmployerContactEmail.value;\n\n      if (name.trim().length === 0 || title.trim().length === 0 || name.trim().length === 0 || dob.trim().length === 0 || age.trim().length === 0 || gender.trim().length === 0 || addressNumber.trim().length === 0 || addressStreet.trim().length === 0 || addressTown.trim().length === 0 || addressParish.trim().length === 0 || addressPostOffice.trim().length === 0 || contactPhone.trim().length === 0 || contactEmail.trim().length === 0 || registrationDate.trim().length === 0 || referralDate.trim().length === 0 || expirationDate.trim().length === 0 || attendingPhysicianName.trim().length === 0 || attendingPhysicianEmail.trim().length === 0 || attendingPhysicianPhone.trim().length === 0 || referringDoctorName.trim().length === 0 || referringDoctorEmail.trim().length === 0 || referringDoctorPhone.trim().length === 0 || occupationRole.trim().length === 0 || occupationEmployer.trim().length === 0 || occupationEmployerContactPhone.trim().length === 0 || occupationEmployerContactEmail.trim().length === 0) {\n        console.log(\"blank fields detected!!!...Please try again...\");\n        return;\n      }\n\n      const patient = {\n        title,\n        name,\n        dob,\n        age,\n        gender,\n        addressNumber,\n        addressStreet,\n        addressTown,\n        addressParish,\n        addressPostOffice,\n        contactPhone,\n        contactEmail,\n        registrationDate,\n        referralDate,\n        expirationDate,\n        attendingPhysicianName,\n        attendingPhysicianEmail,\n        attendingPhysicianPhone,\n        referringDoctorName,\n        referringDoctorEmail,\n        referringDoctorPhone,\n        occupationRole,\n        occupationEmployer,\n        occupationEmployerContactPhone,\n        occupationEmployerContactEmail\n      };\n      console.log(\"\\n      creating patient...\\n      title: \".concat(title, \",\\n      name: \").concat(name, \",\\n      dob: \").concat(dob, \",\\n      age: \").concat(age, \",\\n      gender: \").concat(gender, \",\\n      addressNumber: \").concat(addressNumber, \",\\n      addressStreet: \").concat(addressStreet, \",\\n      addressTown: \").concat(addressTown, \",\\n      addressParish: \").concat(addressParish, \",\\n      addressPostOffice: \").concat(addressPostOffice, \",\\n      contactPhone: \").concat(contactPhone, \",\\n      contactEmail: \").concat(contactEmail, \",\\n      registrationDate: \").concat(registrationDate, \",\\n      referralDate: \").concat(referralDate, \",\\n      expirationDate: \").concat(expirationDate, \",\\n      attendingPhysicianName: \").concat(attendingPhysicianName, \",\\n      attendingPhysicianEmail: \").concat(attendingPhysicianEmail, \",\\n      attendingPhysicianPhone: \").concat(attendingPhysicianPhone, \",\\n      referringDoctorName: \").concat(referringDoctorName, \",\\n      referringDoctorEmail: \").concat(referringDoctorEmail, \",\\n      referringDoctorPhone: \").concat(referringDoctorPhone, \",\\n      occupationRole: \").concat(occupationRole, \",\\n      occupationEmployer: \").concat(occupationEmployer, \",\\n      occupationEmployerContactPhone: \").concat(occupationEmployerContactPhone, \",\\n      occupationEmployerContactEmail: \").concat(occupationEmployerContactEmail, \",\\n      \"));\n      const requestBody = {\n        query: \"\\n          mutation {createPatient(userId:\\\"\".concat(userId, \"\\\", patientInput:{title:\\\"\").concat(title, \"\\\",name:\\\"\").concat(name, \"\\\",dob:\\\"\").concat(dob, \"\\\",age:\").concat(age, \",gender:\\\"\").concat(gender, \"\\\",addressNumber:\").concat(addressNumber, \",addressStreet:\\\"\").concat(addressStreet, \"\\\",addressTown:\\\"\").concat(addressTown, \"\\\",addressParish:\\\"\").concat(addressParish, \"\\\",addressPostOffice:\\\"\").concat(addressPostOffice, \"\\\",contactPhone:\\\"\").concat(contactPhone, \"\\\",contactEmail:\\\"\").concat(contactEmail, \"\\\",registrationDate:\\\"\").concat(registrationDate, \"\\\",referralDate:\\\"\").concat(referralDate, \"\\\",expirationDate:\\\"\").concat(expirationDate, \"\\\",referringDoctorName:\\\"\").concat(referringDoctorName, \"\\\",referringDoctorEmail:\\\"\").concat(referringDoctorEmail, \"\\\",referringDoctorPhone:\\\"\").concat(referringDoctorPhone, \"\\\",attendingPhysicianName:\\\"\").concat(attendingPhysicianName, \"\\\",attendingPhysicianEmail:\\\"\").concat(attendingPhysicianEmail, \"\\\",attendingPhysicianPhone:\\\"\").concat(attendingPhysicianPhone, \"\\\",occupationRole:\\\"\").concat(occupationRole, \"\\\",occupationEmployer:\\\"\").concat(occupationEmployer, \"\\\",occupationEmployerContactPhone:\\\"\").concat(occupationEmployerContactPhone, \"\\\",occupationEmployerContactEmail:\\\"\").concat(occupationEmployerContactEmail, \"\\\"})\\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n        \")\n      };\n      const token = this.context.token;\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"\\n          response data:\\n          \".concat(JSON.stringify(resData.data.createPatient), \"\\n          \"));\n        const newPatient = resData.data.createPatient;\n        this.setState(prevState => {\n          const updatedPatients = [...prevState.patients];\n          updatedPatients.push(newPatient);\n          return {\n            patients: updatedPatients\n          };\n        });\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.modalCancelHandler = () => {\n      this.setState({\n        creating: false,\n        updating: false,\n        selectedPatient: null\n      });\n    };\n\n    this.modalConfirmUpdateHandler = event => {\n      if (this.context.user.role !== 'admin') {\n        console.log(\"Not the Admin! No edit permission!!\");\n      }\n\n      const userId = this.context.userId;\n      const selectedPatientId = this.context.selectedPatient._id;\n      console.log(\"UpdatePatientFormData:  \", event.target.formGridName.value);\n      this.setState({\n        updating: false\n      });\n      let title = event.target.formGridTitle.value;\n      let name = event.target.formGridName.value;\n      let dob = event.target.formGridDob.value;\n      let age = event.target.formGridAge.value;\n      let gender = event.target.formGridgender.value;\n      let addressNumber = event.target.formGridAddressNumber.value;\n      let addressStreet = event.target.formGridAddressStreet.value;\n      let addressTown = event.target.formGridAddressTown.value;\n      let addressParish = event.target.formGridAddressParish.value;\n      let addressPostOffice = event.target.formGridAddressPostOffice.value;\n      let contactPhone = event.target.formGridContactPhone.value;\n      let contactEmail = event.target.formGridContactEmail.value;\n      let registrationDate = event.target.formGridRegistrationDate.value;\n      let referralDate = event.target.formGridReferralDate.value;\n      let expirationDate = event.target.formGridExpirationDate.value;\n      let attendingPhysicianName = event.target.formGridAttendingPhysicianName.value;\n      let attendingPhysicianEmail = event.target.formGridAttendingPhysicianEmail.value;\n      let attendingPhysicianPhone = event.target.formGridAttendingPhysicianPhone.value;\n      let referringDoctorName = event.target.formGridReferringDoctorName.value;\n      let referringDoctorEmail = event.target.formGridReferringDoctorEmail.value;\n      let referringDoctorPhone = event.target.formGridReferringDoctorPhone.value;\n      let occupationRole = event.target.formGridOccupationRole.value;\n      let occupationEmployer = event.target.formGridOccupationEmployer.value;\n      let occupationEmployerContactPhone = event.target.formGridOccupationEmployerContactPhone.value;\n      let occupationEmployerContactEmail = event.target.formGridOccupationEmployerContactEmail.value;\n\n      if (title.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        title = this.context.selectedUser.title;\n      }\n\n      if (name.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        name = this.context.selectedUser.name;\n      }\n\n      if (dob.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        dob = this.context.selectedUser.dob;\n      }\n\n      if (gender.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        gender = this.context.selectedUser.gender;\n      }\n\n      if (age.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        age = this.context.selectedUser.age;\n      }\n\n      if (addressNumber.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        addressNumber = this.context.selectedUser.address.number;\n      }\n\n      if (addressStreet.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        addressStreet = this.context.selectedUser.address.street;\n      }\n\n      if (addressTown.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        addressTown = this.context.selectedUser.address.town;\n      }\n\n      if (addressParish.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        addressParish = this.context.selectedUser.address;\n      }\n\n      if (addressPostOffice.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        addressPostOffice = this.context.selectedUser.address.postOffice;\n      }\n\n      if (contactPhone.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        contactPhone = this.context.selectedUser.contact.phone;\n      }\n\n      if (contactEmail.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        contactEmail = this.context.selectedUser.contact.email;\n      }\n\n      if (registrationDate.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        registrationDate = this.context.selectedUser.registrationDate;\n      }\n\n      if (attendingPhysicianName.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        attendingPhysicianName = this.context.selectedUser.attendingPhysician.name;\n      }\n\n      if (attendingPhysicianEmail.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        attendingPhysicianEmail = this.context.selectedUser.attendingPhysician.email;\n      }\n\n      if (attendingPhysicianPhone.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        attendingPhysicianPhone = this.context.selectedUser.attendingPhysician.phone;\n      }\n\n      if (referringDoctorName.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        referringDoctorName = this.context.selectedUser.referringDoctor.name;\n      }\n\n      if (referringDoctorEmail.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        referringDoctorEmail = this.context.selectedUser.referringDoctor.email;\n      }\n\n      if (referringDoctorPhone.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        referringDoctorPhone = this.context.selectedUser.referringDoctor.phone;\n      }\n\n      if (occupationRole.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        occupationRole = this.context.selectedUser.occupation.role;\n      }\n\n      if (occupationEmployer.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        occupationEmployer = this.context.selectedUser.occupation.employer;\n      }\n\n      if (occupationEmployerContactEmail.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        occupationEmployerContactEmail = this.context.selectedUser.occupation.contact.email;\n      }\n\n      if (occupationEmployerContactPhone.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        occupationEmployerContactPhone = this.context.selectedUser.occupation.contact.phone;\n      }\n\n      const patient = {\n        title,\n        name,\n        dob,\n        age,\n        gender,\n        addressNumber,\n        addressStreet,\n        addressTown,\n        addressParish,\n        addressPostOffice,\n        contactPhone,\n        contactEmail,\n        registrationDate,\n        referralDate,\n        expirationDate,\n        attendingPhysicianName,\n        attendingPhysicianEmail,\n        attendingPhysicianPhone,\n        referringDoctorName,\n        referringDoctorEmail,\n        referringDoctorPhone,\n        occupationRole,\n        occupationEmployer,\n        occupationEmployerContactPhone,\n        occupationEmployerContactEmail\n      };\n      console.log(\"\\n      updating patient...\\n      title: \".concat(title, \",\\n      name: \").concat(name, \",\\n      dob: \").concat(dob, \",\\n      age: \").concat(age, \",\\n      gender: \").concat(gender, \",\\n      addressNumber: \").concat(addressNumber, \",\\n      addressStreet: \").concat(addressStreet, \",\\n      addressTown: \").concat(addressTown, \",\\n      addressParish: \").concat(addressParish, \",\\n      addressPostOffice: \").concat(addressPostOffice, \",\\n      contactPhone: \").concat(contactPhone, \",\\n      contactEmail: \").concat(contactEmail, \",\\n      registrationDate: \").concat(registrationDate, \",\\n      referralDate: \").concat(referralDate, \",\\n      expirationDate: \").concat(expirationDate, \",\\n      attendingPhysicianName: \").concat(attendingPhysicianName, \",\\n      attendingPhysicianEmail: \").concat(attendingPhysicianEmail, \",\\n      attendingPhysicianPhone: \").concat(attendingPhysicianPhone, \",\\n      referringDoctorName: \").concat(referringDoctorName, \",\\n      referringDoctorEmail: \").concat(referringDoctorEmail, \",\\n      referringDoctorPhone: \").concat(referringDoctorPhone, \",\\n      occupationRole: \").concat(occupationRole, \",\\n      occupationEmployer: \").concat(occupationEmployer, \",\\n      occupationEmployerContactPhone: \").concat(occupationEmployerContactPhone, \",\\n      occupationEmployerContactEmail: \").concat(occupationEmployerContactEmail, \",\\n      \"));\n      const requestBody = {\n        query: \"\\n          mutation {updatePatient(userId:\\\"\".concat(userId, \"\\\",patientId:\\\"\").concat(selectedPatientId, \"\\\", patientInput:{title:\\\"\").concat(title, \"\\\",name:\\\"\").concat(name, \"\\\",dob:\\\"\").concat(dob, \"\\\",age:\").concat(age, \",gender:\\\"\").concat(gender, \"\\\",addressNumber:\").concat(addressNumber, \",addressStreet:\\\"\").concat(addressStreet, \"\\\",addressTown:\\\"\").concat(addressTown, \"\\\",addressParish:\\\"\").concat(addressParish, \"\\\",addressPostOffice:\\\"\").concat(addressPostOffice, \"\\\",contactPhone:\\\"\").concat(contactPhone, \"\\\",contactEmail:\\\"\").concat(contactEmail, \"\\\",registrationDate:\\\"\").concat(registrationDate, \"\\\",referralDate:\\\"\").concat(referralDate, \"\\\",expirationDate:\\\"\").concat(expirationDate, \"\\\",referringDoctorName:\\\"\").concat(referringDoctorName, \"\\\",referringDoctorEmail:\\\"\").concat(referringDoctorEmail, \"\\\",referringDoctorPhone:\\\"\").concat(referringDoctorPhone, \"\\\",attendingPhysicianName:\\\"\").concat(attendingPhysicianName, \"\\\",attendingPhysicianEmail:\\\"\").concat(attendingPhysicianEmail, \"\\\",attendingPhysicianPhone:\\\"\").concat(attendingPhysicianPhone, \"\\\",occupationRole:\\\"\").concat(occupationRole, \"\\\",occupationEmployer:\\\"\").concat(occupationEmployer, \"\\\",occupationEmployerContactPhone:\\\"\").concat(occupationEmployerContactPhone, \"\\\",occupationEmployerContactEmail:\\\"\").concat(occupationEmployerContactPhone, \"\\\"})\\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n        \")\n      };\n      const token = this.context.token;\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n        const updatedPatientId = resData.data.updatePatient._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.updatePatient);\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.modalConfirmUpdateFieldHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id;\n\n      if (this.context.user.role !== 'admin') {\n        console.log(\"Not the creator or Admin! No edit permission!!\");\n        selectedPatientId = null;\n      }\n\n      console.log(\"UpdatePatientFieldFormData:  \", event.target.formGridField.value);\n      this.setState({\n        updating: false\n      });\n      let field = event.target.formGridField.value;\n      let query = event.target.formGridQuery.value;\n      const requestBody = {\n        query: \"\\n          mutation{updatePatientField(userId:\\\"\".concat(userId, \"\\\",selectedPatientId:\\\"\").concat(selectedPatientId, \"\\\",field:\\\"\").concat(field, \"\\\",query:\\\"\").concat(query, \"\\\")\\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n        \")\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data.updatePatientField));\n        const updatedPatientId = resData.data.updatePatientField._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.updatePatientField);\n        this.context.patients = this.state.patients; // this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.updatePatientConsultantHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id;\n      const patientConsultantReference = this.context.selectedUser._id;\n\n      if (this.context.user.role !== 'admin') {\n        console.log(\"No edit permission!!\");\n        return;\n      }\n\n      console.log(\"UpdatePatientConsultantFormData:  \", event.target.formGridConsultantDate.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let consultantDate = event.target.formGridConsultantDate.value;\n      const patientConsultant = {\n        consultantDate,\n        patientConsultantReference\n      };\n      console.log(\"\\n    adding patient consultant item...\\n    userId: \".concat(userId, \",\\n    selectedPatientId: \").concat(selectedPatientId, \",\\n    consultantDate: \").concat(consultantDate, \",\\n    consultantReference: \").concat(patientConsultantReference, \",\\n    \"));\n      const requestBody = {\n        query: \"\\n        mutation {updatePatientConsultant(userId:\\\"\".concat(userId, \"\\\", patientId:\\\"\").concat(selectedPatientId, \"\\\",patientInput:{consultantDate:\\\" \").concat(consultantDate, \"\\\",consultantReference: \\\"\").concat(patientConsultantReference, \"\\\"})\\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{_id,title,time,location,date},consultant{date,reference{_id,name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n      \")\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientConsultant._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.updatePatientConsultant);\n        this.context.patients = this.state.patients;\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.updatePatientInsuranceHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id;\n\n      if (this.context.user.role !== 'admin') {\n        console.log(\"No edit permission!!\");\n        return;\n      }\n\n      console.log(\"UpdatePatientInsuranceFormData:  \", event.target.formGridInsuranceCompany.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let insuranceCompany = event.target.formGridInsuranceCompany.value;\n      let insuranceNumber = event.target.formGridInsuranceNumber.value;\n      let insuranceExpiry = event.target.formGridInsuranceExpiry.value;\n      let insuranceDescription = event.target.formGridInsuranceDescription.value;\n      let insuranceSubscriberCompany = event.target.formGridInsuranceSubscriberCompany.value;\n      let insuranceSubscriberDescription = event.target.formGridInsuranceSubscriberDescription.value;\n      const patientInsurance = {\n        insuranceCompany,\n        insuranceNumber,\n        insuranceExpiry,\n        insuranceDescription,\n        insuranceSubscriberCompany,\n        insuranceSubscriberDescription\n      };\n      console.log(\"\\n    adding patient insurance item...\\n    userId: \".concat(userId, \",\\n    selectedPatientId: \").concat(selectedPatientId, \",\\n    insuranceCompany: \").concat(insuranceCompany, \",\\n    insuranceNumber: \").concat(insuranceNumber, \",\\n    insuranceExpiry: \").concat(insuranceExpiry, \",\\n    insuranceDescription: \").concat(insuranceDescription, \",\\n    insuranceSubscriberCompany: \").concat(insuranceSubscriberCompany, \",\\n    insuranceSubscriberDescription: \").concat(insuranceSubscriberDescription, \",\\n    \"));\n      const requestBody = {\n        query: \"\\n        mutation {updatePatientInsurance(userId:\\\"\".concat(userId, \"\\\", patientId:\\\"\").concat(selectedPatientId, \"\\\",patientInput:{insuranceCompany:\\\"\").concat(insuranceCompany, \"\\\",insuranceNumber:\\\"\").concat(insuranceNumber, \"\\\",insuranceDescription:\\\"\").concat(insuranceDescription, \"\\\",insuranceExpiry:\\\"\").concat(insuranceExpiry, \"\\\",insuranceSubscriberCompany:\\\"\").concat(insuranceSubscriberCompany, \"\\\",insuranceSubscriberDescription:\\\"\").concat(insuranceSubscriberDescription, \"\\\"})\\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{_id,title,time,location,date},consultant{date,reference{_id,name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n      \")\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientInsurance._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.updatePatientInsurance);\n        this.context.patients = this.state.patients;\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.updatePatientNextOfKinHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id;\n\n      if (this.context.user.role !== 'admin') {\n        console.log(\"No edit permission!!\");\n        return;\n      }\n\n      console.log(\"UpdatePatientNextOfKinFormData:  \", event.target.formGridNextOfKinName.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let nextOfKinName = event.target.formGridNextOfKinName.value;\n      let nextOfKinPhone = event.target.formGridNextOfKinPhone.value;\n      let nextOfKinEmail = event.target.formGridNextOfKinEmail.value;\n      const patientNextOfKin = {\n        nextOfKinName,\n        nextOfKinPhone,\n        nextOfKinEmail\n      };\n      console.log(\"\\n    adding patient nextOfKin item...\\n    userId: \".concat(userId, \",\\n    selectedPatientId: \").concat(selectedPatientId, \",\\n    nextOfKinName: \").concat(nextOfKinName, \",\\n    nextOfKinPhone: \").concat(nextOfKinPhone, \",\\n    nextOfKinEmail: \").concat(nextOfKinEmail, \",\\n    \"));\n      const requestBody = {\n        query: \"\\n        mutation {updatePatientNextOfKin(userId:\\\"\".concat(userId, \"\\\", patientId:\\\"\").concat(selectedPatientId, \"\\\",patientInput:{nextOfKinName:\\\"\").concat(nextOfKinName, \"\\\",nextOfKinEmail:\\\"\").concat(nextOfKinEmail, \"\\\",nextOfKinPhone:\\\"\").concat(nextOfKinPhone, \"\\\"})\\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{_id,title,time,location,date},consultant{date,reference{_id,name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n      \")\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientNextOfKin._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.updatePatientNextOfKin);\n        this.context.patients = this.state.patients;\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.updatePatientComplaintHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id;\n\n      if (this.context.user.role !== 'admin') {\n        console.log(\"No edit permission!!\");\n        return;\n      }\n\n      console.log(\"UpdatePatientComplaintFormData:  \", event.target.formGridComplaintTitle.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let complaintTitle = event.target.formGridComplaintTitle.value;\n      let complaintDate = event.target.formGridComplaintDate.value;\n      let complaintDescription = event.target.formGridComplaintDescription.value;\n      let complaintAnamnesis = event.target.formGridComplaintAnamnesis.value;\n      let complaintAttachmentName = event.target.formGridComplaintAttachmentName.value;\n      let complaintAttachmentFormat = event.target.formGridComplaintAttachmentFormat.value;\n      let complaintAttachmentPath = event.target.formGridComplaintAttachmentPath.value;\n      const patientComplaint = {\n        complaintTitle,\n        complaintDate,\n        complaintDescription,\n        complaintAnamnesis,\n        complaintAttachmentName,\n        complaintAttachmentFormat,\n        complaintAttachmentPath\n      };\n      console.log(\"\\n    adding patient complaint...\\n    userId: \".concat(userId, \",\\n    patientId: \").concat(selectedPatientId, \",\\n    complaintTitle: \").concat(complaintTitle, \",\\n    complaintDate: \").concat(complaintDate, \",\\n    complaintDescription: \").concat(complaintDescription, \",\\n    complaintAnamnesis: \").concat(complaintAnamnesis, \",\\n    complaintAttachmentName: \").concat(complaintAttachmentName, \",\\n    complaintAttachmentFormat: \").concat(complaintAttachmentFormat, \",\\n    complaintAttachmentPath: \").concat(complaintAttachmentPath, \",\\n    \"));\n      const requestBody = {\n        query: \"\\n        mutation {updatePatientComplaint(userId:\\\"\".concat(userId, \"\\\", patientId:\\\"\").concat(selectedPatientId, \"\\\",patientInput:{complaintDate:\\\"\").concat(complaintDate, \"\\\",complaintTitle:\\\"\").concat(complaintTitle, \"\\\",complaintDescription:\\\"\").concat(complaintDescription, \"\\\",complaintAnamnesis:\\\"\").concat(complaintAnamnesis, \"\\\",complaintAttachmentName:\\\"\").concat(complaintAttachmentName, \"\\\",complaintAttachmentFormat:\\\"\").concat(complaintAttachmentFormat, \"\\\",complaintAttachmentPath:\\\"\").concat(complaintAttachmentPath, \"\\\"})\\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{_id,title,time,location,date},consultant{date,reference{_id,name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n      \")\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientComplaint._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.updatePatientComplaint);\n        this.context.patients = this.state.patients;\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.updatePatientSurveyHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id;\n\n      if (this.context.user.role !== 'admin') {\n        console.log(\"No edit permission!!\");\n        return;\n      }\n\n      console.log(\"UpdatePatientSurveyFormData:  \", event.target.formGridSurveyTitle.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let surveyDate = event.target.formGridSurveyDate.value;\n      let surveyTitle = event.target.formGridSurveyTitle.value;\n      let surveyDescription = event.target.formGridSurveyDescription.value;\n      let surveyAttachmentName = event.target.formGridSurveyAttachmentName.value;\n      let surveyAttachmentFormat = event.target.formGridSurveyAttachmentFormat.value;\n      let surveyAttachmentPath = event.target.formGridSurveyAttachmentPath.value;\n      const patientSurvey = {\n        surveyDate,\n        surveyTitle,\n        surveyDescription,\n        surveyAttachmentName,\n        surveyAttachmentFormat,\n        surveyAttachmentPath\n      };\n      console.log(\"\\n    adding patient survey...\\n    userId: \".concat(userId, \",\\n    patientId: \").concat(selectedPatientId, \",\\n    surveyDate: \").concat(surveyDate, \",\\n    surveyTitle: \").concat(surveyTitle, \",\\n    surveyDescription: \").concat(surveyDescription, \",\\n    surveyAttachmentName: \").concat(surveyAttachmentName, \",\\n    surveyAttachmentFormat: \").concat(surveyAttachmentFormat, \",\\n    surveyAttachmentPath: \").concat(surveyAttachmentPath, \",\\n    \"));\n      const requestBody = {\n        query: \"\\n        mutation {updatePatientSurvey(userId:\\\"\".concat(userId, \"\\\",patientId:\\\"\").concat(selectedPatientId, \"\\\",patientInput:{surveyDate:\\\"\").concat(surveyDate, \"\\\",surveyTitle:\\\"\").concat(surveyTitle, \"\\\",surveyDescription:\\\"\").concat(surveyDescription, \"\\\",surveyAttachmentName:\\\"\").concat(surveyAttachmentName, \"\\\",surveyAttachmentFormat:\\\"\").concat(surveyAttachmentFormat, \"\\\",surveyAttachmentPath:\\\"\").concat(surveyAttachmentPath, \"\\\"})\\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{_id,title,time,location,date},consultant{date,reference{_id,name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n      \")\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientSurvey._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.updatePatientSurvey);\n        this.context.patients = this.state.patients;\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.updatePatientVitalsHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id;\n\n      if (this.context.user.role !== 'admin') {\n        console.log(\"No edit permission!!\");\n        return;\n      }\n\n      console.log(\"UpdatePatientVitalsFormData:  \", event.target.formGridVitalsDate.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let vitalsDate = event.target.formGridVitalsDate.value;\n      let vitalsPr = event.target.formGridVitalsPr.value;\n      let vitalsBp1 = event.target.formGridVitalsBp1.value;\n      let vitalsBp2 = event.target.formGridVitalsBp2.value;\n      let vitalsRr = event.target.formGridVitalsRr.value;\n      let vitalsTemp = event.target.formGridVitalsTemp.value;\n      let vitalsPs02 = event.target.formGridVitalsPs02.value;\n      let vitalsHeight = event.target.formGridVitalsHeight.value;\n      let vitalsWeight = event.target.formGridVitalsWeight.value;\n      let vitalsBmi = event.target.formGridVitalsBmi.value;\n      let vitalsUrineType = event.target.formGridVitalsUrineType.value;\n      let vitalsUrineValue = event.target.formGridVitalsUrineValue.value;\n      const patientVitals = {};\n      console.log(\"\\n    adding patient vitals...\\n    userId: \".concat(userId, \",\\n    patientId: \").concat(selectedPatientId, \",\\n    \"));\n      const requestBody = {\n        query: \"\\n        mutation {updatePatientVitals(userId:\\\"\".concat(userId, \"\\\",patientId:\\\"\").concat(selectedPatientId, \"\\\",patientInput:{vitalsDate:\\\"\").concat(vitalsDate, \"\\\",vitalsPr:\").concat(vitalsPr, \",vitalsBp1:\").concat(vitalsBp1, \",vitalsBp2:\").concat(vitalsBp2, \",vitalsRr:\").concat(vitalsRr, \",vitalsTemp:\").concat(vitalsTemp, \",vitalsPs02:\").concat(vitalsPs02, \",vitalsHeight:\").concat(vitalsHeight, \",vitalsWeight:\").concat(vitalsWeight, \",vitalsBmi:\").concat(vitalsBmi, \",vitalsUrineType:\\\"\").concat(vitalsUrineType, \"\\\",vitalsUrineValue:\\\"\").concat(vitalsUrineValue, \"\\\"})\\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{_id,title,time,location,date},consultant{date,reference{_id,name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n      \")\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientVitals._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.updatePatientVitals);\n        this.context.patients = this.state.patients;\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.updatePatientExaminationHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id;\n\n      if (this.context.user.role !== 'admin') {\n        console.log(\"No edit permission!!\");\n        return;\n      }\n\n      console.log(\"UpdatePatientExaminationFormData:  \", event.target.formGridExaminationArea.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let examinationDate = event.target.formGridExaminationDate.value;\n      let examinationGeneral = event.target.formGridExaminationGeneral.value;\n      let examinationArea = event.target.formGridExaminationArea.value;\n      let examinationType = event.target.formGridExaminationType.value;\n      let examinationMeasure = event.target.formGridExaminationMeasure.value;\n      let examinationValue = event.target.formGridExaminationValue.value;\n      let examinationDescription = event.target.formGridExaminationDescription.value;\n      let examinationFollowUp = event.target.formGridExaminationFollowUp.value;\n      let examinationAttachmentName = event.target.formGridExaminationAttachmentName.value;\n      let examinationAttachmentFormat = event.target.formGridExaminationAttachmentFormat.value;\n      let examinationAttachmentPath = event.target.formGridExaminationAttachmentPath.value;\n      const patientExamination = {\n        examinationArea,\n        examinationGeneral,\n        examinationType,\n        examinationMeasure,\n        examinationValue,\n        examinationAttachmentName,\n        examinationAttachmentFormat,\n        examinationAttachmentPath\n      };\n      console.log(\"\\n    adding patient examination...\\n    userId: \".concat(userId, \",\\n    patientId: \").concat(selectedPatientId, \",\\n    examinationDate: \").concat(examinationDate, \",\\n    examinationGeneral: \").concat(examinationGeneral, \",\\n    examinationArea: \").concat(examinationArea, \",\\n    examinationType: \").concat(examinationType, \",\\n    examinationMeasure: \").concat(examinationMeasure, \",\\n    examinationValue: \").concat(examinationValue, \",\\n    examinationDescription: \").concat(examinationDescription, \",\\n    examinationFollowUp: \").concat(examinationFollowUp, \",\\n    examinationAttachmentName: \").concat(examinationAttachmentName, \",\\n    examinationAttachmentFormat: \").concat(examinationAttachmentFormat, \",\\n    examinationAttachmentPath: \").concat(examinationAttachmentPath, \",\\n    \"));\n      const requestBody = {\n        query: \"\\n        mutation {updatePatientExamination(userId:\\\"\".concat(userId, \"\\\",patientId:\\\"\").concat(selectedPatientId, \"\\\",patientInput:{examinationDate:\\\"\").concat(examinationDate, \"\\\",examinationGeneral:\\\"\").concat(examinationGeneral, \"\\\",examinationArea:\\\"\").concat(examinationArea, \"\\\",examinationType:\\\"\").concat(examinationType, \"\\\",examinationMeasure:\\\"\").concat(examinationMeasure, \"\\\",examinationValue:\\\"\").concat(examinationValue, \"\\\",examinationDescription:\\\"\").concat(examinationDescription, \"\\\",examinationFollowUp:\").concat(examinationFollowUp, \",examinationAttachmentName:\\\"\").concat(examinationAttachmentName, \"\\\",examinationAttachmentFormat:\\\"\").concat(examinationAttachmentFormat, \"\\\",examinationAttachmentPath:\\\"\").concat(examinationAttachmentPath, \"\\\"})\\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{_id,title,time,location,date},consultant{date,reference{_id,name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n      \")\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientExamination._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.updatePatientExamination);\n        this.context.patients = this.state.patients;\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.updatePatientHistoryHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id;\n\n      if (this.context.user.role !== 'admin') {\n        console.log(\"No edit permission!!\");\n        return;\n      }\n\n      console.log(\"UpdatePatientHistoryFormData:  \", event.target.formGridHistoryTitle.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let historyType = event.target.formGridHistoryType.value;\n      let historyDate = event.target.formGridHistoryDate.value;\n      let historyTitle = event.target.formGridHistoryTitle.value;\n      let historyDescription = event.target.formGridHistoryDescription.value;\n      let historyAttachmentName = event.target.formGridHistoryAttachmentName.value;\n      let historyAttachmentFormat = event.target.formGridHistoryAttachmentFormat.value;\n      let historyAttachmentPath = event.target.formGridHistoryAttachmentPath.value;\n      const patientHistory = {\n        historyType,\n        historyDate,\n        historyTitle,\n        historyDescription,\n        historyAttachmentName,\n        historyAttachmentFormat,\n        historyAttachmentPath\n      };\n      console.log(\"\\n    adding patient history...\\n    userId: \".concat(userId, \",\\n    patientId: \").concat(selectedPatientId, \",\\n    historyType: \").concat(historyType, \",\\n    historyDate: \").concat(historyDate, \",\\n    historyTitle: \").concat(historyTitle, \",\\n    historyDescription: \").concat(historyDescription, \",\\n    historyAttachmentName: \").concat(historyAttachmentName, \",\\n    historyAttachmentFormat: \").concat(historyAttachmentFormat, \",\\n    historyAttachmentPath: \").concat(historyAttachmentPath, \",\\n    \"));\n      const requestBody = {\n        query: \"\\n        mutation {updatePatientHistory(userId:\\\"\".concat(userId, \"\\\", patientId:\\\"\").concat(selectedPatientId, \"\\\",patientInput:{historyTitle:\\\"\").concat(historyTitle, \"\\\",historyType:\\\"\").concat(historyType, \"\\\",historyDate:\\\"\").concat(historyDate, \"\\\",historyDescription:\\\"\").concat(historyDescription, \"\\\",historyAttachmentName:\\\"\").concat(historyAttachmentName, \"\\\",historyAttachmentFormat:\\\"\").concat(historyAttachmentFormat, \"\\\",historyAttachmentPath:\\\"\").concat(historyAttachmentPath, \"\\\"})\\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{_id,title,time,location,date},consultant{date,reference{_id,name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n      \")\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientHistory._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.updatePatientHistory);\n        this.context.patients = this.state.patients;\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.updatePatientAllergiesHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id;\n\n      if (this.context.user.role !== 'admin') {\n        console.log(\"No edit permission!!\");\n        return;\n      }\n\n      console.log(\"UpdatePatientAllergiesFormData:  \", event.target.formGridAllergiesTitle.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let allergiesTitle = event.target.formGridAllergiesTitle.value;\n      let allergiesType = event.target.formGridAllergiesType.value;\n      let allergiesDescription = event.target.formGridAllergiesDescription.value;\n      let allergiesAttachmentName = event.target.formGridAllergiesAttachmentName.value;\n      let allergiesAttachmentFormat = event.target.formGridAllergiesAttachmentFormat.value;\n      let allergiesAttachmentPath = event.target.formGridAllergiesAttachmentPath.value;\n      const patientAllergies = {\n        allergiesTitle,\n        allergiesType,\n        allergiesDescription,\n        allergiesAttachmentName,\n        allergiesAttachmentFormat,\n        allergiesAttachmentPath\n      };\n      console.log(\"\\n    adding patient allergies...\\n    userId: \".concat(userId, \",\\n    patientId: \").concat(selectedPatientId, \",\\n    allergiesTitle: \").concat(allergiesTitle, \",\\n    allergiesType: \").concat(allergiesType, \",\\n    allergiesDescription: \").concat(allergiesDescription, \",\\n    allergiesAttachmentName: \").concat(allergiesAttachmentName, \",\\n    allergiesAttachmentFormat: \").concat(allergiesAttachmentFormat, \",\\n    allergiesAttachmentPath: \").concat(allergiesAttachmentPath, \",\\n    \"));\n      const requestBody = {\n        query: \"\\n        mutation {updatePatientAllergies(userId:\\\"\".concat(userId, \"\\\", patientId:\\\"\").concat(selectedPatientId, \"\\\",patientInput:{allergiesTitle:\\\"\").concat(allergiesTitle, \"\\\",allergiesType:\\\"\").concat(allergiesType, \"\\\", allergiesDescription:\\\"\").concat(allergiesDescription, \"\\\",allergiesAttachmentName:\\\"\").concat(allergiesAttachmentName, \"\\\",allergiesAttachmentFormat:\\\"\").concat(allergiesAttachmentFormat, \"\\\",allergiesAttachmentPath:\\\"\").concat(allergiesAttachmentPath, \"\\\"})\\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{_id,title,time,location,date},consultant{date,reference{_id,name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n      \")\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientAllergies._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.updatePatientAllergies);\n        this.context.patients = this.state.patients;\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.updatePatientMedicationHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id;\n\n      if (this.context.user.role !== 'admin') {\n        console.log(\"No edit permission!!\");\n        return;\n      }\n\n      console.log(\"UpdatePatientMedicationFormData:  \", event.target.formGridMedicationTitle.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let medicationTitle = event.target.formGridMedicationTitle.value;\n      let medicationType = event.target.formGridMedicationType.value;\n      let medicationDescription = event.target.formGridMedicationDescription.value;\n      let medicationAttachmentName = event.target.formGridMedicationAttachmentName.value;\n      let medicationAttachmentFormat = event.target.formGridMedicationAttachmentFormat.value;\n      let medicationAttachmentPath = event.target.formGridMedicationAttachmentPath.value;\n      const patientMedication = {\n        medicationTitle,\n        medicationType,\n        medicationDescription,\n        medicationAttachmentName,\n        medicationAttachmentFormat,\n        medicationAttachmentPath\n      };\n      console.log(\"\\n    adding patient medication...\\n    userId: \".concat(userId, \",\\n    patientId: \").concat(selectedPatientId, \",\\n    medicationTitle: \").concat(medicationTitle, \",\\n    medicationType: \").concat(medicationType, \",\\n    medicationDescription: \").concat(medicationDescription, \",\\n    medicationAttachmentName: \").concat(medicationAttachmentName, \",\\n    medicationAttachmentFormat: \").concat(medicationAttachmentFormat, \",\\n    medicationAttachmentPath: \").concat(medicationAttachmentPath, \",\\n    \"));\n      const requestBody = {\n        query: \"\\n      mutation {updatePatientMedication(userId:\\\"\".concat(userId, \"\\\", patientId:\\\"\").concat(selectedPatientId, \"\\\",patientInput:{medicationTitle:\\\"\").concat(medicationTitle, \"\\\",medicationType:\\\"\").concat(medicationType, \"\\\" medicationDescription:\\\"\").concat(medicationDescription, \"\\\",medicationAttachmentName:\\\"\").concat(medicationAttachmentName, \"\\\",medicationAttachmentFormat:\\\"\").concat(medicationAttachmentFormat, \"\\\",medicationAttachmentPath:\\\"\").concat(medicationAttachmentPath, \"\\\"})\\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{_id,title,time,location,date},consultant{date,reference{_id,name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n      \")\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientMedication._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.updatePatientMedication);\n        this.context.patients = this.state.patients;\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.updatePatientInvestigationHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id;\n\n      if (this.context.user.role !== 'admin') {\n        console.log(\"No edit permission!!\");\n        return;\n      }\n\n      console.log(\"UpdatePatientInvestigationFormData:  \", event.target.formGridInvestigationTitle.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let investigationDate = event.target.formGridInvestigationDate.value;\n      let investigationTitle = event.target.formGridInvestigationTitle.value;\n      let investigationType = event.target.formGridInvestigationType.value;\n      let investigationDescription = event.target.formGridInvestigationDescription.value;\n      let investigationAttachmentName = event.target.formGridInvestigationAttachmentName.value;\n      let investigationAttachmentFormat = event.target.formGridInvestigationAttachmentFormat.value;\n      let investigationAttachmentPath = event.target.formGridInvestigationAttachmentPath.value;\n      const patientInvestigation = {\n        investigationDate,\n        investigationTitle,\n        investigationType,\n        investigationDescription,\n        investigationAttachmentName,\n        investigationAttachmentFormat,\n        investigationAttachmentPath\n      };\n      console.log(\"\\n    adding patient investigation...\\n    userId: \".concat(userId, \",\\n    patientId: \").concat(selectedPatientId, \",\\n    investigationDate: \").concat(investigationDate, \",\\n    investigationTitle: \").concat(investigationTitle, \",\\n    investigationType: \").concat(investigationType, \",\\n    investigationDescription: \").concat(investigationDescription, \",\\n    investigationAttachmentName: \").concat(investigationAttachmentName, \",\\n    investigationAttachmentFormat: \").concat(investigationAttachmentFormat, \",\\n    investigationAttachmentPath: \").concat(investigationAttachmentPath, \",\\n    \"));\n      const requestBody = {\n        query: \"\\n        mutation {updatePatientInvestigation(userId:\\\"\".concat(userId, \"\\\", patientId:\\\"\").concat(selectedPatientId, \"\\\",patientInput:{investigationDate:\\\"\").concat(investigationDate, \"\\\",investigationTitle:\\\"\").concat(investigationTitle, \"\\\",investigationDescription:\\\"\").concat(investigationDescription, \"\\\",investigationAttachmentName:\\\"\").concat(investigationAttachmentName, \"\\\",investigationAttachmentFormat:\\\"\").concat(investigationAttachmentFormat, \"\\\",investigationAttachmentPath:\\\"\").concat(investigationAttachmentPath, \"\\\"})\\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{_id,title,time,location,date},consultant{date,reference{_id,name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n      \")\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientInvestigation._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(updatedPatient);\n        this.context.patients = this.state.patients;\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.updatePatientDiagnosisHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id;\n\n      if (this.context.user.role !== 'admin') {\n        console.log(\"No edit permission!!\");\n        return;\n      }\n\n      console.log(\"UpdatePatientDiagnosisFormData:  \", event.target.formGridDiagnosisTitle.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let diagnosisDate = event.target.formGridDiagnosisDate.value;\n      let diagnosisTitle = event.target.formGridDiagnosisTitle.value;\n      let diagnosisType = event.target.formGridDiagnosisType.value;\n      let diagnosisDescription = event.target.formGridDiagnosisDescription.value;\n      let diagnosisAttachmentName = event.target.formGridDiagnosisAttachmentName.value;\n      let diagnosisAttachmentFormat = event.target.formGridDiagnosisAttachmentFormat.value;\n      let diagnosisAttachmentPath = event.target.formGridDiagnosisAttachmentPath.value;\n      const patientDiagnosis = {\n        diagnosisDate,\n        diagnosisTitle,\n        diagnosisType,\n        diagnosisDescription,\n        diagnosisAttachmentName,\n        diagnosisAttachmentFormat,\n        diagnosisAttachmentPath\n      };\n      console.log(\"\\n    adding patient diagnosis...\\n    userId: \".concat(userId, \",\\n    patientId: \").concat(selectedPatientId, \",\\n    diagnosisDate: \").concat(diagnosisDate, \",\\n    diagnosisTitle: \").concat(diagnosisTitle, \",\\n    diagnosisType: \").concat(diagnosisType, \",\\n    diagnosisDescription: \").concat(diagnosisDescription, \",\\n    diagnosisAttachmentName: \").concat(diagnosisAttachmentName, \",\\n    diagnosisAttachmentFormat: \").concat(diagnosisAttachmentFormat, \",\\n    diagnosisAttachmentPath: \").concat(diagnosisAttachmentPath, \",\\n    \"));\n      const requestBody = {\n        query: \"\\n        mutation {updatePatientDiagnosis(userId:\\\"\".concat(userId, \"\\\", patientId:\\\"\").concat(selectedPatientId, \"\\\",patientInput:{diagnosisDate:\\\"\").concat(diagnosisDate, \"\\\",diagnosisTitle:\\\"\").concat(diagnosisTitle, \"\\\",diagnosisType:\\\"\").concat(diagnosisType, \"\\\",diagnosisDescription:\\\"\").concat(diagnosisDescription, \"\\\",diagnosisAttachmentName:\\\"\").concat(diagnosisAttachmentName, \"\\\",diagnosisAttachmentFormat:\\\"\").concat(diagnosisAttachmentFormat, \"\\\",diagnosisAttachmentPath:\\\"\").concat(diagnosisAttachmentPath, \"\\\"})\\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{_id,title,time,location,date},consultant{date,reference{_id,name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n      \")\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientDiagnosis._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.updatePatientDiagnosis);\n        this.context.patients = this.state.patients;\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.updatePatientTreatmentHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id;\n\n      if (this.context.user.role !== 'admin') {\n        console.log(\"No edit permission!!\");\n        return;\n      }\n\n      console.log(\"UpdatePatientTreatmentFormData:  \", event.target.formGridTreatmentTitle.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let treatmentDate = event.target.formGridTreatmentDate.value;\n      let treatmentTitle = event.target.formGridTreatmentTitle.value;\n      let treatmentDescription = event.target.formGridTreatmentDescription.value;\n      let treatmentDose = event.target.formGridTreatmentDose.value;\n      let treatmentFrequency = event.target.formGridTreatmentFrequency.value;\n      let treatmentType = event.target.formGridTreatmentType.value;\n      let treatmentAttachmentName = event.target.formGridTreatmentAttachmentName.value;\n      let treatmentAttachmentFormat = event.target.formGridTreatmentAttachmentFormat.value;\n      let treatmentAttachmentPath = event.target.formGridTreatmentAttachmentPath.value;\n      const patientTreatment = {\n        treatmentDate,\n        treatmentTitle,\n        treatmentDescription,\n        treatmentDose,\n        treatmentFrequency,\n        treatmentType,\n        treatmentAttachmentName,\n        treatmentAttachmentFormat,\n        treatmentAttachmentPath\n      };\n      console.log(\"\\n    adding patient treatment...\\n    userId: \".concat(userId, \",\\n    patientId: \").concat(selectedPatientId, \",\\n    treatmentDate: \").concat(treatmentDate, \",\\n    treatmentTitle: \").concat(treatmentTitle, \",\\n    treatmentDescription: \").concat(treatmentDescription, \",\\n    treatmentDose: \").concat(treatmentDose, \",\\n    treatmentFrequency: \").concat(treatmentFrequency, \",\\n    treatmentType: \").concat(treatmentType, \",\\n    treatmentAttachmentName: \").concat(treatmentAttachmentName, \",\\n    treatmentAttachmentFormat: \").concat(treatmentAttachmentFormat, \",\\n    treatmentAttachmentPath: \").concat(treatmentAttachmentPath, \",\\n    \"));\n      const requestBody = {\n        query: \"\\n        mutation {updatePatientTreatment(userId:\\\"\".concat(userId, \"\\\", patientId:\\\"\").concat(selectedPatientId, \"\\\",patientInput:{treatmentDate:\\\"\").concat(treatmentDate, \"\\\",treatmentTitle:\\\"\").concat(treatmentTitle, \"\\\",treatmentType:\\\"\").concat(treatmentType, \"\\\",treatmentDescription:\\\"\").concat(treatmentDescription, \"\\\",treatmentDose:\\\"\").concat(treatmentDose, \"\\\",treatmentFrequency:\\\"\").concat(treatmentFrequency, \"\\\",treatmentAttachmentName:\\\"\").concat(treatmentAttachmentName, \"\\\",treatmentAttachmentFormat:\\\"\").concat(treatmentAttachmentFormat, \"\\\",treatmentAttachmentPath:\\\"\").concat(treatmentAttachmentPath, \"\\\"})\\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{_id,title,time,location,date},consultant{date,reference{_id,name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n      \")\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientTreatment._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.updatePatientTreatment);\n        this.context.patients = this.state.patients;\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.updatePatientBillingHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id;\n\n      if (this.context.user.role !== 'admin') {\n        console.log(\"No edit permission!!\");\n        return;\n      }\n\n      console.log(\"UpdatePatientBillingFormData:  \", event.target.formGridBillingTitle.value);\n      this.setState({\n        updating: false,\n        patientUpdateField: null\n      });\n      let billingDate = event.target.formGridBillingDate.value;\n      let billingTitle = event.target.formGridBillingTitle.value;\n      let billingType = event.target.formGridBillingType.value;\n      let billingDescription = event.target.formGridBillingDescription.value;\n      let billingAmount = event.target.formGridBillingAmount.value;\n      let billingPaid = event.target.formGridBillingPaid.value;\n      let billingNotes = event.target.formGridBillingNotes.value;\n      let billingAttachmentName = event.target.formGridBillingAttachmentName.value;\n      let billingAttachmentFormat = event.target.formGridBillingAttachmentFormat.value;\n      let billingAttachmentPath = event.target.formGridBillingAttachmentPath.value;\n      const patientBilling = {\n        billingDate,\n        billingTitle,\n        billingType,\n        billingDescription,\n        billingAmount,\n        billingPaid,\n        billingNotes,\n        billingAttachmentName,\n        billingAttachmentFormat,\n        billingAttachmentPath\n      };\n      console.log(\"\\n    adding patient treatment...\\n    userId: \".concat(userId, \",\\n    patientId: \").concat(selectedPatientId, \",\\n    billingDate: \").concat(billingDate, \",\\n    billingTitle: \").concat(billingTitle, \",\\n    billingType: \").concat(billingType, \",\\n    billingDescription: \").concat(billingDescription, \",\\n    billingAmount: \").concat(billingAmount, \",\\n    billingPaid: \").concat(billingPaid, \",\\n    billingNotes: \").concat(billingNotes, \",\\n    billingAttachmentName: \").concat(billingAttachmentName, \",\\n    billingAttachmentFormat: \").concat(billingAttachmentFormat, \",\\n    billingAttachmentPath: \").concat(billingAttachmentPath, \",\\n    \"));\n      const requestBody = {\n        query: \"\\n        mutation {updatePatientBilling(userId:\\\"\".concat(userId, \"\\\", patientId:\\\"\").concat(selectedPatientId, \"\\\",patientInput:{billingDate:\\\"\").concat(billingDate, \"\\\",billingTitle:\\\"\").concat(billingTitle, \"\\\",billingType:\\\"\").concat(billingType, \"\\\",billingDescription:\\\"\").concat(billingDescription, \"\\\",billingAmount:\").concat(billingAmount, \",billingPaid:\").concat(billingPaid, \",billingNotes:\\\"\").concat(billingNotes, \"\\\",billingAttachmentName:\\\"\").concat(billingAttachmentName, \"\\\",billingAttachmentFormat:\\\"\").concat(billingAttachmentFormat, \"\\\",billingAttachmentPath:\\\"\").concat(billingAttachmentPath, \"\\\"})\\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{_id,title,time,location,date},consultant{date,reference{_id,name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n      \")\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n        const updatedPatientId = resData.data.updatePatientBilling._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push(resData.data.updatePatientBilling);\n        this.context.patients = this.state.patients;\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.modalConfirmSearchHandler = event => {\n      console.log(\"SearchPatientForm:  \");\n      let userId = this.context.userId;\n      console.log(\"SearchPatientFormData:  \", event.target.formBasicField.value);\n      this.setState({\n        searching: false\n      });\n      let field = event.target.formBasicField.value;\n      let query = event.target.formBasicQuery.value;\n      this.setState({\n        patientSearchField: field,\n        patientSearchQuery: query\n      });\n\n      if (field.trim().length === 0 || query.trim().length === 0) {\n        console.log(\"blank fields detected!!!...Please try again...\");\n        return;\n      }\n\n      const search = {\n        field,\n        query\n      };\n      console.log(\"Searching for Patient:  \", JSON.stringify(search));\n      const requestBody = {\n        query: \"\\n        query {\\n          getPatientField(userId: \\\"\".concat(userId, \"\\\", field: \\\"\").concat(field, \"\\\", query: \\\"\").concat(query, \"\\\" )\\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{_id,title,time,location,date},consultant{date,reference{_id,name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n      \")\n      };\n      const token = this.context.token;\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n        const searchPatients = resData.data.getPatientField;\n        this.setState({\n          searchPatients: searchPatients\n        });\n        console.log(\"state.searchPatients:  \", this.state.searchPatients); // this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.modalCancelHandler = () => {\n      this.setState({\n        creating: false,\n        updating: false,\n        searching: false,\n        selectedPatient: null\n      });\n    };\n\n    this.modalDeleteHandler = () => {\n      console.log(\"deleting patient...selectedPatient:  \", this.context.selectedPatient);\n      const selectedPatientId = this.context.selectedPatient._id;\n      const userId = this.context.selectedUser._id;\n\n      if (this.context.user.role !== 'admin') {\n        console.log(\"Not the Admin! No edit permission!!\");\n      }\n\n      this.setState({\n        deleting: true\n      });\n      const requestBody = {\n        query: \"\\n          mutation {deletePatient(userId:\\\"\".concat(userId, \"\\\",patientId:\\\"\").concat(selectedPatientId, \"\\\")\\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n        \")\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + this.context.token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatient;\n        console.log(deletedPatient);\n        let deletedPatientId = deletedPatient._id;\n        deletedPatient = this.state.patients.find(e => e._id === deletedPatientId);\n        const deletedPatientPos = this.state.patients.indexOf(deletedPatient);\n        const slicedArray = this.state.patients.splice(deletedPatientPos, 1);\n        console.log(\"deletedPatient:  \", JSON.stringify(deletedPatient), \"  deletedUserPos:  \", deletedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.setState({\n          deleting: false\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n\n        if (this.isActive) {\n          this.setState({\n            deleting: false\n          });\n        }\n      });\n    };\n\n    this.showDetailHandler = patientId => {\n      this.setState(prevState => {\n        const selectedPatient = prevState.patients.find(e => e._id === patientId);\n        this.context.selectedPatient = selectedPatient;\n        this.context.selectedPatientId = selectedPatient._id;\n        console.log(\"selectedPatient:  \", selectedPatient);\n        return {\n          selectedPatient: selectedPatient\n        };\n      });\n    };\n\n    this.nameElRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.fetchPatients();\n  }\n\n  fetchPatients() {\n    console.log(\"fetch patients function:  \");\n    const userId = this.context.userId;\n    const token = this.context.token;\n    this.setState({\n      isLoading: true\n    });\n    const requestBody = {\n      query: \"\\n          query {patients(userId:\\\"\".concat(userId, \"\\\")\\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{_id,title,time,location,date},consultant{date,reference{_id,name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\\n        \")\n    };\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    }).then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n\n      return res.json();\n    }).then(resData => {\n      console.log(\"resData\", resData);\n      const patients = resData.data.patients;\n      console.log(patients);\n      this.context.patients = this.state.patients;\n\n      if (this.isActive) {\n        this.setState({\n          patients: patients,\n          isLoading: false\n        });\n      }\n    }).catch(err => {\n      console.log(err);\n\n      if (this.isActive) {\n        this.setState({\n          isLoading: false\n        });\n      }\n    });\n  }\n\n  updatePatientSpecial(event) {\n    console.log(\"special field to update:  \", event.target.value);\n    const field = event.target.value;\n    this.setState({\n      patientUpdateField: field\n    });\n  }\n\n  componentWillUnmount() {\n    this.isActive = false;\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1795\n      },\n      __self: this\n    }, React.createElement(Accordion, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1797\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1799\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 3,\n      className: \"MasterCol1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1800\n      },\n      __self: this\n    }, React.createElement(SidebarPage, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1801\n      },\n      __self: this\n    })), React.createElement(Col, {\n      md: 6,\n      className: \"MasterCol2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1804\n      },\n      __self: this\n    }, React.createElement(Container, {\n      className: \"containerCombinedDetail\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1805\n      },\n      __self: this\n    }, React.createElement(Tabs, {\n      defaultActiveKey: \"\",\n      id: \"uncontrolled-tab-example\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1806\n      },\n      __self: this\n    }, React.createElement(Tab, {\n      eventKey: \"\",\n      title: \"Edit:\",\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1807\n      },\n      __self: this\n    }), React.createElement(Tab, {\n      eventKey: \"patientDetail\",\n      title: \"Details\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1809\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1811\n      },\n      __self: this\n    }, \"Select a Patient from the Master List below\"), this.state.isLoading === false && this.state.selectedPatient !== null && React.createElement(PatientDetail, {\n      authUserId: this.context.userId,\n      patient: this.state.selectedPatient,\n      onEdit: this.startUpdatePatientHandler,\n      onDelete: this.modalDeleteHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1818\n      },\n      __self: this\n    })), React.createElement(Tab, {\n      eventKey: \"patientCreate\",\n      title: \"Create\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1827\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"outline-primary\",\n      onClick: this.startCreatePatientHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1828\n      },\n      __self: this\n    }, \"Create\"), this.state.creating && React.createElement(CreatePatientForm, {\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmHandler,\n      confirmText: \"Confirm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1831\n      },\n      __self: this\n    })), React.createElement(Tab, {\n      eventKey: \"patientEditDemographics\",\n      title: \"Demographics\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1841\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1843\n      },\n      __self: this\n    }, \"Select a Patient from the Master List below\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      onClick: this.startUpdatePatientHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1848\n      },\n      __self: this\n    }, \"Edit Demographics\"), this.state.updating && this.state.selectedPatient !== null && React.createElement(UpdatePatientForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmUpdateHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1853\n      },\n      __self: this\n    })), React.createElement(Tab, {\n      eventKey: \"patientEditField\",\n      title: \"Single Field\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1865\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1867\n      },\n      __self: this\n    }, \"Select a Patient from the Master List below\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      onClick: this.startUpdatePatientHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1872\n      },\n      __self: this\n    }, \"Edit Field\"), this.state.updating && this.state.selectedPatient !== null && React.createElement(UpdatePatientFieldForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmUpdateFieldHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1877\n      },\n      __self: this\n    })), React.createElement(Tab, {\n      eventKey: \"patientEditConsultant\",\n      title: \"Consultant\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1889\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1891\n      },\n      __self: this\n    }, \"Select a Patient from the Master List below\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"consultant\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1896\n      },\n      __self: this\n    }, \"Add Consultant\"), this.state.patientUpdateField === 'consultant' && this.state.selectedPatient !== null && React.createElement(UpdatePatientConsultantForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientConsultantHandler,\n      confirmText: \"Confirm\",\n      consultant: this.context.selectedUser,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1901\n      },\n      __self: this\n    }), this.state.patientUpdateField === 'consultant' && this.state.selectedPatient !== null && React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1914\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1915\n      },\n      __self: this\n    }, \"Add Consultant: \", this.context.selectedUser.name), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1916\n      },\n      __self: this\n    }, \" To Paitient: \", this.state.selectedPatient.name, \" ??\"), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1917\n      },\n      __self: this\n    })), this.state.patientUpdateField === 'consultant' && this.state.selectedPatient !== null && React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1923\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1924\n      },\n      __self: this\n    }, \"Select a doctor from the Staff page\"))), React.createElement(Tab, {\n      eventKey: \"patientEditInsurance\",\n      title: \"Insurance\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1930\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1932\n      },\n      __self: this\n    }, \"Select a Patient from the Master List below\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"insurance\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1937\n      },\n      __self: this\n    }, \"Add Insurance\"), this.state.patientUpdateField === 'insurance' && this.state.selectedPatient !== null && React.createElement(UpdatePatientInsuranceForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientInsuranceHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1942\n      },\n      __self: this\n    })), React.createElement(Tab, {\n      eventKey: \"patientEditNextOfKin\",\n      title: \"NextOfKin\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1953\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1955\n      },\n      __self: this\n    }, \"Select a Patient from the Master List below\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"nextOfKin\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1960\n      },\n      __self: this\n    }, \"Add NextOfKin\"), this.state.patientUpdateField === 'nextOfKin' && this.state.selectedPatient !== null && React.createElement(UpdatePatientNextOfKinForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientNextOfKinHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1965\n      },\n      __self: this\n    })), React.createElement(Tab, {\n      eventKey: \"patientEditComplaint\",\n      title: \"Complaint\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1976\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1978\n      },\n      __self: this\n    }, \"Select a Patient from the Master List below\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"complaint\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1983\n      },\n      __self: this\n    }, \"Add Complaint\"), this.state.patientUpdateField === 'complaint' && this.state.selectedPatient !== null && React.createElement(UpdatePatientComplaintForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientComplaintHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1988\n      },\n      __self: this\n    })), React.createElement(Tab, {\n      eventKey: \"patientEditSurvey\",\n      title: \"Survey\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1999\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2001\n      },\n      __self: this\n    }, \"Select a Patient from the Master List below\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"survey\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2006\n      },\n      __self: this\n    }, \"Add Survey\"), this.state.patientUpdateField === 'survey' && this.state.selectedPatient !== null && React.createElement(UpdatePatientSurveyForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientSurveyHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2011\n      },\n      __self: this\n    })), React.createElement(Tab, {\n      eventKey: \"patientEditVitals\",\n      title: \"Vitals\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2022\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2024\n      },\n      __self: this\n    }, \"Select a Patient from the Master List below\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"vitals\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2029\n      },\n      __self: this\n    }, \"Add Vitals\"), this.state.patientUpdateField === 'vitals' && this.state.selectedPatient !== null && React.createElement(UpdatePatientVitalsForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientVitalsHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2034\n      },\n      __self: this\n    })), React.createElement(Tab, {\n      eventKey: \"patientEditExamination\",\n      title: \"Examination\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2045\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2047\n      },\n      __self: this\n    }, \"Select a Patient from the Master List below\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"examintion\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2052\n      },\n      __self: this\n    }, \"Add Examination\"), this.state.patientUpdateField === 'examintion' && this.state.selectedPatient !== null && React.createElement(UpdatePatientExaminationForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientExaminationHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2057\n      },\n      __self: this\n    })), React.createElement(Tab, {\n      eventKey: \"patientEditHistory\",\n      title: \"History\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2068\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2070\n      },\n      __self: this\n    }, \"Select a Patient from the Master List below\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"history\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2075\n      },\n      __self: this\n    }, \"Add History\"), this.state.patientUpdateField === 'history' && this.state.selectedPatient !== null && React.createElement(UpdatePatientHistoryForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientHistoryHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2080\n      },\n      __self: this\n    })), React.createElement(Tab, {\n      eventKey: \"patientEditAllergies\",\n      title: \"Allergies\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2091\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2093\n      },\n      __self: this\n    }, \"Select a Patient from the Master List below\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"allergies\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2098\n      },\n      __self: this\n    }, \"Add Allergies\"), this.state.patientUpdateField === 'allergies' && this.state.selectedPatient !== null && React.createElement(UpdatePatientAllergiesForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientAllergiesHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2103\n      },\n      __self: this\n    })), React.createElement(Tab, {\n      eventKey: \"patientEditMedication\",\n      title: \"Medication\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2114\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2116\n      },\n      __self: this\n    }, \"Select a Patient from the Master List below\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"medication\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2121\n      },\n      __self: this\n    }, \"Add Medication\"), this.state.patientUpdateField === 'medication' && this.state.selectedPatient !== null && React.createElement(UpdatePatientMedicationForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientMedicationHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2126\n      },\n      __self: this\n    })), React.createElement(Tab, {\n      eventKey: \"patientEditInvestigation\",\n      title: \"Investigation\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2137\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2139\n      },\n      __self: this\n    }, \"Select a Patient from the Master List below\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"investigation\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2144\n      },\n      __self: this\n    }, \"Add Investigation\"), this.state.patientUpdateField === 'investigation' && this.state.selectedPatient !== null && React.createElement(UpdatePatientInvestigationForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientInvestigationHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2149\n      },\n      __self: this\n    })), React.createElement(Tab, {\n      eventKey: \"patientEditDiagnosis\",\n      title: \"Diagnosis\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2160\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2162\n      },\n      __self: this\n    }, \"Select a Patient from the Master List below\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"diagnosis\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2167\n      },\n      __self: this\n    }, \"Add Diagnosis\"), this.state.patientUpdateField === 'diagnosis' && this.state.selectedPatient !== null && React.createElement(UpdatePatientDiagnosisForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientDiagnosisHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2172\n      },\n      __self: this\n    })), React.createElement(Tab, {\n      eventKey: \"patientEditTreatment\",\n      title: \"Treatment\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2183\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2185\n      },\n      __self: this\n    }, \"Select a Patient from the Master List below\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"treatment\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2190\n      },\n      __self: this\n    }, \"Add Treatment\"), this.state.patientUpdateField === 'treatment' && this.state.selectedPatient !== null && React.createElement(UpdatePatientTreatmentForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientTreatmentHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2195\n      },\n      __self: this\n    })), React.createElement(Tab, {\n      eventKey: \"patientEditBilling\",\n      title: \"Billing\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2206\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2208\n      },\n      __self: this\n    }, \"Select a Patient from the Master List below\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"billing\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2213\n      },\n      __self: this\n    }, \"Add Billing\"), this.state.patientUpdateField === 'billing' && this.state.selectedPatient !== null && React.createElement(UpdatePatientBillingForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientBillingHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2218\n      },\n      __self: this\n    })))), React.createElement(Container, {\n      className: \"containerUserMasterList\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2231\n      },\n      __self: this\n    }, React.createElement(Row, {\n      className: \"searchListRow\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2232\n      },\n      __self: this\n    }, this.state.isLoading ? React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2234\n      },\n      __self: this\n    }) : React.createElement(PatientList, {\n      patients: this.state.patients,\n      authUserId: this.context.userId,\n      onViewDetail: this.showDetailHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2236\n      },\n      __self: this\n    })))), React.createElement(Col, {\n      md: 3,\n      className: \"MasterCol3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2247\n      },\n      __self: this\n    }, React.createElement(Container, {\n      className: \"containerSearchUserInput\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2249\n      },\n      __self: this\n    }, React.createElement(Row, {\n      className: \"searchUserRowAdd\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2250\n      },\n      __self: this\n    }, this.context.token && React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"primary\",\n      eventKey: \"10\",\n      onClick: this.startSearchPatientHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2252\n      },\n      __self: this\n    }, \"Search\")), React.createElement(Accordion.Collapse, {\n      eventKey: \"10\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2257\n      },\n      __self: this\n    }, React.createElement(Row, {\n      className: \"searchUserRowForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2258\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 10,\n      className: \"searchUserColForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2259\n      },\n      __self: this\n    }, React.createElement(Tabs, {\n      defaultActiveKey: \"userPatient\",\n      id: \"uncontrolled-tab-example\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2260\n      },\n      __self: this\n    }, React.createElement(Tab, {\n      eventKey: \"Search\",\n      title: \"Search:\",\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2261\n      },\n      __self: this\n    }), React.createElement(Tab, {\n      eventKey: \"Field\",\n      title: \"Field:\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2263\n      },\n      __self: this\n    }, this.state.searching === true && React.createElement(SearchPatientForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmSearchHandler,\n      confirmText: \"Search\",\n      patient: this.context.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2265\n      },\n      __self: this\n    })), React.createElement(Tab, {\n      eventKey: \"Id\",\n      title: \"Id:\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2275\n      },\n      __self: this\n    }, \"Search by ID\"), React.createElement(Tab, {\n      eventKey: \"Visit\",\n      title: \"Visit:\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2278\n      },\n      __self: this\n    }, \"Search by Visit\"), React.createElement(Tab, {\n      eventKey: \"Name RegEx\",\n      title: \"Name RegEx:\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2281\n      },\n      __self: this\n    }, \"Search by Name RegEx\")))))), React.createElement(Container, {\n      className: \"containerSearchUserResults\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2290\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2291\n      },\n      __self: this\n    }, React.createElement(Card, {\n      className: \"searchCard\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2292\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      className: \"searchCardBody\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2293\n      },\n      __self: this\n    }, React.createElement(Card.Title, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2294\n      },\n      __self: this\n    }, \"Your Search\"), React.createElement(Card.Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2295\n      },\n      __self: this\n    }, \"Field: \", this.state.patientSearchField), React.createElement(Card.Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2298\n      },\n      __self: this\n    }, \"Query: \", this.state.patientSearchQuery)))), React.createElement(Row, {\n      className: \"searchListRow\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2304\n      },\n      __self: this\n    }, this.state.searchPatients !== [] && React.createElement(SearchPatientList, {\n      searchPatients: this.state.searchPatients,\n      authUserId: this.context.userId,\n      onCancel: this.modalCancelHandler,\n      onViewDetail: this.showDetailHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2307\n      },\n      __self: this\n    })))))));\n  }\n\n}\n\nPatientsPage.contextType = AuthContext;\nexport default PatientsPage;","map":{"version":3,"sources":["/Users/pedrojacob/Downloads/AMR/websites/office_records/ENT_EMR/frontend/src/pages/Patients.js"],"names":["React","Component","Container","Row","Col","Button","Accordion","SidebarPage","Tabs","Tab","Card","PatientList","PatientDetail","Spinner","AuthContext","SearchPatientList","SearchPatientForm","CreatePatientForm","UpdatePatientForm","UpdatePatientFieldForm","UpdatePatientConsultantForm","UpdatePatientInsuranceForm","UpdatePatientNextOfKinForm","UpdatePatientComplaintForm","UpdatePatientSurveyForm","UpdatePatientVitalsForm","UpdatePatientExaminationForm","UpdatePatientHistoryForm","UpdatePatientAllergiesForm","UpdatePatientMedicationForm","UpdatePatientInvestigationForm","UpdatePatientDiagnosisForm","UpdatePatientTreatmentForm","UpdatePatientBillingForm","PatientsPage","constructor","props","state","creating","updating","searching","updatingArray","deleting","patients","searchPatients","isLoading","selectedPatient","patientUpdateField","patientSearchField","patientSearchQuery","isActive","startCreatePatientHandler","setState","console","log","startUpdatePatientHandler","startSearchPatientHandler","modalConfirmHandler","event","target","formGridName","value","userId","context","title","formGridTitle","name","dob","formGridDob","age","formGridAge","gender","formGridgender","addressNumber","formGridAddressNumber","addressStreet","formGridAddressStreet","addressTown","formGridAddressTown","addressParish","formGridAddressParish","addressPostOffice","formGridAddressPostOffice","contactPhone","formGridContactPhone","contactEmail","formGridContactEmail","registrationDate","formGridRegistrationDate","referralDate","formGridReferralDate","expirationDate","formGridExpirationDate","attendingPhysicianName","formGridAttendingPhysicianName","attendingPhysicianEmail","formGridAttendingPhysicianEmail","attendingPhysicianPhone","formGridAttendingPhysicianPhone","referringDoctorName","formGridReferringDoctorName","referringDoctorEmail","formGridReferringDoctorEmail","referringDoctorPhone","formGridReferringDoctorPhone","occupationRole","formGridOccupationRole","occupationEmployer","formGridOccupationEmployer","occupationEmployerContactPhone","formGridOccupationEmployerContactPhone","occupationEmployerContactEmail","formGridOccupationEmployerContactEmail","trim","length","patient","requestBody","query","token","fetch","method","body","JSON","stringify","headers","Authorization","then","res","status","Error","json","resData","data","createPatient","newPatient","prevState","updatedPatients","push","catch","err","modalCancelHandler","modalConfirmUpdateHandler","user","role","selectedPatientId","_id","selectedUser","address","number","street","town","postOffice","contact","phone","email","attendingPhysician","referringDoctor","occupation","employer","updatedPatientId","updatePatient","updatedPatient","find","e","updatedPatientPos","indexOf","slicedArray","splice","fetchPatients","modalConfirmUpdateFieldHandler","formGridField","field","formGridQuery","updatePatientField","updatePatientConsultantHandler","patientConsultantReference","formGridConsultantDate","consultantDate","patientConsultant","updatePatientConsultant","updatePatientInsuranceHandler","formGridInsuranceCompany","insuranceCompany","insuranceNumber","formGridInsuranceNumber","insuranceExpiry","formGridInsuranceExpiry","insuranceDescription","formGridInsuranceDescription","insuranceSubscriberCompany","formGridInsuranceSubscriberCompany","insuranceSubscriberDescription","formGridInsuranceSubscriberDescription","patientInsurance","updatePatientInsurance","updatePatientNextOfKinHandler","formGridNextOfKinName","nextOfKinName","nextOfKinPhone","formGridNextOfKinPhone","nextOfKinEmail","formGridNextOfKinEmail","patientNextOfKin","updatePatientNextOfKin","updatePatientComplaintHandler","formGridComplaintTitle","complaintTitle","complaintDate","formGridComplaintDate","complaintDescription","formGridComplaintDescription","complaintAnamnesis","formGridComplaintAnamnesis","complaintAttachmentName","formGridComplaintAttachmentName","complaintAttachmentFormat","formGridComplaintAttachmentFormat","complaintAttachmentPath","formGridComplaintAttachmentPath","patientComplaint","updatePatientComplaint","updatePatientSurveyHandler","formGridSurveyTitle","surveyDate","formGridSurveyDate","surveyTitle","surveyDescription","formGridSurveyDescription","surveyAttachmentName","formGridSurveyAttachmentName","surveyAttachmentFormat","formGridSurveyAttachmentFormat","surveyAttachmentPath","formGridSurveyAttachmentPath","patientSurvey","updatePatientSurvey","updatePatientVitalsHandler","formGridVitalsDate","vitalsDate","vitalsPr","formGridVitalsPr","vitalsBp1","formGridVitalsBp1","vitalsBp2","formGridVitalsBp2","vitalsRr","formGridVitalsRr","vitalsTemp","formGridVitalsTemp","vitalsPs02","formGridVitalsPs02","vitalsHeight","formGridVitalsHeight","vitalsWeight","formGridVitalsWeight","vitalsBmi","formGridVitalsBmi","vitalsUrineType","formGridVitalsUrineType","vitalsUrineValue","formGridVitalsUrineValue","patientVitals","updatePatientVitals","updatePatientExaminationHandler","formGridExaminationArea","examinationDate","formGridExaminationDate","examinationGeneral","formGridExaminationGeneral","examinationArea","examinationType","formGridExaminationType","examinationMeasure","formGridExaminationMeasure","examinationValue","formGridExaminationValue","examinationDescription","formGridExaminationDescription","examinationFollowUp","formGridExaminationFollowUp","examinationAttachmentName","formGridExaminationAttachmentName","examinationAttachmentFormat","formGridExaminationAttachmentFormat","examinationAttachmentPath","formGridExaminationAttachmentPath","patientExamination","updatePatientExamination","updatePatientHistoryHandler","formGridHistoryTitle","historyType","formGridHistoryType","historyDate","formGridHistoryDate","historyTitle","historyDescription","formGridHistoryDescription","historyAttachmentName","formGridHistoryAttachmentName","historyAttachmentFormat","formGridHistoryAttachmentFormat","historyAttachmentPath","formGridHistoryAttachmentPath","patientHistory","updatePatientHistory","updatePatientAllergiesHandler","formGridAllergiesTitle","allergiesTitle","allergiesType","formGridAllergiesType","allergiesDescription","formGridAllergiesDescription","allergiesAttachmentName","formGridAllergiesAttachmentName","allergiesAttachmentFormat","formGridAllergiesAttachmentFormat","allergiesAttachmentPath","formGridAllergiesAttachmentPath","patientAllergies","updatePatientAllergies","updatePatientMedicationHandler","formGridMedicationTitle","medicationTitle","medicationType","formGridMedicationType","medicationDescription","formGridMedicationDescription","medicationAttachmentName","formGridMedicationAttachmentName","medicationAttachmentFormat","formGridMedicationAttachmentFormat","medicationAttachmentPath","formGridMedicationAttachmentPath","patientMedication","updatePatientMedication","updatePatientInvestigationHandler","formGridInvestigationTitle","investigationDate","formGridInvestigationDate","investigationTitle","investigationType","formGridInvestigationType","investigationDescription","formGridInvestigationDescription","investigationAttachmentName","formGridInvestigationAttachmentName","investigationAttachmentFormat","formGridInvestigationAttachmentFormat","investigationAttachmentPath","formGridInvestigationAttachmentPath","patientInvestigation","updatePatientInvestigation","updatePatientDiagnosisHandler","formGridDiagnosisTitle","diagnosisDate","formGridDiagnosisDate","diagnosisTitle","diagnosisType","formGridDiagnosisType","diagnosisDescription","formGridDiagnosisDescription","diagnosisAttachmentName","formGridDiagnosisAttachmentName","diagnosisAttachmentFormat","formGridDiagnosisAttachmentFormat","diagnosisAttachmentPath","formGridDiagnosisAttachmentPath","patientDiagnosis","updatePatientDiagnosis","updatePatientTreatmentHandler","formGridTreatmentTitle","treatmentDate","formGridTreatmentDate","treatmentTitle","treatmentDescription","formGridTreatmentDescription","treatmentDose","formGridTreatmentDose","treatmentFrequency","formGridTreatmentFrequency","treatmentType","formGridTreatmentType","treatmentAttachmentName","formGridTreatmentAttachmentName","treatmentAttachmentFormat","formGridTreatmentAttachmentFormat","treatmentAttachmentPath","formGridTreatmentAttachmentPath","patientTreatment","updatePatientTreatment","updatePatientBillingHandler","formGridBillingTitle","billingDate","formGridBillingDate","billingTitle","billingType","formGridBillingType","billingDescription","formGridBillingDescription","billingAmount","formGridBillingAmount","billingPaid","formGridBillingPaid","billingNotes","formGridBillingNotes","billingAttachmentName","formGridBillingAttachmentName","billingAttachmentFormat","formGridBillingAttachmentFormat","billingAttachmentPath","formGridBillingAttachmentPath","patientBilling","updatePatientBilling","modalConfirmSearchHandler","formBasicField","formBasicQuery","search","getPatientField","modalDeleteHandler","deletedPatient","deletePatient","deletedPatientId","deletedPatientPos","showDetailHandler","patientId","nameElRef","createRef","componentDidMount","updatePatientSpecial","componentWillUnmount","render","bind","contextType"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n// import Form from 'react-bootstrap/Form';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Button from 'react-bootstrap/Button';\nimport Accordion from 'react-bootstrap/Accordion';\nimport SidebarPage from './Sidebar';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\nimport Card from 'react-bootstrap/Card';\n\nimport PatientList from '../components/Patients/PatientList/PatientList';\nimport PatientDetail from '../components/Patients/PatientDetail';\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\nimport SearchPatientList from '../components/Patients/PatientList/SearchPatientList';\nimport SearchPatientForm from '../components/Forms/SearchPatientForm';\n\nimport CreatePatientForm from '../components/Forms/CreatePatientForm';\nimport UpdatePatientForm from '../components/Forms/UpdatePatientForm';\nimport UpdatePatientFieldForm from '../components/Forms/UpdatePatientFieldForm';\nimport UpdatePatientConsultantForm from '../components/Forms/UpdatePatientConsultantForm';\nimport UpdatePatientInsuranceForm from '../components/Forms/UpdatePatientInsuranceForm';\nimport UpdatePatientNextOfKinForm from '../components/Forms/UpdatePatientNextOfKinForm';\nimport UpdatePatientComplaintForm from '../components/Forms/UpdatePatientSurveyForm';\nimport UpdatePatientSurveyForm from '../components/Forms/UpdatePatientSurveyForm';\nimport UpdatePatientVitalsForm from '../components/Forms/UpdatePatientVitalsForm';\nimport UpdatePatientExaminationForm from '../components/Forms/UpdatePatientExaminationForm';\nimport UpdatePatientHistoryForm from '../components/Forms/UpdatePatientHistoryForm';\nimport UpdatePatientAllergiesForm from '../components/Forms/UpdatePatientAllergiesForm';\nimport UpdatePatientMedicationForm from '../components/Forms/UpdatePatientMedicationForm';\nimport UpdatePatientInvestigationForm from '../components/Forms/UpdatePatientInvestigationForm';\nimport UpdatePatientDiagnosisForm from '../components/Forms/UpdatePatientDiagnosisForm';\nimport UpdatePatientTreatmentForm from '../components/Forms/UpdatePatientTreatmentForm';\nimport UpdatePatientBillingForm from '../components/Forms/UpdatePatientBillingForm';\nimport './Users.css';\n\nclass PatientsPage extends Component {\n  state = {\n    creating: false,\n    updating: false,\n    searching: false,\n    updatingArray: false,\n    deleting: false,\n    patients: [],\n    searchPatients: [],\n    isLoading: false,\n    selectedPatient: null,\n    patientUpdateField: null,\n    patientSearchField: null,\n    patientSearchQuery: null,\n  };\n  isActive = true;\n\n  static contextType = AuthContext;\n\n  constructor(props) {\n    super(props);\n    this.nameElRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.fetchPatients();\n  }\n\n\n  startCreatePatientHandler = () => {\n    this.setState({ creating: true });\n    console.log(\"CreatePatientForm...\");\n  };\n  startUpdatePatientHandler = () => {\n    this.setState({ updating: true, updatingArray: true });\n    console.log(\"UpdatePatientForm...\");\n  };\n  startSearchPatientHandler = () => {\n    this.setState({ searching: true });\n    console.log(\"SearchPatientForm...\");\n  };\n\n  modalConfirmHandler = (event) => {\n\n    console.log(\"CreatePatientFormData:  \", event.target.formGridName.value);\n\n    this.setState({ creating: false });\n    const userId = this.context.userId;\n\n    let title = event.target.formGridTitle.value;\n    let name = event.target.formGridName.value;\n    let dob = event.target.formGridDob.value;\n    let age = event.target.formGridAge.value;\n    let gender = event.target.formGridgender.value;\n    let addressNumber = event.target.formGridAddressNumber.value;\n    let addressStreet = event.target.formGridAddressStreet.value;\n    let addressTown = event.target.formGridAddressTown.value;\n    let addressParish = event.target.formGridAddressParish.value;\n    let addressPostOffice = event.target.formGridAddressPostOffice.value;\n    let contactPhone = event.target.formGridContactPhone.value;\n    let contactEmail = event.target.formGridContactEmail.value;\n    let registrationDate = event.target.formGridRegistrationDate.value;\n    let referralDate = event.target.formGridReferralDate.value;\n    let expirationDate = event.target.formGridExpirationDate.value;\n    let attendingPhysicianName = event.target.formGridAttendingPhysicianName.value;\n    let attendingPhysicianEmail = event.target.formGridAttendingPhysicianEmail.value;\n    let attendingPhysicianPhone = event.target.formGridAttendingPhysicianPhone.value;\n    let referringDoctorName = event.target.formGridReferringDoctorName.value;\n    let referringDoctorEmail = event.target.formGridReferringDoctorEmail.value;\n    let referringDoctorPhone = event.target.formGridReferringDoctorPhone.value;\n    let occupationRole = event.target.formGridOccupationRole.value;\n    let occupationEmployer = event.target.formGridOccupationEmployer.value;\n    let occupationEmployerContactPhone = event.target.formGridOccupationEmployerContactPhone.value;\n    let occupationEmployerContactEmail = event.target.formGridOccupationEmployerContactEmail.value;\n\n\n    if (\n      name.trim().length === 0 ||\n      title.trim().length === 0 ||\n      name.trim().length === 0 ||\n      dob.trim().length === 0 ||\n      age.trim().length === 0 ||\n      gender.trim().length === 0 ||\n      addressNumber.trim().length === 0 ||\n      addressStreet.trim().length === 0 ||\n      addressTown.trim().length === 0 ||\n      addressParish.trim().length === 0 ||\n      addressPostOffice.trim().length === 0 ||\n      contactPhone.trim().length === 0 ||\n      contactEmail.trim().length === 0 ||\n      registrationDate.trim().length === 0 ||\n      referralDate.trim().length === 0 ||\n      expirationDate.trim().length === 0 ||\n      attendingPhysicianName.trim().length === 0 ||\n      attendingPhysicianEmail.trim().length === 0 ||\n      attendingPhysicianPhone.trim().length === 0 ||\n      referringDoctorName.trim().length === 0 ||\n      referringDoctorEmail.trim().length === 0 ||\n      referringDoctorPhone.trim().length === 0 ||\n      occupationRole.trim().length === 0 ||\n      occupationEmployer.trim().length === 0 ||\n      occupationEmployerContactPhone.trim().length === 0 ||\n      occupationEmployerContactEmail.trim().length === 0\n\n    ) {\n      console.log(\"blank fields detected!!!...Please try again...\");\n      return;\n    }\n\n    const patient = { title, name, dob, age, gender, addressNumber, addressStreet, addressTown, addressParish, addressPostOffice, contactPhone, contactEmail, registrationDate, referralDate, expirationDate, attendingPhysicianName, attendingPhysicianEmail, attendingPhysicianPhone, referringDoctorName, referringDoctorEmail, referringDoctorPhone, occupationRole, occupationEmployer, occupationEmployerContactPhone, occupationEmployerContactEmail };\n    console.log(`\n      creating patient...\n      title: ${title},\n      name: ${name},\n      dob: ${dob},\n      age: ${age},\n      gender: ${gender},\n      addressNumber: ${addressNumber},\n      addressStreet: ${addressStreet},\n      addressTown: ${addressTown},\n      addressParish: ${addressParish},\n      addressPostOffice: ${addressPostOffice},\n      contactPhone: ${contactPhone},\n      contactEmail: ${contactEmail},\n      registrationDate: ${registrationDate},\n      referralDate: ${referralDate},\n      expirationDate: ${expirationDate},\n      attendingPhysicianName: ${attendingPhysicianName},\n      attendingPhysicianEmail: ${attendingPhysicianEmail},\n      attendingPhysicianPhone: ${attendingPhysicianPhone},\n      referringDoctorName: ${referringDoctorName},\n      referringDoctorEmail: ${referringDoctorEmail},\n      referringDoctorPhone: ${referringDoctorPhone},\n      occupationRole: ${occupationRole},\n      occupationEmployer: ${occupationEmployer},\n      occupationEmployerContactPhone: ${occupationEmployerContactPhone},\n      occupationEmployerContactEmail: ${occupationEmployerContactEmail},\n      `);\n\n    const requestBody = {\n      query: `\n          mutation {createPatient(userId:\"${userId}\", patientInput:{title:\"${title}\",name:\"${name}\",dob:\"${dob}\",age:${age},gender:\"${gender}\",addressNumber:${addressNumber},addressStreet:\"${addressStreet}\",addressTown:\"${addressTown}\",addressParish:\"${addressParish}\",addressPostOffice:\"${addressPostOffice}\",contactPhone:\"${contactPhone}\",contactEmail:\"${contactEmail}\",registrationDate:\"${registrationDate}\",referralDate:\"${referralDate}\",expirationDate:\"${expirationDate}\",referringDoctorName:\"${referringDoctorName}\",referringDoctorEmail:\"${referringDoctorEmail}\",referringDoctorPhone:\"${referringDoctorPhone}\",attendingPhysicianName:\"${attendingPhysicianName}\",attendingPhysicianEmail:\"${attendingPhysicianEmail}\",attendingPhysicianPhone:\"${attendingPhysicianPhone}\",occupationRole:\"${occupationRole}\",occupationEmployer:\"${occupationEmployer}\",occupationEmployerContactPhone:\"${occupationEmployerContactPhone}\",occupationEmployerContactEmail:\"${occupationEmployerContactEmail}\"})\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n        `};\n\n    const token = this.context.token;\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(`\n          response data:\n          ${JSON.stringify(resData.data.createPatient)}\n          `);\n        const newPatient = resData.data.createPatient;\n        this.setState(prevState => {\n          const updatedPatients = [...prevState.patients];\n          updatedPatients.push(newPatient);\n\n          return { patients: updatedPatients };\n        });\n\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  modalCancelHandler = () => {\n    this.setState({ creating: false, updating: false, selectedPatient: null });\n  };\n\n\n  modalConfirmUpdateHandler = (event) => {\n\n    if(this.context.user.role !== 'admin') {\n      console.log(\"Not the Admin! No edit permission!!\");\n\n    }\n\n    const userId = this.context.userId;\n    const selectedPatientId = this.context.selectedPatient._id;\n\n    console.log(\"UpdatePatientFormData:  \", event.target.formGridName.value);\n\n\n    this.setState({ updating: false });\n\n    let title = event.target.formGridTitle.value;\n    let name = event.target.formGridName.value;\n    let dob = event.target.formGridDob.value;\n    let age = event.target.formGridAge.value;\n    let gender = event.target.formGridgender.value;\n    let addressNumber = event.target.formGridAddressNumber.value;\n    let addressStreet = event.target.formGridAddressStreet.value;\n    let addressTown = event.target.formGridAddressTown.value;\n    let addressParish = event.target.formGridAddressParish.value;\n    let addressPostOffice = event.target.formGridAddressPostOffice.value;\n    let contactPhone = event.target.formGridContactPhone.value;\n    let contactEmail = event.target.formGridContactEmail.value;\n    let registrationDate = event.target.formGridRegistrationDate.value;\n    let referralDate = event.target.formGridReferralDate.value;\n    let expirationDate = event.target.formGridExpirationDate.value;\n    let attendingPhysicianName = event.target.formGridAttendingPhysicianName.value;\n    let attendingPhysicianEmail = event.target.formGridAttendingPhysicianEmail.value;\n    let attendingPhysicianPhone = event.target.formGridAttendingPhysicianPhone.value;\n    let referringDoctorName = event.target.formGridReferringDoctorName.value;\n    let referringDoctorEmail = event.target.formGridReferringDoctorEmail.value;\n    let referringDoctorPhone = event.target.formGridReferringDoctorPhone.value;\n    let occupationRole = event.target.formGridOccupationRole.value;\n    let occupationEmployer = event.target.formGridOccupationEmployer.value;\n    let occupationEmployerContactPhone = event.target.formGridOccupationEmployerContactPhone.value;\n    let occupationEmployerContactEmail = event.target.formGridOccupationEmployerContactEmail.value;\n\n    if (title.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      title = this.context.selectedUser.title;\n    }\n    if (name.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      name = this.context.selectedUser.name;\n    }\n    if (dob.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      dob = this.context.selectedUser.dob;\n    }\n    if (gender.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      gender = this.context.selectedUser.gender;\n    }\n    if (age.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      age = this.context.selectedUser.age;\n    }\n    if (addressNumber.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      addressNumber = this.context.selectedUser.address.number;\n    }\n    if (addressStreet.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      addressStreet = this.context.selectedUser.address.street;\n    }\n    if (addressTown.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      addressTown = this.context.selectedUser.address.town;\n    }\n    if (addressParish.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      addressParish = this.context.selectedUser.address;\n    }\n    if (addressPostOffice.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      addressPostOffice = this.context.selectedUser.address.postOffice;\n    }\n    if (contactPhone.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      contactPhone = this.context.selectedUser.contact.phone;\n    }\n    if (contactEmail.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      contactEmail = this.context.selectedUser.contact.email;\n    }\n    if (registrationDate.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      registrationDate = this.context.selectedUser.registrationDate;\n    }\n    if (attendingPhysicianName.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      attendingPhysicianName = this.context.selectedUser.attendingPhysician.name;\n    }\n    if (attendingPhysicianEmail.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      attendingPhysicianEmail = this.context.selectedUser.attendingPhysician.email;\n    }\n    if (attendingPhysicianPhone.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      attendingPhysicianPhone = this.context.selectedUser.attendingPhysician.phone;\n    }\n    if (referringDoctorName.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      referringDoctorName = this.context.selectedUser.referringDoctor.name;\n    }\n    if (referringDoctorEmail.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      referringDoctorEmail = this.context.selectedUser.referringDoctor.email;\n    }\n    if (referringDoctorPhone.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      referringDoctorPhone = this.context.selectedUser.referringDoctor.phone;\n    }\n    if (occupationRole.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      occupationRole = this.context.selectedUser.occupation.role;\n    }\n    if (occupationEmployer.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      occupationEmployer = this.context.selectedUser.occupation.employer;\n    }\n    if (occupationEmployerContactEmail.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      occupationEmployerContactEmail = this.context.selectedUser.occupation.contact.email;\n    }\n    if (occupationEmployerContactPhone.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      occupationEmployerContactPhone = this.context.selectedUser.occupation.contact.phone;\n    }\n\n    const patient = { title, name, dob, age, gender, addressNumber, addressStreet, addressTown, addressParish, addressPostOffice, contactPhone, contactEmail, registrationDate, referralDate, expirationDate, attendingPhysicianName, attendingPhysicianEmail, attendingPhysicianPhone, referringDoctorName, referringDoctorEmail, referringDoctorPhone, occupationRole, occupationEmployer, occupationEmployerContactPhone, occupationEmployerContactEmail };\n    console.log(`\n      updating patient...\n      title: ${title},\n      name: ${name},\n      dob: ${dob},\n      age: ${age},\n      gender: ${gender},\n      addressNumber: ${addressNumber},\n      addressStreet: ${addressStreet},\n      addressTown: ${addressTown},\n      addressParish: ${addressParish},\n      addressPostOffice: ${addressPostOffice},\n      contactPhone: ${contactPhone},\n      contactEmail: ${contactEmail},\n      registrationDate: ${registrationDate},\n      referralDate: ${referralDate},\n      expirationDate: ${expirationDate},\n      attendingPhysicianName: ${attendingPhysicianName},\n      attendingPhysicianEmail: ${attendingPhysicianEmail},\n      attendingPhysicianPhone: ${attendingPhysicianPhone},\n      referringDoctorName: ${referringDoctorName},\n      referringDoctorEmail: ${referringDoctorEmail},\n      referringDoctorPhone: ${referringDoctorPhone},\n      occupationRole: ${occupationRole},\n      occupationEmployer: ${occupationEmployer},\n      occupationEmployerContactPhone: ${occupationEmployerContactPhone},\n      occupationEmployerContactEmail: ${occupationEmployerContactEmail},\n      `);\n\n    const requestBody = {\n      query: `\n          mutation {updatePatient(userId:\"${userId}\",patientId:\"${selectedPatientId}\", patientInput:{title:\"${title}\",name:\"${name}\",dob:\"${dob}\",age:${age},gender:\"${gender}\",addressNumber:${addressNumber},addressStreet:\"${addressStreet}\",addressTown:\"${addressTown}\",addressParish:\"${addressParish}\",addressPostOffice:\"${addressPostOffice}\",contactPhone:\"${contactPhone}\",contactEmail:\"${contactEmail}\",registrationDate:\"${registrationDate}\",referralDate:\"${referralDate}\",expirationDate:\"${expirationDate}\",referringDoctorName:\"${referringDoctorName}\",referringDoctorEmail:\"${referringDoctorEmail}\",referringDoctorPhone:\"${referringDoctorPhone}\",attendingPhysicianName:\"${attendingPhysicianName}\",attendingPhysicianEmail:\"${attendingPhysicianEmail}\",attendingPhysicianPhone:\"${attendingPhysicianPhone}\",occupationRole:\"${occupationRole}\",occupationEmployer:\"${occupationEmployer}\",occupationEmployerContactPhone:\"${occupationEmployerContactPhone}\",occupationEmployerContactEmail:\"${occupationEmployerContactPhone}\"})\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n        `};\n\n    const token = this.context.token;\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n\n        const updatedPatientId = resData.data.updatePatient._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatient);\n        this.fetchPatients();\n\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n\n  modalConfirmUpdateFieldHandler = (event) => {\n\n    const token = this.context.token;\n    const userId = this.context.userId;\n    let selectedPatientId = this.context.selectedPatient._id;\n    if( this.context.user.role !== 'admin') {\n      console.log(\"Not the creator or Admin! No edit permission!!\");\n      selectedPatientId = null;\n    }\n\n      console.log(\"UpdatePatientFieldFormData:  \", event.target.formGridField.value);\n      this.setState({ updating: false });\n\n      let field = event.target.formGridField.value;\n      let query = event.target.formGridQuery.value;\n\n      const requestBody = {\n        query:`\n          mutation{updatePatientField(userId:\"${userId}\",selectedPatientId:\"${selectedPatientId}\",field:\"${field}\",query:\"${query}\")\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n        `};\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData.data.updatePatientField));\n\n          const updatedPatientId = resData.data.updatePatientField._id;\n          const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n          const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n          const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n          console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n          this.state.patients.push(resData.data.updatePatientField);\n          this.context.patients = this.state.patients;\n          // this.fetchPatients();\n        })\n        .catch(err => {\n          console.log(err);\n        });\n\n  }\n\n\nupdatePatientConsultantHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n  const patientConsultantReference = this.context.selectedUser._id;\n  if(\n    this.context.user.role !== 'admin'\n  ) {\n    console.log(\"No edit permission!!\");\n    return;\n  }\n\n  console.log(\"UpdatePatientConsultantFormData:  \", event.target.formGridConsultantDate.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let consultantDate = event.target.formGridConsultantDate.value;\n\n  const patientConsultant = { consultantDate, patientConsultantReference };\n  console.log(`\n    adding patient consultant item...\n    userId: ${userId},\n    selectedPatientId: ${selectedPatientId},\n    consultantDate: ${consultantDate},\n    consultantReference: ${patientConsultantReference},\n    `);\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientConsultant(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{consultantDate:\" ${consultantDate}\",consultantReference: \"${patientConsultantReference}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{_id,title,time,location,date},consultant{date,reference{_id,name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    };\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData.data));\n\n          const updatedPatientId = resData.data.updatePatientConsultant._id;\n          const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n          const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n          const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n          console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n          this.state.patients.push(resData.data.updatePatientConsultant);\n          this.context.patients = this.state.patients;\n          this.fetchPatients();\n        })\n        .catch(err => {\n          console.log(err);\n        });\n\n}\nupdatePatientInsuranceHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n  if(\n    this.context.user.role !== 'admin'\n  ) {\n    console.log(\"No edit permission!!\");\n    return;\n  }\n\n  console.log(\"UpdatePatientInsuranceFormData:  \", event.target.formGridInsuranceCompany.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let insuranceCompany = event.target.formGridInsuranceCompany.value;\n  let insuranceNumber = event.target.formGridInsuranceNumber.value;\n  let insuranceExpiry = event.target.formGridInsuranceExpiry.value;\n  let insuranceDescription = event.target.formGridInsuranceDescription.value;\n  let insuranceSubscriberCompany = event.target.formGridInsuranceSubscriberCompany.value;\n  let insuranceSubscriberDescription = event.target.formGridInsuranceSubscriberDescription.value;\n\n  const patientInsurance = { insuranceCompany, insuranceNumber, insuranceExpiry, insuranceDescription, insuranceSubscriberCompany, insuranceSubscriberDescription };\n  console.log(`\n    adding patient insurance item...\n    userId: ${userId},\n    selectedPatientId: ${selectedPatientId},\n    insuranceCompany: ${insuranceCompany},\n    insuranceNumber: ${insuranceNumber},\n    insuranceExpiry: ${insuranceExpiry},\n    insuranceDescription: ${insuranceDescription},\n    insuranceSubscriberCompany: ${insuranceSubscriberCompany},\n    insuranceSubscriberDescription: ${insuranceSubscriberDescription},\n    `);\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientInsurance(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{insuranceCompany:\"${insuranceCompany}\",insuranceNumber:\"${insuranceNumber}\",insuranceDescription:\"${insuranceDescription}\",insuranceExpiry:\"${insuranceExpiry}\",insuranceSubscriberCompany:\"${insuranceSubscriberCompany}\",insuranceSubscriberDescription:\"${insuranceSubscriberDescription}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{_id,title,time,location,date},consultant{date,reference{_id,name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    };\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData.data));\n\n          const updatedPatientId = resData.data.updatePatientInsurance._id;\n          const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n          const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n          const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n          console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n          this.state.patients.push(resData.data.updatePatientInsurance);\n          this.context.patients = this.state.patients;\n          this.fetchPatients();\n        })\n        .catch(err => {\n          console.log(err);\n        });\n\n}\n\nupdatePatientNextOfKinHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n  if(\n    this.context.user.role !== 'admin'\n  ) {\n    console.log(\"No edit permission!!\");\n    return;\n  }\n\n  console.log(\"UpdatePatientNextOfKinFormData:  \", event.target.formGridNextOfKinName.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let nextOfKinName = event.target.formGridNextOfKinName.value;\n  let nextOfKinPhone = event.target.formGridNextOfKinPhone.value;\n  let nextOfKinEmail = event.target.formGridNextOfKinEmail.value;\n\n  const patientNextOfKin = { nextOfKinName, nextOfKinPhone, nextOfKinEmail };\n  console.log(`\n    adding patient nextOfKin item...\n    userId: ${userId},\n    selectedPatientId: ${selectedPatientId},\n    nextOfKinName: ${nextOfKinName},\n    nextOfKinPhone: ${nextOfKinPhone},\n    nextOfKinEmail: ${nextOfKinEmail},\n    `);\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientNextOfKin(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{nextOfKinName:\"${nextOfKinName}\",nextOfKinEmail:\"${nextOfKinEmail}\",nextOfKinPhone:\"${nextOfKinPhone}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{_id,title,time,location,date},consultant{date,reference{_id,name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    };\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(\"response data... \" + JSON.stringify(resData.data));\n\n          const updatedPatientId = resData.data.updatePatientNextOfKin._id;\n          const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n          const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n          const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n          console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n          this.state.patients.push(resData.data.updatePatientNextOfKin);\n          this.context.patients = this.state.patients;\n          this.fetchPatients();\n        })\n        .catch(err => {\n          console.log(err);\n        });\n}\n\n\nupdatePatientComplaintHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n  if(\n    this.context.user.role !== 'admin'\n  ) {\n    console.log(\"No edit permission!!\");\n    return;\n  }\n\n  console.log(\"UpdatePatientComplaintFormData:  \", event.target.formGridComplaintTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let complaintTitle = event.target.formGridComplaintTitle.value;\n  let complaintDate = event.target.formGridComplaintDate.value;\n  let complaintDescription = event.target.formGridComplaintDescription.value;\n  let complaintAnamnesis = event.target.formGridComplaintAnamnesis.value;\n  let complaintAttachmentName = event.target.formGridComplaintAttachmentName.value;\n  let complaintAttachmentFormat = event.target.formGridComplaintAttachmentFormat.value;\n  let complaintAttachmentPath = event.target.formGridComplaintAttachmentPath.value;\n\n  const patientComplaint = { complaintTitle, complaintDate, complaintDescription, complaintAnamnesis, complaintAttachmentName, complaintAttachmentFormat, complaintAttachmentPath };\n  console.log(`\n    adding patient complaint...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    complaintTitle: ${complaintTitle},\n    complaintDate: ${complaintDate},\n    complaintDescription: ${complaintDescription},\n    complaintAnamnesis: ${complaintAnamnesis},\n    complaintAttachmentName: ${complaintAttachmentName},\n    complaintAttachmentFormat: ${complaintAttachmentFormat},\n    complaintAttachmentPath: ${complaintAttachmentPath},\n    `);\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientComplaint(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{complaintDate:\"${complaintDate}\",complaintTitle:\"${complaintTitle}\",complaintDescription:\"${complaintDescription}\",complaintAnamnesis:\"${complaintAnamnesis}\",complaintAttachmentName:\"${complaintAttachmentName}\",complaintAttachmentFormat:\"${complaintAttachmentFormat}\",complaintAttachmentPath:\"${complaintAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{_id,title,time,location,date},consultant{date,reference{_id,name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientComplaint._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientComplaint);\n        this.context.patients = this.state.patients;\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n      });\n\n}\n\nupdatePatientSurveyHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n  if(\n    this.context.user.role !== 'admin'\n  ) {\n    console.log(\"No edit permission!!\");\n    return;\n  }\n\n  console.log(\"UpdatePatientSurveyFormData:  \", event.target.formGridSurveyTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let surveyDate = event.target.formGridSurveyDate.value;\n  let surveyTitle = event.target.formGridSurveyTitle.value;\n  let surveyDescription = event.target.formGridSurveyDescription.value;\n  let surveyAttachmentName = event.target.formGridSurveyAttachmentName.value;\n  let surveyAttachmentFormat = event.target.formGridSurveyAttachmentFormat.value;\n  let surveyAttachmentPath = event.target.formGridSurveyAttachmentPath.value;\n\n  const patientSurvey = { surveyDate, surveyTitle, surveyDescription, surveyAttachmentName, surveyAttachmentFormat, surveyAttachmentPath };\n  console.log(`\n    adding patient survey...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    surveyDate: ${surveyDate},\n    surveyTitle: ${surveyTitle},\n    surveyDescription: ${surveyDescription},\n    surveyAttachmentName: ${surveyAttachmentName},\n    surveyAttachmentFormat: ${surveyAttachmentFormat},\n    surveyAttachmentPath: ${surveyAttachmentPath},\n    `);\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientSurvey(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{surveyDate:\"${surveyDate}\",surveyTitle:\"${surveyTitle}\",surveyDescription:\"${surveyDescription}\",surveyAttachmentName:\"${surveyAttachmentName}\",surveyAttachmentFormat:\"${surveyAttachmentFormat}\",surveyAttachmentPath:\"${surveyAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{_id,title,time,location,date},consultant{date,reference{_id,name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientSurvey._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientSurvey);\n        this.context.patients = this.state.patients;\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n      });\n\n}\n\nupdatePatientVitalsHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n  if(\n    this.context.user.role !== 'admin'\n  ) {\n    console.log(\"No edit permission!!\");\n    return;\n  }\n\n  console.log(\"UpdatePatientVitalsFormData:  \", event.target.formGridVitalsDate.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let vitalsDate = event.target.formGridVitalsDate.value;\n  let vitalsPr = event.target.formGridVitalsPr.value;\n  let vitalsBp1 = event.target.formGridVitalsBp1.value;\n  let vitalsBp2 = event.target.formGridVitalsBp2.value;\n  let vitalsRr = event.target.formGridVitalsRr.value;\n  let vitalsTemp = event.target.formGridVitalsTemp.value;\n  let vitalsPs02 = event.target.formGridVitalsPs02.value;\n  let vitalsHeight = event.target.formGridVitalsHeight.value;\n  let vitalsWeight = event.target.formGridVitalsWeight.value;\n  let vitalsBmi = event.target.formGridVitalsBmi.value;\n  let vitalsUrineType = event.target.formGridVitalsUrineType.value;\n  let vitalsUrineValue = event.target.formGridVitalsUrineValue.value;\n\n  const patientVitals = {  };\n  console.log(`\n    adding patient vitals...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    `);\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientVitals(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{vitalsDate:\"${vitalsDate}\",vitalsPr:${vitalsPr},vitalsBp1:${vitalsBp1},vitalsBp2:${vitalsBp2},vitalsRr:${vitalsRr},vitalsTemp:${vitalsTemp},vitalsPs02:${vitalsPs02},vitalsHeight:${vitalsHeight},vitalsWeight:${vitalsWeight},vitalsBmi:${vitalsBmi},vitalsUrineType:\"${vitalsUrineType}\",vitalsUrineValue:\"${vitalsUrineValue}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{_id,title,time,location,date},consultant{date,reference{_id,name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientVitals._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientVitals);\n        this.context.patients = this.state.patients;\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n      });\n\n}\n\n\nupdatePatientExaminationHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n  if(\n    this.context.user.role !== 'admin'\n  ) {\n    console.log(\"No edit permission!!\");\n    return;\n  }\n\n  console.log(\"UpdatePatientExaminationFormData:  \", event.target.formGridExaminationArea.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let examinationDate = event.target.formGridExaminationDate.value;\n  let examinationGeneral = event.target.formGridExaminationGeneral.value;\n  let examinationArea = event.target.formGridExaminationArea.value;\n  let examinationType = event.target.formGridExaminationType.value;\n  let examinationMeasure = event.target.formGridExaminationMeasure.value;\n  let examinationValue = event.target.formGridExaminationValue.value;\n  let examinationDescription = event.target.formGridExaminationDescription.value;\n  let examinationFollowUp = event.target.formGridExaminationFollowUp.value;\n  let examinationAttachmentName = event.target.formGridExaminationAttachmentName.value;\n  let examinationAttachmentFormat = event.target.formGridExaminationAttachmentFormat.value;\n  let examinationAttachmentPath = event.target.formGridExaminationAttachmentPath.value;\n\n  const patientExamination = { examinationArea, examinationGeneral, examinationType, examinationMeasure, examinationValue, examinationAttachmentName, examinationAttachmentFormat, examinationAttachmentPath };\n\n  console.log(`\n    adding patient examination...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    examinationDate: ${examinationDate},\n    examinationGeneral: ${examinationGeneral},\n    examinationArea: ${examinationArea},\n    examinationType: ${examinationType},\n    examinationMeasure: ${examinationMeasure},\n    examinationValue: ${examinationValue},\n    examinationDescription: ${examinationDescription},\n    examinationFollowUp: ${examinationFollowUp},\n    examinationAttachmentName: ${examinationAttachmentName},\n    examinationAttachmentFormat: ${examinationAttachmentFormat},\n    examinationAttachmentPath: ${examinationAttachmentPath},\n    `);\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientExamination(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{examinationDate:\"${examinationDate}\",examinationGeneral:\"${examinationGeneral}\",examinationArea:\"${examinationArea}\",examinationType:\"${examinationType}\",examinationMeasure:\"${examinationMeasure}\",examinationValue:\"${examinationValue}\",examinationDescription:\"${examinationDescription}\",examinationFollowUp:${examinationFollowUp},examinationAttachmentName:\"${examinationAttachmentName}\",examinationAttachmentFormat:\"${examinationAttachmentFormat}\",examinationAttachmentPath:\"${examinationAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{_id,title,time,location,date},consultant{date,reference{_id,name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientExamination._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientExamination);\n        this.context.patients = this.state.patients;\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n      });\n\n}\n\n\nupdatePatientHistoryHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n  if(\n    this.context.user.role !== 'admin'\n  ) {\n    console.log(\"No edit permission!!\");\n    return;\n  }\n\n  console.log(\"UpdatePatientHistoryFormData:  \", event.target.formGridHistoryTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let historyType = event.target.formGridHistoryType.value;\n  let historyDate = event.target.formGridHistoryDate.value;\n  let historyTitle = event.target.formGridHistoryTitle.value;\n  let historyDescription = event.target.formGridHistoryDescription.value;\n  let historyAttachmentName = event.target.formGridHistoryAttachmentName.value;\n  let historyAttachmentFormat = event.target.formGridHistoryAttachmentFormat.value;\n  let historyAttachmentPath = event.target.formGridHistoryAttachmentPath.value;\n\n  const patientHistory = { historyType, historyDate, historyTitle, historyDescription, historyAttachmentName, historyAttachmentFormat, historyAttachmentPath };\n  console.log(`\n    adding patient history...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    historyType: ${historyType},\n    historyDate: ${historyDate},\n    historyTitle: ${historyTitle},\n    historyDescription: ${historyDescription},\n    historyAttachmentName: ${historyAttachmentName},\n    historyAttachmentFormat: ${historyAttachmentFormat},\n    historyAttachmentPath: ${historyAttachmentPath},\n    `);\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientHistory(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{historyTitle:\"${historyTitle}\",historyType:\"${historyType}\",historyDate:\"${historyDate}\",historyDescription:\"${historyDescription}\",historyAttachmentName:\"${historyAttachmentName}\",historyAttachmentFormat:\"${historyAttachmentFormat}\",historyAttachmentPath:\"${historyAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{_id,title,time,location,date},consultant{date,reference{_id,name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientHistory._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientHistory);\n        this.context.patients = this.state.patients;\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n      });\n\n}\n\n\nupdatePatientAllergiesHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n  if(\n    this.context.user.role !== 'admin'\n  ) {\n    console.log(\"No edit permission!!\");\n    return;\n  }\n\n  console.log(\"UpdatePatientAllergiesFormData:  \", event.target.formGridAllergiesTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let allergiesTitle = event.target.formGridAllergiesTitle.value;\n  let allergiesType = event.target.formGridAllergiesType.value;\n  let allergiesDescription = event.target.formGridAllergiesDescription.value;\n  let allergiesAttachmentName = event.target.formGridAllergiesAttachmentName.value;\n  let allergiesAttachmentFormat = event.target.formGridAllergiesAttachmentFormat.value;\n  let allergiesAttachmentPath = event.target.formGridAllergiesAttachmentPath.value;\n\n  const patientAllergies = { allergiesTitle, allergiesType, allergiesDescription, allergiesAttachmentName, allergiesAttachmentFormat, allergiesAttachmentPath };\n\n  console.log(`\n    adding patient allergies...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    allergiesTitle: ${allergiesTitle},\n    allergiesType: ${allergiesType},\n    allergiesDescription: ${allergiesDescription},\n    allergiesAttachmentName: ${allergiesAttachmentName},\n    allergiesAttachmentFormat: ${allergiesAttachmentFormat},\n    allergiesAttachmentPath: ${allergiesAttachmentPath},\n    `);\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientAllergies(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{allergiesTitle:\"${allergiesTitle}\",allergiesType:\"${allergiesType}\", allergiesDescription:\"${allergiesDescription}\",allergiesAttachmentName:\"${allergiesAttachmentName}\",allergiesAttachmentFormat:\"${allergiesAttachmentFormat}\",allergiesAttachmentPath:\"${allergiesAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{_id,title,time,location,date},consultant{date,reference{_id,name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientAllergies._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientAllergies);\n        this.context.patients = this.state.patients;\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n      });\n\n\n}\n\n\nupdatePatientMedicationHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n  if(\n    this.context.user.role !== 'admin'\n  ) {\n    console.log(\"No edit permission!!\");\n    return;\n  }\n\n  console.log(\"UpdatePatientMedicationFormData:  \", event.target.formGridMedicationTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let medicationTitle = event.target.formGridMedicationTitle.value;\n  let medicationType = event.target.formGridMedicationType.value;\n  let medicationDescription = event.target.formGridMedicationDescription.value;\n  let medicationAttachmentName = event.target.formGridMedicationAttachmentName.value;\n  let medicationAttachmentFormat = event.target.formGridMedicationAttachmentFormat.value;\n  let medicationAttachmentPath = event.target.formGridMedicationAttachmentPath.value;\n\n  const patientMedication = { medicationTitle, medicationType, medicationDescription, medicationAttachmentName, medicationAttachmentFormat, medicationAttachmentPath };\n\n  console.log(`\n    adding patient medication...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    medicationTitle: ${medicationTitle},\n    medicationType: ${medicationType},\n    medicationDescription: ${medicationDescription},\n    medicationAttachmentName: ${medicationAttachmentName},\n    medicationAttachmentFormat: ${medicationAttachmentFormat},\n    medicationAttachmentPath: ${medicationAttachmentPath},\n    `);\n\n    const requestBody = {\n      query:`\n      mutation {updatePatientMedication(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{medicationTitle:\"${medicationTitle}\",medicationType:\"${medicationType}\" medicationDescription:\"${medicationDescription}\",medicationAttachmentName:\"${medicationAttachmentName}\",medicationAttachmentFormat:\"${medicationAttachmentFormat}\",medicationAttachmentPath:\"${medicationAttachmentPath}\"})\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{_id,title,time,location,date},consultant{date,reference{_id,name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientMedication._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientMedication);\n        this.context.patients = this.state.patients;\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n      });\n\n}\n\n\nupdatePatientInvestigationHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n  if(\n    this.context.user.role !== 'admin'\n  ) {\n    console.log(\"No edit permission!!\");\n    return;\n  }\n\n  console.log(\"UpdatePatientInvestigationFormData:  \", event.target.formGridInvestigationTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let investigationDate = event.target.formGridInvestigationDate.value;\n  let investigationTitle = event.target.formGridInvestigationTitle.value;\n  let investigationType = event.target.formGridInvestigationType.value;\n  let investigationDescription = event.target.formGridInvestigationDescription.value;\n  let investigationAttachmentName = event.target.formGridInvestigationAttachmentName.value;\n  let investigationAttachmentFormat = event.target.formGridInvestigationAttachmentFormat.value;\n  let investigationAttachmentPath = event.target.formGridInvestigationAttachmentPath.value;\n\n  const patientInvestigation = { investigationDate, investigationTitle, investigationType, investigationDescription, investigationAttachmentName, investigationAttachmentFormat, investigationAttachmentPath };\n\n  console.log(`\n    adding patient investigation...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    investigationDate: ${investigationDate},\n    investigationTitle: ${investigationTitle},\n    investigationType: ${investigationType},\n    investigationDescription: ${investigationDescription},\n    investigationAttachmentName: ${investigationAttachmentName},\n    investigationAttachmentFormat: ${investigationAttachmentFormat},\n    investigationAttachmentPath: ${investigationAttachmentPath},\n    `);\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientInvestigation(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{investigationDate:\"${investigationDate}\",investigationTitle:\"${investigationTitle}\",investigationDescription:\"${investigationDescription}\",investigationAttachmentName:\"${investigationAttachmentName}\",investigationAttachmentFormat:\"${investigationAttachmentFormat}\",investigationAttachmentPath:\"${investigationAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{_id,title,time,location,date},consultant{date,reference{_id,name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientInvestigation._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(updatedPatient);\n        this.context.patients = this.state.patients;\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n      });\n\n}\n\n\nupdatePatientDiagnosisHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n  if(\n    this.context.user.role !== 'admin'\n  ) {\n    console.log(\"No edit permission!!\");\n    return;\n  }\n\n  console.log(\"UpdatePatientDiagnosisFormData:  \", event.target.formGridDiagnosisTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let diagnosisDate = event.target.formGridDiagnosisDate.value;\n  let diagnosisTitle = event.target.formGridDiagnosisTitle.value;\n  let diagnosisType = event.target.formGridDiagnosisType.value;\n  let diagnosisDescription = event.target.formGridDiagnosisDescription.value;\n  let diagnosisAttachmentName = event.target.formGridDiagnosisAttachmentName.value;\n  let diagnosisAttachmentFormat = event.target.formGridDiagnosisAttachmentFormat.value;\n  let diagnosisAttachmentPath = event.target.formGridDiagnosisAttachmentPath.value;\n\n  const patientDiagnosis = { diagnosisDate, diagnosisTitle, diagnosisType, diagnosisDescription, diagnosisAttachmentName, diagnosisAttachmentFormat, diagnosisAttachmentPath };\n\n  console.log(`\n    adding patient diagnosis...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    diagnosisDate: ${diagnosisDate},\n    diagnosisTitle: ${diagnosisTitle},\n    diagnosisType: ${diagnosisType},\n    diagnosisDescription: ${diagnosisDescription},\n    diagnosisAttachmentName: ${diagnosisAttachmentName},\n    diagnosisAttachmentFormat: ${diagnosisAttachmentFormat},\n    diagnosisAttachmentPath: ${diagnosisAttachmentPath},\n    `);\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientDiagnosis(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{diagnosisDate:\"${diagnosisDate}\",diagnosisTitle:\"${diagnosisTitle}\",diagnosisType:\"${diagnosisType}\",diagnosisDescription:\"${diagnosisDescription}\",diagnosisAttachmentName:\"${diagnosisAttachmentName}\",diagnosisAttachmentFormat:\"${diagnosisAttachmentFormat}\",diagnosisAttachmentPath:\"${diagnosisAttachmentPath}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{_id,title,time,location,date},consultant{date,reference{_id,name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientDiagnosis._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientDiagnosis);\n        this.context.patients = this.state.patients;\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n      });\n\n}\n\n\nupdatePatientTreatmentHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n  if(\n    this.context.user.role !== 'admin'\n  ) {\n    console.log(\"No edit permission!!\");\n    return;\n  }\n\n  console.log(\"UpdatePatientTreatmentFormData:  \", event.target.formGridTreatmentTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let treatmentDate = event.target.formGridTreatmentDate.value;\n  let treatmentTitle = event.target.formGridTreatmentTitle.value;\n  let treatmentDescription = event.target.formGridTreatmentDescription.value;\n  let treatmentDose = event.target.formGridTreatmentDose.value;\n  let treatmentFrequency = event.target.formGridTreatmentFrequency.value;\n  let treatmentType = event.target.formGridTreatmentType.value;\n  let treatmentAttachmentName = event.target.formGridTreatmentAttachmentName.value;\n  let treatmentAttachmentFormat = event.target.formGridTreatmentAttachmentFormat.value;\n  let treatmentAttachmentPath = event.target.formGridTreatmentAttachmentPath.value;\n\n  const patientTreatment = { treatmentDate, treatmentTitle, treatmentDescription, treatmentDose, treatmentFrequency, treatmentType, treatmentAttachmentName, treatmentAttachmentFormat, treatmentAttachmentPath };\n\n  console.log(`\n    adding patient treatment...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    treatmentDate: ${treatmentDate},\n    treatmentTitle: ${treatmentTitle},\n    treatmentDescription: ${treatmentDescription},\n    treatmentDose: ${treatmentDose},\n    treatmentFrequency: ${treatmentFrequency},\n    treatmentType: ${treatmentType},\n    treatmentAttachmentName: ${treatmentAttachmentName},\n    treatmentAttachmentFormat: ${treatmentAttachmentFormat},\n    treatmentAttachmentPath: ${treatmentAttachmentPath},\n    `);\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientTreatment(userId:\\\"${userId}\\\", patientId:\\\"${selectedPatientId}\\\",patientInput:{treatmentDate:\\\"${treatmentDate}\\\",treatmentTitle:\\\"${treatmentTitle}\\\",treatmentType:\\\"${treatmentType}\\\",treatmentDescription:\\\"${treatmentDescription}\\\",treatmentDose:\\\"${treatmentDose}\\\",treatmentFrequency:\\\"${treatmentFrequency}\\\",treatmentAttachmentName:\\\"${treatmentAttachmentName}\\\",treatmentAttachmentFormat:\\\"${treatmentAttachmentFormat}\\\",treatmentAttachmentPath:\\\"${treatmentAttachmentPath}\\\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{_id,title,time,location,date},consultant{date,reference{_id,name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientTreatment._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientTreatment);\n        this.context.patients = this.state.patients;\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n      });\n\n}\n\n\n\nupdatePatientBillingHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n  if(\n    this.context.user.role !== 'admin'\n  ) {\n    console.log(\"No edit permission!!\");\n    return;\n  }\n\n  console.log(\"UpdatePatientBillingFormData:  \", event.target.formGridBillingTitle.value);\n\n  this.setState({ updating: false , patientUpdateField: null });\n\n  let billingDate = event.target.formGridBillingDate.value;\n  let billingTitle = event.target.formGridBillingTitle.value;\n  let billingType = event.target.formGridBillingType.value;\n  let billingDescription = event.target.formGridBillingDescription.value;\n  let billingAmount = event.target.formGridBillingAmount.value;\n  let billingPaid = event.target.formGridBillingPaid.value;\n  let billingNotes = event.target.formGridBillingNotes.value;\n  let billingAttachmentName = event.target.formGridBillingAttachmentName.value;\n  let billingAttachmentFormat = event.target.formGridBillingAttachmentFormat.value;\n  let billingAttachmentPath = event.target.formGridBillingAttachmentPath.value;\n\n  const patientBilling = { billingDate, billingTitle, billingType, billingDescription, billingAmount, billingPaid, billingNotes, billingAttachmentName, billingAttachmentFormat, billingAttachmentPath };\n\n  console.log(`\n    adding patient treatment...\n    userId: ${userId},\n    patientId: ${selectedPatientId},\n    billingDate: ${billingDate},\n    billingTitle: ${billingTitle},\n    billingType: ${billingType},\n    billingDescription: ${billingDescription},\n    billingAmount: ${billingAmount},\n    billingPaid: ${billingPaid},\n    billingNotes: ${billingNotes},\n    billingAttachmentName: ${billingAttachmentName},\n    billingAttachmentFormat: ${billingAttachmentFormat},\n    billingAttachmentPath: ${billingAttachmentPath},\n    `);\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientBilling(userId:\\\"${userId}\\\", patientId:\\\"${selectedPatientId}\\\",patientInput:{billingDate:\\\"${billingDate}\\\",billingTitle:\\\"${billingTitle}\\\",billingType:\\\"${billingType}\\\",billingDescription:\\\"${billingDescription}\\\",billingAmount:${billingAmount},billingPaid:${billingPaid},billingNotes:\\\"${billingNotes}\\\",billingAttachmentName:\\\"${billingAttachmentName}\\\",billingAttachmentFormat:\\\"${billingAttachmentFormat}\\\",billingAttachmentPath:\\\"${billingAttachmentPath}\\\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{_id,title,time,location,date},consultant{date,reference{_id,name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData.data));\n\n        const updatedPatientId = resData.data.updatePatientBilling._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(resData.data.updatePatientBilling);\n        this.context.patients = this.state.patients;\n        this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n      });\n\n\n}\n\n\n\n\nmodalConfirmSearchHandler = (event) => {\n  console.log(\"SearchPatientForm:  \");\n\n\n  let userId = this.context.userId;\n\n    console.log(\"SearchPatientFormData:  \", event.target.formBasicField.value);\n    this.setState({ searching: false });\n\n    let field = event.target.formBasicField.value;\n    let query = event.target.formBasicQuery.value;\n\n    this.setState({\n      patientSearchField: field,\n      patientSearchQuery: query,\n    })\n\n    if (\n      field.trim().length === 0 ||\n      query.trim().length === 0\n    ) {\n      console.log(\"blank fields detected!!!...Please try again...\");\n      return;\n    }\n\n\n\n    const search = { field, query }\n    console.log(\"Searching for Patient:  \", JSON.stringify(search));\n\n    const requestBody = {\n      query: `\n        query {\n          getPatientField(userId: \"${userId}\", field: \"${field}\", query: \"${query}\" )\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{_id,title,time,location,date},consultant{date,reference{_id,name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n      `\n    }\n\n    const token = this.context.token;\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n\n        const searchPatients = resData.data.getPatientField;\n\n        this.setState({ searchPatients: searchPatients})\n        console.log(\"state.searchPatients:  \", this.state.searchPatients);\n        // this.fetchPatients();\n      })\n      .catch(err => {\n        console.log(err);\n      });\n}\n\n\n\n  modalCancelHandler = () => {\n    this.setState({ creating: false, updating: false, searching: false, selectedPatient: null });\n  };\n\n\n  fetchPatients() {\n    console.log(\"fetch patients function:  \");\n    const userId = this.context.userId;\n    const token = this.context.token;\n\n    this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n          query {patients(userId:\"${userId}\")\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{_id,title,time,location,date},consultant{date,reference{_id,name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n        `\n    };\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"resData\", resData);\n        const patients = resData.data.patients;\n        console.log(patients);\n\n        this.context.patients = this.state.patients;\n        if (this.isActive) {\n          this.setState({ patients: patients, isLoading: false });\n        }\n\n      })\n      .catch(err => {\n        console.log(err);\n        if (this.isActive) {\n          this.setState({ isLoading: false });\n        }\n      });\n  }\n\n\n  modalDeleteHandler = () => {\n    console.log(\"deleting patient...selectedPatient:  \", this.context.selectedPatient);\n\n    const selectedPatientId = this.context.selectedPatient._id;\n    const userId = this.context.selectedUser._id;\n\n    if(this.context.user.role !== 'admin') {\n      console.log(\"Not the Admin! No edit permission!!\");\n    }\n\n    this.setState({deleting: true});\n\n\n    const requestBody = {\n      query: `\n          mutation {deletePatient(userId:\"${userId}\",patientId:\"${selectedPatientId}\")\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n        `\n    };\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        let deletedPatient = resData.data.deletePatient;\n        console.log(deletedPatient);\n\n        let deletedPatientId = deletedPatient._id;\n        deletedPatient = this.state.patients.find(e => e._id === deletedPatientId);\n        const deletedPatientPos = this.state.patients.indexOf(deletedPatient);\n        const slicedArray = this.state.patients.splice(deletedPatientPos, 1);\n        console.log(\"deletedPatient:  \", JSON.stringify(deletedPatient),\"  deletedUserPos:  \", deletedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.setState({ deleting: false });\n\n        this.fetchPatients();\n\n      })\n      .catch(err => {\n        console.log(err);\n        if (this.isActive) {\n          this.setState({ deleting: false });\n        }\n      });\n  }\n\n\n  updatePatientSpecial (event) {\n\n    console.log(\"special field to update:  \", event.target.value);\n    const field = event.target.value;\n    this.setState({ patientUpdateField: field});\n\n  }\n\n\n  showDetailHandler = patientId => {\n\n    this.setState(prevState => {\n      const selectedPatient = prevState.patients.find(e => e._id === patientId);\n      this.context.selectedPatient = selectedPatient;\n      this.context.selectedPatientId = selectedPatient._id;\n      console.log(\"selectedPatient:  \", selectedPatient);\n      return { selectedPatient: selectedPatient };\n    });\n  };\n\n\n  componentWillUnmount() {\n    this.isActive = false;\n  }\n\n  render() {\n    return (\n\n    <React.Fragment>\n\n    <Accordion>\n\n    <Row>\n    <Col md={3} className=\"MasterCol1\">\n      <SidebarPage/>\n    </Col>\n\n    <Col md={6} className=\"MasterCol2\">\n    <Container className=\"containerCombinedDetail\">\n    <Tabs defaultActiveKey=\"\" id=\"uncontrolled-tab-example\">\n    <Tab eventKey=\"\" title=\"Edit:\" disabled>\n    </Tab>\n    <Tab eventKey=\"patientDetail\" title=\"Details\">\n    {this.state.selectedPatient === null && (\n      <Button variant=\"outline-warning\" size=\"lg\">\n        Select a Patient from the Master List below\n      </Button>\n    )}\n    {this.state.isLoading === false &&\n      this.state.selectedPatient !== null\n      &&\n      (<PatientDetail\n        authUserId={this.context.userId}\n        patient={this.state.selectedPatient}\n        onEdit={this.startUpdatePatientHandler}\n        onDelete={this.modalDeleteHandler}\n        />\n    )}\n    </Tab>\n\n    <Tab eventKey=\"patientCreate\" title=\"Create\">\n    <Button variant=\"outline-primary\" onClick={this.startCreatePatientHandler} >Create</Button>\n    {\n      this.state.creating && (\n        <CreatePatientForm\n        canCancel\n          canConfirm\n          onCancel={this.modalCancelHandler}\n          onConfirm={this.modalConfirmHandler}\n          confirmText=\"Confirm\"\n        />\n    )}\n    </Tab>\n\n    <Tab eventKey=\"patientEditDemographics\" title=\"Demographics\">\n    {this.state.selectedPatient === null && (\n      <Button variant=\"outline-warning\" size=\"lg\">\n        Select a Patient from the Master List below\n      </Button>\n    )}\n    {this.state.selectedPatient !== null && (\n      <Button variant=\"outline-primary\" onClick={this.startUpdatePatientHandler}>Edit Demographics</Button>\n    )}\n    {this.state.updating &&\n      this.state.selectedPatient !== null\n      && (\n      <UpdatePatientForm\n      authUserId={this.context.userId}\n      canCancel\n        canConfirm\n        onCancel={this.modalCancelHandler}\n        onConfirm={this.modalConfirmUpdateHandler}\n        confirmText=\"Confirm\"\n        patient={this.state.selectedPatient}\n      />\n    )}\n    </Tab>\n\n    <Tab eventKey=\"patientEditField\" title=\"Single Field\">\n    {this.state.selectedPatient === null && (\n      <Button variant=\"outline-warning\" size=\"lg\">\n        Select a Patient from the Master List below\n      </Button>\n    )}\n    {this.state.selectedPatient !== null && (\n      <Button variant=\"outline-primary\" onClick={this.startUpdatePatientHandler}>Edit Field</Button>\n    )}\n    {this.state.updating &&\n      this.state.selectedPatient !== null\n      && (\n        <UpdatePatientFieldForm\n          authUserId={this.context.userId}\n          canCancel\n          canConfirm\n          onCancel={this.modalCancelHandler}\n          onConfirm={this.modalConfirmUpdateFieldHandler}\n          confirmText=\"Confirm\"\n          patient={this.state.selectedPatient}\n        />\n    )}\n    </Tab>\n\n    <Tab eventKey=\"patientEditConsultant\" title=\"Consultant\">\n    {this.state.selectedPatient === null && (\n      <Button variant=\"outline-warning\" size=\"lg\">\n        Select a Patient from the Master List below\n      </Button>\n    )}\n    {this.state.selectedPatient !== null && (\n      <Button variant=\"outline-primary\" value='consultant' onClick={this.updatePatientSpecial.bind(this)}>Add Consultant</Button>\n    )}\n    {this.state.patientUpdateField === 'consultant' &&\n    this.state.selectedPatient !== null\n    && (\n      <UpdatePatientConsultantForm\n      authUserId={this.context.userId}\n      canCancel\n        canConfirm\n        onCancel={this.modalCancelHandler}\n        onConfirm={this.updatePatientConsultantHandler}\n        confirmText=\"Confirm\"\n        consultant={this.context.selectedUser}\n      />\n    )}\n    {this.state.patientUpdateField === 'consultant' &&\n    this.state.selectedPatient !== null &&\n    (\n      <Row>\n      <p>Add Consultant: {this.context.selectedUser.name}</p>\n      <p> To Paitient: {this.state.selectedPatient.name} ??</p>\n      <hr/>\n      </Row>\n    )}\n    {this.state.patientUpdateField === 'consultant' &&\n    this.state.selectedPatient !== null &&\n    (\n      <Row>\n      <Button variant=\"outline-warning\" size=\"lg\">\n        Select a doctor from the Staff page\n      </Button>\n      </Row>\n    )}\n    </Tab>\n    <Tab eventKey=\"patientEditInsurance\" title=\"Insurance\">\n    {this.state.selectedPatient === null && (\n      <Button variant=\"outline-warning\" size=\"lg\">\n        Select a Patient from the Master List below\n      </Button>\n    )}\n    {this.state.selectedPatient !== null && (\n      <Button variant=\"outline-primary\" value='insurance' onClick={this.updatePatientSpecial.bind(this)}>Add Insurance</Button>\n    )}\n    {this.state.patientUpdateField === 'insurance' &&\n    this.state.selectedPatient !== null\n    && (\n      <UpdatePatientInsuranceForm\n      authUserId={this.context.userId}\n      canCancel\n        canConfirm\n        onCancel={this.modalCancelHandler}\n        onConfirm={this.updatePatientInsuranceHandler}\n        confirmText=\"Confirm\"\n        patient={this.state.selectedPatient}\n      />\n    )}\n    </Tab>\n    <Tab eventKey=\"patientEditNextOfKin\" title=\"NextOfKin\">\n    {this.state.selectedPatient === null && (\n      <Button variant=\"outline-warning\" size=\"lg\">\n        Select a Patient from the Master List below\n      </Button>\n    )}\n    {this.state.selectedPatient !== null && (\n      <Button variant=\"outline-primary\" value='nextOfKin' onClick={this.updatePatientSpecial.bind(this)}>Add NextOfKin</Button>\n    )}\n    {this.state.patientUpdateField === 'nextOfKin' &&\n    this.state.selectedPatient !== null\n    && (\n      <UpdatePatientNextOfKinForm\n            authUserId={this.context.userId}\n            canCancel\n              canConfirm\n              onCancel={this.modalCancelHandler}\n              onConfirm={this.updatePatientNextOfKinHandler}\n              confirmText=\"Confirm\"\n              patient={this.state.selectedPatient}\n            />\n    )}\n    </Tab>\n    <Tab eventKey=\"patientEditComplaint\" title=\"Complaint\">\n    {this.state.selectedPatient === null && (\n      <Button variant=\"outline-warning\" size=\"lg\">\n        Select a Patient from the Master List below\n      </Button>\n    )}\n    {this.state.selectedPatient !== null && (\n      <Button variant=\"outline-primary\" value='complaint' onClick={this.updatePatientSpecial.bind(this)}>Add Complaint</Button>\n    )}\n    {this.state.patientUpdateField === 'complaint' &&\n    this.state.selectedPatient !== null\n    && (\n      <UpdatePatientComplaintForm\n            authUserId={this.context.userId}\n            canCancel\n              canConfirm\n              onCancel={this.modalCancelHandler}\n              onConfirm={this.updatePatientComplaintHandler}\n              confirmText=\"Confirm\"\n              patient={this.state.selectedPatient}\n            />\n    )}\n    </Tab>\n    <Tab eventKey=\"patientEditSurvey\" title=\"Survey\">\n    {this.state.selectedPatient === null && (\n      <Button variant=\"outline-warning\" size=\"lg\">\n        Select a Patient from the Master List below\n      </Button>\n    )}\n    {this.state.selectedPatient !== null && (\n      <Button variant=\"outline-primary\" value='survey' onClick={this.updatePatientSpecial.bind(this)}>Add Survey</Button>\n    )}\n    {this.state.patientUpdateField === 'survey' &&\n    this.state.selectedPatient !== null\n    && (\n      <UpdatePatientSurveyForm\n            authUserId={this.context.userId}\n            canCancel\n              canConfirm\n              onCancel={this.modalCancelHandler}\n              onConfirm={this.updatePatientSurveyHandler}\n              confirmText=\"Confirm\"\n              patient={this.state.selectedPatient}\n            />\n    )}\n    </Tab>\n    <Tab eventKey=\"patientEditVitals\" title=\"Vitals\">\n    {this.state.selectedPatient === null && (\n      <Button variant=\"outline-warning\" size=\"lg\">\n        Select a Patient from the Master List below\n      </Button>\n    )}\n    {this.state.selectedPatient !== null && (\n      <Button variant=\"outline-primary\" value='vitals' onClick={this.updatePatientSpecial.bind(this)}>Add Vitals</Button>\n    )}\n    {this.state.patientUpdateField === 'vitals' &&\n    this.state.selectedPatient !== null\n    && (\n      <UpdatePatientVitalsForm\n            authUserId={this.context.userId}\n            canCancel\n              canConfirm\n              onCancel={this.modalCancelHandler}\n              onConfirm={this.updatePatientVitalsHandler}\n              confirmText=\"Confirm\"\n              patient={this.state.selectedPatient}\n            />\n    )}\n    </Tab>\n    <Tab eventKey=\"patientEditExamination\" title=\"Examination\">\n    {this.state.selectedPatient === null && (\n      <Button variant=\"outline-warning\" size=\"lg\">\n        Select a Patient from the Master List below\n      </Button>\n    )}\n    {this.state.selectedPatient !== null && (\n      <Button variant=\"outline-primary\" value='examintion' onClick={this.updatePatientSpecial.bind(this)}>Add Examination</Button>\n    )}\n    {this.state.patientUpdateField === 'examintion' &&\n    this.state.selectedPatient !== null\n    && (\n      <UpdatePatientExaminationForm\n            authUserId={this.context.userId}\n            canCancel\n              canConfirm\n              onCancel={this.modalCancelHandler}\n              onConfirm={this.updatePatientExaminationHandler}\n              confirmText=\"Confirm\"\n              patient={this.state.selectedPatient}\n            />\n    )}\n    </Tab>\n    <Tab eventKey=\"patientEditHistory\" title=\"History\">\n    {this.state.selectedPatient === null && (\n      <Button variant=\"outline-warning\" size=\"lg\">\n        Select a Patient from the Master List below\n      </Button>\n    )}\n    {this.state.selectedPatient !== null && (\n      <Button variant=\"outline-primary\" value='history' onClick={this.updatePatientSpecial.bind(this)}>Add History</Button>\n    )}\n    {this.state.patientUpdateField === 'history' &&\n    this.state.selectedPatient !== null\n    && (\n      <UpdatePatientHistoryForm\n      authUserId={this.context.userId}\n      canCancel\n        canConfirm\n        onCancel={this.modalCancelHandler}\n        onConfirm={this.updatePatientHistoryHandler}\n        confirmText=\"Confirm\"\n        patient={this.state.selectedPatient}\n      />\n    )}\n    </Tab>\n    <Tab eventKey=\"patientEditAllergies\" title=\"Allergies\">\n    {this.state.selectedPatient === null && (\n      <Button variant=\"outline-warning\" size=\"lg\">\n        Select a Patient from the Master List below\n      </Button>\n    )}\n    {this.state.selectedPatient !== null && (\n      <Button variant=\"outline-primary\" value='allergies' onClick={this.updatePatientSpecial.bind(this)}>Add Allergies</Button>\n    )}\n    {this.state.patientUpdateField === 'allergies' &&\n    this.state.selectedPatient !== null\n    && (\n      <UpdatePatientAllergiesForm\n            authUserId={this.context.userId}\n            canCancel\n              canConfirm\n              onCancel={this.modalCancelHandler}\n              onConfirm={this.updatePatientAllergiesHandler}\n              confirmText=\"Confirm\"\n              patient={this.state.selectedPatient}\n            />\n    )}\n    </Tab>\n    <Tab eventKey=\"patientEditMedication\" title=\"Medication\">\n    {this.state.selectedPatient === null && (\n      <Button variant=\"outline-warning\" size=\"lg\">\n        Select a Patient from the Master List below\n      </Button>\n    )}\n    {this.state.selectedPatient !== null && (\n      <Button variant=\"outline-primary\" value='medication' onClick={this.updatePatientSpecial.bind(this)}>Add Medication</Button>\n    )}\n    {this.state.patientUpdateField === 'medication' &&\n    this.state.selectedPatient !== null\n    && (\n      <UpdatePatientMedicationForm\n      authUserId={this.context.userId}\n      canCancel\n        canConfirm\n        onCancel={this.modalCancelHandler}\n        onConfirm={this.updatePatientMedicationHandler}\n        confirmText=\"Confirm\"\n        patient={this.state.selectedPatient}\n      />\n    )}\n    </Tab>\n    <Tab eventKey=\"patientEditInvestigation\" title=\"Investigation\">\n    {this.state.selectedPatient === null && (\n      <Button variant=\"outline-warning\" size=\"lg\">\n        Select a Patient from the Master List below\n      </Button>\n    )}\n    {this.state.selectedPatient !== null && (\n      <Button variant=\"outline-primary\" value='investigation' onClick={this.updatePatientSpecial.bind(this)}>Add Investigation</Button>\n    )}\n    {this.state.patientUpdateField === 'investigation' &&\n    this.state.selectedPatient !== null\n    && (\n      <UpdatePatientInvestigationForm\n            authUserId={this.context.userId}\n            canCancel\n              canConfirm\n              onCancel={this.modalCancelHandler}\n              onConfirm={this.updatePatientInvestigationHandler}\n              confirmText=\"Confirm\"\n              patient={this.state.selectedPatient}\n            />\n    )}\n    </Tab>\n    <Tab eventKey=\"patientEditDiagnosis\" title=\"Diagnosis\">\n    {this.state.selectedPatient === null && (\n      <Button variant=\"outline-warning\" size=\"lg\">\n        Select a Patient from the Master List below\n      </Button>\n    )}\n    {this.state.selectedPatient !== null && (\n      <Button variant=\"outline-primary\" value='diagnosis' onClick={this.updatePatientSpecial.bind(this)}>Add Diagnosis</Button>\n    )}\n    {this.state.patientUpdateField === 'diagnosis' &&\n    this.state.selectedPatient !== null\n    && (\n      <UpdatePatientDiagnosisForm\n            authUserId={this.context.userId}\n            canCancel\n              canConfirm\n              onCancel={this.modalCancelHandler}\n              onConfirm={this.updatePatientDiagnosisHandler}\n              confirmText=\"Confirm\"\n              patient={this.state.selectedPatient}\n            />\n    )}\n    </Tab>\n    <Tab eventKey=\"patientEditTreatment\" title=\"Treatment\">\n    {this.state.selectedPatient === null && (\n      <Button variant=\"outline-warning\" size=\"lg\">\n        Select a Patient from the Master List below\n      </Button>\n    )}\n    {this.state.selectedPatient !== null && (\n      <Button variant=\"outline-primary\" value='treatment' onClick={this.updatePatientSpecial.bind(this)}>Add Treatment</Button>\n    )}\n    {this.state.patientUpdateField === 'treatment' &&\n    this.state.selectedPatient !== null\n    && (\n      <UpdatePatientTreatmentForm\n            authUserId={this.context.userId}\n            canCancel\n              canConfirm\n              onCancel={this.modalCancelHandler}\n              onConfirm={this.updatePatientTreatmentHandler}\n              confirmText=\"Confirm\"\n              patient={this.state.selectedPatient}\n            />\n    )}\n    </Tab>\n    <Tab eventKey=\"patientEditBilling\" title=\"Billing\">\n    {this.state.selectedPatient === null && (\n      <Button variant=\"outline-warning\" size=\"lg\">\n        Select a Patient from the Master List below\n      </Button>\n    )}\n    {this.state.selectedPatient !== null && (\n      <Button variant=\"outline-primary\" value='billing' onClick={this.updatePatientSpecial.bind(this)}>Add Billing</Button>\n    )}\n    {this.state.patientUpdateField === 'billing' &&\n    this.state.selectedPatient !== null\n    && (\n      <UpdatePatientBillingForm\n            authUserId={this.context.userId}\n            canCancel\n              canConfirm\n              onCancel={this.modalCancelHandler}\n              onConfirm={this.updatePatientBillingHandler}\n              confirmText=\"Confirm\"\n              patient={this.state.selectedPatient}\n            />\n    )}\n    </Tab>\n    </Tabs>\n    </Container>\n    <Container className=\"containerUserMasterList\">\n    <Row className=\"searchListRow\">\n    {this.state.isLoading ? (\n      <Spinner />\n    ) : (\n      <PatientList\n        patients={this.state.patients}\n        authUserId={this.context.userId}\n        onViewDetail={this.showDetailHandler}\n      />\n    )}\n    </Row>\n    </Container>\n\n    </Col>\n\n    <Col md={3} className=\"MasterCol3\">\n\n    <Container className=\"containerSearchUserInput\">\n    <Row className=\"searchUserRowAdd\">\n      {this.context.token && (\n      <Accordion.Toggle as={Button} variant=\"primary\" eventKey=\"10\" onClick={this.startSearchPatientHandler}>\n      Search\n      </Accordion.Toggle>)}\n    </Row>\n\n    <Accordion.Collapse eventKey=\"10\">\n    <Row className=\"searchUserRowForm\">\n    <Col md={10} className=\"searchUserColForm\">\n    <Tabs defaultActiveKey=\"userPatient\" id=\"uncontrolled-tab-example\">\n    <Tab eventKey=\"Search\" title=\"Search:\" disabled>\n    </Tab>\n    <Tab eventKey=\"Field\" title=\"Field:\">\n    {this.state.searching === true && (\n      <SearchPatientForm\n      authUserId={this.context.userId}\n      canCancel\n        canConfirm\n        onCancel={this.modalCancelHandler}\n        onConfirm={this.modalConfirmSearchHandler}\n        confirmText=\"Search\"\n        patient={this.context.selectedPatient}\n      />)}\n    </Tab>\n    <Tab eventKey=\"Id\" title=\"Id:\">\n      Search by ID\n    </Tab>\n    <Tab eventKey=\"Visit\" title=\"Visit:\">\n      Search by Visit\n    </Tab>\n    <Tab eventKey=\"Name RegEx\" title=\"Name RegEx:\">\n      Search by Name RegEx\n    </Tab>\n    </Tabs>\n    </Col>\n    </Row>\n    </Accordion.Collapse>\n    </Container>\n\n    <Container className=\"containerSearchUserResults\">\n    <Row>\n      <Card className=\"searchCard\">\n        <Card.Body className=\"searchCardBody\">\n          <Card.Title>Your Search</Card.Title>\n          <Card.Text>\n            Field: {this.state.patientSearchField}\n          </Card.Text>\n          <Card.Text>\n            Query: {this.state.patientSearchQuery}\n          </Card.Text>\n        </Card.Body>\n      </Card>\n    </Row>\n    <Row className=\"searchListRow\">\n    {\n      this.state.searchPatients !== [] &&\n      <SearchPatientList\n        searchPatients={this.state.searchPatients}\n        authUserId={this.context.userId}\n        onCancel={this.modalCancelHandler}\n          onViewDetail={this.showDetailHandler}\n      />\n    }\n    </Row>\n    </Container>\n\n    </Col>\n    </Row>\n\n</Accordion>\n\n      </React.Fragment>\n    );\n  }\n}\n\nexport default PatientsPage;\n"]},"metadata":{},"sourceType":"module"}