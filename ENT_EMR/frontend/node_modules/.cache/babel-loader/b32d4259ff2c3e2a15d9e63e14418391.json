{"ast":null,"code":"var _jsxFileName = \"/Users/pedrojacob/Downloads/AMR/websites/office_records/ENT_EMR/frontend/src/pages/Signup.js\";\nimport React, { Component } from 'react';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport AlertBox from '../components/AlertBox';\nimport CreateUserForm from '../components/Forms/CreateUserForm';\nimport LoadingOverlay from '../components/LoadingOverlay';\n\nclass SignupPage extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      success: \"Signup!!\",\n      userAlert: null,\n      overlay: false,\n      overlayStatus: \"test\"\n    };\n\n    this.modalConfirmHandler = event => {\n      event.preventDefault();\n      this.setState({\n        creating: false,\n        userAlert: \"Signing you up....\"\n      });\n      const email = event.target.formGridEmail.value;\n      const password = event.target.formGridPassword.value;\n      const name = event.target.formGridName.value;\n      const role = event.target.formGridRole.value;\n      let dob = event.target.formGridDob.value;\n      let phone = event.target.formGridPhone.value;\n      let addressNumber = event.target.formGridAddressNumber.value;\n      let addressStreet = event.target.formGridAddressStreet.value;\n      let addressTown = event.target.formGridAddressTown.value;\n      let addressParish = event.target.formGridAddressParish.value;\n      let addressPostOffice = event.target.formGridAddressPostOffice.value;\n      let employmentDate = event.target.formGridEmploymentDate.value;\n\n      if (event.target.formGridEmploymentDateTodayCheckbox.checked === true) {\n        employmentDate = new Date().toISOString().slice(0, 10);\n      }\n\n      let terminationDate = event.target.formGridTerminationDate.value;\n\n      if (event.target.formGridTerminationDateTodayCheckbox.checked === true) {\n        terminationDate = new Date().toISOString().slice(0, 10);\n      }\n\n      if (email.trim().length === 0 || password.trim().length === 0 || name.trim().length === 0 || role.trim().length === 0 || dob.trim().length === 0 || phone.trim().length === 0 || addressNumber.trim().length === 0 || addressStreet.trim().length === 0 || addressTown.trim().length === 0 || addressParish.trim().length === 0 || addressPostOffice.trim().length === 0 || employmentDate.trim().length === 0 || terminationDate.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...Please try again...\"\n        });\n        return;\n      }\n\n      const token = this.context.token;\n      const userId = this.context.userId;\n      const user = {\n        email,\n        password,\n        name,\n        role,\n        dob,\n        phone,\n        addressNumber,\n        addressStreet,\n        addressTown,\n        addressParish,\n        addressPostOffice,\n        employmentDate,\n        terminationDate\n      };\n      console.log(`\n      creating user...\n      userId: ${userId}\n      email: ${email},\n      password: ${password},\n      name: ${name},\n      role: ${role},\n      dob: ${dob},\n      phone: ${phone},\n      addressNumber: ${addressNumber},\n      addressStreet: ${addressStreet},\n      addressTown: ${addressTown},\n      addressParish: ${addressParish},\n      addressPostOffice: ${addressPostOffice},\n      employmentDate: ${employmentDate},\n      terminationDate: ${terminationDate},\n      `);\n      this.setState({\n        userAlert: \"creating user...\"\n      });\n      const requestBody = {\n        query: `\n          mutation {\n            createUser(userInput: {email:\"${email}\",password:\"${password}\",name:\"${name}\",role:\"${role}\",\n\n            employmentDate:\"${employmentDate}\",terminationDate:\"${terminationDate}\"})\n            {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}\n          }\n        `\n      }; // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n        console.log(\"resData head slice:  \", JSON.stringify(resData).slice(2, 7));\n\n        if (JSON.stringify(resData).slice(2, 7) === 'error') {\n          console.log(\"signup...failed...\");\n          this.setState({\n            success: \"Something went wrong!!!\"\n          });\n        } else {\n          this.setState({\n            success: \"Signup success...Proceed to login\"\n          });\n          console.log(this.state.success);\n        }\n\n        this.setState({\n          userAlert: JSON.stringify(resData).slice(2, 7)\n        });\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, React.createElement(AlertBox, {\n      authUserId: this.context.userId,\n      alert: this.state.userAlert,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }), this.state.overlay === true && React.createElement(LoadingOverlay, {\n      status: this.state.overlayStatus,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }), React.createElement(Col, {\n      className: \"signupRow\",\n      md: 8,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, React.createElement(CreateUserForm, {\n      canConfirm: true,\n      onConfirm: this.modalConfirmHandler,\n      onSubmit: this.modalConfirmHandler,\n      confirmText: \"Confirm\",\n      successText: this.state.success,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default SignupPage;","map":{"version":3,"sources":["/Users/pedrojacob/Downloads/AMR/websites/office_records/ENT_EMR/frontend/src/pages/Signup.js"],"names":["React","Component","Row","Col","AlertBox","CreateUserForm","LoadingOverlay","SignupPage","state","success","userAlert","overlay","overlayStatus","modalConfirmHandler","event","preventDefault","setState","creating","email","target","formGridEmail","value","password","formGridPassword","name","formGridName","role","formGridRole","dob","formGridDob","phone","formGridPhone","addressNumber","formGridAddressNumber","addressStreet","formGridAddressStreet","addressTown","formGridAddressTown","addressParish","formGridAddressParish","addressPostOffice","formGridAddressPostOffice","employmentDate","formGridEmploymentDate","formGridEmploymentDateTodayCheckbox","checked","Date","toISOString","slice","terminationDate","formGridTerminationDate","formGridTerminationDateTodayCheckbox","trim","length","token","context","userId","user","console","log","requestBody","query","fetch","method","body","JSON","stringify","headers","Authorization","then","res","status","Error","json","resData","catch","err","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nimport AlertBox from '../components/AlertBox';\nimport CreateUserForm from '../components/Forms/CreateUserForm';\nimport LoadingOverlay from '../components/LoadingOverlay';\n\nclass SignupPage extends Component {\n  state = {\n    success: \"Signup!!\",\n    userAlert: null,\n    overlay: false,\n    overlayStatus: \"test\",\n  };\n\n  modalConfirmHandler = (event) => {\n\n    event.preventDefault();\n\n    this.setState({ creating: false, userAlert: \"Signing you up....\" });\n    const email = event.target.formGridEmail.value;\n    const password = event.target.formGridPassword.value;\n    const name = event.target.formGridName.value;\n    const role = event.target.formGridRole.value;\n    let dob = event.target.formGridDob.value;\n    let phone = event.target.formGridPhone.value;\n    let addressNumber = event.target.formGridAddressNumber.value;\n    let addressStreet = event.target.formGridAddressStreet.value;\n    let addressTown = event.target.formGridAddressTown.value;\n    let addressParish = event.target.formGridAddressParish.value;\n    let addressPostOffice = event.target.formGridAddressPostOffice.value;\n\n    let employmentDate = event.target.formGridEmploymentDate.value;\n    if (event.target.formGridEmploymentDateTodayCheckbox.checked === true) {\n      employmentDate = new Date().toISOString().slice(0,10);\n    }\n\n    let terminationDate = event.target.formGridTerminationDate.value;\n    if (event.target.formGridTerminationDateTodayCheckbox.checked === true) {\n      terminationDate = new Date().toISOString().slice(0,10);\n    }\n\n    if (\n      email.trim().length === 0 ||\n      password.trim().length === 0 ||\n      name.trim().length === 0 ||\n      role.trim().length === 0 ||\n      dob.trim().length === 0 ||\n      phone.trim().length === 0 ||\n      addressNumber.trim().length === 0 ||\n      addressStreet.trim().length === 0 ||\n      addressTown.trim().length === 0 ||\n      addressParish.trim().length === 0 ||\n      addressPostOffice.trim().length === 0 ||\n      employmentDate.trim().length === 0 ||\n      terminationDate.trim().length === 0\n    ) {\n      this.setState({userAlert: \"blank fields detected!!!...Please try again...\"});\n      return;\n    }\n\n    const token = this.context.token;\n    const userId = this.context.userId;\n    const user = { email, password, name, role, dob, phone, addressNumber, addressStreet, addressTown, addressParish, addressPostOffice, employmentDate, terminationDate };\n\n    console.log(`\n      creating user...\n      userId: ${userId}\n      email: ${email},\n      password: ${password},\n      name: ${name},\n      role: ${role},\n      dob: ${dob},\n      phone: ${phone},\n      addressNumber: ${addressNumber},\n      addressStreet: ${addressStreet},\n      addressTown: ${addressTown},\n      addressParish: ${addressParish},\n      addressPostOffice: ${addressPostOffice},\n      employmentDate: ${employmentDate},\n      terminationDate: ${terminationDate},\n      `);\n      this.setState({userAlert: \"creating user...\"});\n\n    const requestBody = {\n      query: `\n          mutation {\n            createUser(userInput: {email:\"${email}\",password:\"${password}\",name:\"${name}\",role:\"${role}\",\n\n            employmentDate:\"${employmentDate}\",terminationDate:\"${terminationDate}\"})\n            {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}\n          }\n        `\n    };\n\n    // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n        console.log(\"resData head slice:  \", JSON.stringify(resData).slice(2,7));\n        if (JSON.stringify(resData).slice(2,7) === 'error') {\n          console.log(\"signup...failed...\");\n          this.setState({success: \"Something went wrong!!!\" });\n        } else {\n          this.setState({success: \"Signup success...Proceed to login\" });\n          console.log(this.state.success);\n        }\n        this.setState({userAlert: JSON.stringify(resData).slice(2,7)})\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({userAlert: err});\n      });\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n\n      <Row>\n      <AlertBox\n        authUserId={this.context.userId}\n        alert={this.state.userAlert}\n      />\n\n      {this.state.overlay === true && (\n        <LoadingOverlay\n          status={this.state.overlayStatus}\n        />\n      )}\n\n      <Col className=\"signupRow\" md={8}>\n        <CreateUserForm\n          canConfirm\n          onConfirm={this.modalConfirmHandler}\n          onSubmit={this.modalConfirmHandler}\n          confirmText=\"Confirm\"\n          successText={this.state.success}\n        />\n      </Col>\n      </Row>\n\n      </React.Fragment>\n    );\n  }\n}\n\nexport default SignupPage;\n"]},"metadata":{},"sourceType":"module"}