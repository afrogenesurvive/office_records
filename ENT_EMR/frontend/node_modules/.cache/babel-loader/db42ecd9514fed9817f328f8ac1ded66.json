{"ast":null,"code":"var _jsxFileName = \"/Users/pedrojacob/Downloads/AMR/websites/office_records/ENT_EMR/frontend/src/pages/Patients.js\";\nimport React, { Component } from 'react';\nimport Modal from '../components/Modal/Modal';\nimport Backdrop from '../components/Backdrop/Backdrop';\nimport PatientList from '../components/Patients/PatientList/PatientList';\nimport PatientDetail from '../components/Patients/PatientDetail';\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\nimport './Patients.css';\n\nclass PatientsPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      creating: false,\n      patients: [],\n      isLoading: false,\n      selectedPatient: null\n    };\n    this.isActive = true;\n\n    this.startCreatePatientHandler = () => {\n      this.setState({\n        creating: true\n      });\n    };\n\n    this.modalConfirmHandler = () => {\n      this.setState({\n        creating: false\n      });\n      const name = this.nameElRef;\n      const dob = this.dobElRef.current.value;\n      const address = this.addressElRef.current.value;\n      const contactPhone = this.contactPhoneElRef.current.value;\n      const contactEmail = this.contactEmailElRef.current.value;\n      const registrationDate = this.registrationDateElRef.current.value;\n      const referringDoctor = this.referringDoctorElRef.current.value;\n      const referringDoctorName = this.referringDoctorNameElRef.current.value;\n      const referringDoctorEmail = this.referringDoctorEmailElRef.current.value;\n      const referringDoctorPhone = this.referringDoctorPhoneElRef.current.value;\n      const occupationRole = this.occupationRoleElRef.current.value;\n      const occupationEmployer = this.occupationEmployerElRef.current.value;\n      const occupationEmployerContactPhone = this.occupationEmployerContactPhoneElRef.current.value;\n      const occupationEmployerContactEmail = this.occupationEmployerContactEmailElRef.current.value;\n\n      if (email.trim().length === 0 || password.trim().length === 0 || name.trim().length === 0 || username.trim().length === 0) {\n        return;\n      }\n\n      const user = {\n        email,\n        password,\n        name,\n        username,\n        description,\n        avatar,\n        dob,\n        phone,\n        address\n      };\n      console.log(\"creating user.. \" + JSON.stringify(user));\n      const requestBody = {\n        query: \"\\n          mutation CreateUser($email: String!, $password: String!, $name: String!, $username: String!, $description: String!, $avatar: String!, $dob: String!, $phone: String!, $address: String!) {\\n            createUser(userInput: {email: $email, password: $password, name: $name, username: $username, description: $description, avatar: $avatar, dob: $dob, phone: $phone, address: $address}) {\\n              _id\\n              email\\n              password\\n              name\\n              username\\n              description\\n              avatar\\n              dob\\n              phone\\n              address\\n            }\\n          }\\n        \",\n        variables: {\n          email: email,\n          password: password,\n          name: name,\n          username: username,\n          description: description,\n          avatar: avatar,\n          dob: dob,\n          phone: phone,\n          address: address\n        }\n      };\n      const token = this.context.token;\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n        this.setState(prevState => {\n          const updatedUsers = [...prevState.users];\n          updatedUsers.push({\n            _id: resData.data.createUser._id,\n            email: resData.data.createUser.email,\n            name: resData.data.createUser.name,\n            username: resData.data.createUser.username,\n            description: resData.data.createUser.description,\n            avatar: resData.data.createUser.avatar,\n            dob: resData.data.createUser.dob,\n            phone: resData.data.createUser.phone,\n            address: resData.data.createUser.address\n          });\n          return {\n            users: updatedUsers\n          };\n        });\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.modalCancelHandler = () => {\n      this.setState({\n        creating: false,\n        selectedUser: null\n      });\n    };\n\n    this.showDetailHandler = userId => {\n      this.setState(prevState => {\n        const selectedUser = prevState.users.find(e => e._id === userId);\n        this.context.selectedUserId = selectedUser;\n        console.log(\"here:  \", selectedUser);\n        return {\n          selectedUser: selectedUser\n        };\n      });\n    };\n\n    this.nameElRef = React.createRef();\n    this.dobElRef = React.createRef();\n    this.addressElRef = React.createRef();\n    this.contactPhoneElRef = React.createRef();\n    this.contactEmailElRef = React.createRef();\n    this.registrationDateElRef = React.createRef();\n    this.referringDoctorElRef = React.createRef();\n    this.referringDoctorNameElRef = React.createRef();\n    this.referringDoctorEmailElRef = React.createRef();\n    this.referringDoctorPhoneElRef = React.createRef();\n    this.occupationRoleElRef = React.createRef();\n    this.occupationEmployerElRef = React.createRef();\n    this.occupationEmployerContactPhoneElRef = React.createRef();\n    this.occupationEmployerContactEmailElRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.fetchPatients();\n  }\n\n  fetchUsers() {\n    console.log(\"'fetch users function' context object... \" + JSON.stringify(this.context));\n    const userId = this.context.userId;\n    this.setState({\n      isLoading: true\n    });\n    const requestBody = {\n      query: \"\\n          query users($userId: ID!) {\\n            users(userId: $userId) {\\n              _id\\n              email\\n              password\\n              name\\n              role\\n            }\\n          }\\n        \",\n      variables: {\n        userId: userId\n      }\n    };\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    }).then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n\n      return res.json();\n    }).then(resData => {\n      const users = resData.data.users;\n      console.log(users);\n\n      if (this.isActive) {\n        this.setState({\n          users: users,\n          isLoading: false\n        });\n      }\n    }).catch(err => {\n      console.log(err);\n\n      if (this.isActive) {\n        this.setState({\n          isLoading: false\n        });\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    this.isActive = false;\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222\n      },\n      __self: this\n    }, this.state.creating && React.createElement(Backdrop, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223\n      },\n      __self: this\n    }), this.state.creating && React.createElement(Modal, {\n      title: \"Create Profile\",\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmHandler,\n      confirmText: \"Confirm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"form-control\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"email\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234\n      },\n      __self: this\n    }, \"Email\"), React.createElement(\"input\", {\n      type: \"text\",\n      id: \"title\",\n      ref: this.emailElRef,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"form-control\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"password\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238\n      },\n      __self: this\n    }, \"Password\"), React.createElement(\"input\", {\n      type: \"password\",\n      id: \"password\",\n      ref: this.passwordElRef,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"form-control\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242\n      },\n      __self: this\n    }, \"Name\"), React.createElement(\"input\", {\n      type: \"text\",\n      id: \"name\",\n      ref: this.nameElRef,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"form-control\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"role\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246\n      },\n      __self: this\n    }, \"Role\"), React.createElement(\"input\", {\n      type: \"text\",\n      id: \"role\",\n      ref: this.roleElRef,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247\n      },\n      __self: this\n    })))), this.state.isLoading === false && React.createElement(UserDetail, {\n      authUserId: this.context.userId,\n      user: this.context.selectedUserId,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253\n      },\n      __self: this\n    }), this.context.token && React.createElement(\"div\", {\n      className: \"users-control\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259\n      },\n      __self: this\n    }, \"Create a Profile!\"), React.createElement(\"button\", {\n      className: \"btn\",\n      onClick: this.startCreateUserHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260\n      },\n      __self: this\n    }, \"Sign-Up\")), this.state.isLoading ? React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266\n      },\n      __self: this\n    }) : React.createElement(UserList, {\n      users: this.state.users,\n      authUserId: this.context.userId,\n      onViewDetail: this.showDetailHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268\n      },\n      __self: this\n    }));\n  }\n\n}\n\nPatientsPage.contextType = AuthContext;\nexport default UsersPage;","map":{"version":3,"sources":["/Users/pedrojacob/Downloads/AMR/websites/office_records/ENT_EMR/frontend/src/pages/Patients.js"],"names":["React","Component","Modal","Backdrop","PatientList","PatientDetail","Spinner","AuthContext","PatientsPage","constructor","props","state","creating","patients","isLoading","selectedPatient","isActive","startCreatePatientHandler","setState","modalConfirmHandler","name","nameElRef","dob","dobElRef","current","value","address","addressElRef","contactPhone","contactPhoneElRef","contactEmail","contactEmailElRef","registrationDate","registrationDateElRef","referringDoctor","referringDoctorElRef","referringDoctorName","referringDoctorNameElRef","referringDoctorEmail","referringDoctorEmailElRef","referringDoctorPhone","referringDoctorPhoneElRef","occupationRole","occupationRoleElRef","occupationEmployer","occupationEmployerElRef","occupationEmployerContactPhone","occupationEmployerContactPhoneElRef","occupationEmployerContactEmail","occupationEmployerContactEmailElRef","email","trim","length","password","username","user","description","avatar","phone","console","log","JSON","stringify","requestBody","query","variables","token","context","fetch","method","body","headers","Authorization","then","res","status","Error","json","resData","prevState","updatedUsers","users","push","_id","data","createUser","catch","err","modalCancelHandler","selectedUser","showDetailHandler","userId","find","e","selectedUserId","createRef","componentDidMount","fetchPatients","fetchUsers","componentWillUnmount","render","emailElRef","passwordElRef","roleElRef","startCreateUserHandler","contextType","UsersPage"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport Modal from '../components/Modal/Modal';\nimport Backdrop from '../components/Backdrop/Backdrop';\nimport PatientList from '../components/Patients/PatientList/PatientList';\nimport PatientDetail from '../components/Patients/PatientDetail';\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\nimport './Patients.css';\n\nclass PatientsPage extends Component {\n  state = {\n    creating: false,\n    patients: [],\n    isLoading: false,\n    selectedPatient: null\n  };\n  isActive = true;\n\n  static contextType = AuthContext;\n\n  constructor(props) {\n    super(props);\n    this.nameElRef = React.createRef();\n    this.dobElRef = React.createRef();\n    this.addressElRef = React.createRef();\n    this.contactPhoneElRef = React.createRef();\n    this.contactEmailElRef = React.createRef();\n    this.registrationDateElRef = React.createRef();\n    this.referringDoctorElRef = React.createRef();\n    this.referringDoctorNameElRef = React.createRef();\n    this.referringDoctorEmailElRef = React.createRef();\n    this.referringDoctorPhoneElRef = React.createRef();\n    this.occupationRoleElRef = React.createRef();\n    this.occupationEmployerElRef = React.createRef();\n    this.occupationEmployerContactPhoneElRef = React.createRef();\n    this.occupationEmployerContactEmailElRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.fetchPatients();\n  }\n\n\n  startCreatePatientHandler = () => {\n    this.setState({ creating: true });\n  };\n\n  modalConfirmHandler = () => {\n    this.setState({ creating: false });\n    const name = this.nameElRef\n    const dob = this.dobElRef.current.value;\n    const address = this.addressElRef.current.value;\n    const contactPhone = this.contactPhoneElRef.current.value;\n    const contactEmail = this.contactEmailElRef.current.value;\n    const registrationDate = this.registrationDateElRef.current.value;\n    const referringDoctor = this.referringDoctorElRef.current.value;\n    const referringDoctorName = this.referringDoctorNameElRef.current.value;\n    const referringDoctorEmail = this.referringDoctorEmailElRef.current.value;\n    const referringDoctorPhone = this.referringDoctorPhoneElRef.current.value;\n    const occupationRole = this.occupationRoleElRef.current.value;\n    const occupationEmployer = this.occupationEmployerElRef.current.value;\n    const occupationEmployerContactPhone = this.occupationEmployerContactPhoneElRef.current.value;\n    const occupationEmployerContactEmail = this.occupationEmployerContactEmailElRef.current.value;\n\n    if (\n      email.trim().length === 0 ||\n      password.trim().length === 0 ||\n      name.trim().length === 0 ||\n      username.trim().length === 0\n    ) {\n      return;\n    }\n\n    const user = { email, password, name, username, description, avatar, dob, phone, address };\n    console.log(\"creating user.. \" + JSON.stringify(user));\n\n    const requestBody = {\n      query: `\n          mutation CreateUser($email: String!, $password: String!, $name: String!, $username: String!, $description: String!, $avatar: String!, $dob: String!, $phone: String!, $address: String!) {\n            createUser(userInput: {email: $email, password: $password, name: $name, username: $username, description: $description, avatar: $avatar, dob: $dob, phone: $phone, address: $address}) {\n              _id\n              email\n              password\n              name\n              username\n              description\n              avatar\n              dob\n              phone\n              address\n            }\n          }\n        `,\n        variables: {\n          email: email,\n          password: password,\n          name: name,\n          username: username,\n          description: description,\n          avatar: avatar,\n          dob: dob,\n          phone: phone,\n          address: address\n        }\n    };\n\n    const token = this.context.token;\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n        this.setState(prevState => {\n          const updatedUsers = [...prevState.users];\n          updatedUsers.push({\n            _id: resData.data.createUser._id,\n            email: resData.data.createUser.email,\n            name: resData.data.createUser.name,\n            username: resData.data.createUser.username,\n            description: resData.data.createUser.description,\n            avatar: resData.data.createUser.avatar,\n            dob: resData.data.createUser.dob,\n            phone: resData.data.createUser.phone,\n            address: resData.data.createUser.address,\n          });\n\n          return { users: updatedUsers };\n        });\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  modalCancelHandler = () => {\n    this.setState({ creating: false, selectedUser: null });\n  };\n\n  fetchUsers() {\n    console.log(\"'fetch users function' context object... \" + JSON.stringify(this.context));\n    const userId = this.context.userId;\n\n    this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n          query users($userId: ID!) {\n            users(userId: $userId) {\n              _id\n              email\n              password\n              name\n              role\n            }\n          }\n        `,\n        variables: {\n          userId: userId\n        }\n    };\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const users = resData.data.users;\n        console.log(users);\n\n        if (this.isActive) {\n          this.setState({ users: users, isLoading: false });\n        }\n      })\n      .catch(err => {\n        console.log(err);\n        if (this.isActive) {\n          this.setState({ isLoading: false });\n        }\n      });\n  }\n\n\n  showDetailHandler = userId => {\n\n    this.setState(prevState => {\n      const selectedUser = prevState.users.find(e => e._id === userId);\n      this.context.selectedUserId = selectedUser;\n      console.log(\"here:  \", selectedUser);\n      return { selectedUser: selectedUser };\n    });\n  };\n\n\n  componentWillUnmount() {\n    this.isActive = false;\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        {(this.state.creating ) && <Backdrop />}\n        {this.state.creating && (\n          <Modal\n            title=\"Create Profile\"\n            canCancel\n            canConfirm\n            onCancel={this.modalCancelHandler}\n            onConfirm={this.modalConfirmHandler}\n            confirmText=\"Confirm\">\n            <form>\n              <div className=\"form-control\">\n                <label htmlFor=\"email\">Email</label>\n                <input type=\"text\" id=\"title\" ref={this.emailElRef} />\n              </div>\n              <div className=\"form-control\">\n                <label htmlFor=\"password\">Password</label>\n                <input type=\"password\" id=\"password\" ref={this.passwordElRef} />\n              </div>\n              <div className=\"form-control\">\n                <label htmlFor=\"name\">Name</label>\n                <input type=\"text\" id=\"name\" ref={this.nameElRef} />\n              </div>\n              <div className=\"form-control\">\n                <label htmlFor=\"role\">Role</label>\n                <input type=\"text\" id=\"role\" ref={this.roleElRef} />\n              </div>\n            </form>\n          </Modal>\n        )}\n        {this.state.isLoading === false &&\n          (<UserDetail\n            authUserId={this.context.userId}\n            user={this.context.selectedUserId}\n        />)}\n        {this.context.token &&\n          (<div className=\"users-control\">\n            <p>Create a Profile!</p>\n            <button className=\"btn\" onClick={this.startCreateUserHandler}>\n              Sign-Up\n            </button>\n          </div>\n        )}\n        {this.state.isLoading ? (\n          <Spinner />\n        ) : (\n          <UserList\n            users={this.state.users}\n            authUserId={this.context.userId}\n            onViewDetail={this.showDetailHandler}\n          />\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default UsersPage;\n"]},"metadata":{},"sourceType":"module"}