{"ast":null,"code":"var _jsxFileName = \"/Users/pedrojacob/Downloads/AMR/websites/office_records/ENT_EMR/frontend/src/pages/Patients.js\";\nimport React, { Component } from 'react'; // import Form from 'react-bootstrap/Form';\n// import Button from 'react-bootstrap/Button';\n// import Modal from '../components/Modal/Modal';\n// import Backdrop from '../components/Backdrop/Backdrop';\n\nimport PatientList from '../components/Patients/PatientList/PatientList';\nimport PatientDetail from '../components/Patients/PatientDetail';\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\nimport CreatePatientForm from '../components/Forms/CreatePatientForm';\nimport UpdatePatientForm from '../components/Forms/UpdatePatientForm';\nimport './Users.css';\n\nclass PatientsPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      creating: false,\n      updating: false,\n      deleting: false,\n      patients: [],\n      isLoading: false,\n      selectedPatient: null\n    };\n    this.isActive = true;\n\n    this.startCreatePatientHandler = () => {\n      this.setState({\n        creating: true\n      });\n      console.log(\"CreatePatientForm...\");\n    };\n\n    this.startUpdatePatientHandler = () => {\n      this.setState({\n        updating: true\n      });\n      console.log(\"UpdatePatientForm...\");\n    };\n\n    this.modalConfirmHandler = event => {\n      console.log(\"CreatePatientFormData:  \", event.target.formGridName.value);\n      this.setState({\n        creating: false\n      });\n      const userId = this.context.userId;\n      let name = event.target.formGridName.value;\n      let dob = event.target.formGridDob.value;\n      let address = event.target.formGridAddress.value;\n      let contactPhone = event.target.formGridContactPhone.value;\n      let contactEmail = event.target.formGridContactEmail.value;\n      let registrationDate = event.target.formGridRegistrationDate.value;\n      let referringDoctorName = event.target.formGridReferringDoctorName.value;\n      let referringDoctorEmail = event.target.formGridReferringDoctorEmail.value;\n      let referringDoctorPhone = event.target.formGridReferringDoctorPhone.value;\n      let occupationRole = event.target.formGridOccupationRole.value;\n      let occupationEmployer = event.target.formGridOccupationEmployer.value;\n      let occupationEmployerContactPhone = event.target.formGridOccupationEmployerContactPhone.value;\n      let occupationEmployerContactEmail = event.target.formGridOccupationEmployerContactEmail.value;\n      let insuranceCompany = event.target.formGridInsuranceCompany.value;\n      let insuranceNumber = event.target.formGridInsuranceNumber.value;\n      let insuranceDescription = event.target.formGridInsuranceDescription.value;\n      let insuranceExpiry = event.target.formGridInsuranceExpiry.value;\n      let insuranceSubscriberCompany = event.target.formGridInsuranceSubscriberCompany.value;\n      let insuranceSubscriberDescription = event.target.formGridInsuranceSubscriberDescription.value;\n\n      if (name.trim().length === 0 || dob.trim().length === 0 || address.trim().length === 0 || contactPhone.trim().length === 0 || contactEmail.trim().length === 0 || registrationDate.trim().length === 0 || referringDoctorName.trim().length === 0 || referringDoctorEmail.trim().length === 0 || referringDoctorPhone.trim().length === 0 || occupationRole.trim().length === 0 || occupationEmployer.trim().length === 0 || occupationEmployerContactPhone.trim().length === 0 || occupationEmployerContactEmail.trim().length === 0 || insuranceCompany.trim().length === 0 || insuranceNumber.trim().length === 0 || insuranceDescription.trim().length === 0 || insuranceExpiry.trim().length === 0 || insuranceSubscriberCompany.trim().length === 0 || insuranceSubscriberDescription.trim().length === 0) {\n        console.log(\"blank fields detected!!!...Please try again...\");\n        return;\n      }\n\n      const patient = {\n        name,\n        dob,\n        address,\n        contactPhone,\n        contactEmail,\n        registrationDate,\n        referringDoctorName,\n        referringDoctorEmail,\n        referringDoctorPhone,\n        occupationRole,\n        occupationEmployer,\n        occupationEmployerContactPhone,\n        occupationEmployerContactEmail,\n        insuranceCompany,\n        insuranceNumber,\n        insuranceDescription,\n        insuranceExpiry,\n        insuranceSubscriberCompany,\n        insuranceSubscriberDescription\n      };\n      console.log(\"creating patient.. \" + JSON.stringify(patient));\n      const requestBody = {\n        query: \"\\n          mutation CreatePatient($userId: ID!, $name: String!, $dob: String!, $address: String!, $contactPhone: String!, $contactEmail: String!, $registrationDate: String!, $referringDoctorName: String!, $referringDoctorEmail: String!, $referringDoctorPhone: String!, $occupationRole: String!, $occupationEmployer: String!, $occupationEmployerContactPhone: String!, $occupationEmployerContactEmail: String!, $insuranceCompany: String!, $insuranceNumber: String!, $insuranceDescription: String!, $insuranceExpiry: String!, $insuranceSubscriberCompany: String!, $insuranceSubscriberDescription: String!) {\\n            createPatient(userId: $userId, patientInput: { name: $name, dob: $dob, address: $address, contactPhone: $contactPhone, contactEmail: $contactEmail, registrationDate: $registrationDate, referringDoctorName: $referringDoctorName, referringDoctorEmail: $referringDoctorEmail, referringDoctorPhone: $referringDoctorPhone, occupationRole: $occupationRole, occupationEmployer: $occupationEmployer, occupationEmployerContactPhone: $occupationEmployerContactPhone, occupationEmployerContactEmail: $occupationEmployerContactEmail, insuranceCompany: $insuranceCompany, insuranceNumber: $insuranceNumber, insuranceDescription: $insuranceDescription, insuranceExpiry: $insuranceExpiry, insuranceSubscriberCompany: $insuranceSubscriberCompany, insuranceSubscriberDescription: $insuranceSubscriberDescription, }) {\\n              _id\\n              name\\n              address\\n              contact{\\n                email\\n                phone\\n              }\\n              registrationDate\\n              referringDoctor\\n              {\\n                name\\n                email\\n                phone\\n              }\\n              occupation\\n              {\\n                role\\n                employer\\n                contact\\n                {\\n                  email\\n                  phone\\n                }\\n              }\\n              nextOfKin\\n              {\\n                name\\n                phone\\n                email\\n              }\\n              insurance\\n              {\\n                company\\n                number\\n                description\\n                expiry\\n                subscriber\\n                {\\n                    company\\n                    description\\n                }\\n              }\\n              complaints\\n              {\\n                date\\n                title\\n                description\\n              }\\n            }\\n          }\\n        \",\n        variables: {\n          userId: userId,\n          name: name,\n          dob: dob,\n          address: address,\n          contactPhone: contactPhone,\n          contactEmail: contactEmail,\n          registrationDate: registrationDate,\n          referringDoctorName: referringDoctorName,\n          referringDoctorEmail: referringDoctorEmail,\n          referringDoctorPhone: referringDoctorPhone,\n          occupationRole: occupationRole,\n          occupationEmployer: occupationEmployer,\n          occupationEmployerContactPhone: occupationEmployerContactPhone,\n          occupationEmployerContactEmail: occupationEmployerContactEmail,\n          insuranceCompany: insuranceCompany,\n          insuranceNumber: insuranceNumber,\n          insuranceDescription: insuranceDescription,\n          insuranceExpiry: insuranceExpiry,\n          insuranceSubscriberCompany: insuranceSubscriberCompany,\n          insuranceSubscriberDescription: insuranceSubscriberDescription\n        }\n      };\n      const token = this.context.token;\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n        this.setState(prevState => {\n          const updatedPatients = [...prevState.patients];\n          updatedPatients.push({\n            _id: resData.data.createPatient._id,\n            name: resData.data.createPatient.name,\n            dob: resData.data.createPatient.dob,\n            address: resData.data.createPatient.address,\n            contact: {\n              phone: resData.data.createPatient.contactPhone,\n              email: resData.data.createPatient.contactEmail\n            },\n            registrationDate: resData.data.createPatient.registrationDate,\n            referringDoctor: {\n              name: resData.data.createPatient.referringDoctorName,\n              email: resData.data.createPatient.referringDoctorEmail,\n              phone: resData.data.createPatient.referringDoctorPhone\n            },\n            occupation: {\n              role: resData.data.createPatient.occupationRole,\n              employer: resData.data.createPatient.occupationEmployer,\n              contact: {\n                phone: resData.data.createPatient.occupationEmployerContactPhone,\n                email: resData.data.createPatient.occupationEmployerContactEmail\n              }\n            },\n            insurance: {\n              company: resData.data.createPatient.insuranceCompany,\n              number: resData.data.createPatient.insuranceNumber,\n              description: resData.data.createPatient.insuranceDescription,\n              expiry: resData.data.createPatient.insuranceExpiry,\n              subscriber: {\n                company: resData.data.createPatient.insuranceSubscriberCompany,\n                description: resData.data.createPatient.insuranceSubscriberDescription\n              }\n            }\n          });\n          return {\n            patients: updatedPatients\n          };\n        });\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.modalCancelHandler = () => {\n      this.setState({\n        creating: false,\n        updating: false,\n        selectedPatient: null\n      });\n    };\n\n    this.modalConfirmUpdateHandler = event => {\n      if (this.context.user.role !== 'admin') {\n        console.log(\"Not the Admin! No edit permission!!\");\n      }\n\n      const userId = this.context.userId;\n      const patientId = this.context.selectedPatient._id; // console.log(\"UpdateUserFormData:  \", event);\n\n      console.log(\"UpdatePatientFormData:  \", event.target.formGridName.value);\n      this.setState({\n        updating: false\n      });\n      let name = event.target.formGridName.value;\n      let dob = event.target.formGridDob.value;\n      let address = event.target.formGridAddress.value;\n      let contactPhone = event.target.formGridContactPhone.value;\n      let contactEmail = event.target.formGridContactEmail.value;\n      let registrationDate = event.target.formGridRegistrationDate.value;\n      let referringDoctorName = event.target.formGridReferringDoctorName.value;\n      let referringDoctorEmail = event.target.formGridReferringDoctorEmail.value;\n      let referringDoctorPhone = event.target.formGridReferringDoctorPhone.value;\n      let occupationRole = event.target.formGridOccupationRole.value;\n      let occupationEmployer = event.target.formGridOccupationEmployer.value;\n      let occupationEmployerContactPhone = event.target.formGridOccupationEmployerContactPhone.value;\n      let occupationEmployerContactEmail = event.target.formGridOccupationEmployerContactEmail.value;\n      let insuranceCompany = event.target.formGridInsuranceCompany.value;\n      let insuranceNumber = event.target.formGridInsuranceNumber.value;\n      let insuranceDescription = event.target.formGridInsuranceDescription.value;\n      let insuranceExpiry = event.target.formGridInsuranceExpiry.value;\n      let insuranceSubscriberCompany = event.target.formGridInsuranceSubscriberCompany.value;\n      let insuranceSubscriberDescription = event.target.formGridInsuranceSubscriberDescription.value;\n\n      if (name.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        name = this.context.selectedUser.name; // return;\n      }\n\n      if (dob.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        dob = this.context.selectedUser.dob;\n      }\n\n      if (address.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        address = this.context.selectedUser.address;\n      }\n\n      if (contactPhone.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        contactPhone = this.context.selectedUser.contactPhone;\n      }\n\n      if (contactEmail.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        contactEmail = this.context.selectedUser.contactEmail;\n      }\n\n      if (registrationDate.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        registrationDate = this.context.selectedUser.registrationDate;\n      }\n\n      if (referringDoctorName.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        referringDoctorName = this.context.selectedUser.referringDoctorName;\n      }\n\n      if (referringDoctorEmail.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        referringDoctorEmail = this.context.selectedUser.referringDoctorEmail;\n      }\n\n      if (referringDoctorPhone.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        referringDoctorPhone = this.context.selectedUser.referringDoctorPhone;\n      }\n\n      if (occupationRole.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        occupationRole = this.context.selectedUser.occupationRole;\n      }\n\n      if (occupationEmployer.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        occupationEmployer = this.context.selectedUser.occupationEmployer;\n      }\n\n      if (occupationEmployerContactEmail.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        occupationEmployerContactEmail = this.context.selectedUser.occupationEmployerContactEmail;\n      }\n\n      if (occupationEmployerContactPhone.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        occupationEmployerContactPhone = this.context.selectedUser.occupationEmployerContactPhone;\n      }\n\n      if (insuranceCompany.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        insuranceCompany = this.context.selectedUser.insuranceCompany;\n      }\n\n      if (insuranceExpiry.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        insuranceExpiry = this.context.selectedUser.insuranceExpiry;\n      }\n\n      if (insuranceNumber.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        insuranceNumber = this.context.selectedUser.insuranceNumber;\n      }\n\n      if (insuranceSubscriberCompany.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        insuranceSubscriberCompany = this.context.selectedUser.insuranceSubscriberCompany;\n      }\n\n      if (insuranceSubscriberDescription.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        insuranceSubscriberDescription = this.context.selectedUser.insuranceSubscriberDescription;\n      }\n\n      const patient = {\n        name,\n        dob,\n        address,\n        contactPhone,\n        contactEmail,\n        registrationDate,\n        referringDoctorName,\n        referringDoctorEmail,\n        referringDoctorPhone,\n        occupationRole,\n        occupationEmployer,\n        occupationEmployerContactPhone,\n        occupationEmployerContactEmail,\n        insuranceCompany,\n        insuranceNumber,\n        insuranceDescription,\n        insuranceExpiry,\n        insuranceSubscriberCompany,\n        insuranceSubscriberDescription\n      };\n      console.log(\"updating patient.. \" + JSON.stringify(patient));\n      const requestBody = {\n        query: \"\\n          mutation UpdatePatient($userId: ID!, $patientId: ID!, $name: String!, $dob: String!, $address: String!, $contactPhone: String!, $contactEmail: String!, $registrationDate: String!, $referringDoctorName: String!, $referringDoctorEmail: String!, $referringDoctorPhone: String!, $occupationRole: String!, $occupationEmployer: String!, $occupationEmployerContactPhone: String!, $occupationEmployerContactEmail: String!, $insuranceCompany: String!, $insuranceNumber: String!, $insuranceDescription: String!, $insuranceExpiry: String!, $insuranceSubscriberCompany: String!, $insuranceSubscriberDescription: String!) {\\n            updatePatient(userId: $userId, patientId: $patientId, patientInput: { name: $name, dob: $dob, address: $address, contactPhone: $contactPhone, contactEmail: $contactEmail, registrationDate: $registrationDate, referringDoctorName: $referringDoctorName, referringDoctorEmail: $referringDoctorEmail, referringDoctorPhone: $referringDoctorPhone, occupationRole: $occupationRole, occupationEmployer: $occupationEmployer, occupationEmployerContactPhone: $occupationEmployerContactPhone, occupationEmployerContactEmail: $occupationEmployerContactEmail, insuranceCompany: $insuranceCompany, insuranceNumber: $insuranceNumber, insuranceDescription: $insuranceDescription, insuranceExpiry: $insuranceExpiry, insuranceSubscriberCompany: $insuranceSubscriberCompany, insuranceSubscriberDescription: $insuranceSubscriberDescription }){\\n              _id\\n              name\\n              address\\n              contact{\\n                email\\n                phone\\n              }\\n              registrationDate\\n              referringDoctor\\n              {\\n                name\\n                email\\n                phone\\n              }\\n              occupation\\n              {\\n                role\\n                employer\\n                contact\\n                {\\n                  email\\n                  phone\\n                }\\n              }\\n              nextOfKin\\n              {\\n                name\\n                phone\\n                email\\n              }\\n              insurance\\n              {\\n                company\\n                number\\n                description\\n                expiry\\n                subscriber\\n                {\\n                    company\\n                    description\\n                }\\n              }\\n              complaints\\n              {\\n                date\\n                title\\n                description\\n              }\\n            }\\n          }\\n        \",\n        variables: {\n          userId: userId,\n          patientId: patientId,\n          name: name,\n          dob: dob,\n          address: address,\n          contactPhone: contactPhone,\n          contactEmail: contactEmail,\n          registrationDate: registrationDate,\n          referringDoctorName: referringDoctorName,\n          referringDoctorEmail: referringDoctorEmail,\n          referringDoctorPhone: referringDoctorPhone,\n          occupationRole: occupationRole,\n          occupationEmployer: occupationEmployer,\n          occupationEmployerContactPhone: occupationEmployerContactPhone,\n          occupationEmployerContactEmail: occupationEmployerContactEmail,\n          insuranceCompany: insuranceCompany,\n          insuranceNumber: insuranceNumber,\n          insuranceDescription: insuranceDescription,\n          insuranceExpiry: insuranceExpiry,\n          insuranceSubscriberCompany: insuranceSubscriberCompany,\n          insuranceSubscriberDescription: insuranceSubscriberDescription\n        }\n      };\n      const token = this.context.token;\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n        const updatedPatientId = resData.data.updatePatient._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient), \"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.state.patients.push({\n          _id: resData.data.updatePatient._id,\n          name: resData.data.updatePatient.name,\n          dob: resData.data.updatePatient.dob,\n          address: resData.data.updatePatient.address,\n          contact: {\n            phone: resData.data.updatePatient.contactPhone,\n            email: resData.data.updatePatient.contactEmail\n          },\n          registrationDate: resData.data.updatePatient.registrationDate,\n          referringDoctor: {\n            name: resData.data.updatePatient.referringDoctorName,\n            email: resData.data.updatePatient.referringDoctorEmail,\n            phone: resData.data.updatePatient.referringDoctorPhone\n          },\n          occupation: {\n            role: resData.data.updatePatient.occupationRole,\n            employer: resData.data.updatePatient.occupationEmployer,\n            contact: {\n              phone: resData.data.updatePatient.occupationEmployerContactPhone,\n              email: resData.data.updatePatient.occupationEmployerContactEmail\n            }\n          },\n          insurance: {\n            company: resData.data.updatePatient.insuranceCompany,\n            number: resData.data.updatePatient.insuranceNumber,\n            description: resData.data.updatePatient.insuranceDescription,\n            expiry: resData.data.updatePatient.insuranceExpiry,\n            subscriber: {\n              company: resData.data.updatePatient.insuranceSubscriberCompany,\n              description: resData.data.updatePatient.insuranceSubscriberDescription\n            }\n          }\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.modalCancelHandler = () => {\n      this.setState({\n        creating: false,\n        updating: false,\n        selectedPatient: null\n      });\n    };\n\n    this.modalDeleteHandler = () => {\n      console.log(\"deleting patient...selectedPatient:  \", this.context.selectedPatient);\n      const selectedPatientId = this.context.selectedPatient._id;\n\n      if (this.context.user.role !== 'admin') {\n        console.log(\"Not the Admin! No edit permission!!\");\n      }\n\n      this.setState({\n        deleting: true\n      });\n      const requestBody = {\n        query: \"\\n          mutation DeletePatient($userId: ID!, $patientId: ID!) {\\n            deletePatient(userId: $userId, patientId: $patientId) {\\n              _id\\n              name\\n              address\\n              contact{\\n                email\\n                phone\\n              }\\n              registrationDate\\n              referringDoctor\\n              {\\n                name\\n                email\\n                phone\\n              }\\n              occupation\\n              {\\n                role\\n                employer\\n                contact\\n                {\\n                  email\\n                  phone\\n                }\\n              }\\n            }\\n          }\\n        \",\n        variables: {\n          userId: this.context.userId,\n          patientId: selectedPatientId\n        }\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + this.context.token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatient;\n        console.log(deletedPatient);\n        let deletedPatientId = deletedPatient._id;\n        deletedPatient = this.state.patients.find(e => e._id === deletedPatientId);\n        const deletedPatientPos = this.state.patients.indexOf(deletedPatient);\n        const slicedArray = this.state.patients.splice(deletedPatientPos, 1);\n        console.log(\"deletedPatient:  \", JSON.stringify(deletedPatient), \"  deletedUserPos:  \", deletedPatientPos, \"  slicedArray:  \", slicedArray);\n        this.setState({\n          deleting: false\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        console.log(err);\n\n        if (this.isActive) {\n          this.setState({\n            deleting: false\n          });\n        }\n      });\n    };\n\n    this.showDetailHandler = patientId => {\n      this.setState(prevState => {\n        const selectedPatient = prevState.patients.find(e => e._id === patientId);\n        this.context.selectedPatient = selectedPatient;\n        this.context.selectedPatientId = selectedPatient._id;\n        console.log(\"selectedPatient:  \", selectedPatient);\n        return {\n          selectedPatient: selectedPatient\n        };\n      });\n    };\n\n    this.nameElRef = React.createRef();\n    this.dobElRef = React.createRef();\n    this.addressElRef = React.createRef();\n    this.contactPhoneElRef = React.createRef();\n    this.contactEmailElRef = React.createRef();\n    this.registrationDateElRef = React.createRef();\n    this.referringDoctorNameElRef = React.createRef();\n    this.referringDoctorEmailElRef = React.createRef();\n    this.referringDoctorPhoneElRef = React.createRef();\n    this.occupationRoleElRef = React.createRef();\n    this.occupationEmployerElRef = React.createRef();\n    this.occupationEmployerContactPhoneElRef = React.createRef();\n    this.occupationEmployerContactEmailElRef = React.createRef();\n    this.nextOfKinNameELRef = React.createRef();\n    this.nextOfKinPhoneELRef = React.createRef();\n    this.nextOfKinEmailELRef = React.createRef();\n    this.insuranceCompanyELRef = React.createRef();\n    this.insuranceNumberELRef = React.createRef();\n    this.insuranceDescriptionELRef = React.createRef();\n    this.insuranceExpiryELRef = React.createRef();\n    this.insuranceSubscriberCompanyELRef = React.createRef();\n    this.insuranceSubscriberDescriptionELRef = React.createRef();\n    this.complaintDateELRef = React.createRef();\n    this.complaintTitleELRef = React.createRef();\n    this.complaintDescriptionELRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.fetchPatients();\n  }\n\n  fetchPatients() {\n    console.log(\"'fetch patients function' context object... \" + JSON.stringify(this.context));\n    const userId = this.context.userId;\n    this.setState({\n      isLoading: true\n    });\n    const requestBody = {\n      query: \"\\n          query patients($userId: ID!) {\\n            patients(userId: $userId) {\\n              _id\\n              name\\n              address\\n              contact{\\n                email\\n                phone\\n              }\\n              registrationDate\\n              referringDoctor\\n              {\\n                name\\n                email\\n                phone\\n              }\\n              occupation\\n              {\\n                role\\n                employer\\n                contact\\n                {\\n                  email\\n                  phone\\n                }\\n              }\\n            }\\n          }\\n        \",\n      variables: {\n        userId: userId\n      }\n    };\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    }).then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n\n      return res.json();\n    }).then(resData => {\n      const patients = resData.data.patients;\n      console.log(patients);\n\n      if (this.isActive) {\n        this.setState({\n          patients: patients,\n          isLoading: false\n        });\n      }\n    }).catch(err => {\n      console.log(err);\n\n      if (this.isActive) {\n        this.setState({\n          isLoading: false\n        });\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    this.isActive = false;\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 727\n      },\n      __self: this\n    }, this.state.creating && React.createElement(CreatePatientForm, {\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmHandler,\n      onSubmit: this.modalConfirmHandler,\n      confirmText: \"Confirm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 730\n      },\n      __self: this\n    }), this.state.updating && React.createElement(UpdatePatientForm, {\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmUpdateHandler,\n      confirmText: \"Confirm\",\n      patient: this.context.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 741\n      },\n      __self: this\n    }), this.state.isLoading === false && React.createElement(PatientDetail, {\n      canEdit: true,\n      canDelete: true,\n      authUserId: this.context.userId,\n      patient: this.state.selectedPatient,\n      onEdit: this.startUpdatePatientHandler,\n      onDelete: this.modalDeleteHandler,\n      className: \"PatientDetailBox\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 751\n      },\n      __self: this\n    }), this.context.token && React.createElement(\"div\", {\n      className: \"users-control\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 762\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 763\n      },\n      __self: this\n    }, \"Add New Patient\"), React.createElement(\"button\", {\n      className: \"btn\",\n      onClick: this.startCreatePatientHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 764\n      },\n      __self: this\n    }, \"+\")), this.state.isLoading ? React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 770\n      },\n      __self: this\n    }) : React.createElement(PatientList, {\n      patients: this.state.patients,\n      authUserId: this.context.userId,\n      onViewDetail: this.showDetailHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 772\n      },\n      __self: this\n    }));\n  }\n\n}\n\nPatientsPage.contextType = AuthContext;\nexport default PatientsPage;","map":{"version":3,"sources":["/Users/pedrojacob/Downloads/AMR/websites/office_records/ENT_EMR/frontend/src/pages/Patients.js"],"names":["React","Component","PatientList","PatientDetail","Spinner","AuthContext","CreatePatientForm","UpdatePatientForm","PatientsPage","constructor","props","state","creating","updating","deleting","patients","isLoading","selectedPatient","isActive","startCreatePatientHandler","setState","console","log","startUpdatePatientHandler","modalConfirmHandler","event","target","formGridName","value","userId","context","name","dob","formGridDob","address","formGridAddress","contactPhone","formGridContactPhone","contactEmail","formGridContactEmail","registrationDate","formGridRegistrationDate","referringDoctorName","formGridReferringDoctorName","referringDoctorEmail","formGridReferringDoctorEmail","referringDoctorPhone","formGridReferringDoctorPhone","occupationRole","formGridOccupationRole","occupationEmployer","formGridOccupationEmployer","occupationEmployerContactPhone","formGridOccupationEmployerContactPhone","occupationEmployerContactEmail","formGridOccupationEmployerContactEmail","insuranceCompany","formGridInsuranceCompany","insuranceNumber","formGridInsuranceNumber","insuranceDescription","formGridInsuranceDescription","insuranceExpiry","formGridInsuranceExpiry","insuranceSubscriberCompany","formGridInsuranceSubscriberCompany","insuranceSubscriberDescription","formGridInsuranceSubscriberDescription","trim","length","patient","JSON","stringify","requestBody","query","variables","token","fetch","method","body","headers","Authorization","then","res","status","Error","json","resData","prevState","updatedPatients","push","_id","data","createPatient","contact","phone","email","referringDoctor","occupation","role","employer","insurance","company","number","description","expiry","subscriber","catch","err","modalCancelHandler","modalConfirmUpdateHandler","user","patientId","selectedUser","updatedPatientId","updatePatient","updatedPatient","find","e","updatedPatientPos","indexOf","slicedArray","splice","fetchPatients","modalDeleteHandler","selectedPatientId","deletedPatient","deletePatient","deletedPatientId","deletedPatientPos","showDetailHandler","nameElRef","createRef","dobElRef","addressElRef","contactPhoneElRef","contactEmailElRef","registrationDateElRef","referringDoctorNameElRef","referringDoctorEmailElRef","referringDoctorPhoneElRef","occupationRoleElRef","occupationEmployerElRef","occupationEmployerContactPhoneElRef","occupationEmployerContactEmailElRef","nextOfKinNameELRef","nextOfKinPhoneELRef","nextOfKinEmailELRef","insuranceCompanyELRef","insuranceNumberELRef","insuranceDescriptionELRef","insuranceExpiryELRef","insuranceSubscriberCompanyELRef","insuranceSubscriberDescriptionELRef","complaintDateELRef","complaintTitleELRef","complaintDescriptionELRef","componentDidMount","componentWillUnmount","render","contextType"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n// import Form from 'react-bootstrap/Form';\n// import Button from 'react-bootstrap/Button';\n\n// import Modal from '../components/Modal/Modal';\n// import Backdrop from '../components/Backdrop/Backdrop';\nimport PatientList from '../components/Patients/PatientList/PatientList';\nimport PatientDetail from '../components/Patients/PatientDetail';\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\n\nimport CreatePatientForm from '../components/Forms/CreatePatientForm';\nimport UpdatePatientForm from '../components/Forms/UpdatePatientForm';\nimport './Users.css';\n\nclass PatientsPage extends Component {\n  state = {\n    creating: false,\n    updating: false,\n    deleting: false,\n    patients: [],\n    isLoading: false,\n    selectedPatient: null\n  };\n  isActive = true;\n\n  static contextType = AuthContext;\n\n  constructor(props) {\n    super(props);\n    this.nameElRef = React.createRef();\n    this.dobElRef = React.createRef();\n    this.addressElRef = React.createRef();\n    this.contactPhoneElRef = React.createRef();\n    this.contactEmailElRef = React.createRef();\n    this.registrationDateElRef = React.createRef();\n    this.referringDoctorNameElRef = React.createRef();\n    this.referringDoctorEmailElRef = React.createRef();\n    this.referringDoctorPhoneElRef = React.createRef();\n    this.occupationRoleElRef = React.createRef();\n    this.occupationEmployerElRef = React.createRef();\n    this.occupationEmployerContactPhoneElRef = React.createRef();\n    this.occupationEmployerContactEmailElRef = React.createRef();\n    this.nextOfKinNameELRef = React.createRef();\n    this.nextOfKinPhoneELRef = React.createRef();\n    this.nextOfKinEmailELRef = React.createRef();\n    this.insuranceCompanyELRef = React.createRef();\n    this.insuranceNumberELRef = React.createRef();\n    this.insuranceDescriptionELRef = React.createRef();\n    this.insuranceExpiryELRef = React.createRef();\n    this.insuranceSubscriberCompanyELRef = React.createRef();\n    this.insuranceSubscriberDescriptionELRef = React.createRef();\n    this.complaintDateELRef = React.createRef();\n    this.complaintTitleELRef = React.createRef();\n    this.complaintDescriptionELRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.fetchPatients();\n  }\n\n\n  startCreatePatientHandler = () => {\n    this.setState({ creating: true });\n    console.log(\"CreatePatientForm...\");\n  };\n  startUpdatePatientHandler = () => {\n    this.setState({ updating: true });\n    console.log(\"UpdatePatientForm...\");\n  };\n\n  modalConfirmHandler = (event) => {\n\n    console.log(\"CreatePatientFormData:  \", event.target.formGridName.value);\n\n    this.setState({ creating: false });\n    const userId = this.context.userId;\n\n    let name = event.target.formGridName.value;\n    let dob = event.target.formGridDob.value;\n    let address = event.target.formGridAddress.value;\n    let contactPhone = event.target.formGridContactPhone.value;\n    let contactEmail = event.target.formGridContactEmail.value;\n    let registrationDate = event.target.formGridRegistrationDate.value;\n    let referringDoctorName = event.target.formGridReferringDoctorName.value;\n    let referringDoctorEmail = event.target.formGridReferringDoctorEmail.value;\n    let referringDoctorPhone = event.target.formGridReferringDoctorPhone.value;\n    let occupationRole = event.target.formGridOccupationRole.value;\n    let occupationEmployer = event.target.formGridOccupationEmployer.value;\n    let occupationEmployerContactPhone = event.target.formGridOccupationEmployerContactPhone.value;\n    let occupationEmployerContactEmail = event.target.formGridOccupationEmployerContactEmail.value;\n    let insuranceCompany = event.target.formGridInsuranceCompany.value;\n    let insuranceNumber = event.target.formGridInsuranceNumber.value;\n    let insuranceDescription = event.target.formGridInsuranceDescription.value;\n    let insuranceExpiry = event.target.formGridInsuranceExpiry.value;\n    let insuranceSubscriberCompany = event.target.formGridInsuranceSubscriberCompany.value;\n    let insuranceSubscriberDescription = event.target.formGridInsuranceSubscriberDescription.value;\n\n    if (\n      name.trim().length === 0 ||\n      dob.trim().length === 0 ||\n      address.trim().length === 0 ||\n      contactPhone.trim().length === 0 ||\n      contactEmail.trim().length === 0 ||\n      registrationDate.trim().length === 0 ||\n      referringDoctorName.trim().length === 0 ||\n      referringDoctorEmail.trim().length === 0 ||\n      referringDoctorPhone.trim().length === 0 ||\n      occupationRole.trim().length === 0 ||\n      occupationEmployer.trim().length === 0 ||\n      occupationEmployerContactPhone.trim().length === 0 ||\n      occupationEmployerContactEmail.trim().length === 0 ||\n      insuranceCompany.trim().length === 0 ||\n      insuranceNumber.trim().length === 0 ||\n      insuranceDescription.trim().length === 0 ||\n      insuranceExpiry.trim().length === 0 ||\n      insuranceSubscriberCompany.trim().length === 0 ||\n      insuranceSubscriberDescription.trim().length === 0\n\n    ) {\n      console.log(\"blank fields detected!!!...Please try again...\");\n      return;\n    }\n\n    const patient = { name, dob, address, contactPhone, contactEmail, registrationDate, referringDoctorName, referringDoctorEmail, referringDoctorPhone, occupationRole, occupationEmployer, occupationEmployerContactPhone, occupationEmployerContactEmail, insuranceCompany, insuranceNumber, insuranceDescription, insuranceExpiry, insuranceSubscriberCompany, insuranceSubscriberDescription };\n    console.log(\"creating patient.. \" + JSON.stringify(patient));\n\n    const requestBody = {\n      query: `\n          mutation CreatePatient($userId: ID!, $name: String!, $dob: String!, $address: String!, $contactPhone: String!, $contactEmail: String!, $registrationDate: String!, $referringDoctorName: String!, $referringDoctorEmail: String!, $referringDoctorPhone: String!, $occupationRole: String!, $occupationEmployer: String!, $occupationEmployerContactPhone: String!, $occupationEmployerContactEmail: String!, $insuranceCompany: String!, $insuranceNumber: String!, $insuranceDescription: String!, $insuranceExpiry: String!, $insuranceSubscriberCompany: String!, $insuranceSubscriberDescription: String!) {\n            createPatient(userId: $userId, patientInput: { name: $name, dob: $dob, address: $address, contactPhone: $contactPhone, contactEmail: $contactEmail, registrationDate: $registrationDate, referringDoctorName: $referringDoctorName, referringDoctorEmail: $referringDoctorEmail, referringDoctorPhone: $referringDoctorPhone, occupationRole: $occupationRole, occupationEmployer: $occupationEmployer, occupationEmployerContactPhone: $occupationEmployerContactPhone, occupationEmployerContactEmail: $occupationEmployerContactEmail, insuranceCompany: $insuranceCompany, insuranceNumber: $insuranceNumber, insuranceDescription: $insuranceDescription, insuranceExpiry: $insuranceExpiry, insuranceSubscriberCompany: $insuranceSubscriberCompany, insuranceSubscriberDescription: $insuranceSubscriberDescription, }) {\n              _id\n              name\n              address\n              contact{\n                email\n                phone\n              }\n              registrationDate\n              referringDoctor\n              {\n                name\n                email\n                phone\n              }\n              occupation\n              {\n                role\n                employer\n                contact\n                {\n                  email\n                  phone\n                }\n              }\n              nextOfKin\n              {\n                name\n                phone\n                email\n              }\n              insurance\n              {\n                company\n                number\n                description\n                expiry\n                subscriber\n                {\n                    company\n                    description\n                }\n              }\n              complaints\n              {\n                date\n                title\n                description\n              }\n            }\n          }\n        `,\n        variables: {\n          userId: userId,\n          name: name,\n          dob: dob,\n          address: address,\n          contactPhone: contactPhone,\n          contactEmail: contactEmail,\n          registrationDate: registrationDate,\n          referringDoctorName: referringDoctorName,\n          referringDoctorEmail: referringDoctorEmail,\n          referringDoctorPhone: referringDoctorPhone,\n          occupationRole: occupationRole,\n          occupationEmployer: occupationEmployer,\n          occupationEmployerContactPhone: occupationEmployerContactPhone,\n          occupationEmployerContactEmail: occupationEmployerContactEmail,\n          insuranceCompany: insuranceCompany,\n          insuranceNumber: insuranceNumber,\n          insuranceDescription: insuranceDescription,\n          insuranceExpiry: insuranceExpiry,\n          insuranceSubscriberCompany: insuranceSubscriberCompany,\n          insuranceSubscriberDescription: insuranceSubscriberDescription,\n        }\n    };\n\n    const token = this.context.token;\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n\n        this.setState(prevState => {\n          const updatedPatients = [...prevState.patients];\n          updatedPatients.push(\n            {\n            _id: resData.data.createPatient._id,\n            name: resData.data.createPatient.name,\n            dob: resData.data.createPatient.dob,\n            address: resData.data.createPatient.address,\n            contact:{\n              phone: resData.data.createPatient.contactPhone,\n              email: resData.data.createPatient.contactEmail\n            },\n            registrationDate: resData.data.createPatient.registrationDate,\n            referringDoctor: {\n              name: resData.data.createPatient.referringDoctorName,\n              email: resData.data.createPatient.referringDoctorEmail,\n              phone: resData.data.createPatient.referringDoctorPhone,\n            },\n            occupation: {\n              role: resData.data.createPatient.occupationRole,\n              employer: resData.data.createPatient.occupationEmployer,\n              contact: {\n                phone: resData.data.createPatient.occupationEmployerContactPhone,\n                email: resData.data.createPatient.occupationEmployerContactEmail\n              }\n            },\n            insurance: {\n              company: resData.data.createPatient.insuranceCompany,\n              number: resData.data.createPatient.insuranceNumber,\n              description: resData.data.createPatient.insuranceDescription,\n              expiry:  resData.data.createPatient.insuranceExpiry,\n              subscriber: {\n                company: resData.data.createPatient.insuranceSubscriberCompany,\n                description: resData.data.createPatient.insuranceSubscriberDescription\n              }\n            },\n          }\n        );\n\n          return { patients: updatedPatients };\n        });\n\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  modalCancelHandler = () => {\n    this.setState({ creating: false, updating: false, selectedPatient: null });\n  };\n\n\n  modalConfirmUpdateHandler = (event) => {\n\n    if(this.context.user.role !== 'admin') {\n      console.log(\"Not the Admin! No edit permission!!\");\n\n    }\n\n    const userId = this.context.userId;\n    const patientId = this.context.selectedPatient._id;\n\n    // console.log(\"UpdateUserFormData:  \", event);\n    console.log(\"UpdatePatientFormData:  \", event.target.formGridName.value);\n\n\n    this.setState({ updating: false });\n    let name = event.target.formGridName.value;\n    let dob = event.target.formGridDob.value;\n    let address = event.target.formGridAddress.value;\n    let contactPhone = event.target.formGridContactPhone.value;\n    let contactEmail = event.target.formGridContactEmail.value;\n    let registrationDate = event.target.formGridRegistrationDate.value;\n    let referringDoctorName = event.target.formGridReferringDoctorName.value;\n    let referringDoctorEmail = event.target.formGridReferringDoctorEmail.value;\n    let referringDoctorPhone = event.target.formGridReferringDoctorPhone.value;\n    let occupationRole = event.target.formGridOccupationRole.value;\n    let occupationEmployer = event.target.formGridOccupationEmployer.value;\n    let occupationEmployerContactPhone = event.target.formGridOccupationEmployerContactPhone.value;\n    let occupationEmployerContactEmail = event.target.formGridOccupationEmployerContactEmail.value;\n    let insuranceCompany = event.target.formGridInsuranceCompany.value;\n    let insuranceNumber = event.target.formGridInsuranceNumber.value;\n    let insuranceDescription = event.target.formGridInsuranceDescription.value;\n    let insuranceExpiry = event.target.formGridInsuranceExpiry.value;\n    let insuranceSubscriberCompany = event.target.formGridInsuranceSubscriberCompany.value;\n    let insuranceSubscriberDescription = event.target.formGridInsuranceSubscriberDescription.value;\n\n\n    if (name.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      name  = this.context.selectedUser.name;\n      // return;\n    }\n    if (dob.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      dob  = this.context.selectedUser.dob;\n    }\n    if (address.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      address  = this.context.selectedUser.address;\n    }\n    if (contactPhone.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      contactPhone  = this.context.selectedUser.contactPhone;\n    }\n    if (contactEmail.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      contactEmail  = this.context.selectedUser.contactEmail;\n    }\n    if (registrationDate.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      registrationDate  = this.context.selectedUser.registrationDate;\n    }\n    if (referringDoctorName.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      referringDoctorName  = this.context.selectedUser.referringDoctorName;\n    }\n    if (referringDoctorEmail.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      referringDoctorEmail  = this.context.selectedUser.referringDoctorEmail;\n    }\n    if (referringDoctorPhone.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      referringDoctorPhone  = this.context.selectedUser.referringDoctorPhone;\n    }\n    if (occupationRole.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      occupationRole  = this.context.selectedUser.occupationRole;\n    }\n    if (occupationEmployer.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      occupationEmployer  = this.context.selectedUser.occupationEmployer;\n    }\n    if (occupationEmployerContactEmail.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      occupationEmployerContactEmail  = this.context.selectedUser.occupationEmployerContactEmail;\n    }\n    if (occupationEmployerContactPhone.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      occupationEmployerContactPhone  = this.context.selectedUser.occupationEmployerContactPhone;\n    }\n    if (insuranceCompany.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      insuranceCompany  = this.context.selectedUser.insuranceCompany;\n    }\n    if (insuranceExpiry.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      insuranceExpiry  = this.context.selectedUser.insuranceExpiry;\n    }\n    if (insuranceNumber.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      insuranceNumber  = this.context.selectedUser.insuranceNumber;\n    }\n    if (insuranceSubscriberCompany.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      insuranceSubscriberCompany  = this.context.selectedUser.insuranceSubscriberCompany;\n    }\n    if (insuranceSubscriberDescription.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      insuranceSubscriberDescription  = this.context.selectedUser.insuranceSubscriberDescription;\n    }\n\n\n\n    const patient = { name, dob, address, contactPhone, contactEmail, registrationDate, referringDoctorName, referringDoctorEmail, referringDoctorPhone, occupationRole, occupationEmployer, occupationEmployerContactPhone, occupationEmployerContactEmail, insuranceCompany, insuranceNumber, insuranceDescription, insuranceExpiry, insuranceSubscriberCompany, insuranceSubscriberDescription };\n    console.log(\"updating patient.. \" + JSON.stringify(patient));\n\n    const requestBody = {\n      query: `\n          mutation UpdatePatient($userId: ID!, $patientId: ID!, $name: String!, $dob: String!, $address: String!, $contactPhone: String!, $contactEmail: String!, $registrationDate: String!, $referringDoctorName: String!, $referringDoctorEmail: String!, $referringDoctorPhone: String!, $occupationRole: String!, $occupationEmployer: String!, $occupationEmployerContactPhone: String!, $occupationEmployerContactEmail: String!, $insuranceCompany: String!, $insuranceNumber: String!, $insuranceDescription: String!, $insuranceExpiry: String!, $insuranceSubscriberCompany: String!, $insuranceSubscriberDescription: String!) {\n            updatePatient(userId: $userId, patientId: $patientId, patientInput: { name: $name, dob: $dob, address: $address, contactPhone: $contactPhone, contactEmail: $contactEmail, registrationDate: $registrationDate, referringDoctorName: $referringDoctorName, referringDoctorEmail: $referringDoctorEmail, referringDoctorPhone: $referringDoctorPhone, occupationRole: $occupationRole, occupationEmployer: $occupationEmployer, occupationEmployerContactPhone: $occupationEmployerContactPhone, occupationEmployerContactEmail: $occupationEmployerContactEmail, insuranceCompany: $insuranceCompany, insuranceNumber: $insuranceNumber, insuranceDescription: $insuranceDescription, insuranceExpiry: $insuranceExpiry, insuranceSubscriberCompany: $insuranceSubscriberCompany, insuranceSubscriberDescription: $insuranceSubscriberDescription }){\n              _id\n              name\n              address\n              contact{\n                email\n                phone\n              }\n              registrationDate\n              referringDoctor\n              {\n                name\n                email\n                phone\n              }\n              occupation\n              {\n                role\n                employer\n                contact\n                {\n                  email\n                  phone\n                }\n              }\n              nextOfKin\n              {\n                name\n                phone\n                email\n              }\n              insurance\n              {\n                company\n                number\n                description\n                expiry\n                subscriber\n                {\n                    company\n                    description\n                }\n              }\n              complaints\n              {\n                date\n                title\n                description\n              }\n            }\n          }\n        `,\n        variables: {\n          userId: userId,\n          patientId: patientId,\n          name: name,\n          dob: dob,\n          address: address,\n          contactPhone: contactPhone,\n          contactEmail: contactEmail,\n          registrationDate: registrationDate,\n          referringDoctorName: referringDoctorName,\n          referringDoctorEmail: referringDoctorEmail,\n          referringDoctorPhone: referringDoctorPhone,\n          occupationRole: occupationRole,\n          occupationEmployer: occupationEmployer,\n          occupationEmployerContactPhone: occupationEmployerContactPhone,\n          occupationEmployerContactEmail: occupationEmployerContactEmail,\n          insuranceCompany: insuranceCompany,\n          insuranceNumber: insuranceNumber,\n          insuranceDescription: insuranceDescription,\n          insuranceExpiry: insuranceExpiry,\n          insuranceSubscriberCompany: insuranceSubscriberCompany,\n          insuranceSubscriberDescription: insuranceSubscriberDescription\n        }\n    };\n\n    const token = this.context.token;\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n\n        const updatedPatientId = resData.data.updatePatient._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        console.log(\"updatedPatient:  \", JSON.stringify(updatedPatient),\"  updatedPatientPos:  \", updatedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.patients.push(\n          {\n          _id: resData.data.updatePatient._id,\n          name: resData.data.updatePatient.name,\n          dob: resData.data.updatePatient.dob,\n          address: resData.data.updatePatient.address,\n          contact:{\n            phone: resData.data.updatePatient.contactPhone,\n            email: resData.data.updatePatient.contactEmail\n          },\n          registrationDate: resData.data.updatePatient.registrationDate,\n          referringDoctor: {\n            name: resData.data.updatePatient.referringDoctorName,\n            email: resData.data.updatePatient.referringDoctorEmail,\n            phone: resData.data.updatePatient.referringDoctorPhone,\n          },\n          occupation: {\n            role: resData.data.updatePatient.occupationRole,\n            employer: resData.data.updatePatient.occupationEmployer,\n            contact: {\n              phone: resData.data.updatePatient.occupationEmployerContactPhone,\n              email: resData.data.updatePatient.occupationEmployerContactEmail\n            }\n          },\n          insurance: {\n            company: resData.data.updatePatient.insuranceCompany,\n            number: resData.data.updatePatient.insuranceNumber,\n            description: resData.data.updatePatient.insuranceDescription,\n            expiry:  resData.data.updatePatient.insuranceExpiry,\n            subscriber: {\n              company: resData.data.updatePatient.insuranceSubscriberCompany,\n              description: resData.data.updatePatient.insuranceSubscriberDescription\n            }\n          }\n        }\n        );\n        this.fetchPatients();\n\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  modalCancelHandler = () => {\n    this.setState({ creating: false, updating: false, selectedPatient: null });\n  };\n\n\n  fetchPatients() {\n    console.log(\"'fetch patients function' context object... \" + JSON.stringify(this.context));\n    const userId = this.context.userId;\n\n    this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n          query patients($userId: ID!) {\n            patients(userId: $userId) {\n              _id\n              name\n              address\n              contact{\n                email\n                phone\n              }\n              registrationDate\n              referringDoctor\n              {\n                name\n                email\n                phone\n              }\n              occupation\n              {\n                role\n                employer\n                contact\n                {\n                  email\n                  phone\n                }\n              }\n            }\n          }\n        `,\n        variables: {\n          userId: userId\n        }\n    };\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const patients = resData.data.patients;\n        console.log(patients);\n\n        if (this.isActive) {\n          this.setState({ patients: patients, isLoading: false });\n        }\n      })\n      .catch(err => {\n        console.log(err);\n        if (this.isActive) {\n          this.setState({ isLoading: false });\n        }\n      });\n  }\n\n\n  modalDeleteHandler = () => {\n    console.log(\"deleting patient...selectedPatient:  \", this.context.selectedPatient);\n\n    const selectedPatientId = this.context.selectedPatient._id;\n\n    if(this.context.user.role !== 'admin') {\n      console.log(\"Not the Admin! No edit permission!!\");\n    }\n\n    this.setState({deleting: true})\n\n\n    const requestBody = {\n      query: `\n          mutation DeletePatient($userId: ID!, $patientId: ID!) {\n            deletePatient(userId: $userId, patientId: $patientId) {\n              _id\n              name\n              address\n              contact{\n                email\n                phone\n              }\n              registrationDate\n              referringDoctor\n              {\n                name\n                email\n                phone\n              }\n              occupation\n              {\n                role\n                employer\n                contact\n                {\n                  email\n                  phone\n                }\n              }\n            }\n          }\n        `,\n        variables: {\n          userId: this.context.userId,\n          patientId: selectedPatientId\n        }\n    };\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        let deletedPatient = resData.data.deletePatient;\n        console.log(deletedPatient);\n\n        let deletedPatientId = deletedPatient._id;\n        deletedPatient = this.state.patients.find(e => e._id === deletedPatientId);\n        const deletedPatientPos = this.state.patients.indexOf(deletedPatient);\n        const slicedArray = this.state.patients.splice(deletedPatientPos, 1);\n        console.log(\"deletedPatient:  \", JSON.stringify(deletedPatient),\"  deletedUserPos:  \", deletedPatientPos, \"  slicedArray:  \", slicedArray);\n\n        this.setState({ deleting: false });\n\n        this.fetchPatients();\n\n      })\n      .catch(err => {\n        console.log(err);\n        if (this.isActive) {\n          this.setState({ deleting: false });\n        }\n      });\n\n\n  }\n\n\n  showDetailHandler = patientId => {\n\n    this.setState(prevState => {\n      const selectedPatient = prevState.patients.find(e => e._id === patientId);\n      this.context.selectedPatient = selectedPatient;\n      this.context.selectedPatientId = selectedPatient._id;\n      console.log(\"selectedPatient:  \", selectedPatient);\n      return { selectedPatient: selectedPatient };\n    });\n  };\n\n\n  componentWillUnmount() {\n    this.isActive = false;\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        {\n          this.state.creating && (\n          <CreatePatientForm\n          canCancel\n            canConfirm\n            onCancel={this.modalCancelHandler}\n            onConfirm={this.modalConfirmHandler}\n            onSubmit={this.modalConfirmHandler}\n            confirmText=\"Confirm\"\n          />\n        )\n      }\n        {this.state.updating && (\n          <UpdatePatientForm\n          canCancel\n            canConfirm\n            onCancel={this.modalCancelHandler}\n            onConfirm={this.modalConfirmUpdateHandler}\n            confirmText=\"Confirm\"\n            patient={this.context.selectedPatient}\n          />\n        )}\n        {this.state.isLoading === false &&\n          (<PatientDetail\n            canEdit\n            canDelete\n            authUserId={this.context.userId}\n            patient={this.state.selectedPatient}\n            onEdit={this.startUpdatePatientHandler}\n            onDelete={this.modalDeleteHandler}\n            className=\"PatientDetailBox\"\n        />)}\n\n        {this.context.token &&\n          (<div className=\"users-control\">\n            <p>Add New Patient</p>\n            <button className=\"btn\" onClick={this.startCreatePatientHandler}>\n              +\n            </button>\n          </div>\n        )}\n        {this.state.isLoading ? (\n          <Spinner />\n        ) : (\n          <PatientList\n            patients={this.state.patients}\n            authUserId={this.context.userId}\n            onViewDetail={this.showDetailHandler}\n          />\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default PatientsPage;\n"]},"metadata":{},"sourceType":"module"}