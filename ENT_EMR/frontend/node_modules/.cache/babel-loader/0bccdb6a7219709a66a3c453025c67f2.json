{"ast":null,"code":"var _jsxFileName = \"/Users/pedrojacob/Downloads/AMR/websites/office_records/ENT_EMR/frontend/src/pages/Appointments.js\";\nimport React, { Component } from 'react';\nimport Modal from '../components/Modal/Modal';\nimport Backdrop from '../components/Backdrop/Backdrop';\nimport PatientList from '../components/Patients/PatientList/PatientList';\nimport PatientDetail from '../components/Patients/PatientDetail';\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\nimport CreateAppointmentForm from '../components/Forms/CreateAppointmentForm';\nimport './Patients.css';\n\nclass AppointmentsPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      creating: false,\n      appointments: [],\n      isLoading: false,\n      selectedAppointment: null\n    };\n    this.isActive = true;\n\n    this.startCreateAppointmentHandler = () => {\n      this.setState({\n        creating: true\n      });\n    };\n\n    this.modalConfirmHandler = () => {\n      this.setState({\n        creating: false\n      });\n      const userId = this.context.userId;\n      const dob = this.dobElRef.current.value;\n      const title = this.titleELRef.current.value;\n      const type = this.typeELRef.current.value;\n      const date = this.dateELRef.current.value;\n      const location = this.locationELRef.current.value;\n      const description = this.descriptionELRef.current.value;\n      const patient = this.patientELRef.current.value;\n      const inProgress = this.inProgressELRef.current.value;\n      const note = this.noteELRef.current.value;\n\n      if (title.trim().length === 0 || type.trim().length === 0 || date.trim().length === 0 || location.trim().length === 0 || description.trim().length === 0 || patient.trim().length === 0 || inProgress.trim().length === 0 || note.trim().length === 0) {\n        return;\n      }\n\n      const appointment = {\n        title,\n        type,\n        date,\n        location,\n        description,\n        patient,\n        inProgress,\n        note\n      };\n      console.log(\"creating appointment: \" + JSON.stringify(appointment));\n      const requestBody = {\n        query: \"\\n          mutation CreateAppointment($userId: ID!, ) {\\n            createAppointment(userId: $userId, appointmentInput: { }) {\\n              _id\\n              title\\n              date\\n              patient{\\n                name\\n              }\\n              location\\n              description\\n              inProgress\\n              notes\\n            }\\n          }\\n        \",\n        variables: {\n          userId: userId,\n          title: title,\n          type: type,\n          date: date,\n          location: location,\n          description: description,\n          patient: patient,\n          inProgress: inProgress,\n          note: note\n        }\n      };\n      const token = this.context.token;\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n        this.setState(prevState => {\n          const updatedAppointments = [...prevState.appointments];\n          updatedAppointments.push({\n            _id: resData.data.createAppointment._id,\n            title: resData.data.createAppointment.title,\n            type: resData.data.createAppointment.type,\n            date: resData.data.createAppointment.date,\n            location: resData.data.createAppointment.location,\n            description: resData.data.createAppointment.description,\n            patient: resData.data.createAppointment.patient,\n            inProgress: resData.data.createAppointment.inProgress,\n            notes: resData.data.createAppointment.notes\n          });\n          return {\n            appointments: updatedAppointments\n          };\n        });\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.modalCancelHandler = () => {\n      this.setState({\n        creating: false,\n        selectedAppointment: null\n      });\n    };\n\n    this.showDetailHandler = appointmentId => {\n      this.setState(prevState => {\n        const selectedAppointment = prevState.appointments.find(e => e._id === appointmentId);\n        this.context.selectedAppointmentId = selectedAppointment;\n        console.log(\"here:  \", selectedAppointment);\n        return {\n          selectedAppointment: selectedAppointment\n        };\n      });\n    };\n\n    this.titleELRef = React.createRef();\n    this.typeELRef = React.createRef();\n    this.dateELRef = React.createRef();\n    this.locationELRef = React.createRef();\n    this.descriptionELRef = React.createRef();\n    this.patientELRef = React.createRef();\n    this.inProgressELRef = React.createRef();\n    this.noteELRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.fetchAppointments();\n  }\n\n  fetchPatients() {\n    console.log(\"'fetch appointments function' context object... \" + JSON.stringify(this.context));\n    const userId = this.context.userId;\n    this.setState({\n      isLoading: true\n    });\n    const requestBody = {\n      query: \"\\n          query appointments($userId: ID!) {\\n            appointments(userId: $userId) {\\n              _id\\n              title\\n              date\\n              patient{\\n                name\\n              }\\n              location\\n              description\\n              inProgress\\n              notes\\n            }\\n          }\\n        \",\n      variables: {\n        userId: userId\n      }\n    };\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    }).then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n\n      return res.json();\n    }).then(resData => {\n      const appointments = resData.data.appointments;\n      console.log(appointments);\n\n      if (this.isActive) {\n        this.setState({\n          appointments: appointments,\n          isLoading: false\n        });\n      }\n    }).catch(err => {\n      console.log(err);\n\n      if (this.isActive) {\n        this.setState({\n          isLoading: false\n        });\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    this.isActive = false;\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225\n      },\n      __self: this\n    }, this.state.creating && React.createElement(CreateAppointmentForm, {\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmHandler,\n      confirmText: \"Confirm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    }), this.state.isLoading === false && React.createElement(AppointmentDetail, {\n      authUserId: this.context.userId,\n      appointment: this.context.selectedAppointmentId,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236\n      },\n      __self: this\n    }), this.context.token && React.createElement(\"div\", {\n      className: \"appointments-control\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    }, \"Add New Appointment\"), React.createElement(\"button\", {\n      className: \"btn\",\n      onClick: this.startCreateAppointmentHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244\n      },\n      __self: this\n    }, \"+\")), this.state.isLoading ? React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250\n      },\n      __self: this\n    }) : React.createElement(AppointmentList, {\n      appointments: this.state.appointments,\n      authUserId: this.context.userId,\n      onViewDetail: this.showDetailHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    }));\n  }\n\n}\n\nAppointmentsPage.contextType = AuthContext;\nexport default AppointmentsPage;","map":{"version":3,"sources":["/Users/pedrojacob/Downloads/AMR/websites/office_records/ENT_EMR/frontend/src/pages/Appointments.js"],"names":["React","Component","Modal","Backdrop","PatientList","PatientDetail","Spinner","AuthContext","CreateAppointmentForm","AppointmentsPage","constructor","props","state","creating","appointments","isLoading","selectedAppointment","isActive","startCreateAppointmentHandler","setState","modalConfirmHandler","userId","context","dob","dobElRef","current","value","title","titleELRef","type","typeELRef","date","dateELRef","location","locationELRef","description","descriptionELRef","patient","patientELRef","inProgress","inProgressELRef","note","noteELRef","trim","length","appointment","console","log","JSON","stringify","requestBody","query","variables","token","fetch","method","body","headers","Authorization","then","res","status","Error","json","resData","prevState","updatedAppointments","push","_id","data","createAppointment","notes","catch","err","modalCancelHandler","showDetailHandler","appointmentId","find","e","selectedAppointmentId","createRef","componentDidMount","fetchAppointments","fetchPatients","componentWillUnmount","render","contextType"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport Modal from '../components/Modal/Modal';\nimport Backdrop from '../components/Backdrop/Backdrop';\nimport PatientList from '../components/Patients/PatientList/PatientList';\nimport PatientDetail from '../components/Patients/PatientDetail';\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\nimport CreateAppointmentForm from '../components/Forms/CreateAppointmentForm';\n\nimport './Patients.css';\n\nclass AppointmentsPage extends Component {\n  state = {\n    creating: false,\n    appointments: [],\n    isLoading: false,\n    selectedAppointment: null\n  };\n  isActive = true;\n\n  static contextType = AuthContext;\n\n  constructor(props) {\n    super(props);\n    this.titleELRef = React.createRef();\n    this.typeELRef = React.createRef();\n    this.dateELRef = React.createRef();\n    this.locationELRef = React.createRef();\n    this.descriptionELRef = React.createRef();\n    this.patientELRef = React.createRef();\n    this.inProgressELRef = React.createRef();\n    this.noteELRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.fetchAppointments();\n  }\n\n\n  startCreateAppointmentHandler = () => {\n    this.setState({ creating: true });\n  };\n\n  modalConfirmHandler = () => {\n    this.setState({ creating: false });\n\n    const userId = this.context.userId;\n\n    const dob = this.dobElRef.current.value;\n    const title = this.titleELRef.current.value;\n    const type = this.typeELRef.current.value;\n    const date = this.dateELRef.current.value;\n    const location = this.locationELRef.current.value;\n    const description = this.descriptionELRef.current.value;\n    const patient = this.patientELRef.current.value;\n    const inProgress = this.inProgressELRef.current.value;\n    const note = this.noteELRef.current.value;\n\n    if (\n      title.trim().length === 0 ||\n      type.trim().length === 0 ||\n      date.trim().length === 0 ||\n      location.trim().length === 0 ||\n      description.trim().length === 0 ||\n      patient.trim().length === 0 ||\n      inProgress.trim().length === 0 ||\n      note.trim().length === 0\n    ) {\n      return;\n    }\n\n    const appointment = { title, type, date, location, description, patient, inProgress, note };\n    console.log(\"creating appointment: \" + JSON.stringify(appointment));\n\n    const requestBody = {\n      query: `\n          mutation CreateAppointment($userId: ID!, ) {\n            createAppointment(userId: $userId, appointmentInput: { }) {\n              _id\n              title\n              date\n              patient{\n                name\n              }\n              location\n              description\n              inProgress\n              notes\n            }\n          }\n        `,\n        variables: {\n          userId: userId,\n          title: title,\n          type: type,\n          date: date,\n          location: location,\n          description: description,\n          patient: patient,\n          inProgress: inProgress,\n          note: note\n        }\n    };\n\n    const token = this.context.token;\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n        this.setState(prevState => {\n          const updatedAppointments = [...prevState.appointments];\n          updatedAppointments.push({\n            _id: resData.data.createAppointment._id,\n            title: resData.data.createAppointment.title,\n            type: resData.data.createAppointment.type,\n            date: resData.data.createAppointment.date,\n            location: resData.data.createAppointment.location,\n            description: resData.data.createAppointment.description,\n            patient: resData.data.createAppointment.patient,\n            inProgress: resData.data.createAppointment.inProgress,\n            notes: resData.data.createAppointment.notes\n          });\n\n          return { appointments: updatedAppointments };\n        });\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  modalCancelHandler = () => {\n    this.setState({ creating: false, selectedAppointment: null });\n  };\n\n  fetchPatients() {\n    console.log(\"'fetch appointments function' context object... \" + JSON.stringify(this.context));\n    const userId = this.context.userId;\n\n    this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n          query appointments($userId: ID!) {\n            appointments(userId: $userId) {\n              _id\n              title\n              date\n              patient{\n                name\n              }\n              location\n              description\n              inProgress\n              notes\n            }\n          }\n        `,\n        variables: {\n          userId: userId\n        }\n    };\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const appointments = resData.data.appointments;\n        console.log(appointments);\n\n        if (this.isActive) {\n          this.setState({ appointments: appointments, isLoading: false });\n        }\n      })\n      .catch(err => {\n        console.log(err);\n        if (this.isActive) {\n          this.setState({ isLoading: false });\n        }\n      });\n  }\n\n\n  showDetailHandler = appointmentId => {\n\n    this.setState(prevState => {\n      const selectedAppointment = prevState.appointments.find(e => e._id === appointmentId);\n      this.context.selectedAppointmentId = selectedAppointment;\n      console.log(\"here:  \", selectedAppointment);\n      return { selectedAppointment: selectedAppointment };\n    });\n  };\n\n\n  componentWillUnmount() {\n    this.isActive = false;\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        {this.state.creating && (\n          <CreateAppointmentForm\n          canCancel\n            canConfirm\n            onCancel={this.modalCancelHandler}\n            onConfirm={this.modalConfirmHandler}\n            confirmText=\"Confirm\"\n          />\n        )}\n        {this.state.isLoading === false &&\n          (<AppointmentDetail\n            authUserId={this.context.userId}\n            appointment={this.context.selectedAppointmentId}\n        />)}\n\n        {this.context.token &&\n          (<div className=\"appointments-control\">\n            <p>Add New Appointment</p>\n            <button className=\"btn\" onClick={this.startCreateAppointmentHandler}>\n              +\n            </button>\n          </div>\n        )}\n        {this.state.isLoading ? (\n          <Spinner />\n        ) : (\n          <AppointmentList\n            appointments={this.state.appointments}\n            authUserId={this.context.userId}\n            onViewDetail={this.showDetailHandler}\n          />\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default AppointmentsPage;\n"]},"metadata":{},"sourceType":"module"}