{"ast":null,"code":"var _jsxFileName = \"/Users/pedrojacob/Downloads/AMR/websites/office_records/ENT_EMR/frontend/src/pages/thisUser.js\";\nimport S3 from 'react-aws-s3';\nimport React, { Component } from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\nimport Nav from 'react-bootstrap/Nav';\nimport AuthContext from '../context/auth-context';\nimport AlertBox from '../components/AlertBox';\nimport AttachmentViewer from '../components/AttachmentViewer';\nimport PdfCreator from '../components/PdfCreator';\nimport LoadingOverlay from '../components/LoadingOverlay';\nimport SidebarPage from './Sidebar';\nimport SidebarControl from '../components/SidebarControl';\nimport UpdateUserForm from '../components/Forms/UpdateUserForm';\nimport ThisUserProfile from '../components/Users/thisUserProfile';\nimport UpdateUserFieldForm from '../components/Forms/UpdateUserFieldForm';\nimport UpdateUserAttendanceForm from '../components/Forms/UpdateUserAttendanceForm';\nimport UpdateUserAttachmentForm from '../components/Forms/UpdateUserAttachmentForm';\nimport UpdateUserLeaveForm from '../components/Forms/UpdateUserLeaveForm';\nimport './Users.css';\n\nclass ThisUserPage extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      user: null,\n      users: [],\n      updating: false,\n      isLoading: false,\n      userUpdateField: null,\n      userAlert: null,\n      overlay: false,\n      overlayStatus: \"test\",\n      canDelete: null,\n      showAttachment: false,\n      creatingDocument: false,\n      createPdf: false,\n      pdfData: null,\n      pdfType: null,\n      showThisAttachmentFile: null,\n      showThisAttachmentType: null,\n      sidebarShow: true,\n      mCol1Size: 3,\n      mCol2Size: 9\n    };\n    this.isActive = true;\n\n    this.startUpdateUserHandler = () => {\n      this.setState({\n        updating: true\n      });\n    };\n\n    this.modalConfirmUpdateHandler = event => {\n      const token = this.context.token;\n      let userId = this.context.userId;\n      let selectedUserId = this.context.selectedUser._id;\n\n      if (userId !== selectedUserId && this.context.user.role !== 'admin') {\n        this.setState({\n          userAlert: \"Not the creator or Admin! No edit permission!!\"\n        });\n        selectedUserId = null;\n      }\n\n      this.setState({\n        updating: false,\n        userAlert: \"Updating selected Staff ...\"\n      });\n      let email = event.target.formGridEmail.value;\n      let password = event.target.formGridPassword.value;\n      let name = event.target.formGridName.value;\n      let role = this.context.user.role;\n      let dob = event.target.formGridDob.value;\n      let phone = event.target.formGridPhone.value;\n      let addressNumber = event.target.formGridAddressNumber.value;\n      let addressStreet = event.target.formGridAddressStreet.value;\n      let addressTown = event.target.formGridAddressTown.value;\n      let addressParish = event.target.formGridAddressParish.value;\n      let addressPostOffice = event.target.formGridAddressPostOffice.value;\n      let employmentDate = event.target.formGridEmploymentDate.value;\n\n      if (event.target.formGridEmploymentDateTodayCheckbox.checked === true) {\n        employmentDate = new Date().toISOString().slice(0, 10);\n      }\n\n      let terminationDate = event.target.formGridTerminationDate.value;\n\n      if (event.target.formGridTerminationDateTodayCheckbox.checked === true) {\n        terminationDate = new Date().toISOString().slice(0, 10);\n      }\n\n      if (email.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        email = this.context.user.email;\n      }\n\n      if (password.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        password = this.context.user.password;\n      }\n\n      if (name.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        name = this.context.user.name;\n      } // if (role.trim().length === 0) {\n      //   console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      //   role = this.state.user.role;\n      // }\n\n\n      if (dob.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        dob = this.context.user.dob;\n      }\n\n      if (phone.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        phone = this.context.user.phone;\n      }\n\n      if (addressNumber.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        addressNumber = this.context.user.address.number;\n      }\n\n      if (addressStreet.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        addressStreet = this.context.user.address.street;\n      }\n\n      if (addressTown.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        addressTown = this.context.user.address.town;\n      }\n\n      if (addressParish.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        addressParish = this.context.user.address.parish;\n      }\n\n      if (addressPostOffice.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        addressPostOffice = this.context.user.address.postOffice;\n      }\n\n      if (employmentDate.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        employmentDate = this.context.user.employmentDate;\n      }\n\n      if (terminationDate.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        terminationDate = this.context.user.terminationDate;\n      }\n\n      const requestBody = {\n        query: `\n        mutation {updateUser(userId:\"${userId}\",selectedUserId:\"${userId}\",userInput: {email:\"${email}\",password:\"${password}\",name:\"${name}\",dob:\"${dob}\",addressNumber:${addressNumber},addressStreet:\"${addressStreet}\",addressTown:\"${addressTown}\",addressParish:\"${addressParish}\", addressPostOffice:\"${addressPostOffice}\",phone:\"${phone}\",role:\"${role}\",employmentDate:\"${employmentDate}\",terminationDate:\"${terminationDate}\"})\n        {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n        `\n      }; // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const updatedUser = resData.data.updateUser;\n        this.state.users.push(updatedUser);\n        this.context.users = this.state.users;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert,\n          user: updatedUser\n        });\n        this.getThisUser();\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.modalConfirmUpdateFieldHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedUserId = this.context.selectedUser._id;\n\n      if (userId !== selectedUserId && this.context.user.role !== 'admin') {\n        this.setState({\n          userAlert: \"Not the creator or Admin! No edit permission!!\"\n        });\n        selectedUserId = null;\n      }\n\n      this.setState({\n        updating: false,\n        userAlert: \"Updating selected Staff by Field...\"\n      });\n      let field = null;\n      let query = event.target.formGridQuery.value;\n\n      if (event.target.formGridFieldSelect.value === \"select\") {\n        field = event.target.formGridField.value;\n      } else {\n        field = event.target.formGridFieldSelect.value;\n      }\n\n      const requestBody = {\n        query: `\n          mutation{updateUserField(userId:\"${userId}\",selectedUserId:\"${userId}\",field:\"${field}\",query:\"${query}\")\n          {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n        `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const updatedUserId = resData.data.updateUserField._id;\n        const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n        const updatedUserPos = this.state.users.indexOf(updatedUser);\n        const slicedArray = this.state.users.splice(updatedUserPos, 1);\n        this.state.users.push(resData.data.updateUserField);\n        this.context.users = this.state.users;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25); // console.log(\"responseAlert...\", responseAlert);\n\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.getThisUser();\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updateUserAttendanceHandler = event => {\n      const token = this.context.token;\n      const userId = this.state.user._id;\n      console.log(\"UpdateUserAttendanceFormData:  \", event.target.formGridAttendanceStatus.value);\n      console.log(`\n      dates & raisins...\n      this.context.fancyDate: ${new Date(AuthContext._currentValue.fancyDate).toISOString().slice(0, 10)},\n      event.target.formGridAttendanceDateTodayCheckbox.checked: ${event.target.formGridAttendanceDateTodayCheckbox.checked},\n      `);\n      this.setState({\n        updating: false,\n        userUpdateField: null,\n        userAlert: \"Adding Attendance for selected Staff...\"\n      });\n      let attendanceDate = event.target.formGridAttendanceDate.value;\n\n      if (event.target.formGridAttendanceDateTodayCheckbox.checked === true) {\n        console.log(\"1\");\n        attendanceDate = new Date().toISOString().slice(0, 10);\n      }\n\n      if (AuthContext._currentValue.fancyDate !== null && event.target.formGridAttendanceDateTodayCheckbox.checked !== true) {\n        console.log(\"fancyDate\", new Date(AuthContext._currentValue.fancyDate + 1 * 24 * 60 * 60 * 1000));\n        console.log(\"fancyDate2\", event.target.DatePicker); // attendanceDate = new Date(AuthContext._currentValue.fancyDate).toISOString().slice(0,10);\n      }\n\n      let attendanceStatus = event.target.formGridAttendanceStatus.value;\n      let attendanceDescription = event.target.formGridAttendanceDescription.value;\n\n      if (attendanceDate.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        attendanceDate = this.context.selectedUser.attendanceDate;\n      }\n\n      if (attendanceStatus.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        attendanceStatus = this.context.selectedUser.attendanceStatus;\n      }\n\n      if (attendanceDescription.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        attendanceDescription = this.context.selectedUser.attendanceDescription;\n      }\n\n      const requestBody = {\n        query: `\n          mutation {updateUserAttendance(userId:\"${userId}\", selectedUserId:\"${userId}\",userInput:{attendanceDate:\"${attendanceDate}\",attendanceStatus:\"${attendanceStatus}\",attendanceDescription:\"${attendanceDescription}\"})\n          {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n        `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const updatedUserId = resData.data.updateUserAttendance._id;\n        const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n        const updatedUserPos = this.state.users.indexOf(updatedUser);\n        const slicedArray = this.state.users.splice(updatedUserPos, 1);\n        this.state.users.push(resData.data.updateUserAttendance);\n        this.context.users = this.state.users;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.getThisUser();\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updateUserLeaveHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedUserId = this.context.selectedUser._id;\n\n      if (userId !== selectedUserId && this.context.user.role !== 'admin') {\n        this.setState({\n          userAlert: \"Not the creator or Admin! No edit permission!!\"\n        });\n        selectedUserId = null;\n      }\n\n      this.setState({\n        updating: false,\n        userUpdateField: null,\n        userAlert: \"Adding Leave for selected Staff...\"\n      });\n      let leaveType = event.target.formGridLeaveType.value;\n      let leaveTitle = event.target.formGridLeaveTitle.value;\n      let leaveStartDate = event.target.formGridLeaveStartDate.value;\n\n      if (event.target.formGridLeaveStartDateTodayCheckbox.checked === true) {\n        leaveStartDate = new Date().toISOString().slice(0, 10);\n      }\n\n      let leaveEndDate = event.target.formGridLeaveEndDate.value;\n\n      if (event.target.formGridLeaveEndDateTodayCheckbox.checked === true) {\n        leaveEndDate = new Date().toISOString().slice(0, 10);\n      }\n\n      if (leaveType.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        leaveType = this.context.selectedUser.leaveType;\n      }\n\n      if (leaveTitle.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        leaveTitle = this.context.selectedUser.leaveTitle;\n      }\n\n      if (leaveStartDate.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        leaveStartDate = this.context.selectedUser.leaveStartDate;\n      }\n\n      if (leaveEndDate.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        leaveEndDate = this.context.selectedUser.leaveEndDate;\n      }\n\n      const requestBody = {\n        query: `\n        mutation {updateUserLeave(userId:\"${userId}\", selectedUserId:\"${userId}\",userInput:{leaveType:\"${leaveType}\",leaveTitle:\"${leaveTitle}\",leaveStartDate:\"${leaveStartDate}\",leaveEndDate:\"${leaveEndDate}\"})\n        {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n      `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const updatedUserId = resData.data.updateUserLeave._id;\n        const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n        const updatedUserPos = this.state.users.indexOf(updatedUser);\n        const slicedArray = this.state.users.splice(updatedUserPos, 1);\n        this.state.users.push(resData.data.updateUserLeave);\n        this.context.users = this.state.users;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.getThisUser();\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updateUserAttachmentHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      this.setState({\n        updating: false,\n        userUpdateField: null,\n        userAlert: \"Adding Attachment to selected Staff...\"\n      });\n      let attachmentFormat = event.target.formGridAttachmentFormat.value;\n      let attachmentPath = \"uploads/staff/\" + userId + \"/attachments\";\n      let file = AuthContext._currentValue.file;\n      const config = {\n        bucketName: this.context.creds.s3.bucketName,\n        dirName: attachmentPath,\n        region: this.context.creds.s3.region,\n        accessKeyId: this.context.creds.s3.accessKeyId,\n        secretAccessKey: this.context.creds.s3.secretAccessKey\n      };\n      const ReactS3Client = new S3(config);\n      const newFileName = file.name;\n      const attachmentName = newFileName;\n      ReactS3Client.uploadFile(file, newFileName).then(data => {\n        console.log(data);\n        this.setState({\n          userAlert: \"attachment upload success!\"\n        });\n      }).catch(err => {\n        console.error(err);\n        this.setState({\n          userAlert: \"upload error:  \" + err\n        });\n      });\n\n      if (attachmentName.trim().length === 0 || attachmentFormat.trim().length === 0 || attachmentPath.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!! try again\"\n        });\n        return;\n      }\n\n      this.setState({\n        userAlert: \"adding user attachment item...\"\n      });\n      const requestBody = {\n        query: `\n        mutation{updateUserAttachment(userId:\"${userId}\",selectedUserId:\"${userId}\",userInput:{attachmentName:\"${attachmentName}\",attachmentFormat:\"${attachmentFormat}\",attachmentPath:\"${attachmentPath}\"})\n        {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n      `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const updatedUserId = resData.data.updateUserAttachment._id;\n        const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n        const updatedUserPos = this.state.users.indexOf(updatedUser);\n        const slicedArray = this.state.users.splice(updatedUserPos, 1);\n        this.state.users.push(resData.data.updateUserAttachment);\n        this.context.users = this.state.users;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.getThisUser();\n        this.setState({\n          userAlert: \"uploading ttachment...\"\n        });\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.modalCancelHandler = () => {\n      this.setState({\n        updating: false\n      });\n    };\n\n    this.deleteUserAttendanceItem = props => {\n      let token = this.context.token;\n      let userId = this.context.userId;\n      let date = new Date(props.date.substr(0, 10) * 1000).toISOString().slice(0, 10);\n      const requestBody = {\n        query: `\n       mutation{deleteUserAttendance(userId:\"${userId}\",selectedUserId:\"${userId}\",attendanceDate:\"${date}\")\n       {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}\n      }\n     `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        // const updatedUserId = resData.data.deleteUserAttendance._id;\n        console.log(JSON.stringify(resData.data.deleteUserAttendance)); // const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n        // const updatedUserPos = this.state.users.indexOf(updatedUser);\n        // const slicedArray = this.state.users.splice(updatedUserPos, 1);\n        // this.state.users.push(resData.data.deleteUserAttendance);\n        // this.context.users = this.state.users;\n\n        const responseAlert = JSON.stringify(resData.data.deleteUserAttendance).slice(2, 25);\n        this.getThisUser();\n        this.setState({\n          userAlert: responseAlert,\n          user: resData.data.deleteUserAttendance\n        });\n        return;\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.deleteUserLeaveItem = props => {\n      let token = this.context.token;\n      let userId = this.context.userId;\n      const requestBody = {\n        query: `\n       mutation{deleteUserLeave(userId:\"${userId}\",selectedUserId:\"${userId}\",leaveTitle:\"${props.title}\")\n       {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const updatedUserId = resData.data.deleteUserLeave._id;\n        const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n        const updatedUserPos = this.state.users.indexOf(updatedUser);\n        const slicedArray = this.state.users.splice(updatedUserPos, 1);\n        this.state.users.push(resData.data.deleteUserLeave);\n        this.context.users = this.state.users;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.deleteUserAttachmentItem = props => {\n      let token = this.context.token;\n      let userId = this.context.userId; //   const config = {\n      //     bucketName: this.context.creds.s3.bucketName,\n      //     dirName: props.path,\n      //     region: this.context.creds.s3.region,\n      //     accessKeyId: this.context.creds.s3.accessKeyId,\n      //     secretAccessKey: this.context.creds.s3.secretAccessKey,\n      //   }\n      // const ReactS3Client = new S3(config);\n      // const filename = props.name;\n      // // const attachmentName = newFileName;\n      // //\n      // S3FileUpload\n      // .deleteFile(filename, config)\n      // .then(response => console.log(response))\n      // .catch(err => console.error(err))\n\n      const requestBody = {\n        query: `\n         mutation{deleteUserAttachment(userId:\"${userId}\",selectedUserId:\"${userId}\",attachmentName:\"${props.name}\")\n         {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n      `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const updatedUserId = resData.data.deleteUserAttachment._id;\n        const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n        const updatedUserPos = this.state.users.indexOf(updatedUser);\n        const slicedArray = this.state.users.splice(updatedUserPos, 1);\n        this.state.users.push(resData.data.deleteUserAttachment);\n        this.context.users = this.state.users;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.getThisUser();\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.onViewAttachment = attachment => {\n      const file = \"https://ent-emr-bucket.s3-us-east-2.amazonaws.com/\" + attachment.path + \"/\" + attachment.name + \".\" + attachment.format;\n      const type = attachment.format;\n      this.setState({\n        showThisAttachmentFile: file,\n        showThisAttachmentType: type,\n        showAttachment: true\n      });\n    };\n\n    this.closeAttachmentView = () => {\n      this.setState({\n        showAttachment: false\n      });\n    };\n\n    this.createPdf = user => {\n      const pdfData = {\n        title: \"This pdf is supplied with your profile data...\",\n        user: {\n          _id: user._id,\n          email: user.email,\n          password: user.password,\n          name: user.name,\n          dob: user.dob,\n          address: {\n            number: user.address.number,\n            street: user.address.street,\n            town: user.address.town,\n            parish: user.address.parish,\n            postOffice: user.address.postOffice\n          },\n          phone: user.phone,\n          role: user.role,\n          employmentDate: user.employmentDate,\n          terminationDate: user.terminationDate,\n          attachments: user.attachments,\n          attendance: user.atttendance,\n          leave: user.leave\n        }\n      };\n      this.setState({\n        createPdf: true,\n        pdfData: pdfData\n      });\n    };\n\n    this.closePdfCreator = () => {\n      this.setState({\n        createPdf: false,\n        pdfData: null\n      });\n    };\n\n    this.showSidebar = () => {\n      console.log(`\n      showing sidebar...\n      `);\n      this.setState({\n        sidebarShow: true,\n        mCol2Size: 9\n      });\n    };\n\n    this.hideSidebar = () => {\n      console.log(`\n      hiding sidebar...\n      `);\n      this.setState({\n        sidebarShow: false,\n        mCol2Size: 11\n      });\n    };\n  }\n\n  componentDidMount() {\n    if (this.context.user.name === \"Lord-of-the-Manor\") {\n      this.setState({\n        canDelete: true\n      });\n    }\n\n    this.getThisUser();\n    this.getCreds();\n  }\n\n  getThisUser() {\n    this.setState({\n      isLoading: true\n    });\n    const requestBody = {\n      query: `\n      query {getThisUser\n        {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n        `\n    };\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    }).then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n\n      return res.json();\n    }).then(resData => {\n      const thisUser = resData.data.getThisUser;\n      this.context.user = thisUser;\n\n      if (this.isActive) {\n        this.setState({\n          user: thisUser,\n          isLoading: false\n        });\n      }\n    }).catch(err => {\n      this.setState({\n        userAlert: err\n      });\n\n      if (this.isActive) {\n        this.setState({\n          isLoading: false\n        });\n      }\n    });\n  }\n\n  getCreds() {\n    this.setState({\n      isLoading: true\n    });\n    const requestBody = {\n      query: `\n      query {getCreds\n        {atlas{user,pw,db},s3{bucketName,region,accessKeyId,secretAccessKey},jwt{encode},gdrive{clientId,developerKey}}}\n        `\n    };\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    }).then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n\n      return res.json();\n    }).then(resData => {\n      const creds = resData.data.getCreds;\n\n      if (this.isActive) {\n        this.setState({\n          isLoading: false\n        });\n        this.context.creds = creds;\n      }\n    }).catch(err => {\n      this.setState({\n        userAlert: err\n      });\n\n      if (this.isActive) {\n        this.setState({\n          isLoading: false\n        });\n      }\n    });\n  }\n\n  updateUserSpecialProfile(event) {\n    const field = event.target.value;\n    this.setState({\n      userUpdateField: field\n    });\n  }\n\n  componentWillUnmount() {\n    this.isActive = false;\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 769\n      },\n      __self: this\n    }, this.state.showAttachment === true && React.createElement(AttachmentViewer, {\n      onCloseAttachmentView: this.closeAttachmentView,\n      attachmentFile: this.state.showThisAttachmentFile,\n      attachmentType: this.state.showThisAttachmentType,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 772\n      },\n      __self: this\n    }), this.state.creatingDocument === true && React.createElement(PdfCreator, {\n      pdfType: this.state.pdfType,\n      pdfData: this.state.pdfData,\n      onClosePdfCreator: this.closePdfCreator,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 779\n      },\n      __self: this\n    }), React.createElement(AlertBox, {\n      authUserId: this.context.userId,\n      alert: this.state.userAlert,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 785\n      },\n      __self: this\n    }), React.createElement(SidebarControl, {\n      onShowSidebar: this.showSidebar,\n      onHideSidebar: this.hideSidebar,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 789\n      },\n      __self: this\n    }), this.state.overlay === true && React.createElement(LoadingOverlay, {\n      status: this.state.overlayStatus,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 794\n      },\n      __self: this\n    }), React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 799\n      },\n      __self: this\n    }, this.state.sidebarShow === true && React.createElement(Col, {\n      md: 3,\n      className: \"MasterCol1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 802\n      },\n      __self: this\n    }, React.createElement(SidebarPage, {\n      you: this.state.user,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 803\n      },\n      __self: this\n    })), React.createElement(Col, {\n      md: this.state.mCol2Size,\n      className: \"MasterCol2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 809\n      },\n      __self: this\n    }, React.createElement(Container, {\n      className: \"containerProfile\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 810\n      },\n      __self: this\n    }, React.createElement(Tab.Container, {\n      id: \"left-tabs-example\",\n      defaultActiveKey: \"Detail\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 812\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 813\n      },\n      __self: this\n    }, React.createElement(Col, {\n      sm: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 814\n      },\n      __self: this\n    }, React.createElement(Nav, {\n      variant: \"pills\",\n      className: \"flex-column\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 815\n      },\n      __self: this\n    }, React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 816\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"Detail\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 817\n      },\n      __self: this\n    }, \"You\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 819\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"disabled\",\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 820\n      },\n      __self: this\n    }, \"Edit:\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 822\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"Demographics\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 823\n      },\n      __self: this\n    }, \"Demographics\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 825\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"userEditField\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 826\n      },\n      __self: this\n    }, \"Single Field\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 828\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"disabled\",\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 829\n      },\n      __self: this\n    }, \"Add:\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 831\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"Attandance\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 832\n      },\n      __self: this\n    }, \"Attendance\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 834\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"Attachment\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 835\n      },\n      __self: this\n    }, \"Attachment\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 837\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"Leave\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 838\n      },\n      __self: this\n    }, \"Leave\")))), React.createElement(Col, {\n      sm: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 842\n      },\n      __self: this\n    }, React.createElement(Tab.Content, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 843\n      },\n      __self: this\n    }, React.createElement(Tab.Pane, {\n      eventKey: \"Detail\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 844\n      },\n      __self: this\n    }, this.state.user !== null && React.createElement(ThisUserProfile, {\n      user: this.state.user,\n      authUserId: this.context.userId,\n      canDelete: this.state.canDelete,\n      attendanceDelete: this.deleteUserAttendanceItem,\n      leaveDelete: this.deleteUserLeaveItem,\n      attachmentDelete: this.deleteUserAttachmentItem,\n      onViewAttachment: this.onViewAttachment,\n      onCreatePdf: this.createPdf,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 846\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"Demographics\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 859\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"outline-primary\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.startUpdateUserHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 860\n      },\n      __self: this\n    }, \"Edit Demographics\"), this.state.updating === true && this.state.user !== null && React.createElement(UpdateUserForm, {\n      canCancelProfile: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmUpdateHandler,\n      confirmText: \"Confirm\",\n      user: this.state.user,\n      authUserId: this.context.userId,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 863\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"userEditField\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 875\n      },\n      __self: this\n    }, this.state.user !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.startUpdateUserHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 877\n      },\n      __self: this\n    }, \"Edit a Single Field\"), this.state.updating && this.state.user !== null && React.createElement(UpdateUserFieldForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmUpdateFieldHandler,\n      confirmText: \"Confirm\",\n      user: this.state.user,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 882\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"Attandance\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 894\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"outline-primary\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      value: \"attendance\",\n      onClick: this.updateUserSpecialProfile.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 895\n      },\n      __self: this\n    }, \"Add Attendance\"), this.state.userUpdateField === 'attendance' && React.createElement(UpdateUserAttendanceForm, {\n      authUserId: this.context.userId,\n      canCancelProfile: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updateUserAttendanceHandler,\n      confirmText: \"Confirm\",\n      user: this.state.user,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 897\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"Attachment\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 909\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"outline-primary\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      value: \"attachments\",\n      onClick: this.updateUserSpecialProfile.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 910\n      },\n      __self: this\n    }, \"Add Attachment\"), this.state.userUpdateField === 'attachments' && React.createElement(UpdateUserAttachmentForm, {\n      authUserId: this.context.userId,\n      canCancelProfile: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updateUserAttachmentHandler,\n      confirmText: \"Confirm\",\n      user: this.state.user,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 912\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"Leave\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 924\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"outline-primary\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      value: \"leave\",\n      onClick: this.updateUserSpecialProfile.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 925\n      },\n      __self: this\n    }, \"Add Leave\"), this.state.userUpdateField === 'leave' && React.createElement(UpdateUserLeaveForm, {\n      authUserId: this.context.userId,\n      canCancelProfile: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updateUserLeaveHandler,\n      confirmText: \"Confirm\",\n      user: this.state.user,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 927\n      },\n      __self: this\n    }))))))))));\n  }\n\n}\n\nThisUserPage.contextType = AuthContext;\nexport default ThisUserPage;","map":{"version":3,"sources":["/Users/pedrojacob/Downloads/AMR/websites/office_records/ENT_EMR/frontend/src/pages/thisUser.js"],"names":["S3","React","Component","Container","Row","Col","Button","Tabs","Tab","Nav","AuthContext","AlertBox","AttachmentViewer","PdfCreator","LoadingOverlay","SidebarPage","SidebarControl","UpdateUserForm","ThisUserProfile","UpdateUserFieldForm","UpdateUserAttendanceForm","UpdateUserAttachmentForm","UpdateUserLeaveForm","ThisUserPage","state","user","users","updating","isLoading","userUpdateField","userAlert","overlay","overlayStatus","canDelete","showAttachment","creatingDocument","createPdf","pdfData","pdfType","showThisAttachmentFile","showThisAttachmentType","sidebarShow","mCol1Size","mCol2Size","isActive","startUpdateUserHandler","setState","modalConfirmUpdateHandler","event","token","context","userId","selectedUserId","selectedUser","_id","role","email","target","formGridEmail","value","password","formGridPassword","name","formGridName","dob","formGridDob","phone","formGridPhone","addressNumber","formGridAddressNumber","addressStreet","formGridAddressStreet","addressTown","formGridAddressTown","addressParish","formGridAddressParish","addressPostOffice","formGridAddressPostOffice","employmentDate","formGridEmploymentDate","formGridEmploymentDateTodayCheckbox","checked","Date","toISOString","slice","terminationDate","formGridTerminationDate","formGridTerminationDateTodayCheckbox","trim","length","address","number","street","town","parish","postOffice","requestBody","query","fetch","method","body","JSON","stringify","headers","Authorization","then","res","status","Error","json","resData","updatedUser","data","updateUser","push","responseAlert","getThisUser","catch","err","modalConfirmUpdateFieldHandler","field","formGridQuery","formGridFieldSelect","formGridField","updatedUserId","updateUserField","find","e","updatedUserPos","indexOf","slicedArray","splice","updateUserAttendanceHandler","console","log","formGridAttendanceStatus","_currentValue","fancyDate","formGridAttendanceDateTodayCheckbox","attendanceDate","formGridAttendanceDate","DatePicker","attendanceStatus","attendanceDescription","formGridAttendanceDescription","updateUserAttendance","updateUserLeaveHandler","leaveType","formGridLeaveType","leaveTitle","formGridLeaveTitle","leaveStartDate","formGridLeaveStartDate","formGridLeaveStartDateTodayCheckbox","leaveEndDate","formGridLeaveEndDate","formGridLeaveEndDateTodayCheckbox","updateUserLeave","updateUserAttachmentHandler","attachmentFormat","formGridAttachmentFormat","attachmentPath","file","config","bucketName","creds","s3","dirName","region","accessKeyId","secretAccessKey","ReactS3Client","newFileName","attachmentName","uploadFile","error","updateUserAttachment","modalCancelHandler","deleteUserAttendanceItem","props","date","substr","deleteUserAttendance","deleteUserLeaveItem","title","deleteUserLeave","deleteUserAttachmentItem","deleteUserAttachment","onViewAttachment","attachment","path","format","type","closeAttachmentView","attachments","attendance","atttendance","leave","closePdfCreator","showSidebar","hideSidebar","componentDidMount","getCreds","thisUser","updateUserSpecialProfile","componentWillUnmount","render","bind","contextType"],"mappings":"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","sourcesContent":["import S3 from 'react-aws-s3';\nimport React, { Component } from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\nimport Nav from 'react-bootstrap/Nav';\n\nimport AuthContext from '../context/auth-context';\nimport AlertBox from '../components/AlertBox';\nimport AttachmentViewer from '../components/AttachmentViewer';\nimport PdfCreator from '../components/PdfCreator';\nimport LoadingOverlay from '../components/LoadingOverlay';\nimport SidebarPage from './Sidebar';\nimport SidebarControl from '../components/SidebarControl';\n\nimport UpdateUserForm from '../components/Forms/UpdateUserForm';\nimport ThisUserProfile from '../components/Users/thisUserProfile';\nimport UpdateUserFieldForm from '../components/Forms/UpdateUserFieldForm';\nimport UpdateUserAttendanceForm from '../components/Forms/UpdateUserAttendanceForm';\nimport UpdateUserAttachmentForm from '../components/Forms/UpdateUserAttachmentForm';\nimport UpdateUserLeaveForm from '../components/Forms/UpdateUserLeaveForm';\n\nimport './Users.css';\n\nclass ThisUserPage extends Component {\n  state = {\n    user: null,\n    users: [],\n    updating: false,\n    isLoading: false,\n    userUpdateField: null,\n    userAlert: null,\n    overlay: false,\n    overlayStatus: \"test\",\n    canDelete: null,\n    showAttachment: false,\n    creatingDocument: false,\n    createPdf: false,\n    pdfData: null,\n    pdfType: null,\n    showThisAttachmentFile: null,\n    showThisAttachmentType: null,\n    sidebarShow: true,\n    mCol1Size: 3,\n    mCol2Size: 9\n  };\n  isActive = true;\n\n  static contextType = AuthContext;\n\n  componentDidMount() {\n    if (this.context.user.name === \"Lord-of-the-Manor\"){\n      this.setState({canDelete: true})\n    }\n    this.getThisUser();\n    this.getCreds();\n  }\n\n  startUpdateUserHandler = () => {\n    this.setState({ updating: true });\n  };\n\n  modalConfirmUpdateHandler = (event) => {\n\n    const token = this.context.token;\n    let userId = this.context.userId;\n    let selectedUserId = this.context.selectedUser._id;\n    if(userId !== selectedUserId && this.context.user.role !== 'admin') {\n      this.setState({userAlert: \"Not the creator or Admin! No edit permission!!\"});\n      selectedUserId = null;\n    }\n    this.setState({ updating: false, userAlert: \"Updating selected Staff ...\" });\n    let email = event.target.formGridEmail.value;\n    let password = event.target.formGridPassword.value;\n    let name = event.target.formGridName.value;\n    let role = this.context.user.role;\n    let dob = event.target.formGridDob.value;\n    let phone = event.target.formGridPhone.value;\n    let addressNumber = event.target.formGridAddressNumber.value;\n    let addressStreet = event.target.formGridAddressStreet.value;\n    let addressTown = event.target.formGridAddressTown.value;\n    let addressParish = event.target.formGridAddressParish.value;\n    let addressPostOffice = event.target.formGridAddressPostOffice.value;\n    let employmentDate = event.target.formGridEmploymentDate.value;\n    if (event.target.formGridEmploymentDateTodayCheckbox.checked === true) {\n      employmentDate = new Date().toISOString().slice(0,10);\n    }\n    let terminationDate = event.target.formGridTerminationDate.value;\n    if (event.target.formGridTerminationDateTodayCheckbox.checked === true) {\n      terminationDate = new Date().toISOString().slice(0,10);\n    }\n    if (email.trim().length === 0 ) {\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      email = this.context.user.email;\n    }\n    if (password.trim().length === 0) {\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      password = this.context.user.password;\n    }\n    if (name.trim().length === 0) {\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      name = this.context.user.name;\n    }\n    // if (role.trim().length === 0) {\n    //   console.log(\"blank fields detected!!!...filling w/ previous data...\");\n    //   role = this.state.user.role;\n    // }\n    if (dob.trim().length === 0) {\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      dob = this.context.user.dob;\n    }\n    if (phone.trim().length === 0) {\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      phone = this.context.user.phone;\n    }\n    if (addressNumber.trim().length === 0) {\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      addressNumber = this.context.user.address.number;\n    }\n    if (addressStreet.trim().length === 0) {\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      addressStreet = this.context.user.address.street;\n    }\n    if (addressTown.trim().length === 0) {\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      addressTown = this.context.user.address.town;\n    }\n    if (addressParish.trim().length === 0) {\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      addressParish = this.context.user.address.parish;\n    }\n    if (addressPostOffice.trim().length === 0) {\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      addressPostOffice = this.context.user.address.postOffice;\n    }\n    if (employmentDate.trim().length === 0) {\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      employmentDate = this.context.user.employmentDate;\n    }\n    if (terminationDate.trim().length === 0) {\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      terminationDate = this.context.user.terminationDate;\n    }\n\n    const requestBody = {\n      query: `\n        mutation {updateUser(userId:\"${userId}\",selectedUserId:\"${userId}\",userInput: {email:\"${email}\",password:\"${password}\",name:\"${name}\",dob:\"${dob}\",addressNumber:${addressNumber},addressStreet:\"${addressStreet}\",addressTown:\"${addressTown}\",addressParish:\"${addressParish}\", addressPostOffice:\"${addressPostOffice}\",phone:\"${phone}\",role:\"${role}\",employmentDate:\"${employmentDate}\",terminationDate:\"${terminationDate}\"})\n        {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n        `};\n\n    // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }})\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const updatedUser = resData.data.updateUser;\n        this.state.users.push(updatedUser);\n        this.context.users = this.state.users;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n\n        this.setState({ userAlert: responseAlert, user: updatedUser})\n        this.getThisUser();\n      })\n      .catch(err => {\n        this.setState({userAlert: err});\n      });\n    };\n\n    modalConfirmUpdateFieldHandler = (event) => {\n\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedUserId = this.context.selectedUser._id;\n      if(userId !== selectedUserId && this.context.user.role !== 'admin') {\n        this.setState({userAlert: \"Not the creator or Admin! No edit permission!!\"});\n        selectedUserId = null;\n      }\n\n      this.setState({ updating: false, userAlert: \"Updating selected Staff by Field...\" });\n\n      let field = null;\n      let query = event.target.formGridQuery.value;\n      if (event.target.formGridFieldSelect.value === \"select\") {\n        field = event.target.formGridField.value;\n      } else {\n        field = event.target.formGridFieldSelect.value;\n      }\n\n      const requestBody = {\n        query:`\n          mutation{updateUserField(userId:\"${userId}\",selectedUserId:\"${userId}\",field:\"${field}\",query:\"${query}\")\n          {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n        `};\n\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          const updatedUserId = resData.data.updateUserField._id;\n          const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n          const updatedUserPos = this.state.users.indexOf(updatedUser);\n          const slicedArray = this.state.users.splice(updatedUserPos, 1);\n          this.state.users.push(resData.data.updateUserField);\n          this.context.users = this.state.users;\n\n          const responseAlert = JSON.stringify(resData.data).slice(2,25);\n          // console.log(\"responseAlert...\", responseAlert);\n          this.setState({ userAlert: responseAlert})\n          this.getThisUser();\n        })\n        .catch(err => {\n          this.setState({userAlert: err});\n        });\n    }\n\n  updateUserAttendanceHandler = (event) => {\n    const token = this.context.token;\n    const userId = this.state.user._id;\n    console.log(\"UpdateUserAttendanceFormData:  \", event.target.formGridAttendanceStatus.value, );\n\n    console.log(`\n      dates & raisins...\n      this.context.fancyDate: ${new Date(AuthContext._currentValue.fancyDate).toISOString().slice(0,10)},\n      event.target.formGridAttendanceDateTodayCheckbox.checked: ${event.target.formGridAttendanceDateTodayCheckbox.checked},\n      `);\n    this.setState({ updating: false , userUpdateField: null, userAlert: \"Adding Attendance for selected Staff...\" });\n\n    let attendanceDate = event.target.formGridAttendanceDate.value;\n    if (event.target.formGridAttendanceDateTodayCheckbox.checked === true) {\n      console.log(\"1\");\n      attendanceDate = new Date().toISOString().slice(0,10);\n    }\n\n    if (\n      AuthContext._currentValue.fancyDate !== null &&\n      event.target.formGridAttendanceDateTodayCheckbox.checked !== true\n    ) {\n      console.log(\"fancyDate\", new Date(AuthContext._currentValue.fancyDate + 1*24*60*60*1000));\n      console.log(\"fancyDate2\", event.target.DatePicker);\n      // attendanceDate = new Date(AuthContext._currentValue.fancyDate).toISOString().slice(0,10);\n    }\n\n    let attendanceStatus = event.target.formGridAttendanceStatus.value;\n    let attendanceDescription = event.target.formGridAttendanceDescription.value;\n\n    if (attendanceDate.trim().length === 0) {\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      attendanceDate = this.context.selectedUser.attendanceDate;\n    }\n    if (attendanceStatus.trim().length === 0) {\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      attendanceStatus = this.context.selectedUser.attendanceStatus;\n    }\n    if (attendanceDescription.trim().length === 0) {\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      attendanceDescription = this.context.selectedUser.attendanceDescription;\n    }\n\n      const requestBody = {\n        query:`\n          mutation {updateUserAttendance(userId:\"${userId}\", selectedUserId:\"${userId}\",userInput:{attendanceDate:\"${attendanceDate}\",attendanceStatus:\"${attendanceStatus}\",attendanceDescription:\"${attendanceDescription}\"})\n          {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n        `};\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }})\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          const updatedUserId = resData.data.updateUserAttendance._id;\n          const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n          const updatedUserPos = this.state.users.indexOf(updatedUser);\n          const slicedArray = this.state.users.splice(updatedUserPos, 1);\n          this.state.users.push(resData.data.updateUserAttendance);\n          this.context.users = this.state.users;\n          const responseAlert = JSON.stringify(resData.data).slice(2,25);\n          this.setState({ userAlert: responseAlert})\n          this.getThisUser();\n        })\n        .catch(err => {\n          this.setState({userAlert: err});\n        });\n  };\n\n  updateUserLeaveHandler = (event) => {\n    const token = this.context.token;\n    const userId = this.context.userId;\n    let selectedUserId = this.context.selectedUser._id;\n    if(userId !== selectedUserId && this.context.user.role !== 'admin') {\n      this.setState({userAlert: \"Not the creator or Admin! No edit permission!!\"});\n      selectedUserId = null;\n    }\n\n    this.setState({ updating: false , userUpdateField: null, userAlert: \"Adding Leave for selected Staff...\" });\n\n    let leaveType = event.target.formGridLeaveType.value;\n    let leaveTitle = event.target.formGridLeaveTitle.value;\n    let leaveStartDate = event.target.formGridLeaveStartDate.value;\n    if (event.target.formGridLeaveStartDateTodayCheckbox.checked === true) {\n      leaveStartDate = new Date().toISOString().slice(0,10);\n    }\n\n    let leaveEndDate = event.target.formGridLeaveEndDate.value;\n    if (event.target.formGridLeaveEndDateTodayCheckbox.checked === true) {\n      leaveEndDate = new Date().toISOString().slice(0,10);\n    }\n\n    if (leaveType.trim().length === 0) {\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      leaveType = this.context.selectedUser.leaveType;\n    }\n    if (leaveTitle.trim().length === 0) {\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      leaveTitle = this.context.selectedUser.leaveTitle;\n    }\n    if (leaveStartDate.trim().length === 0) {\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      leaveStartDate = this.context.selectedUser.leaveStartDate;\n    }\n    if (leaveEndDate.trim().length === 0) {\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      leaveEndDate = this.context.selectedUser.leaveEndDate;\n    }\n\n    const requestBody = {\n      query:`\n        mutation {updateUserLeave(userId:\"${userId}\", selectedUserId:\"${userId}\",userInput:{leaveType:\"${leaveType}\",leaveTitle:\"${leaveTitle}\",leaveStartDate:\"${leaveStartDate}\",leaveEndDate:\"${leaveEndDate}\"})\n        {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n      `};\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }})\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const updatedUserId = resData.data.updateUserLeave._id;\n        const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n        const updatedUserPos = this.state.users.indexOf(updatedUser);\n        const slicedArray = this.state.users.splice(updatedUserPos, 1);\n        this.state.users.push(resData.data.updateUserLeave);\n        this.context.users = this.state.users;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert})\n        this.getThisUser();\n      })\n      .catch(err => {\n        this.setState({userAlert: err});\n      });\n  };\n\n  updateUserAttachmentHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n\n  this.setState({ updating: false , userUpdateField: null, userAlert: \"Adding Attachment to selected Staff...\" });\n\n  let attachmentFormat = event.target.formGridAttachmentFormat.value;\n  let attachmentPath = \"uploads/staff/\"+userId+\"/attachments\";\n  let file = AuthContext._currentValue.file;\n\n  const config = {\n    bucketName: this.context.creds.s3.bucketName,\n    dirName: attachmentPath,\n    region: this.context.creds.s3.region,\n    accessKeyId: this.context.creds.s3.accessKeyId,\n    secretAccessKey: this.context.creds.s3.secretAccessKey,\n  }\n  const ReactS3Client = new S3(config);\n  const newFileName = file.name;\n  const attachmentName = newFileName;\n\n  ReactS3Client\n      .uploadFile(file, newFileName)\n      .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n      .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n  if (\n    attachmentName.trim().length === 0 ||\n    attachmentFormat.trim().length === 0 ||\n    attachmentPath.trim().length === 0\n) {\n    this.setState({ userAlert: \"blank fields detected!!! try again\"});\n    return\n  }\n\n    this.setState({userAlert: \"adding user attachment item...\"})\n\n    const requestBody = {\n      query:`\n        mutation{updateUserAttachment(userId:\"${userId}\",selectedUserId:\"${userId}\",userInput:{attachmentName:\"${attachmentName}\",attachmentFormat:\"${attachmentFormat}\",attachmentPath:\"${attachmentPath}\"})\n        {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n      `};\n\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const updatedUserId = resData.data.updateUserAttachment._id;\n        const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n        const updatedUserPos = this.state.users.indexOf(updatedUser);\n        const slicedArray = this.state.users.splice(updatedUserPos, 1);\n        this.state.users.push(resData.data.updateUserAttachment);\n        this.context.users = this.state.users;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert})\n        this.getThisUser();\n        this.setState({ userAlert: \"uploading ttachment...\" });\n      })\n      .catch(err => {\n        this.setState({userAlert: err});\n      });\n}\n\n\n  getThisUser() {\n    this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n      query {getThisUser\n        {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n        `};\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }})\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const thisUser = resData.data.getThisUser;\n        this.context.user = thisUser;\n        if (this.isActive) {\n          this.setState({ user: thisUser, isLoading: false });\n        }\n      })\n      .catch(err => {\n        this.setState({userAlert: err});\n        if (this.isActive) {\n          this.setState({ isLoading: false });\n        }\n      });\n  }\n\n  getCreds() {\n    this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n      query {getCreds\n        {atlas{user,pw,db},s3{bucketName,region,accessKeyId,secretAccessKey},jwt{encode},gdrive{clientId,developerKey}}}\n        `};\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }})\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const creds = resData.data.getCreds;\n        if (this.isActive) {\n          this.setState({ isLoading: false });\n          this.context.creds = creds;\n        }\n      })\n      .catch(err => {\n        this.setState({userAlert: err});\n        if (this.isActive) {\n          this.setState({ isLoading: false });\n        }\n      });\n  }\n\n\n  modalCancelHandler = () => {\n    this.setState({ updating: false  });\n  };\n\n\n  deleteUserAttendanceItem = (props) => {\n\n    let token = this.context.token;\n    let userId = this.context.userId;\n    let date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n\n    const requestBody = {\n      query:`\n       mutation{deleteUserAttendance(userId:\"${userId}\",selectedUserId:\"${userId}\",attendanceDate:\"${date}\")\n       {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}\n      }\n     `};\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n    .then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n      return res.json();\n    })\n    .then(resData => {\n      // const updatedUserId = resData.data.deleteUserAttendance._id;\n      console.log(JSON.stringify(resData.data.deleteUserAttendance));\n      // const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n      // const updatedUserPos = this.state.users.indexOf(updatedUser);\n      // const slicedArray = this.state.users.splice(updatedUserPos, 1);\n      // this.state.users.push(resData.data.deleteUserAttendance);\n      // this.context.users = this.state.users;\n      const responseAlert = JSON.stringify(resData.data.deleteUserAttendance).slice(2,25);\n      this.getThisUser();\n      this.setState({ userAlert: responseAlert, user: resData.data.deleteUserAttendance })\n      return\n    })\n    .catch(err => {\n      this.setState({userAlert: err});\n    });\n  }\n\n  deleteUserLeaveItem = (props) => {\n\n    let token = this.context.token;\n    let userId = this.context.userId;\n\n    const requestBody = {\n      query:`\n       mutation{deleteUserLeave(userId:\"${userId}\",selectedUserId:\"${userId}\",leaveTitle:\"${props.title}\")\n       {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n    `};\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const updatedUserId = resData.data.deleteUserLeave._id;\n        const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n        const updatedUserPos = this.state.users.indexOf(updatedUser);\n        const slicedArray = this.state.users.splice(updatedUserPos, 1);\n        this.state.users.push(resData.data.deleteUserLeave);\n        this.context.users = this.state.users;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert})\n      })\n      .catch(err => {\n        this.setState({userAlert: err});\n      });\n  }\n\n  deleteUserAttachmentItem = (props) => {\n\n    let token = this.context.token;\n    let userId = this.context.userId;\n\n      //   const config = {\n      //     bucketName: this.context.creds.s3.bucketName,\n      //     dirName: props.path,\n      //     region: this.context.creds.s3.region,\n      //     accessKeyId: this.context.creds.s3.accessKeyId,\n      //     secretAccessKey: this.context.creds.s3.secretAccessKey,\n      //   }\n      // const ReactS3Client = new S3(config);\n      // const filename = props.name;\n      // // const attachmentName = newFileName;\n      // //\n      // S3FileUpload\n      // .deleteFile(filename, config)\n      // .then(response => console.log(response))\n      // .catch(err => console.error(err))\n\n      const requestBody = {\n        query:`\n         mutation{deleteUserAttachment(userId:\"${userId}\",selectedUserId:\"${userId}\",attachmentName:\"${props.name}\")\n         {_id,email,password,name,dob,address{number,street,town,parish,postOffice},phone,role,employmentDate,terminationDate,attachments{name,format,path},attendance{date,status,description},leave{type,title,startDate,endDate}}}\n      `};\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          const updatedUserId = resData.data.deleteUserAttachment._id;\n          const updatedUser = this.state.users.find(e => e._id === updatedUserId);\n          const updatedUserPos = this.state.users.indexOf(updatedUser);\n          const slicedArray = this.state.users.splice(updatedUserPos, 1);\n          this.state.users.push(resData.data.deleteUserAttachment);\n          this.context.users = this.state.users;\n          const responseAlert = JSON.stringify(resData.data).slice(2,25);\n          this.setState({ userAlert: responseAlert});\n          this.getThisUser();\n        })\n        .catch(err => {\n          this.setState({ userAlert: err });\n        });\n  }\n\n\n  updateUserSpecialProfile (event) {\n\n    const field = event.target.value;\n    this.setState({ userUpdateField: field});\n  }\n\n  onViewAttachment = (attachment) => {\n\n      const file = \"https://ent-emr-bucket.s3-us-east-2.amazonaws.com/\"+attachment.path+\"/\"+attachment.name+\".\"+attachment.format;\n      const type = attachment.format;\n      this.setState({showThisAttachmentFile: file, showThisAttachmentType: type, showAttachment: true })\n  }\n\n  closeAttachmentView = () => {\n      this.setState({showAttachment: false})\n  }\n\n  createPdf = (user) => {\n\n      const pdfData = {\n          title: \"This pdf is supplied with your profile data...\",\n          user: {\n            _id: user._id,\n            email: user.email,\n            password: user.password,\n            name: user.name,\n            dob: user.dob,\n            address:{\n              number: user.address.number,\n              street: user.address.street,\n              town: user.address.town,\n              parish: user.address.parish,\n              postOffice: user.address.postOffice,\n            },\n            phone: user.phone,\n            role: user.role,\n            employmentDate: user.employmentDate,\n            terminationDate: user.terminationDate,\n            attachments: user.attachments,\n            attendance: user.atttendance,\n            leave: user.leave\n          }\n      };\n    this.setState({createPdf: true, pdfData: pdfData})\n  }\n\n  closePdfCreator = () => {\n      this.setState({createPdf: false, pdfData: null})\n  }\n\n  showSidebar = () => {\n    console.log(`\n      showing sidebar...\n      `);\n      this.setState({\n        sidebarShow: true,\n        mCol2Size: 9\n      })\n  }\n\n  hideSidebar = () => {\n    console.log(`\n      hiding sidebar...\n      `);\n      this.setState({\n        sidebarShow: false,\n        mCol2Size: 11\n      })\n  }\n\n\n  componentWillUnmount() {\n    this.isActive = false;\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n\n      {this.state.showAttachment === true && (\n        <AttachmentViewer\n          onCloseAttachmentView={this.closeAttachmentView}\n          attachmentFile={this.state.showThisAttachmentFile}\n          attachmentType={this.state.showThisAttachmentType}\n        />\n      )}\n      {this.state.creatingDocument === true && (\n        <PdfCreator\n          pdfType={this.state.pdfType}\n          pdfData={this.state.pdfData}\n          onClosePdfCreator={this.closePdfCreator}\n        />\n      )}\n      <AlertBox\n        authUserId={this.context.userId}\n        alert={this.state.userAlert}\n      />\n      <SidebarControl\n        onShowSidebar={this.showSidebar}\n        onHideSidebar={this.hideSidebar}\n      />\n      {this.state.overlay === true && (\n        <LoadingOverlay\n          status={this.state.overlayStatus}\n        />\n      )}\n\n      <Row>\n\n      {this.state.sidebarShow === true && (\n        <Col md={3} className=\"MasterCol1\">\n        <SidebarPage\n          you={this.state.user}\n        />\n        </Col>\n      )}\n\n      <Col md={this.state.mCol2Size} className=\"MasterCol2\">\n        <Container className=\"containerProfile\">\n\n        <Tab.Container id=\"left-tabs-example\" defaultActiveKey=\"Detail\">\n          <Row>\n            <Col sm={2}>\n              <Nav variant=\"pills\" className=\"flex-column\">\n                <Nav.Item>\n                  <Nav.Link eventKey=\"Detail\">You</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey=\"disabled\" disabled>Edit:</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey=\"Demographics\">Demographics</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey=\"userEditField\">Single Field</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey=\"disabled\" disabled>Add:</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey=\"Attandance\">Attendance</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey=\"Attachment\">Attachment</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey=\"Leave\">Leave</Nav.Link>\n                </Nav.Item>\n              </Nav>\n            </Col>\n            <Col sm={10}>\n              <Tab.Content>\n                <Tab.Pane eventKey=\"Detail\">\n                  {this.state.user !== null && (\n                      <ThisUserProfile\n                        user={this.state.user}\n                        authUserId={this.context.userId}\n                        canDelete={this.state.canDelete}\n                        attendanceDelete={this.deleteUserAttendanceItem}\n                        leaveDelete={this.deleteUserLeaveItem}\n                        attachmentDelete={this.deleteUserAttachmentItem}\n                        onViewAttachment={this.onViewAttachment}\n                        onCreatePdf={this.createPdf}\n                      />\n                    )}\n                </Tab.Pane>\n\n                <Tab.Pane eventKey=\"Demographics\">\n                  <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" onClick={this.startUpdateUserHandler}>Edit Demographics</Button>\n                  {this.state.updating === true &&\n                    this.state.user !== null && (\n                    <UpdateUserForm\n                    canCancelProfile\n                      canConfirm\n                      onCancel={this.modalCancelHandler}\n                      onConfirm={this.modalConfirmUpdateHandler}\n                      confirmText=\"Confirm\"\n                      user={this.state.user}\n                      authUserId={this.context.userId}\n                    />\n                  )}\n                </Tab.Pane>\n\n                <Tab.Pane eventKey=\"userEditField\">\n                  {this.state.user !== null && (\n                    <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" onClick={this.startUpdateUserHandler}>Edit a Single Field</Button>\n                  )}\n                  {this.state.updating &&\n                    this.state.user !== null\n                    && (\n                      <UpdateUserFieldForm\n                        authUserId={this.context.userId}\n                        canCancel\n                        canConfirm\n                        onCancel={this.modalCancelHandler}\n                        onConfirm={this.modalConfirmUpdateFieldHandler}\n                        confirmText=\"Confirm\"\n                        user={this.state.user}\n                      />\n                  )}\n                </Tab.Pane>\n\n                <Tab.Pane eventKey=\"Attandance\">\n                  <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" value='attendance' onClick={this.updateUserSpecialProfile.bind(this)}>Add Attendance</Button>\n                  {this.state.userUpdateField === 'attendance' && (\n                    <UpdateUserAttendanceForm\n                    authUserId={this.context.userId}\n                    canCancelProfile\n                      canConfirm\n                      onCancel={this.modalCancelHandler}\n                      onConfirm={this.updateUserAttendanceHandler}\n                      confirmText=\"Confirm\"\n                      user={this.state.user}\n                    />\n                  )}\n                </Tab.Pane>\n\n                <Tab.Pane eventKey=\"Attachment\">\n                  <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" value='attachments' onClick={this.updateUserSpecialProfile.bind(this)}>Add Attachment</Button>\n                  {this.state.userUpdateField === 'attachments' && (\n                    <UpdateUserAttachmentForm\n                    authUserId={this.context.userId}\n                    canCancelProfile\n                      canConfirm\n                      onCancel={this.modalCancelHandler}\n                      onConfirm={this.updateUserAttachmentHandler}\n                      confirmText=\"Confirm\"\n                      user={this.state.user}\n                    />\n                  )}\n                </Tab.Pane>\n\n                <Tab.Pane eventKey=\"Leave\">\n                  <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" value='leave' onClick={this.updateUserSpecialProfile.bind(this)}>Add Leave</Button>\n                  {this.state.userUpdateField === 'leave' && (\n                    <UpdateUserLeaveForm\n                    authUserId={this.context.userId}\n                    canCancelProfile\n                      canConfirm\n                      onCancel={this.modalCancelHandler}\n                      onConfirm={this.updateUserLeaveHandler}\n                      confirmText=\"Confirm\"\n                      user={this.state.user}\n                    />\n                  )}\n                </Tab.Pane>\n              </Tab.Content>\n            </Col>\n          </Row>\n        </Tab.Container>\n        </Container>\n      </Col>\n      </Row>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default ThisUserPage;\n"]},"metadata":{},"sourceType":"module"}