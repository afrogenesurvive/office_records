{"ast":null,"code":"var _jsxFileName = \"/Users/pedrojacob/Downloads/AMR/websites/office_records/ENT_EMR/frontend/src/pages/Appointments.js\";\nimport React, { Component } from 'react'; // import Form from 'react-bootstrap/Form';\n// import Button from 'react-bootstrap/Button';\n// import Modal from '../components/Modal/Modal';\n// import Backdrop from '../components/Backdrop/Backdrop';\n\nimport AppointmentList from '../components/Appointments/AppointmentList/AppointmentList';\nimport AppointmentDetail from '../components/Appointments/AppointmentDetail';\nimport PatientDetail from '../components/Patients/PatientDetail';\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\nimport CreateAppointmentForm from '../components/Forms/CreateAppointmentForm';\nimport UpdateAppointmentForm from '../components/Forms/UpdateAppointmentForm';\nimport './Users.css';\n\nclass AppointmentsPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      creating: false,\n      updating: false,\n      deleting: false,\n      appointments: [],\n      isLoading: false,\n      selectedAppointment: null\n    };\n    this.isActive = true;\n\n    this.startCreateAppointmentHandler = () => {\n      this.setState({\n        creating: true\n      });\n      console.log(\"CreateAppointmentForm...\");\n    };\n\n    this.startUpdateAppointmentHandler = () => {\n      this.setState({\n        updating: true\n      });\n      console.log(\"UpdateAppointmentForm...\");\n    };\n\n    this.modalConfirmHandler = event => {\n      console.log(\"CreateAppointmentFormData:  \", event.target.formGridTitle.value);\n      this.setState({\n        creating: false\n      });\n      const userId = this.context.userId;\n      const patientId = this.context.selectedPatient._id;\n      console.log(\"\\n        userId: \".concat(userId, \"\\n        patientId: \").concat(patientId, \"\\n      \"));\n      const title = event.target.formGridTitle.value;\n      const type = event.target.formGridType.value;\n      const date = event.target.formGridDate.value;\n      const location = event.target.formGridLocation.value;\n      const description = event.target.formGridDescription.value;\n      const inProgress = event.target.formGridInProgress.value;\n      const attended = event.target.formGridAttended.value;\n      const important = event.target.formGridImportant.value;\n      const notes = event.target.formGridNotes.value;\n\n      if (title.trim().length === 0 || type.trim().length === 0 || date.trim().length === 0 || location.trim().length === 0 || description.trim().length === 0 || inProgress.trim().length === 0 || attended.trim().length === 0 || important.trim().length === 0 || notes.trim().length === 0) {\n        console.log(\"blank fields detected!!!...Please try again...\");\n        return;\n      }\n\n      const appointment = {\n        title,\n        type,\n        date,\n        location,\n        description,\n        inProgress,\n        attended,\n        important,\n        notes\n      };\n      console.log(\"creating appointment... \", JSON.stringify(appointment));\n      const requestBody = {\n        query: \"\\n          mutation createAppointment($userId: ID!, $patientId: ID!, $title: String!, $type: String!, $date: String!, $location: String!, $description: String!, $inProgress: Boolean!, $attended: Boolean!, $important: Boolean!, $notes: String!) {\\n            createAppointment(userId: $userId, patientId: $patientId, appointmentInput: { title: $title, type: $type, date: $date, location: $location, description: $description, inProgress: $inProgress, attended: $attended, important: $important, notes: $notes }) {\\n              _id\\n              title\\n              type\\n              date\\n              location\\n              description\\n              patient\\n              {\\n                name\\n                dob\\n                address\\n              }\\n              inProgress\\n              attended\\n              important\\n              notes\\n            }\\n          }\\n        \",\n        variables: {\n          userId: userId,\n          patientId: patientId,\n          title: title,\n          type: type,\n          date: date,\n          location: location,\n          description: description,\n          inProgress: inProgress,\n          attended: attended,\n          important: important,\n          notes: notes\n        }\n      };\n      const token = this.context.token;\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n        this.setState(prevState => {\n          const updatedAppointments = [...prevState.appointments];\n          updatedAppointments.push({\n            _id: resData.data.createAppointment._id,\n            title: resData.data.createAppointment.title,\n            type: resData.data.createAppointment.type,\n            date: resData.data.createAppointment.date,\n            location: resData.data.createAppointment.location,\n            description: resData.data.createAppointment.description,\n            patient: resData.data.createAppointment.patient,\n            inProgress: resData.data.createAppointment.inProgress,\n            attended: resData.data.createAppointment.attended,\n            important: resData.data.createAppointment.important,\n            notes: resData.data.createAppointment.notes\n          });\n          return {\n            appointments: updatedAppointments\n          };\n        });\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.modalCancelHandler = () => {\n      this.setState({\n        creating: false,\n        updating: false,\n        selectedAppointment: null\n      });\n    };\n\n    this.modalConfirmUpdateHandler = event => {\n      if (this.context.user.role !== 'admin') {\n        console.log(\"Not the Admin! No edit permission!!\");\n      }\n\n      const userId = this.context.userId;\n      const appointmentId = this.context.selectedAppointment._id; // const patientId = this.context.selectedPatientId;\n\n      console.log(\"\\n        userId: \".concat(userId, \"\\n        appointmentd: \").concat(appointmentId, \"\\n      \")); // console.log(\"UpdateUserFormData:  \", event);\n\n      console.log(\"UpdateAppointmentFormData:  \", event.target.formGridTitle.value);\n      this.setState({\n        updating: false\n      });\n      let title = event.target.formGridTitle.value;\n      let type = event.target.formGridType.value;\n      let date = event.target.formGridDate.value;\n      let location = event.target.formGridLocation.value;\n      let description = event.target.formGridDescription.value;\n      let inProgress = event.target.formGridInProgress.value;\n      let attended = event.target.formGridAttended.value;\n      let important = event.target.formGridImportant.value;\n      let notes = event.target.formGridNotes.value;\n\n      if (title.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        title = this.context.selectedAppointment.title; // return;\n      }\n\n      if (type.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        type = this.context.selectedAppointment.type;\n      }\n\n      if (date.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        date = this.context.selectedAppointment.date;\n      }\n\n      if (location.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        location = this.context.selectedAppointment.location;\n      }\n\n      if (description.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        description = this.context.selectedAppointment.description;\n      }\n\n      if (inProgress.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        inProgress = this.context.selectedAppointment.inProgress;\n      }\n\n      if (attended.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        attended = this.context.selectedAppointment.attended;\n      }\n\n      if (important.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        important = this.context.selectedAppointment.important;\n      }\n\n      if (notes.trim().length === 0) {\n        console.log(\"blank fields detected!!!...filling w/ previous data...\");\n        notes = this.context.selectedAppointment.notes;\n      }\n\n      const appointment = {\n        title,\n        type,\n        date,\n        location,\n        description,\n        inProgress,\n        attended,\n        important,\n        notes\n      };\n      console.log(\"updating appointment... \" + JSON.stringify(appointment));\n      const requestBody = {\n        query: \"\\n          mutation UpdateAppointment($userId: ID!, $appointmentId: ID, $title: String!, $type: String!, $date: String!, $location: String!, $description: String!, $inProgress: Boolean!, $attended: Boolean!, $important: Boolean!, $notes: String!) {\\n            updateAppointment(userId: $userId, appointmentId: $appointmentId, appointmentInput: { title: $title, type: $type, date: $date, location: $location, description: $description, inProgress: $inProgress, attended: $attended, important: $important, notes: $notes }) {\\n              _id\\n              title\\n              type\\n              date\\n              location\\n              description\\n              inProgress\\n              attended\\n              important\\n              notes\\n            }\\n          }\\n        \",\n        variables: {\n          userId: userId,\n          appointmentId: appointmentId,\n          title: title,\n          type: type,\n          date: date,\n          location: location,\n          description: description,\n          inProgress: inProgress,\n          attended: attended,\n          important: important,\n          notes: notes\n        }\n      };\n      const token = this.context.token;\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n        const updatedAppointmentId = resData.data.updateAppointment._id;\n        const updatedAppointment = this.state.appointments.find(e => e._id === updatedAppointmentId);\n        const updatedAppointmentPos = this.state.appointments.indexOf(updatedAppointment);\n        const slicedArray = this.state.appointments.splice(updatedAppointmentPos, 1);\n        console.log(\"updatedAppointment:  \", JSON.stringify(updatedAppointment), \"  updatedPatientPos:  \", updatedAppointmentPos, \"  slicedArray:  \", slicedArray);\n        this.state.appointments.push({\n          _id: resData.data.updateAppointment._id,\n          title: resData.data.updateAppointment.title,\n          type: resData.data.updateAppointment.type,\n          date: resData.data.updateAppointment.date,\n          location: resData.data.updateAppointment.location,\n          description: resData.data.updateAppointment.description,\n          patient: resData.data.updateAppointment.patient,\n          inProgress: resData.data.updateAppointment.inProgress,\n          attended: resData.data.updateAppointment.attended,\n          important: resData.data.updateAppointment.important,\n          notes: resData.data.updateAppointment.notes\n        });\n        this.fetchAppointments();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.modalCancelHandler = () => {\n      this.setState({\n        creating: false,\n        updating: false,\n        selectedAppointment: null\n      });\n    };\n\n    this.modalDeleteHandler = () => {\n      console.log(\"deleting appointment...selectedAppointment:  \", this.context.selectedAppointment);\n      const selectedAppointmentId = this.context.selectedAppointment._id;\n\n      if (this.context.user.role !== 'admin') {\n        console.log(\"Not the Admin! No edit permission!!\");\n      }\n\n      this.setState({\n        deleting: true\n      });\n      const requestBody = {\n        query: \"\\n          mutation DeleteAppointment($userId: ID!, $appointmentId: ID!) {\\n            deleteAppointment(userId: $userId, appointmentId: $appointmentId) {\\n              _id\\n              title\\n              type\\n              date\\n              location\\n              description\\n              patient\\n              {\\n                name\\n                dob\\n                address\\n              }\\n              inProgress\\n              attended\\n              important\\n              notes\\n            }\\n          }\\n        \",\n        variables: {\n          userId: this.context.userId,\n          appointmentId: selectedAppointmentId\n        }\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + this.context.token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"resData:  \", resData); // console.log(\"resData.data.deleteAppointment:  \", resData.data.deleteAppointment);\n\n        let deletedAppointment = resData.data.deleteAppointment;\n        console.log(deletedAppointment);\n        let deletedAppointmentId = deletedAppointment._id;\n        deletedAppointment = this.state.appointments.find(e => e._id === deletedAppointmentId);\n        const deletedAppointmentPos = this.state.appointments.indexOf(deletedAppointment);\n        const slicedArray = this.state.appointments.splice(deletedAppointmentPos, 1);\n        console.log(\"deletedAppointment:  \", JSON.stringify(deletedAppointment), \"  deletedUserPos:  \", deletedAppointmentPos, \"  slicedArray:  \", slicedArray);\n        this.setState({\n          deleting: false\n        });\n        this.fetchAppointments();\n      }).catch(err => {\n        console.log(err);\n\n        if (this.isActive) {\n          this.setState({\n            deleting: false\n          });\n        }\n      });\n    };\n\n    this.showDetailHandler = appointmentId => {\n      this.setState(prevState => {\n        const selectedAppointment = prevState.appointments.find(e => e._id === appointmentId);\n        this.context.selectedAppointment = selectedAppointment;\n        console.log(\"selectedAppointment:  \", selectedAppointment);\n        return {\n          selecteAppointment: selectedAppointment\n        };\n      });\n    };\n\n    this.titleELRef = React.createRef();\n    this.typeELRef = React.createRef();\n    this.dateELRef = React.createRef();\n    this.locationELRef = React.createRef();\n    this.descriptionELRef = React.createRef();\n    this.patientELRef = React.createRef();\n    this.inProgressELRef = React.createRef();\n    this.attendedELRef = React.createRef();\n    this.importantELRef = React.createRef();\n    this.notesELRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.fetchAppointments();\n  }\n\n  fetchAppointments() {\n    console.log(\"'fetch appointments function' context object... \" + JSON.stringify(this.context));\n    const userId = this.context.userId;\n    this.setState({\n      isLoading: true\n    });\n    const requestBody = {\n      query: \"\\n          query appointments($userId: ID!) {\\n            appointments(userId: $userId) {\\n              _id\\n              title\\n              type\\n              date\\n              location\\n              description\\n              patient\\n              {\\n                name\\n                dob\\n                address\\n              }\\n              inProgress\\n              attended\\n              important\\n              notes\\n            }\\n          }\\n        \",\n      variables: {\n        userId: userId\n      }\n    };\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    }).then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n\n      return res.json();\n    }).then(resData => {\n      const appointments = resData.data.appointments;\n      console.log(appointments);\n\n      if (this.isActive) {\n        this.setState({\n          appointments: appointments,\n          isLoading: false\n        });\n      }\n    }).catch(err => {\n      console.log(err);\n\n      if (this.isActive) {\n        this.setState({\n          isLoading: false\n        });\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    this.isActive = false;\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 506\n      },\n      __self: this\n    }, this.state.creating && React.createElement(CreateAppointmentForm, {\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmHandler,\n      onSubmit: this.modalConfirmHandler,\n      confirmText: \"Confirm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 509\n      },\n      __self: this\n    }), this.state.updating && React.createElement(UpdateAppointmentForm, {\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmUpdateHandler,\n      confirmText: \"Confirm\",\n      appointment: this.context.selectedAppointment,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 519\n      },\n      __self: this\n    }), this.state.isLoading === false && React.createElement(AppointmentDetail, {\n      canDelete: true,\n      authUserId: this.context.userId,\n      appointment: this.context.selectedAppointment,\n      onEdit: this.startUpdateAppointmentHandler,\n      onDelete: this.modalDeleteHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 529\n      },\n      __self: this\n    }), this.state.isLoading === false && React.createElement(PatientDetail, {\n      authUserId: this.context.userId,\n      patient: this.context.selectedPatient,\n      className: \"PatientDetailBox2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 537\n      },\n      __self: this\n    }), this.context.token && React.createElement(\"div\", {\n      className: \"users-control\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 543\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 544\n      },\n      __self: this\n    }, \"Add New Appointment\"), React.createElement(\"button\", {\n      className: \"btn\",\n      onClick: this.startCreateAppointmentHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 545\n      },\n      __self: this\n    }, \"+\")), this.state.isLoading ? React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 551\n      },\n      __self: this\n    }) : React.createElement(AppointmentList, {\n      appointments: this.state.appointments,\n      authUserId: this.context.userId,\n      onViewDetail: this.showDetailHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 553\n      },\n      __self: this\n    }));\n  }\n\n}\n\nAppointmentsPage.contextType = AuthContext;\nexport default AppointmentsPage;","map":{"version":3,"sources":["/Users/pedrojacob/Downloads/AMR/websites/office_records/ENT_EMR/frontend/src/pages/Appointments.js"],"names":["React","Component","AppointmentList","AppointmentDetail","PatientDetail","Spinner","AuthContext","CreateAppointmentForm","UpdateAppointmentForm","AppointmentsPage","constructor","props","state","creating","updating","deleting","appointments","isLoading","selectedAppointment","isActive","startCreateAppointmentHandler","setState","console","log","startUpdateAppointmentHandler","modalConfirmHandler","event","target","formGridTitle","value","userId","context","patientId","selectedPatient","_id","title","type","formGridType","date","formGridDate","location","formGridLocation","description","formGridDescription","inProgress","formGridInProgress","attended","formGridAttended","important","formGridImportant","notes","formGridNotes","trim","length","appointment","JSON","stringify","requestBody","query","variables","token","fetch","method","body","headers","Authorization","then","res","status","Error","json","resData","prevState","updatedAppointments","push","data","createAppointment","patient","catch","err","modalCancelHandler","modalConfirmUpdateHandler","user","role","appointmentId","updatedAppointmentId","updateAppointment","updatedAppointment","find","e","updatedAppointmentPos","indexOf","slicedArray","splice","fetchAppointments","modalDeleteHandler","selectedAppointmentId","deletedAppointment","deleteAppointment","deletedAppointmentId","deletedAppointmentPos","showDetailHandler","selecteAppointment","titleELRef","createRef","typeELRef","dateELRef","locationELRef","descriptionELRef","patientELRef","inProgressELRef","attendedELRef","importantELRef","notesELRef","componentDidMount","componentWillUnmount","render","contextType"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n// import Form from 'react-bootstrap/Form';\n// import Button from 'react-bootstrap/Button';\n\n// import Modal from '../components/Modal/Modal';\n// import Backdrop from '../components/Backdrop/Backdrop';\nimport AppointmentList from '../components/Appointments/AppointmentList/AppointmentList';\nimport AppointmentDetail from '../components/Appointments/AppointmentDetail';\nimport PatientDetail from '../components/Patients/PatientDetail';\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\n\nimport CreateAppointmentForm from '../components/Forms/CreateAppointmentForm';\nimport UpdateAppointmentForm from '../components/Forms/UpdateAppointmentForm';\nimport './Users.css';\n\nclass AppointmentsPage extends Component {\n  state = {\n    creating: false,\n    updating: false,\n    deleting: false,\n    appointments: [],\n    isLoading: false,\n    selectedAppointment: null\n  };\n  isActive = true;\n\n  static contextType = AuthContext;\n\n  constructor(props) {\n    super(props);\n    this.titleELRef = React.createRef();\n    this.typeELRef = React.createRef();\n    this.dateELRef = React.createRef();\n    this.locationELRef = React.createRef();\n    this.descriptionELRef = React.createRef();\n    this.patientELRef = React.createRef();\n    this.inProgressELRef = React.createRef();\n    this.attendedELRef = React.createRef();\n    this.importantELRef = React.createRef();\n    this.notesELRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.fetchAppointments();\n  }\n\n\n  startCreateAppointmentHandler = () => {\n    this.setState({ creating: true });\n    console.log(\"CreateAppointmentForm...\");\n  };\n  startUpdateAppointmentHandler = () => {\n    this.setState({ updating: true });\n    console.log(\"UpdateAppointmentForm...\");\n  };\n\n  modalConfirmHandler = (event) => {\n\n    console.log(\"CreateAppointmentFormData:  \", event.target.formGridTitle.value);\n\n    this.setState({ creating: false });\n    const userId = this.context.userId;\n    const patientId = this.context.selectedPatient._id;\n    console.log(`\n        userId: ${userId}\n        patientId: ${patientId}\n      `);\n\n    const title = event.target.formGridTitle.value;\n    const type = event.target.formGridType.value;\n    const date = event.target.formGridDate.value;\n    const location = event.target.formGridLocation.value;\n    const description = event.target.formGridDescription.value;\n    const inProgress = event.target.formGridInProgress.value;\n    const attended = event.target.formGridAttended.value;\n    const important = event.target.formGridImportant.value;\n    const notes = event.target.formGridNotes.value;\n    if (\n      title.trim().length === 0 ||\n      type.trim().length === 0 ||\n      date.trim().length === 0 ||\n      location.trim().length === 0 ||\n      description.trim().length === 0 ||\n      inProgress.trim().length === 0 ||\n      attended.trim().length === 0 ||\n      important.trim().length === 0 ||\n      notes.trim().length === 0\n    ) {\n      console.log(\"blank fields detected!!!...Please try again...\");\n      return;\n    }\n\n    const appointment = { title, type, date, location, description, inProgress, attended, important, notes };\n    console.log(\"creating appointment... \" ,JSON.stringify(appointment));\n\n    const requestBody = {\n      query: `\n          mutation createAppointment($userId: ID!, $patientId: ID!, $title: String!, $type: String!, $date: String!, $location: String!, $description: String!, $inProgress: Boolean!, $attended: Boolean!, $important: Boolean!, $notes: String!) {\n            createAppointment(userId: $userId, patientId: $patientId, appointmentInput: { title: $title, type: $type, date: $date, location: $location, description: $description, inProgress: $inProgress, attended: $attended, important: $important, notes: $notes }) {\n              _id\n              title\n              type\n              date\n              location\n              description\n              patient\n              {\n                name\n                dob\n                address\n              }\n              inProgress\n              attended\n              important\n              notes\n            }\n          }\n        `,\n        variables: {\n          userId: userId,\n          patientId: patientId,\n          title: title,\n          type: type,\n          date: date,\n          location: location,\n          description: description,\n          inProgress: inProgress,\n          attended: attended,\n          important: important,\n          notes: notes\n        }\n    };\n\n    const token = this.context.token;\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n\n        this.setState(prevState => {\n          const updatedAppointments = [...prevState.appointments];\n          updatedAppointments.push(\n            {\n            _id: resData.data.createAppointment._id,\n            title: resData.data.createAppointment.title,\n            type: resData.data.createAppointment.type,\n            date: resData.data.createAppointment.date,\n            location: resData.data.createAppointment.location,\n            description: resData.data.createAppointment.description,\n            patient: resData.data.createAppointment.patient,\n            inProgress: resData.data.createAppointment.inProgress,\n            attended: resData.data.createAppointment.attended,\n            important: resData.data.createAppointment.important,\n            notes: resData.data.createAppointment.notes\n          }\n        );\n\n          return { appointments: updatedAppointments };\n        });\n\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  modalCancelHandler = () => {\n    this.setState({ creating: false, updating: false, selectedAppointment: null });\n  };\n\n\n  modalConfirmUpdateHandler = (event) => {\n\n    if(this.context.user.role !== 'admin') {\n      console.log(\"Not the Admin! No edit permission!!\");\n\n    }\n\n    const userId = this.context.userId;\n    const appointmentId = this.context.selectedAppointment._id;\n    // const patientId = this.context.selectedPatientId;\n    console.log(`\n        userId: ${userId}\n        appointmentd: ${appointmentId}\n      `);\n\n    // console.log(\"UpdateUserFormData:  \", event);\n    console.log(\"UpdateAppointmentFormData:  \", event.target.formGridTitle.value);\n\n\n    this.setState({ updating: false });\n    let title = event.target.formGridTitle.value;\n    let type = event.target.formGridType.value;\n    let date = event.target.formGridDate.value;\n    let location = event.target.formGridLocation.value;\n    let description = event.target.formGridDescription.value;\n    let inProgress = event.target.formGridInProgress.value;\n    let attended = event.target.formGridAttended.value;\n    let important = event.target.formGridImportant.value;\n    let notes = event.target.formGridNotes.value;\n\n    if (title.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      title  = this.context.selectedAppointment.title;\n      // return;\n    }\n    if (type.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      type  = this.context.selectedAppointment.type;\n    }\n    if (date.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      date  = this.context.selectedAppointment.date;\n    }\n    if (location.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      location  = this.context.selectedAppointment.location;\n    }\n    if (description.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      description  = this.context.selectedAppointment.description;\n    }\n    if (inProgress.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      inProgress  = this.context.selectedAppointment.inProgress;\n    }\n    if (attended.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      attended  = this.context.selectedAppointment.attended;\n    }\n    if (important.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      important  = this.context.selectedAppointment.important;\n    }\n    if (notes.trim().length === 0 ) {\n      console.log(\"blank fields detected!!!...filling w/ previous data...\");\n      notes  = this.context.selectedAppointment.notes;\n    }\n\n\n\n    const appointment = { title, type, date, location, description, inProgress, attended, important, notes };\n    console.log(\"updating appointment... \" + JSON.stringify(appointment));\n\n    const requestBody = {\n      query: `\n          mutation UpdateAppointment($userId: ID!, $appointmentId: ID, $title: String!, $type: String!, $date: String!, $location: String!, $description: String!, $inProgress: Boolean!, $attended: Boolean!, $important: Boolean!, $notes: String!) {\n            updateAppointment(userId: $userId, appointmentId: $appointmentId, appointmentInput: { title: $title, type: $type, date: $date, location: $location, description: $description, inProgress: $inProgress, attended: $attended, important: $important, notes: $notes }) {\n              _id\n              title\n              type\n              date\n              location\n              description\n              inProgress\n              attended\n              important\n              notes\n            }\n          }\n        `,\n        variables: {\n          userId: userId,\n          appointmentId: appointmentId,\n          title: title,\n          type: type,\n          date: date,\n          location: location,\n          description: description,\n          inProgress: inProgress,\n          attended: attended,\n          important: important,\n          notes: notes\n        }\n    };\n\n    const token = this.context.token;\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"response data... \" + JSON.stringify(resData));\n\n        const updatedAppointmentId = resData.data.updateAppointment._id;\n        const updatedAppointment = this.state.appointments.find(e => e._id === updatedAppointmentId);\n        const updatedAppointmentPos = this.state.appointments.indexOf(updatedAppointment);\n        const slicedArray = this.state.appointments.splice(updatedAppointmentPos, 1);\n        console.log(\"updatedAppointment:  \", JSON.stringify(updatedAppointment),\"  updatedPatientPos:  \", updatedAppointmentPos, \"  slicedArray:  \", slicedArray);\n\n        this.state.appointments.push(\n          {\n          _id: resData.data.updateAppointment._id,\n          title: resData.data.updateAppointment.title,\n          type: resData.data.updateAppointment.type,\n          date: resData.data.updateAppointment.date,\n          location: resData.data.updateAppointment.location,\n          description: resData.data.updateAppointment.description,\n          patient: resData.data.updateAppointment.patient,\n          inProgress: resData.data.updateAppointment.inProgress,\n          attended: resData.data.updateAppointment.attended,\n          important: resData.data.updateAppointment.important,\n          notes: resData.data.updateAppointment.notes\n        });\n        this.fetchAppointments();\n\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  modalCancelHandler = () => {\n    this.setState({ creating: false, updating: false, selectedAppointment: null });\n  };\n\n\n  fetchAppointments() {\n    console.log(\"'fetch appointments function' context object... \" + JSON.stringify(this.context));\n    const userId = this.context.userId;\n\n    this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n          query appointments($userId: ID!) {\n            appointments(userId: $userId) {\n              _id\n              title\n              type\n              date\n              location\n              description\n              patient\n              {\n                name\n                dob\n                address\n              }\n              inProgress\n              attended\n              important\n              notes\n            }\n          }\n        `,\n        variables: {\n          userId: userId\n        }\n    };\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const appointments = resData.data.appointments;\n        console.log(appointments);\n\n        if (this.isActive) {\n          this.setState({ appointments: appointments, isLoading: false });\n        }\n      })\n      .catch(err => {\n        console.log(err);\n        if (this.isActive) {\n          this.setState({ isLoading: false });\n        }\n      });\n  }\n\n  modalDeleteHandler = () => {\n    console.log(\"deleting appointment...selectedAppointment:  \", this.context.selectedAppointment);\n\n    const selectedAppointmentId = this.context.selectedAppointment._id;\n\n    if(this.context.user.role !== 'admin') {\n      console.log(\"Not the Admin! No edit permission!!\");\n    }\n\n    this.setState({deleting: true});\n\n\n    const requestBody = {\n      query: `\n          mutation DeleteAppointment($userId: ID!, $appointmentId: ID!) {\n            deleteAppointment(userId: $userId, appointmentId: $appointmentId) {\n              _id\n              title\n              type\n              date\n              location\n              description\n              patient\n              {\n                name\n                dob\n                address\n              }\n              inProgress\n              attended\n              important\n              notes\n            }\n          }\n        `,\n        variables: {\n          userId: this.context.userId,\n          appointmentId: selectedAppointmentId\n        }\n    };\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"resData:  \", resData);\n        // console.log(\"resData.data.deleteAppointment:  \", resData.data.deleteAppointment);\n        let deletedAppointment = resData.data.deleteAppointment;\n        console.log(deletedAppointment);\n\n        let deletedAppointmentId = deletedAppointment._id;\n        deletedAppointment = this.state.appointments.find(e => e._id === deletedAppointmentId);\n        const deletedAppointmentPos = this.state.appointments.indexOf(deletedAppointment);\n        const slicedArray = this.state.appointments.splice(deletedAppointmentPos, 1);\n        console.log(\"deletedAppointment:  \", JSON.stringify(deletedAppointment),\"  deletedUserPos:  \", deletedAppointmentPos, \"  slicedArray:  \", slicedArray);\n\n        this.setState({ deleting: false });\n\n        this.fetchAppointments();\n\n      })\n      .catch(err => {\n        console.log(err);\n        if (this.isActive) {\n          this.setState({ deleting: false });\n        }\n      });\n\n\n  }\n\n\n  showDetailHandler = appointmentId => {\n\n    this.setState(prevState => {\n      const selectedAppointment = prevState.appointments.find(e => e._id === appointmentId);\n      this.context.selectedAppointment = selectedAppointment;\n      console.log(\"selectedAppointment:  \", selectedAppointment);\n      return { selecteAppointment: selectedAppointment };\n    });\n  };\n\n\n  componentWillUnmount() {\n    this.isActive = false;\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        {\n          this.state.creating && (\n          <CreateAppointmentForm\n          canCancel\n            canConfirm\n            onCancel={this.modalCancelHandler}\n            onConfirm={this.modalConfirmHandler}\n            onSubmit={this.modalConfirmHandler}\n            confirmText=\"Confirm\"\n          />\n        )}\n        {this.state.updating && (\n          <UpdateAppointmentForm\n          canCancel\n            canConfirm\n            onCancel={this.modalCancelHandler}\n            onConfirm={this.modalConfirmUpdateHandler}\n            confirmText=\"Confirm\"\n            appointment={this.context.selectedAppointment}\n          />\n        )}\n        {this.state.isLoading === false &&\n          (<AppointmentDetail\n            canDelete\n            authUserId={this.context.userId}\n            appointment={this.context.selectedAppointment}\n            onEdit={this.startUpdateAppointmentHandler}\n            onDelete={this.modalDeleteHandler}\n        />)}\n        {this.state.isLoading === false &&\n          (<PatientDetail\n            authUserId={this.context.userId}\n            patient={this.context.selectedPatient}\n            className=\"PatientDetailBox2\"\n        />)}\n        {this.context.token &&\n          (<div className=\"users-control\">\n            <p>Add New Appointment</p>\n            <button className=\"btn\" onClick={this.startCreateAppointmentHandler}>\n              +\n            </button>\n          </div>\n        )}\n        {this.state.isLoading ? (\n          <Spinner />\n        ) : (\n          <AppointmentList\n            appointments={this.state.appointments}\n            authUserId={this.context.userId}\n            onViewDetail={this.showDetailHandler}\n          />\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default AppointmentsPage;\n"]},"metadata":{},"sourceType":"module"}